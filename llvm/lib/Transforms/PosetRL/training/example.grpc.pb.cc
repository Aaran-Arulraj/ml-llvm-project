// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: example.proto

#include "example.pb.h"
#include "example.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace posetrl {

static const char* PosetRL_method_names[] = {
  "/posetrl.PosetRL/getEmbedding",
  "/posetrl.PosetRL/applyAction",
  "/posetrl.PosetRL/applyActionGetEmbeddings",
};

std::unique_ptr< PosetRL::Stub> PosetRL::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PosetRL::Stub> stub(new PosetRL::Stub(channel));
  return stub;
}

PosetRL::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getEmbedding_(PosetRL_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_applyAction_(PosetRL_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_applyActionGetEmbeddings_(PosetRL_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PosetRL::Stub::getEmbedding(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::posetrl::EmbeddingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::posetrl::EmbeddingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getEmbedding_, context, request, response);
}

void PosetRL::Stub::experimental_async::getEmbedding(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::posetrl::EmbeddingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::posetrl::EmbeddingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEmbedding_, context, request, response, std::move(f));
}

void PosetRL::Stub::experimental_async::getEmbedding(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::posetrl::EmbeddingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getEmbedding_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::posetrl::EmbeddingResponse>* PosetRL::Stub::PrepareAsyncgetEmbeddingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::posetrl::EmbeddingResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getEmbedding_, context, request);
}

::grpc::ClientAsyncResponseReader< ::posetrl::EmbeddingResponse>* PosetRL::Stub::AsyncgetEmbeddingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetEmbeddingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosetRL::Stub::applyAction(::grpc::ClientContext* context, const ::posetrl::ActionRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::posetrl::ActionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_applyAction_, context, request, response);
}

void PosetRL::Stub::experimental_async::applyAction(::grpc::ClientContext* context, const ::posetrl::ActionRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::posetrl::ActionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyAction_, context, request, response, std::move(f));
}

void PosetRL::Stub::experimental_async::applyAction(::grpc::ClientContext* context, const ::posetrl::ActionRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PosetRL::Stub::PrepareAsyncapplyActionRaw(::grpc::ClientContext* context, const ::posetrl::ActionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::posetrl::ActionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_applyAction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PosetRL::Stub::AsyncapplyActionRaw(::grpc::ClientContext* context, const ::posetrl::ActionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncapplyActionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PosetRL::Stub::applyActionGetEmbeddings(::grpc::ClientContext* context, const ::posetrl::ActionRequest& request, ::posetrl::EmbeddingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::posetrl::ActionRequest, ::posetrl::EmbeddingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_applyActionGetEmbeddings_, context, request, response);
}

void PosetRL::Stub::experimental_async::applyActionGetEmbeddings(::grpc::ClientContext* context, const ::posetrl::ActionRequest* request, ::posetrl::EmbeddingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::posetrl::ActionRequest, ::posetrl::EmbeddingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyActionGetEmbeddings_, context, request, response, std::move(f));
}

void PosetRL::Stub::experimental_async::applyActionGetEmbeddings(::grpc::ClientContext* context, const ::posetrl::ActionRequest* request, ::posetrl::EmbeddingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_applyActionGetEmbeddings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::posetrl::EmbeddingResponse>* PosetRL::Stub::PrepareAsyncapplyActionGetEmbeddingsRaw(::grpc::ClientContext* context, const ::posetrl::ActionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::posetrl::EmbeddingResponse, ::posetrl::ActionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_applyActionGetEmbeddings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::posetrl::EmbeddingResponse>* PosetRL::Stub::AsyncapplyActionGetEmbeddingsRaw(::grpc::ClientContext* context, const ::posetrl::ActionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncapplyActionGetEmbeddingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

PosetRL::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosetRL_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosetRL::Service, ::google::protobuf::Empty, ::posetrl::EmbeddingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosetRL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::posetrl::EmbeddingResponse* resp) {
               return service->getEmbedding(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosetRL_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosetRL::Service, ::posetrl::ActionRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosetRL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::posetrl::ActionRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->applyAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PosetRL_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PosetRL::Service, ::posetrl::ActionRequest, ::posetrl::EmbeddingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PosetRL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::posetrl::ActionRequest* req,
             ::posetrl::EmbeddingResponse* resp) {
               return service->applyActionGetEmbeddings(ctx, req, resp);
             }, this)));
}

PosetRL::Service::~Service() {
}

::grpc::Status PosetRL::Service::getEmbedding(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::posetrl::EmbeddingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosetRL::Service::applyAction(::grpc::ServerContext* context, const ::posetrl::ActionRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PosetRL::Service::applyActionGetEmbeddings(::grpc::ServerContext* context, const ::posetrl::ActionRequest* request, ::posetrl::EmbeddingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace posetrl

