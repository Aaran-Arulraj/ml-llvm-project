; ModuleID = 'c-parser.c'
source_filename = "c-parser.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.c_common_resword = type { i8*, i32 }
%struct.c_parser = type { [2 x %struct.c_token], i16, i8 }
%struct.c_token = type { i32, %union.tree_node*, i32 }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.cpp_reader = type opaque
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.cpp_options = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8*, i8*, i8*, i32, i8, i8, %struct.anon, i64, i64, i64, i64, i8, i8, i8, i8, i8 }
%struct.anon = type { i32, i8, i8, i8, i8 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%union.gimple_statement_d = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.c_common_identifier = type { %struct.tree_common, %struct.cpp_hashnode }
%struct.cpp_hashnode = type { %struct.ht_identifier, i8, i8, i16, %union._cpp_hashnode_value }
%struct.ht_identifier = type { i8*, i32, i32 }
%union._cpp_hashnode_value = type { %struct.cpp_macro* }
%struct.cpp_macro = type opaque
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.cgraph_asm_node = type { %struct.cgraph_asm_node*, %union.tree_node*, i32 }
%struct.c_declspecs = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i8, i32, i16, i8 }
%struct.c_declarator = type { i32, %struct.c_declarator*, i32, %union.anon.0 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { %union.tree_node*, i32, %union.tree_node*, i8 }
%struct.c_expr = type { %union.tree_node*, i32, %union.tree_node* }
%struct.c_parm = type { %struct.c_declspecs*, %union.tree_node*, %struct.c_declarator* }
%struct.c_type_name = type { %struct.c_declspecs*, %struct.c_declarator* }
%struct.c_typespec = type { i32, %union.tree_node*, %union.tree_node*, i8 }
%struct.c_enum_contents = type { %union.tree_node*, i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.c_struct_parse_info = type opaque
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.anon.2 = type { %struct.c_expr, i32, i32, i32 }
%struct.tree_field_decl = type { %struct.tree_decl_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.expanded_location = type { i8*, i32, i32, i8 }
%struct.stmt_tree_s = type { %union.tree_node*, i32 }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.c_arg_info = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8 }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_omp_clause = type { %struct.tree_common, i32, i32, %union.omp_clause_subcode, %struct.gimple_seq_d*, %struct.gimple_seq_d*, [1 x %union.tree_node*] }
%union.omp_clause_subcode = type { i32 }
%struct.tree_vec = type { %struct.tree_common, i32, [1 x %union.tree_node*] }

@flag_isoc99 = external dso_local global i32, align 4
@flag_no_asm = external dso_local global i32, align 4
@c_language = external dso_local global i32, align 4
@ridpointers = external dso_local global %union.tree_node**, align 8
@num_c_common_reswords = external dso_local constant i32, align 4
@c_common_reswords = external dso_local constant [0 x %struct.c_common_resword], align 8
@warn_cxx_compat = external dso_local global i32, align 4
@the_parser = internal global %struct.c_parser* null, align 8, !dbg !0
@flag_exceptions = external dso_local global i32, align 4
@gt_ggc_r_gt_c_parser_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.c_parser** @the_parser to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_c_parser, void (i8*)* @gt_pch_nx_c_parser }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !4346
@timevar_enable = external dso_local global i8, align 1
@.str = private unnamed_addr constant [42 x i8] c"identifier %qE conflicts with C++ keyword\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"c-parser.c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"expected string literal\00", align 1
@parse_in = external dso_local global %struct.cpp_reader*, align 8
@input_location = external dso_local global i32, align 4
@.str.4 = private unnamed_addr constant [21 x i8] c"expected end of line\00", align 1
@.str.5 = private unnamed_addr constant [40 x i8] c"ISO C forbids an empty translation unit\00", align 1
@parser_obstack = external dso_local global %struct.obstack, align 8
@.str.6 = private unnamed_addr constant [55 x i8] c"ISO C does not allow extra %<;%> outside of a function\00", align 1
@pedantic = external dso_local global i32, align 4
@warn_pointer_arith = external dso_local global i32, align 4
@warn_traditional = external dso_local global i32, align 4
@flag_iso = external dso_local global i32, align 4
@warn_long_long = external dso_local global i32, align 4
@cpp_opts = external dso_local global %struct.cpp_options*, align 8
@.str.7 = private unnamed_addr constant [15 x i8] c"expected %<;%>\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"expected %<(%>\00", align 1
@.str.9 = private unnamed_addr constant [15 x i8] c"expected %<)%>\00", align 1
@.str.10 = private unnamed_addr constant [31 x i8] c"wide string literal in %<asm%>\00", align 1
@.str.11 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.12 = private unnamed_addr constant [20 x i8] c"expected identifier\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"expected %<@end%>\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"expected %<>%>\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"expected %<:%>\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.16 = private unnamed_addr constant [34 x i8] c"expected specifier-qualifier-list\00", align 1
@.str.17 = private unnamed_addr constant [32 x i8] c"comma at end of enumerator list\00", align 1
@.str.18 = private unnamed_addr constant [24 x i8] c"expected %<,%> or %<}%>\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"expected %<{%>\00", align 1
@.str.20 = private unnamed_addr constant [51 x i8] c"ISO C forbids forward references to %<enum%> types\00", align 1
@.str.21 = private unnamed_addr constant [58 x i8] c"ISO C forbids omitting the middle term of a ?: expression\00", align 1
@c_global_trees = external dso_local global [55 x %union.tree_node*], align 16
@c_inhibit_evaluation_warnings = external dso_local global i32, align 4
@.str.22 = private unnamed_addr constant [15 x i8] c"expected %<]%>\00", align 1
@.str.23 = private unnamed_addr constant [35 x i8] c"compound literal has variable size\00", align 1
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.24 = private unnamed_addr constant [54 x i8] c"compound literal qualified by address-space qualifier\00", align 1
@.str.25 = private unnamed_addr constant [34 x i8] c"ISO C90 forbids compound literals\00", align 1
@.str.26 = private unnamed_addr constant [39 x i8] c"ISO C forbids empty initializer braces\00", align 1
@.str.27 = private unnamed_addr constant [15 x i8] c"expected %<}%>\00", align 1
@.str.28 = private unnamed_addr constant [50 x i8] c"obsolete use of designated initializer with %<:%>\00", align 1
@.str.29 = private unnamed_addr constant [57 x i8] c"ISO C forbids specifying range of elements to initialize\00", align 1
@.str.30 = private unnamed_addr constant [51 x i8] c"ISO C90 forbids specifying subobject to initialize\00", align 1
@.str.31 = private unnamed_addr constant [53 x i8] c"obsolete use of designated initializer without %<=%>\00", align 1
@.str.32 = private unnamed_addr constant [15 x i8] c"expected %<=%>\00", align 1
@.str.33 = private unnamed_addr constant [46 x i8] c"traditional C rejects the unary plus operator\00", align 1
@in_sizeof = external dso_local global i32, align 4
@.str.34 = private unnamed_addr constant [34 x i8] c"%<sizeof%> applied to a bit-field\00", align 1
@in_alignof = external dso_local global i32, align 4
@targetm = external dso_local global %struct.gcc_target, align 8
@.str.35 = private unnamed_addr constant [48 x i8] c"fixed-point types not supported for this target\00", align 1
@.str.36 = private unnamed_addr constant [20 x i8] c"expected expression\00", align 1
@.str.37 = private unnamed_addr constant [62 x i8] c"braced-group within expression allowed only inside a function\00", align 1
@.str.38 = private unnamed_addr constant [47 x i8] c"ISO C forbids braced-groups within expressions\00", align 1
@.str.39 = private unnamed_addr constant [15 x i8] c"expected %<,%>\00", align 1
@.str.40 = private unnamed_addr constant [59 x i8] c"first argument to %<__builtin_choose_expr%> not a constant\00", align 1
@.str.41 = private unnamed_addr constant [33 x i8] c"ISO C forbids label declarations\00", align 1
@.str.42 = private unnamed_addr constant [34 x i8] c"expected declaration or statement\00", align 1
@.str.43 = private unnamed_addr constant [44 x i8] c"ISO C90 forbids mixed declarations and code\00", align 1
@.str.44 = private unnamed_addr constant [31 x i8] c"expected %<}%> before %<else%>\00", align 1
@.str.45 = private unnamed_addr constant [35 x i8] c"%<else%> without a previous %<if%>\00", align 1
@.str.46 = private unnamed_addr constant [35 x i8] c"label at end of compound statement\00", align 1
@.str.47 = private unnamed_addr constant [26 x i8] c"expected %<:%> or %<...%>\00", align 1
@.str.48 = private unnamed_addr constant [77 x i8] c"a label can only be part of a statement and a declaration is not a statement\00", align 1
@.str.49 = private unnamed_addr constant [29 x i8] c"expected identifier or %<*%>\00", align 1
@c_cont_label = external dso_local global %union.tree_node*, align 8
@c_break_label = external dso_local global %union.tree_node*, align 8
@.str.50 = private unnamed_addr constant [19 x i8] c"expected statement\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@warn_sequence_point = external dso_local global i32, align 4
@.str.51 = private unnamed_addr constant [56 x i8] c"suggest braces around empty body in an %<if%> statement\00", align 1
@.str.52 = private unnamed_addr constant [58 x i8] c"suggest braces around empty body in an %<else%> statement\00", align 1
@.str.53 = private unnamed_addr constant [53 x i8] c"suggest braces around empty body in %<do%> statement\00", align 1
@.str.54 = private unnamed_addr constant [19 x i8] c"expected %<while%>\00", align 1
@.str.55 = private unnamed_addr constant [28 x i8] c"%E qualifier ignored on asm\00", align 1
@.str.56 = private unnamed_addr constant [24 x i8] c"expected %<:%> or %<)%>\00", align 1
@.str.57 = private unnamed_addr constant [20 x i8] c"expected class name\00", align 1
@.str.58 = private unnamed_addr constant [45 x i8] c"extra semicolon in struct or union specified\00", align 1
@.str.59 = private unnamed_addr constant [39 x i8] c"no semicolon at end of struct or union\00", align 1
@.str.60 = private unnamed_addr constant [50 x i8] c"ISO C forbids member declarations with no members\00", align 1
@.str.61 = private unnamed_addr constant [31 x i8] c"expected %<,%>, %<;%> or %<}%>\00", align 1
@.str.62 = private unnamed_addr constant [57 x i8] c"expected %<:%>, %<,%>, %<;%>, %<}%> or %<__attribute__%>\00", align 1
@in_typeof = external dso_local global i32, align 4
@.str.63 = private unnamed_addr constant [34 x i8] c"%<typeof%> applied to a bit-field\00", align 1
@.str.64 = private unnamed_addr constant [29 x i8] c"expected identifier or %<(%>\00", align 1
@.str.65 = private unnamed_addr constant [47 x i8] c"ISO C requires a named argument before %<...%>\00", align 1
@.str.66 = private unnamed_addr constant [31 x i8] c"expected %<;%>, %<,%> or %<)%>\00", align 1
@.str.67 = private unnamed_addr constant [43 x i8] c"expected declaration specifiers or %<...%>\00", align 1
@.str.68 = private unnamed_addr constant [64 x i8] c"%<#pragma omp barrier%> may only be used in compound statements\00", align 1
@.str.69 = private unnamed_addr constant [62 x i8] c"%<#pragma omp flush%> may only be used in compound statements\00", align 1
@.str.70 = private unnamed_addr constant [65 x i8] c"%<#pragma omp taskwait%> may only be used in compound statements\00", align 1
@.str.71 = private unnamed_addr constant [79 x i8] c"%<#pragma omp section%> may only be used in %<#pragma omp sections%> construct\00", align 1
@.str.72 = private unnamed_addr constant [45 x i8] c"%<#pragma GCC pch_preprocess%> must be first\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"expected declaration specifiers\00", align 1
@.str.74 = private unnamed_addr constant [30 x i8] c"expected %<(%> or end of line\00", align 1
@.str.75 = private unnamed_addr constant [22 x i8] c"%qD is not a variable\00", align 1
@.str.76 = private unnamed_addr constant [47 x i8] c"%qE declared %<threadprivate%> after first use\00", align 1
@.str.77 = private unnamed_addr constant [51 x i8] c"automatic variable %qE cannot be %<threadprivate%>\00", align 1
@.str.78 = private unnamed_addr constant [42 x i8] c"%<threadprivate%> %qE has incomplete type\00", align 1
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@.str.79 = private unnamed_addr constant [44 x i8] c"invalid operator for %<#pragma omp atomic%>\00", align 1
@.str.80 = private unnamed_addr constant [16 x i8] c"#pragma omp for\00", align 1
@.str.81 = private unnamed_addr constant [9 x i8] c"collapse\00", align 1
@.str.82 = private unnamed_addr constant [7 x i8] c"copyin\00", align 1
@.str.83 = private unnamed_addr constant [12 x i8] c"copyprivate\00", align 1
@.str.84 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.85 = private unnamed_addr constant [13 x i8] c"firstprivate\00", align 1
@.str.86 = private unnamed_addr constant [3 x i8] c"if\00", align 1
@.str.87 = private unnamed_addr constant [12 x i8] c"lastprivate\00", align 1
@.str.88 = private unnamed_addr constant [7 x i8] c"nowait\00", align 1
@.str.89 = private unnamed_addr constant [12 x i8] c"num_threads\00", align 1
@.str.90 = private unnamed_addr constant [8 x i8] c"ordered\00", align 1
@.str.91 = private unnamed_addr constant [8 x i8] c"private\00", align 1
@.str.92 = private unnamed_addr constant [10 x i8] c"reduction\00", align 1
@.str.93 = private unnamed_addr constant [9 x i8] c"schedule\00", align 1
@.str.94 = private unnamed_addr constant [7 x i8] c"shared\00", align 1
@.str.95 = private unnamed_addr constant [7 x i8] c"untied\00", align 1
@.str.96 = private unnamed_addr constant [32 x i8] c"expected %<#pragma omp%> clause\00", align 1
@.str.97 = private unnamed_addr constant [25 x i8] c"%qs is not valid for %qs\00", align 1
@.str.98 = private unnamed_addr constant [61 x i8] c"collapse argument needs positive constant integer expression\00", align 1
@.str.99 = private unnamed_addr constant [21 x i8] c"too many %qs clauses\00", align 1
@.str.100 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.101 = private unnamed_addr constant [32 x i8] c"expected %<none%> or %<shared%>\00", align 1
@.str.102 = private unnamed_addr constant [28 x i8] c"expected integer expression\00", align 1
@.str.103 = private unnamed_addr constant [39 x i8] c"%<num_threads%> value must be positive\00", align 1
@.str.104 = private unnamed_addr constant [69 x i8] c"expected %<+%>, %<*%>, %<-%>, %<&%>, %<^%>, %<|%>, %<&&%>, or %<||%>\00", align 1
@.str.105 = private unnamed_addr constant [8 x i8] c"dynamic\00", align 1
@.str.106 = private unnamed_addr constant [7 x i8] c"guided\00", align 1
@.str.107 = private unnamed_addr constant [8 x i8] c"runtime\00", align 1
@.str.108 = private unnamed_addr constant [62 x i8] c"schedule %<runtime%> does not take a %<chunk_size%> parameter\00", align 1
@.str.109 = private unnamed_addr constant [59 x i8] c"schedule %<auto%> does not take a %<chunk_size%> parameter\00", align 1
@.str.110 = private unnamed_addr constant [24 x i8] c"expected %<,%> or %<)%>\00", align 1
@.str.111 = private unnamed_addr constant [22 x i8] c"invalid schedule kind\00", align 1
@.str.112 = private unnamed_addr constant [23 x i8] c"for statement expected\00", align 1
@.str.113 = private unnamed_addr constant [49 x i8] c"expected iteration declaration or initialization\00", align 1
@.str.114 = private unnamed_addr constant [34 x i8] c"not enough perfectly nested loops\00", align 1
@.str.115 = private unnamed_addr constant [37 x i8] c"collapsed loops not perfectly nested\00", align 1
@.str.116 = private unnamed_addr constant [50 x i8] c"iteration variable %qD should not be firstprivate\00", align 1
@.str.117 = private unnamed_addr constant [21 x i8] c"#pragma omp parallel\00", align 1
@.str.118 = private unnamed_addr constant [25 x i8] c"#pragma omp parallel for\00", align 1
@.str.119 = private unnamed_addr constant [9 x i8] c"sections\00", align 1
@.str.120 = private unnamed_addr constant [30 x i8] c"#pragma omp parallel sections\00", align 1
@.str.121 = private unnamed_addr constant [42 x i8] c"expected %<#pragma omp section%> or %<}%>\00", align 1
@.str.122 = private unnamed_addr constant [21 x i8] c"#pragma omp sections\00", align 1
@.str.123 = private unnamed_addr constant [19 x i8] c"#pragma omp single\00", align 1
@.str.124 = private unnamed_addr constant [17 x i8] c"#pragma omp task\00", align 1
@.str.125 = private unnamed_addr constant [47 x i8] c"extra semicolon in method definition specified\00", align 1
@.str.126 = private unnamed_addr constant [18 x i8] c"empty declaration\00", align 1
@.str.127 = private unnamed_addr constant [45 x i8] c"data definition has no type or storage class\00", align 1
@.str.128 = private unnamed_addr constant [24 x i8] c"expected %<,%> or %<;%>\00", align 1
@.str.129 = private unnamed_addr constant [59 x i8] c"expected %<=%>, %<,%>, %<;%>, %<asm%> or %<__attribute__%>\00", align 1
@.str.130 = private unnamed_addr constant [31 x i8] c"ISO C forbids nested functions\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @c_parse_init() #0 !dbg !4364 {
entry:
  %i = alloca i32, align 4
  %id = alloca %union.tree_node*, align 8
  %mask = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4367, metadata !DIExpression()), !dbg !4368
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !4369, metadata !DIExpression()), !dbg !4370
  call void @llvm.dbg.declare(metadata i32* %mask, metadata !4371, metadata !DIExpression()), !dbg !4372
  store i32 0, i32* %mask, align 4, !dbg !4372
  %0 = load i32, i32* %mask, align 4, !dbg !4373
  %or = or i32 %0, 2, !dbg !4373
  store i32 %or, i32* %mask, align 4, !dbg !4373
  %1 = load i32, i32* @flag_isoc99, align 4, !dbg !4374
  %tobool = icmp ne i32 %1, 0, !dbg !4374
  br i1 %tobool, label %if.end, label %if.then, !dbg !4376

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %mask, align 4, !dbg !4377
  %or1 = or i32 %2, 4, !dbg !4377
  store i32 %or1, i32* %mask, align 4, !dbg !4377
  br label %if.end, !dbg !4378

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* @flag_no_asm, align 4, !dbg !4379
  %tobool2 = icmp ne i32 %3, 0, !dbg !4379
  br i1 %tobool2, label %if.then3, label %if.end9, !dbg !4381

if.then3:                                         ; preds = %if.end
  %4 = load i32, i32* %mask, align 4, !dbg !4382
  %or4 = or i32 %4, 80, !dbg !4382
  store i32 %or4, i32* %mask, align 4, !dbg !4382
  %5 = load i32, i32* @flag_isoc99, align 4, !dbg !4384
  %tobool5 = icmp ne i32 %5, 0, !dbg !4384
  br i1 %tobool5, label %if.end8, label %if.then6, !dbg !4386

if.then6:                                         ; preds = %if.then3
  %6 = load i32, i32* %mask, align 4, !dbg !4387
  %or7 = or i32 %6, 32, !dbg !4387
  store i32 %or7, i32* %mask, align 4, !dbg !4387
  br label %if.end8, !dbg !4388

if.end8:                                          ; preds = %if.then6, %if.then3
  br label %if.end9, !dbg !4389

if.end9:                                          ; preds = %if.end8, %if.end
  %7 = load i32, i32* @c_language, align 4, !dbg !4390
  %and = and i32 %7, 1, !dbg !4390
  %cmp = icmp ne i32 %and, 0, !dbg !4390
  br i1 %cmp, label %if.end12, label %if.then10, !dbg !4392

if.then10:                                        ; preds = %if.end9
  %8 = load i32, i32* %mask, align 4, !dbg !4393
  %or11 = or i32 %8, 384, !dbg !4393
  store i32 %or11, i32* %mask, align 4, !dbg !4393
  br label %if.end12, !dbg !4394

if.end12:                                         ; preds = %if.then10, %if.end9
  %call = call i8* @ggc_alloc_cleared_stat(i64 1216), !dbg !4395
  %9 = bitcast i8* %call to %union.tree_node**, !dbg !4395
  store %union.tree_node** %9, %union.tree_node*** @ridpointers, align 8, !dbg !4396
  store i32 0, i32* %i, align 4, !dbg !4397
  br label %for.cond, !dbg !4399

for.cond:                                         ; preds = %for.inc, %if.end12
  %10 = load i32, i32* %i, align 4, !dbg !4400
  %11 = load i32, i32* @num_c_common_reswords, align 4, !dbg !4402
  %cmp13 = icmp ult i32 %10, %11, !dbg !4403
  br i1 %cmp13, label %for.body, label %for.end, !dbg !4404

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4, !dbg !4405
  %idxprom = zext i32 %12 to i64, !dbg !4408
  %arrayidx = getelementptr inbounds [0 x %struct.c_common_resword], [0 x %struct.c_common_resword]* @c_common_reswords, i64 0, i64 %idxprom, !dbg !4408
  %disable = getelementptr inbounds %struct.c_common_resword, %struct.c_common_resword* %arrayidx, i32 0, i32 1, !dbg !4409
  %bf.load = load i32, i32* %disable, align 8, !dbg !4409
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4409
  %13 = load i32, i32* %mask, align 4, !dbg !4410
  %and14 = and i32 %bf.lshr, %13, !dbg !4411
  %tobool15 = icmp ne i32 %and14, 0, !dbg !4411
  br i1 %tobool15, label %if.then16, label %if.end31, !dbg !4412

if.then16:                                        ; preds = %for.body
  %14 = load i32, i32* @warn_cxx_compat, align 4, !dbg !4413
  %tobool17 = icmp ne i32 %14, 0, !dbg !4413
  br i1 %tobool17, label %land.lhs.true, label %if.end30, !dbg !4416

land.lhs.true:                                    ; preds = %if.then16
  %15 = load i32, i32* %i, align 4, !dbg !4417
  %idxprom18 = zext i32 %15 to i64, !dbg !4418
  %arrayidx19 = getelementptr inbounds [0 x %struct.c_common_resword], [0 x %struct.c_common_resword]* @c_common_reswords, i64 0, i64 %idxprom18, !dbg !4418
  %disable20 = getelementptr inbounds %struct.c_common_resword, %struct.c_common_resword* %arrayidx19, i32 0, i32 1, !dbg !4419
  %bf.load21 = load i32, i32* %disable20, align 8, !dbg !4419
  %bf.lshr22 = lshr i32 %bf.load21, 16, !dbg !4419
  %and23 = and i32 %bf.lshr22, 512, !dbg !4420
  %tobool24 = icmp ne i32 %and23, 0, !dbg !4420
  br i1 %tobool24, label %if.then25, label %if.end30, !dbg !4421

if.then25:                                        ; preds = %land.lhs.true
  %16 = load i32, i32* %i, align 4, !dbg !4422
  %idxprom26 = zext i32 %16 to i64, !dbg !4424
  %arrayidx27 = getelementptr inbounds [0 x %struct.c_common_resword], [0 x %struct.c_common_resword]* @c_common_reswords, i64 0, i64 %idxprom26, !dbg !4424
  %word = getelementptr inbounds %struct.c_common_resword, %struct.c_common_resword* %arrayidx27, i32 0, i32 0, !dbg !4425
  %17 = load i8*, i8** %word, align 8, !dbg !4425
  %call28 = call %union.tree_node* @get_identifier(i8* %17), !dbg !4426
  store %union.tree_node* %call28, %union.tree_node** %id, align 8, !dbg !4427
  %18 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !4428
  %19 = bitcast %union.tree_node* %18 to %struct.c_common_identifier*, !dbg !4428
  %node = getelementptr inbounds %struct.c_common_identifier, %struct.c_common_identifier* %19, i32 0, i32 1, !dbg !4428
  %rid_code = getelementptr inbounds %struct.cpp_hashnode, %struct.cpp_hashnode* %node, i32 0, i32 2, !dbg !4428
  store i8 65, i8* %rid_code, align 1, !dbg !4428
  %20 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !4429
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !4429
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !4429
  %bf.load29 = load i64, i64* %21, align 8, !dbg !4430
  %bf.clear = and i64 %bf.load29, -8589934593, !dbg !4430
  %bf.set = or i64 %bf.clear, 8589934592, !dbg !4430
  store i64 %bf.set, i64* %21, align 8, !dbg !4430
  br label %if.end30, !dbg !4431

if.end30:                                         ; preds = %if.then25, %land.lhs.true, %if.then16
  br label %for.inc, !dbg !4432

if.end31:                                         ; preds = %for.body
  %22 = load i32, i32* %i, align 4, !dbg !4433
  %idxprom32 = zext i32 %22 to i64, !dbg !4434
  %arrayidx33 = getelementptr inbounds [0 x %struct.c_common_resword], [0 x %struct.c_common_resword]* @c_common_reswords, i64 0, i64 %idxprom32, !dbg !4434
  %word34 = getelementptr inbounds %struct.c_common_resword, %struct.c_common_resword* %arrayidx33, i32 0, i32 0, !dbg !4435
  %23 = load i8*, i8** %word34, align 8, !dbg !4435
  %call35 = call %union.tree_node* @get_identifier(i8* %23), !dbg !4436
  store %union.tree_node* %call35, %union.tree_node** %id, align 8, !dbg !4437
  %24 = load i32, i32* %i, align 4, !dbg !4438
  %idxprom36 = zext i32 %24 to i64, !dbg !4438
  %arrayidx37 = getelementptr inbounds [0 x %struct.c_common_resword], [0 x %struct.c_common_resword]* @c_common_reswords, i64 0, i64 %idxprom36, !dbg !4438
  %rid = getelementptr inbounds %struct.c_common_resword, %struct.c_common_resword* %arrayidx37, i32 0, i32 1, !dbg !4438
  %bf.load38 = load i32, i32* %rid, align 8, !dbg !4438
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !4438
  %conv = trunc i32 %bf.clear39 to i8, !dbg !4438
  %25 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !4438
  %26 = bitcast %union.tree_node* %25 to %struct.c_common_identifier*, !dbg !4438
  %node40 = getelementptr inbounds %struct.c_common_identifier, %struct.c_common_identifier* %26, i32 0, i32 1, !dbg !4438
  %rid_code41 = getelementptr inbounds %struct.cpp_hashnode, %struct.cpp_hashnode* %node40, i32 0, i32 2, !dbg !4438
  store i8 %conv, i8* %rid_code41, align 1, !dbg !4438
  %27 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !4439
  %base42 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !4439
  %28 = bitcast %struct.tree_base* %base42 to i64*, !dbg !4439
  %bf.load43 = load i64, i64* %28, align 8, !dbg !4440
  %bf.clear44 = and i64 %bf.load43, -8589934593, !dbg !4440
  %bf.set45 = or i64 %bf.clear44, 8589934592, !dbg !4440
  store i64 %bf.set45, i64* %28, align 8, !dbg !4440
  %29 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !4441
  %30 = load %union.tree_node**, %union.tree_node*** @ridpointers, align 8, !dbg !4442
  %31 = load i32, i32* %i, align 4, !dbg !4443
  %idxprom46 = zext i32 %31 to i64, !dbg !4444
  %arrayidx47 = getelementptr inbounds [0 x %struct.c_common_resword], [0 x %struct.c_common_resword]* @c_common_reswords, i64 0, i64 %idxprom46, !dbg !4444
  %rid48 = getelementptr inbounds %struct.c_common_resword, %struct.c_common_resword* %arrayidx47, i32 0, i32 1, !dbg !4445
  %bf.load49 = load i32, i32* %rid48, align 8, !dbg !4445
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !4445
  %idxprom51 = sext i32 %bf.clear50 to i64, !dbg !4442
  %arrayidx52 = getelementptr inbounds %union.tree_node*, %union.tree_node** %30, i64 %idxprom51, !dbg !4442
  store %union.tree_node* %29, %union.tree_node** %arrayidx52, align 8, !dbg !4446
  br label %for.inc, !dbg !4447

for.inc:                                          ; preds = %if.end31, %if.end30
  %32 = load i32, i32* %i, align 4, !dbg !4448
  %inc = add i32 %32, 1, !dbg !4448
  store i32 %inc, i32* %i, align 4, !dbg !4448
  br label %for.cond, !dbg !4449, !llvm.loop !4450

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4452
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @pragma_lex(%union.tree_node** %value) #0 !dbg !4453 {
entry:
  %value.addr = alloca %union.tree_node**, align 8
  %tok = alloca %struct.c_token*, align 8
  %ret = alloca i32, align 4
  store %union.tree_node** %value, %union.tree_node*** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %value.addr, metadata !4456, metadata !DIExpression()), !dbg !4457
  call void @llvm.dbg.declare(metadata %struct.c_token** %tok, metadata !4458, metadata !DIExpression()), !dbg !4460
  %0 = load %struct.c_parser*, %struct.c_parser** @the_parser, align 8, !dbg !4461
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !4462
  store %struct.c_token* %call, %struct.c_token** %tok, align 8, !dbg !4460
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4463, metadata !DIExpression()), !dbg !4464
  %1 = load %struct.c_token*, %struct.c_token** %tok, align 8, !dbg !4465
  %2 = bitcast %struct.c_token* %1 to i32*, !dbg !4466
  %bf.load = load i32, i32* %2, align 8, !dbg !4466
  %bf.clear = and i32 %bf.load, 255, !dbg !4466
  store i32 %bf.clear, i32* %ret, align 4, !dbg !4464
  %3 = load %struct.c_token*, %struct.c_token** %tok, align 8, !dbg !4467
  %value1 = getelementptr inbounds %struct.c_token, %struct.c_token* %3, i32 0, i32 1, !dbg !4468
  %4 = load %union.tree_node*, %union.tree_node** %value1, align 8, !dbg !4468
  %5 = load %union.tree_node**, %union.tree_node*** %value.addr, align 8, !dbg !4469
  store %union.tree_node* %4, %union.tree_node** %5, align 8, !dbg !4470
  %6 = load i32, i32* %ret, align 4, !dbg !4471
  %cmp = icmp eq i32 %6, 71, !dbg !4473
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4474

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* %ret, align 4, !dbg !4475
  %cmp2 = icmp eq i32 %7, 22, !dbg !4476
  br i1 %cmp2, label %if.then, label %if.else, !dbg !4477

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 22, i32* %ret, align 4, !dbg !4478
  br label %if.end5, !dbg !4479

if.else:                                          ; preds = %lor.lhs.false
  %8 = load i32, i32* %ret, align 4, !dbg !4480
  %cmp3 = icmp eq i32 %8, 74, !dbg !4483
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !4484

if.then4:                                         ; preds = %if.else
  store i32 53, i32* %ret, align 4, !dbg !4485
  br label %if.end, !dbg !4486

if.end:                                           ; preds = %if.then4, %if.else
  %9 = load %struct.c_parser*, %struct.c_parser** @the_parser, align 8, !dbg !4487
  call void @c_parser_consume_token(%struct.c_parser* %9), !dbg !4488
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  %10 = load i32, i32* %ret, align 4, !dbg !4489
  ret i32 %10, !dbg !4490
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.c_token* @c_parser_peek_token(%struct.c_parser* %parser) #0 !dbg !4491 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !4494, metadata !DIExpression()), !dbg !4495
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4496
  %tokens_avail = getelementptr inbounds %struct.c_parser, %struct.c_parser* %0, i32 0, i32 1, !dbg !4498
  %1 = load i16, i16* %tokens_avail, align 8, !dbg !4498
  %conv = sext i16 %1 to i32, !dbg !4496
  %cmp = icmp eq i32 %conv, 0, !dbg !4499
  br i1 %cmp, label %if.then, label %if.end, !dbg !4500

if.then:                                          ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4501
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4503
  %tokens = getelementptr inbounds %struct.c_parser, %struct.c_parser* %3, i32 0, i32 0, !dbg !4504
  %arrayidx = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens, i64 0, i64 0, !dbg !4503
  call void @c_lex_one_token(%struct.c_parser* %2, %struct.c_token* %arrayidx), !dbg !4505
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4506
  %tokens_avail2 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %4, i32 0, i32 1, !dbg !4507
  store i16 1, i16* %tokens_avail2, align 8, !dbg !4508
  br label %if.end, !dbg !4509

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4510
  %tokens3 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %5, i32 0, i32 0, !dbg !4511
  %arrayidx4 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens3, i64 0, i64 0, !dbg !4510
  ret %struct.c_token* %arrayidx4, !dbg !4512
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_consume_token(%struct.c_parser* %parser) #0 !dbg !4513 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !4516, metadata !DIExpression()), !dbg !4517
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4518
  %tokens_avail = getelementptr inbounds %struct.c_parser, %struct.c_parser* %0, i32 0, i32 1, !dbg !4518
  %1 = load i16, i16* %tokens_avail, align 8, !dbg !4518
  %conv = sext i16 %1 to i32, !dbg !4518
  %cmp = icmp sge i32 %conv, 1, !dbg !4518
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4518

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 528, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4518
  br label %cond.end, !dbg !4518

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4518

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4518
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4519
  %tokens = getelementptr inbounds %struct.c_parser, %struct.c_parser* %2, i32 0, i32 0, !dbg !4519
  %arrayidx = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens, i64 0, i64 0, !dbg !4519
  %3 = bitcast %struct.c_token* %arrayidx to i32*, !dbg !4519
  %bf.load = load i32, i32* %3, align 8, !dbg !4519
  %bf.clear = and i32 %bf.load, 255, !dbg !4519
  %cmp2 = icmp ne i32 %bf.clear, 22, !dbg !4519
  br i1 %cmp2, label %cond.false5, label %cond.true4, !dbg !4519

cond.true4:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 529, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4519
  br label %cond.end6, !dbg !4519

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !4519

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i32 [ 0, %cond.true4 ], [ 0, %cond.false5 ], !dbg !4519
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4520
  %in_pragma = getelementptr inbounds %struct.c_parser, %struct.c_parser* %4, i32 0, i32 2, !dbg !4520
  %bf.load8 = load i8, i8* %in_pragma, align 2, !dbg !4520
  %bf.lshr = lshr i8 %bf.load8, 1, !dbg !4520
  %bf.clear9 = and i8 %bf.lshr, 1, !dbg !4520
  %bf.cast = zext i8 %bf.clear9 to i32, !dbg !4520
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4520
  br i1 %tobool, label %lor.lhs.false, label %cond.false17, !dbg !4520

lor.lhs.false:                                    ; preds = %cond.end6
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4520
  %tokens10 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %5, i32 0, i32 0, !dbg !4520
  %arrayidx11 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens10, i64 0, i64 0, !dbg !4520
  %6 = bitcast %struct.c_token* %arrayidx11 to i32*, !dbg !4520
  %bf.load12 = load i32, i32* %6, align 8, !dbg !4520
  %bf.clear13 = and i32 %bf.load12, 255, !dbg !4520
  %cmp14 = icmp ne i32 %bf.clear13, 71, !dbg !4520
  br i1 %cmp14, label %cond.false17, label %cond.true16, !dbg !4520

cond.true16:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 530, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4520
  br label %cond.end18, !dbg !4520

cond.false17:                                     ; preds = %lor.lhs.false, %cond.end6
  br label %cond.end18, !dbg !4520

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !4520
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4521
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %7, i32 0, i32 2, !dbg !4521
  %bf.load20 = load i8, i8* %error, align 2, !dbg !4521
  %bf.clear21 = and i8 %bf.load20, 1, !dbg !4521
  %bf.cast22 = zext i8 %bf.clear21 to i32, !dbg !4521
  %tobool23 = icmp ne i32 %bf.cast22, 0, !dbg !4521
  br i1 %tobool23, label %cond.false32, label %lor.lhs.false24, !dbg !4521

lor.lhs.false24:                                  ; preds = %cond.end18
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4521
  %tokens25 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %8, i32 0, i32 0, !dbg !4521
  %arrayidx26 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens25, i64 0, i64 0, !dbg !4521
  %9 = bitcast %struct.c_token* %arrayidx26 to i32*, !dbg !4521
  %bf.load27 = load i32, i32* %9, align 8, !dbg !4521
  %bf.clear28 = and i32 %bf.load27, 255, !dbg !4521
  %cmp29 = icmp ne i32 %bf.clear28, 70, !dbg !4521
  br i1 %cmp29, label %cond.false32, label %cond.true31, !dbg !4521

cond.true31:                                      ; preds = %lor.lhs.false24
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 531, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4521
  br label %cond.end33, !dbg !4521

cond.false32:                                     ; preds = %lor.lhs.false24, %cond.end18
  br label %cond.end33, !dbg !4521

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond34 = phi i32 [ 0, %cond.true31 ], [ 0, %cond.false32 ], !dbg !4521
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4522
  %tokens_avail35 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %10, i32 0, i32 1, !dbg !4524
  %11 = load i16, i16* %tokens_avail35, align 8, !dbg !4524
  %conv36 = sext i16 %11 to i32, !dbg !4522
  %cmp37 = icmp eq i32 %conv36, 2, !dbg !4525
  br i1 %cmp37, label %if.then, label %if.end, !dbg !4526

if.then:                                          ; preds = %cond.end33
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4527
  %tokens39 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %12, i32 0, i32 0, !dbg !4528
  %arrayidx40 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens39, i64 0, i64 0, !dbg !4527
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4529
  %tokens41 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %13, i32 0, i32 0, !dbg !4530
  %arrayidx42 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens41, i64 0, i64 1, !dbg !4529
  %14 = bitcast %struct.c_token* %arrayidx40 to i8*, !dbg !4529
  %15 = bitcast %struct.c_token* %arrayidx42 to i8*, !dbg !4529
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !4529
  br label %if.end, !dbg !4527

if.end:                                           ; preds = %if.then, %cond.end33
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4531
  %tokens_avail43 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %16, i32 0, i32 1, !dbg !4532
  %17 = load i16, i16* %tokens_avail43, align 8, !dbg !4533
  %dec = add i16 %17, -1, !dbg !4533
  store i16 %dec, i16* %tokens_avail43, align 8, !dbg !4533
  ret void, !dbg !4534
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @c_parse_file() #0 !dbg !4535 {
entry:
  %tparser = alloca %struct.c_parser, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser* %tparser, metadata !4536, metadata !DIExpression()), !dbg !4537
  %0 = bitcast %struct.c_parser* %tparser to i8*, !dbg !4538
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 56, i1 false), !dbg !4538
  store %struct.c_parser* %tparser, %struct.c_parser** @the_parser, align 8, !dbg !4539
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %tparser), !dbg !4540
  %1 = bitcast %struct.c_token* %call to i32*, !dbg !4542
  %bf.load = load i32, i32* %1, align 8, !dbg !4542
  %bf.lshr = lshr i32 %bf.load, 24, !dbg !4542
  %cmp = icmp eq i32 %bf.lshr, 17, !dbg !4543
  br i1 %cmp, label %if.then, label %if.end, !dbg !4544

if.then:                                          ; preds = %entry
  call void @c_parser_pragma_pch_preprocess(%struct.c_parser* %tparser), !dbg !4545
  br label %if.end, !dbg !4545

if.end:                                           ; preds = %if.then, %entry
  %call1 = call i8* @ggc_alloc_stat(i64 56), !dbg !4546
  %2 = bitcast i8* %call1 to %struct.c_parser*, !dbg !4546
  store %struct.c_parser* %2, %struct.c_parser** @the_parser, align 8, !dbg !4547
  %3 = load %struct.c_parser*, %struct.c_parser** @the_parser, align 8, !dbg !4548
  %4 = bitcast %struct.c_parser* %3 to i8*, !dbg !4549
  %5 = bitcast %struct.c_parser* %tparser to i8*, !dbg !4549
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 56, i1 false), !dbg !4549
  %6 = load i32, i32* @flag_exceptions, align 4, !dbg !4550
  %tobool = icmp ne i32 %6, 0, !dbg !4550
  br i1 %tobool, label %if.then2, label %if.end3, !dbg !4552

if.then2:                                         ; preds = %if.end
  call void @using_eh_for_cleanups(), !dbg !4553
  br label %if.end3, !dbg !4553

if.end3:                                          ; preds = %if.then2, %if.end
  %7 = load %struct.c_parser*, %struct.c_parser** @the_parser, align 8, !dbg !4554
  call void @c_parser_translation_unit(%struct.c_parser* %7), !dbg !4555
  store %struct.c_parser* null, %struct.c_parser** @the_parser, align 8, !dbg !4556
  ret void, !dbg !4557
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_pragma_pch_preprocess(%struct.c_parser* %parser) #0 !dbg !4558 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %name = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !4559, metadata !DIExpression()), !dbg !4560
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !4561, metadata !DIExpression()), !dbg !4562
  store %union.tree_node* null, %union.tree_node** %name, align 8, !dbg !4562
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4563
  call void @c_parser_consume_pragma(%struct.c_parser* %0), !dbg !4564
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4565
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %1, i32 61), !dbg !4567
  %tobool = icmp ne i8 %call, 0, !dbg !4567
  br i1 %tobool, label %if.then, label %if.else, !dbg !4568

if.then:                                          ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4569
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !4571
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 1, !dbg !4572
  %3 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4572
  store %union.tree_node* %3, %union.tree_node** %name, align 8, !dbg !4573
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4574
  call void @c_parser_consume_token(%struct.c_parser* %4), !dbg !4575
  br label %if.end, !dbg !4576

if.else:                                          ; preds = %entry
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4577
  call void @c_parser_error(%struct.c_parser* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)), !dbg !4578
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4579
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %6), !dbg !4580
  %7 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4581
  %tobool2 = icmp ne %union.tree_node* %7, null, !dbg !4581
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !4583

if.then3:                                         ; preds = %if.end
  %8 = load %struct.cpp_reader*, %struct.cpp_reader** @parse_in, align 8, !dbg !4584
  %9 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4585
  %string = bitcast %union.tree_node* %9 to %struct.tree_string*, !dbg !4585
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !4585
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !4585
  call void @c_common_pch_pragma(%struct.cpp_reader* %8, i8* %arraydecay), !dbg !4586
  br label %if.end4, !dbg !4586

if.end4:                                          ; preds = %if.then3, %if.end
  ret void, !dbg !4587
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local void @using_eh_for_cleanups() #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_translation_unit(%struct.c_parser* %parser) #0 !dbg !4588 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %obstack_position = alloca i8*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !4589, metadata !DIExpression()), !dbg !4590
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4591
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 22), !dbg !4593
  %tobool = icmp ne i8 %call, 0, !dbg !4593
  br i1 %tobool, label %if.then, label %if.else, !dbg !4594

if.then:                                          ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4595
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !4597
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !4598
  %2 = load i32, i32* %location, align 8, !dbg !4598
  %call2 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %2, i32 834, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0)), !dbg !4599
  br label %if.end, !dbg !4600

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %obstack_position, metadata !4601, metadata !DIExpression()), !dbg !4603
  store i64 0, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !4604
  %3 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !4604
  %4 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !4604
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64, !dbg !4604
  %sub.ptr.rhs.cast = ptrtoint i8* %4 to i64, !dbg !4604
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !4604
  %5 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !4604
  %cmp = icmp slt i64 %sub.ptr.sub, %5, !dbg !4604
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4604

cond.true:                                        ; preds = %if.else
  %6 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !4604
  %conv = trunc i64 %6 to i32, !dbg !4604
  call void @_obstack_newchunk(%struct.obstack* @parser_obstack, i32 %conv), !dbg !4604
  br label %cond.end, !dbg !4604

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !4604

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4604
  %7 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !4604
  %8 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !4604
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %7, !dbg !4604
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !4604
  %9 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !4604
  %10 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !4604
  %cmp3 = icmp eq i8* %9, %10, !dbg !4604
  br i1 %cmp3, label %cond.true5, label %cond.false6, !dbg !4604

cond.true5:                                       ; preds = %cond.end
  %bf.load = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !4604
  %bf.clear = and i8 %bf.load, -3, !dbg !4604
  %bf.set = or i8 %bf.clear, 2, !dbg !4604
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !4604
  br label %cond.end7, !dbg !4604

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !4604

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !4604
  %11 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !4604
  %sub.ptr.lhs.cast9 = ptrtoint i8* %11 to i64, !dbg !4604
  %sub.ptr.sub10 = sub i64 %sub.ptr.lhs.cast9, 0, !dbg !4604
  store i64 %sub.ptr.sub10, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !4604
  %12 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !4604
  %sub.ptr.lhs.cast11 = ptrtoint i8* %12 to i64, !dbg !4604
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast11, 0, !dbg !4604
  %13 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !4604
  %conv13 = sext i32 %13 to i64, !dbg !4604
  %add = add nsw i64 %sub.ptr.sub12, %conv13, !dbg !4604
  %14 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !4604
  %neg = xor i32 %14, -1, !dbg !4604
  %conv14 = sext i32 %neg to i64, !dbg !4604
  %and = and i64 %add, %conv14, !dbg !4604
  %15 = inttoptr i64 %and to i8*, !dbg !4604
  store i8* %15, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !4604
  %16 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !4604
  %17 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !4604
  %18 = bitcast %struct._obstack_chunk* %17 to i8*, !dbg !4604
  %sub.ptr.lhs.cast15 = ptrtoint i8* %16 to i64, !dbg !4604
  %sub.ptr.rhs.cast16 = ptrtoint i8* %18 to i64, !dbg !4604
  %sub.ptr.sub17 = sub i64 %sub.ptr.lhs.cast15, %sub.ptr.rhs.cast16, !dbg !4604
  %19 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !4604
  %20 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !4604
  %21 = bitcast %struct._obstack_chunk* %20 to i8*, !dbg !4604
  %sub.ptr.lhs.cast18 = ptrtoint i8* %19 to i64, !dbg !4604
  %sub.ptr.rhs.cast19 = ptrtoint i8* %21 to i64, !dbg !4604
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19, !dbg !4604
  %cmp21 = icmp sgt i64 %sub.ptr.sub17, %sub.ptr.sub20, !dbg !4604
  br i1 %cmp21, label %cond.true23, label %cond.false24, !dbg !4604

cond.true23:                                      ; preds = %cond.end7
  %22 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !4604
  store i8* %22, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !4604
  br label %cond.end25, !dbg !4604

cond.false24:                                     ; preds = %cond.end7
  br label %cond.end25, !dbg !4604

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi i8* [ %22, %cond.true23 ], [ null, %cond.false24 ], !dbg !4604
  %23 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !4604
  store i8* %23, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !4604
  %24 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !4604
  %25 = inttoptr i64 %24 to i8*, !dbg !4604
  store i8* %25, i8** %obstack_position, align 8, !dbg !4603
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext 0), !dbg !4605
  br label %do.body, !dbg !4606

do.body:                                          ; preds = %do.cond, %cond.end25
  call void @ggc_collect(), !dbg !4607
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4609
  call void @c_parser_external_declaration(%struct.c_parser* %26), !dbg !4610
  %27 = load i8*, i8** %obstack_position, align 8, !dbg !4611
  %28 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !4611
  %29 = bitcast %struct._obstack_chunk* %28 to i8*, !dbg !4611
  %sub.ptr.lhs.cast27 = ptrtoint i8* %27 to i64, !dbg !4611
  %sub.ptr.rhs.cast28 = ptrtoint i8* %29 to i64, !dbg !4611
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast27, %sub.ptr.rhs.cast28, !dbg !4611
  store i64 %sub.ptr.sub29, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !4611
  %30 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !4611
  %cmp30 = icmp sgt i64 %30, 0, !dbg !4611
  br i1 %cmp30, label %land.lhs.true, label %cond.false39, !dbg !4611

land.lhs.true:                                    ; preds = %do.body
  %31 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !4611
  %32 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !4611
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !4611
  %34 = bitcast %struct._obstack_chunk* %33 to i8*, !dbg !4611
  %sub.ptr.lhs.cast32 = ptrtoint i8* %32 to i64, !dbg !4611
  %sub.ptr.rhs.cast33 = ptrtoint i8* %34 to i64, !dbg !4611
  %sub.ptr.sub34 = sub i64 %sub.ptr.lhs.cast32, %sub.ptr.rhs.cast33, !dbg !4611
  %cmp35 = icmp slt i64 %31, %sub.ptr.sub34, !dbg !4611
  br i1 %cmp35, label %cond.true37, label %cond.false39, !dbg !4611

cond.true37:                                      ; preds = %land.lhs.true
  %35 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !4611
  %36 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !4611
  %37 = bitcast %struct._obstack_chunk* %36 to i8*, !dbg !4611
  %add.ptr38 = getelementptr inbounds i8, i8* %37, i64 %35, !dbg !4611
  store i8* %add.ptr38, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !4611
  store i8* %add.ptr38, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !4611
  %38 = ptrtoint i8* %add.ptr38 to i64, !dbg !4611
  br label %cond.end41, !dbg !4611

cond.false39:                                     ; preds = %land.lhs.true, %do.body
  %39 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !4611
  %40 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !4611
  %41 = bitcast %struct._obstack_chunk* %40 to i8*, !dbg !4611
  %add.ptr40 = getelementptr inbounds i8, i8* %41, i64 %39, !dbg !4611
  call void @obstack_free(%struct.obstack* @parser_obstack, i8* %add.ptr40), !dbg !4611
  br label %cond.end41, !dbg !4611

cond.end41:                                       ; preds = %cond.false39, %cond.true37
  %cond42 = phi i64 [ %38, %cond.true37 ], [ 0, %cond.false39 ], !dbg !4611
  br label %do.cond, !dbg !4612

do.cond:                                          ; preds = %cond.end41
  %42 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4613
  %call43 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %42, i32 22), !dbg !4614
  %tobool44 = icmp ne i8 %call43, 0, !dbg !4612
  br i1 %tobool44, label %do.body, label %do.end, !dbg !4612, !llvm.loop !4615

do.end:                                           ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end, %if.then
  ret void, !dbg !4617
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_mx_c_parser(i8* %x_p) #0 !dbg !4618 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.c_parser*, align 8
  %i0 = alloca i64, align 8
  %l0 = alloca i64, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !4619, metadata !DIExpression()), !dbg !4620
  call void @llvm.dbg.declare(metadata %struct.c_parser** %x, metadata !4621, metadata !DIExpression()), !dbg !4623
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !4624
  %1 = bitcast i8* %0 to %struct.c_parser*, !dbg !4625
  store %struct.c_parser* %1, %struct.c_parser** %x, align 8, !dbg !4623
  %2 = load %struct.c_parser*, %struct.c_parser** %x, align 8, !dbg !4626
  %cmp = icmp ne %struct.c_parser* %2, null, !dbg !4626
  br i1 %cmp, label %land.lhs.true, label %if.end9, !dbg !4626

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %x, align 8, !dbg !4626
  %4 = bitcast %struct.c_parser* %3 to i8*, !dbg !4626
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !4626
  br i1 %cmp1, label %land.lhs.true2, label %if.end9, !dbg !4626

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.c_parser*, %struct.c_parser** %x, align 8, !dbg !4626
  %6 = bitcast %struct.c_parser* %5 to i8*, !dbg !4626
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !4626
  %tobool = icmp ne i32 %call, 0, !dbg !4626
  br i1 %tobool, label %if.end9, label %if.then, !dbg !4628

if.then:                                          ; preds = %land.lhs.true2
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !4629, metadata !DIExpression()), !dbg !4632
  call void @llvm.dbg.declare(metadata i64* %l0, metadata !4633, metadata !DIExpression()), !dbg !4634
  store i64 2, i64* %l0, align 8, !dbg !4634
  store i64 0, i64* %i0, align 8, !dbg !4635
  br label %for.cond, !dbg !4637

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load i64, i64* %i0, align 8, !dbg !4638
  %8 = load i64, i64* %l0, align 8, !dbg !4640
  %cmp3 = icmp ne i64 %7, %8, !dbg !4641
  br i1 %cmp3, label %for.body, label %for.end, !dbg !4642

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !4643

do.body:                                          ; preds = %for.body
  %9 = load %struct.c_parser*, %struct.c_parser** %x, align 8, !dbg !4645
  %tokens = getelementptr inbounds %struct.c_parser, %struct.c_parser* %9, i32 0, i32 0, !dbg !4645
  %10 = load i64, i64* %i0, align 8, !dbg !4645
  %arrayidx = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens, i64 0, i64 %10, !dbg !4645
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %arrayidx, i32 0, i32 1, !dbg !4645
  %11 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4645
  %cmp4 = icmp ne %union.tree_node* %11, null, !dbg !4645
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !4648

if.then5:                                         ; preds = %do.body
  %12 = load %struct.c_parser*, %struct.c_parser** %x, align 8, !dbg !4645
  %tokens6 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %12, i32 0, i32 0, !dbg !4645
  %13 = load i64, i64* %i0, align 8, !dbg !4645
  %arrayidx7 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens6, i64 0, i64 %13, !dbg !4645
  %value8 = getelementptr inbounds %struct.c_token, %struct.c_token* %arrayidx7, i32 0, i32 1, !dbg !4645
  %14 = load %union.tree_node*, %union.tree_node** %value8, align 8, !dbg !4645
  %15 = bitcast %union.tree_node* %14 to i8*, !dbg !4645
  call void @gt_ggc_mx_lang_tree_node(i8* %15), !dbg !4645
  br label %if.end, !dbg !4645

if.end:                                           ; preds = %if.then5, %do.body
  br label %do.end, !dbg !4648

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !4649

for.inc:                                          ; preds = %do.end
  %16 = load i64, i64* %i0, align 8, !dbg !4650
  %inc = add i64 %16, 1, !dbg !4650
  store i64 %inc, i64* %i0, align 8, !dbg !4650
  br label %for.cond, !dbg !4651, !llvm.loop !4652

for.end:                                          ; preds = %for.cond
  br label %if.end9, !dbg !4654

if.end9:                                          ; preds = %for.end, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !4655
}

declare dso_local i32 @ggc_set_mark(i8*) #2

declare dso_local void @gt_ggc_mx_lang_tree_node(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_nx_c_parser(i8* %x_p) #0 !dbg !4656 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.c_parser*, align 8
  %i0 = alloca i64, align 8
  %l0 = alloca i64, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !4657, metadata !DIExpression()), !dbg !4658
  call void @llvm.dbg.declare(metadata %struct.c_parser** %x, metadata !4659, metadata !DIExpression()), !dbg !4660
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !4661
  %1 = bitcast i8* %0 to %struct.c_parser*, !dbg !4662
  store %struct.c_parser* %1, %struct.c_parser** %x, align 8, !dbg !4660
  %2 = load %struct.c_parser*, %struct.c_parser** %x, align 8, !dbg !4663
  %3 = bitcast %struct.c_parser* %2 to i8*, !dbg !4663
  %4 = load %struct.c_parser*, %struct.c_parser** %x, align 8, !dbg !4665
  %5 = bitcast %struct.c_parser* %4 to i8*, !dbg !4665
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_8c_parser, i32 9), !dbg !4666
  %tobool = icmp ne i32 %call, 0, !dbg !4666
  br i1 %tobool, label %if.then, label %if.end6, !dbg !4667

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !4668, metadata !DIExpression()), !dbg !4671
  call void @llvm.dbg.declare(metadata i64* %l0, metadata !4672, metadata !DIExpression()), !dbg !4673
  store i64 2, i64* %l0, align 8, !dbg !4673
  store i64 0, i64* %i0, align 8, !dbg !4674
  br label %for.cond, !dbg !4676

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i64, i64* %i0, align 8, !dbg !4677
  %7 = load i64, i64* %l0, align 8, !dbg !4679
  %cmp = icmp ne i64 %6, %7, !dbg !4680
  br i1 %cmp, label %for.body, label %for.end, !dbg !4681

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !4682

do.body:                                          ; preds = %for.body
  %8 = load %struct.c_parser*, %struct.c_parser** %x, align 8, !dbg !4684
  %tokens = getelementptr inbounds %struct.c_parser, %struct.c_parser* %8, i32 0, i32 0, !dbg !4684
  %9 = load i64, i64* %i0, align 8, !dbg !4684
  %arrayidx = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens, i64 0, i64 %9, !dbg !4684
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %arrayidx, i32 0, i32 1, !dbg !4684
  %10 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4684
  %cmp1 = icmp ne %union.tree_node* %10, null, !dbg !4684
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !4687

if.then2:                                         ; preds = %do.body
  %11 = load %struct.c_parser*, %struct.c_parser** %x, align 8, !dbg !4684
  %tokens3 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %11, i32 0, i32 0, !dbg !4684
  %12 = load i64, i64* %i0, align 8, !dbg !4684
  %arrayidx4 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens3, i64 0, i64 %12, !dbg !4684
  %value5 = getelementptr inbounds %struct.c_token, %struct.c_token* %arrayidx4, i32 0, i32 1, !dbg !4684
  %13 = load %union.tree_node*, %union.tree_node** %value5, align 8, !dbg !4684
  %14 = bitcast %union.tree_node* %13 to i8*, !dbg !4684
  call void @gt_pch_nx_lang_tree_node(i8* %14), !dbg !4684
  br label %if.end, !dbg !4684

if.end:                                           ; preds = %if.then2, %do.body
  br label %do.end, !dbg !4687

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !4688

for.inc:                                          ; preds = %do.end
  %15 = load i64, i64* %i0, align 8, !dbg !4689
  %inc = add i64 %15, 1, !dbg !4689
  store i64 %inc, i64* %i0, align 8, !dbg !4689
  br label %for.cond, !dbg !4690, !llvm.loop !4691

for.end:                                          ; preds = %for.cond
  br label %if.end6, !dbg !4693

if.end6:                                          ; preds = %for.end, %entry
  ret void, !dbg !4694
}

declare dso_local i32 @gt_pch_note_object(i8*, i8*, void (i8*, i8*, void (i8*, i8*)*, i8*)*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_8c_parser(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !4695 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.c_parser*, align 8
  %i0 = alloca i64, align 8
  %l0 = alloca i64, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !4699, metadata !DIExpression()), !dbg !4700
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !4701, metadata !DIExpression()), !dbg !4702
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !4703, metadata !DIExpression()), !dbg !4704
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !4705, metadata !DIExpression()), !dbg !4706
  call void @llvm.dbg.declare(metadata %struct.c_parser** %x, metadata !4707, metadata !DIExpression()), !dbg !4708
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !4709
  %1 = bitcast i8* %0 to %struct.c_parser*, !dbg !4710
  store %struct.c_parser* %1, %struct.c_parser** %x, align 8, !dbg !4708
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !4711, metadata !DIExpression()), !dbg !4713
  call void @llvm.dbg.declare(metadata i64* %l0, metadata !4714, metadata !DIExpression()), !dbg !4715
  store i64 2, i64* %l0, align 8, !dbg !4715
  store i64 0, i64* %i0, align 8, !dbg !4716
  br label %for.cond, !dbg !4718

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i0, align 8, !dbg !4719
  %3 = load i64, i64* %l0, align 8, !dbg !4721
  %cmp = icmp ne i64 %2, %3, !dbg !4722
  br i1 %cmp, label %for.body, label %for.end, !dbg !4723

for.body:                                         ; preds = %for.cond
  %4 = load %struct.c_parser*, %struct.c_parser** %x, align 8, !dbg !4724
  %5 = bitcast %struct.c_parser* %4 to i8*, !dbg !4727
  %6 = load i8*, i8** %this_obj.addr, align 8, !dbg !4728
  %cmp1 = icmp eq i8* %5, %6, !dbg !4729
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4730

if.then:                                          ; preds = %for.body
  %7 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !4731
  %8 = load %struct.c_parser*, %struct.c_parser** %x, align 8, !dbg !4732
  %tokens = getelementptr inbounds %struct.c_parser, %struct.c_parser* %8, i32 0, i32 0, !dbg !4733
  %9 = load i64, i64* %i0, align 8, !dbg !4734
  %arrayidx = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens, i64 0, i64 %9, !dbg !4735
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %arrayidx, i32 0, i32 1, !dbg !4736
  %10 = bitcast %union.tree_node** %value to i8*, !dbg !4737
  %11 = load i8*, i8** %cookie.addr, align 8, !dbg !4738
  call void %7(i8* %10, i8* %11), !dbg !4731
  br label %if.end, !dbg !4731

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !4739

for.inc:                                          ; preds = %if.end
  %12 = load i64, i64* %i0, align 8, !dbg !4740
  %inc = add i64 %12, 1, !dbg !4740
  store i64 %inc, i64* %i0, align 8, !dbg !4740
  br label %for.cond, !dbg !4741, !llvm.loop !4742

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4744
}

declare dso_local void @gt_pch_nx_lang_tree_node(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_lex_one_token(%struct.c_parser* %parser, %struct.c_token* %token) #0 !dbg !4745 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %token.addr = alloca %struct.c_token*, align 8
  %decl = alloca %union.tree_node*, align 8
  %objc_force_identifier = alloca i8, align 1
  %rid_code = alloca i32, align 4
  %objc_interface_decl = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !4748, metadata !DIExpression()), !dbg !4749
  store %struct.c_token* %token, %struct.c_token** %token.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_token** %token.addr, metadata !4750, metadata !DIExpression()), !dbg !4751
  br label %do.body, !dbg !4752

do.body:                                          ; preds = %entry
  %0 = load i8, i8* @timevar_enable, align 1, !dbg !4753
  %tobool = icmp ne i8 %0, 0, !dbg !4753
  br i1 %tobool, label %if.then, label %if.end, !dbg !4756

if.then:                                          ; preds = %do.body
  call void @timevar_push_1(i32 43), !dbg !4753
  br label %if.end, !dbg !4753

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !4756

do.end:                                           ; preds = %if.end
  %1 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4757
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %1, i32 0, i32 1, !dbg !4758
  %2 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4759
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %2, i32 0, i32 2, !dbg !4760
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4761
  %lex_untranslated_string = getelementptr inbounds %struct.c_parser, %struct.c_parser* %3, i32 0, i32 2, !dbg !4762
  %bf.load = load i8, i8* %lex_untranslated_string, align 2, !dbg !4762
  %bf.lshr = lshr i8 %bf.load, 3, !dbg !4762
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4762
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4762
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !4761
  %4 = zext i1 %tobool1 to i64, !dbg !4761
  %cond = select i1 %tobool1, i32 1, i32 0, !dbg !4761
  %call = call i32 @c_lex_with_flags(%union.tree_node** %value, i32* %location, i8* null, i32 %cond), !dbg !4763
  %5 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4764
  %6 = bitcast %struct.c_token* %5 to i32*, !dbg !4765
  %bf.load2 = load i32, i32* %6, align 8, !dbg !4766
  %bf.value = and i32 %call, 255, !dbg !4766
  %bf.clear3 = and i32 %bf.load2, -256, !dbg !4766
  %bf.set = or i32 %bf.clear3, %bf.value, !dbg !4766
  store i32 %bf.set, i32* %6, align 8, !dbg !4766
  %7 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4767
  %8 = bitcast %struct.c_token* %7 to i32*, !dbg !4768
  %bf.load4 = load i32, i32* %8, align 8, !dbg !4769
  %bf.clear5 = and i32 %bf.load4, -65281, !dbg !4769
  %bf.set6 = or i32 %bf.clear5, 1024, !dbg !4769
  store i32 %bf.set6, i32* %8, align 8, !dbg !4769
  %9 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4770
  %10 = bitcast %struct.c_token* %9 to i32*, !dbg !4771
  %bf.load7 = load i32, i32* %10, align 8, !dbg !4772
  %bf.clear8 = and i32 %bf.load7, -16711681, !dbg !4772
  %bf.set9 = or i32 %bf.clear8, 9961472, !dbg !4772
  store i32 %bf.set9, i32* %10, align 8, !dbg !4772
  %11 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4773
  %12 = bitcast %struct.c_token* %11 to i32*, !dbg !4774
  %bf.load10 = load i32, i32* %12, align 8, !dbg !4775
  %bf.clear11 = and i32 %bf.load10, 16777215, !dbg !4775
  store i32 %bf.clear11, i32* %12, align 8, !dbg !4775
  %13 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4776
  %14 = bitcast %struct.c_token* %13 to i32*, !dbg !4777
  %bf.load12 = load i32, i32* %14, align 8, !dbg !4777
  %bf.clear13 = and i32 %bf.load12, 255, !dbg !4777
  switch i32 %bf.clear13, label %sw.default [
    i32 53, label %sw.bb
    i32 54, label %sw.bb135
    i32 18, label %sw.bb148
    i32 19, label %sw.bb148
    i32 21, label %sw.bb148
    i32 43, label %sw.bb148
    i32 70, label %sw.bb157
  ], !dbg !4778

sw.bb:                                            ; preds = %do.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !4779, metadata !DIExpression()), !dbg !4782
  call void @llvm.dbg.declare(metadata i8* %objc_force_identifier, metadata !4783, metadata !DIExpression()), !dbg !4784
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4785
  %objc_need_raw_identifier = getelementptr inbounds %struct.c_parser, %struct.c_parser* %15, i32 0, i32 2, !dbg !4786
  %bf.load14 = load i8, i8* %objc_need_raw_identifier, align 2, !dbg !4786
  %bf.lshr15 = lshr i8 %bf.load14, 5, !dbg !4786
  %bf.clear16 = and i8 %bf.lshr15, 1, !dbg !4786
  %bf.cast17 = zext i8 %bf.clear16 to i32, !dbg !4786
  %conv = trunc i32 %bf.cast17 to i8, !dbg !4785
  store i8 %conv, i8* %objc_force_identifier, align 1, !dbg !4784
  %16 = load i32, i32* @c_language, align 4, !dbg !4787
  %and = and i32 %16, 1, !dbg !4787
  %cmp = icmp ne i32 %and, 0, !dbg !4787
  br i1 %cmp, label %if.then19, label %if.end23, !dbg !4789

if.then19:                                        ; preds = %sw.bb
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4790
  %objc_need_raw_identifier20 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %17, i32 0, i32 2, !dbg !4791
  %bf.load21 = load i8, i8* %objc_need_raw_identifier20, align 2, !dbg !4792
  %bf.clear22 = and i8 %bf.load21, -33, !dbg !4792
  store i8 %bf.clear22, i8* %objc_need_raw_identifier20, align 2, !dbg !4792
  br label %if.end23, !dbg !4790

if.end23:                                         ; preds = %if.then19, %sw.bb
  %18 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4793
  %value24 = getelementptr inbounds %struct.c_token, %struct.c_token* %18, i32 0, i32 1, !dbg !4793
  %19 = load %union.tree_node*, %union.tree_node** %value24, align 8, !dbg !4793
  %base = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !4793
  %20 = bitcast %struct.tree_base* %base to i64*, !dbg !4793
  %bf.load25 = load i64, i64* %20, align 8, !dbg !4793
  %bf.lshr26 = lshr i64 %bf.load25, 33, !dbg !4793
  %bf.clear27 = and i64 %bf.lshr26, 1, !dbg !4793
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !4793
  %tobool29 = icmp ne i32 %bf.cast28, 0, !dbg !4793
  br i1 %tobool29, label %if.then30, label %if.end94, !dbg !4795

if.then30:                                        ; preds = %if.end23
  call void @llvm.dbg.declare(metadata i32* %rid_code, metadata !4796, metadata !DIExpression()), !dbg !4798
  %21 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4799
  %value31 = getelementptr inbounds %struct.c_token, %struct.c_token* %21, i32 0, i32 1, !dbg !4799
  %22 = load %union.tree_node*, %union.tree_node** %value31, align 8, !dbg !4799
  %23 = bitcast %union.tree_node* %22 to %struct.c_common_identifier*, !dbg !4799
  %node = getelementptr inbounds %struct.c_common_identifier, %struct.c_common_identifier* %23, i32 0, i32 1, !dbg !4799
  %rid_code32 = getelementptr inbounds %struct.cpp_hashnode, %struct.cpp_hashnode* %node, i32 0, i32 2, !dbg !4799
  %24 = load i8, i8* %rid_code32, align 1, !dbg !4799
  %conv33 = zext i8 %24 to i32, !dbg !4799
  store i32 %conv33, i32* %rid_code, align 4, !dbg !4798
  %25 = load i32, i32* %rid_code, align 4, !dbg !4800
  %cmp34 = icmp eq i32 %25, 65, !dbg !4802
  br i1 %cmp34, label %if.then36, label %if.else, !dbg !4803

if.then36:                                        ; preds = %if.then30
  %26 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4804
  %location37 = getelementptr inbounds %struct.c_token, %struct.c_token* %26, i32 0, i32 2, !dbg !4806
  %27 = load i32, i32* %location37, align 8, !dbg !4806
  %28 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4807
  %value38 = getelementptr inbounds %struct.c_token, %struct.c_token* %28, i32 0, i32 1, !dbg !4808
  %29 = load %union.tree_node*, %union.tree_node** %value38, align 8, !dbg !4808
  %call39 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %27, i32 49, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), %union.tree_node* %29), !dbg !4809
  br label %if.end93, !dbg !4810

if.else:                                          ; preds = %if.then30
  %30 = load i32, i32* %rid_code, align 4, !dbg !4811
  %cmp40 = icmp uge i32 %30, 136, !dbg !4813
  br i1 %cmp40, label %land.lhs.true, label %if.else52, !dbg !4814

land.lhs.true:                                    ; preds = %if.else
  %31 = load i32, i32* %rid_code, align 4, !dbg !4815
  %cmp42 = icmp ule i32 %31, 151, !dbg !4816
  br i1 %cmp42, label %if.then44, label %if.else52, !dbg !4817

if.then44:                                        ; preds = %land.lhs.true
  %32 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4818
  %33 = bitcast %struct.c_token* %32 to i32*, !dbg !4820
  %bf.load45 = load i32, i32* %33, align 8, !dbg !4821
  %bf.clear46 = and i32 %bf.load45, -65281, !dbg !4821
  %bf.set47 = or i32 %bf.clear46, 768, !dbg !4821
  store i32 %bf.set47, i32* %33, align 8, !dbg !4821
  %34 = load i32, i32* %rid_code, align 4, !dbg !4822
  %35 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4823
  %36 = bitcast %struct.c_token* %35 to i32*, !dbg !4824
  %bf.load48 = load i32, i32* %36, align 8, !dbg !4825
  %bf.value49 = and i32 %34, 255, !dbg !4825
  %bf.shl = shl i32 %bf.value49, 16, !dbg !4825
  %bf.clear50 = and i32 %bf.load48, -16711681, !dbg !4825
  %bf.set51 = or i32 %bf.clear50, %bf.shl, !dbg !4825
  store i32 %bf.set51, i32* %36, align 8, !dbg !4825
  br label %sw.epilog, !dbg !4826

if.else52:                                        ; preds = %land.lhs.true, %if.else
  %37 = load i32, i32* @c_language, align 4, !dbg !4827
  %and53 = and i32 %37, 1, !dbg !4827
  %cmp54 = icmp ne i32 %and53, 0, !dbg !4827
  br i1 %cmp54, label %if.then56, label %if.else82, !dbg !4829

if.then56:                                        ; preds = %if.else52
  %38 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4830
  %value57 = getelementptr inbounds %struct.c_token, %struct.c_token* %38, i32 0, i32 1, !dbg !4833
  %39 = load %union.tree_node*, %union.tree_node** %value57, align 8, !dbg !4833
  %call58 = call i32 @objc_is_reserved_word(%union.tree_node* %39), !dbg !4834
  %tobool59 = icmp ne i32 %call58, 0, !dbg !4834
  br i1 %tobool59, label %if.end81, label %land.lhs.true60, !dbg !4835

land.lhs.true60:                                  ; preds = %if.then56
  %40 = load i32, i32* %rid_code, align 4, !dbg !4836
  %cmp61 = icmp uge i32 %40, 21, !dbg !4836
  br i1 %cmp61, label %land.lhs.true63, label %if.then71, !dbg !4836

land.lhs.true63:                                  ; preds = %land.lhs.true60
  %41 = load i32, i32* %rid_code, align 4, !dbg !4836
  %cmp64 = icmp ule i32 %41, 26, !dbg !4836
  br i1 %cmp64, label %lor.lhs.false, label %if.then71, !dbg !4837

lor.lhs.false:                                    ; preds = %land.lhs.true63
  %42 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4838
  %objc_pq_context = getelementptr inbounds %struct.c_parser, %struct.c_parser* %42, i32 0, i32 2, !dbg !4839
  %bf.load66 = load i8, i8* %objc_pq_context, align 2, !dbg !4839
  %bf.lshr67 = lshr i8 %bf.load66, 4, !dbg !4839
  %bf.clear68 = and i8 %bf.lshr67, 1, !dbg !4839
  %bf.cast69 = zext i8 %bf.clear68 to i32, !dbg !4839
  %tobool70 = icmp ne i32 %bf.cast69, 0, !dbg !4838
  br i1 %tobool70, label %if.then71, label %if.end81, !dbg !4840

if.then71:                                        ; preds = %lor.lhs.false, %land.lhs.true63, %land.lhs.true60
  %43 = load %union.tree_node**, %union.tree_node*** @ridpointers, align 8, !dbg !4841
  %44 = load i32, i32* %rid_code, align 4, !dbg !4843
  %idxprom = sext i32 %44 to i64, !dbg !4841
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %43, i64 %idxprom, !dbg !4841
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4841
  %46 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4844
  %value72 = getelementptr inbounds %struct.c_token, %struct.c_token* %46, i32 0, i32 1, !dbg !4845
  store %union.tree_node* %45, %union.tree_node** %value72, align 8, !dbg !4846
  %47 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4847
  %48 = bitcast %struct.c_token* %47 to i32*, !dbg !4848
  %bf.load73 = load i32, i32* %48, align 8, !dbg !4849
  %bf.clear74 = and i32 %bf.load73, -256, !dbg !4849
  %bf.set75 = or i32 %bf.clear74, 74, !dbg !4849
  store i32 %bf.set75, i32* %48, align 8, !dbg !4849
  %49 = load i32, i32* %rid_code, align 4, !dbg !4850
  %50 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4851
  %51 = bitcast %struct.c_token* %50 to i32*, !dbg !4852
  %bf.load76 = load i32, i32* %51, align 8, !dbg !4853
  %bf.value77 = and i32 %49, 255, !dbg !4853
  %bf.shl78 = shl i32 %bf.value77, 16, !dbg !4853
  %bf.clear79 = and i32 %bf.load76, -16711681, !dbg !4853
  %bf.set80 = or i32 %bf.clear79, %bf.shl78, !dbg !4853
  store i32 %bf.set80, i32* %51, align 8, !dbg !4853
  br label %sw.epilog, !dbg !4854

if.end81:                                         ; preds = %lor.lhs.false, %if.then56
  br label %if.end91, !dbg !4855

if.else82:                                        ; preds = %if.else52
  %52 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4856
  %53 = bitcast %struct.c_token* %52 to i32*, !dbg !4858
  %bf.load83 = load i32, i32* %53, align 8, !dbg !4859
  %bf.clear84 = and i32 %bf.load83, -256, !dbg !4859
  %bf.set85 = or i32 %bf.clear84, 74, !dbg !4859
  store i32 %bf.set85, i32* %53, align 8, !dbg !4859
  %54 = load i32, i32* %rid_code, align 4, !dbg !4860
  %55 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4861
  %56 = bitcast %struct.c_token* %55 to i32*, !dbg !4862
  %bf.load86 = load i32, i32* %56, align 8, !dbg !4863
  %bf.value87 = and i32 %54, 255, !dbg !4863
  %bf.shl88 = shl i32 %bf.value87, 16, !dbg !4863
  %bf.clear89 = and i32 %bf.load86, -16711681, !dbg !4863
  %bf.set90 = or i32 %bf.clear89, %bf.shl88, !dbg !4863
  store i32 %bf.set90, i32* %56, align 8, !dbg !4863
  br label %sw.epilog, !dbg !4864

if.end91:                                         ; preds = %if.end81
  br label %if.end92

if.end92:                                         ; preds = %if.end91
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %if.then36
  br label %if.end94, !dbg !4865

if.end94:                                         ; preds = %if.end93, %if.end23
  %57 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4866
  %value95 = getelementptr inbounds %struct.c_token, %struct.c_token* %57, i32 0, i32 1, !dbg !4867
  %58 = load %union.tree_node*, %union.tree_node** %value95, align 8, !dbg !4867
  %call96 = call %union.tree_node* @lookup_name(%union.tree_node* %58), !dbg !4868
  store %union.tree_node* %call96, %union.tree_node** %decl, align 8, !dbg !4869
  %59 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4870
  %tobool97 = icmp ne %union.tree_node* %59, null, !dbg !4870
  br i1 %tobool97, label %if.then98, label %if.else110, !dbg !4872

if.then98:                                        ; preds = %if.end94
  %60 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4873
  %base99 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !4873
  %61 = bitcast %struct.tree_base* %base99 to i64*, !dbg !4873
  %bf.load100 = load i64, i64* %61, align 8, !dbg !4873
  %bf.clear101 = and i64 %bf.load100, 65535, !dbg !4873
  %bf.cast102 = trunc i64 %bf.clear101 to i32, !dbg !4873
  %cmp103 = icmp eq i32 %bf.cast102, 35, !dbg !4876
  br i1 %cmp103, label %if.then105, label %if.end109, !dbg !4877

if.then105:                                       ; preds = %if.then98
  %62 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4878
  %63 = bitcast %struct.c_token* %62 to i32*, !dbg !4880
  %bf.load106 = load i32, i32* %63, align 8, !dbg !4881
  %bf.clear107 = and i32 %bf.load106, -65281, !dbg !4881
  %bf.set108 = or i32 %bf.clear107, 256, !dbg !4881
  store i32 %bf.set108, i32* %63, align 8, !dbg !4881
  br label %sw.epilog, !dbg !4882

if.end109:                                        ; preds = %if.then98
  br label %if.end132, !dbg !4883

if.else110:                                       ; preds = %if.end94
  %64 = load i32, i32* @c_language, align 4, !dbg !4884
  %and111 = and i32 %64, 1, !dbg !4884
  %cmp112 = icmp ne i32 %and111, 0, !dbg !4884
  br i1 %cmp112, label %if.then114, label %if.end131, !dbg !4886

if.then114:                                       ; preds = %if.else110
  call void @llvm.dbg.declare(metadata %union.tree_node** %objc_interface_decl, metadata !4887, metadata !DIExpression()), !dbg !4889
  %65 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4890
  %value115 = getelementptr inbounds %struct.c_token, %struct.c_token* %65, i32 0, i32 1, !dbg !4891
  %66 = load %union.tree_node*, %union.tree_node** %value115, align 8, !dbg !4891
  %call116 = call %union.tree_node* @objc_is_class_name(%union.tree_node* %66), !dbg !4892
  store %union.tree_node* %call116, %union.tree_node** %objc_interface_decl, align 8, !dbg !4889
  %67 = load %union.tree_node*, %union.tree_node** %objc_interface_decl, align 8, !dbg !4893
  %tobool117 = icmp ne %union.tree_node* %67, null, !dbg !4893
  br i1 %tobool117, label %land.lhs.true118, label %if.end130, !dbg !4895

land.lhs.true118:                                 ; preds = %if.then114
  %call119 = call i32 @global_bindings_p(), !dbg !4896
  %tobool120 = icmp ne i32 %call119, 0, !dbg !4896
  br i1 %tobool120, label %if.then125, label %lor.lhs.false121, !dbg !4897

lor.lhs.false121:                                 ; preds = %land.lhs.true118
  %68 = load i8, i8* %objc_force_identifier, align 1, !dbg !4898
  %tobool122 = icmp ne i8 %68, 0, !dbg !4898
  br i1 %tobool122, label %if.end130, label %land.lhs.true123, !dbg !4899

land.lhs.true123:                                 ; preds = %lor.lhs.false121
  %69 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4900
  %tobool124 = icmp ne %union.tree_node* %69, null, !dbg !4900
  br i1 %tobool124, label %if.end130, label %if.then125, !dbg !4901

if.then125:                                       ; preds = %land.lhs.true123, %land.lhs.true118
  %70 = load %union.tree_node*, %union.tree_node** %objc_interface_decl, align 8, !dbg !4902
  %71 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4904
  %value126 = getelementptr inbounds %struct.c_token, %struct.c_token* %71, i32 0, i32 1, !dbg !4905
  store %union.tree_node* %70, %union.tree_node** %value126, align 8, !dbg !4906
  %72 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4907
  %73 = bitcast %struct.c_token* %72 to i32*, !dbg !4908
  %bf.load127 = load i32, i32* %73, align 8, !dbg !4909
  %bf.clear128 = and i32 %bf.load127, -65281, !dbg !4909
  %bf.set129 = or i32 %bf.clear128, 512, !dbg !4909
  store i32 %bf.set129, i32* %73, align 8, !dbg !4909
  br label %sw.epilog, !dbg !4910

if.end130:                                        ; preds = %land.lhs.true123, %lor.lhs.false121, %if.then114
  br label %if.end131, !dbg !4911

if.end131:                                        ; preds = %if.end130, %if.else110
  br label %if.end132

if.end132:                                        ; preds = %if.end131, %if.end109
  %74 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4912
  %75 = bitcast %struct.c_token* %74 to i32*, !dbg !4913
  %bf.load133 = load i32, i32* %75, align 8, !dbg !4914
  %bf.clear134 = and i32 %bf.load133, -65281, !dbg !4914
  store i32 %bf.clear134, i32* %75, align 8, !dbg !4914
  br label %sw.epilog, !dbg !4915

sw.bb135:                                         ; preds = %do.end
  %76 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4916
  %77 = bitcast %struct.c_token* %76 to i32*, !dbg !4917
  %bf.load136 = load i32, i32* %77, align 8, !dbg !4918
  %bf.clear137 = and i32 %bf.load136, -256, !dbg !4918
  %bf.set138 = or i32 %bf.clear137, 74, !dbg !4918
  store i32 %bf.set138, i32* %77, align 8, !dbg !4918
  %78 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4919
  %value139 = getelementptr inbounds %struct.c_token, %struct.c_token* %78, i32 0, i32 1, !dbg !4919
  %79 = load %union.tree_node*, %union.tree_node** %value139, align 8, !dbg !4919
  %80 = bitcast %union.tree_node* %79 to %struct.c_common_identifier*, !dbg !4919
  %node140 = getelementptr inbounds %struct.c_common_identifier, %struct.c_common_identifier* %80, i32 0, i32 1, !dbg !4919
  %rid_code141 = getelementptr inbounds %struct.cpp_hashnode, %struct.cpp_hashnode* %node140, i32 0, i32 2, !dbg !4919
  %81 = load i8, i8* %rid_code141, align 1, !dbg !4919
  %conv142 = zext i8 %81 to i32, !dbg !4919
  %82 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4920
  %83 = bitcast %struct.c_token* %82 to i32*, !dbg !4921
  %bf.load143 = load i32, i32* %83, align 8, !dbg !4922
  %bf.value144 = and i32 %conv142, 255, !dbg !4922
  %bf.shl145 = shl i32 %bf.value144, 16, !dbg !4922
  %bf.clear146 = and i32 %bf.load143, -16711681, !dbg !4922
  %bf.set147 = or i32 %bf.clear146, %bf.shl145, !dbg !4922
  store i32 %bf.set147, i32* %83, align 8, !dbg !4922
  br label %sw.epilog, !dbg !4923

sw.bb148:                                         ; preds = %do.end, %do.end, %do.end, %do.end
  %84 = load i32, i32* @c_language, align 4, !dbg !4924
  %and149 = and i32 %84, 1, !dbg !4924
  %cmp150 = icmp ne i32 %and149, 0, !dbg !4924
  br i1 %cmp150, label %if.then152, label %if.end156, !dbg !4926

if.then152:                                       ; preds = %sw.bb148
  %85 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4927
  %objc_need_raw_identifier153 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %85, i32 0, i32 2, !dbg !4928
  %bf.load154 = load i8, i8* %objc_need_raw_identifier153, align 2, !dbg !4929
  %bf.clear155 = and i8 %bf.load154, -33, !dbg !4929
  store i8 %bf.clear155, i8* %objc_need_raw_identifier153, align 2, !dbg !4929
  br label %if.end156, !dbg !4927

if.end156:                                        ; preds = %if.then152, %sw.bb148
  br label %sw.epilog, !dbg !4930

sw.bb157:                                         ; preds = %do.end
  %86 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4931
  %value158 = getelementptr inbounds %struct.c_token, %struct.c_token* %86, i32 0, i32 1, !dbg !4931
  %87 = load %union.tree_node*, %union.tree_node** %value158, align 8, !dbg !4931
  %int_cst = bitcast %union.tree_node* %87 to %struct.tree_int_cst*, !dbg !4931
  %int_cst159 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !4931
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst159, i32 0, i32 0, !dbg !4931
  %88 = load i64, i64* %low, align 8, !dbg !4931
  %conv160 = trunc i64 %88 to i32, !dbg !4932
  %89 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4933
  %90 = bitcast %struct.c_token* %89 to i32*, !dbg !4934
  %bf.load161 = load i32, i32* %90, align 8, !dbg !4935
  %bf.value162 = and i32 %conv160, 255, !dbg !4935
  %bf.shl163 = shl i32 %bf.value162, 24, !dbg !4935
  %bf.clear164 = and i32 %bf.load161, 16777215, !dbg !4935
  %bf.set165 = or i32 %bf.clear164, %bf.shl163, !dbg !4935
  store i32 %bf.set165, i32* %90, align 8, !dbg !4935
  %91 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !4936
  %value166 = getelementptr inbounds %struct.c_token, %struct.c_token* %91, i32 0, i32 1, !dbg !4937
  store %union.tree_node* null, %union.tree_node** %value166, align 8, !dbg !4938
  br label %sw.epilog, !dbg !4939

sw.default:                                       ; preds = %do.end
  br label %sw.epilog, !dbg !4940

sw.epilog:                                        ; preds = %sw.default, %sw.bb157, %if.end156, %sw.bb135, %if.end132, %if.then125, %if.then105, %if.else82, %if.then71, %if.then44
  br label %do.body167, !dbg !4941

do.body167:                                       ; preds = %sw.epilog
  %92 = load i8, i8* @timevar_enable, align 1, !dbg !4942
  %tobool168 = icmp ne i8 %92, 0, !dbg !4942
  br i1 %tobool168, label %if.then169, label %if.end170, !dbg !4945

if.then169:                                       ; preds = %do.body167
  call void @timevar_pop_1(i32 43), !dbg !4942
  br label %if.end170, !dbg !4942

if.end170:                                        ; preds = %if.then169, %do.body167
  br label %do.end171, !dbg !4945

do.end171:                                        ; preds = %if.end170
  ret void, !dbg !4946
}

declare dso_local void @timevar_push_1(i32) #2

declare dso_local i32 @c_lex_with_flags(%union.tree_node**, i32*, i8*, i32) #2

declare dso_local zeroext i8 @warning_at(i32, i32, i8*, ...) #2

declare dso_local i32 @objc_is_reserved_word(%union.tree_node*) #2

declare dso_local %union.tree_node* @lookup_name(%union.tree_node*) #2

declare dso_local %union.tree_node* @objc_is_class_name(%union.tree_node*) #2

declare dso_local i32 @global_bindings_p() #2

declare dso_local void @timevar_pop_1(i32) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_consume_pragma(%struct.c_parser* %parser) #0 !dbg !4947 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !4948, metadata !DIExpression()), !dbg !4949
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4950
  %in_pragma = getelementptr inbounds %struct.c_parser, %struct.c_parser* %0, i32 0, i32 2, !dbg !4950
  %bf.load = load i8, i8* %in_pragma, align 2, !dbg !4950
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !4950
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4950
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4950
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4950
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4950

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 543, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4950
  br label %cond.end, !dbg !4950

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4950

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4950
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4951
  %tokens_avail = getelementptr inbounds %struct.c_parser, %struct.c_parser* %1, i32 0, i32 1, !dbg !4951
  %2 = load i16, i16* %tokens_avail, align 8, !dbg !4951
  %conv = sext i16 %2 to i32, !dbg !4951
  %cmp = icmp sge i32 %conv, 1, !dbg !4951
  br i1 %cmp, label %cond.false3, label %cond.true2, !dbg !4951

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 544, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4951
  br label %cond.end4, !dbg !4951

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !4951

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !4951
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4952
  %tokens = getelementptr inbounds %struct.c_parser, %struct.c_parser* %3, i32 0, i32 0, !dbg !4952
  %arrayidx = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens, i64 0, i64 0, !dbg !4952
  %4 = bitcast %struct.c_token* %arrayidx to i32*, !dbg !4952
  %bf.load6 = load i32, i32* %4, align 8, !dbg !4952
  %bf.clear7 = and i32 %bf.load6, 255, !dbg !4952
  %cmp8 = icmp eq i32 %bf.clear7, 70, !dbg !4952
  br i1 %cmp8, label %cond.false11, label %cond.true10, !dbg !4952

cond.true10:                                      ; preds = %cond.end4
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 545, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4952
  br label %cond.end12, !dbg !4952

cond.false11:                                     ; preds = %cond.end4
  br label %cond.end12, !dbg !4952

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !4952
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4953
  %tokens_avail14 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %5, i32 0, i32 1, !dbg !4955
  %6 = load i16, i16* %tokens_avail14, align 8, !dbg !4955
  %conv15 = sext i16 %6 to i32, !dbg !4953
  %cmp16 = icmp eq i32 %conv15, 2, !dbg !4956
  br i1 %cmp16, label %if.then, label %if.end, !dbg !4957

if.then:                                          ; preds = %cond.end12
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4958
  %tokens18 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %7, i32 0, i32 0, !dbg !4959
  %arrayidx19 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens18, i64 0, i64 0, !dbg !4958
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4960
  %tokens20 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %8, i32 0, i32 0, !dbg !4961
  %arrayidx21 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens20, i64 0, i64 1, !dbg !4960
  %9 = bitcast %struct.c_token* %arrayidx19 to i8*, !dbg !4960
  %10 = bitcast %struct.c_token* %arrayidx21 to i8*, !dbg !4960
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !4960
  br label %if.end, !dbg !4958

if.end:                                           ; preds = %if.then, %cond.end12
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4962
  %tokens_avail22 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %11, i32 0, i32 1, !dbg !4963
  %12 = load i16, i16* %tokens_avail22, align 8, !dbg !4964
  %dec = add i16 %12, -1, !dbg !4964
  store i16 %dec, i16* %tokens_avail22, align 8, !dbg !4964
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4965
  %in_pragma23 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %13, i32 0, i32 2, !dbg !4966
  %bf.load24 = load i8, i8* %in_pragma23, align 2, !dbg !4967
  %bf.clear25 = and i8 %bf.load24, -3, !dbg !4967
  %bf.set = or i8 %bf.clear25, 2, !dbg !4967
  store i8 %bf.set, i8* %in_pragma23, align 2, !dbg !4967
  ret void, !dbg !4968
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @c_parser_next_token_is(%struct.c_parser* %parser, i32 %type) #0 !dbg !4969 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %type.addr = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !4972, metadata !DIExpression()), !dbg !4973
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !4974, metadata !DIExpression()), !dbg !4975
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4976
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !4977
  %1 = bitcast %struct.c_token* %call to i32*, !dbg !4978
  %bf.load = load i32, i32* %1, align 8, !dbg !4978
  %bf.clear = and i32 %bf.load, 255, !dbg !4978
  %2 = load i32, i32* %type.addr, align 4, !dbg !4979
  %cmp = icmp eq i32 %bf.clear, %2, !dbg !4980
  %conv = zext i1 %cmp to i32, !dbg !4980
  %conv1 = trunc i32 %conv to i8, !dbg !4977
  ret i8 %conv1, !dbg !4981
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_error(%struct.c_parser* %parser, i8* %gmsgid) #0 !dbg !4982 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %gmsgid.addr = alloca i8*, align 8
  %token = alloca %struct.c_token*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !4985, metadata !DIExpression()), !dbg !4986
  store i8* %gmsgid, i8** %gmsgid.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %gmsgid.addr, metadata !4987, metadata !DIExpression()), !dbg !4988
  call void @llvm.dbg.declare(metadata %struct.c_token** %token, metadata !4989, metadata !DIExpression()), !dbg !4990
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4991
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !4992
  store %struct.c_token* %call, %struct.c_token** %token, align 8, !dbg !4990
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4993
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %1, i32 0, i32 2, !dbg !4995
  %bf.load = load i8, i8* %error, align 2, !dbg !4995
  %bf.clear = and i8 %bf.load, 1, !dbg !4995
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4995
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4993
  br i1 %tobool, label %if.then, label %if.end, !dbg !4996

if.then:                                          ; preds = %entry
  br label %return, !dbg !4997

if.end:                                           ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !4998
  %error1 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %2, i32 0, i32 2, !dbg !4999
  %bf.load2 = load i8, i8* %error1, align 2, !dbg !5000
  %bf.clear3 = and i8 %bf.load2, -2, !dbg !5000
  %bf.set = or i8 %bf.clear3, 1, !dbg !5000
  store i8 %bf.set, i8* %error1, align 2, !dbg !5000
  %3 = load i8*, i8** %gmsgid.addr, align 8, !dbg !5001
  %tobool4 = icmp ne i8* %3, null, !dbg !5001
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !5003

if.then5:                                         ; preds = %if.end
  br label %return, !dbg !5004

if.end6:                                          ; preds = %if.end
  %4 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !5005
  call void @c_parser_set_source_position_from_token(%struct.c_token* %4), !dbg !5006
  %5 = load i8*, i8** %gmsgid.addr, align 8, !dbg !5007
  %6 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !5008
  %7 = bitcast %struct.c_token* %6 to i32*, !dbg !5009
  %bf.load7 = load i32, i32* %7, align 8, !dbg !5009
  %bf.clear8 = and i32 %bf.load7, 255, !dbg !5009
  %cmp = icmp eq i32 %bf.clear8, 74, !dbg !5010
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5008

cond.true:                                        ; preds = %if.end6
  br label %cond.end, !dbg !5008

cond.false:                                       ; preds = %if.end6
  %8 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !5011
  %9 = bitcast %struct.c_token* %8 to i32*, !dbg !5012
  %bf.load9 = load i32, i32* %9, align 8, !dbg !5012
  %bf.clear10 = and i32 %bf.load9, 255, !dbg !5012
  br label %cond.end, !dbg !5008

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 53, %cond.true ], [ %bf.clear10, %cond.false ], !dbg !5008
  %10 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !5013
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %10, i32 0, i32 1, !dbg !5014
  %11 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5014
  call void @c_parse_error(i8* %5, i32 %cond, %union.tree_node* %11, i8 zeroext 0), !dbg !5015
  br label %return, !dbg !5016

return:                                           ; preds = %cond.end, %if.then5, %if.then
  ret void, !dbg !5016
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_skip_to_pragma_eol(%struct.c_parser* %parser) #0 !dbg !5017 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %token = alloca %struct.c_token*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5018, metadata !DIExpression()), !dbg !5019
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5020
  %in_pragma = getelementptr inbounds %struct.c_parser, %struct.c_parser* %0, i32 0, i32 2, !dbg !5020
  %bf.load = load i8, i8* %in_pragma, align 2, !dbg !5020
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !5020
  %bf.clear = and i8 %bf.lshr, 1, !dbg !5020
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5020
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5020
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5020

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 733, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5020
  br label %cond.end, !dbg !5020

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5020

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5020
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5021
  %in_pragma1 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %1, i32 0, i32 2, !dbg !5022
  %bf.load2 = load i8, i8* %in_pragma1, align 2, !dbg !5023
  %bf.clear3 = and i8 %bf.load2, -3, !dbg !5023
  store i8 %bf.clear3, i8* %in_pragma1, align 2, !dbg !5023
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5024
  %call = call zeroext i8 @c_parser_require(%struct.c_parser* %2, i32 71, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0)), !dbg !5026
  %tobool4 = icmp ne i8 %call, 0, !dbg !5026
  br i1 %tobool4, label %if.end14, label %if.then, !dbg !5027

if.then:                                          ; preds = %cond.end
  br label %while.body, !dbg !5028

while.body:                                       ; preds = %if.then, %if.end13
  call void @llvm.dbg.declare(metadata %struct.c_token** %token, metadata !5029, metadata !DIExpression()), !dbg !5031
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5032
  %call5 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !5033
  store %struct.c_token* %call5, %struct.c_token** %token, align 8, !dbg !5031
  %4 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !5034
  %5 = bitcast %struct.c_token* %4 to i32*, !dbg !5036
  %bf.load6 = load i32, i32* %5, align 8, !dbg !5036
  %bf.clear7 = and i32 %bf.load6, 255, !dbg !5036
  %cmp = icmp eq i32 %bf.clear7, 22, !dbg !5037
  br i1 %cmp, label %if.then8, label %if.end, !dbg !5038

if.then8:                                         ; preds = %while.body
  br label %while.end, !dbg !5039

if.end:                                           ; preds = %while.body
  %6 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !5040
  %7 = bitcast %struct.c_token* %6 to i32*, !dbg !5042
  %bf.load9 = load i32, i32* %7, align 8, !dbg !5042
  %bf.clear10 = and i32 %bf.load9, 255, !dbg !5042
  %cmp11 = icmp eq i32 %bf.clear10, 71, !dbg !5043
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !5044

if.then12:                                        ; preds = %if.end
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5045
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !5047
  br label %while.end, !dbg !5048

if.end13:                                         ; preds = %if.end
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5049
  call void @c_parser_consume_token(%struct.c_parser* %9), !dbg !5050
  br label %while.body, !dbg !5028, !llvm.loop !5051

while.end:                                        ; preds = %if.then12, %if.then8
  br label %if.end14, !dbg !5028

if.end14:                                         ; preds = %while.end, %cond.end
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5053
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %10, i32 0, i32 2, !dbg !5054
  %bf.load15 = load i8, i8* %error, align 2, !dbg !5055
  %bf.clear16 = and i8 %bf.load15, -2, !dbg !5055
  store i8 %bf.clear16, i8* %error, align 2, !dbg !5055
  ret void, !dbg !5056
}

declare dso_local void @c_common_pch_pragma(%struct.cpp_reader*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_set_source_position_from_token(%struct.c_token* %token) #0 !dbg !5057 {
entry:
  %token.addr = alloca %struct.c_token*, align 8
  store %struct.c_token* %token, %struct.c_token** %token.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_token** %token.addr, metadata !5060, metadata !DIExpression()), !dbg !5061
  %0 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !5062
  %1 = bitcast %struct.c_token* %0 to i32*, !dbg !5064
  %bf.load = load i32, i32* %1, align 8, !dbg !5064
  %bf.clear = and i32 %bf.load, 255, !dbg !5064
  %cmp = icmp ne i32 %bf.clear, 22, !dbg !5065
  br i1 %cmp, label %if.then, label %if.end, !dbg !5066

if.then:                                          ; preds = %entry
  %2 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !5067
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %2, i32 0, i32 2, !dbg !5069
  %3 = load i32, i32* %location, align 8, !dbg !5069
  store i32 %3, i32* @input_location, align 4, !dbg !5070
  br label %if.end, !dbg !5071

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5072
}

declare dso_local void @c_parse_error(i8*, i32, %union.tree_node*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @c_parser_require(%struct.c_parser* %parser, i32 %type, i8* %msgid) #0 !dbg !5073 {
entry:
  %retval = alloca i8, align 1
  %parser.addr = alloca %struct.c_parser*, align 8
  %type.addr = alloca i32, align 4
  %msgid.addr = alloca i8*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5076, metadata !DIExpression()), !dbg !5077
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5078, metadata !DIExpression()), !dbg !5079
  store i8* %msgid, i8** %msgid.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msgid.addr, metadata !5080, metadata !DIExpression()), !dbg !5081
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5082
  %1 = load i32, i32* %type.addr, align 4, !dbg !5084
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 %1), !dbg !5085
  %tobool = icmp ne i8 %call, 0, !dbg !5085
  br i1 %tobool, label %if.then, label %if.else, !dbg !5086

if.then:                                          ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5087
  call void @c_parser_consume_token(%struct.c_parser* %2), !dbg !5089
  store i8 1, i8* %retval, align 1, !dbg !5090
  br label %return, !dbg !5090

if.else:                                          ; preds = %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5091
  %4 = load i8*, i8** %msgid.addr, align 8, !dbg !5093
  call void @c_parser_error(%struct.c_parser* %3, i8* %4), !dbg !5094
  store i8 0, i8* %retval, align 1, !dbg !5095
  br label %return, !dbg !5095

return:                                           ; preds = %if.else, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !5096
  ret i8 %5, !dbg !5096
}

declare dso_local zeroext i8 @pedwarn(i32, i32, i8*, ...) #2

declare dso_local void @_obstack_newchunk(%struct.obstack*, i32) #2

declare dso_local void @mark_valid_location_for_stdc_pragma(i8 zeroext) #2

declare dso_local void @ggc_collect() #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_external_declaration(%struct.c_parser* %parser) #0 !dbg !5097 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %ext = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5098, metadata !DIExpression()), !dbg !5099
  call void @llvm.dbg.declare(metadata i32* %ext, metadata !5100, metadata !DIExpression()), !dbg !5101
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5102
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !5103
  %1 = bitcast %struct.c_token* %call to i32*, !dbg !5104
  %bf.load = load i32, i32* %1, align 8, !dbg !5104
  %bf.clear = and i32 %bf.load, 255, !dbg !5104
  switch i32 %bf.clear, label %sw.default44 [
    i32 74, label %sw.bb
    i32 43, label %sw.bb36
    i32 70, label %sw.bb39
    i32 4, label %sw.bb41
    i32 5, label %sw.bb41
  ], !dbg !5105

sw.bb:                                            ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5106
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !5108
  %3 = bitcast %struct.c_token* %call1 to i32*, !dbg !5109
  %bf.load2 = load i32, i32* %3, align 8, !dbg !5109
  %bf.lshr = lshr i32 %bf.load2, 16, !dbg !5109
  %bf.clear3 = and i32 %bf.lshr, 255, !dbg !5109
  switch i32 %bf.clear3, label %sw.default [
    i32 54, label %sw.bb4
    i32 49, label %sw.bb6
    i32 134, label %sw.bb7
    i32 135, label %sw.bb7
    i32 71, label %sw.bb8
    i32 122, label %sw.bb15
    i32 127, label %sw.bb22
    i32 120, label %sw.bb29
  ], !dbg !5110

sw.bb4:                                           ; preds = %sw.bb
  %call5 = call i32 @disable_extension_diagnostics(), !dbg !5111
  store i32 %call5, i32* %ext, align 4, !dbg !5113
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5114
  call void @c_parser_consume_token(%struct.c_parser* %4), !dbg !5115
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5116
  call void @c_parser_external_declaration(%struct.c_parser* %5), !dbg !5117
  %6 = load i32, i32* %ext, align 4, !dbg !5118
  call void @restore_extension_diagnostics(i32 %6), !dbg !5119
  br label %sw.epilog, !dbg !5120

sw.bb6:                                           ; preds = %sw.bb
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5121
  call void @c_parser_asm_definition(%struct.c_parser* %7), !dbg !5122
  br label %sw.epilog, !dbg !5123

sw.bb7:                                           ; preds = %sw.bb, %sw.bb
  %8 = load i32, i32* @c_language, align 4, !dbg !5124
  %and = and i32 %8, 1, !dbg !5124
  %cmp = icmp ne i32 %and, 0, !dbg !5124
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5124

cond.true:                                        ; preds = %sw.bb7
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1056, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5124
  br label %cond.end, !dbg !5124

cond.false:                                       ; preds = %sw.bb7
  br label %cond.end, !dbg !5124

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5124
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5125
  call void @c_parser_objc_class_definition(%struct.c_parser* %9), !dbg !5126
  br label %sw.epilog, !dbg !5127

sw.bb8:                                           ; preds = %sw.bb
  %10 = load i32, i32* @c_language, align 4, !dbg !5128
  %and9 = and i32 %10, 1, !dbg !5128
  %cmp10 = icmp ne i32 %and9, 0, !dbg !5128
  br i1 %cmp10, label %cond.false12, label %cond.true11, !dbg !5128

cond.true11:                                      ; preds = %sw.bb8
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1060, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5128
  br label %cond.end13, !dbg !5128

cond.false12:                                     ; preds = %sw.bb8
  br label %cond.end13, !dbg !5128

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi i32 [ 0, %cond.true11 ], [ 0, %cond.false12 ], !dbg !5128
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5129
  call void @c_parser_objc_class_declaration(%struct.c_parser* %11), !dbg !5130
  br label %sw.epilog, !dbg !5131

sw.bb15:                                          ; preds = %sw.bb
  %12 = load i32, i32* @c_language, align 4, !dbg !5132
  %and16 = and i32 %12, 1, !dbg !5132
  %cmp17 = icmp ne i32 %and16, 0, !dbg !5132
  br i1 %cmp17, label %cond.false19, label %cond.true18, !dbg !5132

cond.true18:                                      ; preds = %sw.bb15
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1064, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5132
  br label %cond.end20, !dbg !5132

cond.false19:                                     ; preds = %sw.bb15
  br label %cond.end20, !dbg !5132

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ 0, %cond.true18 ], [ 0, %cond.false19 ], !dbg !5132
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5133
  call void @c_parser_objc_alias_declaration(%struct.c_parser* %13), !dbg !5134
  br label %sw.epilog, !dbg !5135

sw.bb22:                                          ; preds = %sw.bb
  %14 = load i32, i32* @c_language, align 4, !dbg !5136
  %and23 = and i32 %14, 1, !dbg !5136
  %cmp24 = icmp ne i32 %and23, 0, !dbg !5136
  br i1 %cmp24, label %cond.false26, label %cond.true25, !dbg !5136

cond.true25:                                      ; preds = %sw.bb22
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1068, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5136
  br label %cond.end27, !dbg !5136

cond.false26:                                     ; preds = %sw.bb22
  br label %cond.end27, !dbg !5136

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi i32 [ 0, %cond.true25 ], [ 0, %cond.false26 ], !dbg !5136
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5137
  call void @c_parser_objc_protocol_definition(%struct.c_parser* %15), !dbg !5138
  br label %sw.epilog, !dbg !5139

sw.bb29:                                          ; preds = %sw.bb
  %16 = load i32, i32* @c_language, align 4, !dbg !5140
  %and30 = and i32 %16, 1, !dbg !5140
  %cmp31 = icmp ne i32 %and30, 0, !dbg !5140
  br i1 %cmp31, label %cond.false33, label %cond.true32, !dbg !5140

cond.true32:                                      ; preds = %sw.bb29
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1072, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5140
  br label %cond.end34, !dbg !5140

cond.false33:                                     ; preds = %sw.bb29
  br label %cond.end34, !dbg !5140

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond35 = phi i32 [ 0, %cond.true32 ], [ 0, %cond.false33 ], !dbg !5140
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5141
  call void @c_parser_consume_token(%struct.c_parser* %17), !dbg !5142
  call void @objc_finish_implementation(), !dbg !5143
  br label %sw.epilog, !dbg !5144

sw.default:                                       ; preds = %sw.bb
  br label %decl_or_fndef, !dbg !5145

sw.epilog:                                        ; preds = %cond.end34, %cond.end27, %cond.end20, %cond.end13, %cond.end, %sw.bb6, %sw.bb4
  br label %sw.epilog45, !dbg !5146

sw.bb36:                                          ; preds = %entry
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5147
  %call37 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %18), !dbg !5148
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call37, i32 0, i32 2, !dbg !5149
  %19 = load i32, i32* %location, align 8, !dbg !5149
  %call38 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %19, i32 834, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0)), !dbg !5150
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5151
  call void @c_parser_consume_token(%struct.c_parser* %20), !dbg !5152
  br label %sw.epilog45, !dbg !5153

sw.bb39:                                          ; preds = %entry
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext 1), !dbg !5154
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5155
  %call40 = call zeroext i8 @c_parser_pragma(%struct.c_parser* %21, i32 0), !dbg !5156
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext 0), !dbg !5157
  br label %sw.epilog45, !dbg !5158

sw.bb41:                                          ; preds = %entry, %entry
  %22 = load i32, i32* @c_language, align 4, !dbg !5159
  %and42 = and i32 %22, 1, !dbg !5159
  %cmp43 = icmp ne i32 %and42, 0, !dbg !5159
  br i1 %cmp43, label %if.then, label %if.end, !dbg !5161

if.then:                                          ; preds = %sw.bb41
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5162
  call void @c_parser_objc_method_definition(%struct.c_parser* %23), !dbg !5164
  br label %sw.epilog45, !dbg !5165

if.end:                                           ; preds = %sw.bb41
  br label %sw.default44, !dbg !5159

sw.default44:                                     ; preds = %entry, %if.end
  br label %decl_or_fndef, !dbg !5159

decl_or_fndef:                                    ; preds = %sw.default44, %sw.default
  call void @llvm.dbg.label(metadata !5166), !dbg !5167
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5168
  call void @c_parser_declaration_or_fndef(%struct.c_parser* %24, i8 zeroext 1, i8 zeroext 1, i8 zeroext 0, i8 zeroext 1), !dbg !5169
  br label %sw.epilog45, !dbg !5170

sw.epilog45:                                      ; preds = %decl_or_fndef, %if.then, %sw.bb39, %sw.bb36, %sw.epilog
  ret void, !dbg !5171
}

declare dso_local void @obstack_free(%struct.obstack*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %parser, i32 %type) #0 !dbg !5172 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %type.addr = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5173, metadata !DIExpression()), !dbg !5174
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5175, metadata !DIExpression()), !dbg !5176
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5177
  %1 = load i32, i32* %type.addr, align 4, !dbg !5178
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 %1), !dbg !5179
  %tobool = icmp ne i8 %call, 0, !dbg !5180
  %lnot = xor i1 %tobool, true, !dbg !5180
  %lnot.ext = zext i1 %lnot to i32, !dbg !5180
  %conv = trunc i32 %lnot.ext to i8, !dbg !5180
  ret i8 %conv, !dbg !5181
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @disable_extension_diagnostics() #0 !dbg !5182 {
entry:
  %ret = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5185, metadata !DIExpression()), !dbg !5186
  %0 = load i32, i32* @pedantic, align 4, !dbg !5187
  %1 = load i32, i32* @warn_pointer_arith, align 4, !dbg !5188
  %shl = shl i32 %1, 1, !dbg !5189
  %or = or i32 %0, %shl, !dbg !5190
  %2 = load i32, i32* @warn_traditional, align 4, !dbg !5191
  %shl1 = shl i32 %2, 2, !dbg !5192
  %or2 = or i32 %or, %shl1, !dbg !5193
  %3 = load i32, i32* @flag_iso, align 4, !dbg !5194
  %shl3 = shl i32 %3, 3, !dbg !5195
  %or4 = or i32 %or2, %shl3, !dbg !5196
  %4 = load i32, i32* @warn_long_long, align 4, !dbg !5197
  %shl5 = shl i32 %4, 4, !dbg !5198
  %or6 = or i32 %or4, %shl5, !dbg !5199
  %5 = load i32, i32* @warn_cxx_compat, align 4, !dbg !5200
  %shl7 = shl i32 %5, 5, !dbg !5201
  %or8 = or i32 %or6, %shl7, !dbg !5202
  store i32 %or8, i32* %ret, align 4, !dbg !5186
  store i32 0, i32* @pedantic, align 4, !dbg !5203
  %6 = load %struct.cpp_options*, %struct.cpp_options** @cpp_opts, align 8, !dbg !5204
  %pedantic = getelementptr inbounds %struct.cpp_options, %struct.cpp_options* %6, i32 0, i32 31, !dbg !5205
  store i8 0, i8* %pedantic, align 1, !dbg !5206
  store i32 0, i32* @warn_pointer_arith, align 4, !dbg !5207
  store i32 0, i32* @warn_traditional, align 4, !dbg !5208
  %7 = load %struct.cpp_options*, %struct.cpp_options** @cpp_opts, align 8, !dbg !5209
  %warn_traditional = getelementptr inbounds %struct.cpp_options, %struct.cpp_options* %7, i32 0, i32 17, !dbg !5210
  store i8 0, i8* %warn_traditional, align 1, !dbg !5211
  store i32 0, i32* @flag_iso, align 4, !dbg !5212
  store i32 0, i32* @warn_long_long, align 4, !dbg !5213
  %8 = load %struct.cpp_options*, %struct.cpp_options** @cpp_opts, align 8, !dbg !5214
  %warn_long_long = getelementptr inbounds %struct.cpp_options, %struct.cpp_options* %8, i32 0, i32 18, !dbg !5215
  store i8 0, i8* %warn_long_long, align 8, !dbg !5216
  store i32 0, i32* @warn_cxx_compat, align 4, !dbg !5217
  %9 = load i32, i32* %ret, align 4, !dbg !5218
  ret i32 %9, !dbg !5219
}

; Function Attrs: noinline nounwind uwtable
define internal void @restore_extension_diagnostics(i32 %flags) #0 !dbg !5220 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5223, metadata !DIExpression()), !dbg !5224
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5225
  %and = and i32 %0, 1, !dbg !5226
  store i32 %and, i32* @pedantic, align 4, !dbg !5227
  %conv = trunc i32 %and to i8, !dbg !5228
  %1 = load %struct.cpp_options*, %struct.cpp_options** @cpp_opts, align 8, !dbg !5229
  %pedantic = getelementptr inbounds %struct.cpp_options, %struct.cpp_options* %1, i32 0, i32 31, !dbg !5230
  store i8 %conv, i8* %pedantic, align 1, !dbg !5231
  %2 = load i32, i32* %flags.addr, align 4, !dbg !5232
  %shr = ashr i32 %2, 1, !dbg !5233
  %and1 = and i32 %shr, 1, !dbg !5234
  store i32 %and1, i32* @warn_pointer_arith, align 4, !dbg !5235
  %3 = load i32, i32* %flags.addr, align 4, !dbg !5236
  %shr2 = ashr i32 %3, 2, !dbg !5237
  %and3 = and i32 %shr2, 1, !dbg !5238
  store i32 %and3, i32* @warn_traditional, align 4, !dbg !5239
  %conv4 = trunc i32 %and3 to i8, !dbg !5240
  %4 = load %struct.cpp_options*, %struct.cpp_options** @cpp_opts, align 8, !dbg !5241
  %warn_traditional = getelementptr inbounds %struct.cpp_options, %struct.cpp_options* %4, i32 0, i32 17, !dbg !5242
  store i8 %conv4, i8* %warn_traditional, align 1, !dbg !5243
  %5 = load i32, i32* %flags.addr, align 4, !dbg !5244
  %shr5 = ashr i32 %5, 3, !dbg !5245
  %and6 = and i32 %shr5, 1, !dbg !5246
  store i32 %and6, i32* @flag_iso, align 4, !dbg !5247
  %6 = load i32, i32* %flags.addr, align 4, !dbg !5248
  %shr7 = ashr i32 %6, 4, !dbg !5249
  %and8 = and i32 %shr7, 1, !dbg !5250
  store i32 %and8, i32* @warn_long_long, align 4, !dbg !5251
  %conv9 = trunc i32 %and8 to i8, !dbg !5252
  %7 = load %struct.cpp_options*, %struct.cpp_options** @cpp_opts, align 8, !dbg !5253
  %warn_long_long = getelementptr inbounds %struct.cpp_options, %struct.cpp_options* %7, i32 0, i32 18, !dbg !5254
  store i8 %conv9, i8* %warn_long_long, align 8, !dbg !5255
  %8 = load i32, i32* %flags.addr, align 4, !dbg !5256
  %shr10 = ashr i32 %8, 5, !dbg !5257
  %and11 = and i32 %shr10, 1, !dbg !5258
  store i32 %and11, i32* @warn_cxx_compat, align 4, !dbg !5259
  ret void, !dbg !5260
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_asm_definition(%struct.c_parser* %parser) #0 !dbg !5261 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %asm_str = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5262, metadata !DIExpression()), !dbg !5263
  call void @llvm.dbg.declare(metadata %union.tree_node** %asm_str, metadata !5264, metadata !DIExpression()), !dbg !5265
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5266
  %call = call %union.tree_node* @c_parser_simple_asm_expr(%struct.c_parser* %0), !dbg !5267
  store %union.tree_node* %call, %union.tree_node** %asm_str, align 8, !dbg !5265
  %1 = load %union.tree_node*, %union.tree_node** %asm_str, align 8, !dbg !5268
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !5268
  br i1 %tobool, label %if.then, label %if.end, !dbg !5270

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %asm_str, align 8, !dbg !5271
  %call1 = call %struct.cgraph_asm_node* @cgraph_add_asm_node(%union.tree_node* %2), !dbg !5272
  br label %if.end, !dbg !5272

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5273
  call void @c_parser_skip_until_found(%struct.c_parser* %3, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !5274
  ret void, !dbg !5275
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_objc_class_definition(%struct.c_parser* %parser) #0 !dbg !5276 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %iface_p = alloca i8, align 1
  %id1 = alloca %union.tree_node*, align 8
  %superclass = alloca %union.tree_node*, align 8
  %id2 = alloca %union.tree_node*, align 8
  %proto = alloca %union.tree_node*, align 8
  %proto43 = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5277, metadata !DIExpression()), !dbg !5278
  call void @llvm.dbg.declare(metadata i8* %iface_p, metadata !5279, metadata !DIExpression()), !dbg !5280
  call void @llvm.dbg.declare(metadata %union.tree_node** %id1, metadata !5281, metadata !DIExpression()), !dbg !5282
  call void @llvm.dbg.declare(metadata %union.tree_node** %superclass, metadata !5283, metadata !DIExpression()), !dbg !5284
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5285
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 134), !dbg !5287
  %tobool = icmp ne i8 %call, 0, !dbg !5287
  br i1 %tobool, label %if.then, label %if.else, !dbg !5288

if.then:                                          ; preds = %entry
  store i8 1, i8* %iface_p, align 1, !dbg !5289
  br label %if.end5, !dbg !5290

if.else:                                          ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5291
  %call1 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %1, i32 135), !dbg !5293
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5293
  br i1 %tobool2, label %if.then3, label %if.else4, !dbg !5294

if.then3:                                         ; preds = %if.else
  store i8 0, i8* %iface_p, align 1, !dbg !5295
  br label %if.end, !dbg !5296

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6112, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5297
  br label %if.end

if.end:                                           ; preds = %if.else4, %if.then3
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5298
  call void @c_parser_consume_token(%struct.c_parser* %2), !dbg !5299
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5300
  %call6 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %3, i32 53), !dbg !5302
  %tobool7 = icmp ne i8 %call6, 0, !dbg !5302
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !5303

if.then8:                                         ; preds = %if.end5
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5304
  call void @c_parser_error(%struct.c_parser* %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !5306
  br label %if.end59, !dbg !5307

if.end9:                                          ; preds = %if.end5
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5308
  %call10 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !5309
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call10, i32 0, i32 1, !dbg !5310
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5310
  store %union.tree_node* %6, %union.tree_node** %id1, align 8, !dbg !5311
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5312
  call void @c_parser_consume_token(%struct.c_parser* %7), !dbg !5313
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5314
  %call11 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %8, i32 20), !dbg !5316
  %tobool12 = icmp ne i8 %call11, 0, !dbg !5316
  br i1 %tobool12, label %if.then13, label %if.end29, !dbg !5317

if.then13:                                        ; preds = %if.end9
  call void @llvm.dbg.declare(metadata %union.tree_node** %id2, metadata !5318, metadata !DIExpression()), !dbg !5320
  call void @llvm.dbg.declare(metadata %union.tree_node** %proto, metadata !5321, metadata !DIExpression()), !dbg !5322
  store %union.tree_node* null, %union.tree_node** %proto, align 8, !dbg !5322
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5323
  call void @c_parser_consume_token(%struct.c_parser* %9), !dbg !5324
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5325
  %call14 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %10, i32 53), !dbg !5327
  %tobool15 = icmp ne i8 %call14, 0, !dbg !5327
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !5328

if.then16:                                        ; preds = %if.then13
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5329
  call void @c_parser_error(%struct.c_parser* %11, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !5331
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5332
  call void @c_parser_skip_until_found(%struct.c_parser* %12, i32 21, i8* null), !dbg !5333
  br label %if.end59, !dbg !5334

if.end17:                                         ; preds = %if.then13
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5335
  %call18 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %13), !dbg !5336
  %value19 = getelementptr inbounds %struct.c_token, %struct.c_token* %call18, i32 0, i32 1, !dbg !5337
  %14 = load %union.tree_node*, %union.tree_node** %value19, align 8, !dbg !5337
  store %union.tree_node* %14, %union.tree_node** %id2, align 8, !dbg !5338
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5339
  call void @c_parser_consume_token(%struct.c_parser* %15), !dbg !5340
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5341
  call void @c_parser_skip_until_found(%struct.c_parser* %16, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !5342
  %17 = load i8, i8* %iface_p, align 1, !dbg !5343
  %tobool20 = icmp ne i8 %17, 0, !dbg !5343
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !5345

if.then21:                                        ; preds = %if.end17
  %18 = load %union.tree_node*, %union.tree_node** %id1, align 8, !dbg !5346
  %19 = load %union.tree_node*, %union.tree_node** %id2, align 8, !dbg !5348
  call void @objc_start_category_implementation(%union.tree_node* %18, %union.tree_node* %19), !dbg !5349
  br label %if.end59, !dbg !5350

if.end22:                                         ; preds = %if.end17
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5351
  %call23 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %20, i32 3), !dbg !5353
  %tobool24 = icmp ne i8 %call23, 0, !dbg !5353
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !5354

if.then25:                                        ; preds = %if.end22
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5355
  %call26 = call %union.tree_node* @c_parser_objc_protocol_refs(%struct.c_parser* %21), !dbg !5356
  store %union.tree_node* %call26, %union.tree_node** %proto, align 8, !dbg !5357
  br label %if.end27, !dbg !5358

if.end27:                                         ; preds = %if.then25, %if.end22
  %22 = load %union.tree_node*, %union.tree_node** %id1, align 8, !dbg !5359
  %23 = load %union.tree_node*, %union.tree_node** %id2, align 8, !dbg !5360
  %24 = load %union.tree_node*, %union.tree_node** %proto, align 8, !dbg !5361
  call void @objc_start_category_interface(%union.tree_node* %22, %union.tree_node* %23, %union.tree_node* %24), !dbg !5362
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5363
  call void @c_parser_objc_methodprotolist(%struct.c_parser* %25), !dbg !5364
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5365
  %call28 = call zeroext i8 @c_parser_require_keyword(%struct.c_parser* %26, i32 120, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0)), !dbg !5366
  call void @objc_finish_interface(), !dbg !5367
  br label %if.end59, !dbg !5368

if.end29:                                         ; preds = %if.end9
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5369
  %call30 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %27, i32 18), !dbg !5371
  %tobool31 = icmp ne i8 %call30, 0, !dbg !5371
  br i1 %tobool31, label %if.then32, label %if.else39, !dbg !5372

if.then32:                                        ; preds = %if.end29
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5373
  call void @c_parser_consume_token(%struct.c_parser* %28), !dbg !5375
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5376
  %call33 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %29, i32 53), !dbg !5378
  %tobool34 = icmp ne i8 %call33, 0, !dbg !5378
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !5379

if.then35:                                        ; preds = %if.then32
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5380
  call void @c_parser_error(%struct.c_parser* %30, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !5382
  br label %if.end59, !dbg !5383

if.end36:                                         ; preds = %if.then32
  %31 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5384
  %call37 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %31), !dbg !5385
  %value38 = getelementptr inbounds %struct.c_token, %struct.c_token* %call37, i32 0, i32 1, !dbg !5386
  %32 = load %union.tree_node*, %union.tree_node** %value38, align 8, !dbg !5386
  store %union.tree_node* %32, %union.tree_node** %superclass, align 8, !dbg !5387
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5388
  call void @c_parser_consume_token(%struct.c_parser* %33), !dbg !5389
  br label %if.end40, !dbg !5390

if.else39:                                        ; preds = %if.end29
  store %union.tree_node* null, %union.tree_node** %superclass, align 8, !dbg !5391
  br label %if.end40

if.end40:                                         ; preds = %if.else39, %if.end36
  %34 = load i8, i8* %iface_p, align 1, !dbg !5392
  %tobool41 = icmp ne i8 %34, 0, !dbg !5392
  br i1 %tobool41, label %if.then42, label %if.else49, !dbg !5394

if.then42:                                        ; preds = %if.end40
  call void @llvm.dbg.declare(metadata %union.tree_node** %proto43, metadata !5395, metadata !DIExpression()), !dbg !5397
  store %union.tree_node* null, %union.tree_node** %proto43, align 8, !dbg !5397
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5398
  %call44 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %35, i32 3), !dbg !5400
  %tobool45 = icmp ne i8 %call44, 0, !dbg !5400
  br i1 %tobool45, label %if.then46, label %if.end48, !dbg !5401

if.then46:                                        ; preds = %if.then42
  %36 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5402
  %call47 = call %union.tree_node* @c_parser_objc_protocol_refs(%struct.c_parser* %36), !dbg !5403
  store %union.tree_node* %call47, %union.tree_node** %proto43, align 8, !dbg !5404
  br label %if.end48, !dbg !5405

if.end48:                                         ; preds = %if.then46, %if.then42
  %37 = load %union.tree_node*, %union.tree_node** %id1, align 8, !dbg !5406
  %38 = load %union.tree_node*, %union.tree_node** %superclass, align 8, !dbg !5407
  %39 = load %union.tree_node*, %union.tree_node** %proto43, align 8, !dbg !5408
  call void @objc_start_class_interface(%union.tree_node* %37, %union.tree_node* %38, %union.tree_node* %39), !dbg !5409
  br label %if.end50, !dbg !5410

if.else49:                                        ; preds = %if.end40
  %40 = load %union.tree_node*, %union.tree_node** %id1, align 8, !dbg !5411
  %41 = load %union.tree_node*, %union.tree_node** %superclass, align 8, !dbg !5412
  call void @objc_start_class_implementation(%union.tree_node* %40, %union.tree_node* %41), !dbg !5413
  br label %if.end50

if.end50:                                         ; preds = %if.else49, %if.end48
  %42 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5414
  %call51 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %42, i32 41), !dbg !5416
  %tobool52 = icmp ne i8 %call51, 0, !dbg !5416
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !5417

if.then53:                                        ; preds = %if.end50
  %43 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5418
  call void @c_parser_objc_class_instance_variables(%struct.c_parser* %43), !dbg !5419
  br label %if.end54, !dbg !5419

if.end54:                                         ; preds = %if.then53, %if.end50
  %44 = load i8, i8* %iface_p, align 1, !dbg !5420
  %tobool55 = icmp ne i8 %44, 0, !dbg !5420
  br i1 %tobool55, label %if.then56, label %if.else58, !dbg !5422

if.then56:                                        ; preds = %if.end54
  call void @objc_continue_interface(), !dbg !5423
  %45 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5425
  call void @c_parser_objc_methodprotolist(%struct.c_parser* %45), !dbg !5426
  %46 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5427
  %call57 = call zeroext i8 @c_parser_require_keyword(%struct.c_parser* %46, i32 120, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0)), !dbg !5428
  call void @objc_finish_interface(), !dbg !5429
  br label %if.end59, !dbg !5430

if.else58:                                        ; preds = %if.end54
  call void @objc_continue_implementation(), !dbg !5431
  br label %if.end59, !dbg !5433

if.end59:                                         ; preds = %if.then8, %if.then16, %if.then21, %if.end27, %if.then35, %if.else58, %if.then56
  ret void, !dbg !5434
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_objc_class_declaration(%struct.c_parser* %parser) #0 !dbg !5435 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list = alloca %union.tree_node*, align 8
  %id = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5436, metadata !DIExpression()), !dbg !5437
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !5438, metadata !DIExpression()), !dbg !5439
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !5439
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5440
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 71), !dbg !5440
  %tobool = icmp ne i8 %call, 0, !dbg !5440
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5440

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6278, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5440
  br label %cond.end, !dbg !5440

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5440

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5440
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5441
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !5442
  br label %while.body, !dbg !5443

while.body:                                       ; preds = %cond.end, %if.end9
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !5444, metadata !DIExpression()), !dbg !5446
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5447
  %call1 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %2, i32 53), !dbg !5449
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5449
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5450

if.then:                                          ; preds = %while.body
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5451
  call void @c_parser_error(%struct.c_parser* %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !5453
  br label %while.end, !dbg !5454

if.end:                                           ; preds = %while.body
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5455
  %call3 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %4), !dbg !5456
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call3, i32 0, i32 1, !dbg !5457
  %5 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5457
  store %union.tree_node* %5, %union.tree_node** %id, align 8, !dbg !5458
  %6 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !5459
  %7 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !5460
  %call4 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* null, %union.tree_node* %7), !dbg !5460
  %call5 = call %union.tree_node* @chainon(%union.tree_node* %6, %union.tree_node* %call4), !dbg !5461
  store %union.tree_node* %call5, %union.tree_node** %list, align 8, !dbg !5462
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5463
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !5464
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5465
  %call6 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %9, i32 19), !dbg !5467
  %tobool7 = icmp ne i8 %call6, 0, !dbg !5467
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !5468

if.then8:                                         ; preds = %if.end
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5469
  call void @c_parser_consume_token(%struct.c_parser* %10), !dbg !5470
  br label %if.end9, !dbg !5470

if.else:                                          ; preds = %if.end
  br label %while.end, !dbg !5471

if.end9:                                          ; preds = %if.then8
  br label %while.body, !dbg !5443, !llvm.loop !5472

while.end:                                        ; preds = %if.else, %if.then
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5474
  call void @c_parser_skip_until_found(%struct.c_parser* %11, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !5475
  %12 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !5476
  call void @objc_declare_class(%union.tree_node* %12), !dbg !5477
  ret void, !dbg !5478
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_objc_alias_declaration(%struct.c_parser* %parser) #0 !dbg !5479 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %id1 = alloca %union.tree_node*, align 8
  %id2 = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5480, metadata !DIExpression()), !dbg !5481
  call void @llvm.dbg.declare(metadata %union.tree_node** %id1, metadata !5482, metadata !DIExpression()), !dbg !5483
  call void @llvm.dbg.declare(metadata %union.tree_node** %id2, metadata !5484, metadata !DIExpression()), !dbg !5485
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5486
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 122), !dbg !5486
  %tobool = icmp ne i8 %call, 0, !dbg !5486
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5486

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6312, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5486
  br label %cond.end, !dbg !5486

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5486

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5486
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5487
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !5488
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5489
  %call1 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %2, i32 53), !dbg !5491
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5491
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5492

if.then:                                          ; preds = %cond.end
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5493
  call void @c_parser_error(%struct.c_parser* %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !5495
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5496
  call void @c_parser_skip_until_found(%struct.c_parser* %4, i32 43, i8* null), !dbg !5497
  br label %return, !dbg !5498

if.end:                                           ; preds = %cond.end
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5499
  %call3 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !5500
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call3, i32 0, i32 1, !dbg !5501
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5501
  store %union.tree_node* %6, %union.tree_node** %id1, align 8, !dbg !5502
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5503
  call void @c_parser_consume_token(%struct.c_parser* %7), !dbg !5504
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5505
  %call4 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %8, i32 53), !dbg !5507
  %tobool5 = icmp ne i8 %call4, 0, !dbg !5507
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !5508

if.then6:                                         ; preds = %if.end
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5509
  call void @c_parser_error(%struct.c_parser* %9, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !5511
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5512
  call void @c_parser_skip_until_found(%struct.c_parser* %10, i32 43, i8* null), !dbg !5513
  br label %return, !dbg !5514

if.end7:                                          ; preds = %if.end
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5515
  %call8 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %11), !dbg !5516
  %value9 = getelementptr inbounds %struct.c_token, %struct.c_token* %call8, i32 0, i32 1, !dbg !5517
  %12 = load %union.tree_node*, %union.tree_node** %value9, align 8, !dbg !5517
  store %union.tree_node* %12, %union.tree_node** %id2, align 8, !dbg !5518
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5519
  call void @c_parser_consume_token(%struct.c_parser* %13), !dbg !5520
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5521
  call void @c_parser_skip_until_found(%struct.c_parser* %14, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !5522
  %15 = load %union.tree_node*, %union.tree_node** %id1, align 8, !dbg !5523
  %16 = load %union.tree_node*, %union.tree_node** %id2, align 8, !dbg !5524
  call void @objc_declare_alias(%union.tree_node* %15, %union.tree_node* %16), !dbg !5525
  br label %return, !dbg !5526

return:                                           ; preds = %if.end7, %if.then6, %if.then
  ret void, !dbg !5526
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_objc_protocol_definition(%struct.c_parser* %parser) #0 !dbg !5527 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list = alloca %union.tree_node*, align 8
  %id = alloca %union.tree_node*, align 8
  %id21 = alloca %union.tree_node*, align 8
  %proto = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5528, metadata !DIExpression()), !dbg !5529
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5530
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 127), !dbg !5530
  %tobool = icmp ne i8 %call, 0, !dbg !5530
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5530

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6348, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5530
  br label %cond.end, !dbg !5530

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5530

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5530
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5531
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !5532
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5533
  %call1 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %2, i32 53), !dbg !5535
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5535
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5536

if.then:                                          ; preds = %cond.end
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5537
  call void @c_parser_error(%struct.c_parser* %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !5539
  br label %if.end35, !dbg !5540

if.end:                                           ; preds = %cond.end
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5541
  %call3 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %4), !dbg !5543
  %5 = bitcast %struct.c_token* %call3 to i32*, !dbg !5544
  %bf.load = load i32, i32* %5, align 8, !dbg !5544
  %bf.clear = and i32 %bf.load, 255, !dbg !5544
  %cmp = icmp eq i32 %bf.clear, 19, !dbg !5545
  br i1 %cmp, label %if.then8, label %lor.lhs.false, !dbg !5546

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5547
  %call4 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %6), !dbg !5548
  %7 = bitcast %struct.c_token* %call4 to i32*, !dbg !5549
  %bf.load5 = load i32, i32* %7, align 8, !dbg !5549
  %bf.clear6 = and i32 %bf.load5, 255, !dbg !5549
  %cmp7 = icmp eq i32 %bf.clear6, 43, !dbg !5550
  br i1 %cmp7, label %if.then8, label %if.else20, !dbg !5551

if.then8:                                         ; preds = %lor.lhs.false, %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !5552, metadata !DIExpression()), !dbg !5554
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !5554
  br label %while.body, !dbg !5555

while.body:                                       ; preds = %if.then8, %if.end19
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !5556, metadata !DIExpression()), !dbg !5558
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5559
  %call9 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %8, i32 53), !dbg !5561
  %tobool10 = icmp ne i8 %call9, 0, !dbg !5561
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !5562

if.then11:                                        ; preds = %while.body
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5563
  call void @c_parser_error(%struct.c_parser* %9, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !5565
  br label %while.end, !dbg !5566

if.end12:                                         ; preds = %while.body
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5567
  %call13 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %10), !dbg !5568
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call13, i32 0, i32 1, !dbg !5569
  %11 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5569
  store %union.tree_node* %11, %union.tree_node** %id, align 8, !dbg !5570
  %12 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !5571
  %13 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !5572
  %call14 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* null, %union.tree_node* %13), !dbg !5572
  %call15 = call %union.tree_node* @chainon(%union.tree_node* %12, %union.tree_node* %call14), !dbg !5573
  store %union.tree_node* %call15, %union.tree_node** %list, align 8, !dbg !5574
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5575
  call void @c_parser_consume_token(%struct.c_parser* %14), !dbg !5576
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5577
  %call16 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %15, i32 19), !dbg !5579
  %tobool17 = icmp ne i8 %call16, 0, !dbg !5579
  br i1 %tobool17, label %if.then18, label %if.else, !dbg !5580

if.then18:                                        ; preds = %if.end12
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5581
  call void @c_parser_consume_token(%struct.c_parser* %16), !dbg !5582
  br label %if.end19, !dbg !5582

if.else:                                          ; preds = %if.end12
  br label %while.end, !dbg !5583

if.end19:                                         ; preds = %if.then18
  br label %while.body, !dbg !5555, !llvm.loop !5584

while.end:                                        ; preds = %if.else, %if.then11
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5586
  call void @c_parser_skip_until_found(%struct.c_parser* %17, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !5587
  %18 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !5588
  call void @objc_declare_protocols(%union.tree_node* %18), !dbg !5589
  br label %if.end35, !dbg !5590

if.else20:                                        ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata %union.tree_node** %id21, metadata !5591, metadata !DIExpression()), !dbg !5593
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5594
  %call22 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %19), !dbg !5595
  %value23 = getelementptr inbounds %struct.c_token, %struct.c_token* %call22, i32 0, i32 1, !dbg !5596
  %20 = load %union.tree_node*, %union.tree_node** %value23, align 8, !dbg !5596
  store %union.tree_node* %20, %union.tree_node** %id21, align 8, !dbg !5593
  call void @llvm.dbg.declare(metadata %union.tree_node** %proto, metadata !5597, metadata !DIExpression()), !dbg !5598
  store %union.tree_node* null, %union.tree_node** %proto, align 8, !dbg !5598
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5599
  call void @c_parser_consume_token(%struct.c_parser* %21), !dbg !5600
  %22 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5601
  %call24 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %22, i32 3), !dbg !5603
  %tobool25 = icmp ne i8 %call24, 0, !dbg !5603
  br i1 %tobool25, label %if.then26, label %if.end28, !dbg !5604

if.then26:                                        ; preds = %if.else20
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5605
  %call27 = call %union.tree_node* @c_parser_objc_protocol_refs(%struct.c_parser* %23), !dbg !5606
  store %union.tree_node* %call27, %union.tree_node** %proto, align 8, !dbg !5607
  br label %if.end28, !dbg !5608

if.end28:                                         ; preds = %if.then26, %if.else20
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5609
  %objc_pq_context = getelementptr inbounds %struct.c_parser, %struct.c_parser* %24, i32 0, i32 2, !dbg !5610
  %bf.load29 = load i8, i8* %objc_pq_context, align 2, !dbg !5611
  %bf.clear30 = and i8 %bf.load29, -17, !dbg !5611
  %bf.set = or i8 %bf.clear30, 16, !dbg !5611
  store i8 %bf.set, i8* %objc_pq_context, align 2, !dbg !5611
  %25 = load %union.tree_node*, %union.tree_node** %id21, align 8, !dbg !5612
  %26 = load %union.tree_node*, %union.tree_node** %proto, align 8, !dbg !5613
  call void @objc_start_protocol(%union.tree_node* %25, %union.tree_node* %26), !dbg !5614
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5615
  call void @c_parser_objc_methodprotolist(%struct.c_parser* %27), !dbg !5616
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5617
  %call31 = call zeroext i8 @c_parser_require_keyword(%struct.c_parser* %28, i32 120, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0)), !dbg !5618
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5619
  %objc_pq_context32 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %29, i32 0, i32 2, !dbg !5620
  %bf.load33 = load i8, i8* %objc_pq_context32, align 2, !dbg !5621
  %bf.clear34 = and i8 %bf.load33, -17, !dbg !5621
  store i8 %bf.clear34, i8* %objc_pq_context32, align 2, !dbg !5621
  call void @objc_finish_interface(), !dbg !5622
  br label %if.end35

if.end35:                                         ; preds = %if.then, %if.end28, %while.end
  ret void, !dbg !5623
}

declare dso_local void @objc_finish_implementation() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @c_parser_pragma(%struct.c_parser* %parser, i32 %context) #0 !dbg !5624 {
entry:
  %retval = alloca i8, align 1
  %parser.addr = alloca %struct.c_parser*, align 8
  %context.addr = alloca i32, align 4
  %id = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5627, metadata !DIExpression()), !dbg !5628
  store i32 %context, i32* %context.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %context.addr, metadata !5629, metadata !DIExpression()), !dbg !5630
  call void @llvm.dbg.declare(metadata i32* %id, metadata !5631, metadata !DIExpression()), !dbg !5632
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5633
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !5634
  %1 = bitcast %struct.c_token* %call to i32*, !dbg !5635
  %bf.load = load i32, i32* %1, align 8, !dbg !5635
  %bf.lshr = lshr i32 %bf.load, 24, !dbg !5635
  store i32 %bf.lshr, i32* %id, align 4, !dbg !5636
  %2 = load i32, i32* %id, align 4, !dbg !5637
  %cmp = icmp ne i32 %2, 0, !dbg !5637
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5637

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6980, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5637
  br label %cond.end, !dbg !5637

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5637

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5637
  %3 = load i32, i32* %id, align 4, !dbg !5638
  switch i32 %3, label %sw.default [
    i32 2, label %sw.bb
    i32 4, label %sw.bb5
    i32 15, label %sw.bb12
    i32 16, label %sw.bb19
    i32 11, label %sw.bb20
    i32 17, label %sw.bb22
  ], !dbg !5639

sw.bb:                                            ; preds = %cond.end
  %4 = load i32, i32* %context.addr, align 4, !dbg !5640
  %cmp1 = icmp ne i32 %4, 2, !dbg !5643
  br i1 %cmp1, label %if.then, label %if.end4, !dbg !5644

if.then:                                          ; preds = %sw.bb
  %5 = load i32, i32* %context.addr, align 4, !dbg !5645
  %cmp2 = icmp eq i32 %5, 1, !dbg !5648
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !5649

if.then3:                                         ; preds = %if.then
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5650
  call void @c_parser_error(%struct.c_parser* %6, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.68, i64 0, i64 0)), !dbg !5651
  br label %if.end, !dbg !5651

if.end:                                           ; preds = %if.then3, %if.then
  br label %bad_stmt, !dbg !5652

if.end4:                                          ; preds = %sw.bb
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5653
  call void @c_parser_omp_barrier(%struct.c_parser* %7), !dbg !5654
  store i8 0, i8* %retval, align 1, !dbg !5655
  br label %return, !dbg !5655

sw.bb5:                                           ; preds = %cond.end
  %8 = load i32, i32* %context.addr, align 4, !dbg !5656
  %cmp6 = icmp ne i32 %8, 2, !dbg !5658
  br i1 %cmp6, label %if.then7, label %if.end11, !dbg !5659

if.then7:                                         ; preds = %sw.bb5
  %9 = load i32, i32* %context.addr, align 4, !dbg !5660
  %cmp8 = icmp eq i32 %9, 1, !dbg !5663
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !5664

if.then9:                                         ; preds = %if.then7
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5665
  call void @c_parser_error(%struct.c_parser* %10, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.69, i64 0, i64 0)), !dbg !5666
  br label %if.end10, !dbg !5666

if.end10:                                         ; preds = %if.then9, %if.then7
  br label %bad_stmt, !dbg !5667

if.end11:                                         ; preds = %sw.bb5
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5668
  call void @c_parser_omp_flush(%struct.c_parser* %11), !dbg !5669
  store i8 0, i8* %retval, align 1, !dbg !5670
  br label %return, !dbg !5670

sw.bb12:                                          ; preds = %cond.end
  %12 = load i32, i32* %context.addr, align 4, !dbg !5671
  %cmp13 = icmp ne i32 %12, 2, !dbg !5673
  br i1 %cmp13, label %if.then14, label %if.end18, !dbg !5674

if.then14:                                        ; preds = %sw.bb12
  %13 = load i32, i32* %context.addr, align 4, !dbg !5675
  %cmp15 = icmp eq i32 %13, 1, !dbg !5678
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !5679

if.then16:                                        ; preds = %if.then14
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5680
  call void @c_parser_error(%struct.c_parser* %14, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.70, i64 0, i64 0)), !dbg !5681
  br label %if.end17, !dbg !5681

if.end17:                                         ; preds = %if.then16, %if.then14
  br label %bad_stmt, !dbg !5682

if.end18:                                         ; preds = %sw.bb12
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5683
  call void @c_parser_omp_taskwait(%struct.c_parser* %15), !dbg !5684
  store i8 0, i8* %retval, align 1, !dbg !5685
  br label %return, !dbg !5685

sw.bb19:                                          ; preds = %cond.end
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5686
  call void @c_parser_omp_threadprivate(%struct.c_parser* %16), !dbg !5687
  store i8 0, i8* %retval, align 1, !dbg !5688
  br label %return, !dbg !5688

sw.bb20:                                          ; preds = %cond.end
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5689
  %call21 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %17), !dbg !5690
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call21, i32 0, i32 2, !dbg !5691
  %18 = load i32, i32* %location, align 8, !dbg !5691
  call void (i32, i8*, ...) @error_at(i32 %18, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.71, i64 0, i64 0)), !dbg !5692
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5693
  call void @c_parser_skip_until_found(%struct.c_parser* %19, i32 71, i8* null), !dbg !5694
  store i8 0, i8* %retval, align 1, !dbg !5695
  br label %return, !dbg !5695

sw.bb22:                                          ; preds = %cond.end
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5696
  call void @c_parser_error(%struct.c_parser* %20, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.72, i64 0, i64 0)), !dbg !5697
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5698
  call void @c_parser_skip_until_found(%struct.c_parser* %21, i32 71, i8* null), !dbg !5699
  store i8 0, i8* %retval, align 1, !dbg !5700
  br label %return, !dbg !5700

sw.default:                                       ; preds = %cond.end
  %22 = load i32, i32* %id, align 4, !dbg !5701
  %cmp23 = icmp ult i32 %22, 18, !dbg !5703
  br i1 %cmp23, label %if.then24, label %if.end28, !dbg !5704

if.then24:                                        ; preds = %sw.default
  %23 = load i32, i32* %context.addr, align 4, !dbg !5705
  %cmp25 = icmp eq i32 %23, 0, !dbg !5708
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !5709

if.then26:                                        ; preds = %if.then24
  br label %bad_stmt, !dbg !5710

bad_stmt:                                         ; preds = %if.then26, %if.end17, %if.end10, %if.end
  call void @llvm.dbg.label(metadata !5711), !dbg !5713
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5714
  call void @c_parser_error(%struct.c_parser* %24, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)), !dbg !5715
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5716
  call void @c_parser_skip_until_found(%struct.c_parser* %25, i32 71, i8* null), !dbg !5717
  store i8 0, i8* %retval, align 1, !dbg !5718
  br label %return, !dbg !5718

if.end27:                                         ; preds = %if.then24
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5719
  call void @c_parser_omp_construct(%struct.c_parser* %26), !dbg !5720
  store i8 1, i8* %retval, align 1, !dbg !5721
  br label %return, !dbg !5721

if.end28:                                         ; preds = %sw.default
  br label %sw.epilog, !dbg !5722

sw.epilog:                                        ; preds = %if.end28
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5723
  call void @c_parser_consume_pragma(%struct.c_parser* %27), !dbg !5724
  %28 = load i32, i32* %id, align 4, !dbg !5725
  call void @c_invoke_pragma_handler(i32 %28), !dbg !5726
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5727
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %29, i32 0, i32 2, !dbg !5728
  %bf.load29 = load i8, i8* %error, align 2, !dbg !5729
  %bf.clear = and i8 %bf.load29, -2, !dbg !5729
  %bf.set = or i8 %bf.clear, 1, !dbg !5729
  store i8 %bf.set, i8* %error, align 2, !dbg !5729
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5730
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %30), !dbg !5731
  store i8 0, i8* %retval, align 1, !dbg !5732
  br label %return, !dbg !5732

return:                                           ; preds = %sw.epilog, %if.end27, %bad_stmt, %sw.bb22, %sw.bb20, %sw.bb19, %if.end18, %if.end11, %if.end4
  %31 = load i8, i8* %retval, align 1, !dbg !5733
  ret i8 %31, !dbg !5733
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_objc_method_definition(%struct.c_parser* %parser) #0 !dbg !5734 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %type = alloca i32, align 4
  %decl = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5735, metadata !DIExpression()), !dbg !5736
  call void @llvm.dbg.declare(metadata i32* %type, metadata !5737, metadata !DIExpression()), !dbg !5738
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5739
  %call = call i32 @c_parser_objc_method_type(%struct.c_parser* %0), !dbg !5740
  store i32 %call, i32* %type, align 4, !dbg !5738
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !5741, metadata !DIExpression()), !dbg !5742
  %1 = load i32, i32* %type, align 4, !dbg !5743
  call void @objc_set_method_type(i32 %1), !dbg !5744
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5745
  %objc_pq_context = getelementptr inbounds %struct.c_parser, %struct.c_parser* %2, i32 0, i32 2, !dbg !5746
  %bf.load = load i8, i8* %objc_pq_context, align 2, !dbg !5747
  %bf.clear = and i8 %bf.load, -17, !dbg !5747
  %bf.set = or i8 %bf.clear, 16, !dbg !5747
  store i8 %bf.set, i8* %objc_pq_context, align 2, !dbg !5747
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5748
  %call1 = call %union.tree_node* @c_parser_objc_method_decl(%struct.c_parser* %3), !dbg !5749
  store %union.tree_node* %call1, %union.tree_node** %decl, align 8, !dbg !5750
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5751
  %call2 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %4, i32 43), !dbg !5753
  %tobool = icmp ne i8 %call2, 0, !dbg !5753
  br i1 %tobool, label %if.then, label %if.end, !dbg !5754

if.then:                                          ; preds = %entry
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5755
  call void @c_parser_consume_token(%struct.c_parser* %5), !dbg !5757
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5758
  %call3 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %6), !dbg !5759
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call3, i32 0, i32 2, !dbg !5760
  %7 = load i32, i32* %location, align 8, !dbg !5760
  %call4 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %7, i32 834, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.125, i64 0, i64 0)), !dbg !5761
  br label %if.end, !dbg !5762

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5763
  %call5 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %8, i32 41), !dbg !5765
  %tobool6 = icmp ne i8 %call5, 0, !dbg !5765
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !5766

if.then7:                                         ; preds = %if.end
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5767
  call void @c_parser_error(%struct.c_parser* %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0)), !dbg !5769
  br label %return, !dbg !5770

if.end8:                                          ; preds = %if.end
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5771
  %objc_pq_context9 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %10, i32 0, i32 2, !dbg !5772
  %bf.load10 = load i8, i8* %objc_pq_context9, align 2, !dbg !5773
  %bf.clear11 = and i8 %bf.load10, -17, !dbg !5773
  store i8 %bf.clear11, i8* %objc_pq_context9, align 2, !dbg !5773
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5774
  call void @objc_start_method_definition(%union.tree_node* %11), !dbg !5775
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5776
  %call12 = call %union.tree_node* @c_parser_compound_statement(%struct.c_parser* %12), !dbg !5777
  %call13 = call %union.tree_node* @add_stmt(%union.tree_node* %call12), !dbg !5778
  %13 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5779
  call void @objc_finish_method_definition(%union.tree_node* %13), !dbg !5780
  br label %return, !dbg !5781

return:                                           ; preds = %if.end8, %if.then7
  ret void, !dbg !5781
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_declaration_or_fndef(%struct.c_parser* %parser, i8 zeroext %fndef_ok, i8 zeroext %empty_ok, i8 zeroext %nested, i8 zeroext %start_attr_ok) #0 !dbg !5782 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %fndef_ok.addr = alloca i8, align 1
  %empty_ok.addr = alloca i8, align 1
  %nested.addr = alloca i8, align 1
  %start_attr_ok.addr = alloca i8, align 1
  %specs = alloca %struct.c_declspecs*, align 8
  %prefix_attrs = alloca %union.tree_node*, align 8
  %all_prefix_attrs = alloca %union.tree_node*, align 8
  %diagnosed_no_specs = alloca i8, align 1
  %here = alloca i32, align 4
  %declarator = alloca %struct.c_declarator*, align 8
  %dummy = alloca i8, align 1
  %fnbody = alloca %union.tree_node*, align 8
  %asm_name = alloca %union.tree_node*, align 8
  %postfix_attrs = alloca %union.tree_node*, align 8
  %d = alloca %union.tree_node*, align 8
  %init = alloca %struct.c_expr, align 8
  %init_loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %d84 = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !5785, metadata !DIExpression()), !dbg !5786
  store i8 %fndef_ok, i8* %fndef_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fndef_ok.addr, metadata !5787, metadata !DIExpression()), !dbg !5788
  store i8 %empty_ok, i8* %empty_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %empty_ok.addr, metadata !5789, metadata !DIExpression()), !dbg !5790
  store i8 %nested, i8* %nested.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %nested.addr, metadata !5791, metadata !DIExpression()), !dbg !5792
  store i8 %start_attr_ok, i8* %start_attr_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %start_attr_ok.addr, metadata !5793, metadata !DIExpression()), !dbg !5794
  call void @llvm.dbg.declare(metadata %struct.c_declspecs** %specs, metadata !5795, metadata !DIExpression()), !dbg !5796
  call void @llvm.dbg.declare(metadata %union.tree_node** %prefix_attrs, metadata !5797, metadata !DIExpression()), !dbg !5798
  call void @llvm.dbg.declare(metadata %union.tree_node** %all_prefix_attrs, metadata !5799, metadata !DIExpression()), !dbg !5800
  call void @llvm.dbg.declare(metadata i8* %diagnosed_no_specs, metadata !5801, metadata !DIExpression()), !dbg !5802
  store i8 0, i8* %diagnosed_no_specs, align 1, !dbg !5802
  call void @llvm.dbg.declare(metadata i32* %here, metadata !5803, metadata !DIExpression()), !dbg !5804
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5805
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !5806
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !5807
  %1 = load i32, i32* %location, align 8, !dbg !5807
  store i32 %1, i32* %here, align 4, !dbg !5804
  %call1 = call %struct.c_declspecs* @build_null_declspecs(), !dbg !5808
  store %struct.c_declspecs* %call1, %struct.c_declspecs** %specs, align 8, !dbg !5809
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5810
  %3 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !5811
  %4 = load i8, i8* %start_attr_ok.addr, align 1, !dbg !5812
  call void @c_parser_declspecs(%struct.c_parser* %2, %struct.c_declspecs* %3, i8 zeroext 1, i8 zeroext 1, i8 zeroext %4), !dbg !5813
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5814
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %5, i32 0, i32 2, !dbg !5816
  %bf.load = load i8, i8* %error, align 2, !dbg !5816
  %bf.clear = and i8 %bf.load, 1, !dbg !5816
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5816
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5814
  br i1 %tobool, label %if.then, label %if.end, !dbg !5817

if.then:                                          ; preds = %entry
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5818
  call void @c_parser_skip_to_end_of_block_or_statement(%struct.c_parser* %6), !dbg !5820
  br label %while.end144, !dbg !5821

if.end:                                           ; preds = %entry
  %7 = load i8, i8* %nested.addr, align 1, !dbg !5822
  %conv = zext i8 %7 to i32, !dbg !5822
  %tobool2 = icmp ne i32 %conv, 0, !dbg !5822
  br i1 %tobool2, label %land.lhs.true, label %if.end8, !dbg !5824

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !5825
  %declspecs_seen_p = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %8, i32 0, i32 6, !dbg !5826
  %bf.load3 = load i8, i8* %declspecs_seen_p, align 8, !dbg !5826
  %bf.lshr = lshr i8 %bf.load3, 1, !dbg !5826
  %bf.clear4 = and i8 %bf.lshr, 1, !dbg !5826
  %bf.cast5 = zext i8 %bf.clear4 to i32, !dbg !5826
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !5825
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !5827

if.then7:                                         ; preds = %land.lhs.true
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5828
  call void @c_parser_error(%struct.c_parser* %9, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)), !dbg !5830
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5831
  call void @c_parser_skip_to_end_of_block_or_statement(%struct.c_parser* %10), !dbg !5832
  br label %while.end144, !dbg !5833

if.end8:                                          ; preds = %land.lhs.true, %if.end
  %11 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !5834
  %call9 = call %struct.c_declspecs* @finish_declspecs(%struct.c_declspecs* %11), !dbg !5835
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5836
  %call10 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %12, i32 43), !dbg !5838
  %tobool11 = icmp ne i8 %call10, 0, !dbg !5838
  br i1 %tobool11, label %if.then12, label %if.end17, !dbg !5839

if.then12:                                        ; preds = %if.end8
  %13 = load i8, i8* %empty_ok.addr, align 1, !dbg !5840
  %tobool13 = icmp ne i8 %13, 0, !dbg !5840
  br i1 %tobool13, label %if.then14, label %if.else, !dbg !5843

if.then14:                                        ; preds = %if.then12
  %14 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !5844
  call void @shadow_tag(%struct.c_declspecs* %14), !dbg !5845
  br label %if.end16, !dbg !5845

if.else:                                          ; preds = %if.then12
  %15 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !5846
  call void @shadow_tag_warned(%struct.c_declspecs* %15, i32 1), !dbg !5848
  %16 = load i32, i32* %here, align 4, !dbg !5849
  %call15 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %16, i32 0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.126, i64 0, i64 0)), !dbg !5850
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then14
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5851
  call void @c_parser_consume_token(%struct.c_parser* %17), !dbg !5852
  br label %while.end144, !dbg !5853

if.end17:                                         ; preds = %if.end8
  call void @pending_xref_error(), !dbg !5854
  %18 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !5855
  %attrs = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %18, i32 0, i32 3, !dbg !5856
  %19 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !5856
  store %union.tree_node* %19, %union.tree_node** %prefix_attrs, align 8, !dbg !5857
  %20 = load %union.tree_node*, %union.tree_node** %prefix_attrs, align 8, !dbg !5858
  store %union.tree_node* %20, %union.tree_node** %all_prefix_attrs, align 8, !dbg !5859
  %21 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !5860
  %attrs18 = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %21, i32 0, i32 3, !dbg !5861
  store %union.tree_node* null, %union.tree_node** %attrs18, align 8, !dbg !5862
  br label %while.body, !dbg !5863

while.body:                                       ; preds = %if.end17, %if.end100
  call void @llvm.dbg.declare(metadata %struct.c_declarator** %declarator, metadata !5864, metadata !DIExpression()), !dbg !5866
  call void @llvm.dbg.declare(metadata i8* %dummy, metadata !5867, metadata !DIExpression()), !dbg !5868
  store i8 0, i8* %dummy, align 1, !dbg !5868
  call void @llvm.dbg.declare(metadata %union.tree_node** %fnbody, metadata !5869, metadata !DIExpression()), !dbg !5870
  %22 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5871
  %23 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !5872
  %type_seen_p = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %23, i32 0, i32 6, !dbg !5873
  %bf.load19 = load i8, i8* %type_seen_p, align 8, !dbg !5873
  %bf.lshr20 = lshr i8 %bf.load19, 2, !dbg !5873
  %bf.clear21 = and i8 %bf.lshr20, 1, !dbg !5873
  %bf.cast22 = zext i8 %bf.clear21 to i32, !dbg !5873
  %conv23 = trunc i32 %bf.cast22 to i8, !dbg !5872
  %call24 = call %struct.c_declarator* @c_parser_declarator(%struct.c_parser* %22, i8 zeroext %conv23, i32 0, i8* %dummy), !dbg !5874
  store %struct.c_declarator* %call24, %struct.c_declarator** %declarator, align 8, !dbg !5875
  %24 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !5876
  %cmp = icmp eq %struct.c_declarator* %24, null, !dbg !5878
  br i1 %cmp, label %if.then26, label %if.end27, !dbg !5879

if.then26:                                        ; preds = %while.body
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5880
  call void @c_parser_skip_to_end_of_block_or_statement(%struct.c_parser* %25), !dbg !5882
  br label %while.end144, !dbg !5883

if.end27:                                         ; preds = %while.body
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5884
  %call28 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %26, i32 0), !dbg !5886
  %conv29 = zext i8 %call28 to i32, !dbg !5886
  %tobool30 = icmp ne i32 %conv29, 0, !dbg !5886
  br i1 %tobool30, label %if.then46, label %lor.lhs.false, !dbg !5887

lor.lhs.false:                                    ; preds = %if.end27
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5888
  %call31 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %27, i32 19), !dbg !5889
  %conv32 = zext i8 %call31 to i32, !dbg !5889
  %tobool33 = icmp ne i32 %conv32, 0, !dbg !5889
  br i1 %tobool33, label %if.then46, label %lor.lhs.false34, !dbg !5890

lor.lhs.false34:                                  ; preds = %lor.lhs.false
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5891
  %call35 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %28, i32 43), !dbg !5892
  %conv36 = zext i8 %call35 to i32, !dbg !5892
  %tobool37 = icmp ne i32 %conv36, 0, !dbg !5892
  br i1 %tobool37, label %if.then46, label %lor.lhs.false38, !dbg !5893

lor.lhs.false38:                                  ; preds = %lor.lhs.false34
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5894
  %call39 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %29, i32 49), !dbg !5895
  %conv40 = zext i8 %call39 to i32, !dbg !5895
  %tobool41 = icmp ne i32 %conv40, 0, !dbg !5895
  br i1 %tobool41, label %if.then46, label %lor.lhs.false42, !dbg !5896

lor.lhs.false42:                                  ; preds = %lor.lhs.false38
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5897
  %call43 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %30, i32 52), !dbg !5898
  %conv44 = zext i8 %call43 to i32, !dbg !5898
  %tobool45 = icmp ne i32 %conv44, 0, !dbg !5898
  br i1 %tobool45, label %if.then46, label %if.else106, !dbg !5899

if.then46:                                        ; preds = %lor.lhs.false42, %lor.lhs.false38, %lor.lhs.false34, %lor.lhs.false, %if.end27
  call void @llvm.dbg.declare(metadata %union.tree_node** %asm_name, metadata !5900, metadata !DIExpression()), !dbg !5902
  store %union.tree_node* null, %union.tree_node** %asm_name, align 8, !dbg !5902
  call void @llvm.dbg.declare(metadata %union.tree_node** %postfix_attrs, metadata !5903, metadata !DIExpression()), !dbg !5904
  store %union.tree_node* null, %union.tree_node** %postfix_attrs, align 8, !dbg !5904
  %31 = load i8, i8* %diagnosed_no_specs, align 1, !dbg !5905
  %tobool47 = icmp ne i8 %31, 0, !dbg !5905
  br i1 %tobool47, label %if.end57, label %land.lhs.true48, !dbg !5907

land.lhs.true48:                                  ; preds = %if.then46
  %32 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !5908
  %declspecs_seen_p49 = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %32, i32 0, i32 6, !dbg !5909
  %bf.load50 = load i8, i8* %declspecs_seen_p49, align 8, !dbg !5909
  %bf.lshr51 = lshr i8 %bf.load50, 1, !dbg !5909
  %bf.clear52 = and i8 %bf.lshr51, 1, !dbg !5909
  %bf.cast53 = zext i8 %bf.clear52 to i32, !dbg !5909
  %tobool54 = icmp ne i32 %bf.cast53, 0, !dbg !5908
  br i1 %tobool54, label %if.end57, label %if.then55, !dbg !5910

if.then55:                                        ; preds = %land.lhs.true48
  store i8 1, i8* %diagnosed_no_specs, align 1, !dbg !5911
  %33 = load i32, i32* %here, align 4, !dbg !5913
  %call56 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %33, i32 0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.127, i64 0, i64 0)), !dbg !5914
  br label %if.end57, !dbg !5915

if.end57:                                         ; preds = %if.then55, %land.lhs.true48, %if.then46
  store i8 0, i8* %fndef_ok.addr, align 1, !dbg !5916
  %34 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5917
  %call58 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %34, i32 49), !dbg !5919
  %tobool59 = icmp ne i8 %call58, 0, !dbg !5919
  br i1 %tobool59, label %if.then60, label %if.end62, !dbg !5920

if.then60:                                        ; preds = %if.end57
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5921
  %call61 = call %union.tree_node* @c_parser_simple_asm_expr(%struct.c_parser* %35), !dbg !5922
  store %union.tree_node* %call61, %union.tree_node** %asm_name, align 8, !dbg !5923
  br label %if.end62, !dbg !5924

if.end62:                                         ; preds = %if.then60, %if.end57
  %36 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5925
  %call63 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %36, i32 52), !dbg !5927
  %tobool64 = icmp ne i8 %call63, 0, !dbg !5927
  br i1 %tobool64, label %if.then65, label %if.end67, !dbg !5928

if.then65:                                        ; preds = %if.end62
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5929
  %call66 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %37), !dbg !5930
  store %union.tree_node* %call66, %union.tree_node** %postfix_attrs, align 8, !dbg !5931
  br label %if.end67, !dbg !5932

if.end67:                                         ; preds = %if.then65, %if.end62
  %38 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5933
  %call68 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %38, i32 0), !dbg !5935
  %tobool69 = icmp ne i8 %call68, 0, !dbg !5935
  br i1 %tobool69, label %if.then70, label %if.else83, !dbg !5936

if.then70:                                        ; preds = %if.end67
  call void @llvm.dbg.declare(metadata %union.tree_node** %d, metadata !5937, metadata !DIExpression()), !dbg !5939
  call void @llvm.dbg.declare(metadata %struct.c_expr* %init, metadata !5940, metadata !DIExpression()), !dbg !5941
  call void @llvm.dbg.declare(metadata i32* %init_loc, metadata !5942, metadata !DIExpression()), !dbg !5943
  %39 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5944
  call void @c_parser_consume_token(%struct.c_parser* %39), !dbg !5945
  %40 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !5946
  %41 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !5947
  %42 = load %union.tree_node*, %union.tree_node** %postfix_attrs, align 8, !dbg !5948
  %43 = load %union.tree_node*, %union.tree_node** %all_prefix_attrs, align 8, !dbg !5949
  %call71 = call %union.tree_node* @chainon(%union.tree_node* %42, %union.tree_node* %43), !dbg !5950
  %call72 = call %union.tree_node* @start_decl(%struct.c_declarator* %40, %struct.c_declspecs* %41, i8 zeroext 1, %union.tree_node* %call71), !dbg !5951
  store %union.tree_node* %call72, %union.tree_node** %d, align 8, !dbg !5952
  %44 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5953
  %tobool73 = icmp ne %union.tree_node* %44, null, !dbg !5953
  br i1 %tobool73, label %if.end75, label %if.then74, !dbg !5955

if.then74:                                        ; preds = %if.then70
  %45 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5956
  store %union.tree_node* %45, %union.tree_node** %d, align 8, !dbg !5957
  br label %if.end75, !dbg !5958

if.end75:                                         ; preds = %if.then74, %if.then70
  %46 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5959
  %47 = load %union.tree_node*, %union.tree_node** %asm_name, align 8, !dbg !5960
  %call76 = call i32 @global_bindings_p(), !dbg !5961
  call void @start_init(%union.tree_node* %46, %union.tree_node* %47, i32 %call76), !dbg !5962
  %48 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5963
  %call77 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %48), !dbg !5964
  %location78 = getelementptr inbounds %struct.c_token, %struct.c_token* %call77, i32 0, i32 2, !dbg !5965
  %49 = load i32, i32* %location78, align 8, !dbg !5965
  store i32 %49, i32* %init_loc, align 4, !dbg !5966
  %50 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !5967
  call void @c_parser_initializer(%struct.c_expr* sret %tmp, %struct.c_parser* %50), !dbg !5968
  %51 = bitcast %struct.c_expr* %init to i8*, !dbg !5968
  %52 = bitcast %struct.c_expr* %tmp to i8*, !dbg !5968
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 24, i1 false), !dbg !5968
  call void @finish_init(), !dbg !5969
  %53 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5970
  %54 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5972
  %cmp79 = icmp ne %union.tree_node* %53, %54, !dbg !5973
  br i1 %cmp79, label %if.then81, label %if.end82, !dbg !5974

if.then81:                                        ; preds = %if.end75
  %55 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5975
  %common = bitcast %union.tree_node* %55 to %struct.tree_common*, !dbg !5975
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5975
  %56 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5975
  call void @maybe_warn_string_init(%union.tree_node* %56, %struct.c_expr* byval(%struct.c_expr) align 8 %init), !dbg !5977
  %57 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !5978
  %58 = load i32, i32* %init_loc, align 4, !dbg !5979
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 0, !dbg !5980
  %59 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5980
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 2, !dbg !5981
  %60 = load %union.tree_node*, %union.tree_node** %original_type, align 8, !dbg !5981
  %61 = load %union.tree_node*, %union.tree_node** %asm_name, align 8, !dbg !5982
  call void @finish_decl(%union.tree_node* %57, i32 %58, %union.tree_node* %59, %union.tree_node* %60, %union.tree_node* %61), !dbg !5983
  br label %if.end82, !dbg !5984

if.end82:                                         ; preds = %if.then81, %if.end75
  br label %if.end90, !dbg !5985

if.else83:                                        ; preds = %if.end67
  call void @llvm.dbg.declare(metadata %union.tree_node** %d84, metadata !5986, metadata !DIExpression()), !dbg !5988
  %62 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !5989
  %63 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !5990
  %64 = load %union.tree_node*, %union.tree_node** %postfix_attrs, align 8, !dbg !5991
  %65 = load %union.tree_node*, %union.tree_node** %all_prefix_attrs, align 8, !dbg !5992
  %call85 = call %union.tree_node* @chainon(%union.tree_node* %64, %union.tree_node* %65), !dbg !5993
  %call86 = call %union.tree_node* @start_decl(%struct.c_declarator* %62, %struct.c_declspecs* %63, i8 zeroext 0, %union.tree_node* %call85), !dbg !5994
  store %union.tree_node* %call86, %union.tree_node** %d84, align 8, !dbg !5988
  %66 = load %union.tree_node*, %union.tree_node** %d84, align 8, !dbg !5995
  %tobool87 = icmp ne %union.tree_node* %66, null, !dbg !5995
  br i1 %tobool87, label %if.then88, label %if.end89, !dbg !5997

if.then88:                                        ; preds = %if.else83
  %67 = load %union.tree_node*, %union.tree_node** %d84, align 8, !dbg !5998
  %68 = load %union.tree_node*, %union.tree_node** %asm_name, align 8, !dbg !5999
  call void @finish_decl(%union.tree_node* %67, i32 0, %union.tree_node* null, %union.tree_node* null, %union.tree_node* %68), !dbg !6000
  br label %if.end89, !dbg !6000

if.end89:                                         ; preds = %if.then88, %if.else83
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.end82
  %69 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6001
  %call91 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %69, i32 19), !dbg !6003
  %tobool92 = icmp ne i8 %call91, 0, !dbg !6003
  br i1 %tobool92, label %if.then93, label %if.else101, !dbg !6004

if.then93:                                        ; preds = %if.end90
  %70 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6005
  call void @c_parser_consume_token(%struct.c_parser* %70), !dbg !6007
  %71 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6008
  %call94 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %71, i32 52), !dbg !6010
  %tobool95 = icmp ne i8 %call94, 0, !dbg !6010
  br i1 %tobool95, label %if.then96, label %if.else99, !dbg !6011

if.then96:                                        ; preds = %if.then93
  %72 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6012
  %call97 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %72), !dbg !6013
  %73 = load %union.tree_node*, %union.tree_node** %prefix_attrs, align 8, !dbg !6014
  %call98 = call %union.tree_node* @chainon(%union.tree_node* %call97, %union.tree_node* %73), !dbg !6015
  store %union.tree_node* %call98, %union.tree_node** %all_prefix_attrs, align 8, !dbg !6016
  br label %if.end100, !dbg !6017

if.else99:                                        ; preds = %if.then93
  %74 = load %union.tree_node*, %union.tree_node** %prefix_attrs, align 8, !dbg !6018
  store %union.tree_node* %74, %union.tree_node** %all_prefix_attrs, align 8, !dbg !6019
  br label %if.end100

if.end100:                                        ; preds = %if.else99, %if.then96
  br label %while.body, !dbg !6020, !llvm.loop !6021

if.else101:                                       ; preds = %if.end90
  %75 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6023
  %call102 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %75, i32 43), !dbg !6025
  %tobool103 = icmp ne i8 %call102, 0, !dbg !6025
  br i1 %tobool103, label %if.then104, label %if.else105, !dbg !6026

if.then104:                                       ; preds = %if.else101
  %76 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6027
  call void @c_parser_consume_token(%struct.c_parser* %76), !dbg !6029
  br label %while.end144, !dbg !6030

if.else105:                                       ; preds = %if.else101
  %77 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6031
  call void @c_parser_error(%struct.c_parser* %77, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.128, i64 0, i64 0)), !dbg !6033
  %78 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6034
  call void @c_parser_skip_to_end_of_block_or_statement(%struct.c_parser* %78), !dbg !6035
  br label %while.end144, !dbg !6036

if.else106:                                       ; preds = %lor.lhs.false42
  %79 = load i8, i8* %fndef_ok.addr, align 1, !dbg !6037
  %tobool107 = icmp ne i8 %79, 0, !dbg !6037
  br i1 %tobool107, label %if.end109, label %if.then108, !dbg !6039

if.then108:                                       ; preds = %if.else106
  %80 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6040
  call void @c_parser_error(%struct.c_parser* %80, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.129, i64 0, i64 0)), !dbg !6042
  %81 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6043
  call void @c_parser_skip_to_end_of_block_or_statement(%struct.c_parser* %81), !dbg !6044
  br label %while.end144, !dbg !6045

if.end109:                                        ; preds = %if.else106
  br label %if.end110

if.end110:                                        ; preds = %if.end109
  %82 = load i8, i8* %nested.addr, align 1, !dbg !6046
  %tobool111 = icmp ne i8 %82, 0, !dbg !6046
  br i1 %tobool111, label %if.then112, label %if.end114, !dbg !6048

if.then112:                                       ; preds = %if.end110
  %83 = load i32, i32* %here, align 4, !dbg !6049
  %call113 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %83, i32 834, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.130, i64 0, i64 0)), !dbg !6051
  call void @c_push_function_context(), !dbg !6052
  br label %if.end114, !dbg !6053

if.end114:                                        ; preds = %if.then112, %if.end110
  %84 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6054
  %85 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !6056
  %86 = load %union.tree_node*, %union.tree_node** %all_prefix_attrs, align 8, !dbg !6057
  %call115 = call i32 @start_function(%struct.c_declspecs* %84, %struct.c_declarator* %85, %union.tree_node* %86), !dbg !6058
  %tobool116 = icmp ne i32 %call115, 0, !dbg !6058
  br i1 %tobool116, label %if.end121, label %if.then117, !dbg !6059

if.then117:                                       ; preds = %if.end114
  %87 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6060
  call void @c_parser_error(%struct.c_parser* %87, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.129, i64 0, i64 0)), !dbg !6062
  %88 = load i8, i8* %nested.addr, align 1, !dbg !6063
  %tobool118 = icmp ne i8 %88, 0, !dbg !6063
  br i1 %tobool118, label %if.then119, label %if.end120, !dbg !6065

if.then119:                                       ; preds = %if.then117
  call void @c_pop_function_context(), !dbg !6066
  br label %if.end120, !dbg !6066

if.end120:                                        ; preds = %if.then119, %if.then117
  br label %while.end144, !dbg !6067

if.end121:                                        ; preds = %if.end114
  br label %while.cond122, !dbg !6068

while.cond122:                                    ; preds = %while.body129, %if.end121
  %89 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6069
  %call123 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %89, i32 22), !dbg !6070
  %conv124 = zext i8 %call123 to i32, !dbg !6070
  %tobool125 = icmp ne i32 %conv124, 0, !dbg !6070
  br i1 %tobool125, label %land.rhs, label %land.end, !dbg !6071

land.rhs:                                         ; preds = %while.cond122
  %90 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6072
  %call126 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %90, i32 41), !dbg !6073
  %conv127 = zext i8 %call126 to i32, !dbg !6073
  %tobool128 = icmp ne i32 %conv127, 0, !dbg !6071
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond122
  %91 = phi i1 [ false, %while.cond122 ], [ %tobool128, %land.rhs ], !dbg !6074
  br i1 %91, label %while.body129, label %while.end, !dbg !6068

while.body129:                                    ; preds = %land.end
  %92 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6075
  call void @c_parser_declaration_or_fndef(%struct.c_parser* %92, i8 zeroext 0, i8 zeroext 0, i8 zeroext 1, i8 zeroext 0), !dbg !6076
  br label %while.cond122, !dbg !6068, !llvm.loop !6077

while.end:                                        ; preds = %land.end
  call void @store_parm_decls(), !dbg !6079
  %93 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6080
  %call130 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %93), !dbg !6081
  %location131 = getelementptr inbounds %struct.c_token, %struct.c_token* %call130, i32 0, i32 2, !dbg !6082
  %94 = load i32, i32* %location131, align 8, !dbg !6082
  %95 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6083
  %function_decl = bitcast %union.tree_node* %95 to %struct.tree_function_decl*, !dbg !6083
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !6083
  %96 = load %struct.function*, %struct.function** %f, align 8, !dbg !6083
  %function_start_locus = getelementptr inbounds %struct.function, %struct.function* %96, i32 0, i32 15, !dbg !6084
  store i32 %94, i32* %function_start_locus, align 8, !dbg !6085
  %97 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6086
  %call132 = call %union.tree_node* @c_parser_compound_statement(%struct.c_parser* %97), !dbg !6087
  store %union.tree_node* %call132, %union.tree_node** %fnbody, align 8, !dbg !6088
  %98 = load i8, i8* %nested.addr, align 1, !dbg !6089
  %tobool133 = icmp ne i8 %98, 0, !dbg !6089
  br i1 %tobool133, label %if.then134, label %if.else141, !dbg !6091

if.then134:                                       ; preds = %while.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6092, metadata !DIExpression()), !dbg !6094
  %99 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6095
  store %union.tree_node* %99, %union.tree_node** %decl, align 8, !dbg !6094
  %100 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6096
  %function_decl135 = bitcast %union.tree_node* %100 to %struct.tree_function_decl*, !dbg !6096
  %regdecl_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl135, i32 0, i32 5, !dbg !6096
  %bf.load136 = load i32, i32* %regdecl_flag, align 8, !dbg !6097
  %bf.clear137 = and i32 %bf.load136, -4194305, !dbg !6097
  %bf.set = or i32 %bf.clear137, 4194304, !dbg !6097
  store i32 %bf.set, i32* %regdecl_flag, align 8, !dbg !6097
  %101 = load %union.tree_node*, %union.tree_node** %fnbody, align 8, !dbg !6098
  %call138 = call %union.tree_node* @add_stmt(%union.tree_node* %101), !dbg !6099
  call void @finish_function(), !dbg !6100
  call void @c_pop_function_context(), !dbg !6101
  %102 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6102
  %decl_minimal = bitcast %union.tree_node* %102 to %struct.tree_decl_minimal*, !dbg !6102
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !6102
  %103 = load i32, i32* %locus, align 8, !dbg !6102
  %104 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6103
  %call139 = call %union.tree_node* (i32, i32, ...) @build_stmt(i32 %103, i32 132, %union.tree_node* %104), !dbg !6104
  %call140 = call %union.tree_node* @add_stmt(%union.tree_node* %call139), !dbg !6105
  br label %if.end143, !dbg !6106

if.else141:                                       ; preds = %while.end
  %105 = load %union.tree_node*, %union.tree_node** %fnbody, align 8, !dbg !6107
  %call142 = call %union.tree_node* @add_stmt(%union.tree_node* %105), !dbg !6109
  call void @finish_function(), !dbg !6110
  br label %if.end143

if.end143:                                        ; preds = %if.else141, %if.then134
  br label %while.end144, !dbg !6111

while.end144:                                     ; preds = %if.then, %if.then7, %if.end16, %if.then26, %if.then104, %if.else105, %if.then108, %if.end143, %if.end120
  ret void, !dbg !6112
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_simple_asm_expr(%struct.c_parser* %parser) #0 !dbg !6113 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %str = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6116, metadata !DIExpression()), !dbg !6117
  call void @llvm.dbg.declare(metadata %union.tree_node** %str, metadata !6118, metadata !DIExpression()), !dbg !6119
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6120
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 49), !dbg !6120
  %tobool = icmp ne i8 %call, 0, !dbg !6120
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6120

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 2783, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6120
  br label %cond.end, !dbg !6120

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6120

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6120
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6121
  %lex_untranslated_string = getelementptr inbounds %struct.c_parser, %struct.c_parser* %1, i32 0, i32 2, !dbg !6122
  %bf.load = load i8, i8* %lex_untranslated_string, align 2, !dbg !6123
  %bf.clear = and i8 %bf.load, -9, !dbg !6123
  %bf.set = or i8 %bf.clear, 8, !dbg !6123
  store i8 %bf.set, i8* %lex_untranslated_string, align 2, !dbg !6123
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6124
  call void @c_parser_consume_token(%struct.c_parser* %2), !dbg !6125
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6126
  %call1 = call zeroext i8 @c_parser_require(%struct.c_parser* %3, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !6128
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6128
  br i1 %tobool2, label %if.end, label %if.then, !dbg !6129

if.then:                                          ; preds = %cond.end
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6130
  %lex_untranslated_string3 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %4, i32 0, i32 2, !dbg !6132
  %bf.load4 = load i8, i8* %lex_untranslated_string3, align 2, !dbg !6133
  %bf.clear5 = and i8 %bf.load4, -9, !dbg !6133
  store i8 %bf.clear5, i8* %lex_untranslated_string3, align 2, !dbg !6133
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6134
  br label %return, !dbg !6134

if.end:                                           ; preds = %cond.end
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6135
  %call6 = call %union.tree_node* @c_parser_asm_string_literal(%struct.c_parser* %5), !dbg !6136
  store %union.tree_node* %call6, %union.tree_node** %str, align 8, !dbg !6137
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6138
  %lex_untranslated_string7 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %6, i32 0, i32 2, !dbg !6139
  %bf.load8 = load i8, i8* %lex_untranslated_string7, align 2, !dbg !6140
  %bf.clear9 = and i8 %bf.load8, -9, !dbg !6140
  store i8 %bf.clear9, i8* %lex_untranslated_string7, align 2, !dbg !6140
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6141
  %call10 = call zeroext i8 @c_parser_require(%struct.c_parser* %7, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !6143
  %tobool11 = icmp ne i8 %call10, 0, !dbg !6143
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !6144

if.then12:                                        ; preds = %if.end
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6145
  call void @c_parser_skip_until_found(%struct.c_parser* %8, i32 21, i8* null), !dbg !6147
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6148
  br label %return, !dbg !6148

if.end13:                                         ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %str, align 8, !dbg !6149
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !6150
  br label %return, !dbg !6150

return:                                           ; preds = %if.end13, %if.then12, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6151
  ret %union.tree_node* %10, !dbg !6151
}

declare dso_local %struct.cgraph_asm_node* @cgraph_add_asm_node(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_skip_until_found(%struct.c_parser* %parser, i32 %type, i8* %msgid) #0 !dbg !6152 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %type.addr = alloca i32, align 4
  %msgid.addr = alloca i8*, align 8
  %nesting_depth = alloca i32, align 4
  %token = alloca %struct.c_token*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6155, metadata !DIExpression()), !dbg !6156
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !6157, metadata !DIExpression()), !dbg !6158
  store i8* %msgid, i8** %msgid.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msgid.addr, metadata !6159, metadata !DIExpression()), !dbg !6160
  call void @llvm.dbg.declare(metadata i32* %nesting_depth, metadata !6161, metadata !DIExpression()), !dbg !6162
  store i32 0, i32* %nesting_depth, align 4, !dbg !6162
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6163
  %1 = load i32, i32* %type.addr, align 4, !dbg !6165
  %2 = load i8*, i8** %msgid.addr, align 8, !dbg !6166
  %call = call zeroext i8 @c_parser_require(%struct.c_parser* %0, i32 %1, i8* %2), !dbg !6167
  %tobool = icmp ne i8 %call, 0, !dbg !6167
  br i1 %tobool, label %if.then, label %if.end, !dbg !6168

if.then:                                          ; preds = %entry
  br label %return, !dbg !6169

if.end:                                           ; preds = %entry
  br label %while.body, !dbg !6170

while.body:                                       ; preds = %if.end, %if.end46
  call void @llvm.dbg.declare(metadata %struct.c_token** %token, metadata !6171, metadata !DIExpression()), !dbg !6173
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6174
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !6175
  store %struct.c_token* %call1, %struct.c_token** %token, align 8, !dbg !6173
  %4 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6176
  %5 = bitcast %struct.c_token* %4 to i32*, !dbg !6178
  %bf.load = load i32, i32* %5, align 8, !dbg !6178
  %bf.clear = and i32 %bf.load, 255, !dbg !6178
  %6 = load i32, i32* %type.addr, align 4, !dbg !6179
  %cmp = icmp eq i32 %bf.clear, %6, !dbg !6180
  br i1 %cmp, label %land.lhs.true, label %if.end4, !dbg !6181

land.lhs.true:                                    ; preds = %while.body
  %7 = load i32, i32* %nesting_depth, align 4, !dbg !6182
  %tobool2 = icmp ne i32 %7, 0, !dbg !6182
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !6183

if.then3:                                         ; preds = %land.lhs.true
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6184
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !6186
  br label %while.end, !dbg !6187

if.end4:                                          ; preds = %land.lhs.true, %while.body
  %9 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6188
  %10 = bitcast %struct.c_token* %9 to i32*, !dbg !6190
  %bf.load5 = load i32, i32* %10, align 8, !dbg !6190
  %bf.clear6 = and i32 %bf.load5, 255, !dbg !6190
  %cmp7 = icmp eq i32 %bf.clear6, 22, !dbg !6191
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !6192

if.then8:                                         ; preds = %if.end4
  br label %return, !dbg !6193

if.end9:                                          ; preds = %if.end4
  %11 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6194
  %12 = bitcast %struct.c_token* %11 to i32*, !dbg !6196
  %bf.load10 = load i32, i32* %12, align 8, !dbg !6196
  %bf.clear11 = and i32 %bf.load10, 255, !dbg !6196
  %cmp12 = icmp eq i32 %bf.clear11, 71, !dbg !6197
  br i1 %cmp12, label %land.lhs.true13, label %if.end18, !dbg !6198

land.lhs.true13:                                  ; preds = %if.end9
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6199
  %in_pragma = getelementptr inbounds %struct.c_parser, %struct.c_parser* %13, i32 0, i32 2, !dbg !6200
  %bf.load14 = load i8, i8* %in_pragma, align 2, !dbg !6200
  %bf.lshr = lshr i8 %bf.load14, 1, !dbg !6200
  %bf.clear15 = and i8 %bf.lshr, 1, !dbg !6200
  %bf.cast = zext i8 %bf.clear15 to i32, !dbg !6200
  %tobool16 = icmp ne i32 %bf.cast, 0, !dbg !6199
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !6201

if.then17:                                        ; preds = %land.lhs.true13
  br label %return, !dbg !6202

if.end18:                                         ; preds = %land.lhs.true13, %if.end9
  %14 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6203
  %15 = bitcast %struct.c_token* %14 to i32*, !dbg !6205
  %bf.load19 = load i32, i32* %15, align 8, !dbg !6205
  %bf.clear20 = and i32 %bf.load19, 255, !dbg !6205
  %cmp21 = icmp eq i32 %bf.clear20, 41, !dbg !6206
  br i1 %cmp21, label %if.then29, label %lor.lhs.false, !dbg !6207

lor.lhs.false:                                    ; preds = %if.end18
  %16 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6208
  %17 = bitcast %struct.c_token* %16 to i32*, !dbg !6209
  %bf.load22 = load i32, i32* %17, align 8, !dbg !6209
  %bf.clear23 = and i32 %bf.load22, 255, !dbg !6209
  %cmp24 = icmp eq i32 %bf.clear23, 20, !dbg !6210
  br i1 %cmp24, label %if.then29, label %lor.lhs.false25, !dbg !6211

lor.lhs.false25:                                  ; preds = %lor.lhs.false
  %18 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6212
  %19 = bitcast %struct.c_token* %18 to i32*, !dbg !6213
  %bf.load26 = load i32, i32* %19, align 8, !dbg !6213
  %bf.clear27 = and i32 %bf.load26, 255, !dbg !6213
  %cmp28 = icmp eq i32 %bf.clear27, 39, !dbg !6214
  br i1 %cmp28, label %if.then29, label %if.else, !dbg !6215

if.then29:                                        ; preds = %lor.lhs.false25, %lor.lhs.false, %if.end18
  %20 = load i32, i32* %nesting_depth, align 4, !dbg !6216
  %inc = add i32 %20, 1, !dbg !6216
  store i32 %inc, i32* %nesting_depth, align 4, !dbg !6216
  br label %if.end46, !dbg !6216

if.else:                                          ; preds = %lor.lhs.false25
  %21 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6217
  %22 = bitcast %struct.c_token* %21 to i32*, !dbg !6219
  %bf.load30 = load i32, i32* %22, align 8, !dbg !6219
  %bf.clear31 = and i32 %bf.load30, 255, !dbg !6219
  %cmp32 = icmp eq i32 %bf.clear31, 42, !dbg !6220
  br i1 %cmp32, label %if.then41, label %lor.lhs.false33, !dbg !6221

lor.lhs.false33:                                  ; preds = %if.else
  %23 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6222
  %24 = bitcast %struct.c_token* %23 to i32*, !dbg !6223
  %bf.load34 = load i32, i32* %24, align 8, !dbg !6223
  %bf.clear35 = and i32 %bf.load34, 255, !dbg !6223
  %cmp36 = icmp eq i32 %bf.clear35, 21, !dbg !6224
  br i1 %cmp36, label %if.then41, label %lor.lhs.false37, !dbg !6225

lor.lhs.false37:                                  ; preds = %lor.lhs.false33
  %25 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6226
  %26 = bitcast %struct.c_token* %25 to i32*, !dbg !6227
  %bf.load38 = load i32, i32* %26, align 8, !dbg !6227
  %bf.clear39 = and i32 %bf.load38, 255, !dbg !6227
  %cmp40 = icmp eq i32 %bf.clear39, 40, !dbg !6228
  br i1 %cmp40, label %if.then41, label %if.end45, !dbg !6229

if.then41:                                        ; preds = %lor.lhs.false37, %lor.lhs.false33, %if.else
  %27 = load i32, i32* %nesting_depth, align 4, !dbg !6230
  %dec = add i32 %27, -1, !dbg !6230
  store i32 %dec, i32* %nesting_depth, align 4, !dbg !6230
  %cmp42 = icmp eq i32 %27, 0, !dbg !6233
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !6234

if.then43:                                        ; preds = %if.then41
  br label %while.end, !dbg !6235

if.end44:                                         ; preds = %if.then41
  br label %if.end45, !dbg !6236

if.end45:                                         ; preds = %if.end44, %lor.lhs.false37
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then29
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6237
  call void @c_parser_consume_token(%struct.c_parser* %28), !dbg !6238
  br label %while.body, !dbg !6170, !llvm.loop !6239

while.end:                                        ; preds = %if.then43, %if.then3
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6241
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %29, i32 0, i32 2, !dbg !6242
  %bf.load47 = load i8, i8* %error, align 2, !dbg !6243
  %bf.clear48 = and i8 %bf.load47, -2, !dbg !6243
  store i8 %bf.clear48, i8* %error, align 2, !dbg !6243
  br label %return, !dbg !6244

return:                                           ; preds = %while.end, %if.then17, %if.then8, %if.then
  ret void, !dbg !6244
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %parser, i32 %keyword) #0 !dbg !6245 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %keyword.addr = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6248, metadata !DIExpression()), !dbg !6249
  store i32 %keyword, i32* %keyword.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %keyword.addr, metadata !6250, metadata !DIExpression()), !dbg !6251
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6252
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !6253
  %1 = bitcast %struct.c_token* %call to i32*, !dbg !6254
  %bf.load = load i32, i32* %1, align 8, !dbg !6254
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6254
  %bf.clear = and i32 %bf.lshr, 255, !dbg !6254
  %2 = load i32, i32* %keyword.addr, align 4, !dbg !6255
  %cmp = icmp eq i32 %bf.clear, %2, !dbg !6256
  %conv = zext i1 %cmp to i32, !dbg !6256
  %conv1 = trunc i32 %conv to i8, !dbg !6253
  ret i8 %conv1, !dbg !6257
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_asm_string_literal(%struct.c_parser* %parser) #0 !dbg !6258 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %str = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6259, metadata !DIExpression()), !dbg !6260
  call void @llvm.dbg.declare(metadata %union.tree_node** %str, metadata !6261, metadata !DIExpression()), !dbg !6262
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6263
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 61), !dbg !6265
  %tobool = icmp ne i8 %call, 0, !dbg !6265
  br i1 %tobool, label %if.then, label %if.else, !dbg !6266

if.then:                                          ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6267
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !6269
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 1, !dbg !6270
  %2 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6270
  store %union.tree_node* %2, %union.tree_node** %str, align 8, !dbg !6271
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6272
  call void @c_parser_consume_token(%struct.c_parser* %3), !dbg !6273
  br label %if.end8, !dbg !6274

if.else:                                          ; preds = %entry
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6275
  %call2 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %4, i32 62), !dbg !6277
  %tobool3 = icmp ne i8 %call2, 0, !dbg !6277
  br i1 %tobool3, label %if.then4, label %if.else7, !dbg !6278

if.then4:                                         ; preds = %if.else
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6279
  %call5 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !6281
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call5, i32 0, i32 2, !dbg !6282
  %6 = load i32, i32* %location, align 8, !dbg !6282
  call void (i32, i8*, ...) @error_at(i32 %6, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0)), !dbg !6283
  %call6 = call %union.tree_node* @build_string(i32 1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i64 0, i64 0)), !dbg !6284
  store %union.tree_node* %call6, %union.tree_node** %str, align 8, !dbg !6285
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6286
  call void @c_parser_consume_token(%struct.c_parser* %7), !dbg !6287
  br label %if.end, !dbg !6288

if.else7:                                         ; preds = %if.else
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6289
  call void @c_parser_error(%struct.c_parser* %8, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)), !dbg !6291
  store %union.tree_node* null, %union.tree_node** %str, align 8, !dbg !6292
  br label %if.end

if.end:                                           ; preds = %if.else7, %if.then4
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then
  %9 = load %union.tree_node*, %union.tree_node** %str, align 8, !dbg !6293
  ret %union.tree_node* %9, !dbg !6294
}

declare dso_local void @error_at(i32, i8*, ...) #2

declare dso_local %union.tree_node* @build_string(i32, i8*) #2

declare dso_local void @objc_start_category_implementation(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_objc_protocol_refs(%struct.c_parser* %parser) #0 !dbg !6295 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list = alloca %union.tree_node*, align 8
  %id = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6296, metadata !DIExpression()), !dbg !6297
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !6298, metadata !DIExpression()), !dbg !6299
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !6299
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6300
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 3), !dbg !6300
  %tobool = icmp ne i8 %call, 0, !dbg !6300
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6300

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6675, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6300
  br label %cond.end, !dbg !6300

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6300

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6300
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6301
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !6302
  br label %while.body, !dbg !6303

while.body:                                       ; preds = %cond.end, %if.end9
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !6304, metadata !DIExpression()), !dbg !6306
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6307
  %call1 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %2, i32 53), !dbg !6309
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6309
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6310

if.then:                                          ; preds = %while.body
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6311
  call void @c_parser_error(%struct.c_parser* %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !6313
  br label %while.end, !dbg !6314

if.end:                                           ; preds = %while.body
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6315
  %call3 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %4), !dbg !6316
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call3, i32 0, i32 1, !dbg !6317
  %5 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6317
  store %union.tree_node* %5, %union.tree_node** %id, align 8, !dbg !6318
  %6 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !6319
  %7 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !6320
  %call4 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* null, %union.tree_node* %7), !dbg !6320
  %call5 = call %union.tree_node* @chainon(%union.tree_node* %6, %union.tree_node* %call4), !dbg !6321
  store %union.tree_node* %call5, %union.tree_node** %list, align 8, !dbg !6322
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6323
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !6324
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6325
  %call6 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %9, i32 19), !dbg !6327
  %tobool7 = icmp ne i8 %call6, 0, !dbg !6327
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !6328

if.then8:                                         ; preds = %if.end
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6329
  call void @c_parser_consume_token(%struct.c_parser* %10), !dbg !6330
  br label %if.end9, !dbg !6330

if.else:                                          ; preds = %if.end
  br label %while.end, !dbg !6331

if.end9:                                          ; preds = %if.then8
  br label %while.body, !dbg !6303, !llvm.loop !6332

while.end:                                        ; preds = %if.else, %if.then
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6334
  %call10 = call zeroext i8 @c_parser_require(%struct.c_parser* %11, i32 2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0)), !dbg !6335
  %12 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !6336
  ret %union.tree_node* %12, !dbg !6337
}

declare dso_local void @objc_start_category_interface(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_objc_methodprotolist(%struct.c_parser* %parser) #0 !dbg !6338 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6339, metadata !DIExpression()), !dbg !6340
  br label %while.body, !dbg !6341

while.body:                                       ; preds = %entry, %sw.epilog
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6342
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !6344
  %1 = bitcast %struct.c_token* %call to i32*, !dbg !6345
  %bf.load = load i32, i32* %1, align 8, !dbg !6345
  %bf.clear = and i32 %bf.load, 255, !dbg !6345
  switch i32 %bf.clear, label %sw.default [
    i32 43, label %sw.bb
    i32 4, label %sw.bb3
    i32 5, label %sw.bb3
    i32 70, label %sw.bb4
    i32 22, label %sw.bb6
  ], !dbg !6346

sw.bb:                                            ; preds = %while.body
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6347
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !6349
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !6350
  %3 = load i32, i32* %location, align 8, !dbg !6350
  %call2 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %3, i32 834, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0)), !dbg !6351
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6352
  call void @c_parser_consume_token(%struct.c_parser* %4), !dbg !6353
  br label %sw.epilog, !dbg !6354

sw.bb3:                                           ; preds = %while.body, %while.body
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6355
  call void @c_parser_objc_methodproto(%struct.c_parser* %5), !dbg !6356
  br label %sw.epilog, !dbg !6357

sw.bb4:                                           ; preds = %while.body
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6358
  %call5 = call zeroext i8 @c_parser_pragma(%struct.c_parser* %6, i32 0), !dbg !6359
  br label %sw.epilog, !dbg !6360

sw.bb6:                                           ; preds = %while.body
  br label %return, !dbg !6361

sw.default:                                       ; preds = %while.body
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6362
  %call7 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %7, i32 120), !dbg !6364
  %tobool = icmp ne i8 %call7, 0, !dbg !6364
  br i1 %tobool, label %if.then, label %if.end, !dbg !6365

if.then:                                          ; preds = %sw.default
  br label %return, !dbg !6366

if.end:                                           ; preds = %sw.default
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6367
  call void @c_parser_declaration_or_fndef(%struct.c_parser* %8, i8 zeroext 0, i8 zeroext 1, i8 zeroext 0, i8 zeroext 1), !dbg !6368
  br label %sw.epilog, !dbg !6369

sw.epilog:                                        ; preds = %if.end, %sw.bb4, %sw.bb3, %sw.bb
  br label %while.body, !dbg !6341, !llvm.loop !6370

return:                                           ; preds = %if.then, %sw.bb6
  ret void, !dbg !6372
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @c_parser_require_keyword(%struct.c_parser* %parser, i32 %keyword, i8* %msgid) #0 !dbg !6373 {
entry:
  %retval = alloca i8, align 1
  %parser.addr = alloca %struct.c_parser*, align 8
  %keyword.addr = alloca i32, align 4
  %msgid.addr = alloca i8*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6376, metadata !DIExpression()), !dbg !6377
  store i32 %keyword, i32* %keyword.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %keyword.addr, metadata !6378, metadata !DIExpression()), !dbg !6379
  store i8* %msgid, i8** %msgid.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msgid.addr, metadata !6380, metadata !DIExpression()), !dbg !6381
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6382
  %1 = load i32, i32* %keyword.addr, align 4, !dbg !6384
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 %1), !dbg !6385
  %tobool = icmp ne i8 %call, 0, !dbg !6385
  br i1 %tobool, label %if.then, label %if.else, !dbg !6386

if.then:                                          ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6387
  call void @c_parser_consume_token(%struct.c_parser* %2), !dbg !6389
  store i8 1, i8* %retval, align 1, !dbg !6390
  br label %return, !dbg !6390

if.else:                                          ; preds = %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6391
  %4 = load i8*, i8** %msgid.addr, align 8, !dbg !6393
  call void @c_parser_error(%struct.c_parser* %3, i8* %4), !dbg !6394
  store i8 0, i8* %retval, align 1, !dbg !6395
  br label %return, !dbg !6395

return:                                           ; preds = %if.else, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !6396
  ret i8 %5, !dbg !6396
}

declare dso_local void @objc_finish_interface() #2

declare dso_local void @objc_start_class_interface(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @objc_start_class_implementation(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_objc_class_instance_variables(%struct.c_parser* %parser) #0 !dbg !6397 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %decls = alloca %union.tree_node*, align 8
  %ivar = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6398, metadata !DIExpression()), !dbg !6399
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6400
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 41), !dbg !6400
  %tobool = icmp ne i8 %call, 0, !dbg !6400
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6400

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6211, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6400
  br label %cond.end, !dbg !6400

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6400

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6400
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6401
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !6402
  br label %while.cond, !dbg !6403

while.cond:                                       ; preds = %for.end, %if.then24, %if.then20, %if.then16, %if.then13, %if.then, %cond.end
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6404
  %call1 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %2, i32 22), !dbg !6405
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6403
  br i1 %tobool2, label %while.body, label %while.end, !dbg !6403

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %decls, metadata !6406, metadata !DIExpression()), !dbg !6408
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6409
  %call3 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %3, i32 43), !dbg !6411
  %tobool4 = icmp ne i8 %call3, 0, !dbg !6411
  br i1 %tobool4, label %if.then, label %if.end, !dbg !6412

if.then:                                          ; preds = %while.body
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6413
  %call5 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %4), !dbg !6415
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call5, i32 0, i32 2, !dbg !6416
  %5 = load i32, i32* %location, align 8, !dbg !6416
  %call6 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %5, i32 834, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.58, i64 0, i64 0)), !dbg !6417
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6418
  call void @c_parser_consume_token(%struct.c_parser* %6), !dbg !6419
  br label %while.cond, !dbg !6420, !llvm.loop !6421

if.end:                                           ; preds = %while.body
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6423
  %call7 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %7, i32 42), !dbg !6425
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6425
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !6426

if.then9:                                         ; preds = %if.end
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6427
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !6429
  br label %while.end, !dbg !6430

if.end10:                                         ; preds = %if.end
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6431
  %call11 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %9, i32 73), !dbg !6433
  %tobool12 = icmp ne i8 %call11, 0, !dbg !6433
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !6434

if.then13:                                        ; preds = %if.end10
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6435
  call void @c_parser_consume_token(%struct.c_parser* %10), !dbg !6437
  call void @objc_set_visibility(i32 2), !dbg !6438
  br label %while.cond, !dbg !6439, !llvm.loop !6421

if.else:                                          ; preds = %if.end10
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6440
  %call14 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %11, i32 74), !dbg !6442
  %tobool15 = icmp ne i8 %call14, 0, !dbg !6442
  br i1 %tobool15, label %if.then16, label %if.else17, !dbg !6443

if.then16:                                        ; preds = %if.else
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6444
  call void @c_parser_consume_token(%struct.c_parser* %12), !dbg !6446
  call void @objc_set_visibility(i32 0), !dbg !6447
  br label %while.cond, !dbg !6448, !llvm.loop !6421

if.else17:                                        ; preds = %if.else
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6449
  %call18 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %13, i32 72), !dbg !6451
  %tobool19 = icmp ne i8 %call18, 0, !dbg !6451
  br i1 %tobool19, label %if.then20, label %if.else21, !dbg !6452

if.then20:                                        ; preds = %if.else17
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6453
  call void @c_parser_consume_token(%struct.c_parser* %14), !dbg !6455
  call void @objc_set_visibility(i32 1), !dbg !6456
  br label %while.cond, !dbg !6457, !llvm.loop !6421

if.else21:                                        ; preds = %if.else17
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6458
  %call22 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %15, i32 70), !dbg !6460
  %tobool23 = icmp ne i8 %call22, 0, !dbg !6460
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !6461

if.then24:                                        ; preds = %if.else21
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6462
  %call25 = call zeroext i8 @c_parser_pragma(%struct.c_parser* %16, i32 0), !dbg !6464
  br label %while.cond, !dbg !6465, !llvm.loop !6421

if.end26:                                         ; preds = %if.else21
  br label %if.end27

if.end27:                                         ; preds = %if.end26
  br label %if.end28

if.end28:                                         ; preds = %if.end27
  br label %if.end29

if.end29:                                         ; preds = %if.end28
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6466
  %call30 = call %union.tree_node* @c_parser_struct_declaration(%struct.c_parser* %17), !dbg !6467
  store %union.tree_node* %call30, %union.tree_node** %decls, align 8, !dbg !6468
  call void @llvm.dbg.declare(metadata %union.tree_node** %ivar, metadata !6469, metadata !DIExpression()), !dbg !6471
  %18 = load %union.tree_node*, %union.tree_node** %decls, align 8, !dbg !6472
  %call31 = call %union.tree_node* @nreverse(%union.tree_node* %18), !dbg !6473
  store %union.tree_node* %call31, %union.tree_node** %ivar, align 8, !dbg !6471
  br label %for.cond, !dbg !6474

for.cond:                                         ; preds = %for.inc, %if.end29
  %19 = load %union.tree_node*, %union.tree_node** %ivar, align 8, !dbg !6475
  %tobool32 = icmp ne %union.tree_node* %19, null, !dbg !6478
  br i1 %tobool32, label %for.body, label %for.end, !dbg !6478

for.body:                                         ; preds = %for.cond
  %20 = load %union.tree_node*, %union.tree_node** %ivar, align 8, !dbg !6479
  %call33 = call %union.tree_node* @copy_node_stat(%union.tree_node* %20), !dbg !6479
  call void @objc_add_instance_variable(%union.tree_node* %call33), !dbg !6480
  br label %for.inc, !dbg !6480

for.inc:                                          ; preds = %for.body
  %21 = load %union.tree_node*, %union.tree_node** %ivar, align 8, !dbg !6481
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !6481
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6481
  %22 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6481
  store %union.tree_node* %22, %union.tree_node** %ivar, align 8, !dbg !6482
  br label %for.cond, !dbg !6483, !llvm.loop !6484

for.end:                                          ; preds = %for.cond
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6486
  call void @c_parser_skip_until_found(%struct.c_parser* %23, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !6487
  br label %while.cond, !dbg !6403, !llvm.loop !6421

while.end:                                        ; preds = %if.then9, %while.cond
  ret void, !dbg !6488
}

declare dso_local void @objc_continue_interface() #2

declare dso_local void @objc_continue_implementation() #2

declare dso_local %union.tree_node* @chainon(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_tree_list_stat(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_objc_methodproto(%struct.c_parser* %parser) #0 !dbg !6489 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %type = alloca i32, align 4
  %decl = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6490, metadata !DIExpression()), !dbg !6491
  call void @llvm.dbg.declare(metadata i32* %type, metadata !6492, metadata !DIExpression()), !dbg !6493
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6494
  %call = call i32 @c_parser_objc_method_type(%struct.c_parser* %0), !dbg !6495
  store i32 %call, i32* %type, align 4, !dbg !6493
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6496, metadata !DIExpression()), !dbg !6497
  %1 = load i32, i32* %type, align 4, !dbg !6498
  call void @objc_set_method_type(i32 %1), !dbg !6499
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6500
  %objc_pq_context = getelementptr inbounds %struct.c_parser, %struct.c_parser* %2, i32 0, i32 2, !dbg !6501
  %bf.load = load i8, i8* %objc_pq_context, align 2, !dbg !6502
  %bf.clear = and i8 %bf.load, -17, !dbg !6502
  %bf.set = or i8 %bf.clear, 16, !dbg !6502
  store i8 %bf.set, i8* %objc_pq_context, align 2, !dbg !6502
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6503
  %call1 = call %union.tree_node* @c_parser_objc_method_decl(%struct.c_parser* %3), !dbg !6504
  store %union.tree_node* %call1, %union.tree_node** %decl, align 8, !dbg !6505
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6506
  %objc_pq_context2 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %4, i32 0, i32 2, !dbg !6507
  %bf.load3 = load i8, i8* %objc_pq_context2, align 2, !dbg !6508
  %bf.clear4 = and i8 %bf.load3, -17, !dbg !6508
  store i8 %bf.clear4, i8* %objc_pq_context2, align 2, !dbg !6508
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6509
  call void @objc_add_method_declaration(%union.tree_node* %5), !dbg !6510
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6511
  call void @c_parser_skip_until_found(%struct.c_parser* %6, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !6512
  ret void, !dbg !6513
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @c_parser_objc_method_type(%struct.c_parser* %parser) #0 !dbg !6514 {
entry:
  %retval = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6517, metadata !DIExpression()), !dbg !6518
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6519
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !6520
  %1 = bitcast %struct.c_token* %call to i32*, !dbg !6521
  %bf.load = load i32, i32* %1, align 8, !dbg !6521
  %bf.clear = and i32 %bf.load, 255, !dbg !6521
  switch i32 %bf.clear, label %sw.default [
    i32 4, label %sw.bb
    i32 5, label %sw.bb1
  ], !dbg !6522

sw.bb:                                            ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6523
  call void @c_parser_consume_token(%struct.c_parser* %2), !dbg !6525
  store i32 63, i32* %retval, align 4, !dbg !6526
  br label %return, !dbg !6526

sw.bb1:                                           ; preds = %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6527
  call void @c_parser_consume_token(%struct.c_parser* %3), !dbg !6528
  store i32 64, i32* %retval, align 4, !dbg !6529
  br label %return, !dbg !6529

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6415, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6530
  br label %sw.epilog, !dbg !6531

sw.epilog:                                        ; preds = %sw.default
  store i32 191, i32* %retval, align 4, !dbg !6532
  br label %return, !dbg !6532

return:                                           ; preds = %sw.epilog, %sw.bb1, %sw.bb
  %4 = load i32, i32* %retval, align 4, !dbg !6533
  ret i32 %4, !dbg !6533
}

declare dso_local void @objc_set_method_type(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_objc_method_decl(%struct.c_parser* %parser) #0 !dbg !6534 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %type = alloca %union.tree_node*, align 8
  %sel = alloca %union.tree_node*, align 8
  %parms = alloca %union.tree_node*, align 8
  %ellipsis = alloca i8, align 1
  %tsel = alloca %union.tree_node*, align 8
  %list = alloca %union.tree_node*, align 8
  %atype = alloca %union.tree_node*, align 8
  %id = alloca %union.tree_node*, align 8
  %keyworddecl = alloca %union.tree_node*, align 8
  %parm = alloca %struct.c_parm*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6535, metadata !DIExpression()), !dbg !6536
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6537, metadata !DIExpression()), !dbg !6538
  store %union.tree_node* null, %union.tree_node** %type, align 8, !dbg !6538
  call void @llvm.dbg.declare(metadata %union.tree_node** %sel, metadata !6539, metadata !DIExpression()), !dbg !6540
  call void @llvm.dbg.declare(metadata %union.tree_node** %parms, metadata !6541, metadata !DIExpression()), !dbg !6542
  store %union.tree_node* null, %union.tree_node** %parms, align 8, !dbg !6542
  call void @llvm.dbg.declare(metadata i8* %ellipsis, metadata !6543, metadata !DIExpression()), !dbg !6544
  store i8 0, i8* %ellipsis, align 1, !dbg !6544
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6545
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 20), !dbg !6547
  %tobool = icmp ne i8 %call, 0, !dbg !6547
  br i1 %tobool, label %if.then, label %if.end, !dbg !6548

if.then:                                          ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6549
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !6551
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6552
  %call1 = call %union.tree_node* @c_parser_objc_type_name(%struct.c_parser* %2), !dbg !6553
  store %union.tree_node* %call1, %union.tree_node** %type, align 8, !dbg !6554
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6555
  call void @c_parser_skip_until_found(%struct.c_parser* %3, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !6556
  br label %if.end, !dbg !6557

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6558
  %call2 = call %union.tree_node* @c_parser_objc_selector(%struct.c_parser* %4), !dbg !6559
  store %union.tree_node* %call2, %union.tree_node** %sel, align 8, !dbg !6560
  %5 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !6561
  %tobool3 = icmp ne %union.tree_node* %5, null, !dbg !6561
  br i1 %tobool3, label %lor.lhs.false, label %if.then6, !dbg !6563

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6564
  %call4 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %6, i32 18), !dbg !6565
  %conv = zext i8 %call4 to i32, !dbg !6565
  %tobool5 = icmp ne i32 %conv, 0, !dbg !6565
  br i1 %tobool5, label %if.then6, label %if.end46, !dbg !6566

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %tsel, metadata !6567, metadata !DIExpression()), !dbg !6569
  %7 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !6570
  store %union.tree_node* %7, %union.tree_node** %tsel, align 8, !dbg !6569
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !6571, metadata !DIExpression()), !dbg !6572
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !6572
  br label %while.body, !dbg !6573

while.body:                                       ; preds = %if.then6, %if.end29
  call void @llvm.dbg.declare(metadata %union.tree_node** %atype, metadata !6574, metadata !DIExpression()), !dbg !6576
  store %union.tree_node* null, %union.tree_node** %atype, align 8, !dbg !6576
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !6577, metadata !DIExpression()), !dbg !6578
  call void @llvm.dbg.declare(metadata %union.tree_node** %keyworddecl, metadata !6579, metadata !DIExpression()), !dbg !6580
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6581
  %call7 = call zeroext i8 @c_parser_require(%struct.c_parser* %8, i32 18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)), !dbg !6583
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6583
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !6584

if.then9:                                         ; preds = %while.body
  br label %while.end, !dbg !6585

if.end10:                                         ; preds = %while.body
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6586
  %call11 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %9, i32 20), !dbg !6588
  %tobool12 = icmp ne i8 %call11, 0, !dbg !6588
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !6589

if.then13:                                        ; preds = %if.end10
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6590
  call void @c_parser_consume_token(%struct.c_parser* %10), !dbg !6592
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6593
  %call14 = call %union.tree_node* @c_parser_objc_type_name(%struct.c_parser* %11), !dbg !6594
  store %union.tree_node* %call14, %union.tree_node** %atype, align 8, !dbg !6595
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6596
  call void @c_parser_skip_until_found(%struct.c_parser* %12, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !6597
  br label %if.end15, !dbg !6598

if.end15:                                         ; preds = %if.then13, %if.end10
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6599
  %call16 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %13, i32 53), !dbg !6601
  %tobool17 = icmp ne i8 %call16, 0, !dbg !6601
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !6602

if.then18:                                        ; preds = %if.end15
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6603
  call void @c_parser_error(%struct.c_parser* %14, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !6605
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6606
  store %union.tree_node* %15, %union.tree_node** %retval, align 8, !dbg !6607
  br label %return, !dbg !6607

if.end19:                                         ; preds = %if.end15
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6608
  %call20 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %16), !dbg !6609
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call20, i32 0, i32 1, !dbg !6610
  %17 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6610
  store %union.tree_node* %17, %union.tree_node** %id, align 8, !dbg !6611
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6612
  call void @c_parser_consume_token(%struct.c_parser* %18), !dbg !6613
  %19 = load %union.tree_node*, %union.tree_node** %tsel, align 8, !dbg !6614
  %20 = load %union.tree_node*, %union.tree_node** %atype, align 8, !dbg !6615
  %21 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !6616
  %call21 = call %union.tree_node* @objc_build_keyword_decl(%union.tree_node* %19, %union.tree_node* %20, %union.tree_node* %21), !dbg !6617
  store %union.tree_node* %call21, %union.tree_node** %keyworddecl, align 8, !dbg !6618
  %22 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !6619
  %23 = load %union.tree_node*, %union.tree_node** %keyworddecl, align 8, !dbg !6620
  %call22 = call %union.tree_node* @chainon(%union.tree_node* %22, %union.tree_node* %23), !dbg !6621
  store %union.tree_node* %call22, %union.tree_node** %list, align 8, !dbg !6622
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6623
  %call23 = call %union.tree_node* @c_parser_objc_selector(%struct.c_parser* %24), !dbg !6624
  store %union.tree_node* %call23, %union.tree_node** %tsel, align 8, !dbg !6625
  %25 = load %union.tree_node*, %union.tree_node** %tsel, align 8, !dbg !6626
  %tobool24 = icmp ne %union.tree_node* %25, null, !dbg !6626
  br i1 %tobool24, label %if.end29, label %land.lhs.true, !dbg !6628

land.lhs.true:                                    ; preds = %if.end19
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6629
  %call25 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %26, i32 18), !dbg !6630
  %conv26 = zext i8 %call25 to i32, !dbg !6630
  %tobool27 = icmp ne i32 %conv26, 0, !dbg !6630
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !6631

if.then28:                                        ; preds = %land.lhs.true
  br label %while.end, !dbg !6632

if.end29:                                         ; preds = %land.lhs.true, %if.end19
  br label %while.body, !dbg !6573, !llvm.loop !6633

while.end:                                        ; preds = %if.then28, %if.then9
  %call30 = call %union.tree_node* @make_node_stat(i32 2), !dbg !6635
  store %union.tree_node* %call30, %union.tree_node** %parms, align 8, !dbg !6636
  br label %while.cond, !dbg !6637

while.cond:                                       ; preds = %if.end41, %while.end
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6638
  %call31 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %27, i32 19), !dbg !6639
  %tobool32 = icmp ne i8 %call31, 0, !dbg !6637
  br i1 %tobool32, label %while.body33, label %while.end45, !dbg !6637

while.body33:                                     ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.c_parm** %parm, metadata !6640, metadata !DIExpression()), !dbg !6648
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6649
  call void @c_parser_consume_token(%struct.c_parser* %28), !dbg !6650
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6651
  %call34 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %29, i32 44), !dbg !6653
  %tobool35 = icmp ne i8 %call34, 0, !dbg !6653
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !6654

if.then36:                                        ; preds = %while.body33
  store i8 1, i8* %ellipsis, align 1, !dbg !6655
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6657
  call void @c_parser_consume_token(%struct.c_parser* %30), !dbg !6658
  br label %while.end45, !dbg !6659

if.end37:                                         ; preds = %while.body33
  %31 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6660
  %call38 = call %struct.c_parm* @c_parser_parameter_declaration(%struct.c_parser* %31, %union.tree_node* null), !dbg !6661
  store %struct.c_parm* %call38, %struct.c_parm** %parm, align 8, !dbg !6662
  %32 = load %struct.c_parm*, %struct.c_parm** %parm, align 8, !dbg !6663
  %cmp = icmp eq %struct.c_parm* %32, null, !dbg !6665
  br i1 %cmp, label %if.then40, label %if.end41, !dbg !6666

if.then40:                                        ; preds = %if.end37
  br label %while.end45, !dbg !6667

if.end41:                                         ; preds = %if.end37
  %33 = load %union.tree_node*, %union.tree_node** %parms, align 8, !dbg !6668
  %34 = load %struct.c_parm*, %struct.c_parm** %parm, align 8, !dbg !6669
  %call42 = call %union.tree_node* @grokparm(%struct.c_parm* %34), !dbg !6669
  %call43 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* null, %union.tree_node* %call42), !dbg !6669
  %call44 = call %union.tree_node* @chainon(%union.tree_node* %33, %union.tree_node* %call43), !dbg !6670
  store %union.tree_node* %call44, %union.tree_node** %parms, align 8, !dbg !6671
  br label %while.cond, !dbg !6637, !llvm.loop !6672

while.end45:                                      ; preds = %if.then40, %if.then36, %while.cond
  %35 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !6674
  store %union.tree_node* %35, %union.tree_node** %sel, align 8, !dbg !6675
  br label %if.end46, !dbg !6676

if.end46:                                         ; preds = %while.end45, %lor.lhs.false
  %36 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6677
  %37 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !6678
  %38 = load %union.tree_node*, %union.tree_node** %parms, align 8, !dbg !6679
  %39 = load i8, i8* %ellipsis, align 1, !dbg !6680
  %call47 = call %union.tree_node* @objc_build_method_signature(%union.tree_node* %36, %union.tree_node* %37, %union.tree_node* %38, i8 zeroext %39), !dbg !6681
  store %union.tree_node* %call47, %union.tree_node** %retval, align 8, !dbg !6682
  br label %return, !dbg !6682

return:                                           ; preds = %if.end46, %if.then18
  %40 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6683
  ret %union.tree_node* %40, !dbg !6683
}

declare dso_local void @objc_add_method_declaration(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_objc_type_name(%struct.c_parser* %parser) #0 !dbg !6684 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %quals = alloca %union.tree_node*, align 8
  %type_name = alloca %struct.c_type_name*, align 8
  %type = alloca %union.tree_node*, align 8
  %token = alloca %struct.c_token*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6685, metadata !DIExpression()), !dbg !6686
  call void @llvm.dbg.declare(metadata %union.tree_node** %quals, metadata !6687, metadata !DIExpression()), !dbg !6688
  store %union.tree_node* null, %union.tree_node** %quals, align 8, !dbg !6688
  call void @llvm.dbg.declare(metadata %struct.c_type_name** %type_name, metadata !6689, metadata !DIExpression()), !dbg !6690
  store %struct.c_type_name* null, %struct.c_type_name** %type_name, align 8, !dbg !6690
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6691, metadata !DIExpression()), !dbg !6692
  store %union.tree_node* null, %union.tree_node** %type, align 8, !dbg !6692
  br label %while.body, !dbg !6693

while.body:                                       ; preds = %entry, %if.end
  call void @llvm.dbg.declare(metadata %struct.c_token** %token, metadata !6694, metadata !DIExpression()), !dbg !6696
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6697
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !6698
  store %struct.c_token* %call, %struct.c_token** %token, align 8, !dbg !6696
  %1 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6699
  %2 = bitcast %struct.c_token* %1 to i32*, !dbg !6701
  %bf.load = load i32, i32* %2, align 8, !dbg !6701
  %bf.clear = and i32 %bf.load, 255, !dbg !6701
  %cmp = icmp eq i32 %bf.clear, 74, !dbg !6702
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !6703

land.lhs.true:                                    ; preds = %while.body
  %3 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6704
  %4 = bitcast %struct.c_token* %3 to i32*, !dbg !6705
  %bf.load1 = load i32, i32* %4, align 8, !dbg !6705
  %bf.lshr = lshr i32 %bf.load1, 16, !dbg !6705
  %bf.clear2 = and i32 %bf.lshr, 255, !dbg !6705
  %cmp3 = icmp eq i32 %bf.clear2, 21, !dbg !6706
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !6707

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6708
  %6 = bitcast %struct.c_token* %5 to i32*, !dbg !6709
  %bf.load4 = load i32, i32* %6, align 8, !dbg !6709
  %bf.lshr5 = lshr i32 %bf.load4, 16, !dbg !6709
  %bf.clear6 = and i32 %bf.lshr5, 255, !dbg !6709
  %cmp7 = icmp eq i32 %bf.clear6, 22, !dbg !6710
  br i1 %cmp7, label %if.then, label %lor.lhs.false8, !dbg !6711

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %7 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6712
  %8 = bitcast %struct.c_token* %7 to i32*, !dbg !6713
  %bf.load9 = load i32, i32* %8, align 8, !dbg !6713
  %bf.lshr10 = lshr i32 %bf.load9, 16, !dbg !6713
  %bf.clear11 = and i32 %bf.lshr10, 255, !dbg !6713
  %cmp12 = icmp eq i32 %bf.clear11, 23, !dbg !6714
  br i1 %cmp12, label %if.then, label %lor.lhs.false13, !dbg !6715

lor.lhs.false13:                                  ; preds = %lor.lhs.false8
  %9 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6716
  %10 = bitcast %struct.c_token* %9 to i32*, !dbg !6717
  %bf.load14 = load i32, i32* %10, align 8, !dbg !6717
  %bf.lshr15 = lshr i32 %bf.load14, 16, !dbg !6717
  %bf.clear16 = and i32 %bf.lshr15, 255, !dbg !6717
  %cmp17 = icmp eq i32 %bf.clear16, 24, !dbg !6718
  br i1 %cmp17, label %if.then, label %lor.lhs.false18, !dbg !6719

lor.lhs.false18:                                  ; preds = %lor.lhs.false13
  %11 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6720
  %12 = bitcast %struct.c_token* %11 to i32*, !dbg !6721
  %bf.load19 = load i32, i32* %12, align 8, !dbg !6721
  %bf.lshr20 = lshr i32 %bf.load19, 16, !dbg !6721
  %bf.clear21 = and i32 %bf.lshr20, 255, !dbg !6721
  %cmp22 = icmp eq i32 %bf.clear21, 25, !dbg !6722
  br i1 %cmp22, label %if.then, label %lor.lhs.false23, !dbg !6723

lor.lhs.false23:                                  ; preds = %lor.lhs.false18
  %13 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6724
  %14 = bitcast %struct.c_token* %13 to i32*, !dbg !6725
  %bf.load24 = load i32, i32* %14, align 8, !dbg !6725
  %bf.lshr25 = lshr i32 %bf.load24, 16, !dbg !6725
  %bf.clear26 = and i32 %bf.lshr25, 255, !dbg !6725
  %cmp27 = icmp eq i32 %bf.clear26, 26, !dbg !6726
  br i1 %cmp27, label %if.then, label %if.else, !dbg !6727

if.then:                                          ; preds = %lor.lhs.false23, %lor.lhs.false18, %lor.lhs.false13, %lor.lhs.false8, %lor.lhs.false, %land.lhs.true
  %15 = load %union.tree_node*, %union.tree_node** %quals, align 8, !dbg !6728
  %16 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6730
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %16, i32 0, i32 1, !dbg !6730
  %17 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6730
  %call28 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* null, %union.tree_node* %17), !dbg !6730
  %call29 = call %union.tree_node* @chainon(%union.tree_node* %15, %union.tree_node* %call28), !dbg !6731
  store %union.tree_node* %call29, %union.tree_node** %quals, align 8, !dbg !6732
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6733
  call void @c_parser_consume_token(%struct.c_parser* %18), !dbg !6734
  br label %if.end, !dbg !6735

if.else:                                          ; preds = %lor.lhs.false23, %while.body
  br label %while.end, !dbg !6736

if.end:                                           ; preds = %if.then
  br label %while.body, !dbg !6693, !llvm.loop !6737

while.end:                                        ; preds = %if.else
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6739
  %call30 = call zeroext i8 @c_parser_next_token_starts_typename(%struct.c_parser* %19), !dbg !6741
  %tobool = icmp ne i8 %call30, 0, !dbg !6741
  br i1 %tobool, label %if.then31, label %if.end33, !dbg !6742

if.then31:                                        ; preds = %while.end
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6743
  %call32 = call %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %20), !dbg !6744
  store %struct.c_type_name* %call32, %struct.c_type_name** %type_name, align 8, !dbg !6745
  br label %if.end33, !dbg !6746

if.end33:                                         ; preds = %if.then31, %while.end
  %21 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !6747
  %tobool34 = icmp ne %struct.c_type_name* %21, null, !dbg !6747
  br i1 %tobool34, label %if.then35, label %if.end37, !dbg !6749

if.then35:                                        ; preds = %if.end33
  %22 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !6750
  %call36 = call %union.tree_node* @groktypename(%struct.c_type_name* %22, %union.tree_node** null, i8* null), !dbg !6751
  store %union.tree_node* %call36, %union.tree_node** %type, align 8, !dbg !6752
  br label %if.end37, !dbg !6753

if.end37:                                         ; preds = %if.then35, %if.end33
  %23 = load %union.tree_node*, %union.tree_node** %quals, align 8, !dbg !6754
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6754
  %call38 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* %23, %union.tree_node* %24), !dbg !6754
  ret %union.tree_node* %call38, !dbg !6755
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_objc_selector(%struct.c_parser* %parser) #0 !dbg !6756 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %token = alloca %struct.c_token*, align 8
  %value = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6757, metadata !DIExpression()), !dbg !6758
  call void @llvm.dbg.declare(metadata %struct.c_token** %token, metadata !6759, metadata !DIExpression()), !dbg !6760
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6761
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !6762
  store %struct.c_token* %call, %struct.c_token** %token, align 8, !dbg !6760
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !6763, metadata !DIExpression()), !dbg !6764
  %1 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6765
  %value1 = getelementptr inbounds %struct.c_token, %struct.c_token* %1, i32 0, i32 1, !dbg !6766
  %2 = load %union.tree_node*, %union.tree_node** %value1, align 8, !dbg !6766
  store %union.tree_node* %2, %union.tree_node** %value, align 8, !dbg !6764
  %3 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6767
  %4 = bitcast %struct.c_token* %3 to i32*, !dbg !6769
  %bf.load = load i32, i32* %4, align 8, !dbg !6769
  %bf.clear = and i32 %bf.load, 255, !dbg !6769
  %cmp = icmp eq i32 %bf.clear, 53, !dbg !6770
  br i1 %cmp, label %if.then, label %if.end, !dbg !6771

if.then:                                          ; preds = %entry
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6772
  call void @c_parser_consume_token(%struct.c_parser* %5), !dbg !6774
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6775
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !6776
  br label %return, !dbg !6776

if.end:                                           ; preds = %entry
  %7 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6777
  %8 = bitcast %struct.c_token* %7 to i32*, !dbg !6779
  %bf.load2 = load i32, i32* %8, align 8, !dbg !6779
  %bf.clear3 = and i32 %bf.load2, 255, !dbg !6779
  %cmp4 = icmp ne i32 %bf.clear3, 74, !dbg !6780
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !6781

if.then5:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6782
  br label %return, !dbg !6782

if.end6:                                          ; preds = %if.end
  %9 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6783
  %10 = bitcast %struct.c_token* %9 to i32*, !dbg !6784
  %bf.load7 = load i32, i32* %10, align 8, !dbg !6784
  %bf.lshr = lshr i32 %bf.load7, 16, !dbg !6784
  %bf.clear8 = and i32 %bf.lshr, 255, !dbg !6784
  switch i32 %bf.clear8, label %sw.default [
    i32 33, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 36, label %sw.bb
    i32 37, label %sw.bb
    i32 38, label %sw.bb
    i32 39, label %sw.bb
    i32 40, label %sw.bb
    i32 41, label %sw.bb
    i32 42, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 47, label %sw.bb
    i32 49, label %sw.bb
    i32 48, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 7, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 13, label %sw.bb
    i32 21, label %sw.bb
    i32 22, label %sw.bb
    i32 23, label %sw.bb
    i32 24, label %sw.bb
    i32 25, label %sw.bb
    i32 26, label %sw.bb
    i32 28, label %sw.bb
    i32 29, label %sw.bb
    i32 30, label %sw.bb
    i32 31, label %sw.bb
    i32 32, label %sw.bb
    i32 69, label %sw.bb
  ], !dbg !6785

sw.bb:                                            ; preds = %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6, %if.end6
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6786
  call void @c_parser_consume_token(%struct.c_parser* %11), !dbg !6788
  %12 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6789
  store %union.tree_node* %12, %union.tree_node** %retval, align 8, !dbg !6790
  br label %return, !dbg !6790

sw.default:                                       ; preds = %if.end6
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6791
  br label %return, !dbg !6791

return:                                           ; preds = %sw.default, %sw.bb, %if.then5, %if.then
  %13 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6792
  ret %union.tree_node* %13, !dbg !6792
}

declare dso_local %union.tree_node* @objc_build_keyword_decl(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @make_node_stat(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.c_parm* @c_parser_parameter_declaration(%struct.c_parser* %parser, %union.tree_node* %attrs) #0 !dbg !6793 {
entry:
  %retval = alloca %struct.c_parm*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %attrs.addr = alloca %union.tree_node*, align 8
  %specs = alloca %struct.c_declspecs*, align 8
  %declarator = alloca %struct.c_declarator*, align 8
  %prefix_attrs = alloca %union.tree_node*, align 8
  %postfix_attrs = alloca %union.tree_node*, align 8
  %dummy = alloca i8, align 1
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6796, metadata !DIExpression()), !dbg !6797
  store %union.tree_node* %attrs, %union.tree_node** %attrs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs.addr, metadata !6798, metadata !DIExpression()), !dbg !6799
  call void @llvm.dbg.declare(metadata %struct.c_declspecs** %specs, metadata !6800, metadata !DIExpression()), !dbg !6801
  call void @llvm.dbg.declare(metadata %struct.c_declarator** %declarator, metadata !6802, metadata !DIExpression()), !dbg !6803
  call void @llvm.dbg.declare(metadata %union.tree_node** %prefix_attrs, metadata !6804, metadata !DIExpression()), !dbg !6805
  call void @llvm.dbg.declare(metadata %union.tree_node** %postfix_attrs, metadata !6806, metadata !DIExpression()), !dbg !6807
  store %union.tree_node* null, %union.tree_node** %postfix_attrs, align 8, !dbg !6807
  call void @llvm.dbg.declare(metadata i8* %dummy, metadata !6808, metadata !DIExpression()), !dbg !6809
  store i8 0, i8* %dummy, align 1, !dbg !6809
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6810
  %call = call zeroext i8 @c_parser_next_token_starts_declspecs(%struct.c_parser* %0), !dbg !6812
  %tobool = icmp ne i8 %call, 0, !dbg !6812
  br i1 %tobool, label %if.end, label %if.then, !dbg !6813

if.then:                                          ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6814
  call void @c_parser_error(%struct.c_parser* %1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.67, i64 0, i64 0)), !dbg !6816
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6817
  call void @c_parser_skip_to_end_of_parameter(%struct.c_parser* %2), !dbg !6818
  store %struct.c_parm* null, %struct.c_parm** %retval, align 8, !dbg !6819
  br label %return, !dbg !6819

if.end:                                           ; preds = %entry
  %call1 = call %struct.c_declspecs* @build_null_declspecs(), !dbg !6820
  store %struct.c_declspecs* %call1, %struct.c_declspecs** %specs, align 8, !dbg !6821
  %3 = load %union.tree_node*, %union.tree_node** %attrs.addr, align 8, !dbg !6822
  %tobool2 = icmp ne %union.tree_node* %3, null, !dbg !6822
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !6824

if.then3:                                         ; preds = %if.end
  %4 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6825
  %5 = load %union.tree_node*, %union.tree_node** %attrs.addr, align 8, !dbg !6827
  %call4 = call %struct.c_declspecs* @declspecs_add_attrs(%struct.c_declspecs* %4, %union.tree_node* %5), !dbg !6828
  store %union.tree_node* null, %union.tree_node** %attrs.addr, align 8, !dbg !6829
  br label %if.end5, !dbg !6830

if.end5:                                          ; preds = %if.then3, %if.end
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6831
  %7 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6832
  call void @c_parser_declspecs(%struct.c_parser* %6, %struct.c_declspecs* %7, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1), !dbg !6833
  %8 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6834
  %call6 = call %struct.c_declspecs* @finish_declspecs(%struct.c_declspecs* %8), !dbg !6835
  call void @pending_xref_error(), !dbg !6836
  %9 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6837
  %attrs7 = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %9, i32 0, i32 3, !dbg !6838
  %10 = load %union.tree_node*, %union.tree_node** %attrs7, align 8, !dbg !6838
  store %union.tree_node* %10, %union.tree_node** %prefix_attrs, align 8, !dbg !6839
  %11 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6840
  %attrs8 = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %11, i32 0, i32 3, !dbg !6841
  store %union.tree_node* null, %union.tree_node** %attrs8, align 8, !dbg !6842
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6843
  %13 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6844
  %type_seen_p = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %13, i32 0, i32 6, !dbg !6845
  %bf.load = load i8, i8* %type_seen_p, align 8, !dbg !6845
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !6845
  %bf.clear = and i8 %bf.lshr, 1, !dbg !6845
  %bf.cast = zext i8 %bf.clear to i32, !dbg !6845
  %conv = trunc i32 %bf.cast to i8, !dbg !6844
  %call9 = call %struct.c_declarator* @c_parser_declarator(%struct.c_parser* %12, i8 zeroext %conv, i32 2, i8* %dummy), !dbg !6846
  store %struct.c_declarator* %call9, %struct.c_declarator** %declarator, align 8, !dbg !6847
  %14 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !6848
  %cmp = icmp eq %struct.c_declarator* %14, null, !dbg !6850
  br i1 %cmp, label %if.then11, label %if.end12, !dbg !6851

if.then11:                                        ; preds = %if.end5
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6852
  call void @c_parser_skip_until_found(%struct.c_parser* %15, i32 19, i8* null), !dbg !6854
  store %struct.c_parm* null, %struct.c_parm** %retval, align 8, !dbg !6855
  br label %return, !dbg !6855

if.end12:                                         ; preds = %if.end5
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6856
  %call13 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %16, i32 52), !dbg !6858
  %tobool14 = icmp ne i8 %call13, 0, !dbg !6858
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !6859

if.then15:                                        ; preds = %if.end12
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6860
  %call16 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %17), !dbg !6861
  store %union.tree_node* %call16, %union.tree_node** %postfix_attrs, align 8, !dbg !6862
  br label %if.end17, !dbg !6863

if.end17:                                         ; preds = %if.then15, %if.end12
  %18 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6864
  %19 = load %union.tree_node*, %union.tree_node** %postfix_attrs, align 8, !dbg !6865
  %20 = load %union.tree_node*, %union.tree_node** %prefix_attrs, align 8, !dbg !6866
  %call18 = call %union.tree_node* @chainon(%union.tree_node* %19, %union.tree_node* %20), !dbg !6867
  %21 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !6868
  %call19 = call %struct.c_parm* @build_c_parm(%struct.c_declspecs* %18, %union.tree_node* %call18, %struct.c_declarator* %21), !dbg !6869
  store %struct.c_parm* %call19, %struct.c_parm** %retval, align 8, !dbg !6870
  br label %return, !dbg !6870

return:                                           ; preds = %if.end17, %if.then11, %if.then
  %22 = load %struct.c_parm*, %struct.c_parm** %retval, align 8, !dbg !6871
  ret %struct.c_parm* %22, !dbg !6871
}

declare dso_local %union.tree_node* @grokparm(%struct.c_parm*) #2

declare dso_local %union.tree_node* @objc_build_method_signature(%union.tree_node*, %union.tree_node*, %union.tree_node*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @c_parser_next_token_starts_typename(%struct.c_parser* %parser) #0 !dbg !6872 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %token = alloca %struct.c_token*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6875, metadata !DIExpression()), !dbg !6876
  call void @llvm.dbg.declare(metadata %struct.c_token** %token, metadata !6877, metadata !DIExpression()), !dbg !6878
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6879
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !6880
  store %struct.c_token* %call, %struct.c_token** %token, align 8, !dbg !6878
  %1 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !6881
  %call1 = call zeroext i8 @c_token_starts_typename(%struct.c_token* %1), !dbg !6882
  ret i8 %call1, !dbg !6883
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %parser) #0 !dbg !6884 {
entry:
  %retval = alloca %struct.c_type_name*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %specs = alloca %struct.c_declspecs*, align 8
  %declarator = alloca %struct.c_declarator*, align 8
  %ret = alloca %struct.c_type_name*, align 8
  %dummy = alloca i8, align 1
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6887, metadata !DIExpression()), !dbg !6888
  call void @llvm.dbg.declare(metadata %struct.c_declspecs** %specs, metadata !6889, metadata !DIExpression()), !dbg !6890
  %call = call %struct.c_declspecs* @build_null_declspecs(), !dbg !6891
  store %struct.c_declspecs* %call, %struct.c_declspecs** %specs, align 8, !dbg !6890
  call void @llvm.dbg.declare(metadata %struct.c_declarator** %declarator, metadata !6892, metadata !DIExpression()), !dbg !6893
  call void @llvm.dbg.declare(metadata %struct.c_type_name** %ret, metadata !6894, metadata !DIExpression()), !dbg !6895
  call void @llvm.dbg.declare(metadata i8* %dummy, metadata !6896, metadata !DIExpression()), !dbg !6897
  store i8 0, i8* %dummy, align 1, !dbg !6897
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6898
  %1 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6899
  call void @c_parser_declspecs(%struct.c_parser* %0, %struct.c_declspecs* %1, i8 zeroext 0, i8 zeroext 1, i8 zeroext 1), !dbg !6900
  %2 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6901
  %declspecs_seen_p = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %2, i32 0, i32 6, !dbg !6903
  %bf.load = load i8, i8* %declspecs_seen_p, align 8, !dbg !6903
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !6903
  %bf.clear = and i8 %bf.lshr, 1, !dbg !6903
  %bf.cast = zext i8 %bf.clear to i32, !dbg !6903
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !6901
  br i1 %tobool, label %if.end, label %if.then, !dbg !6904

if.then:                                          ; preds = %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6905
  call void @c_parser_error(%struct.c_parser* %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.16, i64 0, i64 0)), !dbg !6907
  store %struct.c_type_name* null, %struct.c_type_name** %retval, align 8, !dbg !6908
  br label %return, !dbg !6908

if.end:                                           ; preds = %entry
  call void @pending_xref_error(), !dbg !6909
  %4 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6910
  %call1 = call %struct.c_declspecs* @finish_declspecs(%struct.c_declspecs* %4), !dbg !6911
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6912
  %6 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6913
  %type_seen_p = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %6, i32 0, i32 6, !dbg !6914
  %bf.load2 = load i8, i8* %type_seen_p, align 8, !dbg !6914
  %bf.lshr3 = lshr i8 %bf.load2, 2, !dbg !6914
  %bf.clear4 = and i8 %bf.lshr3, 1, !dbg !6914
  %bf.cast5 = zext i8 %bf.clear4 to i32, !dbg !6914
  %conv = trunc i32 %bf.cast5 to i8, !dbg !6913
  %call6 = call %struct.c_declarator* @c_parser_declarator(%struct.c_parser* %5, i8 zeroext %conv, i32 1, i8* %dummy), !dbg !6915
  store %struct.c_declarator* %call6, %struct.c_declarator** %declarator, align 8, !dbg !6916
  %7 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !6917
  %cmp = icmp eq %struct.c_declarator* %7, null, !dbg !6919
  br i1 %cmp, label %if.then8, label %if.end9, !dbg !6920

if.then8:                                         ; preds = %if.end
  store %struct.c_type_name* null, %struct.c_type_name** %retval, align 8, !dbg !6921
  br label %return, !dbg !6921

if.end9:                                          ; preds = %if.end
  store i64 16, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !6922
  %8 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !6922
  %9 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !6922
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64, !dbg !6922
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64, !dbg !6922
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6922
  %10 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !6922
  %cmp10 = icmp slt i64 %sub.ptr.sub, %10, !dbg !6922
  br i1 %cmp10, label %cond.true, label %cond.false, !dbg !6922

cond.true:                                        ; preds = %if.end9
  %11 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !6922
  %conv12 = trunc i64 %11 to i32, !dbg !6922
  call void @_obstack_newchunk(%struct.obstack* @parser_obstack, i32 %conv12), !dbg !6922
  br label %cond.end, !dbg !6922

cond.false:                                       ; preds = %if.end9
  br label %cond.end, !dbg !6922

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6922
  %12 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !6922
  %13 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !6922
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %12, !dbg !6922
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !6922
  %14 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !6922
  %15 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !6922
  %cmp13 = icmp eq i8* %14, %15, !dbg !6922
  br i1 %cmp13, label %cond.true15, label %cond.false18, !dbg !6922

cond.true15:                                      ; preds = %cond.end
  %bf.load16 = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !6922
  %bf.clear17 = and i8 %bf.load16, -3, !dbg !6922
  %bf.set = or i8 %bf.clear17, 2, !dbg !6922
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !6922
  br label %cond.end19, !dbg !6922

cond.false18:                                     ; preds = %cond.end
  br label %cond.end19, !dbg !6922

cond.end19:                                       ; preds = %cond.false18, %cond.true15
  %cond20 = phi i32 [ 0, %cond.true15 ], [ 0, %cond.false18 ], !dbg !6922
  %16 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !6922
  %sub.ptr.lhs.cast21 = ptrtoint i8* %16 to i64, !dbg !6922
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast21, 0, !dbg !6922
  store i64 %sub.ptr.sub22, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !6922
  %17 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !6922
  %sub.ptr.lhs.cast23 = ptrtoint i8* %17 to i64, !dbg !6922
  %sub.ptr.sub24 = sub i64 %sub.ptr.lhs.cast23, 0, !dbg !6922
  %18 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !6922
  %conv25 = sext i32 %18 to i64, !dbg !6922
  %add = add nsw i64 %sub.ptr.sub24, %conv25, !dbg !6922
  %19 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !6922
  %neg = xor i32 %19, -1, !dbg !6922
  %conv26 = sext i32 %neg to i64, !dbg !6922
  %and = and i64 %add, %conv26, !dbg !6922
  %20 = inttoptr i64 %and to i8*, !dbg !6922
  store i8* %20, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !6922
  %21 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !6922
  %22 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !6922
  %23 = bitcast %struct._obstack_chunk* %22 to i8*, !dbg !6922
  %sub.ptr.lhs.cast27 = ptrtoint i8* %21 to i64, !dbg !6922
  %sub.ptr.rhs.cast28 = ptrtoint i8* %23 to i64, !dbg !6922
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast27, %sub.ptr.rhs.cast28, !dbg !6922
  %24 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !6922
  %25 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !6922
  %26 = bitcast %struct._obstack_chunk* %25 to i8*, !dbg !6922
  %sub.ptr.lhs.cast30 = ptrtoint i8* %24 to i64, !dbg !6922
  %sub.ptr.rhs.cast31 = ptrtoint i8* %26 to i64, !dbg !6922
  %sub.ptr.sub32 = sub i64 %sub.ptr.lhs.cast30, %sub.ptr.rhs.cast31, !dbg !6922
  %cmp33 = icmp sgt i64 %sub.ptr.sub29, %sub.ptr.sub32, !dbg !6922
  br i1 %cmp33, label %cond.true35, label %cond.false36, !dbg !6922

cond.true35:                                      ; preds = %cond.end19
  %27 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !6922
  store i8* %27, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !6922
  br label %cond.end37, !dbg !6922

cond.false36:                                     ; preds = %cond.end19
  br label %cond.end37, !dbg !6922

cond.end37:                                       ; preds = %cond.false36, %cond.true35
  %cond38 = phi i8* [ %27, %cond.true35 ], [ null, %cond.false36 ], !dbg !6922
  %28 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !6922
  store i8* %28, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !6922
  %29 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !6922
  %30 = inttoptr i64 %29 to i8*, !dbg !6922
  %31 = bitcast i8* %30 to %struct.c_type_name*, !dbg !6922
  store %struct.c_type_name* %31, %struct.c_type_name** %ret, align 8, !dbg !6923
  %32 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !6924
  %33 = load %struct.c_type_name*, %struct.c_type_name** %ret, align 8, !dbg !6925
  %specs39 = getelementptr inbounds %struct.c_type_name, %struct.c_type_name* %33, i32 0, i32 0, !dbg !6926
  store %struct.c_declspecs* %32, %struct.c_declspecs** %specs39, align 8, !dbg !6927
  %34 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !6928
  %35 = load %struct.c_type_name*, %struct.c_type_name** %ret, align 8, !dbg !6929
  %declarator40 = getelementptr inbounds %struct.c_type_name, %struct.c_type_name* %35, i32 0, i32 1, !dbg !6930
  store %struct.c_declarator* %34, %struct.c_declarator** %declarator40, align 8, !dbg !6931
  %36 = load %struct.c_type_name*, %struct.c_type_name** %ret, align 8, !dbg !6932
  store %struct.c_type_name* %36, %struct.c_type_name** %retval, align 8, !dbg !6933
  br label %return, !dbg !6933

return:                                           ; preds = %cond.end37, %if.then8, %if.then
  %37 = load %struct.c_type_name*, %struct.c_type_name** %retval, align 8, !dbg !6934
  ret %struct.c_type_name* %37, !dbg !6934
}

declare dso_local %union.tree_node* @groktypename(%struct.c_type_name*, %union.tree_node**, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @c_token_starts_typename(%struct.c_token* %token) #0 !dbg !6935 {
entry:
  %retval = alloca i8, align 1
  %token.addr = alloca %struct.c_token*, align 8
  store %struct.c_token* %token, %struct.c_token** %token.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_token** %token.addr, metadata !6938, metadata !DIExpression()), !dbg !6939
  %0 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !6940
  %1 = bitcast %struct.c_token* %0 to i32*, !dbg !6941
  %bf.load = load i32, i32* %1, align 8, !dbg !6941
  %bf.clear = and i32 %bf.load, 255, !dbg !6941
  switch i32 %bf.clear, label %sw.default16 [
    i32 53, label %sw.bb
    i32 74, label %sw.bb7
    i32 3, label %sw.bb13
  ], !dbg !6942

sw.bb:                                            ; preds = %entry
  %2 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !6943
  %3 = bitcast %struct.c_token* %2 to i32*, !dbg !6945
  %bf.load1 = load i32, i32* %3, align 8, !dbg !6945
  %bf.lshr = lshr i32 %bf.load1, 8, !dbg !6945
  %bf.clear2 = and i32 %bf.lshr, 255, !dbg !6945
  switch i32 %bf.clear2, label %sw.default [
    i32 0, label %sw.bb3
    i32 3, label %sw.bb4
    i32 1, label %sw.bb5
    i32 2, label %sw.bb6
  ], !dbg !6946

sw.bb3:                                           ; preds = %sw.bb
  store i8 0, i8* %retval, align 1, !dbg !6947
  br label %return, !dbg !6947

sw.bb4:                                           ; preds = %sw.bb
  store i8 1, i8* %retval, align 1, !dbg !6949
  br label %return, !dbg !6949

sw.bb5:                                           ; preds = %sw.bb
  store i8 1, i8* %retval, align 1, !dbg !6950
  br label %return, !dbg !6950

sw.bb6:                                           ; preds = %sw.bb
  %4 = load i32, i32* @c_language, align 4, !dbg !6951
  %and = and i32 %4, 1, !dbg !6951
  %cmp = icmp ne i32 %and, 0, !dbg !6951
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6951

cond.true:                                        ; preds = %sw.bb6
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 373, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6951
  br label %cond.end, !dbg !6951

cond.false:                                       ; preds = %sw.bb6
  br label %cond.end, !dbg !6951

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6951
  store i8 1, i8* %retval, align 1, !dbg !6952
  br label %return, !dbg !6952

sw.default:                                       ; preds = %sw.bb
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 376, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6953
  br label %sw.epilog, !dbg !6954

sw.epilog:                                        ; preds = %sw.default
  br label %sw.bb7, !dbg !6954

sw.bb7:                                           ; preds = %entry, %sw.epilog
  %5 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !6955
  %6 = bitcast %struct.c_token* %5 to i32*, !dbg !6956
  %bf.load8 = load i32, i32* %6, align 8, !dbg !6956
  %bf.lshr9 = lshr i32 %bf.load8, 16, !dbg !6956
  %bf.clear10 = and i32 %bf.lshr9, 255, !dbg !6956
  switch i32 %bf.clear10, label %sw.default12 [
    i32 1, label %sw.bb11
    i32 2, label %sw.bb11
    i32 7, label %sw.bb11
    i32 10, label %sw.bb11
    i32 13, label %sw.bb11
    i32 28, label %sw.bb11
    i32 29, label %sw.bb11
    i32 30, label %sw.bb11
    i32 31, label %sw.bb11
    i32 32, label %sw.bb11
    i32 60, label %sw.bb11
    i32 61, label %sw.bb11
    i32 62, label %sw.bb11
    i32 69, label %sw.bb11
    i32 33, label %sw.bb11
    i32 34, label %sw.bb11
    i32 35, label %sw.bb11
    i32 50, label %sw.bb11
    i32 3, label %sw.bb11
    i32 9, label %sw.bb11
    i32 12, label %sw.bb11
    i32 52, label %sw.bb11
    i32 63, label %sw.bb11
    i32 64, label %sw.bb11
    i32 15, label %sw.bb11
  ], !dbg !6957

sw.bb11:                                          ; preds = %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7
  store i8 1, i8* %retval, align 1, !dbg !6958
  br label %return, !dbg !6958

sw.default12:                                     ; preds = %sw.bb7
  store i8 0, i8* %retval, align 1, !dbg !6960
  br label %return, !dbg !6960

sw.bb13:                                          ; preds = %entry
  %7 = load i32, i32* @c_language, align 4, !dbg !6961
  %and14 = and i32 %7, 1, !dbg !6961
  %cmp15 = icmp ne i32 %and14, 0, !dbg !6961
  br i1 %cmp15, label %if.then, label %if.end, !dbg !6963

if.then:                                          ; preds = %sw.bb13
  store i8 1, i8* %retval, align 1, !dbg !6964
  br label %return, !dbg !6964

if.end:                                           ; preds = %sw.bb13
  store i8 0, i8* %retval, align 1, !dbg !6965
  br label %return, !dbg !6965

sw.default16:                                     ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6966
  br label %return, !dbg !6966

return:                                           ; preds = %sw.default16, %if.end, %if.then, %sw.default12, %sw.bb11, %cond.end, %sw.bb5, %sw.bb4, %sw.bb3
  %8 = load i8, i8* %retval, align 1, !dbg !6967
  ret i8 %8, !dbg !6967
}

declare dso_local %struct.c_declspecs* @build_null_declspecs() #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_declspecs(%struct.c_parser* %parser, %struct.c_declspecs* %specs, i8 zeroext %scspec_ok, i8 zeroext %typespec_ok, i8 zeroext %start_attr_ok) #0 !dbg !6968 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %specs.addr = alloca %struct.c_declspecs*, align 8
  %scspec_ok.addr = alloca i8, align 1
  %typespec_ok.addr = alloca i8, align 1
  %start_attr_ok.addr = alloca i8, align 1
  %attrs_ok = alloca i8, align 1
  %seen_type = alloca i8, align 1
  %t = alloca %struct.c_typespec, align 8
  %attrs = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %value = alloca %union.tree_node*, align 8
  %kind = alloca i32, align 4
  %as = alloca i8, align 1
  %proto = alloca %union.tree_node*, align 8
  %proto70 = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.c_typespec, align 8
  %tmp135 = alloca %struct.c_typespec, align 8
  %tmp146 = alloca %struct.c_typespec, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !6971, metadata !DIExpression()), !dbg !6972
  store %struct.c_declspecs* %specs, %struct.c_declspecs** %specs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_declspecs** %specs.addr, metadata !6973, metadata !DIExpression()), !dbg !6974
  store i8 %scspec_ok, i8* %scspec_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %scspec_ok.addr, metadata !6975, metadata !DIExpression()), !dbg !6976
  store i8 %typespec_ok, i8* %typespec_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %typespec_ok.addr, metadata !6977, metadata !DIExpression()), !dbg !6978
  store i8 %start_attr_ok, i8* %start_attr_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %start_attr_ok.addr, metadata !6979, metadata !DIExpression()), !dbg !6980
  call void @llvm.dbg.declare(metadata i8* %attrs_ok, metadata !6981, metadata !DIExpression()), !dbg !6982
  %0 = load i8, i8* %start_attr_ok.addr, align 1, !dbg !6983
  store i8 %0, i8* %attrs_ok, align 1, !dbg !6982
  call void @llvm.dbg.declare(metadata i8* %seen_type, metadata !6984, metadata !DIExpression()), !dbg !6985
  %1 = load %struct.c_declspecs*, %struct.c_declspecs** %specs.addr, align 8, !dbg !6986
  %type_seen_p = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %1, i32 0, i32 6, !dbg !6987
  %bf.load = load i8, i8* %type_seen_p, align 8, !dbg !6987
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !6987
  %bf.clear = and i8 %bf.lshr, 1, !dbg !6987
  %bf.cast = zext i8 %bf.clear to i32, !dbg !6987
  %conv = trunc i32 %bf.cast to i8, !dbg !6986
  store i8 %conv, i8* %seen_type, align 1, !dbg !6985
  br label %while.cond, !dbg !6988

while.cond:                                       ; preds = %sw.epilog, %if.end83, %if.end64, %if.then20, %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6989
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %2, i32 53), !dbg !6990
  %conv1 = zext i8 %call to i32, !dbg !6990
  %tobool = icmp ne i32 %conv1, 0, !dbg !6990
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !6991

lor.lhs.false:                                    ; preds = %while.cond
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6992
  %call2 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %3, i32 74), !dbg !6993
  %conv3 = zext i8 %call2 to i32, !dbg !6993
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !6993
  br i1 %tobool4, label %lor.end, label %lor.rhs, !dbg !6994

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load i32, i32* @c_language, align 4, !dbg !6995
  %and = and i32 %4, 1, !dbg !6995
  %cmp = icmp ne i32 %and, 0, !dbg !6995
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6996

land.rhs:                                         ; preds = %lor.rhs
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !6997
  %call6 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %5, i32 3), !dbg !6998
  %conv7 = zext i8 %call6 to i32, !dbg !6998
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !6996
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %6 = phi i1 [ false, %lor.rhs ], [ %tobool8, %land.rhs ], !dbg !6999
  br label %lor.end, !dbg !6994

lor.end:                                          ; preds = %land.end, %lor.lhs.false, %while.cond
  %7 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %6, %land.end ]
  br i1 %7, label %while.body, label %while.end, !dbg !6988

while.body:                                       ; preds = %lor.end
  call void @llvm.dbg.declare(metadata %struct.c_typespec* %t, metadata !7000, metadata !DIExpression()), !dbg !7008
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs, metadata !7009, metadata !DIExpression()), !dbg !7010
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !7011, metadata !DIExpression()), !dbg !7012
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7013
  %call9 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %8), !dbg !7014
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call9, i32 0, i32 2, !dbg !7015
  %9 = load i32, i32* %location, align 8, !dbg !7015
  store i32 %9, i32* %loc, align 4, !dbg !7012
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7016
  %call10 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %10, i32 53), !dbg !7018
  %tobool11 = icmp ne i8 %call10, 0, !dbg !7018
  br i1 %tobool11, label %if.then, label %if.end66, !dbg !7019

if.then:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !7020, metadata !DIExpression()), !dbg !7022
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7023
  %call12 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %11), !dbg !7024
  %value13 = getelementptr inbounds %struct.c_token, %struct.c_token* %call12, i32 0, i32 1, !dbg !7025
  %12 = load %union.tree_node*, %union.tree_node** %value13, align 8, !dbg !7025
  store %union.tree_node* %12, %union.tree_node** %value, align 8, !dbg !7022
  call void @llvm.dbg.declare(metadata i32* %kind, metadata !7026, metadata !DIExpression()), !dbg !7028
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7029
  %call14 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %13), !dbg !7030
  %14 = bitcast %struct.c_token* %call14 to i32*, !dbg !7031
  %bf.load15 = load i32, i32* %14, align 8, !dbg !7031
  %bf.lshr16 = lshr i32 %bf.load15, 8, !dbg !7031
  %bf.clear17 = and i32 %bf.lshr16, 255, !dbg !7031
  store i32 %bf.clear17, i32* %kind, align 4, !dbg !7028
  %15 = load i32, i32* %kind, align 4, !dbg !7032
  %cmp18 = icmp eq i32 %15, 3, !dbg !7034
  br i1 %cmp18, label %if.then20, label %if.end, !dbg !7035

if.then20:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata i8* %as, metadata !7036, metadata !DIExpression()), !dbg !7038
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7039
  %call21 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %16), !dbg !7040
  %17 = bitcast %struct.c_token* %call21 to i32*, !dbg !7041
  %bf.load22 = load i32, i32* %17, align 8, !dbg !7041
  %bf.lshr23 = lshr i32 %bf.load22, 16, !dbg !7041
  %bf.clear24 = and i32 %bf.lshr23, 255, !dbg !7041
  %sub = sub nsw i32 %bf.clear24, 136, !dbg !7042
  %conv25 = trunc i32 %sub to i8, !dbg !7040
  store i8 %conv25, i8* %as, align 1, !dbg !7038
  %18 = load %struct.c_declspecs*, %struct.c_declspecs** %specs.addr, align 8, !dbg !7043
  %19 = load i8, i8* %as, align 1, !dbg !7044
  %call26 = call %struct.c_declspecs* @declspecs_add_addrspace(%struct.c_declspecs* %18, i8 zeroext %19), !dbg !7045
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7046
  call void @c_parser_consume_token(%struct.c_parser* %20), !dbg !7047
  store i8 1, i8* %attrs_ok, align 1, !dbg !7048
  br label %while.cond, !dbg !7049, !llvm.loop !7050

if.end:                                           ; preds = %if.then
  %21 = load i8, i8* %typespec_ok.addr, align 1, !dbg !7052
  %tobool27 = icmp ne i8 %21, 0, !dbg !7052
  br i1 %tobool27, label %lor.lhs.false28, label %if.then36, !dbg !7054

lor.lhs.false28:                                  ; preds = %if.end
  %22 = load i8, i8* %seen_type, align 1, !dbg !7055
  %conv29 = zext i8 %22 to i32, !dbg !7055
  %tobool30 = icmp ne i32 %conv29, 0, !dbg !7055
  br i1 %tobool30, label %if.then36, label %lor.lhs.false31, !dbg !7056

lor.lhs.false31:                                  ; preds = %lor.lhs.false28
  %23 = load i32, i32* %kind, align 4, !dbg !7057
  %cmp32 = icmp ne i32 %23, 1, !dbg !7058
  br i1 %cmp32, label %land.lhs.true, label %if.end37, !dbg !7059

land.lhs.true:                                    ; preds = %lor.lhs.false31
  %24 = load i32, i32* %kind, align 4, !dbg !7060
  %cmp34 = icmp ne i32 %24, 2, !dbg !7061
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !7062

if.then36:                                        ; preds = %land.lhs.true, %lor.lhs.false28, %if.end
  br label %while.end, !dbg !7063

if.end37:                                         ; preds = %land.lhs.true, %lor.lhs.false31
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7064
  call void @c_parser_consume_token(%struct.c_parser* %25), !dbg !7065
  store i8 1, i8* %seen_type, align 1, !dbg !7066
  store i8 1, i8* %attrs_ok, align 1, !dbg !7067
  %26 = load i32, i32* %kind, align 4, !dbg !7068
  %cmp38 = icmp eq i32 %26, 1, !dbg !7070
  br i1 %cmp38, label %land.lhs.true40, label %if.else, !dbg !7071

land.lhs.true40:                                  ; preds = %if.end37
  %27 = load i32, i32* @c_language, align 4, !dbg !7072
  %and41 = and i32 %27, 1, !dbg !7072
  %cmp42 = icmp ne i32 %and41, 0, !dbg !7072
  br i1 %cmp42, label %lor.lhs.false44, label %if.then48, !dbg !7073

lor.lhs.false44:                                  ; preds = %land.lhs.true40
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7074
  %call45 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %28, i32 3), !dbg !7075
  %conv46 = zext i8 %call45 to i32, !dbg !7075
  %tobool47 = icmp ne i32 %conv46, 0, !dbg !7075
  br i1 %tobool47, label %if.then48, label %if.else, !dbg !7076

if.then48:                                        ; preds = %lor.lhs.false44, %land.lhs.true40
  %kind49 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 0, !dbg !7077
  store i32 4, i32* %kind49, align 8, !dbg !7079
  %29 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7080
  %call50 = call %union.tree_node* @lookup_name(%union.tree_node* %29), !dbg !7081
  %spec = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 1, !dbg !7082
  store %union.tree_node* %call50, %union.tree_node** %spec, align 8, !dbg !7083
  %expr = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 2, !dbg !7084
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !7085
  %expr_const_operands = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 3, !dbg !7086
  store i8 1, i8* %expr_const_operands, align 8, !dbg !7087
  br label %if.end64, !dbg !7088

if.else:                                          ; preds = %lor.lhs.false44, %if.end37
  call void @llvm.dbg.declare(metadata %union.tree_node** %proto, metadata !7089, metadata !DIExpression()), !dbg !7091
  store %union.tree_node* null, %union.tree_node** %proto, align 8, !dbg !7091
  %30 = load i32, i32* @c_language, align 4, !dbg !7092
  %and51 = and i32 %30, 1, !dbg !7092
  %cmp52 = icmp ne i32 %and51, 0, !dbg !7092
  br i1 %cmp52, label %cond.false, label %cond.true, !dbg !7092

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1520, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7092
  br label %cond.end, !dbg !7092

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !7092

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7092
  %kind54 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 0, !dbg !7093
  store i32 5, i32* %kind54, align 8, !dbg !7094
  %31 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7095
  %call55 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %31, i32 3), !dbg !7097
  %tobool56 = icmp ne i8 %call55, 0, !dbg !7097
  br i1 %tobool56, label %if.then57, label %if.end59, !dbg !7098

if.then57:                                        ; preds = %cond.end
  %32 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7099
  %call58 = call %union.tree_node* @c_parser_objc_protocol_refs(%struct.c_parser* %32), !dbg !7100
  store %union.tree_node* %call58, %union.tree_node** %proto, align 8, !dbg !7101
  br label %if.end59, !dbg !7102

if.end59:                                         ; preds = %if.then57, %cond.end
  %33 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7103
  %34 = load %union.tree_node*, %union.tree_node** %proto, align 8, !dbg !7104
  %call60 = call %union.tree_node* @objc_get_protocol_qualified_type(%union.tree_node* %33, %union.tree_node* %34), !dbg !7105
  %spec61 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 1, !dbg !7106
  store %union.tree_node* %call60, %union.tree_node** %spec61, align 8, !dbg !7107
  %expr62 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 2, !dbg !7108
  store %union.tree_node* null, %union.tree_node** %expr62, align 8, !dbg !7109
  %expr_const_operands63 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 3, !dbg !7110
  store i8 1, i8* %expr_const_operands63, align 8, !dbg !7111
  br label %if.end64

if.end64:                                         ; preds = %if.end59, %if.then48
  %35 = load i32, i32* %loc, align 4, !dbg !7112
  %36 = load %struct.c_declspecs*, %struct.c_declspecs** %specs.addr, align 8, !dbg !7113
  %call65 = call %struct.c_declspecs* @declspecs_add_type(i32 %35, %struct.c_declspecs* %36, %struct.c_typespec* byval(%struct.c_typespec) align 8 %t), !dbg !7114
  br label %while.cond, !dbg !7115, !llvm.loop !7050

if.end66:                                         ; preds = %while.body
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7116
  %call67 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %37, i32 3), !dbg !7118
  %tobool68 = icmp ne i8 %call67, 0, !dbg !7118
  br i1 %tobool68, label %if.then69, label %if.end91, !dbg !7119

if.then69:                                        ; preds = %if.end66
  call void @llvm.dbg.declare(metadata %union.tree_node** %proto70, metadata !7120, metadata !DIExpression()), !dbg !7122
  %38 = load i32, i32* @c_language, align 4, !dbg !7123
  %and71 = and i32 %38, 1, !dbg !7123
  %cmp72 = icmp ne i32 %and71, 0, !dbg !7123
  br i1 %cmp72, label %cond.false75, label %cond.true74, !dbg !7123

cond.true74:                                      ; preds = %if.then69
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1536, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7123
  br label %cond.end76, !dbg !7123

cond.false75:                                     ; preds = %if.then69
  br label %cond.end76, !dbg !7123

cond.end76:                                       ; preds = %cond.false75, %cond.true74
  %cond77 = phi i32 [ 0, %cond.true74 ], [ 0, %cond.false75 ], !dbg !7123
  %39 = load i8, i8* %typespec_ok.addr, align 1, !dbg !7124
  %tobool78 = icmp ne i8 %39, 0, !dbg !7124
  br i1 %tobool78, label %lor.lhs.false79, label %if.then82, !dbg !7126

lor.lhs.false79:                                  ; preds = %cond.end76
  %40 = load i8, i8* %seen_type, align 1, !dbg !7127
  %conv80 = zext i8 %40 to i32, !dbg !7127
  %tobool81 = icmp ne i32 %conv80, 0, !dbg !7127
  br i1 %tobool81, label %if.then82, label %if.end83, !dbg !7128

if.then82:                                        ; preds = %lor.lhs.false79, %cond.end76
  br label %while.end, !dbg !7129

if.end83:                                         ; preds = %lor.lhs.false79
  %41 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7130
  %call84 = call %union.tree_node* @c_parser_objc_protocol_refs(%struct.c_parser* %41), !dbg !7131
  store %union.tree_node* %call84, %union.tree_node** %proto70, align 8, !dbg !7132
  %kind85 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 0, !dbg !7133
  store i32 5, i32* %kind85, align 8, !dbg !7134
  %42 = load %union.tree_node*, %union.tree_node** %proto70, align 8, !dbg !7135
  %call86 = call %union.tree_node* @objc_get_protocol_qualified_type(%union.tree_node* null, %union.tree_node* %42), !dbg !7136
  %spec87 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 1, !dbg !7137
  store %union.tree_node* %call86, %union.tree_node** %spec87, align 8, !dbg !7138
  %expr88 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 2, !dbg !7139
  store %union.tree_node* null, %union.tree_node** %expr88, align 8, !dbg !7140
  %expr_const_operands89 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 3, !dbg !7141
  store i8 1, i8* %expr_const_operands89, align 8, !dbg !7142
  %43 = load i32, i32* %loc, align 4, !dbg !7143
  %44 = load %struct.c_declspecs*, %struct.c_declspecs** %specs.addr, align 8, !dbg !7144
  %call90 = call %struct.c_declspecs* @declspecs_add_type(i32 %43, %struct.c_declspecs* %44, %struct.c_typespec* byval(%struct.c_typespec) align 8 %t), !dbg !7145
  br label %while.cond, !dbg !7146, !llvm.loop !7050

if.end91:                                         ; preds = %if.end66
  %45 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7147
  %call92 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %45, i32 74), !dbg !7147
  %tobool93 = icmp ne i8 %call92, 0, !dbg !7147
  br i1 %tobool93, label %cond.false95, label %cond.true94, !dbg !7147

cond.true94:                                      ; preds = %if.end91
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1547, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7147
  br label %cond.end96, !dbg !7147

cond.false95:                                     ; preds = %if.end91
  br label %cond.end96, !dbg !7147

cond.end96:                                       ; preds = %cond.false95, %cond.true94
  %cond97 = phi i32 [ 0, %cond.true94 ], [ 0, %cond.false95 ], !dbg !7147
  %46 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7148
  %call98 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %46), !dbg !7149
  %47 = bitcast %struct.c_token* %call98 to i32*, !dbg !7150
  %bf.load99 = load i32, i32* %47, align 8, !dbg !7150
  %bf.lshr100 = lshr i32 %bf.load99, 16, !dbg !7150
  %bf.clear101 = and i32 %bf.lshr100, 255, !dbg !7150
  switch i32 %bf.clear101, label %sw.default [
    i32 0, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 8, label %sw.bb
    i32 11, label %sw.bb
    i32 14, label %sw.bb
    i32 1, label %sw.bb108
    i32 2, label %sw.bb108
    i32 7, label %sw.bb108
    i32 10, label %sw.bb108
    i32 13, label %sw.bb108
    i32 28, label %sw.bb108
    i32 29, label %sw.bb108
    i32 30, label %sw.bb108
    i32 31, label %sw.bb108
    i32 32, label %sw.bb108
    i32 60, label %sw.bb108
    i32 61, label %sw.bb108
    i32 62, label %sw.bb108
    i32 69, label %sw.bb108
    i32 63, label %sw.bb108
    i32 64, label %sw.bb108
    i32 15, label %sw.bb108
    i32 33, label %sw.bb126
    i32 34, label %sw.bb131
    i32 35, label %sw.bb131
    i32 50, label %sw.bb139
    i32 3, label %sw.bb148
    i32 9, label %sw.bb148
    i32 12, label %sw.bb148
    i32 52, label %sw.bb152
  ], !dbg !7151

sw.bb:                                            ; preds = %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96
  %48 = load i8, i8* %scspec_ok.addr, align 1, !dbg !7152
  %tobool102 = icmp ne i8 %48, 0, !dbg !7152
  br i1 %tobool102, label %if.end104, label %if.then103, !dbg !7155

if.then103:                                       ; preds = %sw.bb
  br label %out, !dbg !7156

if.end104:                                        ; preds = %sw.bb
  store i8 1, i8* %attrs_ok, align 1, !dbg !7157
  %49 = load %struct.c_declspecs*, %struct.c_declspecs** %specs.addr, align 8, !dbg !7158
  %50 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7159
  %call105 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %50), !dbg !7160
  %value106 = getelementptr inbounds %struct.c_token, %struct.c_token* %call105, i32 0, i32 1, !dbg !7161
  %51 = load %union.tree_node*, %union.tree_node** %value106, align 8, !dbg !7161
  %call107 = call %struct.c_declspecs* @declspecs_add_scspec(%struct.c_declspecs* %49, %union.tree_node* %51), !dbg !7162
  %52 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7163
  call void @c_parser_consume_token(%struct.c_parser* %52), !dbg !7164
  br label %sw.epilog, !dbg !7165

sw.bb108:                                         ; preds = %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96, %cond.end96
  %53 = load i8, i8* %typespec_ok.addr, align 1, !dbg !7166
  %tobool109 = icmp ne i8 %53, 0, !dbg !7166
  br i1 %tobool109, label %if.end111, label %if.then110, !dbg !7168

if.then110:                                       ; preds = %sw.bb108
  br label %out, !dbg !7169

if.end111:                                        ; preds = %sw.bb108
  store i8 1, i8* %attrs_ok, align 1, !dbg !7170
  store i8 1, i8* %seen_type, align 1, !dbg !7171
  %54 = load i32, i32* @c_language, align 4, !dbg !7172
  %and112 = and i32 %54, 1, !dbg !7172
  %cmp113 = icmp ne i32 %and112, 0, !dbg !7172
  br i1 %cmp113, label %if.then115, label %if.end118, !dbg !7174

if.then115:                                       ; preds = %if.end111
  %55 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7175
  %objc_need_raw_identifier = getelementptr inbounds %struct.c_parser, %struct.c_parser* %55, i32 0, i32 2, !dbg !7176
  %bf.load116 = load i8, i8* %objc_need_raw_identifier, align 2, !dbg !7177
  %bf.clear117 = and i8 %bf.load116, -33, !dbg !7177
  %bf.set = or i8 %bf.clear117, 32, !dbg !7177
  store i8 %bf.set, i8* %objc_need_raw_identifier, align 2, !dbg !7177
  br label %if.end118, !dbg !7175

if.end118:                                        ; preds = %if.then115, %if.end111
  %kind119 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 0, !dbg !7178
  store i32 0, i32* %kind119, align 8, !dbg !7179
  %56 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7180
  %call120 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %56), !dbg !7181
  %value121 = getelementptr inbounds %struct.c_token, %struct.c_token* %call120, i32 0, i32 1, !dbg !7182
  %57 = load %union.tree_node*, %union.tree_node** %value121, align 8, !dbg !7182
  %spec122 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 1, !dbg !7183
  store %union.tree_node* %57, %union.tree_node** %spec122, align 8, !dbg !7184
  %expr123 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 2, !dbg !7185
  store %union.tree_node* null, %union.tree_node** %expr123, align 8, !dbg !7186
  %expr_const_operands124 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 3, !dbg !7187
  store i8 1, i8* %expr_const_operands124, align 8, !dbg !7188
  %58 = load i32, i32* %loc, align 4, !dbg !7189
  %59 = load %struct.c_declspecs*, %struct.c_declspecs** %specs.addr, align 8, !dbg !7190
  %call125 = call %struct.c_declspecs* @declspecs_add_type(i32 %58, %struct.c_declspecs* %59, %struct.c_typespec* byval(%struct.c_typespec) align 8 %t), !dbg !7191
  %60 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7192
  call void @c_parser_consume_token(%struct.c_parser* %60), !dbg !7193
  br label %sw.epilog, !dbg !7194

sw.bb126:                                         ; preds = %cond.end96
  %61 = load i8, i8* %typespec_ok.addr, align 1, !dbg !7195
  %tobool127 = icmp ne i8 %61, 0, !dbg !7195
  br i1 %tobool127, label %if.end129, label %if.then128, !dbg !7197

if.then128:                                       ; preds = %sw.bb126
  br label %out, !dbg !7198

if.end129:                                        ; preds = %sw.bb126
  store i8 1, i8* %attrs_ok, align 1, !dbg !7199
  store i8 1, i8* %seen_type, align 1, !dbg !7200
  %62 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7201
  call void @c_parser_enum_specifier(%struct.c_typespec* sret %tmp, %struct.c_parser* %62), !dbg !7202
  %63 = bitcast %struct.c_typespec* %t to i8*, !dbg !7202
  %64 = bitcast %struct.c_typespec* %tmp to i8*, !dbg !7202
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 32, i1 false), !dbg !7202
  %65 = load i32, i32* %loc, align 4, !dbg !7203
  %66 = load %struct.c_declspecs*, %struct.c_declspecs** %specs.addr, align 8, !dbg !7204
  %call130 = call %struct.c_declspecs* @declspecs_add_type(i32 %65, %struct.c_declspecs* %66, %struct.c_typespec* byval(%struct.c_typespec) align 8 %t), !dbg !7205
  br label %sw.epilog, !dbg !7206

sw.bb131:                                         ; preds = %cond.end96, %cond.end96
  %67 = load i8, i8* %typespec_ok.addr, align 1, !dbg !7207
  %tobool132 = icmp ne i8 %67, 0, !dbg !7207
  br i1 %tobool132, label %if.end134, label %if.then133, !dbg !7209

if.then133:                                       ; preds = %sw.bb131
  br label %out, !dbg !7210

if.end134:                                        ; preds = %sw.bb131
  store i8 1, i8* %attrs_ok, align 1, !dbg !7211
  store i8 1, i8* %seen_type, align 1, !dbg !7212
  %68 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7213
  call void @c_parser_struct_or_union_specifier(%struct.c_typespec* sret %tmp135, %struct.c_parser* %68), !dbg !7214
  %69 = bitcast %struct.c_typespec* %t to i8*, !dbg !7214
  %70 = bitcast %struct.c_typespec* %tmp135 to i8*, !dbg !7214
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 32, i1 false), !dbg !7214
  %spec136 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %t, i32 0, i32 1, !dbg !7215
  %71 = load %union.tree_node*, %union.tree_node** %spec136, align 8, !dbg !7215
  %72 = bitcast %union.tree_node* %71 to i8*, !dbg !7216
  %call137 = call i32 @invoke_plugin_callbacks(i32 1, i8* %72), !dbg !7217
  %73 = load i32, i32* %loc, align 4, !dbg !7218
  %74 = load %struct.c_declspecs*, %struct.c_declspecs** %specs.addr, align 8, !dbg !7219
  %call138 = call %struct.c_declspecs* @declspecs_add_type(i32 %73, %struct.c_declspecs* %74, %struct.c_typespec* byval(%struct.c_typespec) align 8 %t), !dbg !7220
  br label %sw.epilog, !dbg !7221

sw.bb139:                                         ; preds = %cond.end96
  %75 = load i8, i8* %typespec_ok.addr, align 1, !dbg !7222
  %tobool140 = icmp ne i8 %75, 0, !dbg !7222
  br i1 %tobool140, label %lor.lhs.false141, label %if.then144, !dbg !7224

lor.lhs.false141:                                 ; preds = %sw.bb139
  %76 = load i8, i8* %seen_type, align 1, !dbg !7225
  %conv142 = zext i8 %76 to i32, !dbg !7225
  %tobool143 = icmp ne i32 %conv142, 0, !dbg !7225
  br i1 %tobool143, label %if.then144, label %if.end145, !dbg !7226

if.then144:                                       ; preds = %lor.lhs.false141, %sw.bb139
  br label %out, !dbg !7227

if.end145:                                        ; preds = %lor.lhs.false141
  store i8 1, i8* %attrs_ok, align 1, !dbg !7228
  store i8 1, i8* %seen_type, align 1, !dbg !7229
  %77 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7230
  call void @c_parser_typeof_specifier(%struct.c_typespec* sret %tmp146, %struct.c_parser* %77), !dbg !7231
  %78 = bitcast %struct.c_typespec* %t to i8*, !dbg !7231
  %79 = bitcast %struct.c_typespec* %tmp146 to i8*, !dbg !7231
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 32, i1 false), !dbg !7231
  %80 = load i32, i32* %loc, align 4, !dbg !7232
  %81 = load %struct.c_declspecs*, %struct.c_declspecs** %specs.addr, align 8, !dbg !7233
  %call147 = call %struct.c_declspecs* @declspecs_add_type(i32 %80, %struct.c_declspecs* %81, %struct.c_typespec* byval(%struct.c_typespec) align 8 %t), !dbg !7234
  br label %sw.epilog, !dbg !7235

sw.bb148:                                         ; preds = %cond.end96, %cond.end96, %cond.end96
  store i8 1, i8* %attrs_ok, align 1, !dbg !7236
  %82 = load %struct.c_declspecs*, %struct.c_declspecs** %specs.addr, align 8, !dbg !7237
  %83 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7238
  %call149 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %83), !dbg !7239
  %value150 = getelementptr inbounds %struct.c_token, %struct.c_token* %call149, i32 0, i32 1, !dbg !7240
  %84 = load %union.tree_node*, %union.tree_node** %value150, align 8, !dbg !7240
  %call151 = call %struct.c_declspecs* @declspecs_add_qual(%struct.c_declspecs* %82, %union.tree_node* %84), !dbg !7241
  %85 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7242
  call void @c_parser_consume_token(%struct.c_parser* %85), !dbg !7243
  br label %sw.epilog, !dbg !7244

sw.bb152:                                         ; preds = %cond.end96
  %86 = load i8, i8* %attrs_ok, align 1, !dbg !7245
  %tobool153 = icmp ne i8 %86, 0, !dbg !7245
  br i1 %tobool153, label %if.end155, label %if.then154, !dbg !7247

if.then154:                                       ; preds = %sw.bb152
  br label %out, !dbg !7248

if.end155:                                        ; preds = %sw.bb152
  %87 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7249
  %call156 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %87), !dbg !7250
  store %union.tree_node* %call156, %union.tree_node** %attrs, align 8, !dbg !7251
  %88 = load %struct.c_declspecs*, %struct.c_declspecs** %specs.addr, align 8, !dbg !7252
  %89 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !7253
  %call157 = call %struct.c_declspecs* @declspecs_add_attrs(%struct.c_declspecs* %88, %union.tree_node* %89), !dbg !7254
  br label %sw.epilog, !dbg !7255

sw.default:                                       ; preds = %cond.end96
  br label %out, !dbg !7256

sw.epilog:                                        ; preds = %if.end155, %sw.bb148, %if.end145, %if.end134, %if.end129, %if.end118, %if.end104
  br label %while.cond, !dbg !6988, !llvm.loop !7050

while.end:                                        ; preds = %if.then82, %if.then36, %lor.end
  br label %out, !dbg !6988

out:                                              ; preds = %while.end, %sw.default, %if.then154, %if.then144, %if.then133, %if.then128, %if.then110, %if.then103
  call void @llvm.dbg.label(metadata !7257), !dbg !7258
  ret void, !dbg !7259
}

declare dso_local void @pending_xref_error() #2

declare dso_local %struct.c_declspecs* @finish_declspecs(%struct.c_declspecs*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.c_declarator* @c_parser_declarator(%struct.c_parser* %parser, i8 zeroext %type_seen_p, i32 %kind, i8* %seen_id) #0 !dbg !7260 {
entry:
  %retval = alloca %struct.c_declarator*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %type_seen_p.addr = alloca i8, align 1
  %kind.addr = alloca i32, align 4
  %seen_id.addr = alloca i8*, align 8
  %quals_attrs = alloca %struct.c_declspecs*, align 8
  %inner = alloca %struct.c_declarator*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !7265, metadata !DIExpression()), !dbg !7266
  store i8 %type_seen_p, i8* %type_seen_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %type_seen_p.addr, metadata !7267, metadata !DIExpression()), !dbg !7268
  store i32 %kind, i32* %kind.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kind.addr, metadata !7269, metadata !DIExpression()), !dbg !7270
  store i8* %seen_id, i8** %seen_id.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %seen_id.addr, metadata !7271, metadata !DIExpression()), !dbg !7272
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7273
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 6), !dbg !7275
  %tobool = icmp ne i8 %call, 0, !dbg !7275
  br i1 %tobool, label %if.then, label %if.end, !dbg !7276

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.c_declspecs** %quals_attrs, metadata !7277, metadata !DIExpression()), !dbg !7279
  %call1 = call %struct.c_declspecs* @build_null_declspecs(), !dbg !7280
  store %struct.c_declspecs* %call1, %struct.c_declspecs** %quals_attrs, align 8, !dbg !7279
  call void @llvm.dbg.declare(metadata %struct.c_declarator** %inner, metadata !7281, metadata !DIExpression()), !dbg !7282
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7283
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !7284
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7285
  %3 = load %struct.c_declspecs*, %struct.c_declspecs** %quals_attrs, align 8, !dbg !7286
  call void @c_parser_declspecs(%struct.c_parser* %2, %struct.c_declspecs* %3, i8 zeroext 0, i8 zeroext 0, i8 zeroext 1), !dbg !7287
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7288
  %5 = load i8, i8* %type_seen_p.addr, align 1, !dbg !7289
  %6 = load i32, i32* %kind.addr, align 4, !dbg !7290
  %7 = load i8*, i8** %seen_id.addr, align 8, !dbg !7291
  %call2 = call %struct.c_declarator* @c_parser_declarator(%struct.c_parser* %4, i8 zeroext %5, i32 %6, i8* %7), !dbg !7292
  store %struct.c_declarator* %call2, %struct.c_declarator** %inner, align 8, !dbg !7293
  %8 = load %struct.c_declarator*, %struct.c_declarator** %inner, align 8, !dbg !7294
  %cmp = icmp eq %struct.c_declarator* %8, null, !dbg !7296
  br i1 %cmp, label %if.then3, label %if.else, !dbg !7297

if.then3:                                         ; preds = %if.then
  store %struct.c_declarator* null, %struct.c_declarator** %retval, align 8, !dbg !7298
  br label %return, !dbg !7298

if.else:                                          ; preds = %if.then
  %9 = load %struct.c_declspecs*, %struct.c_declspecs** %quals_attrs, align 8, !dbg !7299
  %10 = load %struct.c_declarator*, %struct.c_declarator** %inner, align 8, !dbg !7300
  %call4 = call %struct.c_declarator* @make_pointer_declarator(%struct.c_declspecs* %9, %struct.c_declarator* %10), !dbg !7301
  store %struct.c_declarator* %call4, %struct.c_declarator** %retval, align 8, !dbg !7302
  br label %return, !dbg !7302

if.end:                                           ; preds = %entry
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7303
  %12 = load i8, i8* %type_seen_p.addr, align 1, !dbg !7304
  %13 = load i32, i32* %kind.addr, align 4, !dbg !7305
  %14 = load i8*, i8** %seen_id.addr, align 8, !dbg !7306
  %call5 = call %struct.c_declarator* @c_parser_direct_declarator(%struct.c_parser* %11, i8 zeroext %12, i32 %13, i8* %14), !dbg !7307
  store %struct.c_declarator* %call5, %struct.c_declarator** %retval, align 8, !dbg !7308
  br label %return, !dbg !7308

return:                                           ; preds = %if.end, %if.else, %if.then3
  %15 = load %struct.c_declarator*, %struct.c_declarator** %retval, align 8, !dbg !7309
  ret %struct.c_declarator* %15, !dbg !7309
}

declare dso_local %struct.c_declspecs* @declspecs_add_addrspace(%struct.c_declspecs*, i8 zeroext) #2

declare dso_local %union.tree_node* @objc_get_protocol_qualified_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.c_declspecs* @declspecs_add_type(i32, %struct.c_declspecs*, %struct.c_typespec* byval(%struct.c_typespec) align 8) #2

declare dso_local %struct.c_declspecs* @declspecs_add_scspec(%struct.c_declspecs*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_enum_specifier(%struct.c_typespec* noalias sret %agg.result, %struct.c_parser* %parser) #0 !dbg !7310 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %attrs = alloca %union.tree_node*, align 8
  %ident = alloca %union.tree_node*, align 8
  %enum_loc = alloca i32, align 4
  %ident_loc = alloca i32, align 4
  %the_enum = alloca %struct.c_enum_contents, align 8
  %type = alloca %union.tree_node*, align 8
  %postfix_attrs = alloca %union.tree_node*, align 8
  %values = alloca %union.tree_node*, align 8
  %enum_id = alloca %union.tree_node*, align 8
  %enum_value = alloca %union.tree_node*, align 8
  %enum_decl = alloca %union.tree_node*, align 8
  %seen_comma = alloca i8, align 1
  %token = alloca %struct.c_token*, align 8
  %comma_loc = alloca i32, align 4
  %value_loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %tmp61 = alloca %struct.c_typespec, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !7313, metadata !DIExpression()), !dbg !7314
  call void @llvm.dbg.declare(metadata %struct.c_typespec* %agg.result, metadata !7315, metadata !DIExpression()), !dbg !7316
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs, metadata !7317, metadata !DIExpression()), !dbg !7318
  call void @llvm.dbg.declare(metadata %union.tree_node** %ident, metadata !7319, metadata !DIExpression()), !dbg !7320
  store %union.tree_node* null, %union.tree_node** %ident, align 8, !dbg !7320
  call void @llvm.dbg.declare(metadata i32* %enum_loc, metadata !7321, metadata !DIExpression()), !dbg !7322
  call void @llvm.dbg.declare(metadata i32* %ident_loc, metadata !7323, metadata !DIExpression()), !dbg !7324
  store i32 0, i32* %ident_loc, align 4, !dbg !7324
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7325
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 33), !dbg !7325
  %tobool = icmp ne i8 %call, 0, !dbg !7325
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7325

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1675, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7325
  br label %cond.end, !dbg !7325

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7325

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7325
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7326
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !7327
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !7328
  %2 = load i32, i32* %location, align 8, !dbg !7328
  store i32 %2, i32* %enum_loc, align 4, !dbg !7329
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7330
  call void @c_parser_consume_token(%struct.c_parser* %3), !dbg !7331
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7332
  %call2 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %4), !dbg !7333
  store %union.tree_node* %call2, %union.tree_node** %attrs, align 8, !dbg !7334
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7335
  %call3 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !7336
  %location4 = getelementptr inbounds %struct.c_token, %struct.c_token* %call3, i32 0, i32 2, !dbg !7337
  %6 = load i32, i32* %location4, align 8, !dbg !7337
  store i32 %6, i32* %enum_loc, align 4, !dbg !7338
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7339
  %call5 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %7), !dbg !7340
  call void @c_parser_set_source_position_from_token(%struct.c_token* %call5), !dbg !7341
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7342
  %call6 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %8, i32 53), !dbg !7344
  %tobool7 = icmp ne i8 %call6, 0, !dbg !7344
  br i1 %tobool7, label %if.then, label %if.end, !dbg !7345

if.then:                                          ; preds = %cond.end
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7346
  %call8 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %9), !dbg !7348
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call8, i32 0, i32 1, !dbg !7349
  %10 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7349
  store %union.tree_node* %10, %union.tree_node** %ident, align 8, !dbg !7350
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7351
  %call9 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %11), !dbg !7352
  %location10 = getelementptr inbounds %struct.c_token, %struct.c_token* %call9, i32 0, i32 2, !dbg !7353
  %12 = load i32, i32* %location10, align 8, !dbg !7353
  store i32 %12, i32* %ident_loc, align 4, !dbg !7354
  %13 = load i32, i32* %ident_loc, align 4, !dbg !7355
  store i32 %13, i32* %enum_loc, align 4, !dbg !7356
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7357
  call void @c_parser_consume_token(%struct.c_parser* %14), !dbg !7358
  br label %if.end, !dbg !7359

if.end:                                           ; preds = %if.then, %cond.end
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7360
  %call11 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %15, i32 41), !dbg !7362
  %tobool12 = icmp ne i8 %call11, 0, !dbg !7362
  br i1 %tobool12, label %if.then13, label %if.else52, !dbg !7363

if.then13:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.c_enum_contents* %the_enum, metadata !7364, metadata !DIExpression()), !dbg !7370
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7371, metadata !DIExpression()), !dbg !7372
  %16 = load i32, i32* %enum_loc, align 4, !dbg !7373
  %17 = load %union.tree_node*, %union.tree_node** %ident, align 8, !dbg !7374
  %call14 = call %union.tree_node* @start_enum(i32 %16, %struct.c_enum_contents* %the_enum, %union.tree_node* %17), !dbg !7375
  store %union.tree_node* %call14, %union.tree_node** %type, align 8, !dbg !7372
  call void @llvm.dbg.declare(metadata %union.tree_node** %postfix_attrs, metadata !7376, metadata !DIExpression()), !dbg !7377
  call void @llvm.dbg.declare(metadata %union.tree_node** %values, metadata !7378, metadata !DIExpression()), !dbg !7379
  store %union.tree_node* null, %union.tree_node** %values, align 8, !dbg !7379
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7380
  call void @c_parser_consume_token(%struct.c_parser* %18), !dbg !7381
  br label %while.body, !dbg !7382

while.body:                                       ; preds = %if.then13, %if.end47
  call void @llvm.dbg.declare(metadata %union.tree_node** %enum_id, metadata !7383, metadata !DIExpression()), !dbg !7385
  call void @llvm.dbg.declare(metadata %union.tree_node** %enum_value, metadata !7386, metadata !DIExpression()), !dbg !7387
  call void @llvm.dbg.declare(metadata %union.tree_node** %enum_decl, metadata !7388, metadata !DIExpression()), !dbg !7389
  call void @llvm.dbg.declare(metadata i8* %seen_comma, metadata !7390, metadata !DIExpression()), !dbg !7391
  call void @llvm.dbg.declare(metadata %struct.c_token** %token, metadata !7392, metadata !DIExpression()), !dbg !7393
  call void @llvm.dbg.declare(metadata i32* %comma_loc, metadata !7394, metadata !DIExpression()), !dbg !7395
  store i32 0, i32* %comma_loc, align 4, !dbg !7395
  call void @llvm.dbg.declare(metadata i32* %value_loc, metadata !7396, metadata !DIExpression()), !dbg !7397
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7398
  %call15 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %19, i32 53), !dbg !7400
  %tobool16 = icmp ne i8 %call15, 0, !dbg !7400
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !7401

if.then17:                                        ; preds = %while.body
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7402
  call void @c_parser_error(%struct.c_parser* %20, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !7404
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7405
  call void @c_parser_skip_until_found(%struct.c_parser* %21, i32 42, i8* null), !dbg !7406
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !7407
  store %union.tree_node* %22, %union.tree_node** %values, align 8, !dbg !7408
  br label %while.end, !dbg !7409

if.end18:                                         ; preds = %while.body
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7410
  %call19 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %23), !dbg !7411
  store %struct.c_token* %call19, %struct.c_token** %token, align 8, !dbg !7412
  %24 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !7413
  %value20 = getelementptr inbounds %struct.c_token, %struct.c_token* %24, i32 0, i32 1, !dbg !7414
  %25 = load %union.tree_node*, %union.tree_node** %value20, align 8, !dbg !7414
  store %union.tree_node* %25, %union.tree_node** %enum_id, align 8, !dbg !7415
  %26 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !7416
  call void @c_parser_set_source_position_from_token(%struct.c_token* %26), !dbg !7417
  %27 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !7418
  %location21 = getelementptr inbounds %struct.c_token, %struct.c_token* %27, i32 0, i32 2, !dbg !7419
  %28 = load i32, i32* %location21, align 8, !dbg !7419
  store i32 %28, i32* %value_loc, align 4, !dbg !7420
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7421
  call void @c_parser_consume_token(%struct.c_parser* %29), !dbg !7422
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7423
  %call22 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %30, i32 0), !dbg !7425
  %tobool23 = icmp ne i8 %call22, 0, !dbg !7425
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !7426

if.then24:                                        ; preds = %if.end18
  %31 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7427
  call void @c_parser_consume_token(%struct.c_parser* %31), !dbg !7429
  %32 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7430
  %call25 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %32), !dbg !7431
  %location26 = getelementptr inbounds %struct.c_token, %struct.c_token* %call25, i32 0, i32 2, !dbg !7432
  %33 = load i32, i32* %location26, align 8, !dbg !7432
  store i32 %33, i32* %value_loc, align 4, !dbg !7433
  %34 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7434
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp, %struct.c_parser* %34, %struct.c_expr* null), !dbg !7435
  %value27 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !7436
  %35 = load %union.tree_node*, %union.tree_node** %value27, align 8, !dbg !7436
  store %union.tree_node* %35, %union.tree_node** %enum_value, align 8, !dbg !7437
  br label %if.end28, !dbg !7438

if.else:                                          ; preds = %if.end18
  store %union.tree_node* null, %union.tree_node** %enum_value, align 8, !dbg !7439
  br label %if.end28

if.end28:                                         ; preds = %if.else, %if.then24
  %36 = load i32, i32* %value_loc, align 4, !dbg !7440
  %37 = load %union.tree_node*, %union.tree_node** %enum_id, align 8, !dbg !7441
  %38 = load %union.tree_node*, %union.tree_node** %enum_value, align 8, !dbg !7442
  %call29 = call %union.tree_node* @build_enumerator(i32 %36, %struct.c_enum_contents* %the_enum, %union.tree_node* %37, %union.tree_node* %38), !dbg !7443
  store %union.tree_node* %call29, %union.tree_node** %enum_decl, align 8, !dbg !7444
  %39 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !7445
  %40 = load %union.tree_node*, %union.tree_node** %enum_decl, align 8, !dbg !7446
  %common = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !7446
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7446
  store %union.tree_node* %39, %union.tree_node** %chain, align 8, !dbg !7447
  %41 = load %union.tree_node*, %union.tree_node** %enum_decl, align 8, !dbg !7448
  store %union.tree_node* %41, %union.tree_node** %values, align 8, !dbg !7449
  store i8 0, i8* %seen_comma, align 1, !dbg !7450
  %42 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7451
  %call30 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %42, i32 19), !dbg !7453
  %tobool31 = icmp ne i8 %call30, 0, !dbg !7453
  br i1 %tobool31, label %if.then32, label %if.end35, !dbg !7454

if.then32:                                        ; preds = %if.end28
  %43 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7455
  %call33 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %43), !dbg !7457
  %location34 = getelementptr inbounds %struct.c_token, %struct.c_token* %call33, i32 0, i32 2, !dbg !7458
  %44 = load i32, i32* %location34, align 8, !dbg !7458
  store i32 %44, i32* %comma_loc, align 4, !dbg !7459
  store i8 1, i8* %seen_comma, align 1, !dbg !7460
  %45 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7461
  call void @c_parser_consume_token(%struct.c_parser* %45), !dbg !7462
  br label %if.end35, !dbg !7463

if.end35:                                         ; preds = %if.then32, %if.end28
  %46 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7464
  %call36 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %46, i32 42), !dbg !7466
  %tobool37 = icmp ne i8 %call36, 0, !dbg !7466
  br i1 %tobool37, label %if.then38, label %if.end44, !dbg !7467

if.then38:                                        ; preds = %if.end35
  %47 = load i8, i8* %seen_comma, align 1, !dbg !7468
  %conv = zext i8 %47 to i32, !dbg !7468
  %tobool39 = icmp ne i32 %conv, 0, !dbg !7468
  br i1 %tobool39, label %land.lhs.true, label %if.end43, !dbg !7471

land.lhs.true:                                    ; preds = %if.then38
  %48 = load i32, i32* @flag_isoc99, align 4, !dbg !7472
  %tobool40 = icmp ne i32 %48, 0, !dbg !7472
  br i1 %tobool40, label %if.end43, label %if.then41, !dbg !7473

if.then41:                                        ; preds = %land.lhs.true
  %49 = load i32, i32* %comma_loc, align 4, !dbg !7474
  %call42 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %49, i32 834, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.17, i64 0, i64 0)), !dbg !7475
  br label %if.end43, !dbg !7475

if.end43:                                         ; preds = %if.then41, %land.lhs.true, %if.then38
  %50 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7476
  call void @c_parser_consume_token(%struct.c_parser* %50), !dbg !7477
  br label %while.end, !dbg !7478

if.end44:                                         ; preds = %if.end35
  %51 = load i8, i8* %seen_comma, align 1, !dbg !7479
  %tobool45 = icmp ne i8 %51, 0, !dbg !7479
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !7481

if.then46:                                        ; preds = %if.end44
  %52 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7482
  call void @c_parser_error(%struct.c_parser* %52, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18, i64 0, i64 0)), !dbg !7484
  %53 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7485
  call void @c_parser_skip_until_found(%struct.c_parser* %53, i32 42, i8* null), !dbg !7486
  %54 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !7487
  store %union.tree_node* %54, %union.tree_node** %values, align 8, !dbg !7488
  br label %while.end, !dbg !7489

if.end47:                                         ; preds = %if.end44
  br label %while.body, !dbg !7382, !llvm.loop !7490

while.end:                                        ; preds = %if.then46, %if.end43, %if.then17
  %55 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7492
  %call48 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %55), !dbg !7493
  store %union.tree_node* %call48, %union.tree_node** %postfix_attrs, align 8, !dbg !7494
  %56 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7495
  %57 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !7496
  %call49 = call %union.tree_node* @nreverse(%union.tree_node* %57), !dbg !7497
  %58 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !7498
  %59 = load %union.tree_node*, %union.tree_node** %postfix_attrs, align 8, !dbg !7499
  %call50 = call %union.tree_node* @chainon(%union.tree_node* %58, %union.tree_node* %59), !dbg !7500
  %call51 = call %union.tree_node* @finish_enum(%union.tree_node* %56, %union.tree_node* %call49, %union.tree_node* %call50), !dbg !7501
  %spec = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 1, !dbg !7502
  store %union.tree_node* %call51, %union.tree_node** %spec, align 8, !dbg !7503
  %kind = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 0, !dbg !7504
  store i32 3, i32* %kind, align 8, !dbg !7505
  %expr = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 2, !dbg !7506
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !7507
  %expr_const_operands = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 3, !dbg !7508
  store i8 1, i8* %expr_const_operands, align 8, !dbg !7509
  br label %return, !dbg !7510

if.else52:                                        ; preds = %if.end
  %60 = load %union.tree_node*, %union.tree_node** %ident, align 8, !dbg !7511
  %tobool53 = icmp ne %union.tree_node* %60, null, !dbg !7511
  br i1 %tobool53, label %if.end59, label %if.then54, !dbg !7513

if.then54:                                        ; preds = %if.else52
  %61 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7514
  call void @c_parser_error(%struct.c_parser* %61, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0)), !dbg !7516
  %62 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !7517
  %spec55 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 1, !dbg !7518
  store %union.tree_node* %62, %union.tree_node** %spec55, align 8, !dbg !7519
  %kind56 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 0, !dbg !7520
  store i32 1, i32* %kind56, align 8, !dbg !7521
  %expr57 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 2, !dbg !7522
  store %union.tree_node* null, %union.tree_node** %expr57, align 8, !dbg !7523
  %expr_const_operands58 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 3, !dbg !7524
  store i8 1, i8* %expr_const_operands58, align 8, !dbg !7525
  br label %return, !dbg !7526

if.end59:                                         ; preds = %if.else52
  br label %if.end60

if.end60:                                         ; preds = %if.end59
  %63 = load i32, i32* %ident_loc, align 4, !dbg !7527
  %64 = load %union.tree_node*, %union.tree_node** %ident, align 8, !dbg !7528
  call void @parser_xref_tag(%struct.c_typespec* sret %tmp61, i32 %63, i32 6, %union.tree_node* %64), !dbg !7529
  %65 = bitcast %struct.c_typespec* %agg.result to i8*, !dbg !7529
  %66 = bitcast %struct.c_typespec* %tmp61 to i8*, !dbg !7529
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 32, i1 false), !dbg !7529
  %67 = load i32, i32* @pedantic, align 4, !dbg !7530
  %tobool62 = icmp ne i32 %67, 0, !dbg !7530
  br i1 %tobool62, label %land.lhs.true63, label %if.end74, !dbg !7532

land.lhs.true63:                                  ; preds = %if.end60
  %spec64 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 1, !dbg !7533
  %68 = load %union.tree_node*, %union.tree_node** %spec64, align 8, !dbg !7533
  %type65 = bitcast %union.tree_node* %68 to %struct.tree_type*, !dbg !7533
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type65, i32 0, i32 2, !dbg !7533
  %69 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !7533
  %cmp = icmp ne %union.tree_node* %69, null, !dbg !7533
  br i1 %cmp, label %if.end74, label %if.then67, !dbg !7534

if.then67:                                        ; preds = %land.lhs.true63
  %70 = load %union.tree_node*, %union.tree_node** %ident, align 8, !dbg !7535
  %tobool68 = icmp ne %union.tree_node* %70, null, !dbg !7535
  br i1 %tobool68, label %cond.false70, label %cond.true69, !dbg !7535

cond.true69:                                      ; preds = %if.then67
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1777, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7535
  br label %cond.end71, !dbg !7535

cond.false70:                                     ; preds = %if.then67
  br label %cond.end71, !dbg !7535

cond.end71:                                       ; preds = %cond.false70, %cond.true69
  %cond72 = phi i32 [ 0, %cond.true69 ], [ 0, %cond.false70 ], !dbg !7535
  %71 = load i32, i32* %enum_loc, align 4, !dbg !7537
  %call73 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %71, i32 834, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.20, i64 0, i64 0)), !dbg !7538
  br label %if.end74, !dbg !7539

if.end74:                                         ; preds = %cond.end71, %land.lhs.true63, %if.end60
  br label %return, !dbg !7540

return:                                           ; preds = %if.end74, %if.then54, %while.end
  ret void, !dbg !7541
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_struct_or_union_specifier(%struct.c_typespec* noalias sret %agg.result, %struct.c_parser* %parser) #0 !dbg !7542 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %attrs = alloca %union.tree_node*, align 8
  %ident = alloca %union.tree_node*, align 8
  %struct_loc = alloca i32, align 4
  %ident_loc = alloca i32, align 4
  %code = alloca i32, align 4
  %struct_info = alloca %struct.c_struct_parse_info*, align 8
  %type = alloca %union.tree_node*, align 8
  %postfix_attrs = alloca %union.tree_node*, align 8
  %contents = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %decls = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.c_typespec, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !7543, metadata !DIExpression()), !dbg !7544
  call void @llvm.dbg.declare(metadata %struct.c_typespec* %agg.result, metadata !7545, metadata !DIExpression()), !dbg !7546
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs, metadata !7547, metadata !DIExpression()), !dbg !7548
  call void @llvm.dbg.declare(metadata %union.tree_node** %ident, metadata !7549, metadata !DIExpression()), !dbg !7550
  store %union.tree_node* null, %union.tree_node** %ident, align 8, !dbg !7550
  call void @llvm.dbg.declare(metadata i32* %struct_loc, metadata !7551, metadata !DIExpression()), !dbg !7552
  call void @llvm.dbg.declare(metadata i32* %ident_loc, metadata !7553, metadata !DIExpression()), !dbg !7554
  store i32 0, i32* %ident_loc, align 4, !dbg !7554
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7555, metadata !DIExpression()), !dbg !7556
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7557
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !7558
  %1 = bitcast %struct.c_token* %call to i32*, !dbg !7559
  %bf.load = load i32, i32* %1, align 8, !dbg !7559
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7559
  %bf.clear = and i32 %bf.lshr, 255, !dbg !7559
  switch i32 %bf.clear, label %sw.default [
    i32 34, label %sw.bb
    i32 35, label %sw.bb1
  ], !dbg !7560

sw.bb:                                            ; preds = %entry
  store i32 16, i32* %code, align 4, !dbg !7561
  br label %sw.epilog, !dbg !7563

sw.bb1:                                           ; preds = %entry
  store i32 17, i32* %code, align 4, !dbg !7564
  br label %sw.epilog, !dbg !7565

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1841, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7566
  br label %sw.epilog, !dbg !7567

sw.epilog:                                        ; preds = %sw.default, %sw.bb1, %sw.bb
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7568
  %call2 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !7569
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call2, i32 0, i32 2, !dbg !7570
  %3 = load i32, i32* %location, align 8, !dbg !7570
  store i32 %3, i32* %struct_loc, align 4, !dbg !7571
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7572
  call void @c_parser_consume_token(%struct.c_parser* %4), !dbg !7573
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7574
  %call3 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %5), !dbg !7575
  store %union.tree_node* %call3, %union.tree_node** %attrs, align 8, !dbg !7576
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7577
  %call4 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %6), !dbg !7578
  call void @c_parser_set_source_position_from_token(%struct.c_token* %call4), !dbg !7579
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7580
  %call5 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %7, i32 53), !dbg !7582
  %tobool = icmp ne i8 %call5, 0, !dbg !7582
  br i1 %tobool, label %if.then, label %if.end, !dbg !7583

if.then:                                          ; preds = %sw.epilog
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7584
  %call6 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %8), !dbg !7586
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call6, i32 0, i32 1, !dbg !7587
  %9 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7587
  store %union.tree_node* %9, %union.tree_node** %ident, align 8, !dbg !7588
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7589
  %call7 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %10), !dbg !7590
  %location8 = getelementptr inbounds %struct.c_token, %struct.c_token* %call7, i32 0, i32 2, !dbg !7591
  %11 = load i32, i32* %location8, align 8, !dbg !7591
  store i32 %11, i32* %ident_loc, align 4, !dbg !7592
  %12 = load i32, i32* %ident_loc, align 4, !dbg !7593
  store i32 %12, i32* %struct_loc, align 4, !dbg !7594
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7595
  call void @c_parser_consume_token(%struct.c_parser* %13), !dbg !7596
  br label %if.end, !dbg !7597

if.end:                                           ; preds = %if.then, %sw.epilog
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7598
  %call9 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %14, i32 41), !dbg !7600
  %tobool10 = icmp ne i8 %call9, 0, !dbg !7600
  br i1 %tobool10, label %if.then11, label %if.else70, !dbg !7601

if.then11:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.c_struct_parse_info** %struct_info, metadata !7602, metadata !DIExpression()), !dbg !7606
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7607, metadata !DIExpression()), !dbg !7608
  %15 = load i32, i32* %struct_loc, align 4, !dbg !7609
  %16 = load i32, i32* %code, align 4, !dbg !7610
  %17 = load %union.tree_node*, %union.tree_node** %ident, align 8, !dbg !7611
  %call12 = call %union.tree_node* @start_struct(i32 %15, i32 %16, %union.tree_node* %17, %struct.c_struct_parse_info** %struct_info), !dbg !7612
  store %union.tree_node* %call12, %union.tree_node** %type, align 8, !dbg !7608
  call void @llvm.dbg.declare(metadata %union.tree_node** %postfix_attrs, metadata !7613, metadata !DIExpression()), !dbg !7614
  call void @llvm.dbg.declare(metadata %union.tree_node** %contents, metadata !7615, metadata !DIExpression()), !dbg !7616
  store %union.tree_node* null, %union.tree_node** %contents, align 8, !dbg !7616
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7617
  call void @c_parser_consume_token(%struct.c_parser* %18), !dbg !7618
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7619
  %call13 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %19, i32 123), !dbg !7621
  %tobool14 = icmp ne i8 %call13, 0, !dbg !7621
  br i1 %tobool14, label %if.then15, label %if.end34, !dbg !7622

if.then15:                                        ; preds = %if.then11
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !7623, metadata !DIExpression()), !dbg !7625
  %20 = load i32, i32* @c_language, align 4, !dbg !7626
  %and = and i32 %20, 1, !dbg !7626
  %cmp = icmp ne i32 %and, 0, !dbg !7626
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7626

cond.true:                                        ; preds = %if.then15
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1881, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7626
  br label %cond.end, !dbg !7626

cond.false:                                       ; preds = %if.then15
  br label %cond.end, !dbg !7626

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7626
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7627
  call void @c_parser_consume_token(%struct.c_parser* %21), !dbg !7628
  %22 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7629
  %call16 = call zeroext i8 @c_parser_require(%struct.c_parser* %22, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !7631
  %tobool17 = icmp ne i8 %call16, 0, !dbg !7631
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !7632

if.then18:                                        ; preds = %cond.end
  br label %end_at_defs, !dbg !7633

if.end19:                                         ; preds = %cond.end
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7634
  %call20 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %23, i32 53), !dbg !7636
  %conv = zext i8 %call20 to i32, !dbg !7636
  %tobool21 = icmp ne i32 %conv, 0, !dbg !7636
  br i1 %tobool21, label %land.lhs.true, label %if.else, !dbg !7637

land.lhs.true:                                    ; preds = %if.end19
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7638
  %call22 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %24), !dbg !7639
  %25 = bitcast %struct.c_token* %call22 to i32*, !dbg !7640
  %bf.load23 = load i32, i32* %25, align 8, !dbg !7640
  %bf.lshr24 = lshr i32 %bf.load23, 8, !dbg !7640
  %bf.clear25 = and i32 %bf.lshr24, 255, !dbg !7640
  %cmp26 = icmp eq i32 %bf.clear25, 2, !dbg !7641
  br i1 %cmp26, label %if.then28, label %if.else, !dbg !7642

if.then28:                                        ; preds = %land.lhs.true
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7643
  %call29 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %26), !dbg !7645
  %value30 = getelementptr inbounds %struct.c_token, %struct.c_token* %call29, i32 0, i32 1, !dbg !7646
  %27 = load %union.tree_node*, %union.tree_node** %value30, align 8, !dbg !7646
  store %union.tree_node* %27, %union.tree_node** %name, align 8, !dbg !7647
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7648
  call void @c_parser_consume_token(%struct.c_parser* %28), !dbg !7649
  br label %if.end31, !dbg !7650

if.else:                                          ; preds = %land.lhs.true, %if.end19
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7651
  call void @c_parser_error(%struct.c_parser* %29, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.57, i64 0, i64 0)), !dbg !7653
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7654
  call void @c_parser_skip_until_found(%struct.c_parser* %30, i32 21, i8* null), !dbg !7655
  br label %end_at_defs, !dbg !7656

if.end31:                                         ; preds = %if.then28
  %31 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7657
  call void @c_parser_skip_until_found(%struct.c_parser* %31, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !7658
  %32 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7659
  %call32 = call %union.tree_node* @objc_get_class_ivars(%union.tree_node* %32), !dbg !7660
  %call33 = call %union.tree_node* @nreverse(%union.tree_node* %call32), !dbg !7661
  store %union.tree_node* %call33, %union.tree_node** %contents, align 8, !dbg !7662
  br label %if.end34, !dbg !7663

if.end34:                                         ; preds = %if.end31, %if.then11
  br label %end_at_defs, !dbg !7664

end_at_defs:                                      ; preds = %if.end34, %if.else, %if.then18
  call void @llvm.dbg.label(metadata !7665), !dbg !7666
  br label %while.body, !dbg !7667

while.body:                                       ; preds = %end_at_defs, %if.then37, %if.then48, %if.end65
  call void @llvm.dbg.declare(metadata %union.tree_node** %decls, metadata !7668, metadata !DIExpression()), !dbg !7670
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7671
  %call35 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %33, i32 43), !dbg !7673
  %tobool36 = icmp ne i8 %call35, 0, !dbg !7673
  br i1 %tobool36, label %if.then37, label %if.end41, !dbg !7674

if.then37:                                        ; preds = %while.body
  %34 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7675
  %call38 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %34), !dbg !7677
  %location39 = getelementptr inbounds %struct.c_token, %struct.c_token* %call38, i32 0, i32 2, !dbg !7678
  %35 = load i32, i32* %location39, align 8, !dbg !7678
  %call40 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %35, i32 834, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.58, i64 0, i64 0)), !dbg !7679
  %36 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7680
  call void @c_parser_consume_token(%struct.c_parser* %36), !dbg !7681
  br label %while.body, !dbg !7682, !llvm.loop !7683

if.end41:                                         ; preds = %while.body
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7685
  %call42 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %37, i32 42), !dbg !7687
  %tobool43 = icmp ne i8 %call42, 0, !dbg !7687
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !7688

if.then44:                                        ; preds = %if.end41
  %38 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7689
  call void @c_parser_consume_token(%struct.c_parser* %38), !dbg !7691
  br label %while.end, !dbg !7692

if.end45:                                         ; preds = %if.end41
  %39 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7693
  %call46 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %39, i32 70), !dbg !7695
  %tobool47 = icmp ne i8 %call46, 0, !dbg !7695
  br i1 %tobool47, label %if.then48, label %if.end50, !dbg !7696

if.then48:                                        ; preds = %if.end45
  %40 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7697
  %call49 = call zeroext i8 @c_parser_pragma(%struct.c_parser* %40, i32 0), !dbg !7699
  br label %while.body, !dbg !7700, !llvm.loop !7683

if.end50:                                         ; preds = %if.end45
  %41 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7701
  %call51 = call %union.tree_node* @c_parser_struct_declaration(%struct.c_parser* %41), !dbg !7702
  store %union.tree_node* %call51, %union.tree_node** %decls, align 8, !dbg !7703
  %42 = load %union.tree_node*, %union.tree_node** %decls, align 8, !dbg !7704
  %43 = load %union.tree_node*, %union.tree_node** %contents, align 8, !dbg !7705
  %call52 = call %union.tree_node* @chainon(%union.tree_node* %42, %union.tree_node* %43), !dbg !7706
  store %union.tree_node* %call52, %union.tree_node** %contents, align 8, !dbg !7707
  %44 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7708
  %call53 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %44, i32 43), !dbg !7710
  %tobool54 = icmp ne i8 %call53, 0, !dbg !7710
  br i1 %tobool54, label %if.then55, label %if.else56, !dbg !7711

if.then55:                                        ; preds = %if.end50
  %45 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7712
  call void @c_parser_consume_token(%struct.c_parser* %45), !dbg !7713
  br label %if.end65, !dbg !7713

if.else56:                                        ; preds = %if.end50
  %46 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7714
  %call57 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %46, i32 42), !dbg !7717
  %tobool58 = icmp ne i8 %call57, 0, !dbg !7717
  br i1 %tobool58, label %if.then59, label %if.else63, !dbg !7718

if.then59:                                        ; preds = %if.else56
  %47 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7719
  %call60 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %47), !dbg !7720
  %location61 = getelementptr inbounds %struct.c_token, %struct.c_token* %call60, i32 0, i32 2, !dbg !7721
  %48 = load i32, i32* %location61, align 8, !dbg !7721
  %call62 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %48, i32 0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.59, i64 0, i64 0)), !dbg !7722
  br label %if.end64, !dbg !7722

if.else63:                                        ; preds = %if.else56
  %49 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7723
  call void @c_parser_error(%struct.c_parser* %49, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !7725
  %50 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7726
  call void @c_parser_skip_until_found(%struct.c_parser* %50, i32 42, i8* null), !dbg !7727
  br label %while.end, !dbg !7728

if.end64:                                         ; preds = %if.then59
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then55
  br label %while.body, !dbg !7667, !llvm.loop !7683

while.end:                                        ; preds = %if.else63, %if.then44
  %51 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7729
  %call66 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %51), !dbg !7730
  store %union.tree_node* %call66, %union.tree_node** %postfix_attrs, align 8, !dbg !7731
  %52 = load i32, i32* %struct_loc, align 4, !dbg !7732
  %53 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7733
  %54 = load %union.tree_node*, %union.tree_node** %contents, align 8, !dbg !7734
  %call67 = call %union.tree_node* @nreverse(%union.tree_node* %54), !dbg !7735
  %55 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !7736
  %56 = load %union.tree_node*, %union.tree_node** %postfix_attrs, align 8, !dbg !7737
  %call68 = call %union.tree_node* @chainon(%union.tree_node* %55, %union.tree_node* %56), !dbg !7738
  %57 = load %struct.c_struct_parse_info*, %struct.c_struct_parse_info** %struct_info, align 8, !dbg !7739
  %call69 = call %union.tree_node* @finish_struct(i32 %52, %union.tree_node* %53, %union.tree_node* %call67, %union.tree_node* %call68, %struct.c_struct_parse_info* %57), !dbg !7740
  %spec = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 1, !dbg !7741
  store %union.tree_node* %call69, %union.tree_node** %spec, align 8, !dbg !7742
  %kind = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 0, !dbg !7743
  store i32 3, i32* %kind, align 8, !dbg !7744
  %expr = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 2, !dbg !7745
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !7746
  %expr_const_operands = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 3, !dbg !7747
  store i8 1, i8* %expr_const_operands, align 8, !dbg !7748
  br label %return, !dbg !7749

if.else70:                                        ; preds = %if.end
  %58 = load %union.tree_node*, %union.tree_node** %ident, align 8, !dbg !7750
  %tobool71 = icmp ne %union.tree_node* %58, null, !dbg !7750
  br i1 %tobool71, label %if.end77, label %if.then72, !dbg !7752

if.then72:                                        ; preds = %if.else70
  %59 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7753
  call void @c_parser_error(%struct.c_parser* %59, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0)), !dbg !7755
  %60 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !7756
  %spec73 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 1, !dbg !7757
  store %union.tree_node* %60, %union.tree_node** %spec73, align 8, !dbg !7758
  %kind74 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 0, !dbg !7759
  store i32 1, i32* %kind74, align 8, !dbg !7760
  %expr75 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 2, !dbg !7761
  store %union.tree_node* null, %union.tree_node** %expr75, align 8, !dbg !7762
  %expr_const_operands76 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 3, !dbg !7763
  store i8 1, i8* %expr_const_operands76, align 8, !dbg !7764
  br label %return, !dbg !7765

if.end77:                                         ; preds = %if.else70
  br label %if.end78

if.end78:                                         ; preds = %if.end77
  %61 = load i32, i32* %ident_loc, align 4, !dbg !7766
  %62 = load i32, i32* %code, align 4, !dbg !7767
  %63 = load %union.tree_node*, %union.tree_node** %ident, align 8, !dbg !7768
  call void @parser_xref_tag(%struct.c_typespec* sret %tmp, i32 %61, i32 %62, %union.tree_node* %63), !dbg !7769
  %64 = bitcast %struct.c_typespec* %agg.result to i8*, !dbg !7769
  %65 = bitcast %struct.c_typespec* %tmp to i8*, !dbg !7769
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 %65, i64 32, i1 false), !dbg !7769
  br label %return, !dbg !7770

return:                                           ; preds = %if.end78, %if.then72, %while.end
  ret void, !dbg !7771
}

declare dso_local i32 @invoke_plugin_callbacks(i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_typeof_specifier(%struct.c_typespec* noalias sret %agg.result, %struct.c_parser* %parser) #0 !dbg !7772 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %type = alloca %struct.c_type_name*, align 8
  %was_vm = alloca i8, align 1
  %here = alloca i32, align 4
  %expr20 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !7773, metadata !DIExpression()), !dbg !7774
  call void @llvm.dbg.declare(metadata %struct.c_typespec* %agg.result, metadata !7775, metadata !DIExpression()), !dbg !7776
  %kind = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 0, !dbg !7777
  store i32 6, i32* %kind, align 8, !dbg !7778
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !7779
  %spec = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 1, !dbg !7780
  store %union.tree_node* %0, %union.tree_node** %spec, align 8, !dbg !7781
  %expr = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 2, !dbg !7782
  store %union.tree_node* null, %union.tree_node** %expr, align 8, !dbg !7783
  %expr_const_operands = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 3, !dbg !7784
  store i8 1, i8* %expr_const_operands, align 8, !dbg !7785
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7786
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %1, i32 50), !dbg !7786
  %tobool = icmp ne i8 %call, 0, !dbg !7786
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7786

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 2143, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7786
  br label %cond.end, !dbg !7786

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7786

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7786
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7787
  call void @c_parser_consume_token(%struct.c_parser* %2), !dbg !7788
  %3 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !7789
  %inc = add nsw i32 %3, 1, !dbg !7789
  store i32 %inc, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !7789
  %4 = load i32, i32* @in_typeof, align 4, !dbg !7790
  %inc1 = add nsw i32 %4, 1, !dbg !7790
  store i32 %inc1, i32* @in_typeof, align 4, !dbg !7790
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7791
  %call2 = call zeroext i8 @c_parser_require(%struct.c_parser* %5, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !7793
  %tobool3 = icmp ne i8 %call2, 0, !dbg !7793
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7794

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !7795
  %dec = add nsw i32 %6, -1, !dbg !7795
  store i32 %dec, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !7795
  %7 = load i32, i32* @in_typeof, align 4, !dbg !7797
  %dec4 = add nsw i32 %7, -1, !dbg !7797
  store i32 %dec4, i32* @in_typeof, align 4, !dbg !7797
  br label %return, !dbg !7798

if.end:                                           ; preds = %cond.end
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7799
  %call5 = call zeroext i8 @c_parser_next_token_starts_typename(%struct.c_parser* %8), !dbg !7801
  %tobool6 = icmp ne i8 %call5, 0, !dbg !7801
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !7802

if.then7:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.c_type_name** %type, metadata !7803, metadata !DIExpression()), !dbg !7805
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7806
  %call8 = call %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %9), !dbg !7807
  store %struct.c_type_name* %call8, %struct.c_type_name** %type, align 8, !dbg !7805
  %10 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !7808
  %dec9 = add nsw i32 %10, -1, !dbg !7808
  store i32 %dec9, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !7808
  %11 = load i32, i32* @in_typeof, align 4, !dbg !7809
  %dec10 = add nsw i32 %11, -1, !dbg !7809
  store i32 %dec10, i32* @in_typeof, align 4, !dbg !7809
  %12 = load %struct.c_type_name*, %struct.c_type_name** %type, align 8, !dbg !7810
  %cmp = icmp ne %struct.c_type_name* %12, null, !dbg !7812
  br i1 %cmp, label %if.then11, label %if.end18, !dbg !7813

if.then11:                                        ; preds = %if.then7
  %13 = load %struct.c_type_name*, %struct.c_type_name** %type, align 8, !dbg !7814
  %expr12 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 2, !dbg !7816
  %expr_const_operands13 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 3, !dbg !7817
  %call14 = call %union.tree_node* @groktypename(%struct.c_type_name* %13, %union.tree_node** %expr12, i8* %expr_const_operands13), !dbg !7818
  %spec15 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 1, !dbg !7819
  store %union.tree_node* %call14, %union.tree_node** %spec15, align 8, !dbg !7820
  %spec16 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 1, !dbg !7821
  %14 = load %union.tree_node*, %union.tree_node** %spec16, align 8, !dbg !7821
  %call17 = call zeroext i8 @variably_modified_type_p(%union.tree_node* %14, %union.tree_node* null), !dbg !7822
  call void @pop_maybe_used(i8 zeroext %call17), !dbg !7823
  br label %if.end18, !dbg !7824

if.end18:                                         ; preds = %if.then11, %if.then7
  br label %if.end43, !dbg !7825

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8* %was_vm, metadata !7826, metadata !DIExpression()), !dbg !7828
  call void @llvm.dbg.declare(metadata i32* %here, metadata !7829, metadata !DIExpression()), !dbg !7830
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7831
  %call19 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %15), !dbg !7832
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call19, i32 0, i32 2, !dbg !7833
  %16 = load i32, i32* %location, align 8, !dbg !7833
  store i32 %16, i32* %here, align 4, !dbg !7830
  call void @llvm.dbg.declare(metadata %struct.c_expr* %expr20, metadata !7834, metadata !DIExpression()), !dbg !7835
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7836
  call void @c_parser_expression(%struct.c_expr* sret %expr20, %struct.c_parser* %17), !dbg !7837
  %18 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !7838
  %dec21 = add nsw i32 %18, -1, !dbg !7838
  store i32 %dec21, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !7838
  %19 = load i32, i32* @in_typeof, align 4, !dbg !7839
  %dec22 = add nsw i32 %19, -1, !dbg !7839
  store i32 %dec22, i32* @in_typeof, align 4, !dbg !7839
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr20, i32 0, i32 0, !dbg !7840
  %20 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7840
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !7840
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !7840
  %bf.load = load i64, i64* %21, align 8, !dbg !7840
  %bf.clear = and i64 %bf.load, 65535, !dbg !7840
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7840
  %cmp23 = icmp eq i32 %bf.cast, 41, !dbg !7842
  br i1 %cmp23, label %land.lhs.true, label %if.end30, !dbg !7843

land.lhs.true:                                    ; preds = %if.else
  %value24 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr20, i32 0, i32 0, !dbg !7844
  %22 = load %union.tree_node*, %union.tree_node** %value24, align 8, !dbg !7844
  %exp = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !7844
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7844
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !7844
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7844
  %decl_common = bitcast %union.tree_node* %23 to %struct.tree_decl_common*, !dbg !7844
  %lang_flag_4 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7844
  %24 = bitcast i40* %lang_flag_4 to i64*, !dbg !7844
  %bf.load25 = load i64, i64* %24, align 8, !dbg !7844
  %bf.lshr = lshr i64 %bf.load25, 19, !dbg !7844
  %bf.clear26 = and i64 %bf.lshr, 1, !dbg !7844
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !7844
  %cmp28 = icmp eq i32 %bf.cast27, 1, !dbg !7844
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !7845

if.then29:                                        ; preds = %land.lhs.true
  %25 = load i32, i32* %here, align 4, !dbg !7846
  call void (i32, i8*, ...) @error_at(i32 %25, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.63, i64 0, i64 0)), !dbg !7847
  br label %if.end30, !dbg !7847

if.end30:                                         ; preds = %if.then29, %land.lhs.true, %if.else
  %value31 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr20, i32 0, i32 0, !dbg !7848
  %26 = load %union.tree_node*, %union.tree_node** %value31, align 8, !dbg !7848
  %common = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !7848
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7848
  %27 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !7848
  %spec33 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 1, !dbg !7849
  store %union.tree_node* %27, %union.tree_node** %spec33, align 8, !dbg !7850
  %spec34 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 1, !dbg !7851
  %28 = load %union.tree_node*, %union.tree_node** %spec34, align 8, !dbg !7851
  %call35 = call zeroext i8 @variably_modified_type_p(%union.tree_node* %28, %union.tree_node* null), !dbg !7852
  store i8 %call35, i8* %was_vm, align 1, !dbg !7853
  %29 = load i8, i8* %was_vm, align 1, !dbg !7854
  %tobool36 = icmp ne i8 %29, 0, !dbg !7854
  br i1 %tobool36, label %if.then37, label %if.end42, !dbg !7856

if.then37:                                        ; preds = %if.end30
  %value38 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr20, i32 0, i32 0, !dbg !7857
  %30 = load %union.tree_node*, %union.tree_node** %value38, align 8, !dbg !7857
  %expr_const_operands39 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 3, !dbg !7858
  %call40 = call %union.tree_node* @c_fully_fold(%union.tree_node* %30, i8 zeroext 0, i8* %expr_const_operands39), !dbg !7859
  %expr41 = getelementptr inbounds %struct.c_typespec, %struct.c_typespec* %agg.result, i32 0, i32 2, !dbg !7860
  store %union.tree_node* %call40, %union.tree_node** %expr41, align 8, !dbg !7861
  br label %if.end42, !dbg !7862

if.end42:                                         ; preds = %if.then37, %if.end30
  %31 = load i8, i8* %was_vm, align 1, !dbg !7863
  call void @pop_maybe_used(i8 zeroext %31), !dbg !7864
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end18
  %32 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7865
  call void @c_parser_skip_until_found(%struct.c_parser* %32, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !7866
  br label %return, !dbg !7867

return:                                           ; preds = %if.end43, %if.then
  ret void, !dbg !7868
}

declare dso_local %struct.c_declspecs* @declspecs_add_qual(%struct.c_declspecs*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_attributes(%struct.c_parser* %parser) #0 !dbg !7869 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %attrs = alloca %union.tree_node*, align 8
  %attr = alloca %union.tree_node*, align 8
  %attr_name = alloca %union.tree_node*, align 8
  %attr_args = alloca %union.tree_node*, align 8
  %expr_list = alloca %struct.VEC_tree_gc*, align 8
  %ok = alloca i8, align 1
  %arg1 = alloca %union.tree_node*, align 8
  %tree_list = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !7870, metadata !DIExpression()), !dbg !7871
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs, metadata !7872, metadata !DIExpression()), !dbg !7873
  store %union.tree_node* null, %union.tree_node** %attrs, align 8, !dbg !7873
  br label %while.cond, !dbg !7874

while.cond:                                       ; preds = %if.end114, %entry
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7875
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 52), !dbg !7876
  %tobool = icmp ne i8 %call, 0, !dbg !7874
  br i1 %tobool, label %while.body, label %while.end118, !dbg !7874

while.body:                                       ; preds = %while.cond
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7877
  %lex_untranslated_string = getelementptr inbounds %struct.c_parser, %struct.c_parser* %1, i32 0, i32 2, !dbg !7879
  %bf.load = load i8, i8* %lex_untranslated_string, align 2, !dbg !7880
  %bf.clear = and i8 %bf.load, -9, !dbg !7880
  %bf.set = or i8 %bf.clear, 8, !dbg !7880
  store i8 %bf.set, i8* %lex_untranslated_string, align 2, !dbg !7880
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7881
  call void @c_parser_consume_token(%struct.c_parser* %2), !dbg !7882
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7883
  %call1 = call zeroext i8 @c_parser_require(%struct.c_parser* %3, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !7885
  %tobool2 = icmp ne i8 %call1, 0, !dbg !7885
  br i1 %tobool2, label %if.end, label %if.then, !dbg !7886

if.then:                                          ; preds = %while.body
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7887
  %lex_untranslated_string3 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %4, i32 0, i32 2, !dbg !7889
  %bf.load4 = load i8, i8* %lex_untranslated_string3, align 2, !dbg !7890
  %bf.clear5 = and i8 %bf.load4, -9, !dbg !7890
  store i8 %bf.clear5, i8* %lex_untranslated_string3, align 2, !dbg !7890
  %5 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !7891
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !7892
  br label %return, !dbg !7892

if.end:                                           ; preds = %while.body
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7893
  %call6 = call zeroext i8 @c_parser_require(%struct.c_parser* %6, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !7895
  %tobool7 = icmp ne i8 %call6, 0, !dbg !7895
  br i1 %tobool7, label %if.end12, label %if.then8, !dbg !7896

if.then8:                                         ; preds = %if.end
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7897
  %lex_untranslated_string9 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %7, i32 0, i32 2, !dbg !7899
  %bf.load10 = load i8, i8* %lex_untranslated_string9, align 2, !dbg !7900
  %bf.clear11 = and i8 %bf.load10, -9, !dbg !7900
  store i8 %bf.clear11, i8* %lex_untranslated_string9, align 2, !dbg !7900
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7901
  call void @c_parser_skip_until_found(%struct.c_parser* %8, i32 21, i8* null), !dbg !7902
  %9 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !7903
  store %union.tree_node* %9, %union.tree_node** %retval, align 8, !dbg !7904
  br label %return, !dbg !7904

if.end12:                                         ; preds = %if.end
  br label %while.cond13, !dbg !7905

while.cond13:                                     ; preds = %if.end97, %if.then44, %if.then25, %if.end12
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7906
  %call14 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %10, i32 19), !dbg !7907
  %conv = zext i8 %call14 to i32, !dbg !7907
  %tobool15 = icmp ne i32 %conv, 0, !dbg !7907
  br i1 %tobool15, label %lor.end, label %lor.lhs.false, !dbg !7908

lor.lhs.false:                                    ; preds = %while.cond13
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7909
  %call16 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %11, i32 53), !dbg !7910
  %conv17 = zext i8 %call16 to i32, !dbg !7910
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !7910
  br i1 %tobool18, label %lor.end, label %lor.rhs, !dbg !7911

lor.rhs:                                          ; preds = %lor.lhs.false
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7912
  %call19 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %12, i32 74), !dbg !7913
  %conv20 = zext i8 %call19 to i32, !dbg !7913
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !7911
  br label %lor.end, !dbg !7911

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond13
  %13 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond13 ], [ %tobool21, %lor.rhs ]
  br i1 %13, label %while.body22, label %while.end, !dbg !7905

while.body22:                                     ; preds = %lor.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %attr, metadata !7914, metadata !DIExpression()), !dbg !7916
  call void @llvm.dbg.declare(metadata %union.tree_node** %attr_name, metadata !7917, metadata !DIExpression()), !dbg !7918
  call void @llvm.dbg.declare(metadata %union.tree_node** %attr_args, metadata !7919, metadata !DIExpression()), !dbg !7920
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %expr_list, metadata !7921, metadata !DIExpression()), !dbg !7922
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7923
  %call23 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %14, i32 19), !dbg !7925
  %tobool24 = icmp ne i8 %call23, 0, !dbg !7925
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !7926

if.then25:                                        ; preds = %while.body22
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7927
  call void @c_parser_consume_token(%struct.c_parser* %15), !dbg !7929
  br label %while.cond13, !dbg !7930, !llvm.loop !7931

if.end26:                                         ; preds = %while.body22
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7933
  %call27 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %16, i32 74), !dbg !7935
  %tobool28 = icmp ne i8 %call27, 0, !dbg !7935
  br i1 %tobool28, label %if.then29, label %if.else, !dbg !7936

if.then29:                                        ; preds = %if.end26
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !7937, metadata !DIExpression()), !dbg !7939
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7940
  %call30 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %17), !dbg !7941
  %18 = bitcast %struct.c_token* %call30 to i32*, !dbg !7942
  %bf.load31 = load i32, i32* %18, align 8, !dbg !7942
  %bf.lshr = lshr i32 %bf.load31, 16, !dbg !7942
  %bf.clear32 = and i32 %bf.lshr, 255, !dbg !7942
  switch i32 %bf.clear32, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 11, label %sw.bb
    i32 12, label %sw.bb
    i32 13, label %sw.bb
    i32 14, label %sw.bb
    i32 28, label %sw.bb
    i32 29, label %sw.bb
    i32 30, label %sw.bb
    i32 31, label %sw.bb
    i32 32, label %sw.bb
    i32 60, label %sw.bb
    i32 61, label %sw.bb
    i32 62, label %sw.bb
    i32 69, label %sw.bb
    i32 63, label %sw.bb
    i32 64, label %sw.bb
    i32 15, label %sw.bb
  ], !dbg !7943

sw.bb:                                            ; preds = %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29, %if.then29
  store i8 1, i8* %ok, align 1, !dbg !7944
  br label %sw.epilog, !dbg !7946

sw.default:                                       ; preds = %if.then29
  store i8 0, i8* %ok, align 1, !dbg !7947
  br label %sw.epilog, !dbg !7948

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %19 = load i8, i8* %ok, align 1, !dbg !7949
  %tobool33 = icmp ne i8 %19, 0, !dbg !7949
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !7951

if.then34:                                        ; preds = %sw.epilog
  br label %while.end, !dbg !7952

if.end35:                                         ; preds = %sw.epilog
  %20 = load %union.tree_node**, %union.tree_node*** @ridpointers, align 8, !dbg !7953
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7954
  %call36 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %21), !dbg !7955
  %22 = bitcast %struct.c_token* %call36 to i32*, !dbg !7956
  %bf.load37 = load i32, i32* %22, align 8, !dbg !7956
  %bf.lshr38 = lshr i32 %bf.load37, 16, !dbg !7956
  %bf.clear39 = and i32 %bf.lshr38, 255, !dbg !7956
  %idxprom = sext i32 %bf.clear39 to i64, !dbg !7953
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %20, i64 %idxprom, !dbg !7953
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7953
  store %union.tree_node* %23, %union.tree_node** %attr_name, align 8, !dbg !7957
  br label %if.end41, !dbg !7958

if.else:                                          ; preds = %if.end26
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7959
  %call40 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %24), !dbg !7960
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call40, i32 0, i32 1, !dbg !7961
  %25 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7961
  store %union.tree_node* %25, %union.tree_node** %attr_name, align 8, !dbg !7962
  br label %if.end41

if.end41:                                         ; preds = %if.else, %if.end35
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7963
  call void @c_parser_consume_token(%struct.c_parser* %26), !dbg !7964
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7965
  %call42 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %27, i32 20), !dbg !7967
  %tobool43 = icmp ne i8 %call42, 0, !dbg !7967
  br i1 %tobool43, label %if.then44, label %if.end47, !dbg !7968

if.then44:                                        ; preds = %if.end41
  %28 = load %union.tree_node*, %union.tree_node** %attr_name, align 8, !dbg !7969
  %call45 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* %28, %union.tree_node* null), !dbg !7969
  store %union.tree_node* %call45, %union.tree_node** %attr, align 8, !dbg !7971
  %29 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !7972
  %30 = load %union.tree_node*, %union.tree_node** %attr, align 8, !dbg !7973
  %call46 = call %union.tree_node* @chainon(%union.tree_node* %29, %union.tree_node* %30), !dbg !7974
  store %union.tree_node* %call46, %union.tree_node** %attrs, align 8, !dbg !7975
  br label %while.cond13, !dbg !7976, !llvm.loop !7931

if.end47:                                         ; preds = %if.end41
  %31 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7977
  call void @c_parser_consume_token(%struct.c_parser* %31), !dbg !7978
  %32 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7979
  %call48 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %32, i32 53), !dbg !7981
  %conv49 = zext i8 %call48 to i32, !dbg !7981
  %tobool50 = icmp ne i32 %conv49, 0, !dbg !7981
  br i1 %tobool50, label %land.lhs.true, label %if.else80, !dbg !7982

land.lhs.true:                                    ; preds = %if.end47
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7983
  %call51 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %33), !dbg !7984
  %34 = bitcast %struct.c_token* %call51 to i32*, !dbg !7985
  %bf.load52 = load i32, i32* %34, align 8, !dbg !7985
  %bf.lshr53 = lshr i32 %bf.load52, 8, !dbg !7985
  %bf.clear54 = and i32 %bf.lshr53, 255, !dbg !7985
  %cmp = icmp eq i32 %bf.clear54, 0, !dbg !7986
  br i1 %cmp, label %land.lhs.true56, label %if.else80, !dbg !7987

land.lhs.true56:                                  ; preds = %land.lhs.true
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7988
  %call57 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %35), !dbg !7989
  %36 = bitcast %struct.c_token* %call57 to i32*, !dbg !7990
  %bf.load58 = load i32, i32* %36, align 8, !dbg !7990
  %bf.clear59 = and i32 %bf.load58, 255, !dbg !7990
  %cmp60 = icmp eq i32 %bf.clear59, 19, !dbg !7991
  br i1 %cmp60, label %if.then68, label %lor.lhs.false62, !dbg !7992

lor.lhs.false62:                                  ; preds = %land.lhs.true56
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !7993
  %call63 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %37), !dbg !7994
  %38 = bitcast %struct.c_token* %call63 to i32*, !dbg !7995
  %bf.load64 = load i32, i32* %38, align 8, !dbg !7995
  %bf.clear65 = and i32 %bf.load64, 255, !dbg !7995
  %cmp66 = icmp eq i32 %bf.clear65, 21, !dbg !7996
  br i1 %cmp66, label %if.then68, label %if.else80, !dbg !7997

if.then68:                                        ; preds = %lor.lhs.false62, %land.lhs.true56
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg1, metadata !7998, metadata !DIExpression()), !dbg !8000
  %39 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8001
  %call69 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %39), !dbg !8002
  %value70 = getelementptr inbounds %struct.c_token, %struct.c_token* %call69, i32 0, i32 1, !dbg !8003
  %40 = load %union.tree_node*, %union.tree_node** %value70, align 8, !dbg !8003
  store %union.tree_node* %40, %union.tree_node** %arg1, align 8, !dbg !8000
  %41 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8004
  call void @c_parser_consume_token(%struct.c_parser* %41), !dbg !8005
  %42 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8006
  %call71 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %42, i32 21), !dbg !8008
  %tobool72 = icmp ne i8 %call71, 0, !dbg !8008
  br i1 %tobool72, label %if.then73, label %if.else75, !dbg !8009

if.then73:                                        ; preds = %if.then68
  %43 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !8010
  %call74 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* null, %union.tree_node* %43), !dbg !8010
  store %union.tree_node* %call74, %union.tree_node** %attr_args, align 8, !dbg !8011
  br label %if.end79, !dbg !8012

if.else75:                                        ; preds = %if.then68
  call void @llvm.dbg.declare(metadata %union.tree_node** %tree_list, metadata !8013, metadata !DIExpression()), !dbg !8015
  %44 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8016
  call void @c_parser_consume_token(%struct.c_parser* %44), !dbg !8017
  %45 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8018
  %call76 = call %struct.VEC_tree_gc* @c_parser_expr_list(%struct.c_parser* %45, i8 zeroext 0, i8 zeroext 1, %struct.VEC_tree_gc** null), !dbg !8019
  store %struct.VEC_tree_gc* %call76, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !8020
  %46 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !8021
  %call77 = call %union.tree_node* @build_tree_list_vec_stat(%struct.VEC_tree_gc* %46), !dbg !8021
  store %union.tree_node* %call77, %union.tree_node** %tree_list, align 8, !dbg !8022
  %47 = load %union.tree_node*, %union.tree_node** %arg1, align 8, !dbg !8023
  %48 = load %union.tree_node*, %union.tree_node** %tree_list, align 8, !dbg !8023
  %call78 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %47, %union.tree_node* %48), !dbg !8023
  store %union.tree_node* %call78, %union.tree_node** %attr_args, align 8, !dbg !8024
  %49 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !8025
  call void @release_tree_vector(%struct.VEC_tree_gc* %49), !dbg !8026
  br label %if.end79

if.end79:                                         ; preds = %if.else75, %if.then73
  br label %if.end88, !dbg !8027

if.else80:                                        ; preds = %lor.lhs.false62, %land.lhs.true, %if.end47
  %50 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8028
  %call81 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %50, i32 21), !dbg !8031
  %tobool82 = icmp ne i8 %call81, 0, !dbg !8031
  br i1 %tobool82, label %if.then83, label %if.else84, !dbg !8032

if.then83:                                        ; preds = %if.else80
  store %union.tree_node* null, %union.tree_node** %attr_args, align 8, !dbg !8033
  br label %if.end87, !dbg !8034

if.else84:                                        ; preds = %if.else80
  %51 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8035
  %call85 = call %struct.VEC_tree_gc* @c_parser_expr_list(%struct.c_parser* %51, i8 zeroext 0, i8 zeroext 1, %struct.VEC_tree_gc** null), !dbg !8037
  store %struct.VEC_tree_gc* %call85, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !8038
  %52 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !8039
  %call86 = call %union.tree_node* @build_tree_list_vec_stat(%struct.VEC_tree_gc* %52), !dbg !8039
  store %union.tree_node* %call86, %union.tree_node** %attr_args, align 8, !dbg !8040
  %53 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !8041
  call void @release_tree_vector(%struct.VEC_tree_gc* %53), !dbg !8042
  br label %if.end87

if.end87:                                         ; preds = %if.else84, %if.then83
  br label %if.end88

if.end88:                                         ; preds = %if.end87, %if.end79
  %54 = load %union.tree_node*, %union.tree_node** %attr_name, align 8, !dbg !8043
  %55 = load %union.tree_node*, %union.tree_node** %attr_args, align 8, !dbg !8043
  %call89 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* %54, %union.tree_node* %55), !dbg !8043
  store %union.tree_node* %call89, %union.tree_node** %attr, align 8, !dbg !8044
  %56 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8045
  %call90 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %56, i32 21), !dbg !8047
  %tobool91 = icmp ne i8 %call90, 0, !dbg !8047
  br i1 %tobool91, label %if.then92, label %if.else93, !dbg !8048

if.then92:                                        ; preds = %if.end88
  %57 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8049
  call void @c_parser_consume_token(%struct.c_parser* %57), !dbg !8050
  br label %if.end97, !dbg !8050

if.else93:                                        ; preds = %if.end88
  %58 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8051
  %lex_untranslated_string94 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %58, i32 0, i32 2, !dbg !8053
  %bf.load95 = load i8, i8* %lex_untranslated_string94, align 2, !dbg !8054
  %bf.clear96 = and i8 %bf.load95, -9, !dbg !8054
  store i8 %bf.clear96, i8* %lex_untranslated_string94, align 2, !dbg !8054
  %59 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8055
  call void @c_parser_skip_until_found(%struct.c_parser* %59, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !8056
  %60 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !8057
  store %union.tree_node* %60, %union.tree_node** %retval, align 8, !dbg !8058
  br label %return, !dbg !8058

if.end97:                                         ; preds = %if.then92
  %61 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !8059
  %62 = load %union.tree_node*, %union.tree_node** %attr, align 8, !dbg !8060
  %call98 = call %union.tree_node* @chainon(%union.tree_node* %61, %union.tree_node* %62), !dbg !8061
  store %union.tree_node* %call98, %union.tree_node** %attrs, align 8, !dbg !8062
  br label %while.cond13, !dbg !7905, !llvm.loop !7931

while.end:                                        ; preds = %if.then34, %lor.end
  %63 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8063
  %call99 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %63, i32 21), !dbg !8065
  %tobool100 = icmp ne i8 %call99, 0, !dbg !8065
  br i1 %tobool100, label %if.then101, label %if.else102, !dbg !8066

if.then101:                                       ; preds = %while.end
  %64 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8067
  call void @c_parser_consume_token(%struct.c_parser* %64), !dbg !8068
  br label %if.end106, !dbg !8068

if.else102:                                       ; preds = %while.end
  %65 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8069
  %lex_untranslated_string103 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %65, i32 0, i32 2, !dbg !8071
  %bf.load104 = load i8, i8* %lex_untranslated_string103, align 2, !dbg !8072
  %bf.clear105 = and i8 %bf.load104, -9, !dbg !8072
  store i8 %bf.clear105, i8* %lex_untranslated_string103, align 2, !dbg !8072
  %66 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8073
  call void @c_parser_skip_until_found(%struct.c_parser* %66, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !8074
  %67 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !8075
  store %union.tree_node* %67, %union.tree_node** %retval, align 8, !dbg !8076
  br label %return, !dbg !8076

if.end106:                                        ; preds = %if.then101
  %68 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8077
  %call107 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %68, i32 21), !dbg !8079
  %tobool108 = icmp ne i8 %call107, 0, !dbg !8079
  br i1 %tobool108, label %if.then109, label %if.else110, !dbg !8080

if.then109:                                       ; preds = %if.end106
  %69 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8081
  call void @c_parser_consume_token(%struct.c_parser* %69), !dbg !8082
  br label %if.end114, !dbg !8082

if.else110:                                       ; preds = %if.end106
  %70 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8083
  %lex_untranslated_string111 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %70, i32 0, i32 2, !dbg !8085
  %bf.load112 = load i8, i8* %lex_untranslated_string111, align 2, !dbg !8086
  %bf.clear113 = and i8 %bf.load112, -9, !dbg !8086
  store i8 %bf.clear113, i8* %lex_untranslated_string111, align 2, !dbg !8086
  %71 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8087
  call void @c_parser_skip_until_found(%struct.c_parser* %71, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !8088
  %72 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !8089
  store %union.tree_node* %72, %union.tree_node** %retval, align 8, !dbg !8090
  br label %return, !dbg !8090

if.end114:                                        ; preds = %if.then109
  %73 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8091
  %lex_untranslated_string115 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %73, i32 0, i32 2, !dbg !8092
  %bf.load116 = load i8, i8* %lex_untranslated_string115, align 2, !dbg !8093
  %bf.clear117 = and i8 %bf.load116, -9, !dbg !8093
  store i8 %bf.clear117, i8* %lex_untranslated_string115, align 2, !dbg !8093
  br label %while.cond, !dbg !7874, !llvm.loop !8094

while.end118:                                     ; preds = %while.cond
  %74 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !8096
  store %union.tree_node* %74, %union.tree_node** %retval, align 8, !dbg !8097
  br label %return, !dbg !8097

return:                                           ; preds = %while.end118, %if.else110, %if.else102, %if.else93, %if.then8, %if.then
  %75 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8098
  ret %union.tree_node* %75, !dbg !8098
}

declare dso_local %struct.c_declspecs* @declspecs_add_attrs(%struct.c_declspecs*, %union.tree_node*) #2

declare dso_local %union.tree_node* @start_enum(i32, %struct.c_enum_contents*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_expr_no_commas(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser, %struct.c_expr* %after) #0 !dbg !8099 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %after.addr = alloca %struct.c_expr*, align 8
  %lhs = alloca %struct.c_expr, align 8
  %rhs = alloca %struct.c_expr, align 8
  %ret = alloca %struct.c_expr, align 8
  %code = alloca i32, align 4
  %op_location = alloca i32, align 4
  %exp_location = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %tmp14 = alloca %struct.c_expr, align 8
  %tmp15 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !8100, metadata !DIExpression()), !dbg !8101
  store %struct.c_expr* %after, %struct.c_expr** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_expr** %after.addr, metadata !8102, metadata !DIExpression()), !dbg !8103
  call void @llvm.dbg.declare(metadata %struct.c_expr* %lhs, metadata !8104, metadata !DIExpression()), !dbg !8105
  call void @llvm.dbg.declare(metadata %struct.c_expr* %rhs, metadata !8106, metadata !DIExpression()), !dbg !8107
  call void @llvm.dbg.declare(metadata %struct.c_expr* %ret, metadata !8108, metadata !DIExpression()), !dbg !8109
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8110, metadata !DIExpression()), !dbg !8111
  call void @llvm.dbg.declare(metadata i32* %op_location, metadata !8112, metadata !DIExpression()), !dbg !8113
  call void @llvm.dbg.declare(metadata i32* %exp_location, metadata !8114, metadata !DIExpression()), !dbg !8115
  %0 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !8116
  %tobool = icmp ne %struct.c_expr* %0, null, !dbg !8116
  br i1 %tobool, label %lor.lhs.false, label %cond.false, !dbg !8116

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @c_language, align 4, !dbg !8116
  %and = and i32 %1, 1, !dbg !8116
  %cmp = icmp ne i32 %and, 0, !dbg !8116
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8116

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4564, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8116
  br label %cond.end, !dbg !8116

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !8116

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8116
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8117
  %3 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !8118
  call void @c_parser_conditional_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %2, %struct.c_expr* %3), !dbg !8119
  %4 = bitcast %struct.c_expr* %lhs to i8*, !dbg !8119
  %5 = bitcast %struct.c_expr* %tmp to i8*, !dbg !8119
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !8119
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8120
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %6), !dbg !8121
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !8122
  %7 = load i32, i32* %location, align 8, !dbg !8122
  store i32 %7, i32* %op_location, align 4, !dbg !8123
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8124
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %8), !dbg !8125
  %9 = bitcast %struct.c_token* %call1 to i32*, !dbg !8126
  %bf.load = load i32, i32* %9, align 8, !dbg !8126
  %bf.clear = and i32 %bf.load, 255, !dbg !8126
  switch i32 %bf.clear, label %sw.default [
    i32 0, label %sw.bb
    i32 29, label %sw.bb2
    i32 30, label %sw.bb3
    i32 31, label %sw.bb4
    i32 27, label %sw.bb5
    i32 28, label %sw.bb6
    i32 36, label %sw.bb7
    i32 35, label %sw.bb8
    i32 32, label %sw.bb9
    i32 34, label %sw.bb10
    i32 33, label %sw.bb11
  ], !dbg !8127

sw.bb:                                            ; preds = %cond.end
  store i32 116, i32* %code, align 4, !dbg !8128
  br label %sw.epilog, !dbg !8130

sw.bb2:                                           ; preds = %cond.end
  store i32 65, i32* %code, align 4, !dbg !8131
  br label %sw.epilog, !dbg !8132

sw.bb3:                                           ; preds = %cond.end
  store i32 67, i32* %code, align 4, !dbg !8133
  br label %sw.epilog, !dbg !8134

sw.bb4:                                           ; preds = %cond.end
  store i32 71, i32* %code, align 4, !dbg !8135
  br label %sw.epilog, !dbg !8136

sw.bb5:                                           ; preds = %cond.end
  store i32 63, i32* %code, align 4, !dbg !8137
  br label %sw.epilog, !dbg !8138

sw.bb6:                                           ; preds = %cond.end
  store i32 64, i32* %code, align 4, !dbg !8139
  br label %sw.epilog, !dbg !8140

sw.bb7:                                           ; preds = %cond.end
  store i32 83, i32* %code, align 4, !dbg !8141
  br label %sw.epilog, !dbg !8142

sw.bb8:                                           ; preds = %cond.end
  store i32 84, i32* %code, align 4, !dbg !8143
  br label %sw.epilog, !dbg !8144

sw.bb9:                                           ; preds = %cond.end
  store i32 89, i32* %code, align 4, !dbg !8145
  br label %sw.epilog, !dbg !8146

sw.bb10:                                          ; preds = %cond.end
  store i32 88, i32* %code, align 4, !dbg !8147
  br label %sw.epilog, !dbg !8148

sw.bb11:                                          ; preds = %cond.end
  store i32 87, i32* %code, align 4, !dbg !8149
  br label %sw.epilog, !dbg !8150

sw.default:                                       ; preds = %cond.end
  %10 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8151
  %11 = bitcast %struct.c_expr* %lhs to i8*, !dbg !8151
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !8151
  br label %return, !dbg !8152

sw.epilog:                                        ; preds = %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8153
  call void @c_parser_consume_token(%struct.c_parser* %12), !dbg !8154
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8155
  %call12 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %13), !dbg !8156
  %location13 = getelementptr inbounds %struct.c_token, %struct.c_token* %call12, i32 0, i32 2, !dbg !8157
  %14 = load i32, i32* %location13, align 8, !dbg !8157
  store i32 %14, i32* %exp_location, align 4, !dbg !8158
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8159
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp14, %struct.c_parser* %15, %struct.c_expr* null), !dbg !8160
  %16 = bitcast %struct.c_expr* %rhs to i8*, !dbg !8160
  %17 = bitcast %struct.c_expr* %tmp14 to i8*, !dbg !8160
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 24, i1 false), !dbg !8160
  %18 = load i32, i32* %exp_location, align 4, !dbg !8161
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp15, i32 %18, %struct.c_expr* byval(%struct.c_expr) align 8 %rhs), !dbg !8162
  %19 = bitcast %struct.c_expr* %rhs to i8*, !dbg !8162
  %20 = bitcast %struct.c_expr* %tmp15 to i8*, !dbg !8162
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false), !dbg !8162
  %21 = load i32, i32* %op_location, align 4, !dbg !8163
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %lhs, i32 0, i32 0, !dbg !8164
  %22 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !8164
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %lhs, i32 0, i32 2, !dbg !8165
  %23 = load %union.tree_node*, %union.tree_node** %original_type, align 8, !dbg !8165
  %24 = load i32, i32* %code, align 4, !dbg !8166
  %25 = load i32, i32* %exp_location, align 4, !dbg !8167
  %value16 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %rhs, i32 0, i32 0, !dbg !8168
  %26 = load %union.tree_node*, %union.tree_node** %value16, align 8, !dbg !8168
  %original_type17 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %rhs, i32 0, i32 2, !dbg !8169
  %27 = load %union.tree_node*, %union.tree_node** %original_type17, align 8, !dbg !8169
  %call18 = call %union.tree_node* @build_modify_expr(i32 %21, %union.tree_node* %22, %union.tree_node* %23, i32 %24, i32 %25, %union.tree_node* %26, %union.tree_node* %27), !dbg !8170
  %value19 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 0, !dbg !8171
  store %union.tree_node* %call18, %union.tree_node** %value19, align 8, !dbg !8172
  %28 = load i32, i32* %code, align 4, !dbg !8173
  %cmp20 = icmp eq i32 %28, 116, !dbg !8175
  br i1 %cmp20, label %if.then, label %if.else, !dbg !8176

if.then:                                          ; preds = %sw.epilog
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 1, !dbg !8177
  store i32 53, i32* %original_code, align 8, !dbg !8178
  br label %if.end, !dbg !8179

if.else:                                          ; preds = %sw.epilog
  %value21 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 0, !dbg !8180
  %29 = load %union.tree_node*, %union.tree_node** %value21, align 8, !dbg !8180
  %base = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !8180
  %30 = bitcast %struct.tree_base* %base to i64*, !dbg !8180
  %bf.load22 = load i64, i64* %30, align 8, !dbg !8182
  %bf.clear23 = and i64 %bf.load22, -8388609, !dbg !8182
  %bf.set = or i64 %bf.clear23, 8388608, !dbg !8182
  store i64 %bf.set, i64* %30, align 8, !dbg !8182
  %original_code24 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 1, !dbg !8183
  store i32 0, i32* %original_code24, align 8, !dbg !8184
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %original_type25 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 2, !dbg !8185
  store %union.tree_node* null, %union.tree_node** %original_type25, align 8, !dbg !8186
  %31 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8187
  %32 = bitcast %struct.c_expr* %ret to i8*, !dbg !8187
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 24, i1 false), !dbg !8187
  br label %return, !dbg !8188

return:                                           ; preds = %if.end, %sw.default
  ret void, !dbg !8189
}

declare dso_local %union.tree_node* @build_enumerator(i32, %struct.c_enum_contents*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @finish_enum(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @nreverse(%union.tree_node*) #2

declare dso_local void @parser_xref_tag(%struct.c_typespec* sret, i32, i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_conditional_expression(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser, %struct.c_expr* %after) #0 !dbg !8190 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %after.addr = alloca %struct.c_expr*, align 8
  %cond = alloca %struct.c_expr, align 8
  %exp1 = alloca %struct.c_expr, align 8
  %exp2 = alloca %struct.c_expr, align 8
  %ret = alloca %struct.c_expr, align 8
  %cond_loc = alloca i32, align 4
  %colon_loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %tmp4 = alloca %struct.c_expr, align 8
  %eptype = alloca %union.tree_node*, align 8
  %tmp40 = alloca %struct.c_expr, align 8
  %exp2_loc = alloca i32, align 4
  %tmp63 = alloca %struct.c_expr, align 8
  %tmp64 = alloca %struct.c_expr, align 8
  %t1 = alloca %union.tree_node*, align 8
  %t2 = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !8191, metadata !DIExpression()), !dbg !8192
  store %struct.c_expr* %after, %struct.c_expr** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_expr** %after.addr, metadata !8193, metadata !DIExpression()), !dbg !8194
  call void @llvm.dbg.declare(metadata %struct.c_expr* %cond, metadata !8195, metadata !DIExpression()), !dbg !8196
  call void @llvm.dbg.declare(metadata %struct.c_expr* %exp1, metadata !8197, metadata !DIExpression()), !dbg !8198
  call void @llvm.dbg.declare(metadata %struct.c_expr* %exp2, metadata !8199, metadata !DIExpression()), !dbg !8200
  call void @llvm.dbg.declare(metadata %struct.c_expr* %ret, metadata !8201, metadata !DIExpression()), !dbg !8202
  call void @llvm.dbg.declare(metadata i32* %cond_loc, metadata !8203, metadata !DIExpression()), !dbg !8204
  call void @llvm.dbg.declare(metadata i32* %colon_loc, metadata !8205, metadata !DIExpression()), !dbg !8206
  %0 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !8207
  %tobool = icmp ne %struct.c_expr* %0, null, !dbg !8207
  br i1 %tobool, label %lor.lhs.false, label %cond.false, !dbg !8207

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @c_language, align 4, !dbg !8207
  %and = and i32 %1, 1, !dbg !8207
  %cmp = icmp ne i32 %and, 0, !dbg !8207
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8207

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4643, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8207
  br label %cond.end, !dbg !8207

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !8207

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8207
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8208
  %3 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !8209
  call void @c_parser_binary_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %2, %struct.c_expr* %3), !dbg !8210
  %4 = bitcast %struct.c_expr* %cond to i8*, !dbg !8210
  %5 = bitcast %struct.c_expr* %tmp to i8*, !dbg !8210
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !8210
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8211
  %call = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %6, i32 17), !dbg !8213
  %tobool2 = icmp ne i8 %call, 0, !dbg !8213
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8214

if.then:                                          ; preds = %cond.end
  %7 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8215
  %8 = bitcast %struct.c_expr* %cond to i8*, !dbg !8215
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 24, i1 false), !dbg !8215
  br label %return, !dbg !8216

if.end:                                           ; preds = %cond.end
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8217
  %call3 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %9), !dbg !8218
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call3, i32 0, i32 2, !dbg !8219
  %10 = load i32, i32* %location, align 8, !dbg !8219
  store i32 %10, i32* %cond_loc, align 4, !dbg !8220
  %11 = load i32, i32* %cond_loc, align 4, !dbg !8221
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp4, i32 %11, %struct.c_expr* byval(%struct.c_expr) align 8 %cond), !dbg !8222
  %12 = bitcast %struct.c_expr* %cond to i8*, !dbg !8222
  %13 = bitcast %struct.c_expr* %tmp4 to i8*, !dbg !8222
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false), !dbg !8222
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8223
  call void @c_parser_consume_token(%struct.c_parser* %14), !dbg !8224
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8225
  %call5 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %15, i32 18), !dbg !8227
  %tobool6 = icmp ne i8 %call5, 0, !dbg !8227
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !8228

if.then7:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %eptype, metadata !8229, metadata !DIExpression()), !dbg !8231
  store %union.tree_node* null, %union.tree_node** %eptype, align 8, !dbg !8231
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8232
  %call8 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %16), !dbg !8233
  %location9 = getelementptr inbounds %struct.c_token, %struct.c_token* %call8, i32 0, i32 2, !dbg !8234
  %17 = load i32, i32* %location9, align 8, !dbg !8234
  %call10 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %17, i32 834, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.21, i64 0, i64 0)), !dbg !8235
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8236
  %18 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !8236
  %base = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !8236
  %19 = bitcast %struct.tree_base* %base to i64*, !dbg !8236
  %bf.load = load i64, i64* %19, align 8, !dbg !8236
  %bf.clear = and i64 %bf.load, 65535, !dbg !8236
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8236
  %cmp11 = icmp eq i32 %bf.cast, 190, !dbg !8238
  br i1 %cmp11, label %if.then12, label %if.end16, !dbg !8239

if.then12:                                        ; preds = %if.then7
  %value13 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8240
  %20 = load %union.tree_node*, %union.tree_node** %value13, align 8, !dbg !8240
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !8240
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8240
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8240
  store %union.tree_node* %21, %union.tree_node** %eptype, align 8, !dbg !8242
  %value14 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8243
  %22 = load %union.tree_node*, %union.tree_node** %value14, align 8, !dbg !8243
  %exp = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !8243
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8243
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8243
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8243
  %value15 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8244
  store %union.tree_node* %23, %union.tree_node** %value15, align 8, !dbg !8245
  br label %if.end16, !dbg !8246

if.end16:                                         ; preds = %if.then12, %if.then7
  %value17 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8247
  %24 = load %union.tree_node*, %union.tree_node** %value17, align 8, !dbg !8247
  %call18 = call %union.tree_node* @default_conversion(%union.tree_node* %24), !dbg !8248
  %call19 = call %union.tree_node* @c_save_expr(%union.tree_node* %call18), !dbg !8249
  %value20 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp1, i32 0, i32 0, !dbg !8250
  store %union.tree_node* %call19, %union.tree_node** %value20, align 8, !dbg !8251
  %25 = load %union.tree_node*, %union.tree_node** %eptype, align 8, !dbg !8252
  %tobool21 = icmp ne %union.tree_node* %25, null, !dbg !8252
  br i1 %tobool21, label %if.then22, label %if.end26, !dbg !8254

if.then22:                                        ; preds = %if.end16
  %26 = load %union.tree_node*, %union.tree_node** %eptype, align 8, !dbg !8255
  %value23 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp1, i32 0, i32 0, !dbg !8255
  %27 = load %union.tree_node*, %union.tree_node** %value23, align 8, !dbg !8255
  %call24 = call %union.tree_node* @build1_stat(i32 190, %union.tree_node* %26, %union.tree_node* %27), !dbg !8255
  %value25 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp1, i32 0, i32 0, !dbg !8256
  store %union.tree_node* %call24, %union.tree_node** %value25, align 8, !dbg !8257
  br label %if.end26, !dbg !8258

if.end26:                                         ; preds = %if.then22, %if.end16
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp1, i32 0, i32 2, !dbg !8259
  store %union.tree_node* null, %union.tree_node** %original_type, align 8, !dbg !8260
  %28 = load i32, i32* %cond_loc, align 4, !dbg !8261
  %value27 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp1, i32 0, i32 0, !dbg !8262
  %29 = load %union.tree_node*, %union.tree_node** %value27, align 8, !dbg !8262
  %call28 = call %union.tree_node* @c_objc_common_truthvalue_conversion(i32 %28, %union.tree_node* %29), !dbg !8263
  %value29 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8264
  store %union.tree_node* %call28, %union.tree_node** %value29, align 8, !dbg !8265
  %value30 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8266
  %30 = load %union.tree_node*, %union.tree_node** %value30, align 8, !dbg !8266
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 46), align 16, !dbg !8267
  %cmp31 = icmp eq %union.tree_node* %30, %31, !dbg !8268
  %conv = zext i1 %cmp31 to i32, !dbg !8268
  %32 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8269
  %add = add nsw i32 %32, %conv, !dbg !8269
  store i32 %add, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8269
  br label %if.end48, !dbg !8270

if.else:                                          ; preds = %if.end
  %33 = load i32, i32* %cond_loc, align 4, !dbg !8271
  %value32 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8273
  %34 = load %union.tree_node*, %union.tree_node** %value32, align 8, !dbg !8273
  %call33 = call %union.tree_node* @default_conversion(%union.tree_node* %34), !dbg !8274
  %call34 = call %union.tree_node* @c_objc_common_truthvalue_conversion(i32 %33, %union.tree_node* %call33), !dbg !8275
  %value35 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8276
  store %union.tree_node* %call34, %union.tree_node** %value35, align 8, !dbg !8277
  %value36 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8278
  %35 = load %union.tree_node*, %union.tree_node** %value36, align 8, !dbg !8278
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 47), align 8, !dbg !8279
  %cmp37 = icmp eq %union.tree_node* %35, %36, !dbg !8280
  %conv38 = zext i1 %cmp37 to i32, !dbg !8280
  %37 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8281
  %add39 = add nsw i32 %37, %conv38, !dbg !8281
  store i32 %add39, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8281
  %38 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8282
  call void @c_parser_expression_conv(%struct.c_expr* sret %tmp40, %struct.c_parser* %38), !dbg !8283
  %39 = bitcast %struct.c_expr* %exp1 to i8*, !dbg !8283
  %40 = bitcast %struct.c_expr* %tmp40 to i8*, !dbg !8283
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 24, i1 false), !dbg !8283
  %value41 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8284
  %41 = load %union.tree_node*, %union.tree_node** %value41, align 8, !dbg !8284
  %42 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 46), align 16, !dbg !8285
  %cmp42 = icmp eq %union.tree_node* %41, %42, !dbg !8286
  %conv43 = zext i1 %cmp42 to i32, !dbg !8286
  %value44 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8287
  %43 = load %union.tree_node*, %union.tree_node** %value44, align 8, !dbg !8287
  %44 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 47), align 8, !dbg !8288
  %cmp45 = icmp eq %union.tree_node* %43, %44, !dbg !8289
  %conv46 = zext i1 %cmp45 to i32, !dbg !8289
  %sub = sub nsw i32 %conv43, %conv46, !dbg !8290
  %45 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8291
  %add47 = add nsw i32 %45, %sub, !dbg !8291
  store i32 %add47, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8291
  br label %if.end48

if.end48:                                         ; preds = %if.else, %if.end26
  %46 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8292
  %call49 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %46), !dbg !8293
  %location50 = getelementptr inbounds %struct.c_token, %struct.c_token* %call49, i32 0, i32 2, !dbg !8294
  %47 = load i32, i32* %location50, align 8, !dbg !8294
  store i32 %47, i32* %colon_loc, align 4, !dbg !8295
  %48 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8296
  %call51 = call zeroext i8 @c_parser_require(%struct.c_parser* %48, i32 18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)), !dbg !8298
  %tobool52 = icmp ne i8 %call51, 0, !dbg !8298
  br i1 %tobool52, label %if.end60, label %if.then53, !dbg !8299

if.then53:                                        ; preds = %if.end48
  %value54 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8300
  %49 = load %union.tree_node*, %union.tree_node** %value54, align 8, !dbg !8300
  %50 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 46), align 16, !dbg !8302
  %cmp55 = icmp eq %union.tree_node* %49, %50, !dbg !8303
  %conv56 = zext i1 %cmp55 to i32, !dbg !8303
  %51 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8304
  %sub57 = sub nsw i32 %51, %conv56, !dbg !8304
  store i32 %sub57, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8304
  %52 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8305
  %value58 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 0, !dbg !8306
  store %union.tree_node* %52, %union.tree_node** %value58, align 8, !dbg !8307
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 1, !dbg !8308
  store i32 0, i32* %original_code, align 8, !dbg !8309
  %original_type59 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 2, !dbg !8310
  store %union.tree_node* null, %union.tree_node** %original_type59, align 8, !dbg !8311
  %53 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8312
  %54 = bitcast %struct.c_expr* %ret to i8*, !dbg !8312
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 24, i1 false), !dbg !8312
  br label %return, !dbg !8313

if.end60:                                         ; preds = %if.end48
  call void @llvm.dbg.declare(metadata i32* %exp2_loc, metadata !8314, metadata !DIExpression()), !dbg !8316
  %55 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8317
  %call61 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %55), !dbg !8318
  %location62 = getelementptr inbounds %struct.c_token, %struct.c_token* %call61, i32 0, i32 2, !dbg !8319
  %56 = load i32, i32* %location62, align 8, !dbg !8319
  store i32 %56, i32* %exp2_loc, align 4, !dbg !8316
  %57 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8320
  call void @c_parser_conditional_expression(%struct.c_expr* sret %tmp63, %struct.c_parser* %57, %struct.c_expr* null), !dbg !8321
  %58 = bitcast %struct.c_expr* %exp2 to i8*, !dbg !8321
  %59 = bitcast %struct.c_expr* %tmp63 to i8*, !dbg !8321
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 24, i1 false), !dbg !8321
  %60 = load i32, i32* %exp2_loc, align 4, !dbg !8322
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp64, i32 %60, %struct.c_expr* byval(%struct.c_expr) align 8 %exp2), !dbg !8323
  %61 = bitcast %struct.c_expr* %exp2 to i8*, !dbg !8323
  %62 = bitcast %struct.c_expr* %tmp64 to i8*, !dbg !8323
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false), !dbg !8323
  %value65 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8324
  %63 = load %union.tree_node*, %union.tree_node** %value65, align 8, !dbg !8324
  %64 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 46), align 16, !dbg !8325
  %cmp66 = icmp eq %union.tree_node* %63, %64, !dbg !8326
  %conv67 = zext i1 %cmp66 to i32, !dbg !8326
  %65 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8327
  %sub68 = sub nsw i32 %65, %conv67, !dbg !8327
  store i32 %sub68, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8327
  %66 = load i32, i32* %colon_loc, align 4, !dbg !8328
  %value69 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 0, !dbg !8329
  %67 = load %union.tree_node*, %union.tree_node** %value69, align 8, !dbg !8329
  %original_code70 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond, i32 0, i32 1, !dbg !8330
  %68 = load i32, i32* %original_code70, align 8, !dbg !8330
  %cmp71 = icmp eq i32 %68, 189, !dbg !8331
  %conv72 = zext i1 %cmp71 to i32, !dbg !8331
  %conv73 = trunc i32 %conv72 to i8, !dbg !8332
  %value74 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp1, i32 0, i32 0, !dbg !8333
  %69 = load %union.tree_node*, %union.tree_node** %value74, align 8, !dbg !8333
  %original_type75 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp1, i32 0, i32 2, !dbg !8334
  %70 = load %union.tree_node*, %union.tree_node** %original_type75, align 8, !dbg !8334
  %value76 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp2, i32 0, i32 0, !dbg !8335
  %71 = load %union.tree_node*, %union.tree_node** %value76, align 8, !dbg !8335
  %original_type77 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp2, i32 0, i32 2, !dbg !8336
  %72 = load %union.tree_node*, %union.tree_node** %original_type77, align 8, !dbg !8336
  %call78 = call %union.tree_node* @build_conditional_expr(i32 %66, %union.tree_node* %67, i8 zeroext %conv73, %union.tree_node* %69, %union.tree_node* %70, %union.tree_node* %71, %union.tree_node* %72), !dbg !8337
  %value79 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 0, !dbg !8338
  store %union.tree_node* %call78, %union.tree_node** %value79, align 8, !dbg !8339
  %original_code80 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 1, !dbg !8340
  store i32 0, i32* %original_code80, align 8, !dbg !8341
  %value81 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp1, i32 0, i32 0, !dbg !8342
  %73 = load %union.tree_node*, %union.tree_node** %value81, align 8, !dbg !8342
  %74 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8344
  %cmp82 = icmp eq %union.tree_node* %73, %74, !dbg !8345
  br i1 %cmp82, label %if.then88, label %lor.lhs.false84, !dbg !8346

lor.lhs.false84:                                  ; preds = %if.end60
  %value85 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp2, i32 0, i32 0, !dbg !8347
  %75 = load %union.tree_node*, %union.tree_node** %value85, align 8, !dbg !8347
  %76 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8348
  %cmp86 = icmp eq %union.tree_node* %75, %76, !dbg !8349
  br i1 %cmp86, label %if.then88, label %if.else90, !dbg !8350

if.then88:                                        ; preds = %lor.lhs.false84, %if.end60
  %original_type89 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 2, !dbg !8351
  store %union.tree_node* null, %union.tree_node** %original_type89, align 8, !dbg !8352
  br label %if.end126, !dbg !8353

if.else90:                                        ; preds = %lor.lhs.false84
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1, metadata !8354, metadata !DIExpression()), !dbg !8356
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2, metadata !8357, metadata !DIExpression()), !dbg !8358
  %original_type91 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp1, i32 0, i32 2, !dbg !8359
  %77 = load %union.tree_node*, %union.tree_node** %original_type91, align 8, !dbg !8359
  %tobool92 = icmp ne %union.tree_node* %77, null, !dbg !8360
  br i1 %tobool92, label %cond.true93, label %cond.false95, !dbg !8360

cond.true93:                                      ; preds = %if.else90
  %original_type94 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp1, i32 0, i32 2, !dbg !8361
  %78 = load %union.tree_node*, %union.tree_node** %original_type94, align 8, !dbg !8361
  br label %cond.end99, !dbg !8360

cond.false95:                                     ; preds = %if.else90
  %value96 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp1, i32 0, i32 0, !dbg !8362
  %79 = load %union.tree_node*, %union.tree_node** %value96, align 8, !dbg !8362
  %common97 = bitcast %union.tree_node* %79 to %struct.tree_common*, !dbg !8362
  %type98 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common97, i32 0, i32 2, !dbg !8362
  %80 = load %union.tree_node*, %union.tree_node** %type98, align 8, !dbg !8362
  br label %cond.end99, !dbg !8360

cond.end99:                                       ; preds = %cond.false95, %cond.true93
  %cond100 = phi %union.tree_node* [ %78, %cond.true93 ], [ %80, %cond.false95 ], !dbg !8360
  store %union.tree_node* %cond100, %union.tree_node** %t1, align 8, !dbg !8363
  %original_type101 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp2, i32 0, i32 2, !dbg !8364
  %81 = load %union.tree_node*, %union.tree_node** %original_type101, align 8, !dbg !8364
  %tobool102 = icmp ne %union.tree_node* %81, null, !dbg !8365
  br i1 %tobool102, label %cond.true103, label %cond.false105, !dbg !8365

cond.true103:                                     ; preds = %cond.end99
  %original_type104 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp2, i32 0, i32 2, !dbg !8366
  %82 = load %union.tree_node*, %union.tree_node** %original_type104, align 8, !dbg !8366
  br label %cond.end109, !dbg !8365

cond.false105:                                    ; preds = %cond.end99
  %value106 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %exp2, i32 0, i32 0, !dbg !8367
  %83 = load %union.tree_node*, %union.tree_node** %value106, align 8, !dbg !8367
  %common107 = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !8367
  %type108 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common107, i32 0, i32 2, !dbg !8367
  %84 = load %union.tree_node*, %union.tree_node** %type108, align 8, !dbg !8367
  br label %cond.end109, !dbg !8365

cond.end109:                                      ; preds = %cond.false105, %cond.true103
  %cond110 = phi %union.tree_node* [ %82, %cond.true103 ], [ %84, %cond.false105 ], !dbg !8365
  store %union.tree_node* %cond110, %union.tree_node** %t2, align 8, !dbg !8368
  %85 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !8369
  %86 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8370
  %cmp111 = icmp ne %union.tree_node* %85, %86, !dbg !8371
  br i1 %cmp111, label %land.lhs.true, label %cond.false122, !dbg !8372

land.lhs.true:                                    ; preds = %cond.end109
  %87 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !8373
  %88 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8374
  %cmp113 = icmp ne %union.tree_node* %87, %88, !dbg !8375
  br i1 %cmp113, label %land.lhs.true115, label %cond.false122, !dbg !8376

land.lhs.true115:                                 ; preds = %land.lhs.true
  %89 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !8377
  %type116 = bitcast %union.tree_node* %89 to %struct.tree_type*, !dbg !8377
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type116, i32 0, i32 16, !dbg !8377
  %90 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !8377
  %91 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !8378
  %type117 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !8378
  %main_variant118 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type117, i32 0, i32 16, !dbg !8378
  %92 = load %union.tree_node*, %union.tree_node** %main_variant118, align 8, !dbg !8378
  %cmp119 = icmp eq %union.tree_node* %90, %92, !dbg !8379
  br i1 %cmp119, label %cond.true121, label %cond.false122, !dbg !8380

cond.true121:                                     ; preds = %land.lhs.true115
  %93 = load %union.tree_node*, %union.tree_node** %t1, align 8, !dbg !8381
  br label %cond.end123, !dbg !8380

cond.false122:                                    ; preds = %land.lhs.true115, %land.lhs.true, %cond.end109
  br label %cond.end123, !dbg !8380

cond.end123:                                      ; preds = %cond.false122, %cond.true121
  %cond124 = phi %union.tree_node* [ %93, %cond.true121 ], [ null, %cond.false122 ], !dbg !8380
  %original_type125 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 2, !dbg !8382
  store %union.tree_node* %cond124, %union.tree_node** %original_type125, align 8, !dbg !8383
  br label %if.end126

if.end126:                                        ; preds = %cond.end123, %if.then88
  %94 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8384
  %95 = bitcast %struct.c_expr* %ret to i8*, !dbg !8384
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 24, i1 false), !dbg !8384
  br label %return, !dbg !8385

return:                                           ; preds = %if.end126, %if.then53, %if.then
  ret void, !dbg !8386
}

declare dso_local void @default_function_array_conversion(%struct.c_expr* sret, i32, %struct.c_expr* byval(%struct.c_expr) align 8) #2

declare dso_local %union.tree_node* @build_modify_expr(i32, %union.tree_node*, %union.tree_node*, i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_binary_expression(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser, %struct.c_expr* %after) #0 !dbg !2218 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %after.addr = alloca %struct.c_expr*, align 8
  %stack = alloca [11 x %struct.anon.2], align 16
  %sp = alloca i32, align 4
  %binary_loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %oprec = alloca i32, align 4
  %ocode = alloca i32, align 4
  %tmp54 = alloca %struct.c_expr, align 8
  %tmp66 = alloca %struct.c_expr, align 8
  %tmp77 = alloca %struct.c_expr, align 8
  %tmp95 = alloca %struct.c_expr, align 8
  %tmp125 = alloca %struct.c_expr, align 8
  %tmp160 = alloca %struct.c_expr, align 8
  %tmp201 = alloca %struct.c_expr, align 8
  %tmp213 = alloca %struct.c_expr, align 8
  %tmp224 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !8387, metadata !DIExpression()), !dbg !8388
  store %struct.c_expr* %after, %struct.c_expr** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_expr** %after.addr, metadata !8389, metadata !DIExpression()), !dbg !8390
  call void @llvm.dbg.declare(metadata [11 x %struct.anon.2]* %stack, metadata !8391, metadata !DIExpression()), !dbg !8401
  call void @llvm.dbg.declare(metadata i32* %sp, metadata !8402, metadata !DIExpression()), !dbg !8403
  call void @llvm.dbg.declare(metadata i32* %binary_loc, metadata !8404, metadata !DIExpression()), !dbg !8405
  store i32 0, i32* %binary_loc, align 4, !dbg !8405
  %0 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !8406
  %tobool = icmp ne %struct.c_expr* %0, null, !dbg !8406
  br i1 %tobool, label %lor.lhs.false, label %cond.false, !dbg !8406

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @c_language, align 4, !dbg !8406
  %and = and i32 %1, 1, !dbg !8406
  %cmp = icmp ne i32 %and, 0, !dbg !8406
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8406

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4857, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8406
  br label %cond.end, !dbg !8406

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !8406

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8406
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8407
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !8408
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !8409
  %3 = load i32, i32* %location, align 8, !dbg !8409
  %arrayidx = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 0, !dbg !8410
  %loc = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx, i32 0, i32 3, !dbg !8411
  store i32 %3, i32* %loc, align 16, !dbg !8412
  %arrayidx1 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 0, !dbg !8413
  %expr = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx1, i32 0, i32 0, !dbg !8414
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8415
  %5 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !8416
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %4, %struct.c_expr* %5), !dbg !8417
  %6 = bitcast %struct.c_expr* %expr to i8*, !dbg !8417
  %7 = bitcast %struct.c_expr* %tmp to i8*, !dbg !8417
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 8 %7, i64 24, i1 false), !dbg !8417
  %arrayidx2 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 0, !dbg !8418
  %prec = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx2, i32 0, i32 1, !dbg !8419
  store i32 0, i32* %prec, align 8, !dbg !8420
  store i32 0, i32* %sp, align 4, !dbg !8421
  br label %while.body, !dbg !8422

while.body:                                       ; preds = %cond.end, %sw.epilog153
  call void @llvm.dbg.declare(metadata i32* %oprec, metadata !8423, metadata !DIExpression()), !dbg !8425
  call void @llvm.dbg.declare(metadata i32* %ocode, metadata !8426, metadata !DIExpression()), !dbg !8427
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8428
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %8, i32 0, i32 2, !dbg !8430
  %bf.load = load i8, i8* %error, align 2, !dbg !8430
  %bf.clear = and i8 %bf.load, 1, !dbg !8430
  %bf.cast = zext i8 %bf.clear to i32, !dbg !8430
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !8428
  br i1 %tobool3, label %if.then, label %if.end, !dbg !8431

if.then:                                          ; preds = %while.body
  br label %out, !dbg !8432

if.end:                                           ; preds = %while.body
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8433
  %call4 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %9), !dbg !8434
  %10 = bitcast %struct.c_token* %call4 to i32*, !dbg !8435
  %bf.load5 = load i32, i32* %10, align 8, !dbg !8435
  %bf.clear6 = and i32 %bf.load5, 255, !dbg !8435
  switch i32 %bf.clear6, label %sw.default [
    i32 6, label %sw.bb
    i32 7, label %sw.bb7
    i32 8, label %sw.bb8
    i32 4, label %sw.bb9
    i32 5, label %sw.bb10
    i32 13, label %sw.bb11
    i32 12, label %sw.bb12
    i32 3, label %sw.bb13
    i32 2, label %sw.bb14
    i32 26, label %sw.bb15
    i32 25, label %sw.bb16
    i32 23, label %sw.bb17
    i32 24, label %sw.bb18
    i32 9, label %sw.bb19
    i32 11, label %sw.bb20
    i32 10, label %sw.bb21
    i32 15, label %sw.bb22
    i32 16, label %sw.bb23
  ], !dbg !8436

sw.bb:                                            ; preds = %if.end
  store i32 10, i32* %oprec, align 4, !dbg !8437
  store i32 65, i32* %ocode, align 4, !dbg !8439
  br label %sw.epilog, !dbg !8440

sw.bb7:                                           ; preds = %if.end
  store i32 10, i32* %oprec, align 4, !dbg !8441
  store i32 67, i32* %ocode, align 4, !dbg !8442
  br label %sw.epilog, !dbg !8443

sw.bb8:                                           ; preds = %if.end
  store i32 10, i32* %oprec, align 4, !dbg !8444
  store i32 71, i32* %ocode, align 4, !dbg !8445
  br label %sw.epilog, !dbg !8446

sw.bb9:                                           ; preds = %if.end
  store i32 9, i32* %oprec, align 4, !dbg !8447
  store i32 63, i32* %ocode, align 4, !dbg !8448
  br label %sw.epilog, !dbg !8449

sw.bb10:                                          ; preds = %if.end
  store i32 9, i32* %oprec, align 4, !dbg !8450
  store i32 64, i32* %ocode, align 4, !dbg !8451
  br label %sw.epilog, !dbg !8452

sw.bb11:                                          ; preds = %if.end
  store i32 8, i32* %oprec, align 4, !dbg !8453
  store i32 83, i32* %ocode, align 4, !dbg !8454
  br label %sw.epilog, !dbg !8455

sw.bb12:                                          ; preds = %if.end
  store i32 8, i32* %oprec, align 4, !dbg !8456
  store i32 84, i32* %ocode, align 4, !dbg !8457
  br label %sw.epilog, !dbg !8458

sw.bb13:                                          ; preds = %if.end
  store i32 7, i32* %oprec, align 4, !dbg !8459
  store i32 97, i32* %ocode, align 4, !dbg !8460
  br label %sw.epilog, !dbg !8461

sw.bb14:                                          ; preds = %if.end
  store i32 7, i32* %oprec, align 4, !dbg !8462
  store i32 99, i32* %ocode, align 4, !dbg !8463
  br label %sw.epilog, !dbg !8464

sw.bb15:                                          ; preds = %if.end
  store i32 7, i32* %oprec, align 4, !dbg !8465
  store i32 98, i32* %ocode, align 4, !dbg !8466
  br label %sw.epilog, !dbg !8467

sw.bb16:                                          ; preds = %if.end
  store i32 7, i32* %oprec, align 4, !dbg !8468
  store i32 100, i32* %ocode, align 4, !dbg !8469
  br label %sw.epilog, !dbg !8470

sw.bb17:                                          ; preds = %if.end
  store i32 6, i32* %oprec, align 4, !dbg !8471
  store i32 101, i32* %ocode, align 4, !dbg !8472
  br label %sw.epilog, !dbg !8473

sw.bb18:                                          ; preds = %if.end
  store i32 6, i32* %oprec, align 4, !dbg !8474
  store i32 102, i32* %ocode, align 4, !dbg !8475
  br label %sw.epilog, !dbg !8476

sw.bb19:                                          ; preds = %if.end
  store i32 5, i32* %oprec, align 4, !dbg !8477
  store i32 89, i32* %ocode, align 4, !dbg !8478
  br label %sw.epilog, !dbg !8479

sw.bb20:                                          ; preds = %if.end
  store i32 4, i32* %oprec, align 4, !dbg !8480
  store i32 88, i32* %ocode, align 4, !dbg !8481
  br label %sw.epilog, !dbg !8482

sw.bb21:                                          ; preds = %if.end
  store i32 3, i32* %oprec, align 4, !dbg !8483
  store i32 87, i32* %ocode, align 4, !dbg !8484
  br label %sw.epilog, !dbg !8485

sw.bb22:                                          ; preds = %if.end
  store i32 2, i32* %oprec, align 4, !dbg !8486
  store i32 91, i32* %ocode, align 4, !dbg !8487
  br label %sw.epilog, !dbg !8488

sw.bb23:                                          ; preds = %if.end
  store i32 1, i32* %oprec, align 4, !dbg !8489
  store i32 92, i32* %ocode, align 4, !dbg !8490
  br label %sw.epilog, !dbg !8491

sw.default:                                       ; preds = %if.end
  br label %out, !dbg !8492

sw.epilog:                                        ; preds = %sw.bb23, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb19, %sw.bb18, %sw.bb17, %sw.bb16, %sw.bb15, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8493
  %call24 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %11), !dbg !8494
  %location25 = getelementptr inbounds %struct.c_token, %struct.c_token* %call24, i32 0, i32 2, !dbg !8495
  %12 = load i32, i32* %location25, align 8, !dbg !8495
  store i32 %12, i32* %binary_loc, align 4, !dbg !8496
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8497
  call void @c_parser_consume_token(%struct.c_parser* %13), !dbg !8498
  br label %while.cond26, !dbg !8499

while.cond26:                                     ; preds = %do.end, %sw.epilog
  %14 = load i32, i32* %oprec, align 4, !dbg !8500
  %15 = load i32, i32* %sp, align 4, !dbg !8501
  %idxprom = sext i32 %15 to i64, !dbg !8502
  %arrayidx27 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom, !dbg !8502
  %prec28 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx27, i32 0, i32 1, !dbg !8503
  %16 = load i32, i32* %prec28, align 8, !dbg !8503
  %cmp29 = icmp ule i32 %14, %16, !dbg !8504
  br i1 %cmp29, label %while.body30, label %while.end, !dbg !8499

while.body30:                                     ; preds = %while.cond26
  br label %do.body, !dbg !8505

do.body:                                          ; preds = %while.body30
  %17 = load i32, i32* %sp, align 4, !dbg !8506
  %idxprom31 = sext i32 %17 to i64, !dbg !8506
  %arrayidx32 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom31, !dbg !8506
  %op = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx32, i32 0, i32 2, !dbg !8506
  %18 = load i32, i32* %op, align 4, !dbg !8506
  switch i32 %18, label %sw.default48 [
    i32 91, label %sw.bb33
    i32 92, label %sw.bb39
  ], !dbg !8506

sw.bb33:                                          ; preds = %do.body
  %19 = load i32, i32* %sp, align 4, !dbg !8508
  %sub = sub nsw i32 %19, 1, !dbg !8508
  %idxprom34 = sext i32 %sub to i64, !dbg !8508
  %arrayidx35 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom34, !dbg !8508
  %expr36 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx35, i32 0, i32 0, !dbg !8508
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr36, i32 0, i32 0, !dbg !8508
  %20 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !8508
  %21 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 47), align 8, !dbg !8508
  %cmp37 = icmp eq %union.tree_node* %20, %21, !dbg !8508
  %conv = zext i1 %cmp37 to i32, !dbg !8508
  %22 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8508
  %sub38 = sub nsw i32 %22, %conv, !dbg !8508
  store i32 %sub38, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8508
  br label %sw.epilog49, !dbg !8508

sw.bb39:                                          ; preds = %do.body
  %23 = load i32, i32* %sp, align 4, !dbg !8508
  %sub40 = sub nsw i32 %23, 1, !dbg !8508
  %idxprom41 = sext i32 %sub40 to i64, !dbg !8508
  %arrayidx42 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom41, !dbg !8508
  %expr43 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx42, i32 0, i32 0, !dbg !8508
  %value44 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr43, i32 0, i32 0, !dbg !8508
  %24 = load %union.tree_node*, %union.tree_node** %value44, align 8, !dbg !8508
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 46), align 16, !dbg !8508
  %cmp45 = icmp eq %union.tree_node* %24, %25, !dbg !8508
  %conv46 = zext i1 %cmp45 to i32, !dbg !8508
  %26 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8508
  %sub47 = sub nsw i32 %26, %conv46, !dbg !8508
  store i32 %sub47, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8508
  br label %sw.epilog49, !dbg !8508

sw.default48:                                     ; preds = %do.body
  br label %sw.epilog49, !dbg !8508

sw.epilog49:                                      ; preds = %sw.default48, %sw.bb39, %sw.bb33
  %27 = load i32, i32* %sp, align 4, !dbg !8506
  %sub50 = sub nsw i32 %27, 1, !dbg !8506
  %idxprom51 = sext i32 %sub50 to i64, !dbg !8506
  %arrayidx52 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom51, !dbg !8506
  %expr53 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx52, i32 0, i32 0, !dbg !8506
  %28 = load i32, i32* %sp, align 4, !dbg !8506
  %sub55 = sub nsw i32 %28, 1, !dbg !8506
  %idxprom56 = sext i32 %sub55 to i64, !dbg !8506
  %arrayidx57 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom56, !dbg !8506
  %loc58 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx57, i32 0, i32 3, !dbg !8506
  %29 = load i32, i32* %loc58, align 8, !dbg !8506
  %30 = load i32, i32* %sp, align 4, !dbg !8506
  %sub59 = sub nsw i32 %30, 1, !dbg !8506
  %idxprom60 = sext i32 %sub59 to i64, !dbg !8506
  %arrayidx61 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom60, !dbg !8506
  %expr62 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx61, i32 0, i32 0, !dbg !8506
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp54, i32 %29, %struct.c_expr* byval(%struct.c_expr) align 8 %expr62), !dbg !8506
  %31 = bitcast %struct.c_expr* %expr53 to i8*, !dbg !8506
  %32 = bitcast %struct.c_expr* %tmp54 to i8*, !dbg !8506
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 24, i1 false), !dbg !8506
  %33 = load i32, i32* %sp, align 4, !dbg !8506
  %idxprom63 = sext i32 %33 to i64, !dbg !8506
  %arrayidx64 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom63, !dbg !8506
  %expr65 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx64, i32 0, i32 0, !dbg !8506
  %34 = load i32, i32* %sp, align 4, !dbg !8506
  %idxprom67 = sext i32 %34 to i64, !dbg !8506
  %arrayidx68 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom67, !dbg !8506
  %loc69 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx68, i32 0, i32 3, !dbg !8506
  %35 = load i32, i32* %loc69, align 8, !dbg !8506
  %36 = load i32, i32* %sp, align 4, !dbg !8506
  %idxprom70 = sext i32 %36 to i64, !dbg !8506
  %arrayidx71 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom70, !dbg !8506
  %expr72 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx71, i32 0, i32 0, !dbg !8506
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp66, i32 %35, %struct.c_expr* byval(%struct.c_expr) align 8 %expr72), !dbg !8506
  %37 = bitcast %struct.c_expr* %expr65 to i8*, !dbg !8506
  %38 = bitcast %struct.c_expr* %tmp66 to i8*, !dbg !8506
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false), !dbg !8506
  %39 = load i32, i32* %sp, align 4, !dbg !8506
  %sub73 = sub nsw i32 %39, 1, !dbg !8506
  %idxprom74 = sext i32 %sub73 to i64, !dbg !8506
  %arrayidx75 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom74, !dbg !8506
  %expr76 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx75, i32 0, i32 0, !dbg !8506
  %40 = load i32, i32* %sp, align 4, !dbg !8506
  %idxprom78 = sext i32 %40 to i64, !dbg !8506
  %arrayidx79 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom78, !dbg !8506
  %loc80 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx79, i32 0, i32 3, !dbg !8506
  %41 = load i32, i32* %loc80, align 8, !dbg !8506
  %42 = load i32, i32* %sp, align 4, !dbg !8506
  %idxprom81 = sext i32 %42 to i64, !dbg !8506
  %arrayidx82 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom81, !dbg !8506
  %op83 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx82, i32 0, i32 2, !dbg !8506
  %43 = load i32, i32* %op83, align 4, !dbg !8506
  %44 = load i32, i32* %sp, align 4, !dbg !8506
  %sub84 = sub nsw i32 %44, 1, !dbg !8506
  %idxprom85 = sext i32 %sub84 to i64, !dbg !8506
  %arrayidx86 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom85, !dbg !8506
  %expr87 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx86, i32 0, i32 0, !dbg !8506
  %45 = load i32, i32* %sp, align 4, !dbg !8506
  %idxprom88 = sext i32 %45 to i64, !dbg !8506
  %arrayidx89 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom88, !dbg !8506
  %expr90 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx89, i32 0, i32 0, !dbg !8506
  call void @parser_build_binary_op(%struct.c_expr* sret %tmp77, i32 %41, i32 %43, %struct.c_expr* byval(%struct.c_expr) align 8 %expr87, %struct.c_expr* byval(%struct.c_expr) align 8 %expr90), !dbg !8506
  %46 = bitcast %struct.c_expr* %expr76 to i8*, !dbg !8506
  %47 = bitcast %struct.c_expr* %tmp77 to i8*, !dbg !8506
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 24, i1 false), !dbg !8506
  %48 = load i32, i32* %sp, align 4, !dbg !8506
  %dec = add nsw i32 %48, -1, !dbg !8506
  store i32 %dec, i32* %sp, align 4, !dbg !8506
  br label %do.end, !dbg !8506

do.end:                                           ; preds = %sw.epilog49
  br label %while.cond26, !dbg !8499, !llvm.loop !8510

while.end:                                        ; preds = %while.cond26
  %49 = load i32, i32* %ocode, align 4, !dbg !8511
  switch i32 %49, label %sw.default152 [
    i32 91, label %sw.bb91
    i32 92, label %sw.bb121
  ], !dbg !8512

sw.bb91:                                          ; preds = %while.end
  %50 = load i32, i32* %sp, align 4, !dbg !8513
  %idxprom92 = sext i32 %50 to i64, !dbg !8515
  %arrayidx93 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom92, !dbg !8515
  %expr94 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx93, i32 0, i32 0, !dbg !8516
  %51 = load i32, i32* %sp, align 4, !dbg !8517
  %idxprom96 = sext i32 %51 to i64, !dbg !8518
  %arrayidx97 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom96, !dbg !8518
  %loc98 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx97, i32 0, i32 3, !dbg !8519
  %52 = load i32, i32* %loc98, align 8, !dbg !8519
  %53 = load i32, i32* %sp, align 4, !dbg !8520
  %idxprom99 = sext i32 %53 to i64, !dbg !8521
  %arrayidx100 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom99, !dbg !8521
  %expr101 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx100, i32 0, i32 0, !dbg !8522
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp95, i32 %52, %struct.c_expr* byval(%struct.c_expr) align 8 %expr101), !dbg !8523
  %54 = bitcast %struct.c_expr* %expr94 to i8*, !dbg !8523
  %55 = bitcast %struct.c_expr* %tmp95 to i8*, !dbg !8523
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 24, i1 false), !dbg !8523
  %56 = load i32, i32* %sp, align 4, !dbg !8524
  %idxprom102 = sext i32 %56 to i64, !dbg !8525
  %arrayidx103 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom102, !dbg !8525
  %loc104 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx103, i32 0, i32 3, !dbg !8526
  %57 = load i32, i32* %loc104, align 8, !dbg !8526
  %58 = load i32, i32* %sp, align 4, !dbg !8527
  %idxprom105 = sext i32 %58 to i64, !dbg !8528
  %arrayidx106 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom105, !dbg !8528
  %expr107 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx106, i32 0, i32 0, !dbg !8529
  %value108 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr107, i32 0, i32 0, !dbg !8530
  %59 = load %union.tree_node*, %union.tree_node** %value108, align 8, !dbg !8530
  %call109 = call %union.tree_node* @default_conversion(%union.tree_node* %59), !dbg !8531
  %call110 = call %union.tree_node* @c_objc_common_truthvalue_conversion(i32 %57, %union.tree_node* %call109), !dbg !8532
  %60 = load i32, i32* %sp, align 4, !dbg !8533
  %idxprom111 = sext i32 %60 to i64, !dbg !8534
  %arrayidx112 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom111, !dbg !8534
  %expr113 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx112, i32 0, i32 0, !dbg !8535
  %value114 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr113, i32 0, i32 0, !dbg !8536
  store %union.tree_node* %call110, %union.tree_node** %value114, align 8, !dbg !8537
  %61 = load i32, i32* %sp, align 4, !dbg !8538
  %idxprom115 = sext i32 %61 to i64, !dbg !8539
  %arrayidx116 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom115, !dbg !8539
  %expr117 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx116, i32 0, i32 0, !dbg !8540
  %value118 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr117, i32 0, i32 0, !dbg !8541
  %62 = load %union.tree_node*, %union.tree_node** %value118, align 8, !dbg !8541
  %63 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 47), align 8, !dbg !8542
  %cmp119 = icmp eq %union.tree_node* %62, %63, !dbg !8543
  %conv120 = zext i1 %cmp119 to i32, !dbg !8543
  %64 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8544
  %add = add nsw i32 %64, %conv120, !dbg !8544
  store i32 %add, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8544
  br label %sw.epilog153, !dbg !8545

sw.bb121:                                         ; preds = %while.end
  %65 = load i32, i32* %sp, align 4, !dbg !8546
  %idxprom122 = sext i32 %65 to i64, !dbg !8547
  %arrayidx123 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom122, !dbg !8547
  %expr124 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx123, i32 0, i32 0, !dbg !8548
  %66 = load i32, i32* %sp, align 4, !dbg !8549
  %idxprom126 = sext i32 %66 to i64, !dbg !8550
  %arrayidx127 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom126, !dbg !8550
  %loc128 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx127, i32 0, i32 3, !dbg !8551
  %67 = load i32, i32* %loc128, align 8, !dbg !8551
  %68 = load i32, i32* %sp, align 4, !dbg !8552
  %idxprom129 = sext i32 %68 to i64, !dbg !8553
  %arrayidx130 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom129, !dbg !8553
  %expr131 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx130, i32 0, i32 0, !dbg !8554
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp125, i32 %67, %struct.c_expr* byval(%struct.c_expr) align 8 %expr131), !dbg !8555
  %69 = bitcast %struct.c_expr* %expr124 to i8*, !dbg !8555
  %70 = bitcast %struct.c_expr* %tmp125 to i8*, !dbg !8555
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 24, i1 false), !dbg !8555
  %71 = load i32, i32* %sp, align 4, !dbg !8556
  %idxprom132 = sext i32 %71 to i64, !dbg !8557
  %arrayidx133 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom132, !dbg !8557
  %loc134 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx133, i32 0, i32 3, !dbg !8558
  %72 = load i32, i32* %loc134, align 8, !dbg !8558
  %73 = load i32, i32* %sp, align 4, !dbg !8559
  %idxprom135 = sext i32 %73 to i64, !dbg !8560
  %arrayidx136 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom135, !dbg !8560
  %expr137 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx136, i32 0, i32 0, !dbg !8561
  %value138 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr137, i32 0, i32 0, !dbg !8562
  %74 = load %union.tree_node*, %union.tree_node** %value138, align 8, !dbg !8562
  %call139 = call %union.tree_node* @default_conversion(%union.tree_node* %74), !dbg !8563
  %call140 = call %union.tree_node* @c_objc_common_truthvalue_conversion(i32 %72, %union.tree_node* %call139), !dbg !8564
  %75 = load i32, i32* %sp, align 4, !dbg !8565
  %idxprom141 = sext i32 %75 to i64, !dbg !8566
  %arrayidx142 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom141, !dbg !8566
  %expr143 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx142, i32 0, i32 0, !dbg !8567
  %value144 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr143, i32 0, i32 0, !dbg !8568
  store %union.tree_node* %call140, %union.tree_node** %value144, align 8, !dbg !8569
  %76 = load i32, i32* %sp, align 4, !dbg !8570
  %idxprom145 = sext i32 %76 to i64, !dbg !8571
  %arrayidx146 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom145, !dbg !8571
  %expr147 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx146, i32 0, i32 0, !dbg !8572
  %value148 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr147, i32 0, i32 0, !dbg !8573
  %77 = load %union.tree_node*, %union.tree_node** %value148, align 8, !dbg !8573
  %78 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 46), align 16, !dbg !8574
  %cmp149 = icmp eq %union.tree_node* %77, %78, !dbg !8575
  %conv150 = zext i1 %cmp149 to i32, !dbg !8575
  %79 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8576
  %add151 = add nsw i32 %79, %conv150, !dbg !8576
  store i32 %add151, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8576
  br label %sw.epilog153, !dbg !8577

sw.default152:                                    ; preds = %while.end
  br label %sw.epilog153, !dbg !8578

sw.epilog153:                                     ; preds = %sw.default152, %sw.bb121, %sw.bb91
  %80 = load i32, i32* %sp, align 4, !dbg !8579
  %inc = add nsw i32 %80, 1, !dbg !8579
  store i32 %inc, i32* %sp, align 4, !dbg !8579
  %81 = load i32, i32* %binary_loc, align 4, !dbg !8580
  %82 = load i32, i32* %sp, align 4, !dbg !8581
  %idxprom154 = sext i32 %82 to i64, !dbg !8582
  %arrayidx155 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom154, !dbg !8582
  %loc156 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx155, i32 0, i32 3, !dbg !8583
  store i32 %81, i32* %loc156, align 8, !dbg !8584
  %83 = load i32, i32* %sp, align 4, !dbg !8585
  %idxprom157 = sext i32 %83 to i64, !dbg !8586
  %arrayidx158 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom157, !dbg !8586
  %expr159 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx158, i32 0, i32 0, !dbg !8587
  %84 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8588
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp160, %struct.c_parser* %84, %struct.c_expr* null), !dbg !8589
  %85 = bitcast %struct.c_expr* %expr159 to i8*, !dbg !8589
  %86 = bitcast %struct.c_expr* %tmp160 to i8*, !dbg !8589
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 24, i1 false), !dbg !8589
  %87 = load i32, i32* %oprec, align 4, !dbg !8590
  %88 = load i32, i32* %sp, align 4, !dbg !8591
  %idxprom161 = sext i32 %88 to i64, !dbg !8592
  %arrayidx162 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom161, !dbg !8592
  %prec163 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx162, i32 0, i32 1, !dbg !8593
  store i32 %87, i32* %prec163, align 8, !dbg !8594
  %89 = load i32, i32* %ocode, align 4, !dbg !8595
  %90 = load i32, i32* %sp, align 4, !dbg !8596
  %idxprom164 = sext i32 %90 to i64, !dbg !8597
  %arrayidx165 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom164, !dbg !8597
  %op166 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx165, i32 0, i32 2, !dbg !8598
  store i32 %89, i32* %op166, align 4, !dbg !8599
  %91 = load i32, i32* %binary_loc, align 4, !dbg !8600
  %92 = load i32, i32* %sp, align 4, !dbg !8601
  %idxprom167 = sext i32 %92 to i64, !dbg !8602
  %arrayidx168 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom167, !dbg !8602
  %loc169 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx168, i32 0, i32 3, !dbg !8603
  store i32 %91, i32* %loc169, align 8, !dbg !8604
  br label %while.body, !dbg !8422, !llvm.loop !8605

out:                                              ; preds = %sw.default, %if.then
  call void @llvm.dbg.label(metadata !8607), !dbg !8608
  br label %while.cond, !dbg !8609

while.cond:                                       ; preds = %do.end239, %out
  %93 = load i32, i32* %sp, align 4, !dbg !8610
  %cmp170 = icmp sgt i32 %93, 0, !dbg !8611
  br i1 %cmp170, label %while.body172, label %while.end240, !dbg !8609

while.body172:                                    ; preds = %while.cond
  br label %do.body173, !dbg !8612

do.body173:                                       ; preds = %while.body172
  %94 = load i32, i32* %sp, align 4, !dbg !8613
  %idxprom174 = sext i32 %94 to i64, !dbg !8613
  %arrayidx175 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom174, !dbg !8613
  %op176 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx175, i32 0, i32 2, !dbg !8613
  %95 = load i32, i32* %op176, align 4, !dbg !8613
  switch i32 %95, label %sw.default195 [
    i32 91, label %sw.bb177
    i32 92, label %sw.bb186
  ], !dbg !8613

sw.bb177:                                         ; preds = %do.body173
  %96 = load i32, i32* %sp, align 4, !dbg !8615
  %sub178 = sub nsw i32 %96, 1, !dbg !8615
  %idxprom179 = sext i32 %sub178 to i64, !dbg !8615
  %arrayidx180 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom179, !dbg !8615
  %expr181 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx180, i32 0, i32 0, !dbg !8615
  %value182 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr181, i32 0, i32 0, !dbg !8615
  %97 = load %union.tree_node*, %union.tree_node** %value182, align 8, !dbg !8615
  %98 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 47), align 8, !dbg !8615
  %cmp183 = icmp eq %union.tree_node* %97, %98, !dbg !8615
  %conv184 = zext i1 %cmp183 to i32, !dbg !8615
  %99 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8615
  %sub185 = sub nsw i32 %99, %conv184, !dbg !8615
  store i32 %sub185, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8615
  br label %sw.epilog196, !dbg !8615

sw.bb186:                                         ; preds = %do.body173
  %100 = load i32, i32* %sp, align 4, !dbg !8615
  %sub187 = sub nsw i32 %100, 1, !dbg !8615
  %idxprom188 = sext i32 %sub187 to i64, !dbg !8615
  %arrayidx189 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom188, !dbg !8615
  %expr190 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx189, i32 0, i32 0, !dbg !8615
  %value191 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr190, i32 0, i32 0, !dbg !8615
  %101 = load %union.tree_node*, %union.tree_node** %value191, align 8, !dbg !8615
  %102 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([55 x %union.tree_node*], [55 x %union.tree_node*]* @c_global_trees, i64 0, i64 46), align 16, !dbg !8615
  %cmp192 = icmp eq %union.tree_node* %101, %102, !dbg !8615
  %conv193 = zext i1 %cmp192 to i32, !dbg !8615
  %103 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8615
  %sub194 = sub nsw i32 %103, %conv193, !dbg !8615
  store i32 %sub194, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !8615
  br label %sw.epilog196, !dbg !8615

sw.default195:                                    ; preds = %do.body173
  br label %sw.epilog196, !dbg !8615

sw.epilog196:                                     ; preds = %sw.default195, %sw.bb186, %sw.bb177
  %104 = load i32, i32* %sp, align 4, !dbg !8613
  %sub197 = sub nsw i32 %104, 1, !dbg !8613
  %idxprom198 = sext i32 %sub197 to i64, !dbg !8613
  %arrayidx199 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom198, !dbg !8613
  %expr200 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx199, i32 0, i32 0, !dbg !8613
  %105 = load i32, i32* %sp, align 4, !dbg !8613
  %sub202 = sub nsw i32 %105, 1, !dbg !8613
  %idxprom203 = sext i32 %sub202 to i64, !dbg !8613
  %arrayidx204 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom203, !dbg !8613
  %loc205 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx204, i32 0, i32 3, !dbg !8613
  %106 = load i32, i32* %loc205, align 8, !dbg !8613
  %107 = load i32, i32* %sp, align 4, !dbg !8613
  %sub206 = sub nsw i32 %107, 1, !dbg !8613
  %idxprom207 = sext i32 %sub206 to i64, !dbg !8613
  %arrayidx208 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom207, !dbg !8613
  %expr209 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx208, i32 0, i32 0, !dbg !8613
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp201, i32 %106, %struct.c_expr* byval(%struct.c_expr) align 8 %expr209), !dbg !8613
  %108 = bitcast %struct.c_expr* %expr200 to i8*, !dbg !8613
  %109 = bitcast %struct.c_expr* %tmp201 to i8*, !dbg !8613
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %108, i8* align 8 %109, i64 24, i1 false), !dbg !8613
  %110 = load i32, i32* %sp, align 4, !dbg !8613
  %idxprom210 = sext i32 %110 to i64, !dbg !8613
  %arrayidx211 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom210, !dbg !8613
  %expr212 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx211, i32 0, i32 0, !dbg !8613
  %111 = load i32, i32* %sp, align 4, !dbg !8613
  %idxprom214 = sext i32 %111 to i64, !dbg !8613
  %arrayidx215 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom214, !dbg !8613
  %loc216 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx215, i32 0, i32 3, !dbg !8613
  %112 = load i32, i32* %loc216, align 8, !dbg !8613
  %113 = load i32, i32* %sp, align 4, !dbg !8613
  %idxprom217 = sext i32 %113 to i64, !dbg !8613
  %arrayidx218 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom217, !dbg !8613
  %expr219 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx218, i32 0, i32 0, !dbg !8613
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp213, i32 %112, %struct.c_expr* byval(%struct.c_expr) align 8 %expr219), !dbg !8613
  %114 = bitcast %struct.c_expr* %expr212 to i8*, !dbg !8613
  %115 = bitcast %struct.c_expr* %tmp213 to i8*, !dbg !8613
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 24, i1 false), !dbg !8613
  %116 = load i32, i32* %sp, align 4, !dbg !8613
  %sub220 = sub nsw i32 %116, 1, !dbg !8613
  %idxprom221 = sext i32 %sub220 to i64, !dbg !8613
  %arrayidx222 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom221, !dbg !8613
  %expr223 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx222, i32 0, i32 0, !dbg !8613
  %117 = load i32, i32* %sp, align 4, !dbg !8613
  %idxprom225 = sext i32 %117 to i64, !dbg !8613
  %arrayidx226 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom225, !dbg !8613
  %loc227 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx226, i32 0, i32 3, !dbg !8613
  %118 = load i32, i32* %loc227, align 8, !dbg !8613
  %119 = load i32, i32* %sp, align 4, !dbg !8613
  %idxprom228 = sext i32 %119 to i64, !dbg !8613
  %arrayidx229 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom228, !dbg !8613
  %op230 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx229, i32 0, i32 2, !dbg !8613
  %120 = load i32, i32* %op230, align 4, !dbg !8613
  %121 = load i32, i32* %sp, align 4, !dbg !8613
  %sub231 = sub nsw i32 %121, 1, !dbg !8613
  %idxprom232 = sext i32 %sub231 to i64, !dbg !8613
  %arrayidx233 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom232, !dbg !8613
  %expr234 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx233, i32 0, i32 0, !dbg !8613
  %122 = load i32, i32* %sp, align 4, !dbg !8613
  %idxprom235 = sext i32 %122 to i64, !dbg !8613
  %arrayidx236 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 %idxprom235, !dbg !8613
  %expr237 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx236, i32 0, i32 0, !dbg !8613
  call void @parser_build_binary_op(%struct.c_expr* sret %tmp224, i32 %118, i32 %120, %struct.c_expr* byval(%struct.c_expr) align 8 %expr234, %struct.c_expr* byval(%struct.c_expr) align 8 %expr237), !dbg !8613
  %123 = bitcast %struct.c_expr* %expr223 to i8*, !dbg !8613
  %124 = bitcast %struct.c_expr* %tmp224 to i8*, !dbg !8613
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 24, i1 false), !dbg !8613
  %125 = load i32, i32* %sp, align 4, !dbg !8613
  %dec238 = add nsw i32 %125, -1, !dbg !8613
  store i32 %dec238, i32* %sp, align 4, !dbg !8613
  br label %do.end239, !dbg !8613

do.end239:                                        ; preds = %sw.epilog196
  br label %while.cond, !dbg !8609, !llvm.loop !8617

while.end240:                                     ; preds = %while.cond
  %arrayidx241 = getelementptr inbounds [11 x %struct.anon.2], [11 x %struct.anon.2]* %stack, i64 0, i64 0, !dbg !8618
  %expr242 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %arrayidx241, i32 0, i32 0, !dbg !8619
  %126 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8619
  %127 = bitcast %struct.c_expr* %expr242 to i8*, !dbg !8619
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %126, i8* align 16 %127, i64 24, i1 false), !dbg !8619
  ret void, !dbg !8620
}

declare dso_local %union.tree_node* @c_save_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @default_conversion(%union.tree_node*) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @c_objc_common_truthvalue_conversion(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_expression_conv(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser) #0 !dbg !8621 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %tmp1 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !8624, metadata !DIExpression()), !dbg !8625
  call void @llvm.dbg.declare(metadata %struct.c_expr* %agg.result, metadata !8626, metadata !DIExpression()), !dbg !8627
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !8628, metadata !DIExpression()), !dbg !8629
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8630
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !8631
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !8632
  %1 = load i32, i32* %location, align 8, !dbg !8632
  store i32 %1, i32* %loc, align 4, !dbg !8629
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8633
  call void @c_parser_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %2), !dbg !8634
  %3 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8634
  %4 = bitcast %struct.c_expr* %tmp to i8*, !dbg !8634
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !8634
  %5 = load i32, i32* %loc, align 4, !dbg !8635
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp1, i32 %5, %struct.c_expr* byval(%struct.c_expr) align 8 %agg.result), !dbg !8636
  %6 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8636
  %7 = bitcast %struct.c_expr* %tmp1 to i8*, !dbg !8636
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !8636
  ret void, !dbg !8637
}

declare dso_local %union.tree_node* @build_conditional_expr(i32, %union.tree_node*, i8 zeroext, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_cast_expression(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser, %struct.c_expr* %after) #0 !dbg !8638 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %after.addr = alloca %struct.c_expr*, align 8
  %cast_loc = alloca i32, align 4
  %type_name = alloca %struct.c_type_name*, align 8
  %ret = alloca %struct.c_expr, align 8
  %expr = alloca %struct.c_expr, align 8
  %expr_loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %tmp20 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !8639, metadata !DIExpression()), !dbg !8640
  store %struct.c_expr* %after, %struct.c_expr** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_expr** %after.addr, metadata !8641, metadata !DIExpression()), !dbg !8642
  call void @llvm.dbg.declare(metadata i32* %cast_loc, metadata !8643, metadata !DIExpression()), !dbg !8644
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8645
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !8646
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !8647
  %1 = load i32, i32* %location, align 8, !dbg !8647
  store i32 %1, i32* %cast_loc, align 4, !dbg !8644
  %2 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !8648
  %tobool = icmp ne %struct.c_expr* %2, null, !dbg !8648
  br i1 %tobool, label %lor.lhs.false, label %cond.false, !dbg !8648

lor.lhs.false:                                    ; preds = %entry
  %3 = load i32, i32* @c_language, align 4, !dbg !8648
  %and = and i32 %3, 1, !dbg !8648
  %cmp = icmp ne i32 %and, 0, !dbg !8648
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8648

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5001, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8648
  br label %cond.end, !dbg !8648

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !8648

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8648
  %4 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !8649
  %tobool1 = icmp ne %struct.c_expr* %4, null, !dbg !8649
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8651

if.then:                                          ; preds = %cond.end
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8652
  %6 = load i32, i32* %cast_loc, align 4, !dbg !8653
  %7 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !8654
  call void @c_parser_postfix_expression_after_primary(%struct.c_expr* sret %agg.result, %struct.c_parser* %5, i32 %6, %struct.c_expr* byval(%struct.c_expr) align 8 %7), !dbg !8655
  br label %return, !dbg !8656

if.end:                                           ; preds = %cond.end
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8657
  %call2 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %8, i32 20), !dbg !8659
  %conv = zext i8 %call2 to i32, !dbg !8659
  %tobool3 = icmp ne i32 %conv, 0, !dbg !8659
  br i1 %tobool3, label %land.lhs.true, label %if.else, !dbg !8660

land.lhs.true:                                    ; preds = %if.end
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8661
  %call4 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %9), !dbg !8662
  %call5 = call zeroext i8 @c_token_starts_typename(%struct.c_token* %call4), !dbg !8663
  %conv6 = zext i8 %call5 to i32, !dbg !8663
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !8663
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !8664

if.then8:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.c_type_name** %type_name, metadata !8665, metadata !DIExpression()), !dbg !8667
  call void @llvm.dbg.declare(metadata %struct.c_expr* %ret, metadata !8668, metadata !DIExpression()), !dbg !8669
  call void @llvm.dbg.declare(metadata %struct.c_expr* %expr, metadata !8670, metadata !DIExpression()), !dbg !8671
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8672
  call void @c_parser_consume_token(%struct.c_parser* %10), !dbg !8673
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8674
  %call9 = call %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %11), !dbg !8675
  store %struct.c_type_name* %call9, %struct.c_type_name** %type_name, align 8, !dbg !8676
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8677
  call void @c_parser_skip_until_found(%struct.c_parser* %12, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !8678
  %13 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !8679
  %cmp10 = icmp eq %struct.c_type_name* %13, null, !dbg !8681
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !8682

if.then12:                                        ; preds = %if.then8
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8683
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 0, !dbg !8685
  store %union.tree_node* %14, %union.tree_node** %value, align 8, !dbg !8686
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 1, !dbg !8687
  store i32 0, i32* %original_code, align 8, !dbg !8688
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 2, !dbg !8689
  store %union.tree_node* null, %union.tree_node** %original_type, align 8, !dbg !8690
  %15 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8691
  %16 = bitcast %struct.c_expr* %ret to i8*, !dbg !8691
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !8691
  br label %return, !dbg !8692

if.end13:                                         ; preds = %if.then8
  %17 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !8693
  %specs = getelementptr inbounds %struct.c_type_name, %struct.c_type_name* %17, i32 0, i32 0, !dbg !8694
  %18 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !8694
  %type = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %18, i32 0, i32 0, !dbg !8695
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8695
  call void @used_types_insert(%union.tree_node* %19), !dbg !8696
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8697
  %call14 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %20, i32 41), !dbg !8699
  %tobool15 = icmp ne i8 %call14, 0, !dbg !8699
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !8700

if.then16:                                        ; preds = %if.end13
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8701
  %22 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !8702
  %23 = load i32, i32* %cast_loc, align 4, !dbg !8703
  call void @c_parser_postfix_expression_after_paren_type(%struct.c_expr* sret %agg.result, %struct.c_parser* %21, %struct.c_type_name* %22, i32 %23), !dbg !8704
  br label %return, !dbg !8705

if.end17:                                         ; preds = %if.end13
  call void @llvm.dbg.declare(metadata i32* %expr_loc, metadata !8706, metadata !DIExpression()), !dbg !8708
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8709
  %call18 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %24), !dbg !8710
  %location19 = getelementptr inbounds %struct.c_token, %struct.c_token* %call18, i32 0, i32 2, !dbg !8711
  %25 = load i32, i32* %location19, align 8, !dbg !8711
  store i32 %25, i32* %expr_loc, align 4, !dbg !8708
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8712
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %26, %struct.c_expr* null), !dbg !8713
  %27 = bitcast %struct.c_expr* %expr to i8*, !dbg !8713
  %28 = bitcast %struct.c_expr* %tmp to i8*, !dbg !8713
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 24, i1 false), !dbg !8713
  %29 = load i32, i32* %expr_loc, align 4, !dbg !8714
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp20, i32 %29, %struct.c_expr* byval(%struct.c_expr) align 8 %expr), !dbg !8715
  %30 = bitcast %struct.c_expr* %expr to i8*, !dbg !8715
  %31 = bitcast %struct.c_expr* %tmp20 to i8*, !dbg !8715
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false), !dbg !8715
  %32 = load i32, i32* %cast_loc, align 4, !dbg !8716
  %33 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !8717
  %value21 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8718
  %34 = load %union.tree_node*, %union.tree_node** %value21, align 8, !dbg !8718
  %call22 = call %union.tree_node* @c_cast_expr(i32 %32, %struct.c_type_name* %33, %union.tree_node* %34), !dbg !8719
  %value23 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 0, !dbg !8720
  store %union.tree_node* %call22, %union.tree_node** %value23, align 8, !dbg !8721
  %original_code24 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 1, !dbg !8722
  store i32 0, i32* %original_code24, align 8, !dbg !8723
  %original_type25 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 2, !dbg !8724
  store %union.tree_node* null, %union.tree_node** %original_type25, align 8, !dbg !8725
  %35 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8726
  %36 = bitcast %struct.c_expr* %ret to i8*, !dbg !8726
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false), !dbg !8726
  br label %return, !dbg !8727

if.else:                                          ; preds = %land.lhs.true, %if.end
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8728
  call void @c_parser_unary_expression(%struct.c_expr* sret %agg.result, %struct.c_parser* %37), !dbg !8729
  br label %return, !dbg !8730

return:                                           ; preds = %if.else, %if.end17, %if.then16, %if.then12, %if.then
  ret void, !dbg !8731
}

declare dso_local void @parser_build_binary_op(%struct.c_expr* sret, i32, i32, %struct.c_expr* byval(%struct.c_expr) align 8, %struct.c_expr* byval(%struct.c_expr) align 8) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_postfix_expression_after_primary(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser, i32 %expr_loc, %struct.c_expr* byval(%struct.c_expr) align 8 %expr) #0 !dbg !8732 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %expr_loc.addr = alloca i32, align 4
  %orig_expr = alloca %struct.c_expr, align 8
  %ident = alloca %union.tree_node*, align 8
  %idx = alloca %union.tree_node*, align 8
  %exprlist = alloca %struct.VEC_tree_gc*, align 8
  %origtypes = alloca %struct.VEC_tree_gc*, align 8
  %op_loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %tmp40 = alloca %struct.c_expr, align 8
  %field = alloca %union.tree_node*, align 8
  %tmp77 = alloca %struct.c_expr, align 8
  %field102 = alloca %union.tree_node*, align 8
  %tmp121 = alloca %struct.c_expr, align 8
  %tmp128 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !8735, metadata !DIExpression()), !dbg !8736
  store i32 %expr_loc, i32* %expr_loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %expr_loc.addr, metadata !8737, metadata !DIExpression()), !dbg !8738
  call void @llvm.dbg.declare(metadata %struct.c_expr* %expr, metadata !8739, metadata !DIExpression()), !dbg !8740
  call void @llvm.dbg.declare(metadata %struct.c_expr* %orig_expr, metadata !8741, metadata !DIExpression()), !dbg !8742
  call void @llvm.dbg.declare(metadata %union.tree_node** %ident, metadata !8743, metadata !DIExpression()), !dbg !8744
  call void @llvm.dbg.declare(metadata %union.tree_node** %idx, metadata !8745, metadata !DIExpression()), !dbg !8746
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %exprlist, metadata !8747, metadata !DIExpression()), !dbg !8748
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %origtypes, metadata !8749, metadata !DIExpression()), !dbg !8750
  br label %while.body, !dbg !8751

while.body:                                       ; preds = %entry, %sw.epilog
  call void @llvm.dbg.declare(metadata i32* %op_loc, metadata !8752, metadata !DIExpression()), !dbg !8754
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8755
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !8756
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !8757
  %1 = load i32, i32* %location, align 8, !dbg !8757
  store i32 %1, i32* %op_loc, align 4, !dbg !8754
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8758
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !8759
  %3 = bitcast %struct.c_token* %call1 to i32*, !dbg !8760
  %bf.load = load i32, i32* %3, align 8, !dbg !8760
  %bf.clear = and i32 %bf.load, 255, !dbg !8760
  switch i32 %bf.clear, label %sw.default [
    i32 39, label %sw.bb
    i32 20, label %sw.bb5
    i32 48, label %sw.bb39
    i32 47, label %sw.bb76
    i32 45, label %sw.bb120
    i32 46, label %sw.bb127
  ], !dbg !8761

sw.bb:                                            ; preds = %while.body
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8762
  call void @c_parser_consume_token(%struct.c_parser* %4), !dbg !8764
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8765
  call void @c_parser_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %5), !dbg !8766
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !8767
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !8767
  store %union.tree_node* %6, %union.tree_node** %idx, align 8, !dbg !8768
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8769
  call void @c_parser_skip_until_found(%struct.c_parser* %7, i32 40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0)), !dbg !8770
  %8 = load i32, i32* %op_loc, align 4, !dbg !8771
  %value2 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8772
  %9 = load %union.tree_node*, %union.tree_node** %value2, align 8, !dbg !8772
  %10 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !8773
  %call3 = call %union.tree_node* @build_array_ref(i32 %8, %union.tree_node* %9, %union.tree_node* %10), !dbg !8774
  %value4 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8775
  store %union.tree_node* %call3, %union.tree_node** %value4, align 8, !dbg !8776
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !8777
  store i32 0, i32* %original_code, align 8, !dbg !8778
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8779
  store %union.tree_node* null, %union.tree_node** %original_type, align 8, !dbg !8780
  br label %sw.epilog, !dbg !8781

sw.bb5:                                           ; preds = %while.body
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8782
  call void @c_parser_consume_token(%struct.c_parser* %11), !dbg !8783
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8784
  %call6 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %12, i32 21), !dbg !8786
  %tobool = icmp ne i8 %call6, 0, !dbg !8786
  br i1 %tobool, label %if.then, label %if.else, !dbg !8787

if.then:                                          ; preds = %sw.bb5
  store %struct.VEC_tree_gc* null, %struct.VEC_tree_gc** %exprlist, align 8, !dbg !8788
  br label %if.end, !dbg !8789

if.else:                                          ; preds = %sw.bb5
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8790
  %call7 = call %struct.VEC_tree_gc* @c_parser_expr_list(%struct.c_parser* %13, i8 zeroext 1, i8 zeroext 0, %struct.VEC_tree_gc** %origtypes), !dbg !8791
  store %struct.VEC_tree_gc* %call7, %struct.VEC_tree_gc** %exprlist, align 8, !dbg !8792
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8793
  call void @c_parser_skip_until_found(%struct.c_parser* %14, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !8794
  %15 = bitcast %struct.c_expr* %orig_expr to i8*, !dbg !8795
  %16 = bitcast %struct.c_expr* %expr to i8*, !dbg !8795
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !8795
  %17 = load i32, i32* %op_loc, align 4, !dbg !8796
  %value8 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8797
  %18 = load %union.tree_node*, %union.tree_node** %value8, align 8, !dbg !8797
  %19 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %exprlist, align 8, !dbg !8798
  %20 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %origtypes, align 8, !dbg !8799
  %call9 = call %union.tree_node* @build_function_call_vec(i32 %17, %union.tree_node* %18, %struct.VEC_tree_gc* %19, %struct.VEC_tree_gc* %20), !dbg !8800
  %value10 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8801
  store %union.tree_node* %call9, %union.tree_node** %value10, align 8, !dbg !8802
  %original_code11 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !8803
  store i32 0, i32* %original_code11, align 8, !dbg !8804
  %value12 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8805
  %21 = load %union.tree_node*, %union.tree_node** %value12, align 8, !dbg !8805
  %base = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !8805
  %22 = bitcast %struct.tree_base* %base to i64*, !dbg !8805
  %bf.load13 = load i64, i64* %22, align 8, !dbg !8805
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !8805
  %bf.cast = trunc i64 %bf.clear14 to i32, !dbg !8805
  %cmp = icmp eq i32 %bf.cast, 23, !dbg !8807
  br i1 %cmp, label %land.lhs.true, label %if.end34, !dbg !8808

land.lhs.true:                                    ; preds = %if.end
  %value15 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %orig_expr, i32 0, i32 0, !dbg !8809
  %23 = load %union.tree_node*, %union.tree_node** %value15, align 8, !dbg !8809
  %base16 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !8809
  %24 = bitcast %struct.tree_base* %base16 to i64*, !dbg !8809
  %bf.load17 = load i64, i64* %24, align 8, !dbg !8809
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !8809
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !8809
  %cmp20 = icmp eq i32 %bf.cast19, 29, !dbg !8810
  br i1 %cmp20, label %land.lhs.true21, label %if.end34, !dbg !8811

land.lhs.true21:                                  ; preds = %land.lhs.true
  %value22 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %orig_expr, i32 0, i32 0, !dbg !8812
  %25 = load %union.tree_node*, %union.tree_node** %value22, align 8, !dbg !8812
  %function_decl = bitcast %union.tree_node* %25 to %struct.tree_function_decl*, !dbg !8812
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8812
  %bf.load23 = load i32, i32* %built_in_class, align 8, !dbg !8812
  %bf.lshr = lshr i32 %bf.load23, 11, !dbg !8812
  %bf.clear24 = and i32 %bf.lshr, 3, !dbg !8812
  %cmp25 = icmp eq i32 %bf.clear24, 3, !dbg !8813
  br i1 %cmp25, label %land.lhs.true26, label %if.end34, !dbg !8814

land.lhs.true26:                                  ; preds = %land.lhs.true21
  %value27 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %orig_expr, i32 0, i32 0, !dbg !8815
  %26 = load %union.tree_node*, %union.tree_node** %value27, align 8, !dbg !8815
  %function_decl28 = bitcast %union.tree_node* %26 to %struct.tree_function_decl*, !dbg !8815
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl28, i32 0, i32 5, !dbg !8815
  %bf.load29 = load i32, i32* %function_code, align 8, !dbg !8815
  %bf.clear30 = and i32 %bf.load29, 2047, !dbg !8815
  %cmp31 = icmp eq i32 %bf.clear30, 428, !dbg !8816
  br i1 %cmp31, label %if.then32, label %if.end34, !dbg !8817

if.then32:                                        ; preds = %land.lhs.true26
  %original_code33 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !8818
  store i32 189, i32* %original_code33, align 8, !dbg !8819
  br label %if.end34, !dbg !8820

if.end34:                                         ; preds = %if.then32, %land.lhs.true26, %land.lhs.true21, %land.lhs.true, %if.end
  %original_type35 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8821
  store %union.tree_node* null, %union.tree_node** %original_type35, align 8, !dbg !8822
  %27 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %exprlist, align 8, !dbg !8823
  %cmp36 = icmp ne %struct.VEC_tree_gc* %27, null, !dbg !8825
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !8826

if.then37:                                        ; preds = %if.end34
  %28 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %exprlist, align 8, !dbg !8827
  call void @release_tree_vector(%struct.VEC_tree_gc* %28), !dbg !8829
  %29 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %origtypes, align 8, !dbg !8830
  call void @release_tree_vector(%struct.VEC_tree_gc* %29), !dbg !8831
  br label %if.end38, !dbg !8832

if.end38:                                         ; preds = %if.then37, %if.end34
  br label %sw.epilog, !dbg !8833

sw.bb39:                                          ; preds = %while.body
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8834
  call void @c_parser_consume_token(%struct.c_parser* %30), !dbg !8835
  %31 = load i32, i32* %expr_loc.addr, align 4, !dbg !8836
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp40, i32 %31, %struct.c_expr* byval(%struct.c_expr) align 8 %expr), !dbg !8837
  %32 = bitcast %struct.c_expr* %expr to i8*, !dbg !8837
  %33 = bitcast %struct.c_expr* %tmp40 to i8*, !dbg !8837
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 24, i1 false), !dbg !8837
  %34 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8838
  %call41 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %34, i32 53), !dbg !8840
  %tobool42 = icmp ne i8 %call41, 0, !dbg !8840
  br i1 %tobool42, label %if.then43, label %if.else46, !dbg !8841

if.then43:                                        ; preds = %sw.bb39
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8842
  %call44 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %35), !dbg !8843
  %value45 = getelementptr inbounds %struct.c_token, %struct.c_token* %call44, i32 0, i32 1, !dbg !8844
  %36 = load %union.tree_node*, %union.tree_node** %value45, align 8, !dbg !8844
  store %union.tree_node* %36, %union.tree_node** %ident, align 8, !dbg !8845
  br label %if.end50, !dbg !8846

if.else46:                                        ; preds = %sw.bb39
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8847
  call void @c_parser_error(%struct.c_parser* %37, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !8849
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8850
  %value47 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8851
  store %union.tree_node* %38, %union.tree_node** %value47, align 8, !dbg !8852
  %original_code48 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !8853
  store i32 0, i32* %original_code48, align 8, !dbg !8854
  %original_type49 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8855
  store %union.tree_node* null, %union.tree_node** %original_type49, align 8, !dbg !8856
  %39 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8857
  %40 = bitcast %struct.c_expr* %expr to i8*, !dbg !8857
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 24, i1 false), !dbg !8857
  br label %return, !dbg !8858

if.end50:                                         ; preds = %if.then43
  %41 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8859
  call void @c_parser_consume_token(%struct.c_parser* %41), !dbg !8860
  %42 = load i32, i32* %op_loc, align 4, !dbg !8861
  %value51 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8862
  %43 = load %union.tree_node*, %union.tree_node** %value51, align 8, !dbg !8862
  %44 = load %union.tree_node*, %union.tree_node** %ident, align 8, !dbg !8863
  %call52 = call %union.tree_node* @build_component_ref(i32 %42, %union.tree_node* %43, %union.tree_node* %44), !dbg !8864
  %value53 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8865
  store %union.tree_node* %call52, %union.tree_node** %value53, align 8, !dbg !8866
  %original_code54 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !8867
  store i32 0, i32* %original_code54, align 8, !dbg !8868
  %value55 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8869
  %45 = load %union.tree_node*, %union.tree_node** %value55, align 8, !dbg !8869
  %base56 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !8869
  %46 = bitcast %struct.tree_base* %base56 to i64*, !dbg !8869
  %bf.load57 = load i64, i64* %46, align 8, !dbg !8869
  %bf.clear58 = and i64 %bf.load57, 65535, !dbg !8869
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !8869
  %cmp60 = icmp ne i32 %bf.cast59, 41, !dbg !8871
  br i1 %cmp60, label %if.then61, label %if.else63, !dbg !8872

if.then61:                                        ; preds = %if.end50
  %original_type62 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8873
  store %union.tree_node* null, %union.tree_node** %original_type62, align 8, !dbg !8874
  br label %if.end75, !dbg !8875

if.else63:                                        ; preds = %if.end50
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !8876, metadata !DIExpression()), !dbg !8878
  %value64 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8879
  %47 = load %union.tree_node*, %union.tree_node** %value64, align 8, !dbg !8879
  %exp = bitcast %union.tree_node* %47 to %struct.tree_exp*, !dbg !8879
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8879
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !8879
  %48 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8879
  store %union.tree_node* %48, %union.tree_node** %field, align 8, !dbg !8878
  %49 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !8880
  %base65 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !8880
  %50 = bitcast %struct.tree_base* %base65 to i64*, !dbg !8880
  %bf.load66 = load i64, i64* %50, align 8, !dbg !8880
  %bf.clear67 = and i64 %bf.load66, 65535, !dbg !8880
  %bf.cast68 = trunc i64 %bf.clear67 to i32, !dbg !8880
  %cmp69 = icmp ne i32 %bf.cast68, 31, !dbg !8882
  br i1 %cmp69, label %if.then70, label %if.else72, !dbg !8883

if.then70:                                        ; preds = %if.else63
  %original_type71 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8884
  store %union.tree_node* null, %union.tree_node** %original_type71, align 8, !dbg !8885
  br label %if.end74, !dbg !8886

if.else72:                                        ; preds = %if.else63
  %51 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !8887
  %field_decl = bitcast %union.tree_node* %51 to %struct.tree_field_decl*, !dbg !8887
  %bit_field_type = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl, i32 0, i32 2, !dbg !8887
  %52 = load %union.tree_node*, %union.tree_node** %bit_field_type, align 8, !dbg !8887
  %original_type73 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8888
  store %union.tree_node* %52, %union.tree_node** %original_type73, align 8, !dbg !8889
  br label %if.end74

if.end74:                                         ; preds = %if.else72, %if.then70
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.then61
  br label %sw.epilog, !dbg !8890

sw.bb76:                                          ; preds = %while.body
  %53 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8891
  call void @c_parser_consume_token(%struct.c_parser* %53), !dbg !8892
  %54 = load i32, i32* %expr_loc.addr, align 4, !dbg !8893
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp77, i32 %54, %struct.c_expr* byval(%struct.c_expr) align 8 %expr), !dbg !8894
  %55 = bitcast %struct.c_expr* %expr to i8*, !dbg !8894
  %56 = bitcast %struct.c_expr* %tmp77 to i8*, !dbg !8894
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 24, i1 false), !dbg !8894
  %57 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8895
  %call78 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %57, i32 53), !dbg !8897
  %tobool79 = icmp ne i8 %call78, 0, !dbg !8897
  br i1 %tobool79, label %if.then80, label %if.else83, !dbg !8898

if.then80:                                        ; preds = %sw.bb76
  %58 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8899
  %call81 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %58), !dbg !8900
  %value82 = getelementptr inbounds %struct.c_token, %struct.c_token* %call81, i32 0, i32 1, !dbg !8901
  %59 = load %union.tree_node*, %union.tree_node** %value82, align 8, !dbg !8901
  store %union.tree_node* %59, %union.tree_node** %ident, align 8, !dbg !8902
  br label %if.end87, !dbg !8903

if.else83:                                        ; preds = %sw.bb76
  %60 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8904
  call void @c_parser_error(%struct.c_parser* %60, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !8906
  %61 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8907
  %value84 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8908
  store %union.tree_node* %61, %union.tree_node** %value84, align 8, !dbg !8909
  %original_code85 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !8910
  store i32 0, i32* %original_code85, align 8, !dbg !8911
  %original_type86 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8912
  store %union.tree_node* null, %union.tree_node** %original_type86, align 8, !dbg !8913
  %62 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8914
  %63 = bitcast %struct.c_expr* %expr to i8*, !dbg !8914
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 24, i1 false), !dbg !8914
  br label %return, !dbg !8915

if.end87:                                         ; preds = %if.then80
  %64 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8916
  call void @c_parser_consume_token(%struct.c_parser* %64), !dbg !8917
  %65 = load i32, i32* %op_loc, align 4, !dbg !8918
  %66 = load i32, i32* %op_loc, align 4, !dbg !8919
  %value88 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8920
  %67 = load %union.tree_node*, %union.tree_node** %value88, align 8, !dbg !8920
  %call89 = call %union.tree_node* @build_indirect_ref(i32 %66, %union.tree_node* %67, i32 3), !dbg !8921
  %68 = load %union.tree_node*, %union.tree_node** %ident, align 8, !dbg !8922
  %call90 = call %union.tree_node* @build_component_ref(i32 %65, %union.tree_node* %call89, %union.tree_node* %68), !dbg !8923
  %value91 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8924
  store %union.tree_node* %call90, %union.tree_node** %value91, align 8, !dbg !8925
  %original_code92 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !8926
  store i32 0, i32* %original_code92, align 8, !dbg !8927
  %value93 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8928
  %69 = load %union.tree_node*, %union.tree_node** %value93, align 8, !dbg !8928
  %base94 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !8928
  %70 = bitcast %struct.tree_base* %base94 to i64*, !dbg !8928
  %bf.load95 = load i64, i64* %70, align 8, !dbg !8928
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !8928
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !8928
  %cmp98 = icmp ne i32 %bf.cast97, 41, !dbg !8930
  br i1 %cmp98, label %if.then99, label %if.else101, !dbg !8931

if.then99:                                        ; preds = %if.end87
  %original_type100 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8932
  store %union.tree_node* null, %union.tree_node** %original_type100, align 8, !dbg !8933
  br label %if.end119, !dbg !8934

if.else101:                                       ; preds = %if.end87
  call void @llvm.dbg.declare(metadata %union.tree_node** %field102, metadata !8935, metadata !DIExpression()), !dbg !8937
  %value103 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8938
  %71 = load %union.tree_node*, %union.tree_node** %value103, align 8, !dbg !8938
  %exp104 = bitcast %union.tree_node* %71 to %struct.tree_exp*, !dbg !8938
  %operands105 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp104, i32 0, i32 3, !dbg !8938
  %arrayidx106 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands105, i64 0, i64 1, !dbg !8938
  %72 = load %union.tree_node*, %union.tree_node** %arrayidx106, align 8, !dbg !8938
  store %union.tree_node* %72, %union.tree_node** %field102, align 8, !dbg !8937
  %73 = load %union.tree_node*, %union.tree_node** %field102, align 8, !dbg !8939
  %base107 = bitcast %union.tree_node* %73 to %struct.tree_base*, !dbg !8939
  %74 = bitcast %struct.tree_base* %base107 to i64*, !dbg !8939
  %bf.load108 = load i64, i64* %74, align 8, !dbg !8939
  %bf.clear109 = and i64 %bf.load108, 65535, !dbg !8939
  %bf.cast110 = trunc i64 %bf.clear109 to i32, !dbg !8939
  %cmp111 = icmp ne i32 %bf.cast110, 31, !dbg !8941
  br i1 %cmp111, label %if.then112, label %if.else114, !dbg !8942

if.then112:                                       ; preds = %if.else101
  %original_type113 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8943
  store %union.tree_node* null, %union.tree_node** %original_type113, align 8, !dbg !8944
  br label %if.end118, !dbg !8945

if.else114:                                       ; preds = %if.else101
  %75 = load %union.tree_node*, %union.tree_node** %field102, align 8, !dbg !8946
  %field_decl115 = bitcast %union.tree_node* %75 to %struct.tree_field_decl*, !dbg !8946
  %bit_field_type116 = getelementptr inbounds %struct.tree_field_decl, %struct.tree_field_decl* %field_decl115, i32 0, i32 2, !dbg !8946
  %76 = load %union.tree_node*, %union.tree_node** %bit_field_type116, align 8, !dbg !8946
  %original_type117 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8947
  store %union.tree_node* %76, %union.tree_node** %original_type117, align 8, !dbg !8948
  br label %if.end118

if.end118:                                        ; preds = %if.else114, %if.then112
  br label %if.end119

if.end119:                                        ; preds = %if.end118, %if.then99
  br label %sw.epilog, !dbg !8949

sw.bb120:                                         ; preds = %while.body
  %77 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8950
  call void @c_parser_consume_token(%struct.c_parser* %77), !dbg !8951
  %78 = load i32, i32* %expr_loc.addr, align 4, !dbg !8952
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp121, i32 %78, %struct.c_expr* byval(%struct.c_expr) align 8 %expr), !dbg !8953
  %79 = bitcast %struct.c_expr* %expr to i8*, !dbg !8953
  %80 = bitcast %struct.c_expr* %tmp121 to i8*, !dbg !8953
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %80, i64 24, i1 false), !dbg !8953
  %81 = load i32, i32* %op_loc, align 4, !dbg !8954
  %value122 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8955
  %82 = load %union.tree_node*, %union.tree_node** %value122, align 8, !dbg !8955
  %call123 = call %union.tree_node* @build_unary_op(i32 %81, i32 128, %union.tree_node* %82, i32 0), !dbg !8956
  %value124 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8957
  store %union.tree_node* %call123, %union.tree_node** %value124, align 8, !dbg !8958
  %original_code125 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !8959
  store i32 0, i32* %original_code125, align 8, !dbg !8960
  %original_type126 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8961
  store %union.tree_node* null, %union.tree_node** %original_type126, align 8, !dbg !8962
  br label %sw.epilog, !dbg !8963

sw.bb127:                                         ; preds = %while.body
  %83 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8964
  call void @c_parser_consume_token(%struct.c_parser* %83), !dbg !8965
  %84 = load i32, i32* %expr_loc.addr, align 4, !dbg !8966
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp128, i32 %84, %struct.c_expr* byval(%struct.c_expr) align 8 %expr), !dbg !8967
  %85 = bitcast %struct.c_expr* %expr to i8*, !dbg !8967
  %86 = bitcast %struct.c_expr* %tmp128 to i8*, !dbg !8967
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 24, i1 false), !dbg !8967
  %87 = load i32, i32* %op_loc, align 4, !dbg !8968
  %value129 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8969
  %88 = load %union.tree_node*, %union.tree_node** %value129, align 8, !dbg !8969
  %call130 = call %union.tree_node* @build_unary_op(i32 %87, i32 127, %union.tree_node* %88, i32 0), !dbg !8970
  %value131 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !8971
  store %union.tree_node* %call130, %union.tree_node** %value131, align 8, !dbg !8972
  %original_code132 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !8973
  store i32 0, i32* %original_code132, align 8, !dbg !8974
  %original_type133 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !8975
  store %union.tree_node* null, %union.tree_node** %original_type133, align 8, !dbg !8976
  br label %sw.epilog, !dbg !8977

sw.default:                                       ; preds = %while.body
  %89 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !8978
  %90 = bitcast %struct.c_expr* %expr to i8*, !dbg !8978
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 24, i1 false), !dbg !8978
  br label %return, !dbg !8979

sw.epilog:                                        ; preds = %sw.bb127, %sw.bb120, %if.end119, %if.end75, %if.end38, %sw.bb
  br label %while.body, !dbg !8751, !llvm.loop !8980

return:                                           ; preds = %sw.default, %if.else83, %if.else46
  ret void, !dbg !8982
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %parser) #0 !dbg !8983 {
entry:
  %retval = alloca %struct.c_token*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !8984, metadata !DIExpression()), !dbg !8985
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8986
  %tokens_avail = getelementptr inbounds %struct.c_parser, %struct.c_parser* %0, i32 0, i32 1, !dbg !8988
  %1 = load i16, i16* %tokens_avail, align 8, !dbg !8988
  %conv = sext i16 %1 to i32, !dbg !8986
  %cmp = icmp sge i32 %conv, 2, !dbg !8989
  br i1 %cmp, label %if.then, label %if.end, !dbg !8990

if.then:                                          ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8991
  %tokens = getelementptr inbounds %struct.c_parser, %struct.c_parser* %2, i32 0, i32 0, !dbg !8992
  %arrayidx = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens, i64 0, i64 1, !dbg !8991
  store %struct.c_token* %arrayidx, %struct.c_token** %retval, align 8, !dbg !8993
  br label %return, !dbg !8993

if.end:                                           ; preds = %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8994
  %tokens_avail2 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %3, i32 0, i32 1, !dbg !8994
  %4 = load i16, i16* %tokens_avail2, align 8, !dbg !8994
  %conv3 = sext i16 %4 to i32, !dbg !8994
  %cmp4 = icmp eq i32 %conv3, 1, !dbg !8994
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !8994

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 515, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8994
  br label %cond.end, !dbg !8994

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8994

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8994
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8995
  %tokens6 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %5, i32 0, i32 0, !dbg !8995
  %arrayidx7 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens6, i64 0, i64 0, !dbg !8995
  %6 = bitcast %struct.c_token* %arrayidx7 to i32*, !dbg !8995
  %bf.load = load i32, i32* %6, align 8, !dbg !8995
  %bf.clear = and i32 %bf.load, 255, !dbg !8995
  %cmp8 = icmp ne i32 %bf.clear, 22, !dbg !8995
  br i1 %cmp8, label %cond.false11, label %cond.true10, !dbg !8995

cond.true10:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 516, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8995
  br label %cond.end12, !dbg !8995

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !8995

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !8995
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8996
  %tokens14 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %7, i32 0, i32 0, !dbg !8996
  %arrayidx15 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens14, i64 0, i64 0, !dbg !8996
  %8 = bitcast %struct.c_token* %arrayidx15 to i32*, !dbg !8996
  %bf.load16 = load i32, i32* %8, align 8, !dbg !8996
  %bf.clear17 = and i32 %bf.load16, 255, !dbg !8996
  %cmp18 = icmp ne i32 %bf.clear17, 71, !dbg !8996
  br i1 %cmp18, label %cond.false21, label %cond.true20, !dbg !8996

cond.true20:                                      ; preds = %cond.end12
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 517, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8996
  br label %cond.end22, !dbg !8996

cond.false21:                                     ; preds = %cond.end12
  br label %cond.end22, !dbg !8996

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i32 [ 0, %cond.true20 ], [ 0, %cond.false21 ], !dbg !8996
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8997
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !8998
  %tokens24 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %10, i32 0, i32 0, !dbg !8999
  %arrayidx25 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens24, i64 0, i64 1, !dbg !8998
  call void @c_lex_one_token(%struct.c_parser* %9, %struct.c_token* %arrayidx25), !dbg !9000
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9001
  %tokens_avail26 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %11, i32 0, i32 1, !dbg !9002
  store i16 2, i16* %tokens_avail26, align 8, !dbg !9003
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9004
  %tokens27 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %12, i32 0, i32 0, !dbg !9005
  %arrayidx28 = getelementptr inbounds [2 x %struct.c_token], [2 x %struct.c_token]* %tokens27, i64 0, i64 1, !dbg !9004
  store %struct.c_token* %arrayidx28, %struct.c_token** %retval, align 8, !dbg !9006
  br label %return, !dbg !9006

return:                                           ; preds = %cond.end22, %if.then
  %13 = load %struct.c_token*, %struct.c_token** %retval, align 8, !dbg !9007
  ret %struct.c_token* %13, !dbg !9007
}

declare dso_local void @used_types_insert(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_postfix_expression_after_paren_type(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser, %struct.c_type_name* %type_name, i32 %type_loc) #0 !dbg !9008 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %type_name.addr = alloca %struct.c_type_name*, align 8
  %type_loc.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %init = alloca %struct.c_expr, align 8
  %non_const = alloca i8, align 1
  %expr = alloca %struct.c_expr, align 8
  %start_loc = alloca i32, align 4
  %type_expr = alloca %union.tree_node*, align 8
  %type_expr_const = alloca i8, align 1
  %tmp = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !9011, metadata !DIExpression()), !dbg !9012
  store %struct.c_type_name* %type_name, %struct.c_type_name** %type_name.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_type_name** %type_name.addr, metadata !9013, metadata !DIExpression()), !dbg !9014
  store i32 %type_loc, i32* %type_loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type_loc.addr, metadata !9015, metadata !DIExpression()), !dbg !9016
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9017, metadata !DIExpression()), !dbg !9018
  call void @llvm.dbg.declare(metadata %struct.c_expr* %init, metadata !9019, metadata !DIExpression()), !dbg !9020
  call void @llvm.dbg.declare(metadata i8* %non_const, metadata !9021, metadata !DIExpression()), !dbg !9022
  call void @llvm.dbg.declare(metadata %struct.c_expr* %expr, metadata !9023, metadata !DIExpression()), !dbg !9024
  call void @llvm.dbg.declare(metadata i32* %start_loc, metadata !9025, metadata !DIExpression()), !dbg !9026
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_expr, metadata !9027, metadata !DIExpression()), !dbg !9028
  store %union.tree_node* null, %union.tree_node** %type_expr, align 8, !dbg !9028
  call void @llvm.dbg.declare(metadata i8* %type_expr_const, metadata !9029, metadata !DIExpression()), !dbg !9030
  store i8 1, i8* %type_expr_const, align 1, !dbg !9030
  %0 = load i32, i32* %type_loc.addr, align 4, !dbg !9031
  %1 = load %struct.c_type_name*, %struct.c_type_name** %type_name.addr, align 8, !dbg !9032
  call void @check_compound_literal_type(i32 %0, %struct.c_type_name* %1), !dbg !9033
  call void @start_init(%union.tree_node* null, %union.tree_node* null, i32 0), !dbg !9034
  %2 = load %struct.c_type_name*, %struct.c_type_name** %type_name.addr, align 8, !dbg !9035
  %call = call %union.tree_node* @groktypename(%struct.c_type_name* %2, %union.tree_node** %type_expr, i8* %type_expr_const), !dbg !9036
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !9037
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9038
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !9039
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !9040
  %4 = load i32, i32* %location, align 8, !dbg !9040
  store i32 %4, i32* %start_loc, align 4, !dbg !9041
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9042
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9044
  %cmp = icmp ne %union.tree_node* %5, %6, !dbg !9045
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9046

land.lhs.true:                                    ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9047
  %type2 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !9047
  %lang_flag_1 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 6, !dbg !9047
  %bf.load = load i32, i32* %lang_flag_1, align 4, !dbg !9047
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !9047
  %bf.clear = and i32 %bf.lshr, 1, !dbg !9047
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !9047
  br i1 %tobool, label %if.then, label %if.end, !dbg !9048

if.then:                                          ; preds = %land.lhs.true
  %8 = load i32, i32* %type_loc.addr, align 4, !dbg !9049
  call void (i32, i8*, ...) @error_at(i32 %8, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.23, i64 0, i64 0)), !dbg !9051
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9052
  store %union.tree_node* %9, %union.tree_node** %type, align 8, !dbg !9053
  br label %if.end, !dbg !9054

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9055
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9056
  call void @c_parser_braced_init(%struct.c_expr* sret %tmp, %struct.c_parser* %10, %union.tree_node* %11, i8 zeroext 0), !dbg !9057
  %12 = bitcast %struct.c_expr* %init to i8*, !dbg !9057
  %13 = bitcast %struct.c_expr* %tmp to i8*, !dbg !9057
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false), !dbg !9057
  call void @finish_init(), !dbg !9058
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9059
  call void @maybe_warn_string_init(%union.tree_node* %14, %struct.c_expr* byval(%struct.c_expr) align 8 %init), !dbg !9060
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9061
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9063
  %cmp3 = icmp ne %union.tree_node* %15, %16, !dbg !9064
  br i1 %cmp3, label %land.lhs.true4, label %if.end11, !dbg !9065

land.lhs.true4:                                   ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9066
  %base = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !9066
  %18 = bitcast %struct.tree_base* %base to i64*, !dbg !9066
  %bf.load5 = load i64, i64* %18, align 8, !dbg !9066
  %bf.lshr6 = lshr i64 %bf.load5, 56, !dbg !9066
  %bf.cast = trunc i64 %bf.lshr6 to i32, !dbg !9066
  %cmp7 = icmp eq i32 %bf.cast, 0, !dbg !9066
  br i1 %cmp7, label %if.end11, label %land.lhs.true8, !dbg !9067

land.lhs.true8:                                   ; preds = %land.lhs.true4
  %19 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9068
  %tobool9 = icmp ne %union.tree_node* %19, null, !dbg !9068
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !9069

if.then10:                                        ; preds = %land.lhs.true8
  call void (i8*, ...) @error(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.24, i64 0, i64 0)), !dbg !9070
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9072
  store %union.tree_node* %20, %union.tree_node** %type, align 8, !dbg !9073
  br label %if.end11, !dbg !9074

if.end11:                                         ; preds = %if.then10, %land.lhs.true8, %land.lhs.true4, %if.end
  %21 = load i32, i32* @flag_isoc99, align 4, !dbg !9075
  %tobool12 = icmp ne i32 %21, 0, !dbg !9075
  br i1 %tobool12, label %if.end15, label %if.then13, !dbg !9077

if.then13:                                        ; preds = %if.end11
  %22 = load i32, i32* %start_loc, align 4, !dbg !9078
  %call14 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %22, i32 834, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.25, i64 0, i64 0)), !dbg !9079
  br label %if.end15, !dbg !9079

if.end15:                                         ; preds = %if.then13, %if.end11
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 0, !dbg !9080
  %23 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9080
  %tobool16 = icmp ne %union.tree_node* %23, null, !dbg !9081
  br i1 %tobool16, label %land.lhs.true17, label %cond.false, !dbg !9082

land.lhs.true17:                                  ; preds = %if.end15
  %value18 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 0, !dbg !9083
  %24 = load %union.tree_node*, %union.tree_node** %value18, align 8, !dbg !9083
  %base19 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !9083
  %25 = bitcast %struct.tree_base* %base19 to i64*, !dbg !9083
  %bf.load20 = load i64, i64* %25, align 8, !dbg !9083
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !9083
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !9083
  %cmp23 = icmp eq i32 %bf.cast22, 51, !dbg !9084
  br i1 %cmp23, label %cond.true, label %cond.false, !dbg !9085

cond.true:                                        ; preds = %land.lhs.true17
  %value24 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 0, !dbg !9086
  %26 = load %union.tree_node*, %union.tree_node** %value24, align 8, !dbg !9086
  %base25 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !9086
  %27 = bitcast %struct.tree_base* %base25 to i64*, !dbg !9086
  %bf.load26 = load i64, i64* %27, align 8, !dbg !9086
  %bf.lshr27 = lshr i64 %bf.load26, 34, !dbg !9086
  %bf.clear28 = and i64 %bf.lshr27, 1, !dbg !9086
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !9086
  br label %cond.end, !dbg !9085

cond.false:                                       ; preds = %land.lhs.true17, %if.end15
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 1, !dbg !9087
  %28 = load i32, i32* %original_code, align 8, !dbg !9087
  %cmp30 = icmp eq i32 %28, 189, !dbg !9088
  %conv = zext i1 %cmp30 to i32, !dbg !9088
  br label %cond.end, !dbg !9085

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %bf.cast29, %cond.true ], [ %conv, %cond.false ], !dbg !9085
  %conv31 = trunc i32 %cond to i8, !dbg !9089
  store i8 %conv31, i8* %non_const, align 1, !dbg !9090
  %29 = load i8, i8* %type_expr_const, align 1, !dbg !9091
  %tobool32 = icmp ne i8 %29, 0, !dbg !9092
  %lnot = xor i1 %tobool32, true, !dbg !9092
  %lnot.ext = zext i1 %lnot to i32, !dbg !9092
  %30 = load i8, i8* %non_const, align 1, !dbg !9093
  %conv33 = zext i8 %30 to i32, !dbg !9093
  %or = or i32 %conv33, %lnot.ext, !dbg !9093
  %conv34 = trunc i32 %or to i8, !dbg !9093
  store i8 %conv34, i8* %non_const, align 1, !dbg !9093
  %31 = load i32, i32* %start_loc, align 4, !dbg !9094
  %32 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9095
  %value35 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 0, !dbg !9096
  %33 = load %union.tree_node*, %union.tree_node** %value35, align 8, !dbg !9096
  %34 = load i8, i8* %non_const, align 1, !dbg !9097
  %call36 = call %union.tree_node* @build_compound_literal(i32 %31, %union.tree_node* %32, %union.tree_node* %33, i8 zeroext %34), !dbg !9098
  %value37 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9099
  store %union.tree_node* %call36, %union.tree_node** %value37, align 8, !dbg !9100
  %original_code38 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !9101
  store i32 0, i32* %original_code38, align 8, !dbg !9102
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !9103
  store %union.tree_node* null, %union.tree_node** %original_type, align 8, !dbg !9104
  %35 = load %union.tree_node*, %union.tree_node** %type_expr, align 8, !dbg !9105
  %tobool39 = icmp ne %union.tree_node* %35, null, !dbg !9105
  br i1 %tobool39, label %if.then40, label %if.end69, !dbg !9107

if.then40:                                        ; preds = %cond.end
  %value41 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9108
  %36 = load %union.tree_node*, %union.tree_node** %value41, align 8, !dbg !9108
  %base42 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !9108
  %37 = bitcast %struct.tree_base* %base42 to i64*, !dbg !9108
  %bf.load43 = load i64, i64* %37, align 8, !dbg !9108
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !9108
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !9108
  %cmp46 = icmp eq i32 %bf.cast45, 189, !dbg !9111
  br i1 %cmp46, label %if.then48, label %if.else, !dbg !9112

if.then48:                                        ; preds = %if.then40
  %value49 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9113
  %38 = load %union.tree_node*, %union.tree_node** %value49, align 8, !dbg !9113
  %exp = bitcast %union.tree_node* %38 to %struct.tree_exp*, !dbg !9113
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9113
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9113
  %39 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9113
  %cmp50 = icmp eq %union.tree_node* %39, null, !dbg !9113
  br i1 %cmp50, label %cond.false53, label %cond.true52, !dbg !9113

cond.true52:                                      ; preds = %if.then48
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5834, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9113
  br label %cond.end54, !dbg !9113

cond.false53:                                     ; preds = %if.then48
  br label %cond.end54, !dbg !9113

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i32 [ 0, %cond.true52 ], [ 0, %cond.false53 ], !dbg !9113
  %40 = load %union.tree_node*, %union.tree_node** %type_expr, align 8, !dbg !9115
  %value56 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9116
  %41 = load %union.tree_node*, %union.tree_node** %value56, align 8, !dbg !9116
  %exp57 = bitcast %union.tree_node* %41 to %struct.tree_exp*, !dbg !9116
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 3, !dbg !9116
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i64 0, i64 0, !dbg !9116
  store %union.tree_node* %40, %union.tree_node** %arrayidx59, align 8, !dbg !9117
  br label %if.end68, !dbg !9118

if.else:                                          ; preds = %if.then40
  %42 = load i8, i8* %non_const, align 1, !dbg !9119
  %tobool60 = icmp ne i8 %42, 0, !dbg !9119
  br i1 %tobool60, label %cond.true61, label %cond.false62, !dbg !9119

cond.true61:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5839, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9119
  br label %cond.end63, !dbg !9119

cond.false62:                                     ; preds = %if.else
  br label %cond.end63, !dbg !9119

cond.end63:                                       ; preds = %cond.false62, %cond.true61
  %cond64 = phi i32 [ 0, %cond.true61 ], [ 0, %cond.false62 ], !dbg !9119
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9121
  %44 = load %union.tree_node*, %union.tree_node** %type_expr, align 8, !dbg !9121
  %value65 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9121
  %45 = load %union.tree_node*, %union.tree_node** %value65, align 8, !dbg !9121
  %call66 = call %union.tree_node* @build2_stat(i32 189, %union.tree_node* %43, %union.tree_node* %44, %union.tree_node* %45), !dbg !9121
  %value67 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9122
  store %union.tree_node* %call66, %union.tree_node** %value67, align 8, !dbg !9123
  br label %if.end68

if.end68:                                         ; preds = %cond.end63, %cond.end54
  br label %if.end69, !dbg !9124

if.end69:                                         ; preds = %if.end68, %cond.end
  %46 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9125
  %47 = load i32, i32* %start_loc, align 4, !dbg !9126
  call void @c_parser_postfix_expression_after_primary(%struct.c_expr* sret %agg.result, %struct.c_parser* %46, i32 %47, %struct.c_expr* byval(%struct.c_expr) align 8 %expr), !dbg !9127
  ret void, !dbg !9128
}

declare dso_local %union.tree_node* @c_cast_expr(i32, %struct.c_type_name*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_unary_expression(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser) #0 !dbg !9129 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %ext = alloca i32, align 4
  %ret = alloca %struct.c_expr, align 8
  %op = alloca %struct.c_expr, align 8
  %op_loc = alloca i32, align 4
  %exp_loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %tmp4 = alloca %struct.c_expr, align 8
  %tmp8 = alloca %struct.c_expr, align 8
  %tmp9 = alloca %struct.c_expr, align 8
  %agg.tmp = alloca %struct.c_expr, align 8
  %tmp14 = alloca %struct.c_expr, align 8
  %tmp15 = alloca %struct.c_expr, align 8
  %tmp19 = alloca %struct.expanded_location, align 8
  %tmp25 = alloca %struct.c_expr, align 8
  %tmp26 = alloca %struct.c_expr, align 8
  %tmp30 = alloca %struct.c_expr, align 8
  %tmp31 = alloca %struct.c_expr, align 8
  %tmp35 = alloca %struct.c_expr, align 8
  %tmp36 = alloca %struct.c_expr, align 8
  %tmp40 = alloca %struct.c_expr, align 8
  %tmp41 = alloca %struct.c_expr, align 8
  %tmp59 = alloca %struct.c_expr, align 8
  %tmp63 = alloca %struct.c_expr, align 8
  %tmp64 = alloca %struct.c_expr, align 8
  %tmp68 = alloca %struct.c_expr, align 8
  %tmp69 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !9130, metadata !DIExpression()), !dbg !9131
  call void @llvm.dbg.declare(metadata i32* %ext, metadata !9132, metadata !DIExpression()), !dbg !9133
  call void @llvm.dbg.declare(metadata %struct.c_expr* %ret, metadata !9134, metadata !DIExpression()), !dbg !9135
  call void @llvm.dbg.declare(metadata %struct.c_expr* %op, metadata !9136, metadata !DIExpression()), !dbg !9137
  call void @llvm.dbg.declare(metadata i32* %op_loc, metadata !9138, metadata !DIExpression()), !dbg !9139
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9140
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !9141
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !9142
  %1 = load i32, i32* %location, align 8, !dbg !9142
  store i32 %1, i32* %op_loc, align 4, !dbg !9139
  call void @llvm.dbg.declare(metadata i32* %exp_loc, metadata !9143, metadata !DIExpression()), !dbg !9144
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 1, !dbg !9145
  store i32 0, i32* %original_code, align 8, !dbg !9146
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 2, !dbg !9147
  store %union.tree_node* null, %union.tree_node** %original_type, align 8, !dbg !9148
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9149
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !9150
  %3 = bitcast %struct.c_token* %call1 to i32*, !dbg !9151
  %bf.load = load i32, i32* %3, align 8, !dbg !9151
  %bf.clear = and i32 %bf.load, 255, !dbg !9151
  switch i32 %bf.clear, label %sw.default70 [
    i32 45, label %sw.bb
    i32 46, label %sw.bb5
    i32 9, label %sw.bb10
    i32 6, label %sw.bb11
    i32 4, label %sw.bb18
    i32 5, label %sw.bb27
    i32 14, label %sw.bb32
    i32 1, label %sw.bb37
    i32 15, label %sw.bb42
    i32 74, label %sw.bb51
  ], !dbg !9152

sw.bb:                                            ; preds = %entry
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9153
  call void @c_parser_consume_token(%struct.c_parser* %4), !dbg !9155
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9156
  %call2 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !9157
  %location3 = getelementptr inbounds %struct.c_token, %struct.c_token* %call2, i32 0, i32 2, !dbg !9158
  %6 = load i32, i32* %location3, align 8, !dbg !9158
  store i32 %6, i32* %exp_loc, align 4, !dbg !9159
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9160
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %7, %struct.c_expr* null), !dbg !9161
  %8 = bitcast %struct.c_expr* %op to i8*, !dbg !9161
  %9 = bitcast %struct.c_expr* %tmp to i8*, !dbg !9161
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !9161
  %10 = load i32, i32* %exp_loc, align 4, !dbg !9162
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp4, i32 %10, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9163
  %11 = bitcast %struct.c_expr* %op to i8*, !dbg !9163
  %12 = bitcast %struct.c_expr* %tmp4 to i8*, !dbg !9163
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false), !dbg !9163
  %13 = load i32, i32* %op_loc, align 4, !dbg !9164
  call void @parser_build_unary_op(%struct.c_expr* sret %agg.result, i32 %13, i32 126, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9165
  br label %return, !dbg !9166

sw.bb5:                                           ; preds = %entry
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9167
  call void @c_parser_consume_token(%struct.c_parser* %14), !dbg !9168
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9169
  %call6 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %15), !dbg !9170
  %location7 = getelementptr inbounds %struct.c_token, %struct.c_token* %call6, i32 0, i32 2, !dbg !9171
  %16 = load i32, i32* %location7, align 8, !dbg !9171
  store i32 %16, i32* %exp_loc, align 4, !dbg !9172
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9173
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp8, %struct.c_parser* %17, %struct.c_expr* null), !dbg !9174
  %18 = bitcast %struct.c_expr* %op to i8*, !dbg !9174
  %19 = bitcast %struct.c_expr* %tmp8 to i8*, !dbg !9174
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 24, i1 false), !dbg !9174
  %20 = load i32, i32* %exp_loc, align 4, !dbg !9175
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp9, i32 %20, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9176
  %21 = bitcast %struct.c_expr* %op to i8*, !dbg !9176
  %22 = bitcast %struct.c_expr* %tmp9 to i8*, !dbg !9176
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false), !dbg !9176
  %23 = load i32, i32* %op_loc, align 4, !dbg !9177
  call void @parser_build_unary_op(%struct.c_expr* sret %agg.result, i32 %23, i32 125, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9178
  br label %return, !dbg !9179

sw.bb10:                                          ; preds = %entry
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9180
  call void @c_parser_consume_token(%struct.c_parser* %24), !dbg !9181
  %25 = load i32, i32* %op_loc, align 4, !dbg !9182
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9183
  call void @c_parser_cast_expression(%struct.c_expr* sret %agg.tmp, %struct.c_parser* %26, %struct.c_expr* null), !dbg !9184
  call void @parser_build_unary_op(%struct.c_expr* sret %agg.result, i32 %25, i32 121, %struct.c_expr* byval(%struct.c_expr) align 8 %agg.tmp), !dbg !9185
  br label %return, !dbg !9186

sw.bb11:                                          ; preds = %entry
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9187
  call void @c_parser_consume_token(%struct.c_parser* %27), !dbg !9188
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9189
  %call12 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %28), !dbg !9190
  %location13 = getelementptr inbounds %struct.c_token, %struct.c_token* %call12, i32 0, i32 2, !dbg !9191
  %29 = load i32, i32* %location13, align 8, !dbg !9191
  store i32 %29, i32* %exp_loc, align 4, !dbg !9192
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9193
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp14, %struct.c_parser* %30, %struct.c_expr* null), !dbg !9194
  %31 = bitcast %struct.c_expr* %op to i8*, !dbg !9194
  %32 = bitcast %struct.c_expr* %tmp14 to i8*, !dbg !9194
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 24, i1 false), !dbg !9194
  %33 = load i32, i32* %exp_loc, align 4, !dbg !9195
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp15, i32 %33, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9196
  %34 = bitcast %struct.c_expr* %op to i8*, !dbg !9196
  %35 = bitcast %struct.c_expr* %tmp15 to i8*, !dbg !9196
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 24, i1 false), !dbg !9196
  %36 = load i32, i32* %op_loc, align 4, !dbg !9197
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %op, i32 0, i32 0, !dbg !9198
  %37 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9198
  %call16 = call %union.tree_node* @build_indirect_ref(i32 %36, %union.tree_node* %37, i32 2), !dbg !9199
  %value17 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 0, !dbg !9200
  store %union.tree_node* %call16, %union.tree_node** %value17, align 8, !dbg !9201
  %38 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !9202
  %39 = bitcast %struct.c_expr* %ret to i8*, !dbg !9202
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 24, i1 false), !dbg !9202
  br label %return, !dbg !9203

sw.bb18:                                          ; preds = %entry
  %40 = load i32, i32* @c_language, align 4, !dbg !9204
  %and = and i32 %40, 1, !dbg !9204
  %cmp = icmp ne i32 %and, 0, !dbg !9204
  br i1 %cmp, label %if.end, label %land.lhs.true, !dbg !9206

land.lhs.true:                                    ; preds = %sw.bb18
  %41 = load i32, i32* @input_location, align 4, !dbg !9207
  call void @expand_location(%struct.expanded_location* sret %tmp19, i32 %41), !dbg !9207
  %sysp = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp19, i32 0, i32 3, !dbg !9207
  %42 = load i8, i8* %sysp, align 8, !dbg !9207
  %conv = zext i8 %42 to i32, !dbg !9207
  %cmp20 = icmp ne i32 %conv, 0, !dbg !9207
  br i1 %cmp20, label %if.end, label %if.then, !dbg !9208

if.then:                                          ; preds = %land.lhs.true
  %43 = load i32, i32* %op_loc, align 4, !dbg !9209
  %call22 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %43, i32 202, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.33, i64 0, i64 0)), !dbg !9210
  br label %if.end, !dbg !9210

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb18
  %44 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9211
  call void @c_parser_consume_token(%struct.c_parser* %44), !dbg !9212
  %45 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9213
  %call23 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %45), !dbg !9214
  %location24 = getelementptr inbounds %struct.c_token, %struct.c_token* %call23, i32 0, i32 2, !dbg !9215
  %46 = load i32, i32* %location24, align 8, !dbg !9215
  store i32 %46, i32* %exp_loc, align 4, !dbg !9216
  %47 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9217
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp25, %struct.c_parser* %47, %struct.c_expr* null), !dbg !9218
  %48 = bitcast %struct.c_expr* %op to i8*, !dbg !9218
  %49 = bitcast %struct.c_expr* %tmp25 to i8*, !dbg !9218
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 24, i1 false), !dbg !9218
  %50 = load i32, i32* %exp_loc, align 4, !dbg !9219
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp26, i32 %50, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9220
  %51 = bitcast %struct.c_expr* %op to i8*, !dbg !9220
  %52 = bitcast %struct.c_expr* %tmp26 to i8*, !dbg !9220
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 24, i1 false), !dbg !9220
  %53 = load i32, i32* %op_loc, align 4, !dbg !9221
  call void @parser_build_unary_op(%struct.c_expr* sret %agg.result, i32 %53, i32 113, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9222
  br label %return, !dbg !9223

sw.bb27:                                          ; preds = %entry
  %54 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9224
  call void @c_parser_consume_token(%struct.c_parser* %54), !dbg !9225
  %55 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9226
  %call28 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %55), !dbg !9227
  %location29 = getelementptr inbounds %struct.c_token, %struct.c_token* %call28, i32 0, i32 2, !dbg !9228
  %56 = load i32, i32* %location29, align 8, !dbg !9228
  store i32 %56, i32* %exp_loc, align 4, !dbg !9229
  %57 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9230
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp30, %struct.c_parser* %57, %struct.c_expr* null), !dbg !9231
  %58 = bitcast %struct.c_expr* %op to i8*, !dbg !9231
  %59 = bitcast %struct.c_expr* %tmp30 to i8*, !dbg !9231
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 24, i1 false), !dbg !9231
  %60 = load i32, i32* %exp_loc, align 4, !dbg !9232
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp31, i32 %60, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9233
  %61 = bitcast %struct.c_expr* %op to i8*, !dbg !9233
  %62 = bitcast %struct.c_expr* %tmp31 to i8*, !dbg !9233
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 24, i1 false), !dbg !9233
  %63 = load i32, i32* %op_loc, align 4, !dbg !9234
  call void @parser_build_unary_op(%struct.c_expr* sret %agg.result, i32 %63, i32 79, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9235
  br label %return, !dbg !9236

sw.bb32:                                          ; preds = %entry
  %64 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9237
  call void @c_parser_consume_token(%struct.c_parser* %64), !dbg !9238
  %65 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9239
  %call33 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %65), !dbg !9240
  %location34 = getelementptr inbounds %struct.c_token, %struct.c_token* %call33, i32 0, i32 2, !dbg !9241
  %66 = load i32, i32* %location34, align 8, !dbg !9241
  store i32 %66, i32* %exp_loc, align 4, !dbg !9242
  %67 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9243
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp35, %struct.c_parser* %67, %struct.c_expr* null), !dbg !9244
  %68 = bitcast %struct.c_expr* %op to i8*, !dbg !9244
  %69 = bitcast %struct.c_expr* %tmp35 to i8*, !dbg !9244
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 24, i1 false), !dbg !9244
  %70 = load i32, i32* %exp_loc, align 4, !dbg !9245
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp36, i32 %70, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9246
  %71 = bitcast %struct.c_expr* %op to i8*, !dbg !9246
  %72 = bitcast %struct.c_expr* %tmp36 to i8*, !dbg !9246
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 24, i1 false), !dbg !9246
  %73 = load i32, i32* %op_loc, align 4, !dbg !9247
  call void @parser_build_unary_op(%struct.c_expr* sret %agg.result, i32 %73, i32 90, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9248
  br label %return, !dbg !9249

sw.bb37:                                          ; preds = %entry
  %74 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9250
  call void @c_parser_consume_token(%struct.c_parser* %74), !dbg !9251
  %75 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9252
  %call38 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %75), !dbg !9253
  %location39 = getelementptr inbounds %struct.c_token, %struct.c_token* %call38, i32 0, i32 2, !dbg !9254
  %76 = load i32, i32* %location39, align 8, !dbg !9254
  store i32 %76, i32* %exp_loc, align 4, !dbg !9255
  %77 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9256
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp40, %struct.c_parser* %77, %struct.c_expr* null), !dbg !9257
  %78 = bitcast %struct.c_expr* %op to i8*, !dbg !9257
  %79 = bitcast %struct.c_expr* %tmp40 to i8*, !dbg !9257
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 24, i1 false), !dbg !9257
  %80 = load i32, i32* %exp_loc, align 4, !dbg !9258
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp41, i32 %80, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9259
  %81 = bitcast %struct.c_expr* %op to i8*, !dbg !9259
  %82 = bitcast %struct.c_expr* %tmp41 to i8*, !dbg !9259
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 24, i1 false), !dbg !9259
  %83 = load i32, i32* %op_loc, align 4, !dbg !9260
  call void @parser_build_unary_op(%struct.c_expr* sret %agg.result, i32 %83, i32 96, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9261
  br label %return, !dbg !9262

sw.bb42:                                          ; preds = %entry
  %84 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9263
  call void @c_parser_consume_token(%struct.c_parser* %84), !dbg !9264
  %85 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9265
  %call43 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %85, i32 53), !dbg !9267
  %tobool = icmp ne i8 %call43, 0, !dbg !9267
  br i1 %tobool, label %if.then44, label %if.else, !dbg !9268

if.then44:                                        ; preds = %sw.bb42
  %86 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9269
  %call45 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %86), !dbg !9271
  %value46 = getelementptr inbounds %struct.c_token, %struct.c_token* %call45, i32 0, i32 1, !dbg !9272
  %87 = load %union.tree_node*, %union.tree_node** %value46, align 8, !dbg !9272
  %88 = load i32, i32* %op_loc, align 4, !dbg !9273
  %call47 = call %union.tree_node* @finish_label_address_expr(%union.tree_node* %87, i32 %88), !dbg !9274
  %value48 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 0, !dbg !9275
  store %union.tree_node* %call47, %union.tree_node** %value48, align 8, !dbg !9276
  %89 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9277
  call void @c_parser_consume_token(%struct.c_parser* %89), !dbg !9278
  br label %if.end50, !dbg !9279

if.else:                                          ; preds = %sw.bb42
  %90 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9280
  call void @c_parser_error(%struct.c_parser* %90, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !9282
  %91 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9283
  %value49 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 0, !dbg !9284
  store %union.tree_node* %91, %union.tree_node** %value49, align 8, !dbg !9285
  br label %if.end50

if.end50:                                         ; preds = %if.else, %if.then44
  %92 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !9286
  %93 = bitcast %struct.c_expr* %ret to i8*, !dbg !9286
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 24, i1 false), !dbg !9286
  br label %return, !dbg !9287

sw.bb51:                                          ; preds = %entry
  %94 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9288
  %call52 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %94), !dbg !9289
  %95 = bitcast %struct.c_token* %call52 to i32*, !dbg !9290
  %bf.load53 = load i32, i32* %95, align 8, !dbg !9290
  %bf.lshr = lshr i32 %bf.load53, 16, !dbg !9290
  %bf.clear54 = and i32 %bf.lshr, 255, !dbg !9290
  switch i32 %bf.clear54, label %sw.default [
    i32 48, label %sw.bb55
    i32 51, label %sw.bb56
    i32 54, label %sw.bb57
    i32 56, label %sw.bb60
    i32 55, label %sw.bb65
  ], !dbg !9291

sw.bb55:                                          ; preds = %sw.bb51
  %96 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9292
  call void @c_parser_sizeof_expression(%struct.c_expr* sret %agg.result, %struct.c_parser* %96), !dbg !9294
  br label %return, !dbg !9295

sw.bb56:                                          ; preds = %sw.bb51
  %97 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9296
  call void @c_parser_alignof_expression(%struct.c_expr* sret %agg.result, %struct.c_parser* %97), !dbg !9297
  br label %return, !dbg !9298

sw.bb57:                                          ; preds = %sw.bb51
  %98 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9299
  call void @c_parser_consume_token(%struct.c_parser* %98), !dbg !9300
  %call58 = call i32 @disable_extension_diagnostics(), !dbg !9301
  store i32 %call58, i32* %ext, align 4, !dbg !9302
  %99 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9303
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp59, %struct.c_parser* %99, %struct.c_expr* null), !dbg !9304
  %100 = bitcast %struct.c_expr* %ret to i8*, !dbg !9304
  %101 = bitcast %struct.c_expr* %tmp59 to i8*, !dbg !9304
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 24, i1 false), !dbg !9304
  %102 = load i32, i32* %ext, align 4, !dbg !9305
  call void @restore_extension_diagnostics(i32 %102), !dbg !9306
  %103 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !9307
  %104 = bitcast %struct.c_expr* %ret to i8*, !dbg !9307
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %103, i8* align 8 %104, i64 24, i1 false), !dbg !9307
  br label %return, !dbg !9308

sw.bb60:                                          ; preds = %sw.bb51
  %105 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9309
  call void @c_parser_consume_token(%struct.c_parser* %105), !dbg !9310
  %106 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9311
  %call61 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %106), !dbg !9312
  %location62 = getelementptr inbounds %struct.c_token, %struct.c_token* %call61, i32 0, i32 2, !dbg !9313
  %107 = load i32, i32* %location62, align 8, !dbg !9313
  store i32 %107, i32* %exp_loc, align 4, !dbg !9314
  %108 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9315
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp63, %struct.c_parser* %108, %struct.c_expr* null), !dbg !9316
  %109 = bitcast %struct.c_expr* %op to i8*, !dbg !9316
  %110 = bitcast %struct.c_expr* %tmp63 to i8*, !dbg !9316
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %109, i8* align 8 %110, i64 24, i1 false), !dbg !9316
  %111 = load i32, i32* %exp_loc, align 4, !dbg !9317
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp64, i32 %111, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9318
  %112 = bitcast %struct.c_expr* %op to i8*, !dbg !9318
  %113 = bitcast %struct.c_expr* %tmp64 to i8*, !dbg !9318
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 8 %113, i64 24, i1 false), !dbg !9318
  %114 = load i32, i32* %op_loc, align 4, !dbg !9319
  call void @parser_build_unary_op(%struct.c_expr* sret %agg.result, i32 %114, i32 43, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9320
  br label %return, !dbg !9321

sw.bb65:                                          ; preds = %sw.bb51
  %115 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9322
  call void @c_parser_consume_token(%struct.c_parser* %115), !dbg !9323
  %116 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9324
  %call66 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %116), !dbg !9325
  %location67 = getelementptr inbounds %struct.c_token, %struct.c_token* %call66, i32 0, i32 2, !dbg !9326
  %117 = load i32, i32* %location67, align 8, !dbg !9326
  store i32 %117, i32* %exp_loc, align 4, !dbg !9327
  %118 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9328
  call void @c_parser_cast_expression(%struct.c_expr* sret %tmp68, %struct.c_parser* %118, %struct.c_expr* null), !dbg !9329
  %119 = bitcast %struct.c_expr* %op to i8*, !dbg !9329
  %120 = bitcast %struct.c_expr* %tmp68 to i8*, !dbg !9329
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 24, i1 false), !dbg !9329
  %121 = load i32, i32* %exp_loc, align 4, !dbg !9330
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp69, i32 %121, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9331
  %122 = bitcast %struct.c_expr* %op to i8*, !dbg !9331
  %123 = bitcast %struct.c_expr* %tmp69 to i8*, !dbg !9331
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %122, i8* align 8 %123, i64 24, i1 false), !dbg !9331
  %124 = load i32, i32* %op_loc, align 4, !dbg !9332
  call void @parser_build_unary_op(%struct.c_expr* sret %agg.result, i32 %124, i32 44, %struct.c_expr* byval(%struct.c_expr) align 8 %op), !dbg !9333
  br label %return, !dbg !9334

sw.default:                                       ; preds = %sw.bb51
  %125 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9335
  call void @c_parser_postfix_expression(%struct.c_expr* sret %agg.result, %struct.c_parser* %125), !dbg !9336
  br label %return, !dbg !9337

sw.default70:                                     ; preds = %entry
  %126 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9338
  call void @c_parser_postfix_expression(%struct.c_expr* sret %agg.result, %struct.c_parser* %126), !dbg !9339
  br label %return, !dbg !9340

return:                                           ; preds = %sw.default70, %sw.default, %sw.bb65, %sw.bb60, %sw.bb57, %sw.bb56, %sw.bb55, %if.end50, %sw.bb37, %sw.bb32, %sw.bb27, %if.end, %sw.bb11, %sw.bb10, %sw.bb5, %sw.bb
  ret void, !dbg !9341
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_expression(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser) #0 !dbg !9342 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %tmp = alloca %struct.c_expr, align 8
  %next = alloca %struct.c_expr, align 8
  %loc = alloca i32, align 4
  %expr_loc = alloca i32, align 4
  %tmp4 = alloca %struct.c_expr, align 8
  %tmp5 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !9343, metadata !DIExpression()), !dbg !9344
  call void @llvm.dbg.declare(metadata %struct.c_expr* %agg.result, metadata !9345, metadata !DIExpression()), !dbg !9346
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9347
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp, %struct.c_parser* %0, %struct.c_expr* null), !dbg !9348
  %1 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !9348
  %2 = bitcast %struct.c_expr* %tmp to i8*, !dbg !9348
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !9348
  br label %while.cond, !dbg !9349

while.cond:                                       ; preds = %while.body, %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9350
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %3, i32 19), !dbg !9351
  %tobool = icmp ne i8 %call, 0, !dbg !9349
  br i1 %tobool, label %while.body, label %while.end, !dbg !9349

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.c_expr* %next, metadata !9352, metadata !DIExpression()), !dbg !9354
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !9355, metadata !DIExpression()), !dbg !9356
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9357
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %4), !dbg !9358
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !9359
  %5 = load i32, i32* %location, align 8, !dbg !9359
  store i32 %5, i32* %loc, align 4, !dbg !9356
  call void @llvm.dbg.declare(metadata i32* %expr_loc, metadata !9360, metadata !DIExpression()), !dbg !9361
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9362
  call void @c_parser_consume_token(%struct.c_parser* %6), !dbg !9363
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9364
  %call2 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %7), !dbg !9365
  %location3 = getelementptr inbounds %struct.c_token, %struct.c_token* %call2, i32 0, i32 2, !dbg !9366
  %8 = load i32, i32* %location3, align 8, !dbg !9366
  store i32 %8, i32* %expr_loc, align 4, !dbg !9367
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9368
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp4, %struct.c_parser* %9, %struct.c_expr* null), !dbg !9369
  %10 = bitcast %struct.c_expr* %next to i8*, !dbg !9369
  %11 = bitcast %struct.c_expr* %tmp4 to i8*, !dbg !9369
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !9369
  %12 = load i32, i32* %expr_loc, align 4, !dbg !9370
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp5, i32 %12, %struct.c_expr* byval(%struct.c_expr) align 8 %next), !dbg !9371
  %13 = bitcast %struct.c_expr* %next to i8*, !dbg !9371
  %14 = bitcast %struct.c_expr* %tmp5 to i8*, !dbg !9371
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !9371
  %15 = load i32, i32* %loc, align 4, !dbg !9372
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 0, !dbg !9373
  %16 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9373
  %value6 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %next, i32 0, i32 0, !dbg !9374
  %17 = load %union.tree_node*, %union.tree_node** %value6, align 8, !dbg !9374
  %call7 = call %union.tree_node* @build_compound_expr(i32 %15, %union.tree_node* %16, %union.tree_node* %17), !dbg !9375
  %value8 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 0, !dbg !9376
  store %union.tree_node* %call7, %union.tree_node** %value8, align 8, !dbg !9377
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 1, !dbg !9378
  store i32 52, i32* %original_code, align 8, !dbg !9379
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %next, i32 0, i32 2, !dbg !9380
  %18 = load %union.tree_node*, %union.tree_node** %original_type, align 8, !dbg !9380
  %original_type9 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 2, !dbg !9381
  store %union.tree_node* %18, %union.tree_node** %original_type9, align 8, !dbg !9382
  br label %while.cond, !dbg !9349, !llvm.loop !9383

while.end:                                        ; preds = %while.cond
  ret void, !dbg !9385
}

declare dso_local %union.tree_node* @build_array_ref(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_gc* @c_parser_expr_list(%struct.c_parser* %parser, i8 zeroext %convert_p, i8 zeroext %fold_p, %struct.VEC_tree_gc** %p_orig_types) #0 !dbg !9386 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %convert_p.addr = alloca i8, align 1
  %fold_p.addr = alloca i8, align 1
  %p_orig_types.addr = alloca %struct.VEC_tree_gc**, align 8
  %ret = alloca %struct.VEC_tree_gc*, align 8
  %orig_types = alloca %struct.VEC_tree_gc*, align 8
  %expr = alloca %struct.c_expr, align 8
  %loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %tmp4 = alloca %struct.c_expr, align 8
  %tmp28 = alloca %struct.c_expr, align 8
  %tmp31 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !9390, metadata !DIExpression()), !dbg !9391
  store i8 %convert_p, i8* %convert_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %convert_p.addr, metadata !9392, metadata !DIExpression()), !dbg !9393
  store i8 %fold_p, i8* %fold_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %fold_p.addr, metadata !9394, metadata !DIExpression()), !dbg !9395
  store %struct.VEC_tree_gc** %p_orig_types, %struct.VEC_tree_gc*** %p_orig_types.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %p_orig_types.addr, metadata !9396, metadata !DIExpression()), !dbg !9397
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %ret, metadata !9398, metadata !DIExpression()), !dbg !9399
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %orig_types, metadata !9400, metadata !DIExpression()), !dbg !9401
  call void @llvm.dbg.declare(metadata %struct.c_expr* %expr, metadata !9402, metadata !DIExpression()), !dbg !9403
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !9404, metadata !DIExpression()), !dbg !9405
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9406
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !9407
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !9408
  %1 = load i32, i32* %location, align 8, !dbg !9408
  store i32 %1, i32* %loc, align 4, !dbg !9405
  %call1 = call %struct.VEC_tree_gc* @make_tree_vector(), !dbg !9409
  store %struct.VEC_tree_gc* %call1, %struct.VEC_tree_gc** %ret, align 8, !dbg !9410
  %2 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %p_orig_types.addr, align 8, !dbg !9411
  %cmp = icmp eq %struct.VEC_tree_gc** %2, null, !dbg !9413
  br i1 %cmp, label %if.then, label %if.else, !dbg !9414

if.then:                                          ; preds = %entry
  store %struct.VEC_tree_gc* null, %struct.VEC_tree_gc** %orig_types, align 8, !dbg !9415
  br label %if.end, !dbg !9416

if.else:                                          ; preds = %entry
  %call2 = call %struct.VEC_tree_gc* @make_tree_vector(), !dbg !9417
  store %struct.VEC_tree_gc* %call2, %struct.VEC_tree_gc** %orig_types, align 8, !dbg !9418
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9419
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp, %struct.c_parser* %3, %struct.c_expr* null), !dbg !9420
  %4 = bitcast %struct.c_expr* %expr to i8*, !dbg !9420
  %5 = bitcast %struct.c_expr* %tmp to i8*, !dbg !9420
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !9420
  %6 = load i8, i8* %convert_p.addr, align 1, !dbg !9421
  %tobool = icmp ne i8 %6, 0, !dbg !9421
  br i1 %tobool, label %if.then3, label %if.end5, !dbg !9423

if.then3:                                         ; preds = %if.end
  %7 = load i32, i32* %loc, align 4, !dbg !9424
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp4, i32 %7, %struct.c_expr* byval(%struct.c_expr) align 8 %expr), !dbg !9425
  %8 = bitcast %struct.c_expr* %expr to i8*, !dbg !9425
  %9 = bitcast %struct.c_expr* %tmp4 to i8*, !dbg !9425
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !9425
  br label %if.end5, !dbg !9426

if.end5:                                          ; preds = %if.then3, %if.end
  %10 = load i8, i8* %fold_p.addr, align 1, !dbg !9427
  %tobool6 = icmp ne i8 %10, 0, !dbg !9427
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !9429

if.then7:                                         ; preds = %if.end5
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9430
  %11 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9430
  %call8 = call %union.tree_node* @c_fully_fold(%union.tree_node* %11, i8 zeroext 0, i8* null), !dbg !9431
  %value9 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9432
  store %union.tree_node* %call8, %union.tree_node** %value9, align 8, !dbg !9433
  br label %if.end10, !dbg !9434

if.end10:                                         ; preds = %if.then7, %if.end5
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ret, align 8, !dbg !9435
  %tobool11 = icmp ne %struct.VEC_tree_gc* %12, null, !dbg !9435
  br i1 %tobool11, label %cond.true, label %cond.false, !dbg !9435

cond.true:                                        ; preds = %if.end10
  %13 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ret, align 8, !dbg !9435
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %13, i32 0, i32 0, !dbg !9435
  br label %cond.end, !dbg !9435

cond.false:                                       ; preds = %if.end10
  br label %cond.end, !dbg !9435

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9435
  %value12 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9435
  %14 = load %union.tree_node*, %union.tree_node** %value12, align 8, !dbg !9435
  %call13 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %14), !dbg !9435
  %15 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %orig_types, align 8, !dbg !9436
  %cmp14 = icmp ne %struct.VEC_tree_gc* %15, null, !dbg !9438
  br i1 %cmp14, label %if.then15, label %if.end23, !dbg !9439

if.then15:                                        ; preds = %cond.end
  %16 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %orig_types, align 8, !dbg !9440
  %tobool16 = icmp ne %struct.VEC_tree_gc* %16, null, !dbg !9440
  br i1 %tobool16, label %cond.true17, label %cond.false19, !dbg !9440

cond.true17:                                      ; preds = %if.then15
  %17 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %orig_types, align 8, !dbg !9440
  %base18 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %17, i32 0, i32 0, !dbg !9440
  br label %cond.end20, !dbg !9440

cond.false19:                                     ; preds = %if.then15
  br label %cond.end20, !dbg !9440

cond.end20:                                       ; preds = %cond.false19, %cond.true17
  %cond21 = phi %struct.VEC_tree_base* [ %base18, %cond.true17 ], [ null, %cond.false19 ], !dbg !9440
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !9440
  %18 = load %union.tree_node*, %union.tree_node** %original_type, align 8, !dbg !9440
  %call22 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond21, %union.tree_node* %18), !dbg !9440
  br label %if.end23, !dbg !9440

if.end23:                                         ; preds = %cond.end20, %cond.end
  br label %while.cond, !dbg !9441

while.cond:                                       ; preds = %if.end45, %if.end23
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9442
  %call24 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %19, i32 19), !dbg !9443
  %tobool25 = icmp ne i8 %call24, 0, !dbg !9441
  br i1 %tobool25, label %while.body, label %while.end, !dbg !9441

while.body:                                       ; preds = %while.cond
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9444
  call void @c_parser_consume_token(%struct.c_parser* %20), !dbg !9446
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9447
  %call26 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %21), !dbg !9448
  %location27 = getelementptr inbounds %struct.c_token, %struct.c_token* %call26, i32 0, i32 2, !dbg !9449
  %22 = load i32, i32* %location27, align 8, !dbg !9449
  store i32 %22, i32* %loc, align 4, !dbg !9450
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9451
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp28, %struct.c_parser* %23, %struct.c_expr* null), !dbg !9452
  %24 = bitcast %struct.c_expr* %expr to i8*, !dbg !9452
  %25 = bitcast %struct.c_expr* %tmp28 to i8*, !dbg !9452
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 24, i1 false), !dbg !9452
  %26 = load i8, i8* %convert_p.addr, align 1, !dbg !9453
  %tobool29 = icmp ne i8 %26, 0, !dbg !9453
  br i1 %tobool29, label %if.then30, label %if.end32, !dbg !9455

if.then30:                                        ; preds = %while.body
  %27 = load i32, i32* %loc, align 4, !dbg !9456
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp31, i32 %27, %struct.c_expr* byval(%struct.c_expr) align 8 %expr), !dbg !9457
  %28 = bitcast %struct.c_expr* %expr to i8*, !dbg !9457
  %29 = bitcast %struct.c_expr* %tmp31 to i8*, !dbg !9457
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 24, i1 false), !dbg !9457
  br label %if.end32, !dbg !9458

if.end32:                                         ; preds = %if.then30, %while.body
  %30 = load i8, i8* %fold_p.addr, align 1, !dbg !9459
  %tobool33 = icmp ne i8 %30, 0, !dbg !9459
  br i1 %tobool33, label %if.then34, label %if.end38, !dbg !9461

if.then34:                                        ; preds = %if.end32
  %value35 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9462
  %31 = load %union.tree_node*, %union.tree_node** %value35, align 8, !dbg !9462
  %call36 = call %union.tree_node* @c_fully_fold(%union.tree_node* %31, i8 zeroext 0, i8* null), !dbg !9463
  %value37 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9464
  store %union.tree_node* %call36, %union.tree_node** %value37, align 8, !dbg !9465
  br label %if.end38, !dbg !9466

if.end38:                                         ; preds = %if.then34, %if.end32
  %value39 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !9467
  %32 = load %union.tree_node*, %union.tree_node** %value39, align 8, !dbg !9467
  %call40 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %ret, %union.tree_node* %32), !dbg !9467
  %33 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %orig_types, align 8, !dbg !9468
  %cmp41 = icmp ne %struct.VEC_tree_gc* %33, null, !dbg !9470
  br i1 %cmp41, label %if.then42, label %if.end45, !dbg !9471

if.then42:                                        ; preds = %if.end38
  %original_type43 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !9472
  %34 = load %union.tree_node*, %union.tree_node** %original_type43, align 8, !dbg !9472
  %call44 = call %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %orig_types, %union.tree_node* %34), !dbg !9472
  br label %if.end45, !dbg !9472

if.end45:                                         ; preds = %if.then42, %if.end38
  br label %while.cond, !dbg !9441, !llvm.loop !9473

while.end:                                        ; preds = %while.cond
  %35 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %orig_types, align 8, !dbg !9475
  %cmp46 = icmp ne %struct.VEC_tree_gc* %35, null, !dbg !9477
  br i1 %cmp46, label %if.then47, label %if.end48, !dbg !9478

if.then47:                                        ; preds = %while.end
  %36 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %orig_types, align 8, !dbg !9479
  %37 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %p_orig_types.addr, align 8, !dbg !9480
  store %struct.VEC_tree_gc* %36, %struct.VEC_tree_gc** %37, align 8, !dbg !9481
  br label %if.end48, !dbg !9482

if.end48:                                         ; preds = %if.then47, %while.end
  %38 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ret, align 8, !dbg !9483
  ret %struct.VEC_tree_gc* %38, !dbg !9484
}

declare dso_local %union.tree_node* @build_function_call_vec(i32, %union.tree_node*, %struct.VEC_tree_gc*, %struct.VEC_tree_gc*) #2

declare dso_local void @release_tree_vector(%struct.VEC_tree_gc*) #2

declare dso_local %union.tree_node* @build_component_ref(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_indirect_ref(i32, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build_unary_op(i32, i32, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build_compound_expr(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.VEC_tree_gc* @make_tree_vector() #2

declare dso_local %union.tree_node* @c_fully_fold(%union.tree_node*, i8 zeroext, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !9485 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !9489, metadata !DIExpression()), !dbg !9490
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !9491, metadata !DIExpression()), !dbg !9490
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !9492, metadata !DIExpression()), !dbg !9490
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9490
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !9490
  %1 = load i32, i32* %num, align 8, !dbg !9490
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9490
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !9490
  %3 = load i32, i32* %alloc, align 4, !dbg !9490
  %cmp = icmp ult i32 %1, %3, !dbg !9490
  %conv = zext i1 %cmp to i32, !dbg !9490
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9490
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !9490
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9490
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !9490
  %6 = load i32, i32* %num1, align 8, !dbg !9490
  %inc = add i32 %6, 1, !dbg !9490
  store i32 %inc, i32* %num1, align 8, !dbg !9490
  %idxprom = zext i32 %6 to i64, !dbg !9490
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !9490
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !9490
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !9490
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !9490
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !9490
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !9490
  ret %union.tree_node** %9, !dbg !9490
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %vec_, %union.tree_node* %obj_) #0 !dbg !9493 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !9496, metadata !DIExpression()), !dbg !9497
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !9498, metadata !DIExpression()), !dbg !9497
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9497
  %call = call i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %0, i32 1), !dbg !9497
  %1 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9497
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %1, align 8, !dbg !9497
  %tobool = icmp ne %struct.VEC_tree_gc* %2, null, !dbg !9497
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9497

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9497
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %3, align 8, !dbg !9497
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %4, i32 0, i32 0, !dbg !9497
  br label %cond.end, !dbg !9497

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9497

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9497
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !9497
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !9497
  ret %union.tree_node** %call1, !dbg !9497
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %vec_, i32 %alloc_) #0 !dbg !9499 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_gc** %vec_, %struct.VEC_tree_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc*** %vec_.addr, metadata !9502, metadata !DIExpression()), !dbg !9503
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9504, metadata !DIExpression()), !dbg !9503
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !9505, metadata !DIExpression()), !dbg !9503
  %0 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9503
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %0, align 8, !dbg !9503
  %tobool = icmp ne %struct.VEC_tree_gc* %1, null, !dbg !9503
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9503

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9503
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %2, align 8, !dbg !9503
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %3, i32 0, i32 0, !dbg !9503
  br label %cond.end, !dbg !9503

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9503

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9503
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !9503
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !9503
  %tobool1 = icmp ne i32 %call, 0, !dbg !9503
  %lnot = xor i1 %tobool1, true, !dbg !9503
  %lnot.ext = zext i1 %lnot to i32, !dbg !9503
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !9503
  %5 = load i32, i32* %extend, align 4, !dbg !9506
  %tobool2 = icmp ne i32 %5, 0, !dbg !9506
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9503

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9506
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %6, align 8, !dbg !9506
  %8 = bitcast %struct.VEC_tree_gc* %7 to i8*, !dbg !9506
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !9506
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !9506
  %10 = bitcast i8* %call3 to %struct.VEC_tree_gc*, !dbg !9506
  %11 = load %struct.VEC_tree_gc**, %struct.VEC_tree_gc*** %vec_.addr, align 8, !dbg !9506
  store %struct.VEC_tree_gc* %10, %struct.VEC_tree_gc** %11, align 8, !dbg !9506
  br label %if.end, !dbg !9506

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !9503
  ret i32 %12, !dbg !9503
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !9508 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !9511, metadata !DIExpression()), !dbg !9512
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9513, metadata !DIExpression()), !dbg !9512
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !9512
  %cmp = icmp sge i32 %0, 0, !dbg !9512
  %conv = zext i1 %cmp to i32, !dbg !9512
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9512
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !9512
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9512

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9512
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !9512
  %3 = load i32, i32* %alloc, align 4, !dbg !9512
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !9512
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !9512
  %5 = load i32, i32* %num, align 8, !dbg !9512
  %sub = sub i32 %3, %5, !dbg !9512
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !9512
  %cmp1 = icmp uge i32 %sub, %6, !dbg !9512
  %conv2 = zext i1 %cmp1 to i32, !dbg !9512
  br label %cond.end, !dbg !9512

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !9512
  %tobool3 = icmp ne i32 %7, 0, !dbg !9512
  %lnot = xor i1 %tobool3, true, !dbg !9512
  %lnot.ext = zext i1 %lnot to i32, !dbg !9512
  br label %cond.end, !dbg !9512

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !9512
  ret i32 %cond, !dbg !9512
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

declare dso_local void @check_compound_literal_type(i32, %struct.c_type_name*) #2

declare dso_local void @start_init(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_braced_init(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser, %union.tree_node* %type, i8 zeroext %nested_p) #0 !dbg !9514 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %nested_p.addr = alloca i8, align 1
  %brace_loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !9517, metadata !DIExpression()), !dbg !9518
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9519, metadata !DIExpression()), !dbg !9520
  store i8 %nested_p, i8* %nested_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %nested_p.addr, metadata !9521, metadata !DIExpression()), !dbg !9522
  call void @llvm.dbg.declare(metadata i32* %brace_loc, metadata !9523, metadata !DIExpression()), !dbg !9524
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9525
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !9526
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !9527
  %1 = load i32, i32* %location, align 8, !dbg !9527
  store i32 %1, i32* %brace_loc, align 4, !dbg !9524
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9528
  %call1 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %2, i32 41), !dbg !9528
  %tobool = icmp ne i8 %call1, 0, !dbg !9528
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9528

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3091, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9528
  br label %cond.end, !dbg !9528

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9528

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9528
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9529
  call void @c_parser_consume_token(%struct.c_parser* %3), !dbg !9530
  %4 = load i8, i8* %nested_p.addr, align 1, !dbg !9531
  %tobool2 = icmp ne i8 %4, 0, !dbg !9531
  br i1 %tobool2, label %if.then, label %if.else, !dbg !9533

if.then:                                          ; preds = %cond.end
  call void @push_init_level(i32 0), !dbg !9534
  br label %if.end, !dbg !9534

if.else:                                          ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9535
  call void @really_start_incremental_init(%union.tree_node* %5), !dbg !9536
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9537
  %call3 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %6, i32 42), !dbg !9539
  %tobool4 = icmp ne i8 %call3, 0, !dbg !9539
  br i1 %tobool4, label %if.then5, label %if.else7, !dbg !9540

if.then5:                                         ; preds = %if.end
  %7 = load i32, i32* %brace_loc, align 4, !dbg !9541
  %call6 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %7, i32 834, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.26, i64 0, i64 0)), !dbg !9543
  br label %if.end20, !dbg !9544

if.else7:                                         ; preds = %if.end
  br label %while.body, !dbg !9545

while.body:                                       ; preds = %if.else7, %if.end19
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9547
  call void @c_parser_initelt(%struct.c_parser* %8), !dbg !9549
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9550
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %9, i32 0, i32 2, !dbg !9552
  %bf.load = load i8, i8* %error, align 2, !dbg !9552
  %bf.clear = and i8 %bf.load, 1, !dbg !9552
  %bf.cast = zext i8 %bf.clear to i32, !dbg !9552
  %tobool8 = icmp ne i32 %bf.cast, 0, !dbg !9550
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !9553

if.then9:                                         ; preds = %while.body
  br label %while.end, !dbg !9554

if.end10:                                         ; preds = %while.body
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9555
  %call11 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %10, i32 19), !dbg !9557
  %tobool12 = icmp ne i8 %call11, 0, !dbg !9557
  br i1 %tobool12, label %if.then13, label %if.else14, !dbg !9558

if.then13:                                        ; preds = %if.end10
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9559
  call void @c_parser_consume_token(%struct.c_parser* %11), !dbg !9560
  br label %if.end15, !dbg !9560

if.else14:                                        ; preds = %if.end10
  br label %while.end, !dbg !9561

if.end15:                                         ; preds = %if.then13
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9562
  %call16 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %12, i32 42), !dbg !9564
  %tobool17 = icmp ne i8 %call16, 0, !dbg !9564
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !9565

if.then18:                                        ; preds = %if.end15
  br label %while.end, !dbg !9566

if.end19:                                         ; preds = %if.end15
  br label %while.body, !dbg !9545, !llvm.loop !9567

while.end:                                        ; preds = %if.then18, %if.else14, %if.then9
  br label %if.end20

if.end20:                                         ; preds = %while.end, %if.then5
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9569
  %call21 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %13, i32 42), !dbg !9571
  %tobool22 = icmp ne i8 %call21, 0, !dbg !9571
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !9572

if.then23:                                        ; preds = %if.end20
  call void @llvm.dbg.declare(metadata %struct.c_expr* %agg.result, metadata !9573, metadata !DIExpression()), !dbg !9575
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9576
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 0, !dbg !9577
  store %union.tree_node* %14, %union.tree_node** %value, align 8, !dbg !9578
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 1, !dbg !9579
  store i32 0, i32* %original_code, align 8, !dbg !9580
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 2, !dbg !9581
  store %union.tree_node* null, %union.tree_node** %original_type, align 8, !dbg !9582
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9583
  call void @c_parser_skip_until_found(%struct.c_parser* %15, i32 42, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.27, i64 0, i64 0)), !dbg !9584
  call void @pop_init_level(%struct.c_expr* sret %tmp, i32 0), !dbg !9585
  br label %return, !dbg !9586

if.end24:                                         ; preds = %if.end20
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9587
  call void @c_parser_consume_token(%struct.c_parser* %16), !dbg !9588
  call void @pop_init_level(%struct.c_expr* sret %agg.result, i32 0), !dbg !9589
  br label %return, !dbg !9590

return:                                           ; preds = %if.end24, %if.then23
  ret void, !dbg !9591
}

declare dso_local void @finish_init() #2

declare dso_local void @maybe_warn_string_init(%union.tree_node*, %struct.c_expr* byval(%struct.c_expr) align 8) #2

declare dso_local void @error(i8*, ...) #2

declare dso_local %union.tree_node* @build_compound_literal(i32, %union.tree_node*, %union.tree_node*, i8 zeroext) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @push_init_level(i32) #2

declare dso_local void @really_start_incremental_init(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_initelt(%struct.c_parser* %parser) #0 !dbg !9592 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %des_seen = alloca i32, align 4
  %des_loc = alloca i32, align 4
  %des_prev = alloca i32, align 4
  %init = alloca %struct.c_expr, align 8
  %first = alloca %union.tree_node*, align 8
  %second = alloca %union.tree_node*, align 8
  %ellipsis_loc = alloca i32, align 4
  %rec = alloca %union.tree_node*, align 8
  %args = alloca %union.tree_node*, align 8
  %mexpr = alloca %struct.c_expr, align 8
  %id = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.c_expr, align 8
  %next = alloca %struct.c_expr, align 8
  %comma_loc = alloca i32, align 4
  %exp_loc = alloca i32, align 4
  %tmp86 = alloca %struct.c_expr, align 8
  %tmp87 = alloca %struct.c_expr, align 8
  %tmp97 = alloca %struct.c_expr, align 8
  %tmp104 = alloca %struct.c_expr, align 8
  %init137 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !9593, metadata !DIExpression()), !dbg !9594
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9595
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 53), !dbg !9597
  %conv = zext i8 %call to i32, !dbg !9597
  %tobool = icmp ne i32 %conv, 0, !dbg !9597
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9598

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9599
  %call1 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %1), !dbg !9600
  %2 = bitcast %struct.c_token* %call1 to i32*, !dbg !9601
  %bf.load = load i32, i32* %2, align 8, !dbg !9601
  %bf.clear = and i32 %bf.load, 255, !dbg !9601
  %cmp = icmp eq i32 %bf.clear, 18, !dbg !9602
  br i1 %cmp, label %if.then, label %if.else, !dbg !9603

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9604
  %call3 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !9606
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call3, i32 0, i32 1, !dbg !9607
  %4 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9607
  call void @set_init_label(%union.tree_node* %4), !dbg !9608
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9609
  %call4 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %5), !dbg !9610
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call4, i32 0, i32 2, !dbg !9611
  %6 = load i32, i32* %location, align 8, !dbg !9611
  %call5 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %6, i32 834, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.28, i64 0, i64 0)), !dbg !9612
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9613
  call void @c_parser_consume_token(%struct.c_parser* %7), !dbg !9614
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9615
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !9616
  br label %if.end144, !dbg !9617

if.else:                                          ; preds = %land.lhs.true, %entry
  call void @llvm.dbg.declare(metadata i32* %des_seen, metadata !9618, metadata !DIExpression()), !dbg !9620
  store i32 0, i32* %des_seen, align 4, !dbg !9620
  call void @llvm.dbg.declare(metadata i32* %des_loc, metadata !9621, metadata !DIExpression()), !dbg !9622
  store i32 0, i32* %des_loc, align 4, !dbg !9622
  br label %while.cond, !dbg !9623

while.cond:                                       ; preds = %if.end117, %if.else
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9624
  %call6 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %9, i32 39), !dbg !9625
  %conv7 = zext i8 %call6 to i32, !dbg !9625
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !9625
  br i1 %tobool8, label %lor.end, label %lor.rhs, !dbg !9626

lor.rhs:                                          ; preds = %while.cond
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9627
  %call9 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %10, i32 48), !dbg !9628
  %conv10 = zext i8 %call9 to i32, !dbg !9628
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !9626
  br label %lor.end, !dbg !9626

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %11 = phi i1 [ true, %while.cond ], [ %tobool11, %lor.rhs ]
  br i1 %11, label %while.body, label %while.end118, !dbg !9623

while.body:                                       ; preds = %lor.end
  call void @llvm.dbg.declare(metadata i32* %des_prev, metadata !9629, metadata !DIExpression()), !dbg !9631
  %12 = load i32, i32* %des_seen, align 4, !dbg !9632
  store i32 %12, i32* %des_prev, align 4, !dbg !9631
  %13 = load i32, i32* %des_seen, align 4, !dbg !9633
  %tobool12 = icmp ne i32 %13, 0, !dbg !9633
  br i1 %tobool12, label %if.end, label %if.then13, !dbg !9635

if.then13:                                        ; preds = %while.body
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9636
  %call14 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %14), !dbg !9637
  %location15 = getelementptr inbounds %struct.c_token, %struct.c_token* %call14, i32 0, i32 2, !dbg !9638
  %15 = load i32, i32* %location15, align 8, !dbg !9638
  store i32 %15, i32* %des_loc, align 4, !dbg !9639
  br label %if.end, !dbg !9640

if.end:                                           ; preds = %if.then13, %while.body
  %16 = load i32, i32* %des_seen, align 4, !dbg !9641
  %cmp16 = icmp slt i32 %16, 2, !dbg !9643
  br i1 %cmp16, label %if.then18, label %if.end19, !dbg !9644

if.then18:                                        ; preds = %if.end
  %17 = load i32, i32* %des_seen, align 4, !dbg !9645
  %inc = add nsw i32 %17, 1, !dbg !9645
  store i32 %inc, i32* %des_seen, align 4, !dbg !9645
  br label %if.end19, !dbg !9646

if.end19:                                         ; preds = %if.then18, %if.end
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9647
  %call20 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %18, i32 48), !dbg !9649
  %tobool21 = icmp ne i8 %call20, 0, !dbg !9649
  br i1 %tobool21, label %if.then22, label %if.else31, !dbg !9650

if.then22:                                        ; preds = %if.end19
  store i32 2, i32* %des_seen, align 4, !dbg !9651
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9653
  call void @c_parser_consume_token(%struct.c_parser* %19), !dbg !9654
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9655
  %call23 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %20, i32 53), !dbg !9657
  %tobool24 = icmp ne i8 %call23, 0, !dbg !9657
  br i1 %tobool24, label %if.then25, label %if.else28, !dbg !9658

if.then25:                                        ; preds = %if.then22
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9659
  %call26 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %21), !dbg !9661
  %value27 = getelementptr inbounds %struct.c_token, %struct.c_token* %call26, i32 0, i32 1, !dbg !9662
  %22 = load %union.tree_node*, %union.tree_node** %value27, align 8, !dbg !9662
  call void @set_init_label(%union.tree_node* %22), !dbg !9663
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9664
  call void @c_parser_consume_token(%struct.c_parser* %23), !dbg !9665
  br label %if.end30, !dbg !9666

if.else28:                                        ; preds = %if.then22
  call void @llvm.dbg.declare(metadata %struct.c_expr* %init, metadata !9667, metadata !DIExpression()), !dbg !9669
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9670
  %value29 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 0, !dbg !9671
  store %union.tree_node* %24, %union.tree_node** %value29, align 8, !dbg !9672
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 1, !dbg !9673
  store i32 0, i32* %original_code, align 8, !dbg !9674
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 2, !dbg !9675
  store %union.tree_node* null, %union.tree_node** %original_type, align 8, !dbg !9676
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9677
  call void @c_parser_error(%struct.c_parser* %25, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !9678
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9679
  call void @c_parser_skip_until_found(%struct.c_parser* %26, i32 19, i8* null), !dbg !9680
  call void @process_init_element(%struct.c_expr* byval(%struct.c_expr) align 8 %init, i8 zeroext 0), !dbg !9681
  br label %return, !dbg !9682

if.end30:                                         ; preds = %if.then25
  br label %if.end117, !dbg !9683

if.else31:                                        ; preds = %if.end19
  call void @llvm.dbg.declare(metadata %union.tree_node** %first, metadata !9684, metadata !DIExpression()), !dbg !9686
  call void @llvm.dbg.declare(metadata %union.tree_node** %second, metadata !9687, metadata !DIExpression()), !dbg !9688
  call void @llvm.dbg.declare(metadata i32* %ellipsis_loc, metadata !9689, metadata !DIExpression()), !dbg !9690
  store i32 0, i32* %ellipsis_loc, align 4, !dbg !9690
  %27 = load i32, i32* %des_prev, align 4, !dbg !9691
  %cmp32 = icmp eq i32 %27, 1, !dbg !9693
  br i1 %cmp32, label %land.lhs.true34, label %if.end38, !dbg !9694

land.lhs.true34:                                  ; preds = %if.else31
  %28 = load i32, i32* @c_language, align 4, !dbg !9695
  %and = and i32 %28, 1, !dbg !9695
  %cmp35 = icmp ne i32 %and, 0, !dbg !9695
  br i1 %cmp35, label %if.then37, label %if.end38, !dbg !9696

if.then37:                                        ; preds = %land.lhs.true34
  %29 = load i32, i32* %des_prev, align 4, !dbg !9697
  store i32 %29, i32* %des_seen, align 4, !dbg !9699
  br label %while.end118, !dbg !9700

if.end38:                                         ; preds = %land.lhs.true34, %if.else31
  %30 = load i32, i32* %des_prev, align 4, !dbg !9701
  %cmp39 = icmp eq i32 %30, 0, !dbg !9703
  br i1 %cmp39, label %land.lhs.true41, label %if.end96, !dbg !9704

land.lhs.true41:                                  ; preds = %if.end38
  %31 = load i32, i32* @c_language, align 4, !dbg !9705
  %and42 = and i32 %31, 1, !dbg !9705
  %cmp43 = icmp ne i32 %and42, 0, !dbg !9705
  br i1 %cmp43, label %if.then45, label %if.end96, !dbg !9706

if.then45:                                        ; preds = %land.lhs.true41
  call void @llvm.dbg.declare(metadata %union.tree_node** %rec, metadata !9707, metadata !DIExpression()), !dbg !9709
  call void @llvm.dbg.declare(metadata %union.tree_node** %args, metadata !9710, metadata !DIExpression()), !dbg !9711
  call void @llvm.dbg.declare(metadata %struct.c_expr* %mexpr, metadata !9712, metadata !DIExpression()), !dbg !9713
  %32 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9714
  call void @c_parser_consume_token(%struct.c_parser* %32), !dbg !9715
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9716
  %call46 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %33), !dbg !9718
  %34 = bitcast %struct.c_token* %call46 to i32*, !dbg !9719
  %bf.load47 = load i32, i32* %34, align 8, !dbg !9719
  %bf.clear48 = and i32 %bf.load47, 255, !dbg !9719
  %cmp49 = icmp eq i32 %bf.clear48, 53, !dbg !9720
  br i1 %cmp49, label %land.lhs.true51, label %if.end67, !dbg !9721

land.lhs.true51:                                  ; preds = %if.then45
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9722
  %call52 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %35), !dbg !9723
  %36 = bitcast %struct.c_token* %call52 to i32*, !dbg !9724
  %bf.load53 = load i32, i32* %36, align 8, !dbg !9724
  %bf.lshr = lshr i32 %bf.load53, 8, !dbg !9724
  %bf.clear54 = and i32 %bf.lshr, 255, !dbg !9724
  %cmp55 = icmp eq i32 %bf.clear54, 1, !dbg !9725
  br i1 %cmp55, label %if.then63, label %lor.lhs.false, !dbg !9726

lor.lhs.false:                                    ; preds = %land.lhs.true51
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9727
  %call57 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %37), !dbg !9728
  %38 = bitcast %struct.c_token* %call57 to i32*, !dbg !9729
  %bf.load58 = load i32, i32* %38, align 8, !dbg !9729
  %bf.lshr59 = lshr i32 %bf.load58, 8, !dbg !9729
  %bf.clear60 = and i32 %bf.lshr59, 255, !dbg !9729
  %cmp61 = icmp eq i32 %bf.clear60, 2, !dbg !9730
  br i1 %cmp61, label %if.then63, label %if.end67, !dbg !9731

if.then63:                                        ; preds = %lor.lhs.false, %land.lhs.true51
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !9732, metadata !DIExpression()), !dbg !9734
  %39 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9735
  %call64 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %39), !dbg !9736
  %value65 = getelementptr inbounds %struct.c_token, %struct.c_token* %call64, i32 0, i32 1, !dbg !9737
  %40 = load %union.tree_node*, %union.tree_node** %value65, align 8, !dbg !9737
  store %union.tree_node* %40, %union.tree_node** %id, align 8, !dbg !9734
  %41 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9738
  call void @c_parser_consume_token(%struct.c_parser* %41), !dbg !9739
  %42 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !9740
  %call66 = call %union.tree_node* @objc_get_class_reference(%union.tree_node* %42), !dbg !9741
  store %union.tree_node* %call66, %union.tree_node** %rec, align 8, !dbg !9742
  br label %parse_message_args, !dbg !9743

if.end67:                                         ; preds = %lor.lhs.false, %if.then45
  %43 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9744
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp, %struct.c_parser* %43, %struct.c_expr* null), !dbg !9745
  %value68 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !9746
  %44 = load %union.tree_node*, %union.tree_node** %value68, align 8, !dbg !9746
  store %union.tree_node* %44, %union.tree_node** %first, align 8, !dbg !9747
  %45 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9748
  %call69 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %45, i32 44), !dbg !9750
  %conv70 = zext i8 %call69 to i32, !dbg !9750
  %tobool71 = icmp ne i32 %conv70, 0, !dbg !9750
  br i1 %tobool71, label %if.then76, label %lor.lhs.false72, !dbg !9751

lor.lhs.false72:                                  ; preds = %if.end67
  %46 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9752
  %call73 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %46, i32 40), !dbg !9753
  %conv74 = zext i8 %call73 to i32, !dbg !9753
  %tobool75 = icmp ne i32 %conv74, 0, !dbg !9753
  br i1 %tobool75, label %if.then76, label %if.end77, !dbg !9754

if.then76:                                        ; preds = %lor.lhs.false72, %if.end67
  br label %array_desig_after_first, !dbg !9755

if.end77:                                         ; preds = %lor.lhs.false72
  %47 = load %union.tree_node*, %union.tree_node** %first, align 8, !dbg !9756
  store %union.tree_node* %47, %union.tree_node** %rec, align 8, !dbg !9757
  br label %while.cond78, !dbg !9758

while.cond78:                                     ; preds = %while.body81, %if.end77
  %48 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9759
  %call79 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %48, i32 19), !dbg !9760
  %tobool80 = icmp ne i8 %call79, 0, !dbg !9758
  br i1 %tobool80, label %while.body81, label %while.end, !dbg !9758

while.body81:                                     ; preds = %while.cond78
  call void @llvm.dbg.declare(metadata %struct.c_expr* %next, metadata !9761, metadata !DIExpression()), !dbg !9763
  call void @llvm.dbg.declare(metadata i32* %comma_loc, metadata !9764, metadata !DIExpression()), !dbg !9765
  call void @llvm.dbg.declare(metadata i32* %exp_loc, metadata !9766, metadata !DIExpression()), !dbg !9767
  %49 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9768
  %call82 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %49), !dbg !9769
  %location83 = getelementptr inbounds %struct.c_token, %struct.c_token* %call82, i32 0, i32 2, !dbg !9770
  %50 = load i32, i32* %location83, align 8, !dbg !9770
  store i32 %50, i32* %comma_loc, align 4, !dbg !9771
  %51 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9772
  call void @c_parser_consume_token(%struct.c_parser* %51), !dbg !9773
  %52 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9774
  %call84 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %52), !dbg !9775
  %location85 = getelementptr inbounds %struct.c_token, %struct.c_token* %call84, i32 0, i32 2, !dbg !9776
  %53 = load i32, i32* %location85, align 8, !dbg !9776
  store i32 %53, i32* %exp_loc, align 4, !dbg !9777
  %54 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9778
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp86, %struct.c_parser* %54, %struct.c_expr* null), !dbg !9779
  %55 = bitcast %struct.c_expr* %next to i8*, !dbg !9779
  %56 = bitcast %struct.c_expr* %tmp86 to i8*, !dbg !9779
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 24, i1 false), !dbg !9779
  %57 = load i32, i32* %exp_loc, align 4, !dbg !9780
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp87, i32 %57, %struct.c_expr* byval(%struct.c_expr) align 8 %next), !dbg !9781
  %58 = bitcast %struct.c_expr* %next to i8*, !dbg !9781
  %59 = bitcast %struct.c_expr* %tmp87 to i8*, !dbg !9781
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 24, i1 false), !dbg !9781
  %60 = load i32, i32* %comma_loc, align 4, !dbg !9782
  %61 = load %union.tree_node*, %union.tree_node** %rec, align 8, !dbg !9783
  %value88 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %next, i32 0, i32 0, !dbg !9784
  %62 = load %union.tree_node*, %union.tree_node** %value88, align 8, !dbg !9784
  %call89 = call %union.tree_node* @build_compound_expr(i32 %60, %union.tree_node* %61, %union.tree_node* %62), !dbg !9785
  store %union.tree_node* %call89, %union.tree_node** %rec, align 8, !dbg !9786
  br label %while.cond78, !dbg !9758, !llvm.loop !9787

while.end:                                        ; preds = %while.cond78
  br label %parse_message_args, !dbg !9758

parse_message_args:                               ; preds = %while.end, %if.then63
  call void @llvm.dbg.label(metadata !9789), !dbg !9790
  %63 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9791
  %call90 = call %union.tree_node* @c_parser_objc_message_args(%struct.c_parser* %63), !dbg !9792
  store %union.tree_node* %call90, %union.tree_node** %args, align 8, !dbg !9793
  %64 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9794
  call void @c_parser_skip_until_found(%struct.c_parser* %64, i32 40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0)), !dbg !9795
  %65 = load %union.tree_node*, %union.tree_node** %rec, align 8, !dbg !9796
  %66 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !9796
  %call91 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* %65, %union.tree_node* %66), !dbg !9796
  %call92 = call %union.tree_node* @objc_build_message_expr(%union.tree_node* %call91), !dbg !9797
  %value93 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %mexpr, i32 0, i32 0, !dbg !9798
  store %union.tree_node* %call92, %union.tree_node** %value93, align 8, !dbg !9799
  %original_code94 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %mexpr, i32 0, i32 1, !dbg !9800
  store i32 0, i32* %original_code94, align 8, !dbg !9801
  %original_type95 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %mexpr, i32 0, i32 2, !dbg !9802
  store %union.tree_node* null, %union.tree_node** %original_type95, align 8, !dbg !9803
  %67 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9804
  call void @c_parser_initval(%struct.c_parser* %67, %struct.c_expr* %mexpr), !dbg !9805
  br label %return, !dbg !9806

if.end96:                                         ; preds = %land.lhs.true41, %if.end38
  %68 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9807
  call void @c_parser_consume_token(%struct.c_parser* %68), !dbg !9808
  %69 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9809
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp97, %struct.c_parser* %69, %struct.c_expr* null), !dbg !9810
  %value98 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp97, i32 0, i32 0, !dbg !9811
  %70 = load %union.tree_node*, %union.tree_node** %value98, align 8, !dbg !9811
  store %union.tree_node* %70, %union.tree_node** %first, align 8, !dbg !9812
  br label %array_desig_after_first, !dbg !9813

array_desig_after_first:                          ; preds = %if.end96, %if.then76
  call void @llvm.dbg.label(metadata !9814), !dbg !9815
  %71 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9816
  %call99 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %71, i32 44), !dbg !9818
  %tobool100 = icmp ne i8 %call99, 0, !dbg !9818
  br i1 %tobool100, label %if.then101, label %if.else106, !dbg !9819

if.then101:                                       ; preds = %array_desig_after_first
  %72 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9820
  %call102 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %72), !dbg !9822
  %location103 = getelementptr inbounds %struct.c_token, %struct.c_token* %call102, i32 0, i32 2, !dbg !9823
  %73 = load i32, i32* %location103, align 8, !dbg !9823
  store i32 %73, i32* %ellipsis_loc, align 4, !dbg !9824
  %74 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9825
  call void @c_parser_consume_token(%struct.c_parser* %74), !dbg !9826
  %75 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9827
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp104, %struct.c_parser* %75, %struct.c_expr* null), !dbg !9828
  %value105 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp104, i32 0, i32 0, !dbg !9829
  %76 = load %union.tree_node*, %union.tree_node** %value105, align 8, !dbg !9829
  store %union.tree_node* %76, %union.tree_node** %second, align 8, !dbg !9830
  br label %if.end107, !dbg !9831

if.else106:                                       ; preds = %array_desig_after_first
  store %union.tree_node* null, %union.tree_node** %second, align 8, !dbg !9832
  br label %if.end107

if.end107:                                        ; preds = %if.else106, %if.then101
  %77 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9833
  %call108 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %77, i32 40), !dbg !9835
  %tobool109 = icmp ne i8 %call108, 0, !dbg !9835
  br i1 %tobool109, label %if.then110, label %if.else115, !dbg !9836

if.then110:                                       ; preds = %if.end107
  %78 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9837
  call void @c_parser_consume_token(%struct.c_parser* %78), !dbg !9839
  %79 = load %union.tree_node*, %union.tree_node** %first, align 8, !dbg !9840
  %80 = load %union.tree_node*, %union.tree_node** %second, align 8, !dbg !9841
  call void @set_init_index(%union.tree_node* %79, %union.tree_node* %80), !dbg !9842
  %81 = load %union.tree_node*, %union.tree_node** %second, align 8, !dbg !9843
  %tobool111 = icmp ne %union.tree_node* %81, null, !dbg !9843
  br i1 %tobool111, label %if.then112, label %if.end114, !dbg !9845

if.then112:                                       ; preds = %if.then110
  %82 = load i32, i32* %ellipsis_loc, align 4, !dbg !9846
  %call113 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %82, i32 834, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.29, i64 0, i64 0)), !dbg !9847
  br label %if.end114, !dbg !9847

if.end114:                                        ; preds = %if.then112, %if.then110
  br label %if.end116, !dbg !9848

if.else115:                                       ; preds = %if.end107
  %83 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9849
  call void @c_parser_skip_until_found(%struct.c_parser* %83, i32 40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0)), !dbg !9850
  br label %if.end116

if.end116:                                        ; preds = %if.else115, %if.end114
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.end30
  br label %while.cond, !dbg !9623, !llvm.loop !9851

while.end118:                                     ; preds = %if.then37, %lor.end
  %84 = load i32, i32* %des_seen, align 4, !dbg !9853
  %cmp119 = icmp sge i32 %84, 1, !dbg !9855
  br i1 %cmp119, label %if.then121, label %if.end143, !dbg !9856

if.then121:                                       ; preds = %while.end118
  %85 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9857
  %call122 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %85, i32 0), !dbg !9860
  %tobool123 = icmp ne i8 %call122, 0, !dbg !9860
  br i1 %tobool123, label %if.then124, label %if.else129, !dbg !9861

if.then124:                                       ; preds = %if.then121
  %86 = load i32, i32* @flag_isoc99, align 4, !dbg !9862
  %tobool125 = icmp ne i32 %86, 0, !dbg !9862
  br i1 %tobool125, label %if.end128, label %if.then126, !dbg !9865

if.then126:                                       ; preds = %if.then124
  %87 = load i32, i32* %des_loc, align 4, !dbg !9866
  %call127 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %87, i32 834, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0)), !dbg !9867
  br label %if.end128, !dbg !9867

if.end128:                                        ; preds = %if.then126, %if.then124
  %88 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9868
  call void @c_parser_consume_token(%struct.c_parser* %88), !dbg !9869
  br label %if.end142, !dbg !9870

if.else129:                                       ; preds = %if.then121
  %89 = load i32, i32* %des_seen, align 4, !dbg !9871
  %cmp130 = icmp eq i32 %89, 1, !dbg !9874
  br i1 %cmp130, label %if.then132, label %if.else136, !dbg !9875

if.then132:                                       ; preds = %if.else129
  %90 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9876
  %call133 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %90), !dbg !9877
  %location134 = getelementptr inbounds %struct.c_token, %struct.c_token* %call133, i32 0, i32 2, !dbg !9878
  %91 = load i32, i32* %location134, align 8, !dbg !9878
  %call135 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %91, i32 834, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.31, i64 0, i64 0)), !dbg !9879
  br label %if.end141, !dbg !9879

if.else136:                                       ; preds = %if.else129
  call void @llvm.dbg.declare(metadata %struct.c_expr* %init137, metadata !9880, metadata !DIExpression()), !dbg !9882
  %92 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9883
  %value138 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init137, i32 0, i32 0, !dbg !9884
  store %union.tree_node* %92, %union.tree_node** %value138, align 8, !dbg !9885
  %original_code139 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init137, i32 0, i32 1, !dbg !9886
  store i32 0, i32* %original_code139, align 8, !dbg !9887
  %original_type140 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init137, i32 0, i32 2, !dbg !9888
  store %union.tree_node* null, %union.tree_node** %original_type140, align 8, !dbg !9889
  %93 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9890
  call void @c_parser_error(%struct.c_parser* %93, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i64 0, i64 0)), !dbg !9891
  %94 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9892
  call void @c_parser_skip_until_found(%struct.c_parser* %94, i32 19, i8* null), !dbg !9893
  call void @process_init_element(%struct.c_expr* byval(%struct.c_expr) align 8 %init137, i8 zeroext 0), !dbg !9894
  br label %return, !dbg !9895

if.end141:                                        ; preds = %if.then132
  br label %if.end142

if.end142:                                        ; preds = %if.end141, %if.end128
  br label %if.end143, !dbg !9896

if.end143:                                        ; preds = %if.end142, %while.end118
  br label %if.end144

if.end144:                                        ; preds = %if.end143, %if.then
  %95 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9897
  call void @c_parser_initval(%struct.c_parser* %95, %struct.c_expr* null), !dbg !9898
  br label %return, !dbg !9899

return:                                           ; preds = %if.end144, %if.else136, %parse_message_args, %if.else28
  ret void, !dbg !9899
}

declare dso_local void @pop_init_level(%struct.c_expr* sret, i32) #2

declare dso_local void @set_init_label(%union.tree_node*) #2

declare dso_local void @process_init_element(%struct.c_expr* byval(%struct.c_expr) align 8, i8 zeroext) #2

declare dso_local %union.tree_node* @objc_get_class_reference(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_objc_message_args(%struct.c_parser* %parser) #0 !dbg !9900 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %sel = alloca %union.tree_node*, align 8
  %list = alloca %union.tree_node*, align 8
  %keywordexpr = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !9901, metadata !DIExpression()), !dbg !9902
  call void @llvm.dbg.declare(metadata %union.tree_node** %sel, metadata !9903, metadata !DIExpression()), !dbg !9904
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9905
  %call = call %union.tree_node* @c_parser_objc_selector(%struct.c_parser* %0), !dbg !9906
  store %union.tree_node* %call, %union.tree_node** %sel, align 8, !dbg !9904
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !9907, metadata !DIExpression()), !dbg !9908
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !9908
  %1 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !9909
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !9909
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9911

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9912
  %call1 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %2, i32 18), !dbg !9913
  %conv = zext i8 %call1 to i32, !dbg !9913
  %tobool2 = icmp ne i32 %conv, 0, !dbg !9913
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9914

if.then:                                          ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !9915
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !9916
  br label %return, !dbg !9916

if.end:                                           ; preds = %land.lhs.true, %entry
  br label %while.body, !dbg !9917

while.body:                                       ; preds = %if.end, %if.end17
  call void @llvm.dbg.declare(metadata %union.tree_node** %keywordexpr, metadata !9918, metadata !DIExpression()), !dbg !9920
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9921
  %call3 = call zeroext i8 @c_parser_require(%struct.c_parser* %4, i32 18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)), !dbg !9923
  %tobool4 = icmp ne i8 %call3, 0, !dbg !9923
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !9924

if.then5:                                         ; preds = %while.body
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9925
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !9926
  br label %return, !dbg !9926

if.end6:                                          ; preds = %while.body
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9927
  %call7 = call %union.tree_node* @c_parser_objc_keywordexpr(%struct.c_parser* %6), !dbg !9928
  store %union.tree_node* %call7, %union.tree_node** %keywordexpr, align 8, !dbg !9929
  %7 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !9930
  %8 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !9931
  %9 = load %union.tree_node*, %union.tree_node** %keywordexpr, align 8, !dbg !9931
  %call8 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* %8, %union.tree_node* %9), !dbg !9931
  %call9 = call %union.tree_node* @chainon(%union.tree_node* %7, %union.tree_node* %call8), !dbg !9932
  store %union.tree_node* %call9, %union.tree_node** %list, align 8, !dbg !9933
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9934
  %call10 = call %union.tree_node* @c_parser_objc_selector(%struct.c_parser* %10), !dbg !9935
  store %union.tree_node* %call10, %union.tree_node** %sel, align 8, !dbg !9936
  %11 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !9937
  %tobool11 = icmp ne %union.tree_node* %11, null, !dbg !9937
  br i1 %tobool11, label %if.end17, label %land.lhs.true12, !dbg !9939

land.lhs.true12:                                  ; preds = %if.end6
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9940
  %call13 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %12, i32 18), !dbg !9941
  %conv14 = zext i8 %call13 to i32, !dbg !9941
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !9941
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !9942

if.then16:                                        ; preds = %land.lhs.true12
  br label %while.end, !dbg !9943

if.end17:                                         ; preds = %land.lhs.true12, %if.end6
  br label %while.body, !dbg !9917, !llvm.loop !9944

while.end:                                        ; preds = %if.then16
  %13 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !9946
  store %union.tree_node* %13, %union.tree_node** %retval, align 8, !dbg !9947
  br label %return, !dbg !9947

return:                                           ; preds = %while.end, %if.then5, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9948
  ret %union.tree_node* %14, !dbg !9948
}

declare dso_local %union.tree_node* @objc_build_message_expr(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_initval(%struct.c_parser* %parser, %struct.c_expr* %after) #0 !dbg !9949 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %after.addr = alloca %struct.c_expr*, align 8
  %init = alloca %struct.c_expr, align 8
  %tmp = alloca %struct.c_expr, align 8
  %loc = alloca i32, align 4
  %tmp4 = alloca %struct.c_expr, align 8
  %tmp20 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !9952, metadata !DIExpression()), !dbg !9953
  store %struct.c_expr* %after, %struct.c_expr** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_expr** %after.addr, metadata !9954, metadata !DIExpression()), !dbg !9955
  call void @llvm.dbg.declare(metadata %struct.c_expr* %init, metadata !9956, metadata !DIExpression()), !dbg !9957
  %0 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !9958
  %tobool = icmp ne %struct.c_expr* %0, null, !dbg !9958
  br i1 %tobool, label %lor.lhs.false, label %cond.false, !dbg !9958

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @c_language, align 4, !dbg !9958
  %and = and i32 %1, 1, !dbg !9958
  %cmp = icmp ne i32 %and, 0, !dbg !9958
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9958

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3330, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9958
  br label %cond.end, !dbg !9958

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !9958

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9958
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9959
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %2, i32 41), !dbg !9961
  %conv = zext i8 %call to i32, !dbg !9961
  %tobool1 = icmp ne i32 %conv, 0, !dbg !9961
  br i1 %tobool1, label %land.lhs.true, label %if.else, !dbg !9962

land.lhs.true:                                    ; preds = %cond.end
  %3 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !9963
  %tobool2 = icmp ne %struct.c_expr* %3, null, !dbg !9963
  br i1 %tobool2, label %if.else, label %if.then, !dbg !9964

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9965
  call void @c_parser_braced_init(%struct.c_expr* sret %tmp, %struct.c_parser* %4, %union.tree_node* null, i8 zeroext 1), !dbg !9966
  %5 = bitcast %struct.c_expr* %init to i8*, !dbg !9966
  %6 = bitcast %struct.c_expr* %tmp to i8*, !dbg !9966
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 24, i1 false), !dbg !9966
  br label %if.end21, !dbg !9967

if.else:                                          ; preds = %land.lhs.true, %cond.end
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !9968, metadata !DIExpression()), !dbg !9970
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9971
  %call3 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %7), !dbg !9972
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call3, i32 0, i32 2, !dbg !9973
  %8 = load i32, i32* %location, align 8, !dbg !9973
  store i32 %8, i32* %loc, align 4, !dbg !9970
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9974
  %10 = load %struct.c_expr*, %struct.c_expr** %after.addr, align 8, !dbg !9975
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp4, %struct.c_parser* %9, %struct.c_expr* %10), !dbg !9976
  %11 = bitcast %struct.c_expr* %init to i8*, !dbg !9976
  %12 = bitcast %struct.c_expr* %tmp4 to i8*, !dbg !9976
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false), !dbg !9976
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 0, !dbg !9977
  %13 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9977
  %cmp5 = icmp ne %union.tree_node* %13, null, !dbg !9979
  br i1 %cmp5, label %land.lhs.true7, label %if.end, !dbg !9980

land.lhs.true7:                                   ; preds = %if.else
  %value8 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 0, !dbg !9981
  %14 = load %union.tree_node*, %union.tree_node** %value8, align 8, !dbg !9981
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !9981
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !9981
  %bf.load = load i64, i64* %15, align 8, !dbg !9981
  %bf.clear = and i64 %bf.load, 65535, !dbg !9981
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9981
  %cmp9 = icmp ne i32 %bf.cast, 28, !dbg !9982
  br i1 %cmp9, label %land.lhs.true11, label %if.end, !dbg !9983

land.lhs.true11:                                  ; preds = %land.lhs.true7
  %value12 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init, i32 0, i32 0, !dbg !9984
  %16 = load %union.tree_node*, %union.tree_node** %value12, align 8, !dbg !9984
  %base13 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !9984
  %17 = bitcast %struct.tree_base* %base13 to i64*, !dbg !9984
  %bf.load14 = load i64, i64* %17, align 8, !dbg !9984
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !9984
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !9984
  %cmp17 = icmp ne i32 %bf.cast16, 119, !dbg !9985
  br i1 %cmp17, label %if.then19, label %if.end, !dbg !9986

if.then19:                                        ; preds = %land.lhs.true11
  %18 = load i32, i32* %loc, align 4, !dbg !9987
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp20, i32 %18, %struct.c_expr* byval(%struct.c_expr) align 8 %init), !dbg !9988
  %19 = bitcast %struct.c_expr* %init to i8*, !dbg !9988
  %20 = bitcast %struct.c_expr* %tmp20 to i8*, !dbg !9988
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false), !dbg !9988
  br label %if.end, !dbg !9989

if.end:                                           ; preds = %if.then19, %land.lhs.true11, %land.lhs.true7, %if.else
  br label %if.end21

if.end21:                                         ; preds = %if.end, %if.then
  call void @process_init_element(%struct.c_expr* byval(%struct.c_expr) align 8 %init, i8 zeroext 0), !dbg !9990
  ret void, !dbg !9991
}

declare dso_local void @set_init_index(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_objc_keywordexpr(%struct.c_parser* %parser) #0 !dbg !9992 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %ret = alloca %union.tree_node*, align 8
  %expr_list = alloca %struct.VEC_tree_gc*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !9993, metadata !DIExpression()), !dbg !9994
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !9995, metadata !DIExpression()), !dbg !9996
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_gc** %expr_list, metadata !9997, metadata !DIExpression()), !dbg !9998
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !9999
  %call = call %struct.VEC_tree_gc* @c_parser_expr_list(%struct.c_parser* %0, i8 zeroext 1, i8 zeroext 1, %struct.VEC_tree_gc** null), !dbg !10000
  store %struct.VEC_tree_gc* %call, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !9998
  %1 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !10001
  %tobool = icmp ne %struct.VEC_tree_gc* %1, null, !dbg !10001
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10001

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !10001
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %2, i32 0, i32 0, !dbg !10001
  br label %cond.end, !dbg !10001

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10001

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10001
  %call1 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !10001
  %cmp = icmp eq i32 %call1, 1, !dbg !10003
  br i1 %cmp, label %if.then, label %if.else, !dbg !10004

if.then:                                          ; preds = %cond.end
  %3 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !10005
  %tobool2 = icmp ne %struct.VEC_tree_gc* %3, null, !dbg !10005
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !10005

cond.true3:                                       ; preds = %if.then
  %4 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !10005
  %base4 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %4, i32 0, i32 0, !dbg !10005
  br label %cond.end6, !dbg !10005

cond.false5:                                      ; preds = %if.then
  br label %cond.end6, !dbg !10005

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_tree_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !10005
  %call8 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond7, i32 0), !dbg !10005
  store %union.tree_node* %call8, %union.tree_node** %ret, align 8, !dbg !10007
  br label %if.end, !dbg !10008

if.else:                                          ; preds = %cond.end
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !10009
  %call9 = call %union.tree_node* @build_tree_list_vec_stat(%struct.VEC_tree_gc* %5), !dbg !10009
  store %union.tree_node* %call9, %union.tree_node** %ret, align 8, !dbg !10011
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end6
  %6 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %expr_list, align 8, !dbg !10012
  call void @release_tree_vector(%struct.VEC_tree_gc* %6), !dbg !10013
  %7 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !10014
  ret %union.tree_node* %7, !dbg !10015
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !10016 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10021, metadata !DIExpression()), !dbg !10022
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10022
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !10022
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10022

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10022
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !10022
  %2 = load i32, i32* %num, align 8, !dbg !10022
  br label %cond.end, !dbg !10022

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10022

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !10022
  ret i32 %cond, !dbg !10022
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !10023 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10026, metadata !DIExpression()), !dbg !10027
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !10028, metadata !DIExpression()), !dbg !10027
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10027
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !10027
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !10027

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !10027
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10027
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !10027
  %3 = load i32, i32* %num, align 8, !dbg !10027
  %cmp = icmp ult i32 %1, %3, !dbg !10027
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !10029
  %land.ext = zext i1 %4 to i32, !dbg !10027
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10027
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !10027
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !10027
  %idxprom = zext i32 %6 to i64, !dbg !10027
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !10027
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10027
  ret %union.tree_node* %7, !dbg !10027
}

declare dso_local %union.tree_node* @build_tree_list_vec_stat(%struct.VEC_tree_gc*) #2

declare dso_local void @parser_build_unary_op(%struct.c_expr* sret, i32, i32, %struct.c_expr* byval(%struct.c_expr) align 8) #2

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) #2

declare dso_local %union.tree_node* @finish_label_address_expr(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_sizeof_expression(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser) #0 !dbg !10030 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %expr = alloca %struct.c_expr, align 8
  %expr_loc = alloca i32, align 4
  %type_name = alloca %struct.c_type_name*, align 8
  %tmp = alloca %struct.c_expr, align 8
  %tmp21 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !10031, metadata !DIExpression()), !dbg !10032
  call void @llvm.dbg.declare(metadata %struct.c_expr* %expr, metadata !10033, metadata !DIExpression()), !dbg !10034
  call void @llvm.dbg.declare(metadata i32* %expr_loc, metadata !10035, metadata !DIExpression()), !dbg !10036
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10037
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 48), !dbg !10037
  %tobool = icmp ne i8 %call, 0, !dbg !10037
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10037

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5190, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !10037
  br label %cond.end, !dbg !10037

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10037

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10037
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10038
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !10039
  %2 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10040
  %inc = add nsw i32 %2, 1, !dbg !10040
  store i32 %inc, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10040
  %3 = load i32, i32* @in_sizeof, align 4, !dbg !10041
  %inc1 = add nsw i32 %3, 1, !dbg !10041
  store i32 %inc1, i32* @in_sizeof, align 4, !dbg !10041
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10042
  %call2 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %4, i32 20), !dbg !10044
  %conv = zext i8 %call2 to i32, !dbg !10044
  %tobool3 = icmp ne i32 %conv, 0, !dbg !10044
  br i1 %tobool3, label %land.lhs.true, label %if.else, !dbg !10045

land.lhs.true:                                    ; preds = %cond.end
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10046
  %call4 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %5), !dbg !10047
  %call5 = call zeroext i8 @c_token_starts_typename(%struct.c_token* %call4), !dbg !10048
  %conv6 = zext i8 %call5 to i32, !dbg !10048
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !10048
  br i1 %tobool7, label %if.then, label %if.else, !dbg !10049

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.c_type_name** %type_name, metadata !10050, metadata !DIExpression()), !dbg !10052
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10053
  call void @c_parser_consume_token(%struct.c_parser* %6), !dbg !10054
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10055
  %call8 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %7), !dbg !10056
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call8, i32 0, i32 2, !dbg !10057
  %8 = load i32, i32* %location, align 8, !dbg !10057
  store i32 %8, i32* %expr_loc, align 4, !dbg !10058
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10059
  %call9 = call %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %9), !dbg !10060
  store %struct.c_type_name* %call9, %struct.c_type_name** %type_name, align 8, !dbg !10061
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10062
  call void @c_parser_skip_until_found(%struct.c_parser* %10, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10063
  %11 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !10064
  %cmp = icmp eq %struct.c_type_name* %11, null, !dbg !10066
  br i1 %cmp, label %if.then11, label %if.end, !dbg !10067

if.then11:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.c_expr* %agg.result, metadata !10068, metadata !DIExpression()), !dbg !10070
  %12 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10071
  %dec = add nsw i32 %12, -1, !dbg !10071
  store i32 %dec, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10071
  %13 = load i32, i32* @in_sizeof, align 4, !dbg !10072
  %dec12 = add nsw i32 %13, -1, !dbg !10072
  store i32 %dec12, i32* @in_sizeof, align 4, !dbg !10072
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10073
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 0, !dbg !10074
  store %union.tree_node* %14, %union.tree_node** %value, align 8, !dbg !10075
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 1, !dbg !10076
  store i32 0, i32* %original_code, align 8, !dbg !10077
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 2, !dbg !10078
  store %union.tree_node* null, %union.tree_node** %original_type, align 8, !dbg !10079
  br label %return, !dbg !10080

if.end:                                           ; preds = %if.then
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10081
  %call13 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %15, i32 41), !dbg !10083
  %tobool14 = icmp ne i8 %call13, 0, !dbg !10083
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !10084

if.then15:                                        ; preds = %if.end
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10085
  %17 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !10087
  %18 = load i32, i32* %expr_loc, align 4, !dbg !10088
  call void @c_parser_postfix_expression_after_paren_type(%struct.c_expr* sret %tmp, %struct.c_parser* %16, %struct.c_type_name* %17, i32 %18), !dbg !10089
  %19 = bitcast %struct.c_expr* %expr to i8*, !dbg !10089
  %20 = bitcast %struct.c_expr* %tmp to i8*, !dbg !10089
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false), !dbg !10089
  br label %sizeof_expr, !dbg !10090

if.end16:                                         ; preds = %if.end
  %21 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10091
  %dec17 = add nsw i32 %21, -1, !dbg !10091
  store i32 %dec17, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10091
  %22 = load i32, i32* @in_sizeof, align 4, !dbg !10092
  %dec18 = add nsw i32 %22, -1, !dbg !10092
  store i32 %dec18, i32* @in_sizeof, align 4, !dbg !10092
  %23 = load i32, i32* %expr_loc, align 4, !dbg !10093
  %24 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !10094
  call void @c_expr_sizeof_type(%struct.c_expr* sret %agg.result, i32 %23, %struct.c_type_name* %24), !dbg !10095
  br label %return, !dbg !10096

if.else:                                          ; preds = %land.lhs.true, %cond.end
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10097
  %call19 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %25), !dbg !10099
  %location20 = getelementptr inbounds %struct.c_token, %struct.c_token* %call19, i32 0, i32 2, !dbg !10100
  %26 = load i32, i32* %location20, align 8, !dbg !10100
  store i32 %26, i32* %expr_loc, align 4, !dbg !10101
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10102
  call void @c_parser_unary_expression(%struct.c_expr* sret %tmp21, %struct.c_parser* %27), !dbg !10103
  %28 = bitcast %struct.c_expr* %expr to i8*, !dbg !10103
  %29 = bitcast %struct.c_expr* %tmp21 to i8*, !dbg !10103
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 24, i1 false), !dbg !10103
  br label %sizeof_expr, !dbg !10104

sizeof_expr:                                      ; preds = %if.else, %if.then15
  call void @llvm.dbg.label(metadata !10105), !dbg !10106
  %30 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10107
  %dec22 = add nsw i32 %30, -1, !dbg !10107
  store i32 %dec22, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10107
  %31 = load i32, i32* @in_sizeof, align 4, !dbg !10108
  %dec23 = add nsw i32 %31, -1, !dbg !10108
  store i32 %dec23, i32* @in_sizeof, align 4, !dbg !10108
  %value24 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10109
  %32 = load %union.tree_node*, %union.tree_node** %value24, align 8, !dbg !10109
  %base = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !10109
  %33 = bitcast %struct.tree_base* %base to i64*, !dbg !10109
  %bf.load = load i64, i64* %33, align 8, !dbg !10109
  %bf.clear = and i64 %bf.load, 65535, !dbg !10109
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10109
  %cmp25 = icmp eq i32 %bf.cast, 41, !dbg !10111
  br i1 %cmp25, label %land.lhs.true27, label %if.end35, !dbg !10112

land.lhs.true27:                                  ; preds = %sizeof_expr
  %value28 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10113
  %34 = load %union.tree_node*, %union.tree_node** %value28, align 8, !dbg !10113
  %exp = bitcast %union.tree_node* %34 to %struct.tree_exp*, !dbg !10113
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !10113
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !10113
  %35 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10113
  %decl_common = bitcast %union.tree_node* %35 to %struct.tree_decl_common*, !dbg !10113
  %lang_flag_4 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !10113
  %36 = bitcast i40* %lang_flag_4 to i64*, !dbg !10113
  %bf.load29 = load i64, i64* %36, align 8, !dbg !10113
  %bf.lshr = lshr i64 %bf.load29, 19, !dbg !10113
  %bf.clear30 = and i64 %bf.lshr, 1, !dbg !10113
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !10113
  %cmp32 = icmp eq i32 %bf.cast31, 1, !dbg !10113
  br i1 %cmp32, label %if.then34, label %if.end35, !dbg !10114

if.then34:                                        ; preds = %land.lhs.true27
  %37 = load i32, i32* %expr_loc, align 4, !dbg !10115
  call void (i32, i8*, ...) @error_at(i32 %37, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.34, i64 0, i64 0)), !dbg !10116
  br label %if.end35, !dbg !10116

if.end35:                                         ; preds = %if.then34, %land.lhs.true27, %sizeof_expr
  %38 = load i32, i32* %expr_loc, align 4, !dbg !10117
  call void @c_expr_sizeof_expr(%struct.c_expr* sret %agg.result, i32 %38, %struct.c_expr* byval(%struct.c_expr) align 8 %expr), !dbg !10118
  br label %return, !dbg !10119

return:                                           ; preds = %if.end35, %if.end16, %if.then11
  ret void, !dbg !10120
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_alignof_expression(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser) #0 !dbg !10121 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %expr = alloca %struct.c_expr, align 8
  %loc = alloca i32, align 4
  %loc9 = alloca i32, align 4
  %type_name = alloca %struct.c_type_name*, align 8
  %ret = alloca %struct.c_expr, align 8
  %tmp = alloca %struct.c_expr, align 8
  %tmp27 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !10122, metadata !DIExpression()), !dbg !10123
  call void @llvm.dbg.declare(metadata %struct.c_expr* %expr, metadata !10124, metadata !DIExpression()), !dbg !10125
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !10126, metadata !DIExpression()), !dbg !10127
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10128
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !10129
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !10130
  %1 = load i32, i32* %location, align 8, !dbg !10130
  store i32 %1, i32* %loc, align 4, !dbg !10127
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10131
  %call1 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %2, i32 51), !dbg !10131
  %tobool = icmp ne i8 %call1, 0, !dbg !10131
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10131

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5247, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !10131
  br label %cond.end, !dbg !10131

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10131

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10131
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10132
  call void @c_parser_consume_token(%struct.c_parser* %3), !dbg !10133
  %4 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10134
  %inc = add nsw i32 %4, 1, !dbg !10134
  store i32 %inc, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10134
  %5 = load i32, i32* @in_alignof, align 4, !dbg !10135
  %inc2 = add nsw i32 %5, 1, !dbg !10135
  store i32 %inc2, i32* @in_alignof, align 4, !dbg !10135
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10136
  %call3 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %6, i32 20), !dbg !10138
  %conv = zext i8 %call3 to i32, !dbg !10138
  %tobool4 = icmp ne i32 %conv, 0, !dbg !10138
  br i1 %tobool4, label %land.lhs.true, label %if.else, !dbg !10139

land.lhs.true:                                    ; preds = %cond.end
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10140
  %call5 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %7), !dbg !10141
  %call6 = call zeroext i8 @c_token_starts_typename(%struct.c_token* %call5), !dbg !10142
  %conv7 = zext i8 %call6 to i32, !dbg !10142
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !10142
  br i1 %tobool8, label %if.then, label %if.else, !dbg !10143

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %loc9, metadata !10144, metadata !DIExpression()), !dbg !10146
  call void @llvm.dbg.declare(metadata %struct.c_type_name** %type_name, metadata !10147, metadata !DIExpression()), !dbg !10148
  call void @llvm.dbg.declare(metadata %struct.c_expr* %ret, metadata !10149, metadata !DIExpression()), !dbg !10150
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10151
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !10152
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10153
  %call10 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %9), !dbg !10154
  %location11 = getelementptr inbounds %struct.c_token, %struct.c_token* %call10, i32 0, i32 2, !dbg !10155
  %10 = load i32, i32* %location11, align 8, !dbg !10155
  store i32 %10, i32* %loc9, align 4, !dbg !10156
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10157
  %call12 = call %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %11), !dbg !10158
  store %struct.c_type_name* %call12, %struct.c_type_name** %type_name, align 8, !dbg !10159
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10160
  call void @c_parser_skip_until_found(%struct.c_parser* %12, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10161
  %13 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !10162
  %cmp = icmp eq %struct.c_type_name* %13, null, !dbg !10164
  br i1 %cmp, label %if.then14, label %if.end, !dbg !10165

if.then14:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.c_expr* %agg.result, metadata !10166, metadata !DIExpression()), !dbg !10168
  %14 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10169
  %dec = add nsw i32 %14, -1, !dbg !10169
  store i32 %dec, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10169
  %15 = load i32, i32* @in_alignof, align 4, !dbg !10170
  %dec15 = add nsw i32 %15, -1, !dbg !10170
  store i32 %dec15, i32* @in_alignof, align 4, !dbg !10170
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10171
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 0, !dbg !10172
  store %union.tree_node* %16, %union.tree_node** %value, align 8, !dbg !10173
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 1, !dbg !10174
  store i32 0, i32* %original_code, align 8, !dbg !10175
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 2, !dbg !10176
  store %union.tree_node* null, %union.tree_node** %original_type, align 8, !dbg !10177
  br label %return, !dbg !10178

if.end:                                           ; preds = %if.then
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10179
  %call16 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %17, i32 41), !dbg !10181
  %tobool17 = icmp ne i8 %call16, 0, !dbg !10181
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !10182

if.then18:                                        ; preds = %if.end
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10183
  %19 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !10185
  %20 = load i32, i32* %loc9, align 4, !dbg !10186
  call void @c_parser_postfix_expression_after_paren_type(%struct.c_expr* sret %tmp, %struct.c_parser* %18, %struct.c_type_name* %19, i32 %20), !dbg !10187
  %21 = bitcast %struct.c_expr* %expr to i8*, !dbg !10187
  %22 = bitcast %struct.c_expr* %tmp to i8*, !dbg !10187
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false), !dbg !10187
  br label %alignof_expr, !dbg !10188

if.end19:                                         ; preds = %if.end
  %23 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10189
  %dec20 = add nsw i32 %23, -1, !dbg !10189
  store i32 %dec20, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10189
  %24 = load i32, i32* @in_alignof, align 4, !dbg !10190
  %dec21 = add nsw i32 %24, -1, !dbg !10190
  store i32 %dec21, i32* @in_alignof, align 4, !dbg !10190
  %25 = load i32, i32* %loc9, align 4, !dbg !10191
  %26 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !10191
  %call22 = call %union.tree_node* @groktypename(%struct.c_type_name* %26, %union.tree_node** null, i8* null), !dbg !10191
  %call23 = call %union.tree_node* @c_sizeof_or_alignof_type(i32 %25, %union.tree_node* %call22, i8 zeroext 0, i32 1), !dbg !10191
  %value24 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 0, !dbg !10192
  store %union.tree_node* %call23, %union.tree_node** %value24, align 8, !dbg !10193
  %original_code25 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 1, !dbg !10194
  store i32 0, i32* %original_code25, align 8, !dbg !10195
  %original_type26 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %ret, i32 0, i32 2, !dbg !10196
  store %union.tree_node* null, %union.tree_node** %original_type26, align 8, !dbg !10197
  %27 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !10198
  %28 = bitcast %struct.c_expr* %ret to i8*, !dbg !10198
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 24, i1 false), !dbg !10198
  br label %return, !dbg !10199

if.else:                                          ; preds = %land.lhs.true, %cond.end
  call void @llvm.dbg.declare(metadata %struct.c_expr* %agg.result, metadata !10200, metadata !DIExpression()), !dbg !10202
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10203
  call void @c_parser_unary_expression(%struct.c_expr* sret %tmp27, %struct.c_parser* %29), !dbg !10204
  %30 = bitcast %struct.c_expr* %expr to i8*, !dbg !10204
  %31 = bitcast %struct.c_expr* %tmp27 to i8*, !dbg !10204
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 24, i1 false), !dbg !10204
  br label %alignof_expr, !dbg !10205

alignof_expr:                                     ; preds = %if.else, %if.then18
  call void @llvm.dbg.label(metadata !10206), !dbg !10207
  %32 = load i32, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10208
  %dec28 = add nsw i32 %32, -1, !dbg !10208
  store i32 %dec28, i32* @c_inhibit_evaluation_warnings, align 4, !dbg !10208
  %33 = load i32, i32* @in_alignof, align 4, !dbg !10209
  %dec29 = add nsw i32 %33, -1, !dbg !10209
  store i32 %dec29, i32* @in_alignof, align 4, !dbg !10209
  %34 = load i32, i32* %loc, align 4, !dbg !10210
  %value30 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10211
  %35 = load %union.tree_node*, %union.tree_node** %value30, align 8, !dbg !10211
  %call31 = call %union.tree_node* @c_alignof_expr(i32 %34, %union.tree_node* %35), !dbg !10212
  %value32 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 0, !dbg !10213
  store %union.tree_node* %call31, %union.tree_node** %value32, align 8, !dbg !10214
  %original_code33 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 1, !dbg !10215
  store i32 0, i32* %original_code33, align 8, !dbg !10216
  %original_type34 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 2, !dbg !10217
  store %union.tree_node* null, %union.tree_node** %original_type34, align 8, !dbg !10218
  br label %return, !dbg !10219

return:                                           ; preds = %alignof_expr, %if.end19, %if.then14
  ret void, !dbg !10220
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_postfix_expression(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser) #0 !dbg !10221 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %expr = alloca %struct.c_expr, align 8
  %e1 = alloca %struct.c_expr, align 8
  %e2 = alloca %struct.c_expr, align 8
  %e3 = alloca %struct.c_expr, align 8
  %t1 = alloca %struct.c_type_name*, align 8
  %t2 = alloca %struct.c_type_name*, align 8
  %loc = alloca i32, align 4
  %id = alloca %union.tree_node*, align 8
  %stmt = alloca %union.tree_node*, align 8
  %brace_loc = alloca i32, align 4
  %loc68 = alloca i32, align 4
  %type_name = alloca %struct.c_type_name*, align 8
  %tmp = alloca %struct.c_expr, align 8
  %tmp79 = alloca %struct.c_expr, align 8
  %tmp122 = alloca %struct.c_expr, align 8
  %type_expr = alloca %union.tree_node*, align 8
  %type173 = alloca %union.tree_node*, align 8
  %offsetof_ref = alloca %union.tree_node*, align 8
  %idx = alloca %union.tree_node*, align 8
  %tmp216 = alloca %struct.c_expr, align 8
  %tmp234 = alloca %struct.c_expr, align 8
  %tmp240 = alloca %struct.c_expr, align 8
  %tmp246 = alloca %struct.c_expr, align 8
  %c = alloca %union.tree_node*, align 8
  %e1311 = alloca %union.tree_node*, align 8
  %e2312 = alloca %union.tree_node*, align 8
  %sel = alloca %union.tree_node*, align 8
  %id361 = alloca %union.tree_node*, align 8
  %type385 = alloca %union.tree_node*, align 8
  %receiver = alloca %union.tree_node*, align 8
  %args = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !10222, metadata !DIExpression()), !dbg !10223
  call void @llvm.dbg.declare(metadata %struct.c_expr* %expr, metadata !10224, metadata !DIExpression()), !dbg !10225
  call void @llvm.dbg.declare(metadata %struct.c_expr* %e1, metadata !10226, metadata !DIExpression()), !dbg !10227
  call void @llvm.dbg.declare(metadata %struct.c_expr* %e2, metadata !10228, metadata !DIExpression()), !dbg !10229
  call void @llvm.dbg.declare(metadata %struct.c_expr* %e3, metadata !10230, metadata !DIExpression()), !dbg !10231
  call void @llvm.dbg.declare(metadata %struct.c_type_name** %t1, metadata !10232, metadata !DIExpression()), !dbg !10233
  call void @llvm.dbg.declare(metadata %struct.c_type_name** %t2, metadata !10234, metadata !DIExpression()), !dbg !10235
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !10236, metadata !DIExpression()), !dbg !10237
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10238
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !10239
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !10240
  %1 = load i32, i32* %location, align 8, !dbg !10240
  store i32 %1, i32* %loc, align 4, !dbg !10237
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !10241
  store i32 0, i32* %original_code, align 8, !dbg !10242
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !10243
  store %union.tree_node* null, %union.tree_node** %original_type, align 8, !dbg !10244
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10245
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !10246
  %3 = bitcast %struct.c_token* %call1 to i32*, !dbg !10247
  %bf.load = load i32, i32* %3, align 8, !dbg !10247
  %bf.clear = and i32 %bf.load, 255, !dbg !10247
  switch i32 %bf.clear, label %sw.default401 [
    i32 55, label %sw.bb
    i32 56, label %sw.bb11
    i32 58, label %sw.bb11
    i32 59, label %sw.bb11
    i32 57, label %sw.bb11
    i32 61, label %sw.bb15
    i32 63, label %sw.bb15
    i32 64, label %sw.bb15
    i32 62, label %sw.bb15
    i32 65, label %sw.bb15
    i32 66, label %sw.bb20
    i32 53, label %sw.bb26
    i32 20, label %sw.bb43
    i32 74, label %sw.bb102
    i32 39, label %sw.bb390
  ], !dbg !10248

sw.bb:                                            ; preds = %entry
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10249
  %call2 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %4), !dbg !10251
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call2, i32 0, i32 1, !dbg !10252
  %5 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !10252
  %value3 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10253
  store %union.tree_node* %5, %union.tree_node** %value3, align 8, !dbg !10254
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10255
  %call4 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %6), !dbg !10256
  %location5 = getelementptr inbounds %struct.c_token, %struct.c_token* %call4, i32 0, i32 2, !dbg !10257
  %7 = load i32, i32* %location5, align 8, !dbg !10257
  store i32 %7, i32* %loc, align 4, !dbg !10258
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10259
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !10260
  %value6 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10261
  %9 = load %union.tree_node*, %union.tree_node** %value6, align 8, !dbg !10261
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !10261
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !10261
  %bf.load7 = load i64, i64* %10, align 8, !dbg !10261
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !10261
  %bf.cast = trunc i64 %bf.clear8 to i32, !dbg !10261
  %cmp = icmp eq i32 %bf.cast, 25, !dbg !10263
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !10264

land.lhs.true:                                    ; preds = %sw.bb
  %11 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 20), align 8, !dbg !10265
  %call9 = call zeroext i8 %11(), !dbg !10266
  %tobool = icmp ne i8 %call9, 0, !dbg !10266
  br i1 %tobool, label %if.end, label %if.then, !dbg !10267

if.then:                                          ; preds = %land.lhs.true
  %12 = load i32, i32* %loc, align 4, !dbg !10268
  call void (i32, i8*, ...) @error_at(i32 %12, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.35, i64 0, i64 0)), !dbg !10270
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10271
  %value10 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10272
  store %union.tree_node* %13, %union.tree_node** %value10, align 8, !dbg !10273
  br label %if.end, !dbg !10274

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb
  br label %sw.epilog403, !dbg !10275

sw.bb11:                                          ; preds = %entry, %entry, %entry, %entry
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10276
  %call12 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %14), !dbg !10277
  %value13 = getelementptr inbounds %struct.c_token, %struct.c_token* %call12, i32 0, i32 1, !dbg !10278
  %15 = load %union.tree_node*, %union.tree_node** %value13, align 8, !dbg !10278
  %value14 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10279
  store %union.tree_node* %15, %union.tree_node** %value14, align 8, !dbg !10280
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10281
  call void @c_parser_consume_token(%struct.c_parser* %16), !dbg !10282
  br label %sw.epilog403, !dbg !10283

sw.bb15:                                          ; preds = %entry, %entry, %entry, %entry, %entry
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10284
  %call16 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %17), !dbg !10285
  %value17 = getelementptr inbounds %struct.c_token, %struct.c_token* %call16, i32 0, i32 1, !dbg !10286
  %18 = load %union.tree_node*, %union.tree_node** %value17, align 8, !dbg !10286
  %value18 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10287
  store %union.tree_node* %18, %union.tree_node** %value18, align 8, !dbg !10288
  %original_code19 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !10289
  store i32 28, i32* %original_code19, align 8, !dbg !10290
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10291
  call void @c_parser_consume_token(%struct.c_parser* %19), !dbg !10292
  br label %sw.epilog403, !dbg !10293

sw.bb20:                                          ; preds = %entry
  %20 = load i32, i32* @c_language, align 4, !dbg !10294
  %and = and i32 %20, 1, !dbg !10294
  %cmp21 = icmp ne i32 %and, 0, !dbg !10294
  br i1 %cmp21, label %cond.false, label %cond.true, !dbg !10294

cond.true:                                        ; preds = %sw.bb20
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5393, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !10294
  br label %cond.end, !dbg !10294

cond.false:                                       ; preds = %sw.bb20
  br label %cond.end, !dbg !10294

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10294
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10295
  %call22 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %21), !dbg !10296
  %value23 = getelementptr inbounds %struct.c_token, %struct.c_token* %call22, i32 0, i32 1, !dbg !10297
  %22 = load %union.tree_node*, %union.tree_node** %value23, align 8, !dbg !10297
  %call24 = call %union.tree_node* @objc_build_string_object(%union.tree_node* %22), !dbg !10298
  %value25 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10299
  store %union.tree_node* %call24, %union.tree_node** %value25, align 8, !dbg !10300
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10301
  call void @c_parser_consume_token(%struct.c_parser* %23), !dbg !10302
  br label %sw.epilog403, !dbg !10303

sw.bb26:                                          ; preds = %entry
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10304
  %call27 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %24), !dbg !10306
  %25 = bitcast %struct.c_token* %call27 to i32*, !dbg !10307
  %bf.load28 = load i32, i32* %25, align 8, !dbg !10307
  %bf.lshr = lshr i32 %bf.load28, 8, !dbg !10307
  %bf.clear29 = and i32 %bf.lshr, 255, !dbg !10307
  %cmp30 = icmp ne i32 %bf.clear29, 0, !dbg !10308
  br i1 %cmp30, label %if.then31, label %if.end33, !dbg !10309

if.then31:                                        ; preds = %sw.bb26
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10310
  call void @c_parser_error(%struct.c_parser* %26, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.36, i64 0, i64 0)), !dbg !10312
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10313
  %value32 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10314
  store %union.tree_node* %27, %union.tree_node** %value32, align 8, !dbg !10315
  br label %sw.epilog403, !dbg !10316

if.end33:                                         ; preds = %sw.bb26
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !10317, metadata !DIExpression()), !dbg !10319
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10320
  %call34 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %28), !dbg !10321
  %value35 = getelementptr inbounds %struct.c_token, %struct.c_token* %call34, i32 0, i32 1, !dbg !10322
  %29 = load %union.tree_node*, %union.tree_node** %value35, align 8, !dbg !10322
  store %union.tree_node* %29, %union.tree_node** %id, align 8, !dbg !10319
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10323
  call void @c_parser_consume_token(%struct.c_parser* %30), !dbg !10324
  %31 = load i32, i32* %loc, align 4, !dbg !10325
  %32 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !10326
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10327
  %call36 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %33), !dbg !10328
  %34 = bitcast %struct.c_token* %call36 to i32*, !dbg !10329
  %bf.load37 = load i32, i32* %34, align 8, !dbg !10329
  %bf.clear38 = and i32 %bf.load37, 255, !dbg !10329
  %cmp39 = icmp eq i32 %bf.clear38, 20, !dbg !10330
  %conv = zext i1 %cmp39 to i32, !dbg !10330
  %original_type40 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !10331
  %call41 = call %union.tree_node* @build_external_ref(i32 %31, %union.tree_node* %32, i32 %conv, %union.tree_node** %original_type40), !dbg !10332
  %value42 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10333
  store %union.tree_node* %call41, %union.tree_node** %value42, align 8, !dbg !10334
  br label %sw.epilog403, !dbg !10335

sw.bb43:                                          ; preds = %entry
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10336
  %call44 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %35), !dbg !10338
  %36 = bitcast %struct.c_token* %call44 to i32*, !dbg !10339
  %bf.load45 = load i32, i32* %36, align 8, !dbg !10339
  %bf.clear46 = and i32 %bf.load45, 255, !dbg !10339
  %cmp47 = icmp eq i32 %bf.clear46, 41, !dbg !10340
  br i1 %cmp47, label %if.then49, label %if.else, !dbg !10341

if.then49:                                        ; preds = %sw.bb43
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !10342, metadata !DIExpression()), !dbg !10344
  call void @llvm.dbg.declare(metadata i32* %brace_loc, metadata !10345, metadata !DIExpression()), !dbg !10346
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10347
  call void @c_parser_consume_token(%struct.c_parser* %37), !dbg !10348
  %38 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10349
  %call50 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %38), !dbg !10350
  %location51 = getelementptr inbounds %struct.c_token, %struct.c_token* %call50, i32 0, i32 2, !dbg !10351
  %39 = load i32, i32* %location51, align 8, !dbg !10351
  store i32 %39, i32* %brace_loc, align 4, !dbg !10352
  %40 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10353
  call void @c_parser_consume_token(%struct.c_parser* %40), !dbg !10354
  %call52 = call %struct.stmt_tree_s* @current_stmt_tree(), !dbg !10355
  %x_cur_stmt_list = getelementptr inbounds %struct.stmt_tree_s, %struct.stmt_tree_s* %call52, i32 0, i32 0, !dbg !10355
  %41 = load %union.tree_node*, %union.tree_node** %x_cur_stmt_list, align 8, !dbg !10355
  %cmp53 = icmp eq %union.tree_node* %41, null, !dbg !10357
  br i1 %cmp53, label %if.then55, label %if.end59, !dbg !10358

if.then55:                                        ; preds = %if.then49
  %42 = load i32, i32* %loc, align 4, !dbg !10359
  call void (i32, i8*, ...) @error_at(i32 %42, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.37, i64 0, i64 0)), !dbg !10361
  %43 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10362
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %43, i32 0, i32 2, !dbg !10363
  %bf.load56 = load i8, i8* %error, align 2, !dbg !10364
  %bf.clear57 = and i8 %bf.load56, -2, !dbg !10364
  %bf.set = or i8 %bf.clear57, 1, !dbg !10364
  store i8 %bf.set, i8* %error, align 2, !dbg !10364
  %44 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10365
  call void @c_parser_skip_until_found(%struct.c_parser* %44, i32 42, i8* null), !dbg !10366
  %45 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10367
  call void @c_parser_skip_until_found(%struct.c_parser* %45, i32 21, i8* null), !dbg !10368
  %46 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10369
  %value58 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10370
  store %union.tree_node* %46, %union.tree_node** %value58, align 8, !dbg !10371
  br label %sw.epilog403, !dbg !10372

if.end59:                                         ; preds = %if.then49
  %call60 = call %union.tree_node* @c_begin_stmt_expr(), !dbg !10373
  store %union.tree_node* %call60, %union.tree_node** %stmt, align 8, !dbg !10374
  %47 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10375
  call void @c_parser_compound_statement_nostart(%struct.c_parser* %47), !dbg !10376
  %48 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10377
  call void @c_parser_skip_until_found(%struct.c_parser* %48, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10378
  %49 = load i32, i32* %loc, align 4, !dbg !10379
  %call61 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %49, i32 834, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.38, i64 0, i64 0)), !dbg !10380
  %50 = load i32, i32* %brace_loc, align 4, !dbg !10381
  %51 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !10382
  %call62 = call %union.tree_node* @c_finish_stmt_expr(i32 %50, %union.tree_node* %51), !dbg !10383
  %value63 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10384
  store %union.tree_node* %call62, %union.tree_node** %value63, align 8, !dbg !10385
  br label %if.end101, !dbg !10386

if.else:                                          ; preds = %sw.bb43
  %52 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10387
  %call64 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %52), !dbg !10389
  %call65 = call zeroext i8 @c_token_starts_typename(%struct.c_token* %call64), !dbg !10390
  %tobool66 = icmp ne i8 %call65, 0, !dbg !10390
  br i1 %tobool66, label %if.then67, label %if.else78, !dbg !10391

if.then67:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %loc68, metadata !10392, metadata !DIExpression()), !dbg !10394
  call void @llvm.dbg.declare(metadata %struct.c_type_name** %type_name, metadata !10395, metadata !DIExpression()), !dbg !10396
  %53 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10397
  call void @c_parser_consume_token(%struct.c_parser* %53), !dbg !10398
  %54 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10399
  %call69 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %54), !dbg !10400
  %location70 = getelementptr inbounds %struct.c_token, %struct.c_token* %call69, i32 0, i32 2, !dbg !10401
  %55 = load i32, i32* %location70, align 8, !dbg !10401
  store i32 %55, i32* %loc68, align 4, !dbg !10402
  %56 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10403
  %call71 = call %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %56), !dbg !10404
  store %struct.c_type_name* %call71, %struct.c_type_name** %type_name, align 8, !dbg !10405
  %57 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10406
  call void @c_parser_skip_until_found(%struct.c_parser* %57, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10407
  %58 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !10408
  %cmp72 = icmp eq %struct.c_type_name* %58, null, !dbg !10410
  br i1 %cmp72, label %if.then74, label %if.else76, !dbg !10411

if.then74:                                        ; preds = %if.then67
  %59 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10412
  %value75 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10414
  store %union.tree_node* %59, %union.tree_node** %value75, align 8, !dbg !10415
  br label %if.end77, !dbg !10416

if.else76:                                        ; preds = %if.then67
  %60 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10417
  %61 = load %struct.c_type_name*, %struct.c_type_name** %type_name, align 8, !dbg !10418
  %62 = load i32, i32* %loc68, align 4, !dbg !10419
  call void @c_parser_postfix_expression_after_paren_type(%struct.c_expr* sret %tmp, %struct.c_parser* %60, %struct.c_type_name* %61, i32 %62), !dbg !10420
  %63 = bitcast %struct.c_expr* %expr to i8*, !dbg !10420
  %64 = bitcast %struct.c_expr* %tmp to i8*, !dbg !10420
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 24, i1 false), !dbg !10420
  br label %if.end77

if.end77:                                         ; preds = %if.else76, %if.then74
  br label %if.end100, !dbg !10421

if.else78:                                        ; preds = %if.else
  %65 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10422
  call void @c_parser_consume_token(%struct.c_parser* %65), !dbg !10424
  %66 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10425
  call void @c_parser_expression(%struct.c_expr* sret %tmp79, %struct.c_parser* %66), !dbg !10426
  %67 = bitcast %struct.c_expr* %expr to i8*, !dbg !10426
  %68 = bitcast %struct.c_expr* %tmp79 to i8*, !dbg !10426
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 24, i1 false), !dbg !10426
  %value80 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10427
  %69 = load %union.tree_node*, %union.tree_node** %value80, align 8, !dbg !10427
  %base81 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !10427
  %70 = bitcast %struct.tree_base* %base81 to i64*, !dbg !10427
  %bf.load82 = load i64, i64* %70, align 8, !dbg !10427
  %bf.clear83 = and i64 %bf.load82, 65535, !dbg !10427
  %bf.cast84 = trunc i64 %bf.clear83 to i32, !dbg !10427
  %cmp85 = icmp eq i32 %bf.cast84, 53, !dbg !10429
  br i1 %cmp85, label %if.then87, label %if.end93, !dbg !10430

if.then87:                                        ; preds = %if.else78
  %value88 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10431
  %71 = load %union.tree_node*, %union.tree_node** %value88, align 8, !dbg !10431
  %base89 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !10431
  %72 = bitcast %struct.tree_base* %base89 to i64*, !dbg !10431
  %bf.load90 = load i64, i64* %72, align 8, !dbg !10432
  %bf.clear91 = and i64 %bf.load90, -8388609, !dbg !10432
  %bf.set92 = or i64 %bf.clear91, 8388608, !dbg !10432
  store i64 %bf.set92, i64* %72, align 8, !dbg !10432
  br label %if.end93, !dbg !10431

if.end93:                                         ; preds = %if.then87, %if.else78
  %original_code94 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !10433
  %73 = load i32, i32* %original_code94, align 8, !dbg !10433
  %cmp95 = icmp ne i32 %73, 189, !dbg !10435
  br i1 %cmp95, label %if.then97, label %if.end99, !dbg !10436

if.then97:                                        ; preds = %if.end93
  %original_code98 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 1, !dbg !10437
  store i32 0, i32* %original_code98, align 8, !dbg !10438
  br label %if.end99, !dbg !10439

if.end99:                                         ; preds = %if.then97, %if.end93
  %74 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10440
  call void @c_parser_skip_until_found(%struct.c_parser* %74, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10441
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.end77
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.end59
  br label %sw.epilog403, !dbg !10442

sw.bb102:                                         ; preds = %entry
  %75 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10443
  %call103 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %75), !dbg !10444
  %76 = bitcast %struct.c_token* %call103 to i32*, !dbg !10445
  %bf.load104 = load i32, i32* %76, align 8, !dbg !10445
  %bf.lshr105 = lshr i32 %bf.load104, 16, !dbg !10445
  %bf.clear106 = and i32 %bf.lshr105, 255, !dbg !10445
  switch i32 %bf.clear106, label %sw.default [
    i32 66, label %sw.bb107
    i32 67, label %sw.bb107
    i32 68, label %sw.bb107
    i32 53, label %sw.bb116
    i32 82, label %sw.bb156
    i32 58, label %sw.bb226
    i32 59, label %sw.bb288
    i32 128, label %sw.bb327
    i32 127, label %sw.bb343
    i32 119, label %sw.bb366
  ], !dbg !10446

sw.bb107:                                         ; preds = %sw.bb102, %sw.bb102, %sw.bb102
  %77 = load i32, i32* %loc, align 4, !dbg !10447
  %78 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10449
  %call108 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %78), !dbg !10450
  %79 = bitcast %struct.c_token* %call108 to i32*, !dbg !10451
  %bf.load109 = load i32, i32* %79, align 8, !dbg !10451
  %bf.lshr110 = lshr i32 %bf.load109, 16, !dbg !10451
  %bf.clear111 = and i32 %bf.lshr110, 255, !dbg !10451
  %80 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10452
  %call112 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %80), !dbg !10453
  %value113 = getelementptr inbounds %struct.c_token, %struct.c_token* %call112, i32 0, i32 1, !dbg !10454
  %81 = load %union.tree_node*, %union.tree_node** %value113, align 8, !dbg !10454
  %call114 = call %union.tree_node* @fname_decl(i32 %77, i32 %bf.clear111, %union.tree_node* %81), !dbg !10455
  %value115 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10456
  store %union.tree_node* %call114, %union.tree_node** %value115, align 8, !dbg !10457
  %82 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10458
  call void @c_parser_consume_token(%struct.c_parser* %82), !dbg !10459
  br label %sw.epilog, !dbg !10460

sw.bb116:                                         ; preds = %sw.bb102
  %83 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10461
  call void @c_parser_consume_token(%struct.c_parser* %83), !dbg !10462
  %84 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10463
  %call117 = call zeroext i8 @c_parser_require(%struct.c_parser* %84, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !10465
  %tobool118 = icmp ne i8 %call117, 0, !dbg !10465
  br i1 %tobool118, label %if.end121, label %if.then119, !dbg !10466

if.then119:                                       ; preds = %sw.bb116
  %85 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10467
  %value120 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10469
  store %union.tree_node* %85, %union.tree_node** %value120, align 8, !dbg !10470
  br label %sw.epilog, !dbg !10471

if.end121:                                        ; preds = %sw.bb116
  %86 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10472
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp122, %struct.c_parser* %86, %struct.c_expr* null), !dbg !10473
  %87 = bitcast %struct.c_expr* %e1 to i8*, !dbg !10473
  %88 = bitcast %struct.c_expr* %tmp122 to i8*, !dbg !10473
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 24, i1 false), !dbg !10473
  %value123 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %e1, i32 0, i32 0, !dbg !10474
  %89 = load %union.tree_node*, %union.tree_node** %value123, align 8, !dbg !10474
  %call124 = call %union.tree_node* @c_fully_fold(%union.tree_node* %89, i8 zeroext 0, i8* null), !dbg !10475
  %value125 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %e1, i32 0, i32 0, !dbg !10476
  store %union.tree_node* %call124, %union.tree_node** %value125, align 8, !dbg !10477
  %90 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10478
  %call126 = call zeroext i8 @c_parser_require(%struct.c_parser* %90, i32 19, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i64 0, i64 0)), !dbg !10480
  %tobool127 = icmp ne i8 %call126, 0, !dbg !10480
  br i1 %tobool127, label %if.end130, label %if.then128, !dbg !10481

if.then128:                                       ; preds = %if.end121
  %91 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10482
  call void @c_parser_skip_until_found(%struct.c_parser* %91, i32 21, i8* null), !dbg !10484
  %92 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10485
  %value129 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10486
  store %union.tree_node* %92, %union.tree_node** %value129, align 8, !dbg !10487
  br label %sw.epilog, !dbg !10488

if.end130:                                        ; preds = %if.end121
  %93 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10489
  %call131 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %93), !dbg !10490
  %location132 = getelementptr inbounds %struct.c_token, %struct.c_token* %call131, i32 0, i32 2, !dbg !10491
  %94 = load i32, i32* %location132, align 8, !dbg !10491
  store i32 %94, i32* %loc, align 4, !dbg !10492
  %95 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10493
  %call133 = call %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %95), !dbg !10494
  store %struct.c_type_name* %call133, %struct.c_type_name** %t1, align 8, !dbg !10495
  %96 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10496
  call void @c_parser_skip_until_found(%struct.c_parser* %96, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10497
  %97 = load %struct.c_type_name*, %struct.c_type_name** %t1, align 8, !dbg !10498
  %cmp134 = icmp eq %struct.c_type_name* %97, null, !dbg !10500
  br i1 %cmp134, label %if.then136, label %if.else138, !dbg !10501

if.then136:                                       ; preds = %if.end130
  %98 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10502
  %value137 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10504
  store %union.tree_node* %98, %union.tree_node** %value137, align 8, !dbg !10505
  br label %if.end155, !dbg !10506

if.else138:                                       ; preds = %if.end130
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_expr, metadata !10507, metadata !DIExpression()), !dbg !10509
  store %union.tree_node* null, %union.tree_node** %type_expr, align 8, !dbg !10509
  %99 = load i32, i32* %loc, align 4, !dbg !10510
  %value139 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %e1, i32 0, i32 0, !dbg !10511
  %100 = load %union.tree_node*, %union.tree_node** %value139, align 8, !dbg !10511
  %101 = load %struct.c_type_name*, %struct.c_type_name** %t1, align 8, !dbg !10512
  %call140 = call %union.tree_node* @groktypename(%struct.c_type_name* %101, %union.tree_node** %type_expr, i8* null), !dbg !10513
  %call141 = call %union.tree_node* @c_build_va_arg(i32 %99, %union.tree_node* %100, %union.tree_node* %call140), !dbg !10514
  %value142 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10515
  store %union.tree_node* %call141, %union.tree_node** %value142, align 8, !dbg !10516
  %102 = load %union.tree_node*, %union.tree_node** %type_expr, align 8, !dbg !10517
  %tobool143 = icmp ne %union.tree_node* %102, null, !dbg !10517
  br i1 %tobool143, label %if.then144, label %if.end154, !dbg !10519

if.then144:                                       ; preds = %if.else138
  %value145 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10520
  %103 = load %union.tree_node*, %union.tree_node** %value145, align 8, !dbg !10520
  %common = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !10520
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10520
  %104 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10520
  %105 = load %union.tree_node*, %union.tree_node** %type_expr, align 8, !dbg !10520
  %value146 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10520
  %106 = load %union.tree_node*, %union.tree_node** %value146, align 8, !dbg !10520
  %call147 = call %union.tree_node* @build2_stat(i32 189, %union.tree_node* %104, %union.tree_node* %105, %union.tree_node* %106), !dbg !10520
  %value148 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10522
  store %union.tree_node* %call147, %union.tree_node** %value148, align 8, !dbg !10523
  %value149 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10524
  %107 = load %union.tree_node*, %union.tree_node** %value149, align 8, !dbg !10524
  %base150 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !10524
  %108 = bitcast %struct.tree_base* %base150 to i64*, !dbg !10524
  %bf.load151 = load i64, i64* %108, align 8, !dbg !10525
  %bf.clear152 = and i64 %bf.load151, -17179869185, !dbg !10525
  %bf.set153 = or i64 %bf.clear152, 17179869184, !dbg !10525
  store i64 %bf.set153, i64* %108, align 8, !dbg !10525
  br label %if.end154, !dbg !10526

if.end154:                                        ; preds = %if.then144, %if.else138
  br label %if.end155

if.end155:                                        ; preds = %if.end154, %if.then136
  br label %sw.epilog, !dbg !10527

sw.bb156:                                         ; preds = %sw.bb102
  %109 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10528
  call void @c_parser_consume_token(%struct.c_parser* %109), !dbg !10529
  %110 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10530
  %call157 = call zeroext i8 @c_parser_require(%struct.c_parser* %110, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !10532
  %tobool158 = icmp ne i8 %call157, 0, !dbg !10532
  br i1 %tobool158, label %if.end161, label %if.then159, !dbg !10533

if.then159:                                       ; preds = %sw.bb156
  %111 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10534
  %value160 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10536
  store %union.tree_node* %111, %union.tree_node** %value160, align 8, !dbg !10537
  br label %sw.epilog, !dbg !10538

if.end161:                                        ; preds = %sw.bb156
  %112 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10539
  %call162 = call %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %112), !dbg !10540
  store %struct.c_type_name* %call162, %struct.c_type_name** %t1, align 8, !dbg !10541
  %113 = load %struct.c_type_name*, %struct.c_type_name** %t1, align 8, !dbg !10542
  %cmp163 = icmp eq %struct.c_type_name* %113, null, !dbg !10544
  br i1 %cmp163, label %if.then165, label %if.end167, !dbg !10545

if.then165:                                       ; preds = %if.end161
  %114 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10546
  %value166 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10548
  store %union.tree_node* %114, %union.tree_node** %value166, align 8, !dbg !10549
  br label %sw.epilog, !dbg !10550

if.end167:                                        ; preds = %if.end161
  %115 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10551
  %call168 = call zeroext i8 @c_parser_require(%struct.c_parser* %115, i32 19, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i64 0, i64 0)), !dbg !10553
  %tobool169 = icmp ne i8 %call168, 0, !dbg !10553
  br i1 %tobool169, label %if.end172, label %if.then170, !dbg !10554

if.then170:                                       ; preds = %if.end167
  %116 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10555
  call void @c_parser_skip_until_found(%struct.c_parser* %116, i32 21, i8* null), !dbg !10557
  %117 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10558
  %value171 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10559
  store %union.tree_node* %117, %union.tree_node** %value171, align 8, !dbg !10560
  br label %sw.epilog, !dbg !10561

if.end172:                                        ; preds = %if.end167
  call void @llvm.dbg.declare(metadata %union.tree_node** %type173, metadata !10562, metadata !DIExpression()), !dbg !10564
  %118 = load %struct.c_type_name*, %struct.c_type_name** %t1, align 8, !dbg !10565
  %call174 = call %union.tree_node* @groktypename(%struct.c_type_name* %118, %union.tree_node** null, i8* null), !dbg !10566
  store %union.tree_node* %call174, %union.tree_node** %type173, align 8, !dbg !10564
  call void @llvm.dbg.declare(metadata %union.tree_node** %offsetof_ref, metadata !10567, metadata !DIExpression()), !dbg !10568
  %119 = load %union.tree_node*, %union.tree_node** %type173, align 8, !dbg !10569
  %120 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10571
  %cmp175 = icmp eq %union.tree_node* %119, %120, !dbg !10572
  br i1 %cmp175, label %if.then177, label %if.else178, !dbg !10573

if.then177:                                       ; preds = %if.end172
  %121 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10574
  store %union.tree_node* %121, %union.tree_node** %offsetof_ref, align 8, !dbg !10575
  br label %if.end180, !dbg !10576

if.else178:                                       ; preds = %if.end172
  %122 = load %union.tree_node*, %union.tree_node** %type173, align 8, !dbg !10577
  %123 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !10577
  %call179 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %122, %union.tree_node* %123), !dbg !10577
  store %union.tree_node* %call179, %union.tree_node** %offsetof_ref, align 8, !dbg !10579
  %124 = load i32, i32* %loc, align 4, !dbg !10580
  %125 = load %union.tree_node*, %union.tree_node** %offsetof_ref, align 8, !dbg !10580
  %exp = bitcast %union.tree_node* %125 to %struct.tree_exp*, !dbg !10580
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !10580
  store i32 %124, i32* %locus, align 8, !dbg !10580
  br label %if.end180

if.end180:                                        ; preds = %if.else178, %if.then177
  %126 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10581
  %call181 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %126, i32 53), !dbg !10583
  %tobool182 = icmp ne i8 %call181, 0, !dbg !10583
  br i1 %tobool182, label %if.then183, label %if.else222, !dbg !10584

if.then183:                                       ; preds = %if.end180
  %127 = load i32, i32* %loc, align 4, !dbg !10585
  %128 = load %union.tree_node*, %union.tree_node** %offsetof_ref, align 8, !dbg !10587
  %129 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10588
  %call184 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %129), !dbg !10589
  %value185 = getelementptr inbounds %struct.c_token, %struct.c_token* %call184, i32 0, i32 1, !dbg !10590
  %130 = load %union.tree_node*, %union.tree_node** %value185, align 8, !dbg !10590
  %call186 = call %union.tree_node* @build_component_ref(i32 %127, %union.tree_node* %128, %union.tree_node* %130), !dbg !10591
  store %union.tree_node* %call186, %union.tree_node** %offsetof_ref, align 8, !dbg !10592
  %131 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10593
  call void @c_parser_consume_token(%struct.c_parser* %131), !dbg !10594
  br label %while.cond, !dbg !10595

while.cond:                                       ; preds = %if.end221, %if.then183
  %132 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10596
  %call187 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %132, i32 48), !dbg !10597
  %conv188 = zext i8 %call187 to i32, !dbg !10597
  %tobool189 = icmp ne i32 %conv188, 0, !dbg !10597
  br i1 %tobool189, label %lor.end, label %lor.lhs.false, !dbg !10598

lor.lhs.false:                                    ; preds = %while.cond
  %133 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10599
  %call190 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %133, i32 39), !dbg !10600
  %conv191 = zext i8 %call190 to i32, !dbg !10600
  %tobool192 = icmp ne i32 %conv191, 0, !dbg !10600
  br i1 %tobool192, label %lor.end, label %lor.rhs, !dbg !10601

lor.rhs:                                          ; preds = %lor.lhs.false
  %134 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10602
  %call193 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %134, i32 47), !dbg !10603
  %conv194 = zext i8 %call193 to i32, !dbg !10603
  %tobool195 = icmp ne i32 %conv194, 0, !dbg !10601
  br label %lor.end, !dbg !10601

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %135 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %tobool195, %lor.rhs ]
  br i1 %135, label %while.body, label %while.end, !dbg !10595

while.body:                                       ; preds = %lor.end
  %136 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10604
  %call196 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %136, i32 47), !dbg !10607
  %tobool197 = icmp ne i8 %call196, 0, !dbg !10607
  br i1 %tobool197, label %if.then198, label %if.else202, !dbg !10608

if.then198:                                       ; preds = %while.body
  %137 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10609
  %call199 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %137), !dbg !10611
  %location200 = getelementptr inbounds %struct.c_token, %struct.c_token* %call199, i32 0, i32 2, !dbg !10612
  %138 = load i32, i32* %location200, align 8, !dbg !10612
  store i32 %138, i32* %loc, align 4, !dbg !10613
  %139 = load i32, i32* %loc, align 4, !dbg !10614
  %140 = load %union.tree_node*, %union.tree_node** %offsetof_ref, align 8, !dbg !10615
  %141 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10616
  %call201 = call %union.tree_node* @build_array_ref(i32 %139, %union.tree_node* %140, %union.tree_node* %141), !dbg !10617
  store %union.tree_node* %call201, %union.tree_node** %offsetof_ref, align 8, !dbg !10618
  br label %do_dot, !dbg !10619

if.else202:                                       ; preds = %while.body
  %142 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10620
  %call203 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %142, i32 48), !dbg !10622
  %tobool204 = icmp ne i8 %call203, 0, !dbg !10622
  br i1 %tobool204, label %if.then205, label %if.else213, !dbg !10623

if.then205:                                       ; preds = %if.else202
  br label %do_dot, !dbg !10624

do_dot:                                           ; preds = %if.then205, %if.then198
  call void @llvm.dbg.label(metadata !10625), !dbg !10627
  %143 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10628
  call void @c_parser_consume_token(%struct.c_parser* %143), !dbg !10629
  %144 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10630
  %call206 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %144, i32 53), !dbg !10632
  %tobool207 = icmp ne i8 %call206, 0, !dbg !10632
  br i1 %tobool207, label %if.then208, label %if.end209, !dbg !10633

if.then208:                                       ; preds = %do_dot
  %145 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10634
  call void @c_parser_error(%struct.c_parser* %145, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !10636
  br label %while.end, !dbg !10637

if.end209:                                        ; preds = %do_dot
  %146 = load i32, i32* %loc, align 4, !dbg !10638
  %147 = load %union.tree_node*, %union.tree_node** %offsetof_ref, align 8, !dbg !10639
  %148 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10640
  %call210 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %148), !dbg !10641
  %value211 = getelementptr inbounds %struct.c_token, %struct.c_token* %call210, i32 0, i32 1, !dbg !10642
  %149 = load %union.tree_node*, %union.tree_node** %value211, align 8, !dbg !10642
  %call212 = call %union.tree_node* @build_component_ref(i32 %146, %union.tree_node* %147, %union.tree_node* %149), !dbg !10643
  store %union.tree_node* %call212, %union.tree_node** %offsetof_ref, align 8, !dbg !10644
  %150 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10645
  call void @c_parser_consume_token(%struct.c_parser* %150), !dbg !10646
  br label %if.end220, !dbg !10647

if.else213:                                       ; preds = %if.else202
  call void @llvm.dbg.declare(metadata %union.tree_node** %idx, metadata !10648, metadata !DIExpression()), !dbg !10650
  %151 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10651
  %call214 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %151), !dbg !10652
  %location215 = getelementptr inbounds %struct.c_token, %struct.c_token* %call214, i32 0, i32 2, !dbg !10653
  %152 = load i32, i32* %location215, align 8, !dbg !10653
  store i32 %152, i32* %loc, align 4, !dbg !10654
  %153 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10655
  call void @c_parser_consume_token(%struct.c_parser* %153), !dbg !10656
  %154 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10657
  call void @c_parser_expression(%struct.c_expr* sret %tmp216, %struct.c_parser* %154), !dbg !10658
  %value217 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp216, i32 0, i32 0, !dbg !10659
  %155 = load %union.tree_node*, %union.tree_node** %value217, align 8, !dbg !10659
  store %union.tree_node* %155, %union.tree_node** %idx, align 8, !dbg !10660
  %156 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !10661
  %call218 = call %union.tree_node* @c_fully_fold(%union.tree_node* %156, i8 zeroext 0, i8* null), !dbg !10662
  store %union.tree_node* %call218, %union.tree_node** %idx, align 8, !dbg !10663
  %157 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10664
  call void @c_parser_skip_until_found(%struct.c_parser* %157, i32 40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0)), !dbg !10665
  %158 = load i32, i32* %loc, align 4, !dbg !10666
  %159 = load %union.tree_node*, %union.tree_node** %offsetof_ref, align 8, !dbg !10667
  %160 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !10668
  %call219 = call %union.tree_node* @build_array_ref(i32 %158, %union.tree_node* %159, %union.tree_node* %160), !dbg !10669
  store %union.tree_node* %call219, %union.tree_node** %offsetof_ref, align 8, !dbg !10670
  br label %if.end220

if.end220:                                        ; preds = %if.else213, %if.end209
  br label %if.end221

if.end221:                                        ; preds = %if.end220
  br label %while.cond, !dbg !10595, !llvm.loop !10671

while.end:                                        ; preds = %if.then208, %lor.end
  br label %if.end223, !dbg !10673

if.else222:                                       ; preds = %if.end180
  %161 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10674
  call void @c_parser_error(%struct.c_parser* %161, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !10675
  br label %if.end223

if.end223:                                        ; preds = %if.else222, %while.end
  %162 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10676
  call void @c_parser_skip_until_found(%struct.c_parser* %162, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10677
  %163 = load %union.tree_node*, %union.tree_node** %offsetof_ref, align 8, !dbg !10678
  %call224 = call %union.tree_node* @fold_offsetof(%union.tree_node* %163, %union.tree_node* null), !dbg !10679
  %value225 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10680
  store %union.tree_node* %call224, %union.tree_node** %value225, align 8, !dbg !10681
  br label %sw.epilog, !dbg !10682

sw.bb226:                                         ; preds = %sw.bb102
  %164 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10683
  call void @c_parser_consume_token(%struct.c_parser* %164), !dbg !10684
  %165 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10685
  %call227 = call zeroext i8 @c_parser_require(%struct.c_parser* %165, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !10687
  %tobool228 = icmp ne i8 %call227, 0, !dbg !10687
  br i1 %tobool228, label %if.end231, label %if.then229, !dbg !10688

if.then229:                                       ; preds = %sw.bb226
  %166 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10689
  %value230 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10691
  store %union.tree_node* %166, %union.tree_node** %value230, align 8, !dbg !10692
  br label %sw.epilog, !dbg !10693

if.end231:                                        ; preds = %sw.bb226
  %167 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10694
  %call232 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %167), !dbg !10695
  %location233 = getelementptr inbounds %struct.c_token, %struct.c_token* %call232, i32 0, i32 2, !dbg !10696
  %168 = load i32, i32* %location233, align 8, !dbg !10696
  store i32 %168, i32* %loc, align 4, !dbg !10697
  %169 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10698
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp234, %struct.c_parser* %169, %struct.c_expr* null), !dbg !10699
  %170 = bitcast %struct.c_expr* %e1 to i8*, !dbg !10699
  %171 = bitcast %struct.c_expr* %tmp234 to i8*, !dbg !10699
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %170, i8* align 8 %171, i64 24, i1 false), !dbg !10699
  %172 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10700
  %call235 = call zeroext i8 @c_parser_require(%struct.c_parser* %172, i32 19, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i64 0, i64 0)), !dbg !10702
  %tobool236 = icmp ne i8 %call235, 0, !dbg !10702
  br i1 %tobool236, label %if.end239, label %if.then237, !dbg !10703

if.then237:                                       ; preds = %if.end231
  %173 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10704
  call void @c_parser_skip_until_found(%struct.c_parser* %173, i32 21, i8* null), !dbg !10706
  %174 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10707
  %value238 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10708
  store %union.tree_node* %174, %union.tree_node** %value238, align 8, !dbg !10709
  br label %sw.epilog, !dbg !10710

if.end239:                                        ; preds = %if.end231
  %175 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10711
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp240, %struct.c_parser* %175, %struct.c_expr* null), !dbg !10712
  %176 = bitcast %struct.c_expr* %e2 to i8*, !dbg !10712
  %177 = bitcast %struct.c_expr* %tmp240 to i8*, !dbg !10712
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %176, i8* align 8 %177, i64 24, i1 false), !dbg !10712
  %178 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10713
  %call241 = call zeroext i8 @c_parser_require(%struct.c_parser* %178, i32 19, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i64 0, i64 0)), !dbg !10715
  %tobool242 = icmp ne i8 %call241, 0, !dbg !10715
  br i1 %tobool242, label %if.end245, label %if.then243, !dbg !10716

if.then243:                                       ; preds = %if.end239
  %179 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10717
  call void @c_parser_skip_until_found(%struct.c_parser* %179, i32 21, i8* null), !dbg !10719
  %180 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10720
  %value244 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10721
  store %union.tree_node* %180, %union.tree_node** %value244, align 8, !dbg !10722
  br label %sw.epilog, !dbg !10723

if.end245:                                        ; preds = %if.end239
  %181 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10724
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp246, %struct.c_parser* %181, %struct.c_expr* null), !dbg !10725
  %182 = bitcast %struct.c_expr* %e3 to i8*, !dbg !10725
  %183 = bitcast %struct.c_expr* %tmp246 to i8*, !dbg !10725
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %182, i8* align 8 %183, i64 24, i1 false), !dbg !10725
  %184 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10726
  call void @c_parser_skip_until_found(%struct.c_parser* %184, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10727
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !10728, metadata !DIExpression()), !dbg !10730
  %value247 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %e1, i32 0, i32 0, !dbg !10731
  %185 = load %union.tree_node*, %union.tree_node** %value247, align 8, !dbg !10731
  store %union.tree_node* %185, %union.tree_node** %c, align 8, !dbg !10732
  %186 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10733
  %base248 = bitcast %union.tree_node* %186 to %struct.tree_base*, !dbg !10733
  %187 = bitcast %struct.tree_base* %base248 to i64*, !dbg !10733
  %bf.load249 = load i64, i64* %187, align 8, !dbg !10733
  %bf.clear250 = and i64 %bf.load249, 65535, !dbg !10733
  %bf.cast251 = trunc i64 %bf.clear250 to i32, !dbg !10733
  %cmp252 = icmp ne i32 %bf.cast251, 23, !dbg !10735
  br i1 %cmp252, label %if.then281, label %lor.lhs.false254, !dbg !10736

lor.lhs.false254:                                 ; preds = %if.end245
  %188 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10737
  %common255 = bitcast %union.tree_node* %188 to %struct.tree_common*, !dbg !10737
  %type256 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common255, i32 0, i32 2, !dbg !10737
  %189 = load %union.tree_node*, %union.tree_node** %type256, align 8, !dbg !10737
  %base257 = bitcast %union.tree_node* %189 to %struct.tree_base*, !dbg !10737
  %190 = bitcast %struct.tree_base* %base257 to i64*, !dbg !10737
  %bf.load258 = load i64, i64* %190, align 8, !dbg !10737
  %bf.clear259 = and i64 %bf.load258, 65535, !dbg !10737
  %bf.cast260 = trunc i64 %bf.clear259 to i32, !dbg !10737
  %cmp261 = icmp eq i32 %bf.cast260, 6, !dbg !10737
  br i1 %cmp261, label %if.end282, label %lor.lhs.false263, !dbg !10737

lor.lhs.false263:                                 ; preds = %lor.lhs.false254
  %191 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10737
  %common264 = bitcast %union.tree_node* %191 to %struct.tree_common*, !dbg !10737
  %type265 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common264, i32 0, i32 2, !dbg !10737
  %192 = load %union.tree_node*, %union.tree_node** %type265, align 8, !dbg !10737
  %base266 = bitcast %union.tree_node* %192 to %struct.tree_base*, !dbg !10737
  %193 = bitcast %struct.tree_base* %base266 to i64*, !dbg !10737
  %bf.load267 = load i64, i64* %193, align 8, !dbg !10737
  %bf.clear268 = and i64 %bf.load267, 65535, !dbg !10737
  %bf.cast269 = trunc i64 %bf.clear268 to i32, !dbg !10737
  %cmp270 = icmp eq i32 %bf.cast269, 7, !dbg !10737
  br i1 %cmp270, label %if.end282, label %lor.lhs.false272, !dbg !10737

lor.lhs.false272:                                 ; preds = %lor.lhs.false263
  %194 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10737
  %common273 = bitcast %union.tree_node* %194 to %struct.tree_common*, !dbg !10737
  %type274 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common273, i32 0, i32 2, !dbg !10737
  %195 = load %union.tree_node*, %union.tree_node** %type274, align 8, !dbg !10737
  %base275 = bitcast %union.tree_node* %195 to %struct.tree_base*, !dbg !10737
  %196 = bitcast %struct.tree_base* %base275 to i64*, !dbg !10737
  %bf.load276 = load i64, i64* %196, align 8, !dbg !10737
  %bf.clear277 = and i64 %bf.load276, 65535, !dbg !10737
  %bf.cast278 = trunc i64 %bf.clear277 to i32, !dbg !10737
  %cmp279 = icmp eq i32 %bf.cast278, 8, !dbg !10737
  br i1 %cmp279, label %if.end282, label %if.then281, !dbg !10738

if.then281:                                       ; preds = %lor.lhs.false272, %if.end245
  %197 = load i32, i32* %loc, align 4, !dbg !10739
  call void (i32, i8*, ...) @error_at(i32 %197, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.40, i64 0, i64 0)), !dbg !10740
  br label %if.end282, !dbg !10740

if.end282:                                        ; preds = %if.then281, %lor.lhs.false272, %lor.lhs.false263, %lor.lhs.false254
  %198 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10741
  call void @constant_expression_warning(%union.tree_node* %198), !dbg !10742
  %199 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !10743
  %call283 = call i32 @integer_zerop(%union.tree_node* %199), !dbg !10744
  %tobool284 = icmp ne i32 %call283, 0, !dbg !10744
  br i1 %tobool284, label %cond.true285, label %cond.false286, !dbg !10744

cond.true285:                                     ; preds = %if.end282
  %200 = bitcast %struct.c_expr* %expr to i8*, !dbg !10745
  %201 = bitcast %struct.c_expr* %e3 to i8*, !dbg !10745
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %200, i8* align 8 %201, i64 24, i1 false), !dbg !10745
  br label %cond.end287, !dbg !10744

cond.false286:                                    ; preds = %if.end282
  %202 = bitcast %struct.c_expr* %expr to i8*, !dbg !10746
  %203 = bitcast %struct.c_expr* %e2 to i8*, !dbg !10746
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %202, i8* align 8 %203, i64 24, i1 false), !dbg !10746
  br label %cond.end287, !dbg !10744

cond.end287:                                      ; preds = %cond.false286, %cond.true285
  br label %sw.epilog, !dbg !10747

sw.bb288:                                         ; preds = %sw.bb102
  %204 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10748
  call void @c_parser_consume_token(%struct.c_parser* %204), !dbg !10749
  %205 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10750
  %call289 = call zeroext i8 @c_parser_require(%struct.c_parser* %205, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !10752
  %tobool290 = icmp ne i8 %call289, 0, !dbg !10752
  br i1 %tobool290, label %if.end293, label %if.then291, !dbg !10753

if.then291:                                       ; preds = %sw.bb288
  %206 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10754
  %value292 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10756
  store %union.tree_node* %206, %union.tree_node** %value292, align 8, !dbg !10757
  br label %sw.epilog, !dbg !10758

if.end293:                                        ; preds = %sw.bb288
  %207 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10759
  %call294 = call %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %207), !dbg !10760
  store %struct.c_type_name* %call294, %struct.c_type_name** %t1, align 8, !dbg !10761
  %208 = load %struct.c_type_name*, %struct.c_type_name** %t1, align 8, !dbg !10762
  %cmp295 = icmp eq %struct.c_type_name* %208, null, !dbg !10764
  br i1 %cmp295, label %if.then297, label %if.end299, !dbg !10765

if.then297:                                       ; preds = %if.end293
  %209 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10766
  %value298 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10768
  store %union.tree_node* %209, %union.tree_node** %value298, align 8, !dbg !10769
  br label %sw.epilog, !dbg !10770

if.end299:                                        ; preds = %if.end293
  %210 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10771
  %call300 = call zeroext i8 @c_parser_require(%struct.c_parser* %210, i32 19, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.39, i64 0, i64 0)), !dbg !10773
  %tobool301 = icmp ne i8 %call300, 0, !dbg !10773
  br i1 %tobool301, label %if.end304, label %if.then302, !dbg !10774

if.then302:                                       ; preds = %if.end299
  %211 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10775
  call void @c_parser_skip_until_found(%struct.c_parser* %211, i32 21, i8* null), !dbg !10777
  %212 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10778
  %value303 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10779
  store %union.tree_node* %212, %union.tree_node** %value303, align 8, !dbg !10780
  br label %sw.epilog, !dbg !10781

if.end304:                                        ; preds = %if.end299
  %213 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10782
  %call305 = call %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %213), !dbg !10783
  store %struct.c_type_name* %call305, %struct.c_type_name** %t2, align 8, !dbg !10784
  %214 = load %struct.c_type_name*, %struct.c_type_name** %t2, align 8, !dbg !10785
  %cmp306 = icmp eq %struct.c_type_name* %214, null, !dbg !10787
  br i1 %cmp306, label %if.then308, label %if.end310, !dbg !10788

if.then308:                                       ; preds = %if.end304
  %215 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10789
  %value309 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10791
  store %union.tree_node* %215, %union.tree_node** %value309, align 8, !dbg !10792
  br label %sw.epilog, !dbg !10793

if.end310:                                        ; preds = %if.end304
  %216 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10794
  call void @c_parser_skip_until_found(%struct.c_parser* %216, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10795
  call void @llvm.dbg.declare(metadata %union.tree_node** %e1311, metadata !10796, metadata !DIExpression()), !dbg !10798
  call void @llvm.dbg.declare(metadata %union.tree_node** %e2312, metadata !10799, metadata !DIExpression()), !dbg !10800
  %217 = load %struct.c_type_name*, %struct.c_type_name** %t1, align 8, !dbg !10801
  %call313 = call %union.tree_node* @groktypename(%struct.c_type_name* %217, %union.tree_node** null, i8* null), !dbg !10801
  %type314 = bitcast %union.tree_node* %call313 to %struct.tree_type*, !dbg !10801
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type314, i32 0, i32 16, !dbg !10801
  %218 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !10801
  store %union.tree_node* %218, %union.tree_node** %e1311, align 8, !dbg !10802
  %219 = load %struct.c_type_name*, %struct.c_type_name** %t2, align 8, !dbg !10803
  %call315 = call %union.tree_node* @groktypename(%struct.c_type_name* %219, %union.tree_node** null, i8* null), !dbg !10803
  %type316 = bitcast %union.tree_node* %call315 to %struct.tree_type*, !dbg !10803
  %main_variant317 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type316, i32 0, i32 16, !dbg !10803
  %220 = load %union.tree_node*, %union.tree_node** %main_variant317, align 8, !dbg !10803
  store %union.tree_node* %220, %union.tree_node** %e2312, align 8, !dbg !10804
  %221 = load %union.tree_node*, %union.tree_node** %e1311, align 8, !dbg !10805
  %222 = load %union.tree_node*, %union.tree_node** %e2312, align 8, !dbg !10806
  %call318 = call i32 @comptypes(%union.tree_node* %221, %union.tree_node* %222), !dbg !10807
  %tobool319 = icmp ne i32 %call318, 0, !dbg !10807
  br i1 %tobool319, label %cond.true320, label %cond.false322, !dbg !10807

cond.true320:                                     ; preds = %if.end310
  %call321 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 1), !dbg !10808
  br label %cond.end324, !dbg !10807

cond.false322:                                    ; preds = %if.end310
  %call323 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 0), !dbg !10809
  br label %cond.end324, !dbg !10807

cond.end324:                                      ; preds = %cond.false322, %cond.true320
  %cond325 = phi %union.tree_node* [ %call321, %cond.true320 ], [ %call323, %cond.false322 ], !dbg !10807
  %value326 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10810
  store %union.tree_node* %cond325, %union.tree_node** %value326, align 8, !dbg !10811
  br label %sw.epilog, !dbg !10812

sw.bb327:                                         ; preds = %sw.bb102
  %223 = load i32, i32* @c_language, align 4, !dbg !10813
  %and328 = and i32 %223, 1, !dbg !10813
  %cmp329 = icmp ne i32 %and328, 0, !dbg !10813
  br i1 %cmp329, label %cond.false332, label %cond.true331, !dbg !10813

cond.true331:                                     ; preds = %sw.bb327
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5690, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !10813
  br label %cond.end333, !dbg !10813

cond.false332:                                    ; preds = %sw.bb327
  br label %cond.end333, !dbg !10813

cond.end333:                                      ; preds = %cond.false332, %cond.true331
  %cond334 = phi i32 [ 0, %cond.true331 ], [ 0, %cond.false332 ], !dbg !10813
  %224 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10814
  call void @c_parser_consume_token(%struct.c_parser* %224), !dbg !10815
  %225 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10816
  %call335 = call zeroext i8 @c_parser_require(%struct.c_parser* %225, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !10818
  %tobool336 = icmp ne i8 %call335, 0, !dbg !10818
  br i1 %tobool336, label %if.end339, label %if.then337, !dbg !10819

if.then337:                                       ; preds = %cond.end333
  %226 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10820
  %value338 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10822
  store %union.tree_node* %226, %union.tree_node** %value338, align 8, !dbg !10823
  br label %sw.epilog, !dbg !10824

if.end339:                                        ; preds = %cond.end333
  call void @llvm.dbg.declare(metadata %union.tree_node** %sel, metadata !10825, metadata !DIExpression()), !dbg !10827
  %227 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10828
  %call340 = call %union.tree_node* @c_parser_objc_selector_arg(%struct.c_parser* %227), !dbg !10829
  store %union.tree_node* %call340, %union.tree_node** %sel, align 8, !dbg !10827
  %228 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10830
  call void @c_parser_skip_until_found(%struct.c_parser* %228, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10831
  %229 = load i32, i32* %loc, align 4, !dbg !10832
  %230 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !10833
  %call341 = call %union.tree_node* @objc_build_selector_expr(i32 %229, %union.tree_node* %230), !dbg !10834
  %value342 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10835
  store %union.tree_node* %call341, %union.tree_node** %value342, align 8, !dbg !10836
  br label %sw.epilog, !dbg !10837

sw.bb343:                                         ; preds = %sw.bb102
  %231 = load i32, i32* @c_language, align 4, !dbg !10838
  %and344 = and i32 %231, 1, !dbg !10838
  %cmp345 = icmp ne i32 %and344, 0, !dbg !10838
  br i1 %cmp345, label %cond.false348, label %cond.true347, !dbg !10838

cond.true347:                                     ; preds = %sw.bb343
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5705, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !10838
  br label %cond.end349, !dbg !10838

cond.false348:                                    ; preds = %sw.bb343
  br label %cond.end349, !dbg !10838

cond.end349:                                      ; preds = %cond.false348, %cond.true347
  %cond350 = phi i32 [ 0, %cond.true347 ], [ 0, %cond.false348 ], !dbg !10838
  %232 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10839
  call void @c_parser_consume_token(%struct.c_parser* %232), !dbg !10840
  %233 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10841
  %call351 = call zeroext i8 @c_parser_require(%struct.c_parser* %233, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !10843
  %tobool352 = icmp ne i8 %call351, 0, !dbg !10843
  br i1 %tobool352, label %if.end355, label %if.then353, !dbg !10844

if.then353:                                       ; preds = %cond.end349
  %234 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10845
  %value354 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10847
  store %union.tree_node* %234, %union.tree_node** %value354, align 8, !dbg !10848
  br label %sw.epilog, !dbg !10849

if.end355:                                        ; preds = %cond.end349
  %235 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10850
  %call356 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %235, i32 53), !dbg !10852
  %tobool357 = icmp ne i8 %call356, 0, !dbg !10852
  br i1 %tobool357, label %if.then358, label %if.end360, !dbg !10853

if.then358:                                       ; preds = %if.end355
  %236 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10854
  call void @c_parser_error(%struct.c_parser* %236, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !10856
  %237 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10857
  call void @c_parser_skip_until_found(%struct.c_parser* %237, i32 21, i8* null), !dbg !10858
  %238 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10859
  %value359 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10860
  store %union.tree_node* %238, %union.tree_node** %value359, align 8, !dbg !10861
  br label %sw.epilog, !dbg !10862

if.end360:                                        ; preds = %if.end355
  call void @llvm.dbg.declare(metadata %union.tree_node** %id361, metadata !10863, metadata !DIExpression()), !dbg !10865
  %239 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10866
  %call362 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %239), !dbg !10867
  %value363 = getelementptr inbounds %struct.c_token, %struct.c_token* %call362, i32 0, i32 1, !dbg !10868
  %240 = load %union.tree_node*, %union.tree_node** %value363, align 8, !dbg !10868
  store %union.tree_node* %240, %union.tree_node** %id361, align 8, !dbg !10865
  %241 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10869
  call void @c_parser_consume_token(%struct.c_parser* %241), !dbg !10870
  %242 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10871
  call void @c_parser_skip_until_found(%struct.c_parser* %242, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10872
  %243 = load %union.tree_node*, %union.tree_node** %id361, align 8, !dbg !10873
  %call364 = call %union.tree_node* @objc_build_protocol_expr(%union.tree_node* %243), !dbg !10874
  %value365 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10875
  store %union.tree_node* %call364, %union.tree_node** %value365, align 8, !dbg !10876
  br label %sw.epilog, !dbg !10877

sw.bb366:                                         ; preds = %sw.bb102
  %244 = load i32, i32* @c_language, align 4, !dbg !10878
  %and367 = and i32 %244, 1, !dbg !10878
  %cmp368 = icmp ne i32 %and367, 0, !dbg !10878
  br i1 %cmp368, label %cond.false371, label %cond.true370, !dbg !10878

cond.true370:                                     ; preds = %sw.bb366
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5729, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !10878
  br label %cond.end372, !dbg !10878

cond.false371:                                    ; preds = %sw.bb366
  br label %cond.end372, !dbg !10878

cond.end372:                                      ; preds = %cond.false371, %cond.true370
  %cond373 = phi i32 [ 0, %cond.true370 ], [ 0, %cond.false371 ], !dbg !10878
  %245 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10879
  call void @c_parser_consume_token(%struct.c_parser* %245), !dbg !10880
  %246 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10881
  %call374 = call zeroext i8 @c_parser_require(%struct.c_parser* %246, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !10883
  %tobool375 = icmp ne i8 %call374, 0, !dbg !10883
  br i1 %tobool375, label %if.end378, label %if.then376, !dbg !10884

if.then376:                                       ; preds = %cond.end372
  %247 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10885
  %value377 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10887
  store %union.tree_node* %247, %union.tree_node** %value377, align 8, !dbg !10888
  br label %sw.epilog, !dbg !10889

if.end378:                                        ; preds = %cond.end372
  %248 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10890
  %call379 = call %struct.c_type_name* @c_parser_type_name(%struct.c_parser* %248), !dbg !10891
  store %struct.c_type_name* %call379, %struct.c_type_name** %t1, align 8, !dbg !10892
  %249 = load %struct.c_type_name*, %struct.c_type_name** %t1, align 8, !dbg !10893
  %cmp380 = icmp eq %struct.c_type_name* %249, null, !dbg !10895
  br i1 %cmp380, label %if.then382, label %if.end384, !dbg !10896

if.then382:                                       ; preds = %if.end378
  %250 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10897
  %value383 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10899
  store %union.tree_node* %250, %union.tree_node** %value383, align 8, !dbg !10900
  %251 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10901
  call void @c_parser_skip_until_found(%struct.c_parser* %251, i32 21, i8* null), !dbg !10902
  br label %sw.epilog, !dbg !10903

if.end384:                                        ; preds = %if.end378
  %252 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10904
  call void @c_parser_skip_until_found(%struct.c_parser* %252, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !10905
  call void @llvm.dbg.declare(metadata %union.tree_node** %type385, metadata !10906, metadata !DIExpression()), !dbg !10908
  %253 = load %struct.c_type_name*, %struct.c_type_name** %t1, align 8, !dbg !10909
  %call386 = call %union.tree_node* @groktypename(%struct.c_type_name* %253, %union.tree_node** null, i8* null), !dbg !10910
  store %union.tree_node* %call386, %union.tree_node** %type385, align 8, !dbg !10908
  %254 = load %union.tree_node*, %union.tree_node** %type385, align 8, !dbg !10911
  %call387 = call %union.tree_node* @objc_build_encode_expr(%union.tree_node* %254), !dbg !10912
  %value388 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10913
  store %union.tree_node* %call387, %union.tree_node** %value388, align 8, !dbg !10914
  br label %sw.epilog, !dbg !10915

sw.default:                                       ; preds = %sw.bb102
  %255 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10916
  call void @c_parser_error(%struct.c_parser* %255, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.36, i64 0, i64 0)), !dbg !10917
  %256 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10918
  %value389 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10919
  store %union.tree_node* %256, %union.tree_node** %value389, align 8, !dbg !10920
  br label %sw.epilog, !dbg !10921

sw.epilog:                                        ; preds = %sw.default, %if.end384, %if.then382, %if.then376, %if.end360, %if.then358, %if.then353, %if.end339, %if.then337, %cond.end324, %if.then308, %if.then302, %if.then297, %if.then291, %cond.end287, %if.then243, %if.then237, %if.then229, %if.end223, %if.then170, %if.then165, %if.then159, %if.end155, %if.then128, %if.then119, %sw.bb107
  br label %sw.epilog403, !dbg !10922

sw.bb390:                                         ; preds = %entry
  %257 = load i32, i32* @c_language, align 4, !dbg !10923
  %and391 = and i32 %257, 1, !dbg !10923
  %cmp392 = icmp ne i32 %and391, 0, !dbg !10923
  br i1 %cmp392, label %if.then394, label %if.end400, !dbg !10925

if.then394:                                       ; preds = %sw.bb390
  call void @llvm.dbg.declare(metadata %union.tree_node** %receiver, metadata !10926, metadata !DIExpression()), !dbg !10928
  call void @llvm.dbg.declare(metadata %union.tree_node** %args, metadata !10929, metadata !DIExpression()), !dbg !10930
  %258 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10931
  call void @c_parser_consume_token(%struct.c_parser* %258), !dbg !10932
  %259 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10933
  %call395 = call %union.tree_node* @c_parser_objc_receiver(%struct.c_parser* %259), !dbg !10934
  store %union.tree_node* %call395, %union.tree_node** %receiver, align 8, !dbg !10935
  %260 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10936
  %call396 = call %union.tree_node* @c_parser_objc_message_args(%struct.c_parser* %260), !dbg !10937
  store %union.tree_node* %call396, %union.tree_node** %args, align 8, !dbg !10938
  %261 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10939
  call void @c_parser_skip_until_found(%struct.c_parser* %261, i32 40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0)), !dbg !10940
  %262 = load %union.tree_node*, %union.tree_node** %receiver, align 8, !dbg !10941
  %263 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !10941
  %call397 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* %262, %union.tree_node* %263), !dbg !10941
  %call398 = call %union.tree_node* @objc_build_message_expr(%union.tree_node* %call397), !dbg !10942
  %value399 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10943
  store %union.tree_node* %call398, %union.tree_node** %value399, align 8, !dbg !10944
  br label %sw.epilog403, !dbg !10945

if.end400:                                        ; preds = %sw.bb390
  br label %sw.default401, !dbg !10923

sw.default401:                                    ; preds = %entry, %if.end400
  %264 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10946
  call void @c_parser_error(%struct.c_parser* %264, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.36, i64 0, i64 0)), !dbg !10947
  %265 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !10948
  %value402 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !10949
  store %union.tree_node* %265, %union.tree_node** %value402, align 8, !dbg !10950
  br label %sw.epilog403, !dbg !10951

sw.epilog403:                                     ; preds = %sw.default401, %if.then394, %sw.epilog, %if.end101, %if.then55, %if.end33, %if.then31, %cond.end, %sw.bb15, %sw.bb11, %if.end
  %266 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10952
  %267 = load i32, i32* %loc, align 4, !dbg !10953
  call void @c_parser_postfix_expression_after_primary(%struct.c_expr* sret %agg.result, %struct.c_parser* %266, i32 %267, %struct.c_expr* byval(%struct.c_expr) align 8 %expr), !dbg !10954
  ret void, !dbg !10955
}

declare dso_local void @c_expr_sizeof_type(%struct.c_expr* sret, i32, %struct.c_type_name*) #2

declare dso_local void @c_expr_sizeof_expr(%struct.c_expr* sret, i32, %struct.c_expr* byval(%struct.c_expr) align 8) #2

declare dso_local %union.tree_node* @c_sizeof_or_alignof_type(i32, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local %union.tree_node* @c_alignof_expr(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @objc_build_string_object(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_external_ref(i32, %union.tree_node*, i32, %union.tree_node**) #2

declare dso_local %struct.stmt_tree_s* @current_stmt_tree() #2

declare dso_local %union.tree_node* @c_begin_stmt_expr() #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_compound_statement_nostart(%struct.c_parser* %parser) #0 !dbg !10956 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %last_stmt = alloca i8, align 1
  %last_label = alloca i8, align 1
  %save_valid_for_pragma = alloca i8, align 1
  %label_loc = alloca i32, align 4
  %label = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %ext = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !10957, metadata !DIExpression()), !dbg !10958
  call void @llvm.dbg.declare(metadata i8* %last_stmt, metadata !10959, metadata !DIExpression()), !dbg !10960
  store i8 0, i8* %last_stmt, align 1, !dbg !10960
  call void @llvm.dbg.declare(metadata i8* %last_label, metadata !10961, metadata !DIExpression()), !dbg !10962
  store i8 0, i8* %last_label, align 1, !dbg !10962
  call void @llvm.dbg.declare(metadata i8* %save_valid_for_pragma, metadata !10963, metadata !DIExpression()), !dbg !10964
  %call = call zeroext i8 @valid_location_for_stdc_pragma_p(), !dbg !10965
  store i8 %call, i8* %save_valid_for_pragma, align 1, !dbg !10964
  call void @llvm.dbg.declare(metadata i32* %label_loc, metadata !10966, metadata !DIExpression()), !dbg !10967
  store i32 0, i32* %label_loc, align 4, !dbg !10967
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10968
  %call1 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 42), !dbg !10970
  %tobool = icmp ne i8 %call1, 0, !dbg !10970
  br i1 %tobool, label %if.then, label %if.end, !dbg !10971

if.then:                                          ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10972
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !10974
  br label %return, !dbg !10975

if.end:                                           ; preds = %entry
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext 1), !dbg !10976
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10977
  %call2 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %2, i32 57), !dbg !10979
  %tobool3 = icmp ne i8 %call2, 0, !dbg !10979
  br i1 %tobool3, label %if.then4, label %if.end24, !dbg !10980

if.then4:                                         ; preds = %if.end
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext 0), !dbg !10981
  br label %while.cond, !dbg !10983

while.cond:                                       ; preds = %while.end, %if.then4
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10984
  %call5 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %3, i32 57), !dbg !10985
  %tobool6 = icmp ne i8 %call5, 0, !dbg !10983
  br i1 %tobool6, label %while.body, label %while.end22, !dbg !10983

while.body:                                       ; preds = %while.cond
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10986
  %call7 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %4), !dbg !10988
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call7, i32 0, i32 2, !dbg !10989
  %5 = load i32, i32* %location, align 8, !dbg !10989
  store i32 %5, i32* %label_loc, align 4, !dbg !10990
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10991
  call void @c_parser_consume_token(%struct.c_parser* %6), !dbg !10992
  br label %while.body9, !dbg !10993

while.body9:                                      ; preds = %while.body, %if.end21
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !10994, metadata !DIExpression()), !dbg !10996
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !10997
  %call10 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %7, i32 53), !dbg !10999
  %tobool11 = icmp ne i8 %call10, 0, !dbg !10999
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !11000

if.then12:                                        ; preds = %while.body9
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11001
  call void @c_parser_error(%struct.c_parser* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !11003
  br label %while.end, !dbg !11004

if.end13:                                         ; preds = %while.body9
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11005
  %call14 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %9), !dbg !11006
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call14, i32 0, i32 1, !dbg !11007
  %10 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !11007
  %call15 = call %union.tree_node* @declare_label(%union.tree_node* %10), !dbg !11008
  store %union.tree_node* %call15, %union.tree_node** %label, align 8, !dbg !11009
  %11 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !11010
  %base = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !11010
  %12 = bitcast %struct.tree_base* %base to i64*, !dbg !11010
  %bf.load = load i64, i64* %12, align 8, !dbg !11011
  %bf.clear = and i64 %bf.load, -17179869185, !dbg !11011
  %bf.set = or i64 %bf.clear, 17179869184, !dbg !11011
  store i64 %bf.set, i64* %12, align 8, !dbg !11011
  %13 = load i32, i32* %label_loc, align 4, !dbg !11012
  %14 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !11013
  %call16 = call %union.tree_node* (i32, i32, ...) @build_stmt(i32 %13, i32 132, %union.tree_node* %14), !dbg !11014
  %call17 = call %union.tree_node* @add_stmt(%union.tree_node* %call16), !dbg !11015
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11016
  call void @c_parser_consume_token(%struct.c_parser* %15), !dbg !11017
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11018
  %call18 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %16, i32 19), !dbg !11020
  %tobool19 = icmp ne i8 %call18, 0, !dbg !11020
  br i1 %tobool19, label %if.then20, label %if.else, !dbg !11021

if.then20:                                        ; preds = %if.end13
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11022
  call void @c_parser_consume_token(%struct.c_parser* %17), !dbg !11023
  br label %if.end21, !dbg !11023

if.else:                                          ; preds = %if.end13
  br label %while.end, !dbg !11024

if.end21:                                         ; preds = %if.then20
  br label %while.body9, !dbg !10993, !llvm.loop !11025

while.end:                                        ; preds = %if.else, %if.then12
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11027
  call void @c_parser_skip_until_found(%struct.c_parser* %18, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !11028
  br label %while.cond, !dbg !10983, !llvm.loop !11029

while.end22:                                      ; preds = %while.cond
  %19 = load i32, i32* %label_loc, align 4, !dbg !11031
  %call23 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %19, i32 834, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.41, i64 0, i64 0)), !dbg !11032
  br label %if.end24, !dbg !11033

if.end24:                                         ; preds = %while.end22, %if.end
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11034
  %call25 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %20, i32 42), !dbg !11036
  %tobool26 = icmp ne i8 %call25, 0, !dbg !11036
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !11037

if.then27:                                        ; preds = %if.end24
  %21 = load i8, i8* %save_valid_for_pragma, align 1, !dbg !11038
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext %21), !dbg !11040
  %22 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11041
  call void @c_parser_error(%struct.c_parser* %22, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.42, i64 0, i64 0)), !dbg !11042
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11043
  call void @c_parser_consume_token(%struct.c_parser* %23), !dbg !11044
  br label %return, !dbg !11045

if.end28:                                         ; preds = %if.end24
  br label %while.cond29, !dbg !11046

while.cond29:                                     ; preds = %if.end136, %if.else129, %if.end28
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11047
  %call30 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %24, i32 42), !dbg !11048
  %tobool31 = icmp ne i8 %call30, 0, !dbg !11046
  br i1 %tobool31, label %while.body32, label %while.end139, !dbg !11046

while.body32:                                     ; preds = %while.cond29
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !11049, metadata !DIExpression()), !dbg !11051
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11052
  %call33 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %25), !dbg !11053
  %location34 = getelementptr inbounds %struct.c_token, %struct.c_token* %call33, i32 0, i32 2, !dbg !11054
  %26 = load i32, i32* %location34, align 8, !dbg !11054
  store i32 %26, i32* %loc, align 4, !dbg !11051
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11055
  %call35 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %27, i32 42), !dbg !11057
  %conv = zext i8 %call35 to i32, !dbg !11057
  %tobool36 = icmp ne i32 %conv, 0, !dbg !11057
  br i1 %tobool36, label %if.then48, label %lor.lhs.false, !dbg !11058

lor.lhs.false:                                    ; preds = %while.body32
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11059
  %call37 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %28, i32 43), !dbg !11060
  %conv38 = zext i8 %call37 to i32, !dbg !11060
  %tobool39 = icmp ne i32 %conv38, 0, !dbg !11060
  br i1 %tobool39, label %if.then48, label %lor.lhs.false40, !dbg !11061

lor.lhs.false40:                                  ; preds = %lor.lhs.false
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11062
  %call41 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %29, i32 53), !dbg !11063
  %conv42 = zext i8 %call41 to i32, !dbg !11063
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !11063
  br i1 %tobool43, label %land.lhs.true, label %if.else58, !dbg !11064

land.lhs.true:                                    ; preds = %lor.lhs.false40
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11065
  %call44 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %30), !dbg !11066
  %31 = bitcast %struct.c_token* %call44 to i32*, !dbg !11067
  %bf.load45 = load i32, i32* %31, align 8, !dbg !11067
  %bf.clear46 = and i32 %bf.load45, 255, !dbg !11067
  %cmp = icmp eq i32 %bf.clear46, 18, !dbg !11068
  br i1 %cmp, label %if.then48, label %if.else58, !dbg !11069

if.then48:                                        ; preds = %land.lhs.true, %lor.lhs.false, %while.body32
  %32 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11070
  %call49 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %32, i32 42), !dbg !11073
  %tobool50 = icmp ne i8 %call49, 0, !dbg !11073
  br i1 %tobool50, label %if.then51, label %if.else54, !dbg !11074

if.then51:                                        ; preds = %if.then48
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11075
  %call52 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %33), !dbg !11076
  %location53 = getelementptr inbounds %struct.c_token, %struct.c_token* %call52, i32 0, i32 2, !dbg !11077
  %34 = load i32, i32* %location53, align 8, !dbg !11077
  store i32 %34, i32* %label_loc, align 4, !dbg !11078
  br label %if.end57, !dbg !11079

if.else54:                                        ; preds = %if.then48
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11080
  %call55 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %35), !dbg !11081
  %location56 = getelementptr inbounds %struct.c_token, %struct.c_token* %call55, i32 0, i32 2, !dbg !11082
  %36 = load i32, i32* %location56, align 8, !dbg !11082
  store i32 %36, i32* %label_loc, align 4, !dbg !11083
  br label %if.end57

if.end57:                                         ; preds = %if.else54, %if.then51
  store i8 1, i8* %last_label, align 1, !dbg !11084
  store i8 0, i8* %last_stmt, align 1, !dbg !11085
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext 0), !dbg !11086
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11087
  call void @c_parser_label(%struct.c_parser* %37), !dbg !11088
  br label %if.end136, !dbg !11089

if.else58:                                        ; preds = %land.lhs.true, %lor.lhs.false40
  %38 = load i8, i8* %last_label, align 1, !dbg !11090
  %tobool59 = icmp ne i8 %38, 0, !dbg !11090
  br i1 %tobool59, label %if.else70, label %land.lhs.true60, !dbg !11092

land.lhs.true60:                                  ; preds = %if.else58
  %39 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11093
  %call61 = call zeroext i8 @c_parser_next_token_starts_declspecs(%struct.c_parser* %39), !dbg !11094
  %conv62 = zext i8 %call61 to i32, !dbg !11094
  %tobool63 = icmp ne i32 %conv62, 0, !dbg !11094
  br i1 %tobool63, label %if.then64, label %if.else70, !dbg !11095

if.then64:                                        ; preds = %land.lhs.true60
  store i8 0, i8* %last_label, align 1, !dbg !11096
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext 0), !dbg !11098
  %40 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11099
  call void @c_parser_declaration_or_fndef(%struct.c_parser* %40, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1), !dbg !11100
  %41 = load i8, i8* %last_stmt, align 1, !dbg !11101
  %tobool65 = icmp ne i8 %41, 0, !dbg !11101
  br i1 %tobool65, label %if.then66, label %if.end69, !dbg !11103

if.then66:                                        ; preds = %if.then64
  %42 = load i32, i32* %loc, align 4, !dbg !11104
  %43 = load i32, i32* @pedantic, align 4, !dbg !11105
  %tobool67 = icmp ne i32 %43, 0, !dbg !11105
  br i1 %tobool67, label %land.rhs, label %land.end, !dbg !11106

land.rhs:                                         ; preds = %if.then66
  %44 = load i32, i32* @flag_isoc99, align 4, !dbg !11107
  %tobool68 = icmp ne i32 %44, 0, !dbg !11108
  %lnot = xor i1 %tobool68, true, !dbg !11108
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then66
  %45 = phi i1 [ false, %if.then66 ], [ %lnot, %land.rhs ], !dbg !11109
  %46 = zext i1 %45 to i64, !dbg !11110
  %cond = select i1 %45, i32 834, i32 65, !dbg !11110
  call void (i32, i32, i8*, ...) @pedwarn_c90(i32 %42, i32 %cond, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.43, i64 0, i64 0)), !dbg !11111
  br label %if.end69, !dbg !11111

if.end69:                                         ; preds = %land.end, %if.then64
  store i8 0, i8* %last_stmt, align 1, !dbg !11112
  br label %if.end135, !dbg !11113

if.else70:                                        ; preds = %land.lhs.true60, %if.else58
  %47 = load i8, i8* %last_label, align 1, !dbg !11114
  %tobool71 = icmp ne i8 %47, 0, !dbg !11114
  br i1 %tobool71, label %if.else108, label %land.lhs.true72, !dbg !11116

land.lhs.true72:                                  ; preds = %if.else70
  %48 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11117
  %call73 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %48, i32 54), !dbg !11118
  %conv74 = zext i8 %call73 to i32, !dbg !11118
  %tobool75 = icmp ne i32 %conv74, 0, !dbg !11118
  br i1 %tobool75, label %if.then76, label %if.else108, !dbg !11119

if.then76:                                        ; preds = %land.lhs.true72
  br label %while.cond77, !dbg !11120

while.cond77:                                     ; preds = %while.body90, %if.then76
  %49 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11122
  %call78 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %49), !dbg !11123
  %50 = bitcast %struct.c_token* %call78 to i32*, !dbg !11124
  %bf.load79 = load i32, i32* %50, align 8, !dbg !11124
  %bf.clear80 = and i32 %bf.load79, 255, !dbg !11124
  %cmp81 = icmp eq i32 %bf.clear80, 74, !dbg !11125
  br i1 %cmp81, label %land.rhs83, label %land.end89, !dbg !11126

land.rhs83:                                       ; preds = %while.cond77
  %51 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11127
  %call84 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %51), !dbg !11128
  %52 = bitcast %struct.c_token* %call84 to i32*, !dbg !11129
  %bf.load85 = load i32, i32* %52, align 8, !dbg !11129
  %bf.lshr = lshr i32 %bf.load85, 16, !dbg !11129
  %bf.clear86 = and i32 %bf.lshr, 255, !dbg !11129
  %cmp87 = icmp eq i32 %bf.clear86, 54, !dbg !11130
  br label %land.end89

land.end89:                                       ; preds = %land.rhs83, %while.cond77
  %53 = phi i1 [ false, %while.cond77 ], [ %cmp87, %land.rhs83 ], !dbg !11131
  br i1 %53, label %while.body90, label %while.end91, !dbg !11120

while.body90:                                     ; preds = %land.end89
  %54 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11132
  call void @c_parser_consume_token(%struct.c_parser* %54), !dbg !11133
  br label %while.cond77, !dbg !11120, !llvm.loop !11134

while.end91:                                      ; preds = %land.end89
  %55 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11136
  %call92 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %55), !dbg !11138
  %call93 = call zeroext i8 @c_token_starts_declspecs(%struct.c_token* %call92), !dbg !11139
  %tobool94 = icmp ne i8 %call93, 0, !dbg !11139
  br i1 %tobool94, label %if.then95, label %if.else106, !dbg !11140

if.then95:                                        ; preds = %while.end91
  call void @llvm.dbg.declare(metadata i32* %ext, metadata !11141, metadata !DIExpression()), !dbg !11143
  %call96 = call i32 @disable_extension_diagnostics(), !dbg !11144
  store i32 %call96, i32* %ext, align 4, !dbg !11145
  %56 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11146
  call void @c_parser_consume_token(%struct.c_parser* %56), !dbg !11147
  store i8 0, i8* %last_label, align 1, !dbg !11148
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext 0), !dbg !11149
  %57 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11150
  call void @c_parser_declaration_or_fndef(%struct.c_parser* %57, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1), !dbg !11151
  %58 = load i32, i32* %ext, align 4, !dbg !11152
  call void @restore_extension_diagnostics(i32 %58), !dbg !11153
  %59 = load i8, i8* %last_stmt, align 1, !dbg !11154
  %tobool97 = icmp ne i8 %59, 0, !dbg !11154
  br i1 %tobool97, label %if.then98, label %if.end105, !dbg !11156

if.then98:                                        ; preds = %if.then95
  %60 = load i32, i32* %loc, align 4, !dbg !11157
  %61 = load i32, i32* @pedantic, align 4, !dbg !11158
  %tobool99 = icmp ne i32 %61, 0, !dbg !11158
  br i1 %tobool99, label %land.rhs100, label %land.end103, !dbg !11159

land.rhs100:                                      ; preds = %if.then98
  %62 = load i32, i32* @flag_isoc99, align 4, !dbg !11160
  %tobool101 = icmp ne i32 %62, 0, !dbg !11161
  %lnot102 = xor i1 %tobool101, true, !dbg !11161
  br label %land.end103

land.end103:                                      ; preds = %land.rhs100, %if.then98
  %63 = phi i1 [ false, %if.then98 ], [ %lnot102, %land.rhs100 ], !dbg !11162
  %64 = zext i1 %63 to i64, !dbg !11163
  %cond104 = select i1 %63, i32 834, i32 65, !dbg !11163
  call void (i32, i32, i8*, ...) @pedwarn_c90(i32 %60, i32 %cond104, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.43, i64 0, i64 0)), !dbg !11164
  br label %if.end105, !dbg !11164

if.end105:                                        ; preds = %land.end103, %if.then95
  store i8 0, i8* %last_stmt, align 1, !dbg !11165
  br label %if.end107, !dbg !11166

if.else106:                                       ; preds = %while.end91
  br label %statement, !dbg !11167

if.end107:                                        ; preds = %if.end105
  br label %if.end134, !dbg !11168

if.else108:                                       ; preds = %land.lhs.true72, %if.else70
  %65 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11169
  %call109 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %65, i32 70), !dbg !11171
  %tobool110 = icmp ne i8 %call109, 0, !dbg !11171
  br i1 %tobool110, label %if.then111, label %if.else116, !dbg !11172

if.then111:                                       ; preds = %if.else108
  %66 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11173
  %call112 = call zeroext i8 @c_parser_pragma(%struct.c_parser* %66, i32 2), !dbg !11176
  %tobool113 = icmp ne i8 %call112, 0, !dbg !11176
  br i1 %tobool113, label %if.then114, label %if.end115, !dbg !11177

if.then114:                                       ; preds = %if.then111
  store i8 0, i8* %last_label, align 1, !dbg !11178
  store i8 1, i8* %last_stmt, align 1, !dbg !11179
  br label %if.end115, !dbg !11180

if.end115:                                        ; preds = %if.then114, %if.then111
  br label %if.end133, !dbg !11181

if.else116:                                       ; preds = %if.else108
  %67 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11182
  %call117 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %67, i32 22), !dbg !11184
  %tobool118 = icmp ne i8 %call117, 0, !dbg !11184
  br i1 %tobool118, label %if.then119, label %if.else120, !dbg !11185

if.then119:                                       ; preds = %if.else116
  %68 = load i8, i8* %save_valid_for_pragma, align 1, !dbg !11186
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext %68), !dbg !11188
  %69 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11189
  call void @c_parser_error(%struct.c_parser* %69, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.42, i64 0, i64 0)), !dbg !11190
  br label %return, !dbg !11191

if.else120:                                       ; preds = %if.else116
  %70 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11192
  %call121 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %70, i32 37), !dbg !11194
  %tobool122 = icmp ne i8 %call121, 0, !dbg !11194
  br i1 %tobool122, label %if.then123, label %if.else130, !dbg !11195

if.then123:                                       ; preds = %if.else120
  %71 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11196
  %in_if_block = getelementptr inbounds %struct.c_parser, %struct.c_parser* %71, i32 0, i32 2, !dbg !11199
  %bf.load124 = load i8, i8* %in_if_block, align 2, !dbg !11199
  %bf.lshr125 = lshr i8 %bf.load124, 2, !dbg !11199
  %bf.clear126 = and i8 %bf.lshr125, 1, !dbg !11199
  %bf.cast = zext i8 %bf.clear126 to i32, !dbg !11199
  %tobool127 = icmp ne i32 %bf.cast, 0, !dbg !11196
  br i1 %tobool127, label %if.then128, label %if.else129, !dbg !11200

if.then128:                                       ; preds = %if.then123
  %72 = load i8, i8* %save_valid_for_pragma, align 1, !dbg !11201
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext %72), !dbg !11203
  %73 = load i32, i32* %loc, align 4, !dbg !11204
  call void (i32, i8*, ...) @error_at(i32 %73, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.44, i64 0, i64 0)), !dbg !11205
  br label %return, !dbg !11206

if.else129:                                       ; preds = %if.then123
  %74 = load i32, i32* %loc, align 4, !dbg !11207
  call void (i32, i8*, ...) @error_at(i32 %74, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.45, i64 0, i64 0)), !dbg !11209
  %75 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11210
  call void @c_parser_consume_token(%struct.c_parser* %75), !dbg !11211
  br label %while.cond29, !dbg !11212, !llvm.loop !11213

if.else130:                                       ; preds = %if.else120
  br label %statement, !dbg !11215

statement:                                        ; preds = %if.else130, %if.else106
  call void @llvm.dbg.label(metadata !11216), !dbg !11218
  store i8 0, i8* %last_label, align 1, !dbg !11219
  store i8 1, i8* %last_stmt, align 1, !dbg !11220
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext 0), !dbg !11221
  %76 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11222
  call void @c_parser_statement_after_labels(%struct.c_parser* %76), !dbg !11223
  br label %if.end131

if.end131:                                        ; preds = %statement
  br label %if.end132

if.end132:                                        ; preds = %if.end131
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %if.end115
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.end107
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %if.end69
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.end57
  %77 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11224
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %77, i32 0, i32 2, !dbg !11225
  %bf.load137 = load i8, i8* %error, align 2, !dbg !11226
  %bf.clear138 = and i8 %bf.load137, -2, !dbg !11226
  store i8 %bf.clear138, i8* %error, align 2, !dbg !11226
  br label %while.cond29, !dbg !11046, !llvm.loop !11213

while.end139:                                     ; preds = %while.cond29
  %78 = load i8, i8* %last_label, align 1, !dbg !11227
  %tobool140 = icmp ne i8 %78, 0, !dbg !11227
  br i1 %tobool140, label %if.then141, label %if.end142, !dbg !11229

if.then141:                                       ; preds = %while.end139
  %79 = load i32, i32* %label_loc, align 4, !dbg !11230
  call void (i32, i8*, ...) @error_at(i32 %79, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.46, i64 0, i64 0)), !dbg !11231
  br label %if.end142, !dbg !11231

if.end142:                                        ; preds = %if.then141, %while.end139
  %80 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11232
  call void @c_parser_consume_token(%struct.c_parser* %80), !dbg !11233
  %81 = load i8, i8* %save_valid_for_pragma, align 1, !dbg !11234
  call void @mark_valid_location_for_stdc_pragma(i8 zeroext %81), !dbg !11235
  br label %return, !dbg !11236

return:                                           ; preds = %if.end142, %if.then128, %if.then119, %if.then27, %if.then
  ret void, !dbg !11236
}

declare dso_local %union.tree_node* @c_finish_stmt_expr(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @fname_decl(i32, i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @c_build_va_arg(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_offsetof(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @constant_expression_warning(%union.tree_node*) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local i32 @comptypes(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_objc_selector_arg(%struct.c_parser* %parser) #0 !dbg !11237 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %sel = alloca %union.tree_node*, align 8
  %list = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !11238, metadata !DIExpression()), !dbg !11239
  call void @llvm.dbg.declare(metadata %union.tree_node** %sel, metadata !11240, metadata !DIExpression()), !dbg !11241
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11242
  %call = call %union.tree_node* @c_parser_objc_selector(%struct.c_parser* %0), !dbg !11243
  store %union.tree_node* %call, %union.tree_node** %sel, align 8, !dbg !11241
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !11244, metadata !DIExpression()), !dbg !11245
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !11245
  %1 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !11246
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !11246
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !11248

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11249
  %call1 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %2, i32 18), !dbg !11250
  %conv = zext i8 %call1 to i32, !dbg !11250
  %tobool2 = icmp ne i32 %conv, 0, !dbg !11250
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11251

if.then:                                          ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !11252
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !11253
  br label %return, !dbg !11253

if.end:                                           ; preds = %land.lhs.true, %entry
  br label %while.body, !dbg !11254

while.body:                                       ; preds = %if.end, %if.end16
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11255
  %call3 = call zeroext i8 @c_parser_require(%struct.c_parser* %4, i32 18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)), !dbg !11258
  %tobool4 = icmp ne i8 %call3, 0, !dbg !11258
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !11259

if.then5:                                         ; preds = %while.body
  %5 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !11260
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !11261
  br label %return, !dbg !11261

if.end6:                                          ; preds = %while.body
  %6 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !11262
  %7 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !11263
  %call7 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* %7, %union.tree_node* null), !dbg !11263
  %call8 = call %union.tree_node* @chainon(%union.tree_node* %6, %union.tree_node* %call7), !dbg !11264
  store %union.tree_node* %call8, %union.tree_node** %list, align 8, !dbg !11265
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11266
  %call9 = call %union.tree_node* @c_parser_objc_selector(%struct.c_parser* %8), !dbg !11267
  store %union.tree_node* %call9, %union.tree_node** %sel, align 8, !dbg !11268
  %9 = load %union.tree_node*, %union.tree_node** %sel, align 8, !dbg !11269
  %tobool10 = icmp ne %union.tree_node* %9, null, !dbg !11269
  br i1 %tobool10, label %if.end16, label %land.lhs.true11, !dbg !11271

land.lhs.true11:                                  ; preds = %if.end6
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11272
  %call12 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %10, i32 18), !dbg !11273
  %conv13 = zext i8 %call12 to i32, !dbg !11273
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !11273
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !11274

if.then15:                                        ; preds = %land.lhs.true11
  br label %while.end, !dbg !11275

if.end16:                                         ; preds = %land.lhs.true11, %if.end6
  br label %while.body, !dbg !11254, !llvm.loop !11276

while.end:                                        ; preds = %if.then15
  %11 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !11278
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !11279
  br label %return, !dbg !11279

return:                                           ; preds = %while.end, %if.then5, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11280
  ret %union.tree_node* %12, !dbg !11280
}

declare dso_local %union.tree_node* @objc_build_selector_expr(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @objc_build_protocol_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @objc_build_encode_expr(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_objc_receiver(%struct.c_parser* %parser) #0 !dbg !11281 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %id = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !11282, metadata !DIExpression()), !dbg !11283
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11284
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !11286
  %1 = bitcast %struct.c_token* %call to i32*, !dbg !11287
  %bf.load = load i32, i32* %1, align 8, !dbg !11287
  %bf.clear = and i32 %bf.load, 255, !dbg !11287
  %cmp = icmp eq i32 %bf.clear, 53, !dbg !11288
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !11289

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11290
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !11291
  %3 = bitcast %struct.c_token* %call1 to i32*, !dbg !11292
  %bf.load2 = load i32, i32* %3, align 8, !dbg !11292
  %bf.lshr = lshr i32 %bf.load2, 8, !dbg !11292
  %bf.clear3 = and i32 %bf.lshr, 255, !dbg !11292
  %cmp4 = icmp eq i32 %bf.clear3, 1, !dbg !11293
  br i1 %cmp4, label %if.then, label %lor.lhs.false, !dbg !11294

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11295
  %call5 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %4), !dbg !11296
  %5 = bitcast %struct.c_token* %call5 to i32*, !dbg !11297
  %bf.load6 = load i32, i32* %5, align 8, !dbg !11297
  %bf.lshr7 = lshr i32 %bf.load6, 8, !dbg !11297
  %bf.clear8 = and i32 %bf.lshr7, 255, !dbg !11297
  %cmp9 = icmp eq i32 %bf.clear8, 2, !dbg !11298
  br i1 %cmp9, label %if.then, label %if.end, !dbg !11299

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !11300, metadata !DIExpression()), !dbg !11302
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11303
  %call10 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %6), !dbg !11304
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call10, i32 0, i32 1, !dbg !11305
  %7 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !11305
  store %union.tree_node* %7, %union.tree_node** %id, align 8, !dbg !11302
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11306
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !11307
  %9 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !11308
  %call11 = call %union.tree_node* @objc_get_class_reference(%union.tree_node* %9), !dbg !11309
  store %union.tree_node* %call11, %union.tree_node** %retval, align 8, !dbg !11310
  br label %return, !dbg !11310

if.end:                                           ; preds = %lor.lhs.false, %entry
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11311
  call void @c_parser_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %10), !dbg !11312
  %value12 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !11313
  %11 = load %union.tree_node*, %union.tree_node** %value12, align 8, !dbg !11313
  %call13 = call %union.tree_node* @c_fully_fold(%union.tree_node* %11, i8 zeroext 0, i8* null), !dbg !11314
  store %union.tree_node* %call13, %union.tree_node** %retval, align 8, !dbg !11315
  br label %return, !dbg !11315

return:                                           ; preds = %if.end, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11316
  ret %union.tree_node* %12, !dbg !11316
}

declare dso_local zeroext i8 @valid_location_for_stdc_pragma_p() #2

declare dso_local %union.tree_node* @declare_label(%union.tree_node*) #2

declare dso_local %union.tree_node* @add_stmt(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_stmt(i32, i32, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_label(%struct.c_parser* %parser) #0 !dbg !11317 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %loc1 = alloca i32, align 4
  %label = alloca %union.tree_node*, align 8
  %exp1 = alloca %union.tree_node*, align 8
  %exp2 = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.c_expr, align 8
  %tmp9 = alloca %struct.c_expr, align 8
  %name = alloca %union.tree_node*, align 8
  %tlab = alloca %union.tree_node*, align 8
  %attrs = alloca %union.tree_node*, align 8
  %loc2 = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !11318, metadata !DIExpression()), !dbg !11319
  call void @llvm.dbg.declare(metadata i32* %loc1, metadata !11320, metadata !DIExpression()), !dbg !11321
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11322
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !11323
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !11324
  %1 = load i32, i32* %location, align 8, !dbg !11324
  store i32 %1, i32* %loc1, align 4, !dbg !11321
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !11325, metadata !DIExpression()), !dbg !11326
  store %union.tree_node* null, %union.tree_node** %label, align 8, !dbg !11326
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11327
  %call1 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %2, i32 42), !dbg !11329
  %tobool = icmp ne i8 %call1, 0, !dbg !11329
  br i1 %tobool, label %if.then, label %if.else18, !dbg !11330

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp1, metadata !11331, metadata !DIExpression()), !dbg !11333
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp2, metadata !11334, metadata !DIExpression()), !dbg !11335
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11336
  call void @c_parser_consume_token(%struct.c_parser* %3), !dbg !11337
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11338
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp, %struct.c_parser* %4, %struct.c_expr* null), !dbg !11339
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !11340
  %5 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !11340
  store %union.tree_node* %5, %union.tree_node** %exp1, align 8, !dbg !11341
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11342
  %call2 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %6, i32 18), !dbg !11344
  %tobool3 = icmp ne i8 %call2, 0, !dbg !11344
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !11345

if.then4:                                         ; preds = %if.then
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11346
  call void @c_parser_consume_token(%struct.c_parser* %7), !dbg !11348
  %8 = load i32, i32* %loc1, align 4, !dbg !11349
  %9 = load %union.tree_node*, %union.tree_node** %exp1, align 8, !dbg !11350
  %call5 = call %union.tree_node* @do_case(i32 %8, %union.tree_node* %9, %union.tree_node* null), !dbg !11351
  store %union.tree_node* %call5, %union.tree_node** %label, align 8, !dbg !11352
  br label %if.end17, !dbg !11353

if.else:                                          ; preds = %if.then
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11354
  %call6 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %10, i32 44), !dbg !11356
  %tobool7 = icmp ne i8 %call6, 0, !dbg !11356
  br i1 %tobool7, label %if.then8, label %if.else15, !dbg !11357

if.then8:                                         ; preds = %if.else
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11358
  call void @c_parser_consume_token(%struct.c_parser* %11), !dbg !11360
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11361
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp9, %struct.c_parser* %12, %struct.c_expr* null), !dbg !11362
  %value10 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp9, i32 0, i32 0, !dbg !11363
  %13 = load %union.tree_node*, %union.tree_node** %value10, align 8, !dbg !11363
  store %union.tree_node* %13, %union.tree_node** %exp2, align 8, !dbg !11364
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11365
  %call11 = call zeroext i8 @c_parser_require(%struct.c_parser* %14, i32 18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)), !dbg !11367
  %tobool12 = icmp ne i8 %call11, 0, !dbg !11367
  br i1 %tobool12, label %if.then13, label %if.end, !dbg !11368

if.then13:                                        ; preds = %if.then8
  %15 = load i32, i32* %loc1, align 4, !dbg !11369
  %16 = load %union.tree_node*, %union.tree_node** %exp1, align 8, !dbg !11370
  %17 = load %union.tree_node*, %union.tree_node** %exp2, align 8, !dbg !11371
  %call14 = call %union.tree_node* @do_case(i32 %15, %union.tree_node* %16, %union.tree_node* %17), !dbg !11372
  store %union.tree_node* %call14, %union.tree_node** %label, align 8, !dbg !11373
  br label %if.end, !dbg !11374

if.end:                                           ; preds = %if.then13, %if.then8
  br label %if.end16, !dbg !11375

if.else15:                                        ; preds = %if.else
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11376
  call void @c_parser_error(%struct.c_parser* %18, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.47, i64 0, i64 0)), !dbg !11377
  br label %if.end16

if.end16:                                         ; preds = %if.else15, %if.end
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.then4
  br label %if.end49, !dbg !11378

if.else18:                                        ; preds = %entry
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11379
  %call19 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %19, i32 43), !dbg !11381
  %tobool20 = icmp ne i8 %call19, 0, !dbg !11381
  br i1 %tobool20, label %if.then21, label %if.else27, !dbg !11382

if.then21:                                        ; preds = %if.else18
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11383
  call void @c_parser_consume_token(%struct.c_parser* %20), !dbg !11385
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11386
  %call22 = call zeroext i8 @c_parser_require(%struct.c_parser* %21, i32 18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)), !dbg !11388
  %tobool23 = icmp ne i8 %call22, 0, !dbg !11388
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !11389

if.then24:                                        ; preds = %if.then21
  %22 = load i32, i32* %loc1, align 4, !dbg !11390
  %call25 = call %union.tree_node* @do_case(i32 %22, %union.tree_node* null, %union.tree_node* null), !dbg !11391
  store %union.tree_node* %call25, %union.tree_node** %label, align 8, !dbg !11392
  br label %if.end26, !dbg !11393

if.end26:                                         ; preds = %if.then24, %if.then21
  br label %if.end48, !dbg !11394

if.else27:                                        ; preds = %if.else18
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !11395, metadata !DIExpression()), !dbg !11397
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11398
  %call28 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %23), !dbg !11399
  %value29 = getelementptr inbounds %struct.c_token, %struct.c_token* %call28, i32 0, i32 1, !dbg !11400
  %24 = load %union.tree_node*, %union.tree_node** %value29, align 8, !dbg !11400
  store %union.tree_node* %24, %union.tree_node** %name, align 8, !dbg !11397
  call void @llvm.dbg.declare(metadata %union.tree_node** %tlab, metadata !11401, metadata !DIExpression()), !dbg !11402
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs, metadata !11403, metadata !DIExpression()), !dbg !11404
  call void @llvm.dbg.declare(metadata i32* %loc2, metadata !11405, metadata !DIExpression()), !dbg !11406
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11407
  %call30 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %25), !dbg !11408
  %location31 = getelementptr inbounds %struct.c_token, %struct.c_token* %call30, i32 0, i32 2, !dbg !11409
  %26 = load i32, i32* %location31, align 8, !dbg !11409
  store i32 %26, i32* %loc2, align 4, !dbg !11406
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11410
  %call32 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %27, i32 53), !dbg !11410
  %tobool33 = icmp ne i8 %call32, 0, !dbg !11410
  br i1 %tobool33, label %cond.false, label %cond.true, !dbg !11410

cond.true:                                        ; preds = %if.else27
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3640, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11410
  br label %cond.end, !dbg !11410

cond.false:                                       ; preds = %if.else27
  br label %cond.end, !dbg !11410

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11410
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11411
  call void @c_parser_consume_token(%struct.c_parser* %28), !dbg !11412
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11413
  %call34 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %29, i32 18), !dbg !11413
  %tobool35 = icmp ne i8 %call34, 0, !dbg !11413
  br i1 %tobool35, label %cond.false37, label %cond.true36, !dbg !11413

cond.true36:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3642, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11413
  br label %cond.end38, !dbg !11413

cond.false37:                                     ; preds = %cond.end
  br label %cond.end38, !dbg !11413

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi i32 [ 0, %cond.true36 ], [ 0, %cond.false37 ], !dbg !11413
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11414
  call void @c_parser_consume_token(%struct.c_parser* %30), !dbg !11415
  %31 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11416
  %call40 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %31), !dbg !11417
  store %union.tree_node* %call40, %union.tree_node** %attrs, align 8, !dbg !11418
  %32 = load i32, i32* %loc2, align 4, !dbg !11419
  %33 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !11420
  %call41 = call %union.tree_node* @define_label(i32 %32, %union.tree_node* %33), !dbg !11421
  store %union.tree_node* %call41, %union.tree_node** %tlab, align 8, !dbg !11422
  %34 = load %union.tree_node*, %union.tree_node** %tlab, align 8, !dbg !11423
  %tobool42 = icmp ne %union.tree_node* %34, null, !dbg !11423
  br i1 %tobool42, label %if.then43, label %if.end47, !dbg !11425

if.then43:                                        ; preds = %cond.end38
  %35 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !11426
  %call44 = call %union.tree_node* @decl_attributes(%union.tree_node** %tlab, %union.tree_node* %35, i32 0), !dbg !11428
  %36 = load i32, i32* %loc1, align 4, !dbg !11429
  %37 = load %union.tree_node*, %union.tree_node** %tlab, align 8, !dbg !11430
  %call45 = call %union.tree_node* (i32, i32, ...) @build_stmt(i32 %36, i32 133, %union.tree_node* %37), !dbg !11431
  %call46 = call %union.tree_node* @add_stmt(%union.tree_node* %call45), !dbg !11432
  store %union.tree_node* %call46, %union.tree_node** %label, align 8, !dbg !11433
  br label %if.end47, !dbg !11434

if.end47:                                         ; preds = %if.then43, %cond.end38
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.end26
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.end17
  %38 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !11435
  %tobool50 = icmp ne %union.tree_node* %38, null, !dbg !11435
  br i1 %tobool50, label %if.then51, label %if.end64, !dbg !11437

if.then51:                                        ; preds = %if.end49
  %39 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11438
  %call52 = call zeroext i8 @c_parser_next_token_starts_declspecs(%struct.c_parser* %39), !dbg !11441
  %conv = zext i8 %call52 to i32, !dbg !11441
  %tobool53 = icmp ne i32 %conv, 0, !dbg !11441
  br i1 %tobool53, label %land.lhs.true, label %if.end63, !dbg !11442

land.lhs.true:                                    ; preds = %if.then51
  %40 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11443
  %call54 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %40, i32 53), !dbg !11444
  %conv55 = zext i8 %call54 to i32, !dbg !11444
  %tobool56 = icmp ne i32 %conv55, 0, !dbg !11444
  br i1 %tobool56, label %land.lhs.true57, label %if.then60, !dbg !11445

land.lhs.true57:                                  ; preds = %land.lhs.true
  %41 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11446
  %call58 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %41), !dbg !11447
  %42 = bitcast %struct.c_token* %call58 to i32*, !dbg !11448
  %bf.load = load i32, i32* %42, align 8, !dbg !11448
  %bf.clear = and i32 %bf.load, 255, !dbg !11448
  %cmp = icmp eq i32 %bf.clear, 18, !dbg !11449
  br i1 %cmp, label %if.end63, label %if.then60, !dbg !11450

if.then60:                                        ; preds = %land.lhs.true57, %land.lhs.true
  %43 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11451
  %call61 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %43), !dbg !11453
  %location62 = getelementptr inbounds %struct.c_token, %struct.c_token* %call61, i32 0, i32 2, !dbg !11454
  %44 = load i32, i32* %location62, align 8, !dbg !11454
  call void (i32, i8*, ...) @error_at(i32 %44, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.48, i64 0, i64 0)), !dbg !11455
  %45 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11456
  call void @c_parser_declaration_or_fndef(%struct.c_parser* %45, i8 zeroext 0, i8 zeroext 1, i8 zeroext 0, i8 zeroext 1), !dbg !11457
  br label %if.end63, !dbg !11458

if.end63:                                         ; preds = %if.then60, %land.lhs.true57, %if.then51
  br label %if.end64, !dbg !11459

if.end64:                                         ; preds = %if.end63, %if.end49
  ret void, !dbg !11460
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @c_parser_next_token_starts_declspecs(%struct.c_parser* %parser) #0 !dbg !11461 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %token = alloca %struct.c_token*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !11462, metadata !DIExpression()), !dbg !11463
  call void @llvm.dbg.declare(metadata %struct.c_token** %token, metadata !11464, metadata !DIExpression()), !dbg !11465
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11466
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !11467
  store %struct.c_token* %call, %struct.c_token** %token, align 8, !dbg !11465
  %1 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !11468
  %call1 = call zeroext i8 @c_token_starts_declspecs(%struct.c_token* %1), !dbg !11469
  ret i8 %call1, !dbg !11470
}

declare dso_local void @pedwarn_c90(i32, i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @c_token_starts_declspecs(%struct.c_token* %token) #0 !dbg !11471 {
entry:
  %retval = alloca i8, align 1
  %token.addr = alloca %struct.c_token*, align 8
  store %struct.c_token* %token, %struct.c_token** %token.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_token** %token.addr, metadata !11472, metadata !DIExpression()), !dbg !11473
  %0 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !11474
  %1 = bitcast %struct.c_token* %0 to i32*, !dbg !11475
  %bf.load = load i32, i32* %1, align 8, !dbg !11475
  %bf.clear = and i32 %bf.load, 255, !dbg !11475
  switch i32 %bf.clear, label %sw.default16 [
    i32 53, label %sw.bb
    i32 74, label %sw.bb7
    i32 3, label %sw.bb13
  ], !dbg !11476

sw.bb:                                            ; preds = %entry
  %2 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !11477
  %3 = bitcast %struct.c_token* %2 to i32*, !dbg !11479
  %bf.load1 = load i32, i32* %3, align 8, !dbg !11479
  %bf.lshr = lshr i32 %bf.load1, 8, !dbg !11479
  %bf.clear2 = and i32 %bf.lshr, 255, !dbg !11479
  switch i32 %bf.clear2, label %sw.default [
    i32 0, label %sw.bb3
    i32 3, label %sw.bb4
    i32 1, label %sw.bb5
    i32 2, label %sw.bb6
  ], !dbg !11480

sw.bb3:                                           ; preds = %sw.bb
  store i8 0, i8* %retval, align 1, !dbg !11481
  br label %return, !dbg !11481

sw.bb4:                                           ; preds = %sw.bb
  store i8 1, i8* %retval, align 1, !dbg !11483
  br label %return, !dbg !11483

sw.bb5:                                           ; preds = %sw.bb
  store i8 1, i8* %retval, align 1, !dbg !11484
  br label %return, !dbg !11484

sw.bb6:                                           ; preds = %sw.bb
  %4 = load i32, i32* @c_language, align 4, !dbg !11485
  %and = and i32 %4, 1, !dbg !11485
  %cmp = icmp ne i32 %and, 0, !dbg !11485
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11485

cond.true:                                        ; preds = %sw.bb6
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 445, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11485
  br label %cond.end, !dbg !11485

cond.false:                                       ; preds = %sw.bb6
  br label %cond.end, !dbg !11485

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11485
  store i8 1, i8* %retval, align 1, !dbg !11486
  br label %return, !dbg !11486

sw.default:                                       ; preds = %sw.bb
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 448, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11487
  br label %sw.epilog, !dbg !11488

sw.epilog:                                        ; preds = %sw.default
  br label %sw.bb7, !dbg !11488

sw.bb7:                                           ; preds = %entry, %sw.epilog
  %5 = load %struct.c_token*, %struct.c_token** %token.addr, align 8, !dbg !11489
  %6 = bitcast %struct.c_token* %5 to i32*, !dbg !11490
  %bf.load8 = load i32, i32* %6, align 8, !dbg !11490
  %bf.lshr9 = lshr i32 %bf.load8, 16, !dbg !11490
  %bf.clear10 = and i32 %bf.lshr9, 255, !dbg !11490
  switch i32 %bf.clear10, label %sw.default12 [
    i32 0, label %sw.bb11
    i32 4, label %sw.bb11
    i32 5, label %sw.bb11
    i32 6, label %sw.bb11
    i32 8, label %sw.bb11
    i32 11, label %sw.bb11
    i32 14, label %sw.bb11
    i32 1, label %sw.bb11
    i32 2, label %sw.bb11
    i32 7, label %sw.bb11
    i32 10, label %sw.bb11
    i32 13, label %sw.bb11
    i32 28, label %sw.bb11
    i32 29, label %sw.bb11
    i32 30, label %sw.bb11
    i32 31, label %sw.bb11
    i32 32, label %sw.bb11
    i32 60, label %sw.bb11
    i32 61, label %sw.bb11
    i32 62, label %sw.bb11
    i32 69, label %sw.bb11
    i32 33, label %sw.bb11
    i32 34, label %sw.bb11
    i32 35, label %sw.bb11
    i32 50, label %sw.bb11
    i32 3, label %sw.bb11
    i32 9, label %sw.bb11
    i32 12, label %sw.bb11
    i32 52, label %sw.bb11
    i32 63, label %sw.bb11
    i32 64, label %sw.bb11
    i32 15, label %sw.bb11
  ], !dbg !11491

sw.bb11:                                          ; preds = %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7, %sw.bb7
  store i8 1, i8* %retval, align 1, !dbg !11492
  br label %return, !dbg !11492

sw.default12:                                     ; preds = %sw.bb7
  store i8 0, i8* %retval, align 1, !dbg !11494
  br label %return, !dbg !11494

sw.bb13:                                          ; preds = %entry
  %7 = load i32, i32* @c_language, align 4, !dbg !11495
  %and14 = and i32 %7, 1, !dbg !11495
  %cmp15 = icmp ne i32 %and14, 0, !dbg !11495
  br i1 %cmp15, label %if.then, label %if.end, !dbg !11497

if.then:                                          ; preds = %sw.bb13
  store i8 1, i8* %retval, align 1, !dbg !11498
  br label %return, !dbg !11498

if.end:                                           ; preds = %sw.bb13
  store i8 0, i8* %retval, align 1, !dbg !11499
  br label %return, !dbg !11499

sw.default16:                                     ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !11500
  br label %return, !dbg !11500

return:                                           ; preds = %sw.default16, %if.end, %if.then, %sw.default12, %sw.bb11, %cond.end, %sw.bb5, %sw.bb4, %sw.bb3
  %8 = load i8, i8* %retval, align 1, !dbg !11501
  ret i8 %8, !dbg !11501
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_statement_after_labels(%struct.c_parser* %parser) #0 !dbg !11502 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %loc = alloca i32, align 4
  %stmt = alloca %union.tree_node*, align 8
  %in_if_block = alloca i8, align 1
  %tmp = alloca %struct.c_expr, align 8
  %expr = alloca %struct.c_expr, align 8
  %expr53 = alloca %union.tree_node*, align 8
  %tmp54 = alloca %struct.c_expr, align 8
  %tmp80 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !11503, metadata !DIExpression()), !dbg !11504
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !11505, metadata !DIExpression()), !dbg !11506
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11507
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !11508
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !11509
  %1 = load i32, i32* %location, align 8, !dbg !11509
  store i32 %1, i32* %loc, align 4, !dbg !11506
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !11510, metadata !DIExpression()), !dbg !11511
  store %union.tree_node* null, %union.tree_node** %stmt, align 8, !dbg !11511
  call void @llvm.dbg.declare(metadata i8* %in_if_block, metadata !11512, metadata !DIExpression()), !dbg !11513
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11514
  %in_if_block1 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %2, i32 0, i32 2, !dbg !11515
  %bf.load = load i8, i8* %in_if_block1, align 2, !dbg !11515
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !11515
  %bf.clear = and i8 %bf.lshr, 1, !dbg !11515
  %bf.cast = zext i8 %bf.clear to i32, !dbg !11515
  %conv = trunc i32 %bf.cast to i8, !dbg !11514
  store i8 %conv, i8* %in_if_block, align 1, !dbg !11513
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11516
  %in_if_block2 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %3, i32 0, i32 2, !dbg !11517
  %bf.load3 = load i8, i8* %in_if_block2, align 2, !dbg !11518
  %bf.clear4 = and i8 %bf.load3, -5, !dbg !11518
  store i8 %bf.clear4, i8* %in_if_block2, align 2, !dbg !11518
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11519
  %call5 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %4), !dbg !11520
  %5 = bitcast %struct.c_token* %call5 to i32*, !dbg !11521
  %bf.load6 = load i32, i32* %5, align 8, !dbg !11521
  %bf.clear7 = and i32 %bf.load6, 255, !dbg !11521
  switch i32 %bf.clear7, label %sw.default79 [
    i32 41, label %sw.bb
    i32 74, label %sw.bb10
    i32 43, label %sw.bb75
    i32 21, label %sw.bb76
    i32 40, label %sw.bb76
    i32 70, label %sw.bb77
  ], !dbg !11522

sw.bb:                                            ; preds = %entry
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11523
  %call8 = call %union.tree_node* @c_parser_compound_statement(%struct.c_parser* %6), !dbg !11525
  %call9 = call %union.tree_node* @add_stmt(%union.tree_node* %call8), !dbg !11526
  br label %sw.epilog83, !dbg !11527

sw.bb10:                                          ; preds = %entry
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11528
  %call11 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %7), !dbg !11529
  %8 = bitcast %struct.c_token* %call11 to i32*, !dbg !11530
  %bf.load12 = load i32, i32* %8, align 8, !dbg !11530
  %bf.lshr13 = lshr i32 %bf.load12, 16, !dbg !11530
  %bf.clear14 = and i32 %bf.lshr13, 255, !dbg !11530
  switch i32 %bf.clear14, label %sw.default [
    i32 36, label %sw.bb15
    i32 41, label %sw.bb16
    i32 38, label %sw.bb17
    i32 39, label %sw.bb18
    i32 40, label %sw.bb19
    i32 47, label %sw.bb20
    i32 45, label %sw.bb31
    i32 44, label %sw.bb33
    i32 46, label %sw.bb35
    i32 49, label %sw.bb44
    i32 85, label %sw.bb46
    i32 87, label %sw.bb59
    i32 133, label %sw.bb67
  ], !dbg !11531

sw.bb15:                                          ; preds = %sw.bb10
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11532
  call void @c_parser_if_statement(%struct.c_parser* %9), !dbg !11534
  br label %sw.epilog, !dbg !11535

sw.bb16:                                          ; preds = %sw.bb10
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11536
  call void @c_parser_switch_statement(%struct.c_parser* %10), !dbg !11537
  br label %sw.epilog, !dbg !11538

sw.bb17:                                          ; preds = %sw.bb10
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11539
  call void @c_parser_while_statement(%struct.c_parser* %11), !dbg !11540
  br label %sw.epilog, !dbg !11541

sw.bb18:                                          ; preds = %sw.bb10
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11542
  call void @c_parser_do_statement(%struct.c_parser* %12), !dbg !11543
  br label %sw.epilog, !dbg !11544

sw.bb19:                                          ; preds = %sw.bb10
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11545
  call void @c_parser_for_statement(%struct.c_parser* %13), !dbg !11546
  br label %sw.epilog, !dbg !11547

sw.bb20:                                          ; preds = %sw.bb10
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11548
  call void @c_parser_consume_token(%struct.c_parser* %14), !dbg !11549
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11550
  %call21 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %15, i32 53), !dbg !11552
  %tobool = icmp ne i8 %call21, 0, !dbg !11552
  br i1 %tobool, label %if.then, label %if.else, !dbg !11553

if.then:                                          ; preds = %sw.bb20
  %16 = load i32, i32* %loc, align 4, !dbg !11554
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11556
  %call22 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %17), !dbg !11557
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call22, i32 0, i32 1, !dbg !11558
  %18 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !11558
  %call23 = call %union.tree_node* @c_finish_goto_label(i32 %16, %union.tree_node* %18), !dbg !11559
  store %union.tree_node* %call23, %union.tree_node** %stmt, align 8, !dbg !11560
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11561
  call void @c_parser_consume_token(%struct.c_parser* %19), !dbg !11562
  br label %if.end30, !dbg !11563

if.else:                                          ; preds = %sw.bb20
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11564
  %call24 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %20, i32 6), !dbg !11566
  %tobool25 = icmp ne i8 %call24, 0, !dbg !11566
  br i1 %tobool25, label %if.then26, label %if.else29, !dbg !11567

if.then26:                                        ; preds = %if.else
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11568
  call void @c_parser_consume_token(%struct.c_parser* %21), !dbg !11570
  %22 = load i32, i32* %loc, align 4, !dbg !11571
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11572
  call void @c_parser_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %23), !dbg !11573
  %value27 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !11574
  %24 = load %union.tree_node*, %union.tree_node** %value27, align 8, !dbg !11574
  %call28 = call %union.tree_node* @c_finish_goto_ptr(i32 %22, %union.tree_node* %24), !dbg !11575
  store %union.tree_node* %call28, %union.tree_node** %stmt, align 8, !dbg !11576
  br label %if.end, !dbg !11577

if.else29:                                        ; preds = %if.else
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11578
  call void @c_parser_error(%struct.c_parser* %25, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.49, i64 0, i64 0)), !dbg !11579
  br label %if.end

if.end:                                           ; preds = %if.else29, %if.then26
  br label %if.end30

if.end30:                                         ; preds = %if.end, %if.then
  br label %expect_semicolon, !dbg !11580

sw.bb31:                                          ; preds = %sw.bb10
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11581
  call void @c_parser_consume_token(%struct.c_parser* %26), !dbg !11582
  %27 = load i32, i32* %loc, align 4, !dbg !11583
  %call32 = call %union.tree_node* @c_finish_bc_stmt(i32 %27, %union.tree_node** @c_cont_label, i8 zeroext 0), !dbg !11584
  store %union.tree_node* %call32, %union.tree_node** %stmt, align 8, !dbg !11585
  br label %expect_semicolon, !dbg !11586

sw.bb33:                                          ; preds = %sw.bb10
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11587
  call void @c_parser_consume_token(%struct.c_parser* %28), !dbg !11588
  %29 = load i32, i32* %loc, align 4, !dbg !11589
  %call34 = call %union.tree_node* @c_finish_bc_stmt(i32 %29, %union.tree_node** @c_break_label, i8 zeroext 1), !dbg !11590
  store %union.tree_node* %call34, %union.tree_node** %stmt, align 8, !dbg !11591
  br label %expect_semicolon, !dbg !11592

sw.bb35:                                          ; preds = %sw.bb10
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11593
  call void @c_parser_consume_token(%struct.c_parser* %30), !dbg !11594
  %31 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11595
  %call36 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %31, i32 43), !dbg !11597
  %tobool37 = icmp ne i8 %call36, 0, !dbg !11597
  br i1 %tobool37, label %if.then38, label %if.else40, !dbg !11598

if.then38:                                        ; preds = %sw.bb35
  %32 = load i32, i32* %loc, align 4, !dbg !11599
  %call39 = call %union.tree_node* @c_finish_return(i32 %32, %union.tree_node* null, %union.tree_node* null), !dbg !11601
  store %union.tree_node* %call39, %union.tree_node** %stmt, align 8, !dbg !11602
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11603
  call void @c_parser_consume_token(%struct.c_parser* %33), !dbg !11604
  br label %if.end43, !dbg !11605

if.else40:                                        ; preds = %sw.bb35
  call void @llvm.dbg.declare(metadata %struct.c_expr* %expr, metadata !11606, metadata !DIExpression()), !dbg !11608
  %34 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11609
  call void @c_parser_expression_conv(%struct.c_expr* sret %expr, %struct.c_parser* %34), !dbg !11610
  %35 = load i32, i32* %loc, align 4, !dbg !11611
  %value41 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !11612
  %36 = load %union.tree_node*, %union.tree_node** %value41, align 8, !dbg !11612
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 2, !dbg !11613
  %37 = load %union.tree_node*, %union.tree_node** %original_type, align 8, !dbg !11613
  %call42 = call %union.tree_node* @c_finish_return(i32 %35, %union.tree_node* %36, %union.tree_node* %37), !dbg !11614
  store %union.tree_node* %call42, %union.tree_node** %stmt, align 8, !dbg !11615
  br label %expect_semicolon, !dbg !11616

if.end43:                                         ; preds = %if.then38
  br label %sw.epilog, !dbg !11617

sw.bb44:                                          ; preds = %sw.bb10
  %38 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11618
  %call45 = call %union.tree_node* @c_parser_asm_statement(%struct.c_parser* %38), !dbg !11619
  store %union.tree_node* %call45, %union.tree_node** %stmt, align 8, !dbg !11620
  br label %sw.epilog, !dbg !11621

sw.bb46:                                          ; preds = %sw.bb10
  %39 = load i32, i32* @c_language, align 4, !dbg !11622
  %and = and i32 %39, 1, !dbg !11622
  %cmp = icmp ne i32 %and, 0, !dbg !11622
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11622

cond.true:                                        ; preds = %sw.bb46
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3851, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11622
  br label %cond.end, !dbg !11622

cond.false:                                       ; preds = %sw.bb46
  br label %cond.end, !dbg !11622

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11622
  %40 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11623
  call void @c_parser_consume_token(%struct.c_parser* %40), !dbg !11624
  %41 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11625
  %call48 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %41, i32 43), !dbg !11627
  %tobool49 = icmp ne i8 %call48, 0, !dbg !11627
  br i1 %tobool49, label %if.then50, label %if.else52, !dbg !11628

if.then50:                                        ; preds = %cond.end
  %42 = load i32, i32* %loc, align 4, !dbg !11629
  %call51 = call %union.tree_node* @objc_build_throw_stmt(i32 %42, %union.tree_node* null), !dbg !11631
  store %union.tree_node* %call51, %union.tree_node** %stmt, align 8, !dbg !11632
  %43 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11633
  call void @c_parser_consume_token(%struct.c_parser* %43), !dbg !11634
  br label %if.end58, !dbg !11635

if.else52:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr53, metadata !11636, metadata !DIExpression()), !dbg !11638
  %44 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11639
  call void @c_parser_expression(%struct.c_expr* sret %tmp54, %struct.c_parser* %44), !dbg !11640
  %value55 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp54, i32 0, i32 0, !dbg !11641
  %45 = load %union.tree_node*, %union.tree_node** %value55, align 8, !dbg !11641
  store %union.tree_node* %45, %union.tree_node** %expr53, align 8, !dbg !11638
  %46 = load %union.tree_node*, %union.tree_node** %expr53, align 8, !dbg !11642
  %call56 = call %union.tree_node* @c_fully_fold(%union.tree_node* %46, i8 zeroext 0, i8* null), !dbg !11643
  store %union.tree_node* %call56, %union.tree_node** %expr53, align 8, !dbg !11644
  %47 = load i32, i32* %loc, align 4, !dbg !11645
  %48 = load %union.tree_node*, %union.tree_node** %expr53, align 8, !dbg !11646
  %call57 = call %union.tree_node* @objc_build_throw_stmt(i32 %47, %union.tree_node* %48), !dbg !11647
  store %union.tree_node* %call57, %union.tree_node** %stmt, align 8, !dbg !11648
  br label %expect_semicolon, !dbg !11649

if.end58:                                         ; preds = %if.then50
  br label %sw.epilog, !dbg !11650

sw.bb59:                                          ; preds = %sw.bb10
  %49 = load i32, i32* @c_language, align 4, !dbg !11651
  %and60 = and i32 %49, 1, !dbg !11651
  %cmp61 = icmp ne i32 %and60, 0, !dbg !11651
  br i1 %cmp61, label %cond.false64, label %cond.true63, !dbg !11651

cond.true63:                                      ; preds = %sw.bb59
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3867, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11651
  br label %cond.end65, !dbg !11651

cond.false64:                                     ; preds = %sw.bb59
  br label %cond.end65, !dbg !11651

cond.end65:                                       ; preds = %cond.false64, %cond.true63
  %cond66 = phi i32 [ 0, %cond.true63 ], [ 0, %cond.false64 ], !dbg !11651
  %50 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11652
  call void @c_parser_objc_try_catch_statement(%struct.c_parser* %50), !dbg !11653
  br label %sw.epilog, !dbg !11654

sw.bb67:                                          ; preds = %sw.bb10
  %51 = load i32, i32* @c_language, align 4, !dbg !11655
  %and68 = and i32 %51, 1, !dbg !11655
  %cmp69 = icmp ne i32 %and68, 0, !dbg !11655
  br i1 %cmp69, label %cond.false72, label %cond.true71, !dbg !11655

cond.true71:                                      ; preds = %sw.bb67
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3871, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11655
  br label %cond.end73, !dbg !11655

cond.false72:                                     ; preds = %sw.bb67
  br label %cond.end73, !dbg !11655

cond.end73:                                       ; preds = %cond.false72, %cond.true71
  %cond74 = phi i32 [ 0, %cond.true71 ], [ 0, %cond.false72 ], !dbg !11655
  %52 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11656
  call void @c_parser_objc_synchronized_statement(%struct.c_parser* %52), !dbg !11657
  br label %sw.epilog, !dbg !11658

sw.default:                                       ; preds = %sw.bb10
  br label %expr_stmt, !dbg !11659

sw.epilog:                                        ; preds = %cond.end73, %cond.end65, %if.end58, %sw.bb44, %if.end43, %sw.bb19, %sw.bb18, %sw.bb17, %sw.bb16, %sw.bb15
  br label %sw.epilog83, !dbg !11660

sw.bb75:                                          ; preds = %entry
  %53 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11661
  call void @c_parser_consume_token(%struct.c_parser* %53), !dbg !11662
  br label %sw.epilog83, !dbg !11663

sw.bb76:                                          ; preds = %entry, %entry
  %54 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11664
  call void @c_parser_error(%struct.c_parser* %54, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.50, i64 0, i64 0)), !dbg !11665
  %55 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11666
  call void @c_parser_consume_token(%struct.c_parser* %55), !dbg !11667
  br label %sw.epilog83, !dbg !11668

sw.bb77:                                          ; preds = %entry
  %56 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11669
  %call78 = call zeroext i8 @c_parser_pragma(%struct.c_parser* %56, i32 1), !dbg !11670
  br label %sw.epilog83, !dbg !11671

sw.default79:                                     ; preds = %entry
  br label %expr_stmt, !dbg !11671

expr_stmt:                                        ; preds = %sw.default79, %sw.default
  call void @llvm.dbg.label(metadata !11672), !dbg !11673
  %57 = load i32, i32* %loc, align 4, !dbg !11674
  %58 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11675
  call void @c_parser_expression_conv(%struct.c_expr* sret %tmp80, %struct.c_parser* %58), !dbg !11676
  %value81 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp80, i32 0, i32 0, !dbg !11677
  %59 = load %union.tree_node*, %union.tree_node** %value81, align 8, !dbg !11677
  %call82 = call %union.tree_node* @c_finish_expr_stmt(i32 %57, %union.tree_node* %59), !dbg !11678
  store %union.tree_node* %call82, %union.tree_node** %stmt, align 8, !dbg !11679
  br label %expect_semicolon, !dbg !11680

expect_semicolon:                                 ; preds = %expr_stmt, %if.else52, %if.else40, %sw.bb33, %sw.bb31, %if.end30
  call void @llvm.dbg.label(metadata !11681), !dbg !11682
  %60 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11683
  call void @c_parser_skip_until_found(%struct.c_parser* %60, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !11684
  br label %sw.epilog83, !dbg !11685

sw.epilog83:                                      ; preds = %expect_semicolon, %sw.bb77, %sw.bb76, %sw.bb75, %sw.epilog, %sw.bb
  %61 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !11686
  %tobool84 = icmp ne %union.tree_node* %61, null, !dbg !11686
  br i1 %tobool84, label %land.lhs.true, label %if.end126, !dbg !11686

land.lhs.true:                                    ; preds = %sw.epilog83
  %62 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !11686
  %base = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !11686
  %63 = bitcast %struct.tree_base* %base to i64*, !dbg !11686
  %bf.load85 = load i64, i64* %63, align 8, !dbg !11686
  %bf.clear86 = and i64 %bf.load85, 65535, !dbg !11686
  %bf.cast87 = trunc i64 %bf.clear86 to i32, !dbg !11686
  %idxprom = sext i32 %bf.cast87 to i64, !dbg !11686
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !11686
  %64 = load i32, i32* %arrayidx, align 4, !dbg !11686
  %cmp88 = icmp uge i32 %64, 4, !dbg !11686
  br i1 %cmp88, label %land.lhs.true90, label %if.end126, !dbg !11686

land.lhs.true90:                                  ; preds = %land.lhs.true
  %65 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !11686
  %base91 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !11686
  %66 = bitcast %struct.tree_base* %base91 to i64*, !dbg !11686
  %bf.load92 = load i64, i64* %66, align 8, !dbg !11686
  %bf.clear93 = and i64 %bf.load92, 65535, !dbg !11686
  %bf.cast94 = trunc i64 %bf.clear93 to i32, !dbg !11686
  %idxprom95 = sext i32 %bf.cast94 to i64, !dbg !11686
  %arrayidx96 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom95, !dbg !11686
  %67 = load i32, i32* %arrayidx96, align 4, !dbg !11686
  %cmp97 = icmp ule i32 %67, 10, !dbg !11686
  br i1 %cmp97, label %land.lhs.true99, label %if.end126, !dbg !11688

land.lhs.true99:                                  ; preds = %land.lhs.true90
  %68 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !11689
  %base100 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !11689
  %69 = bitcast %struct.tree_base* %base100 to i64*, !dbg !11689
  %bf.load101 = load i64, i64* %69, align 8, !dbg !11689
  %bf.clear102 = and i64 %bf.load101, 65535, !dbg !11689
  %bf.cast103 = trunc i64 %bf.clear102 to i32, !dbg !11689
  %idxprom104 = sext i32 %bf.cast103 to i64, !dbg !11689
  %arrayidx105 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom104, !dbg !11689
  %70 = load i32, i32* %arrayidx105, align 4, !dbg !11689
  %cmp106 = icmp uge i32 %70, 4, !dbg !11689
  br i1 %cmp106, label %land.lhs.true108, label %cond.false118, !dbg !11689

land.lhs.true108:                                 ; preds = %land.lhs.true99
  %71 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !11689
  %base109 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !11689
  %72 = bitcast %struct.tree_base* %base109 to i64*, !dbg !11689
  %bf.load110 = load i64, i64* %72, align 8, !dbg !11689
  %bf.clear111 = and i64 %bf.load110, 65535, !dbg !11689
  %bf.cast112 = trunc i64 %bf.clear111 to i32, !dbg !11689
  %idxprom113 = sext i32 %bf.cast112 to i64, !dbg !11689
  %arrayidx114 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom113, !dbg !11689
  %73 = load i32, i32* %arrayidx114, align 4, !dbg !11689
  %cmp115 = icmp ule i32 %73, 10, !dbg !11689
  br i1 %cmp115, label %cond.true117, label %cond.false118, !dbg !11689

cond.true117:                                     ; preds = %land.lhs.true108
  %74 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !11689
  %exp = bitcast %union.tree_node* %74 to %struct.tree_exp*, !dbg !11689
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !11689
  %75 = load i32, i32* %locus, align 8, !dbg !11689
  br label %cond.end119, !dbg !11689

cond.false118:                                    ; preds = %land.lhs.true108, %land.lhs.true99
  br label %cond.end119, !dbg !11689

cond.end119:                                      ; preds = %cond.false118, %cond.true117
  %cond120 = phi i32 [ %75, %cond.true117 ], [ 0, %cond.false118 ], !dbg !11689
  %cmp121 = icmp eq i32 %cond120, 0, !dbg !11690
  br i1 %cmp121, label %if.then123, label %if.end126, !dbg !11691

if.then123:                                       ; preds = %cond.end119
  %76 = load i32, i32* %loc, align 4, !dbg !11692
  %77 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !11692
  %exp124 = bitcast %union.tree_node* %77 to %struct.tree_exp*, !dbg !11692
  %locus125 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp124, i32 0, i32 1, !dbg !11692
  store i32 %76, i32* %locus125, align 8, !dbg !11692
  br label %if.end126, !dbg !11692

if.end126:                                        ; preds = %if.then123, %cond.end119, %land.lhs.true90, %land.lhs.true, %sw.epilog83
  %78 = load i8, i8* %in_if_block, align 1, !dbg !11693
  %conv127 = zext i8 %78 to i32, !dbg !11693
  %79 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11694
  %in_if_block128 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %79, i32 0, i32 2, !dbg !11695
  %80 = trunc i32 %conv127 to i8, !dbg !11696
  %bf.load129 = load i8, i8* %in_if_block128, align 2, !dbg !11696
  %bf.value = and i8 %80, 1, !dbg !11696
  %bf.shl = shl i8 %bf.value, 2, !dbg !11696
  %bf.clear130 = and i8 %bf.load129, -5, !dbg !11696
  %bf.set = or i8 %bf.clear130, %bf.shl, !dbg !11696
  store i8 %bf.set, i8* %in_if_block128, align 2, !dbg !11696
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !11696
  ret void, !dbg !11697
}

declare dso_local %union.tree_node* @do_case(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @define_label(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @decl_attributes(%union.tree_node**, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_compound_statement(%struct.c_parser* %parser) #0 !dbg !11698 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %stmt = alloca %union.tree_node*, align 8
  %brace_loc = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !11699, metadata !DIExpression()), !dbg !11700
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !11701, metadata !DIExpression()), !dbg !11702
  call void @llvm.dbg.declare(metadata i32* %brace_loc, metadata !11703, metadata !DIExpression()), !dbg !11704
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11705
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !11706
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !11707
  %1 = load i32, i32* %location, align 8, !dbg !11707
  store i32 %1, i32* %brace_loc, align 4, !dbg !11708
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11709
  %call1 = call zeroext i8 @c_parser_require(%struct.c_parser* %2, i32 41, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0)), !dbg !11711
  %tobool = icmp ne i8 %call1, 0, !dbg !11711
  br i1 %tobool, label %if.end, label %if.then, !dbg !11712

if.then:                                          ; preds = %entry
  %call2 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext 1), !dbg !11713
  store %union.tree_node* %call2, %union.tree_node** %stmt, align 8, !dbg !11715
  %3 = load i32, i32* %brace_loc, align 4, !dbg !11716
  %4 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !11717
  %call3 = call %union.tree_node* @c_end_compound_stmt(i32 %3, %union.tree_node* %4, i8 zeroext 1), !dbg !11718
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !11719
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !11720
  br label %return, !dbg !11720

if.end:                                           ; preds = %entry
  %call4 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext 1), !dbg !11721
  store %union.tree_node* %call4, %union.tree_node** %stmt, align 8, !dbg !11722
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11723
  call void @c_parser_compound_statement_nostart(%struct.c_parser* %6), !dbg !11724
  %7 = load i32, i32* %brace_loc, align 4, !dbg !11725
  %8 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !11726
  %call5 = call %union.tree_node* @c_end_compound_stmt(i32 %7, %union.tree_node* %8, i8 zeroext 1), !dbg !11727
  store %union.tree_node* %call5, %union.tree_node** %retval, align 8, !dbg !11728
  br label %return, !dbg !11728

return:                                           ; preds = %if.end, %if.then
  %9 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !11729
  ret %union.tree_node* %9, !dbg !11729
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_if_statement(%struct.c_parser* %parser) #0 !dbg !11730 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %block = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %cond = alloca %union.tree_node*, align 8
  %first_if = alloca i8, align 1
  %first_body = alloca %union.tree_node*, align 8
  %second_body = alloca %union.tree_node*, align 8
  %in_if_block = alloca i8, align 1
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !11731, metadata !DIExpression()), !dbg !11732
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !11733, metadata !DIExpression()), !dbg !11734
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !11735, metadata !DIExpression()), !dbg !11736
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !11737, metadata !DIExpression()), !dbg !11738
  call void @llvm.dbg.declare(metadata i8* %first_if, metadata !11739, metadata !DIExpression()), !dbg !11740
  store i8 0, i8* %first_if, align 1, !dbg !11740
  call void @llvm.dbg.declare(metadata %union.tree_node** %first_body, metadata !11741, metadata !DIExpression()), !dbg !11742
  call void @llvm.dbg.declare(metadata %union.tree_node** %second_body, metadata !11743, metadata !DIExpression()), !dbg !11744
  call void @llvm.dbg.declare(metadata i8* %in_if_block, metadata !11745, metadata !DIExpression()), !dbg !11746
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11747
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 36), !dbg !11747
  %tobool = icmp ne i8 %call, 0, !dbg !11747
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11747

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4039, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11747
  br label %cond.end, !dbg !11747

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11747

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11747
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11748
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !11749
  %2 = load i32, i32* @flag_isoc99, align 4, !dbg !11750
  %conv = trunc i32 %2 to i8, !dbg !11750
  %call2 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext %conv), !dbg !11751
  store %union.tree_node* %call2, %union.tree_node** %block, align 8, !dbg !11752
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11753
  %call3 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !11754
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call3, i32 0, i32 2, !dbg !11755
  %4 = load i32, i32* %location, align 8, !dbg !11755
  store i32 %4, i32* %loc, align 4, !dbg !11756
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11757
  %call4 = call %union.tree_node* @c_parser_paren_condition(%struct.c_parser* %5), !dbg !11758
  store %union.tree_node* %call4, %union.tree_node** %cond, align 8, !dbg !11759
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11760
  %in_if_block5 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %6, i32 0, i32 2, !dbg !11761
  %bf.load = load i8, i8* %in_if_block5, align 2, !dbg !11761
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !11761
  %bf.clear = and i8 %bf.lshr, 1, !dbg !11761
  %bf.cast = zext i8 %bf.clear to i32, !dbg !11761
  %conv6 = trunc i32 %bf.cast to i8, !dbg !11760
  store i8 %conv6, i8* %in_if_block, align 1, !dbg !11762
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11763
  %in_if_block7 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %7, i32 0, i32 2, !dbg !11764
  %bf.load8 = load i8, i8* %in_if_block7, align 2, !dbg !11765
  %bf.clear9 = and i8 %bf.load8, -5, !dbg !11765
  %bf.set = or i8 %bf.clear9, 4, !dbg !11765
  store i8 %bf.set, i8* %in_if_block7, align 2, !dbg !11765
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11766
  %call10 = call %union.tree_node* @c_parser_if_body(%struct.c_parser* %8, i8* %first_if), !dbg !11767
  store %union.tree_node* %call10, %union.tree_node** %first_body, align 8, !dbg !11768
  %9 = load i8, i8* %in_if_block, align 1, !dbg !11769
  %conv11 = zext i8 %9 to i32, !dbg !11769
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11770
  %in_if_block12 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %10, i32 0, i32 2, !dbg !11771
  %11 = trunc i32 %conv11 to i8, !dbg !11772
  %bf.load13 = load i8, i8* %in_if_block12, align 2, !dbg !11772
  %bf.value = and i8 %11, 1, !dbg !11772
  %bf.shl = shl i8 %bf.value, 2, !dbg !11772
  %bf.clear14 = and i8 %bf.load13, -5, !dbg !11772
  %bf.set15 = or i8 %bf.clear14, %bf.shl, !dbg !11772
  store i8 %bf.set15, i8* %in_if_block12, align 2, !dbg !11772
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !11772
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11773
  %call16 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %12, i32 37), !dbg !11775
  %tobool17 = icmp ne i8 %call16, 0, !dbg !11775
  br i1 %tobool17, label %if.then, label %if.else, !dbg !11776

if.then:                                          ; preds = %cond.end
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11777
  call void @c_parser_consume_token(%struct.c_parser* %13), !dbg !11779
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11780
  %call18 = call %union.tree_node* @c_parser_else_body(%struct.c_parser* %14), !dbg !11781
  store %union.tree_node* %call18, %union.tree_node** %second_body, align 8, !dbg !11782
  br label %if.end, !dbg !11783

if.else:                                          ; preds = %cond.end
  store %union.tree_node* null, %union.tree_node** %second_body, align 8, !dbg !11784
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load i32, i32* %loc, align 4, !dbg !11785
  %16 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !11786
  %17 = load %union.tree_node*, %union.tree_node** %first_body, align 8, !dbg !11787
  %18 = load %union.tree_node*, %union.tree_node** %second_body, align 8, !dbg !11788
  %19 = load i8, i8* %first_if, align 1, !dbg !11789
  call void @c_finish_if_stmt(i32 %15, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18, i8 zeroext %19), !dbg !11790
  %20 = load i32, i32* %loc, align 4, !dbg !11791
  %21 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !11792
  %22 = load i32, i32* @flag_isoc99, align 4, !dbg !11793
  %conv19 = trunc i32 %22 to i8, !dbg !11793
  %call20 = call %union.tree_node* @c_end_compound_stmt(i32 %20, %union.tree_node* %21, i8 zeroext %conv19), !dbg !11794
  %call21 = call %union.tree_node* @add_stmt(%union.tree_node* %call20), !dbg !11795
  ret void, !dbg !11796
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_switch_statement(%struct.c_parser* %parser) #0 !dbg !11797 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %block = alloca %union.tree_node*, align 8
  %expr = alloca %union.tree_node*, align 8
  %body = alloca %union.tree_node*, align 8
  %save_break = alloca %union.tree_node*, align 8
  %switch_loc = alloca i32, align 4
  %switch_cond_loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %here = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !11798, metadata !DIExpression()), !dbg !11799
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !11800, metadata !DIExpression()), !dbg !11801
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !11802, metadata !DIExpression()), !dbg !11803
  call void @llvm.dbg.declare(metadata %union.tree_node** %body, metadata !11804, metadata !DIExpression()), !dbg !11805
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_break, metadata !11806, metadata !DIExpression()), !dbg !11807
  call void @llvm.dbg.declare(metadata i32* %switch_loc, metadata !11808, metadata !DIExpression()), !dbg !11809
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11810
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !11811
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !11812
  %1 = load i32, i32* %location, align 8, !dbg !11812
  store i32 %1, i32* %switch_loc, align 4, !dbg !11809
  call void @llvm.dbg.declare(metadata i32* %switch_cond_loc, metadata !11813, metadata !DIExpression()), !dbg !11814
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11815
  %call1 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %2, i32 41), !dbg !11815
  %tobool = icmp ne i8 %call1, 0, !dbg !11815
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11815

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4071, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11815
  br label %cond.end, !dbg !11815

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11815

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11815
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11816
  call void @c_parser_consume_token(%struct.c_parser* %3), !dbg !11817
  %4 = load i32, i32* @flag_isoc99, align 4, !dbg !11818
  %conv = trunc i32 %4 to i8, !dbg !11818
  %call2 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext %conv), !dbg !11819
  store %union.tree_node* %call2, %union.tree_node** %block, align 8, !dbg !11820
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11821
  %call3 = call zeroext i8 @c_parser_require(%struct.c_parser* %5, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !11823
  %tobool4 = icmp ne i8 %call3, 0, !dbg !11823
  br i1 %tobool4, label %if.then, label %if.else, !dbg !11824

if.then:                                          ; preds = %cond.end
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11825
  %call5 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %6), !dbg !11827
  %location6 = getelementptr inbounds %struct.c_token, %struct.c_token* %call5, i32 0, i32 2, !dbg !11828
  %7 = load i32, i32* %location6, align 8, !dbg !11828
  store i32 %7, i32* %switch_cond_loc, align 4, !dbg !11829
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11830
  call void @c_parser_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %8), !dbg !11831
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !11832
  %9 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !11832
  store %union.tree_node* %9, %union.tree_node** %expr, align 8, !dbg !11833
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11834
  call void @c_parser_skip_until_found(%struct.c_parser* %10, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !11835
  br label %if.end, !dbg !11836

if.else:                                          ; preds = %cond.end
  store i32 0, i32* %switch_cond_loc, align 4, !dbg !11837
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !11839
  store %union.tree_node* %11, %union.tree_node** %expr, align 8, !dbg !11840
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load i32, i32* %switch_loc, align 4, !dbg !11841
  %13 = load i32, i32* %switch_cond_loc, align 4, !dbg !11842
  %14 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !11843
  %call7 = call %union.tree_node* @c_start_case(i32 %12, i32 %13, %union.tree_node* %14), !dbg !11844
  %15 = load %union.tree_node*, %union.tree_node** @c_break_label, align 8, !dbg !11845
  store %union.tree_node* %15, %union.tree_node** %save_break, align 8, !dbg !11846
  store %union.tree_node* null, %union.tree_node** @c_break_label, align 8, !dbg !11847
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11848
  %call8 = call %union.tree_node* @c_parser_c99_block_statement(%struct.c_parser* %16), !dbg !11849
  store %union.tree_node* %call8, %union.tree_node** %body, align 8, !dbg !11850
  %17 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !11851
  call void @c_finish_case(%union.tree_node* %17), !dbg !11852
  %18 = load %union.tree_node*, %union.tree_node** @c_break_label, align 8, !dbg !11853
  %tobool9 = icmp ne %union.tree_node* %18, null, !dbg !11853
  br i1 %tobool9, label %if.then10, label %if.end15, !dbg !11855

if.then10:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %here, metadata !11856, metadata !DIExpression()), !dbg !11858
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11859
  %call11 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %19), !dbg !11860
  %location12 = getelementptr inbounds %struct.c_token, %struct.c_token* %call11, i32 0, i32 2, !dbg !11861
  %20 = load i32, i32* %location12, align 8, !dbg !11861
  store i32 %20, i32* %here, align 4, !dbg !11858
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !11862, metadata !DIExpression()), !dbg !11863
  %21 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !11864
  %22 = load %union.tree_node*, %union.tree_node** @c_break_label, align 8, !dbg !11864
  %call13 = call %union.tree_node* @build1_stat(i32 133, %union.tree_node* %21, %union.tree_node* %22), !dbg !11864
  store %union.tree_node* %call13, %union.tree_node** %t, align 8, !dbg !11863
  %23 = load i32, i32* %here, align 4, !dbg !11865
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !11865
  %exp = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !11865
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !11865
  store i32 %23, i32* %locus, align 8, !dbg !11865
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !11866
  %call14 = call %union.tree_node* @add_stmt(%union.tree_node* %25), !dbg !11867
  br label %if.end15, !dbg !11868

if.end15:                                         ; preds = %if.then10, %if.end
  %26 = load %union.tree_node*, %union.tree_node** %save_break, align 8, !dbg !11869
  store %union.tree_node* %26, %union.tree_node** @c_break_label, align 8, !dbg !11870
  %27 = load i32, i32* %switch_loc, align 4, !dbg !11871
  %28 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !11872
  %29 = load i32, i32* @flag_isoc99, align 4, !dbg !11873
  %conv16 = trunc i32 %29 to i8, !dbg !11873
  %call17 = call %union.tree_node* @c_end_compound_stmt(i32 %27, %union.tree_node* %28, i8 zeroext %conv16), !dbg !11874
  %call18 = call %union.tree_node* @add_stmt(%union.tree_node* %call17), !dbg !11875
  ret void, !dbg !11876
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_while_statement(%struct.c_parser* %parser) #0 !dbg !11877 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %block = alloca %union.tree_node*, align 8
  %cond = alloca %union.tree_node*, align 8
  %body = alloca %union.tree_node*, align 8
  %save_break = alloca %union.tree_node*, align 8
  %save_cont = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !11878, metadata !DIExpression()), !dbg !11879
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !11880, metadata !DIExpression()), !dbg !11881
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !11882, metadata !DIExpression()), !dbg !11883
  call void @llvm.dbg.declare(metadata %union.tree_node** %body, metadata !11884, metadata !DIExpression()), !dbg !11885
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_break, metadata !11886, metadata !DIExpression()), !dbg !11887
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_cont, metadata !11888, metadata !DIExpression()), !dbg !11889
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !11890, metadata !DIExpression()), !dbg !11891
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11892
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 38), !dbg !11892
  %tobool = icmp ne i8 %call, 0, !dbg !11892
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11892

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4112, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11892
  br label %cond.end, !dbg !11892

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11892

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11892
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11893
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !11894
  %2 = load i32, i32* @flag_isoc99, align 4, !dbg !11895
  %conv = trunc i32 %2 to i8, !dbg !11895
  %call2 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext %conv), !dbg !11896
  store %union.tree_node* %call2, %union.tree_node** %block, align 8, !dbg !11897
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11898
  %call3 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !11899
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call3, i32 0, i32 2, !dbg !11900
  %4 = load i32, i32* %location, align 8, !dbg !11900
  store i32 %4, i32* %loc, align 4, !dbg !11901
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11902
  %call4 = call %union.tree_node* @c_parser_paren_condition(%struct.c_parser* %5), !dbg !11903
  store %union.tree_node* %call4, %union.tree_node** %cond, align 8, !dbg !11904
  %6 = load %union.tree_node*, %union.tree_node** @c_break_label, align 8, !dbg !11905
  store %union.tree_node* %6, %union.tree_node** %save_break, align 8, !dbg !11906
  store %union.tree_node* null, %union.tree_node** @c_break_label, align 8, !dbg !11907
  %7 = load %union.tree_node*, %union.tree_node** @c_cont_label, align 8, !dbg !11908
  store %union.tree_node* %7, %union.tree_node** %save_cont, align 8, !dbg !11909
  store %union.tree_node* null, %union.tree_node** @c_cont_label, align 8, !dbg !11910
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11911
  %call5 = call %union.tree_node* @c_parser_c99_block_statement(%struct.c_parser* %8), !dbg !11912
  store %union.tree_node* %call5, %union.tree_node** %body, align 8, !dbg !11913
  %9 = load i32, i32* %loc, align 4, !dbg !11914
  %10 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !11915
  %11 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !11916
  %12 = load %union.tree_node*, %union.tree_node** @c_break_label, align 8, !dbg !11917
  %13 = load %union.tree_node*, %union.tree_node** @c_cont_label, align 8, !dbg !11918
  call void @c_finish_loop(i32 %9, %union.tree_node* %10, %union.tree_node* null, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13, i8 zeroext 1), !dbg !11919
  %14 = load i32, i32* %loc, align 4, !dbg !11920
  %15 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !11921
  %16 = load i32, i32* @flag_isoc99, align 4, !dbg !11922
  %conv6 = trunc i32 %16 to i8, !dbg !11922
  %call7 = call %union.tree_node* @c_end_compound_stmt(i32 %14, %union.tree_node* %15, i8 zeroext %conv6), !dbg !11923
  %call8 = call %union.tree_node* @add_stmt(%union.tree_node* %call7), !dbg !11924
  %17 = load %union.tree_node*, %union.tree_node** %save_break, align 8, !dbg !11925
  store %union.tree_node* %17, %union.tree_node** @c_break_label, align 8, !dbg !11926
  %18 = load %union.tree_node*, %union.tree_node** %save_cont, align 8, !dbg !11927
  store %union.tree_node* %18, %union.tree_node** @c_cont_label, align 8, !dbg !11928
  ret void, !dbg !11929
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_do_statement(%struct.c_parser* %parser) #0 !dbg !11930 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %block = alloca %union.tree_node*, align 8
  %cond = alloca %union.tree_node*, align 8
  %body = alloca %union.tree_node*, align 8
  %save_break = alloca %union.tree_node*, align 8
  %save_cont = alloca %union.tree_node*, align 8
  %new_break = alloca %union.tree_node*, align 8
  %new_cont = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !11931, metadata !DIExpression()), !dbg !11932
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !11933, metadata !DIExpression()), !dbg !11934
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !11935, metadata !DIExpression()), !dbg !11936
  call void @llvm.dbg.declare(metadata %union.tree_node** %body, metadata !11937, metadata !DIExpression()), !dbg !11938
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_break, metadata !11939, metadata !DIExpression()), !dbg !11940
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_cont, metadata !11941, metadata !DIExpression()), !dbg !11942
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_break, metadata !11943, metadata !DIExpression()), !dbg !11944
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_cont, metadata !11945, metadata !DIExpression()), !dbg !11946
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !11947, metadata !DIExpression()), !dbg !11948
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11949
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 39), !dbg !11949
  %tobool = icmp ne i8 %call, 0, !dbg !11949
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11949

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4139, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11949
  br label %cond.end, !dbg !11949

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11949

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11949
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11950
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !11951
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11952
  %call2 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %2, i32 43), !dbg !11954
  %tobool3 = icmp ne i8 %call2, 0, !dbg !11954
  br i1 %tobool3, label %if.then, label %if.end, !dbg !11955

if.then:                                          ; preds = %cond.end
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11956
  %call4 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !11957
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call4, i32 0, i32 2, !dbg !11958
  %4 = load i32, i32* %location, align 8, !dbg !11958
  %call5 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %4, i32 74, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.53, i64 0, i64 0)), !dbg !11959
  br label %if.end, !dbg !11959

if.end:                                           ; preds = %if.then, %cond.end
  %5 = load i32, i32* @flag_isoc99, align 4, !dbg !11960
  %conv = trunc i32 %5 to i8, !dbg !11960
  %call6 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext %conv), !dbg !11961
  store %union.tree_node* %call6, %union.tree_node** %block, align 8, !dbg !11962
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11963
  %call7 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %6), !dbg !11964
  %location8 = getelementptr inbounds %struct.c_token, %struct.c_token* %call7, i32 0, i32 2, !dbg !11965
  %7 = load i32, i32* %location8, align 8, !dbg !11965
  store i32 %7, i32* %loc, align 4, !dbg !11966
  %8 = load %union.tree_node*, %union.tree_node** @c_break_label, align 8, !dbg !11967
  store %union.tree_node* %8, %union.tree_node** %save_break, align 8, !dbg !11968
  store %union.tree_node* null, %union.tree_node** @c_break_label, align 8, !dbg !11969
  %9 = load %union.tree_node*, %union.tree_node** @c_cont_label, align 8, !dbg !11970
  store %union.tree_node* %9, %union.tree_node** %save_cont, align 8, !dbg !11971
  store %union.tree_node* null, %union.tree_node** @c_cont_label, align 8, !dbg !11972
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11973
  %call9 = call %union.tree_node* @c_parser_c99_block_statement(%struct.c_parser* %10), !dbg !11974
  store %union.tree_node* %call9, %union.tree_node** %body, align 8, !dbg !11975
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11976
  %call10 = call zeroext i8 @c_parser_require_keyword(%struct.c_parser* %11, i32 38, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.54, i64 0, i64 0)), !dbg !11977
  %12 = load %union.tree_node*, %union.tree_node** @c_break_label, align 8, !dbg !11978
  store %union.tree_node* %12, %union.tree_node** %new_break, align 8, !dbg !11979
  %13 = load %union.tree_node*, %union.tree_node** %save_break, align 8, !dbg !11980
  store %union.tree_node* %13, %union.tree_node** @c_break_label, align 8, !dbg !11981
  %14 = load %union.tree_node*, %union.tree_node** @c_cont_label, align 8, !dbg !11982
  store %union.tree_node* %14, %union.tree_node** %new_cont, align 8, !dbg !11983
  %15 = load %union.tree_node*, %union.tree_node** %save_cont, align 8, !dbg !11984
  store %union.tree_node* %15, %union.tree_node** @c_cont_label, align 8, !dbg !11985
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11986
  %call11 = call %union.tree_node* @c_parser_paren_condition(%struct.c_parser* %16), !dbg !11987
  store %union.tree_node* %call11, %union.tree_node** %cond, align 8, !dbg !11988
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11989
  %call12 = call zeroext i8 @c_parser_require(%struct.c_parser* %17, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !11991
  %tobool13 = icmp ne i8 %call12, 0, !dbg !11991
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !11992

if.then14:                                        ; preds = %if.end
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !11993
  call void @c_parser_skip_to_end_of_block_or_statement(%struct.c_parser* %18), !dbg !11994
  br label %if.end15, !dbg !11994

if.end15:                                         ; preds = %if.then14, %if.end
  %19 = load i32, i32* %loc, align 4, !dbg !11995
  %20 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !11996
  %21 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !11997
  %22 = load %union.tree_node*, %union.tree_node** %new_break, align 8, !dbg !11998
  %23 = load %union.tree_node*, %union.tree_node** %new_cont, align 8, !dbg !11999
  call void @c_finish_loop(i32 %19, %union.tree_node* %20, %union.tree_node* null, %union.tree_node* %21, %union.tree_node* %22, %union.tree_node* %23, i8 zeroext 0), !dbg !12000
  %24 = load i32, i32* %loc, align 4, !dbg !12001
  %25 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !12002
  %26 = load i32, i32* @flag_isoc99, align 4, !dbg !12003
  %conv16 = trunc i32 %26 to i8, !dbg !12003
  %call17 = call %union.tree_node* @c_end_compound_stmt(i32 %24, %union.tree_node* %25, i8 zeroext %conv16), !dbg !12004
  %call18 = call %union.tree_node* @add_stmt(%union.tree_node* %call17), !dbg !12005
  ret void, !dbg !12006
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_for_statement(%struct.c_parser* %parser) #0 !dbg !12007 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %block = alloca %union.tree_node*, align 8
  %cond = alloca %union.tree_node*, align 8
  %incr = alloca %union.tree_node*, align 8
  %save_break = alloca %union.tree_node*, align 8
  %save_cont = alloca %union.tree_node*, align 8
  %body = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %for_loc = alloca i32, align 4
  %ext = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %tmp50 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12008, metadata !DIExpression()), !dbg !12009
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !12010, metadata !DIExpression()), !dbg !12011
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !12012, metadata !DIExpression()), !dbg !12013
  call void @llvm.dbg.declare(metadata %union.tree_node** %incr, metadata !12014, metadata !DIExpression()), !dbg !12015
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_break, metadata !12016, metadata !DIExpression()), !dbg !12017
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_cont, metadata !12018, metadata !DIExpression()), !dbg !12019
  call void @llvm.dbg.declare(metadata %union.tree_node** %body, metadata !12020, metadata !DIExpression()), !dbg !12021
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !12022, metadata !DIExpression()), !dbg !12023
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12024
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !12025
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !12026
  %1 = load i32, i32* %location, align 8, !dbg !12026
  store i32 %1, i32* %loc, align 4, !dbg !12023
  call void @llvm.dbg.declare(metadata i32* %for_loc, metadata !12027, metadata !DIExpression()), !dbg !12028
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12029
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !12030
  %location2 = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !12031
  %3 = load i32, i32* %location2, align 8, !dbg !12031
  store i32 %3, i32* %for_loc, align 4, !dbg !12028
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12032
  %call3 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %4, i32 40), !dbg !12032
  %tobool = icmp ne i8 %call3, 0, !dbg !12032
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !12032

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4186, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12032
  br label %cond.end, !dbg !12032

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12032

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12032
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12033
  call void @c_parser_consume_token(%struct.c_parser* %5), !dbg !12034
  %6 = load i32, i32* @flag_isoc99, align 4, !dbg !12035
  %conv = trunc i32 %6 to i8, !dbg !12035
  %call5 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext %conv), !dbg !12036
  store %union.tree_node* %call5, %union.tree_node** %block, align 8, !dbg !12037
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12038
  %call6 = call zeroext i8 @c_parser_require(%struct.c_parser* %7, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !12040
  %tobool7 = icmp ne i8 %call6, 0, !dbg !12040
  br i1 %tobool7, label %if.then, label %if.else54, !dbg !12041

if.then:                                          ; preds = %cond.end
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12042
  %call8 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %8, i32 43), !dbg !12045
  %tobool9 = icmp ne i8 %call8, 0, !dbg !12045
  br i1 %tobool9, label %if.then10, label %if.else, !dbg !12046

if.then10:                                        ; preds = %if.then
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12047
  call void @c_parser_consume_token(%struct.c_parser* %9), !dbg !12049
  %10 = load i32, i32* %loc, align 4, !dbg !12050
  %call11 = call %union.tree_node* @c_finish_expr_stmt(i32 %10, %union.tree_node* null), !dbg !12051
  br label %if.end38, !dbg !12052

if.else:                                          ; preds = %if.then
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12053
  %call12 = call zeroext i8 @c_parser_next_token_starts_declspecs(%struct.c_parser* %11), !dbg !12055
  %tobool13 = icmp ne i8 %call12, 0, !dbg !12055
  br i1 %tobool13, label %if.then14, label %if.else16, !dbg !12056

if.then14:                                        ; preds = %if.else
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12057
  call void @c_parser_declaration_or_fndef(%struct.c_parser* %12, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1), !dbg !12059
  %13 = load i32, i32* %for_loc, align 4, !dbg !12060
  %call15 = call %union.tree_node* @check_for_loop_decls(i32 %13), !dbg !12061
  br label %if.end37, !dbg !12062

if.else16:                                        ; preds = %if.else
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12063
  %call17 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %14, i32 54), !dbg !12065
  %tobool18 = icmp ne i8 %call17, 0, !dbg !12065
  br i1 %tobool18, label %if.then19, label %if.else34, !dbg !12066

if.then19:                                        ; preds = %if.else16
  br label %while.cond, !dbg !12067

while.cond:                                       ; preds = %while.body, %if.then19
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12069
  %call20 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %15), !dbg !12070
  %16 = bitcast %struct.c_token* %call20 to i32*, !dbg !12071
  %bf.load = load i32, i32* %16, align 8, !dbg !12071
  %bf.clear = and i32 %bf.load, 255, !dbg !12071
  %cmp = icmp eq i32 %bf.clear, 74, !dbg !12072
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !12073

land.rhs:                                         ; preds = %while.cond
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12074
  %call22 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %17), !dbg !12075
  %18 = bitcast %struct.c_token* %call22 to i32*, !dbg !12076
  %bf.load23 = load i32, i32* %18, align 8, !dbg !12076
  %bf.lshr = lshr i32 %bf.load23, 16, !dbg !12076
  %bf.clear24 = and i32 %bf.lshr, 255, !dbg !12076
  %cmp25 = icmp eq i32 %bf.clear24, 54, !dbg !12077
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %19 = phi i1 [ false, %while.cond ], [ %cmp25, %land.rhs ], !dbg !12078
  br i1 %19, label %while.body, label %while.end, !dbg !12067

while.body:                                       ; preds = %land.end
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12079
  call void @c_parser_consume_token(%struct.c_parser* %20), !dbg !12080
  br label %while.cond, !dbg !12067, !llvm.loop !12081

while.end:                                        ; preds = %land.end
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12083
  %call27 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %21), !dbg !12085
  %call28 = call zeroext i8 @c_token_starts_declspecs(%struct.c_token* %call27), !dbg !12086
  %tobool29 = icmp ne i8 %call28, 0, !dbg !12086
  br i1 %tobool29, label %if.then30, label %if.else33, !dbg !12087

if.then30:                                        ; preds = %while.end
  call void @llvm.dbg.declare(metadata i32* %ext, metadata !12088, metadata !DIExpression()), !dbg !12090
  %call31 = call i32 @disable_extension_diagnostics(), !dbg !12091
  store i32 %call31, i32* %ext, align 4, !dbg !12092
  %22 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12093
  call void @c_parser_consume_token(%struct.c_parser* %22), !dbg !12094
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12095
  call void @c_parser_declaration_or_fndef(%struct.c_parser* %23, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1), !dbg !12096
  %24 = load i32, i32* %ext, align 4, !dbg !12097
  call void @restore_extension_diagnostics(i32 %24), !dbg !12098
  %25 = load i32, i32* %for_loc, align 4, !dbg !12099
  %call32 = call %union.tree_node* @check_for_loop_decls(i32 %25), !dbg !12100
  br label %if.end, !dbg !12101

if.else33:                                        ; preds = %while.end
  br label %init_expr, !dbg !12102

if.end:                                           ; preds = %if.then30
  br label %if.end36, !dbg !12103

if.else34:                                        ; preds = %if.else16
  br label %init_expr, !dbg !12104

init_expr:                                        ; preds = %if.else34, %if.else33
  call void @llvm.dbg.label(metadata !12105), !dbg !12107
  %26 = load i32, i32* %loc, align 4, !dbg !12108
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12109
  call void @c_parser_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %27), !dbg !12110
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !12111
  %28 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !12111
  %call35 = call %union.tree_node* @c_finish_expr_stmt(i32 %26, %union.tree_node* %28), !dbg !12112
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12113
  call void @c_parser_skip_until_found(%struct.c_parser* %29, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !12114
  br label %if.end36

if.end36:                                         ; preds = %init_expr, %if.end
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then14
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then10
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12115
  %call39 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %30, i32 43), !dbg !12117
  %tobool40 = icmp ne i8 %call39, 0, !dbg !12117
  br i1 %tobool40, label %if.then41, label %if.else42, !dbg !12118

if.then41:                                        ; preds = %if.end38
  %31 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12119
  call void @c_parser_consume_token(%struct.c_parser* %31), !dbg !12121
  store %union.tree_node* null, %union.tree_node** %cond, align 8, !dbg !12122
  br label %if.end44, !dbg !12123

if.else42:                                        ; preds = %if.end38
  %32 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12124
  %call43 = call %union.tree_node* @c_parser_condition(%struct.c_parser* %32), !dbg !12126
  store %union.tree_node* %call43, %union.tree_node** %cond, align 8, !dbg !12127
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12128
  call void @c_parser_skip_until_found(%struct.c_parser* %33, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !12129
  br label %if.end44

if.end44:                                         ; preds = %if.else42, %if.then41
  %34 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12130
  %call45 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %34, i32 21), !dbg !12132
  %tobool46 = icmp ne i8 %call45, 0, !dbg !12132
  br i1 %tobool46, label %if.then47, label %if.else49, !dbg !12133

if.then47:                                        ; preds = %if.end44
  %35 = load i32, i32* %loc, align 4, !dbg !12134
  %call48 = call %union.tree_node* @c_process_expr_stmt(i32 %35, %union.tree_node* null), !dbg !12135
  store %union.tree_node* %call48, %union.tree_node** %incr, align 8, !dbg !12136
  br label %if.end53, !dbg !12137

if.else49:                                        ; preds = %if.end44
  %36 = load i32, i32* %loc, align 4, !dbg !12138
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12139
  call void @c_parser_expression(%struct.c_expr* sret %tmp50, %struct.c_parser* %37), !dbg !12140
  %value51 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp50, i32 0, i32 0, !dbg !12141
  %38 = load %union.tree_node*, %union.tree_node** %value51, align 8, !dbg !12141
  %call52 = call %union.tree_node* @c_process_expr_stmt(i32 %36, %union.tree_node* %38), !dbg !12142
  store %union.tree_node* %call52, %union.tree_node** %incr, align 8, !dbg !12143
  br label %if.end53

if.end53:                                         ; preds = %if.else49, %if.then47
  %39 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12144
  call void @c_parser_skip_until_found(%struct.c_parser* %39, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !12145
  br label %if.end55, !dbg !12146

if.else54:                                        ; preds = %cond.end
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !12147
  store %union.tree_node* %40, %union.tree_node** %cond, align 8, !dbg !12149
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !12150
  store %union.tree_node* %41, %union.tree_node** %incr, align 8, !dbg !12151
  br label %if.end55

if.end55:                                         ; preds = %if.else54, %if.end53
  %42 = load %union.tree_node*, %union.tree_node** @c_break_label, align 8, !dbg !12152
  store %union.tree_node* %42, %union.tree_node** %save_break, align 8, !dbg !12153
  store %union.tree_node* null, %union.tree_node** @c_break_label, align 8, !dbg !12154
  %43 = load %union.tree_node*, %union.tree_node** @c_cont_label, align 8, !dbg !12155
  store %union.tree_node* %43, %union.tree_node** %save_cont, align 8, !dbg !12156
  store %union.tree_node* null, %union.tree_node** @c_cont_label, align 8, !dbg !12157
  %44 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12158
  %call56 = call %union.tree_node* @c_parser_c99_block_statement(%struct.c_parser* %44), !dbg !12159
  store %union.tree_node* %call56, %union.tree_node** %body, align 8, !dbg !12160
  %45 = load i32, i32* %loc, align 4, !dbg !12161
  %46 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !12162
  %47 = load %union.tree_node*, %union.tree_node** %incr, align 8, !dbg !12163
  %48 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !12164
  %49 = load %union.tree_node*, %union.tree_node** @c_break_label, align 8, !dbg !12165
  %50 = load %union.tree_node*, %union.tree_node** @c_cont_label, align 8, !dbg !12166
  call void @c_finish_loop(i32 %45, %union.tree_node* %46, %union.tree_node* %47, %union.tree_node* %48, %union.tree_node* %49, %union.tree_node* %50, i8 zeroext 1), !dbg !12167
  %51 = load i32, i32* %loc, align 4, !dbg !12168
  %52 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !12169
  %53 = load i32, i32* @flag_isoc99, align 4, !dbg !12170
  %conv57 = trunc i32 %53 to i8, !dbg !12170
  %call58 = call %union.tree_node* @c_end_compound_stmt(i32 %51, %union.tree_node* %52, i8 zeroext %conv57), !dbg !12171
  %call59 = call %union.tree_node* @add_stmt(%union.tree_node* %call58), !dbg !12172
  %54 = load %union.tree_node*, %union.tree_node** %save_break, align 8, !dbg !12173
  store %union.tree_node* %54, %union.tree_node** @c_break_label, align 8, !dbg !12174
  %55 = load %union.tree_node*, %union.tree_node** %save_cont, align 8, !dbg !12175
  store %union.tree_node* %55, %union.tree_node** @c_cont_label, align 8, !dbg !12176
  ret void, !dbg !12177
}

declare dso_local %union.tree_node* @c_finish_goto_label(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @c_finish_goto_ptr(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @c_finish_bc_stmt(i32, %union.tree_node**, i8 zeroext) #2

declare dso_local %union.tree_node* @c_finish_return(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_asm_statement(%struct.c_parser* %parser) #0 !dbg !12178 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %quals = alloca %union.tree_node*, align 8
  %str = alloca %union.tree_node*, align 8
  %outputs = alloca %union.tree_node*, align 8
  %inputs = alloca %union.tree_node*, align 8
  %clobbers = alloca %union.tree_node*, align 8
  %labels = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  %simple = alloca i8, align 1
  %is_goto = alloca i8, align 1
  %asm_loc = alloca i32, align 4
  %section = alloca i32, align 4
  %nsections = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12179, metadata !DIExpression()), !dbg !12180
  call void @llvm.dbg.declare(metadata %union.tree_node** %quals, metadata !12181, metadata !DIExpression()), !dbg !12182
  call void @llvm.dbg.declare(metadata %union.tree_node** %str, metadata !12183, metadata !DIExpression()), !dbg !12184
  call void @llvm.dbg.declare(metadata %union.tree_node** %outputs, metadata !12185, metadata !DIExpression()), !dbg !12186
  call void @llvm.dbg.declare(metadata %union.tree_node** %inputs, metadata !12187, metadata !DIExpression()), !dbg !12188
  call void @llvm.dbg.declare(metadata %union.tree_node** %clobbers, metadata !12189, metadata !DIExpression()), !dbg !12190
  call void @llvm.dbg.declare(metadata %union.tree_node** %labels, metadata !12191, metadata !DIExpression()), !dbg !12192
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !12193, metadata !DIExpression()), !dbg !12194
  call void @llvm.dbg.declare(metadata i8* %simple, metadata !12195, metadata !DIExpression()), !dbg !12196
  call void @llvm.dbg.declare(metadata i8* %is_goto, metadata !12197, metadata !DIExpression()), !dbg !12198
  call void @llvm.dbg.declare(metadata i32* %asm_loc, metadata !12199, metadata !DIExpression()), !dbg !12200
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12201
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !12202
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !12203
  %1 = load i32, i32* %location, align 8, !dbg !12203
  store i32 %1, i32* %asm_loc, align 4, !dbg !12200
  call void @llvm.dbg.declare(metadata i32* %section, metadata !12204, metadata !DIExpression()), !dbg !12205
  call void @llvm.dbg.declare(metadata i32* %nsections, metadata !12206, metadata !DIExpression()), !dbg !12207
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12208
  %call1 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %2, i32 49), !dbg !12208
  %tobool = icmp ne i8 %call1, 0, !dbg !12208
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !12208

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4293, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12208
  br label %cond.end, !dbg !12208

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12208

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12208
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12209
  call void @c_parser_consume_token(%struct.c_parser* %3), !dbg !12210
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12211
  %call2 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %4, i32 9), !dbg !12213
  %tobool3 = icmp ne i8 %call2, 0, !dbg !12213
  br i1 %tobool3, label %if.then, label %if.else, !dbg !12214

if.then:                                          ; preds = %cond.end
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12215
  %call4 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !12217
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call4, i32 0, i32 1, !dbg !12218
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !12218
  store %union.tree_node* %6, %union.tree_node** %quals, align 8, !dbg !12219
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12220
  call void @c_parser_consume_token(%struct.c_parser* %7), !dbg !12221
  br label %if.end17, !dbg !12222

if.else:                                          ; preds = %cond.end
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12223
  %call5 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %8, i32 3), !dbg !12225
  %conv = zext i8 %call5 to i32, !dbg !12225
  %tobool6 = icmp ne i32 %conv, 0, !dbg !12225
  br i1 %tobool6, label %if.then10, label %lor.lhs.false, !dbg !12226

lor.lhs.false:                                    ; preds = %if.else
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12227
  %call7 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %9, i32 12), !dbg !12228
  %conv8 = zext i8 %call7 to i32, !dbg !12228
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !12228
  br i1 %tobool9, label %if.then10, label %if.else16, !dbg !12229

if.then10:                                        ; preds = %lor.lhs.false, %if.else
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12230
  %call11 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %10), !dbg !12232
  %location12 = getelementptr inbounds %struct.c_token, %struct.c_token* %call11, i32 0, i32 2, !dbg !12233
  %11 = load i32, i32* %location12, align 8, !dbg !12233
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12234
  %call13 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %12), !dbg !12235
  %value14 = getelementptr inbounds %struct.c_token, %struct.c_token* %call13, i32 0, i32 1, !dbg !12236
  %13 = load %union.tree_node*, %union.tree_node** %value14, align 8, !dbg !12236
  %call15 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %11, i32 0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.55, i64 0, i64 0), %union.tree_node* %13), !dbg !12237
  store %union.tree_node* null, %union.tree_node** %quals, align 8, !dbg !12238
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12239
  call void @c_parser_consume_token(%struct.c_parser* %14), !dbg !12240
  br label %if.end, !dbg !12241

if.else16:                                        ; preds = %lor.lhs.false
  store %union.tree_node* null, %union.tree_node** %quals, align 8, !dbg !12242
  br label %if.end

if.end:                                           ; preds = %if.else16, %if.then10
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then
  store i8 0, i8* %is_goto, align 1, !dbg !12243
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12244
  %call18 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %15, i32 47), !dbg !12246
  %tobool19 = icmp ne i8 %call18, 0, !dbg !12246
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !12247

if.then20:                                        ; preds = %if.end17
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12248
  call void @c_parser_consume_token(%struct.c_parser* %16), !dbg !12250
  store i8 1, i8* %is_goto, align 1, !dbg !12251
  br label %if.end21, !dbg !12252

if.end21:                                         ; preds = %if.then20, %if.end17
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12253
  %lex_untranslated_string = getelementptr inbounds %struct.c_parser, %struct.c_parser* %17, i32 0, i32 2, !dbg !12254
  %bf.load = load i8, i8* %lex_untranslated_string, align 2, !dbg !12255
  %bf.clear = and i8 %bf.load, -9, !dbg !12255
  %bf.set = or i8 %bf.clear, 8, !dbg !12255
  store i8 %bf.set, i8* %lex_untranslated_string, align 2, !dbg !12255
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !12256
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12257
  %call22 = call zeroext i8 @c_parser_require(%struct.c_parser* %18, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !12259
  %tobool23 = icmp ne i8 %call22, 0, !dbg !12259
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !12260

if.then24:                                        ; preds = %if.end21
  br label %error, !dbg !12261

if.end25:                                         ; preds = %if.end21
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12262
  %call26 = call %union.tree_node* @c_parser_asm_string_literal(%struct.c_parser* %19), !dbg !12263
  store %union.tree_node* %call26, %union.tree_node** %str, align 8, !dbg !12264
  %20 = load %union.tree_node*, %union.tree_node** %str, align 8, !dbg !12265
  %cmp = icmp eq %union.tree_node* %20, null, !dbg !12267
  br i1 %cmp, label %if.then28, label %if.end29, !dbg !12268

if.then28:                                        ; preds = %if.end25
  br label %error_close_paren, !dbg !12269

if.end29:                                         ; preds = %if.end25
  store i8 1, i8* %simple, align 1, !dbg !12270
  store %union.tree_node* null, %union.tree_node** %outputs, align 8, !dbg !12271
  store %union.tree_node* null, %union.tree_node** %inputs, align 8, !dbg !12272
  store %union.tree_node* null, %union.tree_node** %clobbers, align 8, !dbg !12273
  store %union.tree_node* null, %union.tree_node** %labels, align 8, !dbg !12274
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12275
  %call30 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %21, i32 21), !dbg !12277
  %conv31 = zext i8 %call30 to i32, !dbg !12277
  %tobool32 = icmp ne i32 %conv31, 0, !dbg !12277
  br i1 %tobool32, label %land.lhs.true, label %if.end35, !dbg !12278

land.lhs.true:                                    ; preds = %if.end29
  %22 = load i8, i8* %is_goto, align 1, !dbg !12279
  %tobool33 = icmp ne i8 %22, 0, !dbg !12279
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !12280

if.then34:                                        ; preds = %land.lhs.true
  br label %done_asm, !dbg !12281

if.end35:                                         ; preds = %land.lhs.true, %if.end29
  %23 = load i8, i8* %is_goto, align 1, !dbg !12282
  %conv36 = zext i8 %23 to i32, !dbg !12282
  %add = add nsw i32 3, %conv36, !dbg !12283
  store i32 %add, i32* %nsections, align 4, !dbg !12284
  store i32 0, i32* %section, align 4, !dbg !12285
  br label %for.cond, !dbg !12287

for.cond:                                         ; preds = %for.inc, %if.end35
  %24 = load i32, i32* %section, align 4, !dbg !12288
  %25 = load i32, i32* %nsections, align 4, !dbg !12290
  %cmp37 = icmp slt i32 %24, %25, !dbg !12291
  br i1 %cmp37, label %for.body, label %for.end, !dbg !12292

for.body:                                         ; preds = %for.cond
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12293
  %27 = load i8, i8* %is_goto, align 1, !dbg !12296
  %conv39 = zext i8 %27 to i32, !dbg !12296
  %tobool40 = icmp ne i32 %conv39, 0, !dbg !12296
  %28 = zext i1 %tobool40 to i64, !dbg !12296
  %cond41 = select i1 %tobool40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.56, i64 0, i64 0), !dbg !12296
  %call42 = call zeroext i8 @c_parser_require(%struct.c_parser* %26, i32 18, i8* %cond41), !dbg !12297
  %tobool43 = icmp ne i8 %call42, 0, !dbg !12297
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !12298

if.then44:                                        ; preds = %for.body
  br label %error_close_paren, !dbg !12299

if.end45:                                         ; preds = %for.body
  store i8 0, i8* %simple, align 1, !dbg !12300
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12301
  %call46 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %29, i32 18), !dbg !12303
  %tobool47 = icmp ne i8 %call46, 0, !dbg !12303
  br i1 %tobool47, label %lor.lhs.false51, label %land.lhs.true48, !dbg !12304

land.lhs.true48:                                  ; preds = %if.end45
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12305
  %call49 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %30, i32 21), !dbg !12306
  %tobool50 = icmp ne i8 %call49, 0, !dbg !12306
  br i1 %tobool50, label %lor.lhs.false51, label %if.then54, !dbg !12307

lor.lhs.false51:                                  ; preds = %land.lhs.true48, %if.end45
  %31 = load i32, i32* %section, align 4, !dbg !12308
  %cmp52 = icmp eq i32 %31, 3, !dbg !12309
  br i1 %cmp52, label %if.then54, label %if.end65, !dbg !12310

if.then54:                                        ; preds = %lor.lhs.false51, %land.lhs.true48
  %32 = load i32, i32* %section, align 4, !dbg !12311
  switch i32 %32, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb59
    i32 2, label %sw.bb61
    i32 3, label %sw.bb63
  ], !dbg !12312

sw.bb:                                            ; preds = %if.then54
  %33 = load i8, i8* %is_goto, align 1, !dbg !12313
  %tobool55 = icmp ne i8 %33, 0, !dbg !12313
  br i1 %tobool55, label %if.end58, label %if.then56, !dbg !12316

if.then56:                                        ; preds = %sw.bb
  %34 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12317
  %call57 = call %union.tree_node* @c_parser_asm_operands(%struct.c_parser* %34, i8 zeroext 0), !dbg !12318
  store %union.tree_node* %call57, %union.tree_node** %outputs, align 8, !dbg !12319
  br label %if.end58, !dbg !12320

if.end58:                                         ; preds = %if.then56, %sw.bb
  br label %sw.epilog, !dbg !12321

sw.bb59:                                          ; preds = %if.then54
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12322
  %call60 = call %union.tree_node* @c_parser_asm_operands(%struct.c_parser* %35, i8 zeroext 1), !dbg !12323
  store %union.tree_node* %call60, %union.tree_node** %inputs, align 8, !dbg !12324
  br label %sw.epilog, !dbg !12325

sw.bb61:                                          ; preds = %if.then54
  %36 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12326
  %call62 = call %union.tree_node* @c_parser_asm_clobbers(%struct.c_parser* %36), !dbg !12327
  store %union.tree_node* %call62, %union.tree_node** %clobbers, align 8, !dbg !12328
  br label %sw.epilog, !dbg !12329

sw.bb63:                                          ; preds = %if.then54
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12330
  %call64 = call %union.tree_node* @c_parser_asm_goto_operands(%struct.c_parser* %37), !dbg !12331
  store %union.tree_node* %call64, %union.tree_node** %labels, align 8, !dbg !12332
  br label %sw.epilog, !dbg !12333

sw.default:                                       ; preds = %if.then54
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4375, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12334
  br label %sw.epilog, !dbg !12335

sw.epilog:                                        ; preds = %sw.default, %sw.bb63, %sw.bb61, %sw.bb59, %if.end58
  br label %if.end65, !dbg !12335

if.end65:                                         ; preds = %sw.epilog, %lor.lhs.false51
  %38 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12336
  %call66 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %38, i32 21), !dbg !12338
  %conv67 = zext i8 %call66 to i32, !dbg !12338
  %tobool68 = icmp ne i32 %conv67, 0, !dbg !12338
  br i1 %tobool68, label %land.lhs.true69, label %if.end72, !dbg !12339

land.lhs.true69:                                  ; preds = %if.end65
  %39 = load i8, i8* %is_goto, align 1, !dbg !12340
  %tobool70 = icmp ne i8 %39, 0, !dbg !12340
  br i1 %tobool70, label %if.end72, label %if.then71, !dbg !12341

if.then71:                                        ; preds = %land.lhs.true69
  br label %done_asm, !dbg !12342

if.end72:                                         ; preds = %land.lhs.true69, %if.end65
  br label %for.inc, !dbg !12343

for.inc:                                          ; preds = %if.end72
  %40 = load i32, i32* %section, align 4, !dbg !12344
  %inc = add nsw i32 %40, 1, !dbg !12344
  store i32 %inc, i32* %section, align 4, !dbg !12344
  br label %for.cond, !dbg !12345, !llvm.loop !12346

for.end:                                          ; preds = %for.cond
  br label %done_asm, !dbg !12347

done_asm:                                         ; preds = %for.end, %if.then71, %if.then34
  call void @llvm.dbg.label(metadata !12348), !dbg !12349
  %41 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12350
  %call73 = call zeroext i8 @c_parser_require(%struct.c_parser* %41, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !12352
  %tobool74 = icmp ne i8 %call73, 0, !dbg !12352
  br i1 %tobool74, label %if.end76, label %if.then75, !dbg !12353

if.then75:                                        ; preds = %done_asm
  %42 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12354
  call void @c_parser_skip_until_found(%struct.c_parser* %42, i32 21, i8* null), !dbg !12356
  br label %error, !dbg !12357

if.end76:                                         ; preds = %done_asm
  %43 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12358
  %call77 = call zeroext i8 @c_parser_require(%struct.c_parser* %43, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !12360
  %tobool78 = icmp ne i8 %call77, 0, !dbg !12360
  br i1 %tobool78, label %if.end80, label %if.then79, !dbg !12361

if.then79:                                        ; preds = %if.end76
  %44 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12362
  call void @c_parser_skip_to_end_of_block_or_statement(%struct.c_parser* %44), !dbg !12363
  br label %if.end80, !dbg !12363

if.end80:                                         ; preds = %if.then79, %if.end76
  %45 = load %union.tree_node*, %union.tree_node** %quals, align 8, !dbg !12364
  %46 = load i32, i32* %asm_loc, align 4, !dbg !12365
  %47 = load %union.tree_node*, %union.tree_node** %str, align 8, !dbg !12366
  %48 = load %union.tree_node*, %union.tree_node** %outputs, align 8, !dbg !12367
  %49 = load %union.tree_node*, %union.tree_node** %inputs, align 8, !dbg !12368
  %50 = load %union.tree_node*, %union.tree_node** %clobbers, align 8, !dbg !12369
  %51 = load %union.tree_node*, %union.tree_node** %labels, align 8, !dbg !12370
  %52 = load i8, i8* %simple, align 1, !dbg !12371
  %call81 = call %union.tree_node* @build_asm_expr(i32 %46, %union.tree_node* %47, %union.tree_node* %48, %union.tree_node* %49, %union.tree_node* %50, %union.tree_node* %51, i8 zeroext %52), !dbg !12372
  %call82 = call %union.tree_node* @build_asm_stmt(%union.tree_node* %45, %union.tree_node* %call81), !dbg !12373
  store %union.tree_node* %call82, %union.tree_node** %ret, align 8, !dbg !12374
  br label %error, !dbg !12375

error:                                            ; preds = %error_close_paren, %if.end80, %if.then75, %if.then24
  call void @llvm.dbg.label(metadata !12376), !dbg !12377
  %53 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12378
  %lex_untranslated_string83 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %53, i32 0, i32 2, !dbg !12379
  %bf.load84 = load i8, i8* %lex_untranslated_string83, align 2, !dbg !12380
  %bf.clear85 = and i8 %bf.load84, -9, !dbg !12380
  store i8 %bf.clear85, i8* %lex_untranslated_string83, align 2, !dbg !12380
  %54 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !12381
  ret %union.tree_node* %54, !dbg !12382

error_close_paren:                                ; preds = %if.then44, %if.then28
  call void @llvm.dbg.label(metadata !12383), !dbg !12384
  %55 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12385
  call void @c_parser_skip_until_found(%struct.c_parser* %55, i32 21, i8* null), !dbg !12386
  br label %error, !dbg !12387
}

declare dso_local %union.tree_node* @objc_build_throw_stmt(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_objc_try_catch_statement(%struct.c_parser* %parser) #0 !dbg !12388 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %loc = alloca i32, align 4
  %stmt = alloca %union.tree_node*, align 8
  %parm = alloca %struct.c_parm*, align 8
  %finloc = alloca i32, align 4
  %finstmt = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12389, metadata !DIExpression()), !dbg !12390
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !12391, metadata !DIExpression()), !dbg !12392
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !12393, metadata !DIExpression()), !dbg !12394
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12395
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 87), !dbg !12395
  %tobool = icmp ne i8 %call, 0, !dbg !12395
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !12395

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6715, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12395
  br label %cond.end, !dbg !12395

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12395

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12395
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12396
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !12397
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12398
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !12399
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !12400
  %3 = load i32, i32* %location, align 8, !dbg !12400
  store i32 %3, i32* %loc, align 4, !dbg !12401
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12402
  %call2 = call %union.tree_node* @c_parser_compound_statement(%struct.c_parser* %4), !dbg !12403
  store %union.tree_node* %call2, %union.tree_node** %stmt, align 8, !dbg !12404
  %5 = load i32, i32* %loc, align 4, !dbg !12405
  %6 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !12406
  call void @objc_begin_try_stmt(i32 %5, %union.tree_node* %6), !dbg !12407
  br label %while.cond, !dbg !12408

while.cond:                                       ; preds = %if.end14, %cond.end
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12409
  %call3 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %7, i32 77), !dbg !12410
  %tobool4 = icmp ne i8 %call3, 0, !dbg !12408
  br i1 %tobool4, label %while.body, label %while.end, !dbg !12408

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.c_parm** %parm, metadata !12411, metadata !DIExpression()), !dbg !12413
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12414
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !12415
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12416
  %call5 = call zeroext i8 @c_parser_require(%struct.c_parser* %9, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !12418
  %tobool6 = icmp ne i8 %call5, 0, !dbg !12418
  br i1 %tobool6, label %if.end, label %if.then, !dbg !12419

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !12420

if.end:                                           ; preds = %while.body
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12421
  %call7 = call %struct.c_parm* @c_parser_parameter_declaration(%struct.c_parser* %10, %union.tree_node* null), !dbg !12422
  store %struct.c_parm* %call7, %struct.c_parm** %parm, align 8, !dbg !12423
  %11 = load %struct.c_parm*, %struct.c_parm** %parm, align 8, !dbg !12424
  %cmp = icmp eq %struct.c_parm* %11, null, !dbg !12426
  br i1 %cmp, label %if.then8, label %if.end9, !dbg !12427

if.then8:                                         ; preds = %if.end
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12428
  call void @c_parser_skip_until_found(%struct.c_parser* %12, i32 21, i8* null), !dbg !12430
  br label %while.end, !dbg !12431

if.end9:                                          ; preds = %if.end
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12432
  call void @c_parser_skip_until_found(%struct.c_parser* %13, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !12433
  %14 = load %struct.c_parm*, %struct.c_parm** %parm, align 8, !dbg !12434
  %call10 = call %union.tree_node* @grokparm(%struct.c_parm* %14), !dbg !12435
  call void @objc_begin_catch_clause(%union.tree_node* %call10), !dbg !12436
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12437
  %call11 = call zeroext i8 @c_parser_require(%struct.c_parser* %15, i32 41, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0)), !dbg !12439
  %tobool12 = icmp ne i8 %call11, 0, !dbg !12439
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !12440

if.then13:                                        ; preds = %if.end9
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12441
  call void @c_parser_compound_statement_nostart(%struct.c_parser* %16), !dbg !12442
  br label %if.end14, !dbg !12442

if.end14:                                         ; preds = %if.then13, %if.end9
  call void @objc_finish_catch_clause(), !dbg !12443
  br label %while.cond, !dbg !12408, !llvm.loop !12444

while.end:                                        ; preds = %if.then8, %if.then, %while.cond
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12446
  %call15 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %17, i32 132), !dbg !12448
  %tobool16 = icmp ne i8 %call15, 0, !dbg !12448
  br i1 %tobool16, label %if.then17, label %if.end21, !dbg !12449

if.then17:                                        ; preds = %while.end
  call void @llvm.dbg.declare(metadata i32* %finloc, metadata !12450, metadata !DIExpression()), !dbg !12452
  call void @llvm.dbg.declare(metadata %union.tree_node** %finstmt, metadata !12453, metadata !DIExpression()), !dbg !12454
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12455
  call void @c_parser_consume_token(%struct.c_parser* %18), !dbg !12456
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12457
  %call18 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %19), !dbg !12458
  %location19 = getelementptr inbounds %struct.c_token, %struct.c_token* %call18, i32 0, i32 2, !dbg !12459
  %20 = load i32, i32* %location19, align 8, !dbg !12459
  store i32 %20, i32* %finloc, align 4, !dbg !12460
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12461
  %call20 = call %union.tree_node* @c_parser_compound_statement(%struct.c_parser* %21), !dbg !12462
  store %union.tree_node* %call20, %union.tree_node** %finstmt, align 8, !dbg !12463
  %22 = load i32, i32* %finloc, align 4, !dbg !12464
  %23 = load %union.tree_node*, %union.tree_node** %finstmt, align 8, !dbg !12465
  call void @objc_build_finally_clause(i32 %22, %union.tree_node* %23), !dbg !12466
  br label %if.end21, !dbg !12467

if.end21:                                         ; preds = %if.then17, %while.end
  %call22 = call %union.tree_node* @objc_finish_try_stmt(), !dbg !12468
  ret void, !dbg !12469
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_objc_synchronized_statement(%struct.c_parser* %parser) #0 !dbg !12470 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %loc = alloca i32, align 4
  %expr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12471, metadata !DIExpression()), !dbg !12472
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !12473, metadata !DIExpression()), !dbg !12474
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr, metadata !12475, metadata !DIExpression()), !dbg !12476
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !12477, metadata !DIExpression()), !dbg !12478
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12479
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 133), !dbg !12479
  %tobool = icmp ne i8 %call, 0, !dbg !12479
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !12479

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 6761, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12479
  br label %cond.end, !dbg !12479

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12479

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12479
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12480
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !12481
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12482
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !12483
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !12484
  %3 = load i32, i32* %location, align 8, !dbg !12484
  store i32 %3, i32* %loc, align 4, !dbg !12485
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12486
  %call2 = call zeroext i8 @c_parser_require(%struct.c_parser* %4, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !12488
  %tobool3 = icmp ne i8 %call2, 0, !dbg !12488
  br i1 %tobool3, label %if.then, label %if.else, !dbg !12489

if.then:                                          ; preds = %cond.end
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12490
  call void @c_parser_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %5), !dbg !12492
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !12493
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !12493
  store %union.tree_node* %6, %union.tree_node** %expr, align 8, !dbg !12494
  %7 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12495
  %call4 = call %union.tree_node* @c_fully_fold(%union.tree_node* %7, i8 zeroext 0, i8* null), !dbg !12496
  store %union.tree_node* %call4, %union.tree_node** %expr, align 8, !dbg !12497
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12498
  call void @c_parser_skip_until_found(%struct.c_parser* %8, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !12499
  br label %if.end, !dbg !12500

if.else:                                          ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !12501
  store %union.tree_node* %9, %union.tree_node** %expr, align 8, !dbg !12502
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12503
  %call5 = call %union.tree_node* @c_parser_compound_statement(%struct.c_parser* %10), !dbg !12504
  store %union.tree_node* %call5, %union.tree_node** %stmt, align 8, !dbg !12505
  %11 = load i32, i32* %loc, align 4, !dbg !12506
  %12 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !12507
  %13 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !12508
  %call6 = call %union.tree_node* @objc_build_synchronized(i32 %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !12509
  ret void, !dbg !12510
}

declare dso_local %union.tree_node* @c_finish_expr_stmt(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @c_begin_compound_stmt(i8 zeroext) #2

declare dso_local %union.tree_node* @c_end_compound_stmt(i32, %union.tree_node*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_paren_condition(%struct.c_parser* %parser) #0 !dbg !12511 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %cond = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12512, metadata !DIExpression()), !dbg !12513
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !12514, metadata !DIExpression()), !dbg !12515
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12516
  %call = call zeroext i8 @c_parser_require(%struct.c_parser* %0, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !12518
  %tobool = icmp ne i8 %call, 0, !dbg !12518
  br i1 %tobool, label %if.end, label %if.then, !dbg !12519

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !12520
  store %union.tree_node* %1, %union.tree_node** %retval, align 8, !dbg !12521
  br label %return, !dbg !12521

if.end:                                           ; preds = %entry
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12522
  %call1 = call %union.tree_node* @c_parser_condition(%struct.c_parser* %2), !dbg !12523
  store %union.tree_node* %call1, %union.tree_node** %cond, align 8, !dbg !12524
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12525
  call void @c_parser_skip_until_found(%struct.c_parser* %3, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !12526
  %4 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !12527
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !12528
  br label %return, !dbg !12528

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12529
  ret %union.tree_node* %5, !dbg !12529
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_if_body(%struct.c_parser* %parser, i8* %if_p) #0 !dbg !12530 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %if_p.addr = alloca i8*, align 8
  %block = alloca %union.tree_node*, align 8
  %body_loc = alloca i32, align 4
  %loc = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12533, metadata !DIExpression()), !dbg !12534
  store i8* %if_p, i8** %if_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %if_p.addr, metadata !12535, metadata !DIExpression()), !dbg !12536
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !12537, metadata !DIExpression()), !dbg !12538
  %0 = load i32, i32* @flag_isoc99, align 4, !dbg !12539
  %conv = trunc i32 %0 to i8, !dbg !12539
  %call = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext %conv), !dbg !12540
  store %union.tree_node* %call, %union.tree_node** %block, align 8, !dbg !12538
  call void @llvm.dbg.declare(metadata i32* %body_loc, metadata !12541, metadata !DIExpression()), !dbg !12542
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12543
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !12544
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !12545
  %2 = load i32, i32* %location, align 8, !dbg !12545
  store i32 %2, i32* %body_loc, align 4, !dbg !12542
  br label %while.cond, !dbg !12546

while.cond:                                       ; preds = %while.body, %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12547
  %call2 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %3, i32 42), !dbg !12548
  %conv3 = zext i8 %call2 to i32, !dbg !12548
  %tobool = icmp ne i32 %conv3, 0, !dbg !12548
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !12549

lor.lhs.false:                                    ; preds = %while.cond
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12550
  %call4 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %4, i32 43), !dbg !12551
  %conv5 = zext i8 %call4 to i32, !dbg !12551
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !12551
  br i1 %tobool6, label %lor.end, label %lor.rhs, !dbg !12552

lor.rhs:                                          ; preds = %lor.lhs.false
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12553
  %call7 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %5, i32 53), !dbg !12554
  %conv8 = zext i8 %call7 to i32, !dbg !12554
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !12554
  br i1 %tobool9, label %land.rhs, label %land.end, !dbg !12555

land.rhs:                                         ; preds = %lor.rhs
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12556
  %call10 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %6), !dbg !12557
  %7 = bitcast %struct.c_token* %call10 to i32*, !dbg !12558
  %bf.load = load i32, i32* %7, align 8, !dbg !12558
  %bf.clear = and i32 %bf.load, 255, !dbg !12558
  %cmp = icmp eq i32 %bf.clear, 18, !dbg !12559
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %8 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !12560
  br label %lor.end, !dbg !12552

lor.end:                                          ; preds = %land.end, %lor.lhs.false, %while.cond
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %8, %land.end ]
  br i1 %9, label %while.body, label %while.end, !dbg !12546

while.body:                                       ; preds = %lor.end
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12561
  call void @c_parser_label(%struct.c_parser* %10), !dbg !12562
  br label %while.cond, !dbg !12546, !llvm.loop !12563

while.end:                                        ; preds = %lor.end
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12565
  %call12 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %11, i32 36), !dbg !12566
  %12 = load i8*, i8** %if_p.addr, align 8, !dbg !12567
  store i8 %call12, i8* %12, align 1, !dbg !12568
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12569
  %call13 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %13, i32 43), !dbg !12571
  %tobool14 = icmp ne i8 %call13, 0, !dbg !12571
  br i1 %tobool14, label %if.then, label %if.else, !dbg !12572

if.then:                                          ; preds = %while.end
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !12573, metadata !DIExpression()), !dbg !12575
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12576
  %call15 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %14), !dbg !12577
  %location16 = getelementptr inbounds %struct.c_token, %struct.c_token* %call15, i32 0, i32 2, !dbg !12578
  %15 = load i32, i32* %location16, align 8, !dbg !12578
  store i32 %15, i32* %loc, align 4, !dbg !12575
  %16 = load i32, i32* %loc, align 4, !dbg !12579
  %call17 = call %union.tree_node* @build_empty_stmt(i32 %16), !dbg !12580
  %call18 = call %union.tree_node* @add_stmt(%union.tree_node* %call17), !dbg !12581
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12582
  call void @c_parser_consume_token(%struct.c_parser* %17), !dbg !12583
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12584
  %call19 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %18, i32 37), !dbg !12586
  %tobool20 = icmp ne i8 %call19, 0, !dbg !12586
  br i1 %tobool20, label %if.end, label %if.then21, !dbg !12587

if.then21:                                        ; preds = %if.then
  %19 = load i32, i32* %loc, align 4, !dbg !12588
  %call22 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %19, i32 74, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.51, i64 0, i64 0)), !dbg !12589
  br label %if.end, !dbg !12589

if.end:                                           ; preds = %if.then21, %if.then
  br label %if.end30, !dbg !12590

if.else:                                          ; preds = %while.end
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12591
  %call23 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %20, i32 41), !dbg !12593
  %tobool24 = icmp ne i8 %call23, 0, !dbg !12593
  br i1 %tobool24, label %if.then25, label %if.else28, !dbg !12594

if.then25:                                        ; preds = %if.else
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12595
  %call26 = call %union.tree_node* @c_parser_compound_statement(%struct.c_parser* %21), !dbg !12596
  %call27 = call %union.tree_node* @add_stmt(%union.tree_node* %call26), !dbg !12597
  br label %if.end29, !dbg !12597

if.else28:                                        ; preds = %if.else
  %22 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12598
  call void @c_parser_statement_after_labels(%struct.c_parser* %22), !dbg !12599
  br label %if.end29

if.end29:                                         ; preds = %if.else28, %if.then25
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.end
  %23 = load i32, i32* %body_loc, align 4, !dbg !12600
  %24 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !12601
  %25 = load i32, i32* @flag_isoc99, align 4, !dbg !12602
  %conv31 = trunc i32 %25 to i8, !dbg !12602
  %call32 = call %union.tree_node* @c_end_compound_stmt(i32 %23, %union.tree_node* %24, i8 zeroext %conv31), !dbg !12603
  ret %union.tree_node* %call32, !dbg !12604
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_else_body(%struct.c_parser* %parser) #0 !dbg !12605 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %else_loc = alloca i32, align 4
  %block = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12606, metadata !DIExpression()), !dbg !12607
  call void @llvm.dbg.declare(metadata i32* %else_loc, metadata !12608, metadata !DIExpression()), !dbg !12609
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12610
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !12611
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !12612
  %1 = load i32, i32* %location, align 8, !dbg !12612
  store i32 %1, i32* %else_loc, align 4, !dbg !12609
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !12613, metadata !DIExpression()), !dbg !12614
  %2 = load i32, i32* @flag_isoc99, align 4, !dbg !12615
  %conv = trunc i32 %2 to i8, !dbg !12615
  %call1 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext %conv), !dbg !12616
  store %union.tree_node* %call1, %union.tree_node** %block, align 8, !dbg !12614
  br label %while.cond, !dbg !12617

while.cond:                                       ; preds = %while.body, %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12618
  %call2 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %3, i32 42), !dbg !12619
  %conv3 = zext i8 %call2 to i32, !dbg !12619
  %tobool = icmp ne i32 %conv3, 0, !dbg !12619
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !12620

lor.lhs.false:                                    ; preds = %while.cond
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12621
  %call4 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %4, i32 43), !dbg !12622
  %conv5 = zext i8 %call4 to i32, !dbg !12622
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !12622
  br i1 %tobool6, label %lor.end, label %lor.rhs, !dbg !12623

lor.rhs:                                          ; preds = %lor.lhs.false
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12624
  %call7 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %5, i32 53), !dbg !12625
  %conv8 = zext i8 %call7 to i32, !dbg !12625
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !12625
  br i1 %tobool9, label %land.rhs, label %land.end, !dbg !12626

land.rhs:                                         ; preds = %lor.rhs
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12627
  %call10 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %6), !dbg !12628
  %7 = bitcast %struct.c_token* %call10 to i32*, !dbg !12629
  %bf.load = load i32, i32* %7, align 8, !dbg !12629
  %bf.clear = and i32 %bf.load, 255, !dbg !12629
  %cmp = icmp eq i32 %bf.clear, 18, !dbg !12630
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %8 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !12631
  br label %lor.end, !dbg !12623

lor.end:                                          ; preds = %land.end, %lor.lhs.false, %while.cond
  %9 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %8, %land.end ]
  br i1 %9, label %while.body, label %while.end, !dbg !12617

while.body:                                       ; preds = %lor.end
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12632
  call void @c_parser_label(%struct.c_parser* %10), !dbg !12633
  br label %while.cond, !dbg !12617, !llvm.loop !12634

while.end:                                        ; preds = %lor.end
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12636
  %call12 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %11, i32 43), !dbg !12638
  %tobool13 = icmp ne i8 %call12, 0, !dbg !12638
  br i1 %tobool13, label %if.then, label %if.else, !dbg !12639

if.then:                                          ; preds = %while.end
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !12640, metadata !DIExpression()), !dbg !12642
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12643
  %call14 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %12), !dbg !12644
  %location15 = getelementptr inbounds %struct.c_token, %struct.c_token* %call14, i32 0, i32 2, !dbg !12645
  %13 = load i32, i32* %location15, align 8, !dbg !12645
  store i32 %13, i32* %loc, align 4, !dbg !12642
  %14 = load i32, i32* %loc, align 4, !dbg !12646
  %call16 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %14, i32 74, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.52, i64 0, i64 0)), !dbg !12647
  %15 = load i32, i32* %loc, align 4, !dbg !12648
  %call17 = call %union.tree_node* @build_empty_stmt(i32 %15), !dbg !12649
  %call18 = call %union.tree_node* @add_stmt(%union.tree_node* %call17), !dbg !12650
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12651
  call void @c_parser_consume_token(%struct.c_parser* %16), !dbg !12652
  br label %if.end, !dbg !12653

if.else:                                          ; preds = %while.end
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12654
  call void @c_parser_statement_after_labels(%struct.c_parser* %17), !dbg !12655
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %18 = load i32, i32* %else_loc, align 4, !dbg !12656
  %19 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !12657
  %20 = load i32, i32* @flag_isoc99, align 4, !dbg !12658
  %conv19 = trunc i32 %20 to i8, !dbg !12658
  %call20 = call %union.tree_node* @c_end_compound_stmt(i32 %18, %union.tree_node* %19, i8 zeroext %conv19), !dbg !12659
  ret %union.tree_node* %call20, !dbg !12660
}

declare dso_local void @c_finish_if_stmt(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_condition(%struct.c_parser* %parser) #0 !dbg !12661 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %loc = alloca i32, align 4
  %cond = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12662, metadata !DIExpression()), !dbg !12663
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !12664, metadata !DIExpression()), !dbg !12665
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12666
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !12667
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !12668
  %1 = load i32, i32* %location, align 8, !dbg !12668
  store i32 %1, i32* %loc, align 4, !dbg !12665
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !12669, metadata !DIExpression()), !dbg !12670
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12671
  call void @c_parser_expression_conv(%struct.c_expr* sret %tmp, %struct.c_parser* %2), !dbg !12672
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !12673
  %3 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !12673
  store %union.tree_node* %3, %union.tree_node** %cond, align 8, !dbg !12674
  %4 = load i32, i32* %loc, align 4, !dbg !12675
  %5 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !12676
  %call1 = call %union.tree_node* @c_objc_common_truthvalue_conversion(i32 %4, %union.tree_node* %5), !dbg !12677
  store %union.tree_node* %call1, %union.tree_node** %cond, align 8, !dbg !12678
  %6 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !12679
  %call2 = call %union.tree_node* @c_fully_fold(%union.tree_node* %6, i8 zeroext 0, i8* null), !dbg !12680
  store %union.tree_node* %call2, %union.tree_node** %cond, align 8, !dbg !12681
  %7 = load i32, i32* @warn_sequence_point, align 4, !dbg !12682
  %tobool = icmp ne i32 %7, 0, !dbg !12682
  br i1 %tobool, label %if.then, label %if.end, !dbg !12684

if.then:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !12685
  call void @verify_sequence_points(%union.tree_node* %8), !dbg !12686
  br label %if.end, !dbg !12686

if.end:                                           ; preds = %if.then, %entry
  %9 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !12687
  ret %union.tree_node* %9, !dbg !12688
}

declare dso_local void @verify_sequence_points(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_empty_stmt(i32) #2

declare dso_local %union.tree_node* @c_start_case(i32, i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_c99_block_statement(%struct.c_parser* %parser) #0 !dbg !12689 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %block = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12690, metadata !DIExpression()), !dbg !12691
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !12692, metadata !DIExpression()), !dbg !12693
  %0 = load i32, i32* @flag_isoc99, align 4, !dbg !12694
  %conv = trunc i32 %0 to i8, !dbg !12694
  %call = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext %conv), !dbg !12695
  store %union.tree_node* %call, %union.tree_node** %block, align 8, !dbg !12693
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !12696, metadata !DIExpression()), !dbg !12697
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12698
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !12699
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !12700
  %2 = load i32, i32* %location, align 8, !dbg !12700
  store i32 %2, i32* %loc, align 4, !dbg !12697
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12701
  call void @c_parser_statement(%struct.c_parser* %3), !dbg !12702
  %4 = load i32, i32* %loc, align 4, !dbg !12703
  %5 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !12704
  %6 = load i32, i32* @flag_isoc99, align 4, !dbg !12705
  %conv2 = trunc i32 %6 to i8, !dbg !12705
  %call3 = call %union.tree_node* @c_end_compound_stmt(i32 %4, %union.tree_node* %5, i8 zeroext %conv2), !dbg !12706
  ret %union.tree_node* %call3, !dbg !12707
}

declare dso_local void @c_finish_case(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_statement(%struct.c_parser* %parser) #0 !dbg !12708 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12709, metadata !DIExpression()), !dbg !12710
  br label %while.cond, !dbg !12711

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12712
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 42), !dbg !12713
  %conv = zext i8 %call to i32, !dbg !12713
  %tobool = icmp ne i32 %conv, 0, !dbg !12713
  br i1 %tobool, label %lor.end, label %lor.lhs.false, !dbg !12714

lor.lhs.false:                                    ; preds = %while.cond
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12715
  %call1 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %1, i32 43), !dbg !12716
  %conv2 = zext i8 %call1 to i32, !dbg !12716
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !12716
  br i1 %tobool3, label %lor.end, label %lor.rhs, !dbg !12717

lor.rhs:                                          ; preds = %lor.lhs.false
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12718
  %call4 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %2, i32 53), !dbg !12719
  %conv5 = zext i8 %call4 to i32, !dbg !12719
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !12719
  br i1 %tobool6, label %land.rhs, label %land.end, !dbg !12720

land.rhs:                                         ; preds = %lor.rhs
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12721
  %call7 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %3), !dbg !12722
  %4 = bitcast %struct.c_token* %call7 to i32*, !dbg !12723
  %bf.load = load i32, i32* %4, align 8, !dbg !12723
  %bf.clear = and i32 %bf.load, 255, !dbg !12723
  %cmp = icmp eq i32 %bf.clear, 18, !dbg !12724
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %5 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !12725
  br label %lor.end, !dbg !12717

lor.end:                                          ; preds = %land.end, %lor.lhs.false, %while.cond
  %6 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %5, %land.end ]
  br i1 %6, label %while.body, label %while.end, !dbg !12711

while.body:                                       ; preds = %lor.end
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12726
  call void @c_parser_label(%struct.c_parser* %7), !dbg !12727
  br label %while.cond, !dbg !12711, !llvm.loop !12728

while.end:                                        ; preds = %lor.end
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12730
  call void @c_parser_statement_after_labels(%struct.c_parser* %8), !dbg !12731
  ret void, !dbg !12732
}

declare dso_local void @c_finish_loop(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_skip_to_end_of_block_or_statement(%struct.c_parser* %parser) #0 !dbg !12733 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %nesting_depth = alloca i32, align 4
  %save_error = alloca i8, align 1
  %token = alloca %struct.c_token*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12734, metadata !DIExpression()), !dbg !12735
  call void @llvm.dbg.declare(metadata i32* %nesting_depth, metadata !12736, metadata !DIExpression()), !dbg !12737
  store i32 0, i32* %nesting_depth, align 4, !dbg !12737
  call void @llvm.dbg.declare(metadata i8* %save_error, metadata !12738, metadata !DIExpression()), !dbg !12739
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12740
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %0, i32 0, i32 2, !dbg !12741
  %bf.load = load i8, i8* %error, align 2, !dbg !12741
  %bf.clear = and i8 %bf.load, 1, !dbg !12741
  %bf.cast = zext i8 %bf.clear to i32, !dbg !12741
  %conv = trunc i32 %bf.cast to i8, !dbg !12740
  store i8 %conv, i8* %save_error, align 1, !dbg !12739
  br label %while.body, !dbg !12742

while.body:                                       ; preds = %entry, %sw.bb18, %sw.epilog
  call void @llvm.dbg.declare(metadata %struct.c_token** %token, metadata !12743, metadata !DIExpression()), !dbg !12745
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12746
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !12747
  store %struct.c_token* %call, %struct.c_token** %token, align 8, !dbg !12748
  %2 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !12749
  %3 = bitcast %struct.c_token* %2 to i32*, !dbg !12750
  %bf.load1 = load i32, i32* %3, align 8, !dbg !12750
  %bf.clear2 = and i32 %bf.load1, 255, !dbg !12750
  switch i32 %bf.clear2, label %sw.default [
    i32 22, label %sw.bb
    i32 71, label %sw.bb3
    i32 43, label %sw.bb7
    i32 42, label %sw.bb11
    i32 41, label %sw.bb17
    i32 70, label %sw.bb18
  ], !dbg !12751

sw.bb:                                            ; preds = %while.body
  br label %return, !dbg !12752

sw.bb3:                                           ; preds = %while.body
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12754
  %in_pragma = getelementptr inbounds %struct.c_parser, %struct.c_parser* %4, i32 0, i32 2, !dbg !12756
  %bf.load4 = load i8, i8* %in_pragma, align 2, !dbg !12756
  %bf.lshr = lshr i8 %bf.load4, 1, !dbg !12756
  %bf.clear5 = and i8 %bf.lshr, 1, !dbg !12756
  %bf.cast6 = zext i8 %bf.clear5 to i32, !dbg !12756
  %tobool = icmp ne i32 %bf.cast6, 0, !dbg !12754
  br i1 %tobool, label %if.then, label %if.end, !dbg !12757

if.then:                                          ; preds = %sw.bb3
  br label %return, !dbg !12758

if.end:                                           ; preds = %sw.bb3
  br label %sw.epilog, !dbg !12759

sw.bb7:                                           ; preds = %while.body
  %5 = load i32, i32* %nesting_depth, align 4, !dbg !12760
  %tobool8 = icmp ne i32 %5, 0, !dbg !12760
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !12762

if.then9:                                         ; preds = %sw.bb7
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12763
  call void @c_parser_consume_token(%struct.c_parser* %6), !dbg !12765
  br label %finished, !dbg !12766

if.end10:                                         ; preds = %sw.bb7
  br label %sw.epilog, !dbg !12767

sw.bb11:                                          ; preds = %while.body
  %7 = load i32, i32* %nesting_depth, align 4, !dbg !12768
  %cmp = icmp eq i32 %7, 0, !dbg !12770
  br i1 %cmp, label %if.then15, label %lor.lhs.false, !dbg !12771

lor.lhs.false:                                    ; preds = %sw.bb11
  %8 = load i32, i32* %nesting_depth, align 4, !dbg !12772
  %dec = add i32 %8, -1, !dbg !12772
  store i32 %dec, i32* %nesting_depth, align 4, !dbg !12772
  %cmp13 = icmp eq i32 %dec, 0, !dbg !12773
  br i1 %cmp13, label %if.then15, label %if.end16, !dbg !12774

if.then15:                                        ; preds = %lor.lhs.false, %sw.bb11
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12775
  call void @c_parser_consume_token(%struct.c_parser* %9), !dbg !12777
  br label %finished, !dbg !12778

if.end16:                                         ; preds = %lor.lhs.false
  br label %sw.epilog, !dbg !12779

sw.bb17:                                          ; preds = %while.body
  %10 = load i32, i32* %nesting_depth, align 4, !dbg !12780
  %inc = add i32 %10, 1, !dbg !12780
  store i32 %inc, i32* %nesting_depth, align 4, !dbg !12780
  br label %sw.epilog, !dbg !12781

sw.bb18:                                          ; preds = %while.body
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12782
  call void @c_parser_consume_pragma(%struct.c_parser* %11), !dbg !12783
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12784
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %12), !dbg !12785
  %13 = load i8, i8* %save_error, align 1, !dbg !12786
  %conv19 = zext i8 %13 to i32, !dbg !12786
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12787
  %error20 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %14, i32 0, i32 2, !dbg !12788
  %15 = trunc i32 %conv19 to i8, !dbg !12789
  %bf.load21 = load i8, i8* %error20, align 2, !dbg !12789
  %bf.value = and i8 %15, 1, !dbg !12789
  %bf.clear22 = and i8 %bf.load21, -2, !dbg !12789
  %bf.set = or i8 %bf.clear22, %bf.value, !dbg !12789
  store i8 %bf.set, i8* %error20, align 2, !dbg !12789
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !12789
  br label %while.body, !dbg !12790, !llvm.loop !12791

sw.default:                                       ; preds = %while.body
  br label %sw.epilog, !dbg !12793

sw.epilog:                                        ; preds = %sw.default, %sw.bb17, %if.end16, %if.end10, %if.end
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12794
  call void @c_parser_consume_token(%struct.c_parser* %16), !dbg !12795
  br label %while.body, !dbg !12742, !llvm.loop !12791

finished:                                         ; preds = %if.then15, %if.then9
  call void @llvm.dbg.label(metadata !12796), !dbg !12797
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12798
  %error23 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %17, i32 0, i32 2, !dbg !12799
  %bf.load24 = load i8, i8* %error23, align 2, !dbg !12800
  %bf.clear25 = and i8 %bf.load24, -2, !dbg !12800
  store i8 %bf.clear25, i8* %error23, align 2, !dbg !12800
  br label %return, !dbg !12801

return:                                           ; preds = %finished, %if.then, %sw.bb
  ret void, !dbg !12801
}

declare dso_local %union.tree_node* @check_for_loop_decls(i32) #2

declare dso_local %union.tree_node* @c_process_expr_stmt(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_asm_operands(%struct.c_parser* %parser, i8 zeroext %convert_p) #0 !dbg !12802 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %convert_p.addr = alloca i8, align 1
  %list = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %name = alloca %union.tree_node*, align 8
  %str = alloca %union.tree_node*, align 8
  %expr = alloca %struct.c_expr, align 8
  %id = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.c_expr, align 8
  %tmp25 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12805, metadata !DIExpression()), !dbg !12806
  store i8 %convert_p, i8* %convert_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %convert_p.addr, metadata !12807, metadata !DIExpression()), !dbg !12808
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !12809, metadata !DIExpression()), !dbg !12810
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !12810
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !12811, metadata !DIExpression()), !dbg !12812
  br label %while.body, !dbg !12813

while.body:                                       ; preds = %entry, %if.end46
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !12814, metadata !DIExpression()), !dbg !12816
  call void @llvm.dbg.declare(metadata %union.tree_node** %str, metadata !12817, metadata !DIExpression()), !dbg !12818
  call void @llvm.dbg.declare(metadata %struct.c_expr* %expr, metadata !12819, metadata !DIExpression()), !dbg !12820
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12821
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 39), !dbg !12823
  %tobool = icmp ne i8 %call, 0, !dbg !12823
  br i1 %tobool, label %if.then, label %if.else10, !dbg !12824

if.then:                                          ; preds = %while.body
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12825
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !12827
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12828
  %call1 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %2, i32 53), !dbg !12830
  %tobool2 = icmp ne i8 %call1, 0, !dbg !12830
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !12831

if.then3:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !12832, metadata !DIExpression()), !dbg !12834
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12835
  %call4 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !12836
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call4, i32 0, i32 1, !dbg !12837
  %4 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !12837
  store %union.tree_node* %4, %union.tree_node** %id, align 8, !dbg !12834
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12838
  call void @c_parser_consume_token(%struct.c_parser* %5), !dbg !12839
  %6 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !12840
  %identifier = bitcast %union.tree_node* %6 to %struct.tree_identifier*, !dbg !12840
  %id5 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !12840
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id5, i32 0, i32 1, !dbg !12840
  %7 = load i32, i32* %len, align 8, !dbg !12840
  %8 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !12841
  %identifier6 = bitcast %union.tree_node* %8 to %struct.tree_identifier*, !dbg !12841
  %id7 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier6, i32 0, i32 1, !dbg !12841
  %str8 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id7, i32 0, i32 0, !dbg !12841
  %9 = load i8*, i8** %str8, align 8, !dbg !12841
  %call9 = call %union.tree_node* @build_string(i32 %7, i8* %9), !dbg !12842
  store %union.tree_node* %call9, %union.tree_node** %name, align 8, !dbg !12843
  br label %if.end, !dbg !12844

if.else:                                          ; preds = %if.then
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12845
  call void @c_parser_error(%struct.c_parser* %10, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !12847
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12848
  call void @c_parser_skip_until_found(%struct.c_parser* %11, i32 40, i8* null), !dbg !12849
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12850
  br label %return, !dbg !12850

if.end:                                           ; preds = %if.then3
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12851
  call void @c_parser_skip_until_found(%struct.c_parser* %12, i32 40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0)), !dbg !12852
  br label %if.end11, !dbg !12853

if.else10:                                        ; preds = %while.body
  store %union.tree_node* null, %union.tree_node** %name, align 8, !dbg !12854
  br label %if.end11

if.end11:                                         ; preds = %if.else10, %if.end
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12855
  %call12 = call %union.tree_node* @c_parser_asm_string_literal(%struct.c_parser* %13), !dbg !12856
  store %union.tree_node* %call12, %union.tree_node** %str, align 8, !dbg !12857
  %14 = load %union.tree_node*, %union.tree_node** %str, align 8, !dbg !12858
  %cmp = icmp eq %union.tree_node* %14, null, !dbg !12860
  br i1 %cmp, label %if.then13, label %if.end14, !dbg !12861

if.then13:                                        ; preds = %if.end11
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12862
  br label %return, !dbg !12862

if.end14:                                         ; preds = %if.end11
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12863
  %lex_untranslated_string = getelementptr inbounds %struct.c_parser, %struct.c_parser* %15, i32 0, i32 2, !dbg !12864
  %bf.load = load i8, i8* %lex_untranslated_string, align 2, !dbg !12865
  %bf.clear = and i8 %bf.load, -9, !dbg !12865
  store i8 %bf.clear, i8* %lex_untranslated_string, align 2, !dbg !12865
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12866
  %call15 = call zeroext i8 @c_parser_require(%struct.c_parser* %16, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !12868
  %tobool16 = icmp ne i8 %call15, 0, !dbg !12868
  br i1 %tobool16, label %if.end21, label %if.then17, !dbg !12869

if.then17:                                        ; preds = %if.end14
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12870
  %lex_untranslated_string18 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %17, i32 0, i32 2, !dbg !12872
  %bf.load19 = load i8, i8* %lex_untranslated_string18, align 2, !dbg !12873
  %bf.clear20 = and i8 %bf.load19, -9, !dbg !12873
  %bf.set = or i8 %bf.clear20, 8, !dbg !12873
  store i8 %bf.set, i8* %lex_untranslated_string18, align 2, !dbg !12873
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12874
  br label %return, !dbg !12874

if.end21:                                         ; preds = %if.end14
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12875
  %call22 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %18), !dbg !12876
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call22, i32 0, i32 2, !dbg !12877
  %19 = load i32, i32* %location, align 8, !dbg !12877
  store i32 %19, i32* %loc, align 4, !dbg !12878
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12879
  call void @c_parser_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %20), !dbg !12880
  %21 = bitcast %struct.c_expr* %expr to i8*, !dbg !12880
  %22 = bitcast %struct.c_expr* %tmp to i8*, !dbg !12880
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 24, i1 false), !dbg !12880
  %23 = load i8, i8* %convert_p.addr, align 1, !dbg !12881
  %tobool23 = icmp ne i8 %23, 0, !dbg !12881
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !12883

if.then24:                                        ; preds = %if.end21
  %24 = load i32, i32* %loc, align 4, !dbg !12884
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp25, i32 %24, %struct.c_expr* byval(%struct.c_expr) align 8 %expr), !dbg !12885
  %25 = bitcast %struct.c_expr* %expr to i8*, !dbg !12885
  %26 = bitcast %struct.c_expr* %tmp25 to i8*, !dbg !12885
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false), !dbg !12885
  br label %if.end26, !dbg !12886

if.end26:                                         ; preds = %if.then24, %if.end21
  %value27 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !12887
  %27 = load %union.tree_node*, %union.tree_node** %value27, align 8, !dbg !12887
  %call28 = call %union.tree_node* @c_fully_fold(%union.tree_node* %27, i8 zeroext 0, i8* null), !dbg !12888
  %value29 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !12889
  store %union.tree_node* %call28, %union.tree_node** %value29, align 8, !dbg !12890
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12891
  %lex_untranslated_string30 = getelementptr inbounds %struct.c_parser, %struct.c_parser* %28, i32 0, i32 2, !dbg !12892
  %bf.load31 = load i8, i8* %lex_untranslated_string30, align 2, !dbg !12893
  %bf.clear32 = and i8 %bf.load31, -9, !dbg !12893
  %bf.set33 = or i8 %bf.clear32, 8, !dbg !12893
  store i8 %bf.set33, i8* %lex_untranslated_string30, align 2, !dbg !12893
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12894
  %call34 = call zeroext i8 @c_parser_require(%struct.c_parser* %29, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !12896
  %tobool35 = icmp ne i8 %call34, 0, !dbg !12896
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !12897

if.then36:                                        ; preds = %if.end26
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12898
  call void @c_parser_skip_until_found(%struct.c_parser* %30, i32 21, i8* null), !dbg !12900
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12901
  br label %return, !dbg !12901

if.end37:                                         ; preds = %if.end26
  %31 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !12902
  %32 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12903
  %33 = load %union.tree_node*, %union.tree_node** %str, align 8, !dbg !12903
  %call38 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* %32, %union.tree_node* %33), !dbg !12903
  %value39 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %expr, i32 0, i32 0, !dbg !12903
  %34 = load %union.tree_node*, %union.tree_node** %value39, align 8, !dbg !12903
  %call40 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* %call38, %union.tree_node* %34), !dbg !12903
  %call41 = call %union.tree_node* @chainon(%union.tree_node* %31, %union.tree_node* %call40), !dbg !12904
  store %union.tree_node* %call41, %union.tree_node** %list, align 8, !dbg !12905
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12906
  %call42 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %35, i32 19), !dbg !12908
  %tobool43 = icmp ne i8 %call42, 0, !dbg !12908
  br i1 %tobool43, label %if.then44, label %if.else45, !dbg !12909

if.then44:                                        ; preds = %if.end37
  %36 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12910
  call void @c_parser_consume_token(%struct.c_parser* %36), !dbg !12911
  br label %if.end46, !dbg !12911

if.else45:                                        ; preds = %if.end37
  br label %while.end, !dbg !12912

if.end46:                                         ; preds = %if.then44
  br label %while.body, !dbg !12813, !llvm.loop !12913

while.end:                                        ; preds = %if.else45
  %37 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !12915
  store %union.tree_node* %37, %union.tree_node** %retval, align 8, !dbg !12916
  br label %return, !dbg !12916

return:                                           ; preds = %while.end, %if.then36, %if.then17, %if.then13, %if.else
  %38 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12917
  ret %union.tree_node* %38, !dbg !12917
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_asm_clobbers(%struct.c_parser* %parser) #0 !dbg !12918 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %list = alloca %union.tree_node*, align 8
  %str = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12919, metadata !DIExpression()), !dbg !12920
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !12921, metadata !DIExpression()), !dbg !12922
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !12922
  br label %while.body, !dbg !12923

while.body:                                       ; preds = %entry, %if.end6
  call void @llvm.dbg.declare(metadata %union.tree_node** %str, metadata !12924, metadata !DIExpression()), !dbg !12926
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12927
  %call = call %union.tree_node* @c_parser_asm_string_literal(%struct.c_parser* %0), !dbg !12928
  store %union.tree_node* %call, %union.tree_node** %str, align 8, !dbg !12926
  %1 = load %union.tree_node*, %union.tree_node** %str, align 8, !dbg !12929
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !12929
  br i1 %tobool, label %if.then, label %if.else, !dbg !12931

if.then:                                          ; preds = %while.body
  %2 = load %union.tree_node*, %union.tree_node** %str, align 8, !dbg !12932
  %3 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !12932
  %call1 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %2, %union.tree_node* %3), !dbg !12932
  store %union.tree_node* %call1, %union.tree_node** %list, align 8, !dbg !12933
  br label %if.end, !dbg !12934

if.else:                                          ; preds = %while.body
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12935
  br label %return, !dbg !12935

if.end:                                           ; preds = %if.then
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12936
  %call2 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %4, i32 19), !dbg !12938
  %tobool3 = icmp ne i8 %call2, 0, !dbg !12938
  br i1 %tobool3, label %if.then4, label %if.else5, !dbg !12939

if.then4:                                         ; preds = %if.end
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12940
  call void @c_parser_consume_token(%struct.c_parser* %5), !dbg !12941
  br label %if.end6, !dbg !12941

if.else5:                                         ; preds = %if.end
  br label %while.end, !dbg !12942

if.end6:                                          ; preds = %if.then4
  br label %while.body, !dbg !12923, !llvm.loop !12943

while.end:                                        ; preds = %if.else5
  %6 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !12945
  store %union.tree_node* %6, %union.tree_node** %retval, align 8, !dbg !12946
  br label %return, !dbg !12946

return:                                           ; preds = %while.end, %if.else
  %7 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !12947
  ret %union.tree_node* %7, !dbg !12947
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_asm_goto_operands(%struct.c_parser* %parser) #0 !dbg !12948 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %list = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %label = alloca %union.tree_node*, align 8
  %tok = alloca %struct.c_token*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !12949, metadata !DIExpression()), !dbg !12950
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !12951, metadata !DIExpression()), !dbg !12952
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !12952
  br label %while.body, !dbg !12953

while.body:                                       ; preds = %entry, %if.end12
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !12954, metadata !DIExpression()), !dbg !12956
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !12957, metadata !DIExpression()), !dbg !12958
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12959
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 53), !dbg !12961
  %tobool = icmp ne i8 %call, 0, !dbg !12961
  br i1 %tobool, label %if.then, label %if.else, !dbg !12962

if.then:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata %struct.c_token** %tok, metadata !12963, metadata !DIExpression()), !dbg !12965
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12966
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !12967
  store %struct.c_token* %call1, %struct.c_token** %tok, align 8, !dbg !12965
  %2 = load %struct.c_token*, %struct.c_token** %tok, align 8, !dbg !12968
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %2, i32 0, i32 1, !dbg !12969
  %3 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !12969
  store %union.tree_node* %3, %union.tree_node** %name, align 8, !dbg !12970
  %4 = load %struct.c_token*, %struct.c_token** %tok, align 8, !dbg !12971
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %4, i32 0, i32 2, !dbg !12972
  %5 = load i32, i32* %location, align 8, !dbg !12972
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12973
  %call2 = call %union.tree_node* @lookup_label_for_goto(i32 %5, %union.tree_node* %6), !dbg !12974
  store %union.tree_node* %call2, %union.tree_node** %label, align 8, !dbg !12975
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12976
  call void @c_parser_consume_token(%struct.c_parser* %7), !dbg !12977
  %8 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !12978
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !12978
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !12978
  %bf.load = load i64, i64* %9, align 8, !dbg !12979
  %bf.clear = and i64 %bf.load, -16777217, !dbg !12979
  %bf.set = or i64 %bf.clear, 16777216, !dbg !12979
  store i64 %bf.set, i64* %9, align 8, !dbg !12979
  br label %if.end, !dbg !12980

if.else:                                          ; preds = %while.body
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12981
  call void @c_parser_error(%struct.c_parser* %10, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !12983
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !12984
  br label %return, !dbg !12984

if.end:                                           ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12985
  %identifier = bitcast %union.tree_node* %11 to %struct.tree_identifier*, !dbg !12985
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !12985
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !12985
  %12 = load i32, i32* %len, align 8, !dbg !12985
  %13 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12986
  %identifier3 = bitcast %union.tree_node* %13 to %struct.tree_identifier*, !dbg !12986
  %id4 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier3, i32 0, i32 1, !dbg !12986
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id4, i32 0, i32 0, !dbg !12986
  %14 = load i8*, i8** %str, align 8, !dbg !12986
  %call5 = call %union.tree_node* @build_string(i32 %12, i8* %14), !dbg !12987
  store %union.tree_node* %call5, %union.tree_node** %name, align 8, !dbg !12988
  %15 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !12989
  %16 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !12989
  %17 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !12989
  %call6 = call %union.tree_node* @tree_cons_stat(%union.tree_node* %15, %union.tree_node* %16, %union.tree_node* %17), !dbg !12989
  store %union.tree_node* %call6, %union.tree_node** %list, align 8, !dbg !12990
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12991
  %call7 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %18, i32 19), !dbg !12993
  %tobool8 = icmp ne i8 %call7, 0, !dbg !12993
  br i1 %tobool8, label %if.then9, label %if.else10, !dbg !12994

if.then9:                                         ; preds = %if.end
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !12995
  call void @c_parser_consume_token(%struct.c_parser* %19), !dbg !12996
  br label %if.end12, !dbg !12996

if.else10:                                        ; preds = %if.end
  %20 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !12997
  %call11 = call %union.tree_node* @nreverse(%union.tree_node* %20), !dbg !12998
  store %union.tree_node* %call11, %union.tree_node** %retval, align 8, !dbg !12999
  br label %return, !dbg !12999

if.end12:                                         ; preds = %if.then9
  br label %while.body, !dbg !12953, !llvm.loop !13000

return:                                           ; preds = %if.else10, %if.else
  %21 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13002
  ret %union.tree_node* %21, !dbg !13002
}

declare dso_local %union.tree_node* @build_asm_stmt(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_asm_expr(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8 zeroext) #2

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @lookup_label_for_goto(i32, %union.tree_node*) #2

declare dso_local void @objc_begin_try_stmt(i32, %union.tree_node*) #2

declare dso_local void @objc_begin_catch_clause(%union.tree_node*) #2

declare dso_local void @objc_finish_catch_clause() #2

declare dso_local void @objc_build_finally_clause(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @objc_finish_try_stmt() #2

declare dso_local %union.tree_node* @objc_build_synchronized(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @start_struct(i32, i32, %union.tree_node*, %struct.c_struct_parse_info**) #2

declare dso_local %union.tree_node* @objc_get_class_ivars(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_struct_declaration(%struct.c_parser* %parser) #0 !dbg !13003 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %specs = alloca %struct.c_declspecs*, align 8
  %prefix_attrs = alloca %union.tree_node*, align 8
  %all_prefix_attrs = alloca %union.tree_node*, align 8
  %decls = alloca %union.tree_node*, align 8
  %decl_loc = alloca i32, align 4
  %ext = alloca i32, align 4
  %decl = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  %attrs = alloca %union.tree_node*, align 8
  %declarator = alloca %struct.c_declarator*, align 8
  %dummy = alloca i8, align 1
  %postfix_attrs = alloca %union.tree_node*, align 8
  %width = alloca %union.tree_node*, align 8
  %d = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !13004, metadata !DIExpression()), !dbg !13005
  call void @llvm.dbg.declare(metadata %struct.c_declspecs** %specs, metadata !13006, metadata !DIExpression()), !dbg !13007
  call void @llvm.dbg.declare(metadata %union.tree_node** %prefix_attrs, metadata !13008, metadata !DIExpression()), !dbg !13009
  call void @llvm.dbg.declare(metadata %union.tree_node** %all_prefix_attrs, metadata !13010, metadata !DIExpression()), !dbg !13011
  call void @llvm.dbg.declare(metadata %union.tree_node** %decls, metadata !13012, metadata !DIExpression()), !dbg !13013
  call void @llvm.dbg.declare(metadata i32* %decl_loc, metadata !13014, metadata !DIExpression()), !dbg !13015
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13016
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 54), !dbg !13018
  %tobool = icmp ne i8 %call, 0, !dbg !13018
  br i1 %tobool, label %if.then, label %if.end, !dbg !13019

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %ext, metadata !13020, metadata !DIExpression()), !dbg !13022
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !13023, metadata !DIExpression()), !dbg !13024
  %call1 = call i32 @disable_extension_diagnostics(), !dbg !13025
  store i32 %call1, i32* %ext, align 4, !dbg !13026
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13027
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !13028
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13029
  %call2 = call %union.tree_node* @c_parser_struct_declaration(%struct.c_parser* %2), !dbg !13030
  store %union.tree_node* %call2, %union.tree_node** %decl, align 8, !dbg !13031
  %3 = load i32, i32* %ext, align 4, !dbg !13032
  call void @restore_extension_diagnostics(i32 %3), !dbg !13033
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !13034
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !13035
  br label %return, !dbg !13035

if.end:                                           ; preds = %entry
  %call3 = call %struct.c_declspecs* @build_null_declspecs(), !dbg !13036
  store %struct.c_declspecs* %call3, %struct.c_declspecs** %specs, align 8, !dbg !13037
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13038
  %call4 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !13039
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call4, i32 0, i32 2, !dbg !13040
  %6 = load i32, i32* %location, align 8, !dbg !13040
  store i32 %6, i32* %decl_loc, align 4, !dbg !13041
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13042
  %8 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !13043
  call void @c_parser_declspecs(%struct.c_parser* %7, %struct.c_declspecs* %8, i8 zeroext 0, i8 zeroext 1, i8 zeroext 1), !dbg !13044
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13045
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %9, i32 0, i32 2, !dbg !13047
  %bf.load = load i8, i8* %error, align 2, !dbg !13047
  %bf.clear = and i8 %bf.load, 1, !dbg !13047
  %bf.cast = zext i8 %bf.clear to i32, !dbg !13047
  %tobool5 = icmp ne i32 %bf.cast, 0, !dbg !13045
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !13048

if.then6:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13049
  br label %return, !dbg !13049

if.end7:                                          ; preds = %if.end
  %10 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !13050
  %declspecs_seen_p = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %10, i32 0, i32 6, !dbg !13052
  %bf.load8 = load i8, i8* %declspecs_seen_p, align 8, !dbg !13052
  %bf.lshr = lshr i8 %bf.load8, 1, !dbg !13052
  %bf.clear9 = and i8 %bf.lshr, 1, !dbg !13052
  %bf.cast10 = zext i8 %bf.clear9 to i32, !dbg !13052
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !13050
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !13053

if.then12:                                        ; preds = %if.end7
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13054
  call void @c_parser_error(%struct.c_parser* %11, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.16, i64 0, i64 0)), !dbg !13056
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13057
  br label %return, !dbg !13057

if.end13:                                         ; preds = %if.end7
  %12 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !13058
  %call14 = call %struct.c_declspecs* @finish_declspecs(%struct.c_declspecs* %12), !dbg !13059
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13060
  %call15 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %13, i32 43), !dbg !13062
  %tobool16 = icmp ne i8 %call15, 0, !dbg !13062
  br i1 %tobool16, label %if.then17, label %if.end34, !dbg !13063

if.then17:                                        ; preds = %if.end13
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !13064, metadata !DIExpression()), !dbg !13066
  %14 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !13067
  %type_seen_p = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %14, i32 0, i32 6, !dbg !13069
  %bf.load18 = load i8, i8* %type_seen_p, align 8, !dbg !13069
  %bf.lshr19 = lshr i8 %bf.load18, 2, !dbg !13069
  %bf.clear20 = and i8 %bf.lshr19, 1, !dbg !13069
  %bf.cast21 = zext i8 %bf.clear20 to i32, !dbg !13069
  %tobool22 = icmp ne i32 %bf.cast21, 0, !dbg !13067
  br i1 %tobool22, label %if.else, label %if.then23, !dbg !13070

if.then23:                                        ; preds = %if.then17
  %15 = load i32, i32* %decl_loc, align 4, !dbg !13071
  %call24 = call zeroext i8 (i32, i32, i8*, ...) @pedwarn(i32 %15, i32 834, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.60, i64 0, i64 0)), !dbg !13073
  %16 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !13074
  %17 = load i32, i32* @pedantic, align 4, !dbg !13075
  call void @shadow_tag_warned(%struct.c_declspecs* %16, i32 %17), !dbg !13076
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !13077
  br label %if.end33, !dbg !13078

if.else:                                          ; preds = %if.then17
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs, metadata !13079, metadata !DIExpression()), !dbg !13081
  store %union.tree_node* null, %union.tree_node** %attrs, align 8, !dbg !13081
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13082
  %call25 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %18), !dbg !13083
  %location26 = getelementptr inbounds %struct.c_token, %struct.c_token* %call25, i32 0, i32 2, !dbg !13084
  %19 = load i32, i32* %location26, align 8, !dbg !13084
  %call27 = call %struct.c_declarator* @build_id_declarator(%union.tree_node* null), !dbg !13085
  %20 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !13086
  %call28 = call %union.tree_node* @grokfield(i32 %19, %struct.c_declarator* %call27, %struct.c_declspecs* %20, %union.tree_node* null, %union.tree_node** %attrs), !dbg !13087
  store %union.tree_node* %call28, %union.tree_node** %ret, align 8, !dbg !13088
  %21 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !13089
  %tobool29 = icmp ne %union.tree_node* %21, null, !dbg !13089
  br i1 %tobool29, label %if.then30, label %if.end32, !dbg !13091

if.then30:                                        ; preds = %if.else
  %22 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !13092
  %call31 = call %union.tree_node* @decl_attributes(%union.tree_node** %ret, %union.tree_node* %22, i32 0), !dbg !13093
  br label %if.end32, !dbg !13093

if.end32:                                         ; preds = %if.then30, %if.else
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then23
  %23 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !13094
  store %union.tree_node* %23, %union.tree_node** %retval, align 8, !dbg !13095
  br label %return, !dbg !13095

if.end34:                                         ; preds = %if.end13
  call void @pending_xref_error(), !dbg !13096
  %24 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !13097
  %attrs35 = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %24, i32 0, i32 3, !dbg !13098
  %25 = load %union.tree_node*, %union.tree_node** %attrs35, align 8, !dbg !13098
  store %union.tree_node* %25, %union.tree_node** %prefix_attrs, align 8, !dbg !13099
  %26 = load %union.tree_node*, %union.tree_node** %prefix_attrs, align 8, !dbg !13100
  store %union.tree_node* %26, %union.tree_node** %all_prefix_attrs, align 8, !dbg !13101
  %27 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !13102
  %attrs36 = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %27, i32 0, i32 3, !dbg !13103
  store %union.tree_node* null, %union.tree_node** %attrs36, align 8, !dbg !13104
  store %union.tree_node* null, %union.tree_node** %decls, align 8, !dbg !13105
  br label %while.body, !dbg !13106

while.body:                                       ; preds = %if.end34, %if.end107
  call void @llvm.dbg.declare(metadata %struct.c_declarator** %declarator, metadata !13107, metadata !DIExpression()), !dbg !13109
  call void @llvm.dbg.declare(metadata i8* %dummy, metadata !13110, metadata !DIExpression()), !dbg !13111
  store i8 0, i8* %dummy, align 1, !dbg !13111
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13112
  %call37 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %28, i32 18), !dbg !13114
  %tobool38 = icmp ne i8 %call37, 0, !dbg !13114
  br i1 %tobool38, label %if.then39, label %if.else41, !dbg !13115

if.then39:                                        ; preds = %while.body
  %call40 = call %struct.c_declarator* @build_id_declarator(%union.tree_node* null), !dbg !13116
  store %struct.c_declarator* %call40, %struct.c_declarator** %declarator, align 8, !dbg !13117
  br label %if.end48, !dbg !13118

if.else41:                                        ; preds = %while.body
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13119
  %30 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !13120
  %type_seen_p42 = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %30, i32 0, i32 6, !dbg !13121
  %bf.load43 = load i8, i8* %type_seen_p42, align 8, !dbg !13121
  %bf.lshr44 = lshr i8 %bf.load43, 2, !dbg !13121
  %bf.clear45 = and i8 %bf.lshr44, 1, !dbg !13121
  %bf.cast46 = zext i8 %bf.clear45 to i32, !dbg !13121
  %conv = trunc i32 %bf.cast46 to i8, !dbg !13120
  %call47 = call %struct.c_declarator* @c_parser_declarator(%struct.c_parser* %29, i8 zeroext %conv, i32 0, i8* %dummy), !dbg !13122
  store %struct.c_declarator* %call47, %struct.c_declarator** %declarator, align 8, !dbg !13123
  br label %if.end48

if.end48:                                         ; preds = %if.else41, %if.then39
  %31 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !13124
  %cmp = icmp eq %struct.c_declarator* %31, null, !dbg !13126
  br i1 %cmp, label %if.then50, label %if.end51, !dbg !13127

if.then50:                                        ; preds = %if.end48
  %32 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13128
  call void @c_parser_skip_to_end_of_block_or_statement(%struct.c_parser* %32), !dbg !13130
  br label %while.end, !dbg !13131

if.end51:                                         ; preds = %if.end48
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13132
  %call52 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %33, i32 18), !dbg !13134
  %conv53 = zext i8 %call52 to i32, !dbg !13134
  %tobool54 = icmp ne i32 %conv53, 0, !dbg !13134
  br i1 %tobool54, label %if.then70, label %lor.lhs.false, !dbg !13135

lor.lhs.false:                                    ; preds = %if.end51
  %34 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13136
  %call55 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %34, i32 19), !dbg !13137
  %conv56 = zext i8 %call55 to i32, !dbg !13137
  %tobool57 = icmp ne i32 %conv56, 0, !dbg !13137
  br i1 %tobool57, label %if.then70, label %lor.lhs.false58, !dbg !13138

lor.lhs.false58:                                  ; preds = %lor.lhs.false
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13139
  %call59 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %35, i32 43), !dbg !13140
  %conv60 = zext i8 %call59 to i32, !dbg !13140
  %tobool61 = icmp ne i32 %conv60, 0, !dbg !13140
  br i1 %tobool61, label %if.then70, label %lor.lhs.false62, !dbg !13141

lor.lhs.false62:                                  ; preds = %lor.lhs.false58
  %36 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13142
  %call63 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %36, i32 42), !dbg !13143
  %conv64 = zext i8 %call63 to i32, !dbg !13143
  %tobool65 = icmp ne i32 %conv64, 0, !dbg !13143
  br i1 %tobool65, label %if.then70, label %lor.lhs.false66, !dbg !13144

lor.lhs.false66:                                  ; preds = %lor.lhs.false62
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13145
  %call67 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %37, i32 52), !dbg !13146
  %conv68 = zext i8 %call67 to i32, !dbg !13146
  %tobool69 = icmp ne i32 %conv68, 0, !dbg !13146
  br i1 %tobool69, label %if.then70, label %if.else106, !dbg !13147

if.then70:                                        ; preds = %lor.lhs.false66, %lor.lhs.false62, %lor.lhs.false58, %lor.lhs.false, %if.end51
  call void @llvm.dbg.declare(metadata %union.tree_node** %postfix_attrs, metadata !13148, metadata !DIExpression()), !dbg !13150
  store %union.tree_node* null, %union.tree_node** %postfix_attrs, align 8, !dbg !13150
  call void @llvm.dbg.declare(metadata %union.tree_node** %width, metadata !13151, metadata !DIExpression()), !dbg !13152
  store %union.tree_node* null, %union.tree_node** %width, align 8, !dbg !13152
  call void @llvm.dbg.declare(metadata %union.tree_node** %d, metadata !13153, metadata !DIExpression()), !dbg !13154
  %38 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13155
  %call71 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %38, i32 18), !dbg !13157
  %tobool72 = icmp ne i8 %call71, 0, !dbg !13157
  br i1 %tobool72, label %if.then73, label %if.end74, !dbg !13158

if.then73:                                        ; preds = %if.then70
  %39 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13159
  call void @c_parser_consume_token(%struct.c_parser* %39), !dbg !13161
  %40 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13162
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp, %struct.c_parser* %40, %struct.c_expr* null), !dbg !13163
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !13164
  %41 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !13164
  store %union.tree_node* %41, %union.tree_node** %width, align 8, !dbg !13165
  br label %if.end74, !dbg !13166

if.end74:                                         ; preds = %if.then73, %if.then70
  %42 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13167
  %call75 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %42, i32 52), !dbg !13169
  %tobool76 = icmp ne i8 %call75, 0, !dbg !13169
  br i1 %tobool76, label %if.then77, label %if.end79, !dbg !13170

if.then77:                                        ; preds = %if.end74
  %43 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13171
  %call78 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %43), !dbg !13172
  store %union.tree_node* %call78, %union.tree_node** %postfix_attrs, align 8, !dbg !13173
  br label %if.end79, !dbg !13174

if.end79:                                         ; preds = %if.then77, %if.end74
  %44 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13175
  %call80 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %44), !dbg !13176
  %location81 = getelementptr inbounds %struct.c_token, %struct.c_token* %call80, i32 0, i32 2, !dbg !13177
  %45 = load i32, i32* %location81, align 8, !dbg !13177
  %46 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !13178
  %47 = load %struct.c_declspecs*, %struct.c_declspecs** %specs, align 8, !dbg !13179
  %48 = load %union.tree_node*, %union.tree_node** %width, align 8, !dbg !13180
  %call82 = call %union.tree_node* @grokfield(i32 %45, %struct.c_declarator* %46, %struct.c_declspecs* %47, %union.tree_node* %48, %union.tree_node** %all_prefix_attrs), !dbg !13181
  store %union.tree_node* %call82, %union.tree_node** %d, align 8, !dbg !13182
  %49 = load %union.tree_node*, %union.tree_node** %postfix_attrs, align 8, !dbg !13183
  %50 = load %union.tree_node*, %union.tree_node** %all_prefix_attrs, align 8, !dbg !13184
  %call83 = call %union.tree_node* @chainon(%union.tree_node* %49, %union.tree_node* %50), !dbg !13185
  %call84 = call %union.tree_node* @decl_attributes(%union.tree_node** %d, %union.tree_node* %call83, i32 0), !dbg !13186
  %51 = load %union.tree_node*, %union.tree_node** %decls, align 8, !dbg !13187
  %52 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !13188
  %common = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !13188
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !13188
  store %union.tree_node* %51, %union.tree_node** %chain, align 8, !dbg !13189
  %53 = load %union.tree_node*, %union.tree_node** %d, align 8, !dbg !13190
  store %union.tree_node* %53, %union.tree_node** %decls, align 8, !dbg !13191
  %54 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13192
  %call85 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %54, i32 52), !dbg !13194
  %tobool86 = icmp ne i8 %call85, 0, !dbg !13194
  br i1 %tobool86, label %if.then87, label %if.else90, !dbg !13195

if.then87:                                        ; preds = %if.end79
  %55 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13196
  %call88 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %55), !dbg !13197
  %56 = load %union.tree_node*, %union.tree_node** %prefix_attrs, align 8, !dbg !13198
  %call89 = call %union.tree_node* @chainon(%union.tree_node* %call88, %union.tree_node* %56), !dbg !13199
  store %union.tree_node* %call89, %union.tree_node** %all_prefix_attrs, align 8, !dbg !13200
  br label %if.end91, !dbg !13201

if.else90:                                        ; preds = %if.end79
  %57 = load %union.tree_node*, %union.tree_node** %prefix_attrs, align 8, !dbg !13202
  store %union.tree_node* %57, %union.tree_node** %all_prefix_attrs, align 8, !dbg !13203
  br label %if.end91

if.end91:                                         ; preds = %if.else90, %if.then87
  %58 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13204
  %call92 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %58, i32 19), !dbg !13206
  %tobool93 = icmp ne i8 %call92, 0, !dbg !13206
  br i1 %tobool93, label %if.then94, label %if.else95, !dbg !13207

if.then94:                                        ; preds = %if.end91
  %59 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13208
  call void @c_parser_consume_token(%struct.c_parser* %59), !dbg !13209
  br label %if.end105, !dbg !13209

if.else95:                                        ; preds = %if.end91
  %60 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13210
  %call96 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %60, i32 43), !dbg !13212
  %conv97 = zext i8 %call96 to i32, !dbg !13212
  %tobool98 = icmp ne i32 %conv97, 0, !dbg !13212
  br i1 %tobool98, label %if.then103, label %lor.lhs.false99, !dbg !13213

lor.lhs.false99:                                  ; preds = %if.else95
  %61 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13214
  %call100 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %61, i32 42), !dbg !13215
  %conv101 = zext i8 %call100 to i32, !dbg !13215
  %tobool102 = icmp ne i32 %conv101, 0, !dbg !13215
  br i1 %tobool102, label %if.then103, label %if.else104, !dbg !13216

if.then103:                                       ; preds = %lor.lhs.false99, %if.else95
  br label %while.end, !dbg !13217

if.else104:                                       ; preds = %lor.lhs.false99
  %62 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13219
  call void @c_parser_error(%struct.c_parser* %62, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.61, i64 0, i64 0)), !dbg !13221
  br label %while.end, !dbg !13222

if.end105:                                        ; preds = %if.then94
  br label %if.end107, !dbg !13223

if.else106:                                       ; preds = %lor.lhs.false66
  %63 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13224
  call void @c_parser_error(%struct.c_parser* %63, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.62, i64 0, i64 0)), !dbg !13226
  br label %while.end, !dbg !13227

if.end107:                                        ; preds = %if.end105
  br label %while.body, !dbg !13106, !llvm.loop !13228

while.end:                                        ; preds = %if.else106, %if.else104, %if.then103, %if.then50
  %64 = load %union.tree_node*, %union.tree_node** %decls, align 8, !dbg !13230
  store %union.tree_node* %64, %union.tree_node** %retval, align 8, !dbg !13231
  br label %return, !dbg !13231

return:                                           ; preds = %while.end, %if.end33, %if.then12, %if.then6, %if.then
  %65 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13232
  ret %union.tree_node* %65, !dbg !13232
}

declare dso_local %union.tree_node* @finish_struct(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.c_struct_parse_info*) #2

declare dso_local void @shadow_tag_warned(%struct.c_declspecs*, i32) #2

declare dso_local %union.tree_node* @grokfield(i32, %struct.c_declarator*, %struct.c_declspecs*, %union.tree_node*, %union.tree_node**) #2

declare dso_local %struct.c_declarator* @build_id_declarator(%union.tree_node*) #2

declare dso_local void @pop_maybe_used(i8 zeroext) #2

declare dso_local zeroext i8 @variably_modified_type_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.c_declarator* @make_pointer_declarator(%struct.c_declspecs*, %struct.c_declarator*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.c_declarator* @c_parser_direct_declarator(%struct.c_parser* %parser, i8 zeroext %type_seen_p, i32 %kind, i8* %seen_id) #0 !dbg !13233 {
entry:
  %retval = alloca %struct.c_declarator*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %type_seen_p.addr = alloca i8, align 1
  %kind.addr = alloca i32, align 4
  %seen_id.addr = alloca i8*, align 8
  %inner = alloca %struct.c_declarator*, align 8
  %inner25 = alloca %struct.c_declarator*, align 8
  %attrs = alloca %union.tree_node*, align 8
  %inner32 = alloca %struct.c_declarator*, align 8
  %args = alloca %struct.c_arg_info*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !13234, metadata !DIExpression()), !dbg !13235
  store i8 %type_seen_p, i8* %type_seen_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %type_seen_p.addr, metadata !13236, metadata !DIExpression()), !dbg !13237
  store i32 %kind, i32* %kind.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kind.addr, metadata !13238, metadata !DIExpression()), !dbg !13239
  store i8* %seen_id, i8** %seen_id.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %seen_id.addr, metadata !13240, metadata !DIExpression()), !dbg !13241
  %0 = load i32, i32* %kind.addr, align 4, !dbg !13242
  %cmp = icmp ne i32 %0, 1, !dbg !13244
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !13245

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13246
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %1, i32 53), !dbg !13247
  %conv = zext i8 %call to i32, !dbg !13247
  %tobool = icmp ne i32 %conv, 0, !dbg !13247
  br i1 %tobool, label %land.lhs.true1, label %if.end, !dbg !13248

land.lhs.true1:                                   ; preds = %land.lhs.true
  %2 = load i8, i8* %type_seen_p.addr, align 1, !dbg !13249
  %conv2 = zext i8 %2 to i32, !dbg !13249
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !13249
  br i1 %tobool3, label %land.lhs.true4, label %lor.lhs.false, !dbg !13250

land.lhs.true4:                                   ; preds = %land.lhs.true1
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13251
  %call5 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !13252
  %4 = bitcast %struct.c_token* %call5 to i32*, !dbg !13253
  %bf.load = load i32, i32* %4, align 8, !dbg !13253
  %bf.lshr = lshr i32 %bf.load, 8, !dbg !13253
  %bf.clear = and i32 %bf.lshr, 255, !dbg !13253
  %cmp6 = icmp eq i32 %bf.clear, 1, !dbg !13254
  br i1 %cmp6, label %if.then, label %lor.lhs.false, !dbg !13255

lor.lhs.false:                                    ; preds = %land.lhs.true4, %land.lhs.true1
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13256
  %call8 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !13257
  %6 = bitcast %struct.c_token* %call8 to i32*, !dbg !13258
  %bf.load9 = load i32, i32* %6, align 8, !dbg !13258
  %bf.lshr10 = lshr i32 %bf.load9, 8, !dbg !13258
  %bf.clear11 = and i32 %bf.lshr10, 255, !dbg !13258
  %cmp12 = icmp eq i32 %bf.clear11, 0, !dbg !13259
  br i1 %cmp12, label %if.then, label %if.end, !dbg !13260

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true4
  call void @llvm.dbg.declare(metadata %struct.c_declarator** %inner, metadata !13261, metadata !DIExpression()), !dbg !13263
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13264
  %call14 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %7), !dbg !13265
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call14, i32 0, i32 1, !dbg !13266
  %8 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !13266
  %call15 = call %struct.c_declarator* @build_id_declarator(%union.tree_node* %8), !dbg !13267
  store %struct.c_declarator* %call15, %struct.c_declarator** %inner, align 8, !dbg !13263
  %9 = load i8*, i8** %seen_id.addr, align 8, !dbg !13268
  store i8 1, i8* %9, align 1, !dbg !13269
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13270
  %call16 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %10), !dbg !13271
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call16, i32 0, i32 2, !dbg !13272
  %11 = load i32, i32* %location, align 8, !dbg !13272
  %12 = load %struct.c_declarator*, %struct.c_declarator** %inner, align 8, !dbg !13273
  %id_loc = getelementptr inbounds %struct.c_declarator, %struct.c_declarator* %12, i32 0, i32 2, !dbg !13274
  store i32 %11, i32* %id_loc, align 8, !dbg !13275
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13276
  call void @c_parser_consume_token(%struct.c_parser* %13), !dbg !13277
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13278
  %15 = load i8*, i8** %seen_id.addr, align 8, !dbg !13279
  %16 = load i8, i8* %15, align 1, !dbg !13280
  %17 = load %struct.c_declarator*, %struct.c_declarator** %inner, align 8, !dbg !13281
  %call17 = call %struct.c_declarator* @c_parser_direct_declarator_inner(%struct.c_parser* %14, i8 zeroext %16, %struct.c_declarator* %17), !dbg !13282
  store %struct.c_declarator* %call17, %struct.c_declarator** %retval, align 8, !dbg !13283
  br label %return, !dbg !13283

if.end:                                           ; preds = %lor.lhs.false, %land.lhs.true, %entry
  %18 = load i32, i32* %kind.addr, align 4, !dbg !13284
  %cmp18 = icmp ne i32 %18, 0, !dbg !13286
  br i1 %cmp18, label %land.lhs.true20, label %if.end28, !dbg !13287

land.lhs.true20:                                  ; preds = %if.end
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13288
  %call21 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %19, i32 39), !dbg !13289
  %conv22 = zext i8 %call21 to i32, !dbg !13289
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !13289
  br i1 %tobool23, label %if.then24, label %if.end28, !dbg !13290

if.then24:                                        ; preds = %land.lhs.true20
  call void @llvm.dbg.declare(metadata %struct.c_declarator** %inner25, metadata !13291, metadata !DIExpression()), !dbg !13293
  %call26 = call %struct.c_declarator* @build_id_declarator(%union.tree_node* null), !dbg !13294
  store %struct.c_declarator* %call26, %struct.c_declarator** %inner25, align 8, !dbg !13293
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13295
  %21 = load i8*, i8** %seen_id.addr, align 8, !dbg !13296
  %22 = load i8, i8* %21, align 1, !dbg !13297
  %23 = load %struct.c_declarator*, %struct.c_declarator** %inner25, align 8, !dbg !13298
  %call27 = call %struct.c_declarator* @c_parser_direct_declarator_inner(%struct.c_parser* %20, i8 zeroext %22, %struct.c_declarator* %23), !dbg !13299
  store %struct.c_declarator* %call27, %struct.c_declarator** %retval, align 8, !dbg !13300
  br label %return, !dbg !13300

if.end28:                                         ; preds = %land.lhs.true20, %if.end
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13301
  %call29 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %24, i32 20), !dbg !13303
  %tobool30 = icmp ne i8 %call29, 0, !dbg !13303
  br i1 %tobool30, label %if.then31, label %if.else74, !dbg !13304

if.then31:                                        ; preds = %if.end28
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs, metadata !13305, metadata !DIExpression()), !dbg !13307
  call void @llvm.dbg.declare(metadata %struct.c_declarator** %inner32, metadata !13308, metadata !DIExpression()), !dbg !13309
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13310
  call void @c_parser_consume_token(%struct.c_parser* %25), !dbg !13311
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13312
  %call33 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %26), !dbg !13313
  store %union.tree_node* %call33, %union.tree_node** %attrs, align 8, !dbg !13314
  %27 = load i32, i32* %kind.addr, align 4, !dbg !13315
  %cmp34 = icmp ne i32 %27, 0, !dbg !13317
  br i1 %cmp34, label %land.lhs.true36, label %if.end55, !dbg !13318

land.lhs.true36:                                  ; preds = %if.then31
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13319
  %call37 = call zeroext i8 @c_parser_next_token_starts_declspecs(%struct.c_parser* %28), !dbg !13320
  %conv38 = zext i8 %call37 to i32, !dbg !13320
  %tobool39 = icmp ne i32 %conv38, 0, !dbg !13320
  br i1 %tobool39, label %if.then44, label %lor.lhs.false40, !dbg !13321

lor.lhs.false40:                                  ; preds = %land.lhs.true36
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13322
  %call41 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %29, i32 21), !dbg !13323
  %conv42 = zext i8 %call41 to i32, !dbg !13323
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !13323
  br i1 %tobool43, label %if.then44, label %if.end55, !dbg !13324

if.then44:                                        ; preds = %lor.lhs.false40, %land.lhs.true36
  call void @llvm.dbg.declare(metadata %struct.c_arg_info** %args, metadata !13325, metadata !DIExpression()), !dbg !13327
  %30 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13328
  %31 = load i32, i32* %kind.addr, align 4, !dbg !13329
  %cmp45 = icmp eq i32 %31, 0, !dbg !13330
  %conv46 = zext i1 %cmp45 to i32, !dbg !13330
  %conv47 = trunc i32 %conv46 to i8, !dbg !13329
  %32 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !13331
  %call48 = call %struct.c_arg_info* @c_parser_parms_declarator(%struct.c_parser* %30, i8 zeroext %conv47, %union.tree_node* %32), !dbg !13332
  store %struct.c_arg_info* %call48, %struct.c_arg_info** %args, align 8, !dbg !13327
  %33 = load %struct.c_arg_info*, %struct.c_arg_info** %args, align 8, !dbg !13333
  %cmp49 = icmp eq %struct.c_arg_info* %33, null, !dbg !13335
  br i1 %cmp49, label %if.then51, label %if.else, !dbg !13336

if.then51:                                        ; preds = %if.then44
  store %struct.c_declarator* null, %struct.c_declarator** %retval, align 8, !dbg !13337
  br label %return, !dbg !13337

if.else:                                          ; preds = %if.then44
  %34 = load %struct.c_arg_info*, %struct.c_arg_info** %args, align 8, !dbg !13338
  %call52 = call %struct.c_declarator* @build_id_declarator(%union.tree_node* null), !dbg !13340
  %call53 = call %struct.c_declarator* @build_function_declarator(%struct.c_arg_info* %34, %struct.c_declarator* %call52), !dbg !13341
  store %struct.c_declarator* %call53, %struct.c_declarator** %inner32, align 8, !dbg !13342
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13343
  %36 = load i8*, i8** %seen_id.addr, align 8, !dbg !13344
  %37 = load i8, i8* %36, align 1, !dbg !13345
  %38 = load %struct.c_declarator*, %struct.c_declarator** %inner32, align 8, !dbg !13346
  %call54 = call %struct.c_declarator* @c_parser_direct_declarator_inner(%struct.c_parser* %35, i8 zeroext %37, %struct.c_declarator* %38), !dbg !13347
  store %struct.c_declarator* %call54, %struct.c_declarator** %retval, align 8, !dbg !13348
  br label %return, !dbg !13348

if.end55:                                         ; preds = %lor.lhs.false40, %if.then31
  %39 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13349
  %40 = load i8, i8* %type_seen_p.addr, align 1, !dbg !13350
  %41 = load i32, i32* %kind.addr, align 4, !dbg !13351
  %42 = load i8*, i8** %seen_id.addr, align 8, !dbg !13352
  %call56 = call %struct.c_declarator* @c_parser_declarator(%struct.c_parser* %39, i8 zeroext %40, i32 %41, i8* %42), !dbg !13353
  store %struct.c_declarator* %call56, %struct.c_declarator** %inner32, align 8, !dbg !13354
  %43 = load %struct.c_declarator*, %struct.c_declarator** %inner32, align 8, !dbg !13355
  %cmp57 = icmp ne %struct.c_declarator* %43, null, !dbg !13357
  br i1 %cmp57, label %land.lhs.true59, label %if.end64, !dbg !13358

land.lhs.true59:                                  ; preds = %if.end55
  %44 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !13359
  %cmp60 = icmp ne %union.tree_node* %44, null, !dbg !13360
  br i1 %cmp60, label %if.then62, label %if.end64, !dbg !13361

if.then62:                                        ; preds = %land.lhs.true59
  %45 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !13362
  %46 = load %struct.c_declarator*, %struct.c_declarator** %inner32, align 8, !dbg !13363
  %call63 = call %struct.c_declarator* @build_attrs_declarator(%union.tree_node* %45, %struct.c_declarator* %46), !dbg !13364
  store %struct.c_declarator* %call63, %struct.c_declarator** %inner32, align 8, !dbg !13365
  br label %if.end64, !dbg !13366

if.end64:                                         ; preds = %if.then62, %land.lhs.true59, %if.end55
  %47 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13367
  %call65 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %47, i32 21), !dbg !13369
  %tobool66 = icmp ne i8 %call65, 0, !dbg !13369
  br i1 %tobool66, label %if.then67, label %if.else73, !dbg !13370

if.then67:                                        ; preds = %if.end64
  %48 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13371
  call void @c_parser_consume_token(%struct.c_parser* %48), !dbg !13373
  %49 = load %struct.c_declarator*, %struct.c_declarator** %inner32, align 8, !dbg !13374
  %cmp68 = icmp eq %struct.c_declarator* %49, null, !dbg !13376
  br i1 %cmp68, label %if.then70, label %if.else71, !dbg !13377

if.then70:                                        ; preds = %if.then67
  store %struct.c_declarator* null, %struct.c_declarator** %retval, align 8, !dbg !13378
  br label %return, !dbg !13378

if.else71:                                        ; preds = %if.then67
  %50 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13379
  %51 = load i8*, i8** %seen_id.addr, align 8, !dbg !13380
  %52 = load i8, i8* %51, align 1, !dbg !13381
  %53 = load %struct.c_declarator*, %struct.c_declarator** %inner32, align 8, !dbg !13382
  %call72 = call %struct.c_declarator* @c_parser_direct_declarator_inner(%struct.c_parser* %50, i8 zeroext %52, %struct.c_declarator* %53), !dbg !13383
  store %struct.c_declarator* %call72, %struct.c_declarator** %retval, align 8, !dbg !13384
  br label %return, !dbg !13384

if.else73:                                        ; preds = %if.end64
  %54 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13385
  call void @c_parser_skip_until_found(%struct.c_parser* %54, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !13387
  store %struct.c_declarator* null, %struct.c_declarator** %retval, align 8, !dbg !13388
  br label %return, !dbg !13388

if.else74:                                        ; preds = %if.end28
  %55 = load i32, i32* %kind.addr, align 4, !dbg !13389
  %cmp75 = icmp eq i32 %55, 0, !dbg !13392
  br i1 %cmp75, label %if.then77, label %if.else78, !dbg !13393

if.then77:                                        ; preds = %if.else74
  %56 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13394
  call void @c_parser_error(%struct.c_parser* %56, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.64, i64 0, i64 0)), !dbg !13396
  store %struct.c_declarator* null, %struct.c_declarator** %retval, align 8, !dbg !13397
  br label %return, !dbg !13397

if.else78:                                        ; preds = %if.else74
  %call79 = call %struct.c_declarator* @build_id_declarator(%union.tree_node* null), !dbg !13398
  store %struct.c_declarator* %call79, %struct.c_declarator** %retval, align 8, !dbg !13399
  br label %return, !dbg !13399

return:                                           ; preds = %if.else78, %if.then77, %if.else73, %if.else71, %if.then70, %if.else, %if.then51, %if.then24, %if.then
  %57 = load %struct.c_declarator*, %struct.c_declarator** %retval, align 8, !dbg !13400
  ret %struct.c_declarator* %57, !dbg !13400
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.c_declarator* @c_parser_direct_declarator_inner(%struct.c_parser* %parser, i8 zeroext %id_present, %struct.c_declarator* %inner) #0 !dbg !13401 {
entry:
  %retval = alloca %struct.c_declarator*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %id_present.addr = alloca i8, align 1
  %inner.addr = alloca %struct.c_declarator*, align 8
  %brace_loc = alloca i32, align 4
  %declarator = alloca %struct.c_declarator*, align 8
  %quals_attrs = alloca %struct.c_declspecs*, align 8
  %static_seen = alloca i8, align 1
  %star_seen = alloca i8, align 1
  %dimen = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.c_expr, align 8
  %tmp33 = alloca %struct.c_expr, align 8
  %tmp37 = alloca %struct.c_expr, align 8
  %attrs = alloca %union.tree_node*, align 8
  %args = alloca %struct.c_arg_info*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !13404, metadata !DIExpression()), !dbg !13405
  store i8 %id_present, i8* %id_present.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %id_present.addr, metadata !13406, metadata !DIExpression()), !dbg !13407
  store %struct.c_declarator* %inner, %struct.c_declarator** %inner.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_declarator** %inner.addr, metadata !13408, metadata !DIExpression()), !dbg !13409
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13410
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 39), !dbg !13412
  %tobool = icmp ne i8 %call, 0, !dbg !13412
  br i1 %tobool, label %if.then, label %if.else54, !dbg !13413

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %brace_loc, metadata !13414, metadata !DIExpression()), !dbg !13416
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13417
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !13418
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !13419
  %2 = load i32, i32* %location, align 8, !dbg !13419
  store i32 %2, i32* %brace_loc, align 4, !dbg !13416
  call void @llvm.dbg.declare(metadata %struct.c_declarator** %declarator, metadata !13420, metadata !DIExpression()), !dbg !13421
  call void @llvm.dbg.declare(metadata %struct.c_declspecs** %quals_attrs, metadata !13422, metadata !DIExpression()), !dbg !13423
  %call2 = call %struct.c_declspecs* @build_null_declspecs(), !dbg !13424
  store %struct.c_declspecs* %call2, %struct.c_declspecs** %quals_attrs, align 8, !dbg !13423
  call void @llvm.dbg.declare(metadata i8* %static_seen, metadata !13425, metadata !DIExpression()), !dbg !13426
  call void @llvm.dbg.declare(metadata i8* %star_seen, metadata !13427, metadata !DIExpression()), !dbg !13428
  call void @llvm.dbg.declare(metadata %union.tree_node** %dimen, metadata !13429, metadata !DIExpression()), !dbg !13430
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13431
  call void @c_parser_consume_token(%struct.c_parser* %3), !dbg !13432
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13433
  %5 = load %struct.c_declspecs*, %struct.c_declspecs** %quals_attrs, align 8, !dbg !13434
  call void @c_parser_declspecs(%struct.c_parser* %4, %struct.c_declspecs* %5, i8 zeroext 0, i8 zeroext 0, i8 zeroext 1), !dbg !13435
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13436
  %call3 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %6, i32 0), !dbg !13437
  store i8 %call3, i8* %static_seen, align 1, !dbg !13438
  %7 = load i8, i8* %static_seen, align 1, !dbg !13439
  %tobool4 = icmp ne i8 %7, 0, !dbg !13439
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !13441

if.then5:                                         ; preds = %if.then
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13442
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !13443
  br label %if.end, !dbg !13443

if.end:                                           ; preds = %if.then5, %if.then
  %9 = load i8, i8* %static_seen, align 1, !dbg !13444
  %conv = zext i8 %9 to i32, !dbg !13444
  %tobool6 = icmp ne i32 %conv, 0, !dbg !13444
  br i1 %tobool6, label %land.lhs.true, label %if.end9, !dbg !13446

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.c_declspecs*, %struct.c_declspecs** %quals_attrs, align 8, !dbg !13447
  %declspecs_seen_p = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %10, i32 0, i32 6, !dbg !13448
  %bf.load = load i8, i8* %declspecs_seen_p, align 8, !dbg !13448
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !13448
  %bf.clear = and i8 %bf.lshr, 1, !dbg !13448
  %bf.cast = zext i8 %bf.clear to i32, !dbg !13448
  %tobool7 = icmp ne i32 %bf.cast, 0, !dbg !13447
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !13449

if.then8:                                         ; preds = %land.lhs.true
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13450
  %12 = load %struct.c_declspecs*, %struct.c_declspecs** %quals_attrs, align 8, !dbg !13451
  call void @c_parser_declspecs(%struct.c_parser* %11, %struct.c_declspecs* %12, i8 zeroext 0, i8 zeroext 0, i8 zeroext 1), !dbg !13452
  br label %if.end9, !dbg !13452

if.end9:                                          ; preds = %if.then8, %land.lhs.true, %if.end
  %13 = load %struct.c_declspecs*, %struct.c_declspecs** %quals_attrs, align 8, !dbg !13453
  %declspecs_seen_p10 = getelementptr inbounds %struct.c_declspecs, %struct.c_declspecs* %13, i32 0, i32 6, !dbg !13455
  %bf.load11 = load i8, i8* %declspecs_seen_p10, align 8, !dbg !13455
  %bf.lshr12 = lshr i8 %bf.load11, 1, !dbg !13455
  %bf.clear13 = and i8 %bf.lshr12, 1, !dbg !13455
  %bf.cast14 = zext i8 %bf.clear13 to i32, !dbg !13455
  %tobool15 = icmp ne i32 %bf.cast14, 0, !dbg !13453
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !13456

if.then16:                                        ; preds = %if.end9
  store %struct.c_declspecs* null, %struct.c_declspecs** %quals_attrs, align 8, !dbg !13457
  br label %if.end17, !dbg !13458

if.end17:                                         ; preds = %if.then16, %if.end9
  %14 = load i8, i8* %static_seen, align 1, !dbg !13459
  %tobool18 = icmp ne i8 %14, 0, !dbg !13459
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !13461

if.then19:                                        ; preds = %if.end17
  store i8 0, i8* %star_seen, align 1, !dbg !13462
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13464
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp, %struct.c_parser* %15, %struct.c_expr* null), !dbg !13465
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !13466
  %16 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !13466
  store %union.tree_node* %16, %union.tree_node** %dimen, align 8, !dbg !13467
  br label %if.end41, !dbg !13468

if.else:                                          ; preds = %if.end17
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13469
  %call20 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %17, i32 40), !dbg !13472
  %tobool21 = icmp ne i8 %call20, 0, !dbg !13472
  br i1 %tobool21, label %if.then22, label %if.else23, !dbg !13473

if.then22:                                        ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %dimen, align 8, !dbg !13474
  store i8 0, i8* %star_seen, align 1, !dbg !13476
  br label %if.end40, !dbg !13477

if.else23:                                        ; preds = %if.else
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13478
  %call24 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %18, i32 6), !dbg !13480
  %tobool25 = icmp ne i8 %call24, 0, !dbg !13480
  br i1 %tobool25, label %if.then26, label %if.else36, !dbg !13481

if.then26:                                        ; preds = %if.else23
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13482
  %call27 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %19), !dbg !13485
  %20 = bitcast %struct.c_token* %call27 to i32*, !dbg !13486
  %bf.load28 = load i32, i32* %20, align 8, !dbg !13486
  %bf.clear29 = and i32 %bf.load28, 255, !dbg !13486
  %cmp = icmp eq i32 %bf.clear29, 40, !dbg !13487
  br i1 %cmp, label %if.then31, label %if.else32, !dbg !13488

if.then31:                                        ; preds = %if.then26
  store %union.tree_node* null, %union.tree_node** %dimen, align 8, !dbg !13489
  store i8 1, i8* %star_seen, align 1, !dbg !13491
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13492
  call void @c_parser_consume_token(%struct.c_parser* %21), !dbg !13493
  br label %if.end35, !dbg !13494

if.else32:                                        ; preds = %if.then26
  store i8 0, i8* %star_seen, align 1, !dbg !13495
  %22 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13497
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp33, %struct.c_parser* %22, %struct.c_expr* null), !dbg !13498
  %value34 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp33, i32 0, i32 0, !dbg !13499
  %23 = load %union.tree_node*, %union.tree_node** %value34, align 8, !dbg !13499
  store %union.tree_node* %23, %union.tree_node** %dimen, align 8, !dbg !13500
  br label %if.end35

if.end35:                                         ; preds = %if.else32, %if.then31
  br label %if.end39, !dbg !13501

if.else36:                                        ; preds = %if.else23
  store i8 0, i8* %star_seen, align 1, !dbg !13502
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13504
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp37, %struct.c_parser* %24, %struct.c_expr* null), !dbg !13505
  %value38 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp37, i32 0, i32 0, !dbg !13506
  %25 = load %union.tree_node*, %union.tree_node** %value38, align 8, !dbg !13506
  store %union.tree_node* %25, %union.tree_node** %dimen, align 8, !dbg !13507
  br label %if.end39

if.end39:                                         ; preds = %if.else36, %if.end35
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then22
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then19
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13508
  %call42 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %26, i32 40), !dbg !13510
  %tobool43 = icmp ne i8 %call42, 0, !dbg !13510
  br i1 %tobool43, label %if.then44, label %if.else45, !dbg !13511

if.then44:                                        ; preds = %if.end41
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13512
  call void @c_parser_consume_token(%struct.c_parser* %27), !dbg !13513
  br label %if.end46, !dbg !13513

if.else45:                                        ; preds = %if.end41
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13514
  call void @c_parser_skip_until_found(%struct.c_parser* %28, i32 40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0)), !dbg !13516
  store %struct.c_declarator* null, %struct.c_declarator** %retval, align 8, !dbg !13517
  br label %return, !dbg !13517

if.end46:                                         ; preds = %if.then44
  %29 = load i32, i32* %brace_loc, align 4, !dbg !13518
  %30 = load %union.tree_node*, %union.tree_node** %dimen, align 8, !dbg !13519
  %31 = load %struct.c_declspecs*, %struct.c_declspecs** %quals_attrs, align 8, !dbg !13520
  %32 = load i8, i8* %static_seen, align 1, !dbg !13521
  %33 = load i8, i8* %star_seen, align 1, !dbg !13522
  %call47 = call %struct.c_declarator* @build_array_declarator(i32 %29, %union.tree_node* %30, %struct.c_declspecs* %31, i8 zeroext %32, i8 zeroext %33), !dbg !13523
  store %struct.c_declarator* %call47, %struct.c_declarator** %declarator, align 8, !dbg !13524
  %34 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !13525
  %cmp48 = icmp eq %struct.c_declarator* %34, null, !dbg !13527
  br i1 %cmp48, label %if.then50, label %if.end51, !dbg !13528

if.then50:                                        ; preds = %if.end46
  store %struct.c_declarator* null, %struct.c_declarator** %retval, align 8, !dbg !13529
  br label %return, !dbg !13529

if.end51:                                         ; preds = %if.end46
  %35 = load %struct.c_declarator*, %struct.c_declarator** %declarator, align 8, !dbg !13530
  %36 = load %struct.c_declarator*, %struct.c_declarator** %inner.addr, align 8, !dbg !13531
  %call52 = call %struct.c_declarator* @set_array_declarator_inner(%struct.c_declarator* %35, %struct.c_declarator* %36), !dbg !13532
  store %struct.c_declarator* %call52, %struct.c_declarator** %inner.addr, align 8, !dbg !13533
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13534
  %38 = load i8, i8* %id_present.addr, align 1, !dbg !13535
  %39 = load %struct.c_declarator*, %struct.c_declarator** %inner.addr, align 8, !dbg !13536
  %call53 = call %struct.c_declarator* @c_parser_direct_declarator_inner(%struct.c_parser* %37, i8 zeroext %38, %struct.c_declarator* %39), !dbg !13537
  store %struct.c_declarator* %call53, %struct.c_declarator** %retval, align 8, !dbg !13538
  br label %return, !dbg !13538

if.else54:                                        ; preds = %entry
  %40 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13539
  %call55 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %40, i32 20), !dbg !13541
  %tobool56 = icmp ne i8 %call55, 0, !dbg !13541
  br i1 %tobool56, label %if.then57, label %if.end66, !dbg !13542

if.then57:                                        ; preds = %if.else54
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs, metadata !13543, metadata !DIExpression()), !dbg !13545
  call void @llvm.dbg.declare(metadata %struct.c_arg_info** %args, metadata !13546, metadata !DIExpression()), !dbg !13547
  %41 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13548
  call void @c_parser_consume_token(%struct.c_parser* %41), !dbg !13549
  %42 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13550
  %call58 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %42), !dbg !13551
  store %union.tree_node* %call58, %union.tree_node** %attrs, align 8, !dbg !13552
  %43 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13553
  %44 = load i8, i8* %id_present.addr, align 1, !dbg !13554
  %45 = load %union.tree_node*, %union.tree_node** %attrs, align 8, !dbg !13555
  %call59 = call %struct.c_arg_info* @c_parser_parms_declarator(%struct.c_parser* %43, i8 zeroext %44, %union.tree_node* %45), !dbg !13556
  store %struct.c_arg_info* %call59, %struct.c_arg_info** %args, align 8, !dbg !13557
  %46 = load %struct.c_arg_info*, %struct.c_arg_info** %args, align 8, !dbg !13558
  %cmp60 = icmp eq %struct.c_arg_info* %46, null, !dbg !13560
  br i1 %cmp60, label %if.then62, label %if.else63, !dbg !13561

if.then62:                                        ; preds = %if.then57
  store %struct.c_declarator* null, %struct.c_declarator** %retval, align 8, !dbg !13562
  br label %return, !dbg !13562

if.else63:                                        ; preds = %if.then57
  %47 = load %struct.c_arg_info*, %struct.c_arg_info** %args, align 8, !dbg !13563
  %48 = load %struct.c_declarator*, %struct.c_declarator** %inner.addr, align 8, !dbg !13565
  %call64 = call %struct.c_declarator* @build_function_declarator(%struct.c_arg_info* %47, %struct.c_declarator* %48), !dbg !13566
  store %struct.c_declarator* %call64, %struct.c_declarator** %inner.addr, align 8, !dbg !13567
  %49 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13568
  %50 = load i8, i8* %id_present.addr, align 1, !dbg !13569
  %51 = load %struct.c_declarator*, %struct.c_declarator** %inner.addr, align 8, !dbg !13570
  %call65 = call %struct.c_declarator* @c_parser_direct_declarator_inner(%struct.c_parser* %49, i8 zeroext %50, %struct.c_declarator* %51), !dbg !13571
  store %struct.c_declarator* %call65, %struct.c_declarator** %retval, align 8, !dbg !13572
  br label %return, !dbg !13572

if.end66:                                         ; preds = %if.else54
  br label %if.end67

if.end67:                                         ; preds = %if.end66
  %52 = load %struct.c_declarator*, %struct.c_declarator** %inner.addr, align 8, !dbg !13573
  store %struct.c_declarator* %52, %struct.c_declarator** %retval, align 8, !dbg !13574
  br label %return, !dbg !13574

return:                                           ; preds = %if.end67, %if.else63, %if.then62, %if.end51, %if.then50, %if.else45
  %53 = load %struct.c_declarator*, %struct.c_declarator** %retval, align 8, !dbg !13575
  ret %struct.c_declarator* %53, !dbg !13575
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.c_arg_info* @c_parser_parms_declarator(%struct.c_parser* %parser, i8 zeroext %id_list_ok, %union.tree_node* %attrs) #0 !dbg !13576 {
entry:
  %retval = alloca %struct.c_arg_info*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %id_list_ok.addr = alloca i8, align 1
  %attrs.addr = alloca %union.tree_node*, align 8
  %list = alloca %union.tree_node*, align 8
  %nextp = alloca %union.tree_node**, align 8
  %ret = alloca %struct.c_arg_info*, align 8
  %ret63 = alloca %struct.c_arg_info*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !13579, metadata !DIExpression()), !dbg !13580
  store i8 %id_list_ok, i8* %id_list_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %id_list_ok.addr, metadata !13581, metadata !DIExpression()), !dbg !13582
  store %union.tree_node* %attrs, %union.tree_node** %attrs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs.addr, metadata !13583, metadata !DIExpression()), !dbg !13584
  call void @push_scope(), !dbg !13585
  call void @declare_parm_level(), !dbg !13586
  %0 = load i8, i8* %id_list_ok.addr, align 1, !dbg !13587
  %conv = zext i8 %0 to i32, !dbg !13587
  %tobool = icmp ne i32 %conv, 0, !dbg !13587
  br i1 %tobool, label %land.lhs.true, label %if.else62, !dbg !13589

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %attrs.addr, align 8, !dbg !13590
  %tobool1 = icmp ne %union.tree_node* %1, null, !dbg !13590
  br i1 %tobool1, label %if.else62, label %land.lhs.true2, !dbg !13591

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13592
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %2, i32 53), !dbg !13593
  %conv3 = zext i8 %call to i32, !dbg !13593
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !13593
  br i1 %tobool4, label %land.lhs.true5, label %if.else62, !dbg !13594

land.lhs.true5:                                   ; preds = %land.lhs.true2
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13595
  %call6 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !13596
  %4 = bitcast %struct.c_token* %call6 to i32*, !dbg !13597
  %bf.load = load i32, i32* %4, align 8, !dbg !13597
  %bf.lshr = lshr i32 %bf.load, 8, !dbg !13597
  %bf.clear = and i32 %bf.lshr, 255, !dbg !13597
  %cmp = icmp eq i32 %bf.clear, 0, !dbg !13598
  br i1 %cmp, label %if.then, label %if.else62, !dbg !13599

if.then:                                          ; preds = %land.lhs.true5
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !13600, metadata !DIExpression()), !dbg !13602
  store %union.tree_node* null, %union.tree_node** %list, align 8, !dbg !13602
  call void @llvm.dbg.declare(metadata %union.tree_node*** %nextp, metadata !13603, metadata !DIExpression()), !dbg !13604
  store %union.tree_node** %list, %union.tree_node*** %nextp, align 8, !dbg !13604
  br label %while.cond, !dbg !13605

while.cond:                                       ; preds = %if.end25, %if.then
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13606
  %call8 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %5, i32 53), !dbg !13607
  %conv9 = zext i8 %call8 to i32, !dbg !13607
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !13607
  br i1 %tobool10, label %land.rhs, label %land.end, !dbg !13608

land.rhs:                                         ; preds = %while.cond
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13609
  %call11 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %6), !dbg !13610
  %7 = bitcast %struct.c_token* %call11 to i32*, !dbg !13611
  %bf.load12 = load i32, i32* %7, align 8, !dbg !13611
  %bf.lshr13 = lshr i32 %bf.load12, 8, !dbg !13611
  %bf.clear14 = and i32 %bf.lshr13, 255, !dbg !13611
  %cmp15 = icmp eq i32 %bf.clear14, 0, !dbg !13612
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %cmp15, %land.rhs ], !dbg !13613
  br i1 %8, label %while.body, label %while.end, !dbg !13605

while.body:                                       ; preds = %land.end
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13614
  %call17 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %9), !dbg !13614
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call17, i32 0, i32 1, !dbg !13614
  %10 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !13614
  %call18 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* null, %union.tree_node* %10), !dbg !13614
  %11 = load %union.tree_node**, %union.tree_node*** %nextp, align 8, !dbg !13616
  store %union.tree_node* %call18, %union.tree_node** %11, align 8, !dbg !13617
  %12 = load %union.tree_node**, %union.tree_node*** %nextp, align 8, !dbg !13618
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !13618
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !13618
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !13618
  store %union.tree_node** %chain, %union.tree_node*** %nextp, align 8, !dbg !13619
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13620
  call void @c_parser_consume_token(%struct.c_parser* %14), !dbg !13621
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13622
  %call19 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %15, i32 19), !dbg !13624
  %tobool20 = icmp ne i8 %call19, 0, !dbg !13624
  br i1 %tobool20, label %if.then21, label %if.end, !dbg !13625

if.then21:                                        ; preds = %while.body
  br label %while.end, !dbg !13626

if.end:                                           ; preds = %while.body
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13627
  call void @c_parser_consume_token(%struct.c_parser* %16), !dbg !13628
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13629
  %call22 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %17, i32 21), !dbg !13631
  %tobool23 = icmp ne i8 %call22, 0, !dbg !13631
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !13632

if.then24:                                        ; preds = %if.end
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13633
  call void @c_parser_error(%struct.c_parser* %18, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !13635
  br label %while.end, !dbg !13636

if.end25:                                         ; preds = %if.end
  br label %while.cond, !dbg !13605, !llvm.loop !13637

while.end:                                        ; preds = %if.then24, %if.then21, %land.end
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13639
  %call26 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %19, i32 21), !dbg !13641
  %tobool27 = icmp ne i8 %call26, 0, !dbg !13641
  br i1 %tobool27, label %if.then28, label %if.else, !dbg !13642

if.then28:                                        ; preds = %while.end
  call void @llvm.dbg.declare(metadata %struct.c_arg_info** %ret, metadata !13643, metadata !DIExpression()), !dbg !13645
  store i64 48, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13646
  %20 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13646
  %21 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13646
  %sub.ptr.lhs.cast = ptrtoint i8* %20 to i64, !dbg !13646
  %sub.ptr.rhs.cast = ptrtoint i8* %21 to i64, !dbg !13646
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !13646
  %22 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13646
  %cmp29 = icmp slt i64 %sub.ptr.sub, %22, !dbg !13646
  br i1 %cmp29, label %cond.true, label %cond.false, !dbg !13646

cond.true:                                        ; preds = %if.then28
  %23 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13646
  %conv31 = trunc i64 %23 to i32, !dbg !13646
  call void @_obstack_newchunk(%struct.obstack* @parser_obstack, i32 %conv31), !dbg !13646
  br label %cond.end, !dbg !13646

cond.false:                                       ; preds = %if.then28
  br label %cond.end, !dbg !13646

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13646
  %24 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13646
  %25 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13646
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 %24, !dbg !13646
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13646
  %26 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13646
  %27 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13646
  %cmp32 = icmp eq i8* %26, %27, !dbg !13646
  br i1 %cmp32, label %cond.true34, label %cond.false37, !dbg !13646

cond.true34:                                      ; preds = %cond.end
  %bf.load35 = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !13646
  %bf.clear36 = and i8 %bf.load35, -3, !dbg !13646
  %bf.set = or i8 %bf.clear36, 2, !dbg !13646
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !13646
  br label %cond.end38, !dbg !13646

cond.false37:                                     ; preds = %cond.end
  br label %cond.end38, !dbg !13646

cond.end38:                                       ; preds = %cond.false37, %cond.true34
  %cond39 = phi i32 [ 0, %cond.true34 ], [ 0, %cond.false37 ], !dbg !13646
  %28 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13646
  %sub.ptr.lhs.cast40 = ptrtoint i8* %28 to i64, !dbg !13646
  %sub.ptr.sub41 = sub i64 %sub.ptr.lhs.cast40, 0, !dbg !13646
  store i64 %sub.ptr.sub41, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13646
  %29 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13646
  %sub.ptr.lhs.cast42 = ptrtoint i8* %29 to i64, !dbg !13646
  %sub.ptr.sub43 = sub i64 %sub.ptr.lhs.cast42, 0, !dbg !13646
  %30 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !13646
  %conv44 = sext i32 %30 to i64, !dbg !13646
  %add = add nsw i64 %sub.ptr.sub43, %conv44, !dbg !13646
  %31 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !13646
  %neg = xor i32 %31, -1, !dbg !13646
  %conv45 = sext i32 %neg to i64, !dbg !13646
  %and = and i64 %add, %conv45, !dbg !13646
  %32 = inttoptr i64 %and to i8*, !dbg !13646
  store i8* %32, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13646
  %33 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13646
  %34 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !13646
  %35 = bitcast %struct._obstack_chunk* %34 to i8*, !dbg !13646
  %sub.ptr.lhs.cast46 = ptrtoint i8* %33 to i64, !dbg !13646
  %sub.ptr.rhs.cast47 = ptrtoint i8* %35 to i64, !dbg !13646
  %sub.ptr.sub48 = sub i64 %sub.ptr.lhs.cast46, %sub.ptr.rhs.cast47, !dbg !13646
  %36 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13646
  %37 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !13646
  %38 = bitcast %struct._obstack_chunk* %37 to i8*, !dbg !13646
  %sub.ptr.lhs.cast49 = ptrtoint i8* %36 to i64, !dbg !13646
  %sub.ptr.rhs.cast50 = ptrtoint i8* %38 to i64, !dbg !13646
  %sub.ptr.sub51 = sub i64 %sub.ptr.lhs.cast49, %sub.ptr.rhs.cast50, !dbg !13646
  %cmp52 = icmp sgt i64 %sub.ptr.sub48, %sub.ptr.sub51, !dbg !13646
  br i1 %cmp52, label %cond.true54, label %cond.false55, !dbg !13646

cond.true54:                                      ; preds = %cond.end38
  %39 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13646
  store i8* %39, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13646
  br label %cond.end56, !dbg !13646

cond.false55:                                     ; preds = %cond.end38
  br label %cond.end56, !dbg !13646

cond.end56:                                       ; preds = %cond.false55, %cond.true54
  %cond57 = phi i8* [ %39, %cond.true54 ], [ null, %cond.false55 ], !dbg !13646
  %40 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13646
  store i8* %40, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13646
  %41 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13646
  %42 = inttoptr i64 %41 to i8*, !dbg !13646
  %43 = bitcast i8* %42 to %struct.c_arg_info*, !dbg !13646
  store %struct.c_arg_info* %43, %struct.c_arg_info** %ret, align 8, !dbg !13645
  %44 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13647
  %parms = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %44, i32 0, i32 0, !dbg !13648
  store %union.tree_node* null, %union.tree_node** %parms, align 8, !dbg !13649
  %45 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13650
  %tags = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %45, i32 0, i32 1, !dbg !13651
  store %union.tree_node* null, %union.tree_node** %tags, align 8, !dbg !13652
  %46 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !13653
  %47 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13654
  %types = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %47, i32 0, i32 2, !dbg !13655
  store %union.tree_node* %46, %union.tree_node** %types, align 8, !dbg !13656
  %48 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13657
  %others = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %48, i32 0, i32 3, !dbg !13658
  store %union.tree_node* null, %union.tree_node** %others, align 8, !dbg !13659
  %49 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13660
  %pending_sizes = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %49, i32 0, i32 4, !dbg !13661
  store %union.tree_node* null, %union.tree_node** %pending_sizes, align 8, !dbg !13662
  %50 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13663
  %had_vla_unspec = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %50, i32 0, i32 5, !dbg !13664
  %bf.load58 = load i8, i8* %had_vla_unspec, align 8, !dbg !13665
  %bf.clear59 = and i8 %bf.load58, -2, !dbg !13665
  store i8 %bf.clear59, i8* %had_vla_unspec, align 8, !dbg !13665
  %51 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13666
  call void @c_parser_consume_token(%struct.c_parser* %51), !dbg !13667
  %call60 = call %union.tree_node* @pop_scope(), !dbg !13668
  %52 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13669
  store %struct.c_arg_info* %52, %struct.c_arg_info** %retval, align 8, !dbg !13670
  br label %return, !dbg !13670

if.else:                                          ; preds = %while.end
  %53 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13671
  call void @c_parser_skip_until_found(%struct.c_parser* %53, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !13673
  %call61 = call %union.tree_node* @pop_scope(), !dbg !13674
  store %struct.c_arg_info* null, %struct.c_arg_info** %retval, align 8, !dbg !13675
  br label %return, !dbg !13675

if.else62:                                        ; preds = %land.lhs.true5, %land.lhs.true2, %land.lhs.true, %entry
  call void @llvm.dbg.declare(metadata %struct.c_arg_info** %ret63, metadata !13676, metadata !DIExpression()), !dbg !13678
  %54 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13679
  %55 = load %union.tree_node*, %union.tree_node** %attrs.addr, align 8, !dbg !13680
  %call64 = call %struct.c_arg_info* @c_parser_parms_list_declarator(%struct.c_parser* %54, %union.tree_node* %55), !dbg !13681
  store %struct.c_arg_info* %call64, %struct.c_arg_info** %ret63, align 8, !dbg !13678
  %call65 = call %union.tree_node* @pop_scope(), !dbg !13682
  %56 = load %struct.c_arg_info*, %struct.c_arg_info** %ret63, align 8, !dbg !13683
  store %struct.c_arg_info* %56, %struct.c_arg_info** %retval, align 8, !dbg !13684
  br label %return, !dbg !13684

return:                                           ; preds = %if.else62, %if.else, %cond.end56
  %57 = load %struct.c_arg_info*, %struct.c_arg_info** %retval, align 8, !dbg !13685
  ret %struct.c_arg_info* %57, !dbg !13685
}

declare dso_local %struct.c_declarator* @build_function_declarator(%struct.c_arg_info*, %struct.c_declarator*) #2

declare dso_local %struct.c_declarator* @build_attrs_declarator(%union.tree_node*, %struct.c_declarator*) #2

declare dso_local %struct.c_declarator* @build_array_declarator(i32, %union.tree_node*, %struct.c_declspecs*, i8 zeroext, i8 zeroext) #2

declare dso_local %struct.c_declarator* @set_array_declarator_inner(%struct.c_declarator*, %struct.c_declarator*) #2

declare dso_local void @push_scope() #2

declare dso_local void @declare_parm_level() #2

declare dso_local %union.tree_node* @pop_scope() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.c_arg_info* @c_parser_parms_list_declarator(%struct.c_parser* %parser, %union.tree_node* %attrs) #0 !dbg !13686 {
entry:
  %retval = alloca %struct.c_arg_info*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %attrs.addr = alloca %union.tree_node*, align 8
  %good_parm = alloca i8, align 1
  %ret = alloca %struct.c_arg_info*, align 8
  %ret30 = alloca %struct.c_arg_info*, align 8
  %parm = alloca %struct.c_parm*, align 8
  %new_attrs = alloca %union.tree_node*, align 8
  %ret103 = alloca %struct.c_arg_info*, align 8
  %ret169 = alloca %struct.c_arg_info*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !13689, metadata !DIExpression()), !dbg !13690
  store %union.tree_node* %attrs, %union.tree_node** %attrs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %attrs.addr, metadata !13691, metadata !DIExpression()), !dbg !13692
  call void @llvm.dbg.declare(metadata i8* %good_parm, metadata !13693, metadata !DIExpression()), !dbg !13694
  store i8 0, i8* %good_parm, align 1, !dbg !13694
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13695
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 21), !dbg !13697
  %tobool = icmp ne i8 %call, 0, !dbg !13697
  br i1 %tobool, label %if.then, label %if.end, !dbg !13698

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.c_arg_info** %ret, metadata !13699, metadata !DIExpression()), !dbg !13701
  store i64 48, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13702
  %1 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13702
  %2 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13702
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64, !dbg !13702
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64, !dbg !13702
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !13702
  %3 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13702
  %cmp = icmp slt i64 %sub.ptr.sub, %3, !dbg !13702
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !13702

cond.true:                                        ; preds = %if.then
  %4 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13702
  %conv = trunc i64 %4 to i32, !dbg !13702
  call void @_obstack_newchunk(%struct.obstack* @parser_obstack, i32 %conv), !dbg !13702
  br label %cond.end, !dbg !13702

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !13702

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13702
  %5 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13702
  %6 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13702
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %5, !dbg !13702
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13702
  %7 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13702
  %8 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13702
  %cmp1 = icmp eq i8* %7, %8, !dbg !13702
  br i1 %cmp1, label %cond.true3, label %cond.false4, !dbg !13702

cond.true3:                                       ; preds = %cond.end
  %bf.load = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !13702
  %bf.clear = and i8 %bf.load, -3, !dbg !13702
  %bf.set = or i8 %bf.clear, 2, !dbg !13702
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !13702
  br label %cond.end5, !dbg !13702

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !13702

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !13702
  %9 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13702
  %sub.ptr.lhs.cast7 = ptrtoint i8* %9 to i64, !dbg !13702
  %sub.ptr.sub8 = sub i64 %sub.ptr.lhs.cast7, 0, !dbg !13702
  store i64 %sub.ptr.sub8, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13702
  %10 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13702
  %sub.ptr.lhs.cast9 = ptrtoint i8* %10 to i64, !dbg !13702
  %sub.ptr.sub10 = sub i64 %sub.ptr.lhs.cast9, 0, !dbg !13702
  %11 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !13702
  %conv11 = sext i32 %11 to i64, !dbg !13702
  %add = add nsw i64 %sub.ptr.sub10, %conv11, !dbg !13702
  %12 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !13702
  %neg = xor i32 %12, -1, !dbg !13702
  %conv12 = sext i32 %neg to i64, !dbg !13702
  %and = and i64 %add, %conv12, !dbg !13702
  %13 = inttoptr i64 %and to i8*, !dbg !13702
  store i8* %13, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13702
  %14 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13702
  %15 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !13702
  %16 = bitcast %struct._obstack_chunk* %15 to i8*, !dbg !13702
  %sub.ptr.lhs.cast13 = ptrtoint i8* %14 to i64, !dbg !13702
  %sub.ptr.rhs.cast14 = ptrtoint i8* %16 to i64, !dbg !13702
  %sub.ptr.sub15 = sub i64 %sub.ptr.lhs.cast13, %sub.ptr.rhs.cast14, !dbg !13702
  %17 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13702
  %18 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !13702
  %19 = bitcast %struct._obstack_chunk* %18 to i8*, !dbg !13702
  %sub.ptr.lhs.cast16 = ptrtoint i8* %17 to i64, !dbg !13702
  %sub.ptr.rhs.cast17 = ptrtoint i8* %19 to i64, !dbg !13702
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast16, %sub.ptr.rhs.cast17, !dbg !13702
  %cmp19 = icmp sgt i64 %sub.ptr.sub15, %sub.ptr.sub18, !dbg !13702
  br i1 %cmp19, label %cond.true21, label %cond.false22, !dbg !13702

cond.true21:                                      ; preds = %cond.end5
  %20 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13702
  store i8* %20, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13702
  br label %cond.end23, !dbg !13702

cond.false22:                                     ; preds = %cond.end5
  br label %cond.end23, !dbg !13702

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i8* [ %20, %cond.true21 ], [ null, %cond.false22 ], !dbg !13702
  %21 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13702
  store i8* %21, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13702
  %22 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13702
  %23 = inttoptr i64 %22 to i8*, !dbg !13702
  %24 = bitcast i8* %23 to %struct.c_arg_info*, !dbg !13702
  store %struct.c_arg_info* %24, %struct.c_arg_info** %ret, align 8, !dbg !13701
  %25 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13703
  %parms = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %25, i32 0, i32 0, !dbg !13704
  store %union.tree_node* null, %union.tree_node** %parms, align 8, !dbg !13705
  %26 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13706
  %tags = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %26, i32 0, i32 1, !dbg !13707
  store %union.tree_node* null, %union.tree_node** %tags, align 8, !dbg !13708
  %27 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13709
  %types = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %27, i32 0, i32 2, !dbg !13710
  store %union.tree_node* null, %union.tree_node** %types, align 8, !dbg !13711
  %28 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13712
  %others = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %28, i32 0, i32 3, !dbg !13713
  store %union.tree_node* null, %union.tree_node** %others, align 8, !dbg !13714
  %29 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13715
  %pending_sizes = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %29, i32 0, i32 4, !dbg !13716
  store %union.tree_node* null, %union.tree_node** %pending_sizes, align 8, !dbg !13717
  %30 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13718
  %had_vla_unspec = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %30, i32 0, i32 5, !dbg !13719
  %bf.load25 = load i8, i8* %had_vla_unspec, align 8, !dbg !13720
  %bf.clear26 = and i8 %bf.load25, -2, !dbg !13720
  store i8 %bf.clear26, i8* %had_vla_unspec, align 8, !dbg !13720
  %31 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13721
  call void @c_parser_consume_token(%struct.c_parser* %31), !dbg !13722
  %32 = load %struct.c_arg_info*, %struct.c_arg_info** %ret, align 8, !dbg !13723
  store %struct.c_arg_info* %32, %struct.c_arg_info** %retval, align 8, !dbg !13724
  br label %return, !dbg !13724

if.end:                                           ; preds = %entry
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13725
  %call27 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %33, i32 44), !dbg !13727
  %tobool28 = icmp ne i8 %call27, 0, !dbg !13727
  br i1 %tobool28, label %if.then29, label %if.end84, !dbg !13728

if.then29:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.c_arg_info** %ret30, metadata !13729, metadata !DIExpression()), !dbg !13731
  store i64 48, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13732
  %34 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13732
  %35 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13732
  %sub.ptr.lhs.cast31 = ptrtoint i8* %34 to i64, !dbg !13732
  %sub.ptr.rhs.cast32 = ptrtoint i8* %35 to i64, !dbg !13732
  %sub.ptr.sub33 = sub i64 %sub.ptr.lhs.cast31, %sub.ptr.rhs.cast32, !dbg !13732
  %36 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13732
  %cmp34 = icmp slt i64 %sub.ptr.sub33, %36, !dbg !13732
  br i1 %cmp34, label %cond.true36, label %cond.false38, !dbg !13732

cond.true36:                                      ; preds = %if.then29
  %37 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13732
  %conv37 = trunc i64 %37 to i32, !dbg !13732
  call void @_obstack_newchunk(%struct.obstack* @parser_obstack, i32 %conv37), !dbg !13732
  br label %cond.end39, !dbg !13732

cond.false38:                                     ; preds = %if.then29
  br label %cond.end39, !dbg !13732

cond.end39:                                       ; preds = %cond.false38, %cond.true36
  %cond40 = phi i32 [ 0, %cond.true36 ], [ 0, %cond.false38 ], !dbg !13732
  %38 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13732
  %39 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13732
  %add.ptr41 = getelementptr inbounds i8, i8* %39, i64 %38, !dbg !13732
  store i8* %add.ptr41, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13732
  %40 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13732
  %41 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13732
  %cmp42 = icmp eq i8* %40, %41, !dbg !13732
  br i1 %cmp42, label %cond.true44, label %cond.false48, !dbg !13732

cond.true44:                                      ; preds = %cond.end39
  %bf.load45 = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !13732
  %bf.clear46 = and i8 %bf.load45, -3, !dbg !13732
  %bf.set47 = or i8 %bf.clear46, 2, !dbg !13732
  store i8 %bf.set47, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !13732
  br label %cond.end49, !dbg !13732

cond.false48:                                     ; preds = %cond.end39
  br label %cond.end49, !dbg !13732

cond.end49:                                       ; preds = %cond.false48, %cond.true44
  %cond50 = phi i32 [ 0, %cond.true44 ], [ 0, %cond.false48 ], !dbg !13732
  %42 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13732
  %sub.ptr.lhs.cast51 = ptrtoint i8* %42 to i64, !dbg !13732
  %sub.ptr.sub52 = sub i64 %sub.ptr.lhs.cast51, 0, !dbg !13732
  store i64 %sub.ptr.sub52, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13732
  %43 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13732
  %sub.ptr.lhs.cast53 = ptrtoint i8* %43 to i64, !dbg !13732
  %sub.ptr.sub54 = sub i64 %sub.ptr.lhs.cast53, 0, !dbg !13732
  %44 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !13732
  %conv55 = sext i32 %44 to i64, !dbg !13732
  %add56 = add nsw i64 %sub.ptr.sub54, %conv55, !dbg !13732
  %45 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !13732
  %neg57 = xor i32 %45, -1, !dbg !13732
  %conv58 = sext i32 %neg57 to i64, !dbg !13732
  %and59 = and i64 %add56, %conv58, !dbg !13732
  %46 = inttoptr i64 %and59 to i8*, !dbg !13732
  store i8* %46, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13732
  %47 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13732
  %48 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !13732
  %49 = bitcast %struct._obstack_chunk* %48 to i8*, !dbg !13732
  %sub.ptr.lhs.cast60 = ptrtoint i8* %47 to i64, !dbg !13732
  %sub.ptr.rhs.cast61 = ptrtoint i8* %49 to i64, !dbg !13732
  %sub.ptr.sub62 = sub i64 %sub.ptr.lhs.cast60, %sub.ptr.rhs.cast61, !dbg !13732
  %50 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13732
  %51 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !13732
  %52 = bitcast %struct._obstack_chunk* %51 to i8*, !dbg !13732
  %sub.ptr.lhs.cast63 = ptrtoint i8* %50 to i64, !dbg !13732
  %sub.ptr.rhs.cast64 = ptrtoint i8* %52 to i64, !dbg !13732
  %sub.ptr.sub65 = sub i64 %sub.ptr.lhs.cast63, %sub.ptr.rhs.cast64, !dbg !13732
  %cmp66 = icmp sgt i64 %sub.ptr.sub62, %sub.ptr.sub65, !dbg !13732
  br i1 %cmp66, label %cond.true68, label %cond.false69, !dbg !13732

cond.true68:                                      ; preds = %cond.end49
  %53 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13732
  store i8* %53, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13732
  br label %cond.end70, !dbg !13732

cond.false69:                                     ; preds = %cond.end49
  br label %cond.end70, !dbg !13732

cond.end70:                                       ; preds = %cond.false69, %cond.true68
  %cond71 = phi i8* [ %53, %cond.true68 ], [ null, %cond.false69 ], !dbg !13732
  %54 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13732
  store i8* %54, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13732
  %55 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13732
  %56 = inttoptr i64 %55 to i8*, !dbg !13732
  %57 = bitcast i8* %56 to %struct.c_arg_info*, !dbg !13732
  store %struct.c_arg_info* %57, %struct.c_arg_info** %ret30, align 8, !dbg !13731
  %58 = load %struct.c_arg_info*, %struct.c_arg_info** %ret30, align 8, !dbg !13733
  %parms72 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %58, i32 0, i32 0, !dbg !13734
  store %union.tree_node* null, %union.tree_node** %parms72, align 8, !dbg !13735
  %59 = load %struct.c_arg_info*, %struct.c_arg_info** %ret30, align 8, !dbg !13736
  %tags73 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %59, i32 0, i32 1, !dbg !13737
  store %union.tree_node* null, %union.tree_node** %tags73, align 8, !dbg !13738
  %60 = load %struct.c_arg_info*, %struct.c_arg_info** %ret30, align 8, !dbg !13739
  %others74 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %60, i32 0, i32 3, !dbg !13740
  store %union.tree_node* null, %union.tree_node** %others74, align 8, !dbg !13741
  %61 = load %struct.c_arg_info*, %struct.c_arg_info** %ret30, align 8, !dbg !13742
  %pending_sizes75 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %61, i32 0, i32 4, !dbg !13743
  store %union.tree_node* null, %union.tree_node** %pending_sizes75, align 8, !dbg !13744
  %62 = load %struct.c_arg_info*, %struct.c_arg_info** %ret30, align 8, !dbg !13745
  %had_vla_unspec76 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %62, i32 0, i32 5, !dbg !13746
  %bf.load77 = load i8, i8* %had_vla_unspec76, align 8, !dbg !13747
  %bf.clear78 = and i8 %bf.load77, -2, !dbg !13747
  store i8 %bf.clear78, i8* %had_vla_unspec76, align 8, !dbg !13747
  %63 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !13748
  %64 = load %struct.c_arg_info*, %struct.c_arg_info** %ret30, align 8, !dbg !13749
  %types79 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %64, i32 0, i32 2, !dbg !13750
  store %union.tree_node* %63, %union.tree_node** %types79, align 8, !dbg !13751
  %65 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13752
  %call80 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %65), !dbg !13753
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call80, i32 0, i32 2, !dbg !13754
  %66 = load i32, i32* %location, align 8, !dbg !13754
  call void (i32, i8*, ...) @error_at(i32 %66, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.65, i64 0, i64 0)), !dbg !13755
  %67 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13756
  call void @c_parser_consume_token(%struct.c_parser* %67), !dbg !13757
  %68 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13758
  %call81 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %68, i32 21), !dbg !13760
  %tobool82 = icmp ne i8 %call81, 0, !dbg !13760
  br i1 %tobool82, label %if.then83, label %if.else, !dbg !13761

if.then83:                                        ; preds = %cond.end70
  %69 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13762
  call void @c_parser_consume_token(%struct.c_parser* %69), !dbg !13764
  %70 = load %struct.c_arg_info*, %struct.c_arg_info** %ret30, align 8, !dbg !13765
  store %struct.c_arg_info* %70, %struct.c_arg_info** %retval, align 8, !dbg !13766
  br label %return, !dbg !13766

if.else:                                          ; preds = %cond.end70
  %71 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13767
  call void @c_parser_skip_until_found(%struct.c_parser* %71, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !13769
  store %struct.c_arg_info* null, %struct.c_arg_info** %retval, align 8, !dbg !13770
  br label %return, !dbg !13770

if.end84:                                         ; preds = %if.end
  br label %while.body, !dbg !13771

while.body:                                       ; preds = %if.end84, %if.end221
  call void @llvm.dbg.declare(metadata %struct.c_parm** %parm, metadata !13772, metadata !DIExpression()), !dbg !13774
  %72 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13775
  %73 = load %union.tree_node*, %union.tree_node** %attrs.addr, align 8, !dbg !13776
  %call85 = call %struct.c_parm* @c_parser_parameter_declaration(%struct.c_parser* %72, %union.tree_node* %73), !dbg !13777
  store %struct.c_parm* %call85, %struct.c_parm** %parm, align 8, !dbg !13774
  store %union.tree_node* null, %union.tree_node** %attrs.addr, align 8, !dbg !13778
  %74 = load %struct.c_parm*, %struct.c_parm** %parm, align 8, !dbg !13779
  %cmp86 = icmp ne %struct.c_parm* %74, null, !dbg !13781
  br i1 %cmp86, label %if.then88, label %if.end89, !dbg !13782

if.then88:                                        ; preds = %while.body
  store i8 1, i8* %good_parm, align 1, !dbg !13783
  %75 = load %struct.c_parm*, %struct.c_parm** %parm, align 8, !dbg !13785
  call void @push_parm_decl(%struct.c_parm* %75), !dbg !13786
  br label %if.end89, !dbg !13787

if.end89:                                         ; preds = %if.then88, %while.body
  %76 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13788
  %call90 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %76, i32 43), !dbg !13790
  %tobool91 = icmp ne i8 %call90, 0, !dbg !13790
  br i1 %tobool91, label %if.then92, label %if.end95, !dbg !13791

if.then92:                                        ; preds = %if.end89
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_attrs, metadata !13792, metadata !DIExpression()), !dbg !13794
  %77 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13795
  call void @c_parser_consume_token(%struct.c_parser* %77), !dbg !13796
  call void @mark_forward_parm_decls(), !dbg !13797
  %78 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13798
  %call93 = call %union.tree_node* @c_parser_attributes(%struct.c_parser* %78), !dbg !13799
  store %union.tree_node* %call93, %union.tree_node** %new_attrs, align 8, !dbg !13800
  %79 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13801
  %80 = load %union.tree_node*, %union.tree_node** %new_attrs, align 8, !dbg !13802
  %call94 = call %struct.c_arg_info* @c_parser_parms_list_declarator(%struct.c_parser* %79, %union.tree_node* %80), !dbg !13803
  store %struct.c_arg_info* %call94, %struct.c_arg_info** %retval, align 8, !dbg !13804
  br label %return, !dbg !13804

if.end95:                                         ; preds = %if.end89
  %81 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13805
  %call96 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %81, i32 21), !dbg !13807
  %tobool97 = icmp ne i8 %call96, 0, !dbg !13807
  br i1 %tobool97, label %if.then98, label %if.end153, !dbg !13808

if.then98:                                        ; preds = %if.end95
  %82 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13809
  call void @c_parser_consume_token(%struct.c_parser* %82), !dbg !13811
  %83 = load i8, i8* %good_parm, align 1, !dbg !13812
  %tobool99 = icmp ne i8 %83, 0, !dbg !13812
  br i1 %tobool99, label %if.then100, label %if.else102, !dbg !13814

if.then100:                                       ; preds = %if.then98
  %call101 = call %struct.c_arg_info* @get_parm_info(i8 zeroext 0), !dbg !13815
  store %struct.c_arg_info* %call101, %struct.c_arg_info** %retval, align 8, !dbg !13816
  br label %return, !dbg !13816

if.else102:                                       ; preds = %if.then98
  call void @llvm.dbg.declare(metadata %struct.c_arg_info** %ret103, metadata !13817, metadata !DIExpression()), !dbg !13819
  store i64 48, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13820
  %84 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13820
  %85 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13820
  %sub.ptr.lhs.cast104 = ptrtoint i8* %84 to i64, !dbg !13820
  %sub.ptr.rhs.cast105 = ptrtoint i8* %85 to i64, !dbg !13820
  %sub.ptr.sub106 = sub i64 %sub.ptr.lhs.cast104, %sub.ptr.rhs.cast105, !dbg !13820
  %86 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13820
  %cmp107 = icmp slt i64 %sub.ptr.sub106, %86, !dbg !13820
  br i1 %cmp107, label %cond.true109, label %cond.false111, !dbg !13820

cond.true109:                                     ; preds = %if.else102
  %87 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13820
  %conv110 = trunc i64 %87 to i32, !dbg !13820
  call void @_obstack_newchunk(%struct.obstack* @parser_obstack, i32 %conv110), !dbg !13820
  br label %cond.end112, !dbg !13820

cond.false111:                                    ; preds = %if.else102
  br label %cond.end112, !dbg !13820

cond.end112:                                      ; preds = %cond.false111, %cond.true109
  %cond113 = phi i32 [ 0, %cond.true109 ], [ 0, %cond.false111 ], !dbg !13820
  %88 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13820
  %89 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13820
  %add.ptr114 = getelementptr inbounds i8, i8* %89, i64 %88, !dbg !13820
  store i8* %add.ptr114, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13820
  %90 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13820
  %91 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13820
  %cmp115 = icmp eq i8* %90, %91, !dbg !13820
  br i1 %cmp115, label %cond.true117, label %cond.false121, !dbg !13820

cond.true117:                                     ; preds = %cond.end112
  %bf.load118 = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !13820
  %bf.clear119 = and i8 %bf.load118, -3, !dbg !13820
  %bf.set120 = or i8 %bf.clear119, 2, !dbg !13820
  store i8 %bf.set120, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !13820
  br label %cond.end122, !dbg !13820

cond.false121:                                    ; preds = %cond.end112
  br label %cond.end122, !dbg !13820

cond.end122:                                      ; preds = %cond.false121, %cond.true117
  %cond123 = phi i32 [ 0, %cond.true117 ], [ 0, %cond.false121 ], !dbg !13820
  %92 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13820
  %sub.ptr.lhs.cast124 = ptrtoint i8* %92 to i64, !dbg !13820
  %sub.ptr.sub125 = sub i64 %sub.ptr.lhs.cast124, 0, !dbg !13820
  store i64 %sub.ptr.sub125, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13820
  %93 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13820
  %sub.ptr.lhs.cast126 = ptrtoint i8* %93 to i64, !dbg !13820
  %sub.ptr.sub127 = sub i64 %sub.ptr.lhs.cast126, 0, !dbg !13820
  %94 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !13820
  %conv128 = sext i32 %94 to i64, !dbg !13820
  %add129 = add nsw i64 %sub.ptr.sub127, %conv128, !dbg !13820
  %95 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !13820
  %neg130 = xor i32 %95, -1, !dbg !13820
  %conv131 = sext i32 %neg130 to i64, !dbg !13820
  %and132 = and i64 %add129, %conv131, !dbg !13820
  %96 = inttoptr i64 %and132 to i8*, !dbg !13820
  store i8* %96, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13820
  %97 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13820
  %98 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !13820
  %99 = bitcast %struct._obstack_chunk* %98 to i8*, !dbg !13820
  %sub.ptr.lhs.cast133 = ptrtoint i8* %97 to i64, !dbg !13820
  %sub.ptr.rhs.cast134 = ptrtoint i8* %99 to i64, !dbg !13820
  %sub.ptr.sub135 = sub i64 %sub.ptr.lhs.cast133, %sub.ptr.rhs.cast134, !dbg !13820
  %100 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13820
  %101 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !13820
  %102 = bitcast %struct._obstack_chunk* %101 to i8*, !dbg !13820
  %sub.ptr.lhs.cast136 = ptrtoint i8* %100 to i64, !dbg !13820
  %sub.ptr.rhs.cast137 = ptrtoint i8* %102 to i64, !dbg !13820
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137, !dbg !13820
  %cmp139 = icmp sgt i64 %sub.ptr.sub135, %sub.ptr.sub138, !dbg !13820
  br i1 %cmp139, label %cond.true141, label %cond.false142, !dbg !13820

cond.true141:                                     ; preds = %cond.end122
  %103 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13820
  store i8* %103, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13820
  br label %cond.end143, !dbg !13820

cond.false142:                                    ; preds = %cond.end122
  br label %cond.end143, !dbg !13820

cond.end143:                                      ; preds = %cond.false142, %cond.true141
  %cond144 = phi i8* [ %103, %cond.true141 ], [ null, %cond.false142 ], !dbg !13820
  %104 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13820
  store i8* %104, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13820
  %105 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13820
  %106 = inttoptr i64 %105 to i8*, !dbg !13820
  %107 = bitcast i8* %106 to %struct.c_arg_info*, !dbg !13820
  store %struct.c_arg_info* %107, %struct.c_arg_info** %ret103, align 8, !dbg !13819
  %108 = load %struct.c_arg_info*, %struct.c_arg_info** %ret103, align 8, !dbg !13821
  %parms145 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %108, i32 0, i32 0, !dbg !13822
  store %union.tree_node* null, %union.tree_node** %parms145, align 8, !dbg !13823
  %109 = load %struct.c_arg_info*, %struct.c_arg_info** %ret103, align 8, !dbg !13824
  %tags146 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %109, i32 0, i32 1, !dbg !13825
  store %union.tree_node* null, %union.tree_node** %tags146, align 8, !dbg !13826
  %110 = load %struct.c_arg_info*, %struct.c_arg_info** %ret103, align 8, !dbg !13827
  %types147 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %110, i32 0, i32 2, !dbg !13828
  store %union.tree_node* null, %union.tree_node** %types147, align 8, !dbg !13829
  %111 = load %struct.c_arg_info*, %struct.c_arg_info** %ret103, align 8, !dbg !13830
  %others148 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %111, i32 0, i32 3, !dbg !13831
  store %union.tree_node* null, %union.tree_node** %others148, align 8, !dbg !13832
  %112 = load %struct.c_arg_info*, %struct.c_arg_info** %ret103, align 8, !dbg !13833
  %pending_sizes149 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %112, i32 0, i32 4, !dbg !13834
  store %union.tree_node* null, %union.tree_node** %pending_sizes149, align 8, !dbg !13835
  %113 = load %struct.c_arg_info*, %struct.c_arg_info** %ret103, align 8, !dbg !13836
  %had_vla_unspec150 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %113, i32 0, i32 5, !dbg !13837
  %bf.load151 = load i8, i8* %had_vla_unspec150, align 8, !dbg !13838
  %bf.clear152 = and i8 %bf.load151, -2, !dbg !13838
  store i8 %bf.clear152, i8* %had_vla_unspec150, align 8, !dbg !13838
  %114 = load %struct.c_arg_info*, %struct.c_arg_info** %ret103, align 8, !dbg !13839
  store %struct.c_arg_info* %114, %struct.c_arg_info** %retval, align 8, !dbg !13840
  br label %return, !dbg !13840

if.end153:                                        ; preds = %if.end95
  %115 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13841
  %call154 = call zeroext i8 @c_parser_require(%struct.c_parser* %115, i32 19, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.66, i64 0, i64 0)), !dbg !13843
  %tobool155 = icmp ne i8 %call154, 0, !dbg !13843
  br i1 %tobool155, label %if.end158, label %if.then156, !dbg !13844

if.then156:                                       ; preds = %if.end153
  %116 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13845
  call void @c_parser_skip_until_found(%struct.c_parser* %116, i32 21, i8* null), !dbg !13847
  %call157 = call %union.tree_node* @get_pending_sizes(), !dbg !13848
  store %struct.c_arg_info* null, %struct.c_arg_info** %retval, align 8, !dbg !13849
  br label %return, !dbg !13849

if.end158:                                        ; preds = %if.end153
  %117 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13850
  %call159 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %117, i32 44), !dbg !13852
  %tobool160 = icmp ne i8 %call159, 0, !dbg !13852
  br i1 %tobool160, label %if.then161, label %if.end221, !dbg !13853

if.then161:                                       ; preds = %if.end158
  %118 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13854
  call void @c_parser_consume_token(%struct.c_parser* %118), !dbg !13856
  %119 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13857
  %call162 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %119, i32 21), !dbg !13859
  %tobool163 = icmp ne i8 %call162, 0, !dbg !13859
  br i1 %tobool163, label %if.then164, label %if.else219, !dbg !13860

if.then164:                                       ; preds = %if.then161
  %120 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13861
  call void @c_parser_consume_token(%struct.c_parser* %120), !dbg !13863
  %121 = load i8, i8* %good_parm, align 1, !dbg !13864
  %tobool165 = icmp ne i8 %121, 0, !dbg !13864
  br i1 %tobool165, label %if.then166, label %if.else168, !dbg !13866

if.then166:                                       ; preds = %if.then164
  %call167 = call %struct.c_arg_info* @get_parm_info(i8 zeroext 1), !dbg !13867
  store %struct.c_arg_info* %call167, %struct.c_arg_info** %retval, align 8, !dbg !13868
  br label %return, !dbg !13868

if.else168:                                       ; preds = %if.then164
  call void @llvm.dbg.declare(metadata %struct.c_arg_info** %ret169, metadata !13869, metadata !DIExpression()), !dbg !13871
  store i64 48, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13872
  %122 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13872
  %123 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13872
  %sub.ptr.lhs.cast170 = ptrtoint i8* %122 to i64, !dbg !13872
  %sub.ptr.rhs.cast171 = ptrtoint i8* %123 to i64, !dbg !13872
  %sub.ptr.sub172 = sub i64 %sub.ptr.lhs.cast170, %sub.ptr.rhs.cast171, !dbg !13872
  %124 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13872
  %cmp173 = icmp slt i64 %sub.ptr.sub172, %124, !dbg !13872
  br i1 %cmp173, label %cond.true175, label %cond.false177, !dbg !13872

cond.true175:                                     ; preds = %if.else168
  %125 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13872
  %conv176 = trunc i64 %125 to i32, !dbg !13872
  call void @_obstack_newchunk(%struct.obstack* @parser_obstack, i32 %conv176), !dbg !13872
  br label %cond.end178, !dbg !13872

cond.false177:                                    ; preds = %if.else168
  br label %cond.end178, !dbg !13872

cond.end178:                                      ; preds = %cond.false177, %cond.true175
  %cond179 = phi i32 [ 0, %cond.true175 ], [ 0, %cond.false177 ], !dbg !13872
  %126 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13872
  %127 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13872
  %add.ptr180 = getelementptr inbounds i8, i8* %127, i64 %126, !dbg !13872
  store i8* %add.ptr180, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13872
  %128 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13872
  %129 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13872
  %cmp181 = icmp eq i8* %128, %129, !dbg !13872
  br i1 %cmp181, label %cond.true183, label %cond.false187, !dbg !13872

cond.true183:                                     ; preds = %cond.end178
  %bf.load184 = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !13872
  %bf.clear185 = and i8 %bf.load184, -3, !dbg !13872
  %bf.set186 = or i8 %bf.clear185, 2, !dbg !13872
  store i8 %bf.set186, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 10), align 8, !dbg !13872
  br label %cond.end188, !dbg !13872

cond.false187:                                    ; preds = %cond.end178
  br label %cond.end188, !dbg !13872

cond.end188:                                      ; preds = %cond.false187, %cond.true183
  %cond189 = phi i32 [ 0, %cond.true183 ], [ 0, %cond.false187 ], !dbg !13872
  %130 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13872
  %sub.ptr.lhs.cast190 = ptrtoint i8* %130 to i64, !dbg !13872
  %sub.ptr.sub191 = sub i64 %sub.ptr.lhs.cast190, 0, !dbg !13872
  store i64 %sub.ptr.sub191, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13872
  %131 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13872
  %sub.ptr.lhs.cast192 = ptrtoint i8* %131 to i64, !dbg !13872
  %sub.ptr.sub193 = sub i64 %sub.ptr.lhs.cast192, 0, !dbg !13872
  %132 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !13872
  %conv194 = sext i32 %132 to i64, !dbg !13872
  %add195 = add nsw i64 %sub.ptr.sub193, %conv194, !dbg !13872
  %133 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 6), align 8, !dbg !13872
  %neg196 = xor i32 %133, -1, !dbg !13872
  %conv197 = sext i32 %neg196 to i64, !dbg !13872
  %and198 = and i64 %add195, %conv197, !dbg !13872
  %134 = inttoptr i64 %and198 to i8*, !dbg !13872
  store i8* %134, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13872
  %135 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13872
  %136 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !13872
  %137 = bitcast %struct._obstack_chunk* %136 to i8*, !dbg !13872
  %sub.ptr.lhs.cast199 = ptrtoint i8* %135 to i64, !dbg !13872
  %sub.ptr.rhs.cast200 = ptrtoint i8* %137 to i64, !dbg !13872
  %sub.ptr.sub201 = sub i64 %sub.ptr.lhs.cast199, %sub.ptr.rhs.cast200, !dbg !13872
  %138 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13872
  %139 = load %struct._obstack_chunk*, %struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 1), align 8, !dbg !13872
  %140 = bitcast %struct._obstack_chunk* %139 to i8*, !dbg !13872
  %sub.ptr.lhs.cast202 = ptrtoint i8* %138 to i64, !dbg !13872
  %sub.ptr.rhs.cast203 = ptrtoint i8* %140 to i64, !dbg !13872
  %sub.ptr.sub204 = sub i64 %sub.ptr.lhs.cast202, %sub.ptr.rhs.cast203, !dbg !13872
  %cmp205 = icmp sgt i64 %sub.ptr.sub201, %sub.ptr.sub204, !dbg !13872
  br i1 %cmp205, label %cond.true207, label %cond.false208, !dbg !13872

cond.true207:                                     ; preds = %cond.end188
  %141 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 4), align 8, !dbg !13872
  store i8* %141, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13872
  br label %cond.end209, !dbg !13872

cond.false208:                                    ; preds = %cond.end188
  br label %cond.end209, !dbg !13872

cond.end209:                                      ; preds = %cond.false208, %cond.true207
  %cond210 = phi i8* [ %141, %cond.true207 ], [ null, %cond.false208 ], !dbg !13872
  %142 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 3), align 8, !dbg !13872
  store i8* %142, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 2), align 8, !dbg !13872
  %143 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @parser_obstack, i32 0, i32 5), align 8, !dbg !13872
  %144 = inttoptr i64 %143 to i8*, !dbg !13872
  %145 = bitcast i8* %144 to %struct.c_arg_info*, !dbg !13872
  store %struct.c_arg_info* %145, %struct.c_arg_info** %ret169, align 8, !dbg !13871
  %146 = load %struct.c_arg_info*, %struct.c_arg_info** %ret169, align 8, !dbg !13873
  %parms211 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %146, i32 0, i32 0, !dbg !13874
  store %union.tree_node* null, %union.tree_node** %parms211, align 8, !dbg !13875
  %147 = load %struct.c_arg_info*, %struct.c_arg_info** %ret169, align 8, !dbg !13876
  %tags212 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %147, i32 0, i32 1, !dbg !13877
  store %union.tree_node* null, %union.tree_node** %tags212, align 8, !dbg !13878
  %148 = load %struct.c_arg_info*, %struct.c_arg_info** %ret169, align 8, !dbg !13879
  %types213 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %148, i32 0, i32 2, !dbg !13880
  store %union.tree_node* null, %union.tree_node** %types213, align 8, !dbg !13881
  %149 = load %struct.c_arg_info*, %struct.c_arg_info** %ret169, align 8, !dbg !13882
  %others214 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %149, i32 0, i32 3, !dbg !13883
  store %union.tree_node* null, %union.tree_node** %others214, align 8, !dbg !13884
  %150 = load %struct.c_arg_info*, %struct.c_arg_info** %ret169, align 8, !dbg !13885
  %pending_sizes215 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %150, i32 0, i32 4, !dbg !13886
  store %union.tree_node* null, %union.tree_node** %pending_sizes215, align 8, !dbg !13887
  %151 = load %struct.c_arg_info*, %struct.c_arg_info** %ret169, align 8, !dbg !13888
  %had_vla_unspec216 = getelementptr inbounds %struct.c_arg_info, %struct.c_arg_info* %151, i32 0, i32 5, !dbg !13889
  %bf.load217 = load i8, i8* %had_vla_unspec216, align 8, !dbg !13890
  %bf.clear218 = and i8 %bf.load217, -2, !dbg !13890
  store i8 %bf.clear218, i8* %had_vla_unspec216, align 8, !dbg !13890
  %152 = load %struct.c_arg_info*, %struct.c_arg_info** %ret169, align 8, !dbg !13891
  store %struct.c_arg_info* %152, %struct.c_arg_info** %retval, align 8, !dbg !13892
  br label %return, !dbg !13892

if.else219:                                       ; preds = %if.then161
  %153 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13893
  call void @c_parser_skip_until_found(%struct.c_parser* %153, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !13895
  %call220 = call %union.tree_node* @get_pending_sizes(), !dbg !13896
  store %struct.c_arg_info* null, %struct.c_arg_info** %retval, align 8, !dbg !13897
  br label %return, !dbg !13897

if.end221:                                        ; preds = %if.end158
  br label %while.body, !dbg !13771, !llvm.loop !13898

return:                                           ; preds = %if.else219, %cond.end209, %if.then166, %if.then156, %cond.end143, %if.then100, %if.then92, %if.else, %if.then83, %cond.end23
  %154 = load %struct.c_arg_info*, %struct.c_arg_info** %retval, align 8, !dbg !13900
  ret %struct.c_arg_info* %154, !dbg !13900
}

declare dso_local void @push_parm_decl(%struct.c_parm*) #2

declare dso_local void @mark_forward_parm_decls() #2

declare dso_local %struct.c_arg_info* @get_parm_info(i8 zeroext) #2

declare dso_local %union.tree_node* @get_pending_sizes() #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_skip_to_end_of_parameter(%struct.c_parser* %parser) #0 !dbg !13901 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %nesting_depth = alloca i32, align 4
  %token = alloca %struct.c_token*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !13902, metadata !DIExpression()), !dbg !13903
  call void @llvm.dbg.declare(metadata i32* %nesting_depth, metadata !13904, metadata !DIExpression()), !dbg !13905
  store i32 0, i32* %nesting_depth, align 4, !dbg !13905
  br label %while.body, !dbg !13906

while.body:                                       ; preds = %entry, %if.end46
  call void @llvm.dbg.declare(metadata %struct.c_token** %token, metadata !13907, metadata !DIExpression()), !dbg !13909
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13910
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !13911
  store %struct.c_token* %call, %struct.c_token** %token, align 8, !dbg !13909
  %1 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !13912
  %2 = bitcast %struct.c_token* %1 to i32*, !dbg !13914
  %bf.load = load i32, i32* %2, align 8, !dbg !13914
  %bf.clear = and i32 %bf.load, 255, !dbg !13914
  %cmp = icmp eq i32 %bf.clear, 19, !dbg !13915
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !13916

lor.lhs.false:                                    ; preds = %while.body
  %3 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !13917
  %4 = bitcast %struct.c_token* %3 to i32*, !dbg !13918
  %bf.load1 = load i32, i32* %4, align 8, !dbg !13918
  %bf.clear2 = and i32 %bf.load1, 255, !dbg !13918
  %cmp3 = icmp eq i32 %bf.clear2, 43, !dbg !13919
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !13920

land.lhs.true:                                    ; preds = %lor.lhs.false, %while.body
  %5 = load i32, i32* %nesting_depth, align 4, !dbg !13921
  %tobool = icmp ne i32 %5, 0, !dbg !13921
  br i1 %tobool, label %if.end, label %if.then, !dbg !13922

if.then:                                          ; preds = %land.lhs.true
  br label %while.end, !dbg !13923

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %6 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !13924
  %7 = bitcast %struct.c_token* %6 to i32*, !dbg !13926
  %bf.load4 = load i32, i32* %7, align 8, !dbg !13926
  %bf.clear5 = and i32 %bf.load4, 255, !dbg !13926
  %cmp6 = icmp eq i32 %bf.clear5, 22, !dbg !13927
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !13928

if.then7:                                         ; preds = %if.end
  br label %return, !dbg !13929

if.end8:                                          ; preds = %if.end
  %8 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !13930
  %9 = bitcast %struct.c_token* %8 to i32*, !dbg !13932
  %bf.load9 = load i32, i32* %9, align 8, !dbg !13932
  %bf.clear10 = and i32 %bf.load9, 255, !dbg !13932
  %cmp11 = icmp eq i32 %bf.clear10, 71, !dbg !13933
  br i1 %cmp11, label %land.lhs.true12, label %if.end17, !dbg !13934

land.lhs.true12:                                  ; preds = %if.end8
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13935
  %in_pragma = getelementptr inbounds %struct.c_parser, %struct.c_parser* %10, i32 0, i32 2, !dbg !13936
  %bf.load13 = load i8, i8* %in_pragma, align 2, !dbg !13936
  %bf.lshr = lshr i8 %bf.load13, 1, !dbg !13936
  %bf.clear14 = and i8 %bf.lshr, 1, !dbg !13936
  %bf.cast = zext i8 %bf.clear14 to i32, !dbg !13936
  %tobool15 = icmp ne i32 %bf.cast, 0, !dbg !13935
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !13937

if.then16:                                        ; preds = %land.lhs.true12
  br label %return, !dbg !13938

if.end17:                                         ; preds = %land.lhs.true12, %if.end8
  %11 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !13939
  %12 = bitcast %struct.c_token* %11 to i32*, !dbg !13941
  %bf.load18 = load i32, i32* %12, align 8, !dbg !13941
  %bf.clear19 = and i32 %bf.load18, 255, !dbg !13941
  %cmp20 = icmp eq i32 %bf.clear19, 41, !dbg !13942
  br i1 %cmp20, label %if.then29, label %lor.lhs.false21, !dbg !13943

lor.lhs.false21:                                  ; preds = %if.end17
  %13 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !13944
  %14 = bitcast %struct.c_token* %13 to i32*, !dbg !13945
  %bf.load22 = load i32, i32* %14, align 8, !dbg !13945
  %bf.clear23 = and i32 %bf.load22, 255, !dbg !13945
  %cmp24 = icmp eq i32 %bf.clear23, 20, !dbg !13946
  br i1 %cmp24, label %if.then29, label %lor.lhs.false25, !dbg !13947

lor.lhs.false25:                                  ; preds = %lor.lhs.false21
  %15 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !13948
  %16 = bitcast %struct.c_token* %15 to i32*, !dbg !13949
  %bf.load26 = load i32, i32* %16, align 8, !dbg !13949
  %bf.clear27 = and i32 %bf.load26, 255, !dbg !13949
  %cmp28 = icmp eq i32 %bf.clear27, 39, !dbg !13950
  br i1 %cmp28, label %if.then29, label %if.else, !dbg !13951

if.then29:                                        ; preds = %lor.lhs.false25, %lor.lhs.false21, %if.end17
  %17 = load i32, i32* %nesting_depth, align 4, !dbg !13952
  %inc = add i32 %17, 1, !dbg !13952
  store i32 %inc, i32* %nesting_depth, align 4, !dbg !13952
  br label %if.end46, !dbg !13952

if.else:                                          ; preds = %lor.lhs.false25
  %18 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !13953
  %19 = bitcast %struct.c_token* %18 to i32*, !dbg !13955
  %bf.load30 = load i32, i32* %19, align 8, !dbg !13955
  %bf.clear31 = and i32 %bf.load30, 255, !dbg !13955
  %cmp32 = icmp eq i32 %bf.clear31, 42, !dbg !13956
  br i1 %cmp32, label %if.then41, label %lor.lhs.false33, !dbg !13957

lor.lhs.false33:                                  ; preds = %if.else
  %20 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !13958
  %21 = bitcast %struct.c_token* %20 to i32*, !dbg !13959
  %bf.load34 = load i32, i32* %21, align 8, !dbg !13959
  %bf.clear35 = and i32 %bf.load34, 255, !dbg !13959
  %cmp36 = icmp eq i32 %bf.clear35, 21, !dbg !13960
  br i1 %cmp36, label %if.then41, label %lor.lhs.false37, !dbg !13961

lor.lhs.false37:                                  ; preds = %lor.lhs.false33
  %22 = load %struct.c_token*, %struct.c_token** %token, align 8, !dbg !13962
  %23 = bitcast %struct.c_token* %22 to i32*, !dbg !13963
  %bf.load38 = load i32, i32* %23, align 8, !dbg !13963
  %bf.clear39 = and i32 %bf.load38, 255, !dbg !13963
  %cmp40 = icmp eq i32 %bf.clear39, 40, !dbg !13964
  br i1 %cmp40, label %if.then41, label %if.end45, !dbg !13965

if.then41:                                        ; preds = %lor.lhs.false37, %lor.lhs.false33, %if.else
  %24 = load i32, i32* %nesting_depth, align 4, !dbg !13966
  %dec = add i32 %24, -1, !dbg !13966
  store i32 %dec, i32* %nesting_depth, align 4, !dbg !13966
  %cmp42 = icmp eq i32 %24, 0, !dbg !13969
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !13970

if.then43:                                        ; preds = %if.then41
  br label %while.end, !dbg !13971

if.end44:                                         ; preds = %if.then41
  br label %if.end45, !dbg !13972

if.end45:                                         ; preds = %if.end44, %lor.lhs.false37
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then29
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13973
  call void @c_parser_consume_token(%struct.c_parser* %25), !dbg !13974
  br label %while.body, !dbg !13906, !llvm.loop !13975

while.end:                                        ; preds = %if.then43, %if.then
  %26 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13977
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %26, i32 0, i32 2, !dbg !13978
  %bf.load47 = load i8, i8* %error, align 2, !dbg !13979
  %bf.clear48 = and i8 %bf.load47, -2, !dbg !13979
  store i8 %bf.clear48, i8* %error, align 2, !dbg !13979
  br label %return, !dbg !13980

return:                                           ; preds = %while.end, %if.then16, %if.then7
  ret void, !dbg !13980
}

declare dso_local %struct.c_parm* @build_c_parm(%struct.c_declspecs*, %union.tree_node*, %struct.c_declarator*) #2

declare dso_local void @objc_set_visibility(i32) #2

declare dso_local void @objc_add_instance_variable(%union.tree_node*) #2

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

declare dso_local void @objc_declare_class(%union.tree_node*) #2

declare dso_local void @objc_declare_alias(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @objc_declare_protocols(%union.tree_node*) #2

declare dso_local void @objc_start_protocol(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_omp_barrier(%struct.c_parser* %parser) #0 !dbg !13981 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %loc = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !13982, metadata !DIExpression()), !dbg !13983
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !13984, metadata !DIExpression()), !dbg !13985
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13986
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !13987
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !13988
  %1 = load i32, i32* %location, align 8, !dbg !13988
  store i32 %1, i32* %loc, align 4, !dbg !13985
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13989
  call void @c_parser_consume_pragma(%struct.c_parser* %2), !dbg !13990
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !13991
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %3), !dbg !13992
  %4 = load i32, i32* %loc, align 4, !dbg !13993
  call void @c_finish_omp_barrier(i32 %4), !dbg !13994
  ret void, !dbg !13995
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_omp_flush(%struct.c_parser* %parser) #0 !dbg !13996 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %loc = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !13997, metadata !DIExpression()), !dbg !13998
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !13999, metadata !DIExpression()), !dbg !14000
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14001
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !14002
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !14003
  %1 = load i32, i32* %location, align 8, !dbg !14003
  store i32 %1, i32* %loc, align 4, !dbg !14000
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14004
  call void @c_parser_consume_pragma(%struct.c_parser* %2), !dbg !14005
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14006
  %call1 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %3, i32 20), !dbg !14008
  %tobool = icmp ne i8 %call1, 0, !dbg !14008
  br i1 %tobool, label %if.then, label %if.else, !dbg !14009

if.then:                                          ; preds = %entry
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14010
  %call2 = call %union.tree_node* @c_parser_omp_var_list_parens(%struct.c_parser* %4, i32 0, %union.tree_node* null), !dbg !14011
  br label %if.end6, !dbg !14011

if.else:                                          ; preds = %entry
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14012
  %call3 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %5, i32 71), !dbg !14014
  %tobool4 = icmp ne i8 %call3, 0, !dbg !14014
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !14015

if.then5:                                         ; preds = %if.else
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14016
  call void @c_parser_error(%struct.c_parser* %6, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.74, i64 0, i64 0)), !dbg !14017
  br label %if.end, !dbg !14017

if.end:                                           ; preds = %if.then5, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14018
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %7), !dbg !14019
  %8 = load i32, i32* %loc, align 4, !dbg !14020
  call void @c_finish_omp_flush(i32 %8), !dbg !14021
  ret void, !dbg !14022
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_omp_taskwait(%struct.c_parser* %parser) #0 !dbg !14023 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %loc = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14024, metadata !DIExpression()), !dbg !14025
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !14026, metadata !DIExpression()), !dbg !14027
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14028
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !14029
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !14030
  %1 = load i32, i32* %location, align 8, !dbg !14030
  store i32 %1, i32* %loc, align 4, !dbg !14027
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14031
  call void @c_parser_consume_pragma(%struct.c_parser* %2), !dbg !14032
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14033
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %3), !dbg !14034
  %4 = load i32, i32* %loc, align 4, !dbg !14035
  call void @c_finish_omp_taskwait(i32 %4), !dbg !14036
  ret void, !dbg !14037
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_omp_threadprivate(%struct.c_parser* %parser) #0 !dbg !14038 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %vars = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %v = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14039, metadata !DIExpression()), !dbg !14040
  call void @llvm.dbg.declare(metadata %union.tree_node** %vars, metadata !14041, metadata !DIExpression()), !dbg !14042
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !14043, metadata !DIExpression()), !dbg !14044
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !14045, metadata !DIExpression()), !dbg !14046
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14047
  call void @c_parser_consume_pragma(%struct.c_parser* %0), !dbg !14048
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14049
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !14050
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !14051
  %2 = load i32, i32* %location, align 8, !dbg !14051
  store i32 %2, i32* %loc, align 4, !dbg !14052
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14053
  %call1 = call %union.tree_node* @c_parser_omp_var_list_parens(%struct.c_parser* %3, i32 0, %union.tree_node* null), !dbg !14054
  store %union.tree_node* %call1, %union.tree_node** %vars, align 8, !dbg !14055
  %4 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !14056
  store %union.tree_node* %4, %union.tree_node** %t, align 8, !dbg !14058
  br label %for.cond, !dbg !14059

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14060
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !14062
  br i1 %tobool, label %for.body, label %for.end, !dbg !14062

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %v, metadata !14063, metadata !DIExpression()), !dbg !14065
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14066
  %list = bitcast %union.tree_node* %6 to %struct.tree_list*, !dbg !14066
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1, !dbg !14066
  %7 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !14066
  store %union.tree_node* %7, %union.tree_node** %v, align 8, !dbg !14065
  %8 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14067
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !14067
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !14067
  %bf.load = load i64, i64* %9, align 8, !dbg !14067
  %bf.clear = and i64 %bf.load, 65535, !dbg !14067
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14067
  %cmp = icmp ne i32 %bf.cast, 32, !dbg !14069
  br i1 %cmp, label %if.then, label %if.else, !dbg !14070

if.then:                                          ; preds = %for.body
  %10 = load i32, i32* %loc, align 4, !dbg !14071
  %11 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14072
  call void (i32, i8*, ...) @error_at(i32 %10, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.75, i64 0, i64 0), %union.tree_node* %11), !dbg !14073
  br label %if.end68, !dbg !14073

if.else:                                          ; preds = %for.body
  %12 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14074
  %base2 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !14074
  %13 = bitcast %struct.tree_base* %base2 to i64*, !dbg !14074
  %bf.load3 = load i64, i64* %13, align 8, !dbg !14074
  %bf.lshr = lshr i64 %bf.load3, 24, !dbg !14074
  %bf.clear4 = and i64 %bf.lshr, 1, !dbg !14074
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !14074
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !14074
  br i1 %tobool6, label %land.lhs.true, label %if.else13, !dbg !14076

land.lhs.true:                                    ; preds = %if.else
  %14 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14077
  %decl_common = bitcast %union.tree_node* %14 to %struct.tree_decl_common*, !dbg !14077
  %lang_flag_3 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !14077
  %15 = bitcast i40* %lang_flag_3 to i64*, !dbg !14077
  %bf.load7 = load i64, i64* %15, align 8, !dbg !14077
  %bf.lshr8 = lshr i64 %bf.load7, 18, !dbg !14077
  %bf.clear9 = and i64 %bf.lshr8, 1, !dbg !14077
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !14077
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !14077
  br i1 %tobool11, label %if.else13, label %if.then12, !dbg !14078

if.then12:                                        ; preds = %land.lhs.true
  %16 = load i32, i32* %loc, align 4, !dbg !14079
  %17 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14080
  call void (i32, i8*, ...) @error_at(i32 %16, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.76, i64 0, i64 0), %union.tree_node* %17), !dbg !14081
  br label %if.end67, !dbg !14081

if.else13:                                        ; preds = %land.lhs.true, %if.else
  %18 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14082
  %base14 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !14082
  %19 = bitcast %struct.tree_base* %base14 to i64*, !dbg !14082
  %bf.load15 = load i64, i64* %19, align 8, !dbg !14082
  %bf.lshr16 = lshr i64 %bf.load15, 26, !dbg !14082
  %bf.clear17 = and i64 %bf.lshr16, 1, !dbg !14082
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !14082
  %tobool19 = icmp ne i32 %bf.cast18, 0, !dbg !14082
  br i1 %tobool19, label %if.else28, label %land.lhs.true20, !dbg !14084

land.lhs.true20:                                  ; preds = %if.else13
  %20 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14085
  %decl_common21 = bitcast %union.tree_node* %20 to %struct.tree_decl_common*, !dbg !14085
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common21, i32 0, i32 2, !dbg !14085
  %21 = bitcast i40* %decl_flag_1 to i64*, !dbg !14085
  %bf.load22 = load i64, i64* %21, align 8, !dbg !14085
  %bf.lshr23 = lshr i64 %bf.load22, 25, !dbg !14085
  %bf.clear24 = and i64 %bf.lshr23, 1, !dbg !14085
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !14085
  %tobool26 = icmp ne i32 %bf.cast25, 0, !dbg !14085
  br i1 %tobool26, label %if.else28, label %if.then27, !dbg !14086

if.then27:                                        ; preds = %land.lhs.true20
  %22 = load i32, i32* %loc, align 4, !dbg !14087
  %23 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14088
  call void (i32, i8*, ...) @error_at(i32 %22, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.77, i64 0, i64 0), %union.tree_node* %23), !dbg !14089
  br label %if.end66, !dbg !14089

if.else28:                                        ; preds = %land.lhs.true20, %if.else13
  %24 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14090
  %common = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !14090
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14090
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14090
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !14092
  %cmp29 = icmp eq %union.tree_node* %25, %26, !dbg !14093
  br i1 %cmp29, label %if.then30, label %if.else31, !dbg !14094

if.then30:                                        ; preds = %if.else28
  br label %if.end65, !dbg !14094

if.else31:                                        ; preds = %if.else28
  %27 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14095
  %common32 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !14095
  %type33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2, !dbg !14095
  %28 = load %union.tree_node*, %union.tree_node** %type33, align 8, !dbg !14095
  %type34 = bitcast %union.tree_node* %28 to %struct.tree_type*, !dbg !14095
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type34, i32 0, i32 2, !dbg !14095
  %29 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !14095
  %cmp35 = icmp ne %union.tree_node* %29, null, !dbg !14095
  br i1 %cmp35, label %if.else37, label %if.then36, !dbg !14097

if.then36:                                        ; preds = %if.else31
  %30 = load i32, i32* %loc, align 4, !dbg !14098
  %31 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14099
  call void (i32, i8*, ...) @error_at(i32 %30, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.78, i64 0, i64 0), %union.tree_node* %31), !dbg !14100
  br label %if.end64, !dbg !14100

if.else37:                                        ; preds = %if.else31
  %32 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14101
  %decl_with_vis = bitcast %union.tree_node* %32 to %struct.tree_decl_with_vis*, !dbg !14101
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !14101
  %33 = bitcast i24* %tls_model to i32*, !dbg !14101
  %bf.load38 = load i32, i32* %33, align 8, !dbg !14101
  %bf.lshr39 = lshr i32 %bf.load38, 13, !dbg !14101
  %bf.clear40 = and i32 %bf.lshr39, 7, !dbg !14101
  %cmp41 = icmp sge i32 %bf.clear40, 2, !dbg !14101
  br i1 %cmp41, label %if.end58, label %if.then42, !dbg !14104

if.then42:                                        ; preds = %if.else37
  %34 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14105
  %call43 = call i32 @decl_default_tls_model(%union.tree_node* %34), !dbg !14107
  %35 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14108
  %decl_with_vis44 = bitcast %union.tree_node* %35 to %struct.tree_decl_with_vis*, !dbg !14108
  %tls_model45 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis44, i32 0, i32 4, !dbg !14108
  %36 = bitcast i24* %tls_model45 to i32*, !dbg !14108
  %bf.load46 = load i32, i32* %36, align 8, !dbg !14109
  %bf.value = and i32 %call43, 7, !dbg !14109
  %bf.shl = shl i32 %bf.value, 13, !dbg !14109
  %bf.clear47 = and i32 %bf.load46, -57345, !dbg !14109
  %bf.set = or i32 %bf.clear47, %bf.shl, !dbg !14109
  store i32 %bf.set, i32* %36, align 8, !dbg !14109
  %37 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14110
  %base48 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !14110
  %38 = bitcast %struct.tree_base* %base48 to i64*, !dbg !14110
  %bf.load49 = load i64, i64* %38, align 8, !dbg !14110
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !14110
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !14110
  %idxprom = zext i32 %bf.cast51 to i64, !dbg !14110
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !14110
  %arrayidx52 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !14110
  %39 = load i8, i8* %arrayidx52, align 1, !dbg !14110
  %conv = zext i8 %39 to i32, !dbg !14110
  %tobool53 = icmp ne i32 %conv, 0, !dbg !14110
  br i1 %tobool53, label %land.lhs.true54, label %if.end, !dbg !14110

land.lhs.true54:                                  ; preds = %if.then42
  %40 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14110
  %decl_with_rtl = bitcast %union.tree_node* %40 to %struct.tree_decl_with_rtl*, !dbg !14110
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !14110
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !14110
  %cmp55 = icmp ne %struct.rtx_def* %41, null, !dbg !14110
  br i1 %cmp55, label %if.then57, label %if.end, !dbg !14112

if.then57:                                        ; preds = %land.lhs.true54
  %42 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14113
  call void @make_decl_rtl(%union.tree_node* %42), !dbg !14114
  br label %if.end, !dbg !14114

if.end:                                           ; preds = %if.then57, %land.lhs.true54, %if.then42
  br label %if.end58, !dbg !14115

if.end58:                                         ; preds = %if.end, %if.else37
  %43 = load %union.tree_node*, %union.tree_node** %v, align 8, !dbg !14116
  %decl_common59 = bitcast %union.tree_node* %43 to %struct.tree_decl_common*, !dbg !14116
  %lang_flag_360 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common59, i32 0, i32 2, !dbg !14116
  %44 = bitcast i40* %lang_flag_360 to i64*, !dbg !14116
  %bf.load61 = load i64, i64* %44, align 8, !dbg !14117
  %bf.clear62 = and i64 %bf.load61, -262145, !dbg !14117
  %bf.set63 = or i64 %bf.clear62, 262144, !dbg !14117
  store i64 %bf.set63, i64* %44, align 8, !dbg !14117
  br label %if.end64

if.end64:                                         ; preds = %if.end58, %if.then36
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then30
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then27
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then12
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then
  br label %for.inc, !dbg !14118

for.inc:                                          ; preds = %if.end68
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14119
  %common69 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !14119
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 1, !dbg !14119
  %46 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !14119
  store %union.tree_node* %46, %union.tree_node** %t, align 8, !dbg !14120
  br label %for.cond, !dbg !14121, !llvm.loop !14122

for.end:                                          ; preds = %for.cond
  %47 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14124
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %47), !dbg !14125
  ret void, !dbg !14126
}

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_omp_construct(%struct.c_parser* %parser) #0 !dbg !14127 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %p_kind = alloca i32, align 4
  %loc = alloca i32, align 4
  %stmt = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14128, metadata !DIExpression()), !dbg !14129
  call void @llvm.dbg.declare(metadata i32* %p_kind, metadata !14130, metadata !DIExpression()), !dbg !14131
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !14132, metadata !DIExpression()), !dbg !14133
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !14134, metadata !DIExpression()), !dbg !14135
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14136
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !14137
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !14138
  %1 = load i32, i32* %location, align 8, !dbg !14138
  store i32 %1, i32* %loc, align 4, !dbg !14139
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14140
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !14141
  %3 = bitcast %struct.c_token* %call1 to i32*, !dbg !14142
  %bf.load = load i32, i32* %3, align 8, !dbg !14142
  %bf.lshr = lshr i32 %bf.load, 24, !dbg !14142
  store i32 %bf.lshr, i32* %p_kind, align 4, !dbg !14143
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14144
  call void @c_parser_consume_pragma(%struct.c_parser* %4), !dbg !14145
  %5 = load i32, i32* %p_kind, align 4, !dbg !14146
  switch i32 %5, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb2
    i32 5, label %sw.bb4
    i32 6, label %sw.bb6
    i32 7, label %sw.bb8
    i32 8, label %sw.bb10
    i32 12, label %sw.bb12
    i32 13, label %sw.bb14
    i32 14, label %sw.bb16
  ], !dbg !14147

sw.bb:                                            ; preds = %entry
  %6 = load i32, i32* %loc, align 4, !dbg !14148
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14150
  call void @c_parser_omp_atomic(i32 %6, %struct.c_parser* %7), !dbg !14151
  br label %if.end, !dbg !14152

sw.bb2:                                           ; preds = %entry
  %8 = load i32, i32* %loc, align 4, !dbg !14153
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14154
  %call3 = call %union.tree_node* @c_parser_omp_critical(i32 %8, %struct.c_parser* %9), !dbg !14155
  store %union.tree_node* %call3, %union.tree_node** %stmt, align 8, !dbg !14156
  br label %sw.epilog, !dbg !14157

sw.bb4:                                           ; preds = %entry
  %10 = load i32, i32* %loc, align 4, !dbg !14158
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14159
  %call5 = call %union.tree_node* @c_parser_omp_for(i32 %10, %struct.c_parser* %11), !dbg !14160
  store %union.tree_node* %call5, %union.tree_node** %stmt, align 8, !dbg !14161
  br label %sw.epilog, !dbg !14162

sw.bb6:                                           ; preds = %entry
  %12 = load i32, i32* %loc, align 4, !dbg !14163
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14164
  %call7 = call %union.tree_node* @c_parser_omp_master(i32 %12, %struct.c_parser* %13), !dbg !14165
  store %union.tree_node* %call7, %union.tree_node** %stmt, align 8, !dbg !14166
  br label %sw.epilog, !dbg !14167

sw.bb8:                                           ; preds = %entry
  %14 = load i32, i32* %loc, align 4, !dbg !14168
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14169
  %call9 = call %union.tree_node* @c_parser_omp_ordered(i32 %14, %struct.c_parser* %15), !dbg !14170
  store %union.tree_node* %call9, %union.tree_node** %stmt, align 8, !dbg !14171
  br label %sw.epilog, !dbg !14172

sw.bb10:                                          ; preds = %entry
  %16 = load i32, i32* %loc, align 4, !dbg !14173
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14174
  %call11 = call %union.tree_node* @c_parser_omp_parallel(i32 %16, %struct.c_parser* %17), !dbg !14175
  store %union.tree_node* %call11, %union.tree_node** %stmt, align 8, !dbg !14176
  br label %sw.epilog, !dbg !14177

sw.bb12:                                          ; preds = %entry
  %18 = load i32, i32* %loc, align 4, !dbg !14178
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14179
  %call13 = call %union.tree_node* @c_parser_omp_sections(i32 %18, %struct.c_parser* %19), !dbg !14180
  store %union.tree_node* %call13, %union.tree_node** %stmt, align 8, !dbg !14181
  br label %sw.epilog, !dbg !14182

sw.bb14:                                          ; preds = %entry
  %20 = load i32, i32* %loc, align 4, !dbg !14183
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14184
  %call15 = call %union.tree_node* @c_parser_omp_single(i32 %20, %struct.c_parser* %21), !dbg !14185
  store %union.tree_node* %call15, %union.tree_node** %stmt, align 8, !dbg !14186
  br label %sw.epilog, !dbg !14187

sw.bb16:                                          ; preds = %entry
  %22 = load i32, i32* %loc, align 4, !dbg !14188
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14189
  %call17 = call %union.tree_node* @c_parser_omp_task(i32 %22, %struct.c_parser* %23), !dbg !14190
  store %union.tree_node* %call17, %union.tree_node** %stmt, align 8, !dbg !14191
  br label %sw.epilog, !dbg !14192

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 8633, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !14193
  br label %sw.epilog, !dbg !14194

sw.epilog:                                        ; preds = %sw.default, %sw.bb16, %sw.bb14, %sw.bb12, %sw.bb10, %sw.bb8, %sw.bb6, %sw.bb4, %sw.bb2
  %24 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14195
  %tobool = icmp ne %union.tree_node* %24, null, !dbg !14195
  br i1 %tobool, label %if.then, label %if.end, !dbg !14197

if.then:                                          ; preds = %sw.epilog
  %25 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14198
  %base = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !14198
  %26 = bitcast %struct.tree_base* %base to i64*, !dbg !14198
  %bf.load18 = load i64, i64* %26, align 8, !dbg !14198
  %bf.clear = and i64 %bf.load18, 65535, !dbg !14198
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14198
  %idxprom = sext i32 %bf.cast to i64, !dbg !14198
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !14198
  %27 = load i32, i32* %arrayidx, align 4, !dbg !14198
  %cmp = icmp uge i32 %27, 4, !dbg !14198
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !14198

land.lhs.true:                                    ; preds = %if.then
  %28 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14198
  %base19 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !14198
  %29 = bitcast %struct.tree_base* %base19 to i64*, !dbg !14198
  %bf.load20 = load i64, i64* %29, align 8, !dbg !14198
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !14198
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !14198
  %idxprom23 = sext i32 %bf.cast22 to i64, !dbg !14198
  %arrayidx24 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom23, !dbg !14198
  %30 = load i32, i32* %arrayidx24, align 4, !dbg !14198
  %cmp25 = icmp ule i32 %30, 10, !dbg !14198
  br i1 %cmp25, label %cond.true, label %cond.false, !dbg !14198

cond.true:                                        ; preds = %land.lhs.true
  %31 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14198
  %exp = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !14198
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !14198
  %32 = load i32, i32* %locus, align 8, !dbg !14198
  br label %cond.end, !dbg !14198

cond.false:                                       ; preds = %land.lhs.true, %if.then
  br label %cond.end, !dbg !14198

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ 0, %cond.false ], !dbg !14198
  %cmp26 = icmp ne i32 %cond, 0, !dbg !14198
  br i1 %cmp26, label %cond.false28, label %cond.true27, !dbg !14198

cond.true27:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 8637, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !14198
  br label %cond.end29, !dbg !14198

cond.false28:                                     ; preds = %cond.end
  br label %cond.end29, !dbg !14198

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ 0, %cond.true27 ], [ 0, %cond.false28 ], !dbg !14198
  br label %if.end, !dbg !14198

if.end:                                           ; preds = %sw.bb, %cond.end29, %sw.epilog
  ret void, !dbg !14199
}

declare dso_local void @c_invoke_pragma_handler(i32) #2

declare dso_local void @c_finish_omp_barrier(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_var_list_parens(%struct.c_parser* %parser, i32 %kind, %union.tree_node* %list) #0 !dbg !14200 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %kind.addr = alloca i32, align 4
  %list.addr = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14203, metadata !DIExpression()), !dbg !14204
  store i32 %kind, i32* %kind.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kind.addr, metadata !14205, metadata !DIExpression()), !dbg !14206
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !14207, metadata !DIExpression()), !dbg !14208
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !14209, metadata !DIExpression()), !dbg !14210
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14211
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !14212
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !14213
  %1 = load i32, i32* %location, align 8, !dbg !14213
  store i32 %1, i32* %loc, align 4, !dbg !14210
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14214
  %call1 = call zeroext i8 @c_parser_require(%struct.c_parser* %2, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !14216
  %tobool = icmp ne i8 %call1, 0, !dbg !14216
  br i1 %tobool, label %if.then, label %if.end, !dbg !14217

if.then:                                          ; preds = %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14218
  %4 = load i32, i32* %loc, align 4, !dbg !14220
  %5 = load i32, i32* %kind.addr, align 4, !dbg !14221
  %6 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !14222
  %call2 = call %union.tree_node* @c_parser_omp_variable_list(%struct.c_parser* %3, i32 %4, i32 %5, %union.tree_node* %6), !dbg !14223
  store %union.tree_node* %call2, %union.tree_node** %list.addr, align 8, !dbg !14224
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14225
  call void @c_parser_skip_until_found(%struct.c_parser* %7, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !14226
  br label %if.end, !dbg !14227

if.end:                                           ; preds = %if.then, %entry
  %8 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !14228
  ret %union.tree_node* %8, !dbg !14229
}

declare dso_local void @c_finish_omp_flush(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_variable_list(%struct.c_parser* %parser, i32 %clause_loc, i32 %kind, %union.tree_node* %list) #0 !dbg !14230 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %clause_loc.addr = alloca i32, align 4
  %kind.addr = alloca i32, align 4
  %list.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %u = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14233, metadata !DIExpression()), !dbg !14234
  store i32 %clause_loc, i32* %clause_loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %clause_loc.addr, metadata !14235, metadata !DIExpression()), !dbg !14236
  store i32 %kind, i32* %kind.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %kind.addr, metadata !14237, metadata !DIExpression()), !dbg !14238
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !14239, metadata !DIExpression()), !dbg !14240
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14241
  %call = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %0, i32 53), !dbg !14243
  %conv = zext i8 %call to i32, !dbg !14243
  %tobool = icmp ne i32 %conv, 0, !dbg !14243
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !14244

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14245
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !14246
  %2 = bitcast %struct.c_token* %call1 to i32*, !dbg !14247
  %bf.load = load i32, i32* %2, align 8, !dbg !14247
  %bf.lshr = lshr i32 %bf.load, 8, !dbg !14247
  %bf.clear = and i32 %bf.lshr, 255, !dbg !14247
  %cmp = icmp ne i32 %bf.clear, 0, !dbg !14248
  br i1 %cmp, label %if.then, label %if.end, !dbg !14249

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14250
  call void @c_parser_error(%struct.c_parser* %3, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !14251
  br label %if.end, !dbg !14251

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %while.cond, !dbg !14252

while.cond:                                       ; preds = %if.end36, %if.end
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14253
  %call3 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %4, i32 53), !dbg !14254
  %conv4 = zext i8 %call3 to i32, !dbg !14254
  %tobool5 = icmp ne i32 %conv4, 0, !dbg !14254
  br i1 %tobool5, label %land.rhs, label %land.end, !dbg !14255

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14256
  %call6 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !14257
  %6 = bitcast %struct.c_token* %call6 to i32*, !dbg !14258
  %bf.load7 = load i32, i32* %6, align 8, !dbg !14258
  %bf.lshr8 = lshr i32 %bf.load7, 8, !dbg !14258
  %bf.clear9 = and i32 %bf.lshr8, 255, !dbg !14258
  %cmp10 = icmp eq i32 %bf.clear9, 0, !dbg !14259
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp10, %land.rhs ], !dbg !14260
  br i1 %7, label %while.body, label %while.end, !dbg !14252

while.body:                                       ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !14261, metadata !DIExpression()), !dbg !14263
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14264
  %call12 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %8), !dbg !14265
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call12, i32 0, i32 1, !dbg !14266
  %9 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14266
  %call13 = call %union.tree_node* @lookup_name(%union.tree_node* %9), !dbg !14267
  store %union.tree_node* %call13, %union.tree_node** %t, align 8, !dbg !14263
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14268
  %cmp14 = icmp eq %union.tree_node* %10, null, !dbg !14270
  br i1 %cmp14, label %if.then16, label %if.else, !dbg !14271

if.then16:                                        ; preds = %while.body
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14272
  %call17 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %11), !dbg !14273
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call17, i32 0, i32 2, !dbg !14274
  %12 = load i32, i32* %location, align 8, !dbg !14274
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14275
  %call18 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %13), !dbg !14276
  %value19 = getelementptr inbounds %struct.c_token, %struct.c_token* %call18, i32 0, i32 1, !dbg !14277
  %14 = load %union.tree_node*, %union.tree_node** %value19, align 8, !dbg !14277
  call void @undeclared_variable(i32 %12, %union.tree_node* %14), !dbg !14278
  br label %if.end32, !dbg !14278

if.else:                                          ; preds = %while.body
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14279
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !14281
  %cmp20 = icmp eq %union.tree_node* %15, %16, !dbg !14282
  br i1 %cmp20, label %if.then22, label %if.else23, !dbg !14283

if.then22:                                        ; preds = %if.else
  br label %if.end31, !dbg !14283

if.else23:                                        ; preds = %if.else
  %17 = load i32, i32* %kind.addr, align 4, !dbg !14284
  %cmp24 = icmp ne i32 %17, 0, !dbg !14286
  br i1 %cmp24, label %if.then26, label %if.else28, !dbg !14287

if.then26:                                        ; preds = %if.else23
  call void @llvm.dbg.declare(metadata %union.tree_node** %u, metadata !14288, metadata !DIExpression()), !dbg !14290
  %18 = load i32, i32* %clause_loc.addr, align 4, !dbg !14291
  %19 = load i32, i32* %kind.addr, align 4, !dbg !14292
  %call27 = call %union.tree_node* @build_omp_clause(i32 %18, i32 %19), !dbg !14293
  store %union.tree_node* %call27, %union.tree_node** %u, align 8, !dbg !14290
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14294
  %21 = load %union.tree_node*, %union.tree_node** %u, align 8, !dbg !14295
  %omp_clause = bitcast %union.tree_node* %21 to %struct.tree_omp_clause*, !dbg !14295
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 6, !dbg !14295
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !14295
  store %union.tree_node* %20, %union.tree_node** %arrayidx, align 8, !dbg !14296
  %22 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !14297
  %23 = load %union.tree_node*, %union.tree_node** %u, align 8, !dbg !14298
  %common = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !14298
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !14298
  store %union.tree_node* %22, %union.tree_node** %chain, align 8, !dbg !14299
  %24 = load %union.tree_node*, %union.tree_node** %u, align 8, !dbg !14300
  store %union.tree_node* %24, %union.tree_node** %list.addr, align 8, !dbg !14301
  br label %if.end30, !dbg !14302

if.else28:                                        ; preds = %if.else23
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !14303
  %26 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !14303
  %call29 = call %union.tree_node* @tree_cons_stat(%union.tree_node* %25, %union.tree_node* null, %union.tree_node* %26), !dbg !14303
  store %union.tree_node* %call29, %union.tree_node** %list.addr, align 8, !dbg !14304
  br label %if.end30

if.end30:                                         ; preds = %if.else28, %if.then26
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then22
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %if.then16
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14305
  call void @c_parser_consume_token(%struct.c_parser* %27), !dbg !14306
  %28 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14307
  %call33 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %28, i32 19), !dbg !14309
  %tobool34 = icmp ne i8 %call33, 0, !dbg !14309
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !14310

if.then35:                                        ; preds = %if.end32
  br label %while.end, !dbg !14311

if.end36:                                         ; preds = %if.end32
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14312
  call void @c_parser_consume_token(%struct.c_parser* %29), !dbg !14313
  br label %while.cond, !dbg !14252, !llvm.loop !14314

while.end:                                        ; preds = %if.then35, %land.end
  %30 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !14316
  ret %union.tree_node* %30, !dbg !14317
}

declare dso_local void @undeclared_variable(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_omp_clause(i32, i32) #2

declare dso_local void @c_finish_omp_taskwait(i32) #2

declare dso_local i32 @decl_default_tls_model(%union.tree_node*) #2

declare dso_local void @make_decl_rtl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_omp_atomic(i32 %loc, %struct.c_parser* %parser) #0 !dbg !14318 {
entry:
  %loc.addr = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %stmt = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %rhs_expr = alloca %struct.c_expr, align 8
  %tmp = alloca %struct.c_expr, align 8
  %rhs_loc = alloca i32, align 4
  %tmp20 = alloca %struct.c_expr, align 8
  %tmp21 = alloca %struct.c_expr, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14321, metadata !DIExpression()), !dbg !14322
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14323, metadata !DIExpression()), !dbg !14324
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !14325, metadata !DIExpression()), !dbg !14326
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !14327, metadata !DIExpression()), !dbg !14328
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !14329, metadata !DIExpression()), !dbg !14330
  call void @llvm.dbg.declare(metadata i32* %code, metadata !14331, metadata !DIExpression()), !dbg !14332
  call void @llvm.dbg.declare(metadata %struct.c_expr* %rhs_expr, metadata !14333, metadata !DIExpression()), !dbg !14334
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14335
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %0), !dbg !14336
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14337
  call void @c_parser_unary_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %1), !dbg !14338
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !14339
  %2 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14339
  store %union.tree_node* %2, %union.tree_node** %lhs, align 8, !dbg !14340
  %3 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !14341
  %call = call %union.tree_node* @c_fully_fold(%union.tree_node* %3, i8 zeroext 0, i8* null), !dbg !14342
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !14343
  %4 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !14344
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !14344
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !14344
  %bf.load = load i64, i64* %5, align 8, !dbg !14344
  %bf.clear = and i64 %bf.load, 65535, !dbg !14344
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14344
  switch i32 %bf.cast, label %sw.default [
    i32 0, label %sw.bb
    i32 126, label %sw.bb1
    i32 128, label %sw.bb1
    i32 125, label %sw.bb2
    i32 127, label %sw.bb2
  ], !dbg !14345

sw.bb:                                            ; preds = %entry
  br label %saw_error, !dbg !14346

saw_error:                                        ; preds = %sw.default18, %sw.bb
  call void @llvm.dbg.label(metadata !14347), !dbg !14349
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14350
  call void @c_parser_skip_to_end_of_block_or_statement(%struct.c_parser* %6), !dbg !14351
  br label %return, !dbg !14352

sw.bb1:                                           ; preds = %entry, %entry
  %7 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !14353
  %exp = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !14353
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14353
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14353
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14353
  store %union.tree_node* %8, %union.tree_node** %lhs, align 8, !dbg !14354
  store i32 63, i32* %code, align 4, !dbg !14355
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !14356
  store %union.tree_node* %9, %union.tree_node** %rhs, align 8, !dbg !14357
  br label %sw.epilog24, !dbg !14358

sw.bb2:                                           ; preds = %entry, %entry
  %10 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !14359
  %exp3 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !14359
  %operands4 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp3, i32 0, i32 3, !dbg !14359
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands4, i64 0, i64 0, !dbg !14359
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !14359
  store %union.tree_node* %11, %union.tree_node** %lhs, align 8, !dbg !14360
  store i32 64, i32* %code, align 4, !dbg !14361
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !14362
  store %union.tree_node* %12, %union.tree_node** %rhs, align 8, !dbg !14363
  br label %sw.epilog24, !dbg !14364

sw.default:                                       ; preds = %entry
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14365
  %call6 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %13), !dbg !14366
  %14 = bitcast %struct.c_token* %call6 to i32*, !dbg !14367
  %bf.load7 = load i32, i32* %14, align 8, !dbg !14367
  %bf.clear8 = and i32 %bf.load7, 255, !dbg !14367
  switch i32 %bf.clear8, label %sw.default18 [
    i32 29, label %sw.bb9
    i32 30, label %sw.bb10
    i32 27, label %sw.bb11
    i32 28, label %sw.bb12
    i32 36, label %sw.bb13
    i32 35, label %sw.bb14
    i32 32, label %sw.bb15
    i32 33, label %sw.bb16
    i32 34, label %sw.bb17
  ], !dbg !14368

sw.bb9:                                           ; preds = %sw.default
  store i32 65, i32* %code, align 4, !dbg !14369
  br label %sw.epilog, !dbg !14371

sw.bb10:                                          ; preds = %sw.default
  store i32 67, i32* %code, align 4, !dbg !14372
  br label %sw.epilog, !dbg !14373

sw.bb11:                                          ; preds = %sw.default
  store i32 63, i32* %code, align 4, !dbg !14374
  br label %sw.epilog, !dbg !14375

sw.bb12:                                          ; preds = %sw.default
  store i32 64, i32* %code, align 4, !dbg !14376
  br label %sw.epilog, !dbg !14377

sw.bb13:                                          ; preds = %sw.default
  store i32 83, i32* %code, align 4, !dbg !14378
  br label %sw.epilog, !dbg !14379

sw.bb14:                                          ; preds = %sw.default
  store i32 84, i32* %code, align 4, !dbg !14380
  br label %sw.epilog, !dbg !14381

sw.bb15:                                          ; preds = %sw.default
  store i32 89, i32* %code, align 4, !dbg !14382
  br label %sw.epilog, !dbg !14383

sw.bb16:                                          ; preds = %sw.default
  store i32 87, i32* %code, align 4, !dbg !14384
  br label %sw.epilog, !dbg !14385

sw.bb17:                                          ; preds = %sw.default
  store i32 88, i32* %code, align 4, !dbg !14386
  br label %sw.epilog, !dbg !14387

sw.default18:                                     ; preds = %sw.default
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14388
  call void @c_parser_error(%struct.c_parser* %15, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.79, i64 0, i64 0)), !dbg !14389
  br label %saw_error, !dbg !14390

sw.epilog:                                        ; preds = %sw.bb17, %sw.bb16, %sw.bb15, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb9
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14391
  call void @c_parser_consume_token(%struct.c_parser* %16), !dbg !14392
  call void @llvm.dbg.declare(metadata i32* %rhs_loc, metadata !14393, metadata !DIExpression()), !dbg !14395
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14396
  %call19 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %17), !dbg !14397
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call19, i32 0, i32 2, !dbg !14398
  %18 = load i32, i32* %location, align 8, !dbg !14398
  store i32 %18, i32* %rhs_loc, align 4, !dbg !14395
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14399
  call void @c_parser_expression(%struct.c_expr* sret %tmp20, %struct.c_parser* %19), !dbg !14400
  %20 = bitcast %struct.c_expr* %rhs_expr to i8*, !dbg !14400
  %21 = bitcast %struct.c_expr* %tmp20 to i8*, !dbg !14400
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 24, i1 false), !dbg !14400
  %22 = load i32, i32* %rhs_loc, align 4, !dbg !14401
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp21, i32 %22, %struct.c_expr* byval(%struct.c_expr) align 8 %rhs_expr), !dbg !14402
  %23 = bitcast %struct.c_expr* %rhs_expr to i8*, !dbg !14402
  %24 = bitcast %struct.c_expr* %tmp21 to i8*, !dbg !14402
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 24, i1 false), !dbg !14402
  %value22 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %rhs_expr, i32 0, i32 0, !dbg !14403
  %25 = load %union.tree_node*, %union.tree_node** %value22, align 8, !dbg !14403
  store %union.tree_node* %25, %union.tree_node** %rhs, align 8, !dbg !14404
  %26 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !14405
  %call23 = call %union.tree_node* @c_fully_fold(%union.tree_node* %26, i8 zeroext 0, i8* null), !dbg !14406
  store %union.tree_node* %call23, %union.tree_node** %rhs, align 8, !dbg !14407
  br label %sw.epilog24, !dbg !14408

sw.epilog24:                                      ; preds = %sw.epilog, %sw.bb2, %sw.bb1
  %27 = load i32, i32* %loc.addr, align 4, !dbg !14409
  %28 = load i32, i32* %code, align 4, !dbg !14410
  %29 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !14411
  %30 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !14412
  %call25 = call %union.tree_node* @c_finish_omp_atomic(i32 %27, i32 %28, %union.tree_node* %29, %union.tree_node* %30), !dbg !14413
  store %union.tree_node* %call25, %union.tree_node** %stmt, align 8, !dbg !14414
  %31 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14415
  %32 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !14417
  %cmp = icmp ne %union.tree_node* %31, %32, !dbg !14418
  br i1 %cmp, label %if.then, label %if.end, !dbg !14419

if.then:                                          ; preds = %sw.epilog24
  %33 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14420
  %call26 = call %union.tree_node* @add_stmt(%union.tree_node* %33), !dbg !14421
  br label %if.end, !dbg !14421

if.end:                                           ; preds = %if.then, %sw.epilog24
  %34 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14422
  call void @c_parser_skip_until_found(%struct.c_parser* %34, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !14423
  br label %return, !dbg !14424

return:                                           ; preds = %if.end, %saw_error
  ret void, !dbg !14424
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_critical(i32 %loc, %struct.c_parser* %parser) #0 !dbg !14425 {
entry:
  %loc.addr = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  %stmt = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14428, metadata !DIExpression()), !dbg !14429
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14430, metadata !DIExpression()), !dbg !14431
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !14432, metadata !DIExpression()), !dbg !14433
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !14434, metadata !DIExpression()), !dbg !14435
  store %union.tree_node* null, %union.tree_node** %name, align 8, !dbg !14435
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14436
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 20), !dbg !14438
  %tobool = icmp ne i8 %call, 0, !dbg !14438
  br i1 %tobool, label %if.then, label %if.else6, !dbg !14439

if.then:                                          ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14440
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !14442
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14443
  %call1 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %2, i32 53), !dbg !14445
  %tobool2 = icmp ne i8 %call1, 0, !dbg !14445
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !14446

if.then3:                                         ; preds = %if.then
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14447
  %call4 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !14449
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call4, i32 0, i32 1, !dbg !14450
  %4 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14450
  store %union.tree_node* %4, %union.tree_node** %name, align 8, !dbg !14451
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14452
  call void @c_parser_consume_token(%struct.c_parser* %5), !dbg !14453
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14454
  %call5 = call zeroext i8 @c_parser_require(%struct.c_parser* %6, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !14455
  br label %if.end, !dbg !14456

if.else:                                          ; preds = %if.then
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14457
  call void @c_parser_error(%struct.c_parser* %7, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0)), !dbg !14458
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end11, !dbg !14459

if.else6:                                         ; preds = %entry
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14460
  %call7 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %8, i32 71), !dbg !14462
  %tobool8 = icmp ne i8 %call7, 0, !dbg !14462
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !14463

if.then9:                                         ; preds = %if.else6
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14464
  call void @c_parser_error(%struct.c_parser* %9, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.74, i64 0, i64 0)), !dbg !14465
  br label %if.end10, !dbg !14465

if.end10:                                         ; preds = %if.then9, %if.else6
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.end
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14466
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %10), !dbg !14467
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14468
  %call12 = call %union.tree_node* @c_parser_omp_structured_block(%struct.c_parser* %11), !dbg !14469
  store %union.tree_node* %call12, %union.tree_node** %stmt, align 8, !dbg !14470
  %12 = load i32, i32* %loc.addr, align 4, !dbg !14471
  %13 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14472
  %14 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !14473
  %call13 = call %union.tree_node* @c_finish_omp_critical(i32 %12, %union.tree_node* %13, %union.tree_node* %14), !dbg !14474
  ret %union.tree_node* %call13, !dbg !14475
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_for(i32 %loc, %struct.c_parser* %parser) #0 !dbg !14476 {
entry:
  %loc.addr = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  %block = alloca %union.tree_node*, align 8
  %clauses = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14477, metadata !DIExpression()), !dbg !14478
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14479, metadata !DIExpression()), !dbg !14480
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !14481, metadata !DIExpression()), !dbg !14482
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses, metadata !14483, metadata !DIExpression()), !dbg !14484
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !14485, metadata !DIExpression()), !dbg !14486
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14487
  %call = call %union.tree_node* @c_parser_omp_all_clauses(%struct.c_parser* %0, i32 15778, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.80, i64 0, i64 0)), !dbg !14488
  store %union.tree_node* %call, %union.tree_node** %clauses, align 8, !dbg !14489
  %call1 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext 1), !dbg !14490
  store %union.tree_node* %call1, %union.tree_node** %block, align 8, !dbg !14491
  %1 = load i32, i32* %loc.addr, align 4, !dbg !14492
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14493
  %3 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14494
  %call2 = call %union.tree_node* @c_parser_omp_for_loop(i32 %1, %struct.c_parser* %2, %union.tree_node* %3, %union.tree_node** null), !dbg !14495
  store %union.tree_node* %call2, %union.tree_node** %ret, align 8, !dbg !14496
  %4 = load i32, i32* %loc.addr, align 4, !dbg !14497
  %5 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !14498
  %call3 = call %union.tree_node* @c_end_compound_stmt(i32 %4, %union.tree_node* %5, i8 zeroext 1), !dbg !14499
  store %union.tree_node* %call3, %union.tree_node** %block, align 8, !dbg !14500
  %6 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !14501
  %call4 = call %union.tree_node* @add_stmt(%union.tree_node* %6), !dbg !14502
  %7 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !14503
  ret %union.tree_node* %7, !dbg !14504
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_master(i32 %loc, %struct.c_parser* %parser) #0 !dbg !14505 {
entry:
  %loc.addr = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14506, metadata !DIExpression()), !dbg !14507
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14508, metadata !DIExpression()), !dbg !14509
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14510
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %0), !dbg !14511
  %1 = load i32, i32* %loc.addr, align 4, !dbg !14512
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14513
  %call = call %union.tree_node* @c_parser_omp_structured_block(%struct.c_parser* %2), !dbg !14514
  %call1 = call %union.tree_node* @c_finish_omp_master(i32 %1, %union.tree_node* %call), !dbg !14515
  ret %union.tree_node* %call1, !dbg !14516
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_ordered(i32 %loc, %struct.c_parser* %parser) #0 !dbg !14517 {
entry:
  %loc.addr = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14518, metadata !DIExpression()), !dbg !14519
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14520, metadata !DIExpression()), !dbg !14521
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14522
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %0), !dbg !14523
  %1 = load i32, i32* %loc.addr, align 4, !dbg !14524
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14525
  %call = call %union.tree_node* @c_parser_omp_structured_block(%struct.c_parser* %2), !dbg !14526
  %call1 = call %union.tree_node* @c_finish_omp_ordered(i32 %1, %union.tree_node* %call), !dbg !14527
  ret %union.tree_node* %call1, !dbg !14528
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_parallel(i32 %loc, %struct.c_parser* %parser) #0 !dbg !14529 {
entry:
  %loc.addr = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  %p_kind = alloca i32, align 4
  %p_name = alloca i8*, align 8
  %stmt = alloca %union.tree_node*, align 8
  %clauses = alloca %union.tree_node*, align 8
  %par_clause = alloca %union.tree_node*, align 8
  %ws_clause = alloca %union.tree_node*, align 8
  %block = alloca %union.tree_node*, align 8
  %mask = alloca i32, align 4
  %p = alloca i8*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14530, metadata !DIExpression()), !dbg !14531
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14532, metadata !DIExpression()), !dbg !14533
  call void @llvm.dbg.declare(metadata i32* %p_kind, metadata !14534, metadata !DIExpression()), !dbg !14535
  store i32 8, i32* %p_kind, align 4, !dbg !14535
  call void @llvm.dbg.declare(metadata i8** %p_name, metadata !14536, metadata !DIExpression()), !dbg !14537
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.117, i64 0, i64 0), i8** %p_name, align 8, !dbg !14537
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !14538, metadata !DIExpression()), !dbg !14539
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses, metadata !14540, metadata !DIExpression()), !dbg !14541
  call void @llvm.dbg.declare(metadata %union.tree_node** %par_clause, metadata !14542, metadata !DIExpression()), !dbg !14543
  call void @llvm.dbg.declare(metadata %union.tree_node** %ws_clause, metadata !14544, metadata !DIExpression()), !dbg !14545
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !14546, metadata !DIExpression()), !dbg !14547
  call void @llvm.dbg.declare(metadata i32* %mask, metadata !14548, metadata !DIExpression()), !dbg !14549
  store i32 23156, i32* %mask, align 4, !dbg !14549
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14550
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 40), !dbg !14552
  %tobool = icmp ne i8 %call, 0, !dbg !14552
  br i1 %tobool, label %if.then, label %if.else, !dbg !14553

if.then:                                          ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14554
  call void @c_parser_consume_token(%struct.c_parser* %1), !dbg !14556
  store i32 9, i32* %p_kind, align 4, !dbg !14557
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.118, i64 0, i64 0), i8** %p_name, align 8, !dbg !14558
  %2 = load i32, i32* %mask, align 4, !dbg !14559
  %or = or i32 %2, 15778, !dbg !14559
  store i32 %or, i32* %mask, align 4, !dbg !14559
  %3 = load i32, i32* %mask, align 4, !dbg !14560
  %and = and i32 %3, -257, !dbg !14560
  store i32 %and, i32* %mask, align 4, !dbg !14560
  br label %if.end10, !dbg !14561

if.else:                                          ; preds = %entry
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14562
  %call1 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %4, i32 53), !dbg !14564
  %tobool2 = icmp ne i8 %call1, 0, !dbg !14564
  br i1 %tobool2, label %if.then3, label %if.end9, !dbg !14565

if.then3:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i8** %p, metadata !14566, metadata !DIExpression()), !dbg !14568
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14569
  %call4 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !14569
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call4, i32 0, i32 1, !dbg !14569
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14569
  %identifier = bitcast %union.tree_node* %6 to %struct.tree_identifier*, !dbg !14569
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !14569
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !14569
  %7 = load i8*, i8** %str, align 8, !dbg !14569
  store i8* %7, i8** %p, align 8, !dbg !14568
  %8 = load i8*, i8** %p, align 8, !dbg !14570
  %call5 = call i32 @strcmp(i8* %8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.119, i64 0, i64 0)), !dbg !14572
  %cmp = icmp eq i32 %call5, 0, !dbg !14573
  br i1 %cmp, label %if.then6, label %if.end, !dbg !14574

if.then6:                                         ; preds = %if.then3
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14575
  call void @c_parser_consume_token(%struct.c_parser* %9), !dbg !14577
  store i32 10, i32* %p_kind, align 4, !dbg !14578
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.120, i64 0, i64 0), i8** %p_name, align 8, !dbg !14579
  %10 = load i32, i32* %mask, align 4, !dbg !14580
  %or7 = or i32 %10, 6560, !dbg !14580
  store i32 %or7, i32* %mask, align 4, !dbg !14580
  %11 = load i32, i32* %mask, align 4, !dbg !14581
  %and8 = and i32 %11, -257, !dbg !14581
  store i32 %and8, i32* %mask, align 4, !dbg !14581
  br label %if.end, !dbg !14582

if.end:                                           ; preds = %if.then6, %if.then3
  br label %if.end9, !dbg !14583

if.end9:                                          ; preds = %if.end, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14584
  %13 = load i32, i32* %mask, align 4, !dbg !14585
  %14 = load i8*, i8** %p_name, align 8, !dbg !14586
  %call11 = call %union.tree_node* @c_parser_omp_all_clauses(%struct.c_parser* %12, i32 %13, i8* %14), !dbg !14587
  store %union.tree_node* %call11, %union.tree_node** %clauses, align 8, !dbg !14588
  %15 = load i32, i32* %p_kind, align 4, !dbg !14589
  switch i32 %15, label %sw.default [
    i32 8, label %sw.bb
    i32 9, label %sw.bb14
    i32 10, label %sw.bb18
  ], !dbg !14590

sw.bb:                                            ; preds = %if.end10
  %call12 = call %union.tree_node* @c_begin_omp_parallel(), !dbg !14591
  store %union.tree_node* %call12, %union.tree_node** %block, align 8, !dbg !14593
  %16 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14594
  call void @c_parser_statement(%struct.c_parser* %16), !dbg !14595
  %17 = load i32, i32* %loc.addr, align 4, !dbg !14596
  %18 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14597
  %19 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !14598
  %call13 = call %union.tree_node* @c_finish_omp_parallel(i32 %17, %union.tree_node* %18, %union.tree_node* %19), !dbg !14599
  store %union.tree_node* %call13, %union.tree_node** %stmt, align 8, !dbg !14600
  br label %sw.epilog, !dbg !14601

sw.bb14:                                          ; preds = %if.end10
  %call15 = call %union.tree_node* @c_begin_omp_parallel(), !dbg !14602
  store %union.tree_node* %call15, %union.tree_node** %block, align 8, !dbg !14603
  %20 = load i32, i32* %loc.addr, align 4, !dbg !14604
  %21 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14605
  call void @c_split_parallel_clauses(i32 %20, %union.tree_node* %21, %union.tree_node** %par_clause, %union.tree_node** %ws_clause), !dbg !14606
  %22 = load i32, i32* %loc.addr, align 4, !dbg !14607
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14608
  %24 = load %union.tree_node*, %union.tree_node** %ws_clause, align 8, !dbg !14609
  %call16 = call %union.tree_node* @c_parser_omp_for_loop(i32 %22, %struct.c_parser* %23, %union.tree_node* %24, %union.tree_node** %par_clause), !dbg !14610
  %25 = load i32, i32* %loc.addr, align 4, !dbg !14611
  %26 = load %union.tree_node*, %union.tree_node** %par_clause, align 8, !dbg !14612
  %27 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !14613
  %call17 = call %union.tree_node* @c_finish_omp_parallel(i32 %25, %union.tree_node* %26, %union.tree_node* %27), !dbg !14614
  store %union.tree_node* %call17, %union.tree_node** %stmt, align 8, !dbg !14615
  %28 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14616
  %base = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !14616
  %29 = bitcast %struct.tree_base* %base to i64*, !dbg !14616
  %bf.load = load i64, i64* %29, align 8, !dbg !14617
  %bf.clear = and i64 %bf.load, -268435457, !dbg !14617
  %bf.set = or i64 %bf.clear, 268435456, !dbg !14617
  store i64 %bf.set, i64* %29, align 8, !dbg !14617
  br label %sw.epilog, !dbg !14618

sw.bb18:                                          ; preds = %if.end10
  %call19 = call %union.tree_node* @c_begin_omp_parallel(), !dbg !14619
  store %union.tree_node* %call19, %union.tree_node** %block, align 8, !dbg !14620
  %30 = load i32, i32* %loc.addr, align 4, !dbg !14621
  %31 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14622
  call void @c_split_parallel_clauses(i32 %30, %union.tree_node* %31, %union.tree_node** %par_clause, %union.tree_node** %ws_clause), !dbg !14623
  %32 = load i32, i32* %loc.addr, align 4, !dbg !14624
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14625
  %call20 = call %union.tree_node* @c_parser_omp_sections_scope(i32 %32, %struct.c_parser* %33), !dbg !14626
  store %union.tree_node* %call20, %union.tree_node** %stmt, align 8, !dbg !14627
  %34 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14628
  %tobool21 = icmp ne %union.tree_node* %34, null, !dbg !14628
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !14630

if.then22:                                        ; preds = %sw.bb18
  %35 = load %union.tree_node*, %union.tree_node** %ws_clause, align 8, !dbg !14631
  %36 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14632
  %exp = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !14632
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14632
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !14632
  store %union.tree_node* %35, %union.tree_node** %arrayidx, align 8, !dbg !14633
  br label %if.end23, !dbg !14632

if.end23:                                         ; preds = %if.then22, %sw.bb18
  %37 = load i32, i32* %loc.addr, align 4, !dbg !14634
  %38 = load %union.tree_node*, %union.tree_node** %par_clause, align 8, !dbg !14635
  %39 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !14636
  %call24 = call %union.tree_node* @c_finish_omp_parallel(i32 %37, %union.tree_node* %38, %union.tree_node* %39), !dbg !14637
  store %union.tree_node* %call24, %union.tree_node** %stmt, align 8, !dbg !14638
  %40 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14639
  %base25 = bitcast %union.tree_node* %40 to %struct.tree_base*, !dbg !14639
  %41 = bitcast %struct.tree_base* %base25 to i64*, !dbg !14639
  %bf.load26 = load i64, i64* %41, align 8, !dbg !14640
  %bf.clear27 = and i64 %bf.load26, -268435457, !dbg !14640
  %bf.set28 = or i64 %bf.clear27, 268435456, !dbg !14640
  store i64 %bf.set28, i64* %41, align 8, !dbg !14640
  br label %sw.epilog, !dbg !14641

sw.default:                                       ; preds = %if.end10
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 8515, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !14642
  br label %sw.epilog, !dbg !14643

sw.epilog:                                        ; preds = %sw.default, %if.end23, %sw.bb14, %sw.bb
  %42 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14644
  ret %union.tree_node* %42, !dbg !14645
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_sections(i32 %loc, %struct.c_parser* %parser) #0 !dbg !14646 {
entry:
  %loc.addr = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  %block = alloca %union.tree_node*, align 8
  %clauses = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14647, metadata !DIExpression()), !dbg !14648
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14649, metadata !DIExpression()), !dbg !14650
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !14651, metadata !DIExpression()), !dbg !14652
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses, metadata !14653, metadata !DIExpression()), !dbg !14654
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !14655, metadata !DIExpression()), !dbg !14656
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14657
  %call = call %union.tree_node* @c_parser_omp_all_clauses(%struct.c_parser* %0, i32 6560, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.122, i64 0, i64 0)), !dbg !14658
  store %union.tree_node* %call, %union.tree_node** %clauses, align 8, !dbg !14659
  %call1 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext 1), !dbg !14660
  store %union.tree_node* %call1, %union.tree_node** %block, align 8, !dbg !14661
  %1 = load i32, i32* %loc.addr, align 4, !dbg !14662
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14663
  %call2 = call %union.tree_node* @c_parser_omp_sections_scope(i32 %1, %struct.c_parser* %2), !dbg !14664
  store %union.tree_node* %call2, %union.tree_node** %ret, align 8, !dbg !14665
  %3 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !14666
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !14666
  br i1 %tobool, label %if.then, label %if.end, !dbg !14668

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14669
  %5 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !14670
  %exp = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !14670
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14670
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !14670
  store %union.tree_node* %4, %union.tree_node** %arrayidx, align 8, !dbg !14671
  br label %if.end, !dbg !14670

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %loc.addr, align 4, !dbg !14672
  %7 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !14673
  %call3 = call %union.tree_node* @c_end_compound_stmt(i32 %6, %union.tree_node* %7, i8 zeroext 1), !dbg !14674
  store %union.tree_node* %call3, %union.tree_node** %block, align 8, !dbg !14675
  %8 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !14676
  %call4 = call %union.tree_node* @add_stmt(%union.tree_node* %8), !dbg !14677
  %9 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !14678
  ret %union.tree_node* %9, !dbg !14679
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_single(i32 %loc, %struct.c_parser* %parser) #0 !dbg !14680 {
entry:
  %loc.addr = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  %stmt = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14681, metadata !DIExpression()), !dbg !14682
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14683, metadata !DIExpression()), !dbg !14684
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !14685, metadata !DIExpression()), !dbg !14686
  %call = call %union.tree_node* @make_node_stat(i32 157), !dbg !14687
  store %union.tree_node* %call, %union.tree_node** %stmt, align 8, !dbg !14686
  %0 = load i32, i32* %loc.addr, align 4, !dbg !14688
  %1 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14688
  %exp = bitcast %union.tree_node* %1 to %struct.tree_exp*, !dbg !14688
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !14688
  store i32 %0, i32* %locus, align 8, !dbg !14688
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !14689
  %3 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14690
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !14690
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14690
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !14691
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14692
  %call1 = call %union.tree_node* @c_parser_omp_all_clauses(%struct.c_parser* %4, i32 2344, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.123, i64 0, i64 0)), !dbg !14693
  %5 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14694
  %exp2 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !14694
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !14694
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !14694
  store %union.tree_node* %call1, %union.tree_node** %arrayidx, align 8, !dbg !14695
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14696
  %call3 = call %union.tree_node* @c_parser_omp_structured_block(%struct.c_parser* %6), !dbg !14697
  %7 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14698
  %exp4 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !14698
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !14698
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 0, !dbg !14698
  store %union.tree_node* %call3, %union.tree_node** %arrayidx6, align 8, !dbg !14699
  %8 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14700
  %call7 = call %union.tree_node* @add_stmt(%union.tree_node* %8), !dbg !14701
  ret %union.tree_node* %call7, !dbg !14702
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_task(i32 %loc, %struct.c_parser* %parser) #0 !dbg !14703 {
entry:
  %loc.addr = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  %clauses = alloca %union.tree_node*, align 8
  %block = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14704, metadata !DIExpression()), !dbg !14705
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14706, metadata !DIExpression()), !dbg !14707
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses, metadata !14708, metadata !DIExpression()), !dbg !14709
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !14710, metadata !DIExpression()), !dbg !14711
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14712
  %call = call %union.tree_node* @c_parser_omp_all_clauses(%struct.c_parser* %0, i32 51312, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.124, i64 0, i64 0)), !dbg !14713
  store %union.tree_node* %call, %union.tree_node** %clauses, align 8, !dbg !14714
  %call1 = call %union.tree_node* @c_begin_omp_task(), !dbg !14715
  store %union.tree_node* %call1, %union.tree_node** %block, align 8, !dbg !14716
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14717
  call void @c_parser_statement(%struct.c_parser* %1), !dbg !14718
  %2 = load i32, i32* %loc.addr, align 4, !dbg !14719
  %3 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14720
  %4 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !14721
  %call2 = call %union.tree_node* @c_finish_omp_task(i32 %2, %union.tree_node* %3, %union.tree_node* %4), !dbg !14722
  ret %union.tree_node* %call2, !dbg !14723
}

declare dso_local %union.tree_node* @c_finish_omp_atomic(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_structured_block(%struct.c_parser* %parser) #0 !dbg !14724 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %stmt = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14725, metadata !DIExpression()), !dbg !14726
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !14727, metadata !DIExpression()), !dbg !14728
  %call = call %union.tree_node* @push_stmt_list(), !dbg !14729
  store %union.tree_node* %call, %union.tree_node** %stmt, align 8, !dbg !14728
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14730
  call void @c_parser_statement(%struct.c_parser* %0), !dbg !14731
  %1 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !14732
  %call1 = call %union.tree_node* @pop_stmt_list(%union.tree_node* %1), !dbg !14733
  ret %union.tree_node* %call1, !dbg !14734
}

declare dso_local %union.tree_node* @c_finish_omp_critical(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @push_stmt_list() #2

declare dso_local %union.tree_node* @pop_stmt_list(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_all_clauses(%struct.c_parser* %parser, i32 %mask, i8* %where) #0 !dbg !14735 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %mask.addr = alloca i32, align 4
  %where.addr = alloca i8*, align 8
  %clauses = alloca %union.tree_node*, align 8
  %first = alloca i8, align 1
  %here = alloca i32, align 4
  %c_kind = alloca i32, align 4
  %c_name = alloca i8*, align 8
  %prev = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14738, metadata !DIExpression()), !dbg !14739
  store i32 %mask, i32* %mask.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mask.addr, metadata !14740, metadata !DIExpression()), !dbg !14741
  store i8* %where, i8** %where.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %where.addr, metadata !14742, metadata !DIExpression()), !dbg !14743
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses, metadata !14744, metadata !DIExpression()), !dbg !14745
  store %union.tree_node* null, %union.tree_node** %clauses, align 8, !dbg !14745
  call void @llvm.dbg.declare(metadata i8* %first, metadata !14746, metadata !DIExpression()), !dbg !14747
  store i8 1, i8* %first, align 1, !dbg !14747
  br label %while.cond, !dbg !14748

while.cond:                                       ; preds = %if.end39, %entry
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14749
  %call = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %0, i32 71), !dbg !14750
  %tobool = icmp ne i8 %call, 0, !dbg !14748
  br i1 %tobool, label %while.body, label %while.end, !dbg !14748

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %here, metadata !14751, metadata !DIExpression()), !dbg !14753
  call void @llvm.dbg.declare(metadata i32* %c_kind, metadata !14754, metadata !DIExpression()), !dbg !14756
  call void @llvm.dbg.declare(metadata i8** %c_name, metadata !14757, metadata !DIExpression()), !dbg !14758
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev, metadata !14759, metadata !DIExpression()), !dbg !14760
  %1 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14761
  store %union.tree_node* %1, %union.tree_node** %prev, align 8, !dbg !14760
  %2 = load i8, i8* %first, align 1, !dbg !14762
  %tobool1 = icmp ne i8 %2, 0, !dbg !14762
  br i1 %tobool1, label %if.end, label %land.lhs.true, !dbg !14764

land.lhs.true:                                    ; preds = %while.body
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14765
  %call2 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %3, i32 19), !dbg !14766
  %conv = zext i8 %call2 to i32, !dbg !14766
  %tobool3 = icmp ne i32 %conv, 0, !dbg !14766
  br i1 %tobool3, label %if.then, label %if.end, !dbg !14767

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14768
  call void @c_parser_consume_token(%struct.c_parser* %4), !dbg !14769
  br label %if.end, !dbg !14769

if.end:                                           ; preds = %if.then, %land.lhs.true, %while.body
  store i8 0, i8* %first, align 1, !dbg !14770
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14771
  %call4 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !14772
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call4, i32 0, i32 2, !dbg !14773
  %6 = load i32, i32* %location, align 8, !dbg !14773
  store i32 %6, i32* %here, align 4, !dbg !14774
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14775
  %call5 = call i32 @c_parser_omp_clause_name(%struct.c_parser* %7), !dbg !14776
  store i32 %call5, i32* %c_kind, align 4, !dbg !14777
  %8 = load i32, i32* %c_kind, align 4, !dbg !14778
  switch i32 %8, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb7
    i32 3, label %sw.bb9
    i32 4, label %sw.bb11
    i32 5, label %sw.bb13
    i32 6, label %sw.bb15
    i32 7, label %sw.bb17
    i32 8, label %sw.bb19
    i32 9, label %sw.bb21
    i32 10, label %sw.bb23
    i32 11, label %sw.bb25
    i32 12, label %sw.bb27
    i32 13, label %sw.bb29
    i32 14, label %sw.bb31
    i32 15, label %sw.bb33
  ], !dbg !14779

sw.bb:                                            ; preds = %if.end
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14780
  %10 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14782
  %call6 = call %union.tree_node* @c_parser_omp_clause_collapse(%struct.c_parser* %9, %union.tree_node* %10), !dbg !14783
  store %union.tree_node* %call6, %union.tree_node** %clauses, align 8, !dbg !14784
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.81, i64 0, i64 0), i8** %c_name, align 8, !dbg !14785
  br label %sw.epilog, !dbg !14786

sw.bb7:                                           ; preds = %if.end
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14787
  %12 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14788
  %call8 = call %union.tree_node* @c_parser_omp_clause_copyin(%struct.c_parser* %11, %union.tree_node* %12), !dbg !14789
  store %union.tree_node* %call8, %union.tree_node** %clauses, align 8, !dbg !14790
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i64 0, i64 0), i8** %c_name, align 8, !dbg !14791
  br label %sw.epilog, !dbg !14792

sw.bb9:                                           ; preds = %if.end
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14793
  %14 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14794
  %call10 = call %union.tree_node* @c_parser_omp_clause_copyprivate(%struct.c_parser* %13, %union.tree_node* %14), !dbg !14795
  store %union.tree_node* %call10, %union.tree_node** %clauses, align 8, !dbg !14796
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i64 0, i64 0), i8** %c_name, align 8, !dbg !14797
  br label %sw.epilog, !dbg !14798

sw.bb11:                                          ; preds = %if.end
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14799
  %16 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14800
  %call12 = call %union.tree_node* @c_parser_omp_clause_default(%struct.c_parser* %15, %union.tree_node* %16), !dbg !14801
  store %union.tree_node* %call12, %union.tree_node** %clauses, align 8, !dbg !14802
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.84, i64 0, i64 0), i8** %c_name, align 8, !dbg !14803
  br label %sw.epilog, !dbg !14804

sw.bb13:                                          ; preds = %if.end
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14805
  %18 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14806
  %call14 = call %union.tree_node* @c_parser_omp_clause_firstprivate(%struct.c_parser* %17, %union.tree_node* %18), !dbg !14807
  store %union.tree_node* %call14, %union.tree_node** %clauses, align 8, !dbg !14808
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.85, i64 0, i64 0), i8** %c_name, align 8, !dbg !14809
  br label %sw.epilog, !dbg !14810

sw.bb15:                                          ; preds = %if.end
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14811
  %20 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14812
  %call16 = call %union.tree_node* @c_parser_omp_clause_if(%struct.c_parser* %19, %union.tree_node* %20), !dbg !14813
  store %union.tree_node* %call16, %union.tree_node** %clauses, align 8, !dbg !14814
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86, i64 0, i64 0), i8** %c_name, align 8, !dbg !14815
  br label %sw.epilog, !dbg !14816

sw.bb17:                                          ; preds = %if.end
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14817
  %22 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14818
  %call18 = call %union.tree_node* @c_parser_omp_clause_lastprivate(%struct.c_parser* %21, %union.tree_node* %22), !dbg !14819
  store %union.tree_node* %call18, %union.tree_node** %clauses, align 8, !dbg !14820
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.87, i64 0, i64 0), i8** %c_name, align 8, !dbg !14821
  br label %sw.epilog, !dbg !14822

sw.bb19:                                          ; preds = %if.end
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14823
  %24 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14824
  %call20 = call %union.tree_node* @c_parser_omp_clause_nowait(%struct.c_parser* %23, %union.tree_node* %24), !dbg !14825
  store %union.tree_node* %call20, %union.tree_node** %clauses, align 8, !dbg !14826
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i64 0, i64 0), i8** %c_name, align 8, !dbg !14827
  br label %sw.epilog, !dbg !14828

sw.bb21:                                          ; preds = %if.end
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14829
  %26 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14830
  %call22 = call %union.tree_node* @c_parser_omp_clause_num_threads(%struct.c_parser* %25, %union.tree_node* %26), !dbg !14831
  store %union.tree_node* %call22, %union.tree_node** %clauses, align 8, !dbg !14832
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.89, i64 0, i64 0), i8** %c_name, align 8, !dbg !14833
  br label %sw.epilog, !dbg !14834

sw.bb23:                                          ; preds = %if.end
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14835
  %28 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14836
  %call24 = call %union.tree_node* @c_parser_omp_clause_ordered(%struct.c_parser* %27, %union.tree_node* %28), !dbg !14837
  store %union.tree_node* %call24, %union.tree_node** %clauses, align 8, !dbg !14838
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i64 0, i64 0), i8** %c_name, align 8, !dbg !14839
  br label %sw.epilog, !dbg !14840

sw.bb25:                                          ; preds = %if.end
  %29 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14841
  %30 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14842
  %call26 = call %union.tree_node* @c_parser_omp_clause_private(%struct.c_parser* %29, %union.tree_node* %30), !dbg !14843
  store %union.tree_node* %call26, %union.tree_node** %clauses, align 8, !dbg !14844
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.91, i64 0, i64 0), i8** %c_name, align 8, !dbg !14845
  br label %sw.epilog, !dbg !14846

sw.bb27:                                          ; preds = %if.end
  %31 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14847
  %32 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14848
  %call28 = call %union.tree_node* @c_parser_omp_clause_reduction(%struct.c_parser* %31, %union.tree_node* %32), !dbg !14849
  store %union.tree_node* %call28, %union.tree_node** %clauses, align 8, !dbg !14850
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.92, i64 0, i64 0), i8** %c_name, align 8, !dbg !14851
  br label %sw.epilog, !dbg !14852

sw.bb29:                                          ; preds = %if.end
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14853
  %34 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14854
  %call30 = call %union.tree_node* @c_parser_omp_clause_schedule(%struct.c_parser* %33, %union.tree_node* %34), !dbg !14855
  store %union.tree_node* %call30, %union.tree_node** %clauses, align 8, !dbg !14856
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.93, i64 0, i64 0), i8** %c_name, align 8, !dbg !14857
  br label %sw.epilog, !dbg !14858

sw.bb31:                                          ; preds = %if.end
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14859
  %36 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14860
  %call32 = call %union.tree_node* @c_parser_omp_clause_shared(%struct.c_parser* %35, %union.tree_node* %36), !dbg !14861
  store %union.tree_node* %call32, %union.tree_node** %clauses, align 8, !dbg !14862
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.94, i64 0, i64 0), i8** %c_name, align 8, !dbg !14863
  br label %sw.epilog, !dbg !14864

sw.bb33:                                          ; preds = %if.end
  %37 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14865
  %38 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14866
  %call34 = call %union.tree_node* @c_parser_omp_clause_untied(%struct.c_parser* %37, %union.tree_node* %38), !dbg !14867
  store %union.tree_node* %call34, %union.tree_node** %clauses, align 8, !dbg !14868
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.95, i64 0, i64 0), i8** %c_name, align 8, !dbg !14869
  br label %sw.epilog, !dbg !14870

sw.default:                                       ; preds = %if.end
  %39 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14871
  call void @c_parser_error(%struct.c_parser* %39, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.96, i64 0, i64 0)), !dbg !14872
  br label %saw_error, !dbg !14873

sw.epilog:                                        ; preds = %sw.bb33, %sw.bb31, %sw.bb29, %sw.bb27, %sw.bb25, %sw.bb23, %sw.bb21, %sw.bb19, %sw.bb17, %sw.bb15, %sw.bb13, %sw.bb11, %sw.bb9, %sw.bb7, %sw.bb
  %40 = load i32, i32* %mask.addr, align 4, !dbg !14874
  %41 = load i32, i32* %c_kind, align 4, !dbg !14876
  %shr = lshr i32 %40, %41, !dbg !14877
  %and = and i32 %shr, 1, !dbg !14878
  %cmp = icmp eq i32 %and, 0, !dbg !14879
  br i1 %cmp, label %land.lhs.true36, label %if.end39, !dbg !14880

land.lhs.true36:                                  ; preds = %sw.epilog
  %42 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14881
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %42, i32 0, i32 2, !dbg !14882
  %bf.load = load i8, i8* %error, align 2, !dbg !14882
  %bf.clear = and i8 %bf.load, 1, !dbg !14882
  %bf.cast = zext i8 %bf.clear to i32, !dbg !14882
  %tobool37 = icmp ne i32 %bf.cast, 0, !dbg !14881
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !14883

if.then38:                                        ; preds = %land.lhs.true36
  %43 = load %union.tree_node*, %union.tree_node** %prev, align 8, !dbg !14884
  store %union.tree_node* %43, %union.tree_node** %clauses, align 8, !dbg !14886
  %44 = load i32, i32* %here, align 4, !dbg !14887
  %45 = load i8*, i8** %c_name, align 8, !dbg !14888
  %46 = load i8*, i8** %where.addr, align 8, !dbg !14889
  call void (i32, i8*, ...) @error_at(i32 %44, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.97, i64 0, i64 0), i8* %45, i8* %46), !dbg !14890
  br label %if.end39, !dbg !14891

if.end39:                                         ; preds = %if.then38, %land.lhs.true36, %sw.epilog
  br label %while.cond, !dbg !14748, !llvm.loop !14892

while.end:                                        ; preds = %while.cond
  br label %saw_error, !dbg !14748

saw_error:                                        ; preds = %while.end, %sw.default
  call void @llvm.dbg.label(metadata !14894), !dbg !14895
  %47 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14896
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %47), !dbg !14897
  %48 = load %union.tree_node*, %union.tree_node** %clauses, align 8, !dbg !14898
  %call40 = call %union.tree_node* @c_finish_omp_clauses(%union.tree_node* %48), !dbg !14899
  ret %union.tree_node* %call40, !dbg !14900
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_for_loop(i32 %loc, %struct.c_parser* %parser, %union.tree_node* %clauses, %union.tree_node** %par_clauses) #0 !dbg !14901 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loc.addr = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  %clauses.addr = alloca %union.tree_node*, align 8
  %par_clauses.addr = alloca %union.tree_node**, align 8
  %decl = alloca %union.tree_node*, align 8
  %cond = alloca %union.tree_node*, align 8
  %incr = alloca %union.tree_node*, align 8
  %save_break = alloca %union.tree_node*, align 8
  %save_cont = alloca %union.tree_node*, align 8
  %body = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %stmt = alloca %union.tree_node*, align 8
  %cl = alloca %union.tree_node*, align 8
  %declv = alloca %union.tree_node*, align 8
  %condv = alloca %union.tree_node*, align 8
  %incrv = alloca %union.tree_node*, align 8
  %initv = alloca %union.tree_node*, align 8
  %for_block = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  %fail = alloca i8, align 1
  %open_brace_parsed = alloca i8, align 1
  %i = alloca i32, align 4
  %collapse = alloca i32, align 4
  %nbraces = alloca i32, align 4
  %for_loc = alloca i32, align 4
  %bracecount = alloca i32, align 4
  %decl_exp = alloca %struct.c_expr, align 8
  %init_exp = alloca %struct.c_expr, align 8
  %init_loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %tmp50 = alloca %struct.c_expr, align 8
  %tmp51 = alloca %struct.c_expr, align 8
  %cond_loc = alloca i32, align 4
  %cond_expr = alloca %struct.c_expr, align 8
  %incr_loc = alloca i32, align 4
  %tmp74 = alloca %struct.c_expr, align 8
  %here = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  %here160 = alloca i32, align 4
  %c = alloca %union.tree_node**, align 8
  %l = alloca %union.tree_node*, align 8
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !14904, metadata !DIExpression()), !dbg !14905
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !14906, metadata !DIExpression()), !dbg !14907
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !14908, metadata !DIExpression()), !dbg !14909
  store %union.tree_node** %par_clauses, %union.tree_node*** %par_clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %par_clauses.addr, metadata !14910, metadata !DIExpression()), !dbg !14911
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !14912, metadata !DIExpression()), !dbg !14913
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond, metadata !14914, metadata !DIExpression()), !dbg !14915
  call void @llvm.dbg.declare(metadata %union.tree_node** %incr, metadata !14916, metadata !DIExpression()), !dbg !14917
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_break, metadata !14918, metadata !DIExpression()), !dbg !14919
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_cont, metadata !14920, metadata !DIExpression()), !dbg !14921
  call void @llvm.dbg.declare(metadata %union.tree_node** %body, metadata !14922, metadata !DIExpression()), !dbg !14923
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !14924, metadata !DIExpression()), !dbg !14925
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !14926, metadata !DIExpression()), !dbg !14927
  call void @llvm.dbg.declare(metadata %union.tree_node** %cl, metadata !14928, metadata !DIExpression()), !dbg !14929
  call void @llvm.dbg.declare(metadata %union.tree_node** %declv, metadata !14930, metadata !DIExpression()), !dbg !14931
  call void @llvm.dbg.declare(metadata %union.tree_node** %condv, metadata !14932, metadata !DIExpression()), !dbg !14933
  call void @llvm.dbg.declare(metadata %union.tree_node** %incrv, metadata !14934, metadata !DIExpression()), !dbg !14935
  call void @llvm.dbg.declare(metadata %union.tree_node** %initv, metadata !14936, metadata !DIExpression()), !dbg !14937
  call void @llvm.dbg.declare(metadata %union.tree_node** %for_block, metadata !14938, metadata !DIExpression()), !dbg !14939
  store %union.tree_node* null, %union.tree_node** %for_block, align 8, !dbg !14939
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !14940, metadata !DIExpression()), !dbg !14941
  store %union.tree_node* null, %union.tree_node** %ret, align 8, !dbg !14941
  call void @llvm.dbg.declare(metadata i8* %fail, metadata !14942, metadata !DIExpression()), !dbg !14943
  store i8 0, i8* %fail, align 1, !dbg !14943
  call void @llvm.dbg.declare(metadata i8* %open_brace_parsed, metadata !14944, metadata !DIExpression()), !dbg !14945
  store i8 0, i8* %open_brace_parsed, align 1, !dbg !14945
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14946, metadata !DIExpression()), !dbg !14947
  call void @llvm.dbg.declare(metadata i32* %collapse, metadata !14948, metadata !DIExpression()), !dbg !14949
  store i32 1, i32* %collapse, align 4, !dbg !14949
  call void @llvm.dbg.declare(metadata i32* %nbraces, metadata !14950, metadata !DIExpression()), !dbg !14951
  store i32 0, i32* %nbraces, align 4, !dbg !14951
  call void @llvm.dbg.declare(metadata i32* %for_loc, metadata !14952, metadata !DIExpression()), !dbg !14953
  %0 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !14954
  store %union.tree_node* %0, %union.tree_node** %cl, align 8, !dbg !14956
  br label %for.cond, !dbg !14957

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %cl, align 8, !dbg !14958
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !14960
  br i1 %tobool, label %for.body, label %for.end, !dbg !14960

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %cl, align 8, !dbg !14961
  %omp_clause = bitcast %union.tree_node* %2 to %struct.tree_omp_clause*, !dbg !14961
  %code = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 2, !dbg !14961
  %3 = load i32, i32* %code, align 4, !dbg !14961
  %cmp = icmp eq i32 %3, 14, !dbg !14963
  br i1 %cmp, label %if.then, label %if.end, !dbg !14964

if.then:                                          ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %cl, align 8, !dbg !14965
  %omp_clause1 = bitcast %union.tree_node* %4 to %struct.tree_omp_clause*, !dbg !14965
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause1, i32 0, i32 6, !dbg !14965
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !14965
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14965
  %call = call i64 @tree_low_cst(%union.tree_node* %5, i32 0), !dbg !14966
  %conv = trunc i64 %call to i32, !dbg !14966
  store i32 %conv, i32* %collapse, align 4, !dbg !14967
  br label %if.end, !dbg !14968

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !14969

for.inc:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %cl, align 8, !dbg !14970
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !14970
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !14970
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !14970
  store %union.tree_node* %7, %union.tree_node** %cl, align 8, !dbg !14971
  br label %for.cond, !dbg !14972, !llvm.loop !14973

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %collapse, align 4, !dbg !14975
  %cmp2 = icmp sge i32 %8, 1, !dbg !14975
  br i1 %cmp2, label %cond.false, label %cond.true, !dbg !14975

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 7990, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !14975
  br label %cond.end, !dbg !14975

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !14975

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !14975
  %9 = load i32, i32* %collapse, align 4, !dbg !14976
  %call5 = call %union.tree_node* @make_tree_vec_stat(i32 %9), !dbg !14976
  store %union.tree_node* %call5, %union.tree_node** %declv, align 8, !dbg !14977
  %10 = load i32, i32* %collapse, align 4, !dbg !14978
  %call6 = call %union.tree_node* @make_tree_vec_stat(i32 %10), !dbg !14978
  store %union.tree_node* %call6, %union.tree_node** %initv, align 8, !dbg !14979
  %11 = load i32, i32* %collapse, align 4, !dbg !14980
  %call7 = call %union.tree_node* @make_tree_vec_stat(i32 %11), !dbg !14980
  store %union.tree_node* %call7, %union.tree_node** %condv, align 8, !dbg !14981
  %12 = load i32, i32* %collapse, align 4, !dbg !14982
  %call8 = call %union.tree_node* @make_tree_vec_stat(i32 %12), !dbg !14982
  store %union.tree_node* %call8, %union.tree_node** %incrv, align 8, !dbg !14983
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14984
  %call9 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %13, i32 40), !dbg !14986
  %tobool10 = icmp ne i8 %call9, 0, !dbg !14986
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !14987

if.then11:                                        ; preds = %cond.end
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14988
  call void @c_parser_error(%struct.c_parser* %14, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.112, i64 0, i64 0)), !dbg !14990
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !14991
  br label %return, !dbg !14991

if.end12:                                         ; preds = %cond.end
  %15 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14992
  %call13 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %15), !dbg !14993
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call13, i32 0, i32 2, !dbg !14994
  %16 = load i32, i32* %location, align 8, !dbg !14994
  store i32 %16, i32* %for_loc, align 4, !dbg !14995
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !14996
  call void @c_parser_consume_token(%struct.c_parser* %17), !dbg !14997
  store i32 0, i32* %i, align 4, !dbg !14998
  br label %for.cond14, !dbg !15000

for.cond14:                                       ; preds = %for.inc126, %if.end12
  %18 = load i32, i32* %i, align 4, !dbg !15001
  %19 = load i32, i32* %collapse, align 4, !dbg !15003
  %cmp15 = icmp slt i32 %18, %19, !dbg !15004
  br i1 %cmp15, label %for.body17, label %for.end128, !dbg !15005

for.body17:                                       ; preds = %for.cond14
  call void @llvm.dbg.declare(metadata i32* %bracecount, metadata !15006, metadata !DIExpression()), !dbg !15008
  store i32 0, i32* %bracecount, align 4, !dbg !15008
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15009
  %call18 = call zeroext i8 @c_parser_require(%struct.c_parser* %20, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !15011
  %tobool19 = icmp ne i8 %call18, 0, !dbg !15011
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !15012

if.then20:                                        ; preds = %for.body17
  br label %pop_scopes, !dbg !15013

if.end21:                                         ; preds = %for.body17
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15014
  %call22 = call zeroext i8 @c_parser_next_token_starts_declspecs(%struct.c_parser* %21), !dbg !15016
  %tobool23 = icmp ne i8 %call22, 0, !dbg !15016
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !15017

if.then24:                                        ; preds = %if.end21
  %22 = load i32, i32* %i, align 4, !dbg !15018
  %cmp25 = icmp sgt i32 %22, 0, !dbg !15021
  br i1 %cmp25, label %if.then27, label %if.end30, !dbg !15022

if.then27:                                        ; preds = %if.then24
  %call28 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext 1), !dbg !15023
  %23 = load %union.tree_node*, %union.tree_node** %for_block, align 8, !dbg !15023
  %call29 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call28, %union.tree_node* %23), !dbg !15023
  store %union.tree_node* %call29, %union.tree_node** %for_block, align 8, !dbg !15024
  br label %if.end30, !dbg !15025

if.end30:                                         ; preds = %if.then27, %if.then24
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15026
  call void @c_parser_declaration_or_fndef(%struct.c_parser* %24, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1), !dbg !15027
  %25 = load i32, i32* %for_loc, align 4, !dbg !15028
  %call31 = call %union.tree_node* @check_for_loop_decls(i32 %25), !dbg !15029
  store %union.tree_node* %call31, %union.tree_node** %decl, align 8, !dbg !15030
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15031
  %cmp32 = icmp eq %union.tree_node* %26, null, !dbg !15033
  br i1 %cmp32, label %if.then34, label %if.end35, !dbg !15034

if.then34:                                        ; preds = %if.end30
  br label %error_init, !dbg !15035

if.end35:                                         ; preds = %if.end30
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15036
  %decl_common = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !15036
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !15036
  %28 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !15036
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !15038
  %cmp36 = icmp eq %union.tree_node* %28, %29, !dbg !15039
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !15040

if.then38:                                        ; preds = %if.end35
  %30 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !15041
  store %union.tree_node* %30, %union.tree_node** %decl, align 8, !dbg !15042
  br label %if.end39, !dbg !15043

if.end39:                                         ; preds = %if.then38, %if.end35
  %31 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15044
  store %union.tree_node* %31, %union.tree_node** %init, align 8, !dbg !15045
  br label %if.end58, !dbg !15046

if.else:                                          ; preds = %if.end21
  %32 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15047
  %call40 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %32, i32 53), !dbg !15049
  %conv41 = zext i8 %call40 to i32, !dbg !15049
  %tobool42 = icmp ne i32 %conv41, 0, !dbg !15049
  br i1 %tobool42, label %land.lhs.true, label %if.else56, !dbg !15050

land.lhs.true:                                    ; preds = %if.else
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15051
  %call43 = call %struct.c_token* @c_parser_peek_2nd_token(%struct.c_parser* %33), !dbg !15052
  %34 = bitcast %struct.c_token* %call43 to i32*, !dbg !15053
  %bf.load = load i32, i32* %34, align 8, !dbg !15053
  %bf.clear = and i32 %bf.load, 255, !dbg !15053
  %cmp44 = icmp eq i32 %bf.clear, 0, !dbg !15054
  br i1 %cmp44, label %if.then46, label %if.else56, !dbg !15055

if.then46:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.c_expr* %decl_exp, metadata !15056, metadata !DIExpression()), !dbg !15058
  call void @llvm.dbg.declare(metadata %struct.c_expr* %init_exp, metadata !15059, metadata !DIExpression()), !dbg !15060
  call void @llvm.dbg.declare(metadata i32* %init_loc, metadata !15061, metadata !DIExpression()), !dbg !15062
  %35 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15063
  call void @c_parser_postfix_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %35), !dbg !15064
  %36 = bitcast %struct.c_expr* %decl_exp to i8*, !dbg !15064
  %37 = bitcast %struct.c_expr* %tmp to i8*, !dbg !15064
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 24, i1 false), !dbg !15064
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %decl_exp, i32 0, i32 0, !dbg !15065
  %38 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !15065
  store %union.tree_node* %38, %union.tree_node** %decl, align 8, !dbg !15066
  %39 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15067
  %call47 = call zeroext i8 @c_parser_require(%struct.c_parser* %39, i32 0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.32, i64 0, i64 0)), !dbg !15068
  %40 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15069
  %call48 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %40), !dbg !15070
  %location49 = getelementptr inbounds %struct.c_token, %struct.c_token* %call48, i32 0, i32 2, !dbg !15071
  %41 = load i32, i32* %location49, align 8, !dbg !15071
  store i32 %41, i32* %init_loc, align 4, !dbg !15072
  %42 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15073
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp50, %struct.c_parser* %42, %struct.c_expr* null), !dbg !15074
  %43 = bitcast %struct.c_expr* %init_exp to i8*, !dbg !15074
  %44 = bitcast %struct.c_expr* %tmp50 to i8*, !dbg !15074
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 24, i1 false), !dbg !15074
  %45 = load i32, i32* %init_loc, align 4, !dbg !15075
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp51, i32 %45, %struct.c_expr* byval(%struct.c_expr) align 8 %init_exp), !dbg !15076
  %46 = bitcast %struct.c_expr* %init_exp to i8*, !dbg !15076
  %47 = bitcast %struct.c_expr* %tmp51 to i8*, !dbg !15076
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 24, i1 false), !dbg !15076
  %48 = load i32, i32* %init_loc, align 4, !dbg !15077
  %49 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15078
  %original_type = getelementptr inbounds %struct.c_expr, %struct.c_expr* %decl_exp, i32 0, i32 2, !dbg !15079
  %50 = load %union.tree_node*, %union.tree_node** %original_type, align 8, !dbg !15079
  %51 = load i32, i32* %init_loc, align 4, !dbg !15080
  %value52 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init_exp, i32 0, i32 0, !dbg !15081
  %52 = load %union.tree_node*, %union.tree_node** %value52, align 8, !dbg !15081
  %original_type53 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %init_exp, i32 0, i32 2, !dbg !15082
  %53 = load %union.tree_node*, %union.tree_node** %original_type53, align 8, !dbg !15082
  %call54 = call %union.tree_node* @build_modify_expr(i32 %48, %union.tree_node* %49, %union.tree_node* %50, i32 116, i32 %51, %union.tree_node* %52, %union.tree_node* %53), !dbg !15083
  store %union.tree_node* %call54, %union.tree_node** %init, align 8, !dbg !15084
  %54 = load i32, i32* %init_loc, align 4, !dbg !15085
  %55 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !15086
  %call55 = call %union.tree_node* @c_process_expr_stmt(i32 %54, %union.tree_node* %55), !dbg !15087
  store %union.tree_node* %call55, %union.tree_node** %init, align 8, !dbg !15088
  %56 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15089
  call void @c_parser_skip_until_found(%struct.c_parser* %56, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !15090
  br label %if.end57, !dbg !15091

if.else56:                                        ; preds = %land.lhs.true, %if.else
  br label %error_init, !dbg !15092

error_init:                                       ; preds = %if.else56, %if.then34
  call void @llvm.dbg.label(metadata !15093), !dbg !15095
  %57 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15096
  call void @c_parser_error(%struct.c_parser* %57, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.113, i64 0, i64 0)), !dbg !15097
  %58 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15098
  call void @c_parser_skip_until_found(%struct.c_parser* %58, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !15099
  store i8 1, i8* %fail, align 1, !dbg !15100
  br label %parse_next, !dbg !15101

if.end57:                                         ; preds = %if.then46
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.end39
  store %union.tree_node* null, %union.tree_node** %cond, align 8, !dbg !15102
  %59 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15103
  %call59 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %59, i32 43), !dbg !15105
  %tobool60 = icmp ne i8 %call59, 0, !dbg !15105
  br i1 %tobool60, label %if.then61, label %if.end68, !dbg !15106

if.then61:                                        ; preds = %if.end58
  call void @llvm.dbg.declare(metadata i32* %cond_loc, metadata !15107, metadata !DIExpression()), !dbg !15109
  %60 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15110
  %call62 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %60), !dbg !15111
  %location63 = getelementptr inbounds %struct.c_token, %struct.c_token* %call62, i32 0, i32 2, !dbg !15112
  %61 = load i32, i32* %location63, align 8, !dbg !15112
  store i32 %61, i32* %cond_loc, align 4, !dbg !15109
  call void @llvm.dbg.declare(metadata %struct.c_expr* %cond_expr, metadata !15113, metadata !DIExpression()), !dbg !15114
  %62 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15115
  call void @c_parser_binary_expression(%struct.c_expr* sret %cond_expr, %struct.c_parser* %62, %struct.c_expr* null), !dbg !15116
  %value64 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond_expr, i32 0, i32 0, !dbg !15117
  %63 = load %union.tree_node*, %union.tree_node** %value64, align 8, !dbg !15117
  store %union.tree_node* %63, %union.tree_node** %cond, align 8, !dbg !15118
  %64 = load i32, i32* %cond_loc, align 4, !dbg !15119
  %65 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !15120
  %call65 = call %union.tree_node* @c_objc_common_truthvalue_conversion(i32 %64, %union.tree_node* %65), !dbg !15121
  store %union.tree_node* %call65, %union.tree_node** %cond, align 8, !dbg !15122
  %66 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !15123
  %call66 = call %union.tree_node* @c_fully_fold(%union.tree_node* %66, i8 zeroext 0, i8* null), !dbg !15124
  store %union.tree_node* %call66, %union.tree_node** %cond, align 8, !dbg !15125
  %original_code = getelementptr inbounds %struct.c_expr, %struct.c_expr* %cond_expr, i32 0, i32 1, !dbg !15126
  %67 = load i32, i32* %original_code, align 8, !dbg !15126
  switch i32 %67, label %sw.default [
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 97, label %sw.bb
    i32 98, label %sw.bb
  ], !dbg !15127

sw.bb:                                            ; preds = %if.then61, %if.then61, %if.then61, %if.then61
  br label %sw.epilog, !dbg !15128

sw.default:                                       ; preds = %if.then61
  %68 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !15130
  %69 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !15130
  %call67 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %68, %union.tree_node* %69), !dbg !15130
  store %union.tree_node* %call67, %union.tree_node** %cond, align 8, !dbg !15131
  br label %sw.epilog, !dbg !15132

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %70 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !15133
  %71 = load i32, i32* %cond_loc, align 4, !dbg !15134
  call void @protected_set_expr_location(%union.tree_node* %70, i32 %71), !dbg !15135
  br label %if.end68, !dbg !15136

if.end68:                                         ; preds = %sw.epilog, %if.end58
  %72 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15137
  call void @c_parser_skip_until_found(%struct.c_parser* %72, i32 43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !15138
  store %union.tree_node* null, %union.tree_node** %incr, align 8, !dbg !15139
  %73 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15140
  %call69 = call zeroext i8 @c_parser_next_token_is_not(%struct.c_parser* %73, i32 21), !dbg !15142
  %tobool70 = icmp ne i8 %call69, 0, !dbg !15142
  br i1 %tobool70, label %if.then71, label %if.end77, !dbg !15143

if.then71:                                        ; preds = %if.end68
  call void @llvm.dbg.declare(metadata i32* %incr_loc, metadata !15144, metadata !DIExpression()), !dbg !15146
  %74 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15147
  %call72 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %74), !dbg !15148
  %location73 = getelementptr inbounds %struct.c_token, %struct.c_token* %call72, i32 0, i32 2, !dbg !15149
  %75 = load i32, i32* %location73, align 8, !dbg !15149
  store i32 %75, i32* %incr_loc, align 4, !dbg !15146
  %76 = load i32, i32* %incr_loc, align 4, !dbg !15150
  %77 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15151
  call void @c_parser_expression(%struct.c_expr* sret %tmp74, %struct.c_parser* %77), !dbg !15152
  %value75 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp74, i32 0, i32 0, !dbg !15153
  %78 = load %union.tree_node*, %union.tree_node** %value75, align 8, !dbg !15153
  %call76 = call %union.tree_node* @c_process_expr_stmt(i32 %76, %union.tree_node* %78), !dbg !15154
  store %union.tree_node* %call76, %union.tree_node** %incr, align 8, !dbg !15155
  br label %if.end77, !dbg !15156

if.end77:                                         ; preds = %if.then71, %if.end68
  %79 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15157
  call void @c_parser_skip_until_found(%struct.c_parser* %79, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !15158
  %80 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15159
  %cmp78 = icmp eq %union.tree_node* %80, null, !dbg !15161
  br i1 %cmp78, label %if.then85, label %lor.lhs.false, !dbg !15162

lor.lhs.false:                                    ; preds = %if.end77
  %81 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15163
  %82 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !15164
  %cmp80 = icmp eq %union.tree_node* %81, %82, !dbg !15165
  br i1 %cmp80, label %if.then85, label %lor.lhs.false82, !dbg !15166

lor.lhs.false82:                                  ; preds = %lor.lhs.false
  %83 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !15167
  %84 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !15168
  %cmp83 = icmp eq %union.tree_node* %83, %84, !dbg !15169
  br i1 %cmp83, label %if.then85, label %if.else86, !dbg !15170

if.then85:                                        ; preds = %lor.lhs.false82, %lor.lhs.false, %if.end77
  store i8 1, i8* %fail, align 1, !dbg !15171
  br label %if.end100, !dbg !15172

if.else86:                                        ; preds = %lor.lhs.false82
  %85 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !15173
  %86 = load %union.tree_node*, %union.tree_node** %declv, align 8, !dbg !15175
  %vec = bitcast %union.tree_node* %86 to %struct.tree_vec*, !dbg !15175
  %a = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec, i32 0, i32 2, !dbg !15175
  %87 = load i32, i32* %i, align 4, !dbg !15175
  %idxprom = sext i32 %87 to i64, !dbg !15175
  %arrayidx87 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a, i64 0, i64 %idxprom, !dbg !15175
  store %union.tree_node* %85, %union.tree_node** %arrayidx87, align 8, !dbg !15176
  %88 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !15177
  %89 = load %union.tree_node*, %union.tree_node** %initv, align 8, !dbg !15178
  %vec88 = bitcast %union.tree_node* %89 to %struct.tree_vec*, !dbg !15178
  %a89 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec88, i32 0, i32 2, !dbg !15178
  %90 = load i32, i32* %i, align 4, !dbg !15178
  %idxprom90 = sext i32 %90 to i64, !dbg !15178
  %arrayidx91 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a89, i64 0, i64 %idxprom90, !dbg !15178
  store %union.tree_node* %88, %union.tree_node** %arrayidx91, align 8, !dbg !15179
  %91 = load %union.tree_node*, %union.tree_node** %cond, align 8, !dbg !15180
  %92 = load %union.tree_node*, %union.tree_node** %condv, align 8, !dbg !15181
  %vec92 = bitcast %union.tree_node* %92 to %struct.tree_vec*, !dbg !15181
  %a93 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec92, i32 0, i32 2, !dbg !15181
  %93 = load i32, i32* %i, align 4, !dbg !15181
  %idxprom94 = sext i32 %93 to i64, !dbg !15181
  %arrayidx95 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a93, i64 0, i64 %idxprom94, !dbg !15181
  store %union.tree_node* %91, %union.tree_node** %arrayidx95, align 8, !dbg !15182
  %94 = load %union.tree_node*, %union.tree_node** %incr, align 8, !dbg !15183
  %95 = load %union.tree_node*, %union.tree_node** %incrv, align 8, !dbg !15184
  %vec96 = bitcast %union.tree_node* %95 to %struct.tree_vec*, !dbg !15184
  %a97 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec96, i32 0, i32 2, !dbg !15184
  %96 = load i32, i32* %i, align 4, !dbg !15184
  %idxprom98 = sext i32 %96 to i64, !dbg !15184
  %arrayidx99 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a97, i64 0, i64 %idxprom98, !dbg !15184
  store %union.tree_node* %94, %union.tree_node** %arrayidx99, align 8, !dbg !15185
  br label %if.end100

if.end100:                                        ; preds = %if.else86, %if.then85
  br label %parse_next, !dbg !15168

parse_next:                                       ; preds = %if.end100, %error_init
  call void @llvm.dbg.label(metadata !15186), !dbg !15187
  %97 = load i32, i32* %i, align 4, !dbg !15188
  %98 = load i32, i32* %collapse, align 4, !dbg !15190
  %sub = sub nsw i32 %98, 1, !dbg !15191
  %cmp101 = icmp eq i32 %97, %sub, !dbg !15192
  br i1 %cmp101, label %if.then103, label %if.end104, !dbg !15193

if.then103:                                       ; preds = %parse_next
  br label %for.end128, !dbg !15194

if.end104:                                        ; preds = %parse_next
  br label %do.body, !dbg !15195

do.body:                                          ; preds = %do.cond, %if.end104
  %99 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15196
  %call105 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %99, i32 40), !dbg !15199
  %tobool106 = icmp ne i8 %call105, 0, !dbg !15199
  br i1 %tobool106, label %if.then107, label %if.else108, !dbg !15200

if.then107:                                       ; preds = %do.body
  %100 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15201
  call void @c_parser_consume_token(%struct.c_parser* %100), !dbg !15203
  br label %do.end, !dbg !15204

if.else108:                                       ; preds = %do.body
  %101 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15205
  %call109 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %101, i32 41), !dbg !15207
  %tobool110 = icmp ne i8 %call109, 0, !dbg !15207
  br i1 %tobool110, label %if.then111, label %if.else112, !dbg !15208

if.then111:                                       ; preds = %if.else108
  %102 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15209
  call void @c_parser_consume_token(%struct.c_parser* %102), !dbg !15211
  %103 = load i32, i32* %bracecount, align 4, !dbg !15212
  %inc = add nsw i32 %103, 1, !dbg !15212
  store i32 %inc, i32* %bracecount, align 4, !dbg !15212
  br label %if.end124, !dbg !15213

if.else112:                                       ; preds = %if.else108
  %104 = load i32, i32* %bracecount, align 4, !dbg !15214
  %tobool113 = icmp ne i32 %104, 0, !dbg !15214
  br i1 %tobool113, label %land.lhs.true114, label %if.else119, !dbg !15216

land.lhs.true114:                                 ; preds = %if.else112
  %105 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15217
  %call115 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %105, i32 43), !dbg !15218
  %conv116 = zext i8 %call115 to i32, !dbg !15218
  %tobool117 = icmp ne i32 %conv116, 0, !dbg !15218
  br i1 %tobool117, label %if.then118, label %if.else119, !dbg !15219

if.then118:                                       ; preds = %land.lhs.true114
  %106 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15220
  call void @c_parser_consume_token(%struct.c_parser* %106), !dbg !15221
  br label %if.end123, !dbg !15221

if.else119:                                       ; preds = %land.lhs.true114, %if.else112
  %107 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15222
  call void @c_parser_error(%struct.c_parser* %107, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.114, i64 0, i64 0)), !dbg !15224
  %108 = load i32, i32* %bracecount, align 4, !dbg !15225
  %tobool120 = icmp ne i32 %108, 0, !dbg !15225
  br i1 %tobool120, label %if.then121, label %if.end122, !dbg !15227

if.then121:                                       ; preds = %if.else119
  store i8 1, i8* %open_brace_parsed, align 1, !dbg !15228
  %109 = load i32, i32* %bracecount, align 4, !dbg !15230
  %dec = add nsw i32 %109, -1, !dbg !15230
  store i32 %dec, i32* %bracecount, align 4, !dbg !15230
  br label %if.end122, !dbg !15231

if.end122:                                        ; preds = %if.then121, %if.else119
  store i8 1, i8* %fail, align 1, !dbg !15232
  store i32 0, i32* %collapse, align 4, !dbg !15233
  br label %do.end, !dbg !15234

if.end123:                                        ; preds = %if.then118
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %if.then111
  br label %if.end125

if.end125:                                        ; preds = %if.end124
  br label %do.cond, !dbg !15235

do.cond:                                          ; preds = %if.end125
  br i1 true, label %do.body, label %do.end, !dbg !15235, !llvm.loop !15236

do.end:                                           ; preds = %do.cond, %if.end122, %if.then107
  %110 = load i32, i32* %bracecount, align 4, !dbg !15238
  %111 = load i32, i32* %nbraces, align 4, !dbg !15239
  %add = add nsw i32 %111, %110, !dbg !15239
  store i32 %add, i32* %nbraces, align 4, !dbg !15239
  br label %for.inc126, !dbg !15240

for.inc126:                                       ; preds = %do.end
  %112 = load i32, i32* %i, align 4, !dbg !15241
  %inc127 = add nsw i32 %112, 1, !dbg !15241
  store i32 %inc127, i32* %i, align 4, !dbg !15241
  br label %for.cond14, !dbg !15242, !llvm.loop !15243

for.end128:                                       ; preds = %if.then103, %for.cond14
  %113 = load %union.tree_node*, %union.tree_node** @c_break_label, align 8, !dbg !15245
  store %union.tree_node* %113, %union.tree_node** %save_break, align 8, !dbg !15246
  %114 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 18), align 16, !dbg !15247
  store %union.tree_node* %114, %union.tree_node** @c_break_label, align 8, !dbg !15248
  %115 = load %union.tree_node*, %union.tree_node** @c_cont_label, align 8, !dbg !15249
  store %union.tree_node* %115, %union.tree_node** %save_cont, align 8, !dbg !15250
  store %union.tree_node* null, %union.tree_node** @c_cont_label, align 8, !dbg !15251
  %call129 = call %union.tree_node* @push_stmt_list(), !dbg !15252
  store %union.tree_node* %call129, %union.tree_node** %body, align 8, !dbg !15253
  %116 = load i8, i8* %open_brace_parsed, align 1, !dbg !15254
  %tobool130 = icmp ne i8 %116, 0, !dbg !15254
  br i1 %tobool130, label %if.then131, label %if.else137, !dbg !15256

if.then131:                                       ; preds = %for.end128
  call void @llvm.dbg.declare(metadata i32* %here, metadata !15257, metadata !DIExpression()), !dbg !15259
  %117 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15260
  %call132 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %117), !dbg !15261
  %location133 = getelementptr inbounds %struct.c_token, %struct.c_token* %call132, i32 0, i32 2, !dbg !15262
  %118 = load i32, i32* %location133, align 8, !dbg !15262
  store i32 %118, i32* %here, align 4, !dbg !15259
  %call134 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext 1), !dbg !15263
  store %union.tree_node* %call134, %union.tree_node** %stmt, align 8, !dbg !15264
  %119 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15265
  call void @c_parser_compound_statement_nostart(%struct.c_parser* %119), !dbg !15266
  %120 = load i32, i32* %here, align 4, !dbg !15267
  %121 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !15268
  %call135 = call %union.tree_node* @c_end_compound_stmt(i32 %120, %union.tree_node* %121, i8 zeroext 1), !dbg !15269
  %call136 = call %union.tree_node* @add_stmt(%union.tree_node* %call135), !dbg !15270
  br label %if.end140, !dbg !15271

if.else137:                                       ; preds = %for.end128
  %122 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15272
  %call138 = call %union.tree_node* @c_parser_c99_block_statement(%struct.c_parser* %122), !dbg !15273
  %call139 = call %union.tree_node* @add_stmt(%union.tree_node* %call138), !dbg !15274
  br label %if.end140

if.end140:                                        ; preds = %if.else137, %if.then131
  %123 = load %union.tree_node*, %union.tree_node** @c_cont_label, align 8, !dbg !15275
  %tobool141 = icmp ne %union.tree_node* %123, null, !dbg !15275
  br i1 %tobool141, label %if.then142, label %if.end145, !dbg !15277

if.then142:                                       ; preds = %if.end140
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !15278, metadata !DIExpression()), !dbg !15280
  %124 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !15281
  %125 = load %union.tree_node*, %union.tree_node** @c_cont_label, align 8, !dbg !15281
  %call143 = call %union.tree_node* @build1_stat(i32 133, %union.tree_node* %124, %union.tree_node* %125), !dbg !15281
  store %union.tree_node* %call143, %union.tree_node** %t, align 8, !dbg !15280
  %126 = load i32, i32* %loc.addr, align 4, !dbg !15282
  %127 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15282
  %exp = bitcast %union.tree_node* %127 to %struct.tree_exp*, !dbg !15282
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !15282
  store i32 %126, i32* %locus, align 8, !dbg !15282
  %128 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15283
  %call144 = call %union.tree_node* @add_stmt(%union.tree_node* %128), !dbg !15284
  br label %if.end145, !dbg !15285

if.end145:                                        ; preds = %if.then142, %if.end140
  %129 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !15286
  %call146 = call %union.tree_node* @pop_stmt_list(%union.tree_node* %129), !dbg !15287
  store %union.tree_node* %call146, %union.tree_node** %body, align 8, !dbg !15288
  %130 = load %union.tree_node*, %union.tree_node** %save_break, align 8, !dbg !15289
  store %union.tree_node* %130, %union.tree_node** @c_break_label, align 8, !dbg !15290
  %131 = load %union.tree_node*, %union.tree_node** %save_cont, align 8, !dbg !15291
  store %union.tree_node* %131, %union.tree_node** @c_cont_label, align 8, !dbg !15292
  br label %while.cond, !dbg !15293

while.cond:                                       ; preds = %if.end168, %if.end145
  %132 = load i32, i32* %nbraces, align 4, !dbg !15294
  %tobool147 = icmp ne i32 %132, 0, !dbg !15293
  br i1 %tobool147, label %while.body, label %while.end169, !dbg !15293

while.body:                                       ; preds = %while.cond
  %133 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15295
  %call148 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %133, i32 42), !dbg !15298
  %tobool149 = icmp ne i8 %call148, 0, !dbg !15298
  br i1 %tobool149, label %if.then150, label %if.else152, !dbg !15299

if.then150:                                       ; preds = %while.body
  %134 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15300
  call void @c_parser_consume_token(%struct.c_parser* %134), !dbg !15302
  %135 = load i32, i32* %nbraces, align 4, !dbg !15303
  %dec151 = add nsw i32 %135, -1, !dbg !15303
  store i32 %dec151, i32* %nbraces, align 4, !dbg !15303
  br label %if.end168, !dbg !15304

if.else152:                                       ; preds = %while.body
  %136 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15305
  %call153 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %136, i32 43), !dbg !15307
  %tobool154 = icmp ne i8 %call153, 0, !dbg !15307
  br i1 %tobool154, label %if.then155, label %if.else156, !dbg !15308

if.then155:                                       ; preds = %if.else152
  %137 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15309
  call void @c_parser_consume_token(%struct.c_parser* %137), !dbg !15310
  br label %if.end167, !dbg !15310

if.else156:                                       ; preds = %if.else152
  %138 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15311
  call void @c_parser_error(%struct.c_parser* %138, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.115, i64 0, i64 0)), !dbg !15313
  br label %while.cond157, !dbg !15314

while.cond157:                                    ; preds = %while.body159, %if.else156
  %139 = load i32, i32* %nbraces, align 4, !dbg !15315
  %tobool158 = icmp ne i32 %139, 0, !dbg !15314
  br i1 %tobool158, label %while.body159, label %while.end, !dbg !15314

while.body159:                                    ; preds = %while.cond157
  call void @llvm.dbg.declare(metadata i32* %here160, metadata !15316, metadata !DIExpression()), !dbg !15318
  %140 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15319
  %call161 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %140), !dbg !15320
  %location162 = getelementptr inbounds %struct.c_token, %struct.c_token* %call161, i32 0, i32 2, !dbg !15321
  %141 = load i32, i32* %location162, align 8, !dbg !15321
  store i32 %141, i32* %here160, align 4, !dbg !15318
  %call163 = call %union.tree_node* @c_begin_compound_stmt(i8 zeroext 1), !dbg !15322
  store %union.tree_node* %call163, %union.tree_node** %stmt, align 8, !dbg !15323
  %142 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !15324
  %call164 = call %union.tree_node* @add_stmt(%union.tree_node* %142), !dbg !15325
  %143 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15326
  call void @c_parser_compound_statement_nostart(%struct.c_parser* %143), !dbg !15327
  %144 = load i32, i32* %here160, align 4, !dbg !15328
  %145 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !15329
  %call165 = call %union.tree_node* @c_end_compound_stmt(i32 %144, %union.tree_node* %145, i8 zeroext 1), !dbg !15330
  store %union.tree_node* %call165, %union.tree_node** %body, align 8, !dbg !15331
  %146 = load i32, i32* %nbraces, align 4, !dbg !15332
  %dec166 = add nsw i32 %146, -1, !dbg !15332
  store i32 %dec166, i32* %nbraces, align 4, !dbg !15332
  br label %while.cond157, !dbg !15314, !llvm.loop !15333

while.end:                                        ; preds = %while.cond157
  br label %pop_scopes, !dbg !15335

if.end167:                                        ; preds = %if.then155
  br label %if.end168

if.end168:                                        ; preds = %if.end167, %if.then150
  br label %while.cond, !dbg !15293, !llvm.loop !15336

while.end169:                                     ; preds = %while.cond
  %147 = load i8, i8* %fail, align 1, !dbg !15338
  %tobool170 = icmp ne i8 %147, 0, !dbg !15338
  br i1 %tobool170, label %if.end250, label %if.then171, !dbg !15340

if.then171:                                       ; preds = %while.end169
  %148 = load i32, i32* %loc.addr, align 4, !dbg !15341
  %149 = load %union.tree_node*, %union.tree_node** %declv, align 8, !dbg !15343
  %150 = load %union.tree_node*, %union.tree_node** %initv, align 8, !dbg !15344
  %151 = load %union.tree_node*, %union.tree_node** %condv, align 8, !dbg !15345
  %152 = load %union.tree_node*, %union.tree_node** %incrv, align 8, !dbg !15346
  %153 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !15347
  %call172 = call %union.tree_node* @c_finish_omp_for(i32 %148, %union.tree_node* %149, %union.tree_node* %150, %union.tree_node* %151, %union.tree_node* %152, %union.tree_node* %153, %union.tree_node* null), !dbg !15348
  store %union.tree_node* %call172, %union.tree_node** %stmt, align 8, !dbg !15349
  %154 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !15350
  %tobool173 = icmp ne %union.tree_node* %154, null, !dbg !15350
  br i1 %tobool173, label %if.then174, label %if.end249, !dbg !15352

if.then174:                                       ; preds = %if.then171
  %155 = load %union.tree_node**, %union.tree_node*** %par_clauses.addr, align 8, !dbg !15353
  %cmp175 = icmp ne %union.tree_node** %155, null, !dbg !15356
  br i1 %cmp175, label %if.then177, label %if.end246, !dbg !15357

if.then177:                                       ; preds = %if.then174
  call void @llvm.dbg.declare(metadata %union.tree_node*** %c, metadata !15358, metadata !DIExpression()), !dbg !15360
  %156 = load %union.tree_node**, %union.tree_node*** %par_clauses.addr, align 8, !dbg !15361
  store %union.tree_node** %156, %union.tree_node*** %c, align 8, !dbg !15363
  br label %for.cond178, !dbg !15364

for.cond178:                                      ; preds = %if.end244, %if.then177
  %157 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15365
  %158 = load %union.tree_node*, %union.tree_node** %157, align 8, !dbg !15367
  %tobool179 = icmp ne %union.tree_node* %158, null, !dbg !15368
  br i1 %tobool179, label %for.body180, label %for.end245, !dbg !15368

for.body180:                                      ; preds = %for.cond178
  %159 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15369
  %160 = load %union.tree_node*, %union.tree_node** %159, align 8, !dbg !15369
  %omp_clause181 = bitcast %union.tree_node* %160 to %struct.tree_omp_clause*, !dbg !15369
  %code182 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause181, i32 0, i32 2, !dbg !15369
  %161 = load i32, i32* %code182, align 4, !dbg !15369
  %cmp183 = icmp ne i32 %161, 3, !dbg !15371
  br i1 %cmp183, label %land.lhs.true185, label %if.else193, !dbg !15372

land.lhs.true185:                                 ; preds = %for.body180
  %162 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15373
  %163 = load %union.tree_node*, %union.tree_node** %162, align 8, !dbg !15373
  %omp_clause186 = bitcast %union.tree_node* %163 to %struct.tree_omp_clause*, !dbg !15373
  %code187 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause186, i32 0, i32 2, !dbg !15373
  %164 = load i32, i32* %code187, align 4, !dbg !15373
  %cmp188 = icmp ne i32 %164, 4, !dbg !15374
  br i1 %cmp188, label %if.then190, label %if.else193, !dbg !15375

if.then190:                                       ; preds = %land.lhs.true185
  %165 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15376
  %166 = load %union.tree_node*, %union.tree_node** %165, align 8, !dbg !15376
  %common191 = bitcast %union.tree_node* %166 to %struct.tree_common*, !dbg !15376
  %chain192 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common191, i32 0, i32 1, !dbg !15376
  store %union.tree_node** %chain192, %union.tree_node*** %c, align 8, !dbg !15377
  br label %if.end244, !dbg !15378

if.else193:                                       ; preds = %land.lhs.true185, %for.body180
  store i32 0, i32* %i, align 4, !dbg !15379
  br label %for.cond194, !dbg !15382

for.cond194:                                      ; preds = %for.inc209, %if.else193
  %167 = load i32, i32* %i, align 4, !dbg !15383
  %168 = load i32, i32* %collapse, align 4, !dbg !15385
  %cmp195 = icmp slt i32 %167, %168, !dbg !15386
  br i1 %cmp195, label %for.body197, label %for.end211, !dbg !15387

for.body197:                                      ; preds = %for.cond194
  %169 = load %union.tree_node*, %union.tree_node** %declv, align 8, !dbg !15388
  %vec198 = bitcast %union.tree_node* %169 to %struct.tree_vec*, !dbg !15388
  %a199 = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %vec198, i32 0, i32 2, !dbg !15388
  %170 = load i32, i32* %i, align 4, !dbg !15388
  %idxprom200 = sext i32 %170 to i64, !dbg !15388
  %arrayidx201 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %a199, i64 0, i64 %idxprom200, !dbg !15388
  %171 = load %union.tree_node*, %union.tree_node** %arrayidx201, align 8, !dbg !15388
  %172 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15390
  %173 = load %union.tree_node*, %union.tree_node** %172, align 8, !dbg !15390
  %omp_clause202 = bitcast %union.tree_node* %173 to %struct.tree_omp_clause*, !dbg !15390
  %ops203 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause202, i32 0, i32 6, !dbg !15390
  %arrayidx204 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops203, i64 0, i64 0, !dbg !15390
  %174 = load %union.tree_node*, %union.tree_node** %arrayidx204, align 8, !dbg !15390
  %cmp205 = icmp eq %union.tree_node* %171, %174, !dbg !15391
  br i1 %cmp205, label %if.then207, label %if.end208, !dbg !15392

if.then207:                                       ; preds = %for.body197
  br label %for.end211, !dbg !15393

if.end208:                                        ; preds = %for.body197
  br label %for.inc209, !dbg !15390

for.inc209:                                       ; preds = %if.end208
  %175 = load i32, i32* %i, align 4, !dbg !15394
  %inc210 = add nsw i32 %175, 1, !dbg !15394
  store i32 %inc210, i32* %i, align 4, !dbg !15394
  br label %for.cond194, !dbg !15395, !llvm.loop !15396

for.end211:                                       ; preds = %if.then207, %for.cond194
  %176 = load i32, i32* %i, align 4, !dbg !15398
  %177 = load i32, i32* %collapse, align 4, !dbg !15400
  %cmp212 = icmp eq i32 %176, %177, !dbg !15401
  br i1 %cmp212, label %if.then214, label %if.else217, !dbg !15402

if.then214:                                       ; preds = %for.end211
  %178 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15403
  %179 = load %union.tree_node*, %union.tree_node** %178, align 8, !dbg !15403
  %common215 = bitcast %union.tree_node* %179 to %struct.tree_common*, !dbg !15403
  %chain216 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common215, i32 0, i32 1, !dbg !15403
  store %union.tree_node** %chain216, %union.tree_node*** %c, align 8, !dbg !15404
  br label %if.end243, !dbg !15405

if.else217:                                       ; preds = %for.end211
  %180 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15406
  %181 = load %union.tree_node*, %union.tree_node** %180, align 8, !dbg !15406
  %omp_clause218 = bitcast %union.tree_node* %181 to %struct.tree_omp_clause*, !dbg !15406
  %code219 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause218, i32 0, i32 2, !dbg !15406
  %182 = load i32, i32* %code219, align 4, !dbg !15406
  %cmp220 = icmp eq i32 %182, 3, !dbg !15408
  br i1 %cmp220, label %if.then222, label %if.else228, !dbg !15409

if.then222:                                       ; preds = %if.else217
  %183 = load i32, i32* %loc.addr, align 4, !dbg !15410
  %184 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15412
  %185 = load %union.tree_node*, %union.tree_node** %184, align 8, !dbg !15412
  %omp_clause223 = bitcast %union.tree_node* %185 to %struct.tree_omp_clause*, !dbg !15412
  %ops224 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause223, i32 0, i32 6, !dbg !15412
  %arrayidx225 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops224, i64 0, i64 0, !dbg !15412
  %186 = load %union.tree_node*, %union.tree_node** %arrayidx225, align 8, !dbg !15412
  call void (i32, i8*, ...) @error_at(i32 %183, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.116, i64 0, i64 0), %union.tree_node* %186), !dbg !15413
  %187 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15414
  %188 = load %union.tree_node*, %union.tree_node** %187, align 8, !dbg !15414
  %common226 = bitcast %union.tree_node* %188 to %struct.tree_common*, !dbg !15414
  %chain227 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common226, i32 0, i32 1, !dbg !15414
  %189 = load %union.tree_node*, %union.tree_node** %chain227, align 8, !dbg !15414
  %190 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15415
  store %union.tree_node* %189, %union.tree_node** %190, align 8, !dbg !15416
  br label %if.end242, !dbg !15417

if.else228:                                       ; preds = %if.else217
  call void @llvm.dbg.declare(metadata %union.tree_node** %l, metadata !15418, metadata !DIExpression()), !dbg !15420
  %191 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15421
  %192 = load %union.tree_node*, %union.tree_node** %191, align 8, !dbg !15421
  %omp_clause229 = bitcast %union.tree_node* %192 to %struct.tree_omp_clause*, !dbg !15421
  %locus230 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause229, i32 0, i32 1, !dbg !15421
  %193 = load i32, i32* %locus230, align 8, !dbg !15421
  %call231 = call %union.tree_node* @build_omp_clause(i32 %193, i32 4), !dbg !15422
  store %union.tree_node* %call231, %union.tree_node** %l, align 8, !dbg !15420
  %194 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15423
  %195 = load %union.tree_node*, %union.tree_node** %194, align 8, !dbg !15423
  %omp_clause232 = bitcast %union.tree_node* %195 to %struct.tree_omp_clause*, !dbg !15423
  %ops233 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause232, i32 0, i32 6, !dbg !15423
  %arrayidx234 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops233, i64 0, i64 0, !dbg !15423
  %196 = load %union.tree_node*, %union.tree_node** %arrayidx234, align 8, !dbg !15423
  %197 = load %union.tree_node*, %union.tree_node** %l, align 8, !dbg !15424
  %omp_clause235 = bitcast %union.tree_node* %197 to %struct.tree_omp_clause*, !dbg !15424
  %ops236 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause235, i32 0, i32 6, !dbg !15424
  %arrayidx237 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops236, i64 0, i64 0, !dbg !15424
  store %union.tree_node* %196, %union.tree_node** %arrayidx237, align 8, !dbg !15425
  %198 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !15426
  %199 = load %union.tree_node*, %union.tree_node** %l, align 8, !dbg !15427
  %common238 = bitcast %union.tree_node* %199 to %struct.tree_common*, !dbg !15427
  %chain239 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common238, i32 0, i32 1, !dbg !15427
  store %union.tree_node* %198, %union.tree_node** %chain239, align 8, !dbg !15428
  %200 = load %union.tree_node*, %union.tree_node** %l, align 8, !dbg !15429
  store %union.tree_node* %200, %union.tree_node** %clauses.addr, align 8, !dbg !15430
  %201 = load %union.tree_node**, %union.tree_node*** %c, align 8, !dbg !15431
  %202 = load %union.tree_node*, %union.tree_node** %201, align 8, !dbg !15431
  %omp_clause240 = bitcast %union.tree_node* %202 to %struct.tree_omp_clause*, !dbg !15431
  %code241 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause240, i32 0, i32 2, !dbg !15431
  store i32 2, i32* %code241, align 4, !dbg !15431
  br label %if.end242

if.end242:                                        ; preds = %if.else228, %if.then222
  br label %if.end243

if.end243:                                        ; preds = %if.end242, %if.then214
  br label %if.end244

if.end244:                                        ; preds = %if.end243, %if.then190
  br label %for.cond178, !dbg !15432, !llvm.loop !15433

for.end245:                                       ; preds = %for.cond178
  br label %if.end246, !dbg !15435

if.end246:                                        ; preds = %for.end245, %if.then174
  %203 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !15436
  %204 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !15437
  %exp247 = bitcast %union.tree_node* %204 to %struct.tree_exp*, !dbg !15437
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp247, i32 0, i32 3, !dbg !15437
  %arrayidx248 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !15437
  store %union.tree_node* %203, %union.tree_node** %arrayidx248, align 8, !dbg !15438
  br label %if.end249, !dbg !15439

if.end249:                                        ; preds = %if.end246, %if.then171
  %205 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !15440
  store %union.tree_node* %205, %union.tree_node** %ret, align 8, !dbg !15441
  br label %if.end250, !dbg !15442

if.end250:                                        ; preds = %if.end249, %while.end169
  br label %pop_scopes, !dbg !15338

pop_scopes:                                       ; preds = %if.end250, %while.end, %if.then20
  call void @llvm.dbg.label(metadata !15443), !dbg !15444
  br label %while.cond251, !dbg !15445

while.cond251:                                    ; preds = %while.body253, %pop_scopes
  %206 = load %union.tree_node*, %union.tree_node** %for_block, align 8, !dbg !15446
  %tobool252 = icmp ne %union.tree_node* %206, null, !dbg !15445
  br i1 %tobool252, label %while.body253, label %while.end259, !dbg !15445

while.body253:                                    ; preds = %while.cond251
  %207 = load i32, i32* %loc.addr, align 4, !dbg !15447
  %208 = load %union.tree_node*, %union.tree_node** %for_block, align 8, !dbg !15449
  %list = bitcast %union.tree_node* %208 to %struct.tree_list*, !dbg !15449
  %value254 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !15449
  %209 = load %union.tree_node*, %union.tree_node** %value254, align 8, !dbg !15449
  %call255 = call %union.tree_node* @c_end_compound_stmt(i32 %207, %union.tree_node* %209, i8 zeroext 1), !dbg !15450
  store %union.tree_node* %call255, %union.tree_node** %stmt, align 8, !dbg !15451
  %210 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !15452
  %call256 = call %union.tree_node* @add_stmt(%union.tree_node* %210), !dbg !15453
  %211 = load %union.tree_node*, %union.tree_node** %for_block, align 8, !dbg !15454
  %common257 = bitcast %union.tree_node* %211 to %struct.tree_common*, !dbg !15454
  %chain258 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common257, i32 0, i32 1, !dbg !15454
  %212 = load %union.tree_node*, %union.tree_node** %chain258, align 8, !dbg !15454
  store %union.tree_node* %212, %union.tree_node** %for_block, align 8, !dbg !15455
  br label %while.cond251, !dbg !15445, !llvm.loop !15456

while.end259:                                     ; preds = %while.cond251
  %213 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !15458
  store %union.tree_node* %213, %union.tree_node** %retval, align 8, !dbg !15459
  br label %return, !dbg !15459

return:                                           ; preds = %while.end259, %if.then11
  %214 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !15460
  ret %union.tree_node* %214, !dbg !15460
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @c_parser_omp_clause_name(%struct.c_parser* %parser) #0 !dbg !15461 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %result = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15464, metadata !DIExpression()), !dbg !15465
  call void @llvm.dbg.declare(metadata i32* %result, metadata !15466, metadata !DIExpression()), !dbg !15467
  store i32 0, i32* %result, align 4, !dbg !15467
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15468
  %call = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %0, i32 36), !dbg !15470
  %tobool = icmp ne i8 %call, 0, !dbg !15470
  br i1 %tobool, label %if.then, label %if.else, !dbg !15471

if.then:                                          ; preds = %entry
  store i32 6, i32* %result, align 4, !dbg !15472
  br label %if.end74, !dbg !15473

if.else:                                          ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15474
  %call1 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %1, i32 43), !dbg !15476
  %tobool2 = icmp ne i8 %call1, 0, !dbg !15476
  br i1 %tobool2, label %if.then3, label %if.else4, !dbg !15477

if.then3:                                         ; preds = %if.else
  store i32 4, i32* %result, align 4, !dbg !15478
  br label %if.end73, !dbg !15479

if.else4:                                         ; preds = %if.else
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15480
  %call5 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %2, i32 53), !dbg !15482
  %tobool6 = icmp ne i8 %call5, 0, !dbg !15482
  br i1 %tobool6, label %if.then7, label %if.end72, !dbg !15483

if.then7:                                         ; preds = %if.else4
  call void @llvm.dbg.declare(metadata i8** %p, metadata !15484, metadata !DIExpression()), !dbg !15486
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15487
  %call8 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !15487
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call8, i32 0, i32 1, !dbg !15487
  %4 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !15487
  %identifier = bitcast %union.tree_node* %4 to %struct.tree_identifier*, !dbg !15487
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !15487
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !15487
  %5 = load i8*, i8** %str, align 8, !dbg !15487
  store i8* %5, i8** %p, align 8, !dbg !15486
  %6 = load i8*, i8** %p, align 8, !dbg !15488
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 0, !dbg !15488
  %7 = load i8, i8* %arrayidx, align 1, !dbg !15488
  %conv = sext i8 %7 to i32, !dbg !15488
  switch i32 %conv, label %sw.epilog [
    i32 99, label %sw.bb
    i32 102, label %sw.bb22
    i32 108, label %sw.bb27
    i32 110, label %sw.bb32
    i32 111, label %sw.bb42
    i32 112, label %sw.bb47
    i32 114, label %sw.bb52
    i32 115, label %sw.bb57
    i32 117, label %sw.bb67
  ], !dbg !15489

sw.bb:                                            ; preds = %if.then7
  %8 = load i8*, i8** %p, align 8, !dbg !15490
  %call9 = call i32 @strcmp(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.81, i64 0, i64 0), i8* %8), !dbg !15493
  %tobool10 = icmp ne i32 %call9, 0, !dbg !15493
  br i1 %tobool10, label %if.else12, label %if.then11, !dbg !15494

if.then11:                                        ; preds = %sw.bb
  store i32 1, i32* %result, align 4, !dbg !15495
  br label %if.end21, !dbg !15496

if.else12:                                        ; preds = %sw.bb
  %9 = load i8*, i8** %p, align 8, !dbg !15497
  %call13 = call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.82, i64 0, i64 0), i8* %9), !dbg !15499
  %tobool14 = icmp ne i32 %call13, 0, !dbg !15499
  br i1 %tobool14, label %if.else16, label %if.then15, !dbg !15500

if.then15:                                        ; preds = %if.else12
  store i32 2, i32* %result, align 4, !dbg !15501
  br label %if.end20, !dbg !15502

if.else16:                                        ; preds = %if.else12
  %10 = load i8*, i8** %p, align 8, !dbg !15503
  %call17 = call i32 @strcmp(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i64 0, i64 0), i8* %10), !dbg !15505
  %tobool18 = icmp ne i32 %call17, 0, !dbg !15505
  br i1 %tobool18, label %if.end, label %if.then19, !dbg !15506

if.then19:                                        ; preds = %if.else16
  store i32 3, i32* %result, align 4, !dbg !15507
  br label %if.end, !dbg !15508

if.end:                                           ; preds = %if.then19, %if.else16
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then15
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then11
  br label %sw.epilog, !dbg !15509

sw.bb22:                                          ; preds = %if.then7
  %11 = load i8*, i8** %p, align 8, !dbg !15510
  %call23 = call i32 @strcmp(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.85, i64 0, i64 0), i8* %11), !dbg !15512
  %tobool24 = icmp ne i32 %call23, 0, !dbg !15512
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !15513

if.then25:                                        ; preds = %sw.bb22
  store i32 5, i32* %result, align 4, !dbg !15514
  br label %if.end26, !dbg !15515

if.end26:                                         ; preds = %if.then25, %sw.bb22
  br label %sw.epilog, !dbg !15516

sw.bb27:                                          ; preds = %if.then7
  %12 = load i8*, i8** %p, align 8, !dbg !15517
  %call28 = call i32 @strcmp(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.87, i64 0, i64 0), i8* %12), !dbg !15519
  %tobool29 = icmp ne i32 %call28, 0, !dbg !15519
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !15520

if.then30:                                        ; preds = %sw.bb27
  store i32 7, i32* %result, align 4, !dbg !15521
  br label %if.end31, !dbg !15522

if.end31:                                         ; preds = %if.then30, %sw.bb27
  br label %sw.epilog, !dbg !15523

sw.bb32:                                          ; preds = %if.then7
  %13 = load i8*, i8** %p, align 8, !dbg !15524
  %call33 = call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i64 0, i64 0), i8* %13), !dbg !15526
  %tobool34 = icmp ne i32 %call33, 0, !dbg !15526
  br i1 %tobool34, label %if.else36, label %if.then35, !dbg !15527

if.then35:                                        ; preds = %sw.bb32
  store i32 8, i32* %result, align 4, !dbg !15528
  br label %if.end41, !dbg !15529

if.else36:                                        ; preds = %sw.bb32
  %14 = load i8*, i8** %p, align 8, !dbg !15530
  %call37 = call i32 @strcmp(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.89, i64 0, i64 0), i8* %14), !dbg !15532
  %tobool38 = icmp ne i32 %call37, 0, !dbg !15532
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !15533

if.then39:                                        ; preds = %if.else36
  store i32 9, i32* %result, align 4, !dbg !15534
  br label %if.end40, !dbg !15535

if.end40:                                         ; preds = %if.then39, %if.else36
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then35
  br label %sw.epilog, !dbg !15536

sw.bb42:                                          ; preds = %if.then7
  %15 = load i8*, i8** %p, align 8, !dbg !15537
  %call43 = call i32 @strcmp(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i64 0, i64 0), i8* %15), !dbg !15539
  %tobool44 = icmp ne i32 %call43, 0, !dbg !15539
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !15540

if.then45:                                        ; preds = %sw.bb42
  store i32 10, i32* %result, align 4, !dbg !15541
  br label %if.end46, !dbg !15542

if.end46:                                         ; preds = %if.then45, %sw.bb42
  br label %sw.epilog, !dbg !15543

sw.bb47:                                          ; preds = %if.then7
  %16 = load i8*, i8** %p, align 8, !dbg !15544
  %call48 = call i32 @strcmp(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.91, i64 0, i64 0), i8* %16), !dbg !15546
  %tobool49 = icmp ne i32 %call48, 0, !dbg !15546
  br i1 %tobool49, label %if.end51, label %if.then50, !dbg !15547

if.then50:                                        ; preds = %sw.bb47
  store i32 11, i32* %result, align 4, !dbg !15548
  br label %if.end51, !dbg !15549

if.end51:                                         ; preds = %if.then50, %sw.bb47
  br label %sw.epilog, !dbg !15550

sw.bb52:                                          ; preds = %if.then7
  %17 = load i8*, i8** %p, align 8, !dbg !15551
  %call53 = call i32 @strcmp(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.92, i64 0, i64 0), i8* %17), !dbg !15553
  %tobool54 = icmp ne i32 %call53, 0, !dbg !15553
  br i1 %tobool54, label %if.end56, label %if.then55, !dbg !15554

if.then55:                                        ; preds = %sw.bb52
  store i32 12, i32* %result, align 4, !dbg !15555
  br label %if.end56, !dbg !15556

if.end56:                                         ; preds = %if.then55, %sw.bb52
  br label %sw.epilog, !dbg !15557

sw.bb57:                                          ; preds = %if.then7
  %18 = load i8*, i8** %p, align 8, !dbg !15558
  %call58 = call i32 @strcmp(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.93, i64 0, i64 0), i8* %18), !dbg !15560
  %tobool59 = icmp ne i32 %call58, 0, !dbg !15560
  br i1 %tobool59, label %if.else61, label %if.then60, !dbg !15561

if.then60:                                        ; preds = %sw.bb57
  store i32 13, i32* %result, align 4, !dbg !15562
  br label %if.end66, !dbg !15563

if.else61:                                        ; preds = %sw.bb57
  %19 = load i8*, i8** %p, align 8, !dbg !15564
  %call62 = call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.94, i64 0, i64 0), i8* %19), !dbg !15566
  %tobool63 = icmp ne i32 %call62, 0, !dbg !15566
  br i1 %tobool63, label %if.end65, label %if.then64, !dbg !15567

if.then64:                                        ; preds = %if.else61
  store i32 14, i32* %result, align 4, !dbg !15568
  br label %if.end65, !dbg !15569

if.end65:                                         ; preds = %if.then64, %if.else61
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then60
  br label %sw.epilog, !dbg !15570

sw.bb67:                                          ; preds = %if.then7
  %20 = load i8*, i8** %p, align 8, !dbg !15571
  %call68 = call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.95, i64 0, i64 0), i8* %20), !dbg !15573
  %tobool69 = icmp ne i32 %call68, 0, !dbg !15573
  br i1 %tobool69, label %if.end71, label %if.then70, !dbg !15574

if.then70:                                        ; preds = %sw.bb67
  store i32 15, i32* %result, align 4, !dbg !15575
  br label %if.end71, !dbg !15576

if.end71:                                         ; preds = %if.then70, %sw.bb67
  br label %sw.epilog, !dbg !15577

sw.epilog:                                        ; preds = %if.then7, %if.end71, %if.end66, %if.end56, %if.end51, %if.end46, %if.end41, %if.end31, %if.end26, %if.end21
  br label %if.end72, !dbg !15578

if.end72:                                         ; preds = %sw.epilog, %if.else4
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then3
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then
  %21 = load i32, i32* %result, align 4, !dbg !15579
  %cmp = icmp ne i32 %21, 0, !dbg !15581
  br i1 %cmp, label %if.then76, label %if.end77, !dbg !15582

if.then76:                                        ; preds = %if.end74
  %22 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15583
  call void @c_parser_consume_token(%struct.c_parser* %22), !dbg !15584
  br label %if.end77, !dbg !15584

if.end77:                                         ; preds = %if.then76, %if.end74
  %23 = load i32, i32* %result, align 4, !dbg !15585
  ret i32 %23, !dbg !15586
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_collapse(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15587 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  %c = alloca %union.tree_node*, align 8
  %num = alloca %union.tree_node*, align 8
  %n = alloca i64, align 8
  %loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15590, metadata !DIExpression()), !dbg !15591
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15592, metadata !DIExpression()), !dbg !15593
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !15594, metadata !DIExpression()), !dbg !15595
  call void @llvm.dbg.declare(metadata %union.tree_node** %num, metadata !15596, metadata !DIExpression()), !dbg !15597
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !15598
  store %union.tree_node* %0, %union.tree_node** %num, align 8, !dbg !15597
  call void @llvm.dbg.declare(metadata i64* %n, metadata !15599, metadata !DIExpression()), !dbg !15600
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !15601, metadata !DIExpression()), !dbg !15602
  %1 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15603
  call void @check_no_duplicate_clause(%union.tree_node* %1, i32 14, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.81, i64 0, i64 0)), !dbg !15604
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15605
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !15606
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !15607
  %3 = load i32, i32* %location, align 8, !dbg !15607
  store i32 %3, i32* %loc, align 4, !dbg !15608
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15609
  %call1 = call zeroext i8 @c_parser_require(%struct.c_parser* %4, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !15611
  %tobool = icmp ne i8 %call1, 0, !dbg !15611
  br i1 %tobool, label %if.then, label %if.end, !dbg !15612

if.then:                                          ; preds = %entry
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15613
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp, %struct.c_parser* %5, %struct.c_expr* null), !dbg !15615
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !15616
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !15616
  store %union.tree_node* %6, %union.tree_node** %num, align 8, !dbg !15617
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15618
  call void @c_parser_skip_until_found(%struct.c_parser* %7, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !15619
  br label %if.end, !dbg !15620

if.end:                                           ; preds = %if.then, %entry
  %8 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !15621
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !15623
  %cmp = icmp eq %union.tree_node* %8, %9, !dbg !15624
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !15625

if.then2:                                         ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15626
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !15627
  br label %return, !dbg !15627

if.end3:                                          ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !15628
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !15628
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15628
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15628
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !15628
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !15628
  %bf.load = load i64, i64* %13, align 8, !dbg !15628
  %bf.clear = and i64 %bf.load, 65535, !dbg !15628
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15628
  %cmp4 = icmp eq i32 %bf.cast, 6, !dbg !15628
  br i1 %cmp4, label %lor.lhs.false20, label %lor.lhs.false, !dbg !15628

lor.lhs.false:                                    ; preds = %if.end3
  %14 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !15628
  %common5 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !15628
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !15628
  %15 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !15628
  %base7 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !15628
  %16 = bitcast %struct.tree_base* %base7 to i64*, !dbg !15628
  %bf.load8 = load i64, i64* %16, align 8, !dbg !15628
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !15628
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !15628
  %cmp11 = icmp eq i32 %bf.cast10, 7, !dbg !15628
  br i1 %cmp11, label %lor.lhs.false20, label %lor.lhs.false12, !dbg !15628

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %17 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !15628
  %common13 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !15628
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !15628
  %18 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !15628
  %base15 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !15628
  %19 = bitcast %struct.tree_base* %base15 to i64*, !dbg !15628
  %bf.load16 = load i64, i64* %19, align 8, !dbg !15628
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !15628
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !15628
  %cmp19 = icmp eq i32 %bf.cast18, 8, !dbg !15628
  br i1 %cmp19, label %lor.lhs.false20, label %if.then30, !dbg !15630

lor.lhs.false20:                                  ; preds = %lor.lhs.false12, %lor.lhs.false, %if.end3
  %20 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !15631
  %call21 = call i32 @host_integerp(%union.tree_node* %20, i32 0), !dbg !15632
  %tobool22 = icmp ne i32 %call21, 0, !dbg !15632
  br i1 %tobool22, label %lor.lhs.false23, label %if.then30, !dbg !15633

lor.lhs.false23:                                  ; preds = %lor.lhs.false20
  %21 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !15634
  %call24 = call i64 @tree_low_cst(%union.tree_node* %21, i32 0), !dbg !15635
  store i64 %call24, i64* %n, align 8, !dbg !15636
  %cmp25 = icmp sle i64 %call24, 0, !dbg !15637
  br i1 %cmp25, label %if.then30, label %lor.lhs.false26, !dbg !15638

lor.lhs.false26:                                  ; preds = %lor.lhs.false23
  %22 = load i64, i64* %n, align 8, !dbg !15639
  %conv = trunc i64 %22 to i32, !dbg !15640
  %conv27 = sext i32 %conv to i64, !dbg !15640
  %23 = load i64, i64* %n, align 8, !dbg !15641
  %cmp28 = icmp ne i64 %conv27, %23, !dbg !15642
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !15643

if.then30:                                        ; preds = %lor.lhs.false26, %lor.lhs.false23, %lor.lhs.false20, %lor.lhs.false12
  %24 = load i32, i32* %loc, align 4, !dbg !15644
  call void (i32, i8*, ...) @error_at(i32 %24, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.98, i64 0, i64 0)), !dbg !15646
  %25 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15647
  store %union.tree_node* %25, %union.tree_node** %retval, align 8, !dbg !15648
  br label %return, !dbg !15648

if.end31:                                         ; preds = %lor.lhs.false26
  %26 = load i32, i32* %loc, align 4, !dbg !15649
  %call32 = call %union.tree_node* @build_omp_clause(i32 %26, i32 14), !dbg !15650
  store %union.tree_node* %call32, %union.tree_node** %c, align 8, !dbg !15651
  %27 = load %union.tree_node*, %union.tree_node** %num, align 8, !dbg !15652
  %28 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15653
  %omp_clause = bitcast %union.tree_node* %28 to %struct.tree_omp_clause*, !dbg !15653
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 6, !dbg !15653
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !15653
  store %union.tree_node* %27, %union.tree_node** %arrayidx, align 8, !dbg !15654
  %29 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15655
  %30 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15656
  %common33 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !15656
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 1, !dbg !15656
  store %union.tree_node* %29, %union.tree_node** %chain, align 8, !dbg !15657
  %31 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15658
  store %union.tree_node* %31, %union.tree_node** %retval, align 8, !dbg !15659
  br label %return, !dbg !15659

return:                                           ; preds = %if.end31, %if.then30, %if.then2
  %32 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !15660
  ret %union.tree_node* %32, !dbg !15660
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_copyin(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15661 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15662, metadata !DIExpression()), !dbg !15663
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15664, metadata !DIExpression()), !dbg !15665
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15666
  %1 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15667
  %call = call %union.tree_node* @c_parser_omp_var_list_parens(%struct.c_parser* %0, i32 6, %union.tree_node* %1), !dbg !15668
  ret %union.tree_node* %call, !dbg !15669
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_copyprivate(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15670 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15671, metadata !DIExpression()), !dbg !15672
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15673, metadata !DIExpression()), !dbg !15674
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15675
  %1 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15676
  %call = call %union.tree_node* @c_parser_omp_var_list_parens(%struct.c_parser* %0, i32 7, %union.tree_node* %1), !dbg !15677
  ret %union.tree_node* %call, !dbg !15678
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_default(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15679 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  %kind = alloca i32, align 4
  %loc = alloca i32, align 4
  %c = alloca %union.tree_node*, align 8
  %p = alloca i8*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15680, metadata !DIExpression()), !dbg !15681
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15682, metadata !DIExpression()), !dbg !15683
  call void @llvm.dbg.declare(metadata i32* %kind, metadata !15684, metadata !DIExpression()), !dbg !15685
  store i32 0, i32* %kind, align 4, !dbg !15685
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !15686, metadata !DIExpression()), !dbg !15687
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15688
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !15689
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !15690
  %1 = load i32, i32* %location, align 8, !dbg !15690
  store i32 %1, i32* %loc, align 4, !dbg !15687
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !15691, metadata !DIExpression()), !dbg !15692
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15693
  %call1 = call zeroext i8 @c_parser_require(%struct.c_parser* %2, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !15695
  %tobool = icmp ne i8 %call1, 0, !dbg !15695
  br i1 %tobool, label %if.end, label %if.then, !dbg !15696

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15697
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !15698
  br label %return, !dbg !15698

if.end:                                           ; preds = %entry
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15699
  %call2 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %4, i32 53), !dbg !15701
  %tobool3 = icmp ne i8 %call2, 0, !dbg !15701
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !15702

if.then4:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8** %p, metadata !15703, metadata !DIExpression()), !dbg !15705
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15706
  %call5 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %5), !dbg !15706
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call5, i32 0, i32 1, !dbg !15706
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !15706
  %identifier = bitcast %union.tree_node* %6 to %struct.tree_identifier*, !dbg !15706
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !15706
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !15706
  %7 = load i8*, i8** %str, align 8, !dbg !15706
  store i8* %7, i8** %p, align 8, !dbg !15705
  %8 = load i8*, i8** %p, align 8, !dbg !15707
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 0, !dbg !15707
  %9 = load i8, i8* %arrayidx, align 1, !dbg !15707
  %conv = sext i8 %9 to i32, !dbg !15707
  switch i32 %conv, label %sw.default [
    i32 110, label %sw.bb
    i32 115, label %sw.bb10
  ], !dbg !15708

sw.bb:                                            ; preds = %if.then4
  %10 = load i8*, i8** %p, align 8, !dbg !15709
  %call6 = call i32 @strcmp(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.100, i64 0, i64 0), i8* %10), !dbg !15712
  %cmp = icmp ne i32 %call6, 0, !dbg !15713
  br i1 %cmp, label %if.then8, label %if.end9, !dbg !15714

if.then8:                                         ; preds = %sw.bb
  br label %invalid_kind, !dbg !15715

if.end9:                                          ; preds = %sw.bb
  store i32 2, i32* %kind, align 4, !dbg !15716
  br label %sw.epilog, !dbg !15717

sw.bb10:                                          ; preds = %if.then4
  %11 = load i8*, i8** %p, align 8, !dbg !15718
  %call11 = call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.94, i64 0, i64 0), i8* %11), !dbg !15720
  %cmp12 = icmp ne i32 %call11, 0, !dbg !15721
  br i1 %cmp12, label %if.then14, label %if.end15, !dbg !15722

if.then14:                                        ; preds = %sw.bb10
  br label %invalid_kind, !dbg !15723

if.end15:                                         ; preds = %sw.bb10
  store i32 1, i32* %kind, align 4, !dbg !15724
  br label %sw.epilog, !dbg !15725

sw.default:                                       ; preds = %if.then4
  br label %invalid_kind, !dbg !15726

sw.epilog:                                        ; preds = %if.end15, %if.end9
  %12 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15727
  call void @c_parser_consume_token(%struct.c_parser* %12), !dbg !15728
  br label %if.end16, !dbg !15729

if.else:                                          ; preds = %if.end
  br label %invalid_kind, !dbg !15730

invalid_kind:                                     ; preds = %if.else, %sw.default, %if.then14, %if.then8
  call void @llvm.dbg.label(metadata !15731), !dbg !15733
  %13 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15734
  call void @c_parser_error(%struct.c_parser* %13, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.101, i64 0, i64 0)), !dbg !15735
  br label %if.end16

if.end16:                                         ; preds = %invalid_kind, %sw.epilog
  %14 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15736
  call void @c_parser_skip_until_found(%struct.c_parser* %14, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !15737
  %15 = load i32, i32* %kind, align 4, !dbg !15738
  %cmp17 = icmp eq i32 %15, 0, !dbg !15740
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !15741

if.then19:                                        ; preds = %if.end16
  %16 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15742
  store %union.tree_node* %16, %union.tree_node** %retval, align 8, !dbg !15743
  br label %return, !dbg !15743

if.end20:                                         ; preds = %if.end16
  %17 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15744
  call void @check_no_duplicate_clause(%union.tree_node* %17, i32 13, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.84, i64 0, i64 0)), !dbg !15745
  %18 = load i32, i32* %loc, align 4, !dbg !15746
  %call21 = call %union.tree_node* @build_omp_clause(i32 %18, i32 13), !dbg !15747
  store %union.tree_node* %call21, %union.tree_node** %c, align 8, !dbg !15748
  %19 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15749
  %20 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15750
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !15750
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !15750
  store %union.tree_node* %19, %union.tree_node** %chain, align 8, !dbg !15751
  %21 = load i32, i32* %kind, align 4, !dbg !15752
  %22 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15753
  %omp_clause = bitcast %union.tree_node* %22 to %struct.tree_omp_clause*, !dbg !15753
  %subcode = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 3, !dbg !15753
  %default_kind = bitcast %union.omp_clause_subcode* %subcode to i32*, !dbg !15753
  store i32 %21, i32* %default_kind, align 8, !dbg !15754
  %23 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15755
  store %union.tree_node* %23, %union.tree_node** %retval, align 8, !dbg !15756
  br label %return, !dbg !15756

return:                                           ; preds = %if.end20, %if.then19, %if.then
  %24 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !15757
  ret %union.tree_node* %24, !dbg !15757
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_firstprivate(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15758 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15759, metadata !DIExpression()), !dbg !15760
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15761, metadata !DIExpression()), !dbg !15762
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15763
  %1 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15764
  %call = call %union.tree_node* @c_parser_omp_var_list_parens(%struct.c_parser* %0, i32 3, %union.tree_node* %1), !dbg !15765
  ret %union.tree_node* %call, !dbg !15766
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_if(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15767 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  %c = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15768, metadata !DIExpression()), !dbg !15769
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15770, metadata !DIExpression()), !dbg !15771
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !15772, metadata !DIExpression()), !dbg !15773
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15774
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !15775
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !15776
  %1 = load i32, i32* %location, align 8, !dbg !15776
  store i32 %1, i32* %loc, align 4, !dbg !15773
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15777
  %call1 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %2, i32 20), !dbg !15779
  %tobool = icmp ne i8 %call1, 0, !dbg !15779
  br i1 %tobool, label %if.then, label %if.else, !dbg !15780

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !15781, metadata !DIExpression()), !dbg !15783
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15784
  %call2 = call %union.tree_node* @c_parser_paren_condition(%struct.c_parser* %3), !dbg !15785
  store %union.tree_node* %call2, %union.tree_node** %t, align 8, !dbg !15783
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !15786, metadata !DIExpression()), !dbg !15787
  %4 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15788
  call void @check_no_duplicate_clause(%union.tree_node* %4, i32 8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86, i64 0, i64 0)), !dbg !15789
  %5 = load i32, i32* %loc, align 4, !dbg !15790
  %call3 = call %union.tree_node* @build_omp_clause(i32 %5, i32 8), !dbg !15791
  store %union.tree_node* %call3, %union.tree_node** %c, align 8, !dbg !15792
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15793
  %7 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15794
  %omp_clause = bitcast %union.tree_node* %7 to %struct.tree_omp_clause*, !dbg !15794
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 6, !dbg !15794
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !15794
  store %union.tree_node* %6, %union.tree_node** %arrayidx, align 8, !dbg !15795
  %8 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15796
  %9 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15797
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !15797
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !15797
  store %union.tree_node* %8, %union.tree_node** %chain, align 8, !dbg !15798
  %10 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15799
  store %union.tree_node* %10, %union.tree_node** %list.addr, align 8, !dbg !15800
  br label %if.end, !dbg !15801

if.else:                                          ; preds = %entry
  %11 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15802
  call void @c_parser_error(%struct.c_parser* %11, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !15803
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15804
  ret %union.tree_node* %12, !dbg !15805
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_lastprivate(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15806 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15807, metadata !DIExpression()), !dbg !15808
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15809, metadata !DIExpression()), !dbg !15810
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15811
  %1 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15812
  %call = call %union.tree_node* @c_parser_omp_var_list_parens(%struct.c_parser* %0, i32 4, %union.tree_node* %1), !dbg !15813
  ret %union.tree_node* %call, !dbg !15814
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_nowait(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15815 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  %c = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15816, metadata !DIExpression()), !dbg !15817
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15818, metadata !DIExpression()), !dbg !15819
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !15820, metadata !DIExpression()), !dbg !15821
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !15822, metadata !DIExpression()), !dbg !15823
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15824
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !15825
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !15826
  %1 = load i32, i32* %location, align 8, !dbg !15826
  store i32 %1, i32* %loc, align 4, !dbg !15823
  %2 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15827
  call void @check_no_duplicate_clause(%union.tree_node* %2, i32 11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i64 0, i64 0)), !dbg !15828
  %3 = load i32, i32* %loc, align 4, !dbg !15829
  %call1 = call %union.tree_node* @build_omp_clause(i32 %3, i32 11), !dbg !15830
  store %union.tree_node* %call1, %union.tree_node** %c, align 8, !dbg !15831
  %4 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15832
  %5 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15833
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !15833
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !15833
  store %union.tree_node* %4, %union.tree_node** %chain, align 8, !dbg !15834
  %6 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15835
  ret %union.tree_node* %6, !dbg !15836
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_num_threads(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15837 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  %num_threads_loc = alloca i32, align 4
  %expr_loc = alloca i32, align 4
  %c = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15838, metadata !DIExpression()), !dbg !15839
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15840, metadata !DIExpression()), !dbg !15841
  call void @llvm.dbg.declare(metadata i32* %num_threads_loc, metadata !15842, metadata !DIExpression()), !dbg !15843
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15844
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !15845
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !15846
  %1 = load i32, i32* %location, align 8, !dbg !15846
  store i32 %1, i32* %num_threads_loc, align 4, !dbg !15843
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15847
  %call1 = call zeroext i8 @c_parser_require(%struct.c_parser* %2, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !15849
  %tobool = icmp ne i8 %call1, 0, !dbg !15849
  br i1 %tobool, label %if.then, label %if.end48, !dbg !15850

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %expr_loc, metadata !15851, metadata !DIExpression()), !dbg !15853
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15854
  %call2 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !15855
  %location3 = getelementptr inbounds %struct.c_token, %struct.c_token* %call2, i32 0, i32 2, !dbg !15856
  %4 = load i32, i32* %location3, align 8, !dbg !15856
  store i32 %4, i32* %expr_loc, align 4, !dbg !15853
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !15857, metadata !DIExpression()), !dbg !15858
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !15859, metadata !DIExpression()), !dbg !15860
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15861
  call void @c_parser_expression(%struct.c_expr* sret %tmp, %struct.c_parser* %5), !dbg !15862
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !15863
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !15863
  store %union.tree_node* %6, %union.tree_node** %t, align 8, !dbg !15860
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15864
  %call4 = call %union.tree_node* @c_fully_fold(%union.tree_node* %7, i8 zeroext 0, i8* null), !dbg !15865
  store %union.tree_node* %call4, %union.tree_node** %t, align 8, !dbg !15866
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15867
  call void @c_parser_skip_until_found(%struct.c_parser* %8, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !15868
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15869
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !15869
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !15869
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !15869
  %base = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !15869
  %11 = bitcast %struct.tree_base* %base to i64*, !dbg !15869
  %bf.load = load i64, i64* %11, align 8, !dbg !15869
  %bf.clear = and i64 %bf.load, 65535, !dbg !15869
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !15869
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !15869
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !15869

lor.lhs.false:                                    ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15869
  %common5 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !15869
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !15869
  %13 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !15869
  %base7 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !15869
  %14 = bitcast %struct.tree_base* %base7 to i64*, !dbg !15869
  %bf.load8 = load i64, i64* %14, align 8, !dbg !15869
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !15869
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !15869
  %cmp11 = icmp eq i32 %bf.cast10, 7, !dbg !15869
  br i1 %cmp11, label %if.end, label %lor.lhs.false12, !dbg !15869

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15869
  %common13 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !15869
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !15869
  %16 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !15869
  %base15 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !15869
  %17 = bitcast %struct.tree_base* %base15 to i64*, !dbg !15869
  %bf.load16 = load i64, i64* %17, align 8, !dbg !15869
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !15869
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !15869
  %cmp19 = icmp eq i32 %bf.cast18, 8, !dbg !15869
  br i1 %cmp19, label %if.end, label %if.then20, !dbg !15871

if.then20:                                        ; preds = %lor.lhs.false12
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15872
  call void @c_parser_error(%struct.c_parser* %18, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.102, i64 0, i64 0)), !dbg !15874
  %19 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15875
  store %union.tree_node* %19, %union.tree_node** %retval, align 8, !dbg !15876
  br label %return, !dbg !15876

if.end:                                           ; preds = %lor.lhs.false12, %lor.lhs.false, %if.then
  %20 = load i32, i32* %expr_loc, align 4, !dbg !15877
  %21 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !15877
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15877
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15877
  %common21 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !15877
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !15877
  %24 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !15877
  %call23 = call %union.tree_node* @build_int_cst(%union.tree_node* %24, i64 0), !dbg !15877
  %call24 = call %union.tree_node* @fold_build2_stat_loc(i32 %20, i32 98, %union.tree_node* %21, %union.tree_node* %22, %union.tree_node* %call23), !dbg !15877
  store %union.tree_node* %call24, %union.tree_node** %c, align 8, !dbg !15878
  %25 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15879
  %tobool25 = icmp ne %union.tree_node* %25, null, !dbg !15879
  br i1 %tobool25, label %land.lhs.true, label %if.end40, !dbg !15879

land.lhs.true:                                    ; preds = %if.end
  %26 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15879
  %base26 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !15879
  %27 = bitcast %struct.tree_base* %base26 to i64*, !dbg !15879
  %bf.load27 = load i64, i64* %27, align 8, !dbg !15879
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !15879
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !15879
  %idxprom = sext i32 %bf.cast29 to i64, !dbg !15879
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !15879
  %28 = load i32, i32* %arrayidx, align 4, !dbg !15879
  %cmp30 = icmp uge i32 %28, 4, !dbg !15879
  br i1 %cmp30, label %land.lhs.true31, label %if.end40, !dbg !15879

land.lhs.true31:                                  ; preds = %land.lhs.true
  %29 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15879
  %base32 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !15879
  %30 = bitcast %struct.tree_base* %base32 to i64*, !dbg !15879
  %bf.load33 = load i64, i64* %30, align 8, !dbg !15879
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !15879
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !15879
  %idxprom36 = sext i32 %bf.cast35 to i64, !dbg !15879
  %arrayidx37 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom36, !dbg !15879
  %31 = load i32, i32* %arrayidx37, align 4, !dbg !15879
  %cmp38 = icmp ule i32 %31, 10, !dbg !15879
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !15881

if.then39:                                        ; preds = %land.lhs.true31
  %32 = load i32, i32* %expr_loc, align 4, !dbg !15882
  %33 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15882
  %exp = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !15882
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !15882
  store i32 %32, i32* %locus, align 8, !dbg !15882
  br label %if.end40, !dbg !15882

if.end40:                                         ; preds = %if.then39, %land.lhs.true31, %land.lhs.true, %if.end
  %34 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15883
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !15885
  %cmp41 = icmp eq %union.tree_node* %34, %35, !dbg !15886
  br i1 %cmp41, label %if.then42, label %if.end44, !dbg !15887

if.then42:                                        ; preds = %if.end40
  %36 = load i32, i32* %expr_loc, align 4, !dbg !15888
  %call43 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %36, i32 0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.103, i64 0, i64 0)), !dbg !15890
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !15891
  store %union.tree_node* %37, %union.tree_node** %t, align 8, !dbg !15892
  br label %if.end44, !dbg !15893

if.end44:                                         ; preds = %if.then42, %if.end40
  %38 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15894
  call void @check_no_duplicate_clause(%union.tree_node* %38, i32 9, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.89, i64 0, i64 0)), !dbg !15895
  %39 = load i32, i32* %num_threads_loc, align 4, !dbg !15896
  %call45 = call %union.tree_node* @build_omp_clause(i32 %39, i32 9), !dbg !15897
  store %union.tree_node* %call45, %union.tree_node** %c, align 8, !dbg !15898
  %40 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !15899
  %41 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15900
  %omp_clause = bitcast %union.tree_node* %41 to %struct.tree_omp_clause*, !dbg !15900
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 6, !dbg !15900
  %arrayidx46 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !15900
  store %union.tree_node* %40, %union.tree_node** %arrayidx46, align 8, !dbg !15901
  %42 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15902
  %43 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15903
  %common47 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !15903
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 1, !dbg !15903
  store %union.tree_node* %42, %union.tree_node** %chain, align 8, !dbg !15904
  %44 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15905
  store %union.tree_node* %44, %union.tree_node** %list.addr, align 8, !dbg !15906
  br label %if.end48, !dbg !15907

if.end48:                                         ; preds = %if.end44, %entry
  %45 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15908
  store %union.tree_node* %45, %union.tree_node** %retval, align 8, !dbg !15909
  br label %return, !dbg !15909

return:                                           ; preds = %if.end48, %if.then20
  %46 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !15910
  ret %union.tree_node* %46, !dbg !15910
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_ordered(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15911 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  %c = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15912, metadata !DIExpression()), !dbg !15913
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15914, metadata !DIExpression()), !dbg !15915
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !15916, metadata !DIExpression()), !dbg !15917
  %0 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15918
  call void @check_no_duplicate_clause(%union.tree_node* %0, i32 12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i64 0, i64 0)), !dbg !15919
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15920
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !15921
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !15922
  %2 = load i32, i32* %location, align 8, !dbg !15922
  %call1 = call %union.tree_node* @build_omp_clause(i32 %2, i32 12), !dbg !15923
  store %union.tree_node* %call1, %union.tree_node** %c, align 8, !dbg !15924
  %3 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15925
  %4 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15926
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !15926
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !15926
  store %union.tree_node* %3, %union.tree_node** %chain, align 8, !dbg !15927
  %5 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !15928
  ret %union.tree_node* %5, !dbg !15929
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_private(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15930 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15931, metadata !DIExpression()), !dbg !15932
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15933, metadata !DIExpression()), !dbg !15934
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15935
  %1 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15936
  %call = call %union.tree_node* @c_parser_omp_var_list_parens(%struct.c_parser* %0, i32 1, %union.tree_node* %1), !dbg !15937
  ret %union.tree_node* %call, !dbg !15938
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_reduction(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !15939 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  %clause_loc = alloca i32, align 4
  %code = alloca i32, align 4
  %nl = alloca %union.tree_node*, align 8
  %c = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !15940, metadata !DIExpression()), !dbg !15941
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !15942, metadata !DIExpression()), !dbg !15943
  call void @llvm.dbg.declare(metadata i32* %clause_loc, metadata !15944, metadata !DIExpression()), !dbg !15945
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15946
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !15947
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !15948
  %1 = load i32, i32* %location, align 8, !dbg !15948
  store i32 %1, i32* %clause_loc, align 4, !dbg !15945
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15949
  %call1 = call zeroext i8 @c_parser_require(%struct.c_parser* %2, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !15951
  %tobool = icmp ne i8 %call1, 0, !dbg !15951
  br i1 %tobool, label %if.then, label %if.end14, !dbg !15952

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %code, metadata !15953, metadata !DIExpression()), !dbg !15955
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15956
  %call2 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %3), !dbg !15957
  %4 = bitcast %struct.c_token* %call2 to i32*, !dbg !15958
  %bf.load = load i32, i32* %4, align 8, !dbg !15958
  %bf.clear = and i32 %bf.load, 255, !dbg !15958
  switch i32 %bf.clear, label %sw.default [
    i32 4, label %sw.bb
    i32 6, label %sw.bb3
    i32 5, label %sw.bb4
    i32 9, label %sw.bb5
    i32 11, label %sw.bb6
    i32 10, label %sw.bb7
    i32 15, label %sw.bb8
    i32 16, label %sw.bb9
  ], !dbg !15959

sw.bb:                                            ; preds = %if.then
  store i32 63, i32* %code, align 4, !dbg !15960
  br label %sw.epilog, !dbg !15962

sw.bb3:                                           ; preds = %if.then
  store i32 65, i32* %code, align 4, !dbg !15963
  br label %sw.epilog, !dbg !15964

sw.bb4:                                           ; preds = %if.then
  store i32 64, i32* %code, align 4, !dbg !15965
  br label %sw.epilog, !dbg !15966

sw.bb5:                                           ; preds = %if.then
  store i32 89, i32* %code, align 4, !dbg !15967
  br label %sw.epilog, !dbg !15968

sw.bb6:                                           ; preds = %if.then
  store i32 88, i32* %code, align 4, !dbg !15969
  br label %sw.epilog, !dbg !15970

sw.bb7:                                           ; preds = %if.then
  store i32 87, i32* %code, align 4, !dbg !15971
  br label %sw.epilog, !dbg !15972

sw.bb8:                                           ; preds = %if.then
  store i32 91, i32* %code, align 4, !dbg !15973
  br label %sw.epilog, !dbg !15974

sw.bb9:                                           ; preds = %if.then
  store i32 92, i32* %code, align 4, !dbg !15975
  br label %sw.epilog, !dbg !15976

sw.default:                                       ; preds = %if.then
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15977
  call void @c_parser_error(%struct.c_parser* %5, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.104, i64 0, i64 0)), !dbg !15978
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15979
  call void @c_parser_skip_until_found(%struct.c_parser* %6, i32 21, i8* null), !dbg !15980
  %7 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15981
  store %union.tree_node* %7, %union.tree_node** %retval, align 8, !dbg !15982
  br label %return, !dbg !15982

sw.epilog:                                        ; preds = %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb
  %8 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15983
  call void @c_parser_consume_token(%struct.c_parser* %8), !dbg !15984
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15985
  %call10 = call zeroext i8 @c_parser_require(%struct.c_parser* %9, i32 18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0)), !dbg !15987
  %tobool11 = icmp ne i8 %call10, 0, !dbg !15987
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !15988

if.then12:                                        ; preds = %sw.epilog
  call void @llvm.dbg.declare(metadata %union.tree_node** %nl, metadata !15989, metadata !DIExpression()), !dbg !15991
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !15992, metadata !DIExpression()), !dbg !15993
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !15994
  %11 = load i32, i32* %clause_loc, align 4, !dbg !15995
  %12 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !15996
  %call13 = call %union.tree_node* @c_parser_omp_variable_list(%struct.c_parser* %10, i32 %11, i32 5, %union.tree_node* %12), !dbg !15997
  store %union.tree_node* %call13, %union.tree_node** %nl, align 8, !dbg !15998
  %13 = load %union.tree_node*, %union.tree_node** %nl, align 8, !dbg !15999
  store %union.tree_node* %13, %union.tree_node** %c, align 8, !dbg !16001
  br label %for.cond, !dbg !16002

for.cond:                                         ; preds = %for.inc, %if.then12
  %14 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16003
  %15 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !16005
  %cmp = icmp ne %union.tree_node* %14, %15, !dbg !16006
  br i1 %cmp, label %for.body, label %for.end, !dbg !16007

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %code, align 4, !dbg !16008
  %17 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16009
  %omp_clause = bitcast %union.tree_node* %17 to %struct.tree_omp_clause*, !dbg !16009
  %subcode = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 3, !dbg !16009
  %reduction_code = bitcast %union.omp_clause_subcode* %subcode to i32*, !dbg !16009
  store i32 %16, i32* %reduction_code, align 8, !dbg !16010
  br label %for.inc, !dbg !16009

for.inc:                                          ; preds = %for.body
  %18 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16011
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !16011
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !16011
  %19 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !16011
  store %union.tree_node* %19, %union.tree_node** %c, align 8, !dbg !16012
  br label %for.cond, !dbg !16013, !llvm.loop !16014

for.end:                                          ; preds = %for.cond
  %20 = load %union.tree_node*, %union.tree_node** %nl, align 8, !dbg !16016
  store %union.tree_node* %20, %union.tree_node** %list.addr, align 8, !dbg !16017
  br label %if.end, !dbg !16018

if.end:                                           ; preds = %for.end, %sw.epilog
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16019
  call void @c_parser_skip_until_found(%struct.c_parser* %21, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !16020
  br label %if.end14, !dbg !16021

if.end14:                                         ; preds = %if.end, %entry
  %22 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !16022
  store %union.tree_node* %22, %union.tree_node** %retval, align 8, !dbg !16023
  br label %return, !dbg !16023

return:                                           ; preds = %if.end14, %sw.default
  %23 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !16024
  ret %union.tree_node* %23, !dbg !16024
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_schedule(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !16025 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  %c = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  %kind = alloca %union.tree_node*, align 8
  %p = alloca i8*, align 8
  %here = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !16026, metadata !DIExpression()), !dbg !16027
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !16028, metadata !DIExpression()), !dbg !16029
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !16030, metadata !DIExpression()), !dbg !16031
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !16032, metadata !DIExpression()), !dbg !16033
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !16034, metadata !DIExpression()), !dbg !16035
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16036
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !16037
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !16038
  %1 = load i32, i32* %location, align 8, !dbg !16038
  store i32 %1, i32* %loc, align 4, !dbg !16035
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16039
  %call1 = call zeroext i8 @c_parser_require(%struct.c_parser* %2, i32 20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0)), !dbg !16041
  %tobool = icmp ne i8 %call1, 0, !dbg !16041
  br i1 %tobool, label %if.end, label %if.then, !dbg !16042

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !16043
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !16044
  br label %return, !dbg !16044

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %loc, align 4, !dbg !16045
  %call2 = call %union.tree_node* @build_omp_clause(i32 %4, i32 10), !dbg !16046
  store %union.tree_node* %call2, %union.tree_node** %c, align 8, !dbg !16047
  %5 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16048
  %call3 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %5, i32 53), !dbg !16050
  %tobool4 = icmp ne i8 %call3, 0, !dbg !16050
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !16051

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %kind, metadata !16052, metadata !DIExpression()), !dbg !16054
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16055
  %call6 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %6), !dbg !16056
  %value = getelementptr inbounds %struct.c_token, %struct.c_token* %call6, i32 0, i32 1, !dbg !16057
  %7 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !16057
  store %union.tree_node* %7, %union.tree_node** %kind, align 8, !dbg !16054
  call void @llvm.dbg.declare(metadata i8** %p, metadata !16058, metadata !DIExpression()), !dbg !16059
  %8 = load %union.tree_node*, %union.tree_node** %kind, align 8, !dbg !16060
  %identifier = bitcast %union.tree_node* %8 to %struct.tree_identifier*, !dbg !16060
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !16060
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !16060
  %9 = load i8*, i8** %str, align 8, !dbg !16060
  store i8* %9, i8** %p, align 8, !dbg !16059
  %10 = load i8*, i8** %p, align 8, !dbg !16061
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 0, !dbg !16061
  %11 = load i8, i8* %arrayidx, align 1, !dbg !16061
  %conv = sext i8 %11 to i32, !dbg !16061
  switch i32 %conv, label %sw.default [
    i32 100, label %sw.bb
    i32 103, label %sw.bb11
    i32 114, label %sw.bb20
  ], !dbg !16062

sw.bb:                                            ; preds = %if.then5
  %12 = load i8*, i8** %p, align 8, !dbg !16063
  %call7 = call i32 @strcmp(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.105, i64 0, i64 0), i8* %12), !dbg !16066
  %cmp = icmp ne i32 %call7, 0, !dbg !16067
  br i1 %cmp, label %if.then9, label %if.end10, !dbg !16068

if.then9:                                         ; preds = %sw.bb
  br label %invalid_kind, !dbg !16069

if.end10:                                         ; preds = %sw.bb
  %13 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16070
  %omp_clause = bitcast %union.tree_node* %13 to %struct.tree_omp_clause*, !dbg !16070
  %subcode = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 3, !dbg !16070
  %schedule_kind = bitcast %union.omp_clause_subcode* %subcode to i32*, !dbg !16070
  store i32 1, i32* %schedule_kind, align 8, !dbg !16071
  br label %sw.epilog, !dbg !16072

sw.bb11:                                          ; preds = %if.then5
  %14 = load i8*, i8** %p, align 8, !dbg !16073
  %call12 = call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.106, i64 0, i64 0), i8* %14), !dbg !16075
  %cmp13 = icmp ne i32 %call12, 0, !dbg !16076
  br i1 %cmp13, label %if.then15, label %if.end16, !dbg !16077

if.then15:                                        ; preds = %sw.bb11
  br label %invalid_kind, !dbg !16078

if.end16:                                         ; preds = %sw.bb11
  %15 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16079
  %omp_clause17 = bitcast %union.tree_node* %15 to %struct.tree_omp_clause*, !dbg !16079
  %subcode18 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause17, i32 0, i32 3, !dbg !16079
  %schedule_kind19 = bitcast %union.omp_clause_subcode* %subcode18 to i32*, !dbg !16079
  store i32 2, i32* %schedule_kind19, align 8, !dbg !16080
  br label %sw.epilog, !dbg !16081

sw.bb20:                                          ; preds = %if.then5
  %16 = load i8*, i8** %p, align 8, !dbg !16082
  %call21 = call i32 @strcmp(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.107, i64 0, i64 0), i8* %16), !dbg !16084
  %cmp22 = icmp ne i32 %call21, 0, !dbg !16085
  br i1 %cmp22, label %if.then24, label %if.end25, !dbg !16086

if.then24:                                        ; preds = %sw.bb20
  br label %invalid_kind, !dbg !16087

if.end25:                                         ; preds = %sw.bb20
  %17 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16088
  %omp_clause26 = bitcast %union.tree_node* %17 to %struct.tree_omp_clause*, !dbg !16088
  %subcode27 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause26, i32 0, i32 3, !dbg !16088
  %schedule_kind28 = bitcast %union.omp_clause_subcode* %subcode27 to i32*, !dbg !16088
  store i32 4, i32* %schedule_kind28, align 8, !dbg !16089
  br label %sw.epilog, !dbg !16090

sw.default:                                       ; preds = %if.then5
  br label %invalid_kind, !dbg !16091

sw.epilog:                                        ; preds = %if.end25, %if.end16, %if.end10
  br label %if.end45, !dbg !16092

if.else:                                          ; preds = %if.end
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16093
  %call29 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %18, i32 0), !dbg !16095
  %tobool30 = icmp ne i8 %call29, 0, !dbg !16095
  br i1 %tobool30, label %if.then31, label %if.else35, !dbg !16096

if.then31:                                        ; preds = %if.else
  %19 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16097
  %omp_clause32 = bitcast %union.tree_node* %19 to %struct.tree_omp_clause*, !dbg !16097
  %subcode33 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause32, i32 0, i32 3, !dbg !16097
  %schedule_kind34 = bitcast %union.omp_clause_subcode* %subcode33 to i32*, !dbg !16097
  store i32 0, i32* %schedule_kind34, align 8, !dbg !16098
  br label %if.end44, !dbg !16097

if.else35:                                        ; preds = %if.else
  %20 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16099
  %call36 = call zeroext i8 @c_parser_next_token_is_keyword(%struct.c_parser* %20, i32 11), !dbg !16101
  %tobool37 = icmp ne i8 %call36, 0, !dbg !16101
  br i1 %tobool37, label %if.then38, label %if.else42, !dbg !16102

if.then38:                                        ; preds = %if.else35
  %21 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16103
  %omp_clause39 = bitcast %union.tree_node* %21 to %struct.tree_omp_clause*, !dbg !16103
  %subcode40 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause39, i32 0, i32 3, !dbg !16103
  %schedule_kind41 = bitcast %union.omp_clause_subcode* %subcode40 to i32*, !dbg !16103
  store i32 3, i32* %schedule_kind41, align 8, !dbg !16104
  br label %if.end43, !dbg !16103

if.else42:                                        ; preds = %if.else35
  br label %invalid_kind, !dbg !16105

if.end43:                                         ; preds = %if.then38
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then31
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %sw.epilog
  %22 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16106
  call void @c_parser_consume_token(%struct.c_parser* %22), !dbg !16107
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16108
  %call46 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %23, i32 19), !dbg !16110
  %tobool47 = icmp ne i8 %call46, 0, !dbg !16110
  br i1 %tobool47, label %if.then48, label %if.else76, !dbg !16111

if.then48:                                        ; preds = %if.end45
  call void @llvm.dbg.declare(metadata i32* %here, metadata !16112, metadata !DIExpression()), !dbg !16114
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16115
  call void @c_parser_consume_token(%struct.c_parser* %24), !dbg !16116
  %25 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16117
  %call49 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %25), !dbg !16118
  %location50 = getelementptr inbounds %struct.c_token, %struct.c_token* %call49, i32 0, i32 2, !dbg !16119
  %26 = load i32, i32* %location50, align 8, !dbg !16119
  store i32 %26, i32* %here, align 4, !dbg !16120
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16121
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp, %struct.c_parser* %27, %struct.c_expr* null), !dbg !16122
  %value51 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %tmp, i32 0, i32 0, !dbg !16123
  %28 = load %union.tree_node*, %union.tree_node** %value51, align 8, !dbg !16123
  store %union.tree_node* %28, %union.tree_node** %t, align 8, !dbg !16124
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16125
  %call52 = call %union.tree_node* @c_fully_fold(%union.tree_node* %29, i8 zeroext 0, i8* null), !dbg !16126
  store %union.tree_node* %call52, %union.tree_node** %t, align 8, !dbg !16127
  %30 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16128
  %omp_clause53 = bitcast %union.tree_node* %30 to %struct.tree_omp_clause*, !dbg !16128
  %subcode54 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause53, i32 0, i32 3, !dbg !16128
  %schedule_kind55 = bitcast %union.omp_clause_subcode* %subcode54 to i32*, !dbg !16128
  %31 = load i32, i32* %schedule_kind55, align 8, !dbg !16128
  %cmp56 = icmp eq i32 %31, 4, !dbg !16130
  br i1 %cmp56, label %if.then58, label %if.else59, !dbg !16131

if.then58:                                        ; preds = %if.then48
  %32 = load i32, i32* %here, align 4, !dbg !16132
  call void (i32, i8*, ...) @error_at(i32 %32, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.108, i64 0, i64 0)), !dbg !16133
  br label %if.end75, !dbg !16133

if.else59:                                        ; preds = %if.then48
  %33 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16134
  %omp_clause60 = bitcast %union.tree_node* %33 to %struct.tree_omp_clause*, !dbg !16134
  %subcode61 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause60, i32 0, i32 3, !dbg !16134
  %schedule_kind62 = bitcast %union.omp_clause_subcode* %subcode61 to i32*, !dbg !16134
  %34 = load i32, i32* %schedule_kind62, align 8, !dbg !16134
  %cmp63 = icmp eq i32 %34, 3, !dbg !16136
  br i1 %cmp63, label %if.then65, label %if.else66, !dbg !16137

if.then65:                                        ; preds = %if.else59
  %35 = load i32, i32* %here, align 4, !dbg !16138
  call void (i32, i8*, ...) @error_at(i32 %35, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.109, i64 0, i64 0)), !dbg !16139
  br label %if.end74, !dbg !16139

if.else66:                                        ; preds = %if.else59
  %36 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16140
  %common = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !16140
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !16140
  %37 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !16140
  %base = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !16140
  %38 = bitcast %struct.tree_base* %base to i64*, !dbg !16140
  %bf.load = load i64, i64* %38, align 8, !dbg !16140
  %bf.clear = and i64 %bf.load, 65535, !dbg !16140
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16140
  %cmp67 = icmp eq i32 %bf.cast, 8, !dbg !16142
  br i1 %cmp67, label %if.then69, label %if.else72, !dbg !16143

if.then69:                                        ; preds = %if.else66
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !16144
  %40 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16145
  %omp_clause70 = bitcast %union.tree_node* %40 to %struct.tree_omp_clause*, !dbg !16145
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause70, i32 0, i32 6, !dbg !16145
  %arrayidx71 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !16145
  store %union.tree_node* %39, %union.tree_node** %arrayidx71, align 8, !dbg !16146
  br label %if.end73, !dbg !16145

if.else72:                                        ; preds = %if.else66
  %41 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16147
  call void @c_parser_error(%struct.c_parser* %41, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.102, i64 0, i64 0)), !dbg !16148
  br label %if.end73

if.end73:                                         ; preds = %if.else72, %if.then69
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then65
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.then58
  %42 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16149
  call void @c_parser_skip_until_found(%struct.c_parser* %42, i32 21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0)), !dbg !16150
  br label %if.end77, !dbg !16151

if.else76:                                        ; preds = %if.end45
  %43 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16152
  call void @c_parser_skip_until_found(%struct.c_parser* %43, i32 21, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.110, i64 0, i64 0)), !dbg !16153
  br label %if.end77

if.end77:                                         ; preds = %if.else76, %if.end75
  %44 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !16154
  call void @check_no_duplicate_clause(%union.tree_node* %44, i32 10, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.93, i64 0, i64 0)), !dbg !16155
  %45 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !16156
  %46 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16157
  %common78 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !16157
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common78, i32 0, i32 1, !dbg !16157
  store %union.tree_node* %45, %union.tree_node** %chain, align 8, !dbg !16158
  %47 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16159
  store %union.tree_node* %47, %union.tree_node** %retval, align 8, !dbg !16160
  br label %return, !dbg !16160

invalid_kind:                                     ; preds = %if.else42, %sw.default, %if.then24, %if.then15, %if.then9
  call void @llvm.dbg.label(metadata !16161), !dbg !16162
  %48 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16163
  call void @c_parser_error(%struct.c_parser* %48, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.111, i64 0, i64 0)), !dbg !16164
  %49 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16165
  call void @c_parser_skip_until_found(%struct.c_parser* %49, i32 21, i8* null), !dbg !16166
  %50 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !16167
  store %union.tree_node* %50, %union.tree_node** %retval, align 8, !dbg !16168
  br label %return, !dbg !16168

return:                                           ; preds = %invalid_kind, %if.end77, %if.then
  %51 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !16169
  ret %union.tree_node* %51, !dbg !16169
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_shared(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !16170 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !16171, metadata !DIExpression()), !dbg !16172
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !16173, metadata !DIExpression()), !dbg !16174
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16175
  %1 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !16176
  %call = call %union.tree_node* @c_parser_omp_var_list_parens(%struct.c_parser* %0, i32 2, %union.tree_node* %1), !dbg !16177
  ret %union.tree_node* %call, !dbg !16178
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_clause_untied(%struct.c_parser* %parser, %union.tree_node* %list) #0 !dbg !16179 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %list.addr = alloca %union.tree_node*, align 8
  %c = alloca %union.tree_node*, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !16180, metadata !DIExpression()), !dbg !16181
  store %union.tree_node* %list, %union.tree_node** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list.addr, metadata !16182, metadata !DIExpression()), !dbg !16183
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !16184, metadata !DIExpression()), !dbg !16185
  %0 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !16186
  call void @check_no_duplicate_clause(%union.tree_node* %0, i32 15, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.95, i64 0, i64 0)), !dbg !16187
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16188
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %1), !dbg !16189
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !16190
  %2 = load i32, i32* %location, align 8, !dbg !16190
  %call1 = call %union.tree_node* @build_omp_clause(i32 %2, i32 15), !dbg !16191
  store %union.tree_node* %call1, %union.tree_node** %c, align 8, !dbg !16192
  %3 = load %union.tree_node*, %union.tree_node** %list.addr, align 8, !dbg !16193
  %4 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16194
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !16194
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !16194
  store %union.tree_node* %3, %union.tree_node** %chain, align 8, !dbg !16195
  %5 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16196
  ret %union.tree_node* %5, !dbg !16197
}

declare dso_local %union.tree_node* @c_finish_omp_clauses(%union.tree_node*) #2

declare dso_local i32 @strcmp(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @check_no_duplicate_clause(%union.tree_node* %clauses, i32 %code, i8* %name) #0 !dbg !16198 {
entry:
  %clauses.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %c = alloca %union.tree_node*, align 8
  %loc = alloca i32, align 4
  store %union.tree_node* %clauses, %union.tree_node** %clauses.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %clauses.addr, metadata !16201, metadata !DIExpression()), !dbg !16202
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !16203, metadata !DIExpression()), !dbg !16204
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !16205, metadata !DIExpression()), !dbg !16206
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !16207, metadata !DIExpression()), !dbg !16208
  %0 = load %union.tree_node*, %union.tree_node** %clauses.addr, align 8, !dbg !16209
  store %union.tree_node* %0, %union.tree_node** %c, align 8, !dbg !16211
  br label %for.cond, !dbg !16212

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16213
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !16215
  br i1 %tobool, label %for.body, label %for.end, !dbg !16215

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16216
  %omp_clause = bitcast %union.tree_node* %2 to %struct.tree_omp_clause*, !dbg !16216
  %code1 = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 2, !dbg !16216
  %3 = load i32, i32* %code1, align 4, !dbg !16216
  %4 = load i32, i32* %code.addr, align 4, !dbg !16218
  %cmp = icmp eq i32 %3, %4, !dbg !16219
  br i1 %cmp, label %if.then, label %if.end, !dbg !16220

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !16221, metadata !DIExpression()), !dbg !16223
  %5 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16224
  %omp_clause2 = bitcast %union.tree_node* %5 to %struct.tree_omp_clause*, !dbg !16224
  %locus = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause2, i32 0, i32 1, !dbg !16224
  %6 = load i32, i32* %locus, align 8, !dbg !16224
  store i32 %6, i32* %loc, align 4, !dbg !16223
  %7 = load i32, i32* %loc, align 4, !dbg !16225
  %8 = load i8*, i8** %name.addr, align 8, !dbg !16226
  call void (i32, i8*, ...) @error_at(i32 %7, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.99, i64 0, i64 0), i8* %8), !dbg !16227
  br label %for.end, !dbg !16228

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !16218

for.inc:                                          ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !16229
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !16229
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !16229
  %10 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !16229
  store %union.tree_node* %10, %union.tree_node** %c, align 8, !dbg !16230
  br label %for.cond, !dbg !16231, !llvm.loop !16232

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !16234
}

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @make_tree_vec_stat(i32) #2

declare dso_local void @protected_set_expr_location(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @c_finish_omp_for(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @c_finish_omp_master(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @c_finish_omp_ordered(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @c_begin_omp_parallel() #2

declare dso_local %union.tree_node* @c_finish_omp_parallel(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @c_split_parallel_clauses(i32, %union.tree_node*, %union.tree_node**, %union.tree_node**) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @c_parser_omp_sections_scope(i32 %sections_loc, %struct.c_parser* %parser) #0 !dbg !16235 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %sections_loc.addr = alloca i32, align 4
  %parser.addr = alloca %struct.c_parser*, align 8
  %stmt = alloca %union.tree_node*, align 8
  %substmt = alloca %union.tree_node*, align 8
  %error_suppress = alloca i8, align 1
  %loc = alloca i32, align 4
  store i32 %sections_loc, i32* %sections_loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sections_loc.addr, metadata !16236, metadata !DIExpression()), !dbg !16237
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !16238, metadata !DIExpression()), !dbg !16239
  call void @llvm.dbg.declare(metadata %union.tree_node** %stmt, metadata !16240, metadata !DIExpression()), !dbg !16241
  call void @llvm.dbg.declare(metadata %union.tree_node** %substmt, metadata !16242, metadata !DIExpression()), !dbg !16243
  call void @llvm.dbg.declare(metadata i8* %error_suppress, metadata !16244, metadata !DIExpression()), !dbg !16245
  store i8 0, i8* %error_suppress, align 1, !dbg !16245
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !16246, metadata !DIExpression()), !dbg !16247
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16248
  %call = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %0), !dbg !16249
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call, i32 0, i32 2, !dbg !16250
  %1 = load i32, i32* %location, align 8, !dbg !16250
  store i32 %1, i32* %loc, align 4, !dbg !16251
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16252
  %call1 = call zeroext i8 @c_parser_require(%struct.c_parser* %2, i32 41, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0)), !dbg !16254
  %tobool = icmp ne i8 %call1, 0, !dbg !16254
  br i1 %tobool, label %if.end, label %if.then, !dbg !16255

if.then:                                          ; preds = %entry
  %3 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16256
  %error = getelementptr inbounds %struct.c_parser, %struct.c_parser* %3, i32 0, i32 2, !dbg !16258
  %bf.load = load i8, i8* %error, align 2, !dbg !16259
  %bf.clear = and i8 %bf.load, -2, !dbg !16259
  store i8 %bf.clear, i8* %error, align 2, !dbg !16259
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !16260
  br label %return, !dbg !16260

if.end:                                           ; preds = %entry
  %call2 = call %union.tree_node* @push_stmt_list(), !dbg !16261
  store %union.tree_node* %call2, %union.tree_node** %stmt, align 8, !dbg !16262
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16263
  %call3 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %4), !dbg !16265
  %5 = bitcast %struct.c_token* %call3 to i32*, !dbg !16266
  %bf.load4 = load i32, i32* %5, align 8, !dbg !16266
  %bf.lshr = lshr i32 %bf.load4, 24, !dbg !16266
  %cmp = icmp ne i32 %bf.lshr, 11, !dbg !16267
  br i1 %cmp, label %if.then5, label %if.end24, !dbg !16268

if.then5:                                         ; preds = %if.end
  %call6 = call %union.tree_node* @push_stmt_list(), !dbg !16269
  store %union.tree_node* %call6, %union.tree_node** %substmt, align 8, !dbg !16271
  br label %while.body, !dbg !16272

while.body:                                       ; preds = %if.then5, %if.end20
  %6 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16273
  call void @c_parser_statement(%struct.c_parser* %6), !dbg !16275
  %7 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16276
  %call7 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %7), !dbg !16278
  %8 = bitcast %struct.c_token* %call7 to i32*, !dbg !16279
  %bf.load8 = load i32, i32* %8, align 8, !dbg !16279
  %bf.lshr9 = lshr i32 %bf.load8, 24, !dbg !16279
  %cmp10 = icmp eq i32 %bf.lshr9, 11, !dbg !16280
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !16281

if.then11:                                        ; preds = %while.body
  br label %while.end, !dbg !16282

if.end12:                                         ; preds = %while.body
  %9 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16283
  %call13 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %9, i32 42), !dbg !16285
  %tobool14 = icmp ne i8 %call13, 0, !dbg !16285
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !16286

if.then15:                                        ; preds = %if.end12
  br label %while.end, !dbg !16287

if.end16:                                         ; preds = %if.end12
  %10 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16288
  %call17 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %10, i32 22), !dbg !16290
  %tobool18 = icmp ne i8 %call17, 0, !dbg !16290
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !16291

if.then19:                                        ; preds = %if.end16
  br label %while.end, !dbg !16292

if.end20:                                         ; preds = %if.end16
  br label %while.body, !dbg !16272, !llvm.loop !16293

while.end:                                        ; preds = %if.then19, %if.then15, %if.then11
  %11 = load %union.tree_node*, %union.tree_node** %substmt, align 8, !dbg !16295
  %call21 = call %union.tree_node* @pop_stmt_list(%union.tree_node* %11), !dbg !16296
  store %union.tree_node* %call21, %union.tree_node** %substmt, align 8, !dbg !16297
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !16298
  %13 = load %union.tree_node*, %union.tree_node** %substmt, align 8, !dbg !16298
  %call22 = call %union.tree_node* @build1_stat(i32 158, %union.tree_node* %12, %union.tree_node* %13), !dbg !16298
  store %union.tree_node* %call22, %union.tree_node** %substmt, align 8, !dbg !16299
  %14 = load i32, i32* %loc, align 4, !dbg !16300
  %15 = load %union.tree_node*, %union.tree_node** %substmt, align 8, !dbg !16300
  %exp = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !16300
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !16300
  store i32 %14, i32* %locus, align 8, !dbg !16300
  %16 = load %union.tree_node*, %union.tree_node** %substmt, align 8, !dbg !16301
  %call23 = call %union.tree_node* @add_stmt(%union.tree_node* %16), !dbg !16302
  br label %if.end24, !dbg !16303

if.end24:                                         ; preds = %while.end, %if.end
  br label %while.body25, !dbg !16304

while.body25:                                     ; preds = %if.end24, %if.end44
  %17 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16305
  %call26 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %17, i32 42), !dbg !16308
  %tobool27 = icmp ne i8 %call26, 0, !dbg !16308
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !16309

if.then28:                                        ; preds = %while.body25
  br label %while.end50, !dbg !16310

if.end29:                                         ; preds = %while.body25
  %18 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16311
  %call30 = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %18, i32 22), !dbg !16313
  %tobool31 = icmp ne i8 %call30, 0, !dbg !16313
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !16314

if.then32:                                        ; preds = %if.end29
  br label %while.end50, !dbg !16315

if.end33:                                         ; preds = %if.end29
  %19 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16316
  %call34 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %19), !dbg !16317
  %location35 = getelementptr inbounds %struct.c_token, %struct.c_token* %call34, i32 0, i32 2, !dbg !16318
  %20 = load i32, i32* %location35, align 8, !dbg !16318
  store i32 %20, i32* %loc, align 4, !dbg !16319
  %21 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16320
  %call36 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %21), !dbg !16322
  %22 = bitcast %struct.c_token* %call36 to i32*, !dbg !16323
  %bf.load37 = load i32, i32* %22, align 8, !dbg !16323
  %bf.lshr38 = lshr i32 %bf.load37, 24, !dbg !16323
  %cmp39 = icmp eq i32 %bf.lshr38, 11, !dbg !16324
  br i1 %cmp39, label %if.then40, label %if.else, !dbg !16325

if.then40:                                        ; preds = %if.end33
  %23 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16326
  call void @c_parser_consume_pragma(%struct.c_parser* %23), !dbg !16328
  %24 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16329
  call void @c_parser_skip_to_pragma_eol(%struct.c_parser* %24), !dbg !16330
  store i8 0, i8* %error_suppress, align 1, !dbg !16331
  br label %if.end44, !dbg !16332

if.else:                                          ; preds = %if.end33
  %25 = load i8, i8* %error_suppress, align 1, !dbg !16333
  %tobool41 = icmp ne i8 %25, 0, !dbg !16333
  br i1 %tobool41, label %if.end43, label %if.then42, !dbg !16335

if.then42:                                        ; preds = %if.else
  %26 = load i32, i32* %loc, align 4, !dbg !16336
  call void (i32, i8*, ...) @error_at(i32 %26, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.121, i64 0, i64 0)), !dbg !16338
  store i8 1, i8* %error_suppress, align 1, !dbg !16339
  br label %if.end43, !dbg !16340

if.end43:                                         ; preds = %if.then42, %if.else
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then40
  %27 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16341
  %call45 = call %union.tree_node* @c_parser_omp_structured_block(%struct.c_parser* %27), !dbg !16342
  store %union.tree_node* %call45, %union.tree_node** %substmt, align 8, !dbg !16343
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !16344
  %29 = load %union.tree_node*, %union.tree_node** %substmt, align 8, !dbg !16344
  %call46 = call %union.tree_node* @build1_stat(i32 158, %union.tree_node* %28, %union.tree_node* %29), !dbg !16344
  store %union.tree_node* %call46, %union.tree_node** %substmt, align 8, !dbg !16345
  %30 = load i32, i32* %loc, align 4, !dbg !16346
  %31 = load %union.tree_node*, %union.tree_node** %substmt, align 8, !dbg !16346
  %exp47 = bitcast %union.tree_node* %31 to %struct.tree_exp*, !dbg !16346
  %locus48 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp47, i32 0, i32 1, !dbg !16346
  store i32 %30, i32* %locus48, align 8, !dbg !16346
  %32 = load %union.tree_node*, %union.tree_node** %substmt, align 8, !dbg !16347
  %call49 = call %union.tree_node* @add_stmt(%union.tree_node* %32), !dbg !16348
  br label %while.body25, !dbg !16304, !llvm.loop !16349

while.end50:                                      ; preds = %if.then32, %if.then28
  %33 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16351
  call void @c_parser_skip_until_found(%struct.c_parser* %33, i32 42, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.121, i64 0, i64 0)), !dbg !16352
  %34 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !16353
  %call51 = call %union.tree_node* @pop_stmt_list(%union.tree_node* %34), !dbg !16354
  store %union.tree_node* %call51, %union.tree_node** %substmt, align 8, !dbg !16355
  %call52 = call %union.tree_node* @make_node_stat(i32 156), !dbg !16356
  store %union.tree_node* %call52, %union.tree_node** %stmt, align 8, !dbg !16357
  %35 = load i32, i32* %sections_loc.addr, align 4, !dbg !16358
  %36 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !16358
  %exp53 = bitcast %union.tree_node* %36 to %struct.tree_exp*, !dbg !16358
  %locus54 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp53, i32 0, i32 1, !dbg !16358
  store i32 %35, i32* %locus54, align 8, !dbg !16358
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !16359
  %38 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !16360
  %common = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !16360
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !16360
  store %union.tree_node* %37, %union.tree_node** %type, align 8, !dbg !16361
  %39 = load %union.tree_node*, %union.tree_node** %substmt, align 8, !dbg !16362
  %40 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !16363
  %exp55 = bitcast %union.tree_node* %40 to %struct.tree_exp*, !dbg !16363
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp55, i32 0, i32 3, !dbg !16363
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !16363
  store %union.tree_node* %39, %union.tree_node** %arrayidx, align 8, !dbg !16364
  %41 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !16365
  %call56 = call %union.tree_node* @add_stmt(%union.tree_node* %41), !dbg !16366
  store %union.tree_node* %call56, %union.tree_node** %retval, align 8, !dbg !16367
  br label %return, !dbg !16367

return:                                           ; preds = %while.end50, %if.then
  %42 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !16368
  ret %union.tree_node* %42, !dbg !16368
}

declare dso_local %union.tree_node* @c_begin_omp_task() #2

declare dso_local %union.tree_node* @c_finish_omp_task(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @objc_start_method_definition(%union.tree_node*) #2

declare dso_local void @objc_finish_method_definition(%union.tree_node*) #2

declare dso_local void @shadow_tag(%struct.c_declspecs*) #2

declare dso_local %union.tree_node* @start_decl(%struct.c_declarator*, %struct.c_declspecs*, i8 zeroext, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @c_parser_initializer(%struct.c_expr* noalias sret %agg.result, %struct.c_parser* %parser) #0 !dbg !16369 {
entry:
  %parser.addr = alloca %struct.c_parser*, align 8
  %loc = alloca i32, align 4
  %tmp = alloca %struct.c_expr, align 8
  %tmp9 = alloca %struct.c_expr, align 8
  store %struct.c_parser* %parser, %struct.c_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.c_parser** %parser.addr, metadata !16370, metadata !DIExpression()), !dbg !16371
  %0 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16372
  %call = call zeroext i8 @c_parser_next_token_is(%struct.c_parser* %0, i32 41), !dbg !16374
  %tobool = icmp ne i8 %call, 0, !dbg !16374
  br i1 %tobool, label %if.then, label %if.else, !dbg !16375

if.then:                                          ; preds = %entry
  %1 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16376
  call void @c_parser_braced_init(%struct.c_expr* sret %agg.result, %struct.c_parser* %1, %union.tree_node* null, i8 zeroext 0), !dbg !16377
  br label %return, !dbg !16378

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.c_expr* %agg.result, metadata !16379, metadata !DIExpression()), !dbg !16381
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !16382, metadata !DIExpression()), !dbg !16383
  %2 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16384
  %call1 = call %struct.c_token* @c_parser_peek_token(%struct.c_parser* %2), !dbg !16385
  %location = getelementptr inbounds %struct.c_token, %struct.c_token* %call1, i32 0, i32 2, !dbg !16386
  %3 = load i32, i32* %location, align 8, !dbg !16386
  store i32 %3, i32* %loc, align 4, !dbg !16383
  %4 = load %struct.c_parser*, %struct.c_parser** %parser.addr, align 8, !dbg !16387
  call void @c_parser_expr_no_commas(%struct.c_expr* sret %tmp, %struct.c_parser* %4, %struct.c_expr* null), !dbg !16388
  %5 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !16388
  %6 = bitcast %struct.c_expr* %tmp to i8*, !dbg !16388
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 24, i1 false), !dbg !16388
  %value = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 0, !dbg !16389
  %7 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !16389
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !16389
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !16389
  %bf.load = load i64, i64* %8, align 8, !dbg !16389
  %bf.clear = and i64 %bf.load, 65535, !dbg !16389
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !16389
  %cmp = icmp ne i32 %bf.cast, 28, !dbg !16391
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !16392

land.lhs.true:                                    ; preds = %if.else
  %value2 = getelementptr inbounds %struct.c_expr, %struct.c_expr* %agg.result, i32 0, i32 0, !dbg !16393
  %9 = load %union.tree_node*, %union.tree_node** %value2, align 8, !dbg !16393
  %base3 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !16393
  %10 = bitcast %struct.tree_base* %base3 to i64*, !dbg !16393
  %bf.load4 = load i64, i64* %10, align 8, !dbg !16393
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !16393
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !16393
  %cmp7 = icmp ne i32 %bf.cast6, 119, !dbg !16394
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !16395

if.then8:                                         ; preds = %land.lhs.true
  %11 = load i32, i32* %loc, align 4, !dbg !16396
  call void @default_function_array_conversion(%struct.c_expr* sret %tmp9, i32 %11, %struct.c_expr* byval(%struct.c_expr) align 8 %agg.result), !dbg !16397
  %12 = bitcast %struct.c_expr* %agg.result to i8*, !dbg !16397
  %13 = bitcast %struct.c_expr* %tmp9 to i8*, !dbg !16397
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false), !dbg !16397
  br label %if.end, !dbg !16398

if.end:                                           ; preds = %if.then8, %land.lhs.true, %if.else
  br label %return, !dbg !16399

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !16400
}

declare dso_local void @finish_decl(%union.tree_node*, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @c_push_function_context() #2

declare dso_local i32 @start_function(%struct.c_declspecs*, %struct.c_declarator*, %union.tree_node*) #2

declare dso_local void @c_pop_function_context() #2

declare dso_local void @store_parm_decls() #2

declare dso_local void @finish_function() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!4360, !4361, !4362}
!llvm.ident = !{!4363}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "the_parser", scope: !2, file: !3, line: 197, type: !3401, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !4249, globals: !4345, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "c-parser.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !141, !147, !152, !157, !176, !183, !190, !384, !391, !556, !569, !649, !671, !892, !1068, !1075, !1949, !1954, !2088, !2103, !2111, !2118, !2123, !2132, !2159, !2217, !3439, !3445, !4165, !4172, !4185, !4194, !4231}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !135, line: 30, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140}
!137 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !142, line: 363, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146}
!144 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!147 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !142, line: 355, baseType: !7, size: 32, elements: !148)
!148 = !{!149, !150, !151}
!149 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!150 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!151 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!152 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !153, line: 474, baseType: !7, size: 32, elements: !154)
!153 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!154 = !{!155, !156}
!155 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!156 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!157 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !158, line: 280, baseType: !7, size: 32, elements: !159)
!158 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!159 = !{!160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175}
!160 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !158, line: 1817, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !158, line: 1805, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189}
!185 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!190 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !158, line: 39, baseType: !7, size: 32, elements: !191)
!191 = !{!192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383}
!192 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!193 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!194 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!195 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!196 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!198 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!199 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!200 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!201 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!202 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!203 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!204 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!205 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!206 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!207 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!208 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!209 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!210 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!211 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!212 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!213 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!214 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!215 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!216 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!217 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!218 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!219 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!220 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!221 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!222 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!223 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!224 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!225 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!226 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!227 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!228 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!229 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!230 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!231 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!232 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!233 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!234 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!235 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!236 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!237 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!238 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!239 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!240 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!241 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!242 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!243 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!244 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!245 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!246 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!247 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!248 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!249 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!250 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!251 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!252 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!253 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!254 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!255 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!256 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!257 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!258 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!259 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!260 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!261 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!262 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!263 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!264 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!265 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!266 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!267 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!268 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!269 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!270 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!271 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!272 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!273 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!274 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!275 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!276 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!277 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!278 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!279 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!280 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!281 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!282 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!283 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!284 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!285 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!286 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!287 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!288 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!289 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!290 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!291 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!292 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!293 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!294 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!295 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!296 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!297 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!298 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!299 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!300 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!301 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!302 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!303 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!304 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!305 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!307 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!308 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!309 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!310 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!311 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!312 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!313 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!314 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!315 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!316 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!317 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!318 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!319 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!320 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!321 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!322 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!323 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!324 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!325 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!326 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!327 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!328 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!329 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!330 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!331 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!332 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!333 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!334 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!335 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!336 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!337 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!338 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!339 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!340 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!341 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!342 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!343 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!344 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!356 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!357 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!358 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!359 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!360 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!361 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!377 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!378 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!379 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!380 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!381 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!382 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!383 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "c_language_kind", file: !385, line: 378, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./c-common.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!386 = !{!387, !388, !389, !390}
!387 = !DIEnumerator(name: "clk_c", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "clk_objc", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "clk_cxx", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "clk_objcxx", value: 3, isUnsigned: true)
!391 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rid", file: !385, line: 48, baseType: !7, size: 32, elements: !392)
!392 = !{!393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555}
!393 = !DIEnumerator(name: "RID_STATIC", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "RID_UNSIGNED", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "RID_LONG", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "RID_CONST", value: 3, isUnsigned: true)
!397 = !DIEnumerator(name: "RID_EXTERN", value: 4, isUnsigned: true)
!398 = !DIEnumerator(name: "RID_REGISTER", value: 5, isUnsigned: true)
!399 = !DIEnumerator(name: "RID_TYPEDEF", value: 6, isUnsigned: true)
!400 = !DIEnumerator(name: "RID_SHORT", value: 7, isUnsigned: true)
!401 = !DIEnumerator(name: "RID_INLINE", value: 8, isUnsigned: true)
!402 = !DIEnumerator(name: "RID_VOLATILE", value: 9, isUnsigned: true)
!403 = !DIEnumerator(name: "RID_SIGNED", value: 10, isUnsigned: true)
!404 = !DIEnumerator(name: "RID_AUTO", value: 11, isUnsigned: true)
!405 = !DIEnumerator(name: "RID_RESTRICT", value: 12, isUnsigned: true)
!406 = !DIEnumerator(name: "RID_COMPLEX", value: 13, isUnsigned: true)
!407 = !DIEnumerator(name: "RID_THREAD", value: 14, isUnsigned: true)
!408 = !DIEnumerator(name: "RID_SAT", value: 15, isUnsigned: true)
!409 = !DIEnumerator(name: "RID_FRIEND", value: 16, isUnsigned: true)
!410 = !DIEnumerator(name: "RID_VIRTUAL", value: 17, isUnsigned: true)
!411 = !DIEnumerator(name: "RID_EXPLICIT", value: 18, isUnsigned: true)
!412 = !DIEnumerator(name: "RID_EXPORT", value: 19, isUnsigned: true)
!413 = !DIEnumerator(name: "RID_MUTABLE", value: 20, isUnsigned: true)
!414 = !DIEnumerator(name: "RID_IN", value: 21, isUnsigned: true)
!415 = !DIEnumerator(name: "RID_OUT", value: 22, isUnsigned: true)
!416 = !DIEnumerator(name: "RID_INOUT", value: 23, isUnsigned: true)
!417 = !DIEnumerator(name: "RID_BYCOPY", value: 24, isUnsigned: true)
!418 = !DIEnumerator(name: "RID_BYREF", value: 25, isUnsigned: true)
!419 = !DIEnumerator(name: "RID_ONEWAY", value: 26, isUnsigned: true)
!420 = !DIEnumerator(name: "RID_IMAGINARY", value: 27, isUnsigned: true)
!421 = !DIEnumerator(name: "RID_INT", value: 28, isUnsigned: true)
!422 = !DIEnumerator(name: "RID_CHAR", value: 29, isUnsigned: true)
!423 = !DIEnumerator(name: "RID_FLOAT", value: 30, isUnsigned: true)
!424 = !DIEnumerator(name: "RID_DOUBLE", value: 31, isUnsigned: true)
!425 = !DIEnumerator(name: "RID_VOID", value: 32, isUnsigned: true)
!426 = !DIEnumerator(name: "RID_ENUM", value: 33, isUnsigned: true)
!427 = !DIEnumerator(name: "RID_STRUCT", value: 34, isUnsigned: true)
!428 = !DIEnumerator(name: "RID_UNION", value: 35, isUnsigned: true)
!429 = !DIEnumerator(name: "RID_IF", value: 36, isUnsigned: true)
!430 = !DIEnumerator(name: "RID_ELSE", value: 37, isUnsigned: true)
!431 = !DIEnumerator(name: "RID_WHILE", value: 38, isUnsigned: true)
!432 = !DIEnumerator(name: "RID_DO", value: 39, isUnsigned: true)
!433 = !DIEnumerator(name: "RID_FOR", value: 40, isUnsigned: true)
!434 = !DIEnumerator(name: "RID_SWITCH", value: 41, isUnsigned: true)
!435 = !DIEnumerator(name: "RID_CASE", value: 42, isUnsigned: true)
!436 = !DIEnumerator(name: "RID_DEFAULT", value: 43, isUnsigned: true)
!437 = !DIEnumerator(name: "RID_BREAK", value: 44, isUnsigned: true)
!438 = !DIEnumerator(name: "RID_CONTINUE", value: 45, isUnsigned: true)
!439 = !DIEnumerator(name: "RID_RETURN", value: 46, isUnsigned: true)
!440 = !DIEnumerator(name: "RID_GOTO", value: 47, isUnsigned: true)
!441 = !DIEnumerator(name: "RID_SIZEOF", value: 48, isUnsigned: true)
!442 = !DIEnumerator(name: "RID_ASM", value: 49, isUnsigned: true)
!443 = !DIEnumerator(name: "RID_TYPEOF", value: 50, isUnsigned: true)
!444 = !DIEnumerator(name: "RID_ALIGNOF", value: 51, isUnsigned: true)
!445 = !DIEnumerator(name: "RID_ATTRIBUTE", value: 52, isUnsigned: true)
!446 = !DIEnumerator(name: "RID_VA_ARG", value: 53, isUnsigned: true)
!447 = !DIEnumerator(name: "RID_EXTENSION", value: 54, isUnsigned: true)
!448 = !DIEnumerator(name: "RID_IMAGPART", value: 55, isUnsigned: true)
!449 = !DIEnumerator(name: "RID_REALPART", value: 56, isUnsigned: true)
!450 = !DIEnumerator(name: "RID_LABEL", value: 57, isUnsigned: true)
!451 = !DIEnumerator(name: "RID_CHOOSE_EXPR", value: 58, isUnsigned: true)
!452 = !DIEnumerator(name: "RID_TYPES_COMPATIBLE_P", value: 59, isUnsigned: true)
!453 = !DIEnumerator(name: "RID_DFLOAT32", value: 60, isUnsigned: true)
!454 = !DIEnumerator(name: "RID_DFLOAT64", value: 61, isUnsigned: true)
!455 = !DIEnumerator(name: "RID_DFLOAT128", value: 62, isUnsigned: true)
!456 = !DIEnumerator(name: "RID_FRACT", value: 63, isUnsigned: true)
!457 = !DIEnumerator(name: "RID_ACCUM", value: 64, isUnsigned: true)
!458 = !DIEnumerator(name: "RID_CXX_COMPAT_WARN", value: 65, isUnsigned: true)
!459 = !DIEnumerator(name: "RID_FUNCTION_NAME", value: 66, isUnsigned: true)
!460 = !DIEnumerator(name: "RID_PRETTY_FUNCTION_NAME", value: 67, isUnsigned: true)
!461 = !DIEnumerator(name: "RID_C99_FUNCTION_NAME", value: 68, isUnsigned: true)
!462 = !DIEnumerator(name: "RID_BOOL", value: 69, isUnsigned: true)
!463 = !DIEnumerator(name: "RID_WCHAR", value: 70, isUnsigned: true)
!464 = !DIEnumerator(name: "RID_CLASS", value: 71, isUnsigned: true)
!465 = !DIEnumerator(name: "RID_PUBLIC", value: 72, isUnsigned: true)
!466 = !DIEnumerator(name: "RID_PRIVATE", value: 73, isUnsigned: true)
!467 = !DIEnumerator(name: "RID_PROTECTED", value: 74, isUnsigned: true)
!468 = !DIEnumerator(name: "RID_TEMPLATE", value: 75, isUnsigned: true)
!469 = !DIEnumerator(name: "RID_NULL", value: 76, isUnsigned: true)
!470 = !DIEnumerator(name: "RID_CATCH", value: 77, isUnsigned: true)
!471 = !DIEnumerator(name: "RID_DELETE", value: 78, isUnsigned: true)
!472 = !DIEnumerator(name: "RID_FALSE", value: 79, isUnsigned: true)
!473 = !DIEnumerator(name: "RID_NAMESPACE", value: 80, isUnsigned: true)
!474 = !DIEnumerator(name: "RID_NEW", value: 81, isUnsigned: true)
!475 = !DIEnumerator(name: "RID_OFFSETOF", value: 82, isUnsigned: true)
!476 = !DIEnumerator(name: "RID_OPERATOR", value: 83, isUnsigned: true)
!477 = !DIEnumerator(name: "RID_THIS", value: 84, isUnsigned: true)
!478 = !DIEnumerator(name: "RID_THROW", value: 85, isUnsigned: true)
!479 = !DIEnumerator(name: "RID_TRUE", value: 86, isUnsigned: true)
!480 = !DIEnumerator(name: "RID_TRY", value: 87, isUnsigned: true)
!481 = !DIEnumerator(name: "RID_TYPENAME", value: 88, isUnsigned: true)
!482 = !DIEnumerator(name: "RID_TYPEID", value: 89, isUnsigned: true)
!483 = !DIEnumerator(name: "RID_USING", value: 90, isUnsigned: true)
!484 = !DIEnumerator(name: "RID_CHAR16", value: 91, isUnsigned: true)
!485 = !DIEnumerator(name: "RID_CHAR32", value: 92, isUnsigned: true)
!486 = !DIEnumerator(name: "RID_CONSTCAST", value: 93, isUnsigned: true)
!487 = !DIEnumerator(name: "RID_DYNCAST", value: 94, isUnsigned: true)
!488 = !DIEnumerator(name: "RID_REINTCAST", value: 95, isUnsigned: true)
!489 = !DIEnumerator(name: "RID_STATCAST", value: 96, isUnsigned: true)
!490 = !DIEnumerator(name: "RID_HAS_NOTHROW_ASSIGN", value: 97, isUnsigned: true)
!491 = !DIEnumerator(name: "RID_HAS_NOTHROW_CONSTRUCTOR", value: 98, isUnsigned: true)
!492 = !DIEnumerator(name: "RID_HAS_NOTHROW_COPY", value: 99, isUnsigned: true)
!493 = !DIEnumerator(name: "RID_HAS_TRIVIAL_ASSIGN", value: 100, isUnsigned: true)
!494 = !DIEnumerator(name: "RID_HAS_TRIVIAL_CONSTRUCTOR", value: 101, isUnsigned: true)
!495 = !DIEnumerator(name: "RID_HAS_TRIVIAL_COPY", value: 102, isUnsigned: true)
!496 = !DIEnumerator(name: "RID_HAS_TRIVIAL_DESTRUCTOR", value: 103, isUnsigned: true)
!497 = !DIEnumerator(name: "RID_HAS_VIRTUAL_DESTRUCTOR", value: 104, isUnsigned: true)
!498 = !DIEnumerator(name: "RID_IS_ABSTRACT", value: 105, isUnsigned: true)
!499 = !DIEnumerator(name: "RID_IS_BASE_OF", value: 106, isUnsigned: true)
!500 = !DIEnumerator(name: "RID_IS_CONVERTIBLE_TO", value: 107, isUnsigned: true)
!501 = !DIEnumerator(name: "RID_IS_CLASS", value: 108, isUnsigned: true)
!502 = !DIEnumerator(name: "RID_IS_EMPTY", value: 109, isUnsigned: true)
!503 = !DIEnumerator(name: "RID_IS_ENUM", value: 110, isUnsigned: true)
!504 = !DIEnumerator(name: "RID_IS_POD", value: 111, isUnsigned: true)
!505 = !DIEnumerator(name: "RID_IS_POLYMORPHIC", value: 112, isUnsigned: true)
!506 = !DIEnumerator(name: "RID_IS_STD_LAYOUT", value: 113, isUnsigned: true)
!507 = !DIEnumerator(name: "RID_IS_TRIVIAL", value: 114, isUnsigned: true)
!508 = !DIEnumerator(name: "RID_IS_UNION", value: 115, isUnsigned: true)
!509 = !DIEnumerator(name: "RID_STATIC_ASSERT", value: 116, isUnsigned: true)
!510 = !DIEnumerator(name: "RID_CONSTEXPR", value: 117, isUnsigned: true)
!511 = !DIEnumerator(name: "RID_DECLTYPE", value: 118, isUnsigned: true)
!512 = !DIEnumerator(name: "RID_AT_ENCODE", value: 119, isUnsigned: true)
!513 = !DIEnumerator(name: "RID_AT_END", value: 120, isUnsigned: true)
!514 = !DIEnumerator(name: "RID_AT_CLASS", value: 121, isUnsigned: true)
!515 = !DIEnumerator(name: "RID_AT_ALIAS", value: 122, isUnsigned: true)
!516 = !DIEnumerator(name: "RID_AT_DEFS", value: 123, isUnsigned: true)
!517 = !DIEnumerator(name: "RID_AT_PRIVATE", value: 124, isUnsigned: true)
!518 = !DIEnumerator(name: "RID_AT_PROTECTED", value: 125, isUnsigned: true)
!519 = !DIEnumerator(name: "RID_AT_PUBLIC", value: 126, isUnsigned: true)
!520 = !DIEnumerator(name: "RID_AT_PROTOCOL", value: 127, isUnsigned: true)
!521 = !DIEnumerator(name: "RID_AT_SELECTOR", value: 128, isUnsigned: true)
!522 = !DIEnumerator(name: "RID_AT_THROW", value: 129, isUnsigned: true)
!523 = !DIEnumerator(name: "RID_AT_TRY", value: 130, isUnsigned: true)
!524 = !DIEnumerator(name: "RID_AT_CATCH", value: 131, isUnsigned: true)
!525 = !DIEnumerator(name: "RID_AT_FINALLY", value: 132, isUnsigned: true)
!526 = !DIEnumerator(name: "RID_AT_SYNCHRONIZED", value: 133, isUnsigned: true)
!527 = !DIEnumerator(name: "RID_AT_INTERFACE", value: 134, isUnsigned: true)
!528 = !DIEnumerator(name: "RID_AT_IMPLEMENTATION", value: 135, isUnsigned: true)
!529 = !DIEnumerator(name: "RID_ADDR_SPACE_0", value: 136, isUnsigned: true)
!530 = !DIEnumerator(name: "RID_ADDR_SPACE_1", value: 137, isUnsigned: true)
!531 = !DIEnumerator(name: "RID_ADDR_SPACE_2", value: 138, isUnsigned: true)
!532 = !DIEnumerator(name: "RID_ADDR_SPACE_3", value: 139, isUnsigned: true)
!533 = !DIEnumerator(name: "RID_ADDR_SPACE_4", value: 140, isUnsigned: true)
!534 = !DIEnumerator(name: "RID_ADDR_SPACE_5", value: 141, isUnsigned: true)
!535 = !DIEnumerator(name: "RID_ADDR_SPACE_6", value: 142, isUnsigned: true)
!536 = !DIEnumerator(name: "RID_ADDR_SPACE_7", value: 143, isUnsigned: true)
!537 = !DIEnumerator(name: "RID_ADDR_SPACE_8", value: 144, isUnsigned: true)
!538 = !DIEnumerator(name: "RID_ADDR_SPACE_9", value: 145, isUnsigned: true)
!539 = !DIEnumerator(name: "RID_ADDR_SPACE_10", value: 146, isUnsigned: true)
!540 = !DIEnumerator(name: "RID_ADDR_SPACE_11", value: 147, isUnsigned: true)
!541 = !DIEnumerator(name: "RID_ADDR_SPACE_12", value: 148, isUnsigned: true)
!542 = !DIEnumerator(name: "RID_ADDR_SPACE_13", value: 149, isUnsigned: true)
!543 = !DIEnumerator(name: "RID_ADDR_SPACE_14", value: 150, isUnsigned: true)
!544 = !DIEnumerator(name: "RID_ADDR_SPACE_15", value: 151, isUnsigned: true)
!545 = !DIEnumerator(name: "RID_FIRST_ADDR_SPACE", value: 136, isUnsigned: true)
!546 = !DIEnumerator(name: "RID_LAST_ADDR_SPACE", value: 151, isUnsigned: true)
!547 = !DIEnumerator(name: "RID_MAX", value: 152, isUnsigned: true)
!548 = !DIEnumerator(name: "RID_FIRST_MODIFIER", value: 0, isUnsigned: true)
!549 = !DIEnumerator(name: "RID_LAST_MODIFIER", value: 26, isUnsigned: true)
!550 = !DIEnumerator(name: "RID_FIRST_CXX0X", value: 116, isUnsigned: true)
!551 = !DIEnumerator(name: "RID_LAST_CXX0X", value: 118, isUnsigned: true)
!552 = !DIEnumerator(name: "RID_FIRST_AT", value: 119, isUnsigned: true)
!553 = !DIEnumerator(name: "RID_LAST_AT", value: 135, isUnsigned: true)
!554 = !DIEnumerator(name: "RID_FIRST_PQ", value: 21, isUnsigned: true)
!555 = !DIEnumerator(name: "RID_LAST_PQ", value: 26, isUnsigned: true)
!556 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cpp_builtin_type", file: !557, line: 593, baseType: !7, size: 32, elements: !558)
!557 = !DIFile(filename: "./cpplib.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!558 = !{!559, !560, !561, !562, !563, !564, !565, !566, !567, !568}
!559 = !DIEnumerator(name: "BT_SPECLINE", value: 0, isUnsigned: true)
!560 = !DIEnumerator(name: "BT_DATE", value: 1, isUnsigned: true)
!561 = !DIEnumerator(name: "BT_FILE", value: 2, isUnsigned: true)
!562 = !DIEnumerator(name: "BT_BASE_FILE", value: 3, isUnsigned: true)
!563 = !DIEnumerator(name: "BT_INCLUDE_LEVEL", value: 4, isUnsigned: true)
!564 = !DIEnumerator(name: "BT_TIME", value: 5, isUnsigned: true)
!565 = !DIEnumerator(name: "BT_STDC", value: 6, isUnsigned: true)
!566 = !DIEnumerator(name: "BT_PRAGMA", value: 7, isUnsigned: true)
!567 = !DIEnumerator(name: "BT_TIMESTAMP", value: 8, isUnsigned: true)
!568 = !DIEnumerator(name: "BT_COUNTER", value: 9, isUnsigned: true)
!569 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cpp_ttype", file: !557, line: 143, baseType: !7, size: 32, elements: !570)
!570 = !{!571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648}
!571 = !DIEnumerator(name: "CPP_EQ", value: 0, isUnsigned: true)
!572 = !DIEnumerator(name: "CPP_NOT", value: 1, isUnsigned: true)
!573 = !DIEnumerator(name: "CPP_GREATER", value: 2, isUnsigned: true)
!574 = !DIEnumerator(name: "CPP_LESS", value: 3, isUnsigned: true)
!575 = !DIEnumerator(name: "CPP_PLUS", value: 4, isUnsigned: true)
!576 = !DIEnumerator(name: "CPP_MINUS", value: 5, isUnsigned: true)
!577 = !DIEnumerator(name: "CPP_MULT", value: 6, isUnsigned: true)
!578 = !DIEnumerator(name: "CPP_DIV", value: 7, isUnsigned: true)
!579 = !DIEnumerator(name: "CPP_MOD", value: 8, isUnsigned: true)
!580 = !DIEnumerator(name: "CPP_AND", value: 9, isUnsigned: true)
!581 = !DIEnumerator(name: "CPP_OR", value: 10, isUnsigned: true)
!582 = !DIEnumerator(name: "CPP_XOR", value: 11, isUnsigned: true)
!583 = !DIEnumerator(name: "CPP_RSHIFT", value: 12, isUnsigned: true)
!584 = !DIEnumerator(name: "CPP_LSHIFT", value: 13, isUnsigned: true)
!585 = !DIEnumerator(name: "CPP_COMPL", value: 14, isUnsigned: true)
!586 = !DIEnumerator(name: "CPP_AND_AND", value: 15, isUnsigned: true)
!587 = !DIEnumerator(name: "CPP_OR_OR", value: 16, isUnsigned: true)
!588 = !DIEnumerator(name: "CPP_QUERY", value: 17, isUnsigned: true)
!589 = !DIEnumerator(name: "CPP_COLON", value: 18, isUnsigned: true)
!590 = !DIEnumerator(name: "CPP_COMMA", value: 19, isUnsigned: true)
!591 = !DIEnumerator(name: "CPP_OPEN_PAREN", value: 20, isUnsigned: true)
!592 = !DIEnumerator(name: "CPP_CLOSE_PAREN", value: 21, isUnsigned: true)
!593 = !DIEnumerator(name: "CPP_EOF", value: 22, isUnsigned: true)
!594 = !DIEnumerator(name: "CPP_EQ_EQ", value: 23, isUnsigned: true)
!595 = !DIEnumerator(name: "CPP_NOT_EQ", value: 24, isUnsigned: true)
!596 = !DIEnumerator(name: "CPP_GREATER_EQ", value: 25, isUnsigned: true)
!597 = !DIEnumerator(name: "CPP_LESS_EQ", value: 26, isUnsigned: true)
!598 = !DIEnumerator(name: "CPP_PLUS_EQ", value: 27, isUnsigned: true)
!599 = !DIEnumerator(name: "CPP_MINUS_EQ", value: 28, isUnsigned: true)
!600 = !DIEnumerator(name: "CPP_MULT_EQ", value: 29, isUnsigned: true)
!601 = !DIEnumerator(name: "CPP_DIV_EQ", value: 30, isUnsigned: true)
!602 = !DIEnumerator(name: "CPP_MOD_EQ", value: 31, isUnsigned: true)
!603 = !DIEnumerator(name: "CPP_AND_EQ", value: 32, isUnsigned: true)
!604 = !DIEnumerator(name: "CPP_OR_EQ", value: 33, isUnsigned: true)
!605 = !DIEnumerator(name: "CPP_XOR_EQ", value: 34, isUnsigned: true)
!606 = !DIEnumerator(name: "CPP_RSHIFT_EQ", value: 35, isUnsigned: true)
!607 = !DIEnumerator(name: "CPP_LSHIFT_EQ", value: 36, isUnsigned: true)
!608 = !DIEnumerator(name: "CPP_HASH", value: 37, isUnsigned: true)
!609 = !DIEnumerator(name: "CPP_PASTE", value: 38, isUnsigned: true)
!610 = !DIEnumerator(name: "CPP_OPEN_SQUARE", value: 39, isUnsigned: true)
!611 = !DIEnumerator(name: "CPP_CLOSE_SQUARE", value: 40, isUnsigned: true)
!612 = !DIEnumerator(name: "CPP_OPEN_BRACE", value: 41, isUnsigned: true)
!613 = !DIEnumerator(name: "CPP_CLOSE_BRACE", value: 42, isUnsigned: true)
!614 = !DIEnumerator(name: "CPP_SEMICOLON", value: 43, isUnsigned: true)
!615 = !DIEnumerator(name: "CPP_ELLIPSIS", value: 44, isUnsigned: true)
!616 = !DIEnumerator(name: "CPP_PLUS_PLUS", value: 45, isUnsigned: true)
!617 = !DIEnumerator(name: "CPP_MINUS_MINUS", value: 46, isUnsigned: true)
!618 = !DIEnumerator(name: "CPP_DEREF", value: 47, isUnsigned: true)
!619 = !DIEnumerator(name: "CPP_DOT", value: 48, isUnsigned: true)
!620 = !DIEnumerator(name: "CPP_SCOPE", value: 49, isUnsigned: true)
!621 = !DIEnumerator(name: "CPP_DEREF_STAR", value: 50, isUnsigned: true)
!622 = !DIEnumerator(name: "CPP_DOT_STAR", value: 51, isUnsigned: true)
!623 = !DIEnumerator(name: "CPP_ATSIGN", value: 52, isUnsigned: true)
!624 = !DIEnumerator(name: "CPP_NAME", value: 53, isUnsigned: true)
!625 = !DIEnumerator(name: "CPP_AT_NAME", value: 54, isUnsigned: true)
!626 = !DIEnumerator(name: "CPP_NUMBER", value: 55, isUnsigned: true)
!627 = !DIEnumerator(name: "CPP_CHAR", value: 56, isUnsigned: true)
!628 = !DIEnumerator(name: "CPP_WCHAR", value: 57, isUnsigned: true)
!629 = !DIEnumerator(name: "CPP_CHAR16", value: 58, isUnsigned: true)
!630 = !DIEnumerator(name: "CPP_CHAR32", value: 59, isUnsigned: true)
!631 = !DIEnumerator(name: "CPP_OTHER", value: 60, isUnsigned: true)
!632 = !DIEnumerator(name: "CPP_STRING", value: 61, isUnsigned: true)
!633 = !DIEnumerator(name: "CPP_WSTRING", value: 62, isUnsigned: true)
!634 = !DIEnumerator(name: "CPP_STRING16", value: 63, isUnsigned: true)
!635 = !DIEnumerator(name: "CPP_STRING32", value: 64, isUnsigned: true)
!636 = !DIEnumerator(name: "CPP_UTF8STRING", value: 65, isUnsigned: true)
!637 = !DIEnumerator(name: "CPP_OBJC_STRING", value: 66, isUnsigned: true)
!638 = !DIEnumerator(name: "CPP_HEADER_NAME", value: 67, isUnsigned: true)
!639 = !DIEnumerator(name: "CPP_COMMENT", value: 68, isUnsigned: true)
!640 = !DIEnumerator(name: "CPP_MACRO_ARG", value: 69, isUnsigned: true)
!641 = !DIEnumerator(name: "CPP_PRAGMA", value: 70, isUnsigned: true)
!642 = !DIEnumerator(name: "CPP_PRAGMA_EOL", value: 71, isUnsigned: true)
!643 = !DIEnumerator(name: "CPP_PADDING", value: 72, isUnsigned: true)
!644 = !DIEnumerator(name: "N_TTYPES", value: 73, isUnsigned: true)
!645 = !DIEnumerator(name: "CPP_LAST_EQ", value: 13, isUnsigned: true)
!646 = !DIEnumerator(name: "CPP_FIRST_DIGRAPH", value: 37, isUnsigned: true)
!647 = !DIEnumerator(name: "CPP_LAST_PUNCTUATOR", value: 52, isUnsigned: true)
!648 = !DIEnumerator(name: "CPP_LAST_CPP_OP", value: 26, isUnsigned: true)
!649 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "pragma_kind", file: !650, line: 28, baseType: !7, size: 32, elements: !651)
!650 = !DIFile(filename: "./c-pragma.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!651 = !{!652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670}
!652 = !DIEnumerator(name: "PRAGMA_NONE", value: 0, isUnsigned: true)
!653 = !DIEnumerator(name: "PRAGMA_OMP_ATOMIC", value: 1, isUnsigned: true)
!654 = !DIEnumerator(name: "PRAGMA_OMP_BARRIER", value: 2, isUnsigned: true)
!655 = !DIEnumerator(name: "PRAGMA_OMP_CRITICAL", value: 3, isUnsigned: true)
!656 = !DIEnumerator(name: "PRAGMA_OMP_FLUSH", value: 4, isUnsigned: true)
!657 = !DIEnumerator(name: "PRAGMA_OMP_FOR", value: 5, isUnsigned: true)
!658 = !DIEnumerator(name: "PRAGMA_OMP_MASTER", value: 6, isUnsigned: true)
!659 = !DIEnumerator(name: "PRAGMA_OMP_ORDERED", value: 7, isUnsigned: true)
!660 = !DIEnumerator(name: "PRAGMA_OMP_PARALLEL", value: 8, isUnsigned: true)
!661 = !DIEnumerator(name: "PRAGMA_OMP_PARALLEL_FOR", value: 9, isUnsigned: true)
!662 = !DIEnumerator(name: "PRAGMA_OMP_PARALLEL_SECTIONS", value: 10, isUnsigned: true)
!663 = !DIEnumerator(name: "PRAGMA_OMP_SECTION", value: 11, isUnsigned: true)
!664 = !DIEnumerator(name: "PRAGMA_OMP_SECTIONS", value: 12, isUnsigned: true)
!665 = !DIEnumerator(name: "PRAGMA_OMP_SINGLE", value: 13, isUnsigned: true)
!666 = !DIEnumerator(name: "PRAGMA_OMP_TASK", value: 14, isUnsigned: true)
!667 = !DIEnumerator(name: "PRAGMA_OMP_TASKWAIT", value: 15, isUnsigned: true)
!668 = !DIEnumerator(name: "PRAGMA_OMP_THREADPRIVATE", value: 16, isUnsigned: true)
!669 = !DIEnumerator(name: "PRAGMA_GCC_PCH_PREPROCESS", value: 17, isUnsigned: true)
!670 = !DIEnumerator(name: "PRAGMA_FIRST_EXTERNAL", value: 18, isUnsigned: true)
!671 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gt_types_enum", file: !672, line: 23, baseType: !7, size: 32, elements: !673)
!672 = !DIFile(filename: "./gtype-desc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!673 = !{!674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891}
!674 = !DIEnumerator(name: "gt_ggc_e_15interface_tuple", value: 0, isUnsigned: true)
!675 = !DIEnumerator(name: "gt_ggc_e_16volatilized_type", value: 1, isUnsigned: true)
!676 = !DIEnumerator(name: "gt_ggc_e_17string_descriptor", value: 2, isUnsigned: true)
!677 = !DIEnumerator(name: "gt_ggc_e_15c_inline_static", value: 3, isUnsigned: true)
!678 = !DIEnumerator(name: "gt_ggc_e_24VEC_c_goto_bindings_p_gc", value: 4, isUnsigned: true)
!679 = !DIEnumerator(name: "gt_ggc_e_15c_goto_bindings", value: 5, isUnsigned: true)
!680 = !DIEnumerator(name: "gt_ggc_e_7c_scope", value: 6, isUnsigned: true)
!681 = !DIEnumerator(name: "gt_ggc_e_9c_binding", value: 7, isUnsigned: true)
!682 = !DIEnumerator(name: "gt_ggc_e_12c_label_vars", value: 8, isUnsigned: true)
!683 = !DIEnumerator(name: "gt_ggc_e_8c_parser", value: 9, isUnsigned: true)
!684 = !DIEnumerator(name: "gt_ggc_e_9imp_entry", value: 10, isUnsigned: true)
!685 = !DIEnumerator(name: "gt_ggc_e_16hashed_attribute", value: 11, isUnsigned: true)
!686 = !DIEnumerator(name: "gt_ggc_e_12hashed_entry", value: 12, isUnsigned: true)
!687 = !DIEnumerator(name: "gt_ggc_e_14type_assertion", value: 13, isUnsigned: true)
!688 = !DIEnumerator(name: "gt_ggc_e_18treetreehash_entry", value: 14, isUnsigned: true)
!689 = !DIEnumerator(name: "gt_ggc_e_5CPool", value: 15, isUnsigned: true)
!690 = !DIEnumerator(name: "gt_ggc_e_3JCF", value: 16, isUnsigned: true)
!691 = !DIEnumerator(name: "gt_ggc_e_17module_htab_entry", value: 17, isUnsigned: true)
!692 = !DIEnumerator(name: "gt_ggc_e_13binding_level", value: 18, isUnsigned: true)
!693 = !DIEnumerator(name: "gt_ggc_e_9opt_stack", value: 19, isUnsigned: true)
!694 = !DIEnumerator(name: "gt_ggc_e_11align_stack", value: 20, isUnsigned: true)
!695 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_gc_vec_gc", value: 21, isUnsigned: true)
!696 = !DIEnumerator(name: "gt_ggc_e_19VEC_const_char_p_gc", value: 22, isUnsigned: true)
!697 = !DIEnumerator(name: "gt_ggc_e_21pending_abstract_type", value: 23, isUnsigned: true)
!698 = !DIEnumerator(name: "gt_ggc_e_15VEC_tree_int_gc", value: 24, isUnsigned: true)
!699 = !DIEnumerator(name: "gt_ggc_e_9cp_parser", value: 25, isUnsigned: true)
!700 = !DIEnumerator(name: "gt_ggc_e_17cp_parser_context", value: 26, isUnsigned: true)
!701 = !DIEnumerator(name: "gt_ggc_e_8cp_lexer", value: 27, isUnsigned: true)
!702 = !DIEnumerator(name: "gt_ggc_e_10tree_check", value: 28, isUnsigned: true)
!703 = !DIEnumerator(name: "gt_ggc_e_22VEC_deferred_access_gc", value: 29, isUnsigned: true)
!704 = !DIEnumerator(name: "gt_ggc_e_10spec_entry", value: 30, isUnsigned: true)
!705 = !DIEnumerator(name: "gt_ggc_e_16pending_template", value: 31, isUnsigned: true)
!706 = !DIEnumerator(name: "gt_ggc_e_21named_label_use_entry", value: 32, isUnsigned: true)
!707 = !DIEnumerator(name: "gt_ggc_e_28VEC_deferred_access_check_gc", value: 33, isUnsigned: true)
!708 = !DIEnumerator(name: "gt_ggc_e_18sorted_fields_type", value: 34, isUnsigned: true)
!709 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_pair_s_gc", value: 35, isUnsigned: true)
!710 = !DIEnumerator(name: "gt_ggc_e_17named_label_entry", value: 36, isUnsigned: true)
!711 = !DIEnumerator(name: "gt_ggc_e_32VEC_qualified_typedef_usage_t_gc", value: 37, isUnsigned: true)
!712 = !DIEnumerator(name: "gt_ggc_e_14cp_token_cache", value: 38, isUnsigned: true)
!713 = !DIEnumerator(name: "gt_ggc_e_11saved_scope", value: 39, isUnsigned: true)
!714 = !DIEnumerator(name: "gt_ggc_e_16cxx_int_tree_map", value: 40, isUnsigned: true)
!715 = !DIEnumerator(name: "gt_ggc_e_23VEC_cp_class_binding_gc", value: 41, isUnsigned: true)
!716 = !DIEnumerator(name: "gt_ggc_e_24VEC_cxx_saved_binding_gc", value: 42, isUnsigned: true)
!717 = !DIEnumerator(name: "gt_ggc_e_16cp_binding_level", value: 43, isUnsigned: true)
!718 = !DIEnumerator(name: "gt_ggc_e_11cxx_binding", value: 44, isUnsigned: true)
!719 = !DIEnumerator(name: "gt_ggc_e_15binding_entry_s", value: 45, isUnsigned: true)
!720 = !DIEnumerator(name: "gt_ggc_e_15binding_table_s", value: 46, isUnsigned: true)
!721 = !DIEnumerator(name: "gt_ggc_e_11tinst_level", value: 47, isUnsigned: true)
!722 = !DIEnumerator(name: "gt_ggc_e_14VEC_tinfo_s_gc", value: 48, isUnsigned: true)
!723 = !DIEnumerator(name: "gt_ggc_e_18gnat_binding_level", value: 49, isUnsigned: true)
!724 = !DIEnumerator(name: "gt_ggc_e_9elab_info", value: 50, isUnsigned: true)
!725 = !DIEnumerator(name: "gt_ggc_e_10stmt_group", value: 51, isUnsigned: true)
!726 = !DIEnumerator(name: "gt_ggc_e_16VEC_parm_attr_gc", value: 52, isUnsigned: true)
!727 = !DIEnumerator(name: "gt_ggc_e_11parm_attr_d", value: 53, isUnsigned: true)
!728 = !DIEnumerator(name: "gt_ggc_e_22VEC_ipa_edge_args_t_gc", value: 54, isUnsigned: true)
!729 = !DIEnumerator(name: "gt_ggc_e_20lto_symtab_entry_def", value: 55, isUnsigned: true)
!730 = !DIEnumerator(name: "gt_ggc_e_20ssa_operand_memory_d", value: 56, isUnsigned: true)
!731 = !DIEnumerator(name: "gt_ggc_e_13scev_info_str", value: 57, isUnsigned: true)
!732 = !DIEnumerator(name: "gt_ggc_e_24VEC_mem_addr_template_gc", value: 58, isUnsigned: true)
!733 = !DIEnumerator(name: "gt_ggc_e_13VEC_gimple_gc", value: 59, isUnsigned: true)
!734 = !DIEnumerator(name: "gt_ggc_e_9type_hash", value: 60, isUnsigned: true)
!735 = !DIEnumerator(name: "gt_ggc_e_16string_pool_data", value: 61, isUnsigned: true)
!736 = !DIEnumerator(name: "gt_ggc_e_13libfunc_entry", value: 62, isUnsigned: true)
!737 = !DIEnumerator(name: "gt_ggc_e_23temp_slot_address_entry", value: 63, isUnsigned: true)
!738 = !DIEnumerator(name: "gt_ggc_e_15throw_stmt_node", value: 64, isUnsigned: true)
!739 = !DIEnumerator(name: "gt_ggc_e_21VEC_eh_landing_pad_gc", value: 65, isUnsigned: true)
!740 = !DIEnumerator(name: "gt_ggc_e_16VEC_eh_region_gc", value: 66, isUnsigned: true)
!741 = !DIEnumerator(name: "gt_ggc_e_10eh_catch_d", value: 67, isUnsigned: true)
!742 = !DIEnumerator(name: "gt_ggc_e_16eh_landing_pad_d", value: 68, isUnsigned: true)
!743 = !DIEnumerator(name: "gt_ggc_e_11eh_region_d", value: 69, isUnsigned: true)
!744 = !DIEnumerator(name: "gt_ggc_e_10vcall_insn", value: 70, isUnsigned: true)
!745 = !DIEnumerator(name: "gt_ggc_e_18VEC_vcall_entry_gc", value: 71, isUnsigned: true)
!746 = !DIEnumerator(name: "gt_ggc_e_18VEC_dcall_entry_gc", value: 72, isUnsigned: true)
!747 = !DIEnumerator(name: "gt_ggc_e_16var_loc_list_def", value: 73, isUnsigned: true)
!748 = !DIEnumerator(name: "gt_ggc_e_12var_loc_node", value: 74, isUnsigned: true)
!749 = !DIEnumerator(name: "gt_ggc_e_20VEC_die_arg_entry_gc", value: 75, isUnsigned: true)
!750 = !DIEnumerator(name: "gt_ggc_e_16limbo_die_struct", value: 76, isUnsigned: true)
!751 = !DIEnumerator(name: "gt_ggc_e_20VEC_pubname_entry_gc", value: 77, isUnsigned: true)
!752 = !DIEnumerator(name: "gt_ggc_e_19VEC_dw_attr_node_gc", value: 78, isUnsigned: true)
!753 = !DIEnumerator(name: "gt_ggc_e_18comdat_type_struct", value: 79, isUnsigned: true)
!754 = !DIEnumerator(name: "gt_ggc_e_25dw_ranges_by_label_struct", value: 80, isUnsigned: true)
!755 = !DIEnumerator(name: "gt_ggc_e_16dw_ranges_struct", value: 81, isUnsigned: true)
!756 = !DIEnumerator(name: "gt_ggc_e_28dw_separate_line_info_struct", value: 82, isUnsigned: true)
!757 = !DIEnumerator(name: "gt_ggc_e_19dw_line_info_struct", value: 83, isUnsigned: true)
!758 = !DIEnumerator(name: "gt_ggc_e_25VEC_deferred_locations_gc", value: 84, isUnsigned: true)
!759 = !DIEnumerator(name: "gt_ggc_e_18dw_loc_list_struct", value: 85, isUnsigned: true)
!760 = !DIEnumerator(name: "gt_ggc_e_15dwarf_file_data", value: 86, isUnsigned: true)
!761 = !DIEnumerator(name: "gt_ggc_e_15queued_reg_save", value: 87, isUnsigned: true)
!762 = !DIEnumerator(name: "gt_ggc_e_20indirect_string_node", value: 88, isUnsigned: true)
!763 = !DIEnumerator(name: "gt_ggc_e_19dw_loc_descr_struct", value: 89, isUnsigned: true)
!764 = !DIEnumerator(name: "gt_ggc_e_13dw_fde_struct", value: 90, isUnsigned: true)
!765 = !DIEnumerator(name: "gt_ggc_e_13dw_cfi_struct", value: 91, isUnsigned: true)
!766 = !DIEnumerator(name: "gt_ggc_e_8typeinfo", value: 92, isUnsigned: true)
!767 = !DIEnumerator(name: "gt_ggc_e_22VEC_alias_set_entry_gc", value: 93, isUnsigned: true)
!768 = !DIEnumerator(name: "gt_ggc_e_17alias_set_entry_d", value: 94, isUnsigned: true)
!769 = !DIEnumerator(name: "gt_ggc_e_24constant_descriptor_tree", value: 95, isUnsigned: true)
!770 = !DIEnumerator(name: "gt_ggc_e_15cgraph_asm_node", value: 96, isUnsigned: true)
!771 = !DIEnumerator(name: "gt_ggc_e_12varpool_node", value: 97, isUnsigned: true)
!772 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_set_gc", value: 98, isUnsigned: true)
!773 = !DIEnumerator(name: "gt_ggc_e_19cgraph_node_set_def", value: 99, isUnsigned: true)
!774 = !DIEnumerator(name: "gt_ggc_e_27cgraph_node_set_element_def", value: 100, isUnsigned: true)
!775 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_ptr_gc", value: 101, isUnsigned: true)
!776 = !DIEnumerator(name: "gt_ggc_e_11cgraph_edge", value: 102, isUnsigned: true)
!777 = !DIEnumerator(name: "gt_ggc_e_24VEC_ipa_replace_map_p_gc", value: 103, isUnsigned: true)
!778 = !DIEnumerator(name: "gt_ggc_e_15ipa_replace_map", value: 104, isUnsigned: true)
!779 = !DIEnumerator(name: "gt_ggc_e_11cgraph_node", value: 105, isUnsigned: true)
!780 = !DIEnumerator(name: "gt_ggc_e_18VEC_basic_block_gc", value: 106, isUnsigned: true)
!781 = !DIEnumerator(name: "gt_ggc_e_14gimple_bb_info", value: 107, isUnsigned: true)
!782 = !DIEnumerator(name: "gt_ggc_e_11rtl_bb_info", value: 108, isUnsigned: true)
!783 = !DIEnumerator(name: "gt_ggc_e_11VEC_edge_gc", value: 109, isUnsigned: true)
!784 = !DIEnumerator(name: "gt_ggc_e_17cselib_val_struct", value: 110, isUnsigned: true)
!785 = !DIEnumerator(name: "gt_ggc_e_12elt_loc_list", value: 111, isUnsigned: true)
!786 = !DIEnumerator(name: "gt_ggc_e_13VEC_loop_p_gc", value: 112, isUnsigned: true)
!787 = !DIEnumerator(name: "gt_ggc_e_4loop", value: 113, isUnsigned: true)
!788 = !DIEnumerator(name: "gt_ggc_e_9loop_exit", value: 114, isUnsigned: true)
!789 = !DIEnumerator(name: "gt_ggc_e_13nb_iter_bound", value: 115, isUnsigned: true)
!790 = !DIEnumerator(name: "gt_ggc_e_24types_used_by_vars_entry", value: 116, isUnsigned: true)
!791 = !DIEnumerator(name: "gt_ggc_e_17language_function", value: 117, isUnsigned: true)
!792 = !DIEnumerator(name: "gt_ggc_e_5loops", value: 118, isUnsigned: true)
!793 = !DIEnumerator(name: "gt_ggc_e_18control_flow_graph", value: 119, isUnsigned: true)
!794 = !DIEnumerator(name: "gt_ggc_e_9eh_status", value: 120, isUnsigned: true)
!795 = !DIEnumerator(name: "gt_ggc_e_20initial_value_struct", value: 121, isUnsigned: true)
!796 = !DIEnumerator(name: "gt_ggc_e_17rtx_constant_pool", value: 122, isUnsigned: true)
!797 = !DIEnumerator(name: "gt_ggc_e_18VEC_temp_slot_p_gc", value: 123, isUnsigned: true)
!798 = !DIEnumerator(name: "gt_ggc_e_9temp_slot", value: 124, isUnsigned: true)
!799 = !DIEnumerator(name: "gt_ggc_e_9gimple_df", value: 125, isUnsigned: true)
!800 = !DIEnumerator(name: "gt_ggc_e_23VEC_call_site_record_gc", value: 126, isUnsigned: true)
!801 = !DIEnumerator(name: "gt_ggc_e_18call_site_record_d", value: 127, isUnsigned: true)
!802 = !DIEnumerator(name: "gt_ggc_e_14sequence_stack", value: 128, isUnsigned: true)
!803 = !DIEnumerator(name: "gt_ggc_e_8elt_list", value: 129, isUnsigned: true)
!804 = !DIEnumerator(name: "gt_ggc_e_17tree_priority_map", value: 130, isUnsigned: true)
!805 = !DIEnumerator(name: "gt_ggc_e_12tree_int_map", value: 131, isUnsigned: true)
!806 = !DIEnumerator(name: "gt_ggc_e_8tree_map", value: 132, isUnsigned: true)
!807 = !DIEnumerator(name: "gt_ggc_e_14lang_tree_node", value: 133, isUnsigned: true)
!808 = !DIEnumerator(name: "gt_ggc_e_24tree_statement_list_node", value: 134, isUnsigned: true)
!809 = !DIEnumerator(name: "gt_ggc_e_9var_ann_d", value: 135, isUnsigned: true)
!810 = !DIEnumerator(name: "gt_ggc_e_9lang_decl", value: 136, isUnsigned: true)
!811 = !DIEnumerator(name: "gt_ggc_e_9lang_type", value: 137, isUnsigned: true)
!812 = !DIEnumerator(name: "gt_ggc_e_10die_struct", value: 138, isUnsigned: true)
!813 = !DIEnumerator(name: "gt_ggc_e_15varray_head_tag", value: 139, isUnsigned: true)
!814 = !DIEnumerator(name: "gt_ggc_e_12ptr_info_def", value: 140, isUnsigned: true)
!815 = !DIEnumerator(name: "gt_ggc_e_22VEC_constructor_elt_gc", value: 141, isUnsigned: true)
!816 = !DIEnumerator(name: "gt_ggc_e_17VEC_alias_pair_gc", value: 142, isUnsigned: true)
!817 = !DIEnumerator(name: "gt_ggc_e_11VEC_tree_gc", value: 143, isUnsigned: true)
!818 = !DIEnumerator(name: "gt_ggc_e_12VEC_uchar_gc", value: 144, isUnsigned: true)
!819 = !DIEnumerator(name: "gt_ggc_e_8function", value: 145, isUnsigned: true)
!820 = !DIEnumerator(name: "gt_ggc_e_23constant_descriptor_rtx", value: 146, isUnsigned: true)
!821 = !DIEnumerator(name: "gt_ggc_e_11fixed_value", value: 147, isUnsigned: true)
!822 = !DIEnumerator(name: "gt_ggc_e_10real_value", value: 148, isUnsigned: true)
!823 = !DIEnumerator(name: "gt_ggc_e_10VEC_rtx_gc", value: 149, isUnsigned: true)
!824 = !DIEnumerator(name: "gt_ggc_e_12object_block", value: 150, isUnsigned: true)
!825 = !DIEnumerator(name: "gt_ggc_e_9reg_attrs", value: 151, isUnsigned: true)
!826 = !DIEnumerator(name: "gt_ggc_e_9mem_attrs", value: 152, isUnsigned: true)
!827 = !DIEnumerator(name: "gt_ggc_e_14bitmap_obstack", value: 153, isUnsigned: true)
!828 = !DIEnumerator(name: "gt_ggc_e_18bitmap_element_def", value: 154, isUnsigned: true)
!829 = !DIEnumerator(name: "gt_ggc_e_16machine_function", value: 155, isUnsigned: true)
!830 = !DIEnumerator(name: "gt_ggc_e_17stack_local_entry", value: 156, isUnsigned: true)
!831 = !DIEnumerator(name: "gt_ggc_e_15basic_block_def", value: 157, isUnsigned: true)
!832 = !DIEnumerator(name: "gt_ggc_e_8edge_def", value: 158, isUnsigned: true)
!833 = !DIEnumerator(name: "gt_ggc_e_17gimple_seq_node_d", value: 159, isUnsigned: true)
!834 = !DIEnumerator(name: "gt_ggc_e_12gimple_seq_d", value: 160, isUnsigned: true)
!835 = !DIEnumerator(name: "gt_ggc_e_7section", value: 161, isUnsigned: true)
!836 = !DIEnumerator(name: "gt_ggc_e_18gimple_statement_d", value: 162, isUnsigned: true)
!837 = !DIEnumerator(name: "gt_ggc_e_9rtvec_def", value: 163, isUnsigned: true)
!838 = !DIEnumerator(name: "gt_ggc_e_7rtx_def", value: 164, isUnsigned: true)
!839 = !DIEnumerator(name: "gt_ggc_e_15bitmap_head_def", value: 165, isUnsigned: true)
!840 = !DIEnumerator(name: "gt_ggc_e_9tree_node", value: 166, isUnsigned: true)
!841 = !DIEnumerator(name: "gt_ggc_e_6answer", value: 167, isUnsigned: true)
!842 = !DIEnumerator(name: "gt_ggc_e_9cpp_macro", value: 168, isUnsigned: true)
!843 = !DIEnumerator(name: "gt_ggc_e_9cpp_token", value: 169, isUnsigned: true)
!844 = !DIEnumerator(name: "gt_ggc_e_9line_maps", value: 170, isUnsigned: true)
!845 = !DIEnumerator(name: "gt_e_II17splay_tree_node_s", value: 171, isUnsigned: true)
!846 = !DIEnumerator(name: "gt_e_SP9tree_node17splay_tree_node_s", value: 172, isUnsigned: true)
!847 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node17splay_tree_node_s", value: 173, isUnsigned: true)
!848 = !DIEnumerator(name: "gt_e_IP9tree_node17splay_tree_node_s", value: 174, isUnsigned: true)
!849 = !DIEnumerator(name: "gt_e_P15interface_tuple4htab", value: 175, isUnsigned: true)
!850 = !DIEnumerator(name: "gt_e_P16volatilized_type4htab", value: 176, isUnsigned: true)
!851 = !DIEnumerator(name: "gt_e_P17string_descriptor4htab", value: 177, isUnsigned: true)
!852 = !DIEnumerator(name: "gt_e_P14type_assertion4htab", value: 178, isUnsigned: true)
!853 = !DIEnumerator(name: "gt_e_P18treetreehash_entry4htab", value: 179, isUnsigned: true)
!854 = !DIEnumerator(name: "gt_e_P17module_htab_entry4htab", value: 180, isUnsigned: true)
!855 = !DIEnumerator(name: "gt_e_P21pending_abstract_type4htab", value: 181, isUnsigned: true)
!856 = !DIEnumerator(name: "gt_e_P10spec_entry4htab", value: 182, isUnsigned: true)
!857 = !DIEnumerator(name: "gt_e_P16cxx_int_tree_map4htab", value: 183, isUnsigned: true)
!858 = !DIEnumerator(name: "gt_e_P17named_label_entry4htab", value: 184, isUnsigned: true)
!859 = !DIEnumerator(name: "gt_e_P12tree_int_map4htab", value: 185, isUnsigned: true)
!860 = !DIEnumerator(name: "gt_e_P20lto_symtab_entry_def4htab", value: 186, isUnsigned: true)
!861 = !DIEnumerator(name: "gt_e_IP9tree_node12splay_tree_s", value: 187, isUnsigned: true)
!862 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node12splay_tree_s", value: 188, isUnsigned: true)
!863 = !DIEnumerator(name: "gt_e_P12varpool_node4htab", value: 189, isUnsigned: true)
!864 = !DIEnumerator(name: "gt_e_P13scev_info_str4htab", value: 190, isUnsigned: true)
!865 = !DIEnumerator(name: "gt_e_P23constant_descriptor_rtx4htab", value: 191, isUnsigned: true)
!866 = !DIEnumerator(name: "gt_e_P24constant_descriptor_tree4htab", value: 192, isUnsigned: true)
!867 = !DIEnumerator(name: "gt_e_P12object_block4htab", value: 193, isUnsigned: true)
!868 = !DIEnumerator(name: "gt_e_P7section4htab", value: 194, isUnsigned: true)
!869 = !DIEnumerator(name: "gt_e_P17tree_priority_map4htab", value: 195, isUnsigned: true)
!870 = !DIEnumerator(name: "gt_e_P8tree_map4htab", value: 196, isUnsigned: true)
!871 = !DIEnumerator(name: "gt_e_P9type_hash4htab", value: 197, isUnsigned: true)
!872 = !DIEnumerator(name: "gt_e_P13libfunc_entry4htab", value: 198, isUnsigned: true)
!873 = !DIEnumerator(name: "gt_e_P23temp_slot_address_entry4htab", value: 199, isUnsigned: true)
!874 = !DIEnumerator(name: "gt_e_P15throw_stmt_node4htab", value: 200, isUnsigned: true)
!875 = !DIEnumerator(name: "gt_e_P9reg_attrs4htab", value: 201, isUnsigned: true)
!876 = !DIEnumerator(name: "gt_e_P9mem_attrs4htab", value: 202, isUnsigned: true)
!877 = !DIEnumerator(name: "gt_e_P7rtx_def4htab", value: 203, isUnsigned: true)
!878 = !DIEnumerator(name: "gt_e_SP9tree_node12splay_tree_s", value: 204, isUnsigned: true)
!879 = !DIEnumerator(name: "gt_e_P10vcall_insn4htab", value: 205, isUnsigned: true)
!880 = !DIEnumerator(name: "gt_e_P16var_loc_list_def4htab", value: 206, isUnsigned: true)
!881 = !DIEnumerator(name: "gt_e_P10die_struct4htab", value: 207, isUnsigned: true)
!882 = !DIEnumerator(name: "gt_e_P15dwarf_file_data4htab", value: 208, isUnsigned: true)
!883 = !DIEnumerator(name: "gt_e_P20indirect_string_node4htab", value: 209, isUnsigned: true)
!884 = !DIEnumerator(name: "gt_e_P11cgraph_node4htab", value: 210, isUnsigned: true)
!885 = !DIEnumerator(name: "gt_e_II12splay_tree_s", value: 211, isUnsigned: true)
!886 = !DIEnumerator(name: "gt_e_P27cgraph_node_set_element_def4htab", value: 212, isUnsigned: true)
!887 = !DIEnumerator(name: "gt_e_P11cgraph_edge4htab", value: 213, isUnsigned: true)
!888 = !DIEnumerator(name: "gt_e_P9loop_exit4htab", value: 214, isUnsigned: true)
!889 = !DIEnumerator(name: "gt_e_P24types_used_by_vars_entry4htab", value: 215, isUnsigned: true)
!890 = !DIEnumerator(name: "gt_e_P9tree_node4htab", value: 216, isUnsigned: true)
!891 = !DIEnumerator(name: "gt_types_enum_last", value: 217, isUnsigned: true)
!892 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !893, line: 74, baseType: !7, size: 32, elements: !894)
!893 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!894 = !{!895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067}
!895 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!896 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!897 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!898 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!899 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!900 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!901 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!902 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!903 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!904 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!905 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!906 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!907 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!908 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!909 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!910 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!911 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!912 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!913 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!914 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!915 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!916 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!917 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!918 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!919 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!920 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!921 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!922 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!923 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!924 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!925 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!926 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!927 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!928 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!929 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!930 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!931 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!932 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!933 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!934 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!935 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!936 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!937 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!938 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!939 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!940 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!941 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!942 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!943 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!944 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!945 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!946 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!947 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!948 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!949 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!950 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!951 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!952 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!953 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!954 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!955 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!956 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!957 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!958 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!959 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!960 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!961 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!962 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!963 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!964 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!965 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!966 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!967 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!968 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!969 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!970 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!971 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!972 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!973 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!974 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!975 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!976 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!977 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!978 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!979 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!980 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!981 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!982 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!983 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!984 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!985 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!986 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!987 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!988 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!989 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!990 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!991 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!992 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!993 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!994 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!995 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!996 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!997 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!998 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!999 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!1000 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!1001 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!1002 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!1003 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!1004 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!1005 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!1006 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!1007 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!1008 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!1009 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!1010 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!1011 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!1012 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!1013 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!1014 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!1015 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!1016 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!1017 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!1018 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!1019 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!1020 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!1021 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!1022 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!1023 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!1024 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!1025 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!1026 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!1027 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!1028 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!1029 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!1030 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!1031 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!1032 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!1033 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!1034 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!1035 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!1036 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!1037 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!1038 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!1039 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!1040 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!1041 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!1042 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!1043 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!1044 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!1045 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!1046 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!1047 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!1048 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!1049 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!1050 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!1051 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!1052 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!1053 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!1054 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!1055 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!1056 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!1057 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!1058 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!1059 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!1060 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!1061 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!1062 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!1063 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!1064 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!1065 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!1066 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!1067 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!1068 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "c_id_kind", file: !3, line: 132, baseType: !7, size: 32, elements: !1069)
!1069 = !{!1070, !1071, !1072, !1073, !1074}
!1070 = !DIEnumerator(name: "C_ID_ID", value: 0, isUnsigned: true)
!1071 = !DIEnumerator(name: "C_ID_TYPENAME", value: 1, isUnsigned: true)
!1072 = !DIEnumerator(name: "C_ID_CLASSNAME", value: 2, isUnsigned: true)
!1073 = !DIEnumerator(name: "C_ID_ADDRSPACE", value: 3, isUnsigned: true)
!1074 = !DIEnumerator(name: "C_ID_NONE", value: 4, isUnsigned: true)
!1075 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !1076, line: 723, baseType: !7, size: 32, elements: !1077)
!1076 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1077 = !{!1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948}
!1078 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!1079 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!1080 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!1081 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!1082 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!1083 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!1084 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!1085 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!1086 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!1087 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!1088 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!1089 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!1090 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!1091 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!1092 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!1093 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!1094 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!1095 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!1096 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!1097 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!1098 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!1099 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!1100 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!1101 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!1102 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!1103 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!1104 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!1105 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!1106 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!1107 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!1108 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!1109 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!1110 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!1111 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!1112 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!1113 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!1114 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!1115 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!1116 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!1117 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!1118 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!1119 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!1120 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!1121 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!1122 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!1123 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!1124 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!1125 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!1126 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!1127 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!1128 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!1129 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!1130 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!1131 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!1132 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!1133 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!1134 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!1135 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!1136 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!1137 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!1138 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!1139 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!1140 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!1141 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!1142 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!1143 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!1144 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!1145 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!1146 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!1147 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!1148 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!1149 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!1150 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!1151 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!1152 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!1153 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!1154 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!1155 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!1156 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!1157 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!1158 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!1159 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!1160 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!1161 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!1162 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!1163 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!1164 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!1165 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!1166 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!1167 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!1168 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!1169 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!1170 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!1171 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!1172 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!1173 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!1174 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!1175 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!1176 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!1177 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!1178 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!1179 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!1180 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!1181 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!1182 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!1183 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!1184 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!1185 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!1186 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!1187 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!1188 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!1189 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!1190 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!1191 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!1192 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!1193 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!1194 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!1195 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!1196 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!1197 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!1198 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!1199 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!1200 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!1201 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!1202 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!1203 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!1204 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!1205 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!1206 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!1207 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!1208 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!1209 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!1210 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!1211 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!1212 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!1213 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!1214 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!1215 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!1216 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!1217 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!1218 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!1219 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!1220 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!1221 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!1222 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!1223 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!1224 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!1225 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!1226 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!1227 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!1228 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!1229 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!1230 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!1231 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!1232 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!1233 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!1234 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!1235 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!1236 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!1237 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!1238 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!1239 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!1240 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!1241 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!1242 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!1243 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!1244 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!1245 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!1246 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!1247 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!1248 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!1249 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!1250 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!1251 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!1252 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!1253 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!1254 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!1255 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!1256 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!1257 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!1258 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!1259 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!1260 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!1261 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!1262 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!1263 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!1264 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!1265 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!1266 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!1267 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!1268 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!1269 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!1270 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!1271 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!1272 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!1273 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!1274 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!1275 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!1276 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!1277 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!1278 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!1279 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!1280 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!1281 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!1282 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!1283 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!1284 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!1285 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!1286 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!1287 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!1288 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!1289 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!1290 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!1291 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!1292 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!1293 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!1294 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!1295 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!1296 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!1297 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!1298 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!1299 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!1300 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!1301 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!1302 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!1304 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!1305 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!1306 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!1307 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!1308 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!1309 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!1310 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!1311 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!1312 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!1313 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!1314 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!1315 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!1316 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!1317 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!1318 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!1319 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!1320 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!1321 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!1322 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!1323 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!1324 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!1325 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!1326 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!1327 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!1328 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!1329 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!1330 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!1331 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!1332 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!1333 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!1334 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!1335 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!1336 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!1337 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!1338 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!1339 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!1340 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!1341 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!1342 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!1343 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!1344 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!1345 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!1346 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!1347 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!1348 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!1349 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!1350 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!1351 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!1352 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!1353 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!1354 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!1355 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!1356 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!1357 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!1358 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!1359 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!1360 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!1361 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!1362 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!1363 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!1364 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!1365 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!1366 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!1367 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!1368 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!1369 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!1370 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!1371 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!1372 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!1373 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!1374 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!1375 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!1376 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!1377 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!1378 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!1379 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!1380 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!1381 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!1382 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!1383 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!1384 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!1385 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!1386 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!1387 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!1388 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!1389 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!1390 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!1391 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!1392 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!1393 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!1394 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!1395 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!1396 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!1397 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!1398 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!1399 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!1400 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!1401 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!1402 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!1403 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!1404 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!1405 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!1406 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!1407 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!1408 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!1409 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!1410 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!1411 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!1412 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!1413 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!1414 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!1415 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!1416 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!1417 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!1418 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!1419 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!1420 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!1421 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!1422 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!1423 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!1424 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!1425 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!1426 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!1427 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!1428 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!1429 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!1430 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!1431 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!1432 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!1433 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!1434 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!1435 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!1436 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!1437 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!1438 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!1439 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!1440 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!1441 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!1442 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!1443 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!1444 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!1445 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!1446 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!1447 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!1448 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!1449 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!1450 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!1451 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!1452 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!1453 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!1454 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!1455 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!1456 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!1457 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!1458 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!1459 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!1460 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!1461 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!1462 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!1463 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!1464 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!1465 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!1466 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!1467 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!1468 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!1469 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!1470 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!1471 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!1472 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!1473 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!1474 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!1475 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!1476 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!1477 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!1478 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!1479 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!1480 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!1481 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!1482 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!1483 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!1484 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!1485 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!1486 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!1487 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!1488 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!1489 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!1490 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!1491 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!1492 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!1493 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!1494 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!1495 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!1496 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!1497 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!1498 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!1499 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!1500 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!1501 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!1502 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!1503 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!1504 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!1505 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!1506 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!1507 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!1508 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!1509 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!1510 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!1511 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!1512 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!1513 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!1514 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!1515 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!1516 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!1517 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!1518 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!1519 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!1520 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!1521 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!1522 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!1523 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!1524 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!1525 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!1526 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!1527 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!1528 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!1529 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!1530 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!1531 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!1532 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!1533 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!1534 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!1535 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!1536 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!1537 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!1538 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!1539 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!1540 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!1541 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!1542 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!1543 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!1544 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!1545 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!1546 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!1547 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!1548 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!1549 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!1550 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!1551 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!1552 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!1553 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!1554 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!1555 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!1556 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!1557 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!1558 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!1559 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!1560 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!1561 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!1562 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!1563 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!1564 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!1565 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!1566 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!1567 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!1568 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!1569 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!1570 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!1571 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!1572 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!1573 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!1574 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!1575 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!1576 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!1577 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!1578 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!1579 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!1580 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!1581 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!1582 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!1583 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!1584 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!1585 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!1586 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!1587 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!1588 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!1589 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!1590 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!1591 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!1592 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!1593 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!1594 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!1595 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!1596 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!1597 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!1598 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!1599 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!1600 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!1601 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!1602 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!1603 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!1604 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!1605 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!1606 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!1607 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!1608 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!1609 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!1610 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!1611 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!1612 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!1613 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!1614 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!1615 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!1616 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!1617 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!1618 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!1619 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!1620 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!1621 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!1622 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!1623 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!1624 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!1625 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!1626 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!1627 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!1628 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!1629 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!1630 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!1631 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!1632 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!1633 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!1634 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!1635 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!1636 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!1637 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!1638 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!1639 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!1640 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!1641 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!1642 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!1643 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!1644 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!1645 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!1646 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!1647 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!1648 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!1649 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!1650 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!1651 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!1652 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!1653 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!1654 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!1655 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!1656 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!1657 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!1658 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!1659 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!1660 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!1661 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!1662 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!1663 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!1664 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!1665 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!1666 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!1667 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!1668 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!1669 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!1670 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!1671 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!1672 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!1673 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!1674 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!1675 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!1676 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!1677 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!1678 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!1679 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!1680 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!1681 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!1682 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!1683 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!1684 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!1685 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!1686 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!1687 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!1688 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!1689 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!1690 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!1691 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!1692 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!1693 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!1694 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!1695 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!1696 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!1697 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!1698 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!1699 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!1700 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!1701 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!1702 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!1703 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!1704 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!1705 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!1706 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!1707 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!1708 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!1709 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!1710 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!1711 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!1712 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!1713 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!1714 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!1715 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!1716 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!1717 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!1718 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!1719 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!1720 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!1721 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!1722 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!1723 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!1724 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!1725 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!1726 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!1727 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!1728 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!1729 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!1730 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!1731 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!1732 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!1733 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!1734 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!1735 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!1736 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!1737 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!1738 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!1739 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!1740 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!1741 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!1742 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!1743 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!1744 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!1745 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!1746 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!1747 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!1748 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!1749 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!1750 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!1751 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!1752 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!1753 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!1754 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!1755 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!1756 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!1757 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!1758 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!1759 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!1760 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!1761 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!1762 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!1763 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!1764 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!1765 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!1766 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!1767 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!1768 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!1769 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!1770 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!1771 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!1772 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!1773 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!1774 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!1775 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!1776 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!1777 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!1778 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!1779 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!1780 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!1781 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!1782 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!1783 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!1784 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!1785 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!1786 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!1787 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!1788 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!1789 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!1790 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!1791 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!1792 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!1793 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!1794 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!1795 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!1796 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!1797 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!1798 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!1799 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!1800 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!1801 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!1802 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!1803 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!1804 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!1805 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!1806 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!1807 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!1808 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!1809 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!1810 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!1811 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!1812 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!1813 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!1814 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!1815 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!1816 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!1817 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!1818 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!1819 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!1820 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!1821 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!1822 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!1823 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!1824 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!1825 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!1826 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!1827 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!1828 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!1829 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!1830 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!1831 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!1832 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!1833 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!1834 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!1835 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!1836 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!1837 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!1838 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!1839 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!1840 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!1841 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!1842 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!1843 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!1844 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!1845 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!1846 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!1847 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!1848 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!1849 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!1850 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!1851 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!1852 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!1853 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!1854 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!1855 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!1856 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!1857 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!1858 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!1859 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!1860 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!1861 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!1862 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!1863 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!1864 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!1865 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!1866 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!1867 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!1868 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!1869 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!1870 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!1871 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!1872 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!1873 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!1874 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!1875 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!1876 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!1877 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!1878 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!1879 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!1880 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!1881 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!1882 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!1883 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!1884 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!1885 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!1886 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!1887 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!1888 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!1889 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!1890 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!1891 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!1892 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!1893 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!1894 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!1895 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!1896 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!1897 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!1898 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!1899 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!1900 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!1901 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!1902 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!1903 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!1904 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!1905 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!1906 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!1907 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!1908 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!1909 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!1910 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!1911 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!1912 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!1913 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!1914 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!1915 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!1916 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!1917 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!1918 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!1919 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!1920 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!1921 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!1922 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!1923 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!1924 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!1925 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!1926 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!1927 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!1928 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!1929 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!1930 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!1931 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!1932 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!1933 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!1934 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!1935 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!1936 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!1937 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!1938 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!1939 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!1940 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!1941 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!1942 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!1943 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!1944 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!1945 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!1946 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!1947 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!1948 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!1949 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "pragma_context", file: !3, line: 950, baseType: !7, size: 32, elements: !1950)
!1950 = !{!1951, !1952, !1953}
!1951 = !DIEnumerator(name: "pragma_external", value: 0, isUnsigned: true)
!1952 = !DIEnumerator(name: "pragma_stmt", value: 1, isUnsigned: true)
!1953 = !DIEnumerator(name: "pragma_compound", value: 2, isUnsigned: true)
!1954 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !158, line: 3410, baseType: !7, size: 32, elements: !1955)
!1955 = !{!1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087}
!1956 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1957 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1958 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1959 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1960 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1961 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1962 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1963 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1964 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1965 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1966 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1967 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1968 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1969 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1970 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1971 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1972 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1973 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1974 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1975 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1976 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1977 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1978 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1979 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1980 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1981 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1982 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1983 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1984 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1985 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1986 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1987 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1988 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1989 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1990 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1991 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1992 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1993 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1994 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1995 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1996 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1997 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1998 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1999 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!2000 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!2001 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!2002 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!2003 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!2004 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!2005 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!2006 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!2007 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!2008 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!2009 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!2010 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!2011 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!2012 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!2013 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!2014 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!2015 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!2016 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!2017 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!2018 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!2019 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!2020 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!2021 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!2022 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!2023 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!2024 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!2025 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!2026 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!2027 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!2028 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!2029 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!2030 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!2031 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!2032 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!2033 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!2034 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!2035 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!2036 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!2037 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!2038 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!2039 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!2040 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!2041 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!2042 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!2043 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!2044 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!2045 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!2046 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!2047 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!2048 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!2049 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!2050 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!2051 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!2052 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!2053 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!2054 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!2055 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!2056 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!2057 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!2058 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!2059 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!2060 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!2061 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!2062 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!2063 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!2064 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!2065 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!2066 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!2067 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!2068 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!2069 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!2070 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!2071 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!2072 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!2073 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!2074 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!2075 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!2076 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!2077 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!2078 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!2079 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!2080 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!2081 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!2082 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!2083 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!2084 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!2085 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!2086 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!2087 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!2088 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "c_typespec_keyword", file: !2089, line: 192, baseType: !7, size: 32, elements: !2090)
!2089 = !DIFile(filename: "./c-tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2090 = !{!2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102}
!2091 = !DIEnumerator(name: "cts_none", value: 0, isUnsigned: true)
!2092 = !DIEnumerator(name: "cts_void", value: 1, isUnsigned: true)
!2093 = !DIEnumerator(name: "cts_bool", value: 2, isUnsigned: true)
!2094 = !DIEnumerator(name: "cts_char", value: 3, isUnsigned: true)
!2095 = !DIEnumerator(name: "cts_int", value: 4, isUnsigned: true)
!2096 = !DIEnumerator(name: "cts_float", value: 5, isUnsigned: true)
!2097 = !DIEnumerator(name: "cts_double", value: 6, isUnsigned: true)
!2098 = !DIEnumerator(name: "cts_dfloat32", value: 7, isUnsigned: true)
!2099 = !DIEnumerator(name: "cts_dfloat64", value: 8, isUnsigned: true)
!2100 = !DIEnumerator(name: "cts_dfloat128", value: 9, isUnsigned: true)
!2101 = !DIEnumerator(name: "cts_fract", value: 10, isUnsigned: true)
!2102 = !DIEnumerator(name: "cts_accum", value: 11, isUnsigned: true)
!2103 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "c_storage_class", file: !2089, line: 180, baseType: !7, size: 32, elements: !2104)
!2104 = !{!2105, !2106, !2107, !2108, !2109, !2110}
!2105 = !DIEnumerator(name: "csc_none", value: 0, isUnsigned: true)
!2106 = !DIEnumerator(name: "csc_auto", value: 1, isUnsigned: true)
!2107 = !DIEnumerator(name: "csc_extern", value: 2, isUnsigned: true)
!2108 = !DIEnumerator(name: "csc_register", value: 3, isUnsigned: true)
!2109 = !DIEnumerator(name: "csc_static", value: 4, isUnsigned: true)
!2110 = !DIEnumerator(name: "csc_typedef", value: 5, isUnsigned: true)
!2111 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "c_declarator_kind", file: !2089, line: 285, baseType: !7, size: 32, elements: !2112)
!2112 = !{!2113, !2114, !2115, !2116, !2117}
!2113 = !DIEnumerator(name: "cdk_id", value: 0, isUnsigned: true)
!2114 = !DIEnumerator(name: "cdk_function", value: 1, isUnsigned: true)
!2115 = !DIEnumerator(name: "cdk_array", value: 2, isUnsigned: true)
!2116 = !DIEnumerator(name: "cdk_pointer", value: 3, isUnsigned: true)
!2117 = !DIEnumerator(name: "cdk_attrs", value: 4, isUnsigned: true)
!2118 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "c_dtr_syn", file: !3, line: 867, baseType: !7, size: 32, elements: !2119)
!2119 = !{!2120, !2121, !2122}
!2120 = !DIEnumerator(name: "C_DTR_NORMAL", value: 0, isUnsigned: true)
!2121 = !DIEnumerator(name: "C_DTR_ABSTRACT", value: 1, isUnsigned: true)
!2122 = !DIEnumerator(name: "C_DTR_PARM", value: 2, isUnsigned: true)
!2123 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "c_typespec_kind", file: !2089, line: 137, baseType: !7, size: 32, elements: !2124)
!2124 = !{!2125, !2126, !2127, !2128, !2129, !2130, !2131}
!2125 = !DIEnumerator(name: "ctsk_resword", value: 0, isUnsigned: true)
!2126 = !DIEnumerator(name: "ctsk_tagref", value: 1, isUnsigned: true)
!2127 = !DIEnumerator(name: "ctsk_tagfirstref", value: 2, isUnsigned: true)
!2128 = !DIEnumerator(name: "ctsk_tagdef", value: 3, isUnsigned: true)
!2129 = !DIEnumerator(name: "ctsk_typedef", value: 4, isUnsigned: true)
!2130 = !DIEnumerator(name: "ctsk_objc", value: 5, isUnsigned: true)
!2131 = !DIEnumerator(name: "ctsk_typeof", value: 6, isUnsigned: true)
!2132 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "plugin_event", file: !2133, line: 33, baseType: !7, size: 32, elements: !2134)
!2133 = !DIFile(filename: "./gcc-plugin.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2134 = !{!2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158}
!2135 = !DIEnumerator(name: "PLUGIN_PASS_MANAGER_SETUP", value: 0, isUnsigned: true)
!2136 = !DIEnumerator(name: "PLUGIN_FINISH_TYPE", value: 1, isUnsigned: true)
!2137 = !DIEnumerator(name: "PLUGIN_FINISH_UNIT", value: 2, isUnsigned: true)
!2138 = !DIEnumerator(name: "PLUGIN_PRE_GENERICIZE", value: 3, isUnsigned: true)
!2139 = !DIEnumerator(name: "PLUGIN_FINISH", value: 4, isUnsigned: true)
!2140 = !DIEnumerator(name: "PLUGIN_INFO", value: 5, isUnsigned: true)
!2141 = !DIEnumerator(name: "PLUGIN_GGC_START", value: 6, isUnsigned: true)
!2142 = !DIEnumerator(name: "PLUGIN_GGC_MARKING", value: 7, isUnsigned: true)
!2143 = !DIEnumerator(name: "PLUGIN_GGC_END", value: 8, isUnsigned: true)
!2144 = !DIEnumerator(name: "PLUGIN_REGISTER_GGC_ROOTS", value: 9, isUnsigned: true)
!2145 = !DIEnumerator(name: "PLUGIN_REGISTER_GGC_CACHES", value: 10, isUnsigned: true)
!2146 = !DIEnumerator(name: "PLUGIN_ATTRIBUTES", value: 11, isUnsigned: true)
!2147 = !DIEnumerator(name: "PLUGIN_START_UNIT", value: 12, isUnsigned: true)
!2148 = !DIEnumerator(name: "PLUGIN_PRAGMAS", value: 13, isUnsigned: true)
!2149 = !DIEnumerator(name: "PLUGIN_ALL_PASSES_START", value: 14, isUnsigned: true)
!2150 = !DIEnumerator(name: "PLUGIN_ALL_PASSES_END", value: 15, isUnsigned: true)
!2151 = !DIEnumerator(name: "PLUGIN_ALL_IPA_PASSES_START", value: 16, isUnsigned: true)
!2152 = !DIEnumerator(name: "PLUGIN_ALL_IPA_PASSES_END", value: 17, isUnsigned: true)
!2153 = !DIEnumerator(name: "PLUGIN_OVERRIDE_GATE", value: 18, isUnsigned: true)
!2154 = !DIEnumerator(name: "PLUGIN_PASS_EXECUTION", value: 19, isUnsigned: true)
!2155 = !DIEnumerator(name: "PLUGIN_EARLY_GIMPLE_PASSES_START", value: 20, isUnsigned: true)
!2156 = !DIEnumerator(name: "PLUGIN_EARLY_GIMPLE_PASSES_END", value: 21, isUnsigned: true)
!2157 = !DIEnumerator(name: "PLUGIN_NEW_PASS", value: 22, isUnsigned: true)
!2158 = !DIEnumerator(name: "PLUGIN_EVENT_FIRST_DYNAMIC", value: 23, isUnsigned: true)
!2159 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "c_tree_index", file: !385, line: 180, baseType: !7, size: 32, elements: !2160)
!2160 = !{!2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216}
!2161 = !DIEnumerator(name: "CTI_CHAR16_TYPE", value: 0, isUnsigned: true)
!2162 = !DIEnumerator(name: "CTI_CHAR32_TYPE", value: 1, isUnsigned: true)
!2163 = !DIEnumerator(name: "CTI_WCHAR_TYPE", value: 2, isUnsigned: true)
!2164 = !DIEnumerator(name: "CTI_UNDERLYING_WCHAR_TYPE", value: 3, isUnsigned: true)
!2165 = !DIEnumerator(name: "CTI_WINT_TYPE", value: 4, isUnsigned: true)
!2166 = !DIEnumerator(name: "CTI_SIGNED_SIZE_TYPE", value: 5, isUnsigned: true)
!2167 = !DIEnumerator(name: "CTI_UNSIGNED_PTRDIFF_TYPE", value: 6, isUnsigned: true)
!2168 = !DIEnumerator(name: "CTI_INTMAX_TYPE", value: 7, isUnsigned: true)
!2169 = !DIEnumerator(name: "CTI_UINTMAX_TYPE", value: 8, isUnsigned: true)
!2170 = !DIEnumerator(name: "CTI_WIDEST_INT_LIT_TYPE", value: 9, isUnsigned: true)
!2171 = !DIEnumerator(name: "CTI_WIDEST_UINT_LIT_TYPE", value: 10, isUnsigned: true)
!2172 = !DIEnumerator(name: "CTI_SIG_ATOMIC_TYPE", value: 11, isUnsigned: true)
!2173 = !DIEnumerator(name: "CTI_INT8_TYPE", value: 12, isUnsigned: true)
!2174 = !DIEnumerator(name: "CTI_INT16_TYPE", value: 13, isUnsigned: true)
!2175 = !DIEnumerator(name: "CTI_INT32_TYPE", value: 14, isUnsigned: true)
!2176 = !DIEnumerator(name: "CTI_INT64_TYPE", value: 15, isUnsigned: true)
!2177 = !DIEnumerator(name: "CTI_UINT8_TYPE", value: 16, isUnsigned: true)
!2178 = !DIEnumerator(name: "CTI_UINT16_TYPE", value: 17, isUnsigned: true)
!2179 = !DIEnumerator(name: "CTI_UINT32_TYPE", value: 18, isUnsigned: true)
!2180 = !DIEnumerator(name: "CTI_UINT64_TYPE", value: 19, isUnsigned: true)
!2181 = !DIEnumerator(name: "CTI_INT_LEAST8_TYPE", value: 20, isUnsigned: true)
!2182 = !DIEnumerator(name: "CTI_INT_LEAST16_TYPE", value: 21, isUnsigned: true)
!2183 = !DIEnumerator(name: "CTI_INT_LEAST32_TYPE", value: 22, isUnsigned: true)
!2184 = !DIEnumerator(name: "CTI_INT_LEAST64_TYPE", value: 23, isUnsigned: true)
!2185 = !DIEnumerator(name: "CTI_UINT_LEAST8_TYPE", value: 24, isUnsigned: true)
!2186 = !DIEnumerator(name: "CTI_UINT_LEAST16_TYPE", value: 25, isUnsigned: true)
!2187 = !DIEnumerator(name: "CTI_UINT_LEAST32_TYPE", value: 26, isUnsigned: true)
!2188 = !DIEnumerator(name: "CTI_UINT_LEAST64_TYPE", value: 27, isUnsigned: true)
!2189 = !DIEnumerator(name: "CTI_INT_FAST8_TYPE", value: 28, isUnsigned: true)
!2190 = !DIEnumerator(name: "CTI_INT_FAST16_TYPE", value: 29, isUnsigned: true)
!2191 = !DIEnumerator(name: "CTI_INT_FAST32_TYPE", value: 30, isUnsigned: true)
!2192 = !DIEnumerator(name: "CTI_INT_FAST64_TYPE", value: 31, isUnsigned: true)
!2193 = !DIEnumerator(name: "CTI_UINT_FAST8_TYPE", value: 32, isUnsigned: true)
!2194 = !DIEnumerator(name: "CTI_UINT_FAST16_TYPE", value: 33, isUnsigned: true)
!2195 = !DIEnumerator(name: "CTI_UINT_FAST32_TYPE", value: 34, isUnsigned: true)
!2196 = !DIEnumerator(name: "CTI_UINT_FAST64_TYPE", value: 35, isUnsigned: true)
!2197 = !DIEnumerator(name: "CTI_INTPTR_TYPE", value: 36, isUnsigned: true)
!2198 = !DIEnumerator(name: "CTI_UINTPTR_TYPE", value: 37, isUnsigned: true)
!2199 = !DIEnumerator(name: "CTI_CHAR_ARRAY_TYPE", value: 38, isUnsigned: true)
!2200 = !DIEnumerator(name: "CTI_CHAR16_ARRAY_TYPE", value: 39, isUnsigned: true)
!2201 = !DIEnumerator(name: "CTI_CHAR32_ARRAY_TYPE", value: 40, isUnsigned: true)
!2202 = !DIEnumerator(name: "CTI_WCHAR_ARRAY_TYPE", value: 41, isUnsigned: true)
!2203 = !DIEnumerator(name: "CTI_INT_ARRAY_TYPE", value: 42, isUnsigned: true)
!2204 = !DIEnumerator(name: "CTI_STRING_TYPE", value: 43, isUnsigned: true)
!2205 = !DIEnumerator(name: "CTI_CONST_STRING_TYPE", value: 44, isUnsigned: true)
!2206 = !DIEnumerator(name: "CTI_TRUTHVALUE_TYPE", value: 45, isUnsigned: true)
!2207 = !DIEnumerator(name: "CTI_TRUTHVALUE_TRUE", value: 46, isUnsigned: true)
!2208 = !DIEnumerator(name: "CTI_TRUTHVALUE_FALSE", value: 47, isUnsigned: true)
!2209 = !DIEnumerator(name: "CTI_DEFAULT_FUNCTION_TYPE", value: 48, isUnsigned: true)
!2210 = !DIEnumerator(name: "CTI_FUNCTION_NAME_DECL", value: 49, isUnsigned: true)
!2211 = !DIEnumerator(name: "CTI_PRETTY_FUNCTION_NAME_DECL", value: 50, isUnsigned: true)
!2212 = !DIEnumerator(name: "CTI_C99_FUNCTION_NAME_DECL", value: 51, isUnsigned: true)
!2213 = !DIEnumerator(name: "CTI_SAVED_FUNCTION_NAME_DECLS", value: 52, isUnsigned: true)
!2214 = !DIEnumerator(name: "CTI_VOID_ZERO", value: 53, isUnsigned: true)
!2215 = !DIEnumerator(name: "CTI_NULL", value: 54, isUnsigned: true)
!2216 = !DIEnumerator(name: "CTI_MAX", value: 55, isUnsigned: true)
!2217 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "prec", scope: !2218, file: !3, line: 4803, baseType: !7, size: 32, elements: !3426)
!2218 = distinct !DISubprogram(name: "c_parser_binary_expression", scope: !3, file: !3, line: 4778, type: !2219, scopeLine: 4779, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!2219 = !DISubroutineType(types: !2220)
!2220 = !{!2221, !3401, !3424}
!2221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "c_expr", file: !2089, line: 116, size: 192, elements: !2222)
!2222 = !{!2223, !3399, !3400}
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2221, file: !2089, line: 119, baseType: !2224, size: 64)
!2224 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !2225, line: 56, baseType: !2226)
!2225 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2227, size: 64)
!2227 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !158, line: 3371, size: 1792, elements: !2228)
!2228 = !{!2229, !2262, !2268, !2281, !2300, !2311, !2316, !2327, !2333, !2347, !2359, !2397, !2682, !2710, !2718, !2719, !2724, !2733, !2739, !2744, !2748, !2752, !3038, !3085, !3091, !3097, !3104, !3130, !3144, !3161, !3173, !3195, !3210, !3381}
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2227, file: !158, line: 3372, baseType: !2230, size: 64)
!2230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !158, line: 360, size: 64, elements: !2231)
!2231 = !{!2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261}
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2230, file: !158, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !2230, file: !158, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !2230, file: !158, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !2230, file: !158, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !2230, file: !158, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !2230, file: !158, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !2230, file: !158, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !2230, file: !158, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !2230, file: !158, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !2230, file: !158, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !2230, file: !158, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !2230, file: !158, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !2230, file: !158, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !2230, file: !158, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !2230, file: !158, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !2230, file: !158, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !2230, file: !158, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !2230, file: !158, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2230, file: !158, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2230, file: !158, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2230, file: !158, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2230, file: !158, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2230, file: !158, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2230, file: !158, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2230, file: !158, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2230, file: !158, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !2230, file: !158, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !2230, file: !158, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !2230, file: !158, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !2230, file: !158, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2227, file: !158, line: 3373, baseType: !2263, size: 192)
!2263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !158, line: 402, size: 192, elements: !2264)
!2264 = !{!2265, !2266, !2267}
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2263, file: !158, line: 403, baseType: !2230, size: 64)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !2263, file: !158, line: 404, baseType: !2224, size: 64, offset: 64)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2263, file: !158, line: 405, baseType: !2224, size: 64, offset: 128)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2227, file: !158, line: 3374, baseType: !2269, size: 320)
!2269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !158, line: 1384, size: 320, elements: !2270)
!2270 = !{!2271, !2272}
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2269, file: !158, line: 1385, baseType: !2263, size: 192)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2269, file: !158, line: 1386, baseType: !2273, size: 128, offset: 192)
!2273 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !2274, line: 58, baseType: !2275)
!2274 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2275 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2274, line: 54, size: 128, elements: !2276)
!2276 = !{!2277, !2279}
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !2275, file: !2274, line: 56, baseType: !2278, size: 64)
!2278 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !2275, file: !2274, line: 57, baseType: !2280, size: 64, offset: 64)
!2280 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !2227, file: !158, line: 3375, baseType: !2282, size: 256)
!2282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !158, line: 1397, size: 256, elements: !2283)
!2283 = !{!2284, !2285}
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2282, file: !158, line: 1398, baseType: !2263, size: 192)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !2282, file: !158, line: 1399, baseType: !2286, size: 64, offset: 192)
!2286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2287, size: 64)
!2287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !2288, line: 52, size: 256, elements: !2289)
!2288 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2289 = !{!2290, !2291, !2292, !2293, !2294, !2295, !2296}
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !2287, file: !2288, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !2287, file: !2288, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !2287, file: !2288, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !2287, file: !2288, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2287, file: !2288, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !2287, file: !2288, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !2287, file: !2288, line: 62, baseType: !2297, size: 192, offset: 64)
!2297 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2278, size: 192, elements: !2298)
!2298 = !{!2299}
!2299 = !DISubrange(count: 3)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !2227, file: !158, line: 3376, baseType: !2301, size: 256)
!2301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !158, line: 1408, size: 256, elements: !2302)
!2302 = !{!2303, !2304}
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2301, file: !158, line: 1409, baseType: !2263, size: 192)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !2301, file: !158, line: 1410, baseType: !2305, size: 64, offset: 192)
!2305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2306, size: 64)
!2306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !2307, line: 27, size: 192, elements: !2308)
!2307 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2308 = !{!2309, !2310}
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2306, file: !2307, line: 29, baseType: !2273, size: 128)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2306, file: !2307, line: 30, baseType: !5, size: 32, offset: 128)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !2227, file: !158, line: 3377, baseType: !2312, size: 256)
!2312 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !158, line: 1437, size: 256, elements: !2313)
!2313 = !{!2314, !2315}
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2312, file: !158, line: 1438, baseType: !2263, size: 192)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2312, file: !158, line: 1439, baseType: !2224, size: 64, offset: 192)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2227, file: !158, line: 3378, baseType: !2317, size: 256)
!2317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !158, line: 1418, size: 256, elements: !2318)
!2318 = !{!2319, !2320, !2322}
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2317, file: !158, line: 1419, baseType: !2263, size: 192)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2317, file: !158, line: 1420, baseType: !2321, size: 32, offset: 192)
!2321 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2317, file: !158, line: 1421, baseType: !2323, size: 8, offset: 224)
!2323 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2324, size: 8, elements: !2325)
!2324 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2325 = !{!2326}
!2326 = !DISubrange(count: 1)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !2227, file: !158, line: 3379, baseType: !2328, size: 320)
!2328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !158, line: 1428, size: 320, elements: !2329)
!2329 = !{!2330, !2331, !2332}
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2328, file: !158, line: 1429, baseType: !2263, size: 192)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !2328, file: !158, line: 1430, baseType: !2224, size: 64, offset: 192)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !2328, file: !158, line: 1431, baseType: !2224, size: 64, offset: 256)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !2227, file: !158, line: 3380, baseType: !2334, size: 320)
!2334 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !158, line: 1460, size: 320, elements: !2335)
!2335 = !{!2336, !2337}
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2334, file: !158, line: 1461, baseType: !2263, size: 192)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2334, file: !158, line: 1462, baseType: !2338, size: 128, offset: 192)
!2338 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !2339, line: 31, size: 128, elements: !2340)
!2339 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2340 = !{!2341, !2345, !2346}
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2338, file: !2339, line: 32, baseType: !2342, size: 64)
!2342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2343, size: 64)
!2343 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2344)
!2344 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2338, file: !2339, line: 33, baseType: !7, size: 32, offset: 64)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !2338, file: !2339, line: 34, baseType: !7, size: 32, offset: 96)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !2227, file: !158, line: 3381, baseType: !2348, size: 384)
!2348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !158, line: 2507, size: 384, elements: !2349)
!2349 = !{!2350, !2351, !2356, !2357, !2358}
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2348, file: !158, line: 2508, baseType: !2263, size: 192)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2348, file: !158, line: 2509, baseType: !2352, size: 32, offset: 192)
!2352 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !2353, line: 58, baseType: !2354)
!2353 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2354 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !2355, line: 44, baseType: !7)
!2355 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2348, file: !158, line: 2510, baseType: !7, size: 32, offset: 224)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2348, file: !158, line: 2511, baseType: !2224, size: 64, offset: 256)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2348, file: !158, line: 2512, baseType: !2224, size: 64, offset: 320)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !2227, file: !158, line: 3382, baseType: !2360, size: 896)
!2360 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !158, line: 2652, size: 896, elements: !2361)
!2361 = !{!2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394}
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2360, file: !158, line: 2653, baseType: !2348, size: 384)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2360, file: !158, line: 2654, baseType: !2224, size: 64, offset: 384)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2360, file: !158, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !2360, file: !158, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !2360, file: !158, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !2360, file: !158, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2360, file: !158, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !2360, file: !158, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !2360, file: !158, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !2360, file: !158, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2360, file: !158, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2360, file: !158, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2360, file: !158, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2360, file: !158, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2360, file: !158, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2360, file: !158, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2360, file: !158, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !2360, file: !158, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !2360, file: !158, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !2360, file: !158, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !2360, file: !158, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !2360, file: !158, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !2360, file: !158, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !2360, file: !158, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !2360, file: !158, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !2360, file: !158, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !2360, file: !158, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2360, file: !158, line: 2703, baseType: !7, size: 32, offset: 512)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2360, file: !158, line: 2705, baseType: !2224, size: 64, offset: 576)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2360, file: !158, line: 2706, baseType: !2224, size: 64, offset: 640)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2360, file: !158, line: 2707, baseType: !2224, size: 64, offset: 704)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2360, file: !158, line: 2708, baseType: !2224, size: 64, offset: 768)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2360, file: !158, line: 2711, baseType: !2395, size: 64, offset: 832)
!2395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2396, size: 64)
!2396 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !158, line: 2711, flags: DIFlagFwdDecl)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !2227, file: !158, line: 3383, baseType: !2398, size: 960)
!2398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !158, line: 2756, size: 960, elements: !2399)
!2399 = !{!2400, !2401}
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2398, file: !158, line: 2757, baseType: !2360, size: 896)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2398, file: !158, line: 2758, baseType: !2402, size: 64, offset: 896)
!2402 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !2225, line: 50, baseType: !2403)
!2403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2404, size: 64)
!2404 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !2405, line: 240, size: 384, elements: !2406)
!2405 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2406 = !{!2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417}
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2404, file: !2405, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2404, file: !2405, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !2404, file: !2405, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2404, file: !2405, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !2404, file: !2405, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !2404, file: !2405, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !2404, file: !2405, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2404, file: !2405, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !2404, file: !2405, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !2404, file: !2405, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2404, file: !2405, line: 321, baseType: !2418, size: 320, offset: 64)
!2418 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !2405, line: 315, size: 320, elements: !2419)
!2419 = !{!2420, !2615, !2617, !2680, !2681}
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2418, file: !2405, line: 316, baseType: !2421, size: 64)
!2421 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2422, size: 64, elements: !2325)
!2422 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !2405, line: 183, baseType: !2423)
!2423 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !2405, line: 166, size: 64, elements: !2424)
!2424 = !{!2425, !2426, !2427, !2430, !2431, !2439, !2440, !2452, !2455, !2517, !2518, !2592, !2605, !2612}
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !2423, file: !2405, line: 168, baseType: !2321, size: 32)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !2423, file: !2405, line: 169, baseType: !7, size: 32)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !2423, file: !2405, line: 170, baseType: !2428, size: 64)
!2428 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2429, size: 64)
!2429 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2324)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !2423, file: !2405, line: 171, baseType: !2402, size: 64)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !2423, file: !2405, line: 172, baseType: !2432, size: 64)
!2432 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !2225, line: 53, baseType: !2433)
!2433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2434, size: 64)
!2434 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !2405, line: 359, size: 128, elements: !2435)
!2435 = !{!2436, !2437}
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !2434, file: !2405, line: 360, baseType: !2321, size: 32)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !2434, file: !2405, line: 361, baseType: !2438, size: 64, offset: 64)
!2438 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2402, size: 64, elements: !2325)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !2423, file: !2405, line: 173, baseType: !5, size: 32)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !2423, file: !2405, line: 174, baseType: !2441, size: 32)
!2441 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !2405, line: 133, baseType: !2442)
!2442 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2405, line: 115, size: 32, elements: !2443)
!2443 = !{!2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451}
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !2442, file: !2405, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !2442, file: !2405, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !2442, file: !2405, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !2442, file: !2405, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !2442, file: !2405, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !2442, file: !2405, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !2442, file: !2405, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !2442, file: !2405, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !2423, file: !2405, line: 175, baseType: !2453, size: 64)
!2453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2454, size: 64)
!2454 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !2405, line: 175, flags: DIFlagFwdDecl)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !2423, file: !2405, line: 176, baseType: !2456, size: 64)
!2456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2457, size: 64)
!2457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2458, line: 75, size: 256, elements: !2459)
!2458 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2459 = !{!2460, !2474, !2475, !2476}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2457, file: !2458, line: 76, baseType: !2461, size: 64)
!2461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2462, size: 64)
!2462 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2458, line: 68, baseType: !2463)
!2463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2458, line: 63, size: 320, elements: !2464)
!2464 = !{!2465, !2467, !2468, !2469}
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2463, file: !2458, line: 64, baseType: !2466, size: 64)
!2466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2463, size: 64)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2463, file: !2458, line: 65, baseType: !2466, size: 64, offset: 64)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2463, file: !2458, line: 66, baseType: !7, size: 32, offset: 128)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2463, file: !2458, line: 67, baseType: !2470, size: 128, offset: 192)
!2470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2471, size: 128, elements: !2472)
!2471 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2458, line: 29, baseType: !2278)
!2472 = !{!2473}
!2473 = !DISubrange(count: 2)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2457, file: !2458, line: 77, baseType: !2461, size: 64, offset: 64)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2457, file: !2458, line: 78, baseType: !7, size: 32, offset: 128)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2457, file: !2458, line: 79, baseType: !2477, size: 64, offset: 192)
!2477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2478, size: 64)
!2478 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2458, line: 49, baseType: !2479)
!2479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2458, line: 45, size: 832, elements: !2480)
!2480 = !{!2481, !2482, !2483}
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2479, file: !2458, line: 46, baseType: !2466, size: 64)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2479, file: !2458, line: 47, baseType: !2456, size: 64, offset: 64)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2479, file: !2458, line: 48, baseType: !2484, size: 704, offset: 128)
!2484 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2485, line: 164, size: 704, elements: !2486)
!2485 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2486 = !{!2487, !2488, !2499, !2500, !2501, !2502, !2503, !2504, !2509, !2513, !2514, !2515, !2516}
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2484, file: !2485, line: 166, baseType: !2280, size: 64)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2484, file: !2485, line: 167, baseType: !2489, size: 64, offset: 64)
!2489 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2490, size: 64)
!2490 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2485, line: 157, size: 192, elements: !2491)
!2491 = !{!2492, !2494, !2495}
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2490, file: !2485, line: 159, baseType: !2493, size: 64)
!2493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2324, size: 64)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2490, file: !2485, line: 160, baseType: !2489, size: 64, offset: 64)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2490, file: !2485, line: 161, baseType: !2496, size: 32, offset: 128)
!2496 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2324, size: 32, elements: !2497)
!2497 = !{!2498}
!2498 = !DISubrange(count: 4)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2484, file: !2485, line: 168, baseType: !2493, size: 64, offset: 128)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2484, file: !2485, line: 169, baseType: !2493, size: 64, offset: 192)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2484, file: !2485, line: 170, baseType: !2493, size: 64, offset: 256)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2484, file: !2485, line: 171, baseType: !2280, size: 64, offset: 320)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2484, file: !2485, line: 172, baseType: !2321, size: 32, offset: 384)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2484, file: !2485, line: 176, baseType: !2505, size: 64, offset: 448)
!2505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2506, size: 64)
!2506 = !DISubroutineType(types: !2507)
!2507 = !{!2489, !2508, !2280}
!2508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2484, file: !2485, line: 177, baseType: !2510, size: 64, offset: 512)
!2510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2511, size: 64)
!2511 = !DISubroutineType(types: !2512)
!2512 = !{null, !2508, !2489}
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2484, file: !2485, line: 178, baseType: !2508, size: 64, offset: 576)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2484, file: !2485, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2484, file: !2485, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2484, file: !2485, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !2423, file: !2405, line: 177, baseType: !2224, size: 64)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !2423, file: !2405, line: 178, baseType: !2519, size: 64)
!2519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2520, size: 64)
!2520 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !142, line: 217, size: 832, elements: !2521)
!2521 = !{!2522, !2557, !2558, !2559, !2562, !2566, !2567, !2568, !2586, !2587, !2588, !2589, !2590, !2591}
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2520, file: !142, line: 219, baseType: !2523, size: 64)
!2523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2524, size: 64)
!2524 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !142, line: 151, baseType: !2525)
!2525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !142, line: 151, size: 128, elements: !2526)
!2526 = !{!2527}
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2525, file: !142, line: 151, baseType: !2528, size: 128)
!2528 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !142, line: 150, baseType: !2529)
!2529 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !142, line: 150, size: 128, elements: !2530)
!2530 = !{!2531, !2532, !2533}
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2529, file: !142, line: 150, baseType: !7, size: 32)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2529, file: !142, line: 150, baseType: !7, size: 32, offset: 32)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2529, file: !142, line: 150, baseType: !2534, size: 64, offset: 64)
!2534 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2535, size: 64, elements: !2325)
!2535 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !2225, line: 108, baseType: !2536)
!2536 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2537, size: 64)
!2537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !142, line: 122, size: 512, elements: !2538)
!2538 = !{!2539, !2540, !2541, !2549, !2550, !2551, !2552, !2553, !2554, !2555}
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2537, file: !142, line: 124, baseType: !2519, size: 64)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2537, file: !142, line: 125, baseType: !2519, size: 64, offset: 64)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2537, file: !142, line: 131, baseType: !2542, size: 64, offset: 128)
!2542 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !142, line: 128, size: 64, elements: !2543)
!2543 = !{!2544, !2548}
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2542, file: !142, line: 129, baseType: !2545, size: 64)
!2545 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !2225, line: 66, baseType: !2546)
!2546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2547, size: 64)
!2547 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !2225, line: 65, flags: DIFlagFwdDecl)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2542, file: !142, line: 130, baseType: !2402, size: 64)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2537, file: !142, line: 134, baseType: !2508, size: 64, offset: 192)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2537, file: !142, line: 137, baseType: !2224, size: 64, offset: 256)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2537, file: !142, line: 138, baseType: !2352, size: 32, offset: 320)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2537, file: !142, line: 142, baseType: !7, size: 32, offset: 352)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2537, file: !142, line: 144, baseType: !2321, size: 32, offset: 384)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2537, file: !142, line: 145, baseType: !2321, size: 32, offset: 416)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2537, file: !142, line: 146, baseType: !2556, size: 64, offset: 448)
!2556 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !142, line: 119, baseType: !2280)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2520, file: !142, line: 220, baseType: !2523, size: 64, offset: 64)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2520, file: !142, line: 223, baseType: !2508, size: 64, offset: 128)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2520, file: !142, line: 226, baseType: !2560, size: 64, offset: 192)
!2560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2561, size: 64)
!2561 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !142, line: 185, flags: DIFlagFwdDecl)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2520, file: !142, line: 229, baseType: !2563, size: 128, offset: 256)
!2563 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2564, size: 128, elements: !2472)
!2564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2565, size: 64)
!2565 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !142, line: 229, flags: DIFlagFwdDecl)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2520, file: !142, line: 232, baseType: !2519, size: 64, offset: 384)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2520, file: !142, line: 233, baseType: !2519, size: 64, offset: 448)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2520, file: !142, line: 238, baseType: !2569, size: 64, offset: 512)
!2569 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !142, line: 235, size: 64, elements: !2570)
!2570 = !{!2571, !2577}
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2569, file: !142, line: 236, baseType: !2572, size: 64)
!2572 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2573, size: 64)
!2573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !142, line: 273, size: 128, elements: !2574)
!2574 = !{!2575, !2576}
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2573, file: !142, line: 275, baseType: !2545, size: 64)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2573, file: !142, line: 278, baseType: !2545, size: 64, offset: 64)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2569, file: !142, line: 237, baseType: !2578, size: 64)
!2578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2579, size: 64)
!2579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !142, line: 259, size: 320, elements: !2580)
!2580 = !{!2581, !2582, !2583, !2584, !2585}
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2579, file: !142, line: 261, baseType: !2402, size: 64)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2579, file: !142, line: 262, baseType: !2402, size: 64, offset: 64)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2579, file: !142, line: 266, baseType: !2402, size: 64, offset: 128)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2579, file: !142, line: 267, baseType: !2402, size: 64, offset: 192)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2579, file: !142, line: 270, baseType: !2321, size: 32, offset: 256)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2520, file: !142, line: 241, baseType: !2556, size: 64, offset: 576)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2520, file: !142, line: 244, baseType: !2321, size: 32, offset: 640)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2520, file: !142, line: 247, baseType: !2321, size: 32, offset: 672)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2520, file: !142, line: 250, baseType: !2321, size: 32, offset: 704)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2520, file: !142, line: 253, baseType: !2321, size: 32, offset: 736)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2520, file: !142, line: 256, baseType: !2321, size: 32, offset: 768)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !2423, file: !2405, line: 179, baseType: !2593, size: 64)
!2593 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2594, size: 64)
!2594 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !2405, line: 150, baseType: !2595)
!2595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !2405, line: 142, size: 320, elements: !2596)
!2596 = !{!2597, !2598, !2599, !2600, !2603, !2604}
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2595, file: !2405, line: 144, baseType: !2224, size: 64)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2595, file: !2405, line: 145, baseType: !2402, size: 64, offset: 64)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2595, file: !2405, line: 146, baseType: !2402, size: 64, offset: 128)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2595, file: !2405, line: 147, baseType: !2601, size: 32, offset: 192)
!2601 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2602, line: 31, baseType: !2321)
!2602 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2595, file: !2405, line: 148, baseType: !7, size: 32, offset: 224)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2595, file: !2405, line: 149, baseType: !2344, size: 8, offset: 256)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !2423, file: !2405, line: 180, baseType: !2606, size: 64)
!2606 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2607, size: 64)
!2607 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !2405, line: 162, baseType: !2608)
!2608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !2405, line: 159, size: 128, elements: !2609)
!2609 = !{!2610, !2611}
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2608, file: !2405, line: 160, baseType: !2224, size: 64)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2608, file: !2405, line: 161, baseType: !2280, size: 64, offset: 64)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !2423, file: !2405, line: 181, baseType: !2613, size: 64)
!2613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2614, size: 64)
!2614 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !2405, line: 181, flags: DIFlagFwdDecl)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !2418, file: !2405, line: 317, baseType: !2616, size: 64)
!2616 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2280, size: 64, elements: !2325)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !2418, file: !2405, line: 318, baseType: !2618, size: 320)
!2618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !2405, line: 188, size: 320, elements: !2619)
!2619 = !{!2620, !2622, !2679}
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2618, file: !2405, line: 190, baseType: !2621, size: 192)
!2621 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2422, size: 192, elements: !2298)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2618, file: !2405, line: 193, baseType: !2623, size: 64, offset: 192)
!2623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2624, size: 64)
!2624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !2405, line: 206, size: 320, elements: !2625)
!2625 = !{!2626, !2664, !2665, !2666, !2678}
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2624, file: !2405, line: 208, baseType: !2627, size: 64)
!2627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2628, size: 64)
!2628 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !2225, line: 62, baseType: !2629)
!2629 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2630, line: 538, size: 256, elements: !2631)
!2630 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2631 = !{!2632, !2636, !2642, !2655}
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2629, file: !2630, line: 539, baseType: !2633, size: 32)
!2633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2630, line: 482, size: 32, elements: !2634)
!2634 = !{!2635}
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2633, file: !2630, line: 484, baseType: !7, size: 32)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2629, file: !2630, line: 540, baseType: !2637, size: 192)
!2637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2630, line: 488, size: 192, elements: !2638)
!2638 = !{!2639, !2640, !2641}
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2637, file: !2630, line: 489, baseType: !2633, size: 32)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2637, file: !2630, line: 492, baseType: !2428, size: 64, offset: 64)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2637, file: !2630, line: 496, baseType: !2224, size: 64, offset: 128)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2629, file: !2630, line: 541, baseType: !2643, size: 256)
!2643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2630, line: 504, size: 256, elements: !2644)
!2644 = !{!2645, !2646, !2653, !2654}
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2643, file: !2630, line: 505, baseType: !2633, size: 32)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2643, file: !2630, line: 509, baseType: !2647, size: 64, offset: 64)
!2647 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2630, line: 501, baseType: !2648)
!2648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2649, size: 64)
!2649 = !DISubroutineType(types: !2650)
!2650 = !{null, !2651}
!2651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2652, size: 64)
!2652 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2643, file: !2630, line: 510, baseType: !2651, size: 64, offset: 128)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2643, file: !2630, line: 513, baseType: !2627, size: 64, offset: 192)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2629, file: !2630, line: 542, baseType: !2656, size: 128)
!2656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2630, line: 530, size: 128, elements: !2657)
!2657 = !{!2658, !2659}
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2656, file: !2630, line: 531, baseType: !2633, size: 32)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2656, file: !2630, line: 534, baseType: !2660, size: 64, offset: 64)
!2660 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2630, line: 525, baseType: !2661)
!2661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2662, size: 64)
!2662 = !DISubroutineType(types: !2663)
!2663 = !{!2344, !2224, !2428, !2278, !2278}
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2624, file: !2405, line: 211, baseType: !7, size: 32, offset: 64)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2624, file: !2405, line: 214, baseType: !2280, size: 64, offset: 128)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2624, file: !2405, line: 224, baseType: !2667, size: 64, offset: 192)
!2667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2668, size: 64)
!2668 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !2405, line: 202, baseType: !2669)
!2669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !2405, line: 202, size: 128, elements: !2670)
!2670 = !{!2671}
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2669, file: !2405, line: 202, baseType: !2672, size: 128)
!2672 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !2405, line: 200, baseType: !2673)
!2673 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !2405, line: 200, size: 128, elements: !2674)
!2674 = !{!2675, !2676, !2677}
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2673, file: !2405, line: 200, baseType: !7, size: 32)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2673, file: !2405, line: 200, baseType: !7, size: 32, offset: 32)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2673, file: !2405, line: 200, baseType: !2438, size: 64, offset: 64)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2624, file: !2405, line: 234, baseType: !2667, size: 64, offset: 256)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2618, file: !2405, line: 197, baseType: !2280, size: 64, offset: 256)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !2418, file: !2405, line: 319, baseType: !2287, size: 256)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !2418, file: !2405, line: 320, baseType: !2306, size: 192)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !2227, file: !158, line: 3384, baseType: !2683, size: 1472)
!2683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !158, line: 3114, size: 1472, elements: !2684)
!2684 = !{!2685, !2706, !2707, !2708, !2709}
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2683, file: !158, line: 3115, baseType: !2686, size: 1216)
!2686 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !158, line: 2984, size: 1216, elements: !2687)
!2687 = !{!2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705}
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2686, file: !158, line: 2985, baseType: !2398, size: 960)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2686, file: !158, line: 2986, baseType: !2224, size: 64, offset: 960)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2686, file: !158, line: 2987, baseType: !2224, size: 64, offset: 1024)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2686, file: !158, line: 2988, baseType: !2224, size: 64, offset: 1088)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2686, file: !158, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2686, file: !158, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2686, file: !158, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2686, file: !158, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2686, file: !158, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2686, file: !158, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2686, file: !158, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2686, file: !158, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2686, file: !158, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2686, file: !158, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2686, file: !158, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2686, file: !158, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2686, file: !158, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2686, file: !158, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2683, file: !158, line: 3117, baseType: !2224, size: 64, offset: 1216)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2683, file: !158, line: 3119, baseType: !2224, size: 64, offset: 1280)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2683, file: !158, line: 3121, baseType: !2224, size: 64, offset: 1344)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2683, file: !158, line: 3123, baseType: !2224, size: 64, offset: 1408)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !2227, file: !158, line: 3385, baseType: !2711, size: 1088)
!2711 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !158, line: 2874, size: 1088, elements: !2712)
!2712 = !{!2713, !2714, !2715}
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2711, file: !158, line: 2875, baseType: !2398, size: 960)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2711, file: !158, line: 2876, baseType: !2402, size: 64, offset: 960)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2711, file: !158, line: 2877, baseType: !2716, size: 64, offset: 1024)
!2716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2717, size: 64)
!2717 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !158, line: 2856, flags: DIFlagFwdDecl)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !2227, file: !158, line: 3386, baseType: !2686, size: 1216)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !2227, file: !158, line: 3387, baseType: !2720, size: 1280)
!2720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !158, line: 3093, size: 1280, elements: !2721)
!2721 = !{!2722, !2723}
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2720, file: !158, line: 3094, baseType: !2686, size: 1216)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2720, file: !158, line: 3095, baseType: !2716, size: 64, offset: 1216)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !2227, file: !158, line: 3388, baseType: !2725, size: 1216)
!2725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !158, line: 2824, size: 1216, elements: !2726)
!2726 = !{!2727, !2728, !2729, !2730, !2731, !2732}
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2725, file: !158, line: 2825, baseType: !2360, size: 896)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2725, file: !158, line: 2827, baseType: !2224, size: 64, offset: 896)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2725, file: !158, line: 2828, baseType: !2224, size: 64, offset: 960)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2725, file: !158, line: 2829, baseType: !2224, size: 64, offset: 1024)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2725, file: !158, line: 2830, baseType: !2224, size: 64, offset: 1088)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2725, file: !158, line: 2831, baseType: !2224, size: 64, offset: 1152)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !2227, file: !158, line: 3389, baseType: !2734, size: 1024)
!2734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !158, line: 2850, size: 1024, elements: !2735)
!2735 = !{!2736, !2737, !2738}
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2734, file: !158, line: 2851, baseType: !2398, size: 960)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2734, file: !158, line: 2852, baseType: !2321, size: 32, offset: 960)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2734, file: !158, line: 2853, baseType: !2321, size: 32, offset: 992)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !2227, file: !158, line: 3390, baseType: !2740, size: 1024)
!2740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !158, line: 2857, size: 1024, elements: !2741)
!2741 = !{!2742, !2743}
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2740, file: !158, line: 2858, baseType: !2398, size: 960)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2740, file: !158, line: 2859, baseType: !2716, size: 64, offset: 960)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !2227, file: !158, line: 3391, baseType: !2745, size: 960)
!2745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !158, line: 2862, size: 960, elements: !2746)
!2746 = !{!2747}
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2745, file: !158, line: 2863, baseType: !2398, size: 960)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !2227, file: !158, line: 3392, baseType: !2749, size: 1472)
!2749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !158, line: 3304, size: 1472, elements: !2750)
!2750 = !{!2751}
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2749, file: !158, line: 3305, baseType: !2683, size: 1472)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2227, file: !158, line: 3393, baseType: !2753, size: 1792)
!2753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !158, line: 3248, size: 1792, elements: !2754)
!2754 = !{!2755, !2756, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037}
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2753, file: !158, line: 3249, baseType: !2683, size: 1472)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2753, file: !158, line: 3251, baseType: !2757, size: 64, offset: 1472)
!2757 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2758, size: 64)
!2758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2759, line: 463, size: 1152, elements: !2760)
!2759 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2760 = !{!2761, !2923, !2954, !2955, !2958, !2961, !2962, !2963, !2964, !2965, !2966, !2990, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016}
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2758, file: !2759, line: 464, baseType: !2762, size: 64)
!2762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2763, size: 64)
!2763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !135, line: 194, size: 384, elements: !2764)
!2764 = !{!2765, !2814, !2827, !2841, !2891, !2904}
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !2763, file: !135, line: 197, baseType: !2766, size: 64)
!2766 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !135, line: 182, baseType: !2767)
!2767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2768, size: 64)
!2768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !135, line: 116, size: 704, elements: !2769)
!2769 = !{!2770, !2771, !2772, !2773, !2774, !2775, !2802, !2811, !2812, !2813}
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !2768, file: !135, line: 119, baseType: !2767, size: 64)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2768, file: !135, line: 122, baseType: !2767, size: 64, offset: 64)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !2768, file: !135, line: 123, baseType: !2767, size: 64, offset: 128)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2768, file: !135, line: 126, baseType: !2321, size: 32, offset: 192)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2768, file: !135, line: 129, baseType: !134, size: 32, offset: 224)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2768, file: !135, line: 165, baseType: !2776, size: 192, offset: 256)
!2776 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !135, line: 132, size: 192, elements: !2777)
!2777 = !{!2778, !2791, !2797}
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !2776, file: !135, line: 137, baseType: !2779, size: 128)
!2779 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !135, line: 133, size: 128, elements: !2780)
!2780 = !{!2781, !2790}
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !2779, file: !135, line: 135, baseType: !2782, size: 64)
!2782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2783, size: 64)
!2783 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !135, line: 93, size: 320, elements: !2784)
!2784 = !{!2785, !2786, !2787, !2788, !2789}
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !2783, file: !135, line: 96, baseType: !2782, size: 64)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !2783, file: !135, line: 97, baseType: !2782, size: 64, offset: 64)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2783, file: !135, line: 101, baseType: !2224, size: 64, offset: 128)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !2783, file: !135, line: 106, baseType: !2224, size: 64, offset: 192)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2783, file: !135, line: 111, baseType: !2224, size: 64, offset: 256)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !2779, file: !135, line: 136, baseType: !2782, size: 64, offset: 64)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !2776, file: !135, line: 151, baseType: !2792, size: 192)
!2792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !135, line: 139, size: 192, elements: !2793)
!2793 = !{!2794, !2795, !2796}
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2792, file: !135, line: 141, baseType: !2224, size: 64)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2792, file: !135, line: 145, baseType: !2224, size: 64, offset: 64)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !2792, file: !135, line: 150, baseType: !2321, size: 32, offset: 128)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !2776, file: !135, line: 164, baseType: !2798, size: 128)
!2798 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !135, line: 153, size: 128, elements: !2799)
!2799 = !{!2800, !2801}
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !2798, file: !135, line: 161, baseType: !2224, size: 64)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !2798, file: !135, line: 163, baseType: !2352, size: 32, offset: 64)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !2768, file: !135, line: 168, baseType: !2803, size: 64, offset: 448)
!2803 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2804, size: 64)
!2804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !135, line: 67, size: 320, elements: !2805)
!2805 = !{!2806, !2807, !2808, !2809, !2810}
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !2804, file: !135, line: 70, baseType: !2803, size: 64)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2804, file: !135, line: 73, baseType: !2767, size: 64, offset: 64)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !2804, file: !135, line: 78, baseType: !2224, size: 64, offset: 128)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !2804, file: !135, line: 85, baseType: !2402, size: 64, offset: 192)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2804, file: !135, line: 88, baseType: !2321, size: 32, offset: 256)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !2768, file: !135, line: 173, baseType: !2402, size: 64, offset: 512)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !2768, file: !135, line: 173, baseType: !2402, size: 64, offset: 576)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !2768, file: !135, line: 177, baseType: !2344, size: 8, offset: 640)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !2763, file: !135, line: 200, baseType: !2815, size: 64, offset: 64)
!2815 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2816, size: 64)
!2816 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !135, line: 185, baseType: !2817)
!2817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !135, line: 185, size: 128, elements: !2818)
!2818 = !{!2819}
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2817, file: !135, line: 185, baseType: !2820, size: 128)
!2820 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !135, line: 184, baseType: !2821)
!2821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !135, line: 184, size: 128, elements: !2822)
!2822 = !{!2823, !2824, !2825}
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2821, file: !135, line: 184, baseType: !7, size: 32)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2821, file: !135, line: 184, baseType: !7, size: 32, offset: 32)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2821, file: !135, line: 184, baseType: !2826, size: 64, offset: 64)
!2826 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2766, size: 64, elements: !2325)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !2763, file: !135, line: 203, baseType: !2828, size: 64, offset: 128)
!2828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2829, size: 64)
!2829 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, baseType: !2830)
!2830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, size: 128, elements: !2831)
!2831 = !{!2832}
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2830, file: !135, line: 189, baseType: !2833, size: 128)
!2833 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !135, line: 188, baseType: !2834)
!2834 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !135, line: 188, size: 128, elements: !2835)
!2835 = !{!2836, !2837, !2838}
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2834, file: !135, line: 188, baseType: !7, size: 32)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2834, file: !135, line: 188, baseType: !7, size: 32, offset: 32)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2834, file: !135, line: 188, baseType: !2839, size: 64, offset: 64)
!2839 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2840, size: 64, elements: !2325)
!2840 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !135, line: 180, baseType: !2803)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !2763, file: !135, line: 207, baseType: !2842, size: 64, offset: 192)
!2842 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2843, line: 144, baseType: !2844)
!2843 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2845, size: 64)
!2845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2843, line: 100, size: 896, elements: !2846)
!2846 = !{!2847, !2853, !2858, !2863, !2865, !2868, !2869, !2870, !2871, !2872, !2877, !2879, !2880, !2885, !2890}
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2845, file: !2843, line: 102, baseType: !2848, size: 64)
!2848 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2843, line: 52, baseType: !2849)
!2849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2850, size: 64)
!2850 = !DISubroutineType(types: !2851)
!2851 = !{!2852, !2651}
!2852 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2843, line: 47, baseType: !7)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2845, file: !2843, line: 105, baseType: !2854, size: 64, offset: 64)
!2854 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2843, line: 59, baseType: !2855)
!2855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2856, size: 64)
!2856 = !DISubroutineType(types: !2857)
!2857 = !{!2321, !2651, !2651}
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2845, file: !2843, line: 108, baseType: !2859, size: 64, offset: 128)
!2859 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2843, line: 63, baseType: !2860)
!2860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2861, size: 64)
!2861 = !DISubroutineType(types: !2862)
!2862 = !{null, !2508}
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2845, file: !2843, line: 111, baseType: !2864, size: 64, offset: 192)
!2864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2508, size: 64)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2845, file: !2843, line: 114, baseType: !2866, size: 64, offset: 256)
!2866 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2867, line: 46, baseType: !2278)
!2867 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2845, file: !2843, line: 117, baseType: !2866, size: 64, offset: 320)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2845, file: !2843, line: 120, baseType: !2866, size: 64, offset: 384)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2845, file: !2843, line: 124, baseType: !7, size: 32, offset: 448)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2845, file: !2843, line: 128, baseType: !7, size: 32, offset: 480)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2845, file: !2843, line: 131, baseType: !2873, size: 64, offset: 512)
!2873 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2843, line: 75, baseType: !2874)
!2874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2875, size: 64)
!2875 = !DISubroutineType(types: !2876)
!2876 = !{!2508, !2866, !2866}
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2845, file: !2843, line: 132, baseType: !2878, size: 64, offset: 576)
!2878 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2843, line: 78, baseType: !2860)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2845, file: !2843, line: 135, baseType: !2508, size: 64, offset: 640)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2845, file: !2843, line: 136, baseType: !2881, size: 64, offset: 704)
!2881 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2843, line: 82, baseType: !2882)
!2882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2883, size: 64)
!2883 = !DISubroutineType(types: !2884)
!2884 = !{!2508, !2508, !2866, !2866}
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2845, file: !2843, line: 137, baseType: !2886, size: 64, offset: 768)
!2886 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2843, line: 83, baseType: !2887)
!2887 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2888, size: 64)
!2888 = !DISubroutineType(types: !2889)
!2889 = !{null, !2508, !2508}
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2845, file: !2843, line: 141, baseType: !7, size: 32, offset: 832)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !2763, file: !135, line: 211, baseType: !2892, size: 64, offset: 256)
!2892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2893, size: 64)
!2893 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !158, line: 183, baseType: !2894)
!2894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !158, line: 183, size: 128, elements: !2895)
!2895 = !{!2896}
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2894, file: !158, line: 183, baseType: !2897, size: 128)
!2897 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !158, line: 182, baseType: !2898)
!2898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !158, line: 182, size: 128, elements: !2899)
!2899 = !{!2900, !2901, !2902}
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2898, file: !158, line: 182, baseType: !7, size: 32)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2898, file: !158, line: 182, baseType: !7, size: 32, offset: 32)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2898, file: !158, line: 182, baseType: !2903, size: 64, offset: 64)
!2903 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2224, size: 64, elements: !2325)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !2763, file: !135, line: 220, baseType: !2905, size: 64, offset: 320)
!2905 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !135, line: 217, size: 64, elements: !2906)
!2906 = !{!2907, !2908}
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !2905, file: !135, line: 218, baseType: !2892, size: 64)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !2905, file: !135, line: 219, baseType: !2909, size: 64)
!2909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2910, size: 64)
!2910 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !2911, line: 29, baseType: !2912)
!2911 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !2911, line: 29, size: 96, elements: !2913)
!2913 = !{!2914}
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2912, file: !2911, line: 29, baseType: !2915, size: 96)
!2915 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !2911, line: 27, baseType: !2916)
!2916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !2911, line: 27, size: 96, elements: !2917)
!2917 = !{!2918, !2919, !2920}
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2916, file: !2911, line: 27, baseType: !7, size: 32)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2916, file: !2911, line: 27, baseType: !7, size: 32, offset: 32)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2916, file: !2911, line: 27, baseType: !2921, size: 8, offset: 64)
!2921 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2922, size: 8, elements: !2325)
!2922 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !2911, line: 26, baseType: !2344)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2758, file: !2759, line: 467, baseType: !2924, size: 64, offset: 64)
!2924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2925, size: 64)
!2925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !142, line: 374, size: 640, elements: !2926)
!2926 = !{!2927, !2929, !2930, !2943, !2944, !2945, !2946, !2947, !2948, !2950, !2952, !2953}
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2925, file: !142, line: 377, baseType: !2928, size: 64)
!2928 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !2225, line: 111, baseType: !2519)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2925, file: !142, line: 378, baseType: !2928, size: 64, offset: 64)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2925, file: !142, line: 381, baseType: !2931, size: 64, offset: 128)
!2931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2932, size: 64)
!2932 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !142, line: 282, baseType: !2933)
!2933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !142, line: 282, size: 128, elements: !2934)
!2934 = !{!2935}
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2933, file: !142, line: 282, baseType: !2936, size: 128)
!2936 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !142, line: 281, baseType: !2937)
!2937 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !142, line: 281, size: 128, elements: !2938)
!2938 = !{!2939, !2940, !2941}
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2937, file: !142, line: 281, baseType: !7, size: 32)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2937, file: !142, line: 281, baseType: !7, size: 32, offset: 32)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2937, file: !142, line: 281, baseType: !2942, size: 64, offset: 64)
!2942 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2928, size: 64, elements: !2325)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2925, file: !142, line: 384, baseType: !2321, size: 32, offset: 192)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2925, file: !142, line: 387, baseType: !2321, size: 32, offset: 224)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2925, file: !142, line: 390, baseType: !2321, size: 32, offset: 256)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2925, file: !142, line: 394, baseType: !2931, size: 64, offset: 320)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2925, file: !142, line: 396, baseType: !141, size: 32, offset: 384)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2925, file: !142, line: 399, baseType: !2949, size: 64, offset: 416)
!2949 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 64, elements: !2472)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2925, file: !142, line: 402, baseType: !2951, size: 64, offset: 480)
!2951 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !2472)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2925, file: !142, line: 406, baseType: !2321, size: 32, offset: 544)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2925, file: !142, line: 409, baseType: !2321, size: 32, offset: 576)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2758, file: !2759, line: 470, baseType: !2546, size: 64, offset: 128)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2758, file: !2759, line: 473, baseType: !2956, size: 64, offset: 192)
!2956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2957, size: 64)
!2957 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2759, line: 166, flags: DIFlagFwdDecl)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2758, file: !2759, line: 476, baseType: !2959, size: 64, offset: 256)
!2959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2960, size: 64)
!2960 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2759, line: 476, flags: DIFlagFwdDecl)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2758, file: !2759, line: 479, baseType: !2842, size: 64, offset: 320)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2758, file: !2759, line: 484, baseType: !2224, size: 64, offset: 384)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2758, file: !2759, line: 488, baseType: !2224, size: 64, offset: 448)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2758, file: !2759, line: 493, baseType: !2224, size: 64, offset: 512)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2758, file: !2759, line: 496, baseType: !2224, size: 64, offset: 576)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2758, file: !2759, line: 501, baseType: !2967, size: 64, offset: 640)
!2967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2968, size: 64)
!2968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !153, line: 2355, size: 576, elements: !2969)
!2969 = !{!2970, !2973, !2974, !2975, !2976, !2978, !2979, !2984, !2985, !2986, !2987, !2988, !2989}
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2968, file: !153, line: 2356, baseType: !2971, size: 64)
!2971 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2972, size: 64)
!2972 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !153, line: 2356, flags: DIFlagFwdDecl)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2968, file: !153, line: 2357, baseType: !2428, size: 64, offset: 64)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2968, file: !153, line: 2358, baseType: !2321, size: 32, offset: 128)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2968, file: !153, line: 2359, baseType: !2321, size: 32, offset: 160)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2968, file: !153, line: 2360, baseType: !2977, size: 128, offset: 192)
!2977 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2321, size: 128, elements: !2497)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2968, file: !153, line: 2364, baseType: !2321, size: 32, offset: 320)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2968, file: !153, line: 2367, baseType: !2980, size: 128, offset: 384)
!2980 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !153, line: 2349, size: 128, elements: !2981)
!2981 = !{!2982, !2983}
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2980, file: !153, line: 2351, baseType: !2402, size: 64)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2980, file: !153, line: 2352, baseType: !2280, size: 64, offset: 64)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2968, file: !153, line: 2371, baseType: !152, size: 32, offset: 512)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2968, file: !153, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2968, file: !153, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2968, file: !153, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2968, file: !153, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2968, file: !153, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2758, file: !2759, line: 504, baseType: !2991, size: 64, offset: 704)
!2991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2992, size: 64)
!2992 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2759, line: 504, flags: DIFlagFwdDecl)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2758, file: !2759, line: 507, baseType: !2842, size: 64, offset: 768)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2758, file: !2759, line: 510, baseType: !2321, size: 32, offset: 832)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2758, file: !2759, line: 513, baseType: !2321, size: 32, offset: 864)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2758, file: !2759, line: 516, baseType: !2352, size: 32, offset: 896)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2758, file: !2759, line: 519, baseType: !2352, size: 32, offset: 928)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2758, file: !2759, line: 522, baseType: !7, size: 32, offset: 960)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2758, file: !2759, line: 523, baseType: !7, size: 32, offset: 992)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2758, file: !2759, line: 528, baseType: !2428, size: 64, offset: 1024)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2758, file: !2759, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2758, file: !2759, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2758, file: !2759, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2758, file: !2759, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2758, file: !2759, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2758, file: !2759, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2758, file: !2759, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2758, file: !2759, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2758, file: !2759, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2758, file: !2759, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2758, file: !2759, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2758, file: !2759, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2758, file: !2759, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2758, file: !2759, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2758, file: !2759, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2758, file: !2759, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2753, file: !158, line: 3254, baseType: !2224, size: 64, offset: 1536)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2753, file: !158, line: 3257, baseType: !2224, size: 64, offset: 1600)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2753, file: !158, line: 3258, baseType: !2224, size: 64, offset: 1664)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2753, file: !158, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2753, file: !158, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2753, file: !158, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2753, file: !158, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2753, file: !158, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2753, file: !158, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2753, file: !158, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2753, file: !158, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2753, file: !158, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2753, file: !158, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2753, file: !158, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2753, file: !158, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2753, file: !158, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2753, file: !158, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2753, file: !158, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2753, file: !158, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2753, file: !158, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2753, file: !158, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2227, file: !158, line: 3394, baseType: !3039, size: 1344)
!3039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !158, line: 2279, size: 1344, elements: !3040)
!3040 = !{!3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082}
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3039, file: !158, line: 2280, baseType: !2263, size: 192)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !3039, file: !158, line: 2281, baseType: !2224, size: 64, offset: 192)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3039, file: !158, line: 2282, baseType: !2224, size: 64, offset: 256)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3039, file: !158, line: 2283, baseType: !2224, size: 64, offset: 320)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3039, file: !158, line: 2284, baseType: !2224, size: 64, offset: 384)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3039, file: !158, line: 2285, baseType: !7, size: 32, offset: 448)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !3039, file: !158, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !3039, file: !158, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !3039, file: !158, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !3039, file: !158, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !3039, file: !158, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !3039, file: !158, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3039, file: !158, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !3039, file: !158, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3039, file: !158, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3039, file: !158, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3039, file: !158, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3039, file: !158, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3039, file: !158, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3039, file: !158, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3039, file: !158, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3039, file: !158, line: 2305, baseType: !7, size: 32, offset: 512)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !3039, file: !158, line: 2306, baseType: !2601, size: 32, offset: 544)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !3039, file: !158, line: 2307, baseType: !2224, size: 64, offset: 576)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !3039, file: !158, line: 2308, baseType: !2224, size: 64, offset: 640)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !3039, file: !158, line: 2314, baseType: !3067, size: 64, offset: 704)
!3067 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !158, line: 2309, size: 64, elements: !3068)
!3068 = !{!3069, !3070, !3071}
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !3067, file: !158, line: 2310, baseType: !2321, size: 32)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !3067, file: !158, line: 2311, baseType: !2428, size: 64)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !3067, file: !158, line: 2312, baseType: !3072, size: 64)
!3072 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3073, size: 64)
!3073 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !158, line: 2277, flags: DIFlagFwdDecl)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3039, file: !158, line: 2315, baseType: !2224, size: 64, offset: 768)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !3039, file: !158, line: 2316, baseType: !2224, size: 64, offset: 832)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !3039, file: !158, line: 2317, baseType: !2224, size: 64, offset: 896)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !3039, file: !158, line: 2318, baseType: !2224, size: 64, offset: 960)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !3039, file: !158, line: 2319, baseType: !2224, size: 64, offset: 1024)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3039, file: !158, line: 2320, baseType: !2224, size: 64, offset: 1088)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3039, file: !158, line: 2321, baseType: !2224, size: 64, offset: 1152)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3039, file: !158, line: 2322, baseType: !2224, size: 64, offset: 1216)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3039, file: !158, line: 2324, baseType: !3083, size: 64, offset: 1280)
!3083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3084, size: 64)
!3084 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !158, line: 2324, flags: DIFlagFwdDecl)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2227, file: !158, line: 3395, baseType: !3086, size: 320)
!3086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !158, line: 1469, size: 320, elements: !3087)
!3087 = !{!3088, !3089, !3090}
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3086, file: !158, line: 1470, baseType: !2263, size: 192)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !3086, file: !158, line: 1471, baseType: !2224, size: 64, offset: 192)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3086, file: !158, line: 1472, baseType: !2224, size: 64, offset: 256)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2227, file: !158, line: 3396, baseType: !3092, size: 320)
!3092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !158, line: 1482, size: 320, elements: !3093)
!3093 = !{!3094, !3095, !3096}
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3092, file: !158, line: 1483, baseType: !2263, size: 192)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3092, file: !158, line: 1484, baseType: !2321, size: 32, offset: 192)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3092, file: !158, line: 1485, baseType: !2903, size: 64, offset: 256)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !2227, file: !158, line: 3397, baseType: !3098, size: 384)
!3098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !158, line: 1829, size: 384, elements: !3099)
!3099 = !{!3100, !3101, !3102, !3103}
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3098, file: !158, line: 1830, baseType: !2263, size: 192)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3098, file: !158, line: 1831, baseType: !2352, size: 32, offset: 192)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3098, file: !158, line: 1832, baseType: !2224, size: 64, offset: 256)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !3098, file: !158, line: 1835, baseType: !2903, size: 64, offset: 320)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2227, file: !158, line: 3398, baseType: !3105, size: 704)
!3105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !158, line: 1898, size: 704, elements: !3106)
!3106 = !{!3107, !3108, !3109, !3113, !3114, !3117}
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3105, file: !158, line: 1899, baseType: !2263, size: 192)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !3105, file: !158, line: 1902, baseType: !2224, size: 64, offset: 192)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !3105, file: !158, line: 1905, baseType: !3110, size: 64, offset: 256)
!3110 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !2225, line: 58, baseType: !3111)
!3111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3112, size: 64)
!3112 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !2225, line: 57, flags: DIFlagFwdDecl)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !3105, file: !158, line: 1908, baseType: !7, size: 32, offset: 320)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3105, file: !158, line: 1911, baseType: !3115, size: 64, offset: 384)
!3115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3116, size: 64)
!3116 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !158, line: 1876, flags: DIFlagFwdDecl)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !3105, file: !158, line: 1914, baseType: !3118, size: 256, offset: 448)
!3118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !158, line: 1883, size: 256, elements: !3119)
!3119 = !{!3120, !3122, !3123, !3128}
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3118, file: !158, line: 1884, baseType: !3121, size: 64)
!3121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3118, size: 64)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3118, file: !158, line: 1885, baseType: !3121, size: 64, offset: 64)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !3118, file: !158, line: 1891, baseType: !3124, size: 64, offset: 128)
!3124 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3118, file: !158, line: 1891, size: 64, elements: !3125)
!3125 = !{!3126, !3127}
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3124, file: !158, line: 1891, baseType: !3110, size: 64)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !3124, file: !158, line: 1891, baseType: !2224, size: 64)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !3118, file: !158, line: 1892, baseType: !3129, size: 64, offset: 192)
!3129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2224, size: 64)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2227, file: !158, line: 3399, baseType: !3131, size: 704)
!3131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !158, line: 2008, size: 704, elements: !3132)
!3132 = !{!3133, !3134, !3135, !3136, !3137, !3138, !3139, !3140, !3141, !3142, !3143}
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3131, file: !158, line: 2009, baseType: !2263, size: 192)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3131, file: !158, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !3131, file: !158, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3131, file: !158, line: 2014, baseType: !2352, size: 32, offset: 224)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3131, file: !158, line: 2016, baseType: !2224, size: 64, offset: 256)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !3131, file: !158, line: 2017, baseType: !2892, size: 64, offset: 320)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !3131, file: !158, line: 2019, baseType: !2224, size: 64, offset: 384)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !3131, file: !158, line: 2020, baseType: !2224, size: 64, offset: 448)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3131, file: !158, line: 2021, baseType: !2224, size: 64, offset: 512)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !3131, file: !158, line: 2022, baseType: !2224, size: 64, offset: 576)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !3131, file: !158, line: 2023, baseType: !2224, size: 64, offset: 640)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2227, file: !158, line: 3400, baseType: !3145, size: 832)
!3145 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !158, line: 2430, size: 832, elements: !3146)
!3146 = !{!3147, !3148, !3149, !3150, !3151, !3152, !3153, !3154, !3155, !3156}
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3145, file: !158, line: 2431, baseType: !2263, size: 192)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3145, file: !158, line: 2433, baseType: !2224, size: 64, offset: 192)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !3145, file: !158, line: 2434, baseType: !2224, size: 64, offset: 256)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !3145, file: !158, line: 2435, baseType: !2224, size: 64, offset: 320)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !3145, file: !158, line: 2436, baseType: !2224, size: 64, offset: 384)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !3145, file: !158, line: 2437, baseType: !2892, size: 64, offset: 448)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !3145, file: !158, line: 2438, baseType: !2224, size: 64, offset: 512)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !3145, file: !158, line: 2440, baseType: !2224, size: 64, offset: 576)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !3145, file: !158, line: 2441, baseType: !2224, size: 64, offset: 640)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !3145, file: !158, line: 2443, baseType: !3157, size: 128, offset: 704)
!3157 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !158, line: 182, baseType: !3158)
!3158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !158, line: 182, size: 128, elements: !3159)
!3159 = !{!3160}
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3158, file: !158, line: 182, baseType: !2897, size: 128)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !2227, file: !158, line: 3401, baseType: !3162, size: 320)
!3162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !158, line: 3327, size: 320, elements: !3163)
!3163 = !{!3164, !3165, !3172}
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3162, file: !158, line: 3329, baseType: !2263, size: 192)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !3162, file: !158, line: 3330, baseType: !3166, size: 64, offset: 192)
!3166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3167, size: 64)
!3167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !158, line: 3320, size: 192, elements: !3168)
!3168 = !{!3169, !3170, !3171}
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3167, file: !158, line: 3322, baseType: !3166, size: 64)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3167, file: !158, line: 3323, baseType: !3166, size: 64, offset: 64)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3167, file: !158, line: 3324, baseType: !2224, size: 64, offset: 128)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !3162, file: !158, line: 3331, baseType: !3166, size: 64, offset: 256)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !2227, file: !158, line: 3402, baseType: !3174, size: 256)
!3174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !158, line: 1540, size: 256, elements: !3175)
!3175 = !{!3176, !3177}
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3174, file: !158, line: 1541, baseType: !2263, size: 192)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !3174, file: !158, line: 1542, baseType: !3178, size: 64, offset: 192)
!3178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3179, size: 64)
!3179 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !158, line: 1538, baseType: !3180)
!3180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !158, line: 1538, size: 192, elements: !3181)
!3181 = !{!3182}
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3180, file: !158, line: 1538, baseType: !3183, size: 192)
!3183 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !158, line: 1537, baseType: !3184)
!3184 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !158, line: 1537, size: 192, elements: !3185)
!3185 = !{!3186, !3187, !3188}
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3184, file: !158, line: 1537, baseType: !7, size: 32)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3184, file: !158, line: 1537, baseType: !7, size: 32, offset: 32)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3184, file: !158, line: 1537, baseType: !3189, size: 128, offset: 64)
!3189 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3190, size: 128, elements: !2325)
!3190 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !158, line: 1535, baseType: !3191)
!3191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !158, line: 1532, size: 128, elements: !3192)
!3192 = !{!3193, !3194}
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3191, file: !158, line: 1533, baseType: !2224, size: 64)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3191, file: !158, line: 1534, baseType: !2224, size: 64, offset: 64)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !2227, file: !158, line: 3403, baseType: !3196, size: 512)
!3196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !158, line: 1938, size: 512, elements: !3197)
!3197 = !{!3198, !3199, !3200, !3201, !3207, !3208, !3209}
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3196, file: !158, line: 1939, baseType: !2263, size: 192)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3196, file: !158, line: 1940, baseType: !2352, size: 32, offset: 192)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3196, file: !158, line: 1941, baseType: !157, size: 32, offset: 224)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3196, file: !158, line: 1946, baseType: !3202, size: 32, offset: 256)
!3202 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !158, line: 1942, size: 32, elements: !3203)
!3203 = !{!3204, !3205, !3206}
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !3202, file: !158, line: 1943, baseType: !176, size: 32)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !3202, file: !158, line: 1944, baseType: !183, size: 32)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !3202, file: !158, line: 1945, baseType: !190, size: 32)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !3196, file: !158, line: 1950, baseType: !2545, size: 64, offset: 320)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !3196, file: !158, line: 1951, baseType: !2545, size: 64, offset: 384)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3196, file: !158, line: 1953, baseType: !2903, size: 64, offset: 448)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !2227, file: !158, line: 3404, baseType: !3211, size: 1664)
!3211 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !158, line: 3337, size: 1664, elements: !3212)
!3212 = !{!3213, !3214}
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3211, file: !158, line: 3338, baseType: !2263, size: 192)
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3211, file: !158, line: 3341, baseType: !3215, size: 1472, offset: 192)
!3215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1076, line: 410, size: 1472, elements: !3216)
!3216 = !{!3217, !3218, !3219, !3220, !3221, !3222, !3223, !3224, !3225, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3238, !3239, !3240, !3241, !3242, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263, !3264, !3265, !3266, !3267, !3268, !3269, !3270, !3271, !3272, !3273, !3274, !3275, !3276, !3277, !3278, !3279, !3280, !3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288, !3289, !3290, !3291, !3292, !3293, !3294, !3295, !3296, !3297, !3298, !3299, !3300, !3301, !3302, !3303, !3304, !3305, !3306, !3307, !3308, !3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3318, !3319, !3320, !3321, !3322, !3323, !3324, !3325, !3326, !3327, !3328, !3329, !3330, !3331, !3332, !3333, !3334, !3335, !3336, !3337, !3338, !3339, !3340, !3341, !3342, !3343, !3344, !3345, !3346, !3347, !3348, !3349, !3350, !3351, !3352, !3353, !3354, !3355, !3356, !3357, !3358, !3359, !3360, !3361, !3362, !3363, !3364, !3365, !3366, !3367, !3368, !3369, !3370, !3371, !3372, !3373, !3374, !3375, !3376, !3377, !3378, !3379, !3380}
!3217 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !3215, file: !1076, line: 412, baseType: !2321, size: 32)
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !3215, file: !1076, line: 413, baseType: !2321, size: 32, offset: 32)
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !3215, file: !1076, line: 414, baseType: !2321, size: 32, offset: 64)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !3215, file: !1076, line: 415, baseType: !2321, size: 32, offset: 96)
!3221 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !3215, file: !1076, line: 416, baseType: !2321, size: 32, offset: 128)
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !3215, file: !1076, line: 417, baseType: !2321, size: 32, offset: 160)
!3223 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !3215, file: !1076, line: 418, baseType: !2344, size: 8, offset: 192)
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !3215, file: !1076, line: 419, baseType: !2344, size: 8, offset: 200)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !3215, file: !1076, line: 420, baseType: !3226, size: 8, offset: 208)
!3226 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !3215, file: !1076, line: 421, baseType: !3226, size: 8, offset: 216)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !3215, file: !1076, line: 422, baseType: !3226, size: 8, offset: 224)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !3215, file: !1076, line: 423, baseType: !3226, size: 8, offset: 232)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !3215, file: !1076, line: 424, baseType: !3226, size: 8, offset: 240)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !3215, file: !1076, line: 425, baseType: !3226, size: 8, offset: 248)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !3215, file: !1076, line: 426, baseType: !3226, size: 8, offset: 256)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !3215, file: !1076, line: 427, baseType: !3226, size: 8, offset: 264)
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !3215, file: !1076, line: 428, baseType: !3226, size: 8, offset: 272)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !3215, file: !1076, line: 429, baseType: !3226, size: 8, offset: 280)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !3215, file: !1076, line: 430, baseType: !3226, size: 8, offset: 288)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !3215, file: !1076, line: 431, baseType: !3226, size: 8, offset: 296)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !3215, file: !1076, line: 432, baseType: !3226, size: 8, offset: 304)
!3239 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !3215, file: !1076, line: 433, baseType: !3226, size: 8, offset: 312)
!3240 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !3215, file: !1076, line: 434, baseType: !3226, size: 8, offset: 320)
!3241 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !3215, file: !1076, line: 435, baseType: !3226, size: 8, offset: 328)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !3215, file: !1076, line: 436, baseType: !3226, size: 8, offset: 336)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !3215, file: !1076, line: 437, baseType: !3226, size: 8, offset: 344)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !3215, file: !1076, line: 438, baseType: !3226, size: 8, offset: 352)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !3215, file: !1076, line: 439, baseType: !3226, size: 8, offset: 360)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !3215, file: !1076, line: 440, baseType: !3226, size: 8, offset: 368)
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !3215, file: !1076, line: 441, baseType: !3226, size: 8, offset: 376)
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !3215, file: !1076, line: 442, baseType: !3226, size: 8, offset: 384)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !3215, file: !1076, line: 443, baseType: !3226, size: 8, offset: 392)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !3215, file: !1076, line: 444, baseType: !3226, size: 8, offset: 400)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !3215, file: !1076, line: 445, baseType: !3226, size: 8, offset: 408)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !3215, file: !1076, line: 446, baseType: !3226, size: 8, offset: 416)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !3215, file: !1076, line: 447, baseType: !3226, size: 8, offset: 424)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !3215, file: !1076, line: 448, baseType: !3226, size: 8, offset: 432)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !3215, file: !1076, line: 449, baseType: !3226, size: 8, offset: 440)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !3215, file: !1076, line: 450, baseType: !3226, size: 8, offset: 448)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !3215, file: !1076, line: 451, baseType: !3226, size: 8, offset: 456)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !3215, file: !1076, line: 452, baseType: !3226, size: 8, offset: 464)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !3215, file: !1076, line: 453, baseType: !3226, size: 8, offset: 472)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !3215, file: !1076, line: 454, baseType: !3226, size: 8, offset: 480)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !3215, file: !1076, line: 455, baseType: !3226, size: 8, offset: 488)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !3215, file: !1076, line: 456, baseType: !3226, size: 8, offset: 496)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !3215, file: !1076, line: 457, baseType: !3226, size: 8, offset: 504)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !3215, file: !1076, line: 458, baseType: !3226, size: 8, offset: 512)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !3215, file: !1076, line: 459, baseType: !3226, size: 8, offset: 520)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !3215, file: !1076, line: 460, baseType: !3226, size: 8, offset: 528)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !3215, file: !1076, line: 461, baseType: !3226, size: 8, offset: 536)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !3215, file: !1076, line: 462, baseType: !3226, size: 8, offset: 544)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !3215, file: !1076, line: 463, baseType: !3226, size: 8, offset: 552)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !3215, file: !1076, line: 464, baseType: !3226, size: 8, offset: 560)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !3215, file: !1076, line: 465, baseType: !3226, size: 8, offset: 568)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !3215, file: !1076, line: 466, baseType: !3226, size: 8, offset: 576)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !3215, file: !1076, line: 467, baseType: !3226, size: 8, offset: 584)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !3215, file: !1076, line: 468, baseType: !3226, size: 8, offset: 592)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !3215, file: !1076, line: 469, baseType: !3226, size: 8, offset: 600)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !3215, file: !1076, line: 470, baseType: !3226, size: 8, offset: 608)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !3215, file: !1076, line: 471, baseType: !3226, size: 8, offset: 616)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !3215, file: !1076, line: 472, baseType: !3226, size: 8, offset: 624)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !3215, file: !1076, line: 473, baseType: !3226, size: 8, offset: 632)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !3215, file: !1076, line: 474, baseType: !3226, size: 8, offset: 640)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !3215, file: !1076, line: 475, baseType: !3226, size: 8, offset: 648)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !3215, file: !1076, line: 476, baseType: !3226, size: 8, offset: 656)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !3215, file: !1076, line: 477, baseType: !3226, size: 8, offset: 664)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !3215, file: !1076, line: 478, baseType: !3226, size: 8, offset: 672)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !3215, file: !1076, line: 479, baseType: !3226, size: 8, offset: 680)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !3215, file: !1076, line: 480, baseType: !3226, size: 8, offset: 688)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !3215, file: !1076, line: 481, baseType: !3226, size: 8, offset: 696)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !3215, file: !1076, line: 482, baseType: !3226, size: 8, offset: 704)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !3215, file: !1076, line: 483, baseType: !3226, size: 8, offset: 712)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !3215, file: !1076, line: 484, baseType: !3226, size: 8, offset: 720)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !3215, file: !1076, line: 485, baseType: !3226, size: 8, offset: 728)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !3215, file: !1076, line: 486, baseType: !3226, size: 8, offset: 736)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !3215, file: !1076, line: 487, baseType: !3226, size: 8, offset: 744)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !3215, file: !1076, line: 488, baseType: !3226, size: 8, offset: 752)
!3295 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !3215, file: !1076, line: 489, baseType: !3226, size: 8, offset: 760)
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !3215, file: !1076, line: 490, baseType: !3226, size: 8, offset: 768)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !3215, file: !1076, line: 491, baseType: !3226, size: 8, offset: 776)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !3215, file: !1076, line: 492, baseType: !3226, size: 8, offset: 784)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !3215, file: !1076, line: 493, baseType: !3226, size: 8, offset: 792)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !3215, file: !1076, line: 494, baseType: !3226, size: 8, offset: 800)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !3215, file: !1076, line: 495, baseType: !3226, size: 8, offset: 808)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !3215, file: !1076, line: 496, baseType: !3226, size: 8, offset: 816)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !3215, file: !1076, line: 497, baseType: !3226, size: 8, offset: 824)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !3215, file: !1076, line: 498, baseType: !3226, size: 8, offset: 832)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !3215, file: !1076, line: 499, baseType: !3226, size: 8, offset: 840)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !3215, file: !1076, line: 500, baseType: !3226, size: 8, offset: 848)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !3215, file: !1076, line: 501, baseType: !3226, size: 8, offset: 856)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !3215, file: !1076, line: 502, baseType: !3226, size: 8, offset: 864)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !3215, file: !1076, line: 503, baseType: !3226, size: 8, offset: 872)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !3215, file: !1076, line: 504, baseType: !3226, size: 8, offset: 880)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !3215, file: !1076, line: 505, baseType: !3226, size: 8, offset: 888)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !3215, file: !1076, line: 506, baseType: !3226, size: 8, offset: 896)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !3215, file: !1076, line: 507, baseType: !3226, size: 8, offset: 904)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !3215, file: !1076, line: 508, baseType: !3226, size: 8, offset: 912)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !3215, file: !1076, line: 509, baseType: !3226, size: 8, offset: 920)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !3215, file: !1076, line: 510, baseType: !3226, size: 8, offset: 928)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !3215, file: !1076, line: 511, baseType: !3226, size: 8, offset: 936)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !3215, file: !1076, line: 512, baseType: !3226, size: 8, offset: 944)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !3215, file: !1076, line: 513, baseType: !3226, size: 8, offset: 952)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !3215, file: !1076, line: 514, baseType: !3226, size: 8, offset: 960)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !3215, file: !1076, line: 515, baseType: !3226, size: 8, offset: 968)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !3215, file: !1076, line: 516, baseType: !3226, size: 8, offset: 976)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !3215, file: !1076, line: 517, baseType: !3226, size: 8, offset: 984)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !3215, file: !1076, line: 518, baseType: !3226, size: 8, offset: 992)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !3215, file: !1076, line: 519, baseType: !3226, size: 8, offset: 1000)
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !3215, file: !1076, line: 520, baseType: !3226, size: 8, offset: 1008)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !3215, file: !1076, line: 521, baseType: !3226, size: 8, offset: 1016)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !3215, file: !1076, line: 522, baseType: !3226, size: 8, offset: 1024)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !3215, file: !1076, line: 523, baseType: !3226, size: 8, offset: 1032)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !3215, file: !1076, line: 524, baseType: !3226, size: 8, offset: 1040)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !3215, file: !1076, line: 525, baseType: !3226, size: 8, offset: 1048)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !3215, file: !1076, line: 526, baseType: !3226, size: 8, offset: 1056)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !3215, file: !1076, line: 527, baseType: !3226, size: 8, offset: 1064)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !3215, file: !1076, line: 528, baseType: !3226, size: 8, offset: 1072)
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !3215, file: !1076, line: 529, baseType: !3226, size: 8, offset: 1080)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !3215, file: !1076, line: 530, baseType: !3226, size: 8, offset: 1088)
!3337 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !3215, file: !1076, line: 531, baseType: !3226, size: 8, offset: 1096)
!3338 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !3215, file: !1076, line: 532, baseType: !3226, size: 8, offset: 1104)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !3215, file: !1076, line: 533, baseType: !3226, size: 8, offset: 1112)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !3215, file: !1076, line: 534, baseType: !3226, size: 8, offset: 1120)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !3215, file: !1076, line: 535, baseType: !3226, size: 8, offset: 1128)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !3215, file: !1076, line: 536, baseType: !3226, size: 8, offset: 1136)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !3215, file: !1076, line: 537, baseType: !3226, size: 8, offset: 1144)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !3215, file: !1076, line: 538, baseType: !3226, size: 8, offset: 1152)
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !3215, file: !1076, line: 539, baseType: !3226, size: 8, offset: 1160)
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !3215, file: !1076, line: 540, baseType: !3226, size: 8, offset: 1168)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !3215, file: !1076, line: 541, baseType: !3226, size: 8, offset: 1176)
!3348 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !3215, file: !1076, line: 542, baseType: !3226, size: 8, offset: 1184)
!3349 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !3215, file: !1076, line: 543, baseType: !3226, size: 8, offset: 1192)
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !3215, file: !1076, line: 544, baseType: !3226, size: 8, offset: 1200)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !3215, file: !1076, line: 545, baseType: !3226, size: 8, offset: 1208)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !3215, file: !1076, line: 546, baseType: !3226, size: 8, offset: 1216)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !3215, file: !1076, line: 547, baseType: !3226, size: 8, offset: 1224)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !3215, file: !1076, line: 548, baseType: !3226, size: 8, offset: 1232)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !3215, file: !1076, line: 549, baseType: !3226, size: 8, offset: 1240)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !3215, file: !1076, line: 550, baseType: !3226, size: 8, offset: 1248)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !3215, file: !1076, line: 551, baseType: !3226, size: 8, offset: 1256)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !3215, file: !1076, line: 552, baseType: !3226, size: 8, offset: 1264)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !3215, file: !1076, line: 553, baseType: !3226, size: 8, offset: 1272)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !3215, file: !1076, line: 554, baseType: !3226, size: 8, offset: 1280)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !3215, file: !1076, line: 555, baseType: !3226, size: 8, offset: 1288)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !3215, file: !1076, line: 556, baseType: !3226, size: 8, offset: 1296)
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !3215, file: !1076, line: 557, baseType: !3226, size: 8, offset: 1304)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !3215, file: !1076, line: 558, baseType: !3226, size: 8, offset: 1312)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !3215, file: !1076, line: 559, baseType: !3226, size: 8, offset: 1320)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !3215, file: !1076, line: 560, baseType: !3226, size: 8, offset: 1328)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !3215, file: !1076, line: 561, baseType: !3226, size: 8, offset: 1336)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !3215, file: !1076, line: 562, baseType: !3226, size: 8, offset: 1344)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !3215, file: !1076, line: 563, baseType: !3226, size: 8, offset: 1352)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !3215, file: !1076, line: 564, baseType: !3226, size: 8, offset: 1360)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !3215, file: !1076, line: 565, baseType: !3226, size: 8, offset: 1368)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !3215, file: !1076, line: 566, baseType: !3226, size: 8, offset: 1376)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !3215, file: !1076, line: 567, baseType: !3226, size: 8, offset: 1384)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !3215, file: !1076, line: 568, baseType: !3226, size: 8, offset: 1392)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !3215, file: !1076, line: 569, baseType: !3226, size: 8, offset: 1400)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !3215, file: !1076, line: 570, baseType: !3226, size: 8, offset: 1408)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !3215, file: !1076, line: 571, baseType: !3226, size: 8, offset: 1416)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !3215, file: !1076, line: 572, baseType: !3226, size: 8, offset: 1424)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !3215, file: !1076, line: 573, baseType: !3226, size: 8, offset: 1432)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !3215, file: !1076, line: 574, baseType: !3226, size: 8, offset: 1440)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !2227, file: !158, line: 3405, baseType: !3382, size: 384)
!3382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !158, line: 3352, size: 384, elements: !3383)
!3383 = !{!3384, !3385}
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3382, file: !158, line: 3353, baseType: !2263, size: 192)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3382, file: !158, line: 3356, baseType: !3386, size: 192, offset: 192)
!3386 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1076, line: 578, size: 192, elements: !3387)
!3387 = !{!3388, !3389, !3390, !3391, !3392, !3393, !3394, !3395, !3396, !3397, !3398}
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3386, file: !1076, line: 580, baseType: !2321, size: 32)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3386, file: !1076, line: 581, baseType: !2321, size: 32, offset: 32)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3386, file: !1076, line: 582, baseType: !2321, size: 32, offset: 64)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3386, file: !1076, line: 583, baseType: !2321, size: 32, offset: 96)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3386, file: !1076, line: 584, baseType: !2344, size: 8, offset: 128)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3386, file: !1076, line: 585, baseType: !2344, size: 8, offset: 136)
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3386, file: !1076, line: 586, baseType: !2344, size: 8, offset: 144)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3386, file: !1076, line: 587, baseType: !2344, size: 8, offset: 152)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3386, file: !1076, line: 588, baseType: !2344, size: 8, offset: 160)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3386, file: !1076, line: 589, baseType: !2344, size: 8, offset: 168)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3386, file: !1076, line: 590, baseType: !2344, size: 8, offset: 176)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "original_code", scope: !2221, file: !2089, line: 126, baseType: !190, size: 32, offset: 64)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "original_type", scope: !2221, file: !2089, line: 131, baseType: !2224, size: 64, offset: 128)
!3401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3402, size: 64)
!3402 = !DIDerivedType(tag: DW_TAG_typedef, name: "c_parser", file: !3, line: 191, baseType: !3403)
!3403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "c_parser", file: !3, line: 168, size: 448, elements: !3404)
!3404 = !{!3405, !3416, !3418, !3419, !3420, !3421, !3422, !3423}
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "tokens", scope: !3403, file: !3, line: 170, baseType: !3406, size: 384)
!3406 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3407, size: 384, elements: !2472)
!3407 = !DIDerivedType(tag: DW_TAG_typedef, name: "c_token", file: !3, line: 163, baseType: !3408)
!3408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "c_token", file: !3, line: 147, size: 192, elements: !3409)
!3409 = !{!3410, !3411, !3412, !3413, !3414, !3415}
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3408, file: !3, line: 149, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "id_kind", scope: !3408, file: !3, line: 152, baseType: !7, size: 8, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "keyword", scope: !3408, file: !3, line: 155, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "pragma_kind", scope: !3408, file: !3, line: 158, baseType: !7, size: 8, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3408, file: !3, line: 160, baseType: !2224, size: 64, offset: 64)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !3408, file: !3, line: 162, baseType: !2352, size: 32, offset: 128)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "tokens_avail", scope: !3403, file: !3, line: 172, baseType: !3417, size: 16, offset: 384)
!3417 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !3403, file: !3, line: 176, baseType: !7, size: 1, offset: 400, flags: DIFlagBitField, extraData: i64 400)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "in_pragma", scope: !3403, file: !3, line: 179, baseType: !7, size: 1, offset: 401, flags: DIFlagBitField, extraData: i64 400)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "in_if_block", scope: !3403, file: !3, line: 181, baseType: !7, size: 1, offset: 402, flags: DIFlagBitField, extraData: i64 400)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "lex_untranslated_string", scope: !3403, file: !3, line: 183, baseType: !7, size: 1, offset: 403, flags: DIFlagBitField, extraData: i64 400)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "objc_pq_context", scope: !3403, file: !3, line: 185, baseType: !7, size: 1, offset: 404, flags: DIFlagBitField, extraData: i64 400)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "objc_need_raw_identifier", scope: !3403, file: !3, line: 190, baseType: !7, size: 1, offset: 405, flags: DIFlagBitField, extraData: i64 400)
!3424 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2221, size: 64)
!3425 = !{}
!3426 = !{!3427, !3428, !3429, !3430, !3431, !3432, !3433, !3434, !3435, !3436, !3437, !3438}
!3427 = !DIEnumerator(name: "PREC_NONE", value: 0, isUnsigned: true)
!3428 = !DIEnumerator(name: "PREC_LOGOR", value: 1, isUnsigned: true)
!3429 = !DIEnumerator(name: "PREC_LOGAND", value: 2, isUnsigned: true)
!3430 = !DIEnumerator(name: "PREC_BITOR", value: 3, isUnsigned: true)
!3431 = !DIEnumerator(name: "PREC_BITXOR", value: 4, isUnsigned: true)
!3432 = !DIEnumerator(name: "PREC_BITAND", value: 5, isUnsigned: true)
!3433 = !DIEnumerator(name: "PREC_EQ", value: 6, isUnsigned: true)
!3434 = !DIEnumerator(name: "PREC_REL", value: 7, isUnsigned: true)
!3435 = !DIEnumerator(name: "PREC_SHIFT", value: 8, isUnsigned: true)
!3436 = !DIEnumerator(name: "PREC_ADD", value: 9, isUnsigned: true)
!3437 = !DIEnumerator(name: "PREC_MULT", value: 10, isUnsigned: true)
!3438 = !DIEnumerator(name: "NUM_PRECS", value: 11, isUnsigned: true)
!3439 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !158, line: 205, baseType: !7, size: 32, elements: !3440)
!3440 = !{!3441, !3442, !3443, !3444}
!3441 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!3442 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!3443 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!3444 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!3445 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !158, line: 220, baseType: !7, size: 32, elements: !3446)
!3446 = !{!3447, !3448, !3449, !3450, !3451, !3452, !3453, !3454, !3455, !3456, !3457, !3458, !3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467, !3468, !3469, !3470, !3471, !3472, !3473, !3474, !3475, !3476, !3477, !3478, !3479, !3480, !3481, !3482, !3483, !3484, !3485, !3486, !3487, !3488, !3489, !3490, !3491, !3492, !3493, !3494, !3495, !3496, !3497, !3498, !3499, !3500, !3501, !3502, !3503, !3504, !3505, !3506, !3507, !3508, !3509, !3510, !3511, !3512, !3513, !3514, !3515, !3516, !3517, !3518, !3519, !3520, !3521, !3522, !3523, !3524, !3525, !3526, !3527, !3528, !3529, !3530, !3531, !3532, !3533, !3534, !3535, !3536, !3537, !3538, !3539, !3540, !3541, !3542, !3543, !3544, !3545, !3546, !3547, !3548, !3549, !3550, !3551, !3552, !3553, !3554, !3555, !3556, !3557, !3558, !3559, !3560, !3561, !3562, !3563, !3564, !3565, !3566, !3567, !3568, !3569, !3570, !3571, !3572, !3573, !3574, !3575, !3576, !3577, !3578, !3579, !3580, !3581, !3582, !3583, !3584, !3585, !3586, !3587, !3588, !3589, !3590, !3591, !3592, !3593, !3594, !3595, !3596, !3597, !3598, !3599, !3600, !3601, !3602, !3603, !3604, !3605, !3606, !3607, !3608, !3609, !3610, !3611, !3612, !3613, !3614, !3615, !3616, !3617, !3618, !3619, !3620, !3621, !3622, !3623, !3624, !3625, !3626, !3627, !3628, !3629, !3630, !3631, !3632, !3633, !3634, !3635, !3636, !3637, !3638, !3639, !3640, !3641, !3642, !3643, !3644, !3645, !3646, !3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656, !3657, !3658, !3659, !3660, !3661, !3662, !3663, !3664, !3665, !3666, !3667, !3668, !3669, !3670, !3671, !3672, !3673, !3674, !3675, !3676, !3677, !3678, !3679, !3680, !3681, !3682, !3683, !3684, !3685, !3686, !3687, !3688, !3689, !3690, !3691, !3692, !3693, !3694, !3695, !3696, !3697, !3698, !3699, !3700, !3701, !3702, !3703, !3704, !3705, !3706, !3707, !3708, !3709, !3710, !3711, !3712, !3713, !3714, !3715, !3716, !3717, !3718, !3719, !3720, !3721, !3722, !3723, !3724, !3725, !3726, !3727, !3728, !3729, !3730, !3731, !3732, !3733, !3734, !3735, !3736, !3737, !3738, !3739, !3740, !3741, !3742, !3743, !3744, !3745, !3746, !3747, !3748, !3749, !3750, !3751, !3752, !3753, !3754, !3755, !3756, !3757, !3758, !3759, !3760, !3761, !3762, !3763, !3764, !3765, !3766, !3767, !3768, !3769, !3770, !3771, !3772, !3773, !3774, !3775, !3776, !3777, !3778, !3779, !3780, !3781, !3782, !3783, !3784, !3785, !3786, !3787, !3788, !3789, !3790, !3791, !3792, !3793, !3794, !3795, !3796, !3797, !3798, !3799, !3800, !3801, !3802, !3803, !3804, !3805, !3806, !3807, !3808, !3809, !3810, !3811, !3812, !3813, !3814, !3815, !3816, !3817, !3818, !3819, !3820, !3821, !3822, !3823, !3824, !3825, !3826, !3827, !3828, !3829, !3830, !3831, !3832, !3833, !3834, !3835, !3836, !3837, !3838, !3839, !3840, !3841, !3842, !3843, !3844, !3845, !3846, !3847, !3848, !3849, !3850, !3851, !3852, !3853, !3854, !3855, !3856, !3857, !3858, !3859, !3860, !3861, !3862, !3863, !3864, !3865, !3866, !3867, !3868, !3869, !3870, !3871, !3872, !3873, !3874, !3875, !3876, !3877, !3878, !3879, !3880, !3881, !3882, !3883, !3884, !3885, !3886, !3887, !3888, !3889, !3890, !3891, !3892, !3893, !3894, !3895, !3896, !3897, !3898, !3899, !3900, !3901, !3902, !3903, !3904, !3905, !3906, !3907, !3908, !3909, !3910, !3911, !3912, !3913, !3914, !3915, !3916, !3917, !3918, !3919, !3920, !3921, !3922, !3923, !3924, !3925, !3926, !3927, !3928, !3929, !3930, !3931, !3932, !3933, !3934, !3935, !3936, !3937, !3938, !3939, !3940, !3941, !3942, !3943, !3944, !3945, !3946, !3947, !3948, !3949, !3950, !3951, !3952, !3953, !3954, !3955, !3956, !3957, !3958, !3959, !3960, !3961, !3962, !3963, !3964, !3965, !3966, !3967, !3968, !3969, !3970, !3971, !3972, !3973, !3974, !3975, !3976, !3977, !3978, !3979, !3980, !3981, !3982, !3983, !3984, !3985, !3986, !3987, !3988, !3989, !3990, !3991, !3992, !3993, !3994, !3995, !3996, !3997, !3998, !3999, !4000, !4001, !4002, !4003, !4004, !4005, !4006, !4007, !4008, !4009, !4010, !4011, !4012, !4013, !4014, !4015, !4016, !4017, !4018, !4019, !4020, !4021, !4022, !4023, !4024, !4025, !4026, !4027, !4028, !4029, !4030, !4031, !4032, !4033, !4034, !4035, !4036, !4037, !4038, !4039, !4040, !4041, !4042, !4043, !4044, !4045, !4046, !4047, !4048, !4049, !4050, !4051, !4052, !4053, !4054, !4055, !4056, !4057, !4058, !4059, !4060, !4061, !4062, !4063, !4064, !4065, !4066, !4067, !4068, !4069, !4070, !4071, !4072, !4073, !4074, !4075, !4076, !4077, !4078, !4079, !4080, !4081, !4082, !4083, !4084, !4085, !4086, !4087, !4088, !4089, !4090, !4091, !4092, !4093, !4094, !4095, !4096, !4097, !4098, !4099, !4100, !4101, !4102, !4103, !4104, !4105, !4106, !4107, !4108, !4109, !4110, !4111, !4112, !4113, !4114, !4115, !4116, !4117, !4118, !4119, !4120, !4121, !4122, !4123, !4124, !4125, !4126, !4127, !4128, !4129, !4130, !4131, !4132, !4133, !4134, !4135, !4136, !4137, !4138, !4139, !4140, !4141, !4142, !4143, !4144, !4145, !4146, !4147, !4148, !4149, !4150, !4151, !4152, !4153, !4154, !4155, !4156, !4157, !4158, !4159, !4160, !4161, !4162, !4163, !4164}
!3447 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!3448 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!3449 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!3450 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!3451 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!3452 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!3453 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!3454 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!3455 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!3456 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!3457 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!3458 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!3459 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!3460 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!3461 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!3462 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!3463 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!3464 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!3465 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!3466 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!3467 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!3468 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!3469 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!3470 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!3471 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!3472 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!3473 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!3474 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!3475 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!3476 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!3477 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!3478 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!3479 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!3480 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!3481 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!3482 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!3483 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!3484 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!3485 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!3486 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!3487 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!3488 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!3489 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!3490 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!3491 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!3492 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!3493 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!3494 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!3495 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!3496 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!3497 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!3498 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!3499 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!3500 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!3501 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!3502 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!3503 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!3504 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!3505 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!3506 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!3507 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!3508 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!3509 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!3510 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!3511 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!3512 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!3513 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!3514 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!3515 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!3516 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!3517 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!3518 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!3519 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!3520 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!3521 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!3522 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!3523 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!3524 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!3525 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!3526 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!3527 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!3528 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!3529 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!3530 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!3531 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!3532 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!3533 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!3534 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!3535 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!3536 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!3537 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!3538 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!3539 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!3540 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!3541 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!3542 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!3543 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!3544 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!3545 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!3546 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!3547 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!3548 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!3549 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!3550 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!3551 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!3552 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!3553 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!3554 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!3555 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!3556 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!3557 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!3558 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!3559 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!3560 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!3561 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!3562 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!3563 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!3564 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!3565 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!3566 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!3567 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!3568 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!3569 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!3570 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!3571 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!3572 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!3573 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!3574 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!3575 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!3576 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!3577 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!3578 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!3579 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!3580 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!3581 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!3582 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!3583 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!3584 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!3585 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!3586 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!3587 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!3588 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!3589 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!3590 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!3591 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!3592 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!3593 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!3594 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!3595 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!3596 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!3597 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!3598 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!3599 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!3600 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!3601 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!3602 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!3603 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!3604 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!3605 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!3606 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!3607 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!3608 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!3609 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!3610 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!3611 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!3612 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!3613 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!3614 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!3615 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!3616 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!3617 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!3618 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!3619 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!3620 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!3621 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!3622 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!3623 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!3624 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!3625 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!3626 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!3627 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!3628 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!3629 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!3630 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!3631 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!3632 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!3633 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!3634 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!3635 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!3636 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!3637 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!3638 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!3639 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!3640 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!3641 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!3642 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!3643 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!3644 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!3645 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!3646 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!3647 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!3648 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!3649 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!3650 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!3651 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!3652 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!3653 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!3654 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!3655 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!3656 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!3657 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!3658 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!3659 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!3660 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!3661 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!3662 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!3663 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!3664 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!3665 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!3666 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!3667 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!3668 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!3669 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!3670 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!3671 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!3672 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!3673 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!3674 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!3675 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!3676 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!3677 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!3678 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!3679 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!3680 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!3681 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!3682 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!3683 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!3684 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!3685 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!3686 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!3687 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!3688 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!3689 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!3690 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!3691 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!3692 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!3693 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!3694 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!3695 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!3696 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!3697 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!3698 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!3699 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!3700 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!3701 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!3702 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!3703 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!3704 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!3705 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!3706 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!3707 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!3708 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!3709 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!3710 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!3711 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!3712 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!3713 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!3714 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!3715 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!3716 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!3717 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!3718 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!3719 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!3720 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!3721 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!3722 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!3723 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!3724 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!3725 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!3726 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!3727 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!3728 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!3729 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!3730 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!3731 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!3732 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!3733 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!3734 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!3735 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!3736 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!3737 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!3738 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!3739 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!3740 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!3741 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!3742 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!3743 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!3744 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!3745 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!3746 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!3747 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!3748 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!3749 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!3750 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!3751 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!3752 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!3753 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!3754 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!3755 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!3756 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!3757 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!3758 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!3759 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!3760 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!3761 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!3762 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!3763 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!3764 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!3765 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!3766 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!3767 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!3768 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!3769 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!3770 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!3771 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!3772 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!3773 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!3774 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!3775 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!3776 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!3777 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!3778 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!3779 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!3780 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!3781 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!3782 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!3783 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!3784 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!3785 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!3786 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!3787 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!3788 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!3789 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!3790 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!3791 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!3792 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!3793 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!3794 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!3795 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!3796 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!3797 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!3798 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!3799 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!3800 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!3801 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!3802 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!3803 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!3804 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!3805 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!3806 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!3807 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!3808 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!3809 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!3810 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!3811 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!3812 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!3813 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!3814 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!3815 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!3816 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!3817 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!3818 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!3819 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!3820 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!3821 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!3822 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!3823 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!3824 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!3825 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!3826 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!3827 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!3828 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!3829 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!3830 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!3831 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!3832 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!3833 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!3834 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!3835 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!3836 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!3837 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!3838 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!3839 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!3840 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!3841 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!3842 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!3843 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!3844 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!3845 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!3846 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!3847 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!3848 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!3849 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!3850 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!3851 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!3852 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!3853 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!3854 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!3855 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!3856 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!3857 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!3858 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!3859 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!3860 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!3861 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!3862 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!3863 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!3864 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!3865 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!3866 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!3867 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!3868 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!3869 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!3870 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!3871 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!3872 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!3873 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!3874 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!3875 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!3876 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!3877 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!3878 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!3879 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!3880 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!3881 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!3882 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!3883 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!3884 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!3885 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!3886 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!3887 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!3888 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!3889 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!3890 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!3891 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!3892 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!3893 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!3894 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!3895 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!3896 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!3897 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!3898 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!3899 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!3900 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!3901 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!3902 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!3903 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!3904 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!3905 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!3906 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!3907 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!3908 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!3909 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!3910 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!3911 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!3912 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!3913 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!3914 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!3915 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!3916 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!3917 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!3918 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!3919 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!3920 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!3921 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!3922 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!3923 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!3924 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!3925 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!3926 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!3927 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!3928 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!3929 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!3930 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!3931 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!3932 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!3933 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!3934 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!3935 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!3936 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!3937 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!3938 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!3939 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!3940 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!3941 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!3942 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!3943 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!3944 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!3945 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!3946 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!3947 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!3948 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!3949 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!3950 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!3951 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!3952 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!3953 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!3954 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!3955 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!3956 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!3957 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!3958 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!3959 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!3960 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!3961 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!3962 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!3963 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!3964 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!3965 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!3966 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!3967 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!3968 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!3969 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!3970 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!3971 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!3972 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!3973 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!3974 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!3975 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!3976 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!3977 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!3978 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!3979 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!3980 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!3981 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!3982 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!3983 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!3984 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!3985 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!3986 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!3987 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!3988 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!3989 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!3990 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!3991 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!3992 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!3993 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!3994 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!3995 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!3996 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!3997 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!3998 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!3999 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!4000 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!4001 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!4002 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!4003 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!4004 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!4005 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!4006 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!4007 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!4008 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!4009 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!4010 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!4011 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!4012 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!4013 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!4014 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!4015 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!4016 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!4017 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!4018 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!4019 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!4020 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!4021 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!4022 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!4023 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!4024 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!4025 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!4026 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!4027 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!4028 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!4029 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!4030 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!4031 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!4032 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!4033 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!4034 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!4035 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!4036 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!4037 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!4038 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!4039 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!4040 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!4041 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!4042 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!4043 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!4044 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!4045 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!4046 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!4047 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!4048 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!4049 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!4050 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!4051 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!4052 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!4053 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!4054 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!4055 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!4056 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!4057 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!4058 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!4059 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!4060 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!4061 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!4062 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!4063 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!4064 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!4065 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!4066 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!4067 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!4068 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!4069 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!4070 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!4071 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!4072 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!4073 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!4074 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!4075 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!4076 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!4077 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!4078 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!4079 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!4080 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!4081 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!4082 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!4083 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!4084 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!4085 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!4086 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!4087 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!4088 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!4089 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!4090 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!4091 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!4092 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!4093 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!4094 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!4095 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!4096 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!4097 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!4098 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!4099 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!4100 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!4101 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!4102 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!4103 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!4104 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!4105 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!4106 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!4107 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!4108 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!4109 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!4110 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!4111 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!4112 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!4113 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!4114 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!4115 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!4116 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!4117 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!4118 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!4119 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!4120 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!4121 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!4122 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!4123 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!4124 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!4125 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!4126 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!4127 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!4128 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!4129 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!4130 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!4131 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!4132 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!4133 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!4134 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!4135 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!4136 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!4137 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!4138 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!4139 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!4140 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!4141 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!4142 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!4143 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!4144 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!4145 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!4146 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!4147 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!4148 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!4149 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!4150 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!4151 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!4152 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!4153 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!4154 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!4155 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!4156 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!4157 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!4158 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!4159 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!4160 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!4161 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!4162 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!4163 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!4164 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!4165 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ref_operator", file: !385, line: 395, baseType: !7, size: 32, elements: !4166)
!4166 = !{!4167, !4168, !4169, !4170, !4171}
!4167 = !DIEnumerator(name: "RO_NULL", value: 0, isUnsigned: true)
!4168 = !DIEnumerator(name: "RO_ARRAY_INDEXING", value: 1, isUnsigned: true)
!4169 = !DIEnumerator(name: "RO_UNARY_STAR", value: 2, isUnsigned: true)
!4170 = !DIEnumerator(name: "RO_ARROW", value: 3, isUnsigned: true)
!4171 = !DIEnumerator(name: "RO_IMPLICIT_CONVERSION", value: 4, isUnsigned: true)
!4172 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !158, line: 58, baseType: !7, size: 32, elements: !4173)
!4173 = !{!4174, !4175, !4176, !4177, !4178, !4179, !4180, !4181, !4182, !4183, !4184}
!4174 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!4175 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!4176 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!4177 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!4178 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!4179 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!4180 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!4181 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!4182 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!4183 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!4184 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!4185 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tls_model", file: !2225, line: 97, baseType: !7, size: 32, elements: !4186)
!4186 = !{!4187, !4188, !4189, !4190, !4191, !4192, !4193}
!4187 = !DIEnumerator(name: "TLS_MODEL_NONE", value: 0, isUnsigned: true)
!4188 = !DIEnumerator(name: "TLS_MODEL_EMULATED", value: 1, isUnsigned: true)
!4189 = !DIEnumerator(name: "TLS_MODEL_REAL", value: 2, isUnsigned: true)
!4190 = !DIEnumerator(name: "TLS_MODEL_GLOBAL_DYNAMIC", value: 2, isUnsigned: true)
!4191 = !DIEnumerator(name: "TLS_MODEL_LOCAL_DYNAMIC", value: 3, isUnsigned: true)
!4192 = !DIEnumerator(name: "TLS_MODEL_INITIAL_EXEC", value: 4, isUnsigned: true)
!4193 = !DIEnumerator(name: "TLS_MODEL_LOCAL_EXEC", value: 5, isUnsigned: true)
!4194 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !158, line: 630, baseType: !7, size: 32, elements: !4195)
!4195 = !{!4196, !4197, !4198, !4199, !4200, !4201, !4202, !4203, !4204, !4205, !4206, !4207, !4208, !4209, !4210, !4211, !4212, !4213, !4214, !4215, !4216, !4217, !4218, !4219, !4220, !4221, !4222, !4223, !4224, !4225, !4226, !4227, !4228, !4229, !4230}
!4196 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!4197 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!4198 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!4199 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!4200 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!4201 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!4202 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!4203 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!4204 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!4205 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!4206 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!4207 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!4208 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!4209 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!4210 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!4211 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!4212 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!4213 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!4214 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!4215 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!4216 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!4217 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!4218 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!4219 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!4220 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!4221 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!4222 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!4223 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!4224 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!4225 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!4226 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!4227 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!4228 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!4229 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!4230 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!4231 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "pragma_omp_clause", file: !650, line: 56, baseType: !7, size: 32, elements: !4232)
!4232 = !{!4233, !4234, !4235, !4236, !4237, !4238, !4239, !4240, !4241, !4242, !4243, !4244, !4245, !4246, !4247, !4248}
!4233 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_NONE", value: 0, isUnsigned: true)
!4234 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_COLLAPSE", value: 1, isUnsigned: true)
!4235 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_COPYIN", value: 2, isUnsigned: true)
!4236 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_COPYPRIVATE", value: 3, isUnsigned: true)
!4237 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_DEFAULT", value: 4, isUnsigned: true)
!4238 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_FIRSTPRIVATE", value: 5, isUnsigned: true)
!4239 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_IF", value: 6, isUnsigned: true)
!4240 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_LASTPRIVATE", value: 7, isUnsigned: true)
!4241 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_NOWAIT", value: 8, isUnsigned: true)
!4242 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!4243 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_ORDERED", value: 10, isUnsigned: true)
!4244 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_PRIVATE", value: 11, isUnsigned: true)
!4245 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_REDUCTION", value: 12, isUnsigned: true)
!4246 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_SCHEDULE", value: 13, isUnsigned: true)
!4247 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_SHARED", value: 14, isUnsigned: true)
!4248 = !DIEnumerator(name: "PRAGMA_OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!4249 = !{!3129, !2321, !2344, !4250, !569, !3401, !4276, !2508, !2866, !391, !7, !190, !649, !2428, !2493, !4277, !2224, !4278, !2354, !2892, !4326}
!4250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4251, size: 64)
!4251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "c_common_identifier", file: !385, line: 261, size: 448, elements: !4252)
!4252 = !{!4253, !4254}
!4253 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4251, file: !385, line: 262, baseType: !2263, size: 192)
!4254 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !4251, file: !385, line: 263, baseType: !4255, size: 256, offset: 192)
!4255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cpp_hashnode", file: !557, line: 644, size: 256, elements: !4256)
!4256 = !{!4257, !4258, !4259, !4260, !4261, !4262, !4263}
!4257 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !4255, file: !557, line: 645, baseType: !2338, size: 128)
!4258 = !DIDerivedType(tag: DW_TAG_member, name: "is_directive", scope: !4255, file: !557, line: 646, baseType: !7, size: 1, offset: 128, flags: DIFlagBitField, extraData: i64 128)
!4259 = !DIDerivedType(tag: DW_TAG_member, name: "directive_index", scope: !4255, file: !557, line: 647, baseType: !7, size: 7, offset: 129, flags: DIFlagBitField, extraData: i64 128)
!4260 = !DIDerivedType(tag: DW_TAG_member, name: "rid_code", scope: !4255, file: !557, line: 650, baseType: !2344, size: 8, offset: 136)
!4261 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4255, file: !557, line: 651, baseType: !7, size: 6, offset: 144, flags: DIFlagBitField, extraData: i64 144)
!4262 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4255, file: !557, line: 652, baseType: !7, size: 10, offset: 150, flags: DIFlagBitField, extraData: i64 144)
!4263 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !4255, file: !557, line: 654, baseType: !4264, size: 64, offset: 192)
!4264 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "_cpp_hashnode_value", file: !557, line: 633, size: 64, elements: !4265)
!4265 = !{!4266, !4270, !4273, !4274}
!4266 = !DIDerivedType(tag: DW_TAG_member, name: "macro", scope: !4264, file: !557, line: 635, baseType: !4267, size: 64)
!4267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4268, size: 64)
!4268 = !DIDerivedType(tag: DW_TAG_typedef, name: "cpp_macro", file: !557, line: 37, baseType: !4269)
!4269 = !DICompositeType(tag: DW_TAG_structure_type, name: "cpp_macro", file: !557, line: 37, flags: DIFlagFwdDecl)
!4270 = !DIDerivedType(tag: DW_TAG_member, name: "answers", scope: !4264, file: !557, line: 637, baseType: !4271, size: 64)
!4271 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4272, size: 64)
!4272 = !DICompositeType(tag: DW_TAG_structure_type, name: "answer", file: !557, line: 41, flags: DIFlagFwdDecl)
!4273 = !DIDerivedType(tag: DW_TAG_member, name: "builtin", scope: !4264, file: !557, line: 639, baseType: !556, size: 32)
!4274 = !DIDerivedType(tag: DW_TAG_member, name: "arg_index", scope: !4264, file: !557, line: 641, baseType: !4275, size: 16)
!4275 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!4276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3403, size: 64)
!4277 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !2867, line: 35, baseType: !2280)
!4278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4279, size: 64)
!4279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "c_type_name", file: !2089, line: 352, size: 128, elements: !4280)
!4280 = !{!4281, !4314}
!4281 = !DIDerivedType(tag: DW_TAG_member, name: "specs", scope: !4279, file: !2089, line: 354, baseType: !4282, size: 64)
!4282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4283, size: 64)
!4283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "c_declspecs", file: !2089, line: 208, size: 448, elements: !4284)
!4284 = !{!4285, !4286, !4287, !4288, !4289, !4290, !4291, !4292, !4293, !4294, !4295, !4296, !4297, !4298, !4299, !4300, !4301, !4302, !4303, !4304, !4305, !4306, !4307, !4308, !4309, !4310, !4311, !4312}
!4285 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4283, file: !2089, line: 213, baseType: !2224, size: 64)
!4286 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !4283, file: !2089, line: 216, baseType: !2224, size: 64, offset: 64)
!4287 = !DIDerivedType(tag: DW_TAG_member, name: "decl_attr", scope: !4283, file: !2089, line: 218, baseType: !2224, size: 64, offset: 128)
!4288 = !DIDerivedType(tag: DW_TAG_member, name: "attrs", scope: !4283, file: !2089, line: 222, baseType: !2224, size: 64, offset: 192)
!4289 = !DIDerivedType(tag: DW_TAG_member, name: "typespec_word", scope: !4283, file: !2089, line: 225, baseType: !2088, size: 32, offset: 256)
!4290 = !DIDerivedType(tag: DW_TAG_member, name: "storage_class", scope: !4283, file: !2089, line: 227, baseType: !2103, size: 32, offset: 288)
!4291 = !DIDerivedType(tag: DW_TAG_member, name: "expr_const_operands", scope: !4283, file: !2089, line: 230, baseType: !7, size: 1, offset: 320, flags: DIFlagBitField, extraData: i64 320)
!4292 = !DIDerivedType(tag: DW_TAG_member, name: "declspecs_seen_p", scope: !4283, file: !2089, line: 232, baseType: !7, size: 1, offset: 321, flags: DIFlagBitField, extraData: i64 320)
!4293 = !DIDerivedType(tag: DW_TAG_member, name: "type_seen_p", scope: !4283, file: !2089, line: 234, baseType: !7, size: 1, offset: 322, flags: DIFlagBitField, extraData: i64 320)
!4294 = !DIDerivedType(tag: DW_TAG_member, name: "non_sc_seen_p", scope: !4283, file: !2089, line: 241, baseType: !7, size: 1, offset: 323, flags: DIFlagBitField, extraData: i64 320)
!4295 = !DIDerivedType(tag: DW_TAG_member, name: "typedef_p", scope: !4283, file: !2089, line: 243, baseType: !7, size: 1, offset: 324, flags: DIFlagBitField, extraData: i64 320)
!4296 = !DIDerivedType(tag: DW_TAG_member, name: "tag_defined_p", scope: !4283, file: !2089, line: 247, baseType: !7, size: 1, offset: 325, flags: DIFlagBitField, extraData: i64 320)
!4297 = !DIDerivedType(tag: DW_TAG_member, name: "explicit_signed_p", scope: !4283, file: !2089, line: 250, baseType: !7, size: 1, offset: 326, flags: DIFlagBitField, extraData: i64 320)
!4298 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_p", scope: !4283, file: !2089, line: 252, baseType: !7, size: 1, offset: 327, flags: DIFlagBitField, extraData: i64 320)
!4299 = !DIDerivedType(tag: DW_TAG_member, name: "default_int_p", scope: !4283, file: !2089, line: 255, baseType: !7, size: 32, offset: 352)
!4300 = !DIDerivedType(tag: DW_TAG_member, name: "long_p", scope: !4283, file: !2089, line: 257, baseType: !7, size: 1, offset: 384, flags: DIFlagBitField, extraData: i64 384)
!4301 = !DIDerivedType(tag: DW_TAG_member, name: "long_long_p", scope: !4283, file: !2089, line: 259, baseType: !7, size: 1, offset: 385, flags: DIFlagBitField, extraData: i64 384)
!4302 = !DIDerivedType(tag: DW_TAG_member, name: "short_p", scope: !4283, file: !2089, line: 261, baseType: !7, size: 1, offset: 386, flags: DIFlagBitField, extraData: i64 384)
!4303 = !DIDerivedType(tag: DW_TAG_member, name: "signed_p", scope: !4283, file: !2089, line: 263, baseType: !7, size: 1, offset: 387, flags: DIFlagBitField, extraData: i64 384)
!4304 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_p", scope: !4283, file: !2089, line: 265, baseType: !7, size: 1, offset: 388, flags: DIFlagBitField, extraData: i64 384)
!4305 = !DIDerivedType(tag: DW_TAG_member, name: "complex_p", scope: !4283, file: !2089, line: 267, baseType: !7, size: 1, offset: 389, flags: DIFlagBitField, extraData: i64 384)
!4306 = !DIDerivedType(tag: DW_TAG_member, name: "inline_p", scope: !4283, file: !2089, line: 269, baseType: !7, size: 1, offset: 390, flags: DIFlagBitField, extraData: i64 384)
!4307 = !DIDerivedType(tag: DW_TAG_member, name: "thread_p", scope: !4283, file: !2089, line: 271, baseType: !7, size: 1, offset: 391, flags: DIFlagBitField, extraData: i64 384)
!4308 = !DIDerivedType(tag: DW_TAG_member, name: "const_p", scope: !4283, file: !2089, line: 273, baseType: !7, size: 1, offset: 392, flags: DIFlagBitField, extraData: i64 384)
!4309 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_p", scope: !4283, file: !2089, line: 275, baseType: !7, size: 1, offset: 393, flags: DIFlagBitField, extraData: i64 384)
!4310 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_p", scope: !4283, file: !2089, line: 277, baseType: !7, size: 1, offset: 394, flags: DIFlagBitField, extraData: i64 384)
!4311 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_p", scope: !4283, file: !2089, line: 279, baseType: !7, size: 1, offset: 395, flags: DIFlagBitField, extraData: i64 384)
!4312 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !4283, file: !2089, line: 281, baseType: !4313, size: 8, offset: 400)
!4313 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_space_t", file: !2225, line: 73, baseType: !2344)
!4314 = !DIDerivedType(tag: DW_TAG_member, name: "declarator", scope: !4279, file: !2089, line: 356, baseType: !4315, size: 64, offset: 64)
!4315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4316, size: 64)
!4316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "c_declarator", file: !2089, line: 319, size: 448, elements: !4317)
!4317 = !{!4318, !4319, !4320, !4321}
!4318 = !DIDerivedType(tag: DW_TAG_member, name: "kind", scope: !4316, file: !2089, line: 321, baseType: !2111, size: 32)
!4319 = !DIDerivedType(tag: DW_TAG_member, name: "declarator", scope: !4316, file: !2089, line: 323, baseType: !4315, size: 64, offset: 64)
!4320 = !DIDerivedType(tag: DW_TAG_member, name: "id_loc", scope: !4316, file: !2089, line: 324, baseType: !2352, size: 32, offset: 128)
!4321 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !4316, file: !2089, line: 348, baseType: !4322, size: 256, offset: 192)
!4322 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4316, file: !2089, line: 325, size: 256, elements: !4323)
!4323 = !{!4324, !4325, !4335, !4343, !4344}
!4324 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !4322, file: !2089, line: 328, baseType: !2224, size: 64)
!4325 = !DIDerivedType(tag: DW_TAG_member, name: "arg_info", scope: !4322, file: !2089, line: 330, baseType: !4326, size: 64)
!4326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4327, size: 64)
!4327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "c_arg_info", file: !2089, line: 299, size: 384, elements: !4328)
!4328 = !{!4329, !4330, !4331, !4332, !4333, !4334}
!4329 = !DIDerivedType(tag: DW_TAG_member, name: "parms", scope: !4327, file: !2089, line: 301, baseType: !2224, size: 64)
!4330 = !DIDerivedType(tag: DW_TAG_member, name: "tags", scope: !4327, file: !2089, line: 303, baseType: !2224, size: 64, offset: 64)
!4331 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !4327, file: !2089, line: 305, baseType: !2224, size: 64, offset: 128)
!4332 = !DIDerivedType(tag: DW_TAG_member, name: "others", scope: !4327, file: !2089, line: 308, baseType: !2224, size: 64, offset: 192)
!4333 = !DIDerivedType(tag: DW_TAG_member, name: "pending_sizes", scope: !4327, file: !2089, line: 313, baseType: !2224, size: 64, offset: 256)
!4334 = !DIDerivedType(tag: DW_TAG_member, name: "had_vla_unspec", scope: !4327, file: !2089, line: 315, baseType: !7, size: 1, offset: 320, flags: DIFlagBitField, extraData: i64 320)
!4335 = !DIDerivedType(tag: DW_TAG_member, name: "array", scope: !4322, file: !2089, line: 343, baseType: !4336, size: 256)
!4336 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !4322, file: !2089, line: 332, size: 256, elements: !4337)
!4337 = !{!4338, !4339, !4340, !4341, !4342}
!4338 = !DIDerivedType(tag: DW_TAG_member, name: "dimen", scope: !4336, file: !2089, line: 334, baseType: !2224, size: 64)
!4339 = !DIDerivedType(tag: DW_TAG_member, name: "quals", scope: !4336, file: !2089, line: 336, baseType: !2321, size: 32, offset: 64)
!4340 = !DIDerivedType(tag: DW_TAG_member, name: "attrs", scope: !4336, file: !2089, line: 338, baseType: !2224, size: 64, offset: 128)
!4341 = !DIDerivedType(tag: DW_TAG_member, name: "static_p", scope: !4336, file: !2089, line: 340, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!4342 = !DIDerivedType(tag: DW_TAG_member, name: "vla_unspec_p", scope: !4336, file: !2089, line: 342, baseType: !7, size: 1, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!4343 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_quals", scope: !4322, file: !2089, line: 345, baseType: !2321, size: 32)
!4344 = !DIDerivedType(tag: DW_TAG_member, name: "attrs", scope: !4322, file: !2089, line: 347, baseType: !2224, size: 64)
!4345 = !{!4346, !0}
!4346 = !DIGlobalVariableExpression(var: !4347, expr: !DIExpression())
!4347 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_c_parser_h", scope: !2, file: !4348, line: 73, type: !4349, isLocal: false, isDefinition: true)
!4348 = !DIFile(filename: "./gt-c-parser.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4349 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4350, size: 640, elements: !2472)
!4350 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4351)
!4351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !4352, line: 69, size: 320, elements: !4353)
!4352 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4353 = !{!4354, !4355, !4356, !4357, !4359}
!4354 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4351, file: !4352, line: 70, baseType: !2508, size: 64)
!4355 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !4351, file: !4352, line: 71, baseType: !2866, size: 64, offset: 64)
!4356 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !4351, file: !4352, line: 72, baseType: !2866, size: 64, offset: 128)
!4357 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !4351, file: !4352, line: 73, baseType: !4358, size: 64, offset: 192)
!4358 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !4352, line: 65, baseType: !2860)
!4359 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !4351, file: !4352, line: 74, baseType: !4358, size: 64, offset: 256)
!4360 = !{i32 7, !"Dwarf Version", i32 4}
!4361 = !{i32 2, !"Debug Info Version", i32 3}
!4362 = !{i32 1, !"wchar_size", i32 4}
!4363 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!4364 = distinct !DISubprogram(name: "c_parse_init", scope: !3, file: !3, line: 67, type: !4365, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4365 = !DISubroutineType(types: !4366)
!4366 = !{null}
!4367 = !DILocalVariable(name: "i", scope: !4364, file: !3, line: 71, type: !7)
!4368 = !DILocation(line: 71, column: 16, scope: !4364)
!4369 = !DILocalVariable(name: "id", scope: !4364, file: !3, line: 72, type: !2224)
!4370 = !DILocation(line: 72, column: 8, scope: !4364)
!4371 = !DILocalVariable(name: "mask", scope: !4364, file: !3, line: 73, type: !2321)
!4372 = !DILocation(line: 73, column: 7, scope: !4364)
!4373 = !DILocation(line: 79, column: 8, scope: !4364)
!4374 = !DILocation(line: 80, column: 8, scope: !4375)
!4375 = distinct !DILexicalBlock(scope: !4364, file: !3, line: 80, column: 7)
!4376 = !DILocation(line: 80, column: 7, scope: !4364)
!4377 = !DILocation(line: 81, column: 10, scope: !4375)
!4378 = !DILocation(line: 81, column: 5, scope: !4375)
!4379 = !DILocation(line: 82, column: 7, scope: !4380)
!4380 = distinct !DILexicalBlock(scope: !4364, file: !3, line: 82, column: 7)
!4381 = !DILocation(line: 82, column: 7, scope: !4364)
!4382 = !DILocation(line: 84, column: 12, scope: !4383)
!4383 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 83, column: 5)
!4384 = !DILocation(line: 85, column: 12, scope: !4385)
!4385 = distinct !DILexicalBlock(scope: !4383, file: !3, line: 85, column: 11)
!4386 = !DILocation(line: 85, column: 11, scope: !4383)
!4387 = !DILocation(line: 86, column: 7, scope: !4385)
!4388 = !DILocation(line: 86, column: 2, scope: !4385)
!4389 = !DILocation(line: 87, column: 5, scope: !4383)
!4390 = !DILocation(line: 88, column: 8, scope: !4391)
!4391 = distinct !DILexicalBlock(scope: !4364, file: !3, line: 88, column: 7)
!4392 = !DILocation(line: 88, column: 7, scope: !4364)
!4393 = !DILocation(line: 89, column: 10, scope: !4391)
!4394 = !DILocation(line: 89, column: 5, scope: !4391)
!4395 = !DILocation(line: 91, column: 17, scope: !4364)
!4396 = !DILocation(line: 91, column: 15, scope: !4364)
!4397 = !DILocation(line: 92, column: 10, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4364, file: !3, line: 92, column: 3)
!4399 = !DILocation(line: 92, column: 8, scope: !4398)
!4400 = !DILocation(line: 92, column: 15, scope: !4401)
!4401 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 92, column: 3)
!4402 = !DILocation(line: 92, column: 19, scope: !4401)
!4403 = !DILocation(line: 92, column: 17, scope: !4401)
!4404 = !DILocation(line: 92, column: 3, scope: !4398)
!4405 = !DILocation(line: 96, column: 29, scope: !4406)
!4406 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 96, column: 11)
!4407 = distinct !DILexicalBlock(scope: !4401, file: !3, line: 93, column: 5)
!4408 = !DILocation(line: 96, column: 11, scope: !4406)
!4409 = !DILocation(line: 96, column: 32, scope: !4406)
!4410 = !DILocation(line: 96, column: 42, scope: !4406)
!4411 = !DILocation(line: 96, column: 40, scope: !4406)
!4412 = !DILocation(line: 96, column: 11, scope: !4407)
!4413 = !DILocation(line: 98, column: 8, scope: !4414)
!4414 = distinct !DILexicalBlock(scope: !4415, file: !3, line: 98, column: 8)
!4415 = distinct !DILexicalBlock(scope: !4406, file: !3, line: 97, column: 2)
!4416 = !DILocation(line: 99, column: 8, scope: !4414)
!4417 = !DILocation(line: 99, column: 30, scope: !4414)
!4418 = !DILocation(line: 99, column: 12, scope: !4414)
!4419 = !DILocation(line: 99, column: 33, scope: !4414)
!4420 = !DILocation(line: 99, column: 41, scope: !4414)
!4421 = !DILocation(line: 98, column: 8, scope: !4415)
!4422 = !DILocation(line: 101, column: 47, scope: !4423)
!4423 = distinct !DILexicalBlock(scope: !4414, file: !3, line: 100, column: 6)
!4424 = !DILocation(line: 101, column: 29, scope: !4423)
!4425 = !DILocation(line: 101, column: 50, scope: !4423)
!4426 = !DILocation(line: 101, column: 13, scope: !4423)
!4427 = !DILocation(line: 101, column: 11, scope: !4423)
!4428 = !DILocation(line: 102, column: 8, scope: !4423)
!4429 = !DILocation(line: 103, column: 8, scope: !4423)
!4430 = !DILocation(line: 103, column: 32, scope: !4423)
!4431 = !DILocation(line: 104, column: 6, scope: !4423)
!4432 = !DILocation(line: 105, column: 4, scope: !4415)
!4433 = !DILocation(line: 108, column: 46, scope: !4407)
!4434 = !DILocation(line: 108, column: 28, scope: !4407)
!4435 = !DILocation(line: 108, column: 49, scope: !4407)
!4436 = !DILocation(line: 108, column: 12, scope: !4407)
!4437 = !DILocation(line: 108, column: 10, scope: !4407)
!4438 = !DILocation(line: 109, column: 7, scope: !4407)
!4439 = !DILocation(line: 110, column: 7, scope: !4407)
!4440 = !DILocation(line: 110, column: 31, scope: !4407)
!4441 = !DILocation(line: 111, column: 54, scope: !4407)
!4442 = !DILocation(line: 111, column: 7, scope: !4407)
!4443 = !DILocation(line: 111, column: 44, scope: !4407)
!4444 = !DILocation(line: 111, column: 26, scope: !4407)
!4445 = !DILocation(line: 111, column: 47, scope: !4407)
!4446 = !DILocation(line: 111, column: 52, scope: !4407)
!4447 = !DILocation(line: 112, column: 5, scope: !4407)
!4448 = !DILocation(line: 92, column: 43, scope: !4401)
!4449 = !DILocation(line: 92, column: 3, scope: !4401)
!4450 = distinct !{!4450, !4404, !4451}
!4451 = !DILocation(line: 112, column: 5, scope: !4398)
!4452 = !DILocation(line: 113, column: 1, scope: !4364)
!4453 = distinct !DISubprogram(name: "pragma_lex", scope: !3, file: !3, line: 7064, type: !4454, scopeLine: 7065, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4454 = !DISubroutineType(types: !4455)
!4455 = !{!569, !3129}
!4456 = !DILocalVariable(name: "value", arg: 1, scope: !4453, file: !3, line: 7064, type: !3129)
!4457 = !DILocation(line: 7064, column: 19, scope: !4453)
!4458 = !DILocalVariable(name: "tok", scope: !4453, file: !3, line: 7066, type: !4459)
!4459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3407, size: 64)
!4460 = !DILocation(line: 7066, column: 12, scope: !4453)
!4461 = !DILocation(line: 7066, column: 39, scope: !4453)
!4462 = !DILocation(line: 7066, column: 18, scope: !4453)
!4463 = !DILocalVariable(name: "ret", scope: !4453, file: !3, line: 7067, type: !569)
!4464 = !DILocation(line: 7067, column: 18, scope: !4453)
!4465 = !DILocation(line: 7067, column: 24, scope: !4453)
!4466 = !DILocation(line: 7067, column: 29, scope: !4453)
!4467 = !DILocation(line: 7069, column: 12, scope: !4453)
!4468 = !DILocation(line: 7069, column: 17, scope: !4453)
!4469 = !DILocation(line: 7069, column: 4, scope: !4453)
!4470 = !DILocation(line: 7069, column: 10, scope: !4453)
!4471 = !DILocation(line: 7070, column: 7, scope: !4472)
!4472 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 7070, column: 7)
!4473 = !DILocation(line: 7070, column: 11, scope: !4472)
!4474 = !DILocation(line: 7070, column: 29, scope: !4472)
!4475 = !DILocation(line: 7070, column: 32, scope: !4472)
!4476 = !DILocation(line: 7070, column: 36, scope: !4472)
!4477 = !DILocation(line: 7070, column: 7, scope: !4453)
!4478 = !DILocation(line: 7071, column: 9, scope: !4472)
!4479 = !DILocation(line: 7071, column: 5, scope: !4472)
!4480 = !DILocation(line: 7074, column: 11, scope: !4481)
!4481 = distinct !DILexicalBlock(scope: !4482, file: !3, line: 7074, column: 11)
!4482 = distinct !DILexicalBlock(scope: !4472, file: !3, line: 7073, column: 5)
!4483 = !DILocation(line: 7074, column: 15, scope: !4481)
!4484 = !DILocation(line: 7074, column: 11, scope: !4482)
!4485 = !DILocation(line: 7075, column: 6, scope: !4481)
!4486 = !DILocation(line: 7075, column: 2, scope: !4481)
!4487 = !DILocation(line: 7076, column: 31, scope: !4482)
!4488 = !DILocation(line: 7076, column: 7, scope: !4482)
!4489 = !DILocation(line: 7079, column: 10, scope: !4453)
!4490 = !DILocation(line: 7079, column: 3, scope: !4453)
!4491 = distinct !DISubprogram(name: "c_parser_peek_token", scope: !3, file: !3, line: 319, type: !4492, scopeLine: 320, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4492 = !DISubroutineType(types: !4493)
!4493 = !{!4459, !3401}
!4494 = !DILocalVariable(name: "parser", arg: 1, scope: !4491, file: !3, line: 319, type: !3401)
!4495 = !DILocation(line: 319, column: 32, scope: !4491)
!4496 = !DILocation(line: 321, column: 7, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4491, file: !3, line: 321, column: 7)
!4498 = !DILocation(line: 321, column: 15, scope: !4497)
!4499 = !DILocation(line: 321, column: 28, scope: !4497)
!4500 = !DILocation(line: 321, column: 7, scope: !4491)
!4501 = !DILocation(line: 323, column: 24, scope: !4502)
!4502 = distinct !DILexicalBlock(scope: !4497, file: !3, line: 322, column: 5)
!4503 = !DILocation(line: 323, column: 33, scope: !4502)
!4504 = !DILocation(line: 323, column: 41, scope: !4502)
!4505 = !DILocation(line: 323, column: 7, scope: !4502)
!4506 = !DILocation(line: 324, column: 7, scope: !4502)
!4507 = !DILocation(line: 324, column: 15, scope: !4502)
!4508 = !DILocation(line: 324, column: 28, scope: !4502)
!4509 = !DILocation(line: 325, column: 5, scope: !4502)
!4510 = !DILocation(line: 326, column: 11, scope: !4491)
!4511 = !DILocation(line: 326, column: 19, scope: !4491)
!4512 = !DILocation(line: 326, column: 3, scope: !4491)
!4513 = distinct !DISubprogram(name: "c_parser_consume_token", scope: !3, file: !3, line: 526, type: !4514, scopeLine: 527, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4514 = !DISubroutineType(types: !4515)
!4515 = !{null, !3401}
!4516 = !DILocalVariable(name: "parser", arg: 1, scope: !4513, file: !3, line: 526, type: !3401)
!4517 = !DILocation(line: 526, column: 35, scope: !4513)
!4518 = !DILocation(line: 528, column: 3, scope: !4513)
!4519 = !DILocation(line: 529, column: 3, scope: !4513)
!4520 = !DILocation(line: 530, column: 3, scope: !4513)
!4521 = !DILocation(line: 531, column: 3, scope: !4513)
!4522 = !DILocation(line: 532, column: 7, scope: !4523)
!4523 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 532, column: 7)
!4524 = !DILocation(line: 532, column: 15, scope: !4523)
!4525 = !DILocation(line: 532, column: 28, scope: !4523)
!4526 = !DILocation(line: 532, column: 7, scope: !4513)
!4527 = !DILocation(line: 533, column: 5, scope: !4523)
!4528 = !DILocation(line: 533, column: 13, scope: !4523)
!4529 = !DILocation(line: 533, column: 25, scope: !4523)
!4530 = !DILocation(line: 533, column: 33, scope: !4523)
!4531 = !DILocation(line: 534, column: 3, scope: !4513)
!4532 = !DILocation(line: 534, column: 11, scope: !4513)
!4533 = !DILocation(line: 534, column: 23, scope: !4513)
!4534 = !DILocation(line: 535, column: 1, scope: !4513)
!4535 = distinct !DISubprogram(name: "c_parse_file", scope: !3, file: !3, line: 8699, type: !4365, scopeLine: 8700, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4536 = !DILocalVariable(name: "tparser", scope: !4535, file: !3, line: 8704, type: !3402)
!4537 = !DILocation(line: 8704, column: 12, scope: !4535)
!4538 = !DILocation(line: 8706, column: 3, scope: !4535)
!4539 = !DILocation(line: 8707, column: 14, scope: !4535)
!4540 = !DILocation(line: 8709, column: 7, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4535, file: !3, line: 8709, column: 7)
!4542 = !DILocation(line: 8709, column: 39, scope: !4541)
!4543 = !DILocation(line: 8709, column: 51, scope: !4541)
!4544 = !DILocation(line: 8709, column: 7, scope: !4535)
!4545 = !DILocation(line: 8710, column: 5, scope: !4541)
!4546 = !DILocation(line: 8712, column: 16, scope: !4535)
!4547 = !DILocation(line: 8712, column: 14, scope: !4535)
!4548 = !DILocation(line: 8713, column: 4, scope: !4535)
!4549 = !DILocation(line: 8713, column: 17, scope: !4535)
!4550 = !DILocation(line: 8716, column: 7, scope: !4551)
!4551 = distinct !DILexicalBlock(scope: !4535, file: !3, line: 8716, column: 7)
!4552 = !DILocation(line: 8716, column: 7, scope: !4535)
!4553 = !DILocation(line: 8717, column: 5, scope: !4551)
!4554 = !DILocation(line: 8719, column: 30, scope: !4535)
!4555 = !DILocation(line: 8719, column: 3, scope: !4535)
!4556 = !DILocation(line: 8720, column: 14, scope: !4535)
!4557 = !DILocation(line: 8721, column: 1, scope: !4535)
!4558 = distinct !DISubprogram(name: "c_parser_pragma_pch_preprocess", scope: !3, file: !3, line: 7083, type: !4514, scopeLine: 7084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4559 = !DILocalVariable(name: "parser", arg: 1, scope: !4558, file: !3, line: 7083, type: !3401)
!4560 = !DILocation(line: 7083, column: 43, scope: !4558)
!4561 = !DILocalVariable(name: "name", scope: !4558, file: !3, line: 7085, type: !2224)
!4562 = !DILocation(line: 7085, column: 8, scope: !4558)
!4563 = !DILocation(line: 7087, column: 28, scope: !4558)
!4564 = !DILocation(line: 7087, column: 3, scope: !4558)
!4565 = !DILocation(line: 7088, column: 31, scope: !4566)
!4566 = distinct !DILexicalBlock(scope: !4558, file: !3, line: 7088, column: 7)
!4567 = !DILocation(line: 7088, column: 7, scope: !4566)
!4568 = !DILocation(line: 7088, column: 7, scope: !4558)
!4569 = !DILocation(line: 7090, column: 35, scope: !4570)
!4570 = distinct !DILexicalBlock(scope: !4566, file: !3, line: 7089, column: 5)
!4571 = !DILocation(line: 7090, column: 14, scope: !4570)
!4572 = !DILocation(line: 7090, column: 44, scope: !4570)
!4573 = !DILocation(line: 7090, column: 12, scope: !4570)
!4574 = !DILocation(line: 7091, column: 31, scope: !4570)
!4575 = !DILocation(line: 7091, column: 7, scope: !4570)
!4576 = !DILocation(line: 7092, column: 5, scope: !4570)
!4577 = !DILocation(line: 7094, column: 21, scope: !4566)
!4578 = !DILocation(line: 7094, column: 5, scope: !4566)
!4579 = !DILocation(line: 7095, column: 32, scope: !4558)
!4580 = !DILocation(line: 7095, column: 3, scope: !4558)
!4581 = !DILocation(line: 7097, column: 7, scope: !4582)
!4582 = distinct !DILexicalBlock(scope: !4558, file: !3, line: 7097, column: 7)
!4583 = !DILocation(line: 7097, column: 7, scope: !4558)
!4584 = !DILocation(line: 7098, column: 26, scope: !4582)
!4585 = !DILocation(line: 7098, column: 36, scope: !4582)
!4586 = !DILocation(line: 7098, column: 5, scope: !4582)
!4587 = !DILocation(line: 7099, column: 1, scope: !4558)
!4588 = distinct !DISubprogram(name: "c_parser_translation_unit", scope: !3, file: !3, line: 991, type: !4514, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4589 = !DILocalVariable(name: "parser", arg: 1, scope: !4588, file: !3, line: 991, type: !3401)
!4590 = !DILocation(line: 991, column: 38, scope: !4588)
!4591 = !DILocation(line: 993, column: 31, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 993, column: 7)
!4593 = !DILocation(line: 993, column: 7, scope: !4592)
!4594 = !DILocation(line: 993, column: 7, scope: !4588)
!4595 = !DILocation(line: 995, column: 37, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4592, file: !3, line: 994, column: 5)
!4597 = !DILocation(line: 995, column: 16, scope: !4596)
!4598 = !DILocation(line: 995, column: 46, scope: !4596)
!4599 = !DILocation(line: 995, column: 7, scope: !4596)
!4600 = !DILocation(line: 997, column: 5, scope: !4596)
!4601 = !DILocalVariable(name: "obstack_position", scope: !4602, file: !3, line: 1000, type: !2508)
!4602 = distinct !DILexicalBlock(scope: !4592, file: !3, line: 999, column: 5)
!4603 = !DILocation(line: 1000, column: 13, scope: !4602)
!4604 = !DILocation(line: 1000, column: 32, scope: !4602)
!4605 = !DILocation(line: 1001, column: 7, scope: !4602)
!4606 = !DILocation(line: 1002, column: 7, scope: !4602)
!4607 = !DILocation(line: 1004, column: 4, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 1003, column: 2)
!4609 = !DILocation(line: 1005, column: 35, scope: !4608)
!4610 = !DILocation(line: 1005, column: 4, scope: !4608)
!4611 = !DILocation(line: 1006, column: 4, scope: !4608)
!4612 = !DILocation(line: 1007, column: 2, scope: !4608)
!4613 = !DILocation(line: 1008, column: 42, scope: !4602)
!4614 = !DILocation(line: 1008, column: 14, scope: !4602)
!4615 = distinct !{!4615, !4606, !4616}
!4616 = !DILocation(line: 1008, column: 58, scope: !4602)
!4617 = !DILocation(line: 1010, column: 1, scope: !4588)
!4618 = distinct !DISubprogram(name: "gt_ggc_mx_c_parser", scope: !4348, file: !4348, line: 23, type: !2861, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4619 = !DILocalVariable(name: "x_p", arg: 1, scope: !4618, file: !4348, line: 23, type: !2508)
!4620 = !DILocation(line: 23, column: 27, scope: !4618)
!4621 = !DILocalVariable(name: "x", scope: !4618, file: !4348, line: 25, type: !4622)
!4622 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4276)
!4623 = !DILocation(line: 25, column: 27, scope: !4618)
!4624 = !DILocation(line: 25, column: 50, scope: !4618)
!4625 = !DILocation(line: 25, column: 31, scope: !4618)
!4626 = !DILocation(line: 26, column: 7, scope: !4627)
!4627 = distinct !DILexicalBlock(scope: !4618, file: !4348, line: 26, column: 7)
!4628 = !DILocation(line: 26, column: 7, scope: !4618)
!4629 = !DILocalVariable(name: "i0", scope: !4630, file: !4348, line: 29, type: !2866)
!4630 = distinct !DILexicalBlock(scope: !4631, file: !4348, line: 28, column: 7)
!4631 = distinct !DILexicalBlock(scope: !4627, file: !4348, line: 27, column: 5)
!4632 = !DILocation(line: 29, column: 16, scope: !4630)
!4633 = !DILocalVariable(name: "l0", scope: !4630, file: !4348, line: 30, type: !2866)
!4634 = !DILocation(line: 30, column: 16, scope: !4630)
!4635 = !DILocation(line: 31, column: 17, scope: !4636)
!4636 = distinct !DILexicalBlock(scope: !4630, file: !4348, line: 31, column: 9)
!4637 = !DILocation(line: 31, column: 14, scope: !4636)
!4638 = !DILocation(line: 31, column: 22, scope: !4639)
!4639 = distinct !DILexicalBlock(scope: !4636, file: !4348, line: 31, column: 9)
!4640 = !DILocation(line: 31, column: 28, scope: !4639)
!4641 = !DILocation(line: 31, column: 25, scope: !4639)
!4642 = !DILocation(line: 31, column: 9, scope: !4636)
!4643 = !DILocation(line: 32, column: 11, scope: !4644)
!4644 = distinct !DILexicalBlock(scope: !4639, file: !4348, line: 31, column: 38)
!4645 = !DILocation(line: 32, column: 11, scope: !4646)
!4646 = distinct !DILexicalBlock(scope: !4647, file: !4348, line: 32, column: 11)
!4647 = distinct !DILexicalBlock(scope: !4644, file: !4348, line: 32, column: 11)
!4648 = !DILocation(line: 32, column: 11, scope: !4647)
!4649 = !DILocation(line: 33, column: 9, scope: !4644)
!4650 = !DILocation(line: 31, column: 34, scope: !4639)
!4651 = !DILocation(line: 31, column: 9, scope: !4639)
!4652 = distinct !{!4652, !4642, !4653}
!4653 = !DILocation(line: 33, column: 9, scope: !4636)
!4654 = !DILocation(line: 35, column: 5, scope: !4631)
!4655 = !DILocation(line: 36, column: 1, scope: !4618)
!4656 = distinct !DISubprogram(name: "gt_pch_nx_c_parser", scope: !4348, file: !4348, line: 39, type: !2861, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4657 = !DILocalVariable(name: "x_p", arg: 1, scope: !4656, file: !4348, line: 39, type: !2508)
!4658 = !DILocation(line: 39, column: 27, scope: !4656)
!4659 = !DILocalVariable(name: "x", scope: !4656, file: !4348, line: 41, type: !4622)
!4660 = !DILocation(line: 41, column: 27, scope: !4656)
!4661 = !DILocation(line: 41, column: 50, scope: !4656)
!4662 = !DILocation(line: 41, column: 31, scope: !4656)
!4663 = !DILocation(line: 42, column: 27, scope: !4664)
!4664 = distinct !DILexicalBlock(scope: !4656, file: !4348, line: 42, column: 7)
!4665 = !DILocation(line: 42, column: 30, scope: !4664)
!4666 = !DILocation(line: 42, column: 7, scope: !4664)
!4667 = !DILocation(line: 42, column: 7, scope: !4656)
!4668 = !DILocalVariable(name: "i0", scope: !4669, file: !4348, line: 45, type: !2866)
!4669 = distinct !DILexicalBlock(scope: !4670, file: !4348, line: 44, column: 7)
!4670 = distinct !DILexicalBlock(scope: !4664, file: !4348, line: 43, column: 5)
!4671 = !DILocation(line: 45, column: 16, scope: !4669)
!4672 = !DILocalVariable(name: "l0", scope: !4669, file: !4348, line: 46, type: !2866)
!4673 = !DILocation(line: 46, column: 16, scope: !4669)
!4674 = !DILocation(line: 47, column: 17, scope: !4675)
!4675 = distinct !DILexicalBlock(scope: !4669, file: !4348, line: 47, column: 9)
!4676 = !DILocation(line: 47, column: 14, scope: !4675)
!4677 = !DILocation(line: 47, column: 22, scope: !4678)
!4678 = distinct !DILexicalBlock(scope: !4675, file: !4348, line: 47, column: 9)
!4679 = !DILocation(line: 47, column: 28, scope: !4678)
!4680 = !DILocation(line: 47, column: 25, scope: !4678)
!4681 = !DILocation(line: 47, column: 9, scope: !4675)
!4682 = !DILocation(line: 48, column: 11, scope: !4683)
!4683 = distinct !DILexicalBlock(scope: !4678, file: !4348, line: 47, column: 38)
!4684 = !DILocation(line: 48, column: 11, scope: !4685)
!4685 = distinct !DILexicalBlock(scope: !4686, file: !4348, line: 48, column: 11)
!4686 = distinct !DILexicalBlock(scope: !4683, file: !4348, line: 48, column: 11)
!4687 = !DILocation(line: 48, column: 11, scope: !4686)
!4688 = !DILocation(line: 49, column: 9, scope: !4683)
!4689 = !DILocation(line: 47, column: 34, scope: !4678)
!4690 = !DILocation(line: 47, column: 9, scope: !4678)
!4691 = distinct !{!4691, !4681, !4692}
!4692 = !DILocation(line: 49, column: 9, scope: !4675)
!4693 = !DILocation(line: 51, column: 5, scope: !4670)
!4694 = !DILocation(line: 52, column: 1, scope: !4656)
!4695 = distinct !DISubprogram(name: "gt_pch_p_8c_parser", scope: !4348, file: !4348, line: 55, type: !4696, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4696 = !DISubroutineType(types: !4697)
!4697 = !{null, !2508, !2508, !4698, !2508}
!4698 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_operator", file: !4352, line: 38, baseType: !2887)
!4699 = !DILocalVariable(name: "this_obj", arg: 1, scope: !4695, file: !4348, line: 55, type: !2508)
!4700 = !DILocation(line: 55, column: 44, scope: !4695)
!4701 = !DILocalVariable(name: "x_p", arg: 2, scope: !4695, file: !4348, line: 56, type: !2508)
!4702 = !DILocation(line: 56, column: 8, scope: !4695)
!4703 = !DILocalVariable(name: "op", arg: 3, scope: !4695, file: !4348, line: 57, type: !4698)
!4704 = !DILocation(line: 57, column: 39, scope: !4695)
!4705 = !DILocalVariable(name: "cookie", arg: 4, scope: !4695, file: !4348, line: 58, type: !2508)
!4706 = !DILocation(line: 58, column: 25, scope: !4695)
!4707 = !DILocalVariable(name: "x", scope: !4695, file: !4348, line: 60, type: !4622)
!4708 = !DILocation(line: 60, column: 27, scope: !4695)
!4709 = !DILocation(line: 60, column: 67, scope: !4695)
!4710 = !DILocation(line: 60, column: 48, scope: !4695)
!4711 = !DILocalVariable(name: "i0", scope: !4712, file: !4348, line: 62, type: !2866)
!4712 = distinct !DILexicalBlock(scope: !4695, file: !4348, line: 61, column: 3)
!4713 = !DILocation(line: 62, column: 12, scope: !4712)
!4714 = !DILocalVariable(name: "l0", scope: !4712, file: !4348, line: 63, type: !2866)
!4715 = !DILocation(line: 63, column: 12, scope: !4712)
!4716 = !DILocation(line: 64, column: 13, scope: !4717)
!4717 = distinct !DILexicalBlock(scope: !4712, file: !4348, line: 64, column: 5)
!4718 = !DILocation(line: 64, column: 10, scope: !4717)
!4719 = !DILocation(line: 64, column: 18, scope: !4720)
!4720 = distinct !DILexicalBlock(scope: !4717, file: !4348, line: 64, column: 5)
!4721 = !DILocation(line: 64, column: 24, scope: !4720)
!4722 = !DILocation(line: 64, column: 21, scope: !4720)
!4723 = !DILocation(line: 64, column: 5, scope: !4717)
!4724 = !DILocation(line: 65, column: 20, scope: !4725)
!4725 = distinct !DILexicalBlock(scope: !4726, file: !4348, line: 65, column: 11)
!4726 = distinct !DILexicalBlock(scope: !4720, file: !4348, line: 64, column: 34)
!4727 = !DILocation(line: 65, column: 11, scope: !4725)
!4728 = !DILocation(line: 65, column: 26, scope: !4725)
!4729 = !DILocation(line: 65, column: 23, scope: !4725)
!4730 = !DILocation(line: 65, column: 11, scope: !4726)
!4731 = !DILocation(line: 66, column: 9, scope: !4725)
!4732 = !DILocation(line: 66, column: 17, scope: !4725)
!4733 = !DILocation(line: 66, column: 20, scope: !4725)
!4734 = !DILocation(line: 66, column: 27, scope: !4725)
!4735 = !DILocation(line: 66, column: 15, scope: !4725)
!4736 = !DILocation(line: 66, column: 31, scope: !4725)
!4737 = !DILocation(line: 66, column: 13, scope: !4725)
!4738 = !DILocation(line: 66, column: 39, scope: !4725)
!4739 = !DILocation(line: 67, column: 5, scope: !4726)
!4740 = !DILocation(line: 64, column: 30, scope: !4720)
!4741 = !DILocation(line: 64, column: 5, scope: !4720)
!4742 = distinct !{!4742, !4723, !4743}
!4743 = !DILocation(line: 67, column: 5, scope: !4717)
!4744 = !DILocation(line: 69, column: 1, scope: !4695)
!4745 = distinct !DISubprogram(name: "c_lex_one_token", scope: !3, file: !3, line: 203, type: !4746, scopeLine: 204, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4746 = !DISubroutineType(types: !4747)
!4747 = !{null, !3401, !4459}
!4748 = !DILocalVariable(name: "parser", arg: 1, scope: !4745, file: !3, line: 203, type: !3401)
!4749 = !DILocation(line: 203, column: 28, scope: !4745)
!4750 = !DILocalVariable(name: "token", arg: 2, scope: !4745, file: !3, line: 203, type: !4459)
!4751 = !DILocation(line: 203, column: 45, scope: !4745)
!4752 = !DILocation(line: 205, column: 3, scope: !4745)
!4753 = !DILocation(line: 205, column: 3, scope: !4754)
!4754 = distinct !DILexicalBlock(scope: !4755, file: !3, line: 205, column: 3)
!4755 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 205, column: 3)
!4756 = !DILocation(line: 205, column: 3, scope: !4755)
!4757 = !DILocation(line: 207, column: 36, scope: !4745)
!4758 = !DILocation(line: 207, column: 43, scope: !4745)
!4759 = !DILocation(line: 207, column: 51, scope: !4745)
!4760 = !DILocation(line: 207, column: 58, scope: !4745)
!4761 = !DILocation(line: 208, column: 8, scope: !4745)
!4762 = !DILocation(line: 208, column: 16, scope: !4745)
!4763 = !DILocation(line: 207, column: 17, scope: !4745)
!4764 = !DILocation(line: 207, column: 3, scope: !4745)
!4765 = !DILocation(line: 207, column: 10, scope: !4745)
!4766 = !DILocation(line: 207, column: 15, scope: !4745)
!4767 = !DILocation(line: 210, column: 3, scope: !4745)
!4768 = !DILocation(line: 210, column: 10, scope: !4745)
!4769 = !DILocation(line: 210, column: 18, scope: !4745)
!4770 = !DILocation(line: 211, column: 3, scope: !4745)
!4771 = !DILocation(line: 211, column: 10, scope: !4745)
!4772 = !DILocation(line: 211, column: 18, scope: !4745)
!4773 = !DILocation(line: 212, column: 3, scope: !4745)
!4774 = !DILocation(line: 212, column: 10, scope: !4745)
!4775 = !DILocation(line: 212, column: 22, scope: !4745)
!4776 = !DILocation(line: 214, column: 11, scope: !4745)
!4777 = !DILocation(line: 214, column: 18, scope: !4745)
!4778 = !DILocation(line: 214, column: 3, scope: !4745)
!4779 = !DILocalVariable(name: "decl", scope: !4780, file: !3, line: 218, type: !2224)
!4780 = distinct !DILexicalBlock(scope: !4781, file: !3, line: 217, column: 7)
!4781 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 215, column: 5)
!4782 = !DILocation(line: 218, column: 7, scope: !4780)
!4783 = !DILocalVariable(name: "objc_force_identifier", scope: !4780, file: !3, line: 220, type: !2344)
!4784 = !DILocation(line: 220, column: 7, scope: !4780)
!4785 = !DILocation(line: 220, column: 31, scope: !4780)
!4786 = !DILocation(line: 220, column: 39, scope: !4780)
!4787 = !DILocation(line: 221, column: 6, scope: !4788)
!4788 = distinct !DILexicalBlock(scope: !4780, file: !3, line: 221, column: 6)
!4789 = !DILocation(line: 221, column: 6, scope: !4780)
!4790 = !DILocation(line: 222, column: 4, scope: !4788)
!4791 = !DILocation(line: 222, column: 12, scope: !4788)
!4792 = !DILocation(line: 222, column: 37, scope: !4788)
!4793 = !DILocation(line: 224, column: 6, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4780, file: !3, line: 224, column: 6)
!4795 = !DILocation(line: 224, column: 6, scope: !4780)
!4796 = !DILocalVariable(name: "rid_code", scope: !4797, file: !3, line: 226, type: !391)
!4797 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 225, column: 4)
!4798 = !DILocation(line: 226, column: 15, scope: !4797)
!4799 = !DILocation(line: 226, column: 26, scope: !4797)
!4800 = !DILocation(line: 228, column: 10, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4797, file: !3, line: 228, column: 10)
!4802 = !DILocation(line: 228, column: 19, scope: !4801)
!4803 = !DILocation(line: 228, column: 10, scope: !4797)
!4804 = !DILocation(line: 230, column: 15, scope: !4805)
!4805 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 229, column: 8)
!4806 = !DILocation(line: 230, column: 22, scope: !4805)
!4807 = !DILocation(line: 233, column: 8, scope: !4805)
!4808 = !DILocation(line: 233, column: 15, scope: !4805)
!4809 = !DILocation(line: 230, column: 3, scope: !4805)
!4810 = !DILocation(line: 234, column: 8, scope: !4805)
!4811 = !DILocation(line: 235, column: 15, scope: !4812)
!4812 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 235, column: 15)
!4813 = !DILocation(line: 235, column: 24, scope: !4812)
!4814 = !DILocation(line: 236, column: 8, scope: !4812)
!4815 = !DILocation(line: 236, column: 11, scope: !4812)
!4816 = !DILocation(line: 236, column: 20, scope: !4812)
!4817 = !DILocation(line: 235, column: 15, scope: !4801)
!4818 = !DILocation(line: 238, column: 3, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4812, file: !3, line: 237, column: 8)
!4820 = !DILocation(line: 238, column: 10, scope: !4819)
!4821 = !DILocation(line: 238, column: 18, scope: !4819)
!4822 = !DILocation(line: 239, column: 20, scope: !4819)
!4823 = !DILocation(line: 239, column: 3, scope: !4819)
!4824 = !DILocation(line: 239, column: 10, scope: !4819)
!4825 = !DILocation(line: 239, column: 18, scope: !4819)
!4826 = !DILocation(line: 240, column: 3, scope: !4819)
!4827 = !DILocation(line: 242, column: 15, scope: !4828)
!4828 = distinct !DILexicalBlock(scope: !4812, file: !3, line: 242, column: 15)
!4829 = !DILocation(line: 242, column: 15, scope: !4812)
!4830 = !DILocation(line: 244, column: 31, scope: !4831)
!4831 = distinct !DILexicalBlock(scope: !4832, file: !3, line: 244, column: 7)
!4832 = distinct !DILexicalBlock(scope: !4828, file: !3, line: 243, column: 8)
!4833 = !DILocation(line: 244, column: 38, scope: !4831)
!4834 = !DILocation(line: 244, column: 8, scope: !4831)
!4835 = !DILocation(line: 245, column: 7, scope: !4831)
!4836 = !DILocation(line: 245, column: 12, scope: !4831)
!4837 = !DILocation(line: 246, column: 4, scope: !4831)
!4838 = !DILocation(line: 246, column: 7, scope: !4831)
!4839 = !DILocation(line: 246, column: 15, scope: !4831)
!4840 = !DILocation(line: 244, column: 7, scope: !4832)
!4841 = !DILocation(line: 249, column: 22, scope: !4842)
!4842 = distinct !DILexicalBlock(scope: !4831, file: !3, line: 247, column: 5)
!4843 = !DILocation(line: 249, column: 40, scope: !4842)
!4844 = !DILocation(line: 249, column: 7, scope: !4842)
!4845 = !DILocation(line: 249, column: 14, scope: !4842)
!4846 = !DILocation(line: 249, column: 20, scope: !4842)
!4847 = !DILocation(line: 250, column: 7, scope: !4842)
!4848 = !DILocation(line: 250, column: 14, scope: !4842)
!4849 = !DILocation(line: 250, column: 19, scope: !4842)
!4850 = !DILocation(line: 251, column: 24, scope: !4842)
!4851 = !DILocation(line: 251, column: 7, scope: !4842)
!4852 = !DILocation(line: 251, column: 14, scope: !4842)
!4853 = !DILocation(line: 251, column: 22, scope: !4842)
!4854 = !DILocation(line: 252, column: 7, scope: !4842)
!4855 = !DILocation(line: 254, column: 8, scope: !4832)
!4856 = !DILocation(line: 257, column: 3, scope: !4857)
!4857 = distinct !DILexicalBlock(scope: !4828, file: !3, line: 256, column: 8)
!4858 = !DILocation(line: 257, column: 10, scope: !4857)
!4859 = !DILocation(line: 257, column: 15, scope: !4857)
!4860 = !DILocation(line: 258, column: 20, scope: !4857)
!4861 = !DILocation(line: 258, column: 3, scope: !4857)
!4862 = !DILocation(line: 258, column: 10, scope: !4857)
!4863 = !DILocation(line: 258, column: 18, scope: !4857)
!4864 = !DILocation(line: 259, column: 3, scope: !4857)
!4865 = !DILocation(line: 261, column: 4, scope: !4797)
!4866 = !DILocation(line: 263, column: 22, scope: !4780)
!4867 = !DILocation(line: 263, column: 29, scope: !4780)
!4868 = !DILocation(line: 263, column: 9, scope: !4780)
!4869 = !DILocation(line: 263, column: 7, scope: !4780)
!4870 = !DILocation(line: 264, column: 6, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4780, file: !3, line: 264, column: 6)
!4872 = !DILocation(line: 264, column: 6, scope: !4780)
!4873 = !DILocation(line: 266, column: 10, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4875, file: !3, line: 266, column: 10)
!4875 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 265, column: 4)
!4876 = !DILocation(line: 266, column: 27, scope: !4874)
!4877 = !DILocation(line: 266, column: 10, scope: !4875)
!4878 = !DILocation(line: 268, column: 3, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 267, column: 8)
!4880 = !DILocation(line: 268, column: 10, scope: !4879)
!4881 = !DILocation(line: 268, column: 18, scope: !4879)
!4882 = !DILocation(line: 269, column: 3, scope: !4879)
!4883 = !DILocation(line: 271, column: 4, scope: !4875)
!4884 = !DILocation(line: 272, column: 11, scope: !4885)
!4885 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 272, column: 11)
!4886 = !DILocation(line: 272, column: 11, scope: !4871)
!4887 = !DILocalVariable(name: "objc_interface_decl", scope: !4888, file: !3, line: 274, type: !2224)
!4888 = distinct !DILexicalBlock(scope: !4885, file: !3, line: 273, column: 4)
!4889 = !DILocation(line: 274, column: 11, scope: !4888)
!4890 = !DILocation(line: 274, column: 53, scope: !4888)
!4891 = !DILocation(line: 274, column: 60, scope: !4888)
!4892 = !DILocation(line: 274, column: 33, scope: !4888)
!4893 = !DILocation(line: 278, column: 10, scope: !4894)
!4894 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 278, column: 10)
!4895 = !DILocation(line: 279, column: 3, scope: !4894)
!4896 = !DILocation(line: 279, column: 7, scope: !4894)
!4897 = !DILocation(line: 280, column: 7, scope: !4894)
!4898 = !DILocation(line: 280, column: 12, scope: !4894)
!4899 = !DILocation(line: 280, column: 34, scope: !4894)
!4900 = !DILocation(line: 280, column: 38, scope: !4894)
!4901 = !DILocation(line: 278, column: 10, scope: !4888)
!4902 = !DILocation(line: 282, column: 18, scope: !4903)
!4903 = distinct !DILexicalBlock(scope: !4894, file: !3, line: 281, column: 8)
!4904 = !DILocation(line: 282, column: 3, scope: !4903)
!4905 = !DILocation(line: 282, column: 10, scope: !4903)
!4906 = !DILocation(line: 282, column: 16, scope: !4903)
!4907 = !DILocation(line: 283, column: 3, scope: !4903)
!4908 = !DILocation(line: 283, column: 10, scope: !4903)
!4909 = !DILocation(line: 283, column: 18, scope: !4903)
!4910 = !DILocation(line: 284, column: 3, scope: !4903)
!4911 = !DILocation(line: 286, column: 4, scope: !4888)
!4912 = !DILocation(line: 287, column: 9, scope: !4780)
!4913 = !DILocation(line: 287, column: 16, scope: !4780)
!4914 = !DILocation(line: 287, column: 24, scope: !4780)
!4915 = !DILocation(line: 289, column: 7, scope: !4781)
!4916 = !DILocation(line: 292, column: 7, scope: !4781)
!4917 = !DILocation(line: 292, column: 14, scope: !4781)
!4918 = !DILocation(line: 292, column: 19, scope: !4781)
!4919 = !DILocation(line: 293, column: 24, scope: !4781)
!4920 = !DILocation(line: 293, column: 7, scope: !4781)
!4921 = !DILocation(line: 293, column: 14, scope: !4781)
!4922 = !DILocation(line: 293, column: 22, scope: !4781)
!4923 = !DILocation(line: 294, column: 7, scope: !4781)
!4924 = !DILocation(line: 301, column: 11, scope: !4925)
!4925 = distinct !DILexicalBlock(scope: !4781, file: !3, line: 301, column: 11)
!4926 = !DILocation(line: 301, column: 11, scope: !4781)
!4927 = !DILocation(line: 302, column: 2, scope: !4925)
!4928 = !DILocation(line: 302, column: 10, scope: !4925)
!4929 = !DILocation(line: 302, column: 35, scope: !4925)
!4930 = !DILocation(line: 303, column: 7, scope: !4781)
!4931 = !DILocation(line: 306, column: 47, scope: !4781)
!4932 = !DILocation(line: 306, column: 28, scope: !4781)
!4933 = !DILocation(line: 306, column: 7, scope: !4781)
!4934 = !DILocation(line: 306, column: 14, scope: !4781)
!4935 = !DILocation(line: 306, column: 26, scope: !4781)
!4936 = !DILocation(line: 307, column: 7, scope: !4781)
!4937 = !DILocation(line: 307, column: 14, scope: !4781)
!4938 = !DILocation(line: 307, column: 20, scope: !4781)
!4939 = !DILocation(line: 308, column: 7, scope: !4781)
!4940 = !DILocation(line: 310, column: 7, scope: !4781)
!4941 = !DILocation(line: 312, column: 3, scope: !4745)
!4942 = !DILocation(line: 312, column: 3, scope: !4943)
!4943 = distinct !DILexicalBlock(scope: !4944, file: !3, line: 312, column: 3)
!4944 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 312, column: 3)
!4945 = !DILocation(line: 312, column: 3, scope: !4944)
!4946 = !DILocation(line: 313, column: 1, scope: !4745)
!4947 = distinct !DISubprogram(name: "c_parser_consume_pragma", scope: !3, file: !3, line: 541, type: !4514, scopeLine: 542, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4948 = !DILocalVariable(name: "parser", arg: 1, scope: !4947, file: !3, line: 541, type: !3401)
!4949 = !DILocation(line: 541, column: 36, scope: !4947)
!4950 = !DILocation(line: 543, column: 3, scope: !4947)
!4951 = !DILocation(line: 544, column: 3, scope: !4947)
!4952 = !DILocation(line: 545, column: 3, scope: !4947)
!4953 = !DILocation(line: 546, column: 7, scope: !4954)
!4954 = distinct !DILexicalBlock(scope: !4947, file: !3, line: 546, column: 7)
!4955 = !DILocation(line: 546, column: 15, scope: !4954)
!4956 = !DILocation(line: 546, column: 28, scope: !4954)
!4957 = !DILocation(line: 546, column: 7, scope: !4947)
!4958 = !DILocation(line: 547, column: 5, scope: !4954)
!4959 = !DILocation(line: 547, column: 13, scope: !4954)
!4960 = !DILocation(line: 547, column: 25, scope: !4954)
!4961 = !DILocation(line: 547, column: 33, scope: !4954)
!4962 = !DILocation(line: 548, column: 3, scope: !4947)
!4963 = !DILocation(line: 548, column: 11, scope: !4947)
!4964 = !DILocation(line: 548, column: 23, scope: !4947)
!4965 = !DILocation(line: 549, column: 3, scope: !4947)
!4966 = !DILocation(line: 549, column: 11, scope: !4947)
!4967 = !DILocation(line: 549, column: 21, scope: !4947)
!4968 = !DILocation(line: 550, column: 1, scope: !4947)
!4969 = distinct !DISubprogram(name: "c_parser_next_token_is", scope: !3, file: !3, line: 333, type: !4970, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4970 = !DISubroutineType(types: !4971)
!4971 = !{!2344, !3401, !569}
!4972 = !DILocalVariable(name: "parser", arg: 1, scope: !4969, file: !3, line: 333, type: !3401)
!4973 = !DILocation(line: 333, column: 35, scope: !4969)
!4974 = !DILocalVariable(name: "type", arg: 2, scope: !4969, file: !3, line: 333, type: !569)
!4975 = !DILocation(line: 333, column: 58, scope: !4969)
!4976 = !DILocation(line: 335, column: 31, scope: !4969)
!4977 = !DILocation(line: 335, column: 10, scope: !4969)
!4978 = !DILocation(line: 335, column: 40, scope: !4969)
!4979 = !DILocation(line: 335, column: 48, scope: !4969)
!4980 = !DILocation(line: 335, column: 45, scope: !4969)
!4981 = !DILocation(line: 335, column: 3, scope: !4969)
!4982 = distinct !DISubprogram(name: "c_parser_error", scope: !3, file: !3, line: 576, type: !4983, scopeLine: 577, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!4983 = !DISubroutineType(types: !4984)
!4984 = !{null, !3401, !2428}
!4985 = !DILocalVariable(name: "parser", arg: 1, scope: !4982, file: !3, line: 576, type: !3401)
!4986 = !DILocation(line: 576, column: 27, scope: !4982)
!4987 = !DILocalVariable(name: "gmsgid", arg: 2, scope: !4982, file: !3, line: 576, type: !2428)
!4988 = !DILocation(line: 576, column: 47, scope: !4982)
!4989 = !DILocalVariable(name: "token", scope: !4982, file: !3, line: 578, type: !4459)
!4990 = !DILocation(line: 578, column: 12, scope: !4982)
!4991 = !DILocation(line: 578, column: 41, scope: !4982)
!4992 = !DILocation(line: 578, column: 20, scope: !4982)
!4993 = !DILocation(line: 579, column: 7, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4982, file: !3, line: 579, column: 7)
!4995 = !DILocation(line: 579, column: 15, scope: !4994)
!4996 = !DILocation(line: 579, column: 7, scope: !4982)
!4997 = !DILocation(line: 580, column: 5, scope: !4994)
!4998 = !DILocation(line: 581, column: 3, scope: !4982)
!4999 = !DILocation(line: 581, column: 11, scope: !4982)
!5000 = !DILocation(line: 581, column: 17, scope: !4982)
!5001 = !DILocation(line: 582, column: 8, scope: !5002)
!5002 = distinct !DILexicalBlock(scope: !4982, file: !3, line: 582, column: 7)
!5003 = !DILocation(line: 582, column: 7, scope: !4982)
!5004 = !DILocation(line: 583, column: 5, scope: !5002)
!5005 = !DILocation(line: 586, column: 44, scope: !4982)
!5006 = !DILocation(line: 586, column: 3, scope: !4982)
!5007 = !DILocation(line: 587, column: 18, scope: !4982)
!5008 = !DILocation(line: 591, column: 5, scope: !4982)
!5009 = !DILocation(line: 591, column: 12, scope: !4982)
!5010 = !DILocation(line: 591, column: 17, scope: !4982)
!5011 = !DILocation(line: 591, column: 45, scope: !4982)
!5012 = !DILocation(line: 591, column: 52, scope: !4982)
!5013 = !DILocation(line: 596, column: 4, scope: !4982)
!5014 = !DILocation(line: 596, column: 11, scope: !4982)
!5015 = !DILocation(line: 587, column: 3, scope: !4982)
!5016 = !DILocation(line: 597, column: 1, scope: !4982)
!5017 = distinct !DISubprogram(name: "c_parser_skip_to_pragma_eol", scope: !3, file: !3, line: 731, type: !4514, scopeLine: 732, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5018 = !DILocalVariable(name: "parser", arg: 1, scope: !5017, file: !3, line: 731, type: !3401)
!5019 = !DILocation(line: 731, column: 40, scope: !5017)
!5020 = !DILocation(line: 733, column: 3, scope: !5017)
!5021 = !DILocation(line: 734, column: 3, scope: !5017)
!5022 = !DILocation(line: 734, column: 11, scope: !5017)
!5023 = !DILocation(line: 734, column: 21, scope: !5017)
!5024 = !DILocation(line: 736, column: 26, scope: !5025)
!5025 = distinct !DILexicalBlock(scope: !5017, file: !3, line: 736, column: 7)
!5026 = !DILocation(line: 736, column: 8, scope: !5025)
!5027 = !DILocation(line: 736, column: 7, scope: !5017)
!5028 = !DILocation(line: 737, column: 5, scope: !5025)
!5029 = !DILocalVariable(name: "token", scope: !5030, file: !3, line: 739, type: !4459)
!5030 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 738, column: 7)
!5031 = !DILocation(line: 739, column: 11, scope: !5030)
!5032 = !DILocation(line: 739, column: 40, scope: !5030)
!5033 = !DILocation(line: 739, column: 19, scope: !5030)
!5034 = !DILocation(line: 740, column: 6, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 740, column: 6)
!5036 = !DILocation(line: 740, column: 13, scope: !5035)
!5037 = !DILocation(line: 740, column: 18, scope: !5035)
!5038 = !DILocation(line: 740, column: 6, scope: !5030)
!5039 = !DILocation(line: 741, column: 4, scope: !5035)
!5040 = !DILocation(line: 742, column: 6, scope: !5041)
!5041 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 742, column: 6)
!5042 = !DILocation(line: 742, column: 13, scope: !5041)
!5043 = !DILocation(line: 742, column: 18, scope: !5041)
!5044 = !DILocation(line: 742, column: 6, scope: !5030)
!5045 = !DILocation(line: 744, column: 30, scope: !5046)
!5046 = distinct !DILexicalBlock(scope: !5041, file: !3, line: 743, column: 4)
!5047 = !DILocation(line: 744, column: 6, scope: !5046)
!5048 = !DILocation(line: 745, column: 6, scope: !5046)
!5049 = !DILocation(line: 747, column: 26, scope: !5030)
!5050 = !DILocation(line: 747, column: 2, scope: !5030)
!5051 = distinct !{!5051, !5028, !5052}
!5052 = !DILocation(line: 748, column: 7, scope: !5025)
!5053 = !DILocation(line: 750, column: 3, scope: !5017)
!5054 = !DILocation(line: 750, column: 11, scope: !5017)
!5055 = !DILocation(line: 750, column: 17, scope: !5017)
!5056 = !DILocation(line: 751, column: 1, scope: !5017)
!5057 = distinct !DISubprogram(name: "c_parser_set_source_position_from_token", scope: !3, file: !3, line: 555, type: !5058, scopeLine: 556, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5058 = !DISubroutineType(types: !5059)
!5059 = !{null, !4459}
!5060 = !DILocalVariable(name: "token", arg: 1, scope: !5057, file: !3, line: 555, type: !4459)
!5061 = !DILocation(line: 555, column: 51, scope: !5057)
!5062 = !DILocation(line: 557, column: 7, scope: !5063)
!5063 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 557, column: 7)
!5064 = !DILocation(line: 557, column: 14, scope: !5063)
!5065 = !DILocation(line: 557, column: 19, scope: !5063)
!5066 = !DILocation(line: 557, column: 7, scope: !5057)
!5067 = !DILocation(line: 559, column: 24, scope: !5068)
!5068 = distinct !DILexicalBlock(scope: !5063, file: !3, line: 558, column: 5)
!5069 = !DILocation(line: 559, column: 31, scope: !5068)
!5070 = !DILocation(line: 559, column: 22, scope: !5068)
!5071 = !DILocation(line: 560, column: 5, scope: !5068)
!5072 = !DILocation(line: 561, column: 1, scope: !5057)
!5073 = distinct !DISubprogram(name: "c_parser_require", scope: !3, file: !3, line: 605, type: !5074, scopeLine: 608, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5074 = !DISubroutineType(types: !5075)
!5075 = !{!2344, !3401, !569, !2428}
!5076 = !DILocalVariable(name: "parser", arg: 1, scope: !5073, file: !3, line: 605, type: !3401)
!5077 = !DILocation(line: 605, column: 29, scope: !5073)
!5078 = !DILocalVariable(name: "type", arg: 2, scope: !5073, file: !3, line: 606, type: !569)
!5079 = !DILocation(line: 606, column: 20, scope: !5073)
!5080 = !DILocalVariable(name: "msgid", arg: 3, scope: !5073, file: !3, line: 607, type: !2428)
!5081 = !DILocation(line: 607, column: 17, scope: !5073)
!5082 = !DILocation(line: 609, column: 31, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !5073, file: !3, line: 609, column: 7)
!5084 = !DILocation(line: 609, column: 39, scope: !5083)
!5085 = !DILocation(line: 609, column: 7, scope: !5083)
!5086 = !DILocation(line: 609, column: 7, scope: !5073)
!5087 = !DILocation(line: 611, column: 31, scope: !5088)
!5088 = distinct !DILexicalBlock(scope: !5083, file: !3, line: 610, column: 5)
!5089 = !DILocation(line: 611, column: 7, scope: !5088)
!5090 = !DILocation(line: 612, column: 7, scope: !5088)
!5091 = !DILocation(line: 616, column: 23, scope: !5092)
!5092 = distinct !DILexicalBlock(scope: !5083, file: !3, line: 615, column: 5)
!5093 = !DILocation(line: 616, column: 31, scope: !5092)
!5094 = !DILocation(line: 616, column: 7, scope: !5092)
!5095 = !DILocation(line: 617, column: 7, scope: !5092)
!5096 = !DILocation(line: 619, column: 1, scope: !5073)
!5097 = distinct !DISubprogram(name: "c_parser_external_declaration", scope: !3, file: !3, line: 1037, type: !4514, scopeLine: 1038, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5098 = !DILocalVariable(name: "parser", arg: 1, scope: !5097, file: !3, line: 1037, type: !3401)
!5099 = !DILocation(line: 1037, column: 42, scope: !5097)
!5100 = !DILocalVariable(name: "ext", scope: !5097, file: !3, line: 1039, type: !2321)
!5101 = !DILocation(line: 1039, column: 7, scope: !5097)
!5102 = !DILocation(line: 1040, column: 32, scope: !5097)
!5103 = !DILocation(line: 1040, column: 11, scope: !5097)
!5104 = !DILocation(line: 1040, column: 41, scope: !5097)
!5105 = !DILocation(line: 1040, column: 3, scope: !5097)
!5106 = !DILocation(line: 1043, column: 36, scope: !5107)
!5107 = distinct !DILexicalBlock(scope: !5097, file: !3, line: 1041, column: 5)
!5108 = !DILocation(line: 1043, column: 15, scope: !5107)
!5109 = !DILocation(line: 1043, column: 45, scope: !5107)
!5110 = !DILocation(line: 1043, column: 7, scope: !5107)
!5111 = !DILocation(line: 1046, column: 10, scope: !5112)
!5112 = distinct !DILexicalBlock(scope: !5107, file: !3, line: 1044, column: 2)
!5113 = !DILocation(line: 1046, column: 8, scope: !5112)
!5114 = !DILocation(line: 1047, column: 28, scope: !5112)
!5115 = !DILocation(line: 1047, column: 4, scope: !5112)
!5116 = !DILocation(line: 1048, column: 35, scope: !5112)
!5117 = !DILocation(line: 1048, column: 4, scope: !5112)
!5118 = !DILocation(line: 1049, column: 35, scope: !5112)
!5119 = !DILocation(line: 1049, column: 4, scope: !5112)
!5120 = !DILocation(line: 1050, column: 4, scope: !5112)
!5121 = !DILocation(line: 1052, column: 29, scope: !5112)
!5122 = !DILocation(line: 1052, column: 4, scope: !5112)
!5123 = !DILocation(line: 1053, column: 4, scope: !5112)
!5124 = !DILocation(line: 1056, column: 4, scope: !5112)
!5125 = !DILocation(line: 1057, column: 36, scope: !5112)
!5126 = !DILocation(line: 1057, column: 4, scope: !5112)
!5127 = !DILocation(line: 1058, column: 4, scope: !5112)
!5128 = !DILocation(line: 1060, column: 4, scope: !5112)
!5129 = !DILocation(line: 1061, column: 37, scope: !5112)
!5130 = !DILocation(line: 1061, column: 4, scope: !5112)
!5131 = !DILocation(line: 1062, column: 4, scope: !5112)
!5132 = !DILocation(line: 1064, column: 4, scope: !5112)
!5133 = !DILocation(line: 1065, column: 37, scope: !5112)
!5134 = !DILocation(line: 1065, column: 4, scope: !5112)
!5135 = !DILocation(line: 1066, column: 4, scope: !5112)
!5136 = !DILocation(line: 1068, column: 4, scope: !5112)
!5137 = !DILocation(line: 1069, column: 39, scope: !5112)
!5138 = !DILocation(line: 1069, column: 4, scope: !5112)
!5139 = !DILocation(line: 1070, column: 4, scope: !5112)
!5140 = !DILocation(line: 1072, column: 4, scope: !5112)
!5141 = !DILocation(line: 1073, column: 28, scope: !5112)
!5142 = !DILocation(line: 1073, column: 4, scope: !5112)
!5143 = !DILocation(line: 1074, column: 4, scope: !5112)
!5144 = !DILocation(line: 1075, column: 4, scope: !5112)
!5145 = !DILocation(line: 1077, column: 4, scope: !5112)
!5146 = !DILocation(line: 1079, column: 7, scope: !5107)
!5147 = !DILocation(line: 1081, column: 37, scope: !5107)
!5148 = !DILocation(line: 1081, column: 16, scope: !5107)
!5149 = !DILocation(line: 1081, column: 46, scope: !5107)
!5150 = !DILocation(line: 1081, column: 7, scope: !5107)
!5151 = !DILocation(line: 1083, column: 31, scope: !5107)
!5152 = !DILocation(line: 1083, column: 7, scope: !5107)
!5153 = !DILocation(line: 1084, column: 7, scope: !5107)
!5154 = !DILocation(line: 1086, column: 7, scope: !5107)
!5155 = !DILocation(line: 1087, column: 24, scope: !5107)
!5156 = !DILocation(line: 1087, column: 7, scope: !5107)
!5157 = !DILocation(line: 1088, column: 7, scope: !5107)
!5158 = !DILocation(line: 1089, column: 7, scope: !5107)
!5159 = !DILocation(line: 1092, column: 11, scope: !5160)
!5160 = distinct !DILexicalBlock(scope: !5107, file: !3, line: 1092, column: 11)
!5161 = !DILocation(line: 1092, column: 11, scope: !5107)
!5162 = !DILocation(line: 1094, column: 37, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5160, file: !3, line: 1093, column: 2)
!5164 = !DILocation(line: 1094, column: 4, scope: !5163)
!5165 = !DILocation(line: 1095, column: 4, scope: !5163)
!5166 = !DILabel(scope: !5107, name: "decl_or_fndef", file: !3, line: 1100)
!5167 = !DILocation(line: 1100, column: 5, scope: !5107)
!5168 = !DILocation(line: 1104, column: 38, scope: !5107)
!5169 = !DILocation(line: 1104, column: 7, scope: !5107)
!5170 = !DILocation(line: 1105, column: 7, scope: !5107)
!5171 = !DILocation(line: 1107, column: 1, scope: !5097)
!5172 = distinct !DISubprogram(name: "c_parser_next_token_is_not", scope: !3, file: !3, line: 342, type: !4970, scopeLine: 343, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5173 = !DILocalVariable(name: "parser", arg: 1, scope: !5172, file: !3, line: 342, type: !3401)
!5174 = !DILocation(line: 342, column: 39, scope: !5172)
!5175 = !DILocalVariable(name: "type", arg: 2, scope: !5172, file: !3, line: 342, type: !569)
!5176 = !DILocation(line: 342, column: 62, scope: !5172)
!5177 = !DILocation(line: 344, column: 35, scope: !5172)
!5178 = !DILocation(line: 344, column: 43, scope: !5172)
!5179 = !DILocation(line: 344, column: 11, scope: !5172)
!5180 = !DILocation(line: 344, column: 10, scope: !5172)
!5181 = !DILocation(line: 344, column: 3, scope: !5172)
!5182 = distinct !DISubprogram(name: "disable_extension_diagnostics", scope: !3, file: !3, line: 835, type: !5183, scopeLine: 836, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5183 = !DISubroutineType(types: !5184)
!5184 = !{!2321}
!5185 = !DILocalVariable(name: "ret", scope: !5182, file: !3, line: 837, type: !2321)
!5186 = !DILocation(line: 837, column: 7, scope: !5182)
!5187 = !DILocation(line: 837, column: 14, scope: !5182)
!5188 = !DILocation(line: 838, column: 10, scope: !5182)
!5189 = !DILocation(line: 838, column: 29, scope: !5182)
!5190 = !DILocation(line: 838, column: 7, scope: !5182)
!5191 = !DILocation(line: 839, column: 10, scope: !5182)
!5192 = !DILocation(line: 839, column: 27, scope: !5182)
!5193 = !DILocation(line: 839, column: 7, scope: !5182)
!5194 = !DILocation(line: 840, column: 10, scope: !5182)
!5195 = !DILocation(line: 840, column: 19, scope: !5182)
!5196 = !DILocation(line: 840, column: 7, scope: !5182)
!5197 = !DILocation(line: 841, column: 10, scope: !5182)
!5198 = !DILocation(line: 841, column: 25, scope: !5182)
!5199 = !DILocation(line: 841, column: 7, scope: !5182)
!5200 = !DILocation(line: 842, column: 10, scope: !5182)
!5201 = !DILocation(line: 842, column: 26, scope: !5182)
!5202 = !DILocation(line: 842, column: 7, scope: !5182)
!5203 = !DILocation(line: 843, column: 33, scope: !5182)
!5204 = !DILocation(line: 843, column: 3, scope: !5182)
!5205 = !DILocation(line: 843, column: 13, scope: !5182)
!5206 = !DILocation(line: 843, column: 22, scope: !5182)
!5207 = !DILocation(line: 844, column: 22, scope: !5182)
!5208 = !DILocation(line: 845, column: 49, scope: !5182)
!5209 = !DILocation(line: 845, column: 3, scope: !5182)
!5210 = !DILocation(line: 845, column: 13, scope: !5182)
!5211 = !DILocation(line: 845, column: 30, scope: !5182)
!5212 = !DILocation(line: 846, column: 12, scope: !5182)
!5213 = !DILocation(line: 847, column: 45, scope: !5182)
!5214 = !DILocation(line: 847, column: 3, scope: !5182)
!5215 = !DILocation(line: 847, column: 13, scope: !5182)
!5216 = !DILocation(line: 847, column: 28, scope: !5182)
!5217 = !DILocation(line: 848, column: 19, scope: !5182)
!5218 = !DILocation(line: 849, column: 10, scope: !5182)
!5219 = !DILocation(line: 849, column: 3, scope: !5182)
!5220 = distinct !DISubprogram(name: "restore_extension_diagnostics", scope: !3, file: !3, line: 856, type: !5221, scopeLine: 857, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5221 = !DISubroutineType(types: !5222)
!5222 = !{null, !2321}
!5223 = !DILocalVariable(name: "flags", arg: 1, scope: !5220, file: !3, line: 856, type: !2321)
!5224 = !DILocation(line: 856, column: 36, scope: !5220)
!5225 = !DILocation(line: 858, column: 35, scope: !5220)
!5226 = !DILocation(line: 858, column: 41, scope: !5220)
!5227 = !DILocation(line: 858, column: 33, scope: !5220)
!5228 = !DILocation(line: 858, column: 24, scope: !5220)
!5229 = !DILocation(line: 858, column: 3, scope: !5220)
!5230 = !DILocation(line: 858, column: 13, scope: !5220)
!5231 = !DILocation(line: 858, column: 22, scope: !5220)
!5232 = !DILocation(line: 859, column: 25, scope: !5220)
!5233 = !DILocation(line: 859, column: 31, scope: !5220)
!5234 = !DILocation(line: 859, column: 37, scope: !5220)
!5235 = !DILocation(line: 859, column: 22, scope: !5220)
!5236 = !DILocation(line: 860, column: 52, scope: !5220)
!5237 = !DILocation(line: 860, column: 58, scope: !5220)
!5238 = !DILocation(line: 860, column: 64, scope: !5220)
!5239 = !DILocation(line: 860, column: 49, scope: !5220)
!5240 = !DILocation(line: 860, column: 32, scope: !5220)
!5241 = !DILocation(line: 860, column: 3, scope: !5220)
!5242 = !DILocation(line: 860, column: 13, scope: !5220)
!5243 = !DILocation(line: 860, column: 30, scope: !5220)
!5244 = !DILocation(line: 861, column: 15, scope: !5220)
!5245 = !DILocation(line: 861, column: 21, scope: !5220)
!5246 = !DILocation(line: 861, column: 27, scope: !5220)
!5247 = !DILocation(line: 861, column: 12, scope: !5220)
!5248 = !DILocation(line: 862, column: 48, scope: !5220)
!5249 = !DILocation(line: 862, column: 54, scope: !5220)
!5250 = !DILocation(line: 862, column: 60, scope: !5220)
!5251 = !DILocation(line: 862, column: 45, scope: !5220)
!5252 = !DILocation(line: 862, column: 30, scope: !5220)
!5253 = !DILocation(line: 862, column: 3, scope: !5220)
!5254 = !DILocation(line: 862, column: 13, scope: !5220)
!5255 = !DILocation(line: 862, column: 28, scope: !5220)
!5256 = !DILocation(line: 863, column: 22, scope: !5220)
!5257 = !DILocation(line: 863, column: 28, scope: !5220)
!5258 = !DILocation(line: 863, column: 34, scope: !5220)
!5259 = !DILocation(line: 863, column: 19, scope: !5220)
!5260 = !DILocation(line: 864, column: 1, scope: !5220)
!5261 = distinct !DISubprogram(name: "c_parser_asm_definition", scope: !3, file: !3, line: 1370, type: !4514, scopeLine: 1371, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5262 = !DILocalVariable(name: "parser", arg: 1, scope: !5261, file: !3, line: 1370, type: !3401)
!5263 = !DILocation(line: 1370, column: 36, scope: !5261)
!5264 = !DILocalVariable(name: "asm_str", scope: !5261, file: !3, line: 1372, type: !2224)
!5265 = !DILocation(line: 1372, column: 8, scope: !5261)
!5266 = !DILocation(line: 1372, column: 44, scope: !5261)
!5267 = !DILocation(line: 1372, column: 18, scope: !5261)
!5268 = !DILocation(line: 1373, column: 7, scope: !5269)
!5269 = distinct !DILexicalBlock(scope: !5261, file: !3, line: 1373, column: 7)
!5270 = !DILocation(line: 1373, column: 7, scope: !5261)
!5271 = !DILocation(line: 1374, column: 26, scope: !5269)
!5272 = !DILocation(line: 1374, column: 5, scope: !5269)
!5273 = !DILocation(line: 1375, column: 30, scope: !5261)
!5274 = !DILocation(line: 1375, column: 3, scope: !5261)
!5275 = !DILocation(line: 1376, column: 1, scope: !5261)
!5276 = distinct !DISubprogram(name: "c_parser_objc_class_definition", scope: !3, file: !3, line: 6102, type: !4514, scopeLine: 6103, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5277 = !DILocalVariable(name: "parser", arg: 1, scope: !5276, file: !3, line: 6102, type: !3401)
!5278 = !DILocation(line: 6102, column: 43, scope: !5276)
!5279 = !DILocalVariable(name: "iface_p", scope: !5276, file: !3, line: 6104, type: !2344)
!5280 = !DILocation(line: 6104, column: 8, scope: !5276)
!5281 = !DILocalVariable(name: "id1", scope: !5276, file: !3, line: 6105, type: !2224)
!5282 = !DILocation(line: 6105, column: 8, scope: !5276)
!5283 = !DILocalVariable(name: "superclass", scope: !5276, file: !3, line: 6106, type: !2224)
!5284 = !DILocation(line: 6106, column: 8, scope: !5276)
!5285 = !DILocation(line: 6107, column: 39, scope: !5286)
!5286 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 6107, column: 7)
!5287 = !DILocation(line: 6107, column: 7, scope: !5286)
!5288 = !DILocation(line: 6107, column: 7, scope: !5276)
!5289 = !DILocation(line: 6108, column: 13, scope: !5286)
!5290 = !DILocation(line: 6108, column: 5, scope: !5286)
!5291 = !DILocation(line: 6109, column: 44, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5286, file: !3, line: 6109, column: 12)
!5293 = !DILocation(line: 6109, column: 12, scope: !5292)
!5294 = !DILocation(line: 6109, column: 12, scope: !5286)
!5295 = !DILocation(line: 6110, column: 13, scope: !5292)
!5296 = !DILocation(line: 6110, column: 5, scope: !5292)
!5297 = !DILocation(line: 6112, column: 5, scope: !5292)
!5298 = !DILocation(line: 6113, column: 27, scope: !5276)
!5299 = !DILocation(line: 6113, column: 3, scope: !5276)
!5300 = !DILocation(line: 6114, column: 35, scope: !5301)
!5301 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 6114, column: 7)
!5302 = !DILocation(line: 6114, column: 7, scope: !5301)
!5303 = !DILocation(line: 6114, column: 7, scope: !5276)
!5304 = !DILocation(line: 6116, column: 23, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5301, file: !3, line: 6115, column: 5)
!5306 = !DILocation(line: 6116, column: 7, scope: !5305)
!5307 = !DILocation(line: 6117, column: 7, scope: !5305)
!5308 = !DILocation(line: 6119, column: 30, scope: !5276)
!5309 = !DILocation(line: 6119, column: 9, scope: !5276)
!5310 = !DILocation(line: 6119, column: 39, scope: !5276)
!5311 = !DILocation(line: 6119, column: 7, scope: !5276)
!5312 = !DILocation(line: 6120, column: 27, scope: !5276)
!5313 = !DILocation(line: 6120, column: 3, scope: !5276)
!5314 = !DILocation(line: 6121, column: 31, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 6121, column: 7)
!5316 = !DILocation(line: 6121, column: 7, scope: !5315)
!5317 = !DILocation(line: 6121, column: 7, scope: !5276)
!5318 = !DILocalVariable(name: "id2", scope: !5319, file: !3, line: 6123, type: !2224)
!5319 = distinct !DILexicalBlock(scope: !5315, file: !3, line: 6122, column: 5)
!5320 = !DILocation(line: 6123, column: 12, scope: !5319)
!5321 = !DILocalVariable(name: "proto", scope: !5319, file: !3, line: 6124, type: !2224)
!5322 = !DILocation(line: 6124, column: 12, scope: !5319)
!5323 = !DILocation(line: 6125, column: 31, scope: !5319)
!5324 = !DILocation(line: 6125, column: 7, scope: !5319)
!5325 = !DILocation(line: 6126, column: 39, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5319, file: !3, line: 6126, column: 11)
!5327 = !DILocation(line: 6126, column: 11, scope: !5326)
!5328 = !DILocation(line: 6126, column: 11, scope: !5319)
!5329 = !DILocation(line: 6128, column: 20, scope: !5330)
!5330 = distinct !DILexicalBlock(scope: !5326, file: !3, line: 6127, column: 2)
!5331 = !DILocation(line: 6128, column: 4, scope: !5330)
!5332 = !DILocation(line: 6129, column: 31, scope: !5330)
!5333 = !DILocation(line: 6129, column: 4, scope: !5330)
!5334 = !DILocation(line: 6130, column: 4, scope: !5330)
!5335 = !DILocation(line: 6132, column: 34, scope: !5319)
!5336 = !DILocation(line: 6132, column: 13, scope: !5319)
!5337 = !DILocation(line: 6132, column: 43, scope: !5319)
!5338 = !DILocation(line: 6132, column: 11, scope: !5319)
!5339 = !DILocation(line: 6133, column: 31, scope: !5319)
!5340 = !DILocation(line: 6133, column: 7, scope: !5319)
!5341 = !DILocation(line: 6134, column: 34, scope: !5319)
!5342 = !DILocation(line: 6134, column: 7, scope: !5319)
!5343 = !DILocation(line: 6135, column: 12, scope: !5344)
!5344 = distinct !DILexicalBlock(scope: !5319, file: !3, line: 6135, column: 11)
!5345 = !DILocation(line: 6135, column: 11, scope: !5319)
!5346 = !DILocation(line: 6137, column: 40, scope: !5347)
!5347 = distinct !DILexicalBlock(scope: !5344, file: !3, line: 6136, column: 2)
!5348 = !DILocation(line: 6137, column: 45, scope: !5347)
!5349 = !DILocation(line: 6137, column: 4, scope: !5347)
!5350 = !DILocation(line: 6138, column: 4, scope: !5347)
!5351 = !DILocation(line: 6140, column: 35, scope: !5352)
!5352 = distinct !DILexicalBlock(scope: !5319, file: !3, line: 6140, column: 11)
!5353 = !DILocation(line: 6140, column: 11, scope: !5352)
!5354 = !DILocation(line: 6140, column: 11, scope: !5319)
!5355 = !DILocation(line: 6141, column: 39, scope: !5352)
!5356 = !DILocation(line: 6141, column: 10, scope: !5352)
!5357 = !DILocation(line: 6141, column: 8, scope: !5352)
!5358 = !DILocation(line: 6141, column: 2, scope: !5352)
!5359 = !DILocation(line: 6142, column: 38, scope: !5319)
!5360 = !DILocation(line: 6142, column: 43, scope: !5319)
!5361 = !DILocation(line: 6142, column: 48, scope: !5319)
!5362 = !DILocation(line: 6142, column: 7, scope: !5319)
!5363 = !DILocation(line: 6143, column: 38, scope: !5319)
!5364 = !DILocation(line: 6143, column: 7, scope: !5319)
!5365 = !DILocation(line: 6144, column: 33, scope: !5319)
!5366 = !DILocation(line: 6144, column: 7, scope: !5319)
!5367 = !DILocation(line: 6145, column: 7, scope: !5319)
!5368 = !DILocation(line: 6146, column: 7, scope: !5319)
!5369 = !DILocation(line: 6148, column: 31, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 6148, column: 7)
!5371 = !DILocation(line: 6148, column: 7, scope: !5370)
!5372 = !DILocation(line: 6148, column: 7, scope: !5276)
!5373 = !DILocation(line: 6150, column: 31, scope: !5374)
!5374 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 6149, column: 5)
!5375 = !DILocation(line: 6150, column: 7, scope: !5374)
!5376 = !DILocation(line: 6151, column: 39, scope: !5377)
!5377 = distinct !DILexicalBlock(scope: !5374, file: !3, line: 6151, column: 11)
!5378 = !DILocation(line: 6151, column: 11, scope: !5377)
!5379 = !DILocation(line: 6151, column: 11, scope: !5374)
!5380 = !DILocation(line: 6153, column: 20, scope: !5381)
!5381 = distinct !DILexicalBlock(scope: !5377, file: !3, line: 6152, column: 2)
!5382 = !DILocation(line: 6153, column: 4, scope: !5381)
!5383 = !DILocation(line: 6154, column: 4, scope: !5381)
!5384 = !DILocation(line: 6156, column: 41, scope: !5374)
!5385 = !DILocation(line: 6156, column: 20, scope: !5374)
!5386 = !DILocation(line: 6156, column: 50, scope: !5374)
!5387 = !DILocation(line: 6156, column: 18, scope: !5374)
!5388 = !DILocation(line: 6157, column: 31, scope: !5374)
!5389 = !DILocation(line: 6157, column: 7, scope: !5374)
!5390 = !DILocation(line: 6158, column: 5, scope: !5374)
!5391 = !DILocation(line: 6160, column: 16, scope: !5370)
!5392 = !DILocation(line: 6161, column: 7, scope: !5393)
!5393 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 6161, column: 7)
!5394 = !DILocation(line: 6161, column: 7, scope: !5276)
!5395 = !DILocalVariable(name: "proto", scope: !5396, file: !3, line: 6163, type: !2224)
!5396 = distinct !DILexicalBlock(scope: !5393, file: !3, line: 6162, column: 5)
!5397 = !DILocation(line: 6163, column: 12, scope: !5396)
!5398 = !DILocation(line: 6164, column: 35, scope: !5399)
!5399 = distinct !DILexicalBlock(scope: !5396, file: !3, line: 6164, column: 11)
!5400 = !DILocation(line: 6164, column: 11, scope: !5399)
!5401 = !DILocation(line: 6164, column: 11, scope: !5396)
!5402 = !DILocation(line: 6165, column: 39, scope: !5399)
!5403 = !DILocation(line: 6165, column: 10, scope: !5399)
!5404 = !DILocation(line: 6165, column: 8, scope: !5399)
!5405 = !DILocation(line: 6165, column: 2, scope: !5399)
!5406 = !DILocation(line: 6166, column: 35, scope: !5396)
!5407 = !DILocation(line: 6166, column: 40, scope: !5396)
!5408 = !DILocation(line: 6166, column: 52, scope: !5396)
!5409 = !DILocation(line: 6166, column: 7, scope: !5396)
!5410 = !DILocation(line: 6167, column: 5, scope: !5396)
!5411 = !DILocation(line: 6169, column: 38, scope: !5393)
!5412 = !DILocation(line: 6169, column: 43, scope: !5393)
!5413 = !DILocation(line: 6169, column: 5, scope: !5393)
!5414 = !DILocation(line: 6170, column: 31, scope: !5415)
!5415 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 6170, column: 7)
!5416 = !DILocation(line: 6170, column: 7, scope: !5415)
!5417 = !DILocation(line: 6170, column: 7, scope: !5276)
!5418 = !DILocation(line: 6171, column: 45, scope: !5415)
!5419 = !DILocation(line: 6171, column: 5, scope: !5415)
!5420 = !DILocation(line: 6172, column: 7, scope: !5421)
!5421 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 6172, column: 7)
!5422 = !DILocation(line: 6172, column: 7, scope: !5276)
!5423 = !DILocation(line: 6174, column: 7, scope: !5424)
!5424 = distinct !DILexicalBlock(scope: !5421, file: !3, line: 6173, column: 5)
!5425 = !DILocation(line: 6175, column: 38, scope: !5424)
!5426 = !DILocation(line: 6175, column: 7, scope: !5424)
!5427 = !DILocation(line: 6176, column: 33, scope: !5424)
!5428 = !DILocation(line: 6176, column: 7, scope: !5424)
!5429 = !DILocation(line: 6177, column: 7, scope: !5424)
!5430 = !DILocation(line: 6178, column: 5, scope: !5424)
!5431 = !DILocation(line: 6181, column: 7, scope: !5432)
!5432 = distinct !DILexicalBlock(scope: !5421, file: !3, line: 6180, column: 5)
!5433 = !DILocation(line: 6182, column: 7, scope: !5432)
!5434 = !DILocation(line: 6184, column: 1, scope: !5276)
!5435 = distinct !DISubprogram(name: "c_parser_objc_class_declaration", scope: !3, file: !3, line: 6275, type: !4514, scopeLine: 6276, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5436 = !DILocalVariable(name: "parser", arg: 1, scope: !5435, file: !3, line: 6275, type: !3401)
!5437 = !DILocation(line: 6275, column: 44, scope: !5435)
!5438 = !DILocalVariable(name: "list", scope: !5435, file: !3, line: 6277, type: !2224)
!5439 = !DILocation(line: 6277, column: 8, scope: !5435)
!5440 = !DILocation(line: 6278, column: 3, scope: !5435)
!5441 = !DILocation(line: 6279, column: 27, scope: !5435)
!5442 = !DILocation(line: 6279, column: 3, scope: !5435)
!5443 = !DILocation(line: 6282, column: 3, scope: !5435)
!5444 = !DILocalVariable(name: "id", scope: !5445, file: !3, line: 6284, type: !2224)
!5445 = distinct !DILexicalBlock(scope: !5435, file: !3, line: 6283, column: 5)
!5446 = !DILocation(line: 6284, column: 12, scope: !5445)
!5447 = !DILocation(line: 6285, column: 39, scope: !5448)
!5448 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 6285, column: 11)
!5449 = !DILocation(line: 6285, column: 11, scope: !5448)
!5450 = !DILocation(line: 6285, column: 11, scope: !5445)
!5451 = !DILocation(line: 6287, column: 20, scope: !5452)
!5452 = distinct !DILexicalBlock(scope: !5448, file: !3, line: 6286, column: 2)
!5453 = !DILocation(line: 6287, column: 4, scope: !5452)
!5454 = !DILocation(line: 6288, column: 4, scope: !5452)
!5455 = !DILocation(line: 6290, column: 33, scope: !5445)
!5456 = !DILocation(line: 6290, column: 12, scope: !5445)
!5457 = !DILocation(line: 6290, column: 42, scope: !5445)
!5458 = !DILocation(line: 6290, column: 10, scope: !5445)
!5459 = !DILocation(line: 6291, column: 23, scope: !5445)
!5460 = !DILocation(line: 6291, column: 29, scope: !5445)
!5461 = !DILocation(line: 6291, column: 14, scope: !5445)
!5462 = !DILocation(line: 6291, column: 12, scope: !5445)
!5463 = !DILocation(line: 6292, column: 31, scope: !5445)
!5464 = !DILocation(line: 6292, column: 7, scope: !5445)
!5465 = !DILocation(line: 6293, column: 35, scope: !5466)
!5466 = distinct !DILexicalBlock(scope: !5445, file: !3, line: 6293, column: 11)
!5467 = !DILocation(line: 6293, column: 11, scope: !5466)
!5468 = !DILocation(line: 6293, column: 11, scope: !5445)
!5469 = !DILocation(line: 6294, column: 26, scope: !5466)
!5470 = !DILocation(line: 6294, column: 2, scope: !5466)
!5471 = !DILocation(line: 6296, column: 2, scope: !5466)
!5472 = distinct !{!5472, !5443, !5473}
!5473 = !DILocation(line: 6297, column: 5, scope: !5435)
!5474 = !DILocation(line: 6298, column: 30, scope: !5435)
!5475 = !DILocation(line: 6298, column: 3, scope: !5435)
!5476 = !DILocation(line: 6299, column: 23, scope: !5435)
!5477 = !DILocation(line: 6299, column: 3, scope: !5435)
!5478 = !DILocation(line: 6300, column: 1, scope: !5435)
!5479 = distinct !DISubprogram(name: "c_parser_objc_alias_declaration", scope: !3, file: !3, line: 6309, type: !4514, scopeLine: 6310, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5480 = !DILocalVariable(name: "parser", arg: 1, scope: !5479, file: !3, line: 6309, type: !3401)
!5481 = !DILocation(line: 6309, column: 44, scope: !5479)
!5482 = !DILocalVariable(name: "id1", scope: !5479, file: !3, line: 6311, type: !2224)
!5483 = !DILocation(line: 6311, column: 8, scope: !5479)
!5484 = !DILocalVariable(name: "id2", scope: !5479, file: !3, line: 6311, type: !2224)
!5485 = !DILocation(line: 6311, column: 13, scope: !5479)
!5486 = !DILocation(line: 6312, column: 3, scope: !5479)
!5487 = !DILocation(line: 6313, column: 27, scope: !5479)
!5488 = !DILocation(line: 6313, column: 3, scope: !5479)
!5489 = !DILocation(line: 6314, column: 35, scope: !5490)
!5490 = distinct !DILexicalBlock(scope: !5479, file: !3, line: 6314, column: 7)
!5491 = !DILocation(line: 6314, column: 7, scope: !5490)
!5492 = !DILocation(line: 6314, column: 7, scope: !5479)
!5493 = !DILocation(line: 6316, column: 23, scope: !5494)
!5494 = distinct !DILexicalBlock(scope: !5490, file: !3, line: 6315, column: 5)
!5495 = !DILocation(line: 6316, column: 7, scope: !5494)
!5496 = !DILocation(line: 6317, column: 34, scope: !5494)
!5497 = !DILocation(line: 6317, column: 7, scope: !5494)
!5498 = !DILocation(line: 6318, column: 7, scope: !5494)
!5499 = !DILocation(line: 6320, column: 30, scope: !5479)
!5500 = !DILocation(line: 6320, column: 9, scope: !5479)
!5501 = !DILocation(line: 6320, column: 39, scope: !5479)
!5502 = !DILocation(line: 6320, column: 7, scope: !5479)
!5503 = !DILocation(line: 6321, column: 27, scope: !5479)
!5504 = !DILocation(line: 6321, column: 3, scope: !5479)
!5505 = !DILocation(line: 6322, column: 35, scope: !5506)
!5506 = distinct !DILexicalBlock(scope: !5479, file: !3, line: 6322, column: 7)
!5507 = !DILocation(line: 6322, column: 7, scope: !5506)
!5508 = !DILocation(line: 6322, column: 7, scope: !5479)
!5509 = !DILocation(line: 6324, column: 23, scope: !5510)
!5510 = distinct !DILexicalBlock(scope: !5506, file: !3, line: 6323, column: 5)
!5511 = !DILocation(line: 6324, column: 7, scope: !5510)
!5512 = !DILocation(line: 6325, column: 34, scope: !5510)
!5513 = !DILocation(line: 6325, column: 7, scope: !5510)
!5514 = !DILocation(line: 6326, column: 7, scope: !5510)
!5515 = !DILocation(line: 6328, column: 30, scope: !5479)
!5516 = !DILocation(line: 6328, column: 9, scope: !5479)
!5517 = !DILocation(line: 6328, column: 39, scope: !5479)
!5518 = !DILocation(line: 6328, column: 7, scope: !5479)
!5519 = !DILocation(line: 6329, column: 27, scope: !5479)
!5520 = !DILocation(line: 6329, column: 3, scope: !5479)
!5521 = !DILocation(line: 6330, column: 30, scope: !5479)
!5522 = !DILocation(line: 6330, column: 3, scope: !5479)
!5523 = !DILocation(line: 6331, column: 23, scope: !5479)
!5524 = !DILocation(line: 6331, column: 28, scope: !5479)
!5525 = !DILocation(line: 6331, column: 3, scope: !5479)
!5526 = !DILocation(line: 6332, column: 1, scope: !5479)
!5527 = distinct !DISubprogram(name: "c_parser_objc_protocol_definition", scope: !3, file: !3, line: 6346, type: !4514, scopeLine: 6347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5528 = !DILocalVariable(name: "parser", arg: 1, scope: !5527, file: !3, line: 6346, type: !3401)
!5529 = !DILocation(line: 6346, column: 46, scope: !5527)
!5530 = !DILocation(line: 6348, column: 3, scope: !5527)
!5531 = !DILocation(line: 6349, column: 27, scope: !5527)
!5532 = !DILocation(line: 6349, column: 3, scope: !5527)
!5533 = !DILocation(line: 6350, column: 35, scope: !5534)
!5534 = distinct !DILexicalBlock(scope: !5527, file: !3, line: 6350, column: 7)
!5535 = !DILocation(line: 6350, column: 7, scope: !5534)
!5536 = !DILocation(line: 6350, column: 7, scope: !5527)
!5537 = !DILocation(line: 6352, column: 23, scope: !5538)
!5538 = distinct !DILexicalBlock(scope: !5534, file: !3, line: 6351, column: 5)
!5539 = !DILocation(line: 6352, column: 7, scope: !5538)
!5540 = !DILocation(line: 6353, column: 7, scope: !5538)
!5541 = !DILocation(line: 6355, column: 32, scope: !5542)
!5542 = distinct !DILexicalBlock(scope: !5527, file: !3, line: 6355, column: 7)
!5543 = !DILocation(line: 6355, column: 7, scope: !5542)
!5544 = !DILocation(line: 6355, column: 41, scope: !5542)
!5545 = !DILocation(line: 6355, column: 46, scope: !5542)
!5546 = !DILocation(line: 6356, column: 7, scope: !5542)
!5547 = !DILocation(line: 6356, column: 35, scope: !5542)
!5548 = !DILocation(line: 6356, column: 10, scope: !5542)
!5549 = !DILocation(line: 6356, column: 44, scope: !5542)
!5550 = !DILocation(line: 6356, column: 49, scope: !5542)
!5551 = !DILocation(line: 6355, column: 7, scope: !5527)
!5552 = !DILocalVariable(name: "list", scope: !5553, file: !3, line: 6358, type: !2224)
!5553 = distinct !DILexicalBlock(scope: !5542, file: !3, line: 6357, column: 5)
!5554 = !DILocation(line: 6358, column: 12, scope: !5553)
!5555 = !DILocation(line: 6361, column: 7, scope: !5553)
!5556 = !DILocalVariable(name: "id", scope: !5557, file: !3, line: 6363, type: !2224)
!5557 = distinct !DILexicalBlock(scope: !5553, file: !3, line: 6362, column: 2)
!5558 = !DILocation(line: 6363, column: 9, scope: !5557)
!5559 = !DILocation(line: 6364, column: 36, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !5557, file: !3, line: 6364, column: 8)
!5561 = !DILocation(line: 6364, column: 8, scope: !5560)
!5562 = !DILocation(line: 6364, column: 8, scope: !5557)
!5563 = !DILocation(line: 6366, column: 24, scope: !5564)
!5564 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 6365, column: 6)
!5565 = !DILocation(line: 6366, column: 8, scope: !5564)
!5566 = !DILocation(line: 6367, column: 8, scope: !5564)
!5567 = !DILocation(line: 6369, column: 30, scope: !5557)
!5568 = !DILocation(line: 6369, column: 9, scope: !5557)
!5569 = !DILocation(line: 6369, column: 39, scope: !5557)
!5570 = !DILocation(line: 6369, column: 7, scope: !5557)
!5571 = !DILocation(line: 6370, column: 20, scope: !5557)
!5572 = !DILocation(line: 6370, column: 26, scope: !5557)
!5573 = !DILocation(line: 6370, column: 11, scope: !5557)
!5574 = !DILocation(line: 6370, column: 9, scope: !5557)
!5575 = !DILocation(line: 6371, column: 28, scope: !5557)
!5576 = !DILocation(line: 6371, column: 4, scope: !5557)
!5577 = !DILocation(line: 6372, column: 32, scope: !5578)
!5578 = distinct !DILexicalBlock(scope: !5557, file: !3, line: 6372, column: 8)
!5579 = !DILocation(line: 6372, column: 8, scope: !5578)
!5580 = !DILocation(line: 6372, column: 8, scope: !5557)
!5581 = !DILocation(line: 6373, column: 30, scope: !5578)
!5582 = !DILocation(line: 6373, column: 6, scope: !5578)
!5583 = !DILocation(line: 6375, column: 6, scope: !5578)
!5584 = distinct !{!5584, !5555, !5585}
!5585 = !DILocation(line: 6376, column: 2, scope: !5553)
!5586 = !DILocation(line: 6377, column: 34, scope: !5553)
!5587 = !DILocation(line: 6377, column: 7, scope: !5553)
!5588 = !DILocation(line: 6378, column: 31, scope: !5553)
!5589 = !DILocation(line: 6378, column: 7, scope: !5553)
!5590 = !DILocation(line: 6379, column: 5, scope: !5553)
!5591 = !DILocalVariable(name: "id", scope: !5592, file: !3, line: 6382, type: !2224)
!5592 = distinct !DILexicalBlock(scope: !5542, file: !3, line: 6381, column: 5)
!5593 = !DILocation(line: 6382, column: 12, scope: !5592)
!5594 = !DILocation(line: 6382, column: 38, scope: !5592)
!5595 = !DILocation(line: 6382, column: 17, scope: !5592)
!5596 = !DILocation(line: 6382, column: 47, scope: !5592)
!5597 = !DILocalVariable(name: "proto", scope: !5592, file: !3, line: 6383, type: !2224)
!5598 = !DILocation(line: 6383, column: 12, scope: !5592)
!5599 = !DILocation(line: 6384, column: 31, scope: !5592)
!5600 = !DILocation(line: 6384, column: 7, scope: !5592)
!5601 = !DILocation(line: 6385, column: 35, scope: !5602)
!5602 = distinct !DILexicalBlock(scope: !5592, file: !3, line: 6385, column: 11)
!5603 = !DILocation(line: 6385, column: 11, scope: !5602)
!5604 = !DILocation(line: 6385, column: 11, scope: !5592)
!5605 = !DILocation(line: 6386, column: 39, scope: !5602)
!5606 = !DILocation(line: 6386, column: 10, scope: !5602)
!5607 = !DILocation(line: 6386, column: 8, scope: !5602)
!5608 = !DILocation(line: 6386, column: 2, scope: !5602)
!5609 = !DILocation(line: 6387, column: 7, scope: !5592)
!5610 = !DILocation(line: 6387, column: 15, scope: !5592)
!5611 = !DILocation(line: 6387, column: 31, scope: !5592)
!5612 = !DILocation(line: 6388, column: 28, scope: !5592)
!5613 = !DILocation(line: 6388, column: 32, scope: !5592)
!5614 = !DILocation(line: 6388, column: 7, scope: !5592)
!5615 = !DILocation(line: 6389, column: 38, scope: !5592)
!5616 = !DILocation(line: 6389, column: 7, scope: !5592)
!5617 = !DILocation(line: 6390, column: 33, scope: !5592)
!5618 = !DILocation(line: 6390, column: 7, scope: !5592)
!5619 = !DILocation(line: 6391, column: 7, scope: !5592)
!5620 = !DILocation(line: 6391, column: 15, scope: !5592)
!5621 = !DILocation(line: 6391, column: 31, scope: !5592)
!5622 = !DILocation(line: 6392, column: 7, scope: !5592)
!5623 = !DILocation(line: 6394, column: 1, scope: !5527)
!5624 = distinct !DISubprogram(name: "c_parser_pragma", scope: !3, file: !3, line: 6975, type: !5625, scopeLine: 6976, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5625 = !DISubroutineType(types: !5626)
!5626 = !{!2344, !3401, !1949}
!5627 = !DILocalVariable(name: "parser", arg: 1, scope: !5624, file: !3, line: 6975, type: !3401)
!5628 = !DILocation(line: 6975, column: 28, scope: !5624)
!5629 = !DILocalVariable(name: "context", arg: 2, scope: !5624, file: !3, line: 6975, type: !1949)
!5630 = !DILocation(line: 6975, column: 56, scope: !5624)
!5631 = !DILocalVariable(name: "id", scope: !5624, file: !3, line: 6977, type: !7)
!5632 = !DILocation(line: 6977, column: 16, scope: !5624)
!5633 = !DILocation(line: 6979, column: 29, scope: !5624)
!5634 = !DILocation(line: 6979, column: 8, scope: !5624)
!5635 = !DILocation(line: 6979, column: 38, scope: !5624)
!5636 = !DILocation(line: 6979, column: 6, scope: !5624)
!5637 = !DILocation(line: 6980, column: 3, scope: !5624)
!5638 = !DILocation(line: 6982, column: 11, scope: !5624)
!5639 = !DILocation(line: 6982, column: 3, scope: !5624)
!5640 = !DILocation(line: 6985, column: 11, scope: !5641)
!5641 = distinct !DILexicalBlock(scope: !5642, file: !3, line: 6985, column: 11)
!5642 = distinct !DILexicalBlock(scope: !5624, file: !3, line: 6983, column: 5)
!5643 = !DILocation(line: 6985, column: 19, scope: !5641)
!5644 = !DILocation(line: 6985, column: 11, scope: !5642)
!5645 = !DILocation(line: 6987, column: 8, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 6987, column: 8)
!5647 = distinct !DILexicalBlock(scope: !5641, file: !3, line: 6986, column: 2)
!5648 = !DILocation(line: 6987, column: 16, scope: !5646)
!5649 = !DILocation(line: 6987, column: 8, scope: !5647)
!5650 = !DILocation(line: 6988, column: 22, scope: !5646)
!5651 = !DILocation(line: 6988, column: 6, scope: !5646)
!5652 = !DILocation(line: 6990, column: 4, scope: !5647)
!5653 = !DILocation(line: 6992, column: 29, scope: !5642)
!5654 = !DILocation(line: 6992, column: 7, scope: !5642)
!5655 = !DILocation(line: 6993, column: 7, scope: !5642)
!5656 = !DILocation(line: 6996, column: 11, scope: !5657)
!5657 = distinct !DILexicalBlock(scope: !5642, file: !3, line: 6996, column: 11)
!5658 = !DILocation(line: 6996, column: 19, scope: !5657)
!5659 = !DILocation(line: 6996, column: 11, scope: !5642)
!5660 = !DILocation(line: 6998, column: 8, scope: !5661)
!5661 = distinct !DILexicalBlock(scope: !5662, file: !3, line: 6998, column: 8)
!5662 = distinct !DILexicalBlock(scope: !5657, file: !3, line: 6997, column: 2)
!5663 = !DILocation(line: 6998, column: 16, scope: !5661)
!5664 = !DILocation(line: 6998, column: 8, scope: !5662)
!5665 = !DILocation(line: 6999, column: 22, scope: !5661)
!5666 = !DILocation(line: 6999, column: 6, scope: !5661)
!5667 = !DILocation(line: 7001, column: 4, scope: !5662)
!5668 = !DILocation(line: 7003, column: 27, scope: !5642)
!5669 = !DILocation(line: 7003, column: 7, scope: !5642)
!5670 = !DILocation(line: 7004, column: 7, scope: !5642)
!5671 = !DILocation(line: 7007, column: 11, scope: !5672)
!5672 = distinct !DILexicalBlock(scope: !5642, file: !3, line: 7007, column: 11)
!5673 = !DILocation(line: 7007, column: 19, scope: !5672)
!5674 = !DILocation(line: 7007, column: 11, scope: !5642)
!5675 = !DILocation(line: 7009, column: 8, scope: !5676)
!5676 = distinct !DILexicalBlock(scope: !5677, file: !3, line: 7009, column: 8)
!5677 = distinct !DILexicalBlock(scope: !5672, file: !3, line: 7008, column: 2)
!5678 = !DILocation(line: 7009, column: 16, scope: !5676)
!5679 = !DILocation(line: 7009, column: 8, scope: !5677)
!5680 = !DILocation(line: 7010, column: 22, scope: !5676)
!5681 = !DILocation(line: 7010, column: 6, scope: !5676)
!5682 = !DILocation(line: 7012, column: 4, scope: !5677)
!5683 = !DILocation(line: 7014, column: 30, scope: !5642)
!5684 = !DILocation(line: 7014, column: 7, scope: !5642)
!5685 = !DILocation(line: 7015, column: 7, scope: !5642)
!5686 = !DILocation(line: 7018, column: 35, scope: !5642)
!5687 = !DILocation(line: 7018, column: 7, scope: !5642)
!5688 = !DILocation(line: 7019, column: 7, scope: !5642)
!5689 = !DILocation(line: 7022, column: 38, scope: !5642)
!5690 = !DILocation(line: 7022, column: 17, scope: !5642)
!5691 = !DILocation(line: 7022, column: 47, scope: !5642)
!5692 = !DILocation(line: 7022, column: 7, scope: !5642)
!5693 = !DILocation(line: 7025, column: 34, scope: !5642)
!5694 = !DILocation(line: 7025, column: 7, scope: !5642)
!5695 = !DILocation(line: 7026, column: 7, scope: !5642)
!5696 = !DILocation(line: 7029, column: 23, scope: !5642)
!5697 = !DILocation(line: 7029, column: 7, scope: !5642)
!5698 = !DILocation(line: 7030, column: 34, scope: !5642)
!5699 = !DILocation(line: 7030, column: 7, scope: !5642)
!5700 = !DILocation(line: 7031, column: 7, scope: !5642)
!5701 = !DILocation(line: 7034, column: 11, scope: !5702)
!5702 = distinct !DILexicalBlock(scope: !5642, file: !3, line: 7034, column: 11)
!5703 = !DILocation(line: 7034, column: 14, scope: !5702)
!5704 = !DILocation(line: 7034, column: 11, scope: !5642)
!5705 = !DILocation(line: 7036, column: 8, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 7036, column: 8)
!5707 = distinct !DILexicalBlock(scope: !5702, file: !3, line: 7035, column: 2)
!5708 = !DILocation(line: 7036, column: 16, scope: !5706)
!5709 = !DILocation(line: 7036, column: 8, scope: !5707)
!5710 = !DILocation(line: 7037, column: 6, scope: !5706)
!5711 = !DILabel(scope: !5712, name: "bad_stmt", file: !3, line: 7038)
!5712 = distinct !DILexicalBlock(scope: !5706, file: !3, line: 7037, column: 6)
!5713 = !DILocation(line: 7038, column: 6, scope: !5712)
!5714 = !DILocation(line: 7039, column: 24, scope: !5712)
!5715 = !DILocation(line: 7039, column: 8, scope: !5712)
!5716 = !DILocation(line: 7040, column: 35, scope: !5712)
!5717 = !DILocation(line: 7040, column: 8, scope: !5712)
!5718 = !DILocation(line: 7041, column: 8, scope: !5712)
!5719 = !DILocation(line: 7043, column: 28, scope: !5707)
!5720 = !DILocation(line: 7043, column: 4, scope: !5707)
!5721 = !DILocation(line: 7044, column: 4, scope: !5707)
!5722 = !DILocation(line: 7046, column: 7, scope: !5642)
!5723 = !DILocation(line: 7049, column: 28, scope: !5624)
!5724 = !DILocation(line: 7049, column: 3, scope: !5624)
!5725 = !DILocation(line: 7050, column: 28, scope: !5624)
!5726 = !DILocation(line: 7050, column: 3, scope: !5624)
!5727 = !DILocation(line: 7055, column: 3, scope: !5624)
!5728 = !DILocation(line: 7055, column: 11, scope: !5624)
!5729 = !DILocation(line: 7055, column: 17, scope: !5624)
!5730 = !DILocation(line: 7056, column: 32, scope: !5624)
!5731 = !DILocation(line: 7056, column: 3, scope: !5624)
!5732 = !DILocation(line: 7058, column: 3, scope: !5624)
!5733 = !DILocation(line: 7059, column: 1, scope: !5624)
!5734 = distinct !DISubprogram(name: "c_parser_objc_method_definition", scope: !3, file: !3, line: 6429, type: !4514, scopeLine: 6430, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5735 = !DILocalVariable(name: "parser", arg: 1, scope: !5734, file: !3, line: 6429, type: !3401)
!5736 = !DILocation(line: 6429, column: 44, scope: !5734)
!5737 = !DILocalVariable(name: "type", scope: !5734, file: !3, line: 6431, type: !190)
!5738 = !DILocation(line: 6431, column: 18, scope: !5734)
!5739 = !DILocation(line: 6431, column: 52, scope: !5734)
!5740 = !DILocation(line: 6431, column: 25, scope: !5734)
!5741 = !DILocalVariable(name: "decl", scope: !5734, file: !3, line: 6432, type: !2224)
!5742 = !DILocation(line: 6432, column: 8, scope: !5734)
!5743 = !DILocation(line: 6433, column: 25, scope: !5734)
!5744 = !DILocation(line: 6433, column: 3, scope: !5734)
!5745 = !DILocation(line: 6434, column: 3, scope: !5734)
!5746 = !DILocation(line: 6434, column: 11, scope: !5734)
!5747 = !DILocation(line: 6434, column: 27, scope: !5734)
!5748 = !DILocation(line: 6435, column: 37, scope: !5734)
!5749 = !DILocation(line: 6435, column: 10, scope: !5734)
!5750 = !DILocation(line: 6435, column: 8, scope: !5734)
!5751 = !DILocation(line: 6436, column: 31, scope: !5752)
!5752 = distinct !DILexicalBlock(scope: !5734, file: !3, line: 6436, column: 7)
!5753 = !DILocation(line: 6436, column: 7, scope: !5752)
!5754 = !DILocation(line: 6436, column: 7, scope: !5734)
!5755 = !DILocation(line: 6438, column: 31, scope: !5756)
!5756 = distinct !DILexicalBlock(scope: !5752, file: !3, line: 6437, column: 5)
!5757 = !DILocation(line: 6438, column: 7, scope: !5756)
!5758 = !DILocation(line: 6439, column: 37, scope: !5756)
!5759 = !DILocation(line: 6439, column: 16, scope: !5756)
!5760 = !DILocation(line: 6439, column: 46, scope: !5756)
!5761 = !DILocation(line: 6439, column: 7, scope: !5756)
!5762 = !DILocation(line: 6441, column: 5, scope: !5756)
!5763 = !DILocation(line: 6442, column: 32, scope: !5764)
!5764 = distinct !DILexicalBlock(scope: !5734, file: !3, line: 6442, column: 7)
!5765 = !DILocation(line: 6442, column: 8, scope: !5764)
!5766 = !DILocation(line: 6442, column: 7, scope: !5734)
!5767 = !DILocation(line: 6444, column: 23, scope: !5768)
!5768 = distinct !DILexicalBlock(scope: !5764, file: !3, line: 6443, column: 5)
!5769 = !DILocation(line: 6444, column: 7, scope: !5768)
!5770 = !DILocation(line: 6445, column: 7, scope: !5768)
!5771 = !DILocation(line: 6447, column: 3, scope: !5734)
!5772 = !DILocation(line: 6447, column: 11, scope: !5734)
!5773 = !DILocation(line: 6447, column: 27, scope: !5734)
!5774 = !DILocation(line: 6448, column: 33, scope: !5734)
!5775 = !DILocation(line: 6448, column: 3, scope: !5734)
!5776 = !DILocation(line: 6449, column: 42, scope: !5734)
!5777 = !DILocation(line: 6449, column: 13, scope: !5734)
!5778 = !DILocation(line: 6449, column: 3, scope: !5734)
!5779 = !DILocation(line: 6450, column: 34, scope: !5734)
!5780 = !DILocation(line: 6450, column: 3, scope: !5734)
!5781 = !DILocation(line: 6451, column: 1, scope: !5734)
!5782 = distinct !DISubprogram(name: "c_parser_declaration_or_fndef", scope: !3, file: !3, line: 1168, type: !5783, scopeLine: 1170, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!5783 = !DISubroutineType(types: !5784)
!5784 = !{null, !3401, !2344, !2344, !2344, !2344}
!5785 = !DILocalVariable(name: "parser", arg: 1, scope: !5782, file: !3, line: 1168, type: !3401)
!5786 = !DILocation(line: 1168, column: 42, scope: !5782)
!5787 = !DILocalVariable(name: "fndef_ok", arg: 2, scope: !5782, file: !3, line: 1168, type: !2344)
!5788 = !DILocation(line: 1168, column: 55, scope: !5782)
!5789 = !DILocalVariable(name: "empty_ok", arg: 3, scope: !5782, file: !3, line: 1168, type: !2344)
!5790 = !DILocation(line: 1168, column: 70, scope: !5782)
!5791 = !DILocalVariable(name: "nested", arg: 4, scope: !5782, file: !3, line: 1169, type: !2344)
!5792 = !DILocation(line: 1169, column: 16, scope: !5782)
!5793 = !DILocalVariable(name: "start_attr_ok", arg: 5, scope: !5782, file: !3, line: 1169, type: !2344)
!5794 = !DILocation(line: 1169, column: 29, scope: !5782)
!5795 = !DILocalVariable(name: "specs", scope: !5782, file: !3, line: 1171, type: !4282)
!5796 = !DILocation(line: 1171, column: 23, scope: !5782)
!5797 = !DILocalVariable(name: "prefix_attrs", scope: !5782, file: !3, line: 1172, type: !2224)
!5798 = !DILocation(line: 1172, column: 8, scope: !5782)
!5799 = !DILocalVariable(name: "all_prefix_attrs", scope: !5782, file: !3, line: 1173, type: !2224)
!5800 = !DILocation(line: 1173, column: 8, scope: !5782)
!5801 = !DILocalVariable(name: "diagnosed_no_specs", scope: !5782, file: !3, line: 1174, type: !2344)
!5802 = !DILocation(line: 1174, column: 8, scope: !5782)
!5803 = !DILocalVariable(name: "here", scope: !5782, file: !3, line: 1175, type: !2352)
!5804 = !DILocation(line: 1175, column: 14, scope: !5782)
!5805 = !DILocation(line: 1175, column: 42, scope: !5782)
!5806 = !DILocation(line: 1175, column: 21, scope: !5782)
!5807 = !DILocation(line: 1175, column: 51, scope: !5782)
!5808 = !DILocation(line: 1177, column: 11, scope: !5782)
!5809 = !DILocation(line: 1177, column: 9, scope: !5782)
!5810 = !DILocation(line: 1178, column: 23, scope: !5782)
!5811 = !DILocation(line: 1178, column: 31, scope: !5782)
!5812 = !DILocation(line: 1178, column: 50, scope: !5782)
!5813 = !DILocation(line: 1178, column: 3, scope: !5782)
!5814 = !DILocation(line: 1179, column: 7, scope: !5815)
!5815 = distinct !DILexicalBlock(scope: !5782, file: !3, line: 1179, column: 7)
!5816 = !DILocation(line: 1179, column: 15, scope: !5815)
!5817 = !DILocation(line: 1179, column: 7, scope: !5782)
!5818 = !DILocation(line: 1181, column: 51, scope: !5819)
!5819 = distinct !DILexicalBlock(scope: !5815, file: !3, line: 1180, column: 5)
!5820 = !DILocation(line: 1181, column: 7, scope: !5819)
!5821 = !DILocation(line: 1182, column: 7, scope: !5819)
!5822 = !DILocation(line: 1184, column: 7, scope: !5823)
!5823 = distinct !DILexicalBlock(scope: !5782, file: !3, line: 1184, column: 7)
!5824 = !DILocation(line: 1184, column: 14, scope: !5823)
!5825 = !DILocation(line: 1184, column: 18, scope: !5823)
!5826 = !DILocation(line: 1184, column: 25, scope: !5823)
!5827 = !DILocation(line: 1184, column: 7, scope: !5782)
!5828 = !DILocation(line: 1186, column: 23, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !5823, file: !3, line: 1185, column: 5)
!5830 = !DILocation(line: 1186, column: 7, scope: !5829)
!5831 = !DILocation(line: 1187, column: 51, scope: !5829)
!5832 = !DILocation(line: 1187, column: 7, scope: !5829)
!5833 = !DILocation(line: 1188, column: 7, scope: !5829)
!5834 = !DILocation(line: 1190, column: 21, scope: !5782)
!5835 = !DILocation(line: 1190, column: 3, scope: !5782)
!5836 = !DILocation(line: 1191, column: 31, scope: !5837)
!5837 = distinct !DILexicalBlock(scope: !5782, file: !3, line: 1191, column: 7)
!5838 = !DILocation(line: 1191, column: 7, scope: !5837)
!5839 = !DILocation(line: 1191, column: 7, scope: !5782)
!5840 = !DILocation(line: 1193, column: 11, scope: !5841)
!5841 = distinct !DILexicalBlock(scope: !5842, file: !3, line: 1193, column: 11)
!5842 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 1192, column: 5)
!5843 = !DILocation(line: 1193, column: 11, scope: !5842)
!5844 = !DILocation(line: 1194, column: 14, scope: !5841)
!5845 = !DILocation(line: 1194, column: 2, scope: !5841)
!5846 = !DILocation(line: 1197, column: 23, scope: !5847)
!5847 = distinct !DILexicalBlock(scope: !5841, file: !3, line: 1196, column: 2)
!5848 = !DILocation(line: 1197, column: 4, scope: !5847)
!5849 = !DILocation(line: 1198, column: 13, scope: !5847)
!5850 = !DILocation(line: 1198, column: 4, scope: !5847)
!5851 = !DILocation(line: 1200, column: 31, scope: !5842)
!5852 = !DILocation(line: 1200, column: 7, scope: !5842)
!5853 = !DILocation(line: 1201, column: 7, scope: !5842)
!5854 = !DILocation(line: 1203, column: 3, scope: !5782)
!5855 = !DILocation(line: 1204, column: 18, scope: !5782)
!5856 = !DILocation(line: 1204, column: 25, scope: !5782)
!5857 = !DILocation(line: 1204, column: 16, scope: !5782)
!5858 = !DILocation(line: 1205, column: 22, scope: !5782)
!5859 = !DILocation(line: 1205, column: 20, scope: !5782)
!5860 = !DILocation(line: 1206, column: 3, scope: !5782)
!5861 = !DILocation(line: 1206, column: 10, scope: !5782)
!5862 = !DILocation(line: 1206, column: 16, scope: !5782)
!5863 = !DILocation(line: 1207, column: 3, scope: !5782)
!5864 = !DILocalVariable(name: "declarator", scope: !5865, file: !3, line: 1209, type: !4315)
!5865 = distinct !DILexicalBlock(scope: !5782, file: !3, line: 1208, column: 5)
!5866 = !DILocation(line: 1209, column: 28, scope: !5865)
!5867 = !DILocalVariable(name: "dummy", scope: !5865, file: !3, line: 1210, type: !2344)
!5868 = !DILocation(line: 1210, column: 12, scope: !5865)
!5869 = !DILocalVariable(name: "fnbody", scope: !5865, file: !3, line: 1211, type: !2224)
!5870 = !DILocation(line: 1211, column: 12, scope: !5865)
!5871 = !DILocation(line: 1216, column: 41, scope: !5865)
!5872 = !DILocation(line: 1216, column: 49, scope: !5865)
!5873 = !DILocation(line: 1216, column: 56, scope: !5865)
!5874 = !DILocation(line: 1216, column: 20, scope: !5865)
!5875 = !DILocation(line: 1216, column: 18, scope: !5865)
!5876 = !DILocation(line: 1218, column: 11, scope: !5877)
!5877 = distinct !DILexicalBlock(scope: !5865, file: !3, line: 1218, column: 11)
!5878 = !DILocation(line: 1218, column: 22, scope: !5877)
!5879 = !DILocation(line: 1218, column: 11, scope: !5865)
!5880 = !DILocation(line: 1220, column: 48, scope: !5881)
!5881 = distinct !DILexicalBlock(scope: !5877, file: !3, line: 1219, column: 2)
!5882 = !DILocation(line: 1220, column: 4, scope: !5881)
!5883 = !DILocation(line: 1221, column: 4, scope: !5881)
!5884 = !DILocation(line: 1223, column: 35, scope: !5885)
!5885 = distinct !DILexicalBlock(scope: !5865, file: !3, line: 1223, column: 11)
!5886 = !DILocation(line: 1223, column: 11, scope: !5885)
!5887 = !DILocation(line: 1224, column: 4, scope: !5885)
!5888 = !DILocation(line: 1224, column: 31, scope: !5885)
!5889 = !DILocation(line: 1224, column: 7, scope: !5885)
!5890 = !DILocation(line: 1225, column: 4, scope: !5885)
!5891 = !DILocation(line: 1225, column: 31, scope: !5885)
!5892 = !DILocation(line: 1225, column: 7, scope: !5885)
!5893 = !DILocation(line: 1226, column: 4, scope: !5885)
!5894 = !DILocation(line: 1226, column: 39, scope: !5885)
!5895 = !DILocation(line: 1226, column: 7, scope: !5885)
!5896 = !DILocation(line: 1227, column: 4, scope: !5885)
!5897 = !DILocation(line: 1227, column: 39, scope: !5885)
!5898 = !DILocation(line: 1227, column: 7, scope: !5885)
!5899 = !DILocation(line: 1223, column: 11, scope: !5865)
!5900 = !DILocalVariable(name: "asm_name", scope: !5901, file: !3, line: 1229, type: !2224)
!5901 = distinct !DILexicalBlock(scope: !5885, file: !3, line: 1228, column: 2)
!5902 = !DILocation(line: 1229, column: 9, scope: !5901)
!5903 = !DILocalVariable(name: "postfix_attrs", scope: !5901, file: !3, line: 1230, type: !2224)
!5904 = !DILocation(line: 1230, column: 9, scope: !5901)
!5905 = !DILocation(line: 1231, column: 9, scope: !5906)
!5906 = distinct !DILexicalBlock(scope: !5901, file: !3, line: 1231, column: 8)
!5907 = !DILocation(line: 1231, column: 28, scope: !5906)
!5908 = !DILocation(line: 1231, column: 32, scope: !5906)
!5909 = !DILocation(line: 1231, column: 39, scope: !5906)
!5910 = !DILocation(line: 1231, column: 8, scope: !5901)
!5911 = !DILocation(line: 1233, column: 27, scope: !5912)
!5912 = distinct !DILexicalBlock(scope: !5906, file: !3, line: 1232, column: 6)
!5913 = !DILocation(line: 1234, column: 17, scope: !5912)
!5914 = !DILocation(line: 1234, column: 8, scope: !5912)
!5915 = !DILocation(line: 1235, column: 6, scope: !5912)
!5916 = !DILocation(line: 1238, column: 13, scope: !5901)
!5917 = !DILocation(line: 1239, column: 40, scope: !5918)
!5918 = distinct !DILexicalBlock(scope: !5901, file: !3, line: 1239, column: 8)
!5919 = !DILocation(line: 1239, column: 8, scope: !5918)
!5920 = !DILocation(line: 1239, column: 8, scope: !5901)
!5921 = !DILocation(line: 1240, column: 43, scope: !5918)
!5922 = !DILocation(line: 1240, column: 17, scope: !5918)
!5923 = !DILocation(line: 1240, column: 15, scope: !5918)
!5924 = !DILocation(line: 1240, column: 6, scope: !5918)
!5925 = !DILocation(line: 1241, column: 40, scope: !5926)
!5926 = distinct !DILexicalBlock(scope: !5901, file: !3, line: 1241, column: 8)
!5927 = !DILocation(line: 1241, column: 8, scope: !5926)
!5928 = !DILocation(line: 1241, column: 8, scope: !5901)
!5929 = !DILocation(line: 1242, column: 43, scope: !5926)
!5930 = !DILocation(line: 1242, column: 22, scope: !5926)
!5931 = !DILocation(line: 1242, column: 20, scope: !5926)
!5932 = !DILocation(line: 1242, column: 6, scope: !5926)
!5933 = !DILocation(line: 1243, column: 32, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5901, file: !3, line: 1243, column: 8)
!5935 = !DILocation(line: 1243, column: 8, scope: !5934)
!5936 = !DILocation(line: 1243, column: 8, scope: !5901)
!5937 = !DILocalVariable(name: "d", scope: !5938, file: !3, line: 1245, type: !2224)
!5938 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 1244, column: 6)
!5939 = !DILocation(line: 1245, column: 13, scope: !5938)
!5940 = !DILocalVariable(name: "init", scope: !5938, file: !3, line: 1246, type: !2221)
!5941 = !DILocation(line: 1246, column: 22, scope: !5938)
!5942 = !DILocalVariable(name: "init_loc", scope: !5938, file: !3, line: 1247, type: !2352)
!5943 = !DILocation(line: 1247, column: 19, scope: !5938)
!5944 = !DILocation(line: 1248, column: 32, scope: !5938)
!5945 = !DILocation(line: 1248, column: 8, scope: !5938)
!5946 = !DILocation(line: 1251, column: 24, scope: !5938)
!5947 = !DILocation(line: 1251, column: 36, scope: !5938)
!5948 = !DILocation(line: 1252, column: 19, scope: !5938)
!5949 = !DILocation(line: 1252, column: 34, scope: !5938)
!5950 = !DILocation(line: 1252, column: 10, scope: !5938)
!5951 = !DILocation(line: 1251, column: 12, scope: !5938)
!5952 = !DILocation(line: 1251, column: 10, scope: !5938)
!5953 = !DILocation(line: 1253, column: 13, scope: !5954)
!5954 = distinct !DILexicalBlock(scope: !5938, file: !3, line: 1253, column: 12)
!5955 = !DILocation(line: 1253, column: 12, scope: !5938)
!5956 = !DILocation(line: 1254, column: 7, scope: !5954)
!5957 = !DILocation(line: 1254, column: 5, scope: !5954)
!5958 = !DILocation(line: 1254, column: 3, scope: !5954)
!5959 = !DILocation(line: 1255, column: 20, scope: !5938)
!5960 = !DILocation(line: 1255, column: 23, scope: !5938)
!5961 = !DILocation(line: 1255, column: 33, scope: !5938)
!5962 = !DILocation(line: 1255, column: 8, scope: !5938)
!5963 = !DILocation(line: 1256, column: 40, scope: !5938)
!5964 = !DILocation(line: 1256, column: 19, scope: !5938)
!5965 = !DILocation(line: 1256, column: 49, scope: !5938)
!5966 = !DILocation(line: 1256, column: 17, scope: !5938)
!5967 = !DILocation(line: 1257, column: 37, scope: !5938)
!5968 = !DILocation(line: 1257, column: 15, scope: !5938)
!5969 = !DILocation(line: 1258, column: 8, scope: !5938)
!5970 = !DILocation(line: 1259, column: 12, scope: !5971)
!5971 = distinct !DILexicalBlock(scope: !5938, file: !3, line: 1259, column: 12)
!5972 = !DILocation(line: 1259, column: 17, scope: !5971)
!5973 = !DILocation(line: 1259, column: 14, scope: !5971)
!5974 = !DILocation(line: 1259, column: 12, scope: !5938)
!5975 = !DILocation(line: 1261, column: 29, scope: !5976)
!5976 = distinct !DILexicalBlock(scope: !5971, file: !3, line: 1260, column: 3)
!5977 = !DILocation(line: 1261, column: 5, scope: !5976)
!5978 = !DILocation(line: 1262, column: 18, scope: !5976)
!5979 = !DILocation(line: 1262, column: 21, scope: !5976)
!5980 = !DILocation(line: 1262, column: 36, scope: !5976)
!5981 = !DILocation(line: 1263, column: 22, scope: !5976)
!5982 = !DILocation(line: 1263, column: 37, scope: !5976)
!5983 = !DILocation(line: 1262, column: 5, scope: !5976)
!5984 = !DILocation(line: 1264, column: 3, scope: !5976)
!5985 = !DILocation(line: 1265, column: 6, scope: !5938)
!5986 = !DILocalVariable(name: "d", scope: !5987, file: !3, line: 1268, type: !2224)
!5987 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 1267, column: 6)
!5988 = !DILocation(line: 1268, column: 13, scope: !5987)
!5989 = !DILocation(line: 1268, column: 29, scope: !5987)
!5990 = !DILocation(line: 1268, column: 41, scope: !5987)
!5991 = !DILocation(line: 1269, column: 17, scope: !5987)
!5992 = !DILocation(line: 1270, column: 10, scope: !5987)
!5993 = !DILocation(line: 1269, column: 8, scope: !5987)
!5994 = !DILocation(line: 1268, column: 17, scope: !5987)
!5995 = !DILocation(line: 1271, column: 12, scope: !5996)
!5996 = distinct !DILexicalBlock(scope: !5987, file: !3, line: 1271, column: 12)
!5997 = !DILocation(line: 1271, column: 12, scope: !5987)
!5998 = !DILocation(line: 1272, column: 16, scope: !5996)
!5999 = !DILocation(line: 1273, column: 24, scope: !5996)
!6000 = !DILocation(line: 1272, column: 3, scope: !5996)
!6001 = !DILocation(line: 1275, column: 32, scope: !6002)
!6002 = distinct !DILexicalBlock(scope: !5901, file: !3, line: 1275, column: 8)
!6003 = !DILocation(line: 1275, column: 8, scope: !6002)
!6004 = !DILocation(line: 1275, column: 8, scope: !5901)
!6005 = !DILocation(line: 1277, column: 32, scope: !6006)
!6006 = distinct !DILexicalBlock(scope: !6002, file: !3, line: 1276, column: 6)
!6007 = !DILocation(line: 1277, column: 8, scope: !6006)
!6008 = !DILocation(line: 1278, column: 44, scope: !6009)
!6009 = distinct !DILexicalBlock(scope: !6006, file: !3, line: 1278, column: 12)
!6010 = !DILocation(line: 1278, column: 12, scope: !6009)
!6011 = !DILocation(line: 1278, column: 12, scope: !6006)
!6012 = !DILocation(line: 1279, column: 52, scope: !6009)
!6013 = !DILocation(line: 1279, column: 31, scope: !6009)
!6014 = !DILocation(line: 1280, column: 10, scope: !6009)
!6015 = !DILocation(line: 1279, column: 22, scope: !6009)
!6016 = !DILocation(line: 1279, column: 20, scope: !6009)
!6017 = !DILocation(line: 1279, column: 3, scope: !6009)
!6018 = !DILocation(line: 1282, column: 22, scope: !6009)
!6019 = !DILocation(line: 1282, column: 20, scope: !6009)
!6020 = !DILocation(line: 1283, column: 8, scope: !6006)
!6021 = distinct !{!6021, !5863, !6022}
!6022 = !DILocation(line: 1359, column: 5, scope: !5782)
!6023 = !DILocation(line: 1285, column: 37, scope: !6024)
!6024 = distinct !DILexicalBlock(scope: !6002, file: !3, line: 1285, column: 13)
!6025 = !DILocation(line: 1285, column: 13, scope: !6024)
!6026 = !DILocation(line: 1285, column: 13, scope: !6002)
!6027 = !DILocation(line: 1287, column: 32, scope: !6028)
!6028 = distinct !DILexicalBlock(scope: !6024, file: !3, line: 1286, column: 6)
!6029 = !DILocation(line: 1287, column: 8, scope: !6028)
!6030 = !DILocation(line: 1288, column: 8, scope: !6028)
!6031 = !DILocation(line: 1292, column: 24, scope: !6032)
!6032 = distinct !DILexicalBlock(scope: !6024, file: !3, line: 1291, column: 6)
!6033 = !DILocation(line: 1292, column: 8, scope: !6032)
!6034 = !DILocation(line: 1293, column: 52, scope: !6032)
!6035 = !DILocation(line: 1293, column: 8, scope: !6032)
!6036 = !DILocation(line: 1294, column: 8, scope: !6032)
!6037 = !DILocation(line: 1297, column: 17, scope: !6038)
!6038 = distinct !DILexicalBlock(scope: !5885, file: !3, line: 1297, column: 16)
!6039 = !DILocation(line: 1297, column: 16, scope: !5885)
!6040 = !DILocation(line: 1299, column: 20, scope: !6041)
!6041 = distinct !DILexicalBlock(scope: !6038, file: !3, line: 1298, column: 2)
!6042 = !DILocation(line: 1299, column: 4, scope: !6041)
!6043 = !DILocation(line: 1301, column: 48, scope: !6041)
!6044 = !DILocation(line: 1301, column: 4, scope: !6041)
!6045 = !DILocation(line: 1302, column: 4, scope: !6041)
!6046 = !DILocation(line: 1305, column: 11, scope: !6047)
!6047 = distinct !DILexicalBlock(scope: !5865, file: !3, line: 1305, column: 11)
!6048 = !DILocation(line: 1305, column: 11, scope: !5865)
!6049 = !DILocation(line: 1307, column: 13, scope: !6050)
!6050 = distinct !DILexicalBlock(scope: !6047, file: !3, line: 1306, column: 2)
!6051 = !DILocation(line: 1307, column: 4, scope: !6050)
!6052 = !DILocation(line: 1308, column: 4, scope: !6050)
!6053 = !DILocation(line: 1309, column: 2, scope: !6050)
!6054 = !DILocation(line: 1310, column: 28, scope: !6055)
!6055 = distinct !DILexicalBlock(scope: !5865, file: !3, line: 1310, column: 11)
!6056 = !DILocation(line: 1310, column: 35, scope: !6055)
!6057 = !DILocation(line: 1310, column: 47, scope: !6055)
!6058 = !DILocation(line: 1310, column: 12, scope: !6055)
!6059 = !DILocation(line: 1310, column: 11, scope: !5865)
!6060 = !DILocation(line: 1315, column: 20, scope: !6061)
!6061 = distinct !DILexicalBlock(scope: !6055, file: !3, line: 1311, column: 2)
!6062 = !DILocation(line: 1315, column: 4, scope: !6061)
!6063 = !DILocation(line: 1317, column: 8, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6061, file: !3, line: 1317, column: 8)
!6065 = !DILocation(line: 1317, column: 8, scope: !6061)
!6066 = !DILocation(line: 1318, column: 6, scope: !6064)
!6067 = !DILocation(line: 1319, column: 4, scope: !6061)
!6068 = !DILocation(line: 1333, column: 7, scope: !5865)
!6069 = !DILocation(line: 1333, column: 42, scope: !5865)
!6070 = !DILocation(line: 1333, column: 14, scope: !5865)
!6071 = !DILocation(line: 1334, column: 7, scope: !5865)
!6072 = !DILocation(line: 1334, column: 38, scope: !5865)
!6073 = !DILocation(line: 1334, column: 10, scope: !5865)
!6074 = !DILocation(line: 0, scope: !5865)
!6075 = !DILocation(line: 1335, column: 33, scope: !5865)
!6076 = !DILocation(line: 1335, column: 2, scope: !5865)
!6077 = distinct !{!6077, !6068, !6078}
!6078 = !DILocation(line: 1335, column: 66, scope: !5865)
!6079 = !DILocation(line: 1336, column: 7, scope: !5865)
!6080 = !DILocation(line: 1338, column: 25, scope: !5865)
!6081 = !DILocation(line: 1338, column: 4, scope: !5865)
!6082 = !DILocation(line: 1338, column: 34, scope: !5865)
!6083 = !DILocation(line: 1337, column: 7, scope: !5865)
!6084 = !DILocation(line: 1337, column: 53, scope: !5865)
!6085 = !DILocation(line: 1338, column: 2, scope: !5865)
!6086 = !DILocation(line: 1339, column: 45, scope: !5865)
!6087 = !DILocation(line: 1339, column: 16, scope: !5865)
!6088 = !DILocation(line: 1339, column: 14, scope: !5865)
!6089 = !DILocation(line: 1340, column: 11, scope: !6090)
!6090 = distinct !DILexicalBlock(scope: !5865, file: !3, line: 1340, column: 11)
!6091 = !DILocation(line: 1340, column: 11, scope: !5865)
!6092 = !DILocalVariable(name: "decl", scope: !6093, file: !3, line: 1342, type: !2224)
!6093 = distinct !DILexicalBlock(scope: !6090, file: !3, line: 1341, column: 2)
!6094 = !DILocation(line: 1342, column: 9, scope: !6093)
!6095 = !DILocation(line: 1342, column: 16, scope: !6093)
!6096 = !DILocation(line: 1347, column: 4, scope: !6093)
!6097 = !DILocation(line: 1347, column: 29, scope: !6093)
!6098 = !DILocation(line: 1348, column: 14, scope: !6093)
!6099 = !DILocation(line: 1348, column: 4, scope: !6093)
!6100 = !DILocation(line: 1349, column: 4, scope: !6093)
!6101 = !DILocation(line: 1350, column: 4, scope: !6093)
!6102 = !DILocation(line: 1351, column: 26, scope: !6093)
!6103 = !DILocation(line: 1351, column: 66, scope: !6093)
!6104 = !DILocation(line: 1351, column: 14, scope: !6093)
!6105 = !DILocation(line: 1351, column: 4, scope: !6093)
!6106 = !DILocation(line: 1352, column: 2, scope: !6093)
!6107 = !DILocation(line: 1355, column: 14, scope: !6108)
!6108 = distinct !DILexicalBlock(scope: !6090, file: !3, line: 1354, column: 2)
!6109 = !DILocation(line: 1355, column: 4, scope: !6108)
!6110 = !DILocation(line: 1356, column: 4, scope: !6108)
!6111 = !DILocation(line: 1358, column: 7, scope: !5865)
!6112 = !DILocation(line: 1360, column: 1, scope: !5782)
!6113 = distinct !DISubprogram(name: "c_parser_simple_asm_expr", scope: !3, file: !3, line: 2780, type: !6114, scopeLine: 2781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6114 = !DISubroutineType(types: !6115)
!6115 = !{!2224, !3401}
!6116 = !DILocalVariable(name: "parser", arg: 1, scope: !6113, file: !3, line: 2780, type: !3401)
!6117 = !DILocation(line: 2780, column: 37, scope: !6113)
!6118 = !DILocalVariable(name: "str", scope: !6113, file: !3, line: 2782, type: !2224)
!6119 = !DILocation(line: 2782, column: 8, scope: !6113)
!6120 = !DILocation(line: 2783, column: 3, scope: !6113)
!6121 = !DILocation(line: 2786, column: 3, scope: !6113)
!6122 = !DILocation(line: 2786, column: 11, scope: !6113)
!6123 = !DILocation(line: 2786, column: 35, scope: !6113)
!6124 = !DILocation(line: 2787, column: 27, scope: !6113)
!6125 = !DILocation(line: 2787, column: 3, scope: !6113)
!6126 = !DILocation(line: 2788, column: 26, scope: !6127)
!6127 = distinct !DILexicalBlock(scope: !6113, file: !3, line: 2788, column: 7)
!6128 = !DILocation(line: 2788, column: 8, scope: !6127)
!6129 = !DILocation(line: 2788, column: 7, scope: !6113)
!6130 = !DILocation(line: 2790, column: 7, scope: !6131)
!6131 = distinct !DILexicalBlock(scope: !6127, file: !3, line: 2789, column: 5)
!6132 = !DILocation(line: 2790, column: 15, scope: !6131)
!6133 = !DILocation(line: 2790, column: 39, scope: !6131)
!6134 = !DILocation(line: 2791, column: 7, scope: !6131)
!6135 = !DILocation(line: 2793, column: 38, scope: !6113)
!6136 = !DILocation(line: 2793, column: 9, scope: !6113)
!6137 = !DILocation(line: 2793, column: 7, scope: !6113)
!6138 = !DILocation(line: 2794, column: 3, scope: !6113)
!6139 = !DILocation(line: 2794, column: 11, scope: !6113)
!6140 = !DILocation(line: 2794, column: 35, scope: !6113)
!6141 = !DILocation(line: 2795, column: 26, scope: !6142)
!6142 = distinct !DILexicalBlock(scope: !6113, file: !3, line: 2795, column: 7)
!6143 = !DILocation(line: 2795, column: 8, scope: !6142)
!6144 = !DILocation(line: 2795, column: 7, scope: !6113)
!6145 = !DILocation(line: 2797, column: 34, scope: !6146)
!6146 = distinct !DILexicalBlock(scope: !6142, file: !3, line: 2796, column: 5)
!6147 = !DILocation(line: 2797, column: 7, scope: !6146)
!6148 = !DILocation(line: 2798, column: 7, scope: !6146)
!6149 = !DILocation(line: 2800, column: 10, scope: !6113)
!6150 = !DILocation(line: 2800, column: 3, scope: !6113)
!6151 = !DILocation(line: 2801, column: 1, scope: !6113)
!6152 = distinct !DISubprogram(name: "c_parser_skip_until_found", scope: !3, file: !3, line: 648, type: !6153, scopeLine: 651, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6153 = !DISubroutineType(types: !6154)
!6154 = !{null, !3401, !569, !2428}
!6155 = !DILocalVariable(name: "parser", arg: 1, scope: !6152, file: !3, line: 648, type: !3401)
!6156 = !DILocation(line: 648, column: 38, scope: !6152)
!6157 = !DILocalVariable(name: "type", arg: 2, scope: !6152, file: !3, line: 649, type: !569)
!6158 = !DILocation(line: 649, column: 22, scope: !6152)
!6159 = !DILocalVariable(name: "msgid", arg: 3, scope: !6152, file: !3, line: 650, type: !2428)
!6160 = !DILocation(line: 650, column: 19, scope: !6152)
!6161 = !DILocalVariable(name: "nesting_depth", scope: !6152, file: !3, line: 652, type: !7)
!6162 = !DILocation(line: 652, column: 12, scope: !6152)
!6163 = !DILocation(line: 654, column: 25, scope: !6164)
!6164 = distinct !DILexicalBlock(scope: !6152, file: !3, line: 654, column: 7)
!6165 = !DILocation(line: 654, column: 33, scope: !6164)
!6166 = !DILocation(line: 654, column: 39, scope: !6164)
!6167 = !DILocation(line: 654, column: 7, scope: !6164)
!6168 = !DILocation(line: 654, column: 7, scope: !6152)
!6169 = !DILocation(line: 655, column: 5, scope: !6164)
!6170 = !DILocation(line: 658, column: 3, scope: !6152)
!6171 = !DILocalVariable(name: "token", scope: !6172, file: !3, line: 661, type: !4459)
!6172 = distinct !DILexicalBlock(scope: !6152, file: !3, line: 659, column: 5)
!6173 = !DILocation(line: 661, column: 16, scope: !6172)
!6174 = !DILocation(line: 661, column: 45, scope: !6172)
!6175 = !DILocation(line: 661, column: 24, scope: !6172)
!6176 = !DILocation(line: 663, column: 11, scope: !6177)
!6177 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 663, column: 11)
!6178 = !DILocation(line: 663, column: 18, scope: !6177)
!6179 = !DILocation(line: 663, column: 26, scope: !6177)
!6180 = !DILocation(line: 663, column: 23, scope: !6177)
!6181 = !DILocation(line: 663, column: 31, scope: !6177)
!6182 = !DILocation(line: 663, column: 35, scope: !6177)
!6183 = !DILocation(line: 663, column: 11, scope: !6172)
!6184 = !DILocation(line: 665, column: 28, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !6177, file: !3, line: 664, column: 2)
!6186 = !DILocation(line: 665, column: 4, scope: !6185)
!6187 = !DILocation(line: 666, column: 4, scope: !6185)
!6188 = !DILocation(line: 670, column: 11, scope: !6189)
!6189 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 670, column: 11)
!6190 = !DILocation(line: 670, column: 18, scope: !6189)
!6191 = !DILocation(line: 670, column: 23, scope: !6189)
!6192 = !DILocation(line: 670, column: 11, scope: !6172)
!6193 = !DILocation(line: 671, column: 2, scope: !6189)
!6194 = !DILocation(line: 672, column: 11, scope: !6195)
!6195 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 672, column: 11)
!6196 = !DILocation(line: 672, column: 18, scope: !6195)
!6197 = !DILocation(line: 672, column: 23, scope: !6195)
!6198 = !DILocation(line: 672, column: 41, scope: !6195)
!6199 = !DILocation(line: 672, column: 44, scope: !6195)
!6200 = !DILocation(line: 672, column: 52, scope: !6195)
!6201 = !DILocation(line: 672, column: 11, scope: !6172)
!6202 = !DILocation(line: 673, column: 2, scope: !6195)
!6203 = !DILocation(line: 674, column: 11, scope: !6204)
!6204 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 674, column: 11)
!6205 = !DILocation(line: 674, column: 18, scope: !6204)
!6206 = !DILocation(line: 674, column: 23, scope: !6204)
!6207 = !DILocation(line: 675, column: 4, scope: !6204)
!6208 = !DILocation(line: 675, column: 7, scope: !6204)
!6209 = !DILocation(line: 675, column: 14, scope: !6204)
!6210 = !DILocation(line: 675, column: 19, scope: !6204)
!6211 = !DILocation(line: 676, column: 4, scope: !6204)
!6212 = !DILocation(line: 676, column: 7, scope: !6204)
!6213 = !DILocation(line: 676, column: 14, scope: !6204)
!6214 = !DILocation(line: 676, column: 19, scope: !6204)
!6215 = !DILocation(line: 674, column: 11, scope: !6172)
!6216 = !DILocation(line: 677, column: 2, scope: !6204)
!6217 = !DILocation(line: 678, column: 16, scope: !6218)
!6218 = distinct !DILexicalBlock(scope: !6204, file: !3, line: 678, column: 16)
!6219 = !DILocation(line: 678, column: 23, scope: !6218)
!6220 = !DILocation(line: 678, column: 28, scope: !6218)
!6221 = !DILocation(line: 679, column: 9, scope: !6218)
!6222 = !DILocation(line: 679, column: 12, scope: !6218)
!6223 = !DILocation(line: 679, column: 19, scope: !6218)
!6224 = !DILocation(line: 679, column: 24, scope: !6218)
!6225 = !DILocation(line: 680, column: 9, scope: !6218)
!6226 = !DILocation(line: 680, column: 12, scope: !6218)
!6227 = !DILocation(line: 680, column: 19, scope: !6218)
!6228 = !DILocation(line: 680, column: 24, scope: !6218)
!6229 = !DILocation(line: 678, column: 16, scope: !6204)
!6230 = !DILocation(line: 682, column: 21, scope: !6231)
!6231 = distinct !DILexicalBlock(scope: !6232, file: !3, line: 682, column: 8)
!6232 = distinct !DILexicalBlock(scope: !6218, file: !3, line: 681, column: 2)
!6233 = !DILocation(line: 682, column: 24, scope: !6231)
!6234 = !DILocation(line: 682, column: 8, scope: !6232)
!6235 = !DILocation(line: 683, column: 6, scope: !6231)
!6236 = !DILocation(line: 684, column: 2, scope: !6232)
!6237 = !DILocation(line: 686, column: 31, scope: !6172)
!6238 = !DILocation(line: 686, column: 7, scope: !6172)
!6239 = distinct !{!6239, !6170, !6240}
!6240 = !DILocation(line: 687, column: 5, scope: !6152)
!6241 = !DILocation(line: 688, column: 3, scope: !6152)
!6242 = !DILocation(line: 688, column: 11, scope: !6152)
!6243 = !DILocation(line: 688, column: 17, scope: !6152)
!6244 = !DILocation(line: 689, column: 1, scope: !6152)
!6245 = distinct !DISubprogram(name: "c_parser_next_token_is_keyword", scope: !3, file: !3, line: 351, type: !6246, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6246 = !DISubroutineType(types: !6247)
!6247 = !{!2344, !3401, !391}
!6248 = !DILocalVariable(name: "parser", arg: 1, scope: !6245, file: !3, line: 351, type: !3401)
!6249 = !DILocation(line: 351, column: 43, scope: !6245)
!6250 = !DILocalVariable(name: "keyword", arg: 2, scope: !6245, file: !3, line: 351, type: !391)
!6251 = !DILocation(line: 351, column: 60, scope: !6245)
!6252 = !DILocation(line: 353, column: 31, scope: !6245)
!6253 = !DILocation(line: 353, column: 10, scope: !6245)
!6254 = !DILocation(line: 353, column: 40, scope: !6245)
!6255 = !DILocation(line: 353, column: 51, scope: !6245)
!6256 = !DILocation(line: 353, column: 48, scope: !6245)
!6257 = !DILocation(line: 353, column: 3, scope: !6245)
!6258 = distinct !DISubprogram(name: "c_parser_asm_string_literal", scope: !3, file: !3, line: 2748, type: !6114, scopeLine: 2749, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6259 = !DILocalVariable(name: "parser", arg: 1, scope: !6258, file: !3, line: 2748, type: !3401)
!6260 = !DILocation(line: 2748, column: 40, scope: !6258)
!6261 = !DILocalVariable(name: "str", scope: !6258, file: !3, line: 2750, type: !2224)
!6262 = !DILocation(line: 2750, column: 8, scope: !6258)
!6263 = !DILocation(line: 2751, column: 31, scope: !6264)
!6264 = distinct !DILexicalBlock(scope: !6258, file: !3, line: 2751, column: 7)
!6265 = !DILocation(line: 2751, column: 7, scope: !6264)
!6266 = !DILocation(line: 2751, column: 7, scope: !6258)
!6267 = !DILocation(line: 2753, column: 34, scope: !6268)
!6268 = distinct !DILexicalBlock(scope: !6264, file: !3, line: 2752, column: 5)
!6269 = !DILocation(line: 2753, column: 13, scope: !6268)
!6270 = !DILocation(line: 2753, column: 43, scope: !6268)
!6271 = !DILocation(line: 2753, column: 11, scope: !6268)
!6272 = !DILocation(line: 2754, column: 31, scope: !6268)
!6273 = !DILocation(line: 2754, column: 7, scope: !6268)
!6274 = !DILocation(line: 2755, column: 5, scope: !6268)
!6275 = !DILocation(line: 2756, column: 36, scope: !6276)
!6276 = distinct !DILexicalBlock(scope: !6264, file: !3, line: 2756, column: 12)
!6277 = !DILocation(line: 2756, column: 12, scope: !6276)
!6278 = !DILocation(line: 2756, column: 12, scope: !6264)
!6279 = !DILocation(line: 2758, column: 38, scope: !6280)
!6280 = distinct !DILexicalBlock(scope: !6276, file: !3, line: 2757, column: 5)
!6281 = !DILocation(line: 2758, column: 17, scope: !6280)
!6282 = !DILocation(line: 2758, column: 47, scope: !6280)
!6283 = !DILocation(line: 2758, column: 7, scope: !6280)
!6284 = !DILocation(line: 2760, column: 13, scope: !6280)
!6285 = !DILocation(line: 2760, column: 11, scope: !6280)
!6286 = !DILocation(line: 2761, column: 31, scope: !6280)
!6287 = !DILocation(line: 2761, column: 7, scope: !6280)
!6288 = !DILocation(line: 2762, column: 5, scope: !6280)
!6289 = !DILocation(line: 2765, column: 23, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6276, file: !3, line: 2764, column: 5)
!6291 = !DILocation(line: 2765, column: 7, scope: !6290)
!6292 = !DILocation(line: 2766, column: 11, scope: !6290)
!6293 = !DILocation(line: 2768, column: 10, scope: !6258)
!6294 = !DILocation(line: 2768, column: 3, scope: !6258)
!6295 = distinct !DISubprogram(name: "c_parser_objc_protocol_refs", scope: !3, file: !3, line: 6672, type: !6114, scopeLine: 6673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6296 = !DILocalVariable(name: "parser", arg: 1, scope: !6295, file: !3, line: 6672, type: !3401)
!6297 = !DILocation(line: 6672, column: 40, scope: !6295)
!6298 = !DILocalVariable(name: "list", scope: !6295, file: !3, line: 6674, type: !2224)
!6299 = !DILocation(line: 6674, column: 8, scope: !6295)
!6300 = !DILocation(line: 6675, column: 3, scope: !6295)
!6301 = !DILocation(line: 6676, column: 27, scope: !6295)
!6302 = !DILocation(line: 6676, column: 3, scope: !6295)
!6303 = !DILocation(line: 6679, column: 3, scope: !6295)
!6304 = !DILocalVariable(name: "id", scope: !6305, file: !3, line: 6681, type: !2224)
!6305 = distinct !DILexicalBlock(scope: !6295, file: !3, line: 6680, column: 5)
!6306 = !DILocation(line: 6681, column: 12, scope: !6305)
!6307 = !DILocation(line: 6682, column: 39, scope: !6308)
!6308 = distinct !DILexicalBlock(scope: !6305, file: !3, line: 6682, column: 11)
!6309 = !DILocation(line: 6682, column: 11, scope: !6308)
!6310 = !DILocation(line: 6682, column: 11, scope: !6305)
!6311 = !DILocation(line: 6684, column: 20, scope: !6312)
!6312 = distinct !DILexicalBlock(scope: !6308, file: !3, line: 6683, column: 2)
!6313 = !DILocation(line: 6684, column: 4, scope: !6312)
!6314 = !DILocation(line: 6685, column: 4, scope: !6312)
!6315 = !DILocation(line: 6687, column: 33, scope: !6305)
!6316 = !DILocation(line: 6687, column: 12, scope: !6305)
!6317 = !DILocation(line: 6687, column: 42, scope: !6305)
!6318 = !DILocation(line: 6687, column: 10, scope: !6305)
!6319 = !DILocation(line: 6688, column: 23, scope: !6305)
!6320 = !DILocation(line: 6688, column: 29, scope: !6305)
!6321 = !DILocation(line: 6688, column: 14, scope: !6305)
!6322 = !DILocation(line: 6688, column: 12, scope: !6305)
!6323 = !DILocation(line: 6689, column: 31, scope: !6305)
!6324 = !DILocation(line: 6689, column: 7, scope: !6305)
!6325 = !DILocation(line: 6690, column: 35, scope: !6326)
!6326 = distinct !DILexicalBlock(scope: !6305, file: !3, line: 6690, column: 11)
!6327 = !DILocation(line: 6690, column: 11, scope: !6326)
!6328 = !DILocation(line: 6690, column: 11, scope: !6305)
!6329 = !DILocation(line: 6691, column: 26, scope: !6326)
!6330 = !DILocation(line: 6691, column: 2, scope: !6326)
!6331 = !DILocation(line: 6693, column: 2, scope: !6326)
!6332 = distinct !{!6332, !6303, !6333}
!6333 = !DILocation(line: 6694, column: 5, scope: !6295)
!6334 = !DILocation(line: 6695, column: 21, scope: !6295)
!6335 = !DILocation(line: 6695, column: 3, scope: !6295)
!6336 = !DILocation(line: 6696, column: 10, scope: !6295)
!6337 = !DILocation(line: 6696, column: 3, scope: !6295)
!6338 = distinct !DISubprogram(name: "c_parser_objc_methodprotolist", scope: !3, file: !3, line: 6468, type: !4514, scopeLine: 6469, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6339 = !DILocalVariable(name: "parser", arg: 1, scope: !6338, file: !3, line: 6468, type: !3401)
!6340 = !DILocation(line: 6468, column: 42, scope: !6338)
!6341 = !DILocation(line: 6470, column: 3, scope: !6338)
!6342 = !DILocation(line: 6473, column: 36, scope: !6343)
!6343 = distinct !DILexicalBlock(scope: !6338, file: !3, line: 6471, column: 5)
!6344 = !DILocation(line: 6473, column: 15, scope: !6343)
!6345 = !DILocation(line: 6473, column: 45, scope: !6343)
!6346 = !DILocation(line: 6473, column: 7, scope: !6343)
!6347 = !DILocation(line: 6476, column: 34, scope: !6348)
!6348 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 6474, column: 2)
!6349 = !DILocation(line: 6476, column: 13, scope: !6348)
!6350 = !DILocation(line: 6476, column: 43, scope: !6348)
!6351 = !DILocation(line: 6476, column: 4, scope: !6348)
!6352 = !DILocation(line: 6478, column: 28, scope: !6348)
!6353 = !DILocation(line: 6478, column: 4, scope: !6348)
!6354 = !DILocation(line: 6479, column: 4, scope: !6348)
!6355 = !DILocation(line: 6482, column: 31, scope: !6348)
!6356 = !DILocation(line: 6482, column: 4, scope: !6348)
!6357 = !DILocation(line: 6483, column: 4, scope: !6348)
!6358 = !DILocation(line: 6485, column: 21, scope: !6348)
!6359 = !DILocation(line: 6485, column: 4, scope: !6348)
!6360 = !DILocation(line: 6486, column: 4, scope: !6348)
!6361 = !DILocation(line: 6488, column: 4, scope: !6348)
!6362 = !DILocation(line: 6490, column: 40, scope: !6363)
!6363 = distinct !DILexicalBlock(scope: !6348, file: !3, line: 6490, column: 8)
!6364 = !DILocation(line: 6490, column: 8, scope: !6363)
!6365 = !DILocation(line: 6490, column: 8, scope: !6348)
!6366 = !DILocation(line: 6491, column: 6, scope: !6363)
!6367 = !DILocation(line: 6492, column: 35, scope: !6348)
!6368 = !DILocation(line: 6492, column: 4, scope: !6348)
!6369 = !DILocation(line: 6493, column: 4, scope: !6348)
!6370 = distinct !{!6370, !6341, !6371}
!6371 = !DILocation(line: 6495, column: 5, scope: !6338)
!6372 = !DILocation(line: 6496, column: 1, scope: !6338)
!6373 = distinct !DISubprogram(name: "c_parser_require_keyword", scope: !3, file: !3, line: 625, type: !6374, scopeLine: 628, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6374 = !DISubroutineType(types: !6375)
!6375 = !{!2344, !3401, !391, !2428}
!6376 = !DILocalVariable(name: "parser", arg: 1, scope: !6373, file: !3, line: 625, type: !3401)
!6377 = !DILocation(line: 625, column: 37, scope: !6373)
!6378 = !DILocalVariable(name: "keyword", arg: 2, scope: !6373, file: !3, line: 626, type: !391)
!6379 = !DILocation(line: 626, column: 15, scope: !6373)
!6380 = !DILocalVariable(name: "msgid", arg: 3, scope: !6373, file: !3, line: 627, type: !2428)
!6381 = !DILocation(line: 627, column: 18, scope: !6373)
!6382 = !DILocation(line: 629, column: 39, scope: !6383)
!6383 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 629, column: 7)
!6384 = !DILocation(line: 629, column: 47, scope: !6383)
!6385 = !DILocation(line: 629, column: 7, scope: !6383)
!6386 = !DILocation(line: 629, column: 7, scope: !6373)
!6387 = !DILocation(line: 631, column: 31, scope: !6388)
!6388 = distinct !DILexicalBlock(scope: !6383, file: !3, line: 630, column: 5)
!6389 = !DILocation(line: 631, column: 7, scope: !6388)
!6390 = !DILocation(line: 632, column: 7, scope: !6388)
!6391 = !DILocation(line: 636, column: 23, scope: !6392)
!6392 = distinct !DILexicalBlock(scope: !6383, file: !3, line: 635, column: 5)
!6393 = !DILocation(line: 636, column: 31, scope: !6392)
!6394 = !DILocation(line: 636, column: 7, scope: !6392)
!6395 = !DILocation(line: 637, column: 7, scope: !6392)
!6396 = !DILocation(line: 639, column: 1, scope: !6373)
!6397 = distinct !DISubprogram(name: "c_parser_objc_class_instance_variables", scope: !3, file: !3, line: 6209, type: !4514, scopeLine: 6210, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6398 = !DILocalVariable(name: "parser", arg: 1, scope: !6397, file: !3, line: 6209, type: !3401)
!6399 = !DILocation(line: 6209, column: 51, scope: !6397)
!6400 = !DILocation(line: 6211, column: 3, scope: !6397)
!6401 = !DILocation(line: 6212, column: 27, scope: !6397)
!6402 = !DILocation(line: 6212, column: 3, scope: !6397)
!6403 = !DILocation(line: 6213, column: 3, scope: !6397)
!6404 = !DILocation(line: 6213, column: 38, scope: !6397)
!6405 = !DILocation(line: 6213, column: 10, scope: !6397)
!6406 = !DILocalVariable(name: "decls", scope: !6407, file: !3, line: 6215, type: !2224)
!6407 = distinct !DILexicalBlock(scope: !6397, file: !3, line: 6214, column: 5)
!6408 = !DILocation(line: 6215, column: 12, scope: !6407)
!6409 = !DILocation(line: 6217, column: 35, scope: !6410)
!6410 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 6217, column: 11)
!6411 = !DILocation(line: 6217, column: 11, scope: !6410)
!6412 = !DILocation(line: 6217, column: 11, scope: !6407)
!6413 = !DILocation(line: 6219, column: 34, scope: !6414)
!6414 = distinct !DILexicalBlock(scope: !6410, file: !3, line: 6218, column: 2)
!6415 = !DILocation(line: 6219, column: 13, scope: !6414)
!6416 = !DILocation(line: 6219, column: 43, scope: !6414)
!6417 = !DILocation(line: 6219, column: 4, scope: !6414)
!6418 = !DILocation(line: 6221, column: 28, scope: !6414)
!6419 = !DILocation(line: 6221, column: 4, scope: !6414)
!6420 = !DILocation(line: 6222, column: 4, scope: !6414)
!6421 = distinct !{!6421, !6403, !6422}
!6422 = !DILocation(line: 6265, column: 5, scope: !6397)
!6423 = !DILocation(line: 6225, column: 35, scope: !6424)
!6424 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 6225, column: 11)
!6425 = !DILocation(line: 6225, column: 11, scope: !6424)
!6426 = !DILocation(line: 6225, column: 11, scope: !6407)
!6427 = !DILocation(line: 6227, column: 28, scope: !6428)
!6428 = distinct !DILexicalBlock(scope: !6424, file: !3, line: 6226, column: 2)
!6429 = !DILocation(line: 6227, column: 4, scope: !6428)
!6430 = !DILocation(line: 6228, column: 4, scope: !6428)
!6431 = !DILocation(line: 6231, column: 43, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 6231, column: 11)
!6433 = !DILocation(line: 6231, column: 11, scope: !6432)
!6434 = !DILocation(line: 6231, column: 11, scope: !6407)
!6435 = !DILocation(line: 6233, column: 28, scope: !6436)
!6436 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 6232, column: 2)
!6437 = !DILocation(line: 6233, column: 4, scope: !6436)
!6438 = !DILocation(line: 6234, column: 4, scope: !6436)
!6439 = !DILocation(line: 6235, column: 4, scope: !6436)
!6440 = !DILocation(line: 6237, column: 48, scope: !6441)
!6441 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 6237, column: 16)
!6442 = !DILocation(line: 6237, column: 16, scope: !6441)
!6443 = !DILocation(line: 6237, column: 16, scope: !6432)
!6444 = !DILocation(line: 6239, column: 28, scope: !6445)
!6445 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 6238, column: 2)
!6446 = !DILocation(line: 6239, column: 4, scope: !6445)
!6447 = !DILocation(line: 6240, column: 4, scope: !6445)
!6448 = !DILocation(line: 6241, column: 4, scope: !6445)
!6449 = !DILocation(line: 6243, column: 48, scope: !6450)
!6450 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 6243, column: 16)
!6451 = !DILocation(line: 6243, column: 16, scope: !6450)
!6452 = !DILocation(line: 6243, column: 16, scope: !6441)
!6453 = !DILocation(line: 6245, column: 28, scope: !6454)
!6454 = distinct !DILexicalBlock(scope: !6450, file: !3, line: 6244, column: 2)
!6455 = !DILocation(line: 6245, column: 4, scope: !6454)
!6456 = !DILocation(line: 6246, column: 4, scope: !6454)
!6457 = !DILocation(line: 6247, column: 4, scope: !6454)
!6458 = !DILocation(line: 6249, column: 40, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6450, file: !3, line: 6249, column: 16)
!6460 = !DILocation(line: 6249, column: 16, scope: !6459)
!6461 = !DILocation(line: 6249, column: 16, scope: !6450)
!6462 = !DILocation(line: 6251, column: 21, scope: !6463)
!6463 = distinct !DILexicalBlock(scope: !6459, file: !3, line: 6250, column: 2)
!6464 = !DILocation(line: 6251, column: 4, scope: !6463)
!6465 = !DILocation(line: 6252, column: 4, scope: !6463)
!6466 = !DILocation(line: 6256, column: 44, scope: !6407)
!6467 = !DILocation(line: 6256, column: 15, scope: !6407)
!6468 = !DILocation(line: 6256, column: 13, scope: !6407)
!6469 = !DILocalVariable(name: "ivar", scope: !6470, file: !3, line: 6260, type: !2224)
!6470 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 6257, column: 7)
!6471 = !DILocation(line: 6260, column: 7, scope: !6470)
!6472 = !DILocation(line: 6260, column: 24, scope: !6470)
!6473 = !DILocation(line: 6260, column: 14, scope: !6470)
!6474 = !DILocation(line: 6261, column: 2, scope: !6470)
!6475 = !DILocation(line: 6261, column: 9, scope: !6476)
!6476 = distinct !DILexicalBlock(scope: !6477, file: !3, line: 6261, column: 2)
!6477 = distinct !DILexicalBlock(scope: !6470, file: !3, line: 6261, column: 2)
!6478 = !DILocation(line: 6261, column: 2, scope: !6477)
!6479 = !DILocation(line: 6262, column: 32, scope: !6476)
!6480 = !DILocation(line: 6262, column: 4, scope: !6476)
!6481 = !DILocation(line: 6261, column: 22, scope: !6476)
!6482 = !DILocation(line: 6261, column: 20, scope: !6476)
!6483 = !DILocation(line: 6261, column: 2, scope: !6476)
!6484 = distinct !{!6484, !6478, !6485}
!6485 = !DILocation(line: 6262, column: 48, scope: !6477)
!6486 = !DILocation(line: 6264, column: 34, scope: !6407)
!6487 = !DILocation(line: 6264, column: 7, scope: !6407)
!6488 = !DILocation(line: 6266, column: 1, scope: !6397)
!6489 = distinct !DISubprogram(name: "c_parser_objc_methodproto", scope: !3, file: !3, line: 6505, type: !4514, scopeLine: 6506, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6490 = !DILocalVariable(name: "parser", arg: 1, scope: !6489, file: !3, line: 6505, type: !3401)
!6491 = !DILocation(line: 6505, column: 38, scope: !6489)
!6492 = !DILocalVariable(name: "type", scope: !6489, file: !3, line: 6507, type: !190)
!6493 = !DILocation(line: 6507, column: 18, scope: !6489)
!6494 = !DILocation(line: 6507, column: 52, scope: !6489)
!6495 = !DILocation(line: 6507, column: 25, scope: !6489)
!6496 = !DILocalVariable(name: "decl", scope: !6489, file: !3, line: 6508, type: !2224)
!6497 = !DILocation(line: 6508, column: 8, scope: !6489)
!6498 = !DILocation(line: 6509, column: 25, scope: !6489)
!6499 = !DILocation(line: 6509, column: 3, scope: !6489)
!6500 = !DILocation(line: 6511, column: 3, scope: !6489)
!6501 = !DILocation(line: 6511, column: 11, scope: !6489)
!6502 = !DILocation(line: 6511, column: 27, scope: !6489)
!6503 = !DILocation(line: 6512, column: 37, scope: !6489)
!6504 = !DILocation(line: 6512, column: 10, scope: !6489)
!6505 = !DILocation(line: 6512, column: 8, scope: !6489)
!6506 = !DILocation(line: 6514, column: 3, scope: !6489)
!6507 = !DILocation(line: 6514, column: 11, scope: !6489)
!6508 = !DILocation(line: 6514, column: 27, scope: !6489)
!6509 = !DILocation(line: 6515, column: 32, scope: !6489)
!6510 = !DILocation(line: 6515, column: 3, scope: !6489)
!6511 = !DILocation(line: 6516, column: 30, scope: !6489)
!6512 = !DILocation(line: 6516, column: 3, scope: !6489)
!6513 = !DILocation(line: 6517, column: 1, scope: !6489)
!6514 = distinct !DISubprogram(name: "c_parser_objc_method_type", scope: !3, file: !3, line: 6404, type: !6515, scopeLine: 6405, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6515 = !DISubroutineType(types: !6516)
!6516 = !{!190, !3401}
!6517 = !DILocalVariable(name: "parser", arg: 1, scope: !6514, file: !3, line: 6404, type: !3401)
!6518 = !DILocation(line: 6404, column: 38, scope: !6514)
!6519 = !DILocation(line: 6406, column: 32, scope: !6514)
!6520 = !DILocation(line: 6406, column: 11, scope: !6514)
!6521 = !DILocation(line: 6406, column: 41, scope: !6514)
!6522 = !DILocation(line: 6406, column: 3, scope: !6514)
!6523 = !DILocation(line: 6409, column: 31, scope: !6524)
!6524 = distinct !DILexicalBlock(scope: !6514, file: !3, line: 6407, column: 5)
!6525 = !DILocation(line: 6409, column: 7, scope: !6524)
!6526 = !DILocation(line: 6410, column: 7, scope: !6524)
!6527 = !DILocation(line: 6412, column: 31, scope: !6524)
!6528 = !DILocation(line: 6412, column: 7, scope: !6524)
!6529 = !DILocation(line: 6413, column: 7, scope: !6524)
!6530 = !DILocation(line: 6415, column: 7, scope: !6524)
!6531 = !DILocation(line: 6416, column: 5, scope: !6524)
!6532 = !DILocation(line: 6418, column: 5, scope: !6514)
!6533 = !DILocation(line: 6420, column: 1, scope: !6514)
!6534 = distinct !DISubprogram(name: "c_parser_objc_method_decl", scope: !3, file: !3, line: 6550, type: !6114, scopeLine: 6551, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6535 = !DILocalVariable(name: "parser", arg: 1, scope: !6534, file: !3, line: 6550, type: !3401)
!6536 = !DILocation(line: 6550, column: 38, scope: !6534)
!6537 = !DILocalVariable(name: "type", scope: !6534, file: !3, line: 6552, type: !2224)
!6538 = !DILocation(line: 6552, column: 8, scope: !6534)
!6539 = !DILocalVariable(name: "sel", scope: !6534, file: !3, line: 6553, type: !2224)
!6540 = !DILocation(line: 6553, column: 8, scope: !6534)
!6541 = !DILocalVariable(name: "parms", scope: !6534, file: !3, line: 6554, type: !2224)
!6542 = !DILocation(line: 6554, column: 8, scope: !6534)
!6543 = !DILocalVariable(name: "ellipsis", scope: !6534, file: !3, line: 6555, type: !2344)
!6544 = !DILocation(line: 6555, column: 8, scope: !6534)
!6545 = !DILocation(line: 6557, column: 31, scope: !6546)
!6546 = distinct !DILexicalBlock(scope: !6534, file: !3, line: 6557, column: 7)
!6547 = !DILocation(line: 6557, column: 7, scope: !6546)
!6548 = !DILocation(line: 6557, column: 7, scope: !6534)
!6549 = !DILocation(line: 6559, column: 31, scope: !6550)
!6550 = distinct !DILexicalBlock(scope: !6546, file: !3, line: 6558, column: 5)
!6551 = !DILocation(line: 6559, column: 7, scope: !6550)
!6552 = !DILocation(line: 6560, column: 39, scope: !6550)
!6553 = !DILocation(line: 6560, column: 14, scope: !6550)
!6554 = !DILocation(line: 6560, column: 12, scope: !6550)
!6555 = !DILocation(line: 6561, column: 34, scope: !6550)
!6556 = !DILocation(line: 6561, column: 7, scope: !6550)
!6557 = !DILocation(line: 6562, column: 5, scope: !6550)
!6558 = !DILocation(line: 6563, column: 33, scope: !6534)
!6559 = !DILocation(line: 6563, column: 9, scope: !6534)
!6560 = !DILocation(line: 6563, column: 7, scope: !6534)
!6561 = !DILocation(line: 6567, column: 8, scope: !6562)
!6562 = distinct !DILexicalBlock(scope: !6534, file: !3, line: 6567, column: 7)
!6563 = !DILocation(line: 6567, column: 12, scope: !6562)
!6564 = !DILocation(line: 6567, column: 39, scope: !6562)
!6565 = !DILocation(line: 6567, column: 15, scope: !6562)
!6566 = !DILocation(line: 6567, column: 7, scope: !6534)
!6567 = !DILocalVariable(name: "tsel", scope: !6568, file: !3, line: 6569, type: !2224)
!6568 = distinct !DILexicalBlock(scope: !6562, file: !3, line: 6568, column: 5)
!6569 = !DILocation(line: 6569, column: 12, scope: !6568)
!6570 = !DILocation(line: 6569, column: 19, scope: !6568)
!6571 = !DILocalVariable(name: "list", scope: !6568, file: !3, line: 6570, type: !2224)
!6572 = !DILocation(line: 6570, column: 12, scope: !6568)
!6573 = !DILocation(line: 6571, column: 7, scope: !6568)
!6574 = !DILocalVariable(name: "atype", scope: !6575, file: !3, line: 6573, type: !2224)
!6575 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 6572, column: 2)
!6576 = !DILocation(line: 6573, column: 9, scope: !6575)
!6577 = !DILocalVariable(name: "id", scope: !6575, file: !3, line: 6573, type: !2224)
!6578 = !DILocation(line: 6573, column: 28, scope: !6575)
!6579 = !DILocalVariable(name: "keyworddecl", scope: !6575, file: !3, line: 6573, type: !2224)
!6580 = !DILocation(line: 6573, column: 32, scope: !6575)
!6581 = !DILocation(line: 6574, column: 27, scope: !6582)
!6582 = distinct !DILexicalBlock(scope: !6575, file: !3, line: 6574, column: 8)
!6583 = !DILocation(line: 6574, column: 9, scope: !6582)
!6584 = !DILocation(line: 6574, column: 8, scope: !6575)
!6585 = !DILocation(line: 6575, column: 6, scope: !6582)
!6586 = !DILocation(line: 6576, column: 32, scope: !6587)
!6587 = distinct !DILexicalBlock(scope: !6575, file: !3, line: 6576, column: 8)
!6588 = !DILocation(line: 6576, column: 8, scope: !6587)
!6589 = !DILocation(line: 6576, column: 8, scope: !6575)
!6590 = !DILocation(line: 6578, column: 32, scope: !6591)
!6591 = distinct !DILexicalBlock(scope: !6587, file: !3, line: 6577, column: 6)
!6592 = !DILocation(line: 6578, column: 8, scope: !6591)
!6593 = !DILocation(line: 6579, column: 41, scope: !6591)
!6594 = !DILocation(line: 6579, column: 16, scope: !6591)
!6595 = !DILocation(line: 6579, column: 14, scope: !6591)
!6596 = !DILocation(line: 6580, column: 35, scope: !6591)
!6597 = !DILocation(line: 6580, column: 8, scope: !6591)
!6598 = !DILocation(line: 6582, column: 6, scope: !6591)
!6599 = !DILocation(line: 6583, column: 36, scope: !6600)
!6600 = distinct !DILexicalBlock(scope: !6575, file: !3, line: 6583, column: 8)
!6601 = !DILocation(line: 6583, column: 8, scope: !6600)
!6602 = !DILocation(line: 6583, column: 8, scope: !6575)
!6603 = !DILocation(line: 6585, column: 24, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6600, file: !3, line: 6584, column: 6)
!6605 = !DILocation(line: 6585, column: 8, scope: !6604)
!6606 = !DILocation(line: 6586, column: 15, scope: !6604)
!6607 = !DILocation(line: 6586, column: 8, scope: !6604)
!6608 = !DILocation(line: 6588, column: 30, scope: !6575)
!6609 = !DILocation(line: 6588, column: 9, scope: !6575)
!6610 = !DILocation(line: 6588, column: 39, scope: !6575)
!6611 = !DILocation(line: 6588, column: 7, scope: !6575)
!6612 = !DILocation(line: 6589, column: 28, scope: !6575)
!6613 = !DILocation(line: 6589, column: 4, scope: !6575)
!6614 = !DILocation(line: 6590, column: 43, scope: !6575)
!6615 = !DILocation(line: 6590, column: 49, scope: !6575)
!6616 = !DILocation(line: 6590, column: 56, scope: !6575)
!6617 = !DILocation(line: 6590, column: 18, scope: !6575)
!6618 = !DILocation(line: 6590, column: 16, scope: !6575)
!6619 = !DILocation(line: 6591, column: 20, scope: !6575)
!6620 = !DILocation(line: 6591, column: 26, scope: !6575)
!6621 = !DILocation(line: 6591, column: 11, scope: !6575)
!6622 = !DILocation(line: 6591, column: 9, scope: !6575)
!6623 = !DILocation(line: 6592, column: 35, scope: !6575)
!6624 = !DILocation(line: 6592, column: 11, scope: !6575)
!6625 = !DILocation(line: 6592, column: 9, scope: !6575)
!6626 = !DILocation(line: 6593, column: 9, scope: !6627)
!6627 = distinct !DILexicalBlock(scope: !6575, file: !3, line: 6593, column: 8)
!6628 = !DILocation(line: 6593, column: 14, scope: !6627)
!6629 = !DILocation(line: 6593, column: 45, scope: !6627)
!6630 = !DILocation(line: 6593, column: 17, scope: !6627)
!6631 = !DILocation(line: 6593, column: 8, scope: !6575)
!6632 = !DILocation(line: 6594, column: 6, scope: !6627)
!6633 = distinct !{!6633, !6573, !6634}
!6634 = !DILocation(line: 6595, column: 2, scope: !6568)
!6635 = !DILocation(line: 6599, column: 15, scope: !6568)
!6636 = !DILocation(line: 6599, column: 13, scope: !6568)
!6637 = !DILocation(line: 6600, column: 7, scope: !6568)
!6638 = !DILocation(line: 6600, column: 38, scope: !6568)
!6639 = !DILocation(line: 6600, column: 14, scope: !6568)
!6640 = !DILocalVariable(name: "parm", scope: !6641, file: !3, line: 6602, type: !6642)
!6641 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 6601, column: 2)
!6642 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6643, size: 64)
!6643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "c_parm", file: !2089, line: 360, size: 192, elements: !6644)
!6644 = !{!6645, !6646, !6647}
!6645 = !DIDerivedType(tag: DW_TAG_member, name: "specs", scope: !6643, file: !2089, line: 362, baseType: !4282, size: 64)
!6646 = !DIDerivedType(tag: DW_TAG_member, name: "attrs", scope: !6643, file: !2089, line: 364, baseType: !2224, size: 64, offset: 64)
!6647 = !DIDerivedType(tag: DW_TAG_member, name: "declarator", scope: !6643, file: !2089, line: 366, baseType: !4315, size: 64, offset: 128)
!6648 = !DILocation(line: 6602, column: 19, scope: !6641)
!6649 = !DILocation(line: 6603, column: 28, scope: !6641)
!6650 = !DILocation(line: 6603, column: 4, scope: !6641)
!6651 = !DILocation(line: 6604, column: 32, scope: !6652)
!6652 = distinct !DILexicalBlock(scope: !6641, file: !3, line: 6604, column: 8)
!6653 = !DILocation(line: 6604, column: 8, scope: !6652)
!6654 = !DILocation(line: 6604, column: 8, scope: !6641)
!6655 = !DILocation(line: 6606, column: 17, scope: !6656)
!6656 = distinct !DILexicalBlock(scope: !6652, file: !3, line: 6605, column: 6)
!6657 = !DILocation(line: 6607, column: 32, scope: !6656)
!6658 = !DILocation(line: 6607, column: 8, scope: !6656)
!6659 = !DILocation(line: 6608, column: 8, scope: !6656)
!6660 = !DILocation(line: 6610, column: 43, scope: !6641)
!6661 = !DILocation(line: 6610, column: 11, scope: !6641)
!6662 = !DILocation(line: 6610, column: 9, scope: !6641)
!6663 = !DILocation(line: 6611, column: 8, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6641, file: !3, line: 6611, column: 8)
!6665 = !DILocation(line: 6611, column: 13, scope: !6664)
!6666 = !DILocation(line: 6611, column: 8, scope: !6641)
!6667 = !DILocation(line: 6612, column: 6, scope: !6664)
!6668 = !DILocation(line: 6613, column: 21, scope: !6641)
!6669 = !DILocation(line: 6614, column: 7, scope: !6641)
!6670 = !DILocation(line: 6613, column: 12, scope: !6641)
!6671 = !DILocation(line: 6613, column: 10, scope: !6641)
!6672 = distinct !{!6672, !6637, !6673}
!6673 = !DILocation(line: 6615, column: 2, scope: !6568)
!6674 = !DILocation(line: 6616, column: 13, scope: !6568)
!6675 = !DILocation(line: 6616, column: 11, scope: !6568)
!6676 = !DILocation(line: 6617, column: 5, scope: !6568)
!6677 = !DILocation(line: 6618, column: 39, scope: !6534)
!6678 = !DILocation(line: 6618, column: 45, scope: !6534)
!6679 = !DILocation(line: 6618, column: 50, scope: !6534)
!6680 = !DILocation(line: 6618, column: 57, scope: !6534)
!6681 = !DILocation(line: 6618, column: 10, scope: !6534)
!6682 = !DILocation(line: 6618, column: 3, scope: !6534)
!6683 = !DILocation(line: 6619, column: 1, scope: !6534)
!6684 = distinct !DISubprogram(name: "c_parser_objc_type_name", scope: !3, file: !3, line: 6636, type: !6114, scopeLine: 6637, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6685 = !DILocalVariable(name: "parser", arg: 1, scope: !6684, file: !3, line: 6636, type: !3401)
!6686 = !DILocation(line: 6636, column: 36, scope: !6684)
!6687 = !DILocalVariable(name: "quals", scope: !6684, file: !3, line: 6638, type: !2224)
!6688 = !DILocation(line: 6638, column: 8, scope: !6684)
!6689 = !DILocalVariable(name: "type_name", scope: !6684, file: !3, line: 6639, type: !4278)
!6690 = !DILocation(line: 6639, column: 23, scope: !6684)
!6691 = !DILocalVariable(name: "type", scope: !6684, file: !3, line: 6640, type: !2224)
!6692 = !DILocation(line: 6640, column: 8, scope: !6684)
!6693 = !DILocation(line: 6641, column: 3, scope: !6684)
!6694 = !DILocalVariable(name: "token", scope: !6695, file: !3, line: 6643, type: !4459)
!6695 = distinct !DILexicalBlock(scope: !6684, file: !3, line: 6642, column: 5)
!6696 = !DILocation(line: 6643, column: 16, scope: !6695)
!6697 = !DILocation(line: 6643, column: 45, scope: !6695)
!6698 = !DILocation(line: 6643, column: 24, scope: !6695)
!6699 = !DILocation(line: 6644, column: 11, scope: !6700)
!6700 = distinct !DILexicalBlock(scope: !6695, file: !3, line: 6644, column: 11)
!6701 = !DILocation(line: 6644, column: 18, scope: !6700)
!6702 = !DILocation(line: 6644, column: 23, scope: !6700)
!6703 = !DILocation(line: 6645, column: 4, scope: !6700)
!6704 = !DILocation(line: 6645, column: 8, scope: !6700)
!6705 = !DILocation(line: 6645, column: 15, scope: !6700)
!6706 = !DILocation(line: 6645, column: 23, scope: !6700)
!6707 = !DILocation(line: 6646, column: 8, scope: !6700)
!6708 = !DILocation(line: 6646, column: 11, scope: !6700)
!6709 = !DILocation(line: 6646, column: 18, scope: !6700)
!6710 = !DILocation(line: 6646, column: 26, scope: !6700)
!6711 = !DILocation(line: 6647, column: 8, scope: !6700)
!6712 = !DILocation(line: 6647, column: 11, scope: !6700)
!6713 = !DILocation(line: 6647, column: 18, scope: !6700)
!6714 = !DILocation(line: 6647, column: 26, scope: !6700)
!6715 = !DILocation(line: 6648, column: 8, scope: !6700)
!6716 = !DILocation(line: 6648, column: 11, scope: !6700)
!6717 = !DILocation(line: 6648, column: 18, scope: !6700)
!6718 = !DILocation(line: 6648, column: 26, scope: !6700)
!6719 = !DILocation(line: 6649, column: 8, scope: !6700)
!6720 = !DILocation(line: 6649, column: 11, scope: !6700)
!6721 = !DILocation(line: 6649, column: 18, scope: !6700)
!6722 = !DILocation(line: 6649, column: 26, scope: !6700)
!6723 = !DILocation(line: 6650, column: 8, scope: !6700)
!6724 = !DILocation(line: 6650, column: 11, scope: !6700)
!6725 = !DILocation(line: 6650, column: 18, scope: !6700)
!6726 = !DILocation(line: 6650, column: 26, scope: !6700)
!6727 = !DILocation(line: 6644, column: 11, scope: !6695)
!6728 = !DILocation(line: 6652, column: 21, scope: !6729)
!6729 = distinct !DILexicalBlock(scope: !6700, file: !3, line: 6651, column: 2)
!6730 = !DILocation(line: 6652, column: 28, scope: !6729)
!6731 = !DILocation(line: 6652, column: 12, scope: !6729)
!6732 = !DILocation(line: 6652, column: 10, scope: !6729)
!6733 = !DILocation(line: 6653, column: 28, scope: !6729)
!6734 = !DILocation(line: 6653, column: 4, scope: !6729)
!6735 = !DILocation(line: 6654, column: 2, scope: !6729)
!6736 = !DILocation(line: 6656, column: 2, scope: !6700)
!6737 = distinct !{!6737, !6693, !6738}
!6738 = !DILocation(line: 6657, column: 5, scope: !6684)
!6739 = !DILocation(line: 6658, column: 44, scope: !6740)
!6740 = distinct !DILexicalBlock(scope: !6684, file: !3, line: 6658, column: 7)
!6741 = !DILocation(line: 6658, column: 7, scope: !6740)
!6742 = !DILocation(line: 6658, column: 7, scope: !6684)
!6743 = !DILocation(line: 6659, column: 37, scope: !6740)
!6744 = !DILocation(line: 6659, column: 17, scope: !6740)
!6745 = !DILocation(line: 6659, column: 15, scope: !6740)
!6746 = !DILocation(line: 6659, column: 5, scope: !6740)
!6747 = !DILocation(line: 6660, column: 7, scope: !6748)
!6748 = distinct !DILexicalBlock(scope: !6684, file: !3, line: 6660, column: 7)
!6749 = !DILocation(line: 6660, column: 7, scope: !6684)
!6750 = !DILocation(line: 6661, column: 26, scope: !6748)
!6751 = !DILocation(line: 6661, column: 12, scope: !6748)
!6752 = !DILocation(line: 6661, column: 10, scope: !6748)
!6753 = !DILocation(line: 6661, column: 5, scope: !6748)
!6754 = !DILocation(line: 6662, column: 10, scope: !6684)
!6755 = !DILocation(line: 6662, column: 3, scope: !6684)
!6756 = distinct !DISubprogram(name: "c_parser_objc_selector", scope: !3, file: !3, line: 6791, type: !6114, scopeLine: 6792, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6757 = !DILocalVariable(name: "parser", arg: 1, scope: !6756, file: !3, line: 6791, type: !3401)
!6758 = !DILocation(line: 6791, column: 35, scope: !6756)
!6759 = !DILocalVariable(name: "token", scope: !6756, file: !3, line: 6793, type: !4459)
!6760 = !DILocation(line: 6793, column: 12, scope: !6756)
!6761 = !DILocation(line: 6793, column: 41, scope: !6756)
!6762 = !DILocation(line: 6793, column: 20, scope: !6756)
!6763 = !DILocalVariable(name: "value", scope: !6756, file: !3, line: 6794, type: !2224)
!6764 = !DILocation(line: 6794, column: 8, scope: !6756)
!6765 = !DILocation(line: 6794, column: 16, scope: !6756)
!6766 = !DILocation(line: 6794, column: 23, scope: !6756)
!6767 = !DILocation(line: 6795, column: 7, scope: !6768)
!6768 = distinct !DILexicalBlock(scope: !6756, file: !3, line: 6795, column: 7)
!6769 = !DILocation(line: 6795, column: 14, scope: !6768)
!6770 = !DILocation(line: 6795, column: 19, scope: !6768)
!6771 = !DILocation(line: 6795, column: 7, scope: !6756)
!6772 = !DILocation(line: 6797, column: 31, scope: !6773)
!6773 = distinct !DILexicalBlock(scope: !6768, file: !3, line: 6796, column: 5)
!6774 = !DILocation(line: 6797, column: 7, scope: !6773)
!6775 = !DILocation(line: 6798, column: 14, scope: !6773)
!6776 = !DILocation(line: 6798, column: 7, scope: !6773)
!6777 = !DILocation(line: 6800, column: 7, scope: !6778)
!6778 = distinct !DILexicalBlock(scope: !6756, file: !3, line: 6800, column: 7)
!6779 = !DILocation(line: 6800, column: 14, scope: !6778)
!6780 = !DILocation(line: 6800, column: 19, scope: !6778)
!6781 = !DILocation(line: 6800, column: 7, scope: !6756)
!6782 = !DILocation(line: 6801, column: 5, scope: !6778)
!6783 = !DILocation(line: 6802, column: 11, scope: !6756)
!6784 = !DILocation(line: 6802, column: 18, scope: !6756)
!6785 = !DILocation(line: 6802, column: 3, scope: !6756)
!6786 = !DILocation(line: 6843, column: 31, scope: !6787)
!6787 = distinct !DILexicalBlock(scope: !6756, file: !3, line: 6803, column: 5)
!6788 = !DILocation(line: 6843, column: 7, scope: !6787)
!6789 = !DILocation(line: 6844, column: 14, scope: !6787)
!6790 = !DILocation(line: 6844, column: 7, scope: !6787)
!6791 = !DILocation(line: 6846, column: 7, scope: !6787)
!6792 = !DILocation(line: 6848, column: 1, scope: !6756)
!6793 = distinct !DISubprogram(name: "c_parser_parameter_declaration", scope: !3, file: !3, line: 2696, type: !6794, scopeLine: 2697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6794 = !DISubroutineType(types: !6795)
!6795 = !{!6642, !3401, !2224}
!6796 = !DILocalVariable(name: "parser", arg: 1, scope: !6793, file: !3, line: 2696, type: !3401)
!6797 = !DILocation(line: 2696, column: 43, scope: !6793)
!6798 = !DILocalVariable(name: "attrs", arg: 2, scope: !6793, file: !3, line: 2696, type: !2224)
!6799 = !DILocation(line: 2696, column: 56, scope: !6793)
!6800 = !DILocalVariable(name: "specs", scope: !6793, file: !3, line: 2698, type: !4282)
!6801 = !DILocation(line: 2698, column: 23, scope: !6793)
!6802 = !DILocalVariable(name: "declarator", scope: !6793, file: !3, line: 2699, type: !4315)
!6803 = !DILocation(line: 2699, column: 24, scope: !6793)
!6804 = !DILocalVariable(name: "prefix_attrs", scope: !6793, file: !3, line: 2700, type: !2224)
!6805 = !DILocation(line: 2700, column: 8, scope: !6793)
!6806 = !DILocalVariable(name: "postfix_attrs", scope: !6793, file: !3, line: 2701, type: !2224)
!6807 = !DILocation(line: 2701, column: 8, scope: !6793)
!6808 = !DILocalVariable(name: "dummy", scope: !6793, file: !3, line: 2702, type: !2344)
!6809 = !DILocation(line: 2702, column: 8, scope: !6793)
!6810 = !DILocation(line: 2703, column: 46, scope: !6811)
!6811 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 2703, column: 7)
!6812 = !DILocation(line: 2703, column: 8, scope: !6811)
!6813 = !DILocation(line: 2703, column: 7, scope: !6793)
!6814 = !DILocation(line: 2707, column: 23, scope: !6815)
!6815 = distinct !DILexicalBlock(scope: !6811, file: !3, line: 2704, column: 5)
!6816 = !DILocation(line: 2707, column: 7, scope: !6815)
!6817 = !DILocation(line: 2709, column: 42, scope: !6815)
!6818 = !DILocation(line: 2709, column: 7, scope: !6815)
!6819 = !DILocation(line: 2710, column: 7, scope: !6815)
!6820 = !DILocation(line: 2712, column: 11, scope: !6793)
!6821 = !DILocation(line: 2712, column: 9, scope: !6793)
!6822 = !DILocation(line: 2713, column: 7, scope: !6823)
!6823 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 2713, column: 7)
!6824 = !DILocation(line: 2713, column: 7, scope: !6793)
!6825 = !DILocation(line: 2715, column: 28, scope: !6826)
!6826 = distinct !DILexicalBlock(scope: !6823, file: !3, line: 2714, column: 5)
!6827 = !DILocation(line: 2715, column: 35, scope: !6826)
!6828 = !DILocation(line: 2715, column: 7, scope: !6826)
!6829 = !DILocation(line: 2716, column: 13, scope: !6826)
!6830 = !DILocation(line: 2717, column: 5, scope: !6826)
!6831 = !DILocation(line: 2718, column: 23, scope: !6793)
!6832 = !DILocation(line: 2718, column: 31, scope: !6793)
!6833 = !DILocation(line: 2718, column: 3, scope: !6793)
!6834 = !DILocation(line: 2719, column: 21, scope: !6793)
!6835 = !DILocation(line: 2719, column: 3, scope: !6793)
!6836 = !DILocation(line: 2720, column: 3, scope: !6793)
!6837 = !DILocation(line: 2721, column: 18, scope: !6793)
!6838 = !DILocation(line: 2721, column: 25, scope: !6793)
!6839 = !DILocation(line: 2721, column: 16, scope: !6793)
!6840 = !DILocation(line: 2722, column: 3, scope: !6793)
!6841 = !DILocation(line: 2722, column: 10, scope: !6793)
!6842 = !DILocation(line: 2722, column: 16, scope: !6793)
!6843 = !DILocation(line: 2723, column: 37, scope: !6793)
!6844 = !DILocation(line: 2723, column: 45, scope: !6793)
!6845 = !DILocation(line: 2723, column: 52, scope: !6793)
!6846 = !DILocation(line: 2723, column: 16, scope: !6793)
!6847 = !DILocation(line: 2723, column: 14, scope: !6793)
!6848 = !DILocation(line: 2725, column: 7, scope: !6849)
!6849 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 2725, column: 7)
!6850 = !DILocation(line: 2725, column: 18, scope: !6849)
!6851 = !DILocation(line: 2725, column: 7, scope: !6793)
!6852 = !DILocation(line: 2727, column: 34, scope: !6853)
!6853 = distinct !DILexicalBlock(scope: !6849, file: !3, line: 2726, column: 5)
!6854 = !DILocation(line: 2727, column: 7, scope: !6853)
!6855 = !DILocation(line: 2728, column: 7, scope: !6853)
!6856 = !DILocation(line: 2730, column: 39, scope: !6857)
!6857 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 2730, column: 7)
!6858 = !DILocation(line: 2730, column: 7, scope: !6857)
!6859 = !DILocation(line: 2730, column: 7, scope: !6793)
!6860 = !DILocation(line: 2731, column: 42, scope: !6857)
!6861 = !DILocation(line: 2731, column: 21, scope: !6857)
!6862 = !DILocation(line: 2731, column: 19, scope: !6857)
!6863 = !DILocation(line: 2731, column: 5, scope: !6857)
!6864 = !DILocation(line: 2732, column: 24, scope: !6793)
!6865 = !DILocation(line: 2732, column: 40, scope: !6793)
!6866 = !DILocation(line: 2732, column: 55, scope: !6793)
!6867 = !DILocation(line: 2732, column: 31, scope: !6793)
!6868 = !DILocation(line: 2733, column: 10, scope: !6793)
!6869 = !DILocation(line: 2732, column: 10, scope: !6793)
!6870 = !DILocation(line: 2732, column: 3, scope: !6793)
!6871 = !DILocation(line: 2734, column: 1, scope: !6793)
!6872 = distinct !DISubprogram(name: "c_parser_next_token_starts_typename", scope: !3, file: !3, line: 422, type: !6873, scopeLine: 423, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6873 = !DISubroutineType(types: !6874)
!6874 = !{!2344, !3401}
!6875 = !DILocalVariable(name: "parser", arg: 1, scope: !6872, file: !3, line: 422, type: !3401)
!6876 = !DILocation(line: 422, column: 48, scope: !6872)
!6877 = !DILocalVariable(name: "token", scope: !6872, file: !3, line: 424, type: !4459)
!6878 = !DILocation(line: 424, column: 12, scope: !6872)
!6879 = !DILocation(line: 424, column: 41, scope: !6872)
!6880 = !DILocation(line: 424, column: 20, scope: !6872)
!6881 = !DILocation(line: 425, column: 35, scope: !6872)
!6882 = !DILocation(line: 425, column: 10, scope: !6872)
!6883 = !DILocation(line: 425, column: 3, scope: !6872)
!6884 = distinct !DISubprogram(name: "c_parser_type_name", scope: !3, file: !3, line: 2997, type: !6885, scopeLine: 2998, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6885 = !DISubroutineType(types: !6886)
!6886 = !{!4278, !3401}
!6887 = !DILocalVariable(name: "parser", arg: 1, scope: !6884, file: !3, line: 2997, type: !3401)
!6888 = !DILocation(line: 2997, column: 31, scope: !6884)
!6889 = !DILocalVariable(name: "specs", scope: !6884, file: !3, line: 2999, type: !4282)
!6890 = !DILocation(line: 2999, column: 23, scope: !6884)
!6891 = !DILocation(line: 2999, column: 31, scope: !6884)
!6892 = !DILocalVariable(name: "declarator", scope: !6884, file: !3, line: 3000, type: !4315)
!6893 = !DILocation(line: 3000, column: 24, scope: !6884)
!6894 = !DILocalVariable(name: "ret", scope: !6884, file: !3, line: 3001, type: !4278)
!6895 = !DILocation(line: 3001, column: 23, scope: !6884)
!6896 = !DILocalVariable(name: "dummy", scope: !6884, file: !3, line: 3002, type: !2344)
!6897 = !DILocation(line: 3002, column: 8, scope: !6884)
!6898 = !DILocation(line: 3003, column: 23, scope: !6884)
!6899 = !DILocation(line: 3003, column: 31, scope: !6884)
!6900 = !DILocation(line: 3003, column: 3, scope: !6884)
!6901 = !DILocation(line: 3004, column: 8, scope: !6902)
!6902 = distinct !DILexicalBlock(scope: !6884, file: !3, line: 3004, column: 7)
!6903 = !DILocation(line: 3004, column: 15, scope: !6902)
!6904 = !DILocation(line: 3004, column: 7, scope: !6884)
!6905 = !DILocation(line: 3006, column: 23, scope: !6906)
!6906 = distinct !DILexicalBlock(scope: !6902, file: !3, line: 3005, column: 5)
!6907 = !DILocation(line: 3006, column: 7, scope: !6906)
!6908 = !DILocation(line: 3007, column: 7, scope: !6906)
!6909 = !DILocation(line: 3009, column: 3, scope: !6884)
!6910 = !DILocation(line: 3010, column: 21, scope: !6884)
!6911 = !DILocation(line: 3010, column: 3, scope: !6884)
!6912 = !DILocation(line: 3011, column: 37, scope: !6884)
!6913 = !DILocation(line: 3011, column: 45, scope: !6884)
!6914 = !DILocation(line: 3011, column: 52, scope: !6884)
!6915 = !DILocation(line: 3011, column: 16, scope: !6884)
!6916 = !DILocation(line: 3011, column: 14, scope: !6884)
!6917 = !DILocation(line: 3013, column: 7, scope: !6918)
!6918 = distinct !DILexicalBlock(scope: !6884, file: !3, line: 3013, column: 7)
!6919 = !DILocation(line: 3013, column: 18, scope: !6918)
!6920 = !DILocation(line: 3013, column: 7, scope: !6884)
!6921 = !DILocation(line: 3014, column: 5, scope: !6918)
!6922 = !DILocation(line: 3015, column: 9, scope: !6884)
!6923 = !DILocation(line: 3015, column: 7, scope: !6884)
!6924 = !DILocation(line: 3016, column: 16, scope: !6884)
!6925 = !DILocation(line: 3016, column: 3, scope: !6884)
!6926 = !DILocation(line: 3016, column: 8, scope: !6884)
!6927 = !DILocation(line: 3016, column: 14, scope: !6884)
!6928 = !DILocation(line: 3017, column: 21, scope: !6884)
!6929 = !DILocation(line: 3017, column: 3, scope: !6884)
!6930 = !DILocation(line: 3017, column: 8, scope: !6884)
!6931 = !DILocation(line: 3017, column: 19, scope: !6884)
!6932 = !DILocation(line: 3018, column: 10, scope: !6884)
!6933 = !DILocation(line: 3018, column: 3, scope: !6884)
!6934 = !DILocation(line: 3019, column: 1, scope: !6884)
!6935 = distinct !DISubprogram(name: "c_token_starts_typename", scope: !3, file: !3, line: 359, type: !6936, scopeLine: 360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6936 = !DISubroutineType(types: !6937)
!6937 = !{!2344, !4459}
!6938 = !DILocalVariable(name: "token", arg: 1, scope: !6935, file: !3, line: 359, type: !4459)
!6939 = !DILocation(line: 359, column: 35, scope: !6935)
!6940 = !DILocation(line: 361, column: 11, scope: !6935)
!6941 = !DILocation(line: 361, column: 18, scope: !6935)
!6942 = !DILocation(line: 361, column: 3, scope: !6935)
!6943 = !DILocation(line: 364, column: 15, scope: !6944)
!6944 = distinct !DILexicalBlock(scope: !6935, file: !3, line: 362, column: 5)
!6945 = !DILocation(line: 364, column: 22, scope: !6944)
!6946 = !DILocation(line: 364, column: 7, scope: !6944)
!6947 = !DILocation(line: 367, column: 4, scope: !6948)
!6948 = distinct !DILexicalBlock(scope: !6944, file: !3, line: 365, column: 2)
!6949 = !DILocation(line: 369, column: 4, scope: !6948)
!6950 = !DILocation(line: 371, column: 4, scope: !6948)
!6951 = !DILocation(line: 373, column: 4, scope: !6948)
!6952 = !DILocation(line: 374, column: 4, scope: !6948)
!6953 = !DILocation(line: 376, column: 4, scope: !6948)
!6954 = !DILocation(line: 377, column: 2, scope: !6948)
!6955 = !DILocation(line: 379, column: 15, scope: !6944)
!6956 = !DILocation(line: 379, column: 22, scope: !6944)
!6957 = !DILocation(line: 379, column: 7, scope: !6944)
!6958 = !DILocation(line: 406, column: 4, scope: !6959)
!6959 = distinct !DILexicalBlock(scope: !6944, file: !3, line: 380, column: 2)
!6960 = !DILocation(line: 408, column: 4, scope: !6959)
!6961 = !DILocation(line: 411, column: 11, scope: !6962)
!6962 = distinct !DILexicalBlock(scope: !6944, file: !3, line: 411, column: 11)
!6963 = !DILocation(line: 411, column: 11, scope: !6944)
!6964 = !DILocation(line: 412, column: 2, scope: !6962)
!6965 = !DILocation(line: 413, column: 7, scope: !6944)
!6966 = !DILocation(line: 415, column: 7, scope: !6944)
!6967 = !DILocation(line: 417, column: 1, scope: !6935)
!6968 = distinct !DISubprogram(name: "c_parser_declspecs", scope: !3, file: !3, line: 1470, type: !6969, scopeLine: 1472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!6969 = !DISubroutineType(types: !6970)
!6970 = !{null, !3401, !4282, !2344, !2344, !2344}
!6971 = !DILocalVariable(name: "parser", arg: 1, scope: !6968, file: !3, line: 1470, type: !3401)
!6972 = !DILocation(line: 1470, column: 31, scope: !6968)
!6973 = !DILocalVariable(name: "specs", arg: 2, scope: !6968, file: !3, line: 1470, type: !4282)
!6974 = !DILocation(line: 1470, column: 59, scope: !6968)
!6975 = !DILocalVariable(name: "scspec_ok", arg: 3, scope: !6968, file: !3, line: 1471, type: !2344)
!6976 = !DILocation(line: 1471, column: 12, scope: !6968)
!6977 = !DILocalVariable(name: "typespec_ok", arg: 4, scope: !6968, file: !3, line: 1471, type: !2344)
!6978 = !DILocation(line: 1471, column: 28, scope: !6968)
!6979 = !DILocalVariable(name: "start_attr_ok", arg: 5, scope: !6968, file: !3, line: 1471, type: !2344)
!6980 = !DILocation(line: 1471, column: 46, scope: !6968)
!6981 = !DILocalVariable(name: "attrs_ok", scope: !6968, file: !3, line: 1473, type: !2344)
!6982 = !DILocation(line: 1473, column: 8, scope: !6968)
!6983 = !DILocation(line: 1473, column: 19, scope: !6968)
!6984 = !DILocalVariable(name: "seen_type", scope: !6968, file: !3, line: 1474, type: !2344)
!6985 = !DILocation(line: 1474, column: 8, scope: !6968)
!6986 = !DILocation(line: 1474, column: 20, scope: !6968)
!6987 = !DILocation(line: 1474, column: 27, scope: !6968)
!6988 = !DILocation(line: 1475, column: 3, scope: !6968)
!6989 = !DILocation(line: 1475, column: 34, scope: !6968)
!6990 = !DILocation(line: 1475, column: 10, scope: !6968)
!6991 = !DILocation(line: 1476, column: 3, scope: !6968)
!6992 = !DILocation(line: 1476, column: 30, scope: !6968)
!6993 = !DILocation(line: 1476, column: 6, scope: !6968)
!6994 = !DILocation(line: 1477, column: 3, scope: !6968)
!6995 = !DILocation(line: 1477, column: 7, scope: !6968)
!6996 = !DILocation(line: 1477, column: 25, scope: !6968)
!6997 = !DILocation(line: 1477, column: 52, scope: !6968)
!6998 = !DILocation(line: 1477, column: 28, scope: !6968)
!6999 = !DILocation(line: 0, scope: !6968)
!7000 = !DILocalVariable(name: "t", scope: !7001, file: !3, line: 1479, type: !7002)
!7001 = distinct !DILexicalBlock(scope: !6968, file: !3, line: 1478, column: 5)
!7002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "c_typespec", file: !2089, line: 160, size: 256, elements: !7003)
!7003 = !{!7004, !7005, !7006, !7007}
!7004 = !DIDerivedType(tag: DW_TAG_member, name: "kind", scope: !7002, file: !2089, line: 162, baseType: !2123, size: 32)
!7005 = !DIDerivedType(tag: DW_TAG_member, name: "spec", scope: !7002, file: !2089, line: 164, baseType: !2224, size: 64, offset: 64)
!7006 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !7002, file: !2089, line: 173, baseType: !2224, size: 64, offset: 128)
!7007 = !DIDerivedType(tag: DW_TAG_member, name: "expr_const_operands", scope: !7002, file: !2089, line: 176, baseType: !2344, size: 8, offset: 192)
!7008 = !DILocation(line: 1479, column: 25, scope: !7001)
!7009 = !DILocalVariable(name: "attrs", scope: !7001, file: !3, line: 1480, type: !2224)
!7010 = !DILocation(line: 1480, column: 12, scope: !7001)
!7011 = !DILocalVariable(name: "loc", scope: !7001, file: !3, line: 1481, type: !2352)
!7012 = !DILocation(line: 1481, column: 18, scope: !7001)
!7013 = !DILocation(line: 1481, column: 45, scope: !7001)
!7014 = !DILocation(line: 1481, column: 24, scope: !7001)
!7015 = !DILocation(line: 1481, column: 54, scope: !7001)
!7016 = !DILocation(line: 1482, column: 35, scope: !7017)
!7017 = distinct !DILexicalBlock(scope: !7001, file: !3, line: 1482, column: 11)
!7018 = !DILocation(line: 1482, column: 11, scope: !7017)
!7019 = !DILocation(line: 1482, column: 11, scope: !7001)
!7020 = !DILocalVariable(name: "value", scope: !7021, file: !3, line: 1484, type: !2224)
!7021 = distinct !DILexicalBlock(scope: !7017, file: !3, line: 1483, column: 2)
!7022 = !DILocation(line: 1484, column: 9, scope: !7021)
!7023 = !DILocation(line: 1484, column: 38, scope: !7021)
!7024 = !DILocation(line: 1484, column: 17, scope: !7021)
!7025 = !DILocation(line: 1484, column: 47, scope: !7021)
!7026 = !DILocalVariable(name: "kind", scope: !7021, file: !3, line: 1485, type: !7027)
!7027 = !DIDerivedType(tag: DW_TAG_typedef, name: "c_id_kind", file: !3, line: 143, baseType: !1068)
!7028 = !DILocation(line: 1485, column: 14, scope: !7021)
!7029 = !DILocation(line: 1485, column: 42, scope: !7021)
!7030 = !DILocation(line: 1485, column: 21, scope: !7021)
!7031 = !DILocation(line: 1485, column: 51, scope: !7021)
!7032 = !DILocation(line: 1487, column: 8, scope: !7033)
!7033 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 1487, column: 8)
!7034 = !DILocation(line: 1487, column: 13, scope: !7033)
!7035 = !DILocation(line: 1487, column: 8, scope: !7021)
!7036 = !DILocalVariable(name: "as", scope: !7037, file: !3, line: 1489, type: !4313)
!7037 = distinct !DILexicalBlock(scope: !7033, file: !3, line: 1488, column: 6)
!7038 = !DILocation(line: 1489, column: 21, scope: !7037)
!7039 = !DILocation(line: 1490, column: 26, scope: !7037)
!7040 = !DILocation(line: 1490, column: 5, scope: !7037)
!7041 = !DILocation(line: 1490, column: 35, scope: !7037)
!7042 = !DILocation(line: 1490, column: 43, scope: !7037)
!7043 = !DILocation(line: 1491, column: 33, scope: !7037)
!7044 = !DILocation(line: 1491, column: 40, scope: !7037)
!7045 = !DILocation(line: 1491, column: 8, scope: !7037)
!7046 = !DILocation(line: 1492, column: 32, scope: !7037)
!7047 = !DILocation(line: 1492, column: 8, scope: !7037)
!7048 = !DILocation(line: 1493, column: 17, scope: !7037)
!7049 = !DILocation(line: 1494, column: 8, scope: !7037)
!7050 = distinct !{!7050, !6988, !7051}
!7051 = !DILocation(line: 1641, column: 5, scope: !6968)
!7052 = !DILocation(line: 1500, column: 9, scope: !7053)
!7053 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 1500, column: 8)
!7054 = !DILocation(line: 1500, column: 21, scope: !7053)
!7055 = !DILocation(line: 1500, column: 24, scope: !7053)
!7056 = !DILocation(line: 1501, column: 8, scope: !7053)
!7057 = !DILocation(line: 1501, column: 12, scope: !7053)
!7058 = !DILocation(line: 1501, column: 17, scope: !7053)
!7059 = !DILocation(line: 1501, column: 34, scope: !7053)
!7060 = !DILocation(line: 1501, column: 37, scope: !7053)
!7061 = !DILocation(line: 1501, column: 42, scope: !7053)
!7062 = !DILocation(line: 1500, column: 8, scope: !7021)
!7063 = !DILocation(line: 1502, column: 6, scope: !7053)
!7064 = !DILocation(line: 1503, column: 28, scope: !7021)
!7065 = !DILocation(line: 1503, column: 4, scope: !7021)
!7066 = !DILocation(line: 1504, column: 14, scope: !7021)
!7067 = !DILocation(line: 1505, column: 13, scope: !7021)
!7068 = !DILocation(line: 1506, column: 8, scope: !7069)
!7069 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 1506, column: 8)
!7070 = !DILocation(line: 1506, column: 13, scope: !7069)
!7071 = !DILocation(line: 1507, column: 8, scope: !7069)
!7072 = !DILocation(line: 1507, column: 13, scope: !7069)
!7073 = !DILocation(line: 1508, column: 5, scope: !7069)
!7074 = !DILocation(line: 1508, column: 36, scope: !7069)
!7075 = !DILocation(line: 1508, column: 8, scope: !7069)
!7076 = !DILocation(line: 1506, column: 8, scope: !7021)
!7077 = !DILocation(line: 1510, column: 10, scope: !7078)
!7078 = distinct !DILexicalBlock(scope: !7069, file: !3, line: 1509, column: 6)
!7079 = !DILocation(line: 1510, column: 15, scope: !7078)
!7080 = !DILocation(line: 1513, column: 30, scope: !7078)
!7081 = !DILocation(line: 1513, column: 17, scope: !7078)
!7082 = !DILocation(line: 1513, column: 10, scope: !7078)
!7083 = !DILocation(line: 1513, column: 15, scope: !7078)
!7084 = !DILocation(line: 1514, column: 10, scope: !7078)
!7085 = !DILocation(line: 1514, column: 15, scope: !7078)
!7086 = !DILocation(line: 1515, column: 10, scope: !7078)
!7087 = !DILocation(line: 1515, column: 30, scope: !7078)
!7088 = !DILocation(line: 1516, column: 6, scope: !7078)
!7089 = !DILocalVariable(name: "proto", scope: !7090, file: !3, line: 1519, type: !2224)
!7090 = distinct !DILexicalBlock(scope: !7069, file: !3, line: 1518, column: 6)
!7091 = !DILocation(line: 1519, column: 13, scope: !7090)
!7092 = !DILocation(line: 1520, column: 8, scope: !7090)
!7093 = !DILocation(line: 1521, column: 10, scope: !7090)
!7094 = !DILocation(line: 1521, column: 15, scope: !7090)
!7095 = !DILocation(line: 1522, column: 36, scope: !7096)
!7096 = distinct !DILexicalBlock(scope: !7090, file: !3, line: 1522, column: 12)
!7097 = !DILocation(line: 1522, column: 12, scope: !7096)
!7098 = !DILocation(line: 1522, column: 12, scope: !7090)
!7099 = !DILocation(line: 1523, column: 40, scope: !7096)
!7100 = !DILocation(line: 1523, column: 11, scope: !7096)
!7101 = !DILocation(line: 1523, column: 9, scope: !7096)
!7102 = !DILocation(line: 1523, column: 3, scope: !7096)
!7103 = !DILocation(line: 1524, column: 51, scope: !7090)
!7104 = !DILocation(line: 1524, column: 58, scope: !7090)
!7105 = !DILocation(line: 1524, column: 17, scope: !7090)
!7106 = !DILocation(line: 1524, column: 10, scope: !7090)
!7107 = !DILocation(line: 1524, column: 15, scope: !7090)
!7108 = !DILocation(line: 1525, column: 10, scope: !7090)
!7109 = !DILocation(line: 1525, column: 15, scope: !7090)
!7110 = !DILocation(line: 1526, column: 10, scope: !7090)
!7111 = !DILocation(line: 1526, column: 30, scope: !7090)
!7112 = !DILocation(line: 1528, column: 24, scope: !7021)
!7113 = !DILocation(line: 1528, column: 29, scope: !7021)
!7114 = !DILocation(line: 1528, column: 4, scope: !7021)
!7115 = !DILocation(line: 1529, column: 4, scope: !7021)
!7116 = !DILocation(line: 1531, column: 35, scope: !7117)
!7117 = distinct !DILexicalBlock(scope: !7001, file: !3, line: 1531, column: 11)
!7118 = !DILocation(line: 1531, column: 11, scope: !7117)
!7119 = !DILocation(line: 1531, column: 11, scope: !7001)
!7120 = !DILocalVariable(name: "proto", scope: !7121, file: !3, line: 1535, type: !2224)
!7121 = distinct !DILexicalBlock(scope: !7117, file: !3, line: 1532, column: 2)
!7122 = !DILocation(line: 1535, column: 9, scope: !7121)
!7123 = !DILocation(line: 1536, column: 4, scope: !7121)
!7124 = !DILocation(line: 1537, column: 9, scope: !7125)
!7125 = distinct !DILexicalBlock(scope: !7121, file: !3, line: 1537, column: 8)
!7126 = !DILocation(line: 1537, column: 21, scope: !7125)
!7127 = !DILocation(line: 1537, column: 24, scope: !7125)
!7128 = !DILocation(line: 1537, column: 8, scope: !7121)
!7129 = !DILocation(line: 1538, column: 6, scope: !7125)
!7130 = !DILocation(line: 1539, column: 41, scope: !7121)
!7131 = !DILocation(line: 1539, column: 12, scope: !7121)
!7132 = !DILocation(line: 1539, column: 10, scope: !7121)
!7133 = !DILocation(line: 1540, column: 6, scope: !7121)
!7134 = !DILocation(line: 1540, column: 11, scope: !7121)
!7135 = !DILocation(line: 1541, column: 58, scope: !7121)
!7136 = !DILocation(line: 1541, column: 13, scope: !7121)
!7137 = !DILocation(line: 1541, column: 6, scope: !7121)
!7138 = !DILocation(line: 1541, column: 11, scope: !7121)
!7139 = !DILocation(line: 1542, column: 6, scope: !7121)
!7140 = !DILocation(line: 1542, column: 11, scope: !7121)
!7141 = !DILocation(line: 1543, column: 6, scope: !7121)
!7142 = !DILocation(line: 1543, column: 26, scope: !7121)
!7143 = !DILocation(line: 1544, column: 24, scope: !7121)
!7144 = !DILocation(line: 1544, column: 29, scope: !7121)
!7145 = !DILocation(line: 1544, column: 4, scope: !7121)
!7146 = !DILocation(line: 1545, column: 4, scope: !7121)
!7147 = !DILocation(line: 1547, column: 7, scope: !7001)
!7148 = !DILocation(line: 1548, column: 36, scope: !7001)
!7149 = !DILocation(line: 1548, column: 15, scope: !7001)
!7150 = !DILocation(line: 1548, column: 45, scope: !7001)
!7151 = !DILocation(line: 1548, column: 7, scope: !7001)
!7152 = !DILocation(line: 1557, column: 9, scope: !7153)
!7153 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 1557, column: 8)
!7154 = distinct !DILexicalBlock(scope: !7001, file: !3, line: 1549, column: 2)
!7155 = !DILocation(line: 1557, column: 8, scope: !7154)
!7156 = !DILocation(line: 1558, column: 6, scope: !7153)
!7157 = !DILocation(line: 1559, column: 13, scope: !7154)
!7158 = !DILocation(line: 1563, column: 26, scope: !7154)
!7159 = !DILocation(line: 1563, column: 54, scope: !7154)
!7160 = !DILocation(line: 1563, column: 33, scope: !7154)
!7161 = !DILocation(line: 1563, column: 63, scope: !7154)
!7162 = !DILocation(line: 1563, column: 4, scope: !7154)
!7163 = !DILocation(line: 1564, column: 28, scope: !7154)
!7164 = !DILocation(line: 1564, column: 4, scope: !7154)
!7165 = !DILocation(line: 1565, column: 4, scope: !7154)
!7166 = !DILocation(line: 1583, column: 9, scope: !7167)
!7167 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 1583, column: 8)
!7168 = !DILocation(line: 1583, column: 8, scope: !7154)
!7169 = !DILocation(line: 1584, column: 6, scope: !7167)
!7170 = !DILocation(line: 1585, column: 13, scope: !7154)
!7171 = !DILocation(line: 1586, column: 14, scope: !7154)
!7172 = !DILocation(line: 1587, column: 8, scope: !7173)
!7173 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 1587, column: 8)
!7174 = !DILocation(line: 1587, column: 8, scope: !7154)
!7175 = !DILocation(line: 1588, column: 6, scope: !7173)
!7176 = !DILocation(line: 1588, column: 14, scope: !7173)
!7177 = !DILocation(line: 1588, column: 39, scope: !7173)
!7178 = !DILocation(line: 1589, column: 6, scope: !7154)
!7179 = !DILocation(line: 1589, column: 11, scope: !7154)
!7180 = !DILocation(line: 1590, column: 34, scope: !7154)
!7181 = !DILocation(line: 1590, column: 13, scope: !7154)
!7182 = !DILocation(line: 1590, column: 43, scope: !7154)
!7183 = !DILocation(line: 1590, column: 6, scope: !7154)
!7184 = !DILocation(line: 1590, column: 11, scope: !7154)
!7185 = !DILocation(line: 1591, column: 6, scope: !7154)
!7186 = !DILocation(line: 1591, column: 11, scope: !7154)
!7187 = !DILocation(line: 1592, column: 6, scope: !7154)
!7188 = !DILocation(line: 1592, column: 26, scope: !7154)
!7189 = !DILocation(line: 1593, column: 24, scope: !7154)
!7190 = !DILocation(line: 1593, column: 29, scope: !7154)
!7191 = !DILocation(line: 1593, column: 4, scope: !7154)
!7192 = !DILocation(line: 1594, column: 28, scope: !7154)
!7193 = !DILocation(line: 1594, column: 4, scope: !7154)
!7194 = !DILocation(line: 1595, column: 4, scope: !7154)
!7195 = !DILocation(line: 1597, column: 9, scope: !7196)
!7196 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 1597, column: 8)
!7197 = !DILocation(line: 1597, column: 8, scope: !7154)
!7198 = !DILocation(line: 1598, column: 6, scope: !7196)
!7199 = !DILocation(line: 1599, column: 13, scope: !7154)
!7200 = !DILocation(line: 1600, column: 14, scope: !7154)
!7201 = !DILocation(line: 1601, column: 33, scope: !7154)
!7202 = !DILocation(line: 1601, column: 8, scope: !7154)
!7203 = !DILocation(line: 1602, column: 24, scope: !7154)
!7204 = !DILocation(line: 1602, column: 29, scope: !7154)
!7205 = !DILocation(line: 1602, column: 4, scope: !7154)
!7206 = !DILocation(line: 1603, column: 4, scope: !7154)
!7207 = !DILocation(line: 1606, column: 9, scope: !7208)
!7208 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 1606, column: 8)
!7209 = !DILocation(line: 1606, column: 8, scope: !7154)
!7210 = !DILocation(line: 1607, column: 6, scope: !7208)
!7211 = !DILocation(line: 1608, column: 13, scope: !7154)
!7212 = !DILocation(line: 1609, column: 14, scope: !7154)
!7213 = !DILocation(line: 1610, column: 44, scope: !7154)
!7214 = !DILocation(line: 1610, column: 8, scope: !7154)
!7215 = !DILocation(line: 1611, column: 58, scope: !7154)
!7216 = !DILocation(line: 1611, column: 56, scope: !7154)
!7217 = !DILocation(line: 1611, column: 11, scope: !7154)
!7218 = !DILocation(line: 1612, column: 24, scope: !7154)
!7219 = !DILocation(line: 1612, column: 29, scope: !7154)
!7220 = !DILocation(line: 1612, column: 4, scope: !7154)
!7221 = !DILocation(line: 1613, column: 4, scope: !7154)
!7222 = !DILocation(line: 1618, column: 9, scope: !7223)
!7223 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 1618, column: 8)
!7224 = !DILocation(line: 1618, column: 21, scope: !7223)
!7225 = !DILocation(line: 1618, column: 24, scope: !7223)
!7226 = !DILocation(line: 1618, column: 8, scope: !7154)
!7227 = !DILocation(line: 1619, column: 6, scope: !7223)
!7228 = !DILocation(line: 1620, column: 13, scope: !7154)
!7229 = !DILocation(line: 1621, column: 14, scope: !7154)
!7230 = !DILocation(line: 1622, column: 35, scope: !7154)
!7231 = !DILocation(line: 1622, column: 8, scope: !7154)
!7232 = !DILocation(line: 1623, column: 24, scope: !7154)
!7233 = !DILocation(line: 1623, column: 29, scope: !7154)
!7234 = !DILocation(line: 1623, column: 4, scope: !7154)
!7235 = !DILocation(line: 1624, column: 4, scope: !7154)
!7236 = !DILocation(line: 1628, column: 13, scope: !7154)
!7237 = !DILocation(line: 1629, column: 24, scope: !7154)
!7238 = !DILocation(line: 1629, column: 52, scope: !7154)
!7239 = !DILocation(line: 1629, column: 31, scope: !7154)
!7240 = !DILocation(line: 1629, column: 61, scope: !7154)
!7241 = !DILocation(line: 1629, column: 4, scope: !7154)
!7242 = !DILocation(line: 1630, column: 28, scope: !7154)
!7243 = !DILocation(line: 1630, column: 4, scope: !7154)
!7244 = !DILocation(line: 1631, column: 4, scope: !7154)
!7245 = !DILocation(line: 1633, column: 9, scope: !7246)
!7246 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 1633, column: 8)
!7247 = !DILocation(line: 1633, column: 8, scope: !7154)
!7248 = !DILocation(line: 1634, column: 6, scope: !7246)
!7249 = !DILocation(line: 1635, column: 33, scope: !7154)
!7250 = !DILocation(line: 1635, column: 12, scope: !7154)
!7251 = !DILocation(line: 1635, column: 10, scope: !7154)
!7252 = !DILocation(line: 1636, column: 25, scope: !7154)
!7253 = !DILocation(line: 1636, column: 32, scope: !7154)
!7254 = !DILocation(line: 1636, column: 4, scope: !7154)
!7255 = !DILocation(line: 1637, column: 4, scope: !7154)
!7256 = !DILocation(line: 1639, column: 4, scope: !7154)
!7257 = !DILabel(scope: !6968, name: "out", file: !3, line: 1642)
!7258 = !DILocation(line: 1642, column: 2, scope: !6968)
!7259 = !DILocation(line: 1643, column: 1, scope: !6968)
!7260 = distinct !DISubprogram(name: "c_parser_declarator", scope: !3, file: !3, line: 2264, type: !7261, scopeLine: 2266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!7261 = !DISubroutineType(types: !7262)
!7262 = !{!4315, !3401, !2344, !7263, !7264}
!7263 = !DIDerivedType(tag: DW_TAG_typedef, name: "c_dtr_syn", file: !3, line: 883, baseType: !2118)
!7264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2344, size: 64)
!7265 = !DILocalVariable(name: "parser", arg: 1, scope: !7260, file: !3, line: 2264, type: !3401)
!7266 = !DILocation(line: 2264, column: 32, scope: !7260)
!7267 = !DILocalVariable(name: "type_seen_p", arg: 2, scope: !7260, file: !3, line: 2264, type: !2344)
!7268 = !DILocation(line: 2264, column: 45, scope: !7260)
!7269 = !DILocalVariable(name: "kind", arg: 3, scope: !7260, file: !3, line: 2264, type: !7263)
!7270 = !DILocation(line: 2264, column: 68, scope: !7260)
!7271 = !DILocalVariable(name: "seen_id", arg: 4, scope: !7260, file: !3, line: 2265, type: !7264)
!7272 = !DILocation(line: 2265, column: 14, scope: !7260)
!7273 = !DILocation(line: 2268, column: 31, scope: !7274)
!7274 = distinct !DILexicalBlock(scope: !7260, file: !3, line: 2268, column: 7)
!7275 = !DILocation(line: 2268, column: 7, scope: !7274)
!7276 = !DILocation(line: 2268, column: 7, scope: !7260)
!7277 = !DILocalVariable(name: "quals_attrs", scope: !7278, file: !3, line: 2270, type: !4282)
!7278 = distinct !DILexicalBlock(scope: !7274, file: !3, line: 2269, column: 5)
!7279 = !DILocation(line: 2270, column: 27, scope: !7278)
!7280 = !DILocation(line: 2270, column: 41, scope: !7278)
!7281 = !DILocalVariable(name: "inner", scope: !7278, file: !3, line: 2271, type: !4315)
!7282 = !DILocation(line: 2271, column: 28, scope: !7278)
!7283 = !DILocation(line: 2272, column: 31, scope: !7278)
!7284 = !DILocation(line: 2272, column: 7, scope: !7278)
!7285 = !DILocation(line: 2273, column: 27, scope: !7278)
!7286 = !DILocation(line: 2273, column: 35, scope: !7278)
!7287 = !DILocation(line: 2273, column: 7, scope: !7278)
!7288 = !DILocation(line: 2274, column: 36, scope: !7278)
!7289 = !DILocation(line: 2274, column: 44, scope: !7278)
!7290 = !DILocation(line: 2274, column: 57, scope: !7278)
!7291 = !DILocation(line: 2274, column: 63, scope: !7278)
!7292 = !DILocation(line: 2274, column: 15, scope: !7278)
!7293 = !DILocation(line: 2274, column: 13, scope: !7278)
!7294 = !DILocation(line: 2275, column: 11, scope: !7295)
!7295 = distinct !DILexicalBlock(scope: !7278, file: !3, line: 2275, column: 11)
!7296 = !DILocation(line: 2275, column: 17, scope: !7295)
!7297 = !DILocation(line: 2275, column: 11, scope: !7278)
!7298 = !DILocation(line: 2276, column: 2, scope: !7295)
!7299 = !DILocation(line: 2278, column: 34, scope: !7295)
!7300 = !DILocation(line: 2278, column: 47, scope: !7295)
!7301 = !DILocation(line: 2278, column: 9, scope: !7295)
!7302 = !DILocation(line: 2278, column: 2, scope: !7295)
!7303 = !DILocation(line: 2282, column: 38, scope: !7260)
!7304 = !DILocation(line: 2282, column: 46, scope: !7260)
!7305 = !DILocation(line: 2282, column: 59, scope: !7260)
!7306 = !DILocation(line: 2282, column: 65, scope: !7260)
!7307 = !DILocation(line: 2282, column: 10, scope: !7260)
!7308 = !DILocation(line: 2282, column: 3, scope: !7260)
!7309 = !DILocation(line: 2283, column: 1, scope: !7260)
!7310 = distinct !DISubprogram(name: "c_parser_enum_specifier", scope: !3, file: !3, line: 1668, type: !7311, scopeLine: 1669, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!7311 = !DISubroutineType(types: !7312)
!7312 = !{!7002, !3401}
!7313 = !DILocalVariable(name: "parser", arg: 1, scope: !7310, file: !3, line: 1668, type: !3401)
!7314 = !DILocation(line: 1668, column: 36, scope: !7310)
!7315 = !DILocalVariable(name: "ret", scope: !7310, file: !3, line: 1670, type: !7002)
!7316 = !DILocation(line: 1670, column: 21, scope: !7310)
!7317 = !DILocalVariable(name: "attrs", scope: !7310, file: !3, line: 1671, type: !2224)
!7318 = !DILocation(line: 1671, column: 8, scope: !7310)
!7319 = !DILocalVariable(name: "ident", scope: !7310, file: !3, line: 1672, type: !2224)
!7320 = !DILocation(line: 1672, column: 8, scope: !7310)
!7321 = !DILocalVariable(name: "enum_loc", scope: !7310, file: !3, line: 1673, type: !2352)
!7322 = !DILocation(line: 1673, column: 14, scope: !7310)
!7323 = !DILocalVariable(name: "ident_loc", scope: !7310, file: !3, line: 1674, type: !2352)
!7324 = !DILocation(line: 1674, column: 14, scope: !7310)
!7325 = !DILocation(line: 1675, column: 3, scope: !7310)
!7326 = !DILocation(line: 1676, column: 35, scope: !7310)
!7327 = !DILocation(line: 1676, column: 14, scope: !7310)
!7328 = !DILocation(line: 1676, column: 44, scope: !7310)
!7329 = !DILocation(line: 1676, column: 12, scope: !7310)
!7330 = !DILocation(line: 1677, column: 27, scope: !7310)
!7331 = !DILocation(line: 1677, column: 3, scope: !7310)
!7332 = !DILocation(line: 1678, column: 32, scope: !7310)
!7333 = !DILocation(line: 1678, column: 11, scope: !7310)
!7334 = !DILocation(line: 1678, column: 9, scope: !7310)
!7335 = !DILocation(line: 1679, column: 35, scope: !7310)
!7336 = !DILocation(line: 1679, column: 14, scope: !7310)
!7337 = !DILocation(line: 1679, column: 44, scope: !7310)
!7338 = !DILocation(line: 1679, column: 12, scope: !7310)
!7339 = !DILocation(line: 1681, column: 65, scope: !7310)
!7340 = !DILocation(line: 1681, column: 44, scope: !7310)
!7341 = !DILocation(line: 1681, column: 3, scope: !7310)
!7342 = !DILocation(line: 1682, column: 31, scope: !7343)
!7343 = distinct !DILexicalBlock(scope: !7310, file: !3, line: 1682, column: 7)
!7344 = !DILocation(line: 1682, column: 7, scope: !7343)
!7345 = !DILocation(line: 1682, column: 7, scope: !7310)
!7346 = !DILocation(line: 1684, column: 36, scope: !7347)
!7347 = distinct !DILexicalBlock(scope: !7343, file: !3, line: 1683, column: 5)
!7348 = !DILocation(line: 1684, column: 15, scope: !7347)
!7349 = !DILocation(line: 1684, column: 45, scope: !7347)
!7350 = !DILocation(line: 1684, column: 13, scope: !7347)
!7351 = !DILocation(line: 1685, column: 40, scope: !7347)
!7352 = !DILocation(line: 1685, column: 19, scope: !7347)
!7353 = !DILocation(line: 1685, column: 49, scope: !7347)
!7354 = !DILocation(line: 1685, column: 17, scope: !7347)
!7355 = !DILocation(line: 1686, column: 18, scope: !7347)
!7356 = !DILocation(line: 1686, column: 16, scope: !7347)
!7357 = !DILocation(line: 1687, column: 31, scope: !7347)
!7358 = !DILocation(line: 1687, column: 7, scope: !7347)
!7359 = !DILocation(line: 1688, column: 5, scope: !7347)
!7360 = !DILocation(line: 1689, column: 31, scope: !7361)
!7361 = distinct !DILexicalBlock(scope: !7310, file: !3, line: 1689, column: 7)
!7362 = !DILocation(line: 1689, column: 7, scope: !7361)
!7363 = !DILocation(line: 1689, column: 7, scope: !7310)
!7364 = !DILocalVariable(name: "the_enum", scope: !7365, file: !3, line: 1692, type: !7366)
!7365 = distinct !DILexicalBlock(scope: !7361, file: !3, line: 1690, column: 5)
!7366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "c_enum_contents", file: !2089, line: 370, size: 128, elements: !7367)
!7367 = !{!7368, !7369}
!7368 = !DIDerivedType(tag: DW_TAG_member, name: "enum_next_value", scope: !7366, file: !2089, line: 374, baseType: !2224, size: 64)
!7369 = !DIDerivedType(tag: DW_TAG_member, name: "enum_overflow", scope: !7366, file: !2089, line: 377, baseType: !2321, size: 32, offset: 64)
!7370 = !DILocation(line: 1692, column: 30, scope: !7365)
!7371 = !DILocalVariable(name: "type", scope: !7365, file: !3, line: 1693, type: !2224)
!7372 = !DILocation(line: 1693, column: 12, scope: !7365)
!7373 = !DILocation(line: 1693, column: 31, scope: !7365)
!7374 = !DILocation(line: 1693, column: 52, scope: !7365)
!7375 = !DILocation(line: 1693, column: 19, scope: !7365)
!7376 = !DILocalVariable(name: "postfix_attrs", scope: !7365, file: !3, line: 1694, type: !2224)
!7377 = !DILocation(line: 1694, column: 12, scope: !7365)
!7378 = !DILocalVariable(name: "values", scope: !7365, file: !3, line: 1697, type: !2224)
!7379 = !DILocation(line: 1697, column: 12, scope: !7365)
!7380 = !DILocation(line: 1698, column: 31, scope: !7365)
!7381 = !DILocation(line: 1698, column: 7, scope: !7365)
!7382 = !DILocation(line: 1699, column: 7, scope: !7365)
!7383 = !DILocalVariable(name: "enum_id", scope: !7384, file: !3, line: 1701, type: !2224)
!7384 = distinct !DILexicalBlock(scope: !7365, file: !3, line: 1700, column: 2)
!7385 = !DILocation(line: 1701, column: 9, scope: !7384)
!7386 = !DILocalVariable(name: "enum_value", scope: !7384, file: !3, line: 1702, type: !2224)
!7387 = !DILocation(line: 1702, column: 9, scope: !7384)
!7388 = !DILocalVariable(name: "enum_decl", scope: !7384, file: !3, line: 1703, type: !2224)
!7389 = !DILocation(line: 1703, column: 9, scope: !7384)
!7390 = !DILocalVariable(name: "seen_comma", scope: !7384, file: !3, line: 1704, type: !2344)
!7391 = !DILocation(line: 1704, column: 9, scope: !7384)
!7392 = !DILocalVariable(name: "token", scope: !7384, file: !3, line: 1705, type: !4459)
!7393 = !DILocation(line: 1705, column: 13, scope: !7384)
!7394 = !DILocalVariable(name: "comma_loc", scope: !7384, file: !3, line: 1706, type: !2352)
!7395 = !DILocation(line: 1706, column: 15, scope: !7384)
!7396 = !DILocalVariable(name: "value_loc", scope: !7384, file: !3, line: 1707, type: !2352)
!7397 = !DILocation(line: 1707, column: 15, scope: !7384)
!7398 = !DILocation(line: 1708, column: 36, scope: !7399)
!7399 = distinct !DILexicalBlock(scope: !7384, file: !3, line: 1708, column: 8)
!7400 = !DILocation(line: 1708, column: 8, scope: !7399)
!7401 = !DILocation(line: 1708, column: 8, scope: !7384)
!7402 = !DILocation(line: 1710, column: 24, scope: !7403)
!7403 = distinct !DILexicalBlock(scope: !7399, file: !3, line: 1709, column: 6)
!7404 = !DILocation(line: 1710, column: 8, scope: !7403)
!7405 = !DILocation(line: 1711, column: 35, scope: !7403)
!7406 = !DILocation(line: 1711, column: 8, scope: !7403)
!7407 = !DILocation(line: 1712, column: 17, scope: !7403)
!7408 = !DILocation(line: 1712, column: 15, scope: !7403)
!7409 = !DILocation(line: 1713, column: 8, scope: !7403)
!7410 = !DILocation(line: 1715, column: 33, scope: !7384)
!7411 = !DILocation(line: 1715, column: 12, scope: !7384)
!7412 = !DILocation(line: 1715, column: 10, scope: !7384)
!7413 = !DILocation(line: 1716, column: 14, scope: !7384)
!7414 = !DILocation(line: 1716, column: 21, scope: !7384)
!7415 = !DILocation(line: 1716, column: 12, scope: !7384)
!7416 = !DILocation(line: 1718, column: 45, scope: !7384)
!7417 = !DILocation(line: 1718, column: 4, scope: !7384)
!7418 = !DILocation(line: 1719, column: 16, scope: !7384)
!7419 = !DILocation(line: 1719, column: 23, scope: !7384)
!7420 = !DILocation(line: 1719, column: 14, scope: !7384)
!7421 = !DILocation(line: 1720, column: 28, scope: !7384)
!7422 = !DILocation(line: 1720, column: 4, scope: !7384)
!7423 = !DILocation(line: 1721, column: 32, scope: !7424)
!7424 = distinct !DILexicalBlock(scope: !7384, file: !3, line: 1721, column: 8)
!7425 = !DILocation(line: 1721, column: 8, scope: !7424)
!7426 = !DILocation(line: 1721, column: 8, scope: !7384)
!7427 = !DILocation(line: 1723, column: 32, scope: !7428)
!7428 = distinct !DILexicalBlock(scope: !7424, file: !3, line: 1722, column: 6)
!7429 = !DILocation(line: 1723, column: 8, scope: !7428)
!7430 = !DILocation(line: 1724, column: 41, scope: !7428)
!7431 = !DILocation(line: 1724, column: 20, scope: !7428)
!7432 = !DILocation(line: 1724, column: 50, scope: !7428)
!7433 = !DILocation(line: 1724, column: 18, scope: !7428)
!7434 = !DILocation(line: 1725, column: 46, scope: !7428)
!7435 = !DILocation(line: 1725, column: 21, scope: !7428)
!7436 = !DILocation(line: 1725, column: 60, scope: !7428)
!7437 = !DILocation(line: 1725, column: 19, scope: !7428)
!7438 = !DILocation(line: 1726, column: 6, scope: !7428)
!7439 = !DILocation(line: 1728, column: 17, scope: !7424)
!7440 = !DILocation(line: 1729, column: 34, scope: !7384)
!7441 = !DILocation(line: 1730, column: 23, scope: !7384)
!7442 = !DILocation(line: 1730, column: 32, scope: !7384)
!7443 = !DILocation(line: 1729, column: 16, scope: !7384)
!7444 = !DILocation(line: 1729, column: 14, scope: !7384)
!7445 = !DILocation(line: 1731, column: 29, scope: !7384)
!7446 = !DILocation(line: 1731, column: 4, scope: !7384)
!7447 = !DILocation(line: 1731, column: 27, scope: !7384)
!7448 = !DILocation(line: 1732, column: 13, scope: !7384)
!7449 = !DILocation(line: 1732, column: 11, scope: !7384)
!7450 = !DILocation(line: 1733, column: 15, scope: !7384)
!7451 = !DILocation(line: 1734, column: 32, scope: !7452)
!7452 = distinct !DILexicalBlock(scope: !7384, file: !3, line: 1734, column: 8)
!7453 = !DILocation(line: 1734, column: 8, scope: !7452)
!7454 = !DILocation(line: 1734, column: 8, scope: !7384)
!7455 = !DILocation(line: 1736, column: 41, scope: !7456)
!7456 = distinct !DILexicalBlock(scope: !7452, file: !3, line: 1735, column: 6)
!7457 = !DILocation(line: 1736, column: 20, scope: !7456)
!7458 = !DILocation(line: 1736, column: 50, scope: !7456)
!7459 = !DILocation(line: 1736, column: 18, scope: !7456)
!7460 = !DILocation(line: 1737, column: 19, scope: !7456)
!7461 = !DILocation(line: 1738, column: 32, scope: !7456)
!7462 = !DILocation(line: 1738, column: 8, scope: !7456)
!7463 = !DILocation(line: 1739, column: 6, scope: !7456)
!7464 = !DILocation(line: 1740, column: 32, scope: !7465)
!7465 = distinct !DILexicalBlock(scope: !7384, file: !3, line: 1740, column: 8)
!7466 = !DILocation(line: 1740, column: 8, scope: !7465)
!7467 = !DILocation(line: 1740, column: 8, scope: !7384)
!7468 = !DILocation(line: 1742, column: 12, scope: !7469)
!7469 = distinct !DILexicalBlock(scope: !7470, file: !3, line: 1742, column: 12)
!7470 = distinct !DILexicalBlock(scope: !7465, file: !3, line: 1741, column: 6)
!7471 = !DILocation(line: 1742, column: 23, scope: !7469)
!7472 = !DILocation(line: 1742, column: 27, scope: !7469)
!7473 = !DILocation(line: 1742, column: 12, scope: !7470)
!7474 = !DILocation(line: 1743, column: 12, scope: !7469)
!7475 = !DILocation(line: 1743, column: 3, scope: !7469)
!7476 = !DILocation(line: 1744, column: 32, scope: !7470)
!7477 = !DILocation(line: 1744, column: 8, scope: !7470)
!7478 = !DILocation(line: 1745, column: 8, scope: !7470)
!7479 = !DILocation(line: 1747, column: 9, scope: !7480)
!7480 = distinct !DILexicalBlock(scope: !7384, file: !3, line: 1747, column: 8)
!7481 = !DILocation(line: 1747, column: 8, scope: !7384)
!7482 = !DILocation(line: 1749, column: 24, scope: !7483)
!7483 = distinct !DILexicalBlock(scope: !7480, file: !3, line: 1748, column: 6)
!7484 = !DILocation(line: 1749, column: 8, scope: !7483)
!7485 = !DILocation(line: 1750, column: 35, scope: !7483)
!7486 = !DILocation(line: 1750, column: 8, scope: !7483)
!7487 = !DILocation(line: 1751, column: 17, scope: !7483)
!7488 = !DILocation(line: 1751, column: 15, scope: !7483)
!7489 = !DILocation(line: 1752, column: 8, scope: !7483)
!7490 = distinct !{!7490, !7382, !7491}
!7491 = !DILocation(line: 1754, column: 2, scope: !7365)
!7492 = !DILocation(line: 1755, column: 44, scope: !7365)
!7493 = !DILocation(line: 1755, column: 23, scope: !7365)
!7494 = !DILocation(line: 1755, column: 21, scope: !7365)
!7495 = !DILocation(line: 1756, column: 31, scope: !7365)
!7496 = !DILocation(line: 1756, column: 47, scope: !7365)
!7497 = !DILocation(line: 1756, column: 37, scope: !7365)
!7498 = !DILocation(line: 1757, column: 19, scope: !7365)
!7499 = !DILocation(line: 1757, column: 26, scope: !7365)
!7500 = !DILocation(line: 1757, column: 10, scope: !7365)
!7501 = !DILocation(line: 1756, column: 18, scope: !7365)
!7502 = !DILocation(line: 1756, column: 11, scope: !7365)
!7503 = !DILocation(line: 1756, column: 16, scope: !7365)
!7504 = !DILocation(line: 1758, column: 11, scope: !7365)
!7505 = !DILocation(line: 1758, column: 16, scope: !7365)
!7506 = !DILocation(line: 1759, column: 11, scope: !7365)
!7507 = !DILocation(line: 1759, column: 16, scope: !7365)
!7508 = !DILocation(line: 1760, column: 11, scope: !7365)
!7509 = !DILocation(line: 1760, column: 31, scope: !7365)
!7510 = !DILocation(line: 1761, column: 7, scope: !7365)
!7511 = !DILocation(line: 1763, column: 13, scope: !7512)
!7512 = distinct !DILexicalBlock(scope: !7361, file: !3, line: 1763, column: 12)
!7513 = !DILocation(line: 1763, column: 12, scope: !7361)
!7514 = !DILocation(line: 1765, column: 23, scope: !7515)
!7515 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 1764, column: 5)
!7516 = !DILocation(line: 1765, column: 7, scope: !7515)
!7517 = !DILocation(line: 1766, column: 18, scope: !7515)
!7518 = !DILocation(line: 1766, column: 11, scope: !7515)
!7519 = !DILocation(line: 1766, column: 16, scope: !7515)
!7520 = !DILocation(line: 1767, column: 11, scope: !7515)
!7521 = !DILocation(line: 1767, column: 16, scope: !7515)
!7522 = !DILocation(line: 1768, column: 11, scope: !7515)
!7523 = !DILocation(line: 1768, column: 16, scope: !7515)
!7524 = !DILocation(line: 1769, column: 11, scope: !7515)
!7525 = !DILocation(line: 1769, column: 31, scope: !7515)
!7526 = !DILocation(line: 1770, column: 7, scope: !7515)
!7527 = !DILocation(line: 1772, column: 26, scope: !7310)
!7528 = !DILocation(line: 1772, column: 52, scope: !7310)
!7529 = !DILocation(line: 1772, column: 9, scope: !7310)
!7530 = !DILocation(line: 1775, column: 7, scope: !7531)
!7531 = distinct !DILexicalBlock(scope: !7310, file: !3, line: 1775, column: 7)
!7532 = !DILocation(line: 1775, column: 16, scope: !7531)
!7533 = !DILocation(line: 1775, column: 20, scope: !7531)
!7534 = !DILocation(line: 1775, column: 7, scope: !7310)
!7535 = !DILocation(line: 1777, column: 7, scope: !7536)
!7536 = distinct !DILexicalBlock(scope: !7531, file: !3, line: 1776, column: 5)
!7537 = !DILocation(line: 1778, column: 16, scope: !7536)
!7538 = !DILocation(line: 1778, column: 7, scope: !7536)
!7539 = !DILocation(line: 1780, column: 5, scope: !7536)
!7540 = !DILocation(line: 1781, column: 3, scope: !7310)
!7541 = !DILocation(line: 1782, column: 1, scope: !7310)
!7542 = distinct !DISubprogram(name: "c_parser_struct_or_union_specifier", scope: !3, file: !3, line: 1824, type: !7311, scopeLine: 1825, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!7543 = !DILocalVariable(name: "parser", arg: 1, scope: !7542, file: !3, line: 1824, type: !3401)
!7544 = !DILocation(line: 1824, column: 47, scope: !7542)
!7545 = !DILocalVariable(name: "ret", scope: !7542, file: !3, line: 1826, type: !7002)
!7546 = !DILocation(line: 1826, column: 21, scope: !7542)
!7547 = !DILocalVariable(name: "attrs", scope: !7542, file: !3, line: 1827, type: !2224)
!7548 = !DILocation(line: 1827, column: 8, scope: !7542)
!7549 = !DILocalVariable(name: "ident", scope: !7542, file: !3, line: 1828, type: !2224)
!7550 = !DILocation(line: 1828, column: 8, scope: !7542)
!7551 = !DILocalVariable(name: "struct_loc", scope: !7542, file: !3, line: 1829, type: !2352)
!7552 = !DILocation(line: 1829, column: 14, scope: !7542)
!7553 = !DILocalVariable(name: "ident_loc", scope: !7542, file: !3, line: 1830, type: !2352)
!7554 = !DILocation(line: 1830, column: 14, scope: !7542)
!7555 = !DILocalVariable(name: "code", scope: !7542, file: !3, line: 1831, type: !190)
!7556 = !DILocation(line: 1831, column: 18, scope: !7542)
!7557 = !DILocation(line: 1832, column: 32, scope: !7542)
!7558 = !DILocation(line: 1832, column: 11, scope: !7542)
!7559 = !DILocation(line: 1832, column: 41, scope: !7542)
!7560 = !DILocation(line: 1832, column: 3, scope: !7542)
!7561 = !DILocation(line: 1835, column: 12, scope: !7562)
!7562 = distinct !DILexicalBlock(scope: !7542, file: !3, line: 1833, column: 5)
!7563 = !DILocation(line: 1836, column: 7, scope: !7562)
!7564 = !DILocation(line: 1838, column: 12, scope: !7562)
!7565 = !DILocation(line: 1839, column: 7, scope: !7562)
!7566 = !DILocation(line: 1841, column: 7, scope: !7562)
!7567 = !DILocation(line: 1842, column: 5, scope: !7562)
!7568 = !DILocation(line: 1843, column: 37, scope: !7542)
!7569 = !DILocation(line: 1843, column: 16, scope: !7542)
!7570 = !DILocation(line: 1843, column: 46, scope: !7542)
!7571 = !DILocation(line: 1843, column: 14, scope: !7542)
!7572 = !DILocation(line: 1844, column: 27, scope: !7542)
!7573 = !DILocation(line: 1844, column: 3, scope: !7542)
!7574 = !DILocation(line: 1845, column: 32, scope: !7542)
!7575 = !DILocation(line: 1845, column: 11, scope: !7542)
!7576 = !DILocation(line: 1845, column: 9, scope: !7542)
!7577 = !DILocation(line: 1848, column: 65, scope: !7542)
!7578 = !DILocation(line: 1848, column: 44, scope: !7542)
!7579 = !DILocation(line: 1848, column: 3, scope: !7542)
!7580 = !DILocation(line: 1850, column: 31, scope: !7581)
!7581 = distinct !DILexicalBlock(scope: !7542, file: !3, line: 1850, column: 7)
!7582 = !DILocation(line: 1850, column: 7, scope: !7581)
!7583 = !DILocation(line: 1850, column: 7, scope: !7542)
!7584 = !DILocation(line: 1852, column: 36, scope: !7585)
!7585 = distinct !DILexicalBlock(scope: !7581, file: !3, line: 1851, column: 5)
!7586 = !DILocation(line: 1852, column: 15, scope: !7585)
!7587 = !DILocation(line: 1852, column: 45, scope: !7585)
!7588 = !DILocation(line: 1852, column: 13, scope: !7585)
!7589 = !DILocation(line: 1853, column: 40, scope: !7585)
!7590 = !DILocation(line: 1853, column: 19, scope: !7585)
!7591 = !DILocation(line: 1853, column: 49, scope: !7585)
!7592 = !DILocation(line: 1853, column: 17, scope: !7585)
!7593 = !DILocation(line: 1854, column: 20, scope: !7585)
!7594 = !DILocation(line: 1854, column: 18, scope: !7585)
!7595 = !DILocation(line: 1855, column: 31, scope: !7585)
!7596 = !DILocation(line: 1855, column: 7, scope: !7585)
!7597 = !DILocation(line: 1856, column: 5, scope: !7585)
!7598 = !DILocation(line: 1857, column: 31, scope: !7599)
!7599 = distinct !DILexicalBlock(scope: !7542, file: !3, line: 1857, column: 7)
!7600 = !DILocation(line: 1857, column: 7, scope: !7599)
!7601 = !DILocation(line: 1857, column: 7, scope: !7542)
!7602 = !DILocalVariable(name: "struct_info", scope: !7603, file: !3, line: 1861, type: !7604)
!7603 = distinct !DILexicalBlock(scope: !7599, file: !3, line: 1858, column: 5)
!7604 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7605, size: 64)
!7605 = !DICompositeType(tag: DW_TAG_structure_type, name: "c_struct_parse_info", file: !2089, line: 401, flags: DIFlagFwdDecl)
!7606 = !DILocation(line: 1861, column: 35, scope: !7603)
!7607 = !DILocalVariable(name: "type", scope: !7603, file: !3, line: 1862, type: !2224)
!7608 = !DILocation(line: 1862, column: 12, scope: !7603)
!7609 = !DILocation(line: 1862, column: 33, scope: !7603)
!7610 = !DILocation(line: 1862, column: 45, scope: !7603)
!7611 = !DILocation(line: 1862, column: 51, scope: !7603)
!7612 = !DILocation(line: 1862, column: 19, scope: !7603)
!7613 = !DILocalVariable(name: "postfix_attrs", scope: !7603, file: !3, line: 1863, type: !2224)
!7614 = !DILocation(line: 1863, column: 12, scope: !7603)
!7615 = !DILocalVariable(name: "contents", scope: !7603, file: !3, line: 1874, type: !2224)
!7616 = !DILocation(line: 1874, column: 12, scope: !7603)
!7617 = !DILocation(line: 1875, column: 31, scope: !7603)
!7618 = !DILocation(line: 1875, column: 7, scope: !7603)
!7619 = !DILocation(line: 1878, column: 43, scope: !7620)
!7620 = distinct !DILexicalBlock(scope: !7603, file: !3, line: 1878, column: 11)
!7621 = !DILocation(line: 1878, column: 11, scope: !7620)
!7622 = !DILocation(line: 1878, column: 11, scope: !7603)
!7623 = !DILocalVariable(name: "name", scope: !7624, file: !3, line: 1880, type: !2224)
!7624 = distinct !DILexicalBlock(scope: !7620, file: !3, line: 1879, column: 2)
!7625 = !DILocation(line: 1880, column: 9, scope: !7624)
!7626 = !DILocation(line: 1881, column: 4, scope: !7624)
!7627 = !DILocation(line: 1882, column: 28, scope: !7624)
!7628 = !DILocation(line: 1882, column: 4, scope: !7624)
!7629 = !DILocation(line: 1883, column: 27, scope: !7630)
!7630 = distinct !DILexicalBlock(scope: !7624, file: !3, line: 1883, column: 8)
!7631 = !DILocation(line: 1883, column: 9, scope: !7630)
!7632 = !DILocation(line: 1883, column: 8, scope: !7624)
!7633 = !DILocation(line: 1884, column: 6, scope: !7630)
!7634 = !DILocation(line: 1885, column: 32, scope: !7635)
!7635 = distinct !DILexicalBlock(scope: !7624, file: !3, line: 1885, column: 8)
!7636 = !DILocation(line: 1885, column: 8, scope: !7635)
!7637 = !DILocation(line: 1886, column: 8, scope: !7635)
!7638 = !DILocation(line: 1886, column: 32, scope: !7635)
!7639 = !DILocation(line: 1886, column: 11, scope: !7635)
!7640 = !DILocation(line: 1886, column: 41, scope: !7635)
!7641 = !DILocation(line: 1886, column: 49, scope: !7635)
!7642 = !DILocation(line: 1885, column: 8, scope: !7624)
!7643 = !DILocation(line: 1888, column: 36, scope: !7644)
!7644 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 1887, column: 6)
!7645 = !DILocation(line: 1888, column: 15, scope: !7644)
!7646 = !DILocation(line: 1888, column: 45, scope: !7644)
!7647 = !DILocation(line: 1888, column: 13, scope: !7644)
!7648 = !DILocation(line: 1889, column: 32, scope: !7644)
!7649 = !DILocation(line: 1889, column: 8, scope: !7644)
!7650 = !DILocation(line: 1890, column: 6, scope: !7644)
!7651 = !DILocation(line: 1893, column: 24, scope: !7652)
!7652 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 1892, column: 6)
!7653 = !DILocation(line: 1893, column: 8, scope: !7652)
!7654 = !DILocation(line: 1894, column: 35, scope: !7652)
!7655 = !DILocation(line: 1894, column: 8, scope: !7652)
!7656 = !DILocation(line: 1895, column: 8, scope: !7652)
!7657 = !DILocation(line: 1897, column: 31, scope: !7624)
!7658 = !DILocation(line: 1897, column: 4, scope: !7624)
!7659 = !DILocation(line: 1899, column: 47, scope: !7624)
!7660 = !DILocation(line: 1899, column: 25, scope: !7624)
!7661 = !DILocation(line: 1899, column: 15, scope: !7624)
!7662 = !DILocation(line: 1899, column: 13, scope: !7624)
!7663 = !DILocation(line: 1900, column: 2, scope: !7624)
!7664 = !DILocation(line: 1878, column: 62, scope: !7620)
!7665 = !DILabel(scope: !7603, name: "end_at_defs", file: !3, line: 1901)
!7666 = !DILocation(line: 1901, column: 5, scope: !7603)
!7667 = !DILocation(line: 1905, column: 7, scope: !7603)
!7668 = !DILocalVariable(name: "decls", scope: !7669, file: !3, line: 1907, type: !2224)
!7669 = distinct !DILexicalBlock(scope: !7603, file: !3, line: 1906, column: 2)
!7670 = !DILocation(line: 1907, column: 9, scope: !7669)
!7671 = !DILocation(line: 1909, column: 32, scope: !7672)
!7672 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1909, column: 8)
!7673 = !DILocation(line: 1909, column: 8, scope: !7672)
!7674 = !DILocation(line: 1909, column: 8, scope: !7669)
!7675 = !DILocation(line: 1911, column: 38, scope: !7676)
!7676 = distinct !DILexicalBlock(scope: !7672, file: !3, line: 1910, column: 6)
!7677 = !DILocation(line: 1911, column: 17, scope: !7676)
!7678 = !DILocation(line: 1911, column: 47, scope: !7676)
!7679 = !DILocation(line: 1911, column: 8, scope: !7676)
!7680 = !DILocation(line: 1913, column: 32, scope: !7676)
!7681 = !DILocation(line: 1913, column: 8, scope: !7676)
!7682 = !DILocation(line: 1914, column: 8, scope: !7676)
!7683 = distinct !{!7683, !7667, !7684}
!7684 = !DILocation(line: 1949, column: 2, scope: !7603)
!7685 = !DILocation(line: 1917, column: 32, scope: !7686)
!7686 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1917, column: 8)
!7687 = !DILocation(line: 1917, column: 8, scope: !7686)
!7688 = !DILocation(line: 1917, column: 8, scope: !7669)
!7689 = !DILocation(line: 1919, column: 32, scope: !7690)
!7690 = distinct !DILexicalBlock(scope: !7686, file: !3, line: 1918, column: 6)
!7691 = !DILocation(line: 1919, column: 8, scope: !7690)
!7692 = !DILocation(line: 1920, column: 8, scope: !7690)
!7693 = !DILocation(line: 1923, column: 32, scope: !7694)
!7694 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1923, column: 8)
!7695 = !DILocation(line: 1923, column: 8, scope: !7694)
!7696 = !DILocation(line: 1923, column: 8, scope: !7669)
!7697 = !DILocation(line: 1925, column: 25, scope: !7698)
!7698 = distinct !DILexicalBlock(scope: !7694, file: !3, line: 1924, column: 6)
!7699 = !DILocation(line: 1925, column: 8, scope: !7698)
!7700 = !DILocation(line: 1926, column: 8, scope: !7698)
!7701 = !DILocation(line: 1930, column: 41, scope: !7669)
!7702 = !DILocation(line: 1930, column: 12, scope: !7669)
!7703 = !DILocation(line: 1930, column: 10, scope: !7669)
!7704 = !DILocation(line: 1931, column: 24, scope: !7669)
!7705 = !DILocation(line: 1931, column: 31, scope: !7669)
!7706 = !DILocation(line: 1931, column: 15, scope: !7669)
!7707 = !DILocation(line: 1931, column: 13, scope: !7669)
!7708 = !DILocation(line: 1935, column: 32, scope: !7709)
!7709 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1935, column: 8)
!7710 = !DILocation(line: 1935, column: 8, scope: !7709)
!7711 = !DILocation(line: 1935, column: 8, scope: !7669)
!7712 = !DILocation(line: 1936, column: 30, scope: !7709)
!7713 = !DILocation(line: 1936, column: 6, scope: !7709)
!7714 = !DILocation(line: 1939, column: 36, scope: !7715)
!7715 = distinct !DILexicalBlock(scope: !7716, file: !3, line: 1939, column: 12)
!7716 = distinct !DILexicalBlock(scope: !7709, file: !3, line: 1938, column: 6)
!7717 = !DILocation(line: 1939, column: 12, scope: !7715)
!7718 = !DILocation(line: 1939, column: 12, scope: !7716)
!7719 = !DILocation(line: 1940, column: 33, scope: !7715)
!7720 = !DILocation(line: 1940, column: 12, scope: !7715)
!7721 = !DILocation(line: 1940, column: 42, scope: !7715)
!7722 = !DILocation(line: 1940, column: 3, scope: !7715)
!7723 = !DILocation(line: 1944, column: 21, scope: !7724)
!7724 = distinct !DILexicalBlock(scope: !7715, file: !3, line: 1943, column: 3)
!7725 = !DILocation(line: 1944, column: 5, scope: !7724)
!7726 = !DILocation(line: 1945, column: 32, scope: !7724)
!7727 = !DILocation(line: 1945, column: 5, scope: !7724)
!7728 = !DILocation(line: 1946, column: 5, scope: !7724)
!7729 = !DILocation(line: 1950, column: 44, scope: !7603)
!7730 = !DILocation(line: 1950, column: 23, scope: !7603)
!7731 = !DILocation(line: 1950, column: 21, scope: !7603)
!7732 = !DILocation(line: 1951, column: 33, scope: !7603)
!7733 = !DILocation(line: 1951, column: 45, scope: !7603)
!7734 = !DILocation(line: 1951, column: 61, scope: !7603)
!7735 = !DILocation(line: 1951, column: 51, scope: !7603)
!7736 = !DILocation(line: 1952, column: 14, scope: !7603)
!7737 = !DILocation(line: 1952, column: 21, scope: !7603)
!7738 = !DILocation(line: 1952, column: 5, scope: !7603)
!7739 = !DILocation(line: 1952, column: 37, scope: !7603)
!7740 = !DILocation(line: 1951, column: 18, scope: !7603)
!7741 = !DILocation(line: 1951, column: 11, scope: !7603)
!7742 = !DILocation(line: 1951, column: 16, scope: !7603)
!7743 = !DILocation(line: 1953, column: 11, scope: !7603)
!7744 = !DILocation(line: 1953, column: 16, scope: !7603)
!7745 = !DILocation(line: 1954, column: 11, scope: !7603)
!7746 = !DILocation(line: 1954, column: 16, scope: !7603)
!7747 = !DILocation(line: 1955, column: 11, scope: !7603)
!7748 = !DILocation(line: 1955, column: 31, scope: !7603)
!7749 = !DILocation(line: 1956, column: 7, scope: !7603)
!7750 = !DILocation(line: 1958, column: 13, scope: !7751)
!7751 = distinct !DILexicalBlock(scope: !7599, file: !3, line: 1958, column: 12)
!7752 = !DILocation(line: 1958, column: 12, scope: !7599)
!7753 = !DILocation(line: 1960, column: 23, scope: !7754)
!7754 = distinct !DILexicalBlock(scope: !7751, file: !3, line: 1959, column: 5)
!7755 = !DILocation(line: 1960, column: 7, scope: !7754)
!7756 = !DILocation(line: 1961, column: 18, scope: !7754)
!7757 = !DILocation(line: 1961, column: 11, scope: !7754)
!7758 = !DILocation(line: 1961, column: 16, scope: !7754)
!7759 = !DILocation(line: 1962, column: 11, scope: !7754)
!7760 = !DILocation(line: 1962, column: 16, scope: !7754)
!7761 = !DILocation(line: 1963, column: 11, scope: !7754)
!7762 = !DILocation(line: 1963, column: 16, scope: !7754)
!7763 = !DILocation(line: 1964, column: 11, scope: !7754)
!7764 = !DILocation(line: 1964, column: 31, scope: !7754)
!7765 = !DILocation(line: 1965, column: 7, scope: !7754)
!7766 = !DILocation(line: 1967, column: 26, scope: !7542)
!7767 = !DILocation(line: 1967, column: 37, scope: !7542)
!7768 = !DILocation(line: 1967, column: 43, scope: !7542)
!7769 = !DILocation(line: 1967, column: 9, scope: !7542)
!7770 = !DILocation(line: 1968, column: 3, scope: !7542)
!7771 = !DILocation(line: 1969, column: 1, scope: !7542)
!7772 = distinct !DISubprogram(name: "c_parser_typeof_specifier", scope: !3, file: !3, line: 2136, type: !7311, scopeLine: 2137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!7773 = !DILocalVariable(name: "parser", arg: 1, scope: !7772, file: !3, line: 2136, type: !3401)
!7774 = !DILocation(line: 2136, column: 38, scope: !7772)
!7775 = !DILocalVariable(name: "ret", scope: !7772, file: !3, line: 2138, type: !7002)
!7776 = !DILocation(line: 2138, column: 21, scope: !7772)
!7777 = !DILocation(line: 2139, column: 7, scope: !7772)
!7778 = !DILocation(line: 2139, column: 12, scope: !7772)
!7779 = !DILocation(line: 2140, column: 14, scope: !7772)
!7780 = !DILocation(line: 2140, column: 7, scope: !7772)
!7781 = !DILocation(line: 2140, column: 12, scope: !7772)
!7782 = !DILocation(line: 2141, column: 7, scope: !7772)
!7783 = !DILocation(line: 2141, column: 12, scope: !7772)
!7784 = !DILocation(line: 2142, column: 7, scope: !7772)
!7785 = !DILocation(line: 2142, column: 27, scope: !7772)
!7786 = !DILocation(line: 2143, column: 3, scope: !7772)
!7787 = !DILocation(line: 2144, column: 27, scope: !7772)
!7788 = !DILocation(line: 2144, column: 3, scope: !7772)
!7789 = !DILocation(line: 2145, column: 32, scope: !7772)
!7790 = !DILocation(line: 2146, column: 12, scope: !7772)
!7791 = !DILocation(line: 2147, column: 26, scope: !7792)
!7792 = distinct !DILexicalBlock(scope: !7772, file: !3, line: 2147, column: 7)
!7793 = !DILocation(line: 2147, column: 8, scope: !7792)
!7794 = !DILocation(line: 2147, column: 7, scope: !7772)
!7795 = !DILocation(line: 2149, column: 36, scope: !7796)
!7796 = distinct !DILexicalBlock(scope: !7792, file: !3, line: 2148, column: 5)
!7797 = !DILocation(line: 2150, column: 16, scope: !7796)
!7798 = !DILocation(line: 2151, column: 7, scope: !7796)
!7799 = !DILocation(line: 2153, column: 44, scope: !7800)
!7800 = distinct !DILexicalBlock(scope: !7772, file: !3, line: 2153, column: 7)
!7801 = !DILocation(line: 2153, column: 7, scope: !7800)
!7802 = !DILocation(line: 2153, column: 7, scope: !7772)
!7803 = !DILocalVariable(name: "type", scope: !7804, file: !3, line: 2155, type: !4278)
!7804 = distinct !DILexicalBlock(scope: !7800, file: !3, line: 2154, column: 5)
!7805 = !DILocation(line: 2155, column: 27, scope: !7804)
!7806 = !DILocation(line: 2155, column: 54, scope: !7804)
!7807 = !DILocation(line: 2155, column: 34, scope: !7804)
!7808 = !DILocation(line: 2156, column: 36, scope: !7804)
!7809 = !DILocation(line: 2157, column: 16, scope: !7804)
!7810 = !DILocation(line: 2158, column: 11, scope: !7811)
!7811 = distinct !DILexicalBlock(scope: !7804, file: !3, line: 2158, column: 11)
!7812 = !DILocation(line: 2158, column: 16, scope: !7811)
!7813 = !DILocation(line: 2158, column: 11, scope: !7804)
!7814 = !DILocation(line: 2160, column: 29, scope: !7815)
!7815 = distinct !DILexicalBlock(scope: !7811, file: !3, line: 2159, column: 2)
!7816 = !DILocation(line: 2160, column: 40, scope: !7815)
!7817 = !DILocation(line: 2160, column: 51, scope: !7815)
!7818 = !DILocation(line: 2160, column: 15, scope: !7815)
!7819 = !DILocation(line: 2160, column: 8, scope: !7815)
!7820 = !DILocation(line: 2160, column: 13, scope: !7815)
!7821 = !DILocation(line: 2161, column: 50, scope: !7815)
!7822 = !DILocation(line: 2161, column: 20, scope: !7815)
!7823 = !DILocation(line: 2161, column: 4, scope: !7815)
!7824 = !DILocation(line: 2162, column: 2, scope: !7815)
!7825 = !DILocation(line: 2163, column: 5, scope: !7804)
!7826 = !DILocalVariable(name: "was_vm", scope: !7827, file: !3, line: 2166, type: !2344)
!7827 = distinct !DILexicalBlock(scope: !7800, file: !3, line: 2165, column: 5)
!7828 = !DILocation(line: 2166, column: 12, scope: !7827)
!7829 = !DILocalVariable(name: "here", scope: !7827, file: !3, line: 2167, type: !2352)
!7830 = !DILocation(line: 2167, column: 18, scope: !7827)
!7831 = !DILocation(line: 2167, column: 46, scope: !7827)
!7832 = !DILocation(line: 2167, column: 25, scope: !7827)
!7833 = !DILocation(line: 2167, column: 55, scope: !7827)
!7834 = !DILocalVariable(name: "expr", scope: !7827, file: !3, line: 2168, type: !2221)
!7835 = !DILocation(line: 2168, column: 21, scope: !7827)
!7836 = !DILocation(line: 2168, column: 49, scope: !7827)
!7837 = !DILocation(line: 2168, column: 28, scope: !7827)
!7838 = !DILocation(line: 2169, column: 36, scope: !7827)
!7839 = !DILocation(line: 2170, column: 16, scope: !7827)
!7840 = !DILocation(line: 2171, column: 11, scope: !7841)
!7841 = distinct !DILexicalBlock(scope: !7827, file: !3, line: 2171, column: 11)
!7842 = !DILocation(line: 2171, column: 34, scope: !7841)
!7843 = !DILocation(line: 2172, column: 4, scope: !7841)
!7844 = !DILocation(line: 2172, column: 7, scope: !7841)
!7845 = !DILocation(line: 2171, column: 11, scope: !7827)
!7846 = !DILocation(line: 2173, column: 12, scope: !7841)
!7847 = !DILocation(line: 2173, column: 2, scope: !7841)
!7848 = !DILocation(line: 2174, column: 18, scope: !7827)
!7849 = !DILocation(line: 2174, column: 11, scope: !7827)
!7850 = !DILocation(line: 2174, column: 16, scope: !7827)
!7851 = !DILocation(line: 2175, column: 46, scope: !7827)
!7852 = !DILocation(line: 2175, column: 16, scope: !7827)
!7853 = !DILocation(line: 2175, column: 14, scope: !7827)
!7854 = !DILocation(line: 2178, column: 11, scope: !7855)
!7855 = distinct !DILexicalBlock(scope: !7827, file: !3, line: 2178, column: 11)
!7856 = !DILocation(line: 2178, column: 11, scope: !7827)
!7857 = !DILocation(line: 2179, column: 32, scope: !7855)
!7858 = !DILocation(line: 2179, column: 51, scope: !7855)
!7859 = !DILocation(line: 2179, column: 13, scope: !7855)
!7860 = !DILocation(line: 2179, column: 6, scope: !7855)
!7861 = !DILocation(line: 2179, column: 11, scope: !7855)
!7862 = !DILocation(line: 2179, column: 2, scope: !7855)
!7863 = !DILocation(line: 2180, column: 23, scope: !7827)
!7864 = !DILocation(line: 2180, column: 7, scope: !7827)
!7865 = !DILocation(line: 2182, column: 30, scope: !7772)
!7866 = !DILocation(line: 2182, column: 3, scope: !7772)
!7867 = !DILocation(line: 2183, column: 3, scope: !7772)
!7868 = !DILocation(line: 2184, column: 1, scope: !7772)
!7869 = distinct !DISubprogram(name: "c_parser_attributes", scope: !3, file: !3, line: 2831, type: !6114, scopeLine: 2832, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!7870 = !DILocalVariable(name: "parser", arg: 1, scope: !7869, file: !3, line: 2831, type: !3401)
!7871 = !DILocation(line: 2831, column: 32, scope: !7869)
!7872 = !DILocalVariable(name: "attrs", scope: !7869, file: !3, line: 2833, type: !2224)
!7873 = !DILocation(line: 2833, column: 8, scope: !7869)
!7874 = !DILocation(line: 2834, column: 3, scope: !7869)
!7875 = !DILocation(line: 2834, column: 42, scope: !7869)
!7876 = !DILocation(line: 2834, column: 10, scope: !7869)
!7877 = !DILocation(line: 2838, column: 7, scope: !7878)
!7878 = distinct !DILexicalBlock(scope: !7869, file: !3, line: 2835, column: 5)
!7879 = !DILocation(line: 2838, column: 15, scope: !7878)
!7880 = !DILocation(line: 2838, column: 39, scope: !7878)
!7881 = !DILocation(line: 2839, column: 31, scope: !7878)
!7882 = !DILocation(line: 2839, column: 7, scope: !7878)
!7883 = !DILocation(line: 2840, column: 30, scope: !7884)
!7884 = distinct !DILexicalBlock(scope: !7878, file: !3, line: 2840, column: 11)
!7885 = !DILocation(line: 2840, column: 12, scope: !7884)
!7886 = !DILocation(line: 2840, column: 11, scope: !7878)
!7887 = !DILocation(line: 2842, column: 4, scope: !7888)
!7888 = distinct !DILexicalBlock(scope: !7884, file: !3, line: 2841, column: 2)
!7889 = !DILocation(line: 2842, column: 12, scope: !7888)
!7890 = !DILocation(line: 2842, column: 36, scope: !7888)
!7891 = !DILocation(line: 2843, column: 11, scope: !7888)
!7892 = !DILocation(line: 2843, column: 4, scope: !7888)
!7893 = !DILocation(line: 2845, column: 30, scope: !7894)
!7894 = distinct !DILexicalBlock(scope: !7878, file: !3, line: 2845, column: 11)
!7895 = !DILocation(line: 2845, column: 12, scope: !7894)
!7896 = !DILocation(line: 2845, column: 11, scope: !7878)
!7897 = !DILocation(line: 2847, column: 4, scope: !7898)
!7898 = distinct !DILexicalBlock(scope: !7894, file: !3, line: 2846, column: 2)
!7899 = !DILocation(line: 2847, column: 12, scope: !7898)
!7900 = !DILocation(line: 2847, column: 36, scope: !7898)
!7901 = !DILocation(line: 2848, column: 31, scope: !7898)
!7902 = !DILocation(line: 2848, column: 4, scope: !7898)
!7903 = !DILocation(line: 2849, column: 11, scope: !7898)
!7904 = !DILocation(line: 2849, column: 4, scope: !7898)
!7905 = !DILocation(line: 2852, column: 7, scope: !7878)
!7906 = !DILocation(line: 2852, column: 38, scope: !7878)
!7907 = !DILocation(line: 2852, column: 14, scope: !7878)
!7908 = !DILocation(line: 2853, column: 7, scope: !7878)
!7909 = !DILocation(line: 2853, column: 34, scope: !7878)
!7910 = !DILocation(line: 2853, column: 10, scope: !7878)
!7911 = !DILocation(line: 2854, column: 7, scope: !7878)
!7912 = !DILocation(line: 2854, column: 34, scope: !7878)
!7913 = !DILocation(line: 2854, column: 10, scope: !7878)
!7914 = !DILocalVariable(name: "attr", scope: !7915, file: !3, line: 2856, type: !2224)
!7915 = distinct !DILexicalBlock(scope: !7878, file: !3, line: 2855, column: 2)
!7916 = !DILocation(line: 2856, column: 9, scope: !7915)
!7917 = !DILocalVariable(name: "attr_name", scope: !7915, file: !3, line: 2856, type: !2224)
!7918 = !DILocation(line: 2856, column: 15, scope: !7915)
!7919 = !DILocalVariable(name: "attr_args", scope: !7915, file: !3, line: 2856, type: !2224)
!7920 = !DILocation(line: 2856, column: 26, scope: !7915)
!7921 = !DILocalVariable(name: "expr_list", scope: !7915, file: !3, line: 2857, type: !2892)
!7922 = !DILocation(line: 2857, column: 18, scope: !7915)
!7923 = !DILocation(line: 2858, column: 32, scope: !7924)
!7924 = distinct !DILexicalBlock(scope: !7915, file: !3, line: 2858, column: 8)
!7925 = !DILocation(line: 2858, column: 8, scope: !7924)
!7926 = !DILocation(line: 2858, column: 8, scope: !7915)
!7927 = !DILocation(line: 2860, column: 32, scope: !7928)
!7928 = distinct !DILexicalBlock(scope: !7924, file: !3, line: 2859, column: 6)
!7929 = !DILocation(line: 2860, column: 8, scope: !7928)
!7930 = !DILocation(line: 2861, column: 8, scope: !7928)
!7931 = distinct !{!7931, !7905, !7932}
!7932 = !DILocation(line: 2966, column: 2, scope: !7878)
!7933 = !DILocation(line: 2863, column: 32, scope: !7934)
!7934 = distinct !DILexicalBlock(scope: !7915, file: !3, line: 2863, column: 8)
!7935 = !DILocation(line: 2863, column: 8, scope: !7934)
!7936 = !DILocation(line: 2863, column: 8, scope: !7915)
!7937 = !DILocalVariable(name: "ok", scope: !7938, file: !3, line: 2867, type: !2344)
!7938 = distinct !DILexicalBlock(scope: !7934, file: !3, line: 2864, column: 6)
!7939 = !DILocation(line: 2867, column: 13, scope: !7938)
!7940 = !DILocation(line: 2868, column: 37, scope: !7938)
!7941 = !DILocation(line: 2868, column: 16, scope: !7938)
!7942 = !DILocation(line: 2868, column: 46, scope: !7938)
!7943 = !DILocation(line: 2868, column: 8, scope: !7938)
!7944 = !DILocation(line: 2897, column: 8, scope: !7945)
!7945 = distinct !DILexicalBlock(scope: !7938, file: !3, line: 2869, column: 3)
!7946 = !DILocation(line: 2898, column: 5, scope: !7945)
!7947 = !DILocation(line: 2900, column: 8, scope: !7945)
!7948 = !DILocation(line: 2901, column: 5, scope: !7945)
!7949 = !DILocation(line: 2903, column: 13, scope: !7950)
!7950 = distinct !DILexicalBlock(scope: !7938, file: !3, line: 2903, column: 12)
!7951 = !DILocation(line: 2903, column: 12, scope: !7938)
!7952 = !DILocation(line: 2904, column: 3, scope: !7950)
!7953 = !DILocation(line: 2908, column: 5, scope: !7938)
!7954 = !DILocation(line: 2908, column: 44, scope: !7938)
!7955 = !DILocation(line: 2908, column: 23, scope: !7938)
!7956 = !DILocation(line: 2908, column: 53, scope: !7938)
!7957 = !DILocation(line: 2908, column: 3, scope: !7938)
!7958 = !DILocation(line: 2909, column: 6, scope: !7938)
!7959 = !DILocation(line: 2911, column: 39, scope: !7934)
!7960 = !DILocation(line: 2911, column: 18, scope: !7934)
!7961 = !DILocation(line: 2911, column: 48, scope: !7934)
!7962 = !DILocation(line: 2911, column: 16, scope: !7934)
!7963 = !DILocation(line: 2912, column: 28, scope: !7915)
!7964 = !DILocation(line: 2912, column: 4, scope: !7915)
!7965 = !DILocation(line: 2913, column: 36, scope: !7966)
!7966 = distinct !DILexicalBlock(scope: !7915, file: !3, line: 2913, column: 8)
!7967 = !DILocation(line: 2913, column: 8, scope: !7966)
!7968 = !DILocation(line: 2913, column: 8, scope: !7915)
!7969 = !DILocation(line: 2915, column: 15, scope: !7970)
!7970 = distinct !DILexicalBlock(scope: !7966, file: !3, line: 2914, column: 6)
!7971 = !DILocation(line: 2915, column: 13, scope: !7970)
!7972 = !DILocation(line: 2916, column: 25, scope: !7970)
!7973 = !DILocation(line: 2916, column: 32, scope: !7970)
!7974 = !DILocation(line: 2916, column: 16, scope: !7970)
!7975 = !DILocation(line: 2916, column: 14, scope: !7970)
!7976 = !DILocation(line: 2917, column: 8, scope: !7970)
!7977 = !DILocation(line: 2919, column: 28, scope: !7915)
!7978 = !DILocation(line: 2919, column: 4, scope: !7915)
!7979 = !DILocation(line: 2924, column: 32, scope: !7980)
!7980 = distinct !DILexicalBlock(scope: !7915, file: !3, line: 2924, column: 8)
!7981 = !DILocation(line: 2924, column: 8, scope: !7980)
!7982 = !DILocation(line: 2925, column: 8, scope: !7980)
!7983 = !DILocation(line: 2925, column: 32, scope: !7980)
!7984 = !DILocation(line: 2925, column: 11, scope: !7980)
!7985 = !DILocation(line: 2925, column: 41, scope: !7980)
!7986 = !DILocation(line: 2925, column: 49, scope: !7980)
!7987 = !DILocation(line: 2926, column: 8, scope: !7980)
!7988 = !DILocation(line: 2926, column: 38, scope: !7980)
!7989 = !DILocation(line: 2926, column: 13, scope: !7980)
!7990 = !DILocation(line: 2926, column: 47, scope: !7980)
!7991 = !DILocation(line: 2926, column: 52, scope: !7980)
!7992 = !DILocation(line: 2927, column: 5, scope: !7980)
!7993 = !DILocation(line: 2927, column: 34, scope: !7980)
!7994 = !DILocation(line: 2927, column: 9, scope: !7980)
!7995 = !DILocation(line: 2927, column: 43, scope: !7980)
!7996 = !DILocation(line: 2928, column: 9, scope: !7980)
!7997 = !DILocation(line: 2924, column: 8, scope: !7915)
!7998 = !DILocalVariable(name: "arg1", scope: !7999, file: !3, line: 2930, type: !2224)
!7999 = distinct !DILexicalBlock(scope: !7980, file: !3, line: 2929, column: 6)
!8000 = !DILocation(line: 2930, column: 13, scope: !7999)
!8001 = !DILocation(line: 2930, column: 41, scope: !7999)
!8002 = !DILocation(line: 2930, column: 20, scope: !7999)
!8003 = !DILocation(line: 2930, column: 50, scope: !7999)
!8004 = !DILocation(line: 2931, column: 32, scope: !7999)
!8005 = !DILocation(line: 2931, column: 8, scope: !7999)
!8006 = !DILocation(line: 2932, column: 36, scope: !8007)
!8007 = distinct !DILexicalBlock(scope: !7999, file: !3, line: 2932, column: 12)
!8008 = !DILocation(line: 2932, column: 12, scope: !8007)
!8009 = !DILocation(line: 2932, column: 12, scope: !7999)
!8010 = !DILocation(line: 2933, column: 15, scope: !8007)
!8011 = !DILocation(line: 2933, column: 13, scope: !8007)
!8012 = !DILocation(line: 2933, column: 3, scope: !8007)
!8013 = !DILocalVariable(name: "tree_list", scope: !8014, file: !3, line: 2936, type: !2224)
!8014 = distinct !DILexicalBlock(scope: !8007, file: !3, line: 2935, column: 3)
!8015 = !DILocation(line: 2936, column: 10, scope: !8014)
!8016 = !DILocation(line: 2937, column: 29, scope: !8014)
!8017 = !DILocation(line: 2937, column: 5, scope: !8014)
!8018 = !DILocation(line: 2938, column: 37, scope: !8014)
!8019 = !DILocation(line: 2938, column: 17, scope: !8014)
!8020 = !DILocation(line: 2938, column: 15, scope: !8014)
!8021 = !DILocation(line: 2939, column: 17, scope: !8014)
!8022 = !DILocation(line: 2939, column: 15, scope: !8014)
!8023 = !DILocation(line: 2940, column: 17, scope: !8014)
!8024 = !DILocation(line: 2940, column: 15, scope: !8014)
!8025 = !DILocation(line: 2941, column: 26, scope: !8014)
!8026 = !DILocation(line: 2941, column: 5, scope: !8014)
!8027 = !DILocation(line: 2943, column: 6, scope: !7999)
!8028 = !DILocation(line: 2946, column: 36, scope: !8029)
!8029 = distinct !DILexicalBlock(scope: !8030, file: !3, line: 2946, column: 12)
!8030 = distinct !DILexicalBlock(scope: !7980, file: !3, line: 2945, column: 6)
!8031 = !DILocation(line: 2946, column: 12, scope: !8029)
!8032 = !DILocation(line: 2946, column: 12, scope: !8030)
!8033 = !DILocation(line: 2947, column: 13, scope: !8029)
!8034 = !DILocation(line: 2947, column: 3, scope: !8029)
!8035 = !DILocation(line: 2950, column: 37, scope: !8036)
!8036 = distinct !DILexicalBlock(scope: !8029, file: !3, line: 2949, column: 3)
!8037 = !DILocation(line: 2950, column: 17, scope: !8036)
!8038 = !DILocation(line: 2950, column: 15, scope: !8036)
!8039 = !DILocation(line: 2951, column: 17, scope: !8036)
!8040 = !DILocation(line: 2951, column: 15, scope: !8036)
!8041 = !DILocation(line: 2952, column: 26, scope: !8036)
!8042 = !DILocation(line: 2952, column: 5, scope: !8036)
!8043 = !DILocation(line: 2955, column: 11, scope: !7915)
!8044 = !DILocation(line: 2955, column: 9, scope: !7915)
!8045 = !DILocation(line: 2956, column: 32, scope: !8046)
!8046 = distinct !DILexicalBlock(scope: !7915, file: !3, line: 2956, column: 8)
!8047 = !DILocation(line: 2956, column: 8, scope: !8046)
!8048 = !DILocation(line: 2956, column: 8, scope: !7915)
!8049 = !DILocation(line: 2957, column: 30, scope: !8046)
!8050 = !DILocation(line: 2957, column: 6, scope: !8046)
!8051 = !DILocation(line: 2960, column: 8, scope: !8052)
!8052 = distinct !DILexicalBlock(scope: !8046, file: !3, line: 2959, column: 6)
!8053 = !DILocation(line: 2960, column: 16, scope: !8052)
!8054 = !DILocation(line: 2960, column: 40, scope: !8052)
!8055 = !DILocation(line: 2961, column: 35, scope: !8052)
!8056 = !DILocation(line: 2961, column: 8, scope: !8052)
!8057 = !DILocation(line: 2963, column: 15, scope: !8052)
!8058 = !DILocation(line: 2963, column: 8, scope: !8052)
!8059 = !DILocation(line: 2965, column: 21, scope: !7915)
!8060 = !DILocation(line: 2965, column: 28, scope: !7915)
!8061 = !DILocation(line: 2965, column: 12, scope: !7915)
!8062 = !DILocation(line: 2965, column: 10, scope: !7915)
!8063 = !DILocation(line: 2967, column: 35, scope: !8064)
!8064 = distinct !DILexicalBlock(scope: !7878, file: !3, line: 2967, column: 11)
!8065 = !DILocation(line: 2967, column: 11, scope: !8064)
!8066 = !DILocation(line: 2967, column: 11, scope: !7878)
!8067 = !DILocation(line: 2968, column: 26, scope: !8064)
!8068 = !DILocation(line: 2968, column: 2, scope: !8064)
!8069 = !DILocation(line: 2971, column: 4, scope: !8070)
!8070 = distinct !DILexicalBlock(scope: !8064, file: !3, line: 2970, column: 2)
!8071 = !DILocation(line: 2971, column: 12, scope: !8070)
!8072 = !DILocation(line: 2971, column: 36, scope: !8070)
!8073 = !DILocation(line: 2972, column: 31, scope: !8070)
!8074 = !DILocation(line: 2972, column: 4, scope: !8070)
!8075 = !DILocation(line: 2974, column: 11, scope: !8070)
!8076 = !DILocation(line: 2974, column: 4, scope: !8070)
!8077 = !DILocation(line: 2976, column: 35, scope: !8078)
!8078 = distinct !DILexicalBlock(scope: !7878, file: !3, line: 2976, column: 11)
!8079 = !DILocation(line: 2976, column: 11, scope: !8078)
!8080 = !DILocation(line: 2976, column: 11, scope: !7878)
!8081 = !DILocation(line: 2977, column: 26, scope: !8078)
!8082 = !DILocation(line: 2977, column: 2, scope: !8078)
!8083 = !DILocation(line: 2980, column: 4, scope: !8084)
!8084 = distinct !DILexicalBlock(scope: !8078, file: !3, line: 2979, column: 2)
!8085 = !DILocation(line: 2980, column: 12, scope: !8084)
!8086 = !DILocation(line: 2980, column: 36, scope: !8084)
!8087 = !DILocation(line: 2981, column: 31, scope: !8084)
!8088 = !DILocation(line: 2981, column: 4, scope: !8084)
!8089 = !DILocation(line: 2983, column: 11, scope: !8084)
!8090 = !DILocation(line: 2983, column: 4, scope: !8084)
!8091 = !DILocation(line: 2985, column: 7, scope: !7878)
!8092 = !DILocation(line: 2985, column: 15, scope: !7878)
!8093 = !DILocation(line: 2985, column: 39, scope: !7878)
!8094 = distinct !{!8094, !7874, !8095}
!8095 = !DILocation(line: 2986, column: 5, scope: !7869)
!8096 = !DILocation(line: 2987, column: 10, scope: !7869)
!8097 = !DILocation(line: 2987, column: 3, scope: !7869)
!8098 = !DILocation(line: 2988, column: 1, scope: !7869)
!8099 = distinct !DISubprogram(name: "c_parser_expr_no_commas", scope: !3, file: !3, line: 4559, type: !2219, scopeLine: 4560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!8100 = !DILocalVariable(name: "parser", arg: 1, scope: !8099, file: !3, line: 4559, type: !3401)
!8101 = !DILocation(line: 4559, column: 36, scope: !8099)
!8102 = !DILocalVariable(name: "after", arg: 2, scope: !8099, file: !3, line: 4559, type: !3424)
!8103 = !DILocation(line: 4559, column: 59, scope: !8099)
!8104 = !DILocalVariable(name: "lhs", scope: !8099, file: !3, line: 4561, type: !2221)
!8105 = !DILocation(line: 4561, column: 17, scope: !8099)
!8106 = !DILocalVariable(name: "rhs", scope: !8099, file: !3, line: 4561, type: !2221)
!8107 = !DILocation(line: 4561, column: 22, scope: !8099)
!8108 = !DILocalVariable(name: "ret", scope: !8099, file: !3, line: 4561, type: !2221)
!8109 = !DILocation(line: 4561, column: 27, scope: !8099)
!8110 = !DILocalVariable(name: "code", scope: !8099, file: !3, line: 4562, type: !190)
!8111 = !DILocation(line: 4562, column: 18, scope: !8099)
!8112 = !DILocalVariable(name: "op_location", scope: !8099, file: !3, line: 4563, type: !2352)
!8113 = !DILocation(line: 4563, column: 14, scope: !8099)
!8114 = !DILocalVariable(name: "exp_location", scope: !8099, file: !3, line: 4563, type: !2352)
!8115 = !DILocation(line: 4563, column: 27, scope: !8099)
!8116 = !DILocation(line: 4564, column: 3, scope: !8099)
!8117 = !DILocation(line: 4565, column: 42, scope: !8099)
!8118 = !DILocation(line: 4565, column: 50, scope: !8099)
!8119 = !DILocation(line: 4565, column: 9, scope: !8099)
!8120 = !DILocation(line: 4566, column: 38, scope: !8099)
!8121 = !DILocation(line: 4566, column: 17, scope: !8099)
!8122 = !DILocation(line: 4566, column: 47, scope: !8099)
!8123 = !DILocation(line: 4566, column: 15, scope: !8099)
!8124 = !DILocation(line: 4567, column: 32, scope: !8099)
!8125 = !DILocation(line: 4567, column: 11, scope: !8099)
!8126 = !DILocation(line: 4567, column: 41, scope: !8099)
!8127 = !DILocation(line: 4567, column: 3, scope: !8099)
!8128 = !DILocation(line: 4570, column: 12, scope: !8129)
!8129 = distinct !DILexicalBlock(scope: !8099, file: !3, line: 4568, column: 5)
!8130 = !DILocation(line: 4571, column: 7, scope: !8129)
!8131 = !DILocation(line: 4573, column: 12, scope: !8129)
!8132 = !DILocation(line: 4574, column: 7, scope: !8129)
!8133 = !DILocation(line: 4576, column: 12, scope: !8129)
!8134 = !DILocation(line: 4577, column: 7, scope: !8129)
!8135 = !DILocation(line: 4579, column: 12, scope: !8129)
!8136 = !DILocation(line: 4580, column: 7, scope: !8129)
!8137 = !DILocation(line: 4582, column: 12, scope: !8129)
!8138 = !DILocation(line: 4583, column: 7, scope: !8129)
!8139 = !DILocation(line: 4585, column: 12, scope: !8129)
!8140 = !DILocation(line: 4586, column: 7, scope: !8129)
!8141 = !DILocation(line: 4588, column: 12, scope: !8129)
!8142 = !DILocation(line: 4589, column: 7, scope: !8129)
!8143 = !DILocation(line: 4591, column: 12, scope: !8129)
!8144 = !DILocation(line: 4592, column: 7, scope: !8129)
!8145 = !DILocation(line: 4594, column: 12, scope: !8129)
!8146 = !DILocation(line: 4595, column: 7, scope: !8129)
!8147 = !DILocation(line: 4597, column: 12, scope: !8129)
!8148 = !DILocation(line: 4598, column: 7, scope: !8129)
!8149 = !DILocation(line: 4600, column: 12, scope: !8129)
!8150 = !DILocation(line: 4601, column: 7, scope: !8129)
!8151 = !DILocation(line: 4603, column: 14, scope: !8129)
!8152 = !DILocation(line: 4603, column: 7, scope: !8129)
!8153 = !DILocation(line: 4605, column: 27, scope: !8099)
!8154 = !DILocation(line: 4605, column: 3, scope: !8099)
!8155 = !DILocation(line: 4606, column: 39, scope: !8099)
!8156 = !DILocation(line: 4606, column: 18, scope: !8099)
!8157 = !DILocation(line: 4606, column: 48, scope: !8099)
!8158 = !DILocation(line: 4606, column: 16, scope: !8099)
!8159 = !DILocation(line: 4607, column: 34, scope: !8099)
!8160 = !DILocation(line: 4607, column: 9, scope: !8099)
!8161 = !DILocation(line: 4608, column: 44, scope: !8099)
!8162 = !DILocation(line: 4608, column: 9, scope: !8099)
!8163 = !DILocation(line: 4609, column: 34, scope: !8099)
!8164 = !DILocation(line: 4609, column: 51, scope: !8099)
!8165 = !DILocation(line: 4609, column: 62, scope: !8099)
!8166 = !DILocation(line: 4610, column: 6, scope: !8099)
!8167 = !DILocation(line: 4610, column: 12, scope: !8099)
!8168 = !DILocation(line: 4610, column: 30, scope: !8099)
!8169 = !DILocation(line: 4611, column: 10, scope: !8099)
!8170 = !DILocation(line: 4609, column: 15, scope: !8099)
!8171 = !DILocation(line: 4609, column: 7, scope: !8099)
!8172 = !DILocation(line: 4609, column: 13, scope: !8099)
!8173 = !DILocation(line: 4612, column: 7, scope: !8174)
!8174 = distinct !DILexicalBlock(scope: !8099, file: !3, line: 4612, column: 7)
!8175 = !DILocation(line: 4612, column: 12, scope: !8174)
!8176 = !DILocation(line: 4612, column: 7, scope: !8099)
!8177 = !DILocation(line: 4613, column: 9, scope: !8174)
!8178 = !DILocation(line: 4613, column: 23, scope: !8174)
!8179 = !DILocation(line: 4613, column: 5, scope: !8174)
!8180 = !DILocation(line: 4616, column: 7, scope: !8181)
!8181 = distinct !DILexicalBlock(scope: !8174, file: !3, line: 4615, column: 5)
!8182 = !DILocation(line: 4616, column: 35, scope: !8181)
!8183 = !DILocation(line: 4617, column: 11, scope: !8181)
!8184 = !DILocation(line: 4617, column: 25, scope: !8181)
!8185 = !DILocation(line: 4619, column: 7, scope: !8099)
!8186 = !DILocation(line: 4619, column: 21, scope: !8099)
!8187 = !DILocation(line: 4620, column: 10, scope: !8099)
!8188 = !DILocation(line: 4620, column: 3, scope: !8099)
!8189 = !DILocation(line: 4621, column: 1, scope: !8099)
!8190 = distinct !DISubprogram(name: "c_parser_conditional_expression", scope: !3, file: !3, line: 4638, type: !2219, scopeLine: 4639, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!8191 = !DILocalVariable(name: "parser", arg: 1, scope: !8190, file: !3, line: 4638, type: !3401)
!8192 = !DILocation(line: 4638, column: 44, scope: !8190)
!8193 = !DILocalVariable(name: "after", arg: 2, scope: !8190, file: !3, line: 4638, type: !3424)
!8194 = !DILocation(line: 4638, column: 67, scope: !8190)
!8195 = !DILocalVariable(name: "cond", scope: !8190, file: !3, line: 4640, type: !2221)
!8196 = !DILocation(line: 4640, column: 17, scope: !8190)
!8197 = !DILocalVariable(name: "exp1", scope: !8190, file: !3, line: 4640, type: !2221)
!8198 = !DILocation(line: 4640, column: 23, scope: !8190)
!8199 = !DILocalVariable(name: "exp2", scope: !8190, file: !3, line: 4640, type: !2221)
!8200 = !DILocation(line: 4640, column: 29, scope: !8190)
!8201 = !DILocalVariable(name: "ret", scope: !8190, file: !3, line: 4640, type: !2221)
!8202 = !DILocation(line: 4640, column: 35, scope: !8190)
!8203 = !DILocalVariable(name: "cond_loc", scope: !8190, file: !3, line: 4641, type: !2352)
!8204 = !DILocation(line: 4641, column: 14, scope: !8190)
!8205 = !DILocalVariable(name: "colon_loc", scope: !8190, file: !3, line: 4641, type: !2352)
!8206 = !DILocation(line: 4641, column: 24, scope: !8190)
!8207 = !DILocation(line: 4643, column: 3, scope: !8190)
!8208 = !DILocation(line: 4645, column: 38, scope: !8190)
!8209 = !DILocation(line: 4645, column: 46, scope: !8190)
!8210 = !DILocation(line: 4645, column: 10, scope: !8190)
!8211 = !DILocation(line: 4647, column: 35, scope: !8212)
!8212 = distinct !DILexicalBlock(scope: !8190, file: !3, line: 4647, column: 7)
!8213 = !DILocation(line: 4647, column: 7, scope: !8212)
!8214 = !DILocation(line: 4647, column: 7, scope: !8190)
!8215 = !DILocation(line: 4648, column: 12, scope: !8212)
!8216 = !DILocation(line: 4648, column: 5, scope: !8212)
!8217 = !DILocation(line: 4649, column: 35, scope: !8190)
!8218 = !DILocation(line: 4649, column: 14, scope: !8190)
!8219 = !DILocation(line: 4649, column: 44, scope: !8190)
!8220 = !DILocation(line: 4649, column: 12, scope: !8190)
!8221 = !DILocation(line: 4650, column: 45, scope: !8190)
!8222 = !DILocation(line: 4650, column: 10, scope: !8190)
!8223 = !DILocation(line: 4651, column: 27, scope: !8190)
!8224 = !DILocation(line: 4651, column: 3, scope: !8190)
!8225 = !DILocation(line: 4652, column: 31, scope: !8226)
!8226 = distinct !DILexicalBlock(scope: !8190, file: !3, line: 4652, column: 7)
!8227 = !DILocation(line: 4652, column: 7, scope: !8226)
!8228 = !DILocation(line: 4652, column: 7, scope: !8190)
!8229 = !DILocalVariable(name: "eptype", scope: !8230, file: !3, line: 4654, type: !2224)
!8230 = distinct !DILexicalBlock(scope: !8226, file: !3, line: 4653, column: 5)
!8231 = !DILocation(line: 4654, column: 12, scope: !8230)
!8232 = !DILocation(line: 4655, column: 37, scope: !8230)
!8233 = !DILocation(line: 4655, column: 16, scope: !8230)
!8234 = !DILocation(line: 4655, column: 46, scope: !8230)
!8235 = !DILocation(line: 4655, column: 7, scope: !8230)
!8236 = !DILocation(line: 4657, column: 11, scope: !8237)
!8237 = distinct !DILexicalBlock(scope: !8230, file: !3, line: 4657, column: 11)
!8238 = !DILocation(line: 4657, column: 34, scope: !8237)
!8239 = !DILocation(line: 4657, column: 11, scope: !8230)
!8240 = !DILocation(line: 4659, column: 13, scope: !8241)
!8241 = distinct !DILexicalBlock(scope: !8237, file: !3, line: 4658, column: 2)
!8242 = !DILocation(line: 4659, column: 11, scope: !8241)
!8243 = !DILocation(line: 4660, column: 17, scope: !8241)
!8244 = !DILocation(line: 4660, column: 9, scope: !8241)
!8245 = !DILocation(line: 4660, column: 15, scope: !8241)
!8246 = !DILocation(line: 4661, column: 2, scope: !8241)
!8247 = !DILocation(line: 4663, column: 58, scope: !8230)
!8248 = !DILocation(line: 4663, column: 33, scope: !8230)
!8249 = !DILocation(line: 4663, column: 20, scope: !8230)
!8250 = !DILocation(line: 4663, column: 12, scope: !8230)
!8251 = !DILocation(line: 4663, column: 18, scope: !8230)
!8252 = !DILocation(line: 4664, column: 11, scope: !8253)
!8253 = distinct !DILexicalBlock(scope: !8230, file: !3, line: 4664, column: 11)
!8254 = !DILocation(line: 4664, column: 11, scope: !8230)
!8255 = !DILocation(line: 4665, column: 15, scope: !8253)
!8256 = !DILocation(line: 4665, column: 7, scope: !8253)
!8257 = !DILocation(line: 4665, column: 13, scope: !8253)
!8258 = !DILocation(line: 4665, column: 2, scope: !8253)
!8259 = !DILocation(line: 4666, column: 12, scope: !8230)
!8260 = !DILocation(line: 4666, column: 26, scope: !8230)
!8261 = !DILocation(line: 4667, column: 57, scope: !8230)
!8262 = !DILocation(line: 4667, column: 72, scope: !8230)
!8263 = !DILocation(line: 4667, column: 20, scope: !8230)
!8264 = !DILocation(line: 4667, column: 12, scope: !8230)
!8265 = !DILocation(line: 4667, column: 18, scope: !8230)
!8266 = !DILocation(line: 4668, column: 45, scope: !8230)
!8267 = !DILocation(line: 4668, column: 54, scope: !8230)
!8268 = !DILocation(line: 4668, column: 51, scope: !8230)
!8269 = !DILocation(line: 4668, column: 37, scope: !8230)
!8270 = !DILocation(line: 4669, column: 5, scope: !8230)
!8271 = !DILocation(line: 4674, column: 3, scope: !8272)
!8272 = distinct !DILexicalBlock(scope: !8226, file: !3, line: 4671, column: 5)
!8273 = !DILocation(line: 4674, column: 38, scope: !8272)
!8274 = !DILocation(line: 4674, column: 13, scope: !8272)
!8275 = !DILocation(line: 4673, column: 4, scope: !8272)
!8276 = !DILocation(line: 4672, column: 12, scope: !8272)
!8277 = !DILocation(line: 4673, column: 2, scope: !8272)
!8278 = !DILocation(line: 4675, column: 45, scope: !8272)
!8279 = !DILocation(line: 4675, column: 54, scope: !8272)
!8280 = !DILocation(line: 4675, column: 51, scope: !8272)
!8281 = !DILocation(line: 4675, column: 37, scope: !8272)
!8282 = !DILocation(line: 4676, column: 40, scope: !8272)
!8283 = !DILocation(line: 4676, column: 14, scope: !8272)
!8284 = !DILocation(line: 4678, column: 9, scope: !8272)
!8285 = !DILocation(line: 4678, column: 18, scope: !8272)
!8286 = !DILocation(line: 4678, column: 15, scope: !8272)
!8287 = !DILocation(line: 4679, column: 11, scope: !8272)
!8288 = !DILocation(line: 4679, column: 20, scope: !8272)
!8289 = !DILocation(line: 4679, column: 17, scope: !8272)
!8290 = !DILocation(line: 4679, column: 3, scope: !8272)
!8291 = !DILocation(line: 4677, column: 37, scope: !8272)
!8292 = !DILocation(line: 4682, column: 36, scope: !8190)
!8293 = !DILocation(line: 4682, column: 15, scope: !8190)
!8294 = !DILocation(line: 4682, column: 45, scope: !8190)
!8295 = !DILocation(line: 4682, column: 13, scope: !8190)
!8296 = !DILocation(line: 4683, column: 26, scope: !8297)
!8297 = distinct !DILexicalBlock(scope: !8190, file: !3, line: 4683, column: 7)
!8298 = !DILocation(line: 4683, column: 8, scope: !8297)
!8299 = !DILocation(line: 4683, column: 7, scope: !8190)
!8300 = !DILocation(line: 4685, column: 45, scope: !8301)
!8301 = distinct !DILexicalBlock(scope: !8297, file: !3, line: 4684, column: 5)
!8302 = !DILocation(line: 4685, column: 54, scope: !8301)
!8303 = !DILocation(line: 4685, column: 51, scope: !8301)
!8304 = !DILocation(line: 4685, column: 37, scope: !8301)
!8305 = !DILocation(line: 4686, column: 19, scope: !8301)
!8306 = !DILocation(line: 4686, column: 11, scope: !8301)
!8307 = !DILocation(line: 4686, column: 17, scope: !8301)
!8308 = !DILocation(line: 4687, column: 11, scope: !8301)
!8309 = !DILocation(line: 4687, column: 25, scope: !8301)
!8310 = !DILocation(line: 4688, column: 11, scope: !8301)
!8311 = !DILocation(line: 4688, column: 25, scope: !8301)
!8312 = !DILocation(line: 4689, column: 14, scope: !8301)
!8313 = !DILocation(line: 4689, column: 7, scope: !8301)
!8314 = !DILocalVariable(name: "exp2_loc", scope: !8315, file: !3, line: 4692, type: !2352)
!8315 = distinct !DILexicalBlock(scope: !8190, file: !3, line: 4691, column: 3)
!8316 = !DILocation(line: 4692, column: 16, scope: !8315)
!8317 = !DILocation(line: 4692, column: 48, scope: !8315)
!8318 = !DILocation(line: 4692, column: 27, scope: !8315)
!8319 = !DILocation(line: 4692, column: 57, scope: !8315)
!8320 = !DILocation(line: 4693, column: 45, scope: !8315)
!8321 = !DILocation(line: 4693, column: 12, scope: !8315)
!8322 = !DILocation(line: 4694, column: 47, scope: !8315)
!8323 = !DILocation(line: 4694, column: 12, scope: !8315)
!8324 = !DILocation(line: 4696, column: 41, scope: !8190)
!8325 = !DILocation(line: 4696, column: 50, scope: !8190)
!8326 = !DILocation(line: 4696, column: 47, scope: !8190)
!8327 = !DILocation(line: 4696, column: 33, scope: !8190)
!8328 = !DILocation(line: 4697, column: 39, scope: !8190)
!8329 = !DILocation(line: 4697, column: 55, scope: !8190)
!8330 = !DILocation(line: 4698, column: 16, scope: !8190)
!8331 = !DILocation(line: 4698, column: 30, scope: !8190)
!8332 = !DILocation(line: 4698, column: 11, scope: !8190)
!8333 = !DILocation(line: 4699, column: 16, scope: !8190)
!8334 = !DILocation(line: 4699, column: 28, scope: !8190)
!8335 = !DILocation(line: 4700, column: 16, scope: !8190)
!8336 = !DILocation(line: 4700, column: 28, scope: !8190)
!8337 = !DILocation(line: 4697, column: 15, scope: !8190)
!8338 = !DILocation(line: 4697, column: 7, scope: !8190)
!8339 = !DILocation(line: 4697, column: 13, scope: !8190)
!8340 = !DILocation(line: 4701, column: 7, scope: !8190)
!8341 = !DILocation(line: 4701, column: 21, scope: !8190)
!8342 = !DILocation(line: 4702, column: 12, scope: !8343)
!8343 = distinct !DILexicalBlock(scope: !8190, file: !3, line: 4702, column: 7)
!8344 = !DILocation(line: 4702, column: 21, scope: !8343)
!8345 = !DILocation(line: 4702, column: 18, scope: !8343)
!8346 = !DILocation(line: 4702, column: 37, scope: !8343)
!8347 = !DILocation(line: 4702, column: 45, scope: !8343)
!8348 = !DILocation(line: 4702, column: 54, scope: !8343)
!8349 = !DILocation(line: 4702, column: 51, scope: !8343)
!8350 = !DILocation(line: 4702, column: 7, scope: !8190)
!8351 = !DILocation(line: 4703, column: 9, scope: !8343)
!8352 = !DILocation(line: 4703, column: 23, scope: !8343)
!8353 = !DILocation(line: 4703, column: 5, scope: !8343)
!8354 = !DILocalVariable(name: "t1", scope: !8355, file: !3, line: 4706, type: !2224)
!8355 = distinct !DILexicalBlock(scope: !8343, file: !3, line: 4705, column: 5)
!8356 = !DILocation(line: 4706, column: 12, scope: !8355)
!8357 = !DILocalVariable(name: "t2", scope: !8355, file: !3, line: 4706, type: !2224)
!8358 = !DILocation(line: 4706, column: 16, scope: !8355)
!8359 = !DILocation(line: 4711, column: 17, scope: !8355)
!8360 = !DILocation(line: 4711, column: 12, scope: !8355)
!8361 = !DILocation(line: 4711, column: 38, scope: !8355)
!8362 = !DILocation(line: 4711, column: 54, scope: !8355)
!8363 = !DILocation(line: 4711, column: 10, scope: !8355)
!8364 = !DILocation(line: 4712, column: 17, scope: !8355)
!8365 = !DILocation(line: 4712, column: 12, scope: !8355)
!8366 = !DILocation(line: 4712, column: 38, scope: !8355)
!8367 = !DILocation(line: 4712, column: 54, scope: !8355)
!8368 = !DILocation(line: 4712, column: 10, scope: !8355)
!8369 = !DILocation(line: 4713, column: 29, scope: !8355)
!8370 = !DILocation(line: 4713, column: 35, scope: !8355)
!8371 = !DILocation(line: 4713, column: 32, scope: !8355)
!8372 = !DILocation(line: 4714, column: 8, scope: !8355)
!8373 = !DILocation(line: 4714, column: 11, scope: !8355)
!8374 = !DILocation(line: 4714, column: 17, scope: !8355)
!8375 = !DILocation(line: 4714, column: 14, scope: !8355)
!8376 = !DILocation(line: 4715, column: 8, scope: !8355)
!8377 = !DILocation(line: 4715, column: 12, scope: !8355)
!8378 = !DILocation(line: 4716, column: 8, scope: !8355)
!8379 = !DILocation(line: 4716, column: 5, scope: !8355)
!8380 = !DILocation(line: 4713, column: 28, scope: !8355)
!8381 = !DILocation(line: 4717, column: 9, scope: !8355)
!8382 = !DILocation(line: 4713, column: 11, scope: !8355)
!8383 = !DILocation(line: 4713, column: 25, scope: !8355)
!8384 = !DILocation(line: 4720, column: 10, scope: !8190)
!8385 = !DILocation(line: 4720, column: 3, scope: !8190)
!8386 = !DILocation(line: 4721, column: 1, scope: !8190)
!8387 = !DILocalVariable(name: "parser", arg: 1, scope: !2218, file: !3, line: 4778, type: !3401)
!8388 = !DILocation(line: 4778, column: 39, scope: !2218)
!8389 = !DILocalVariable(name: "after", arg: 2, scope: !2218, file: !3, line: 4778, type: !3424)
!8390 = !DILocation(line: 4778, column: 62, scope: !2218)
!8391 = !DILocalVariable(name: "stack", scope: !2218, file: !3, line: 4827, type: !8392)
!8392 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8393, size: 3520, elements: !8399)
!8393 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2218, file: !3, line: 4817, size: 320, elements: !8394)
!8394 = !{!8395, !8396, !8397, !8398}
!8395 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !8393, file: !3, line: 4819, baseType: !2221, size: 192)
!8396 = !DIDerivedType(tag: DW_TAG_member, name: "prec", scope: !8393, file: !3, line: 4822, baseType: !2217, size: 32, offset: 192)
!8397 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !8393, file: !3, line: 4824, baseType: !190, size: 32, offset: 224)
!8398 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !8393, file: !3, line: 4826, baseType: !2352, size: 32, offset: 256)
!8399 = !{!8400}
!8400 = !DISubrange(count: 11)
!8401 = !DILocation(line: 4827, column: 5, scope: !2218)
!8402 = !DILocalVariable(name: "sp", scope: !2218, file: !3, line: 4828, type: !2321)
!8403 = !DILocation(line: 4828, column: 7, scope: !2218)
!8404 = !DILocalVariable(name: "binary_loc", scope: !2218, file: !3, line: 4830, type: !2352)
!8405 = !DILocation(line: 4830, column: 14, scope: !2218)
!8406 = !DILocation(line: 4857, column: 3, scope: !2218)
!8407 = !DILocation(line: 4858, column: 39, scope: !2218)
!8408 = !DILocation(line: 4858, column: 18, scope: !2218)
!8409 = !DILocation(line: 4858, column: 48, scope: !2218)
!8410 = !DILocation(line: 4858, column: 3, scope: !2218)
!8411 = !DILocation(line: 4858, column: 12, scope: !2218)
!8412 = !DILocation(line: 4858, column: 16, scope: !2218)
!8413 = !DILocation(line: 4859, column: 3, scope: !2218)
!8414 = !DILocation(line: 4859, column: 12, scope: !2218)
!8415 = !DILocation(line: 4859, column: 45, scope: !2218)
!8416 = !DILocation(line: 4859, column: 53, scope: !2218)
!8417 = !DILocation(line: 4859, column: 19, scope: !2218)
!8418 = !DILocation(line: 4860, column: 3, scope: !2218)
!8419 = !DILocation(line: 4860, column: 12, scope: !2218)
!8420 = !DILocation(line: 4860, column: 17, scope: !2218)
!8421 = !DILocation(line: 4861, column: 6, scope: !2218)
!8422 = !DILocation(line: 4862, column: 3, scope: !2218)
!8423 = !DILocalVariable(name: "oprec", scope: !8424, file: !3, line: 4864, type: !2217)
!8424 = distinct !DILexicalBlock(scope: !2218, file: !3, line: 4863, column: 5)
!8425 = !DILocation(line: 4864, column: 17, scope: !8424)
!8426 = !DILocalVariable(name: "ocode", scope: !8424, file: !3, line: 4865, type: !190)
!8427 = !DILocation(line: 4865, column: 22, scope: !8424)
!8428 = !DILocation(line: 4866, column: 11, scope: !8429)
!8429 = distinct !DILexicalBlock(scope: !8424, file: !3, line: 4866, column: 11)
!8430 = !DILocation(line: 4866, column: 19, scope: !8429)
!8431 = !DILocation(line: 4866, column: 11, scope: !8424)
!8432 = !DILocation(line: 4867, column: 2, scope: !8429)
!8433 = !DILocation(line: 4868, column: 36, scope: !8424)
!8434 = !DILocation(line: 4868, column: 15, scope: !8424)
!8435 = !DILocation(line: 4868, column: 45, scope: !8424)
!8436 = !DILocation(line: 4868, column: 7, scope: !8424)
!8437 = !DILocation(line: 4871, column: 10, scope: !8438)
!8438 = distinct !DILexicalBlock(scope: !8424, file: !3, line: 4869, column: 2)
!8439 = !DILocation(line: 4872, column: 10, scope: !8438)
!8440 = !DILocation(line: 4873, column: 4, scope: !8438)
!8441 = !DILocation(line: 4875, column: 10, scope: !8438)
!8442 = !DILocation(line: 4876, column: 10, scope: !8438)
!8443 = !DILocation(line: 4877, column: 4, scope: !8438)
!8444 = !DILocation(line: 4879, column: 10, scope: !8438)
!8445 = !DILocation(line: 4880, column: 10, scope: !8438)
!8446 = !DILocation(line: 4881, column: 4, scope: !8438)
!8447 = !DILocation(line: 4883, column: 10, scope: !8438)
!8448 = !DILocation(line: 4884, column: 10, scope: !8438)
!8449 = !DILocation(line: 4885, column: 4, scope: !8438)
!8450 = !DILocation(line: 4887, column: 10, scope: !8438)
!8451 = !DILocation(line: 4888, column: 10, scope: !8438)
!8452 = !DILocation(line: 4889, column: 4, scope: !8438)
!8453 = !DILocation(line: 4891, column: 10, scope: !8438)
!8454 = !DILocation(line: 4892, column: 10, scope: !8438)
!8455 = !DILocation(line: 4893, column: 4, scope: !8438)
!8456 = !DILocation(line: 4895, column: 10, scope: !8438)
!8457 = !DILocation(line: 4896, column: 10, scope: !8438)
!8458 = !DILocation(line: 4897, column: 4, scope: !8438)
!8459 = !DILocation(line: 4899, column: 10, scope: !8438)
!8460 = !DILocation(line: 4900, column: 10, scope: !8438)
!8461 = !DILocation(line: 4901, column: 4, scope: !8438)
!8462 = !DILocation(line: 4903, column: 10, scope: !8438)
!8463 = !DILocation(line: 4904, column: 10, scope: !8438)
!8464 = !DILocation(line: 4905, column: 4, scope: !8438)
!8465 = !DILocation(line: 4907, column: 10, scope: !8438)
!8466 = !DILocation(line: 4908, column: 10, scope: !8438)
!8467 = !DILocation(line: 4909, column: 4, scope: !8438)
!8468 = !DILocation(line: 4911, column: 10, scope: !8438)
!8469 = !DILocation(line: 4912, column: 10, scope: !8438)
!8470 = !DILocation(line: 4913, column: 4, scope: !8438)
!8471 = !DILocation(line: 4915, column: 10, scope: !8438)
!8472 = !DILocation(line: 4916, column: 10, scope: !8438)
!8473 = !DILocation(line: 4917, column: 4, scope: !8438)
!8474 = !DILocation(line: 4919, column: 10, scope: !8438)
!8475 = !DILocation(line: 4920, column: 10, scope: !8438)
!8476 = !DILocation(line: 4921, column: 4, scope: !8438)
!8477 = !DILocation(line: 4923, column: 10, scope: !8438)
!8478 = !DILocation(line: 4924, column: 10, scope: !8438)
!8479 = !DILocation(line: 4925, column: 4, scope: !8438)
!8480 = !DILocation(line: 4927, column: 10, scope: !8438)
!8481 = !DILocation(line: 4928, column: 10, scope: !8438)
!8482 = !DILocation(line: 4929, column: 4, scope: !8438)
!8483 = !DILocation(line: 4931, column: 10, scope: !8438)
!8484 = !DILocation(line: 4932, column: 10, scope: !8438)
!8485 = !DILocation(line: 4933, column: 4, scope: !8438)
!8486 = !DILocation(line: 4935, column: 10, scope: !8438)
!8487 = !DILocation(line: 4936, column: 10, scope: !8438)
!8488 = !DILocation(line: 4937, column: 4, scope: !8438)
!8489 = !DILocation(line: 4939, column: 10, scope: !8438)
!8490 = !DILocation(line: 4940, column: 10, scope: !8438)
!8491 = !DILocation(line: 4941, column: 4, scope: !8438)
!8492 = !DILocation(line: 4945, column: 4, scope: !8438)
!8493 = !DILocation(line: 4947, column: 41, scope: !8424)
!8494 = !DILocation(line: 4947, column: 20, scope: !8424)
!8495 = !DILocation(line: 4947, column: 50, scope: !8424)
!8496 = !DILocation(line: 4947, column: 18, scope: !8424)
!8497 = !DILocation(line: 4948, column: 31, scope: !8424)
!8498 = !DILocation(line: 4948, column: 7, scope: !8424)
!8499 = !DILocation(line: 4949, column: 7, scope: !8424)
!8500 = !DILocation(line: 4949, column: 14, scope: !8424)
!8501 = !DILocation(line: 4949, column: 29, scope: !8424)
!8502 = !DILocation(line: 4949, column: 23, scope: !8424)
!8503 = !DILocation(line: 4949, column: 33, scope: !8424)
!8504 = !DILocation(line: 4949, column: 20, scope: !8424)
!8505 = !DILocation(line: 4950, column: 2, scope: !8424)
!8506 = !DILocation(line: 4950, column: 2, scope: !8507)
!8507 = distinct !DILexicalBlock(scope: !8424, file: !3, line: 4950, column: 2)
!8508 = !DILocation(line: 4950, column: 2, scope: !8509)
!8509 = distinct !DILexicalBlock(scope: !8507, file: !3, line: 4950, column: 2)
!8510 = distinct !{!8510, !8499, !8505}
!8511 = !DILocation(line: 4951, column: 15, scope: !8424)
!8512 = !DILocation(line: 4951, column: 7, scope: !8424)
!8513 = !DILocation(line: 4954, column: 10, scope: !8514)
!8514 = distinct !DILexicalBlock(scope: !8424, file: !3, line: 4952, column: 2)
!8515 = !DILocation(line: 4954, column: 4, scope: !8514)
!8516 = !DILocation(line: 4954, column: 14, scope: !8514)
!8517 = !DILocation(line: 4955, column: 49, scope: !8514)
!8518 = !DILocation(line: 4955, column: 43, scope: !8514)
!8519 = !DILocation(line: 4955, column: 53, scope: !8514)
!8520 = !DILocation(line: 4956, column: 14, scope: !8514)
!8521 = !DILocation(line: 4956, column: 8, scope: !8514)
!8522 = !DILocation(line: 4956, column: 18, scope: !8514)
!8523 = !DILocation(line: 4955, column: 8, scope: !8514)
!8524 = !DILocation(line: 4958, column: 13, scope: !8514)
!8525 = !DILocation(line: 4958, column: 7, scope: !8514)
!8526 = !DILocation(line: 4958, column: 17, scope: !8514)
!8527 = !DILocation(line: 4958, column: 48, scope: !8514)
!8528 = !DILocation(line: 4958, column: 42, scope: !8514)
!8529 = !DILocation(line: 4958, column: 52, scope: !8514)
!8530 = !DILocation(line: 4958, column: 57, scope: !8514)
!8531 = !DILocation(line: 4958, column: 22, scope: !8514)
!8532 = !DILocation(line: 4957, column: 27, scope: !8514)
!8533 = !DILocation(line: 4957, column: 10, scope: !8514)
!8534 = !DILocation(line: 4957, column: 4, scope: !8514)
!8535 = !DILocation(line: 4957, column: 14, scope: !8514)
!8536 = !DILocation(line: 4957, column: 19, scope: !8514)
!8537 = !DILocation(line: 4957, column: 25, scope: !8514)
!8538 = !DILocation(line: 4959, column: 44, scope: !8514)
!8539 = !DILocation(line: 4959, column: 38, scope: !8514)
!8540 = !DILocation(line: 4959, column: 48, scope: !8514)
!8541 = !DILocation(line: 4959, column: 53, scope: !8514)
!8542 = !DILocation(line: 4960, column: 13, scope: !8514)
!8543 = !DILocation(line: 4960, column: 10, scope: !8514)
!8544 = !DILocation(line: 4959, column: 34, scope: !8514)
!8545 = !DILocation(line: 4961, column: 4, scope: !8514)
!8546 = !DILocation(line: 4963, column: 10, scope: !8514)
!8547 = !DILocation(line: 4963, column: 4, scope: !8514)
!8548 = !DILocation(line: 4963, column: 14, scope: !8514)
!8549 = !DILocation(line: 4964, column: 49, scope: !8514)
!8550 = !DILocation(line: 4964, column: 43, scope: !8514)
!8551 = !DILocation(line: 4964, column: 53, scope: !8514)
!8552 = !DILocation(line: 4965, column: 14, scope: !8514)
!8553 = !DILocation(line: 4965, column: 8, scope: !8514)
!8554 = !DILocation(line: 4965, column: 18, scope: !8514)
!8555 = !DILocation(line: 4964, column: 8, scope: !8514)
!8556 = !DILocation(line: 4967, column: 13, scope: !8514)
!8557 = !DILocation(line: 4967, column: 7, scope: !8514)
!8558 = !DILocation(line: 4967, column: 17, scope: !8514)
!8559 = !DILocation(line: 4967, column: 48, scope: !8514)
!8560 = !DILocation(line: 4967, column: 42, scope: !8514)
!8561 = !DILocation(line: 4967, column: 52, scope: !8514)
!8562 = !DILocation(line: 4967, column: 57, scope: !8514)
!8563 = !DILocation(line: 4967, column: 22, scope: !8514)
!8564 = !DILocation(line: 4966, column: 27, scope: !8514)
!8565 = !DILocation(line: 4966, column: 10, scope: !8514)
!8566 = !DILocation(line: 4966, column: 4, scope: !8514)
!8567 = !DILocation(line: 4966, column: 14, scope: !8514)
!8568 = !DILocation(line: 4966, column: 19, scope: !8514)
!8569 = !DILocation(line: 4966, column: 25, scope: !8514)
!8570 = !DILocation(line: 4968, column: 44, scope: !8514)
!8571 = !DILocation(line: 4968, column: 38, scope: !8514)
!8572 = !DILocation(line: 4968, column: 48, scope: !8514)
!8573 = !DILocation(line: 4968, column: 53, scope: !8514)
!8574 = !DILocation(line: 4969, column: 13, scope: !8514)
!8575 = !DILocation(line: 4969, column: 10, scope: !8514)
!8576 = !DILocation(line: 4968, column: 34, scope: !8514)
!8577 = !DILocation(line: 4970, column: 4, scope: !8514)
!8578 = !DILocation(line: 4972, column: 4, scope: !8514)
!8579 = !DILocation(line: 4974, column: 9, scope: !8424)
!8580 = !DILocation(line: 4975, column: 23, scope: !8424)
!8581 = !DILocation(line: 4975, column: 13, scope: !8424)
!8582 = !DILocation(line: 4975, column: 7, scope: !8424)
!8583 = !DILocation(line: 4975, column: 17, scope: !8424)
!8584 = !DILocation(line: 4975, column: 21, scope: !8424)
!8585 = !DILocation(line: 4976, column: 13, scope: !8424)
!8586 = !DILocation(line: 4976, column: 7, scope: !8424)
!8587 = !DILocation(line: 4976, column: 17, scope: !8424)
!8588 = !DILocation(line: 4976, column: 50, scope: !8424)
!8589 = !DILocation(line: 4976, column: 24, scope: !8424)
!8590 = !DILocation(line: 4977, column: 24, scope: !8424)
!8591 = !DILocation(line: 4977, column: 13, scope: !8424)
!8592 = !DILocation(line: 4977, column: 7, scope: !8424)
!8593 = !DILocation(line: 4977, column: 17, scope: !8424)
!8594 = !DILocation(line: 4977, column: 22, scope: !8424)
!8595 = !DILocation(line: 4978, column: 22, scope: !8424)
!8596 = !DILocation(line: 4978, column: 13, scope: !8424)
!8597 = !DILocation(line: 4978, column: 7, scope: !8424)
!8598 = !DILocation(line: 4978, column: 17, scope: !8424)
!8599 = !DILocation(line: 4978, column: 20, scope: !8424)
!8600 = !DILocation(line: 4979, column: 23, scope: !8424)
!8601 = !DILocation(line: 4979, column: 13, scope: !8424)
!8602 = !DILocation(line: 4979, column: 7, scope: !8424)
!8603 = !DILocation(line: 4979, column: 17, scope: !8424)
!8604 = !DILocation(line: 4979, column: 21, scope: !8424)
!8605 = distinct !{!8605, !8422, !8606}
!8606 = !DILocation(line: 4980, column: 5, scope: !2218)
!8607 = !DILabel(scope: !2218, name: "out", file: !3, line: 4981)
!8608 = !DILocation(line: 4981, column: 2, scope: !2218)
!8609 = !DILocation(line: 4982, column: 3, scope: !2218)
!8610 = !DILocation(line: 4982, column: 10, scope: !2218)
!8611 = !DILocation(line: 4982, column: 13, scope: !2218)
!8612 = !DILocation(line: 4983, column: 5, scope: !2218)
!8613 = !DILocation(line: 4983, column: 5, scope: !8614)
!8614 = distinct !DILexicalBlock(scope: !2218, file: !3, line: 4983, column: 5)
!8615 = !DILocation(line: 4983, column: 5, scope: !8616)
!8616 = distinct !DILexicalBlock(scope: !8614, file: !3, line: 4983, column: 5)
!8617 = distinct !{!8617, !8609, !8612}
!8618 = !DILocation(line: 4984, column: 10, scope: !2218)
!8619 = !DILocation(line: 4984, column: 19, scope: !2218)
!8620 = !DILocation(line: 4984, column: 3, scope: !2218)
!8621 = distinct !DISubprogram(name: "c_parser_expression_conv", scope: !3, file: !3, line: 6021, type: !8622, scopeLine: 6022, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!8622 = !DISubroutineType(types: !8623)
!8623 = !{!2221, !3401}
!8624 = !DILocalVariable(name: "parser", arg: 1, scope: !8621, file: !3, line: 6021, type: !3401)
!8625 = !DILocation(line: 6021, column: 37, scope: !8621)
!8626 = !DILocalVariable(name: "expr", scope: !8621, file: !3, line: 6023, type: !2221)
!8627 = !DILocation(line: 6023, column: 17, scope: !8621)
!8628 = !DILocalVariable(name: "loc", scope: !8621, file: !3, line: 6024, type: !2352)
!8629 = !DILocation(line: 6024, column: 14, scope: !8621)
!8630 = !DILocation(line: 6024, column: 41, scope: !8621)
!8631 = !DILocation(line: 6024, column: 20, scope: !8621)
!8632 = !DILocation(line: 6024, column: 50, scope: !8621)
!8633 = !DILocation(line: 6025, column: 31, scope: !8621)
!8634 = !DILocation(line: 6025, column: 10, scope: !8621)
!8635 = !DILocation(line: 6026, column: 45, scope: !8621)
!8636 = !DILocation(line: 6026, column: 10, scope: !8621)
!8637 = !DILocation(line: 6027, column: 3, scope: !8621)
!8638 = distinct !DISubprogram(name: "c_parser_cast_expression", scope: !3, file: !3, line: 4998, type: !2219, scopeLine: 4999, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!8639 = !DILocalVariable(name: "parser", arg: 1, scope: !8638, file: !3, line: 4998, type: !3401)
!8640 = !DILocation(line: 4998, column: 37, scope: !8638)
!8641 = !DILocalVariable(name: "after", arg: 2, scope: !8638, file: !3, line: 4998, type: !3424)
!8642 = !DILocation(line: 4998, column: 60, scope: !8638)
!8643 = !DILocalVariable(name: "cast_loc", scope: !8638, file: !3, line: 5000, type: !2352)
!8644 = !DILocation(line: 5000, column: 14, scope: !8638)
!8645 = !DILocation(line: 5000, column: 46, scope: !8638)
!8646 = !DILocation(line: 5000, column: 25, scope: !8638)
!8647 = !DILocation(line: 5000, column: 55, scope: !8638)
!8648 = !DILocation(line: 5001, column: 3, scope: !8638)
!8649 = !DILocation(line: 5002, column: 7, scope: !8650)
!8650 = distinct !DILexicalBlock(scope: !8638, file: !3, line: 5002, column: 7)
!8651 = !DILocation(line: 5002, column: 7, scope: !8638)
!8652 = !DILocation(line: 5003, column: 55, scope: !8650)
!8653 = !DILocation(line: 5004, column: 13, scope: !8650)
!8654 = !DILocation(line: 5004, column: 24, scope: !8650)
!8655 = !DILocation(line: 5003, column: 12, scope: !8650)
!8656 = !DILocation(line: 5003, column: 5, scope: !8650)
!8657 = !DILocation(line: 5009, column: 31, scope: !8658)
!8658 = distinct !DILexicalBlock(scope: !8638, file: !3, line: 5009, column: 7)
!8659 = !DILocation(line: 5009, column: 7, scope: !8658)
!8660 = !DILocation(line: 5010, column: 7, scope: !8658)
!8661 = !DILocation(line: 5010, column: 60, scope: !8658)
!8662 = !DILocation(line: 5010, column: 35, scope: !8658)
!8663 = !DILocation(line: 5010, column: 10, scope: !8658)
!8664 = !DILocation(line: 5009, column: 7, scope: !8638)
!8665 = !DILocalVariable(name: "type_name", scope: !8666, file: !3, line: 5012, type: !4278)
!8666 = distinct !DILexicalBlock(scope: !8658, file: !3, line: 5011, column: 5)
!8667 = !DILocation(line: 5012, column: 27, scope: !8666)
!8668 = !DILocalVariable(name: "ret", scope: !8666, file: !3, line: 5013, type: !2221)
!8669 = !DILocation(line: 5013, column: 21, scope: !8666)
!8670 = !DILocalVariable(name: "expr", scope: !8666, file: !3, line: 5014, type: !2221)
!8671 = !DILocation(line: 5014, column: 21, scope: !8666)
!8672 = !DILocation(line: 5015, column: 31, scope: !8666)
!8673 = !DILocation(line: 5015, column: 7, scope: !8666)
!8674 = !DILocation(line: 5016, column: 39, scope: !8666)
!8675 = !DILocation(line: 5016, column: 19, scope: !8666)
!8676 = !DILocation(line: 5016, column: 17, scope: !8666)
!8677 = !DILocation(line: 5017, column: 34, scope: !8666)
!8678 = !DILocation(line: 5017, column: 7, scope: !8666)
!8679 = !DILocation(line: 5018, column: 11, scope: !8680)
!8680 = distinct !DILexicalBlock(scope: !8666, file: !3, line: 5018, column: 11)
!8681 = !DILocation(line: 5018, column: 21, scope: !8680)
!8682 = !DILocation(line: 5018, column: 11, scope: !8666)
!8683 = !DILocation(line: 5020, column: 16, scope: !8684)
!8684 = distinct !DILexicalBlock(scope: !8680, file: !3, line: 5019, column: 2)
!8685 = !DILocation(line: 5020, column: 8, scope: !8684)
!8686 = !DILocation(line: 5020, column: 14, scope: !8684)
!8687 = !DILocation(line: 5021, column: 8, scope: !8684)
!8688 = !DILocation(line: 5021, column: 22, scope: !8684)
!8689 = !DILocation(line: 5022, column: 8, scope: !8684)
!8690 = !DILocation(line: 5022, column: 22, scope: !8684)
!8691 = !DILocation(line: 5023, column: 11, scope: !8684)
!8692 = !DILocation(line: 5023, column: 4, scope: !8684)
!8693 = !DILocation(line: 5027, column: 26, scope: !8666)
!8694 = !DILocation(line: 5027, column: 37, scope: !8666)
!8695 = !DILocation(line: 5027, column: 44, scope: !8666)
!8696 = !DILocation(line: 5027, column: 7, scope: !8666)
!8697 = !DILocation(line: 5029, column: 35, scope: !8698)
!8698 = distinct !DILexicalBlock(scope: !8666, file: !3, line: 5029, column: 11)
!8699 = !DILocation(line: 5029, column: 11, scope: !8698)
!8700 = !DILocation(line: 5029, column: 11, scope: !8666)
!8701 = !DILocation(line: 5030, column: 55, scope: !8698)
!8702 = !DILocation(line: 5030, column: 63, scope: !8698)
!8703 = !DILocation(line: 5031, column: 13, scope: !8698)
!8704 = !DILocation(line: 5030, column: 9, scope: !8698)
!8705 = !DILocation(line: 5030, column: 2, scope: !8698)
!8706 = !DILocalVariable(name: "expr_loc", scope: !8707, file: !3, line: 5033, type: !2352)
!8707 = distinct !DILexicalBlock(scope: !8666, file: !3, line: 5032, column: 7)
!8708 = !DILocation(line: 5033, column: 13, scope: !8707)
!8709 = !DILocation(line: 5033, column: 45, scope: !8707)
!8710 = !DILocation(line: 5033, column: 24, scope: !8707)
!8711 = !DILocation(line: 5033, column: 54, scope: !8707)
!8712 = !DILocation(line: 5034, column: 35, scope: !8707)
!8713 = !DILocation(line: 5034, column: 9, scope: !8707)
!8714 = !DILocation(line: 5035, column: 44, scope: !8707)
!8715 = !DILocation(line: 5035, column: 9, scope: !8707)
!8716 = !DILocation(line: 5037, column: 32, scope: !8666)
!8717 = !DILocation(line: 5037, column: 42, scope: !8666)
!8718 = !DILocation(line: 5037, column: 58, scope: !8666)
!8719 = !DILocation(line: 5037, column: 19, scope: !8666)
!8720 = !DILocation(line: 5037, column: 11, scope: !8666)
!8721 = !DILocation(line: 5037, column: 17, scope: !8666)
!8722 = !DILocation(line: 5038, column: 11, scope: !8666)
!8723 = !DILocation(line: 5038, column: 25, scope: !8666)
!8724 = !DILocation(line: 5039, column: 11, scope: !8666)
!8725 = !DILocation(line: 5039, column: 25, scope: !8666)
!8726 = !DILocation(line: 5040, column: 14, scope: !8666)
!8727 = !DILocation(line: 5040, column: 7, scope: !8666)
!8728 = !DILocation(line: 5043, column: 39, scope: !8658)
!8729 = !DILocation(line: 5043, column: 12, scope: !8658)
!8730 = !DILocation(line: 5043, column: 5, scope: !8658)
!8731 = !DILocation(line: 5044, column: 1, scope: !8638)
!8732 = distinct !DISubprogram(name: "c_parser_postfix_expression_after_primary", scope: !3, file: !3, line: 5853, type: !8733, scopeLine: 5856, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!8733 = !DISubroutineType(types: !8734)
!8734 = !{!2221, !3401, !2352, !2221}
!8735 = !DILocalVariable(name: "parser", arg: 1, scope: !8732, file: !3, line: 5853, type: !3401)
!8736 = !DILocation(line: 5853, column: 54, scope: !8732)
!8737 = !DILocalVariable(name: "expr_loc", arg: 2, scope: !8732, file: !3, line: 5854, type: !2352)
!8738 = !DILocation(line: 5854, column: 20, scope: !8732)
!8739 = !DILocalVariable(name: "expr", arg: 3, scope: !8732, file: !3, line: 5855, type: !2221)
!8740 = !DILocation(line: 5855, column: 23, scope: !8732)
!8741 = !DILocalVariable(name: "orig_expr", scope: !8732, file: !3, line: 5857, type: !2221)
!8742 = !DILocation(line: 5857, column: 17, scope: !8732)
!8743 = !DILocalVariable(name: "ident", scope: !8732, file: !3, line: 5858, type: !2224)
!8744 = !DILocation(line: 5858, column: 8, scope: !8732)
!8745 = !DILocalVariable(name: "idx", scope: !8732, file: !3, line: 5858, type: !2224)
!8746 = !DILocation(line: 5858, column: 15, scope: !8732)
!8747 = !DILocalVariable(name: "exprlist", scope: !8732, file: !3, line: 5859, type: !2892)
!8748 = !DILocation(line: 5859, column: 17, scope: !8732)
!8749 = !DILocalVariable(name: "origtypes", scope: !8732, file: !3, line: 5860, type: !2892)
!8750 = !DILocation(line: 5860, column: 17, scope: !8732)
!8751 = !DILocation(line: 5861, column: 3, scope: !8732)
!8752 = !DILocalVariable(name: "op_loc", scope: !8753, file: !3, line: 5863, type: !2352)
!8753 = distinct !DILexicalBlock(scope: !8732, file: !3, line: 5862, column: 5)
!8754 = !DILocation(line: 5863, column: 18, scope: !8753)
!8755 = !DILocation(line: 5863, column: 48, scope: !8753)
!8756 = !DILocation(line: 5863, column: 27, scope: !8753)
!8757 = !DILocation(line: 5863, column: 57, scope: !8753)
!8758 = !DILocation(line: 5864, column: 36, scope: !8753)
!8759 = !DILocation(line: 5864, column: 15, scope: !8753)
!8760 = !DILocation(line: 5864, column: 45, scope: !8753)
!8761 = !DILocation(line: 5864, column: 7, scope: !8753)
!8762 = !DILocation(line: 5868, column: 28, scope: !8763)
!8763 = distinct !DILexicalBlock(scope: !8753, file: !3, line: 5865, column: 2)
!8764 = !DILocation(line: 5868, column: 4, scope: !8763)
!8765 = !DILocation(line: 5869, column: 31, scope: !8763)
!8766 = !DILocation(line: 5869, column: 10, scope: !8763)
!8767 = !DILocation(line: 5869, column: 39, scope: !8763)
!8768 = !DILocation(line: 5869, column: 8, scope: !8763)
!8769 = !DILocation(line: 5870, column: 31, scope: !8763)
!8770 = !DILocation(line: 5870, column: 4, scope: !8763)
!8771 = !DILocation(line: 5872, column: 34, scope: !8763)
!8772 = !DILocation(line: 5872, column: 47, scope: !8763)
!8773 = !DILocation(line: 5872, column: 54, scope: !8763)
!8774 = !DILocation(line: 5872, column: 17, scope: !8763)
!8775 = !DILocation(line: 5872, column: 9, scope: !8763)
!8776 = !DILocation(line: 5872, column: 15, scope: !8763)
!8777 = !DILocation(line: 5873, column: 9, scope: !8763)
!8778 = !DILocation(line: 5873, column: 23, scope: !8763)
!8779 = !DILocation(line: 5874, column: 9, scope: !8763)
!8780 = !DILocation(line: 5874, column: 23, scope: !8763)
!8781 = !DILocation(line: 5875, column: 4, scope: !8763)
!8782 = !DILocation(line: 5878, column: 28, scope: !8763)
!8783 = !DILocation(line: 5878, column: 4, scope: !8763)
!8784 = !DILocation(line: 5879, column: 32, scope: !8785)
!8785 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 5879, column: 8)
!8786 = !DILocation(line: 5879, column: 8, scope: !8785)
!8787 = !DILocation(line: 5879, column: 8, scope: !8763)
!8788 = !DILocation(line: 5880, column: 15, scope: !8785)
!8789 = !DILocation(line: 5880, column: 6, scope: !8785)
!8790 = !DILocation(line: 5882, column: 37, scope: !8785)
!8791 = !DILocation(line: 5882, column: 17, scope: !8785)
!8792 = !DILocation(line: 5882, column: 15, scope: !8785)
!8793 = !DILocation(line: 5883, column: 31, scope: !8763)
!8794 = !DILocation(line: 5883, column: 4, scope: !8763)
!8795 = !DILocation(line: 5885, column: 16, scope: !8763)
!8796 = !DILocation(line: 5888, column: 42, scope: !8763)
!8797 = !DILocation(line: 5888, column: 55, scope: !8763)
!8798 = !DILocation(line: 5888, column: 62, scope: !8763)
!8799 = !DILocation(line: 5889, column: 7, scope: !8763)
!8800 = !DILocation(line: 5888, column: 17, scope: !8763)
!8801 = !DILocation(line: 5888, column: 9, scope: !8763)
!8802 = !DILocation(line: 5888, column: 15, scope: !8763)
!8803 = !DILocation(line: 5890, column: 9, scope: !8763)
!8804 = !DILocation(line: 5890, column: 23, scope: !8763)
!8805 = !DILocation(line: 5891, column: 8, scope: !8806)
!8806 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 5891, column: 8)
!8807 = !DILocation(line: 5891, column: 31, scope: !8806)
!8808 = !DILocation(line: 5892, column: 8, scope: !8806)
!8809 = !DILocation(line: 5892, column: 11, scope: !8806)
!8810 = !DILocation(line: 5892, column: 39, scope: !8806)
!8811 = !DILocation(line: 5893, column: 8, scope: !8806)
!8812 = !DILocation(line: 5893, column: 11, scope: !8806)
!8813 = !DILocation(line: 5893, column: 49, scope: !8806)
!8814 = !DILocation(line: 5894, column: 8, scope: !8806)
!8815 = !DILocation(line: 5894, column: 11, scope: !8806)
!8816 = !DILocation(line: 5894, column: 48, scope: !8806)
!8817 = !DILocation(line: 5891, column: 8, scope: !8763)
!8818 = !DILocation(line: 5895, column: 11, scope: !8806)
!8819 = !DILocation(line: 5895, column: 25, scope: !8806)
!8820 = !DILocation(line: 5895, column: 6, scope: !8806)
!8821 = !DILocation(line: 5896, column: 9, scope: !8763)
!8822 = !DILocation(line: 5896, column: 23, scope: !8763)
!8823 = !DILocation(line: 5897, column: 8, scope: !8824)
!8824 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 5897, column: 8)
!8825 = !DILocation(line: 5897, column: 17, scope: !8824)
!8826 = !DILocation(line: 5897, column: 8, scope: !8763)
!8827 = !DILocation(line: 5899, column: 29, scope: !8828)
!8828 = distinct !DILexicalBlock(scope: !8824, file: !3, line: 5898, column: 6)
!8829 = !DILocation(line: 5899, column: 8, scope: !8828)
!8830 = !DILocation(line: 5900, column: 29, scope: !8828)
!8831 = !DILocation(line: 5900, column: 8, scope: !8828)
!8832 = !DILocation(line: 5901, column: 6, scope: !8828)
!8833 = !DILocation(line: 5902, column: 4, scope: !8763)
!8834 = !DILocation(line: 5905, column: 28, scope: !8763)
!8835 = !DILocation(line: 5905, column: 4, scope: !8763)
!8836 = !DILocation(line: 5906, column: 46, scope: !8763)
!8837 = !DILocation(line: 5906, column: 11, scope: !8763)
!8838 = !DILocation(line: 5907, column: 32, scope: !8839)
!8839 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 5907, column: 8)
!8840 = !DILocation(line: 5907, column: 8, scope: !8839)
!8841 = !DILocation(line: 5907, column: 8, scope: !8763)
!8842 = !DILocation(line: 5908, column: 35, scope: !8839)
!8843 = !DILocation(line: 5908, column: 14, scope: !8839)
!8844 = !DILocation(line: 5908, column: 44, scope: !8839)
!8845 = !DILocation(line: 5908, column: 12, scope: !8839)
!8846 = !DILocation(line: 5908, column: 6, scope: !8839)
!8847 = !DILocation(line: 5911, column: 24, scope: !8848)
!8848 = distinct !DILexicalBlock(scope: !8839, file: !3, line: 5910, column: 6)
!8849 = !DILocation(line: 5911, column: 8, scope: !8848)
!8850 = !DILocation(line: 5912, column: 21, scope: !8848)
!8851 = !DILocation(line: 5912, column: 13, scope: !8848)
!8852 = !DILocation(line: 5912, column: 19, scope: !8848)
!8853 = !DILocation(line: 5913, column: 13, scope: !8848)
!8854 = !DILocation(line: 5913, column: 27, scope: !8848)
!8855 = !DILocation(line: 5914, column: 20, scope: !8848)
!8856 = !DILocation(line: 5914, column: 34, scope: !8848)
!8857 = !DILocation(line: 5915, column: 15, scope: !8848)
!8858 = !DILocation(line: 5915, column: 8, scope: !8848)
!8859 = !DILocation(line: 5917, column: 28, scope: !8763)
!8860 = !DILocation(line: 5917, column: 4, scope: !8763)
!8861 = !DILocation(line: 5918, column: 38, scope: !8763)
!8862 = !DILocation(line: 5918, column: 51, scope: !8763)
!8863 = !DILocation(line: 5918, column: 58, scope: !8763)
!8864 = !DILocation(line: 5918, column: 17, scope: !8763)
!8865 = !DILocation(line: 5918, column: 9, scope: !8763)
!8866 = !DILocation(line: 5918, column: 15, scope: !8763)
!8867 = !DILocation(line: 5919, column: 9, scope: !8763)
!8868 = !DILocation(line: 5919, column: 23, scope: !8763)
!8869 = !DILocation(line: 5920, column: 8, scope: !8870)
!8870 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 5920, column: 8)
!8871 = !DILocation(line: 5920, column: 31, scope: !8870)
!8872 = !DILocation(line: 5920, column: 8, scope: !8763)
!8873 = !DILocation(line: 5921, column: 11, scope: !8870)
!8874 = !DILocation(line: 5921, column: 25, scope: !8870)
!8875 = !DILocation(line: 5921, column: 6, scope: !8870)
!8876 = !DILocalVariable(name: "field", scope: !8877, file: !3, line: 5925, type: !2224)
!8877 = distinct !DILexicalBlock(scope: !8870, file: !3, line: 5923, column: 6)
!8878 = !DILocation(line: 5925, column: 13, scope: !8877)
!8879 = !DILocation(line: 5925, column: 21, scope: !8877)
!8880 = !DILocation(line: 5926, column: 12, scope: !8881)
!8881 = distinct !DILexicalBlock(scope: !8877, file: !3, line: 5926, column: 12)
!8882 = !DILocation(line: 5926, column: 30, scope: !8881)
!8883 = !DILocation(line: 5926, column: 12, scope: !8877)
!8884 = !DILocation(line: 5927, column: 8, scope: !8881)
!8885 = !DILocation(line: 5927, column: 22, scope: !8881)
!8886 = !DILocation(line: 5927, column: 3, scope: !8881)
!8887 = !DILocation(line: 5929, column: 24, scope: !8881)
!8888 = !DILocation(line: 5929, column: 8, scope: !8881)
!8889 = !DILocation(line: 5929, column: 22, scope: !8881)
!8890 = !DILocation(line: 5931, column: 4, scope: !8763)
!8891 = !DILocation(line: 5934, column: 28, scope: !8763)
!8892 = !DILocation(line: 5934, column: 4, scope: !8763)
!8893 = !DILocation(line: 5935, column: 46, scope: !8763)
!8894 = !DILocation(line: 5935, column: 11, scope: !8763)
!8895 = !DILocation(line: 5936, column: 32, scope: !8896)
!8896 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 5936, column: 8)
!8897 = !DILocation(line: 5936, column: 8, scope: !8896)
!8898 = !DILocation(line: 5936, column: 8, scope: !8763)
!8899 = !DILocation(line: 5937, column: 35, scope: !8896)
!8900 = !DILocation(line: 5937, column: 14, scope: !8896)
!8901 = !DILocation(line: 5937, column: 44, scope: !8896)
!8902 = !DILocation(line: 5937, column: 12, scope: !8896)
!8903 = !DILocation(line: 5937, column: 6, scope: !8896)
!8904 = !DILocation(line: 5940, column: 24, scope: !8905)
!8905 = distinct !DILexicalBlock(scope: !8896, file: !3, line: 5939, column: 6)
!8906 = !DILocation(line: 5940, column: 8, scope: !8905)
!8907 = !DILocation(line: 5941, column: 21, scope: !8905)
!8908 = !DILocation(line: 5941, column: 13, scope: !8905)
!8909 = !DILocation(line: 5941, column: 19, scope: !8905)
!8910 = !DILocation(line: 5942, column: 13, scope: !8905)
!8911 = !DILocation(line: 5942, column: 27, scope: !8905)
!8912 = !DILocation(line: 5943, column: 13, scope: !8905)
!8913 = !DILocation(line: 5943, column: 27, scope: !8905)
!8914 = !DILocation(line: 5944, column: 15, scope: !8905)
!8915 = !DILocation(line: 5944, column: 8, scope: !8905)
!8916 = !DILocation(line: 5946, column: 28, scope: !8763)
!8917 = !DILocation(line: 5946, column: 4, scope: !8763)
!8918 = !DILocation(line: 5947, column: 38, scope: !8763)
!8919 = !DILocation(line: 5948, column: 30, scope: !8763)
!8920 = !DILocation(line: 5949, column: 14, scope: !8763)
!8921 = !DILocation(line: 5948, column: 10, scope: !8763)
!8922 = !DILocation(line: 5951, column: 10, scope: !8763)
!8923 = !DILocation(line: 5947, column: 17, scope: !8763)
!8924 = !DILocation(line: 5947, column: 9, scope: !8763)
!8925 = !DILocation(line: 5947, column: 15, scope: !8763)
!8926 = !DILocation(line: 5952, column: 9, scope: !8763)
!8927 = !DILocation(line: 5952, column: 23, scope: !8763)
!8928 = !DILocation(line: 5953, column: 8, scope: !8929)
!8929 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 5953, column: 8)
!8930 = !DILocation(line: 5953, column: 31, scope: !8929)
!8931 = !DILocation(line: 5953, column: 8, scope: !8763)
!8932 = !DILocation(line: 5954, column: 11, scope: !8929)
!8933 = !DILocation(line: 5954, column: 25, scope: !8929)
!8934 = !DILocation(line: 5954, column: 6, scope: !8929)
!8935 = !DILocalVariable(name: "field", scope: !8936, file: !3, line: 5958, type: !2224)
!8936 = distinct !DILexicalBlock(scope: !8929, file: !3, line: 5956, column: 6)
!8937 = !DILocation(line: 5958, column: 13, scope: !8936)
!8938 = !DILocation(line: 5958, column: 21, scope: !8936)
!8939 = !DILocation(line: 5959, column: 12, scope: !8940)
!8940 = distinct !DILexicalBlock(scope: !8936, file: !3, line: 5959, column: 12)
!8941 = !DILocation(line: 5959, column: 30, scope: !8940)
!8942 = !DILocation(line: 5959, column: 12, scope: !8936)
!8943 = !DILocation(line: 5960, column: 8, scope: !8940)
!8944 = !DILocation(line: 5960, column: 22, scope: !8940)
!8945 = !DILocation(line: 5960, column: 3, scope: !8940)
!8946 = !DILocation(line: 5962, column: 24, scope: !8940)
!8947 = !DILocation(line: 5962, column: 8, scope: !8940)
!8948 = !DILocation(line: 5962, column: 22, scope: !8940)
!8949 = !DILocation(line: 5964, column: 4, scope: !8763)
!8950 = !DILocation(line: 5967, column: 28, scope: !8763)
!8951 = !DILocation(line: 5967, column: 4, scope: !8763)
!8952 = !DILocation(line: 5968, column: 46, scope: !8763)
!8953 = !DILocation(line: 5968, column: 11, scope: !8763)
!8954 = !DILocation(line: 5969, column: 33, scope: !8763)
!8955 = !DILocation(line: 5970, column: 37, scope: !8763)
!8956 = !DILocation(line: 5969, column: 17, scope: !8763)
!8957 = !DILocation(line: 5969, column: 9, scope: !8763)
!8958 = !DILocation(line: 5969, column: 15, scope: !8763)
!8959 = !DILocation(line: 5971, column: 9, scope: !8763)
!8960 = !DILocation(line: 5971, column: 23, scope: !8763)
!8961 = !DILocation(line: 5972, column: 9, scope: !8763)
!8962 = !DILocation(line: 5972, column: 23, scope: !8763)
!8963 = !DILocation(line: 5973, column: 4, scope: !8763)
!8964 = !DILocation(line: 5976, column: 28, scope: !8763)
!8965 = !DILocation(line: 5976, column: 4, scope: !8763)
!8966 = !DILocation(line: 5977, column: 46, scope: !8763)
!8967 = !DILocation(line: 5977, column: 11, scope: !8763)
!8968 = !DILocation(line: 5978, column: 33, scope: !8763)
!8969 = !DILocation(line: 5979, column: 37, scope: !8763)
!8970 = !DILocation(line: 5978, column: 17, scope: !8763)
!8971 = !DILocation(line: 5978, column: 9, scope: !8763)
!8972 = !DILocation(line: 5978, column: 15, scope: !8763)
!8973 = !DILocation(line: 5980, column: 9, scope: !8763)
!8974 = !DILocation(line: 5980, column: 23, scope: !8763)
!8975 = !DILocation(line: 5981, column: 9, scope: !8763)
!8976 = !DILocation(line: 5981, column: 23, scope: !8763)
!8977 = !DILocation(line: 5982, column: 4, scope: !8763)
!8978 = !DILocation(line: 5984, column: 11, scope: !8763)
!8979 = !DILocation(line: 5984, column: 4, scope: !8763)
!8980 = distinct !{!8980, !8751, !8981}
!8981 = !DILocation(line: 5986, column: 5, scope: !8732)
!8982 = !DILocation(line: 5987, column: 1, scope: !8732)
!8983 = distinct !DISubprogram(name: "c_parser_peek_2nd_token", scope: !3, file: !3, line: 511, type: !4492, scopeLine: 512, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!8984 = !DILocalVariable(name: "parser", arg: 1, scope: !8983, file: !3, line: 511, type: !3401)
!8985 = !DILocation(line: 511, column: 36, scope: !8983)
!8986 = !DILocation(line: 513, column: 7, scope: !8987)
!8987 = distinct !DILexicalBlock(scope: !8983, file: !3, line: 513, column: 7)
!8988 = !DILocation(line: 513, column: 15, scope: !8987)
!8989 = !DILocation(line: 513, column: 28, scope: !8987)
!8990 = !DILocation(line: 513, column: 7, scope: !8983)
!8991 = !DILocation(line: 514, column: 13, scope: !8987)
!8992 = !DILocation(line: 514, column: 21, scope: !8987)
!8993 = !DILocation(line: 514, column: 5, scope: !8987)
!8994 = !DILocation(line: 515, column: 3, scope: !8983)
!8995 = !DILocation(line: 516, column: 3, scope: !8983)
!8996 = !DILocation(line: 517, column: 3, scope: !8983)
!8997 = !DILocation(line: 518, column: 20, scope: !8983)
!8998 = !DILocation(line: 518, column: 29, scope: !8983)
!8999 = !DILocation(line: 518, column: 37, scope: !8983)
!9000 = !DILocation(line: 518, column: 3, scope: !8983)
!9001 = !DILocation(line: 519, column: 3, scope: !8983)
!9002 = !DILocation(line: 519, column: 11, scope: !8983)
!9003 = !DILocation(line: 519, column: 24, scope: !8983)
!9004 = !DILocation(line: 520, column: 11, scope: !8983)
!9005 = !DILocation(line: 520, column: 19, scope: !8983)
!9006 = !DILocation(line: 520, column: 3, scope: !8983)
!9007 = !DILocation(line: 521, column: 1, scope: !8983)
!9008 = distinct !DISubprogram(name: "c_parser_postfix_expression_after_paren_type", scope: !3, file: !3, line: 5789, type: !9009, scopeLine: 5792, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9009 = !DISubroutineType(types: !9010)
!9010 = !{!2221, !3401, !4278, !2352}
!9011 = !DILocalVariable(name: "parser", arg: 1, scope: !9008, file: !3, line: 5789, type: !3401)
!9012 = !DILocation(line: 5789, column: 57, scope: !9008)
!9013 = !DILocalVariable(name: "type_name", arg: 2, scope: !9008, file: !3, line: 5790, type: !4278)
!9014 = !DILocation(line: 5790, column: 32, scope: !9008)
!9015 = !DILocalVariable(name: "type_loc", arg: 3, scope: !9008, file: !3, line: 5791, type: !2352)
!9016 = !DILocation(line: 5791, column: 23, scope: !9008)
!9017 = !DILocalVariable(name: "type", scope: !9008, file: !3, line: 5793, type: !2224)
!9018 = !DILocation(line: 5793, column: 8, scope: !9008)
!9019 = !DILocalVariable(name: "init", scope: !9008, file: !3, line: 5794, type: !2221)
!9020 = !DILocation(line: 5794, column: 17, scope: !9008)
!9021 = !DILocalVariable(name: "non_const", scope: !9008, file: !3, line: 5795, type: !2344)
!9022 = !DILocation(line: 5795, column: 8, scope: !9008)
!9023 = !DILocalVariable(name: "expr", scope: !9008, file: !3, line: 5796, type: !2221)
!9024 = !DILocation(line: 5796, column: 17, scope: !9008)
!9025 = !DILocalVariable(name: "start_loc", scope: !9008, file: !3, line: 5797, type: !2352)
!9026 = !DILocation(line: 5797, column: 14, scope: !9008)
!9027 = !DILocalVariable(name: "type_expr", scope: !9008, file: !3, line: 5798, type: !2224)
!9028 = !DILocation(line: 5798, column: 8, scope: !9008)
!9029 = !DILocalVariable(name: "type_expr_const", scope: !9008, file: !3, line: 5799, type: !2344)
!9030 = !DILocation(line: 5799, column: 8, scope: !9008)
!9031 = !DILocation(line: 5800, column: 32, scope: !9008)
!9032 = !DILocation(line: 5800, column: 42, scope: !9008)
!9033 = !DILocation(line: 5800, column: 3, scope: !9008)
!9034 = !DILocation(line: 5801, column: 3, scope: !9008)
!9035 = !DILocation(line: 5802, column: 24, scope: !9008)
!9036 = !DILocation(line: 5802, column: 10, scope: !9008)
!9037 = !DILocation(line: 5802, column: 8, scope: !9008)
!9038 = !DILocation(line: 5803, column: 36, scope: !9008)
!9039 = !DILocation(line: 5803, column: 15, scope: !9008)
!9040 = !DILocation(line: 5803, column: 45, scope: !9008)
!9041 = !DILocation(line: 5803, column: 13, scope: !9008)
!9042 = !DILocation(line: 5804, column: 7, scope: !9043)
!9043 = distinct !DILexicalBlock(scope: !9008, file: !3, line: 5804, column: 7)
!9044 = !DILocation(line: 5804, column: 15, scope: !9043)
!9045 = !DILocation(line: 5804, column: 12, scope: !9043)
!9046 = !DILocation(line: 5804, column: 31, scope: !9043)
!9047 = !DILocation(line: 5804, column: 34, scope: !9043)
!9048 = !DILocation(line: 5804, column: 7, scope: !9008)
!9049 = !DILocation(line: 5806, column: 17, scope: !9050)
!9050 = distinct !DILexicalBlock(scope: !9043, file: !3, line: 5805, column: 5)
!9051 = !DILocation(line: 5806, column: 7, scope: !9050)
!9052 = !DILocation(line: 5807, column: 14, scope: !9050)
!9053 = !DILocation(line: 5807, column: 12, scope: !9050)
!9054 = !DILocation(line: 5808, column: 5, scope: !9050)
!9055 = !DILocation(line: 5809, column: 32, scope: !9008)
!9056 = !DILocation(line: 5809, column: 40, scope: !9008)
!9057 = !DILocation(line: 5809, column: 10, scope: !9008)
!9058 = !DILocation(line: 5810, column: 3, scope: !9008)
!9059 = !DILocation(line: 5811, column: 27, scope: !9008)
!9060 = !DILocation(line: 5811, column: 3, scope: !9008)
!9061 = !DILocation(line: 5813, column: 7, scope: !9062)
!9062 = distinct !DILexicalBlock(scope: !9008, file: !3, line: 5813, column: 7)
!9063 = !DILocation(line: 5813, column: 15, scope: !9062)
!9064 = !DILocation(line: 5813, column: 12, scope: !9062)
!9065 = !DILocation(line: 5814, column: 7, scope: !9062)
!9066 = !DILocation(line: 5814, column: 11, scope: !9062)
!9067 = !DILocation(line: 5815, column: 7, scope: !9062)
!9068 = !DILocation(line: 5815, column: 10, scope: !9062)
!9069 = !DILocation(line: 5813, column: 7, scope: !9008)
!9070 = !DILocation(line: 5817, column: 7, scope: !9071)
!9071 = distinct !DILexicalBlock(scope: !9062, file: !3, line: 5816, column: 5)
!9072 = !DILocation(line: 5818, column: 14, scope: !9071)
!9073 = !DILocation(line: 5818, column: 12, scope: !9071)
!9074 = !DILocation(line: 5819, column: 5, scope: !9071)
!9075 = !DILocation(line: 5821, column: 8, scope: !9076)
!9076 = distinct !DILexicalBlock(scope: !9008, file: !3, line: 5821, column: 7)
!9077 = !DILocation(line: 5821, column: 7, scope: !9008)
!9078 = !DILocation(line: 5822, column: 14, scope: !9076)
!9079 = !DILocation(line: 5822, column: 5, scope: !9076)
!9080 = !DILocation(line: 5823, column: 22, scope: !9008)
!9081 = !DILocation(line: 5823, column: 17, scope: !9008)
!9082 = !DILocation(line: 5823, column: 28, scope: !9008)
!9083 = !DILocation(line: 5823, column: 31, scope: !9008)
!9084 = !DILocation(line: 5823, column: 54, scope: !9008)
!9085 = !DILocation(line: 5823, column: 16, scope: !9008)
!9086 = !DILocation(line: 5824, column: 11, scope: !9008)
!9087 = !DILocation(line: 5825, column: 16, scope: !9008)
!9088 = !DILocation(line: 5825, column: 30, scope: !9008)
!9089 = !DILocation(line: 5823, column: 15, scope: !9008)
!9090 = !DILocation(line: 5823, column: 13, scope: !9008)
!9091 = !DILocation(line: 5826, column: 17, scope: !9008)
!9092 = !DILocation(line: 5826, column: 16, scope: !9008)
!9093 = !DILocation(line: 5826, column: 13, scope: !9008)
!9094 = !DILocation(line: 5827, column: 40, scope: !9008)
!9095 = !DILocation(line: 5827, column: 51, scope: !9008)
!9096 = !DILocation(line: 5827, column: 62, scope: !9008)
!9097 = !DILocation(line: 5827, column: 69, scope: !9008)
!9098 = !DILocation(line: 5827, column: 16, scope: !9008)
!9099 = !DILocation(line: 5827, column: 8, scope: !9008)
!9100 = !DILocation(line: 5827, column: 14, scope: !9008)
!9101 = !DILocation(line: 5828, column: 8, scope: !9008)
!9102 = !DILocation(line: 5828, column: 22, scope: !9008)
!9103 = !DILocation(line: 5829, column: 8, scope: !9008)
!9104 = !DILocation(line: 5829, column: 22, scope: !9008)
!9105 = !DILocation(line: 5830, column: 7, scope: !9106)
!9106 = distinct !DILexicalBlock(scope: !9008, file: !3, line: 5830, column: 7)
!9107 = !DILocation(line: 5830, column: 7, scope: !9008)
!9108 = !DILocation(line: 5832, column: 11, scope: !9109)
!9109 = distinct !DILexicalBlock(scope: !9110, file: !3, line: 5832, column: 11)
!9110 = distinct !DILexicalBlock(scope: !9106, file: !3, line: 5831, column: 5)
!9111 = !DILocation(line: 5832, column: 34, scope: !9109)
!9112 = !DILocation(line: 5832, column: 11, scope: !9110)
!9113 = !DILocation(line: 5834, column: 4, scope: !9114)
!9114 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 5833, column: 2)
!9115 = !DILocation(line: 5835, column: 42, scope: !9114)
!9116 = !DILocation(line: 5835, column: 4, scope: !9114)
!9117 = !DILocation(line: 5835, column: 40, scope: !9114)
!9118 = !DILocation(line: 5836, column: 2, scope: !9114)
!9119 = !DILocation(line: 5839, column: 4, scope: !9120)
!9120 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 5838, column: 2)
!9121 = !DILocation(line: 5840, column: 17, scope: !9120)
!9122 = !DILocation(line: 5840, column: 9, scope: !9120)
!9123 = !DILocation(line: 5840, column: 15, scope: !9120)
!9124 = !DILocation(line: 5843, column: 5, scope: !9110)
!9125 = !DILocation(line: 5844, column: 53, scope: !9008)
!9126 = !DILocation(line: 5844, column: 61, scope: !9008)
!9127 = !DILocation(line: 5844, column: 10, scope: !9008)
!9128 = !DILocation(line: 5844, column: 3, scope: !9008)
!9129 = distinct !DISubprogram(name: "c_parser_unary_expression", scope: !3, file: !3, line: 5074, type: !8622, scopeLine: 5075, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9130 = !DILocalVariable(name: "parser", arg: 1, scope: !9129, file: !3, line: 5074, type: !3401)
!9131 = !DILocation(line: 5074, column: 38, scope: !9129)
!9132 = !DILocalVariable(name: "ext", scope: !9129, file: !3, line: 5076, type: !2321)
!9133 = !DILocation(line: 5076, column: 7, scope: !9129)
!9134 = !DILocalVariable(name: "ret", scope: !9129, file: !3, line: 5077, type: !2221)
!9135 = !DILocation(line: 5077, column: 17, scope: !9129)
!9136 = !DILocalVariable(name: "op", scope: !9129, file: !3, line: 5077, type: !2221)
!9137 = !DILocation(line: 5077, column: 22, scope: !9129)
!9138 = !DILocalVariable(name: "op_loc", scope: !9129, file: !3, line: 5078, type: !2352)
!9139 = !DILocation(line: 5078, column: 14, scope: !9129)
!9140 = !DILocation(line: 5078, column: 44, scope: !9129)
!9141 = !DILocation(line: 5078, column: 23, scope: !9129)
!9142 = !DILocation(line: 5078, column: 53, scope: !9129)
!9143 = !DILocalVariable(name: "exp_loc", scope: !9129, file: !3, line: 5079, type: !2352)
!9144 = !DILocation(line: 5079, column: 14, scope: !9129)
!9145 = !DILocation(line: 5080, column: 7, scope: !9129)
!9146 = !DILocation(line: 5080, column: 21, scope: !9129)
!9147 = !DILocation(line: 5081, column: 7, scope: !9129)
!9148 = !DILocation(line: 5081, column: 21, scope: !9129)
!9149 = !DILocation(line: 5082, column: 32, scope: !9129)
!9150 = !DILocation(line: 5082, column: 11, scope: !9129)
!9151 = !DILocation(line: 5082, column: 41, scope: !9129)
!9152 = !DILocation(line: 5082, column: 3, scope: !9129)
!9153 = !DILocation(line: 5085, column: 31, scope: !9154)
!9154 = distinct !DILexicalBlock(scope: !9129, file: !3, line: 5083, column: 5)
!9155 = !DILocation(line: 5085, column: 7, scope: !9154)
!9156 = !DILocation(line: 5086, column: 38, scope: !9154)
!9157 = !DILocation(line: 5086, column: 17, scope: !9154)
!9158 = !DILocation(line: 5086, column: 47, scope: !9154)
!9159 = !DILocation(line: 5086, column: 15, scope: !9154)
!9160 = !DILocation(line: 5087, column: 38, scope: !9154)
!9161 = !DILocation(line: 5087, column: 12, scope: !9154)
!9162 = !DILocation(line: 5088, column: 47, scope: !9154)
!9163 = !DILocation(line: 5088, column: 12, scope: !9154)
!9164 = !DILocation(line: 5089, column: 37, scope: !9154)
!9165 = !DILocation(line: 5089, column: 14, scope: !9154)
!9166 = !DILocation(line: 5089, column: 7, scope: !9154)
!9167 = !DILocation(line: 5091, column: 31, scope: !9154)
!9168 = !DILocation(line: 5091, column: 7, scope: !9154)
!9169 = !DILocation(line: 5092, column: 38, scope: !9154)
!9170 = !DILocation(line: 5092, column: 17, scope: !9154)
!9171 = !DILocation(line: 5092, column: 47, scope: !9154)
!9172 = !DILocation(line: 5092, column: 15, scope: !9154)
!9173 = !DILocation(line: 5093, column: 38, scope: !9154)
!9174 = !DILocation(line: 5093, column: 12, scope: !9154)
!9175 = !DILocation(line: 5094, column: 47, scope: !9154)
!9176 = !DILocation(line: 5094, column: 12, scope: !9154)
!9177 = !DILocation(line: 5095, column: 37, scope: !9154)
!9178 = !DILocation(line: 5095, column: 14, scope: !9154)
!9179 = !DILocation(line: 5095, column: 7, scope: !9154)
!9180 = !DILocation(line: 5097, column: 31, scope: !9154)
!9181 = !DILocation(line: 5097, column: 7, scope: !9154)
!9182 = !DILocation(line: 5098, column: 37, scope: !9154)
!9183 = !DILocation(line: 5099, column: 35, scope: !9154)
!9184 = !DILocation(line: 5099, column: 9, scope: !9154)
!9185 = !DILocation(line: 5098, column: 14, scope: !9154)
!9186 = !DILocation(line: 5098, column: 7, scope: !9154)
!9187 = !DILocation(line: 5101, column: 31, scope: !9154)
!9188 = !DILocation(line: 5101, column: 7, scope: !9154)
!9189 = !DILocation(line: 5102, column: 38, scope: !9154)
!9190 = !DILocation(line: 5102, column: 17, scope: !9154)
!9191 = !DILocation(line: 5102, column: 47, scope: !9154)
!9192 = !DILocation(line: 5102, column: 15, scope: !9154)
!9193 = !DILocation(line: 5103, column: 38, scope: !9154)
!9194 = !DILocation(line: 5103, column: 12, scope: !9154)
!9195 = !DILocation(line: 5104, column: 47, scope: !9154)
!9196 = !DILocation(line: 5104, column: 12, scope: !9154)
!9197 = !DILocation(line: 5105, column: 39, scope: !9154)
!9198 = !DILocation(line: 5105, column: 50, scope: !9154)
!9199 = !DILocation(line: 5105, column: 19, scope: !9154)
!9200 = !DILocation(line: 5105, column: 11, scope: !9154)
!9201 = !DILocation(line: 5105, column: 17, scope: !9154)
!9202 = !DILocation(line: 5106, column: 14, scope: !9154)
!9203 = !DILocation(line: 5106, column: 7, scope: !9154)
!9204 = !DILocation(line: 5108, column: 12, scope: !9205)
!9205 = distinct !DILexicalBlock(scope: !9154, file: !3, line: 5108, column: 11)
!9206 = !DILocation(line: 5108, column: 30, scope: !9205)
!9207 = !DILocation(line: 5108, column: 34, scope: !9205)
!9208 = !DILocation(line: 5108, column: 11, scope: !9154)
!9209 = !DILocation(line: 5109, column: 14, scope: !9205)
!9210 = !DILocation(line: 5109, column: 2, scope: !9205)
!9211 = !DILocation(line: 5112, column: 31, scope: !9154)
!9212 = !DILocation(line: 5112, column: 7, scope: !9154)
!9213 = !DILocation(line: 5113, column: 38, scope: !9154)
!9214 = !DILocation(line: 5113, column: 17, scope: !9154)
!9215 = !DILocation(line: 5113, column: 47, scope: !9154)
!9216 = !DILocation(line: 5113, column: 15, scope: !9154)
!9217 = !DILocation(line: 5114, column: 38, scope: !9154)
!9218 = !DILocation(line: 5114, column: 12, scope: !9154)
!9219 = !DILocation(line: 5115, column: 47, scope: !9154)
!9220 = !DILocation(line: 5115, column: 12, scope: !9154)
!9221 = !DILocation(line: 5116, column: 37, scope: !9154)
!9222 = !DILocation(line: 5116, column: 14, scope: !9154)
!9223 = !DILocation(line: 5116, column: 7, scope: !9154)
!9224 = !DILocation(line: 5118, column: 31, scope: !9154)
!9225 = !DILocation(line: 5118, column: 7, scope: !9154)
!9226 = !DILocation(line: 5119, column: 38, scope: !9154)
!9227 = !DILocation(line: 5119, column: 17, scope: !9154)
!9228 = !DILocation(line: 5119, column: 47, scope: !9154)
!9229 = !DILocation(line: 5119, column: 15, scope: !9154)
!9230 = !DILocation(line: 5120, column: 38, scope: !9154)
!9231 = !DILocation(line: 5120, column: 12, scope: !9154)
!9232 = !DILocation(line: 5121, column: 47, scope: !9154)
!9233 = !DILocation(line: 5121, column: 12, scope: !9154)
!9234 = !DILocation(line: 5122, column: 37, scope: !9154)
!9235 = !DILocation(line: 5122, column: 14, scope: !9154)
!9236 = !DILocation(line: 5122, column: 7, scope: !9154)
!9237 = !DILocation(line: 5124, column: 31, scope: !9154)
!9238 = !DILocation(line: 5124, column: 7, scope: !9154)
!9239 = !DILocation(line: 5125, column: 38, scope: !9154)
!9240 = !DILocation(line: 5125, column: 17, scope: !9154)
!9241 = !DILocation(line: 5125, column: 47, scope: !9154)
!9242 = !DILocation(line: 5125, column: 15, scope: !9154)
!9243 = !DILocation(line: 5126, column: 38, scope: !9154)
!9244 = !DILocation(line: 5126, column: 12, scope: !9154)
!9245 = !DILocation(line: 5127, column: 47, scope: !9154)
!9246 = !DILocation(line: 5127, column: 12, scope: !9154)
!9247 = !DILocation(line: 5128, column: 37, scope: !9154)
!9248 = !DILocation(line: 5128, column: 14, scope: !9154)
!9249 = !DILocation(line: 5128, column: 7, scope: !9154)
!9250 = !DILocation(line: 5130, column: 31, scope: !9154)
!9251 = !DILocation(line: 5130, column: 7, scope: !9154)
!9252 = !DILocation(line: 5131, column: 38, scope: !9154)
!9253 = !DILocation(line: 5131, column: 17, scope: !9154)
!9254 = !DILocation(line: 5131, column: 47, scope: !9154)
!9255 = !DILocation(line: 5131, column: 15, scope: !9154)
!9256 = !DILocation(line: 5132, column: 38, scope: !9154)
!9257 = !DILocation(line: 5132, column: 12, scope: !9154)
!9258 = !DILocation(line: 5133, column: 47, scope: !9154)
!9259 = !DILocation(line: 5133, column: 12, scope: !9154)
!9260 = !DILocation(line: 5134, column: 37, scope: !9154)
!9261 = !DILocation(line: 5134, column: 14, scope: !9154)
!9262 = !DILocation(line: 5134, column: 7, scope: !9154)
!9263 = !DILocation(line: 5137, column: 31, scope: !9154)
!9264 = !DILocation(line: 5137, column: 7, scope: !9154)
!9265 = !DILocation(line: 5138, column: 35, scope: !9266)
!9266 = distinct !DILexicalBlock(scope: !9154, file: !3, line: 5138, column: 11)
!9267 = !DILocation(line: 5138, column: 11, scope: !9266)
!9268 = !DILocation(line: 5138, column: 11, scope: !9154)
!9269 = !DILocation(line: 5141, column: 28, scope: !9270)
!9270 = distinct !DILexicalBlock(scope: !9266, file: !3, line: 5139, column: 2)
!9271 = !DILocation(line: 5141, column: 7, scope: !9270)
!9272 = !DILocation(line: 5141, column: 37, scope: !9270)
!9273 = !DILocation(line: 5141, column: 44, scope: !9270)
!9274 = !DILocation(line: 5140, column: 16, scope: !9270)
!9275 = !DILocation(line: 5140, column: 8, scope: !9270)
!9276 = !DILocation(line: 5140, column: 14, scope: !9270)
!9277 = !DILocation(line: 5142, column: 28, scope: !9270)
!9278 = !DILocation(line: 5142, column: 4, scope: !9270)
!9279 = !DILocation(line: 5143, column: 2, scope: !9270)
!9280 = !DILocation(line: 5146, column: 20, scope: !9281)
!9281 = distinct !DILexicalBlock(scope: !9266, file: !3, line: 5145, column: 2)
!9282 = !DILocation(line: 5146, column: 4, scope: !9281)
!9283 = !DILocation(line: 5147, column: 16, scope: !9281)
!9284 = !DILocation(line: 5147, column: 8, scope: !9281)
!9285 = !DILocation(line: 5147, column: 14, scope: !9281)
!9286 = !DILocation(line: 5149, column: 9, scope: !9154)
!9287 = !DILocation(line: 5149, column: 2, scope: !9154)
!9288 = !DILocation(line: 5151, column: 36, scope: !9154)
!9289 = !DILocation(line: 5151, column: 15, scope: !9154)
!9290 = !DILocation(line: 5151, column: 45, scope: !9154)
!9291 = !DILocation(line: 5151, column: 7, scope: !9154)
!9292 = !DILocation(line: 5154, column: 39, scope: !9293)
!9293 = distinct !DILexicalBlock(scope: !9154, file: !3, line: 5152, column: 2)
!9294 = !DILocation(line: 5154, column: 11, scope: !9293)
!9295 = !DILocation(line: 5154, column: 4, scope: !9293)
!9296 = !DILocation(line: 5156, column: 40, scope: !9293)
!9297 = !DILocation(line: 5156, column: 11, scope: !9293)
!9298 = !DILocation(line: 5156, column: 4, scope: !9293)
!9299 = !DILocation(line: 5158, column: 28, scope: !9293)
!9300 = !DILocation(line: 5158, column: 4, scope: !9293)
!9301 = !DILocation(line: 5159, column: 10, scope: !9293)
!9302 = !DILocation(line: 5159, column: 8, scope: !9293)
!9303 = !DILocation(line: 5160, column: 36, scope: !9293)
!9304 = !DILocation(line: 5160, column: 10, scope: !9293)
!9305 = !DILocation(line: 5161, column: 35, scope: !9293)
!9306 = !DILocation(line: 5161, column: 4, scope: !9293)
!9307 = !DILocation(line: 5162, column: 11, scope: !9293)
!9308 = !DILocation(line: 5162, column: 4, scope: !9293)
!9309 = !DILocation(line: 5164, column: 28, scope: !9293)
!9310 = !DILocation(line: 5164, column: 4, scope: !9293)
!9311 = !DILocation(line: 5165, column: 35, scope: !9293)
!9312 = !DILocation(line: 5165, column: 14, scope: !9293)
!9313 = !DILocation(line: 5165, column: 44, scope: !9293)
!9314 = !DILocation(line: 5165, column: 12, scope: !9293)
!9315 = !DILocation(line: 5166, column: 35, scope: !9293)
!9316 = !DILocation(line: 5166, column: 9, scope: !9293)
!9317 = !DILocation(line: 5167, column: 44, scope: !9293)
!9318 = !DILocation(line: 5167, column: 9, scope: !9293)
!9319 = !DILocation(line: 5168, column: 34, scope: !9293)
!9320 = !DILocation(line: 5168, column: 11, scope: !9293)
!9321 = !DILocation(line: 5168, column: 4, scope: !9293)
!9322 = !DILocation(line: 5170, column: 28, scope: !9293)
!9323 = !DILocation(line: 5170, column: 4, scope: !9293)
!9324 = !DILocation(line: 5171, column: 35, scope: !9293)
!9325 = !DILocation(line: 5171, column: 14, scope: !9293)
!9326 = !DILocation(line: 5171, column: 44, scope: !9293)
!9327 = !DILocation(line: 5171, column: 12, scope: !9293)
!9328 = !DILocation(line: 5172, column: 35, scope: !9293)
!9329 = !DILocation(line: 5172, column: 9, scope: !9293)
!9330 = !DILocation(line: 5173, column: 44, scope: !9293)
!9331 = !DILocation(line: 5173, column: 9, scope: !9293)
!9332 = !DILocation(line: 5174, column: 34, scope: !9293)
!9333 = !DILocation(line: 5174, column: 11, scope: !9293)
!9334 = !DILocation(line: 5174, column: 4, scope: !9293)
!9335 = !DILocation(line: 5176, column: 40, scope: !9293)
!9336 = !DILocation(line: 5176, column: 11, scope: !9293)
!9337 = !DILocation(line: 5176, column: 4, scope: !9293)
!9338 = !DILocation(line: 5179, column: 43, scope: !9154)
!9339 = !DILocation(line: 5179, column: 14, scope: !9154)
!9340 = !DILocation(line: 5179, column: 7, scope: !9154)
!9341 = !DILocation(line: 5181, column: 1, scope: !9129)
!9342 = distinct !DISubprogram(name: "c_parser_expression", scope: !3, file: !3, line: 5997, type: !8622, scopeLine: 5998, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9343 = !DILocalVariable(name: "parser", arg: 1, scope: !9342, file: !3, line: 5997, type: !3401)
!9344 = !DILocation(line: 5997, column: 32, scope: !9342)
!9345 = !DILocalVariable(name: "expr", scope: !9342, file: !3, line: 5999, type: !2221)
!9346 = !DILocation(line: 5999, column: 17, scope: !9342)
!9347 = !DILocation(line: 6000, column: 35, scope: !9342)
!9348 = !DILocation(line: 6000, column: 10, scope: !9342)
!9349 = !DILocation(line: 6001, column: 3, scope: !9342)
!9350 = !DILocation(line: 6001, column: 34, scope: !9342)
!9351 = !DILocation(line: 6001, column: 10, scope: !9342)
!9352 = !DILocalVariable(name: "next", scope: !9353, file: !3, line: 6003, type: !2221)
!9353 = distinct !DILexicalBlock(scope: !9342, file: !3, line: 6002, column: 5)
!9354 = !DILocation(line: 6003, column: 21, scope: !9353)
!9355 = !DILocalVariable(name: "loc", scope: !9353, file: !3, line: 6004, type: !2352)
!9356 = !DILocation(line: 6004, column: 18, scope: !9353)
!9357 = !DILocation(line: 6004, column: 45, scope: !9353)
!9358 = !DILocation(line: 6004, column: 24, scope: !9353)
!9359 = !DILocation(line: 6004, column: 54, scope: !9353)
!9360 = !DILocalVariable(name: "expr_loc", scope: !9353, file: !3, line: 6005, type: !2352)
!9361 = !DILocation(line: 6005, column: 18, scope: !9353)
!9362 = !DILocation(line: 6006, column: 31, scope: !9353)
!9363 = !DILocation(line: 6006, column: 7, scope: !9353)
!9364 = !DILocation(line: 6007, column: 39, scope: !9353)
!9365 = !DILocation(line: 6007, column: 18, scope: !9353)
!9366 = !DILocation(line: 6007, column: 48, scope: !9353)
!9367 = !DILocation(line: 6007, column: 16, scope: !9353)
!9368 = !DILocation(line: 6008, column: 39, scope: !9353)
!9369 = !DILocation(line: 6008, column: 14, scope: !9353)
!9370 = !DILocation(line: 6009, column: 49, scope: !9353)
!9371 = !DILocation(line: 6009, column: 14, scope: !9353)
!9372 = !DILocation(line: 6010, column: 41, scope: !9353)
!9373 = !DILocation(line: 6010, column: 51, scope: !9353)
!9374 = !DILocation(line: 6010, column: 63, scope: !9353)
!9375 = !DILocation(line: 6010, column: 20, scope: !9353)
!9376 = !DILocation(line: 6010, column: 12, scope: !9353)
!9377 = !DILocation(line: 6010, column: 18, scope: !9353)
!9378 = !DILocation(line: 6011, column: 12, scope: !9353)
!9379 = !DILocation(line: 6011, column: 26, scope: !9353)
!9380 = !DILocation(line: 6012, column: 33, scope: !9353)
!9381 = !DILocation(line: 6012, column: 12, scope: !9353)
!9382 = !DILocation(line: 6012, column: 26, scope: !9353)
!9383 = distinct !{!9383, !9349, !9384}
!9384 = !DILocation(line: 6013, column: 5, scope: !9342)
!9385 = !DILocation(line: 6014, column: 3, scope: !9342)
!9386 = distinct !DISubprogram(name: "c_parser_expr_list", scope: !3, file: !3, line: 6039, type: !9387, scopeLine: 6041, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9387 = !DISubroutineType(types: !9388)
!9388 = !{!2892, !3401, !2344, !2344, !9389}
!9389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2892, size: 64)
!9390 = !DILocalVariable(name: "parser", arg: 1, scope: !9386, file: !3, line: 6039, type: !3401)
!9391 = !DILocation(line: 6039, column: 31, scope: !9386)
!9392 = !DILocalVariable(name: "convert_p", arg: 2, scope: !9386, file: !3, line: 6039, type: !2344)
!9393 = !DILocation(line: 6039, column: 44, scope: !9386)
!9394 = !DILocalVariable(name: "fold_p", arg: 3, scope: !9386, file: !3, line: 6039, type: !2344)
!9395 = !DILocation(line: 6039, column: 60, scope: !9386)
!9396 = !DILocalVariable(name: "p_orig_types", arg: 4, scope: !9386, file: !3, line: 6040, type: !9389)
!9397 = !DILocation(line: 6040, column: 22, scope: !9386)
!9398 = !DILocalVariable(name: "ret", scope: !9386, file: !3, line: 6042, type: !2892)
!9399 = !DILocation(line: 6042, column: 17, scope: !9386)
!9400 = !DILocalVariable(name: "orig_types", scope: !9386, file: !3, line: 6043, type: !2892)
!9401 = !DILocation(line: 6043, column: 17, scope: !9386)
!9402 = !DILocalVariable(name: "expr", scope: !9386, file: !3, line: 6044, type: !2221)
!9403 = !DILocation(line: 6044, column: 17, scope: !9386)
!9404 = !DILocalVariable(name: "loc", scope: !9386, file: !3, line: 6045, type: !2352)
!9405 = !DILocation(line: 6045, column: 14, scope: !9386)
!9406 = !DILocation(line: 6045, column: 41, scope: !9386)
!9407 = !DILocation(line: 6045, column: 20, scope: !9386)
!9408 = !DILocation(line: 6045, column: 50, scope: !9386)
!9409 = !DILocation(line: 6047, column: 9, scope: !9386)
!9410 = !DILocation(line: 6047, column: 7, scope: !9386)
!9411 = !DILocation(line: 6048, column: 7, scope: !9412)
!9412 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 6048, column: 7)
!9413 = !DILocation(line: 6048, column: 20, scope: !9412)
!9414 = !DILocation(line: 6048, column: 7, scope: !9386)
!9415 = !DILocation(line: 6049, column: 16, scope: !9412)
!9416 = !DILocation(line: 6049, column: 5, scope: !9412)
!9417 = !DILocation(line: 6051, column: 18, scope: !9412)
!9418 = !DILocation(line: 6051, column: 16, scope: !9412)
!9419 = !DILocation(line: 6053, column: 35, scope: !9386)
!9420 = !DILocation(line: 6053, column: 10, scope: !9386)
!9421 = !DILocation(line: 6054, column: 7, scope: !9422)
!9422 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 6054, column: 7)
!9423 = !DILocation(line: 6054, column: 7, scope: !9386)
!9424 = !DILocation(line: 6055, column: 47, scope: !9422)
!9425 = !DILocation(line: 6055, column: 12, scope: !9422)
!9426 = !DILocation(line: 6055, column: 5, scope: !9422)
!9427 = !DILocation(line: 6056, column: 7, scope: !9428)
!9428 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 6056, column: 7)
!9429 = !DILocation(line: 6056, column: 7, scope: !9386)
!9430 = !DILocation(line: 6057, column: 37, scope: !9428)
!9431 = !DILocation(line: 6057, column: 18, scope: !9428)
!9432 = !DILocation(line: 6057, column: 10, scope: !9428)
!9433 = !DILocation(line: 6057, column: 16, scope: !9428)
!9434 = !DILocation(line: 6057, column: 5, scope: !9428)
!9435 = !DILocation(line: 6058, column: 3, scope: !9386)
!9436 = !DILocation(line: 6059, column: 7, scope: !9437)
!9437 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 6059, column: 7)
!9438 = !DILocation(line: 6059, column: 18, scope: !9437)
!9439 = !DILocation(line: 6059, column: 7, scope: !9386)
!9440 = !DILocation(line: 6060, column: 5, scope: !9437)
!9441 = !DILocation(line: 6061, column: 3, scope: !9386)
!9442 = !DILocation(line: 6061, column: 34, scope: !9386)
!9443 = !DILocation(line: 6061, column: 10, scope: !9386)
!9444 = !DILocation(line: 6063, column: 31, scope: !9445)
!9445 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 6062, column: 5)
!9446 = !DILocation(line: 6063, column: 7, scope: !9445)
!9447 = !DILocation(line: 6064, column: 34, scope: !9445)
!9448 = !DILocation(line: 6064, column: 13, scope: !9445)
!9449 = !DILocation(line: 6064, column: 43, scope: !9445)
!9450 = !DILocation(line: 6064, column: 11, scope: !9445)
!9451 = !DILocation(line: 6065, column: 39, scope: !9445)
!9452 = !DILocation(line: 6065, column: 14, scope: !9445)
!9453 = !DILocation(line: 6066, column: 11, scope: !9454)
!9454 = distinct !DILexicalBlock(scope: !9445, file: !3, line: 6066, column: 11)
!9455 = !DILocation(line: 6066, column: 11, scope: !9445)
!9456 = !DILocation(line: 6067, column: 44, scope: !9454)
!9457 = !DILocation(line: 6067, column: 9, scope: !9454)
!9458 = !DILocation(line: 6067, column: 2, scope: !9454)
!9459 = !DILocation(line: 6068, column: 11, scope: !9460)
!9460 = distinct !DILexicalBlock(scope: !9445, file: !3, line: 6068, column: 11)
!9461 = !DILocation(line: 6068, column: 11, scope: !9445)
!9462 = !DILocation(line: 6069, column: 34, scope: !9460)
!9463 = !DILocation(line: 6069, column: 15, scope: !9460)
!9464 = !DILocation(line: 6069, column: 7, scope: !9460)
!9465 = !DILocation(line: 6069, column: 13, scope: !9460)
!9466 = !DILocation(line: 6069, column: 2, scope: !9460)
!9467 = !DILocation(line: 6070, column: 7, scope: !9445)
!9468 = !DILocation(line: 6071, column: 11, scope: !9469)
!9469 = distinct !DILexicalBlock(scope: !9445, file: !3, line: 6071, column: 11)
!9470 = !DILocation(line: 6071, column: 22, scope: !9469)
!9471 = !DILocation(line: 6071, column: 11, scope: !9445)
!9472 = !DILocation(line: 6072, column: 2, scope: !9469)
!9473 = distinct !{!9473, !9441, !9474}
!9474 = !DILocation(line: 6073, column: 5, scope: !9386)
!9475 = !DILocation(line: 6074, column: 7, scope: !9476)
!9476 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 6074, column: 7)
!9477 = !DILocation(line: 6074, column: 18, scope: !9476)
!9478 = !DILocation(line: 6074, column: 7, scope: !9386)
!9479 = !DILocation(line: 6075, column: 21, scope: !9476)
!9480 = !DILocation(line: 6075, column: 6, scope: !9476)
!9481 = !DILocation(line: 6075, column: 19, scope: !9476)
!9482 = !DILocation(line: 6075, column: 5, scope: !9476)
!9483 = !DILocation(line: 6076, column: 10, scope: !9386)
!9484 = !DILocation(line: 6076, column: 3, scope: !9386)
!9485 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !158, file: !158, line: 182, type: !9486, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9486 = !DISubroutineType(types: !9487)
!9487 = !{!3129, !9488, !2224}
!9488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2897, size: 64)
!9489 = !DILocalVariable(name: "vec_", arg: 1, scope: !9485, file: !158, line: 182, type: !9488)
!9490 = !DILocation(line: 182, column: 1, scope: !9485)
!9491 = !DILocalVariable(name: "obj_", arg: 2, scope: !9485, file: !158, line: 182, type: !2224)
!9492 = !DILocalVariable(name: "slot_", scope: !9485, file: !158, line: 182, type: !3129)
!9493 = distinct !DISubprogram(name: "VEC_tree_gc_safe_push", scope: !158, file: !158, line: 183, type: !9494, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9494 = !DISubroutineType(types: !9495)
!9495 = !{!3129, !9389, !2224}
!9496 = !DILocalVariable(name: "vec_", arg: 1, scope: !9493, file: !158, line: 183, type: !9389)
!9497 = !DILocation(line: 183, column: 1, scope: !9493)
!9498 = !DILocalVariable(name: "obj_", arg: 2, scope: !9493, file: !158, line: 183, type: !2224)
!9499 = distinct !DISubprogram(name: "VEC_tree_gc_reserve", scope: !158, file: !158, line: 183, type: !9500, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9500 = !DISubroutineType(types: !9501)
!9501 = !{!2321, !9389, !2321}
!9502 = !DILocalVariable(name: "vec_", arg: 1, scope: !9499, file: !158, line: 183, type: !9389)
!9503 = !DILocation(line: 183, column: 1, scope: !9499)
!9504 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9499, file: !158, line: 183, type: !2321)
!9505 = !DILocalVariable(name: "extend", scope: !9499, file: !158, line: 183, type: !2321)
!9506 = !DILocation(line: 183, column: 1, scope: !9507)
!9507 = distinct !DILexicalBlock(scope: !9499, file: !158, line: 183, column: 1)
!9508 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !158, file: !158, line: 182, type: !9509, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9509 = !DISubroutineType(types: !9510)
!9510 = !{!2321, !9488, !2321}
!9511 = !DILocalVariable(name: "vec_", arg: 1, scope: !9508, file: !158, line: 182, type: !9488)
!9512 = !DILocation(line: 182, column: 1, scope: !9508)
!9513 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9508, file: !158, line: 182, type: !2321)
!9514 = distinct !DISubprogram(name: "c_parser_braced_init", scope: !3, file: !3, line: 3088, type: !9515, scopeLine: 3089, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9515 = !DISubroutineType(types: !9516)
!9516 = !{!2221, !3401, !2224, !2344}
!9517 = !DILocalVariable(name: "parser", arg: 1, scope: !9514, file: !3, line: 3088, type: !3401)
!9518 = !DILocation(line: 3088, column: 33, scope: !9514)
!9519 = !DILocalVariable(name: "type", arg: 2, scope: !9514, file: !3, line: 3088, type: !2224)
!9520 = !DILocation(line: 3088, column: 46, scope: !9514)
!9521 = !DILocalVariable(name: "nested_p", arg: 3, scope: !9514, file: !3, line: 3088, type: !2344)
!9522 = !DILocation(line: 3088, column: 57, scope: !9514)
!9523 = !DILocalVariable(name: "brace_loc", scope: !9514, file: !3, line: 3090, type: !2352)
!9524 = !DILocation(line: 3090, column: 14, scope: !9514)
!9525 = !DILocation(line: 3090, column: 47, scope: !9514)
!9526 = !DILocation(line: 3090, column: 26, scope: !9514)
!9527 = !DILocation(line: 3090, column: 56, scope: !9514)
!9528 = !DILocation(line: 3091, column: 3, scope: !9514)
!9529 = !DILocation(line: 3092, column: 27, scope: !9514)
!9530 = !DILocation(line: 3092, column: 3, scope: !9514)
!9531 = !DILocation(line: 3093, column: 7, scope: !9532)
!9532 = distinct !DILexicalBlock(scope: !9514, file: !3, line: 3093, column: 7)
!9533 = !DILocation(line: 3093, column: 7, scope: !9514)
!9534 = !DILocation(line: 3094, column: 5, scope: !9532)
!9535 = !DILocation(line: 3096, column: 36, scope: !9532)
!9536 = !DILocation(line: 3096, column: 5, scope: !9532)
!9537 = !DILocation(line: 3097, column: 31, scope: !9538)
!9538 = distinct !DILexicalBlock(scope: !9514, file: !3, line: 3097, column: 7)
!9539 = !DILocation(line: 3097, column: 7, scope: !9538)
!9540 = !DILocation(line: 3097, column: 7, scope: !9514)
!9541 = !DILocation(line: 3099, column: 16, scope: !9542)
!9542 = distinct !DILexicalBlock(scope: !9538, file: !3, line: 3098, column: 5)
!9543 = !DILocation(line: 3099, column: 7, scope: !9542)
!9544 = !DILocation(line: 3100, column: 5, scope: !9542)
!9545 = !DILocation(line: 3105, column: 7, scope: !9546)
!9546 = distinct !DILexicalBlock(scope: !9538, file: !3, line: 3102, column: 5)
!9547 = !DILocation(line: 3107, column: 22, scope: !9548)
!9548 = distinct !DILexicalBlock(scope: !9546, file: !3, line: 3106, column: 2)
!9549 = !DILocation(line: 3107, column: 4, scope: !9548)
!9550 = !DILocation(line: 3108, column: 8, scope: !9551)
!9551 = distinct !DILexicalBlock(scope: !9548, file: !3, line: 3108, column: 8)
!9552 = !DILocation(line: 3108, column: 16, scope: !9551)
!9553 = !DILocation(line: 3108, column: 8, scope: !9548)
!9554 = !DILocation(line: 3109, column: 6, scope: !9551)
!9555 = !DILocation(line: 3110, column: 32, scope: !9556)
!9556 = distinct !DILexicalBlock(scope: !9548, file: !3, line: 3110, column: 8)
!9557 = !DILocation(line: 3110, column: 8, scope: !9556)
!9558 = !DILocation(line: 3110, column: 8, scope: !9548)
!9559 = !DILocation(line: 3111, column: 30, scope: !9556)
!9560 = !DILocation(line: 3111, column: 6, scope: !9556)
!9561 = !DILocation(line: 3113, column: 6, scope: !9556)
!9562 = !DILocation(line: 3114, column: 32, scope: !9563)
!9563 = distinct !DILexicalBlock(scope: !9548, file: !3, line: 3114, column: 8)
!9564 = !DILocation(line: 3114, column: 8, scope: !9563)
!9565 = !DILocation(line: 3114, column: 8, scope: !9548)
!9566 = !DILocation(line: 3115, column: 6, scope: !9563)
!9567 = distinct !{!9567, !9545, !9568}
!9568 = !DILocation(line: 3116, column: 2, scope: !9546)
!9569 = !DILocation(line: 3118, column: 35, scope: !9570)
!9570 = distinct !DILexicalBlock(scope: !9514, file: !3, line: 3118, column: 7)
!9571 = !DILocation(line: 3118, column: 7, scope: !9570)
!9572 = !DILocation(line: 3118, column: 7, scope: !9514)
!9573 = !DILocalVariable(name: "ret", scope: !9574, file: !3, line: 3120, type: !2221)
!9574 = distinct !DILexicalBlock(scope: !9570, file: !3, line: 3119, column: 5)
!9575 = !DILocation(line: 3120, column: 21, scope: !9574)
!9576 = !DILocation(line: 3121, column: 19, scope: !9574)
!9577 = !DILocation(line: 3121, column: 11, scope: !9574)
!9578 = !DILocation(line: 3121, column: 17, scope: !9574)
!9579 = !DILocation(line: 3122, column: 11, scope: !9574)
!9580 = !DILocation(line: 3122, column: 25, scope: !9574)
!9581 = !DILocation(line: 3123, column: 11, scope: !9574)
!9582 = !DILocation(line: 3123, column: 25, scope: !9574)
!9583 = !DILocation(line: 3124, column: 34, scope: !9574)
!9584 = !DILocation(line: 3124, column: 7, scope: !9574)
!9585 = !DILocation(line: 3125, column: 7, scope: !9574)
!9586 = !DILocation(line: 3126, column: 7, scope: !9574)
!9587 = !DILocation(line: 3128, column: 27, scope: !9514)
!9588 = !DILocation(line: 3128, column: 3, scope: !9514)
!9589 = !DILocation(line: 3129, column: 10, scope: !9514)
!9590 = !DILocation(line: 3129, column: 3, scope: !9514)
!9591 = !DILocation(line: 3130, column: 1, scope: !9514)
!9592 = distinct !DISubprogram(name: "c_parser_initelt", scope: !3, file: !3, line: 3135, type: !4514, scopeLine: 3136, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9593 = !DILocalVariable(name: "parser", arg: 1, scope: !9592, file: !3, line: 3135, type: !3401)
!9594 = !DILocation(line: 3135, column: 29, scope: !9592)
!9595 = !DILocation(line: 3140, column: 31, scope: !9596)
!9596 = distinct !DILexicalBlock(scope: !9592, file: !3, line: 3140, column: 7)
!9597 = !DILocation(line: 3140, column: 7, scope: !9596)
!9598 = !DILocation(line: 3141, column: 7, scope: !9596)
!9599 = !DILocation(line: 3141, column: 35, scope: !9596)
!9600 = !DILocation(line: 3141, column: 10, scope: !9596)
!9601 = !DILocation(line: 3141, column: 44, scope: !9596)
!9602 = !DILocation(line: 3141, column: 49, scope: !9596)
!9603 = !DILocation(line: 3140, column: 7, scope: !9592)
!9604 = !DILocation(line: 3144, column: 44, scope: !9605)
!9605 = distinct !DILexicalBlock(scope: !9596, file: !3, line: 3142, column: 5)
!9606 = !DILocation(line: 3144, column: 23, scope: !9605)
!9607 = !DILocation(line: 3144, column: 53, scope: !9605)
!9608 = !DILocation(line: 3144, column: 7, scope: !9605)
!9609 = !DILocation(line: 3146, column: 41, scope: !9605)
!9610 = !DILocation(line: 3146, column: 16, scope: !9605)
!9611 = !DILocation(line: 3146, column: 50, scope: !9605)
!9612 = !DILocation(line: 3146, column: 7, scope: !9605)
!9613 = !DILocation(line: 3148, column: 31, scope: !9605)
!9614 = !DILocation(line: 3148, column: 7, scope: !9605)
!9615 = !DILocation(line: 3149, column: 31, scope: !9605)
!9616 = !DILocation(line: 3149, column: 7, scope: !9605)
!9617 = !DILocation(line: 3150, column: 5, scope: !9605)
!9618 = !DILocalVariable(name: "des_seen", scope: !9619, file: !3, line: 3155, type: !2321)
!9619 = distinct !DILexicalBlock(scope: !9596, file: !3, line: 3152, column: 5)
!9620 = !DILocation(line: 3155, column: 11, scope: !9619)
!9621 = !DILocalVariable(name: "des_loc", scope: !9619, file: !3, line: 3157, type: !2352)
!9622 = !DILocation(line: 3157, column: 18, scope: !9619)
!9623 = !DILocation(line: 3158, column: 7, scope: !9619)
!9624 = !DILocation(line: 3158, column: 38, scope: !9619)
!9625 = !DILocation(line: 3158, column: 14, scope: !9619)
!9626 = !DILocation(line: 3159, column: 7, scope: !9619)
!9627 = !DILocation(line: 3159, column: 34, scope: !9619)
!9628 = !DILocation(line: 3159, column: 10, scope: !9619)
!9629 = !DILocalVariable(name: "des_prev", scope: !9630, file: !3, line: 3161, type: !2321)
!9630 = distinct !DILexicalBlock(scope: !9619, file: !3, line: 3160, column: 2)
!9631 = !DILocation(line: 3161, column: 8, scope: !9630)
!9632 = !DILocation(line: 3161, column: 19, scope: !9630)
!9633 = !DILocation(line: 3162, column: 9, scope: !9634)
!9634 = distinct !DILexicalBlock(scope: !9630, file: !3, line: 3162, column: 8)
!9635 = !DILocation(line: 3162, column: 8, scope: !9630)
!9636 = !DILocation(line: 3163, column: 37, scope: !9634)
!9637 = !DILocation(line: 3163, column: 16, scope: !9634)
!9638 = !DILocation(line: 3163, column: 46, scope: !9634)
!9639 = !DILocation(line: 3163, column: 14, scope: !9634)
!9640 = !DILocation(line: 3163, column: 6, scope: !9634)
!9641 = !DILocation(line: 3164, column: 8, scope: !9642)
!9642 = distinct !DILexicalBlock(scope: !9630, file: !3, line: 3164, column: 8)
!9643 = !DILocation(line: 3164, column: 17, scope: !9642)
!9644 = !DILocation(line: 3164, column: 8, scope: !9630)
!9645 = !DILocation(line: 3165, column: 14, scope: !9642)
!9646 = !DILocation(line: 3165, column: 6, scope: !9642)
!9647 = !DILocation(line: 3166, column: 32, scope: !9648)
!9648 = distinct !DILexicalBlock(scope: !9630, file: !3, line: 3166, column: 8)
!9649 = !DILocation(line: 3166, column: 8, scope: !9648)
!9650 = !DILocation(line: 3166, column: 8, scope: !9630)
!9651 = !DILocation(line: 3168, column: 17, scope: !9652)
!9652 = distinct !DILexicalBlock(scope: !9648, file: !3, line: 3167, column: 6)
!9653 = !DILocation(line: 3169, column: 32, scope: !9652)
!9654 = !DILocation(line: 3169, column: 8, scope: !9652)
!9655 = !DILocation(line: 3170, column: 36, scope: !9656)
!9656 = distinct !DILexicalBlock(scope: !9652, file: !3, line: 3170, column: 12)
!9657 = !DILocation(line: 3170, column: 12, scope: !9656)
!9658 = !DILocation(line: 3170, column: 12, scope: !9652)
!9659 = !DILocation(line: 3172, column: 42, scope: !9660)
!9660 = distinct !DILexicalBlock(scope: !9656, file: !3, line: 3171, column: 3)
!9661 = !DILocation(line: 3172, column: 21, scope: !9660)
!9662 = !DILocation(line: 3172, column: 51, scope: !9660)
!9663 = !DILocation(line: 3172, column: 5, scope: !9660)
!9664 = !DILocation(line: 3173, column: 29, scope: !9660)
!9665 = !DILocation(line: 3173, column: 5, scope: !9660)
!9666 = !DILocation(line: 3174, column: 3, scope: !9660)
!9667 = !DILocalVariable(name: "init", scope: !9668, file: !3, line: 3177, type: !2221)
!9668 = distinct !DILexicalBlock(scope: !9656, file: !3, line: 3176, column: 3)
!9669 = !DILocation(line: 3177, column: 19, scope: !9668)
!9670 = !DILocation(line: 3178, column: 18, scope: !9668)
!9671 = !DILocation(line: 3178, column: 10, scope: !9668)
!9672 = !DILocation(line: 3178, column: 16, scope: !9668)
!9673 = !DILocation(line: 3179, column: 10, scope: !9668)
!9674 = !DILocation(line: 3179, column: 24, scope: !9668)
!9675 = !DILocation(line: 3180, column: 10, scope: !9668)
!9676 = !DILocation(line: 3180, column: 24, scope: !9668)
!9677 = !DILocation(line: 3181, column: 21, scope: !9668)
!9678 = !DILocation(line: 3181, column: 5, scope: !9668)
!9679 = !DILocation(line: 3182, column: 32, scope: !9668)
!9680 = !DILocation(line: 3182, column: 5, scope: !9668)
!9681 = !DILocation(line: 3183, column: 5, scope: !9668)
!9682 = !DILocation(line: 3184, column: 5, scope: !9668)
!9683 = !DILocation(line: 3186, column: 6, scope: !9652)
!9684 = !DILocalVariable(name: "first", scope: !9685, file: !3, line: 3189, type: !2224)
!9685 = distinct !DILexicalBlock(scope: !9648, file: !3, line: 3188, column: 6)
!9686 = !DILocation(line: 3189, column: 13, scope: !9685)
!9687 = !DILocalVariable(name: "second", scope: !9685, file: !3, line: 3189, type: !2224)
!9688 = !DILocation(line: 3189, column: 20, scope: !9685)
!9689 = !DILocalVariable(name: "ellipsis_loc", scope: !9685, file: !3, line: 3190, type: !2352)
!9690 = !DILocation(line: 3190, column: 19, scope: !9685)
!9691 = !DILocation(line: 3202, column: 12, scope: !9692)
!9692 = distinct !DILexicalBlock(scope: !9685, file: !3, line: 3202, column: 12)
!9693 = !DILocation(line: 3202, column: 21, scope: !9692)
!9694 = !DILocation(line: 3202, column: 26, scope: !9692)
!9695 = !DILocation(line: 3202, column: 29, scope: !9692)
!9696 = !DILocation(line: 3202, column: 12, scope: !9685)
!9697 = !DILocation(line: 3204, column: 16, scope: !9698)
!9698 = distinct !DILexicalBlock(scope: !9692, file: !3, line: 3203, column: 3)
!9699 = !DILocation(line: 3204, column: 14, scope: !9698)
!9700 = !DILocation(line: 3205, column: 5, scope: !9698)
!9701 = !DILocation(line: 3207, column: 12, scope: !9702)
!9702 = distinct !DILexicalBlock(scope: !9685, file: !3, line: 3207, column: 12)
!9703 = !DILocation(line: 3207, column: 21, scope: !9702)
!9704 = !DILocation(line: 3207, column: 26, scope: !9702)
!9705 = !DILocation(line: 3207, column: 29, scope: !9702)
!9706 = !DILocation(line: 3207, column: 12, scope: !9685)
!9707 = !DILocalVariable(name: "rec", scope: !9708, file: !3, line: 3216, type: !2224)
!9708 = distinct !DILexicalBlock(scope: !9702, file: !3, line: 3208, column: 3)
!9709 = !DILocation(line: 3216, column: 10, scope: !9708)
!9710 = !DILocalVariable(name: "args", scope: !9708, file: !3, line: 3216, type: !2224)
!9711 = !DILocation(line: 3216, column: 15, scope: !9708)
!9712 = !DILocalVariable(name: "mexpr", scope: !9708, file: !3, line: 3217, type: !2221)
!9713 = !DILocation(line: 3217, column: 19, scope: !9708)
!9714 = !DILocation(line: 3218, column: 29, scope: !9708)
!9715 = !DILocation(line: 3218, column: 5, scope: !9708)
!9716 = !DILocation(line: 3219, column: 30, scope: !9717)
!9717 = distinct !DILexicalBlock(scope: !9708, file: !3, line: 3219, column: 9)
!9718 = !DILocation(line: 3219, column: 9, scope: !9717)
!9719 = !DILocation(line: 3219, column: 39, scope: !9717)
!9720 = !DILocation(line: 3219, column: 44, scope: !9717)
!9721 = !DILocation(line: 3220, column: 9, scope: !9717)
!9722 = !DILocation(line: 3220, column: 35, scope: !9717)
!9723 = !DILocation(line: 3220, column: 14, scope: !9717)
!9724 = !DILocation(line: 3220, column: 44, scope: !9717)
!9725 = !DILocation(line: 3221, column: 7, scope: !9717)
!9726 = !DILocation(line: 3222, column: 6, scope: !9717)
!9727 = !DILocation(line: 3222, column: 31, scope: !9717)
!9728 = !DILocation(line: 3222, column: 10, scope: !9717)
!9729 = !DILocation(line: 3222, column: 40, scope: !9717)
!9730 = !DILocation(line: 3223, column: 10, scope: !9717)
!9731 = !DILocation(line: 3219, column: 9, scope: !9708)
!9732 = !DILocalVariable(name: "id", scope: !9733, file: !3, line: 3226, type: !2224)
!9733 = distinct !DILexicalBlock(scope: !9717, file: !3, line: 3224, column: 7)
!9734 = !DILocation(line: 3226, column: 14, scope: !9733)
!9735 = !DILocation(line: 3226, column: 40, scope: !9733)
!9736 = !DILocation(line: 3226, column: 19, scope: !9733)
!9737 = !DILocation(line: 3226, column: 49, scope: !9733)
!9738 = !DILocation(line: 3227, column: 33, scope: !9733)
!9739 = !DILocation(line: 3227, column: 9, scope: !9733)
!9740 = !DILocation(line: 3228, column: 41, scope: !9733)
!9741 = !DILocation(line: 3228, column: 15, scope: !9733)
!9742 = !DILocation(line: 3228, column: 13, scope: !9733)
!9743 = !DILocation(line: 3229, column: 9, scope: !9733)
!9744 = !DILocation(line: 3231, column: 38, scope: !9708)
!9745 = !DILocation(line: 3231, column: 13, scope: !9708)
!9746 = !DILocation(line: 3231, column: 52, scope: !9708)
!9747 = !DILocation(line: 3231, column: 11, scope: !9708)
!9748 = !DILocation(line: 3232, column: 33, scope: !9749)
!9749 = distinct !DILexicalBlock(scope: !9708, file: !3, line: 3232, column: 9)
!9750 = !DILocation(line: 3232, column: 9, scope: !9749)
!9751 = !DILocation(line: 3233, column: 9, scope: !9749)
!9752 = !DILocation(line: 3233, column: 36, scope: !9749)
!9753 = !DILocation(line: 3233, column: 12, scope: !9749)
!9754 = !DILocation(line: 3232, column: 9, scope: !9708)
!9755 = !DILocation(line: 3234, column: 7, scope: !9749)
!9756 = !DILocation(line: 3238, column: 11, scope: !9708)
!9757 = !DILocation(line: 3238, column: 9, scope: !9708)
!9758 = !DILocation(line: 3239, column: 5, scope: !9708)
!9759 = !DILocation(line: 3239, column: 36, scope: !9708)
!9760 = !DILocation(line: 3239, column: 12, scope: !9708)
!9761 = !DILocalVariable(name: "next", scope: !9762, file: !3, line: 3241, type: !2221)
!9762 = distinct !DILexicalBlock(scope: !9708, file: !3, line: 3240, column: 7)
!9763 = !DILocation(line: 3241, column: 23, scope: !9762)
!9764 = !DILocalVariable(name: "comma_loc", scope: !9762, file: !3, line: 3242, type: !2352)
!9765 = !DILocation(line: 3242, column: 20, scope: !9762)
!9766 = !DILocalVariable(name: "exp_loc", scope: !9762, file: !3, line: 3242, type: !2352)
!9767 = !DILocation(line: 3242, column: 31, scope: !9762)
!9768 = !DILocation(line: 3243, column: 42, scope: !9762)
!9769 = !DILocation(line: 3243, column: 21, scope: !9762)
!9770 = !DILocation(line: 3243, column: 51, scope: !9762)
!9771 = !DILocation(line: 3243, column: 19, scope: !9762)
!9772 = !DILocation(line: 3244, column: 33, scope: !9762)
!9773 = !DILocation(line: 3244, column: 9, scope: !9762)
!9774 = !DILocation(line: 3245, column: 40, scope: !9762)
!9775 = !DILocation(line: 3245, column: 19, scope: !9762)
!9776 = !DILocation(line: 3245, column: 49, scope: !9762)
!9777 = !DILocation(line: 3245, column: 17, scope: !9762)
!9778 = !DILocation(line: 3246, column: 41, scope: !9762)
!9779 = !DILocation(line: 3246, column: 16, scope: !9762)
!9780 = !DILocation(line: 3247, column: 51, scope: !9762)
!9781 = !DILocation(line: 3247, column: 16, scope: !9762)
!9782 = !DILocation(line: 3248, column: 36, scope: !9762)
!9783 = !DILocation(line: 3248, column: 47, scope: !9762)
!9784 = !DILocation(line: 3248, column: 57, scope: !9762)
!9785 = !DILocation(line: 3248, column: 15, scope: !9762)
!9786 = !DILocation(line: 3248, column: 13, scope: !9762)
!9787 = distinct !{!9787, !9758, !9788}
!9788 = !DILocation(line: 3249, column: 7, scope: !9708)
!9789 = !DILabel(scope: !9708, name: "parse_message_args", file: !3, line: 3250)
!9790 = !DILocation(line: 3250, column: 3, scope: !9708)
!9791 = !DILocation(line: 3252, column: 40, scope: !9708)
!9792 = !DILocation(line: 3252, column: 12, scope: !9708)
!9793 = !DILocation(line: 3252, column: 10, scope: !9708)
!9794 = !DILocation(line: 3253, column: 32, scope: !9708)
!9795 = !DILocation(line: 3253, column: 5, scope: !9708)
!9796 = !DILocation(line: 3256, column: 34, scope: !9708)
!9797 = !DILocation(line: 3256, column: 9, scope: !9708)
!9798 = !DILocation(line: 3255, column: 11, scope: !9708)
!9799 = !DILocation(line: 3256, column: 7, scope: !9708)
!9800 = !DILocation(line: 3257, column: 11, scope: !9708)
!9801 = !DILocation(line: 3257, column: 25, scope: !9708)
!9802 = !DILocation(line: 3258, column: 11, scope: !9708)
!9803 = !DILocation(line: 3258, column: 25, scope: !9708)
!9804 = !DILocation(line: 3262, column: 23, scope: !9708)
!9805 = !DILocation(line: 3262, column: 5, scope: !9708)
!9806 = !DILocation(line: 3263, column: 5, scope: !9708)
!9807 = !DILocation(line: 3265, column: 32, scope: !9685)
!9808 = !DILocation(line: 3265, column: 8, scope: !9685)
!9809 = !DILocation(line: 3266, column: 41, scope: !9685)
!9810 = !DILocation(line: 3266, column: 16, scope: !9685)
!9811 = !DILocation(line: 3266, column: 55, scope: !9685)
!9812 = !DILocation(line: 3266, column: 14, scope: !9685)
!9813 = !DILocation(line: 3266, column: 8, scope: !9685)
!9814 = !DILabel(scope: !9685, name: "array_desig_after_first", file: !3, line: 3267)
!9815 = !DILocation(line: 3267, column: 6, scope: !9685)
!9816 = !DILocation(line: 3268, column: 36, scope: !9817)
!9817 = distinct !DILexicalBlock(scope: !9685, file: !3, line: 3268, column: 12)
!9818 = !DILocation(line: 3268, column: 12, scope: !9817)
!9819 = !DILocation(line: 3268, column: 12, scope: !9685)
!9820 = !DILocation(line: 3270, column: 41, scope: !9821)
!9821 = distinct !DILexicalBlock(scope: !9817, file: !3, line: 3269, column: 3)
!9822 = !DILocation(line: 3270, column: 20, scope: !9821)
!9823 = !DILocation(line: 3270, column: 50, scope: !9821)
!9824 = !DILocation(line: 3270, column: 18, scope: !9821)
!9825 = !DILocation(line: 3271, column: 29, scope: !9821)
!9826 = !DILocation(line: 3271, column: 5, scope: !9821)
!9827 = !DILocation(line: 3272, column: 39, scope: !9821)
!9828 = !DILocation(line: 3272, column: 14, scope: !9821)
!9829 = !DILocation(line: 3272, column: 53, scope: !9821)
!9830 = !DILocation(line: 3272, column: 12, scope: !9821)
!9831 = !DILocation(line: 3273, column: 3, scope: !9821)
!9832 = !DILocation(line: 3275, column: 10, scope: !9817)
!9833 = !DILocation(line: 3276, column: 36, scope: !9834)
!9834 = distinct !DILexicalBlock(scope: !9685, file: !3, line: 3276, column: 12)
!9835 = !DILocation(line: 3276, column: 12, scope: !9834)
!9836 = !DILocation(line: 3276, column: 12, scope: !9685)
!9837 = !DILocation(line: 3278, column: 29, scope: !9838)
!9838 = distinct !DILexicalBlock(scope: !9834, file: !3, line: 3277, column: 3)
!9839 = !DILocation(line: 3278, column: 5, scope: !9838)
!9840 = !DILocation(line: 3279, column: 21, scope: !9838)
!9841 = !DILocation(line: 3279, column: 28, scope: !9838)
!9842 = !DILocation(line: 3279, column: 5, scope: !9838)
!9843 = !DILocation(line: 3280, column: 9, scope: !9844)
!9844 = distinct !DILexicalBlock(scope: !9838, file: !3, line: 3280, column: 9)
!9845 = !DILocation(line: 3280, column: 9, scope: !9838)
!9846 = !DILocation(line: 3281, column: 16, scope: !9844)
!9847 = !DILocation(line: 3281, column: 7, scope: !9844)
!9848 = !DILocation(line: 3283, column: 3, scope: !9838)
!9849 = !DILocation(line: 3285, column: 30, scope: !9834)
!9850 = !DILocation(line: 3285, column: 3, scope: !9834)
!9851 = distinct !{!9851, !9623, !9852}
!9852 = !DILocation(line: 3288, column: 2, scope: !9619)
!9853 = !DILocation(line: 3289, column: 11, scope: !9854)
!9854 = distinct !DILexicalBlock(scope: !9619, file: !3, line: 3289, column: 11)
!9855 = !DILocation(line: 3289, column: 20, scope: !9854)
!9856 = !DILocation(line: 3289, column: 11, scope: !9619)
!9857 = !DILocation(line: 3291, column: 32, scope: !9858)
!9858 = distinct !DILexicalBlock(scope: !9859, file: !3, line: 3291, column: 8)
!9859 = distinct !DILexicalBlock(scope: !9854, file: !3, line: 3290, column: 2)
!9860 = !DILocation(line: 3291, column: 8, scope: !9858)
!9861 = !DILocation(line: 3291, column: 8, scope: !9859)
!9862 = !DILocation(line: 3293, column: 13, scope: !9863)
!9863 = distinct !DILexicalBlock(scope: !9864, file: !3, line: 3293, column: 12)
!9864 = distinct !DILexicalBlock(scope: !9858, file: !3, line: 3292, column: 6)
!9865 = !DILocation(line: 3293, column: 12, scope: !9864)
!9866 = !DILocation(line: 3294, column: 12, scope: !9863)
!9867 = !DILocation(line: 3294, column: 3, scope: !9863)
!9868 = !DILocation(line: 3296, column: 32, scope: !9864)
!9869 = !DILocation(line: 3296, column: 8, scope: !9864)
!9870 = !DILocation(line: 3297, column: 6, scope: !9864)
!9871 = !DILocation(line: 3300, column: 12, scope: !9872)
!9872 = distinct !DILexicalBlock(scope: !9873, file: !3, line: 3300, column: 12)
!9873 = distinct !DILexicalBlock(scope: !9858, file: !3, line: 3299, column: 6)
!9874 = !DILocation(line: 3300, column: 21, scope: !9872)
!9875 = !DILocation(line: 3300, column: 12, scope: !9873)
!9876 = !DILocation(line: 3301, column: 33, scope: !9872)
!9877 = !DILocation(line: 3301, column: 12, scope: !9872)
!9878 = !DILocation(line: 3301, column: 42, scope: !9872)
!9879 = !DILocation(line: 3301, column: 3, scope: !9872)
!9880 = !DILocalVariable(name: "init", scope: !9881, file: !3, line: 3305, type: !2221)
!9881 = distinct !DILexicalBlock(scope: !9872, file: !3, line: 3304, column: 3)
!9882 = !DILocation(line: 3305, column: 19, scope: !9881)
!9883 = !DILocation(line: 3306, column: 18, scope: !9881)
!9884 = !DILocation(line: 3306, column: 10, scope: !9881)
!9885 = !DILocation(line: 3306, column: 16, scope: !9881)
!9886 = !DILocation(line: 3307, column: 10, scope: !9881)
!9887 = !DILocation(line: 3307, column: 24, scope: !9881)
!9888 = !DILocation(line: 3308, column: 10, scope: !9881)
!9889 = !DILocation(line: 3308, column: 24, scope: !9881)
!9890 = !DILocation(line: 3309, column: 21, scope: !9881)
!9891 = !DILocation(line: 3309, column: 5, scope: !9881)
!9892 = !DILocation(line: 3310, column: 32, scope: !9881)
!9893 = !DILocation(line: 3310, column: 5, scope: !9881)
!9894 = !DILocation(line: 3311, column: 5, scope: !9881)
!9895 = !DILocation(line: 3312, column: 5, scope: !9881)
!9896 = !DILocation(line: 3315, column: 2, scope: !9859)
!9897 = !DILocation(line: 3317, column: 21, scope: !9592)
!9898 = !DILocation(line: 3317, column: 3, scope: !9592)
!9899 = !DILocation(line: 3318, column: 1, scope: !9592)
!9900 = distinct !DISubprogram(name: "c_parser_objc_message_args", scope: !3, file: !3, line: 6922, type: !6114, scopeLine: 6923, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9901 = !DILocalVariable(name: "parser", arg: 1, scope: !9900, file: !3, line: 6922, type: !3401)
!9902 = !DILocation(line: 6922, column: 39, scope: !9900)
!9903 = !DILocalVariable(name: "sel", scope: !9900, file: !3, line: 6924, type: !2224)
!9904 = !DILocation(line: 6924, column: 8, scope: !9900)
!9905 = !DILocation(line: 6924, column: 38, scope: !9900)
!9906 = !DILocation(line: 6924, column: 14, scope: !9900)
!9907 = !DILocalVariable(name: "list", scope: !9900, file: !3, line: 6925, type: !2224)
!9908 = !DILocation(line: 6925, column: 8, scope: !9900)
!9909 = !DILocation(line: 6926, column: 7, scope: !9910)
!9910 = distinct !DILexicalBlock(scope: !9900, file: !3, line: 6926, column: 7)
!9911 = !DILocation(line: 6926, column: 11, scope: !9910)
!9912 = !DILocation(line: 6926, column: 42, scope: !9910)
!9913 = !DILocation(line: 6926, column: 14, scope: !9910)
!9914 = !DILocation(line: 6926, column: 7, scope: !9900)
!9915 = !DILocation(line: 6927, column: 12, scope: !9910)
!9916 = !DILocation(line: 6927, column: 5, scope: !9910)
!9917 = !DILocation(line: 6928, column: 3, scope: !9900)
!9918 = !DILocalVariable(name: "keywordexpr", scope: !9919, file: !3, line: 6930, type: !2224)
!9919 = distinct !DILexicalBlock(scope: !9900, file: !3, line: 6929, column: 5)
!9920 = !DILocation(line: 6930, column: 12, scope: !9919)
!9921 = !DILocation(line: 6931, column: 30, scope: !9922)
!9922 = distinct !DILexicalBlock(scope: !9919, file: !3, line: 6931, column: 11)
!9923 = !DILocation(line: 6931, column: 12, scope: !9922)
!9924 = !DILocation(line: 6931, column: 11, scope: !9919)
!9925 = !DILocation(line: 6932, column: 9, scope: !9922)
!9926 = !DILocation(line: 6932, column: 2, scope: !9922)
!9927 = !DILocation(line: 6933, column: 48, scope: !9919)
!9928 = !DILocation(line: 6933, column: 21, scope: !9919)
!9929 = !DILocation(line: 6933, column: 19, scope: !9919)
!9930 = !DILocation(line: 6934, column: 23, scope: !9919)
!9931 = !DILocation(line: 6934, column: 29, scope: !9919)
!9932 = !DILocation(line: 6934, column: 14, scope: !9919)
!9933 = !DILocation(line: 6934, column: 12, scope: !9919)
!9934 = !DILocation(line: 6935, column: 37, scope: !9919)
!9935 = !DILocation(line: 6935, column: 13, scope: !9919)
!9936 = !DILocation(line: 6935, column: 11, scope: !9919)
!9937 = !DILocation(line: 6936, column: 12, scope: !9938)
!9938 = distinct !DILexicalBlock(scope: !9919, file: !3, line: 6936, column: 11)
!9939 = !DILocation(line: 6936, column: 16, scope: !9938)
!9940 = !DILocation(line: 6936, column: 47, scope: !9938)
!9941 = !DILocation(line: 6936, column: 19, scope: !9938)
!9942 = !DILocation(line: 6936, column: 11, scope: !9919)
!9943 = !DILocation(line: 6937, column: 2, scope: !9938)
!9944 = distinct !{!9944, !9917, !9945}
!9945 = !DILocation(line: 6938, column: 5, scope: !9900)
!9946 = !DILocation(line: 6939, column: 10, scope: !9900)
!9947 = !DILocation(line: 6939, column: 3, scope: !9900)
!9948 = !DILocation(line: 6940, column: 1, scope: !9900)
!9949 = distinct !DISubprogram(name: "c_parser_initval", scope: !3, file: !3, line: 3327, type: !9950, scopeLine: 3328, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9950 = !DISubroutineType(types: !9951)
!9951 = !{null, !3401, !3424}
!9952 = !DILocalVariable(name: "parser", arg: 1, scope: !9949, file: !3, line: 3327, type: !3401)
!9953 = !DILocation(line: 3327, column: 29, scope: !9949)
!9954 = !DILocalVariable(name: "after", arg: 2, scope: !9949, file: !3, line: 3327, type: !3424)
!9955 = !DILocation(line: 3327, column: 52, scope: !9949)
!9956 = !DILocalVariable(name: "init", scope: !9949, file: !3, line: 3329, type: !2221)
!9957 = !DILocation(line: 3329, column: 17, scope: !9949)
!9958 = !DILocation(line: 3330, column: 3, scope: !9949)
!9959 = !DILocation(line: 3331, column: 31, scope: !9960)
!9960 = distinct !DILexicalBlock(scope: !9949, file: !3, line: 3331, column: 7)
!9961 = !DILocation(line: 3331, column: 7, scope: !9960)
!9962 = !DILocation(line: 3331, column: 55, scope: !9960)
!9963 = !DILocation(line: 3331, column: 59, scope: !9960)
!9964 = !DILocation(line: 3331, column: 7, scope: !9949)
!9965 = !DILocation(line: 3332, column: 34, scope: !9960)
!9966 = !DILocation(line: 3332, column: 12, scope: !9960)
!9967 = !DILocation(line: 3332, column: 5, scope: !9960)
!9968 = !DILocalVariable(name: "loc", scope: !9969, file: !3, line: 3335, type: !2352)
!9969 = distinct !DILexicalBlock(scope: !9960, file: !3, line: 3334, column: 5)
!9970 = !DILocation(line: 3335, column: 18, scope: !9969)
!9971 = !DILocation(line: 3335, column: 45, scope: !9969)
!9972 = !DILocation(line: 3335, column: 24, scope: !9969)
!9973 = !DILocation(line: 3335, column: 54, scope: !9969)
!9974 = !DILocation(line: 3336, column: 39, scope: !9969)
!9975 = !DILocation(line: 3336, column: 47, scope: !9969)
!9976 = !DILocation(line: 3336, column: 14, scope: !9969)
!9977 = !DILocation(line: 3337, column: 16, scope: !9978)
!9978 = distinct !DILexicalBlock(scope: !9969, file: !3, line: 3337, column: 11)
!9979 = !DILocation(line: 3337, column: 22, scope: !9978)
!9980 = !DILocation(line: 3338, column: 4, scope: !9978)
!9981 = !DILocation(line: 3338, column: 7, scope: !9978)
!9982 = !DILocation(line: 3338, column: 30, scope: !9978)
!9983 = !DILocation(line: 3339, column: 4, scope: !9978)
!9984 = !DILocation(line: 3339, column: 7, scope: !9978)
!9985 = !DILocation(line: 3339, column: 30, scope: !9978)
!9986 = !DILocation(line: 3337, column: 11, scope: !9969)
!9987 = !DILocation(line: 3340, column: 44, scope: !9978)
!9988 = !DILocation(line: 3340, column: 9, scope: !9978)
!9989 = !DILocation(line: 3340, column: 2, scope: !9978)
!9990 = !DILocation(line: 3342, column: 3, scope: !9949)
!9991 = !DILocation(line: 3343, column: 1, scope: !9949)
!9992 = distinct !DISubprogram(name: "c_parser_objc_keywordexpr", scope: !3, file: !3, line: 6949, type: !6114, scopeLine: 6950, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!9993 = !DILocalVariable(name: "parser", arg: 1, scope: !9992, file: !3, line: 6949, type: !3401)
!9994 = !DILocation(line: 6949, column: 38, scope: !9992)
!9995 = !DILocalVariable(name: "ret", scope: !9992, file: !3, line: 6951, type: !2224)
!9996 = !DILocation(line: 6951, column: 8, scope: !9992)
!9997 = !DILocalVariable(name: "expr_list", scope: !9992, file: !3, line: 6952, type: !2892)
!9998 = !DILocation(line: 6952, column: 17, scope: !9992)
!9999 = !DILocation(line: 6952, column: 49, scope: !9992)
!10000 = !DILocation(line: 6952, column: 29, scope: !9992)
!10001 = !DILocation(line: 6953, column: 7, scope: !10002)
!10002 = distinct !DILexicalBlock(scope: !9992, file: !3, line: 6953, column: 7)
!10003 = !DILocation(line: 6953, column: 36, scope: !10002)
!10004 = !DILocation(line: 6953, column: 7, scope: !9992)
!10005 = !DILocation(line: 6957, column: 13, scope: !10006)
!10006 = distinct !DILexicalBlock(scope: !10002, file: !3, line: 6954, column: 5)
!10007 = !DILocation(line: 6957, column: 11, scope: !10006)
!10008 = !DILocation(line: 6958, column: 5, scope: !10006)
!10009 = !DILocation(line: 6962, column: 13, scope: !10010)
!10010 = distinct !DILexicalBlock(scope: !10002, file: !3, line: 6960, column: 5)
!10011 = !DILocation(line: 6962, column: 11, scope: !10010)
!10012 = !DILocation(line: 6964, column: 24, scope: !9992)
!10013 = !DILocation(line: 6964, column: 3, scope: !9992)
!10014 = !DILocation(line: 6965, column: 10, scope: !9992)
!10015 = !DILocation(line: 6965, column: 3, scope: !9992)
!10016 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !158, file: !158, line: 182, type: !10017, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!10017 = !DISubroutineType(types: !10018)
!10018 = !{!7, !10019}
!10019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10020, size: 64)
!10020 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2897)
!10021 = !DILocalVariable(name: "vec_", arg: 1, scope: !10016, file: !158, line: 182, type: !10019)
!10022 = !DILocation(line: 182, column: 1, scope: !10016)
!10023 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !158, file: !158, line: 182, type: !10024, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!10024 = !DISubroutineType(types: !10025)
!10025 = !{!2224, !10019, !7}
!10026 = !DILocalVariable(name: "vec_", arg: 1, scope: !10023, file: !158, line: 182, type: !10019)
!10027 = !DILocation(line: 182, column: 1, scope: !10023)
!10028 = !DILocalVariable(name: "ix_", arg: 2, scope: !10023, file: !158, line: 182, type: !7)
!10029 = !DILocation(line: 0, scope: !10023)
!10030 = distinct !DISubprogram(name: "c_parser_sizeof_expression", scope: !3, file: !3, line: 5186, type: !8622, scopeLine: 5187, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!10031 = !DILocalVariable(name: "parser", arg: 1, scope: !10030, file: !3, line: 5186, type: !3401)
!10032 = !DILocation(line: 5186, column: 39, scope: !10030)
!10033 = !DILocalVariable(name: "expr", scope: !10030, file: !3, line: 5188, type: !2221)
!10034 = !DILocation(line: 5188, column: 17, scope: !10030)
!10035 = !DILocalVariable(name: "expr_loc", scope: !10030, file: !3, line: 5189, type: !2352)
!10036 = !DILocation(line: 5189, column: 14, scope: !10030)
!10037 = !DILocation(line: 5190, column: 3, scope: !10030)
!10038 = !DILocation(line: 5191, column: 27, scope: !10030)
!10039 = !DILocation(line: 5191, column: 3, scope: !10030)
!10040 = !DILocation(line: 5192, column: 32, scope: !10030)
!10041 = !DILocation(line: 5193, column: 12, scope: !10030)
!10042 = !DILocation(line: 5194, column: 31, scope: !10043)
!10043 = distinct !DILexicalBlock(scope: !10030, file: !3, line: 5194, column: 7)
!10044 = !DILocation(line: 5194, column: 7, scope: !10043)
!10045 = !DILocation(line: 5195, column: 7, scope: !10043)
!10046 = !DILocation(line: 5195, column: 60, scope: !10043)
!10047 = !DILocation(line: 5195, column: 35, scope: !10043)
!10048 = !DILocation(line: 5195, column: 10, scope: !10043)
!10049 = !DILocation(line: 5194, column: 7, scope: !10030)
!10050 = !DILocalVariable(name: "type_name", scope: !10051, file: !3, line: 5199, type: !4278)
!10051 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 5196, column: 5)
!10052 = !DILocation(line: 5199, column: 27, scope: !10051)
!10053 = !DILocation(line: 5200, column: 31, scope: !10051)
!10054 = !DILocation(line: 5200, column: 7, scope: !10051)
!10055 = !DILocation(line: 5201, column: 39, scope: !10051)
!10056 = !DILocation(line: 5201, column: 18, scope: !10051)
!10057 = !DILocation(line: 5201, column: 48, scope: !10051)
!10058 = !DILocation(line: 5201, column: 16, scope: !10051)
!10059 = !DILocation(line: 5202, column: 39, scope: !10051)
!10060 = !DILocation(line: 5202, column: 19, scope: !10051)
!10061 = !DILocation(line: 5202, column: 17, scope: !10051)
!10062 = !DILocation(line: 5203, column: 34, scope: !10051)
!10063 = !DILocation(line: 5203, column: 7, scope: !10051)
!10064 = !DILocation(line: 5204, column: 11, scope: !10065)
!10065 = distinct !DILexicalBlock(scope: !10051, file: !3, line: 5204, column: 11)
!10066 = !DILocation(line: 5204, column: 21, scope: !10065)
!10067 = !DILocation(line: 5204, column: 11, scope: !10051)
!10068 = !DILocalVariable(name: "ret", scope: !10069, file: !3, line: 5206, type: !2221)
!10069 = distinct !DILexicalBlock(scope: !10065, file: !3, line: 5205, column: 2)
!10070 = !DILocation(line: 5206, column: 18, scope: !10069)
!10071 = !DILocation(line: 5207, column: 33, scope: !10069)
!10072 = !DILocation(line: 5208, column: 13, scope: !10069)
!10073 = !DILocation(line: 5209, column: 16, scope: !10069)
!10074 = !DILocation(line: 5209, column: 8, scope: !10069)
!10075 = !DILocation(line: 5209, column: 14, scope: !10069)
!10076 = !DILocation(line: 5210, column: 8, scope: !10069)
!10077 = !DILocation(line: 5210, column: 22, scope: !10069)
!10078 = !DILocation(line: 5211, column: 8, scope: !10069)
!10079 = !DILocation(line: 5211, column: 22, scope: !10069)
!10080 = !DILocation(line: 5212, column: 4, scope: !10069)
!10081 = !DILocation(line: 5214, column: 35, scope: !10082)
!10082 = distinct !DILexicalBlock(scope: !10051, file: !3, line: 5214, column: 11)
!10083 = !DILocation(line: 5214, column: 11, scope: !10082)
!10084 = !DILocation(line: 5214, column: 11, scope: !10051)
!10085 = !DILocation(line: 5216, column: 57, scope: !10086)
!10086 = distinct !DILexicalBlock(scope: !10082, file: !3, line: 5215, column: 2)
!10087 = !DILocation(line: 5217, column: 15, scope: !10086)
!10088 = !DILocation(line: 5218, column: 15, scope: !10086)
!10089 = !DILocation(line: 5216, column: 11, scope: !10086)
!10090 = !DILocation(line: 5219, column: 4, scope: !10086)
!10091 = !DILocation(line: 5222, column: 36, scope: !10051)
!10092 = !DILocation(line: 5223, column: 16, scope: !10051)
!10093 = !DILocation(line: 5224, column: 34, scope: !10051)
!10094 = !DILocation(line: 5224, column: 44, scope: !10051)
!10095 = !DILocation(line: 5224, column: 14, scope: !10051)
!10096 = !DILocation(line: 5224, column: 7, scope: !10051)
!10097 = !DILocation(line: 5228, column: 39, scope: !10098)
!10098 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 5227, column: 5)
!10099 = !DILocation(line: 5228, column: 18, scope: !10098)
!10100 = !DILocation(line: 5228, column: 48, scope: !10098)
!10101 = !DILocation(line: 5228, column: 16, scope: !10098)
!10102 = !DILocation(line: 5229, column: 41, scope: !10098)
!10103 = !DILocation(line: 5229, column: 14, scope: !10098)
!10104 = !DILocation(line: 5229, column: 7, scope: !10098)
!10105 = !DILabel(scope: !10098, name: "sizeof_expr", file: !3, line: 5230)
!10106 = !DILocation(line: 5230, column: 5, scope: !10098)
!10107 = !DILocation(line: 5231, column: 36, scope: !10098)
!10108 = !DILocation(line: 5232, column: 16, scope: !10098)
!10109 = !DILocation(line: 5233, column: 11, scope: !10110)
!10110 = distinct !DILexicalBlock(scope: !10098, file: !3, line: 5233, column: 11)
!10111 = !DILocation(line: 5233, column: 34, scope: !10110)
!10112 = !DILocation(line: 5234, column: 4, scope: !10110)
!10113 = !DILocation(line: 5234, column: 7, scope: !10110)
!10114 = !DILocation(line: 5233, column: 11, scope: !10098)
!10115 = !DILocation(line: 5235, column: 12, scope: !10110)
!10116 = !DILocation(line: 5235, column: 2, scope: !10110)
!10117 = !DILocation(line: 5236, column: 34, scope: !10098)
!10118 = !DILocation(line: 5236, column: 14, scope: !10098)
!10119 = !DILocation(line: 5236, column: 7, scope: !10098)
!10120 = !DILocation(line: 5238, column: 1, scope: !10030)
!10121 = distinct !DISubprogram(name: "c_parser_alignof_expression", scope: !3, file: !3, line: 5243, type: !8622, scopeLine: 5244, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!10122 = !DILocalVariable(name: "parser", arg: 1, scope: !10121, file: !3, line: 5243, type: !3401)
!10123 = !DILocation(line: 5243, column: 40, scope: !10121)
!10124 = !DILocalVariable(name: "expr", scope: !10121, file: !3, line: 5245, type: !2221)
!10125 = !DILocation(line: 5245, column: 17, scope: !10121)
!10126 = !DILocalVariable(name: "loc", scope: !10121, file: !3, line: 5246, type: !2352)
!10127 = !DILocation(line: 5246, column: 14, scope: !10121)
!10128 = !DILocation(line: 5246, column: 41, scope: !10121)
!10129 = !DILocation(line: 5246, column: 20, scope: !10121)
!10130 = !DILocation(line: 5246, column: 50, scope: !10121)
!10131 = !DILocation(line: 5247, column: 3, scope: !10121)
!10132 = !DILocation(line: 5248, column: 27, scope: !10121)
!10133 = !DILocation(line: 5248, column: 3, scope: !10121)
!10134 = !DILocation(line: 5249, column: 32, scope: !10121)
!10135 = !DILocation(line: 5250, column: 13, scope: !10121)
!10136 = !DILocation(line: 5251, column: 31, scope: !10137)
!10137 = distinct !DILexicalBlock(scope: !10121, file: !3, line: 5251, column: 7)
!10138 = !DILocation(line: 5251, column: 7, scope: !10137)
!10139 = !DILocation(line: 5252, column: 7, scope: !10137)
!10140 = !DILocation(line: 5252, column: 60, scope: !10137)
!10141 = !DILocation(line: 5252, column: 35, scope: !10137)
!10142 = !DILocation(line: 5252, column: 10, scope: !10137)
!10143 = !DILocation(line: 5251, column: 7, scope: !10121)
!10144 = !DILocalVariable(name: "loc", scope: !10145, file: !3, line: 5256, type: !2352)
!10145 = distinct !DILexicalBlock(scope: !10137, file: !3, line: 5253, column: 5)
!10146 = !DILocation(line: 5256, column: 18, scope: !10145)
!10147 = !DILocalVariable(name: "type_name", scope: !10145, file: !3, line: 5257, type: !4278)
!10148 = !DILocation(line: 5257, column: 27, scope: !10145)
!10149 = !DILocalVariable(name: "ret", scope: !10145, file: !3, line: 5258, type: !2221)
!10150 = !DILocation(line: 5258, column: 21, scope: !10145)
!10151 = !DILocation(line: 5259, column: 31, scope: !10145)
!10152 = !DILocation(line: 5259, column: 7, scope: !10145)
!10153 = !DILocation(line: 5260, column: 34, scope: !10145)
!10154 = !DILocation(line: 5260, column: 13, scope: !10145)
!10155 = !DILocation(line: 5260, column: 43, scope: !10145)
!10156 = !DILocation(line: 5260, column: 11, scope: !10145)
!10157 = !DILocation(line: 5261, column: 39, scope: !10145)
!10158 = !DILocation(line: 5261, column: 19, scope: !10145)
!10159 = !DILocation(line: 5261, column: 17, scope: !10145)
!10160 = !DILocation(line: 5262, column: 34, scope: !10145)
!10161 = !DILocation(line: 5262, column: 7, scope: !10145)
!10162 = !DILocation(line: 5263, column: 11, scope: !10163)
!10163 = distinct !DILexicalBlock(scope: !10145, file: !3, line: 5263, column: 11)
!10164 = !DILocation(line: 5263, column: 21, scope: !10163)
!10165 = !DILocation(line: 5263, column: 11, scope: !10145)
!10166 = !DILocalVariable(name: "ret", scope: !10167, file: !3, line: 5265, type: !2221)
!10167 = distinct !DILexicalBlock(scope: !10163, file: !3, line: 5264, column: 2)
!10168 = !DILocation(line: 5265, column: 18, scope: !10167)
!10169 = !DILocation(line: 5266, column: 33, scope: !10167)
!10170 = !DILocation(line: 5267, column: 14, scope: !10167)
!10171 = !DILocation(line: 5268, column: 16, scope: !10167)
!10172 = !DILocation(line: 5268, column: 8, scope: !10167)
!10173 = !DILocation(line: 5268, column: 14, scope: !10167)
!10174 = !DILocation(line: 5269, column: 8, scope: !10167)
!10175 = !DILocation(line: 5269, column: 22, scope: !10167)
!10176 = !DILocation(line: 5270, column: 8, scope: !10167)
!10177 = !DILocation(line: 5270, column: 22, scope: !10167)
!10178 = !DILocation(line: 5271, column: 4, scope: !10167)
!10179 = !DILocation(line: 5273, column: 35, scope: !10180)
!10180 = distinct !DILexicalBlock(scope: !10145, file: !3, line: 5273, column: 11)
!10181 = !DILocation(line: 5273, column: 11, scope: !10180)
!10182 = !DILocation(line: 5273, column: 11, scope: !10145)
!10183 = !DILocation(line: 5275, column: 57, scope: !10184)
!10184 = distinct !DILexicalBlock(scope: !10180, file: !3, line: 5274, column: 2)
!10185 = !DILocation(line: 5276, column: 15, scope: !10184)
!10186 = !DILocation(line: 5277, column: 15, scope: !10184)
!10187 = !DILocation(line: 5275, column: 11, scope: !10184)
!10188 = !DILocation(line: 5278, column: 4, scope: !10184)
!10189 = !DILocation(line: 5281, column: 36, scope: !10145)
!10190 = !DILocation(line: 5282, column: 17, scope: !10145)
!10191 = !DILocation(line: 5283, column: 19, scope: !10145)
!10192 = !DILocation(line: 5283, column: 11, scope: !10145)
!10193 = !DILocation(line: 5283, column: 17, scope: !10145)
!10194 = !DILocation(line: 5284, column: 11, scope: !10145)
!10195 = !DILocation(line: 5284, column: 25, scope: !10145)
!10196 = !DILocation(line: 5285, column: 11, scope: !10145)
!10197 = !DILocation(line: 5285, column: 25, scope: !10145)
!10198 = !DILocation(line: 5286, column: 14, scope: !10145)
!10199 = !DILocation(line: 5286, column: 7, scope: !10145)
!10200 = !DILocalVariable(name: "ret", scope: !10201, file: !3, line: 5290, type: !2221)
!10201 = distinct !DILexicalBlock(scope: !10137, file: !3, line: 5289, column: 5)
!10202 = !DILocation(line: 5290, column: 21, scope: !10201)
!10203 = !DILocation(line: 5291, column: 41, scope: !10201)
!10204 = !DILocation(line: 5291, column: 14, scope: !10201)
!10205 = !DILocation(line: 5291, column: 7, scope: !10201)
!10206 = !DILabel(scope: !10201, name: "alignof_expr", file: !3, line: 5292)
!10207 = !DILocation(line: 5292, column: 5, scope: !10201)
!10208 = !DILocation(line: 5293, column: 36, scope: !10201)
!10209 = !DILocation(line: 5294, column: 17, scope: !10201)
!10210 = !DILocation(line: 5295, column: 35, scope: !10201)
!10211 = !DILocation(line: 5295, column: 45, scope: !10201)
!10212 = !DILocation(line: 5295, column: 19, scope: !10201)
!10213 = !DILocation(line: 5295, column: 11, scope: !10201)
!10214 = !DILocation(line: 5295, column: 17, scope: !10201)
!10215 = !DILocation(line: 5296, column: 11, scope: !10201)
!10216 = !DILocation(line: 5296, column: 25, scope: !10201)
!10217 = !DILocation(line: 5297, column: 11, scope: !10201)
!10218 = !DILocation(line: 5297, column: 25, scope: !10201)
!10219 = !DILocation(line: 5298, column: 7, scope: !10201)
!10220 = !DILocation(line: 5300, column: 1, scope: !10121)
!10221 = distinct !DISubprogram(name: "c_parser_postfix_expression", scope: !3, file: !3, line: 5356, type: !8622, scopeLine: 5357, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!10222 = !DILocalVariable(name: "parser", arg: 1, scope: !10221, file: !3, line: 5356, type: !3401)
!10223 = !DILocation(line: 5356, column: 40, scope: !10221)
!10224 = !DILocalVariable(name: "expr", scope: !10221, file: !3, line: 5358, type: !2221)
!10225 = !DILocation(line: 5358, column: 17, scope: !10221)
!10226 = !DILocalVariable(name: "e1", scope: !10221, file: !3, line: 5358, type: !2221)
!10227 = !DILocation(line: 5358, column: 23, scope: !10221)
!10228 = !DILocalVariable(name: "e2", scope: !10221, file: !3, line: 5358, type: !2221)
!10229 = !DILocation(line: 5358, column: 27, scope: !10221)
!10230 = !DILocalVariable(name: "e3", scope: !10221, file: !3, line: 5358, type: !2221)
!10231 = !DILocation(line: 5358, column: 31, scope: !10221)
!10232 = !DILocalVariable(name: "t1", scope: !10221, file: !3, line: 5359, type: !4278)
!10233 = !DILocation(line: 5359, column: 23, scope: !10221)
!10234 = !DILocalVariable(name: "t2", scope: !10221, file: !3, line: 5359, type: !4278)
!10235 = !DILocation(line: 5359, column: 28, scope: !10221)
!10236 = !DILocalVariable(name: "loc", scope: !10221, file: !3, line: 5360, type: !2352)
!10237 = !DILocation(line: 5360, column: 14, scope: !10221)
!10238 = !DILocation(line: 5360, column: 41, scope: !10221)
!10239 = !DILocation(line: 5360, column: 20, scope: !10221)
!10240 = !DILocation(line: 5360, column: 50, scope: !10221)
!10241 = !DILocation(line: 5361, column: 8, scope: !10221)
!10242 = !DILocation(line: 5361, column: 22, scope: !10221)
!10243 = !DILocation(line: 5362, column: 8, scope: !10221)
!10244 = !DILocation(line: 5362, column: 22, scope: !10221)
!10245 = !DILocation(line: 5363, column: 32, scope: !10221)
!10246 = !DILocation(line: 5363, column: 11, scope: !10221)
!10247 = !DILocation(line: 5363, column: 41, scope: !10221)
!10248 = !DILocation(line: 5363, column: 3, scope: !10221)
!10249 = !DILocation(line: 5366, column: 41, scope: !10250)
!10250 = distinct !DILexicalBlock(scope: !10221, file: !3, line: 5364, column: 5)
!10251 = !DILocation(line: 5366, column: 20, scope: !10250)
!10252 = !DILocation(line: 5366, column: 50, scope: !10250)
!10253 = !DILocation(line: 5366, column: 12, scope: !10250)
!10254 = !DILocation(line: 5366, column: 18, scope: !10250)
!10255 = !DILocation(line: 5367, column: 34, scope: !10250)
!10256 = !DILocation(line: 5367, column: 13, scope: !10250)
!10257 = !DILocation(line: 5367, column: 43, scope: !10250)
!10258 = !DILocation(line: 5367, column: 11, scope: !10250)
!10259 = !DILocation(line: 5368, column: 31, scope: !10250)
!10260 = !DILocation(line: 5368, column: 7, scope: !10250)
!10261 = !DILocation(line: 5369, column: 11, scope: !10262)
!10262 = distinct !DILexicalBlock(scope: !10250, file: !3, line: 5369, column: 11)
!10263 = !DILocation(line: 5369, column: 34, scope: !10262)
!10264 = !DILocation(line: 5370, column: 4, scope: !10262)
!10265 = !DILocation(line: 5370, column: 16, scope: !10262)
!10266 = !DILocation(line: 5370, column: 8, scope: !10262)
!10267 = !DILocation(line: 5369, column: 11, scope: !10250)
!10268 = !DILocation(line: 5372, column: 14, scope: !10269)
!10269 = distinct !DILexicalBlock(scope: !10262, file: !3, line: 5371, column: 2)
!10270 = !DILocation(line: 5372, column: 4, scope: !10269)
!10271 = !DILocation(line: 5373, column: 17, scope: !10269)
!10272 = !DILocation(line: 5373, column: 9, scope: !10269)
!10273 = !DILocation(line: 5373, column: 15, scope: !10269)
!10274 = !DILocation(line: 5374, column: 2, scope: !10269)
!10275 = !DILocation(line: 5375, column: 7, scope: !10250)
!10276 = !DILocation(line: 5380, column: 41, scope: !10250)
!10277 = !DILocation(line: 5380, column: 20, scope: !10250)
!10278 = !DILocation(line: 5380, column: 50, scope: !10250)
!10279 = !DILocation(line: 5380, column: 12, scope: !10250)
!10280 = !DILocation(line: 5380, column: 18, scope: !10250)
!10281 = !DILocation(line: 5381, column: 31, scope: !10250)
!10282 = !DILocation(line: 5381, column: 7, scope: !10250)
!10283 = !DILocation(line: 5382, column: 7, scope: !10250)
!10284 = !DILocation(line: 5388, column: 41, scope: !10250)
!10285 = !DILocation(line: 5388, column: 20, scope: !10250)
!10286 = !DILocation(line: 5388, column: 50, scope: !10250)
!10287 = !DILocation(line: 5388, column: 12, scope: !10250)
!10288 = !DILocation(line: 5388, column: 18, scope: !10250)
!10289 = !DILocation(line: 5389, column: 12, scope: !10250)
!10290 = !DILocation(line: 5389, column: 26, scope: !10250)
!10291 = !DILocation(line: 5390, column: 31, scope: !10250)
!10292 = !DILocation(line: 5390, column: 7, scope: !10250)
!10293 = !DILocation(line: 5391, column: 7, scope: !10250)
!10294 = !DILocation(line: 5393, column: 7, scope: !10250)
!10295 = !DILocation(line: 5395, column: 51, scope: !10250)
!10296 = !DILocation(line: 5395, column: 30, scope: !10250)
!10297 = !DILocation(line: 5395, column: 60, scope: !10250)
!10298 = !DILocation(line: 5395, column: 4, scope: !10250)
!10299 = !DILocation(line: 5394, column: 12, scope: !10250)
!10300 = !DILocation(line: 5395, column: 2, scope: !10250)
!10301 = !DILocation(line: 5396, column: 31, scope: !10250)
!10302 = !DILocation(line: 5396, column: 7, scope: !10250)
!10303 = !DILocation(line: 5397, column: 7, scope: !10250)
!10304 = !DILocation(line: 5399, column: 32, scope: !10305)
!10305 = distinct !DILexicalBlock(scope: !10250, file: !3, line: 5399, column: 11)
!10306 = !DILocation(line: 5399, column: 11, scope: !10305)
!10307 = !DILocation(line: 5399, column: 41, scope: !10305)
!10308 = !DILocation(line: 5399, column: 49, scope: !10305)
!10309 = !DILocation(line: 5399, column: 11, scope: !10250)
!10310 = !DILocation(line: 5401, column: 20, scope: !10311)
!10311 = distinct !DILexicalBlock(scope: !10305, file: !3, line: 5400, column: 2)
!10312 = !DILocation(line: 5401, column: 4, scope: !10311)
!10313 = !DILocation(line: 5402, column: 17, scope: !10311)
!10314 = !DILocation(line: 5402, column: 9, scope: !10311)
!10315 = !DILocation(line: 5402, column: 15, scope: !10311)
!10316 = !DILocation(line: 5403, column: 4, scope: !10311)
!10317 = !DILocalVariable(name: "id", scope: !10318, file: !3, line: 5406, type: !2224)
!10318 = distinct !DILexicalBlock(scope: !10250, file: !3, line: 5405, column: 7)
!10319 = !DILocation(line: 5406, column: 7, scope: !10318)
!10320 = !DILocation(line: 5406, column: 33, scope: !10318)
!10321 = !DILocation(line: 5406, column: 12, scope: !10318)
!10322 = !DILocation(line: 5406, column: 42, scope: !10318)
!10323 = !DILocation(line: 5407, column: 26, scope: !10318)
!10324 = !DILocation(line: 5407, column: 2, scope: !10318)
!10325 = !DILocation(line: 5408, column: 35, scope: !10318)
!10326 = !DILocation(line: 5408, column: 40, scope: !10318)
!10327 = !DILocation(line: 5409, column: 29, scope: !10318)
!10328 = !DILocation(line: 5409, column: 8, scope: !10318)
!10329 = !DILocation(line: 5409, column: 38, scope: !10318)
!10330 = !DILocation(line: 5410, column: 8, scope: !10318)
!10331 = !DILocation(line: 5411, column: 13, scope: !10318)
!10332 = !DILocation(line: 5408, column: 15, scope: !10318)
!10333 = !DILocation(line: 5408, column: 7, scope: !10318)
!10334 = !DILocation(line: 5408, column: 13, scope: !10318)
!10335 = !DILocation(line: 5413, column: 7, scope: !10250)
!10336 = !DILocation(line: 5417, column: 36, scope: !10337)
!10337 = distinct !DILexicalBlock(scope: !10250, file: !3, line: 5417, column: 11)
!10338 = !DILocation(line: 5417, column: 11, scope: !10337)
!10339 = !DILocation(line: 5417, column: 45, scope: !10337)
!10340 = !DILocation(line: 5417, column: 50, scope: !10337)
!10341 = !DILocation(line: 5417, column: 11, scope: !10250)
!10342 = !DILocalVariable(name: "stmt", scope: !10343, file: !3, line: 5420, type: !2224)
!10343 = distinct !DILexicalBlock(scope: !10337, file: !3, line: 5418, column: 2)
!10344 = !DILocation(line: 5420, column: 9, scope: !10343)
!10345 = !DILocalVariable(name: "brace_loc", scope: !10343, file: !3, line: 5421, type: !2352)
!10346 = !DILocation(line: 5421, column: 15, scope: !10343)
!10347 = !DILocation(line: 5422, column: 28, scope: !10343)
!10348 = !DILocation(line: 5422, column: 4, scope: !10343)
!10349 = !DILocation(line: 5423, column: 37, scope: !10343)
!10350 = !DILocation(line: 5423, column: 16, scope: !10343)
!10351 = !DILocation(line: 5423, column: 46, scope: !10343)
!10352 = !DILocation(line: 5423, column: 14, scope: !10343)
!10353 = !DILocation(line: 5424, column: 28, scope: !10343)
!10354 = !DILocation(line: 5424, column: 4, scope: !10343)
!10355 = !DILocation(line: 5425, column: 8, scope: !10356)
!10356 = distinct !DILexicalBlock(scope: !10343, file: !3, line: 5425, column: 8)
!10357 = !DILocation(line: 5425, column: 22, scope: !10356)
!10358 = !DILocation(line: 5425, column: 8, scope: !10343)
!10359 = !DILocation(line: 5427, column: 18, scope: !10360)
!10360 = distinct !DILexicalBlock(scope: !10356, file: !3, line: 5426, column: 6)
!10361 = !DILocation(line: 5427, column: 8, scope: !10360)
!10362 = !DILocation(line: 5429, column: 8, scope: !10360)
!10363 = !DILocation(line: 5429, column: 16, scope: !10360)
!10364 = !DILocation(line: 5429, column: 22, scope: !10360)
!10365 = !DILocation(line: 5430, column: 35, scope: !10360)
!10366 = !DILocation(line: 5430, column: 8, scope: !10360)
!10367 = !DILocation(line: 5431, column: 35, scope: !10360)
!10368 = !DILocation(line: 5431, column: 8, scope: !10360)
!10369 = !DILocation(line: 5432, column: 21, scope: !10360)
!10370 = !DILocation(line: 5432, column: 13, scope: !10360)
!10371 = !DILocation(line: 5432, column: 19, scope: !10360)
!10372 = !DILocation(line: 5433, column: 8, scope: !10360)
!10373 = !DILocation(line: 5435, column: 11, scope: !10343)
!10374 = !DILocation(line: 5435, column: 9, scope: !10343)
!10375 = !DILocation(line: 5436, column: 41, scope: !10343)
!10376 = !DILocation(line: 5436, column: 4, scope: !10343)
!10377 = !DILocation(line: 5437, column: 31, scope: !10343)
!10378 = !DILocation(line: 5437, column: 4, scope: !10343)
!10379 = !DILocation(line: 5439, column: 13, scope: !10343)
!10380 = !DILocation(line: 5439, column: 4, scope: !10343)
!10381 = !DILocation(line: 5441, column: 37, scope: !10343)
!10382 = !DILocation(line: 5441, column: 48, scope: !10343)
!10383 = !DILocation(line: 5441, column: 17, scope: !10343)
!10384 = !DILocation(line: 5441, column: 9, scope: !10343)
!10385 = !DILocation(line: 5441, column: 15, scope: !10343)
!10386 = !DILocation(line: 5442, column: 2, scope: !10343)
!10387 = !DILocation(line: 5443, column: 66, scope: !10388)
!10388 = distinct !DILexicalBlock(scope: !10337, file: !3, line: 5443, column: 16)
!10389 = !DILocation(line: 5443, column: 41, scope: !10388)
!10390 = !DILocation(line: 5443, column: 16, scope: !10388)
!10391 = !DILocation(line: 5443, column: 16, scope: !10337)
!10392 = !DILocalVariable(name: "loc", scope: !10393, file: !3, line: 5449, type: !2352)
!10393 = distinct !DILexicalBlock(scope: !10388, file: !3, line: 5444, column: 2)
!10394 = !DILocation(line: 5449, column: 15, scope: !10393)
!10395 = !DILocalVariable(name: "type_name", scope: !10393, file: !3, line: 5450, type: !4278)
!10396 = !DILocation(line: 5450, column: 24, scope: !10393)
!10397 = !DILocation(line: 5451, column: 28, scope: !10393)
!10398 = !DILocation(line: 5451, column: 4, scope: !10393)
!10399 = !DILocation(line: 5452, column: 31, scope: !10393)
!10400 = !DILocation(line: 5452, column: 10, scope: !10393)
!10401 = !DILocation(line: 5452, column: 40, scope: !10393)
!10402 = !DILocation(line: 5452, column: 8, scope: !10393)
!10403 = !DILocation(line: 5453, column: 36, scope: !10393)
!10404 = !DILocation(line: 5453, column: 16, scope: !10393)
!10405 = !DILocation(line: 5453, column: 14, scope: !10393)
!10406 = !DILocation(line: 5454, column: 31, scope: !10393)
!10407 = !DILocation(line: 5454, column: 4, scope: !10393)
!10408 = !DILocation(line: 5456, column: 8, scope: !10409)
!10409 = distinct !DILexicalBlock(scope: !10393, file: !3, line: 5456, column: 8)
!10410 = !DILocation(line: 5456, column: 18, scope: !10409)
!10411 = !DILocation(line: 5456, column: 8, scope: !10393)
!10412 = !DILocation(line: 5458, column: 21, scope: !10413)
!10413 = distinct !DILexicalBlock(scope: !10409, file: !3, line: 5457, column: 6)
!10414 = !DILocation(line: 5458, column: 13, scope: !10413)
!10415 = !DILocation(line: 5458, column: 19, scope: !10413)
!10416 = !DILocation(line: 5459, column: 6, scope: !10413)
!10417 = !DILocation(line: 5461, column: 59, scope: !10409)
!10418 = !DILocation(line: 5462, column: 10, scope: !10409)
!10419 = !DILocation(line: 5463, column: 10, scope: !10409)
!10420 = !DILocation(line: 5461, column: 13, scope: !10409)
!10421 = !DILocation(line: 5464, column: 2, scope: !10393)
!10422 = !DILocation(line: 5468, column: 28, scope: !10423)
!10423 = distinct !DILexicalBlock(scope: !10388, file: !3, line: 5466, column: 2)
!10424 = !DILocation(line: 5468, column: 4, scope: !10423)
!10425 = !DILocation(line: 5469, column: 32, scope: !10423)
!10426 = !DILocation(line: 5469, column: 11, scope: !10423)
!10427 = !DILocation(line: 5470, column: 8, scope: !10428)
!10428 = distinct !DILexicalBlock(scope: !10423, file: !3, line: 5470, column: 8)
!10429 = !DILocation(line: 5470, column: 31, scope: !10428)
!10430 = !DILocation(line: 5470, column: 8, scope: !10423)
!10431 = !DILocation(line: 5471, column: 6, scope: !10428)
!10432 = !DILocation(line: 5471, column: 35, scope: !10428)
!10433 = !DILocation(line: 5472, column: 13, scope: !10434)
!10434 = distinct !DILexicalBlock(scope: !10423, file: !3, line: 5472, column: 8)
!10435 = !DILocation(line: 5472, column: 27, scope: !10434)
!10436 = !DILocation(line: 5472, column: 8, scope: !10423)
!10437 = !DILocation(line: 5473, column: 11, scope: !10434)
!10438 = !DILocation(line: 5473, column: 25, scope: !10434)
!10439 = !DILocation(line: 5473, column: 6, scope: !10434)
!10440 = !DILocation(line: 5475, column: 31, scope: !10423)
!10441 = !DILocation(line: 5475, column: 4, scope: !10423)
!10442 = !DILocation(line: 5478, column: 7, scope: !10250)
!10443 = !DILocation(line: 5480, column: 36, scope: !10250)
!10444 = !DILocation(line: 5480, column: 15, scope: !10250)
!10445 = !DILocation(line: 5480, column: 45, scope: !10250)
!10446 = !DILocation(line: 5480, column: 7, scope: !10250)
!10447 = !DILocation(line: 5485, column: 29, scope: !10448)
!10448 = distinct !DILexicalBlock(scope: !10250, file: !3, line: 5481, column: 2)
!10449 = !DILocation(line: 5486, column: 29, scope: !10448)
!10450 = !DILocation(line: 5486, column: 8, scope: !10448)
!10451 = !DILocation(line: 5486, column: 38, scope: !10448)
!10452 = !DILocation(line: 5487, column: 29, scope: !10448)
!10453 = !DILocation(line: 5487, column: 8, scope: !10448)
!10454 = !DILocation(line: 5487, column: 38, scope: !10448)
!10455 = !DILocation(line: 5485, column: 17, scope: !10448)
!10456 = !DILocation(line: 5485, column: 9, scope: !10448)
!10457 = !DILocation(line: 5485, column: 15, scope: !10448)
!10458 = !DILocation(line: 5488, column: 28, scope: !10448)
!10459 = !DILocation(line: 5488, column: 4, scope: !10448)
!10460 = !DILocation(line: 5489, column: 4, scope: !10448)
!10461 = !DILocation(line: 5491, column: 28, scope: !10448)
!10462 = !DILocation(line: 5491, column: 4, scope: !10448)
!10463 = !DILocation(line: 5492, column: 27, scope: !10464)
!10464 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5492, column: 8)
!10465 = !DILocation(line: 5492, column: 9, scope: !10464)
!10466 = !DILocation(line: 5492, column: 8, scope: !10448)
!10467 = !DILocation(line: 5494, column: 21, scope: !10468)
!10468 = distinct !DILexicalBlock(scope: !10464, file: !3, line: 5493, column: 6)
!10469 = !DILocation(line: 5494, column: 13, scope: !10468)
!10470 = !DILocation(line: 5494, column: 19, scope: !10468)
!10471 = !DILocation(line: 5495, column: 8, scope: !10468)
!10472 = !DILocation(line: 5497, column: 34, scope: !10448)
!10473 = !DILocation(line: 5497, column: 9, scope: !10448)
!10474 = !DILocation(line: 5498, column: 32, scope: !10448)
!10475 = !DILocation(line: 5498, column: 15, scope: !10448)
!10476 = !DILocation(line: 5498, column: 7, scope: !10448)
!10477 = !DILocation(line: 5498, column: 13, scope: !10448)
!10478 = !DILocation(line: 5499, column: 27, scope: !10479)
!10479 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5499, column: 8)
!10480 = !DILocation(line: 5499, column: 9, scope: !10479)
!10481 = !DILocation(line: 5499, column: 8, scope: !10448)
!10482 = !DILocation(line: 5501, column: 35, scope: !10483)
!10483 = distinct !DILexicalBlock(scope: !10479, file: !3, line: 5500, column: 6)
!10484 = !DILocation(line: 5501, column: 8, scope: !10483)
!10485 = !DILocation(line: 5502, column: 21, scope: !10483)
!10486 = !DILocation(line: 5502, column: 13, scope: !10483)
!10487 = !DILocation(line: 5502, column: 19, scope: !10483)
!10488 = !DILocation(line: 5503, column: 8, scope: !10483)
!10489 = !DILocation(line: 5505, column: 31, scope: !10448)
!10490 = !DILocation(line: 5505, column: 10, scope: !10448)
!10491 = !DILocation(line: 5505, column: 40, scope: !10448)
!10492 = !DILocation(line: 5505, column: 8, scope: !10448)
!10493 = !DILocation(line: 5506, column: 29, scope: !10448)
!10494 = !DILocation(line: 5506, column: 9, scope: !10448)
!10495 = !DILocation(line: 5506, column: 7, scope: !10448)
!10496 = !DILocation(line: 5507, column: 31, scope: !10448)
!10497 = !DILocation(line: 5507, column: 4, scope: !10448)
!10498 = !DILocation(line: 5509, column: 8, scope: !10499)
!10499 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5509, column: 8)
!10500 = !DILocation(line: 5509, column: 11, scope: !10499)
!10501 = !DILocation(line: 5509, column: 8, scope: !10448)
!10502 = !DILocation(line: 5511, column: 21, scope: !10503)
!10503 = distinct !DILexicalBlock(scope: !10499, file: !3, line: 5510, column: 6)
!10504 = !DILocation(line: 5511, column: 13, scope: !10503)
!10505 = !DILocation(line: 5511, column: 19, scope: !10503)
!10506 = !DILocation(line: 5512, column: 6, scope: !10503)
!10507 = !DILocalVariable(name: "type_expr", scope: !10508, file: !3, line: 5515, type: !2224)
!10508 = distinct !DILexicalBlock(scope: !10499, file: !3, line: 5514, column: 6)
!10509 = !DILocation(line: 5515, column: 13, scope: !10508)
!10510 = !DILocation(line: 5516, column: 37, scope: !10508)
!10511 = !DILocation(line: 5516, column: 45, scope: !10508)
!10512 = !DILocation(line: 5517, column: 23, scope: !10508)
!10513 = !DILocation(line: 5517, column: 9, scope: !10508)
!10514 = !DILocation(line: 5516, column: 21, scope: !10508)
!10515 = !DILocation(line: 5516, column: 13, scope: !10508)
!10516 = !DILocation(line: 5516, column: 19, scope: !10508)
!10517 = !DILocation(line: 5518, column: 12, scope: !10518)
!10518 = distinct !DILexicalBlock(scope: !10508, file: !3, line: 5518, column: 12)
!10519 = !DILocation(line: 5518, column: 12, scope: !10508)
!10520 = !DILocation(line: 5520, column: 18, scope: !10521)
!10521 = distinct !DILexicalBlock(scope: !10518, file: !3, line: 5519, column: 3)
!10522 = !DILocation(line: 5520, column: 10, scope: !10521)
!10523 = !DILocation(line: 5520, column: 16, scope: !10521)
!10524 = !DILocation(line: 5523, column: 5, scope: !10521)
!10525 = !DILocation(line: 5523, column: 47, scope: !10521)
!10526 = !DILocation(line: 5524, column: 3, scope: !10521)
!10527 = !DILocation(line: 5526, column: 4, scope: !10448)
!10528 = !DILocation(line: 5528, column: 28, scope: !10448)
!10529 = !DILocation(line: 5528, column: 4, scope: !10448)
!10530 = !DILocation(line: 5529, column: 27, scope: !10531)
!10531 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5529, column: 8)
!10532 = !DILocation(line: 5529, column: 9, scope: !10531)
!10533 = !DILocation(line: 5529, column: 8, scope: !10448)
!10534 = !DILocation(line: 5531, column: 21, scope: !10535)
!10535 = distinct !DILexicalBlock(scope: !10531, file: !3, line: 5530, column: 6)
!10536 = !DILocation(line: 5531, column: 13, scope: !10535)
!10537 = !DILocation(line: 5531, column: 19, scope: !10535)
!10538 = !DILocation(line: 5532, column: 8, scope: !10535)
!10539 = !DILocation(line: 5534, column: 29, scope: !10448)
!10540 = !DILocation(line: 5534, column: 9, scope: !10448)
!10541 = !DILocation(line: 5534, column: 7, scope: !10448)
!10542 = !DILocation(line: 5535, column: 8, scope: !10543)
!10543 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5535, column: 8)
!10544 = !DILocation(line: 5535, column: 11, scope: !10543)
!10545 = !DILocation(line: 5535, column: 8, scope: !10448)
!10546 = !DILocation(line: 5537, column: 21, scope: !10547)
!10547 = distinct !DILexicalBlock(scope: !10543, file: !3, line: 5536, column: 6)
!10548 = !DILocation(line: 5537, column: 13, scope: !10547)
!10549 = !DILocation(line: 5537, column: 19, scope: !10547)
!10550 = !DILocation(line: 5538, column: 8, scope: !10547)
!10551 = !DILocation(line: 5540, column: 27, scope: !10552)
!10552 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5540, column: 8)
!10553 = !DILocation(line: 5540, column: 9, scope: !10552)
!10554 = !DILocation(line: 5540, column: 8, scope: !10448)
!10555 = !DILocation(line: 5542, column: 35, scope: !10556)
!10556 = distinct !DILexicalBlock(scope: !10552, file: !3, line: 5541, column: 6)
!10557 = !DILocation(line: 5542, column: 8, scope: !10556)
!10558 = !DILocation(line: 5543, column: 21, scope: !10556)
!10559 = !DILocation(line: 5543, column: 13, scope: !10556)
!10560 = !DILocation(line: 5543, column: 19, scope: !10556)
!10561 = !DILocation(line: 5544, column: 8, scope: !10556)
!10562 = !DILocalVariable(name: "type", scope: !10563, file: !3, line: 5547, type: !2224)
!10563 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5546, column: 4)
!10564 = !DILocation(line: 5547, column: 11, scope: !10563)
!10565 = !DILocation(line: 5547, column: 32, scope: !10563)
!10566 = !DILocation(line: 5547, column: 18, scope: !10563)
!10567 = !DILocalVariable(name: "offsetof_ref", scope: !10563, file: !3, line: 5548, type: !2224)
!10568 = !DILocation(line: 5548, column: 11, scope: !10563)
!10569 = !DILocation(line: 5549, column: 10, scope: !10570)
!10570 = distinct !DILexicalBlock(scope: !10563, file: !3, line: 5549, column: 10)
!10571 = !DILocation(line: 5549, column: 18, scope: !10570)
!10572 = !DILocation(line: 5549, column: 15, scope: !10570)
!10573 = !DILocation(line: 5549, column: 10, scope: !10563)
!10574 = !DILocation(line: 5550, column: 23, scope: !10570)
!10575 = !DILocation(line: 5550, column: 21, scope: !10570)
!10576 = !DILocation(line: 5550, column: 8, scope: !10570)
!10577 = !DILocation(line: 5553, column: 18, scope: !10578)
!10578 = distinct !DILexicalBlock(scope: !10570, file: !3, line: 5552, column: 8)
!10579 = !DILocation(line: 5553, column: 16, scope: !10578)
!10580 = !DILocation(line: 5554, column: 3, scope: !10578)
!10581 = !DILocation(line: 5559, column: 34, scope: !10582)
!10582 = distinct !DILexicalBlock(scope: !10563, file: !3, line: 5559, column: 10)
!10583 = !DILocation(line: 5559, column: 10, scope: !10582)
!10584 = !DILocation(line: 5559, column: 10, scope: !10563)
!10585 = !DILocation(line: 5562, column: 6, scope: !10586)
!10586 = distinct !DILexicalBlock(scope: !10582, file: !3, line: 5560, column: 8)
!10587 = !DILocation(line: 5562, column: 11, scope: !10586)
!10588 = !DILocation(line: 5562, column: 46, scope: !10586)
!10589 = !DILocation(line: 5562, column: 25, scope: !10586)
!10590 = !DILocation(line: 5562, column: 55, scope: !10586)
!10591 = !DILocation(line: 5561, column: 18, scope: !10586)
!10592 = !DILocation(line: 5561, column: 16, scope: !10586)
!10593 = !DILocation(line: 5563, column: 27, scope: !10586)
!10594 = !DILocation(line: 5563, column: 3, scope: !10586)
!10595 = !DILocation(line: 5564, column: 3, scope: !10586)
!10596 = !DILocation(line: 5564, column: 34, scope: !10586)
!10597 = !DILocation(line: 5564, column: 10, scope: !10586)
!10598 = !DILocation(line: 5565, column: 10, scope: !10586)
!10599 = !DILocation(line: 5565, column: 37, scope: !10586)
!10600 = !DILocation(line: 5565, column: 13, scope: !10586)
!10601 = !DILocation(line: 5567, column: 10, scope: !10586)
!10602 = !DILocation(line: 5567, column: 37, scope: !10586)
!10603 = !DILocation(line: 5567, column: 13, scope: !10586)
!10604 = !DILocation(line: 5570, column: 35, scope: !10605)
!10605 = distinct !DILexicalBlock(scope: !10606, file: !3, line: 5570, column: 11)
!10606 = distinct !DILexicalBlock(scope: !10586, file: !3, line: 5569, column: 5)
!10607 = !DILocation(line: 5570, column: 11, scope: !10605)
!10608 = !DILocation(line: 5570, column: 11, scope: !10606)
!10609 = !DILocation(line: 5572, column: 31, scope: !10610)
!10610 = distinct !DILexicalBlock(scope: !10605, file: !3, line: 5571, column: 9)
!10611 = !DILocation(line: 5572, column: 10, scope: !10610)
!10612 = !DILocation(line: 5572, column: 40, scope: !10610)
!10613 = !DILocation(line: 5572, column: 8, scope: !10610)
!10614 = !DILocation(line: 5573, column: 36, scope: !10610)
!10615 = !DILocation(line: 5574, column: 8, scope: !10610)
!10616 = !DILocation(line: 5575, column: 8, scope: !10610)
!10617 = !DILocation(line: 5573, column: 19, scope: !10610)
!10618 = !DILocation(line: 5573, column: 17, scope: !10610)
!10619 = !DILocation(line: 5576, column: 4, scope: !10610)
!10620 = !DILocation(line: 5578, column: 40, scope: !10621)
!10621 = distinct !DILexicalBlock(scope: !10605, file: !3, line: 5578, column: 16)
!10622 = !DILocation(line: 5578, column: 16, scope: !10621)
!10623 = !DILocation(line: 5578, column: 16, scope: !10605)
!10624 = !DILocation(line: 5579, column: 9, scope: !10621)
!10625 = !DILabel(scope: !10626, name: "do_dot", file: !3, line: 5580)
!10626 = distinct !DILexicalBlock(scope: !10621, file: !3, line: 5579, column: 9)
!10627 = !DILocation(line: 5580, column: 9, scope: !10626)
!10628 = !DILocation(line: 5581, column: 28, scope: !10626)
!10629 = !DILocation(line: 5581, column: 4, scope: !10626)
!10630 = !DILocation(line: 5582, column: 36, scope: !10631)
!10631 = distinct !DILexicalBlock(scope: !10626, file: !3, line: 5582, column: 8)
!10632 = !DILocation(line: 5582, column: 8, scope: !10631)
!10633 = !DILocation(line: 5582, column: 8, scope: !10626)
!10634 = !DILocation(line: 5585, column: 24, scope: !10635)
!10635 = distinct !DILexicalBlock(scope: !10631, file: !3, line: 5584, column: 6)
!10636 = !DILocation(line: 5585, column: 8, scope: !10635)
!10637 = !DILocation(line: 5586, column: 8, scope: !10635)
!10638 = !DILocation(line: 5589, column: 7, scope: !10626)
!10639 = !DILocation(line: 5589, column: 12, scope: !10626)
!10640 = !DILocation(line: 5590, column: 28, scope: !10626)
!10641 = !DILocation(line: 5590, column: 7, scope: !10626)
!10642 = !DILocation(line: 5590, column: 37, scope: !10626)
!10643 = !DILocation(line: 5588, column: 19, scope: !10626)
!10644 = !DILocation(line: 5588, column: 17, scope: !10626)
!10645 = !DILocation(line: 5591, column: 28, scope: !10626)
!10646 = !DILocation(line: 5591, column: 4, scope: !10626)
!10647 = !DILocation(line: 5592, column: 9, scope: !10626)
!10648 = !DILocalVariable(name: "idx", scope: !10649, file: !3, line: 5595, type: !2224)
!10649 = distinct !DILexicalBlock(scope: !10621, file: !3, line: 5594, column: 9)
!10650 = !DILocation(line: 5595, column: 9, scope: !10649)
!10651 = !DILocation(line: 5596, column: 31, scope: !10649)
!10652 = !DILocation(line: 5596, column: 10, scope: !10649)
!10653 = !DILocation(line: 5596, column: 40, scope: !10649)
!10654 = !DILocation(line: 5596, column: 8, scope: !10649)
!10655 = !DILocation(line: 5597, column: 28, scope: !10649)
!10656 = !DILocation(line: 5597, column: 4, scope: !10649)
!10657 = !DILocation(line: 5598, column: 31, scope: !10649)
!10658 = !DILocation(line: 5598, column: 10, scope: !10649)
!10659 = !DILocation(line: 5598, column: 39, scope: !10649)
!10660 = !DILocation(line: 5598, column: 8, scope: !10649)
!10661 = !DILocation(line: 5599, column: 24, scope: !10649)
!10662 = !DILocation(line: 5599, column: 10, scope: !10649)
!10663 = !DILocation(line: 5599, column: 8, scope: !10649)
!10664 = !DILocation(line: 5600, column: 31, scope: !10649)
!10665 = !DILocation(line: 5600, column: 4, scope: !10649)
!10666 = !DILocation(line: 5602, column: 36, scope: !10649)
!10667 = !DILocation(line: 5602, column: 41, scope: !10649)
!10668 = !DILocation(line: 5602, column: 55, scope: !10649)
!10669 = !DILocation(line: 5602, column: 19, scope: !10649)
!10670 = !DILocation(line: 5602, column: 17, scope: !10649)
!10671 = distinct !{!10671, !10595, !10672}
!10672 = !DILocation(line: 5604, column: 5, scope: !10586)
!10673 = !DILocation(line: 5605, column: 8, scope: !10586)
!10674 = !DILocation(line: 5607, column: 24, scope: !10582)
!10675 = !DILocation(line: 5607, column: 8, scope: !10582)
!10676 = !DILocation(line: 5608, column: 33, scope: !10563)
!10677 = !DILocation(line: 5608, column: 6, scope: !10563)
!10678 = !DILocation(line: 5610, column: 34, scope: !10563)
!10679 = !DILocation(line: 5610, column: 19, scope: !10563)
!10680 = !DILocation(line: 5610, column: 11, scope: !10563)
!10681 = !DILocation(line: 5610, column: 17, scope: !10563)
!10682 = !DILocation(line: 5612, column: 4, scope: !10448)
!10683 = !DILocation(line: 5614, column: 28, scope: !10448)
!10684 = !DILocation(line: 5614, column: 4, scope: !10448)
!10685 = !DILocation(line: 5615, column: 27, scope: !10686)
!10686 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5615, column: 8)
!10687 = !DILocation(line: 5615, column: 9, scope: !10686)
!10688 = !DILocation(line: 5615, column: 8, scope: !10448)
!10689 = !DILocation(line: 5617, column: 21, scope: !10690)
!10690 = distinct !DILexicalBlock(scope: !10686, file: !3, line: 5616, column: 6)
!10691 = !DILocation(line: 5617, column: 13, scope: !10690)
!10692 = !DILocation(line: 5617, column: 19, scope: !10690)
!10693 = !DILocation(line: 5618, column: 8, scope: !10690)
!10694 = !DILocation(line: 5620, column: 31, scope: !10448)
!10695 = !DILocation(line: 5620, column: 10, scope: !10448)
!10696 = !DILocation(line: 5620, column: 40, scope: !10448)
!10697 = !DILocation(line: 5620, column: 8, scope: !10448)
!10698 = !DILocation(line: 5621, column: 34, scope: !10448)
!10699 = !DILocation(line: 5621, column: 9, scope: !10448)
!10700 = !DILocation(line: 5622, column: 27, scope: !10701)
!10701 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5622, column: 8)
!10702 = !DILocation(line: 5622, column: 9, scope: !10701)
!10703 = !DILocation(line: 5622, column: 8, scope: !10448)
!10704 = !DILocation(line: 5624, column: 35, scope: !10705)
!10705 = distinct !DILexicalBlock(scope: !10701, file: !3, line: 5623, column: 6)
!10706 = !DILocation(line: 5624, column: 8, scope: !10705)
!10707 = !DILocation(line: 5625, column: 21, scope: !10705)
!10708 = !DILocation(line: 5625, column: 13, scope: !10705)
!10709 = !DILocation(line: 5625, column: 19, scope: !10705)
!10710 = !DILocation(line: 5626, column: 8, scope: !10705)
!10711 = !DILocation(line: 5628, column: 34, scope: !10448)
!10712 = !DILocation(line: 5628, column: 9, scope: !10448)
!10713 = !DILocation(line: 5629, column: 27, scope: !10714)
!10714 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5629, column: 8)
!10715 = !DILocation(line: 5629, column: 9, scope: !10714)
!10716 = !DILocation(line: 5629, column: 8, scope: !10448)
!10717 = !DILocation(line: 5631, column: 35, scope: !10718)
!10718 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 5630, column: 6)
!10719 = !DILocation(line: 5631, column: 8, scope: !10718)
!10720 = !DILocation(line: 5632, column: 21, scope: !10718)
!10721 = !DILocation(line: 5632, column: 13, scope: !10718)
!10722 = !DILocation(line: 5632, column: 19, scope: !10718)
!10723 = !DILocation(line: 5633, column: 8, scope: !10718)
!10724 = !DILocation(line: 5635, column: 34, scope: !10448)
!10725 = !DILocation(line: 5635, column: 9, scope: !10448)
!10726 = !DILocation(line: 5636, column: 31, scope: !10448)
!10727 = !DILocation(line: 5636, column: 4, scope: !10448)
!10728 = !DILocalVariable(name: "c", scope: !10729, file: !3, line: 5639, type: !2224)
!10729 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5638, column: 4)
!10730 = !DILocation(line: 5639, column: 11, scope: !10729)
!10731 = !DILocation(line: 5641, column: 13, scope: !10729)
!10732 = !DILocation(line: 5641, column: 8, scope: !10729)
!10733 = !DILocation(line: 5642, column: 10, scope: !10734)
!10734 = distinct !DILexicalBlock(scope: !10729, file: !3, line: 5642, column: 10)
!10735 = !DILocation(line: 5642, column: 24, scope: !10734)
!10736 = !DILocation(line: 5643, column: 3, scope: !10734)
!10737 = !DILocation(line: 5643, column: 7, scope: !10734)
!10738 = !DILocation(line: 5642, column: 10, scope: !10729)
!10739 = !DILocation(line: 5644, column: 18, scope: !10734)
!10740 = !DILocation(line: 5644, column: 8, scope: !10734)
!10741 = !DILocation(line: 5647, column: 35, scope: !10729)
!10742 = !DILocation(line: 5647, column: 6, scope: !10729)
!10743 = !DILocation(line: 5648, column: 28, scope: !10729)
!10744 = !DILocation(line: 5648, column: 13, scope: !10729)
!10745 = !DILocation(line: 5648, column: 33, scope: !10729)
!10746 = !DILocation(line: 5648, column: 38, scope: !10729)
!10747 = !DILocation(line: 5650, column: 4, scope: !10448)
!10748 = !DILocation(line: 5652, column: 28, scope: !10448)
!10749 = !DILocation(line: 5652, column: 4, scope: !10448)
!10750 = !DILocation(line: 5653, column: 27, scope: !10751)
!10751 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5653, column: 8)
!10752 = !DILocation(line: 5653, column: 9, scope: !10751)
!10753 = !DILocation(line: 5653, column: 8, scope: !10448)
!10754 = !DILocation(line: 5655, column: 21, scope: !10755)
!10755 = distinct !DILexicalBlock(scope: !10751, file: !3, line: 5654, column: 6)
!10756 = !DILocation(line: 5655, column: 13, scope: !10755)
!10757 = !DILocation(line: 5655, column: 19, scope: !10755)
!10758 = !DILocation(line: 5656, column: 8, scope: !10755)
!10759 = !DILocation(line: 5658, column: 29, scope: !10448)
!10760 = !DILocation(line: 5658, column: 9, scope: !10448)
!10761 = !DILocation(line: 5658, column: 7, scope: !10448)
!10762 = !DILocation(line: 5659, column: 8, scope: !10763)
!10763 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5659, column: 8)
!10764 = !DILocation(line: 5659, column: 11, scope: !10763)
!10765 = !DILocation(line: 5659, column: 8, scope: !10448)
!10766 = !DILocation(line: 5661, column: 21, scope: !10767)
!10767 = distinct !DILexicalBlock(scope: !10763, file: !3, line: 5660, column: 6)
!10768 = !DILocation(line: 5661, column: 13, scope: !10767)
!10769 = !DILocation(line: 5661, column: 19, scope: !10767)
!10770 = !DILocation(line: 5662, column: 8, scope: !10767)
!10771 = !DILocation(line: 5664, column: 27, scope: !10772)
!10772 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5664, column: 8)
!10773 = !DILocation(line: 5664, column: 9, scope: !10772)
!10774 = !DILocation(line: 5664, column: 8, scope: !10448)
!10775 = !DILocation(line: 5666, column: 35, scope: !10776)
!10776 = distinct !DILexicalBlock(scope: !10772, file: !3, line: 5665, column: 6)
!10777 = !DILocation(line: 5666, column: 8, scope: !10776)
!10778 = !DILocation(line: 5667, column: 21, scope: !10776)
!10779 = !DILocation(line: 5667, column: 13, scope: !10776)
!10780 = !DILocation(line: 5667, column: 19, scope: !10776)
!10781 = !DILocation(line: 5668, column: 8, scope: !10776)
!10782 = !DILocation(line: 5670, column: 29, scope: !10448)
!10783 = !DILocation(line: 5670, column: 9, scope: !10448)
!10784 = !DILocation(line: 5670, column: 7, scope: !10448)
!10785 = !DILocation(line: 5671, column: 8, scope: !10786)
!10786 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5671, column: 8)
!10787 = !DILocation(line: 5671, column: 11, scope: !10786)
!10788 = !DILocation(line: 5671, column: 8, scope: !10448)
!10789 = !DILocation(line: 5673, column: 21, scope: !10790)
!10790 = distinct !DILexicalBlock(scope: !10786, file: !3, line: 5672, column: 6)
!10791 = !DILocation(line: 5673, column: 13, scope: !10790)
!10792 = !DILocation(line: 5673, column: 19, scope: !10790)
!10793 = !DILocation(line: 5674, column: 8, scope: !10790)
!10794 = !DILocation(line: 5676, column: 31, scope: !10448)
!10795 = !DILocation(line: 5676, column: 4, scope: !10448)
!10796 = !DILocalVariable(name: "e1", scope: !10797, file: !3, line: 5679, type: !2224)
!10797 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5678, column: 4)
!10798 = !DILocation(line: 5679, column: 11, scope: !10797)
!10799 = !DILocalVariable(name: "e2", scope: !10797, file: !3, line: 5679, type: !2224)
!10800 = !DILocation(line: 5679, column: 15, scope: !10797)
!10801 = !DILocation(line: 5681, column: 11, scope: !10797)
!10802 = !DILocation(line: 5681, column: 9, scope: !10797)
!10803 = !DILocation(line: 5682, column: 11, scope: !10797)
!10804 = !DILocation(line: 5682, column: 9, scope: !10797)
!10805 = !DILocation(line: 5684, column: 30, scope: !10797)
!10806 = !DILocation(line: 5684, column: 34, scope: !10797)
!10807 = !DILocation(line: 5684, column: 19, scope: !10797)
!10808 = !DILocation(line: 5685, column: 10, scope: !10797)
!10809 = !DILocation(line: 5686, column: 10, scope: !10797)
!10810 = !DILocation(line: 5684, column: 11, scope: !10797)
!10811 = !DILocation(line: 5684, column: 17, scope: !10797)
!10812 = !DILocation(line: 5688, column: 4, scope: !10448)
!10813 = !DILocation(line: 5690, column: 4, scope: !10448)
!10814 = !DILocation(line: 5691, column: 28, scope: !10448)
!10815 = !DILocation(line: 5691, column: 4, scope: !10448)
!10816 = !DILocation(line: 5692, column: 27, scope: !10817)
!10817 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5692, column: 8)
!10818 = !DILocation(line: 5692, column: 9, scope: !10817)
!10819 = !DILocation(line: 5692, column: 8, scope: !10448)
!10820 = !DILocation(line: 5694, column: 21, scope: !10821)
!10821 = distinct !DILexicalBlock(scope: !10817, file: !3, line: 5693, column: 6)
!10822 = !DILocation(line: 5694, column: 13, scope: !10821)
!10823 = !DILocation(line: 5694, column: 19, scope: !10821)
!10824 = !DILocation(line: 5695, column: 8, scope: !10821)
!10825 = !DILocalVariable(name: "sel", scope: !10826, file: !3, line: 5698, type: !2224)
!10826 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5697, column: 4)
!10827 = !DILocation(line: 5698, column: 11, scope: !10826)
!10828 = !DILocation(line: 5698, column: 45, scope: !10826)
!10829 = !DILocation(line: 5698, column: 17, scope: !10826)
!10830 = !DILocation(line: 5699, column: 33, scope: !10826)
!10831 = !DILocation(line: 5699, column: 6, scope: !10826)
!10832 = !DILocation(line: 5701, column: 45, scope: !10826)
!10833 = !DILocation(line: 5701, column: 50, scope: !10826)
!10834 = !DILocation(line: 5701, column: 19, scope: !10826)
!10835 = !DILocation(line: 5701, column: 11, scope: !10826)
!10836 = !DILocation(line: 5701, column: 17, scope: !10826)
!10837 = !DILocation(line: 5703, column: 4, scope: !10448)
!10838 = !DILocation(line: 5705, column: 4, scope: !10448)
!10839 = !DILocation(line: 5706, column: 28, scope: !10448)
!10840 = !DILocation(line: 5706, column: 4, scope: !10448)
!10841 = !DILocation(line: 5707, column: 27, scope: !10842)
!10842 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5707, column: 8)
!10843 = !DILocation(line: 5707, column: 9, scope: !10842)
!10844 = !DILocation(line: 5707, column: 8, scope: !10448)
!10845 = !DILocation(line: 5709, column: 21, scope: !10846)
!10846 = distinct !DILexicalBlock(scope: !10842, file: !3, line: 5708, column: 6)
!10847 = !DILocation(line: 5709, column: 13, scope: !10846)
!10848 = !DILocation(line: 5709, column: 19, scope: !10846)
!10849 = !DILocation(line: 5710, column: 8, scope: !10846)
!10850 = !DILocation(line: 5712, column: 36, scope: !10851)
!10851 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5712, column: 8)
!10852 = !DILocation(line: 5712, column: 8, scope: !10851)
!10853 = !DILocation(line: 5712, column: 8, scope: !10448)
!10854 = !DILocation(line: 5714, column: 24, scope: !10855)
!10855 = distinct !DILexicalBlock(scope: !10851, file: !3, line: 5713, column: 6)
!10856 = !DILocation(line: 5714, column: 8, scope: !10855)
!10857 = !DILocation(line: 5715, column: 35, scope: !10855)
!10858 = !DILocation(line: 5715, column: 8, scope: !10855)
!10859 = !DILocation(line: 5716, column: 21, scope: !10855)
!10860 = !DILocation(line: 5716, column: 13, scope: !10855)
!10861 = !DILocation(line: 5716, column: 19, scope: !10855)
!10862 = !DILocation(line: 5717, column: 8, scope: !10855)
!10863 = !DILocalVariable(name: "id", scope: !10864, file: !3, line: 5720, type: !2224)
!10864 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5719, column: 4)
!10865 = !DILocation(line: 5720, column: 11, scope: !10864)
!10866 = !DILocation(line: 5720, column: 37, scope: !10864)
!10867 = !DILocation(line: 5720, column: 16, scope: !10864)
!10868 = !DILocation(line: 5720, column: 46, scope: !10864)
!10869 = !DILocation(line: 5721, column: 30, scope: !10864)
!10870 = !DILocation(line: 5721, column: 6, scope: !10864)
!10871 = !DILocation(line: 5722, column: 33, scope: !10864)
!10872 = !DILocation(line: 5722, column: 6, scope: !10864)
!10873 = !DILocation(line: 5724, column: 45, scope: !10864)
!10874 = !DILocation(line: 5724, column: 19, scope: !10864)
!10875 = !DILocation(line: 5724, column: 11, scope: !10864)
!10876 = !DILocation(line: 5724, column: 17, scope: !10864)
!10877 = !DILocation(line: 5726, column: 4, scope: !10448)
!10878 = !DILocation(line: 5729, column: 4, scope: !10448)
!10879 = !DILocation(line: 5730, column: 28, scope: !10448)
!10880 = !DILocation(line: 5730, column: 4, scope: !10448)
!10881 = !DILocation(line: 5731, column: 27, scope: !10882)
!10882 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5731, column: 8)
!10883 = !DILocation(line: 5731, column: 9, scope: !10882)
!10884 = !DILocation(line: 5731, column: 8, scope: !10448)
!10885 = !DILocation(line: 5733, column: 21, scope: !10886)
!10886 = distinct !DILexicalBlock(scope: !10882, file: !3, line: 5732, column: 6)
!10887 = !DILocation(line: 5733, column: 13, scope: !10886)
!10888 = !DILocation(line: 5733, column: 19, scope: !10886)
!10889 = !DILocation(line: 5734, column: 8, scope: !10886)
!10890 = !DILocation(line: 5736, column: 29, scope: !10448)
!10891 = !DILocation(line: 5736, column: 9, scope: !10448)
!10892 = !DILocation(line: 5736, column: 7, scope: !10448)
!10893 = !DILocation(line: 5737, column: 8, scope: !10894)
!10894 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5737, column: 8)
!10895 = !DILocation(line: 5737, column: 11, scope: !10894)
!10896 = !DILocation(line: 5737, column: 8, scope: !10448)
!10897 = !DILocation(line: 5739, column: 21, scope: !10898)
!10898 = distinct !DILexicalBlock(scope: !10894, file: !3, line: 5738, column: 6)
!10899 = !DILocation(line: 5739, column: 13, scope: !10898)
!10900 = !DILocation(line: 5739, column: 19, scope: !10898)
!10901 = !DILocation(line: 5740, column: 35, scope: !10898)
!10902 = !DILocation(line: 5740, column: 8, scope: !10898)
!10903 = !DILocation(line: 5741, column: 8, scope: !10898)
!10904 = !DILocation(line: 5743, column: 31, scope: !10448)
!10905 = !DILocation(line: 5743, column: 4, scope: !10448)
!10906 = !DILocalVariable(name: "type", scope: !10907, file: !3, line: 5746, type: !2224)
!10907 = distinct !DILexicalBlock(scope: !10448, file: !3, line: 5745, column: 4)
!10908 = !DILocation(line: 5746, column: 11, scope: !10907)
!10909 = !DILocation(line: 5746, column: 32, scope: !10907)
!10910 = !DILocation(line: 5746, column: 18, scope: !10907)
!10911 = !DILocation(line: 5747, column: 43, scope: !10907)
!10912 = !DILocation(line: 5747, column: 19, scope: !10907)
!10913 = !DILocation(line: 5747, column: 11, scope: !10907)
!10914 = !DILocation(line: 5747, column: 17, scope: !10907)
!10915 = !DILocation(line: 5749, column: 4, scope: !10448)
!10916 = !DILocation(line: 5751, column: 20, scope: !10448)
!10917 = !DILocation(line: 5751, column: 4, scope: !10448)
!10918 = !DILocation(line: 5752, column: 17, scope: !10448)
!10919 = !DILocation(line: 5752, column: 9, scope: !10448)
!10920 = !DILocation(line: 5752, column: 15, scope: !10448)
!10921 = !DILocation(line: 5753, column: 4, scope: !10448)
!10922 = !DILocation(line: 5755, column: 7, scope: !10250)
!10923 = !DILocation(line: 5757, column: 11, scope: !10924)
!10924 = distinct !DILexicalBlock(scope: !10250, file: !3, line: 5757, column: 11)
!10925 = !DILocation(line: 5757, column: 11, scope: !10250)
!10926 = !DILocalVariable(name: "receiver", scope: !10927, file: !3, line: 5759, type: !2224)
!10927 = distinct !DILexicalBlock(scope: !10924, file: !3, line: 5758, column: 2)
!10928 = !DILocation(line: 5759, column: 9, scope: !10927)
!10929 = !DILocalVariable(name: "args", scope: !10927, file: !3, line: 5759, type: !2224)
!10930 = !DILocation(line: 5759, column: 19, scope: !10927)
!10931 = !DILocation(line: 5760, column: 28, scope: !10927)
!10932 = !DILocation(line: 5760, column: 4, scope: !10927)
!10933 = !DILocation(line: 5761, column: 39, scope: !10927)
!10934 = !DILocation(line: 5761, column: 15, scope: !10927)
!10935 = !DILocation(line: 5761, column: 13, scope: !10927)
!10936 = !DILocation(line: 5762, column: 39, scope: !10927)
!10937 = !DILocation(line: 5762, column: 11, scope: !10927)
!10938 = !DILocation(line: 5762, column: 9, scope: !10927)
!10939 = !DILocation(line: 5763, column: 31, scope: !10927)
!10940 = !DILocation(line: 5763, column: 4, scope: !10927)
!10941 = !DILocation(line: 5765, column: 42, scope: !10927)
!10942 = !DILocation(line: 5765, column: 17, scope: !10927)
!10943 = !DILocation(line: 5765, column: 9, scope: !10927)
!10944 = !DILocation(line: 5765, column: 15, scope: !10927)
!10945 = !DILocation(line: 5767, column: 4, scope: !10927)
!10946 = !DILocation(line: 5771, column: 23, scope: !10250)
!10947 = !DILocation(line: 5771, column: 7, scope: !10250)
!10948 = !DILocation(line: 5772, column: 20, scope: !10250)
!10949 = !DILocation(line: 5772, column: 12, scope: !10250)
!10950 = !DILocation(line: 5772, column: 18, scope: !10250)
!10951 = !DILocation(line: 5773, column: 7, scope: !10250)
!10952 = !DILocation(line: 5775, column: 53, scope: !10221)
!10953 = !DILocation(line: 5775, column: 61, scope: !10221)
!10954 = !DILocation(line: 5775, column: 10, scope: !10221)
!10955 = !DILocation(line: 5775, column: 3, scope: !10221)
!10956 = distinct !DISubprogram(name: "c_parser_compound_statement_nostart", scope: !3, file: !3, line: 3422, type: !4514, scopeLine: 3423, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!10957 = !DILocalVariable(name: "parser", arg: 1, scope: !10956, file: !3, line: 3422, type: !3401)
!10958 = !DILocation(line: 3422, column: 48, scope: !10956)
!10959 = !DILocalVariable(name: "last_stmt", scope: !10956, file: !3, line: 3424, type: !2344)
!10960 = !DILocation(line: 3424, column: 8, scope: !10956)
!10961 = !DILocalVariable(name: "last_label", scope: !10956, file: !3, line: 3425, type: !2344)
!10962 = !DILocation(line: 3425, column: 8, scope: !10956)
!10963 = !DILocalVariable(name: "save_valid_for_pragma", scope: !10956, file: !3, line: 3426, type: !2344)
!10964 = !DILocation(line: 3426, column: 8, scope: !10956)
!10965 = !DILocation(line: 3426, column: 32, scope: !10956)
!10966 = !DILocalVariable(name: "label_loc", scope: !10956, file: !3, line: 3427, type: !2352)
!10967 = !DILocation(line: 3427, column: 14, scope: !10956)
!10968 = !DILocation(line: 3428, column: 31, scope: !10969)
!10969 = distinct !DILexicalBlock(scope: !10956, file: !3, line: 3428, column: 7)
!10970 = !DILocation(line: 3428, column: 7, scope: !10969)
!10971 = !DILocation(line: 3428, column: 7, scope: !10956)
!10972 = !DILocation(line: 3430, column: 31, scope: !10973)
!10973 = distinct !DILexicalBlock(scope: !10969, file: !3, line: 3429, column: 5)
!10974 = !DILocation(line: 3430, column: 7, scope: !10973)
!10975 = !DILocation(line: 3431, column: 7, scope: !10973)
!10976 = !DILocation(line: 3433, column: 3, scope: !10956)
!10977 = !DILocation(line: 3434, column: 39, scope: !10978)
!10978 = distinct !DILexicalBlock(scope: !10956, file: !3, line: 3434, column: 7)
!10979 = !DILocation(line: 3434, column: 7, scope: !10978)
!10980 = !DILocation(line: 3434, column: 7, scope: !10956)
!10981 = !DILocation(line: 3438, column: 7, scope: !10982)
!10982 = distinct !DILexicalBlock(scope: !10978, file: !3, line: 3435, column: 5)
!10983 = !DILocation(line: 3439, column: 7, scope: !10982)
!10984 = !DILocation(line: 3439, column: 46, scope: !10982)
!10985 = !DILocation(line: 3439, column: 14, scope: !10982)
!10986 = !DILocation(line: 3441, column: 37, scope: !10987)
!10987 = distinct !DILexicalBlock(scope: !10982, file: !3, line: 3440, column: 2)
!10988 = !DILocation(line: 3441, column: 16, scope: !10987)
!10989 = !DILocation(line: 3441, column: 46, scope: !10987)
!10990 = !DILocation(line: 3441, column: 14, scope: !10987)
!10991 = !DILocation(line: 3442, column: 28, scope: !10987)
!10992 = !DILocation(line: 3442, column: 4, scope: !10987)
!10993 = !DILocation(line: 3445, column: 4, scope: !10987)
!10994 = !DILocalVariable(name: "label", scope: !10995, file: !3, line: 3447, type: !2224)
!10995 = distinct !DILexicalBlock(scope: !10987, file: !3, line: 3446, column: 6)
!10996 = !DILocation(line: 3447, column: 13, scope: !10995)
!10997 = !DILocation(line: 3448, column: 40, scope: !10998)
!10998 = distinct !DILexicalBlock(scope: !10995, file: !3, line: 3448, column: 12)
!10999 = !DILocation(line: 3448, column: 12, scope: !10998)
!11000 = !DILocation(line: 3448, column: 12, scope: !10995)
!11001 = !DILocation(line: 3450, column: 21, scope: !11002)
!11002 = distinct !DILexicalBlock(scope: !10998, file: !3, line: 3449, column: 3)
!11003 = !DILocation(line: 3450, column: 5, scope: !11002)
!11004 = !DILocation(line: 3451, column: 5, scope: !11002)
!11005 = !DILocation(line: 3454, column: 41, scope: !10995)
!11006 = !DILocation(line: 3454, column: 20, scope: !10995)
!11007 = !DILocation(line: 3454, column: 50, scope: !10995)
!11008 = !DILocation(line: 3454, column: 5, scope: !10995)
!11009 = !DILocation(line: 3454, column: 3, scope: !10995)
!11010 = !DILocation(line: 3455, column: 8, scope: !10995)
!11011 = !DILocation(line: 3455, column: 38, scope: !10995)
!11012 = !DILocation(line: 3456, column: 30, scope: !10995)
!11013 = !DILocation(line: 3456, column: 52, scope: !10995)
!11014 = !DILocation(line: 3456, column: 18, scope: !10995)
!11015 = !DILocation(line: 3456, column: 8, scope: !10995)
!11016 = !DILocation(line: 3457, column: 32, scope: !10995)
!11017 = !DILocation(line: 3457, column: 8, scope: !10995)
!11018 = !DILocation(line: 3458, column: 36, scope: !11019)
!11019 = distinct !DILexicalBlock(scope: !10995, file: !3, line: 3458, column: 12)
!11020 = !DILocation(line: 3458, column: 12, scope: !11019)
!11021 = !DILocation(line: 3458, column: 12, scope: !10995)
!11022 = !DILocation(line: 3459, column: 27, scope: !11019)
!11023 = !DILocation(line: 3459, column: 3, scope: !11019)
!11024 = !DILocation(line: 3461, column: 3, scope: !11019)
!11025 = distinct !{!11025, !10993, !11026}
!11026 = !DILocation(line: 3462, column: 6, scope: !10987)
!11027 = !DILocation(line: 3463, column: 31, scope: !10987)
!11028 = !DILocation(line: 3463, column: 4, scope: !10987)
!11029 = distinct !{!11029, !10983, !11030}
!11030 = !DILocation(line: 3464, column: 2, scope: !10982)
!11031 = !DILocation(line: 3465, column: 16, scope: !10982)
!11032 = !DILocation(line: 3465, column: 7, scope: !10982)
!11033 = !DILocation(line: 3466, column: 5, scope: !10982)
!11034 = !DILocation(line: 3468, column: 31, scope: !11035)
!11035 = distinct !DILexicalBlock(scope: !10956, file: !3, line: 3468, column: 7)
!11036 = !DILocation(line: 3468, column: 7, scope: !11035)
!11037 = !DILocation(line: 3468, column: 7, scope: !10956)
!11038 = !DILocation(line: 3470, column: 44, scope: !11039)
!11039 = distinct !DILexicalBlock(scope: !11035, file: !3, line: 3469, column: 5)
!11040 = !DILocation(line: 3470, column: 7, scope: !11039)
!11041 = !DILocation(line: 3471, column: 23, scope: !11039)
!11042 = !DILocation(line: 3471, column: 7, scope: !11039)
!11043 = !DILocation(line: 3472, column: 31, scope: !11039)
!11044 = !DILocation(line: 3472, column: 7, scope: !11039)
!11045 = !DILocation(line: 3473, column: 7, scope: !11039)
!11046 = !DILocation(line: 3475, column: 3, scope: !10956)
!11047 = !DILocation(line: 3475, column: 38, scope: !10956)
!11048 = !DILocation(line: 3475, column: 10, scope: !10956)
!11049 = !DILocalVariable(name: "loc", scope: !11050, file: !3, line: 3477, type: !2352)
!11050 = distinct !DILexicalBlock(scope: !10956, file: !3, line: 3476, column: 5)
!11051 = !DILocation(line: 3477, column: 18, scope: !11050)
!11052 = !DILocation(line: 3477, column: 45, scope: !11050)
!11053 = !DILocation(line: 3477, column: 24, scope: !11050)
!11054 = !DILocation(line: 3477, column: 54, scope: !11050)
!11055 = !DILocation(line: 3478, column: 43, scope: !11056)
!11056 = distinct !DILexicalBlock(scope: !11050, file: !3, line: 3478, column: 11)
!11057 = !DILocation(line: 3478, column: 11, scope: !11056)
!11058 = !DILocation(line: 3479, column: 4, scope: !11056)
!11059 = !DILocation(line: 3479, column: 39, scope: !11056)
!11060 = !DILocation(line: 3479, column: 7, scope: !11056)
!11061 = !DILocation(line: 3480, column: 4, scope: !11056)
!11062 = !DILocation(line: 3480, column: 32, scope: !11056)
!11063 = !DILocation(line: 3480, column: 8, scope: !11056)
!11064 = !DILocation(line: 3481, column: 8, scope: !11056)
!11065 = !DILocation(line: 3481, column: 36, scope: !11056)
!11066 = !DILocation(line: 3481, column: 11, scope: !11056)
!11067 = !DILocation(line: 3481, column: 45, scope: !11056)
!11068 = !DILocation(line: 3481, column: 50, scope: !11056)
!11069 = !DILocation(line: 3478, column: 11, scope: !11050)
!11070 = !DILocation(line: 3483, column: 40, scope: !11071)
!11071 = distinct !DILexicalBlock(scope: !11072, file: !3, line: 3483, column: 8)
!11072 = distinct !DILexicalBlock(scope: !11056, file: !3, line: 3482, column: 2)
!11073 = !DILocation(line: 3483, column: 8, scope: !11071)
!11074 = !DILocation(line: 3483, column: 8, scope: !11072)
!11075 = !DILocation(line: 3484, column: 43, scope: !11071)
!11076 = !DILocation(line: 3484, column: 18, scope: !11071)
!11077 = !DILocation(line: 3484, column: 52, scope: !11071)
!11078 = !DILocation(line: 3484, column: 16, scope: !11071)
!11079 = !DILocation(line: 3484, column: 6, scope: !11071)
!11080 = !DILocation(line: 3486, column: 39, scope: !11071)
!11081 = !DILocation(line: 3486, column: 18, scope: !11071)
!11082 = !DILocation(line: 3486, column: 48, scope: !11071)
!11083 = !DILocation(line: 3486, column: 16, scope: !11071)
!11084 = !DILocation(line: 3487, column: 15, scope: !11072)
!11085 = !DILocation(line: 3488, column: 14, scope: !11072)
!11086 = !DILocation(line: 3489, column: 4, scope: !11072)
!11087 = !DILocation(line: 3490, column: 20, scope: !11072)
!11088 = !DILocation(line: 3490, column: 4, scope: !11072)
!11089 = !DILocation(line: 3491, column: 2, scope: !11072)
!11090 = !DILocation(line: 3492, column: 17, scope: !11091)
!11091 = distinct !DILexicalBlock(scope: !11056, file: !3, line: 3492, column: 16)
!11092 = !DILocation(line: 3493, column: 9, scope: !11091)
!11093 = !DILocation(line: 3493, column: 50, scope: !11091)
!11094 = !DILocation(line: 3493, column: 12, scope: !11091)
!11095 = !DILocation(line: 3492, column: 16, scope: !11056)
!11096 = !DILocation(line: 3495, column: 15, scope: !11097)
!11097 = distinct !DILexicalBlock(scope: !11091, file: !3, line: 3494, column: 2)
!11098 = !DILocation(line: 3496, column: 4, scope: !11097)
!11099 = !DILocation(line: 3497, column: 35, scope: !11097)
!11100 = !DILocation(line: 3497, column: 4, scope: !11097)
!11101 = !DILocation(line: 3498, column: 8, scope: !11102)
!11102 = distinct !DILexicalBlock(scope: !11097, file: !3, line: 3498, column: 8)
!11103 = !DILocation(line: 3498, column: 8, scope: !11097)
!11104 = !DILocation(line: 3499, column: 19, scope: !11102)
!11105 = !DILocation(line: 3500, column: 6, scope: !11102)
!11106 = !DILocation(line: 3500, column: 15, scope: !11102)
!11107 = !DILocation(line: 3500, column: 19, scope: !11102)
!11108 = !DILocation(line: 3500, column: 18, scope: !11102)
!11109 = !DILocation(line: 0, scope: !11102)
!11110 = !DILocation(line: 3500, column: 5, scope: !11102)
!11111 = !DILocation(line: 3499, column: 6, scope: !11102)
!11112 = !DILocation(line: 3504, column: 14, scope: !11097)
!11113 = !DILocation(line: 3505, column: 2, scope: !11097)
!11114 = !DILocation(line: 3506, column: 17, scope: !11115)
!11115 = distinct !DILexicalBlock(scope: !11091, file: !3, line: 3506, column: 16)
!11116 = !DILocation(line: 3507, column: 9, scope: !11115)
!11117 = !DILocation(line: 3507, column: 44, scope: !11115)
!11118 = !DILocation(line: 3507, column: 12, scope: !11115)
!11119 = !DILocation(line: 3506, column: 16, scope: !11091)
!11120 = !DILocation(line: 3513, column: 4, scope: !11121)
!11121 = distinct !DILexicalBlock(scope: !11115, file: !3, line: 3508, column: 2)
!11122 = !DILocation(line: 3513, column: 36, scope: !11121)
!11123 = !DILocation(line: 3513, column: 11, scope: !11121)
!11124 = !DILocation(line: 3513, column: 45, scope: !11121)
!11125 = !DILocation(line: 3513, column: 50, scope: !11121)
!11126 = !DILocation(line: 3514, column: 4, scope: !11121)
!11127 = !DILocation(line: 3514, column: 33, scope: !11121)
!11128 = !DILocation(line: 3514, column: 8, scope: !11121)
!11129 = !DILocation(line: 3514, column: 42, scope: !11121)
!11130 = !DILocation(line: 3515, column: 8, scope: !11121)
!11131 = !DILocation(line: 0, scope: !11121)
!11132 = !DILocation(line: 3516, column: 30, scope: !11121)
!11133 = !DILocation(line: 3516, column: 6, scope: !11121)
!11134 = distinct !{!11134, !11120, !11135}
!11135 = !DILocation(line: 3516, column: 36, scope: !11121)
!11136 = !DILocation(line: 3517, column: 59, scope: !11137)
!11137 = distinct !DILexicalBlock(scope: !11121, file: !3, line: 3517, column: 8)
!11138 = !DILocation(line: 3517, column: 34, scope: !11137)
!11139 = !DILocation(line: 3517, column: 8, scope: !11137)
!11140 = !DILocation(line: 3517, column: 8, scope: !11121)
!11141 = !DILocalVariable(name: "ext", scope: !11142, file: !3, line: 3519, type: !2321)
!11142 = distinct !DILexicalBlock(scope: !11137, file: !3, line: 3518, column: 6)
!11143 = !DILocation(line: 3519, column: 12, scope: !11142)
!11144 = !DILocation(line: 3520, column: 14, scope: !11142)
!11145 = !DILocation(line: 3520, column: 12, scope: !11142)
!11146 = !DILocation(line: 3521, column: 32, scope: !11142)
!11147 = !DILocation(line: 3521, column: 8, scope: !11142)
!11148 = !DILocation(line: 3522, column: 19, scope: !11142)
!11149 = !DILocation(line: 3523, column: 8, scope: !11142)
!11150 = !DILocation(line: 3524, column: 39, scope: !11142)
!11151 = !DILocation(line: 3524, column: 8, scope: !11142)
!11152 = !DILocation(line: 3527, column: 39, scope: !11142)
!11153 = !DILocation(line: 3527, column: 8, scope: !11142)
!11154 = !DILocation(line: 3528, column: 12, scope: !11155)
!11155 = distinct !DILexicalBlock(scope: !11142, file: !3, line: 3528, column: 12)
!11156 = !DILocation(line: 3528, column: 12, scope: !11142)
!11157 = !DILocation(line: 3529, column: 16, scope: !11155)
!11158 = !DILocation(line: 3529, column: 22, scope: !11155)
!11159 = !DILocation(line: 3529, column: 31, scope: !11155)
!11160 = !DILocation(line: 3529, column: 35, scope: !11155)
!11161 = !DILocation(line: 3529, column: 34, scope: !11155)
!11162 = !DILocation(line: 0, scope: !11155)
!11163 = !DILocation(line: 3529, column: 21, scope: !11155)
!11164 = !DILocation(line: 3529, column: 3, scope: !11155)
!11165 = !DILocation(line: 3533, column: 18, scope: !11142)
!11166 = !DILocation(line: 3534, column: 6, scope: !11142)
!11167 = !DILocation(line: 3536, column: 6, scope: !11137)
!11168 = !DILocation(line: 3537, column: 2, scope: !11121)
!11169 = !DILocation(line: 3538, column: 40, scope: !11170)
!11170 = distinct !DILexicalBlock(scope: !11115, file: !3, line: 3538, column: 16)
!11171 = !DILocation(line: 3538, column: 16, scope: !11170)
!11172 = !DILocation(line: 3538, column: 16, scope: !11115)
!11173 = !DILocation(line: 3545, column: 25, scope: !11174)
!11174 = distinct !DILexicalBlock(scope: !11175, file: !3, line: 3545, column: 8)
!11175 = distinct !DILexicalBlock(scope: !11170, file: !3, line: 3539, column: 2)
!11176 = !DILocation(line: 3545, column: 8, scope: !11174)
!11177 = !DILocation(line: 3545, column: 8, scope: !11175)
!11178 = !DILocation(line: 3546, column: 17, scope: !11174)
!11179 = !DILocation(line: 3546, column: 36, scope: !11174)
!11180 = !DILocation(line: 3546, column: 6, scope: !11174)
!11181 = !DILocation(line: 3547, column: 2, scope: !11175)
!11182 = !DILocation(line: 3548, column: 40, scope: !11183)
!11183 = distinct !DILexicalBlock(scope: !11170, file: !3, line: 3548, column: 16)
!11184 = !DILocation(line: 3548, column: 16, scope: !11183)
!11185 = !DILocation(line: 3548, column: 16, scope: !11170)
!11186 = !DILocation(line: 3550, column: 41, scope: !11187)
!11187 = distinct !DILexicalBlock(scope: !11183, file: !3, line: 3549, column: 2)
!11188 = !DILocation(line: 3550, column: 4, scope: !11187)
!11189 = !DILocation(line: 3551, column: 20, scope: !11187)
!11190 = !DILocation(line: 3551, column: 4, scope: !11187)
!11191 = !DILocation(line: 3552, column: 4, scope: !11187)
!11192 = !DILocation(line: 3554, column: 48, scope: !11193)
!11193 = distinct !DILexicalBlock(scope: !11183, file: !3, line: 3554, column: 16)
!11194 = !DILocation(line: 3554, column: 16, scope: !11193)
!11195 = !DILocation(line: 3554, column: 16, scope: !11183)
!11196 = !DILocation(line: 3556, column: 15, scope: !11197)
!11197 = distinct !DILexicalBlock(scope: !11198, file: !3, line: 3556, column: 15)
!11198 = distinct !DILexicalBlock(scope: !11193, file: !3, line: 3555, column: 9)
!11199 = !DILocation(line: 3556, column: 23, scope: !11197)
!11200 = !DILocation(line: 3556, column: 15, scope: !11198)
!11201 = !DILocation(line: 3558, column: 45, scope: !11202)
!11202 = distinct !DILexicalBlock(scope: !11197, file: !3, line: 3557, column: 13)
!11203 = !DILocation(line: 3558, column: 8, scope: !11202)
!11204 = !DILocation(line: 3559, column: 25, scope: !11202)
!11205 = !DILocation(line: 3559, column: 15, scope: !11202)
!11206 = !DILocation(line: 3560, column: 15, scope: !11202)
!11207 = !DILocation(line: 3564, column: 25, scope: !11208)
!11208 = distinct !DILexicalBlock(scope: !11197, file: !3, line: 3563, column: 13)
!11209 = !DILocation(line: 3564, column: 15, scope: !11208)
!11210 = !DILocation(line: 3565, column: 39, scope: !11208)
!11211 = !DILocation(line: 3565, column: 15, scope: !11208)
!11212 = !DILocation(line: 3566, column: 15, scope: !11208)
!11213 = distinct !{!11213, !11046, !11214}
!11214 = !DILocation(line: 3579, column: 5, scope: !10956)
!11215 = !DILocation(line: 3570, column: 2, scope: !11193)
!11216 = !DILabel(scope: !11217, name: "statement", file: !3, line: 3571)
!11217 = distinct !DILexicalBlock(scope: !11193, file: !3, line: 3570, column: 2)
!11218 = !DILocation(line: 3571, column: 2, scope: !11217)
!11219 = !DILocation(line: 3572, column: 15, scope: !11217)
!11220 = !DILocation(line: 3573, column: 14, scope: !11217)
!11221 = !DILocation(line: 3574, column: 4, scope: !11217)
!11222 = !DILocation(line: 3575, column: 37, scope: !11217)
!11223 = !DILocation(line: 3575, column: 4, scope: !11217)
!11224 = !DILocation(line: 3578, column: 7, scope: !11050)
!11225 = !DILocation(line: 3578, column: 15, scope: !11050)
!11226 = !DILocation(line: 3578, column: 21, scope: !11050)
!11227 = !DILocation(line: 3580, column: 7, scope: !11228)
!11228 = distinct !DILexicalBlock(scope: !10956, file: !3, line: 3580, column: 7)
!11229 = !DILocation(line: 3580, column: 7, scope: !10956)
!11230 = !DILocation(line: 3581, column: 15, scope: !11228)
!11231 = !DILocation(line: 3581, column: 5, scope: !11228)
!11232 = !DILocation(line: 3582, column: 27, scope: !10956)
!11233 = !DILocation(line: 3582, column: 3, scope: !10956)
!11234 = !DILocation(line: 3584, column: 40, scope: !10956)
!11235 = !DILocation(line: 3584, column: 3, scope: !10956)
!11236 = !DILocation(line: 3585, column: 1, scope: !10956)
!11237 = distinct !DISubprogram(name: "c_parser_objc_selector_arg", scope: !3, file: !3, line: 6866, type: !6114, scopeLine: 6867, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!11238 = !DILocalVariable(name: "parser", arg: 1, scope: !11237, file: !3, line: 6866, type: !3401)
!11239 = !DILocation(line: 6866, column: 39, scope: !11237)
!11240 = !DILocalVariable(name: "sel", scope: !11237, file: !3, line: 6868, type: !2224)
!11241 = !DILocation(line: 6868, column: 8, scope: !11237)
!11242 = !DILocation(line: 6868, column: 38, scope: !11237)
!11243 = !DILocation(line: 6868, column: 14, scope: !11237)
!11244 = !DILocalVariable(name: "list", scope: !11237, file: !3, line: 6869, type: !2224)
!11245 = !DILocation(line: 6869, column: 8, scope: !11237)
!11246 = !DILocation(line: 6870, column: 7, scope: !11247)
!11247 = distinct !DILexicalBlock(scope: !11237, file: !3, line: 6870, column: 7)
!11248 = !DILocation(line: 6870, column: 11, scope: !11247)
!11249 = !DILocation(line: 6870, column: 42, scope: !11247)
!11250 = !DILocation(line: 6870, column: 14, scope: !11247)
!11251 = !DILocation(line: 6870, column: 7, scope: !11237)
!11252 = !DILocation(line: 6871, column: 12, scope: !11247)
!11253 = !DILocation(line: 6871, column: 5, scope: !11247)
!11254 = !DILocation(line: 6872, column: 3, scope: !11237)
!11255 = !DILocation(line: 6874, column: 30, scope: !11256)
!11256 = distinct !DILexicalBlock(scope: !11257, file: !3, line: 6874, column: 11)
!11257 = distinct !DILexicalBlock(scope: !11237, file: !3, line: 6873, column: 5)
!11258 = !DILocation(line: 6874, column: 12, scope: !11256)
!11259 = !DILocation(line: 6874, column: 11, scope: !11257)
!11260 = !DILocation(line: 6875, column: 9, scope: !11256)
!11261 = !DILocation(line: 6875, column: 2, scope: !11256)
!11262 = !DILocation(line: 6876, column: 23, scope: !11257)
!11263 = !DILocation(line: 6876, column: 29, scope: !11257)
!11264 = !DILocation(line: 6876, column: 14, scope: !11257)
!11265 = !DILocation(line: 6876, column: 12, scope: !11257)
!11266 = !DILocation(line: 6877, column: 37, scope: !11257)
!11267 = !DILocation(line: 6877, column: 13, scope: !11257)
!11268 = !DILocation(line: 6877, column: 11, scope: !11257)
!11269 = !DILocation(line: 6878, column: 12, scope: !11270)
!11270 = distinct !DILexicalBlock(scope: !11257, file: !3, line: 6878, column: 11)
!11271 = !DILocation(line: 6878, column: 16, scope: !11270)
!11272 = !DILocation(line: 6878, column: 47, scope: !11270)
!11273 = !DILocation(line: 6878, column: 19, scope: !11270)
!11274 = !DILocation(line: 6878, column: 11, scope: !11257)
!11275 = !DILocation(line: 6879, column: 2, scope: !11270)
!11276 = distinct !{!11276, !11254, !11277}
!11277 = !DILocation(line: 6880, column: 5, scope: !11237)
!11278 = !DILocation(line: 6881, column: 10, scope: !11237)
!11279 = !DILocation(line: 6881, column: 3, scope: !11237)
!11280 = !DILocation(line: 6882, column: 1, scope: !11237)
!11281 = distinct !DISubprogram(name: "c_parser_objc_receiver", scope: !3, file: !3, line: 6893, type: !6114, scopeLine: 6894, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!11282 = !DILocalVariable(name: "parser", arg: 1, scope: !11281, file: !3, line: 6893, type: !3401)
!11283 = !DILocation(line: 6893, column: 35, scope: !11281)
!11284 = !DILocation(line: 6895, column: 28, scope: !11285)
!11285 = distinct !DILexicalBlock(scope: !11281, file: !3, line: 6895, column: 7)
!11286 = !DILocation(line: 6895, column: 7, scope: !11285)
!11287 = !DILocation(line: 6895, column: 37, scope: !11285)
!11288 = !DILocation(line: 6895, column: 42, scope: !11285)
!11289 = !DILocation(line: 6896, column: 7, scope: !11285)
!11290 = !DILocation(line: 6896, column: 32, scope: !11285)
!11291 = !DILocation(line: 6896, column: 11, scope: !11285)
!11292 = !DILocation(line: 6896, column: 41, scope: !11285)
!11293 = !DILocation(line: 6896, column: 49, scope: !11285)
!11294 = !DILocation(line: 6897, column: 4, scope: !11285)
!11295 = !DILocation(line: 6897, column: 28, scope: !11285)
!11296 = !DILocation(line: 6897, column: 7, scope: !11285)
!11297 = !DILocation(line: 6897, column: 37, scope: !11285)
!11298 = !DILocation(line: 6897, column: 45, scope: !11285)
!11299 = !DILocation(line: 6895, column: 7, scope: !11281)
!11300 = !DILocalVariable(name: "id", scope: !11301, file: !3, line: 6899, type: !2224)
!11301 = distinct !DILexicalBlock(scope: !11285, file: !3, line: 6898, column: 5)
!11302 = !DILocation(line: 6899, column: 12, scope: !11301)
!11303 = !DILocation(line: 6899, column: 38, scope: !11301)
!11304 = !DILocation(line: 6899, column: 17, scope: !11301)
!11305 = !DILocation(line: 6899, column: 47, scope: !11301)
!11306 = !DILocation(line: 6900, column: 31, scope: !11301)
!11307 = !DILocation(line: 6900, column: 7, scope: !11301)
!11308 = !DILocation(line: 6901, column: 40, scope: !11301)
!11309 = !DILocation(line: 6901, column: 14, scope: !11301)
!11310 = !DILocation(line: 6901, column: 7, scope: !11301)
!11311 = !DILocation(line: 6903, column: 45, scope: !11281)
!11312 = !DILocation(line: 6903, column: 24, scope: !11281)
!11313 = !DILocation(line: 6903, column: 53, scope: !11281)
!11314 = !DILocation(line: 6903, column: 10, scope: !11281)
!11315 = !DILocation(line: 6903, column: 3, scope: !11281)
!11316 = !DILocation(line: 6904, column: 1, scope: !11281)
!11317 = distinct !DISubprogram(name: "c_parser_label", scope: !3, file: !3, line: 3604, type: !4514, scopeLine: 3605, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!11318 = !DILocalVariable(name: "parser", arg: 1, scope: !11317, file: !3, line: 3604, type: !3401)
!11319 = !DILocation(line: 3604, column: 27, scope: !11317)
!11320 = !DILocalVariable(name: "loc1", scope: !11317, file: !3, line: 3606, type: !2352)
!11321 = !DILocation(line: 3606, column: 14, scope: !11317)
!11322 = !DILocation(line: 3606, column: 42, scope: !11317)
!11323 = !DILocation(line: 3606, column: 21, scope: !11317)
!11324 = !DILocation(line: 3606, column: 51, scope: !11317)
!11325 = !DILocalVariable(name: "label", scope: !11317, file: !3, line: 3607, type: !2224)
!11326 = !DILocation(line: 3607, column: 8, scope: !11317)
!11327 = !DILocation(line: 3608, column: 39, scope: !11328)
!11328 = distinct !DILexicalBlock(scope: !11317, file: !3, line: 3608, column: 7)
!11329 = !DILocation(line: 3608, column: 7, scope: !11328)
!11330 = !DILocation(line: 3608, column: 7, scope: !11317)
!11331 = !DILocalVariable(name: "exp1", scope: !11332, file: !3, line: 3610, type: !2224)
!11332 = distinct !DILexicalBlock(scope: !11328, file: !3, line: 3609, column: 5)
!11333 = !DILocation(line: 3610, column: 12, scope: !11332)
!11334 = !DILocalVariable(name: "exp2", scope: !11332, file: !3, line: 3610, type: !2224)
!11335 = !DILocation(line: 3610, column: 18, scope: !11332)
!11336 = !DILocation(line: 3611, column: 31, scope: !11332)
!11337 = !DILocation(line: 3611, column: 7, scope: !11332)
!11338 = !DILocation(line: 3612, column: 39, scope: !11332)
!11339 = !DILocation(line: 3612, column: 14, scope: !11332)
!11340 = !DILocation(line: 3612, column: 53, scope: !11332)
!11341 = !DILocation(line: 3612, column: 12, scope: !11332)
!11342 = !DILocation(line: 3613, column: 35, scope: !11343)
!11343 = distinct !DILexicalBlock(scope: !11332, file: !3, line: 3613, column: 11)
!11344 = !DILocation(line: 3613, column: 11, scope: !11343)
!11345 = !DILocation(line: 3613, column: 11, scope: !11332)
!11346 = !DILocation(line: 3615, column: 28, scope: !11347)
!11347 = distinct !DILexicalBlock(scope: !11343, file: !3, line: 3614, column: 2)
!11348 = !DILocation(line: 3615, column: 4, scope: !11347)
!11349 = !DILocation(line: 3616, column: 21, scope: !11347)
!11350 = !DILocation(line: 3616, column: 27, scope: !11347)
!11351 = !DILocation(line: 3616, column: 12, scope: !11347)
!11352 = !DILocation(line: 3616, column: 10, scope: !11347)
!11353 = !DILocation(line: 3617, column: 2, scope: !11347)
!11354 = !DILocation(line: 3618, column: 40, scope: !11355)
!11355 = distinct !DILexicalBlock(scope: !11343, file: !3, line: 3618, column: 16)
!11356 = !DILocation(line: 3618, column: 16, scope: !11355)
!11357 = !DILocation(line: 3618, column: 16, scope: !11343)
!11358 = !DILocation(line: 3620, column: 28, scope: !11359)
!11359 = distinct !DILexicalBlock(scope: !11355, file: !3, line: 3619, column: 2)
!11360 = !DILocation(line: 3620, column: 4, scope: !11359)
!11361 = !DILocation(line: 3621, column: 36, scope: !11359)
!11362 = !DILocation(line: 3621, column: 11, scope: !11359)
!11363 = !DILocation(line: 3621, column: 50, scope: !11359)
!11364 = !DILocation(line: 3621, column: 9, scope: !11359)
!11365 = !DILocation(line: 3622, column: 26, scope: !11366)
!11366 = distinct !DILexicalBlock(scope: !11359, file: !3, line: 3622, column: 8)
!11367 = !DILocation(line: 3622, column: 8, scope: !11366)
!11368 = !DILocation(line: 3622, column: 8, scope: !11359)
!11369 = !DILocation(line: 3623, column: 23, scope: !11366)
!11370 = !DILocation(line: 3623, column: 29, scope: !11366)
!11371 = !DILocation(line: 3623, column: 35, scope: !11366)
!11372 = !DILocation(line: 3623, column: 14, scope: !11366)
!11373 = !DILocation(line: 3623, column: 12, scope: !11366)
!11374 = !DILocation(line: 3623, column: 6, scope: !11366)
!11375 = !DILocation(line: 3624, column: 2, scope: !11359)
!11376 = !DILocation(line: 3626, column: 18, scope: !11355)
!11377 = !DILocation(line: 3626, column: 2, scope: !11355)
!11378 = !DILocation(line: 3627, column: 5, scope: !11332)
!11379 = !DILocation(line: 3628, column: 44, scope: !11380)
!11380 = distinct !DILexicalBlock(scope: !11328, file: !3, line: 3628, column: 12)
!11381 = !DILocation(line: 3628, column: 12, scope: !11380)
!11382 = !DILocation(line: 3628, column: 12, scope: !11328)
!11383 = !DILocation(line: 3630, column: 31, scope: !11384)
!11384 = distinct !DILexicalBlock(scope: !11380, file: !3, line: 3629, column: 5)
!11385 = !DILocation(line: 3630, column: 7, scope: !11384)
!11386 = !DILocation(line: 3631, column: 29, scope: !11387)
!11387 = distinct !DILexicalBlock(scope: !11384, file: !3, line: 3631, column: 11)
!11388 = !DILocation(line: 3631, column: 11, scope: !11387)
!11389 = !DILocation(line: 3631, column: 11, scope: !11384)
!11390 = !DILocation(line: 3632, column: 19, scope: !11387)
!11391 = !DILocation(line: 3632, column: 10, scope: !11387)
!11392 = !DILocation(line: 3632, column: 8, scope: !11387)
!11393 = !DILocation(line: 3632, column: 2, scope: !11387)
!11394 = !DILocation(line: 3633, column: 5, scope: !11384)
!11395 = !DILocalVariable(name: "name", scope: !11396, file: !3, line: 3636, type: !2224)
!11396 = distinct !DILexicalBlock(scope: !11380, file: !3, line: 3635, column: 5)
!11397 = !DILocation(line: 3636, column: 12, scope: !11396)
!11398 = !DILocation(line: 3636, column: 40, scope: !11396)
!11399 = !DILocation(line: 3636, column: 19, scope: !11396)
!11400 = !DILocation(line: 3636, column: 49, scope: !11396)
!11401 = !DILocalVariable(name: "tlab", scope: !11396, file: !3, line: 3637, type: !2224)
!11402 = !DILocation(line: 3637, column: 12, scope: !11396)
!11403 = !DILocalVariable(name: "attrs", scope: !11396, file: !3, line: 3638, type: !2224)
!11404 = !DILocation(line: 3638, column: 12, scope: !11396)
!11405 = !DILocalVariable(name: "loc2", scope: !11396, file: !3, line: 3639, type: !2352)
!11406 = !DILocation(line: 3639, column: 18, scope: !11396)
!11407 = !DILocation(line: 3639, column: 46, scope: !11396)
!11408 = !DILocation(line: 3639, column: 25, scope: !11396)
!11409 = !DILocation(line: 3639, column: 55, scope: !11396)
!11410 = !DILocation(line: 3640, column: 7, scope: !11396)
!11411 = !DILocation(line: 3641, column: 31, scope: !11396)
!11412 = !DILocation(line: 3641, column: 7, scope: !11396)
!11413 = !DILocation(line: 3642, column: 7, scope: !11396)
!11414 = !DILocation(line: 3643, column: 31, scope: !11396)
!11415 = !DILocation(line: 3643, column: 7, scope: !11396)
!11416 = !DILocation(line: 3644, column: 36, scope: !11396)
!11417 = !DILocation(line: 3644, column: 15, scope: !11396)
!11418 = !DILocation(line: 3644, column: 13, scope: !11396)
!11419 = !DILocation(line: 3645, column: 28, scope: !11396)
!11420 = !DILocation(line: 3645, column: 34, scope: !11396)
!11421 = !DILocation(line: 3645, column: 14, scope: !11396)
!11422 = !DILocation(line: 3645, column: 12, scope: !11396)
!11423 = !DILocation(line: 3646, column: 11, scope: !11424)
!11424 = distinct !DILexicalBlock(scope: !11396, file: !3, line: 3646, column: 11)
!11425 = !DILocation(line: 3646, column: 11, scope: !11396)
!11426 = !DILocation(line: 3648, column: 28, scope: !11427)
!11427 = distinct !DILexicalBlock(scope: !11424, file: !3, line: 3647, column: 2)
!11428 = !DILocation(line: 3648, column: 4, scope: !11427)
!11429 = !DILocation(line: 3649, column: 34, scope: !11427)
!11430 = !DILocation(line: 3649, column: 52, scope: !11427)
!11431 = !DILocation(line: 3649, column: 22, scope: !11427)
!11432 = !DILocation(line: 3649, column: 12, scope: !11427)
!11433 = !DILocation(line: 3649, column: 10, scope: !11427)
!11434 = !DILocation(line: 3650, column: 2, scope: !11427)
!11435 = !DILocation(line: 3652, column: 7, scope: !11436)
!11436 = distinct !DILexicalBlock(scope: !11317, file: !3, line: 3652, column: 7)
!11437 = !DILocation(line: 3652, column: 7, scope: !11317)
!11438 = !DILocation(line: 3654, column: 49, scope: !11439)
!11439 = distinct !DILexicalBlock(scope: !11440, file: !3, line: 3654, column: 11)
!11440 = distinct !DILexicalBlock(scope: !11436, file: !3, line: 3653, column: 5)
!11441 = !DILocation(line: 3654, column: 11, scope: !11439)
!11442 = !DILocation(line: 3655, column: 4, scope: !11439)
!11443 = !DILocation(line: 3655, column: 33, scope: !11439)
!11444 = !DILocation(line: 3655, column: 9, scope: !11439)
!11445 = !DILocation(line: 3656, column: 9, scope: !11439)
!11446 = !DILocation(line: 3656, column: 37, scope: !11439)
!11447 = !DILocation(line: 3656, column: 12, scope: !11439)
!11448 = !DILocation(line: 3656, column: 46, scope: !11439)
!11449 = !DILocation(line: 3656, column: 51, scope: !11439)
!11450 = !DILocation(line: 3654, column: 11, scope: !11440)
!11451 = !DILocation(line: 3658, column: 35, scope: !11452)
!11452 = distinct !DILexicalBlock(scope: !11439, file: !3, line: 3657, column: 2)
!11453 = !DILocation(line: 3658, column: 14, scope: !11452)
!11454 = !DILocation(line: 3658, column: 44, scope: !11452)
!11455 = !DILocation(line: 3658, column: 4, scope: !11452)
!11456 = !DILocation(line: 3661, column: 35, scope: !11452)
!11457 = !DILocation(line: 3661, column: 4, scope: !11452)
!11458 = !DILocation(line: 3664, column: 2, scope: !11452)
!11459 = !DILocation(line: 3665, column: 5, scope: !11440)
!11460 = !DILocation(line: 3666, column: 1, scope: !11317)
!11461 = distinct !DISubprogram(name: "c_parser_next_token_starts_declspecs", scope: !3, file: !3, line: 501, type: !6873, scopeLine: 502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!11462 = !DILocalVariable(name: "parser", arg: 1, scope: !11461, file: !3, line: 501, type: !3401)
!11463 = !DILocation(line: 501, column: 49, scope: !11461)
!11464 = !DILocalVariable(name: "token", scope: !11461, file: !3, line: 503, type: !4459)
!11465 = !DILocation(line: 503, column: 12, scope: !11461)
!11466 = !DILocation(line: 503, column: 41, scope: !11461)
!11467 = !DILocation(line: 503, column: 20, scope: !11461)
!11468 = !DILocation(line: 504, column: 36, scope: !11461)
!11469 = !DILocation(line: 504, column: 10, scope: !11461)
!11470 = !DILocation(line: 504, column: 3, scope: !11461)
!11471 = distinct !DISubprogram(name: "c_token_starts_declspecs", scope: !3, file: !3, line: 431, type: !6936, scopeLine: 432, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!11472 = !DILocalVariable(name: "token", arg: 1, scope: !11471, file: !3, line: 431, type: !4459)
!11473 = !DILocation(line: 431, column: 36, scope: !11471)
!11474 = !DILocation(line: 433, column: 11, scope: !11471)
!11475 = !DILocation(line: 433, column: 18, scope: !11471)
!11476 = !DILocation(line: 433, column: 3, scope: !11471)
!11477 = !DILocation(line: 436, column: 15, scope: !11478)
!11478 = distinct !DILexicalBlock(scope: !11471, file: !3, line: 434, column: 5)
!11479 = !DILocation(line: 436, column: 22, scope: !11478)
!11480 = !DILocation(line: 436, column: 7, scope: !11478)
!11481 = !DILocation(line: 439, column: 4, scope: !11482)
!11482 = distinct !DILexicalBlock(scope: !11478, file: !3, line: 437, column: 2)
!11483 = !DILocation(line: 441, column: 4, scope: !11482)
!11484 = !DILocation(line: 443, column: 4, scope: !11482)
!11485 = !DILocation(line: 445, column: 4, scope: !11482)
!11486 = !DILocation(line: 446, column: 4, scope: !11482)
!11487 = !DILocation(line: 448, column: 4, scope: !11482)
!11488 = !DILocation(line: 449, column: 2, scope: !11482)
!11489 = !DILocation(line: 451, column: 15, scope: !11478)
!11490 = !DILocation(line: 451, column: 22, scope: !11478)
!11491 = !DILocation(line: 451, column: 7, scope: !11478)
!11492 = !DILocation(line: 485, column: 4, scope: !11493)
!11493 = distinct !DILexicalBlock(scope: !11478, file: !3, line: 452, column: 2)
!11494 = !DILocation(line: 487, column: 4, scope: !11493)
!11495 = !DILocation(line: 490, column: 11, scope: !11496)
!11496 = distinct !DILexicalBlock(scope: !11478, file: !3, line: 490, column: 11)
!11497 = !DILocation(line: 490, column: 11, scope: !11478)
!11498 = !DILocation(line: 491, column: 2, scope: !11496)
!11499 = !DILocation(line: 492, column: 7, scope: !11478)
!11500 = !DILocation(line: 494, column: 7, scope: !11478)
!11501 = !DILocation(line: 496, column: 1, scope: !11471)
!11502 = distinct !DISubprogram(name: "c_parser_statement_after_labels", scope: !3, file: !3, line: 3779, type: !4514, scopeLine: 3780, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!11503 = !DILocalVariable(name: "parser", arg: 1, scope: !11502, file: !3, line: 3779, type: !3401)
!11504 = !DILocation(line: 3779, column: 44, scope: !11502)
!11505 = !DILocalVariable(name: "loc", scope: !11502, file: !3, line: 3781, type: !2352)
!11506 = !DILocation(line: 3781, column: 14, scope: !11502)
!11507 = !DILocation(line: 3781, column: 41, scope: !11502)
!11508 = !DILocation(line: 3781, column: 20, scope: !11502)
!11509 = !DILocation(line: 3781, column: 50, scope: !11502)
!11510 = !DILocalVariable(name: "stmt", scope: !11502, file: !3, line: 3782, type: !2224)
!11511 = !DILocation(line: 3782, column: 8, scope: !11502)
!11512 = !DILocalVariable(name: "in_if_block", scope: !11502, file: !3, line: 3783, type: !2344)
!11513 = !DILocation(line: 3783, column: 8, scope: !11502)
!11514 = !DILocation(line: 3783, column: 22, scope: !11502)
!11515 = !DILocation(line: 3783, column: 30, scope: !11502)
!11516 = !DILocation(line: 3784, column: 3, scope: !11502)
!11517 = !DILocation(line: 3784, column: 11, scope: !11502)
!11518 = !DILocation(line: 3784, column: 23, scope: !11502)
!11519 = !DILocation(line: 3785, column: 32, scope: !11502)
!11520 = !DILocation(line: 3785, column: 11, scope: !11502)
!11521 = !DILocation(line: 3785, column: 41, scope: !11502)
!11522 = !DILocation(line: 3785, column: 3, scope: !11502)
!11523 = !DILocation(line: 3788, column: 46, scope: !11524)
!11524 = distinct !DILexicalBlock(scope: !11502, file: !3, line: 3786, column: 5)
!11525 = !DILocation(line: 3788, column: 17, scope: !11524)
!11526 = !DILocation(line: 3788, column: 7, scope: !11524)
!11527 = !DILocation(line: 3789, column: 7, scope: !11524)
!11528 = !DILocation(line: 3791, column: 36, scope: !11524)
!11529 = !DILocation(line: 3791, column: 15, scope: !11524)
!11530 = !DILocation(line: 3791, column: 45, scope: !11524)
!11531 = !DILocation(line: 3791, column: 7, scope: !11524)
!11532 = !DILocation(line: 3794, column: 27, scope: !11533)
!11533 = distinct !DILexicalBlock(scope: !11524, file: !3, line: 3792, column: 2)
!11534 = !DILocation(line: 3794, column: 4, scope: !11533)
!11535 = !DILocation(line: 3795, column: 4, scope: !11533)
!11536 = !DILocation(line: 3797, column: 31, scope: !11533)
!11537 = !DILocation(line: 3797, column: 4, scope: !11533)
!11538 = !DILocation(line: 3798, column: 4, scope: !11533)
!11539 = !DILocation(line: 3800, column: 30, scope: !11533)
!11540 = !DILocation(line: 3800, column: 4, scope: !11533)
!11541 = !DILocation(line: 3801, column: 4, scope: !11533)
!11542 = !DILocation(line: 3803, column: 27, scope: !11533)
!11543 = !DILocation(line: 3803, column: 4, scope: !11533)
!11544 = !DILocation(line: 3804, column: 4, scope: !11533)
!11545 = !DILocation(line: 3806, column: 28, scope: !11533)
!11546 = !DILocation(line: 3806, column: 4, scope: !11533)
!11547 = !DILocation(line: 3807, column: 4, scope: !11533)
!11548 = !DILocation(line: 3809, column: 28, scope: !11533)
!11549 = !DILocation(line: 3809, column: 4, scope: !11533)
!11550 = !DILocation(line: 3810, column: 32, scope: !11551)
!11551 = distinct !DILexicalBlock(scope: !11533, file: !3, line: 3810, column: 8)
!11552 = !DILocation(line: 3810, column: 8, scope: !11551)
!11553 = !DILocation(line: 3810, column: 8, scope: !11533)
!11554 = !DILocation(line: 3812, column: 36, scope: !11555)
!11555 = distinct !DILexicalBlock(scope: !11551, file: !3, line: 3811, column: 6)
!11556 = !DILocation(line: 3813, column: 29, scope: !11555)
!11557 = !DILocation(line: 3813, column: 8, scope: !11555)
!11558 = !DILocation(line: 3813, column: 38, scope: !11555)
!11559 = !DILocation(line: 3812, column: 15, scope: !11555)
!11560 = !DILocation(line: 3812, column: 13, scope: !11555)
!11561 = !DILocation(line: 3814, column: 32, scope: !11555)
!11562 = !DILocation(line: 3814, column: 8, scope: !11555)
!11563 = !DILocation(line: 3815, column: 6, scope: !11555)
!11564 = !DILocation(line: 3816, column: 37, scope: !11565)
!11565 = distinct !DILexicalBlock(scope: !11551, file: !3, line: 3816, column: 13)
!11566 = !DILocation(line: 3816, column: 13, scope: !11565)
!11567 = !DILocation(line: 3816, column: 13, scope: !11551)
!11568 = !DILocation(line: 3818, column: 32, scope: !11569)
!11569 = distinct !DILexicalBlock(scope: !11565, file: !3, line: 3817, column: 6)
!11570 = !DILocation(line: 3818, column: 8, scope: !11569)
!11571 = !DILocation(line: 3819, column: 34, scope: !11569)
!11572 = !DILocation(line: 3820, column: 27, scope: !11569)
!11573 = !DILocation(line: 3820, column: 6, scope: !11569)
!11574 = !DILocation(line: 3820, column: 35, scope: !11569)
!11575 = !DILocation(line: 3819, column: 15, scope: !11569)
!11576 = !DILocation(line: 3819, column: 13, scope: !11569)
!11577 = !DILocation(line: 3821, column: 6, scope: !11569)
!11578 = !DILocation(line: 3823, column: 22, scope: !11565)
!11579 = !DILocation(line: 3823, column: 6, scope: !11565)
!11580 = !DILocation(line: 3824, column: 4, scope: !11533)
!11581 = !DILocation(line: 3826, column: 28, scope: !11533)
!11582 = !DILocation(line: 3826, column: 4, scope: !11533)
!11583 = !DILocation(line: 3827, column: 29, scope: !11533)
!11584 = !DILocation(line: 3827, column: 11, scope: !11533)
!11585 = !DILocation(line: 3827, column: 9, scope: !11533)
!11586 = !DILocation(line: 3828, column: 4, scope: !11533)
!11587 = !DILocation(line: 3830, column: 28, scope: !11533)
!11588 = !DILocation(line: 3830, column: 4, scope: !11533)
!11589 = !DILocation(line: 3831, column: 29, scope: !11533)
!11590 = !DILocation(line: 3831, column: 11, scope: !11533)
!11591 = !DILocation(line: 3831, column: 9, scope: !11533)
!11592 = !DILocation(line: 3832, column: 4, scope: !11533)
!11593 = !DILocation(line: 3834, column: 28, scope: !11533)
!11594 = !DILocation(line: 3834, column: 4, scope: !11533)
!11595 = !DILocation(line: 3835, column: 32, scope: !11596)
!11596 = distinct !DILexicalBlock(scope: !11533, file: !3, line: 3835, column: 8)
!11597 = !DILocation(line: 3835, column: 8, scope: !11596)
!11598 = !DILocation(line: 3835, column: 8, scope: !11533)
!11599 = !DILocation(line: 3837, column: 32, scope: !11600)
!11600 = distinct !DILexicalBlock(scope: !11596, file: !3, line: 3836, column: 6)
!11601 = !DILocation(line: 3837, column: 15, scope: !11600)
!11602 = !DILocation(line: 3837, column: 13, scope: !11600)
!11603 = !DILocation(line: 3838, column: 32, scope: !11600)
!11604 = !DILocation(line: 3838, column: 8, scope: !11600)
!11605 = !DILocation(line: 3839, column: 6, scope: !11600)
!11606 = !DILocalVariable(name: "expr", scope: !11607, file: !3, line: 3842, type: !2221)
!11607 = distinct !DILexicalBlock(scope: !11596, file: !3, line: 3841, column: 6)
!11608 = !DILocation(line: 3842, column: 22, scope: !11607)
!11609 = !DILocation(line: 3842, column: 55, scope: !11607)
!11610 = !DILocation(line: 3842, column: 29, scope: !11607)
!11611 = !DILocation(line: 3843, column: 32, scope: !11607)
!11612 = !DILocation(line: 3843, column: 42, scope: !11607)
!11613 = !DILocation(line: 3843, column: 54, scope: !11607)
!11614 = !DILocation(line: 3843, column: 15, scope: !11607)
!11615 = !DILocation(line: 3843, column: 13, scope: !11607)
!11616 = !DILocation(line: 3844, column: 8, scope: !11607)
!11617 = !DILocation(line: 3846, column: 4, scope: !11533)
!11618 = !DILocation(line: 3848, column: 35, scope: !11533)
!11619 = !DILocation(line: 3848, column: 11, scope: !11533)
!11620 = !DILocation(line: 3848, column: 9, scope: !11533)
!11621 = !DILocation(line: 3849, column: 4, scope: !11533)
!11622 = !DILocation(line: 3851, column: 4, scope: !11533)
!11623 = !DILocation(line: 3852, column: 28, scope: !11533)
!11624 = !DILocation(line: 3852, column: 4, scope: !11533)
!11625 = !DILocation(line: 3853, column: 32, scope: !11626)
!11626 = distinct !DILexicalBlock(scope: !11533, file: !3, line: 3853, column: 8)
!11627 = !DILocation(line: 3853, column: 8, scope: !11626)
!11628 = !DILocation(line: 3853, column: 8, scope: !11533)
!11629 = !DILocation(line: 3855, column: 38, scope: !11630)
!11630 = distinct !DILexicalBlock(scope: !11626, file: !3, line: 3854, column: 6)
!11631 = !DILocation(line: 3855, column: 15, scope: !11630)
!11632 = !DILocation(line: 3855, column: 13, scope: !11630)
!11633 = !DILocation(line: 3856, column: 32, scope: !11630)
!11634 = !DILocation(line: 3856, column: 8, scope: !11630)
!11635 = !DILocation(line: 3857, column: 6, scope: !11630)
!11636 = !DILocalVariable(name: "expr", scope: !11637, file: !3, line: 3860, type: !2224)
!11637 = distinct !DILexicalBlock(scope: !11626, file: !3, line: 3859, column: 6)
!11638 = !DILocation(line: 3860, column: 13, scope: !11637)
!11639 = !DILocation(line: 3860, column: 41, scope: !11637)
!11640 = !DILocation(line: 3860, column: 20, scope: !11637)
!11641 = !DILocation(line: 3860, column: 49, scope: !11637)
!11642 = !DILocation(line: 3861, column: 29, scope: !11637)
!11643 = !DILocation(line: 3861, column: 15, scope: !11637)
!11644 = !DILocation(line: 3861, column: 13, scope: !11637)
!11645 = !DILocation(line: 3862, column: 38, scope: !11637)
!11646 = !DILocation(line: 3862, column: 43, scope: !11637)
!11647 = !DILocation(line: 3862, column: 15, scope: !11637)
!11648 = !DILocation(line: 3862, column: 13, scope: !11637)
!11649 = !DILocation(line: 3863, column: 8, scope: !11637)
!11650 = !DILocation(line: 3865, column: 4, scope: !11533)
!11651 = !DILocation(line: 3867, column: 4, scope: !11533)
!11652 = !DILocation(line: 3868, column: 39, scope: !11533)
!11653 = !DILocation(line: 3868, column: 4, scope: !11533)
!11654 = !DILocation(line: 3869, column: 4, scope: !11533)
!11655 = !DILocation(line: 3871, column: 4, scope: !11533)
!11656 = !DILocation(line: 3872, column: 42, scope: !11533)
!11657 = !DILocation(line: 3872, column: 4, scope: !11533)
!11658 = !DILocation(line: 3873, column: 4, scope: !11533)
!11659 = !DILocation(line: 3875, column: 4, scope: !11533)
!11660 = !DILocation(line: 3877, column: 7, scope: !11524)
!11661 = !DILocation(line: 3879, column: 31, scope: !11524)
!11662 = !DILocation(line: 3879, column: 7, scope: !11524)
!11663 = !DILocation(line: 3880, column: 7, scope: !11524)
!11664 = !DILocation(line: 3887, column: 23, scope: !11524)
!11665 = !DILocation(line: 3887, column: 7, scope: !11524)
!11666 = !DILocation(line: 3888, column: 31, scope: !11524)
!11667 = !DILocation(line: 3888, column: 7, scope: !11524)
!11668 = !DILocation(line: 3889, column: 7, scope: !11524)
!11669 = !DILocation(line: 3891, column: 24, scope: !11524)
!11670 = !DILocation(line: 3891, column: 7, scope: !11524)
!11671 = !DILocation(line: 3892, column: 7, scope: !11524)
!11672 = !DILabel(scope: !11524, name: "expr_stmt", file: !3, line: 3894)
!11673 = !DILocation(line: 3894, column: 5, scope: !11524)
!11674 = !DILocation(line: 3895, column: 34, scope: !11524)
!11675 = !DILocation(line: 3895, column: 65, scope: !11524)
!11676 = !DILocation(line: 3895, column: 39, scope: !11524)
!11677 = !DILocation(line: 3895, column: 73, scope: !11524)
!11678 = !DILocation(line: 3895, column: 14, scope: !11524)
!11679 = !DILocation(line: 3895, column: 12, scope: !11524)
!11680 = !DILocation(line: 3895, column: 7, scope: !11524)
!11681 = !DILabel(scope: !11524, name: "expect_semicolon", file: !3, line: 3896)
!11682 = !DILocation(line: 3896, column: 5, scope: !11524)
!11683 = !DILocation(line: 3897, column: 34, scope: !11524)
!11684 = !DILocation(line: 3897, column: 7, scope: !11524)
!11685 = !DILocation(line: 3898, column: 7, scope: !11524)
!11686 = !DILocation(line: 3910, column: 7, scope: !11687)
!11687 = distinct !DILexicalBlock(scope: !11502, file: !3, line: 3910, column: 7)
!11688 = !DILocation(line: 3911, column: 7, scope: !11687)
!11689 = !DILocation(line: 3911, column: 10, scope: !11687)
!11690 = !DILocation(line: 3911, column: 31, scope: !11687)
!11691 = !DILocation(line: 3910, column: 7, scope: !11502)
!11692 = !DILocation(line: 3912, column: 5, scope: !11687)
!11693 = !DILocation(line: 3914, column: 25, scope: !11502)
!11694 = !DILocation(line: 3914, column: 3, scope: !11502)
!11695 = !DILocation(line: 3914, column: 11, scope: !11502)
!11696 = !DILocation(line: 3914, column: 23, scope: !11502)
!11697 = !DILocation(line: 3915, column: 1, scope: !11502)
!11698 = distinct !DISubprogram(name: "c_parser_compound_statement", scope: !3, file: !3, line: 3399, type: !6114, scopeLine: 3400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!11699 = !DILocalVariable(name: "parser", arg: 1, scope: !11698, file: !3, line: 3399, type: !3401)
!11700 = !DILocation(line: 3399, column: 40, scope: !11698)
!11701 = !DILocalVariable(name: "stmt", scope: !11698, file: !3, line: 3401, type: !2224)
!11702 = !DILocation(line: 3401, column: 8, scope: !11698)
!11703 = !DILocalVariable(name: "brace_loc", scope: !11698, file: !3, line: 3402, type: !2352)
!11704 = !DILocation(line: 3402, column: 14, scope: !11698)
!11705 = !DILocation(line: 3403, column: 36, scope: !11698)
!11706 = !DILocation(line: 3403, column: 15, scope: !11698)
!11707 = !DILocation(line: 3403, column: 45, scope: !11698)
!11708 = !DILocation(line: 3403, column: 13, scope: !11698)
!11709 = !DILocation(line: 3404, column: 26, scope: !11710)
!11710 = distinct !DILexicalBlock(scope: !11698, file: !3, line: 3404, column: 7)
!11711 = !DILocation(line: 3404, column: 8, scope: !11710)
!11712 = !DILocation(line: 3404, column: 7, scope: !11698)
!11713 = !DILocation(line: 3408, column: 14, scope: !11714)
!11714 = distinct !DILexicalBlock(scope: !11710, file: !3, line: 3405, column: 5)
!11715 = !DILocation(line: 3408, column: 12, scope: !11714)
!11716 = !DILocation(line: 3409, column: 28, scope: !11714)
!11717 = !DILocation(line: 3409, column: 39, scope: !11714)
!11718 = !DILocation(line: 3409, column: 7, scope: !11714)
!11719 = !DILocation(line: 3410, column: 14, scope: !11714)
!11720 = !DILocation(line: 3410, column: 7, scope: !11714)
!11721 = !DILocation(line: 3412, column: 10, scope: !11698)
!11722 = !DILocation(line: 3412, column: 8, scope: !11698)
!11723 = !DILocation(line: 3413, column: 40, scope: !11698)
!11724 = !DILocation(line: 3413, column: 3, scope: !11698)
!11725 = !DILocation(line: 3414, column: 31, scope: !11698)
!11726 = !DILocation(line: 3414, column: 42, scope: !11698)
!11727 = !DILocation(line: 3414, column: 10, scope: !11698)
!11728 = !DILocation(line: 3414, column: 3, scope: !11698)
!11729 = !DILocation(line: 3415, column: 1, scope: !11698)
!11730 = distinct !DISubprogram(name: "c_parser_if_statement", scope: !3, file: !3, line: 4030, type: !4514, scopeLine: 4031, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!11731 = !DILocalVariable(name: "parser", arg: 1, scope: !11730, file: !3, line: 4030, type: !3401)
!11732 = !DILocation(line: 4030, column: 34, scope: !11730)
!11733 = !DILocalVariable(name: "block", scope: !11730, file: !3, line: 4032, type: !2224)
!11734 = !DILocation(line: 4032, column: 8, scope: !11730)
!11735 = !DILocalVariable(name: "loc", scope: !11730, file: !3, line: 4033, type: !2352)
!11736 = !DILocation(line: 4033, column: 14, scope: !11730)
!11737 = !DILocalVariable(name: "cond", scope: !11730, file: !3, line: 4034, type: !2224)
!11738 = !DILocation(line: 4034, column: 8, scope: !11730)
!11739 = !DILocalVariable(name: "first_if", scope: !11730, file: !3, line: 4035, type: !2344)
!11740 = !DILocation(line: 4035, column: 8, scope: !11730)
!11741 = !DILocalVariable(name: "first_body", scope: !11730, file: !3, line: 4036, type: !2224)
!11742 = !DILocation(line: 4036, column: 8, scope: !11730)
!11743 = !DILocalVariable(name: "second_body", scope: !11730, file: !3, line: 4036, type: !2224)
!11744 = !DILocation(line: 4036, column: 20, scope: !11730)
!11745 = !DILocalVariable(name: "in_if_block", scope: !11730, file: !3, line: 4037, type: !2344)
!11746 = !DILocation(line: 4037, column: 8, scope: !11730)
!11747 = !DILocation(line: 4039, column: 3, scope: !11730)
!11748 = !DILocation(line: 4040, column: 27, scope: !11730)
!11749 = !DILocation(line: 4040, column: 3, scope: !11730)
!11750 = !DILocation(line: 4041, column: 34, scope: !11730)
!11751 = !DILocation(line: 4041, column: 11, scope: !11730)
!11752 = !DILocation(line: 4041, column: 9, scope: !11730)
!11753 = !DILocation(line: 4042, column: 30, scope: !11730)
!11754 = !DILocation(line: 4042, column: 9, scope: !11730)
!11755 = !DILocation(line: 4042, column: 39, scope: !11730)
!11756 = !DILocation(line: 4042, column: 7, scope: !11730)
!11757 = !DILocation(line: 4043, column: 36, scope: !11730)
!11758 = !DILocation(line: 4043, column: 10, scope: !11730)
!11759 = !DILocation(line: 4043, column: 8, scope: !11730)
!11760 = !DILocation(line: 4044, column: 17, scope: !11730)
!11761 = !DILocation(line: 4044, column: 25, scope: !11730)
!11762 = !DILocation(line: 4044, column: 15, scope: !11730)
!11763 = !DILocation(line: 4045, column: 3, scope: !11730)
!11764 = !DILocation(line: 4045, column: 11, scope: !11730)
!11765 = !DILocation(line: 4045, column: 23, scope: !11730)
!11766 = !DILocation(line: 4046, column: 34, scope: !11730)
!11767 = !DILocation(line: 4046, column: 16, scope: !11730)
!11768 = !DILocation(line: 4046, column: 14, scope: !11730)
!11769 = !DILocation(line: 4047, column: 25, scope: !11730)
!11770 = !DILocation(line: 4047, column: 3, scope: !11730)
!11771 = !DILocation(line: 4047, column: 11, scope: !11730)
!11772 = !DILocation(line: 4047, column: 23, scope: !11730)
!11773 = !DILocation(line: 4048, column: 39, scope: !11774)
!11774 = distinct !DILexicalBlock(scope: !11730, file: !3, line: 4048, column: 7)
!11775 = !DILocation(line: 4048, column: 7, scope: !11774)
!11776 = !DILocation(line: 4048, column: 7, scope: !11730)
!11777 = !DILocation(line: 4050, column: 31, scope: !11778)
!11778 = distinct !DILexicalBlock(scope: !11774, file: !3, line: 4049, column: 5)
!11779 = !DILocation(line: 4050, column: 7, scope: !11778)
!11780 = !DILocation(line: 4051, column: 41, scope: !11778)
!11781 = !DILocation(line: 4051, column: 21, scope: !11778)
!11782 = !DILocation(line: 4051, column: 19, scope: !11778)
!11783 = !DILocation(line: 4052, column: 5, scope: !11778)
!11784 = !DILocation(line: 4054, column: 17, scope: !11774)
!11785 = !DILocation(line: 4055, column: 21, scope: !11730)
!11786 = !DILocation(line: 4055, column: 26, scope: !11730)
!11787 = !DILocation(line: 4055, column: 32, scope: !11730)
!11788 = !DILocation(line: 4055, column: 44, scope: !11730)
!11789 = !DILocation(line: 4055, column: 57, scope: !11730)
!11790 = !DILocation(line: 4055, column: 3, scope: !11730)
!11791 = !DILocation(line: 4056, column: 34, scope: !11730)
!11792 = !DILocation(line: 4056, column: 39, scope: !11730)
!11793 = !DILocation(line: 4056, column: 46, scope: !11730)
!11794 = !DILocation(line: 4056, column: 13, scope: !11730)
!11795 = !DILocation(line: 4056, column: 3, scope: !11730)
!11796 = !DILocation(line: 4057, column: 1, scope: !11730)
!11797 = distinct !DISubprogram(name: "c_parser_switch_statement", scope: !3, file: !3, line: 4066, type: !4514, scopeLine: 4067, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!11798 = !DILocalVariable(name: "parser", arg: 1, scope: !11797, file: !3, line: 4066, type: !3401)
!11799 = !DILocation(line: 4066, column: 38, scope: !11797)
!11800 = !DILocalVariable(name: "block", scope: !11797, file: !3, line: 4068, type: !2224)
!11801 = !DILocation(line: 4068, column: 8, scope: !11797)
!11802 = !DILocalVariable(name: "expr", scope: !11797, file: !3, line: 4068, type: !2224)
!11803 = !DILocation(line: 4068, column: 15, scope: !11797)
!11804 = !DILocalVariable(name: "body", scope: !11797, file: !3, line: 4068, type: !2224)
!11805 = !DILocation(line: 4068, column: 21, scope: !11797)
!11806 = !DILocalVariable(name: "save_break", scope: !11797, file: !3, line: 4068, type: !2224)
!11807 = !DILocation(line: 4068, column: 27, scope: !11797)
!11808 = !DILocalVariable(name: "switch_loc", scope: !11797, file: !3, line: 4069, type: !2352)
!11809 = !DILocation(line: 4069, column: 14, scope: !11797)
!11810 = !DILocation(line: 4069, column: 48, scope: !11797)
!11811 = !DILocation(line: 4069, column: 27, scope: !11797)
!11812 = !DILocation(line: 4069, column: 57, scope: !11797)
!11813 = !DILocalVariable(name: "switch_cond_loc", scope: !11797, file: !3, line: 4070, type: !2352)
!11814 = !DILocation(line: 4070, column: 14, scope: !11797)
!11815 = !DILocation(line: 4071, column: 3, scope: !11797)
!11816 = !DILocation(line: 4072, column: 27, scope: !11797)
!11817 = !DILocation(line: 4072, column: 3, scope: !11797)
!11818 = !DILocation(line: 4073, column: 34, scope: !11797)
!11819 = !DILocation(line: 4073, column: 11, scope: !11797)
!11820 = !DILocation(line: 4073, column: 9, scope: !11797)
!11821 = !DILocation(line: 4074, column: 25, scope: !11822)
!11822 = distinct !DILexicalBlock(scope: !11797, file: !3, line: 4074, column: 7)
!11823 = !DILocation(line: 4074, column: 7, scope: !11822)
!11824 = !DILocation(line: 4074, column: 7, scope: !11797)
!11825 = !DILocation(line: 4076, column: 46, scope: !11826)
!11826 = distinct !DILexicalBlock(scope: !11822, file: !3, line: 4075, column: 5)
!11827 = !DILocation(line: 4076, column: 25, scope: !11826)
!11828 = !DILocation(line: 4076, column: 55, scope: !11826)
!11829 = !DILocation(line: 4076, column: 23, scope: !11826)
!11830 = !DILocation(line: 4077, column: 35, scope: !11826)
!11831 = !DILocation(line: 4077, column: 14, scope: !11826)
!11832 = !DILocation(line: 4077, column: 43, scope: !11826)
!11833 = !DILocation(line: 4077, column: 12, scope: !11826)
!11834 = !DILocation(line: 4078, column: 34, scope: !11826)
!11835 = !DILocation(line: 4078, column: 7, scope: !11826)
!11836 = !DILocation(line: 4079, column: 5, scope: !11826)
!11837 = !DILocation(line: 4082, column: 23, scope: !11838)
!11838 = distinct !DILexicalBlock(scope: !11822, file: !3, line: 4081, column: 5)
!11839 = !DILocation(line: 4083, column: 14, scope: !11838)
!11840 = !DILocation(line: 4083, column: 12, scope: !11838)
!11841 = !DILocation(line: 4085, column: 17, scope: !11797)
!11842 = !DILocation(line: 4085, column: 29, scope: !11797)
!11843 = !DILocation(line: 4085, column: 46, scope: !11797)
!11844 = !DILocation(line: 4085, column: 3, scope: !11797)
!11845 = !DILocation(line: 4086, column: 16, scope: !11797)
!11846 = !DILocation(line: 4086, column: 14, scope: !11797)
!11847 = !DILocation(line: 4087, column: 17, scope: !11797)
!11848 = !DILocation(line: 4088, column: 40, scope: !11797)
!11849 = !DILocation(line: 4088, column: 10, scope: !11797)
!11850 = !DILocation(line: 4088, column: 8, scope: !11797)
!11851 = !DILocation(line: 4089, column: 18, scope: !11797)
!11852 = !DILocation(line: 4089, column: 3, scope: !11797)
!11853 = !DILocation(line: 4090, column: 7, scope: !11854)
!11854 = distinct !DILexicalBlock(scope: !11797, file: !3, line: 4090, column: 7)
!11855 = !DILocation(line: 4090, column: 7, scope: !11797)
!11856 = !DILocalVariable(name: "here", scope: !11857, file: !3, line: 4092, type: !2352)
!11857 = distinct !DILexicalBlock(scope: !11854, file: !3, line: 4091, column: 5)
!11858 = !DILocation(line: 4092, column: 18, scope: !11857)
!11859 = !DILocation(line: 4092, column: 46, scope: !11857)
!11860 = !DILocation(line: 4092, column: 25, scope: !11857)
!11861 = !DILocation(line: 4092, column: 55, scope: !11857)
!11862 = !DILocalVariable(name: "t", scope: !11857, file: !3, line: 4093, type: !2224)
!11863 = !DILocation(line: 4093, column: 12, scope: !11857)
!11864 = !DILocation(line: 4093, column: 16, scope: !11857)
!11865 = !DILocation(line: 4094, column: 7, scope: !11857)
!11866 = !DILocation(line: 4095, column: 17, scope: !11857)
!11867 = !DILocation(line: 4095, column: 7, scope: !11857)
!11868 = !DILocation(line: 4096, column: 5, scope: !11857)
!11869 = !DILocation(line: 4097, column: 19, scope: !11797)
!11870 = !DILocation(line: 4097, column: 17, scope: !11797)
!11871 = !DILocation(line: 4098, column: 34, scope: !11797)
!11872 = !DILocation(line: 4098, column: 46, scope: !11797)
!11873 = !DILocation(line: 4098, column: 53, scope: !11797)
!11874 = !DILocation(line: 4098, column: 13, scope: !11797)
!11875 = !DILocation(line: 4098, column: 3, scope: !11797)
!11876 = !DILocation(line: 4099, column: 1, scope: !11797)
!11877 = distinct !DISubprogram(name: "c_parser_while_statement", scope: !3, file: !3, line: 4108, type: !4514, scopeLine: 4109, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!11878 = !DILocalVariable(name: "parser", arg: 1, scope: !11877, file: !3, line: 4108, type: !3401)
!11879 = !DILocation(line: 4108, column: 37, scope: !11877)
!11880 = !DILocalVariable(name: "block", scope: !11877, file: !3, line: 4110, type: !2224)
!11881 = !DILocation(line: 4110, column: 8, scope: !11877)
!11882 = !DILocalVariable(name: "cond", scope: !11877, file: !3, line: 4110, type: !2224)
!11883 = !DILocation(line: 4110, column: 15, scope: !11877)
!11884 = !DILocalVariable(name: "body", scope: !11877, file: !3, line: 4110, type: !2224)
!11885 = !DILocation(line: 4110, column: 21, scope: !11877)
!11886 = !DILocalVariable(name: "save_break", scope: !11877, file: !3, line: 4110, type: !2224)
!11887 = !DILocation(line: 4110, column: 27, scope: !11877)
!11888 = !DILocalVariable(name: "save_cont", scope: !11877, file: !3, line: 4110, type: !2224)
!11889 = !DILocation(line: 4110, column: 39, scope: !11877)
!11890 = !DILocalVariable(name: "loc", scope: !11877, file: !3, line: 4111, type: !2352)
!11891 = !DILocation(line: 4111, column: 14, scope: !11877)
!11892 = !DILocation(line: 4112, column: 3, scope: !11877)
!11893 = !DILocation(line: 4113, column: 27, scope: !11877)
!11894 = !DILocation(line: 4113, column: 3, scope: !11877)
!11895 = !DILocation(line: 4114, column: 34, scope: !11877)
!11896 = !DILocation(line: 4114, column: 11, scope: !11877)
!11897 = !DILocation(line: 4114, column: 9, scope: !11877)
!11898 = !DILocation(line: 4115, column: 30, scope: !11877)
!11899 = !DILocation(line: 4115, column: 9, scope: !11877)
!11900 = !DILocation(line: 4115, column: 39, scope: !11877)
!11901 = !DILocation(line: 4115, column: 7, scope: !11877)
!11902 = !DILocation(line: 4116, column: 36, scope: !11877)
!11903 = !DILocation(line: 4116, column: 10, scope: !11877)
!11904 = !DILocation(line: 4116, column: 8, scope: !11877)
!11905 = !DILocation(line: 4117, column: 16, scope: !11877)
!11906 = !DILocation(line: 4117, column: 14, scope: !11877)
!11907 = !DILocation(line: 4118, column: 17, scope: !11877)
!11908 = !DILocation(line: 4119, column: 15, scope: !11877)
!11909 = !DILocation(line: 4119, column: 13, scope: !11877)
!11910 = !DILocation(line: 4120, column: 16, scope: !11877)
!11911 = !DILocation(line: 4121, column: 40, scope: !11877)
!11912 = !DILocation(line: 4121, column: 10, scope: !11877)
!11913 = !DILocation(line: 4121, column: 8, scope: !11877)
!11914 = !DILocation(line: 4122, column: 18, scope: !11877)
!11915 = !DILocation(line: 4122, column: 23, scope: !11877)
!11916 = !DILocation(line: 4122, column: 35, scope: !11877)
!11917 = !DILocation(line: 4122, column: 41, scope: !11877)
!11918 = !DILocation(line: 4122, column: 56, scope: !11877)
!11919 = !DILocation(line: 4122, column: 3, scope: !11877)
!11920 = !DILocation(line: 4123, column: 34, scope: !11877)
!11921 = !DILocation(line: 4123, column: 39, scope: !11877)
!11922 = !DILocation(line: 4123, column: 46, scope: !11877)
!11923 = !DILocation(line: 4123, column: 13, scope: !11877)
!11924 = !DILocation(line: 4123, column: 3, scope: !11877)
!11925 = !DILocation(line: 4124, column: 19, scope: !11877)
!11926 = !DILocation(line: 4124, column: 17, scope: !11877)
!11927 = !DILocation(line: 4125, column: 18, scope: !11877)
!11928 = !DILocation(line: 4125, column: 16, scope: !11877)
!11929 = !DILocation(line: 4126, column: 1, scope: !11877)
!11930 = distinct !DISubprogram(name: "c_parser_do_statement", scope: !3, file: !3, line: 4135, type: !4514, scopeLine: 4136, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!11931 = !DILocalVariable(name: "parser", arg: 1, scope: !11930, file: !3, line: 4135, type: !3401)
!11932 = !DILocation(line: 4135, column: 34, scope: !11930)
!11933 = !DILocalVariable(name: "block", scope: !11930, file: !3, line: 4137, type: !2224)
!11934 = !DILocation(line: 4137, column: 8, scope: !11930)
!11935 = !DILocalVariable(name: "cond", scope: !11930, file: !3, line: 4137, type: !2224)
!11936 = !DILocation(line: 4137, column: 15, scope: !11930)
!11937 = !DILocalVariable(name: "body", scope: !11930, file: !3, line: 4137, type: !2224)
!11938 = !DILocation(line: 4137, column: 21, scope: !11930)
!11939 = !DILocalVariable(name: "save_break", scope: !11930, file: !3, line: 4137, type: !2224)
!11940 = !DILocation(line: 4137, column: 27, scope: !11930)
!11941 = !DILocalVariable(name: "save_cont", scope: !11930, file: !3, line: 4137, type: !2224)
!11942 = !DILocation(line: 4137, column: 39, scope: !11930)
!11943 = !DILocalVariable(name: "new_break", scope: !11930, file: !3, line: 4137, type: !2224)
!11944 = !DILocation(line: 4137, column: 50, scope: !11930)
!11945 = !DILocalVariable(name: "new_cont", scope: !11930, file: !3, line: 4137, type: !2224)
!11946 = !DILocation(line: 4137, column: 61, scope: !11930)
!11947 = !DILocalVariable(name: "loc", scope: !11930, file: !3, line: 4138, type: !2352)
!11948 = !DILocation(line: 4138, column: 14, scope: !11930)
!11949 = !DILocation(line: 4139, column: 3, scope: !11930)
!11950 = !DILocation(line: 4140, column: 27, scope: !11930)
!11951 = !DILocation(line: 4140, column: 3, scope: !11930)
!11952 = !DILocation(line: 4141, column: 31, scope: !11953)
!11953 = distinct !DILexicalBlock(scope: !11930, file: !3, line: 4141, column: 7)
!11954 = !DILocation(line: 4141, column: 7, scope: !11953)
!11955 = !DILocation(line: 4141, column: 7, scope: !11930)
!11956 = !DILocation(line: 4142, column: 38, scope: !11953)
!11957 = !DILocation(line: 4142, column: 17, scope: !11953)
!11958 = !DILocation(line: 4142, column: 47, scope: !11953)
!11959 = !DILocation(line: 4142, column: 5, scope: !11953)
!11960 = !DILocation(line: 4145, column: 34, scope: !11930)
!11961 = !DILocation(line: 4145, column: 11, scope: !11930)
!11962 = !DILocation(line: 4145, column: 9, scope: !11930)
!11963 = !DILocation(line: 4146, column: 30, scope: !11930)
!11964 = !DILocation(line: 4146, column: 9, scope: !11930)
!11965 = !DILocation(line: 4146, column: 39, scope: !11930)
!11966 = !DILocation(line: 4146, column: 7, scope: !11930)
!11967 = !DILocation(line: 4147, column: 16, scope: !11930)
!11968 = !DILocation(line: 4147, column: 14, scope: !11930)
!11969 = !DILocation(line: 4148, column: 17, scope: !11930)
!11970 = !DILocation(line: 4149, column: 15, scope: !11930)
!11971 = !DILocation(line: 4149, column: 13, scope: !11930)
!11972 = !DILocation(line: 4150, column: 16, scope: !11930)
!11973 = !DILocation(line: 4151, column: 40, scope: !11930)
!11974 = !DILocation(line: 4151, column: 10, scope: !11930)
!11975 = !DILocation(line: 4151, column: 8, scope: !11930)
!11976 = !DILocation(line: 4152, column: 29, scope: !11930)
!11977 = !DILocation(line: 4152, column: 3, scope: !11930)
!11978 = !DILocation(line: 4153, column: 15, scope: !11930)
!11979 = !DILocation(line: 4153, column: 13, scope: !11930)
!11980 = !DILocation(line: 4154, column: 19, scope: !11930)
!11981 = !DILocation(line: 4154, column: 17, scope: !11930)
!11982 = !DILocation(line: 4155, column: 14, scope: !11930)
!11983 = !DILocation(line: 4155, column: 12, scope: !11930)
!11984 = !DILocation(line: 4156, column: 18, scope: !11930)
!11985 = !DILocation(line: 4156, column: 16, scope: !11930)
!11986 = !DILocation(line: 4157, column: 36, scope: !11930)
!11987 = !DILocation(line: 4157, column: 10, scope: !11930)
!11988 = !DILocation(line: 4157, column: 8, scope: !11930)
!11989 = !DILocation(line: 4158, column: 26, scope: !11990)
!11990 = distinct !DILexicalBlock(scope: !11930, file: !3, line: 4158, column: 7)
!11991 = !DILocation(line: 4158, column: 8, scope: !11990)
!11992 = !DILocation(line: 4158, column: 7, scope: !11930)
!11993 = !DILocation(line: 4159, column: 49, scope: !11990)
!11994 = !DILocation(line: 4159, column: 5, scope: !11990)
!11995 = !DILocation(line: 4160, column: 18, scope: !11930)
!11996 = !DILocation(line: 4160, column: 23, scope: !11930)
!11997 = !DILocation(line: 4160, column: 35, scope: !11930)
!11998 = !DILocation(line: 4160, column: 41, scope: !11930)
!11999 = !DILocation(line: 4160, column: 52, scope: !11930)
!12000 = !DILocation(line: 4160, column: 3, scope: !11930)
!12001 = !DILocation(line: 4161, column: 34, scope: !11930)
!12002 = !DILocation(line: 4161, column: 39, scope: !11930)
!12003 = !DILocation(line: 4161, column: 46, scope: !11930)
!12004 = !DILocation(line: 4161, column: 13, scope: !11930)
!12005 = !DILocation(line: 4161, column: 3, scope: !11930)
!12006 = !DILocation(line: 4162, column: 1, scope: !11930)
!12007 = distinct !DISubprogram(name: "c_parser_for_statement", scope: !3, file: !3, line: 4181, type: !4514, scopeLine: 4182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12008 = !DILocalVariable(name: "parser", arg: 1, scope: !12007, file: !3, line: 4181, type: !3401)
!12009 = !DILocation(line: 4181, column: 35, scope: !12007)
!12010 = !DILocalVariable(name: "block", scope: !12007, file: !3, line: 4183, type: !2224)
!12011 = !DILocation(line: 4183, column: 8, scope: !12007)
!12012 = !DILocalVariable(name: "cond", scope: !12007, file: !3, line: 4183, type: !2224)
!12013 = !DILocation(line: 4183, column: 15, scope: !12007)
!12014 = !DILocalVariable(name: "incr", scope: !12007, file: !3, line: 4183, type: !2224)
!12015 = !DILocation(line: 4183, column: 21, scope: !12007)
!12016 = !DILocalVariable(name: "save_break", scope: !12007, file: !3, line: 4183, type: !2224)
!12017 = !DILocation(line: 4183, column: 27, scope: !12007)
!12018 = !DILocalVariable(name: "save_cont", scope: !12007, file: !3, line: 4183, type: !2224)
!12019 = !DILocation(line: 4183, column: 39, scope: !12007)
!12020 = !DILocalVariable(name: "body", scope: !12007, file: !3, line: 4183, type: !2224)
!12021 = !DILocation(line: 4183, column: 50, scope: !12007)
!12022 = !DILocalVariable(name: "loc", scope: !12007, file: !3, line: 4184, type: !2352)
!12023 = !DILocation(line: 4184, column: 14, scope: !12007)
!12024 = !DILocation(line: 4184, column: 41, scope: !12007)
!12025 = !DILocation(line: 4184, column: 20, scope: !12007)
!12026 = !DILocation(line: 4184, column: 50, scope: !12007)
!12027 = !DILocalVariable(name: "for_loc", scope: !12007, file: !3, line: 4185, type: !2352)
!12028 = !DILocation(line: 4185, column: 14, scope: !12007)
!12029 = !DILocation(line: 4185, column: 45, scope: !12007)
!12030 = !DILocation(line: 4185, column: 24, scope: !12007)
!12031 = !DILocation(line: 4185, column: 54, scope: !12007)
!12032 = !DILocation(line: 4186, column: 3, scope: !12007)
!12033 = !DILocation(line: 4187, column: 27, scope: !12007)
!12034 = !DILocation(line: 4187, column: 3, scope: !12007)
!12035 = !DILocation(line: 4188, column: 34, scope: !12007)
!12036 = !DILocation(line: 4188, column: 11, scope: !12007)
!12037 = !DILocation(line: 4188, column: 9, scope: !12007)
!12038 = !DILocation(line: 4189, column: 25, scope: !12039)
!12039 = distinct !DILexicalBlock(scope: !12007, file: !3, line: 4189, column: 7)
!12040 = !DILocation(line: 4189, column: 7, scope: !12039)
!12041 = !DILocation(line: 4189, column: 7, scope: !12007)
!12042 = !DILocation(line: 4192, column: 35, scope: !12043)
!12043 = distinct !DILexicalBlock(scope: !12044, file: !3, line: 4192, column: 11)
!12044 = distinct !DILexicalBlock(scope: !12039, file: !3, line: 4190, column: 5)
!12045 = !DILocation(line: 4192, column: 11, scope: !12043)
!12046 = !DILocation(line: 4192, column: 11, scope: !12044)
!12047 = !DILocation(line: 4194, column: 28, scope: !12048)
!12048 = distinct !DILexicalBlock(scope: !12043, file: !3, line: 4193, column: 2)
!12049 = !DILocation(line: 4194, column: 4, scope: !12048)
!12050 = !DILocation(line: 4195, column: 24, scope: !12048)
!12051 = !DILocation(line: 4195, column: 4, scope: !12048)
!12052 = !DILocation(line: 4196, column: 2, scope: !12048)
!12053 = !DILocation(line: 4197, column: 54, scope: !12054)
!12054 = distinct !DILexicalBlock(scope: !12043, file: !3, line: 4197, column: 16)
!12055 = !DILocation(line: 4197, column: 16, scope: !12054)
!12056 = !DILocation(line: 4197, column: 16, scope: !12043)
!12057 = !DILocation(line: 4199, column: 35, scope: !12058)
!12058 = distinct !DILexicalBlock(scope: !12054, file: !3, line: 4198, column: 2)
!12059 = !DILocation(line: 4199, column: 4, scope: !12058)
!12060 = !DILocation(line: 4200, column: 26, scope: !12058)
!12061 = !DILocation(line: 4200, column: 4, scope: !12058)
!12062 = !DILocation(line: 4201, column: 2, scope: !12058)
!12063 = !DILocation(line: 4202, column: 48, scope: !12064)
!12064 = distinct !DILexicalBlock(scope: !12054, file: !3, line: 4202, column: 16)
!12065 = !DILocation(line: 4202, column: 16, scope: !12064)
!12066 = !DILocation(line: 4202, column: 16, scope: !12054)
!12067 = !DILocation(line: 4208, column: 4, scope: !12068)
!12068 = distinct !DILexicalBlock(scope: !12064, file: !3, line: 4203, column: 2)
!12069 = !DILocation(line: 4208, column: 36, scope: !12068)
!12070 = !DILocation(line: 4208, column: 11, scope: !12068)
!12071 = !DILocation(line: 4208, column: 45, scope: !12068)
!12072 = !DILocation(line: 4208, column: 50, scope: !12068)
!12073 = !DILocation(line: 4209, column: 4, scope: !12068)
!12074 = !DILocation(line: 4209, column: 33, scope: !12068)
!12075 = !DILocation(line: 4209, column: 8, scope: !12068)
!12076 = !DILocation(line: 4209, column: 42, scope: !12068)
!12077 = !DILocation(line: 4210, column: 8, scope: !12068)
!12078 = !DILocation(line: 0, scope: !12068)
!12079 = !DILocation(line: 4211, column: 30, scope: !12068)
!12080 = !DILocation(line: 4211, column: 6, scope: !12068)
!12081 = distinct !{!12081, !12067, !12082}
!12082 = !DILocation(line: 4211, column: 36, scope: !12068)
!12083 = !DILocation(line: 4212, column: 59, scope: !12084)
!12084 = distinct !DILexicalBlock(scope: !12068, file: !3, line: 4212, column: 8)
!12085 = !DILocation(line: 4212, column: 34, scope: !12084)
!12086 = !DILocation(line: 4212, column: 8, scope: !12084)
!12087 = !DILocation(line: 4212, column: 8, scope: !12068)
!12088 = !DILocalVariable(name: "ext", scope: !12089, file: !3, line: 4214, type: !2321)
!12089 = distinct !DILexicalBlock(scope: !12084, file: !3, line: 4213, column: 6)
!12090 = !DILocation(line: 4214, column: 12, scope: !12089)
!12091 = !DILocation(line: 4215, column: 14, scope: !12089)
!12092 = !DILocation(line: 4215, column: 12, scope: !12089)
!12093 = !DILocation(line: 4216, column: 32, scope: !12089)
!12094 = !DILocation(line: 4216, column: 8, scope: !12089)
!12095 = !DILocation(line: 4217, column: 39, scope: !12089)
!12096 = !DILocation(line: 4217, column: 8, scope: !12089)
!12097 = !DILocation(line: 4218, column: 39, scope: !12089)
!12098 = !DILocation(line: 4218, column: 8, scope: !12089)
!12099 = !DILocation(line: 4219, column: 30, scope: !12089)
!12100 = !DILocation(line: 4219, column: 8, scope: !12089)
!12101 = !DILocation(line: 4220, column: 6, scope: !12089)
!12102 = !DILocation(line: 4222, column: 6, scope: !12084)
!12103 = !DILocation(line: 4223, column: 2, scope: !12068)
!12104 = !DILocation(line: 4225, column: 2, scope: !12064)
!12105 = !DILabel(scope: !12106, name: "init_expr", file: !3, line: 4226)
!12106 = distinct !DILexicalBlock(scope: !12064, file: !3, line: 4225, column: 2)
!12107 = !DILocation(line: 4226, column: 2, scope: !12106)
!12108 = !DILocation(line: 4227, column: 24, scope: !12106)
!12109 = !DILocation(line: 4227, column: 50, scope: !12106)
!12110 = !DILocation(line: 4227, column: 29, scope: !12106)
!12111 = !DILocation(line: 4227, column: 58, scope: !12106)
!12112 = !DILocation(line: 4227, column: 4, scope: !12106)
!12113 = !DILocation(line: 4228, column: 31, scope: !12106)
!12114 = !DILocation(line: 4228, column: 4, scope: !12106)
!12115 = !DILocation(line: 4231, column: 35, scope: !12116)
!12116 = distinct !DILexicalBlock(scope: !12044, file: !3, line: 4231, column: 11)
!12117 = !DILocation(line: 4231, column: 11, scope: !12116)
!12118 = !DILocation(line: 4231, column: 11, scope: !12044)
!12119 = !DILocation(line: 4233, column: 28, scope: !12120)
!12120 = distinct !DILexicalBlock(scope: !12116, file: !3, line: 4232, column: 2)
!12121 = !DILocation(line: 4233, column: 4, scope: !12120)
!12122 = !DILocation(line: 4234, column: 9, scope: !12120)
!12123 = !DILocation(line: 4235, column: 2, scope: !12120)
!12124 = !DILocation(line: 4238, column: 31, scope: !12125)
!12125 = distinct !DILexicalBlock(scope: !12116, file: !3, line: 4237, column: 2)
!12126 = !DILocation(line: 4238, column: 11, scope: !12125)
!12127 = !DILocation(line: 4238, column: 9, scope: !12125)
!12128 = !DILocation(line: 4239, column: 31, scope: !12125)
!12129 = !DILocation(line: 4239, column: 4, scope: !12125)
!12130 = !DILocation(line: 4242, column: 35, scope: !12131)
!12131 = distinct !DILexicalBlock(scope: !12044, file: !3, line: 4242, column: 11)
!12132 = !DILocation(line: 4242, column: 11, scope: !12131)
!12133 = !DILocation(line: 4242, column: 11, scope: !12044)
!12134 = !DILocation(line: 4243, column: 30, scope: !12131)
!12135 = !DILocation(line: 4243, column: 9, scope: !12131)
!12136 = !DILocation(line: 4243, column: 7, scope: !12131)
!12137 = !DILocation(line: 4243, column: 2, scope: !12131)
!12138 = !DILocation(line: 4245, column: 30, scope: !12131)
!12139 = !DILocation(line: 4245, column: 56, scope: !12131)
!12140 = !DILocation(line: 4245, column: 35, scope: !12131)
!12141 = !DILocation(line: 4245, column: 64, scope: !12131)
!12142 = !DILocation(line: 4245, column: 9, scope: !12131)
!12143 = !DILocation(line: 4245, column: 7, scope: !12131)
!12144 = !DILocation(line: 4246, column: 34, scope: !12044)
!12145 = !DILocation(line: 4246, column: 7, scope: !12044)
!12146 = !DILocation(line: 4247, column: 5, scope: !12044)
!12147 = !DILocation(line: 4250, column: 14, scope: !12148)
!12148 = distinct !DILexicalBlock(scope: !12039, file: !3, line: 4249, column: 5)
!12149 = !DILocation(line: 4250, column: 12, scope: !12148)
!12150 = !DILocation(line: 4251, column: 14, scope: !12148)
!12151 = !DILocation(line: 4251, column: 12, scope: !12148)
!12152 = !DILocation(line: 4253, column: 16, scope: !12007)
!12153 = !DILocation(line: 4253, column: 14, scope: !12007)
!12154 = !DILocation(line: 4254, column: 17, scope: !12007)
!12155 = !DILocation(line: 4255, column: 15, scope: !12007)
!12156 = !DILocation(line: 4255, column: 13, scope: !12007)
!12157 = !DILocation(line: 4256, column: 16, scope: !12007)
!12158 = !DILocation(line: 4257, column: 40, scope: !12007)
!12159 = !DILocation(line: 4257, column: 10, scope: !12007)
!12160 = !DILocation(line: 4257, column: 8, scope: !12007)
!12161 = !DILocation(line: 4258, column: 18, scope: !12007)
!12162 = !DILocation(line: 4258, column: 23, scope: !12007)
!12163 = !DILocation(line: 4258, column: 29, scope: !12007)
!12164 = !DILocation(line: 4258, column: 35, scope: !12007)
!12165 = !DILocation(line: 4258, column: 41, scope: !12007)
!12166 = !DILocation(line: 4258, column: 56, scope: !12007)
!12167 = !DILocation(line: 4258, column: 3, scope: !12007)
!12168 = !DILocation(line: 4259, column: 34, scope: !12007)
!12169 = !DILocation(line: 4259, column: 39, scope: !12007)
!12170 = !DILocation(line: 4259, column: 46, scope: !12007)
!12171 = !DILocation(line: 4259, column: 13, scope: !12007)
!12172 = !DILocation(line: 4259, column: 3, scope: !12007)
!12173 = !DILocation(line: 4260, column: 19, scope: !12007)
!12174 = !DILocation(line: 4260, column: 17, scope: !12007)
!12175 = !DILocation(line: 4261, column: 18, scope: !12007)
!12176 = !DILocation(line: 4261, column: 16, scope: !12007)
!12177 = !DILocation(line: 4262, column: 1, scope: !12007)
!12178 = distinct !DISubprogram(name: "c_parser_asm_statement", scope: !3, file: !3, line: 4286, type: !6114, scopeLine: 4287, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12179 = !DILocalVariable(name: "parser", arg: 1, scope: !12178, file: !3, line: 4286, type: !3401)
!12180 = !DILocation(line: 4286, column: 35, scope: !12178)
!12181 = !DILocalVariable(name: "quals", scope: !12178, file: !3, line: 4288, type: !2224)
!12182 = !DILocation(line: 4288, column: 8, scope: !12178)
!12183 = !DILocalVariable(name: "str", scope: !12178, file: !3, line: 4288, type: !2224)
!12184 = !DILocation(line: 4288, column: 15, scope: !12178)
!12185 = !DILocalVariable(name: "outputs", scope: !12178, file: !3, line: 4288, type: !2224)
!12186 = !DILocation(line: 4288, column: 20, scope: !12178)
!12187 = !DILocalVariable(name: "inputs", scope: !12178, file: !3, line: 4288, type: !2224)
!12188 = !DILocation(line: 4288, column: 29, scope: !12178)
!12189 = !DILocalVariable(name: "clobbers", scope: !12178, file: !3, line: 4288, type: !2224)
!12190 = !DILocation(line: 4288, column: 37, scope: !12178)
!12191 = !DILocalVariable(name: "labels", scope: !12178, file: !3, line: 4288, type: !2224)
!12192 = !DILocation(line: 4288, column: 47, scope: !12178)
!12193 = !DILocalVariable(name: "ret", scope: !12178, file: !3, line: 4288, type: !2224)
!12194 = !DILocation(line: 4288, column: 55, scope: !12178)
!12195 = !DILocalVariable(name: "simple", scope: !12178, file: !3, line: 4289, type: !2344)
!12196 = !DILocation(line: 4289, column: 8, scope: !12178)
!12197 = !DILocalVariable(name: "is_goto", scope: !12178, file: !3, line: 4289, type: !2344)
!12198 = !DILocation(line: 4289, column: 16, scope: !12178)
!12199 = !DILocalVariable(name: "asm_loc", scope: !12178, file: !3, line: 4290, type: !2352)
!12200 = !DILocation(line: 4290, column: 14, scope: !12178)
!12201 = !DILocation(line: 4290, column: 45, scope: !12178)
!12202 = !DILocation(line: 4290, column: 24, scope: !12178)
!12203 = !DILocation(line: 4290, column: 54, scope: !12178)
!12204 = !DILocalVariable(name: "section", scope: !12178, file: !3, line: 4291, type: !2321)
!12205 = !DILocation(line: 4291, column: 7, scope: !12178)
!12206 = !DILocalVariable(name: "nsections", scope: !12178, file: !3, line: 4291, type: !2321)
!12207 = !DILocation(line: 4291, column: 16, scope: !12178)
!12208 = !DILocation(line: 4293, column: 3, scope: !12178)
!12209 = !DILocation(line: 4294, column: 27, scope: !12178)
!12210 = !DILocation(line: 4294, column: 3, scope: !12178)
!12211 = !DILocation(line: 4295, column: 39, scope: !12212)
!12212 = distinct !DILexicalBlock(scope: !12178, file: !3, line: 4295, column: 7)
!12213 = !DILocation(line: 4295, column: 7, scope: !12212)
!12214 = !DILocation(line: 4295, column: 7, scope: !12178)
!12215 = !DILocation(line: 4297, column: 36, scope: !12216)
!12216 = distinct !DILexicalBlock(scope: !12212, file: !3, line: 4296, column: 5)
!12217 = !DILocation(line: 4297, column: 15, scope: !12216)
!12218 = !DILocation(line: 4297, column: 45, scope: !12216)
!12219 = !DILocation(line: 4297, column: 13, scope: !12216)
!12220 = !DILocation(line: 4298, column: 31, scope: !12216)
!12221 = !DILocation(line: 4298, column: 7, scope: !12216)
!12222 = !DILocation(line: 4299, column: 5, scope: !12216)
!12223 = !DILocation(line: 4300, column: 44, scope: !12224)
!12224 = distinct !DILexicalBlock(scope: !12212, file: !3, line: 4300, column: 12)
!12225 = !DILocation(line: 4300, column: 12, scope: !12224)
!12226 = !DILocation(line: 4301, column: 5, scope: !12224)
!12227 = !DILocation(line: 4301, column: 40, scope: !12224)
!12228 = !DILocation(line: 4301, column: 8, scope: !12224)
!12229 = !DILocation(line: 4300, column: 12, scope: !12212)
!12230 = !DILocation(line: 4303, column: 40, scope: !12231)
!12231 = distinct !DILexicalBlock(scope: !12224, file: !3, line: 4302, column: 5)
!12232 = !DILocation(line: 4303, column: 19, scope: !12231)
!12233 = !DILocation(line: 4303, column: 49, scope: !12231)
!12234 = !DILocation(line: 4306, column: 26, scope: !12231)
!12235 = !DILocation(line: 4306, column: 5, scope: !12231)
!12236 = !DILocation(line: 4306, column: 35, scope: !12231)
!12237 = !DILocation(line: 4303, column: 7, scope: !12231)
!12238 = !DILocation(line: 4307, column: 13, scope: !12231)
!12239 = !DILocation(line: 4308, column: 31, scope: !12231)
!12240 = !DILocation(line: 4308, column: 7, scope: !12231)
!12241 = !DILocation(line: 4309, column: 5, scope: !12231)
!12242 = !DILocation(line: 4311, column: 11, scope: !12224)
!12243 = !DILocation(line: 4313, column: 11, scope: !12178)
!12244 = !DILocation(line: 4314, column: 39, scope: !12245)
!12245 = distinct !DILexicalBlock(scope: !12178, file: !3, line: 4314, column: 7)
!12246 = !DILocation(line: 4314, column: 7, scope: !12245)
!12247 = !DILocation(line: 4314, column: 7, scope: !12178)
!12248 = !DILocation(line: 4316, column: 31, scope: !12249)
!12249 = distinct !DILexicalBlock(scope: !12245, file: !3, line: 4315, column: 5)
!12250 = !DILocation(line: 4316, column: 7, scope: !12249)
!12251 = !DILocation(line: 4317, column: 15, scope: !12249)
!12252 = !DILocation(line: 4318, column: 5, scope: !12249)
!12253 = !DILocation(line: 4322, column: 3, scope: !12178)
!12254 = !DILocation(line: 4322, column: 11, scope: !12178)
!12255 = !DILocation(line: 4322, column: 35, scope: !12178)
!12256 = !DILocation(line: 4323, column: 7, scope: !12178)
!12257 = !DILocation(line: 4325, column: 26, scope: !12258)
!12258 = distinct !DILexicalBlock(scope: !12178, file: !3, line: 4325, column: 7)
!12259 = !DILocation(line: 4325, column: 8, scope: !12258)
!12260 = !DILocation(line: 4325, column: 7, scope: !12178)
!12261 = !DILocation(line: 4326, column: 5, scope: !12258)
!12262 = !DILocation(line: 4328, column: 38, scope: !12178)
!12263 = !DILocation(line: 4328, column: 9, scope: !12178)
!12264 = !DILocation(line: 4328, column: 7, scope: !12178)
!12265 = !DILocation(line: 4329, column: 7, scope: !12266)
!12266 = distinct !DILexicalBlock(scope: !12178, file: !3, line: 4329, column: 7)
!12267 = !DILocation(line: 4329, column: 11, scope: !12266)
!12268 = !DILocation(line: 4329, column: 7, scope: !12178)
!12269 = !DILocation(line: 4330, column: 5, scope: !12266)
!12270 = !DILocation(line: 4332, column: 10, scope: !12178)
!12271 = !DILocation(line: 4333, column: 11, scope: !12178)
!12272 = !DILocation(line: 4334, column: 10, scope: !12178)
!12273 = !DILocation(line: 4335, column: 12, scope: !12178)
!12274 = !DILocation(line: 4336, column: 10, scope: !12178)
!12275 = !DILocation(line: 4338, column: 31, scope: !12276)
!12276 = distinct !DILexicalBlock(scope: !12178, file: !3, line: 4338, column: 7)
!12277 = !DILocation(line: 4338, column: 7, scope: !12276)
!12278 = !DILocation(line: 4338, column: 56, scope: !12276)
!12279 = !DILocation(line: 4338, column: 60, scope: !12276)
!12280 = !DILocation(line: 4338, column: 7, scope: !12178)
!12281 = !DILocation(line: 4339, column: 5, scope: !12276)
!12282 = !DILocation(line: 4342, column: 19, scope: !12178)
!12283 = !DILocation(line: 4342, column: 17, scope: !12178)
!12284 = !DILocation(line: 4342, column: 13, scope: !12178)
!12285 = !DILocation(line: 4343, column: 16, scope: !12286)
!12286 = distinct !DILexicalBlock(scope: !12178, file: !3, line: 4343, column: 3)
!12287 = !DILocation(line: 4343, column: 8, scope: !12286)
!12288 = !DILocation(line: 4343, column: 21, scope: !12289)
!12289 = distinct !DILexicalBlock(scope: !12286, file: !3, line: 4343, column: 3)
!12290 = !DILocation(line: 4343, column: 31, scope: !12289)
!12291 = !DILocation(line: 4343, column: 29, scope: !12289)
!12292 = !DILocation(line: 4343, column: 3, scope: !12286)
!12293 = !DILocation(line: 4345, column: 30, scope: !12294)
!12294 = distinct !DILexicalBlock(scope: !12295, file: !3, line: 4345, column: 11)
!12295 = distinct !DILexicalBlock(scope: !12289, file: !3, line: 4344, column: 5)
!12296 = !DILocation(line: 4346, column: 9, scope: !12294)
!12297 = !DILocation(line: 4345, column: 12, scope: !12294)
!12298 = !DILocation(line: 4345, column: 11, scope: !12295)
!12299 = !DILocation(line: 4349, column: 2, scope: !12294)
!12300 = !DILocation(line: 4352, column: 14, scope: !12295)
!12301 = !DILocation(line: 4354, column: 37, scope: !12302)
!12302 = distinct !DILexicalBlock(scope: !12295, file: !3, line: 4354, column: 11)
!12303 = !DILocation(line: 4354, column: 13, scope: !12302)
!12304 = !DILocation(line: 4355, column: 5, scope: !12302)
!12305 = !DILocation(line: 4355, column: 33, scope: !12302)
!12306 = !DILocation(line: 4355, column: 9, scope: !12302)
!12307 = !DILocation(line: 4356, column: 4, scope: !12302)
!12308 = !DILocation(line: 4356, column: 7, scope: !12302)
!12309 = !DILocation(line: 4356, column: 15, scope: !12302)
!12310 = !DILocation(line: 4354, column: 11, scope: !12295)
!12311 = !DILocation(line: 4357, column: 10, scope: !12302)
!12312 = !DILocation(line: 4357, column: 2, scope: !12302)
!12313 = !DILocation(line: 4362, column: 11, scope: !12314)
!12314 = distinct !DILexicalBlock(scope: !12315, file: !3, line: 4362, column: 10)
!12315 = distinct !DILexicalBlock(scope: !12302, file: !3, line: 4358, column: 4)
!12316 = !DILocation(line: 4362, column: 10, scope: !12315)
!12317 = !DILocation(line: 4363, column: 41, scope: !12314)
!12318 = !DILocation(line: 4363, column: 18, scope: !12314)
!12319 = !DILocation(line: 4363, column: 16, scope: !12314)
!12320 = !DILocation(line: 4363, column: 8, scope: !12314)
!12321 = !DILocation(line: 4364, column: 6, scope: !12315)
!12322 = !DILocation(line: 4366, column: 38, scope: !12315)
!12323 = !DILocation(line: 4366, column: 15, scope: !12315)
!12324 = !DILocation(line: 4366, column: 13, scope: !12315)
!12325 = !DILocation(line: 4367, column: 6, scope: !12315)
!12326 = !DILocation(line: 4369, column: 40, scope: !12315)
!12327 = !DILocation(line: 4369, column: 17, scope: !12315)
!12328 = !DILocation(line: 4369, column: 15, scope: !12315)
!12329 = !DILocation(line: 4370, column: 6, scope: !12315)
!12330 = !DILocation(line: 4372, column: 43, scope: !12315)
!12331 = !DILocation(line: 4372, column: 15, scope: !12315)
!12332 = !DILocation(line: 4372, column: 13, scope: !12315)
!12333 = !DILocation(line: 4373, column: 6, scope: !12315)
!12334 = !DILocation(line: 4375, column: 6, scope: !12315)
!12335 = !DILocation(line: 4376, column: 4, scope: !12315)
!12336 = !DILocation(line: 4378, column: 35, scope: !12337)
!12337 = distinct !DILexicalBlock(scope: !12295, file: !3, line: 4378, column: 11)
!12338 = !DILocation(line: 4378, column: 11, scope: !12337)
!12339 = !DILocation(line: 4378, column: 60, scope: !12337)
!12340 = !DILocation(line: 4378, column: 64, scope: !12337)
!12341 = !DILocation(line: 4378, column: 11, scope: !12295)
!12342 = !DILocation(line: 4379, column: 2, scope: !12337)
!12343 = !DILocation(line: 4380, column: 5, scope: !12295)
!12344 = !DILocation(line: 4343, column: 42, scope: !12289)
!12345 = !DILocation(line: 4343, column: 3, scope: !12289)
!12346 = distinct !{!12346, !12292, !12347}
!12347 = !DILocation(line: 4380, column: 5, scope: !12286)
!12348 = !DILabel(scope: !12178, name: "done_asm", file: !3, line: 4382)
!12349 = !DILocation(line: 4382, column: 2, scope: !12178)
!12350 = !DILocation(line: 4383, column: 26, scope: !12351)
!12351 = distinct !DILexicalBlock(scope: !12178, file: !3, line: 4383, column: 7)
!12352 = !DILocation(line: 4383, column: 8, scope: !12351)
!12353 = !DILocation(line: 4383, column: 7, scope: !12178)
!12354 = !DILocation(line: 4385, column: 34, scope: !12355)
!12355 = distinct !DILexicalBlock(scope: !12351, file: !3, line: 4384, column: 5)
!12356 = !DILocation(line: 4385, column: 7, scope: !12355)
!12357 = !DILocation(line: 4386, column: 7, scope: !12355)
!12358 = !DILocation(line: 4389, column: 26, scope: !12359)
!12359 = distinct !DILexicalBlock(scope: !12178, file: !3, line: 4389, column: 7)
!12360 = !DILocation(line: 4389, column: 8, scope: !12359)
!12361 = !DILocation(line: 4389, column: 7, scope: !12178)
!12362 = !DILocation(line: 4390, column: 49, scope: !12359)
!12363 = !DILocation(line: 4390, column: 5, scope: !12359)
!12364 = !DILocation(line: 4392, column: 25, scope: !12178)
!12365 = !DILocation(line: 4392, column: 48, scope: !12178)
!12366 = !DILocation(line: 4392, column: 57, scope: !12178)
!12367 = !DILocation(line: 4392, column: 62, scope: !12178)
!12368 = !DILocation(line: 4392, column: 71, scope: !12178)
!12369 = !DILocation(line: 4393, column: 13, scope: !12178)
!12370 = !DILocation(line: 4393, column: 23, scope: !12178)
!12371 = !DILocation(line: 4393, column: 31, scope: !12178)
!12372 = !DILocation(line: 4392, column: 32, scope: !12178)
!12373 = !DILocation(line: 4392, column: 9, scope: !12178)
!12374 = !DILocation(line: 4392, column: 7, scope: !12178)
!12375 = !DILocation(line: 4392, column: 3, scope: !12178)
!12376 = !DILabel(scope: !12178, name: "error", file: !3, line: 4395)
!12377 = !DILocation(line: 4395, column: 2, scope: !12178)
!12378 = !DILocation(line: 4396, column: 3, scope: !12178)
!12379 = !DILocation(line: 4396, column: 11, scope: !12178)
!12380 = !DILocation(line: 4396, column: 35, scope: !12178)
!12381 = !DILocation(line: 4397, column: 10, scope: !12178)
!12382 = !DILocation(line: 4397, column: 3, scope: !12178)
!12383 = !DILabel(scope: !12178, name: "error_close_paren", file: !3, line: 4399)
!12384 = !DILocation(line: 4399, column: 2, scope: !12178)
!12385 = !DILocation(line: 4400, column: 30, scope: !12178)
!12386 = !DILocation(line: 4400, column: 3, scope: !12178)
!12387 = !DILocation(line: 4401, column: 3, scope: !12178)
!12388 = distinct !DISubprogram(name: "c_parser_objc_try_catch_statement", scope: !3, file: !3, line: 6711, type: !4514, scopeLine: 6712, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12389 = !DILocalVariable(name: "parser", arg: 1, scope: !12388, file: !3, line: 6711, type: !3401)
!12390 = !DILocation(line: 6711, column: 46, scope: !12388)
!12391 = !DILocalVariable(name: "loc", scope: !12388, file: !3, line: 6713, type: !2352)
!12392 = !DILocation(line: 6713, column: 14, scope: !12388)
!12393 = !DILocalVariable(name: "stmt", scope: !12388, file: !3, line: 6714, type: !2224)
!12394 = !DILocation(line: 6714, column: 8, scope: !12388)
!12395 = !DILocation(line: 6715, column: 3, scope: !12388)
!12396 = !DILocation(line: 6716, column: 27, scope: !12388)
!12397 = !DILocation(line: 6716, column: 3, scope: !12388)
!12398 = !DILocation(line: 6717, column: 30, scope: !12388)
!12399 = !DILocation(line: 6717, column: 9, scope: !12388)
!12400 = !DILocation(line: 6717, column: 39, scope: !12388)
!12401 = !DILocation(line: 6717, column: 7, scope: !12388)
!12402 = !DILocation(line: 6718, column: 39, scope: !12388)
!12403 = !DILocation(line: 6718, column: 10, scope: !12388)
!12404 = !DILocation(line: 6718, column: 8, scope: !12388)
!12405 = !DILocation(line: 6719, column: 24, scope: !12388)
!12406 = !DILocation(line: 6719, column: 29, scope: !12388)
!12407 = !DILocation(line: 6719, column: 3, scope: !12388)
!12408 = !DILocation(line: 6720, column: 3, scope: !12388)
!12409 = !DILocation(line: 6720, column: 42, scope: !12388)
!12410 = !DILocation(line: 6720, column: 10, scope: !12388)
!12411 = !DILocalVariable(name: "parm", scope: !12412, file: !3, line: 6722, type: !6642)
!12412 = distinct !DILexicalBlock(scope: !12388, file: !3, line: 6721, column: 5)
!12413 = !DILocation(line: 6722, column: 22, scope: !12412)
!12414 = !DILocation(line: 6723, column: 31, scope: !12412)
!12415 = !DILocation(line: 6723, column: 7, scope: !12412)
!12416 = !DILocation(line: 6724, column: 30, scope: !12417)
!12417 = distinct !DILexicalBlock(scope: !12412, file: !3, line: 6724, column: 11)
!12418 = !DILocation(line: 6724, column: 12, scope: !12417)
!12419 = !DILocation(line: 6724, column: 11, scope: !12412)
!12420 = !DILocation(line: 6725, column: 2, scope: !12417)
!12421 = !DILocation(line: 6726, column: 46, scope: !12412)
!12422 = !DILocation(line: 6726, column: 14, scope: !12412)
!12423 = !DILocation(line: 6726, column: 12, scope: !12412)
!12424 = !DILocation(line: 6727, column: 11, scope: !12425)
!12425 = distinct !DILexicalBlock(scope: !12412, file: !3, line: 6727, column: 11)
!12426 = !DILocation(line: 6727, column: 16, scope: !12425)
!12427 = !DILocation(line: 6727, column: 11, scope: !12412)
!12428 = !DILocation(line: 6729, column: 31, scope: !12429)
!12429 = distinct !DILexicalBlock(scope: !12425, file: !3, line: 6728, column: 2)
!12430 = !DILocation(line: 6729, column: 4, scope: !12429)
!12431 = !DILocation(line: 6730, column: 4, scope: !12429)
!12432 = !DILocation(line: 6732, column: 34, scope: !12412)
!12433 = !DILocation(line: 6732, column: 7, scope: !12412)
!12434 = !DILocation(line: 6733, column: 42, scope: !12412)
!12435 = !DILocation(line: 6733, column: 32, scope: !12412)
!12436 = !DILocation(line: 6733, column: 7, scope: !12412)
!12437 = !DILocation(line: 6734, column: 29, scope: !12438)
!12438 = distinct !DILexicalBlock(scope: !12412, file: !3, line: 6734, column: 11)
!12439 = !DILocation(line: 6734, column: 11, scope: !12438)
!12440 = !DILocation(line: 6734, column: 11, scope: !12412)
!12441 = !DILocation(line: 6735, column: 39, scope: !12438)
!12442 = !DILocation(line: 6735, column: 2, scope: !12438)
!12443 = !DILocation(line: 6736, column: 7, scope: !12412)
!12444 = distinct !{!12444, !12408, !12445}
!12445 = !DILocation(line: 6737, column: 5, scope: !12388)
!12446 = !DILocation(line: 6738, column: 39, scope: !12447)
!12447 = distinct !DILexicalBlock(scope: !12388, file: !3, line: 6738, column: 7)
!12448 = !DILocation(line: 6738, column: 7, scope: !12447)
!12449 = !DILocation(line: 6738, column: 7, scope: !12388)
!12450 = !DILocalVariable(name: "finloc", scope: !12451, file: !3, line: 6740, type: !2352)
!12451 = distinct !DILexicalBlock(scope: !12447, file: !3, line: 6739, column: 5)
!12452 = !DILocation(line: 6740, column: 18, scope: !12451)
!12453 = !DILocalVariable(name: "finstmt", scope: !12451, file: !3, line: 6741, type: !2224)
!12454 = !DILocation(line: 6741, column: 12, scope: !12451)
!12455 = !DILocation(line: 6742, column: 31, scope: !12451)
!12456 = !DILocation(line: 6742, column: 7, scope: !12451)
!12457 = !DILocation(line: 6743, column: 37, scope: !12451)
!12458 = !DILocation(line: 6743, column: 16, scope: !12451)
!12459 = !DILocation(line: 6743, column: 46, scope: !12451)
!12460 = !DILocation(line: 6743, column: 14, scope: !12451)
!12461 = !DILocation(line: 6744, column: 46, scope: !12451)
!12462 = !DILocation(line: 6744, column: 17, scope: !12451)
!12463 = !DILocation(line: 6744, column: 15, scope: !12451)
!12464 = !DILocation(line: 6745, column: 34, scope: !12451)
!12465 = !DILocation(line: 6745, column: 42, scope: !12451)
!12466 = !DILocation(line: 6745, column: 7, scope: !12451)
!12467 = !DILocation(line: 6746, column: 5, scope: !12451)
!12468 = !DILocation(line: 6747, column: 3, scope: !12388)
!12469 = !DILocation(line: 6748, column: 1, scope: !12388)
!12470 = distinct !DISubprogram(name: "c_parser_objc_synchronized_statement", scope: !3, file: !3, line: 6757, type: !4514, scopeLine: 6758, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12471 = !DILocalVariable(name: "parser", arg: 1, scope: !12470, file: !3, line: 6757, type: !3401)
!12472 = !DILocation(line: 6757, column: 49, scope: !12470)
!12473 = !DILocalVariable(name: "loc", scope: !12470, file: !3, line: 6759, type: !2352)
!12474 = !DILocation(line: 6759, column: 14, scope: !12470)
!12475 = !DILocalVariable(name: "expr", scope: !12470, file: !3, line: 6760, type: !2224)
!12476 = !DILocation(line: 6760, column: 8, scope: !12470)
!12477 = !DILocalVariable(name: "stmt", scope: !12470, file: !3, line: 6760, type: !2224)
!12478 = !DILocation(line: 6760, column: 14, scope: !12470)
!12479 = !DILocation(line: 6761, column: 3, scope: !12470)
!12480 = !DILocation(line: 6762, column: 27, scope: !12470)
!12481 = !DILocation(line: 6762, column: 3, scope: !12470)
!12482 = !DILocation(line: 6763, column: 30, scope: !12470)
!12483 = !DILocation(line: 6763, column: 9, scope: !12470)
!12484 = !DILocation(line: 6763, column: 39, scope: !12470)
!12485 = !DILocation(line: 6763, column: 7, scope: !12470)
!12486 = !DILocation(line: 6764, column: 25, scope: !12487)
!12487 = distinct !DILexicalBlock(scope: !12470, file: !3, line: 6764, column: 7)
!12488 = !DILocation(line: 6764, column: 7, scope: !12487)
!12489 = !DILocation(line: 6764, column: 7, scope: !12470)
!12490 = !DILocation(line: 6766, column: 35, scope: !12491)
!12491 = distinct !DILexicalBlock(scope: !12487, file: !3, line: 6765, column: 5)
!12492 = !DILocation(line: 6766, column: 14, scope: !12491)
!12493 = !DILocation(line: 6766, column: 43, scope: !12491)
!12494 = !DILocation(line: 6766, column: 12, scope: !12491)
!12495 = !DILocation(line: 6767, column: 28, scope: !12491)
!12496 = !DILocation(line: 6767, column: 14, scope: !12491)
!12497 = !DILocation(line: 6767, column: 12, scope: !12491)
!12498 = !DILocation(line: 6768, column: 34, scope: !12491)
!12499 = !DILocation(line: 6768, column: 7, scope: !12491)
!12500 = !DILocation(line: 6769, column: 5, scope: !12491)
!12501 = !DILocation(line: 6771, column: 12, scope: !12487)
!12502 = !DILocation(line: 6771, column: 10, scope: !12487)
!12503 = !DILocation(line: 6772, column: 39, scope: !12470)
!12504 = !DILocation(line: 6772, column: 10, scope: !12470)
!12505 = !DILocation(line: 6772, column: 8, scope: !12470)
!12506 = !DILocation(line: 6773, column: 28, scope: !12470)
!12507 = !DILocation(line: 6773, column: 33, scope: !12470)
!12508 = !DILocation(line: 6773, column: 39, scope: !12470)
!12509 = !DILocation(line: 6773, column: 3, scope: !12470)
!12510 = !DILocation(line: 6774, column: 1, scope: !12470)
!12511 = distinct !DISubprogram(name: "c_parser_paren_condition", scope: !3, file: !3, line: 3938, type: !6114, scopeLine: 3939, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12512 = !DILocalVariable(name: "parser", arg: 1, scope: !12511, file: !3, line: 3938, type: !3401)
!12513 = !DILocation(line: 3938, column: 37, scope: !12511)
!12514 = !DILocalVariable(name: "cond", scope: !12511, file: !3, line: 3940, type: !2224)
!12515 = !DILocation(line: 3940, column: 8, scope: !12511)
!12516 = !DILocation(line: 3941, column: 26, scope: !12517)
!12517 = distinct !DILexicalBlock(scope: !12511, file: !3, line: 3941, column: 7)
!12518 = !DILocation(line: 3941, column: 8, scope: !12517)
!12519 = !DILocation(line: 3941, column: 7, scope: !12511)
!12520 = !DILocation(line: 3942, column: 12, scope: !12517)
!12521 = !DILocation(line: 3942, column: 5, scope: !12517)
!12522 = !DILocation(line: 3943, column: 30, scope: !12511)
!12523 = !DILocation(line: 3943, column: 10, scope: !12511)
!12524 = !DILocation(line: 3943, column: 8, scope: !12511)
!12525 = !DILocation(line: 3944, column: 30, scope: !12511)
!12526 = !DILocation(line: 3944, column: 3, scope: !12511)
!12527 = !DILocation(line: 3945, column: 10, scope: !12511)
!12528 = !DILocation(line: 3945, column: 3, scope: !12511)
!12529 = !DILocation(line: 3946, column: 1, scope: !12511)
!12530 = distinct !DISubprogram(name: "c_parser_if_body", scope: !3, file: !3, line: 3968, type: !12531, scopeLine: 3969, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12531 = !DISubroutineType(types: !12532)
!12532 = !{!2224, !3401, !7264}
!12533 = !DILocalVariable(name: "parser", arg: 1, scope: !12530, file: !3, line: 3968, type: !3401)
!12534 = !DILocation(line: 3968, column: 29, scope: !12530)
!12535 = !DILocalVariable(name: "if_p", arg: 2, scope: !12530, file: !3, line: 3968, type: !7264)
!12536 = !DILocation(line: 3968, column: 43, scope: !12530)
!12537 = !DILocalVariable(name: "block", scope: !12530, file: !3, line: 3970, type: !2224)
!12538 = !DILocation(line: 3970, column: 8, scope: !12530)
!12539 = !DILocation(line: 3970, column: 39, scope: !12530)
!12540 = !DILocation(line: 3970, column: 16, scope: !12530)
!12541 = !DILocalVariable(name: "body_loc", scope: !12530, file: !3, line: 3971, type: !2352)
!12542 = !DILocation(line: 3971, column: 14, scope: !12530)
!12543 = !DILocation(line: 3971, column: 46, scope: !12530)
!12544 = !DILocation(line: 3971, column: 25, scope: !12530)
!12545 = !DILocation(line: 3971, column: 55, scope: !12530)
!12546 = !DILocation(line: 3972, column: 3, scope: !12530)
!12547 = !DILocation(line: 3972, column: 42, scope: !12530)
!12548 = !DILocation(line: 3972, column: 10, scope: !12530)
!12549 = !DILocation(line: 3973, column: 3, scope: !12530)
!12550 = !DILocation(line: 3973, column: 38, scope: !12530)
!12551 = !DILocation(line: 3973, column: 6, scope: !12530)
!12552 = !DILocation(line: 3974, column: 3, scope: !12530)
!12553 = !DILocation(line: 3974, column: 31, scope: !12530)
!12554 = !DILocation(line: 3974, column: 7, scope: !12530)
!12555 = !DILocation(line: 3975, column: 7, scope: !12530)
!12556 = !DILocation(line: 3975, column: 35, scope: !12530)
!12557 = !DILocation(line: 3975, column: 10, scope: !12530)
!12558 = !DILocation(line: 3975, column: 44, scope: !12530)
!12559 = !DILocation(line: 3975, column: 49, scope: !12530)
!12560 = !DILocation(line: 0, scope: !12530)
!12561 = !DILocation(line: 3976, column: 21, scope: !12530)
!12562 = !DILocation(line: 3976, column: 5, scope: !12530)
!12563 = distinct !{!12563, !12546, !12564}
!12564 = !DILocation(line: 3976, column: 27, scope: !12530)
!12565 = !DILocation(line: 3977, column: 43, scope: !12530)
!12566 = !DILocation(line: 3977, column: 11, scope: !12530)
!12567 = !DILocation(line: 3977, column: 4, scope: !12530)
!12568 = !DILocation(line: 3977, column: 9, scope: !12530)
!12569 = !DILocation(line: 3978, column: 31, scope: !12570)
!12570 = distinct !DILexicalBlock(scope: !12530, file: !3, line: 3978, column: 7)
!12571 = !DILocation(line: 3978, column: 7, scope: !12570)
!12572 = !DILocation(line: 3978, column: 7, scope: !12530)
!12573 = !DILocalVariable(name: "loc", scope: !12574, file: !3, line: 3980, type: !2352)
!12574 = distinct !DILexicalBlock(scope: !12570, file: !3, line: 3979, column: 5)
!12575 = !DILocation(line: 3980, column: 18, scope: !12574)
!12576 = !DILocation(line: 3980, column: 45, scope: !12574)
!12577 = !DILocation(line: 3980, column: 24, scope: !12574)
!12578 = !DILocation(line: 3980, column: 54, scope: !12574)
!12579 = !DILocation(line: 3981, column: 35, scope: !12574)
!12580 = !DILocation(line: 3981, column: 17, scope: !12574)
!12581 = !DILocation(line: 3981, column: 7, scope: !12574)
!12582 = !DILocation(line: 3982, column: 31, scope: !12574)
!12583 = !DILocation(line: 3982, column: 7, scope: !12574)
!12584 = !DILocation(line: 3983, column: 44, scope: !12585)
!12585 = distinct !DILexicalBlock(scope: !12574, file: !3, line: 3983, column: 11)
!12586 = !DILocation(line: 3983, column: 12, scope: !12585)
!12587 = !DILocation(line: 3983, column: 11, scope: !12574)
!12588 = !DILocation(line: 3984, column: 14, scope: !12585)
!12589 = !DILocation(line: 3984, column: 2, scope: !12585)
!12590 = !DILocation(line: 3986, column: 5, scope: !12574)
!12591 = !DILocation(line: 3987, column: 36, scope: !12592)
!12592 = distinct !DILexicalBlock(scope: !12570, file: !3, line: 3987, column: 12)
!12593 = !DILocation(line: 3987, column: 12, scope: !12592)
!12594 = !DILocation(line: 3987, column: 12, scope: !12570)
!12595 = !DILocation(line: 3988, column: 44, scope: !12592)
!12596 = !DILocation(line: 3988, column: 15, scope: !12592)
!12597 = !DILocation(line: 3988, column: 5, scope: !12592)
!12598 = !DILocation(line: 3990, column: 38, scope: !12592)
!12599 = !DILocation(line: 3990, column: 5, scope: !12592)
!12600 = !DILocation(line: 3991, column: 31, scope: !12530)
!12601 = !DILocation(line: 3991, column: 41, scope: !12530)
!12602 = !DILocation(line: 3991, column: 48, scope: !12530)
!12603 = !DILocation(line: 3991, column: 10, scope: !12530)
!12604 = !DILocation(line: 3991, column: 3, scope: !12530)
!12605 = distinct !DISubprogram(name: "c_parser_else_body", scope: !3, file: !3, line: 3999, type: !6114, scopeLine: 4000, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12606 = !DILocalVariable(name: "parser", arg: 1, scope: !12605, file: !3, line: 3999, type: !3401)
!12607 = !DILocation(line: 3999, column: 31, scope: !12605)
!12608 = !DILocalVariable(name: "else_loc", scope: !12605, file: !3, line: 4001, type: !2352)
!12609 = !DILocation(line: 4001, column: 14, scope: !12605)
!12610 = !DILocation(line: 4001, column: 46, scope: !12605)
!12611 = !DILocation(line: 4001, column: 25, scope: !12605)
!12612 = !DILocation(line: 4001, column: 55, scope: !12605)
!12613 = !DILocalVariable(name: "block", scope: !12605, file: !3, line: 4002, type: !2224)
!12614 = !DILocation(line: 4002, column: 8, scope: !12605)
!12615 = !DILocation(line: 4002, column: 39, scope: !12605)
!12616 = !DILocation(line: 4002, column: 16, scope: !12605)
!12617 = !DILocation(line: 4003, column: 3, scope: !12605)
!12618 = !DILocation(line: 4003, column: 42, scope: !12605)
!12619 = !DILocation(line: 4003, column: 10, scope: !12605)
!12620 = !DILocation(line: 4004, column: 3, scope: !12605)
!12621 = !DILocation(line: 4004, column: 38, scope: !12605)
!12622 = !DILocation(line: 4004, column: 6, scope: !12605)
!12623 = !DILocation(line: 4005, column: 3, scope: !12605)
!12624 = !DILocation(line: 4005, column: 31, scope: !12605)
!12625 = !DILocation(line: 4005, column: 7, scope: !12605)
!12626 = !DILocation(line: 4006, column: 7, scope: !12605)
!12627 = !DILocation(line: 4006, column: 35, scope: !12605)
!12628 = !DILocation(line: 4006, column: 10, scope: !12605)
!12629 = !DILocation(line: 4006, column: 44, scope: !12605)
!12630 = !DILocation(line: 4006, column: 49, scope: !12605)
!12631 = !DILocation(line: 0, scope: !12605)
!12632 = !DILocation(line: 4007, column: 21, scope: !12605)
!12633 = !DILocation(line: 4007, column: 5, scope: !12605)
!12634 = distinct !{!12634, !12617, !12635}
!12635 = !DILocation(line: 4007, column: 27, scope: !12605)
!12636 = !DILocation(line: 4008, column: 31, scope: !12637)
!12637 = distinct !DILexicalBlock(scope: !12605, file: !3, line: 4008, column: 7)
!12638 = !DILocation(line: 4008, column: 7, scope: !12637)
!12639 = !DILocation(line: 4008, column: 7, scope: !12605)
!12640 = !DILocalVariable(name: "loc", scope: !12641, file: !3, line: 4010, type: !2352)
!12641 = distinct !DILexicalBlock(scope: !12637, file: !3, line: 4009, column: 5)
!12642 = !DILocation(line: 4010, column: 18, scope: !12641)
!12643 = !DILocation(line: 4010, column: 45, scope: !12641)
!12644 = !DILocation(line: 4010, column: 24, scope: !12641)
!12645 = !DILocation(line: 4010, column: 54, scope: !12641)
!12646 = !DILocation(line: 4011, column: 19, scope: !12641)
!12647 = !DILocation(line: 4011, column: 7, scope: !12641)
!12648 = !DILocation(line: 4014, column: 35, scope: !12641)
!12649 = !DILocation(line: 4014, column: 17, scope: !12641)
!12650 = !DILocation(line: 4014, column: 7, scope: !12641)
!12651 = !DILocation(line: 4015, column: 31, scope: !12641)
!12652 = !DILocation(line: 4015, column: 7, scope: !12641)
!12653 = !DILocation(line: 4016, column: 5, scope: !12641)
!12654 = !DILocation(line: 4018, column: 38, scope: !12637)
!12655 = !DILocation(line: 4018, column: 5, scope: !12637)
!12656 = !DILocation(line: 4019, column: 31, scope: !12605)
!12657 = !DILocation(line: 4019, column: 41, scope: !12605)
!12658 = !DILocation(line: 4019, column: 48, scope: !12605)
!12659 = !DILocation(line: 4019, column: 10, scope: !12605)
!12660 = !DILocation(line: 4019, column: 3, scope: !12605)
!12661 = distinct !DISubprogram(name: "c_parser_condition", scope: !3, file: !3, line: 3920, type: !6114, scopeLine: 3921, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12662 = !DILocalVariable(name: "parser", arg: 1, scope: !12661, file: !3, line: 3920, type: !3401)
!12663 = !DILocation(line: 3920, column: 31, scope: !12661)
!12664 = !DILocalVariable(name: "loc", scope: !12661, file: !3, line: 3922, type: !2352)
!12665 = !DILocation(line: 3922, column: 14, scope: !12661)
!12666 = !DILocation(line: 3922, column: 41, scope: !12661)
!12667 = !DILocation(line: 3922, column: 20, scope: !12661)
!12668 = !DILocation(line: 3922, column: 50, scope: !12661)
!12669 = !DILocalVariable(name: "cond", scope: !12661, file: !3, line: 3923, type: !2224)
!12670 = !DILocation(line: 3923, column: 8, scope: !12661)
!12671 = !DILocation(line: 3924, column: 36, scope: !12661)
!12672 = !DILocation(line: 3924, column: 10, scope: !12661)
!12673 = !DILocation(line: 3924, column: 44, scope: !12661)
!12674 = !DILocation(line: 3924, column: 8, scope: !12661)
!12675 = !DILocation(line: 3925, column: 47, scope: !12661)
!12676 = !DILocation(line: 3925, column: 52, scope: !12661)
!12677 = !DILocation(line: 3925, column: 10, scope: !12661)
!12678 = !DILocation(line: 3925, column: 8, scope: !12661)
!12679 = !DILocation(line: 3926, column: 24, scope: !12661)
!12680 = !DILocation(line: 3926, column: 10, scope: !12661)
!12681 = !DILocation(line: 3926, column: 8, scope: !12661)
!12682 = !DILocation(line: 3927, column: 7, scope: !12683)
!12683 = distinct !DILexicalBlock(scope: !12661, file: !3, line: 3927, column: 7)
!12684 = !DILocation(line: 3927, column: 7, scope: !12661)
!12685 = !DILocation(line: 3928, column: 29, scope: !12683)
!12686 = !DILocation(line: 3928, column: 5, scope: !12683)
!12687 = !DILocation(line: 3929, column: 10, scope: !12661)
!12688 = !DILocation(line: 3929, column: 3, scope: !12661)
!12689 = distinct !DISubprogram(name: "c_parser_c99_block_statement", scope: !3, file: !3, line: 3951, type: !6114, scopeLine: 3952, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12690 = !DILocalVariable(name: "parser", arg: 1, scope: !12689, file: !3, line: 3951, type: !3401)
!12691 = !DILocation(line: 3951, column: 41, scope: !12689)
!12692 = !DILocalVariable(name: "block", scope: !12689, file: !3, line: 3953, type: !2224)
!12693 = !DILocation(line: 3953, column: 8, scope: !12689)
!12694 = !DILocation(line: 3953, column: 39, scope: !12689)
!12695 = !DILocation(line: 3953, column: 16, scope: !12689)
!12696 = !DILocalVariable(name: "loc", scope: !12689, file: !3, line: 3954, type: !2352)
!12697 = !DILocation(line: 3954, column: 14, scope: !12689)
!12698 = !DILocation(line: 3954, column: 41, scope: !12689)
!12699 = !DILocation(line: 3954, column: 20, scope: !12689)
!12700 = !DILocation(line: 3954, column: 50, scope: !12689)
!12701 = !DILocation(line: 3955, column: 23, scope: !12689)
!12702 = !DILocation(line: 3955, column: 3, scope: !12689)
!12703 = !DILocation(line: 3956, column: 31, scope: !12689)
!12704 = !DILocation(line: 3956, column: 36, scope: !12689)
!12705 = !DILocation(line: 3956, column: 43, scope: !12689)
!12706 = !DILocation(line: 3956, column: 10, scope: !12689)
!12707 = !DILocation(line: 3956, column: 3, scope: !12689)
!12708 = distinct !DISubprogram(name: "c_parser_statement", scope: !3, file: !3, line: 3766, type: !4514, scopeLine: 3767, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12709 = !DILocalVariable(name: "parser", arg: 1, scope: !12708, file: !3, line: 3766, type: !3401)
!12710 = !DILocation(line: 3766, column: 31, scope: !12708)
!12711 = !DILocation(line: 3768, column: 3, scope: !12708)
!12712 = !DILocation(line: 3768, column: 42, scope: !12708)
!12713 = !DILocation(line: 3768, column: 10, scope: !12708)
!12714 = !DILocation(line: 3769, column: 3, scope: !12708)
!12715 = !DILocation(line: 3769, column: 38, scope: !12708)
!12716 = !DILocation(line: 3769, column: 6, scope: !12708)
!12717 = !DILocation(line: 3770, column: 3, scope: !12708)
!12718 = !DILocation(line: 3770, column: 31, scope: !12708)
!12719 = !DILocation(line: 3770, column: 7, scope: !12708)
!12720 = !DILocation(line: 3771, column: 7, scope: !12708)
!12721 = !DILocation(line: 3771, column: 35, scope: !12708)
!12722 = !DILocation(line: 3771, column: 10, scope: !12708)
!12723 = !DILocation(line: 3771, column: 44, scope: !12708)
!12724 = !DILocation(line: 3771, column: 49, scope: !12708)
!12725 = !DILocation(line: 0, scope: !12708)
!12726 = !DILocation(line: 3772, column: 21, scope: !12708)
!12727 = !DILocation(line: 3772, column: 5, scope: !12708)
!12728 = distinct !{!12728, !12711, !12729}
!12729 = !DILocation(line: 3772, column: 27, scope: !12708)
!12730 = !DILocation(line: 3773, column: 36, scope: !12708)
!12731 = !DILocation(line: 3773, column: 3, scope: !12708)
!12732 = !DILocation(line: 3774, column: 1, scope: !12708)
!12733 = distinct !DISubprogram(name: "c_parser_skip_to_end_of_block_or_statement", scope: !3, file: !3, line: 757, type: !4514, scopeLine: 758, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12734 = !DILocalVariable(name: "parser", arg: 1, scope: !12733, file: !3, line: 757, type: !3401)
!12735 = !DILocation(line: 757, column: 55, scope: !12733)
!12736 = !DILocalVariable(name: "nesting_depth", scope: !12733, file: !3, line: 759, type: !7)
!12737 = !DILocation(line: 759, column: 12, scope: !12733)
!12738 = !DILocalVariable(name: "save_error", scope: !12733, file: !3, line: 760, type: !2344)
!12739 = !DILocation(line: 760, column: 8, scope: !12733)
!12740 = !DILocation(line: 760, column: 21, scope: !12733)
!12741 = !DILocation(line: 760, column: 29, scope: !12733)
!12742 = !DILocation(line: 762, column: 3, scope: !12733)
!12743 = !DILocalVariable(name: "token", scope: !12744, file: !3, line: 764, type: !4459)
!12744 = distinct !DILexicalBlock(scope: !12733, file: !3, line: 763, column: 5)
!12745 = !DILocation(line: 764, column: 16, scope: !12744)
!12746 = !DILocation(line: 767, column: 36, scope: !12744)
!12747 = !DILocation(line: 767, column: 15, scope: !12744)
!12748 = !DILocation(line: 767, column: 13, scope: !12744)
!12749 = !DILocation(line: 769, column: 15, scope: !12744)
!12750 = !DILocation(line: 769, column: 22, scope: !12744)
!12751 = !DILocation(line: 769, column: 7, scope: !12744)
!12752 = !DILocation(line: 772, column: 4, scope: !12753)
!12753 = distinct !DILexicalBlock(scope: !12744, file: !3, line: 770, column: 2)
!12754 = !DILocation(line: 775, column: 8, scope: !12755)
!12755 = distinct !DILexicalBlock(scope: !12753, file: !3, line: 775, column: 8)
!12756 = !DILocation(line: 775, column: 16, scope: !12755)
!12757 = !DILocation(line: 775, column: 8, scope: !12753)
!12758 = !DILocation(line: 776, column: 6, scope: !12755)
!12759 = !DILocation(line: 777, column: 4, scope: !12753)
!12760 = !DILocation(line: 782, column: 9, scope: !12761)
!12761 = distinct !DILexicalBlock(scope: !12753, file: !3, line: 782, column: 8)
!12762 = !DILocation(line: 782, column: 8, scope: !12753)
!12763 = !DILocation(line: 785, column: 32, scope: !12764)
!12764 = distinct !DILexicalBlock(scope: !12761, file: !3, line: 783, column: 6)
!12765 = !DILocation(line: 785, column: 8, scope: !12764)
!12766 = !DILocation(line: 786, column: 8, scope: !12764)
!12767 = !DILocation(line: 788, column: 4, scope: !12753)
!12768 = !DILocation(line: 793, column: 8, scope: !12769)
!12769 = distinct !DILexicalBlock(scope: !12753, file: !3, line: 793, column: 8)
!12770 = !DILocation(line: 793, column: 22, scope: !12769)
!12771 = !DILocation(line: 793, column: 27, scope: !12769)
!12772 = !DILocation(line: 793, column: 30, scope: !12769)
!12773 = !DILocation(line: 793, column: 46, scope: !12769)
!12774 = !DILocation(line: 793, column: 8, scope: !12753)
!12775 = !DILocation(line: 795, column: 32, scope: !12776)
!12776 = distinct !DILexicalBlock(scope: !12769, file: !3, line: 794, column: 6)
!12777 = !DILocation(line: 795, column: 8, scope: !12776)
!12778 = !DILocation(line: 796, column: 8, scope: !12776)
!12779 = !DILocation(line: 798, column: 4, scope: !12753)
!12780 = !DILocation(line: 803, column: 4, scope: !12753)
!12781 = !DILocation(line: 804, column: 4, scope: !12753)
!12782 = !DILocation(line: 813, column: 29, scope: !12753)
!12783 = !DILocation(line: 813, column: 4, scope: !12753)
!12784 = !DILocation(line: 814, column: 33, scope: !12753)
!12785 = !DILocation(line: 814, column: 4, scope: !12753)
!12786 = !DILocation(line: 815, column: 20, scope: !12753)
!12787 = !DILocation(line: 815, column: 4, scope: !12753)
!12788 = !DILocation(line: 815, column: 12, scope: !12753)
!12789 = !DILocation(line: 815, column: 18, scope: !12753)
!12790 = !DILocation(line: 816, column: 4, scope: !12753)
!12791 = distinct !{!12791, !12742, !12792}
!12792 = !DILocation(line: 823, column: 5, scope: !12733)
!12793 = !DILocation(line: 819, column: 4, scope: !12753)
!12794 = !DILocation(line: 822, column: 31, scope: !12744)
!12795 = !DILocation(line: 822, column: 7, scope: !12744)
!12796 = !DILabel(scope: !12733, name: "finished", file: !3, line: 825)
!12797 = !DILocation(line: 825, column: 2, scope: !12733)
!12798 = !DILocation(line: 826, column: 3, scope: !12733)
!12799 = !DILocation(line: 826, column: 11, scope: !12733)
!12800 = !DILocation(line: 826, column: 17, scope: !12733)
!12801 = !DILocation(line: 827, column: 1, scope: !12733)
!12802 = distinct !DISubprogram(name: "c_parser_asm_operands", scope: !3, file: !3, line: 4418, type: !12803, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12803 = !DISubroutineType(types: !12804)
!12804 = !{!2224, !3401, !2344}
!12805 = !DILocalVariable(name: "parser", arg: 1, scope: !12802, file: !3, line: 4418, type: !3401)
!12806 = !DILocation(line: 4418, column: 34, scope: !12802)
!12807 = !DILocalVariable(name: "convert_p", arg: 2, scope: !12802, file: !3, line: 4418, type: !2344)
!12808 = !DILocation(line: 4418, column: 47, scope: !12802)
!12809 = !DILocalVariable(name: "list", scope: !12802, file: !3, line: 4420, type: !2224)
!12810 = !DILocation(line: 4420, column: 8, scope: !12802)
!12811 = !DILocalVariable(name: "loc", scope: !12802, file: !3, line: 4421, type: !2352)
!12812 = !DILocation(line: 4421, column: 14, scope: !12802)
!12813 = !DILocation(line: 4422, column: 3, scope: !12802)
!12814 = !DILocalVariable(name: "name", scope: !12815, file: !3, line: 4424, type: !2224)
!12815 = distinct !DILexicalBlock(scope: !12802, file: !3, line: 4423, column: 5)
!12816 = !DILocation(line: 4424, column: 12, scope: !12815)
!12817 = !DILocalVariable(name: "str", scope: !12815, file: !3, line: 4424, type: !2224)
!12818 = !DILocation(line: 4424, column: 18, scope: !12815)
!12819 = !DILocalVariable(name: "expr", scope: !12815, file: !3, line: 4425, type: !2221)
!12820 = !DILocation(line: 4425, column: 21, scope: !12815)
!12821 = !DILocation(line: 4426, column: 35, scope: !12822)
!12822 = distinct !DILexicalBlock(scope: !12815, file: !3, line: 4426, column: 11)
!12823 = !DILocation(line: 4426, column: 11, scope: !12822)
!12824 = !DILocation(line: 4426, column: 11, scope: !12815)
!12825 = !DILocation(line: 4428, column: 28, scope: !12826)
!12826 = distinct !DILexicalBlock(scope: !12822, file: !3, line: 4427, column: 2)
!12827 = !DILocation(line: 4428, column: 4, scope: !12826)
!12828 = !DILocation(line: 4429, column: 32, scope: !12829)
!12829 = distinct !DILexicalBlock(scope: !12826, file: !3, line: 4429, column: 8)
!12830 = !DILocation(line: 4429, column: 8, scope: !12829)
!12831 = !DILocation(line: 4429, column: 8, scope: !12826)
!12832 = !DILocalVariable(name: "id", scope: !12833, file: !3, line: 4431, type: !2224)
!12833 = distinct !DILexicalBlock(scope: !12829, file: !3, line: 4430, column: 6)
!12834 = !DILocation(line: 4431, column: 13, scope: !12833)
!12835 = !DILocation(line: 4431, column: 39, scope: !12833)
!12836 = !DILocation(line: 4431, column: 18, scope: !12833)
!12837 = !DILocation(line: 4431, column: 48, scope: !12833)
!12838 = !DILocation(line: 4432, column: 32, scope: !12833)
!12839 = !DILocation(line: 4432, column: 8, scope: !12833)
!12840 = !DILocation(line: 4433, column: 29, scope: !12833)
!12841 = !DILocation(line: 4434, column: 8, scope: !12833)
!12842 = !DILocation(line: 4433, column: 15, scope: !12833)
!12843 = !DILocation(line: 4433, column: 13, scope: !12833)
!12844 = !DILocation(line: 4435, column: 6, scope: !12833)
!12845 = !DILocation(line: 4438, column: 24, scope: !12846)
!12846 = distinct !DILexicalBlock(scope: !12829, file: !3, line: 4437, column: 6)
!12847 = !DILocation(line: 4438, column: 8, scope: !12846)
!12848 = !DILocation(line: 4439, column: 35, scope: !12846)
!12849 = !DILocation(line: 4439, column: 8, scope: !12846)
!12850 = !DILocation(line: 4440, column: 8, scope: !12846)
!12851 = !DILocation(line: 4442, column: 31, scope: !12826)
!12852 = !DILocation(line: 4442, column: 4, scope: !12826)
!12853 = !DILocation(line: 4444, column: 2, scope: !12826)
!12854 = !DILocation(line: 4446, column: 7, scope: !12822)
!12855 = !DILocation(line: 4447, column: 42, scope: !12815)
!12856 = !DILocation(line: 4447, column: 13, scope: !12815)
!12857 = !DILocation(line: 4447, column: 11, scope: !12815)
!12858 = !DILocation(line: 4448, column: 11, scope: !12859)
!12859 = distinct !DILexicalBlock(scope: !12815, file: !3, line: 4448, column: 11)
!12860 = !DILocation(line: 4448, column: 15, scope: !12859)
!12861 = !DILocation(line: 4448, column: 11, scope: !12815)
!12862 = !DILocation(line: 4449, column: 2, scope: !12859)
!12863 = !DILocation(line: 4450, column: 7, scope: !12815)
!12864 = !DILocation(line: 4450, column: 15, scope: !12815)
!12865 = !DILocation(line: 4450, column: 39, scope: !12815)
!12866 = !DILocation(line: 4451, column: 30, scope: !12867)
!12867 = distinct !DILexicalBlock(scope: !12815, file: !3, line: 4451, column: 11)
!12868 = !DILocation(line: 4451, column: 12, scope: !12867)
!12869 = !DILocation(line: 4451, column: 11, scope: !12815)
!12870 = !DILocation(line: 4453, column: 4, scope: !12871)
!12871 = distinct !DILexicalBlock(scope: !12867, file: !3, line: 4452, column: 2)
!12872 = !DILocation(line: 4453, column: 12, scope: !12871)
!12873 = !DILocation(line: 4453, column: 36, scope: !12871)
!12874 = !DILocation(line: 4454, column: 4, scope: !12871)
!12875 = !DILocation(line: 4456, column: 34, scope: !12815)
!12876 = !DILocation(line: 4456, column: 13, scope: !12815)
!12877 = !DILocation(line: 4456, column: 43, scope: !12815)
!12878 = !DILocation(line: 4456, column: 11, scope: !12815)
!12879 = !DILocation(line: 4457, column: 35, scope: !12815)
!12880 = !DILocation(line: 4457, column: 14, scope: !12815)
!12881 = !DILocation(line: 4458, column: 11, scope: !12882)
!12882 = distinct !DILexicalBlock(scope: !12815, file: !3, line: 4458, column: 11)
!12883 = !DILocation(line: 4458, column: 11, scope: !12815)
!12884 = !DILocation(line: 4459, column: 44, scope: !12882)
!12885 = !DILocation(line: 4459, column: 9, scope: !12882)
!12886 = !DILocation(line: 4459, column: 2, scope: !12882)
!12887 = !DILocation(line: 4460, column: 39, scope: !12815)
!12888 = !DILocation(line: 4460, column: 20, scope: !12815)
!12889 = !DILocation(line: 4460, column: 12, scope: !12815)
!12890 = !DILocation(line: 4460, column: 18, scope: !12815)
!12891 = !DILocation(line: 4461, column: 7, scope: !12815)
!12892 = !DILocation(line: 4461, column: 15, scope: !12815)
!12893 = !DILocation(line: 4461, column: 39, scope: !12815)
!12894 = !DILocation(line: 4462, column: 30, scope: !12895)
!12895 = distinct !DILexicalBlock(scope: !12815, file: !3, line: 4462, column: 11)
!12896 = !DILocation(line: 4462, column: 12, scope: !12895)
!12897 = !DILocation(line: 4462, column: 11, scope: !12815)
!12898 = !DILocation(line: 4464, column: 31, scope: !12899)
!12899 = distinct !DILexicalBlock(scope: !12895, file: !3, line: 4463, column: 2)
!12900 = !DILocation(line: 4464, column: 4, scope: !12899)
!12901 = !DILocation(line: 4465, column: 4, scope: !12899)
!12902 = !DILocation(line: 4467, column: 23, scope: !12815)
!12903 = !DILocation(line: 4467, column: 29, scope: !12815)
!12904 = !DILocation(line: 4467, column: 14, scope: !12815)
!12905 = !DILocation(line: 4467, column: 12, scope: !12815)
!12906 = !DILocation(line: 4469, column: 35, scope: !12907)
!12907 = distinct !DILexicalBlock(scope: !12815, file: !3, line: 4469, column: 11)
!12908 = !DILocation(line: 4469, column: 11, scope: !12907)
!12909 = !DILocation(line: 4469, column: 11, scope: !12815)
!12910 = !DILocation(line: 4470, column: 26, scope: !12907)
!12911 = !DILocation(line: 4470, column: 2, scope: !12907)
!12912 = !DILocation(line: 4472, column: 2, scope: !12907)
!12913 = distinct !{!12913, !12813, !12914}
!12914 = !DILocation(line: 4473, column: 5, scope: !12802)
!12915 = !DILocation(line: 4474, column: 10, scope: !12802)
!12916 = !DILocation(line: 4474, column: 3, scope: !12802)
!12917 = !DILocation(line: 4475, column: 1, scope: !12802)
!12918 = distinct !DISubprogram(name: "c_parser_asm_clobbers", scope: !3, file: !3, line: 4485, type: !6114, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12919 = !DILocalVariable(name: "parser", arg: 1, scope: !12918, file: !3, line: 4485, type: !3401)
!12920 = !DILocation(line: 4485, column: 34, scope: !12918)
!12921 = !DILocalVariable(name: "list", scope: !12918, file: !3, line: 4487, type: !2224)
!12922 = !DILocation(line: 4487, column: 8, scope: !12918)
!12923 = !DILocation(line: 4488, column: 3, scope: !12918)
!12924 = !DILocalVariable(name: "str", scope: !12925, file: !3, line: 4490, type: !2224)
!12925 = distinct !DILexicalBlock(scope: !12918, file: !3, line: 4489, column: 5)
!12926 = !DILocation(line: 4490, column: 12, scope: !12925)
!12927 = !DILocation(line: 4490, column: 47, scope: !12925)
!12928 = !DILocation(line: 4490, column: 18, scope: !12925)
!12929 = !DILocation(line: 4491, column: 11, scope: !12930)
!12930 = distinct !DILexicalBlock(scope: !12925, file: !3, line: 4491, column: 11)
!12931 = !DILocation(line: 4491, column: 11, scope: !12925)
!12932 = !DILocation(line: 4492, column: 9, scope: !12930)
!12933 = !DILocation(line: 4492, column: 7, scope: !12930)
!12934 = !DILocation(line: 4492, column: 2, scope: !12930)
!12935 = !DILocation(line: 4494, column: 2, scope: !12930)
!12936 = !DILocation(line: 4495, column: 35, scope: !12937)
!12937 = distinct !DILexicalBlock(scope: !12925, file: !3, line: 4495, column: 11)
!12938 = !DILocation(line: 4495, column: 11, scope: !12937)
!12939 = !DILocation(line: 4495, column: 11, scope: !12925)
!12940 = !DILocation(line: 4496, column: 26, scope: !12937)
!12941 = !DILocation(line: 4496, column: 2, scope: !12937)
!12942 = !DILocation(line: 4498, column: 2, scope: !12937)
!12943 = distinct !{!12943, !12923, !12944}
!12944 = !DILocation(line: 4499, column: 5, scope: !12918)
!12945 = !DILocation(line: 4500, column: 10, scope: !12918)
!12946 = !DILocation(line: 4500, column: 3, scope: !12918)
!12947 = !DILocation(line: 4501, column: 1, scope: !12918)
!12948 = distinct !DISubprogram(name: "c_parser_asm_goto_operands", scope: !3, file: !3, line: 4511, type: !6114, scopeLine: 4512, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!12949 = !DILocalVariable(name: "parser", arg: 1, scope: !12948, file: !3, line: 4511, type: !3401)
!12950 = !DILocation(line: 4511, column: 39, scope: !12948)
!12951 = !DILocalVariable(name: "list", scope: !12948, file: !3, line: 4513, type: !2224)
!12952 = !DILocation(line: 4513, column: 8, scope: !12948)
!12953 = !DILocation(line: 4514, column: 3, scope: !12948)
!12954 = !DILocalVariable(name: "name", scope: !12955, file: !3, line: 4516, type: !2224)
!12955 = distinct !DILexicalBlock(scope: !12948, file: !3, line: 4515, column: 5)
!12956 = !DILocation(line: 4516, column: 12, scope: !12955)
!12957 = !DILocalVariable(name: "label", scope: !12955, file: !3, line: 4516, type: !2224)
!12958 = !DILocation(line: 4516, column: 18, scope: !12955)
!12959 = !DILocation(line: 4518, column: 35, scope: !12960)
!12960 = distinct !DILexicalBlock(scope: !12955, file: !3, line: 4518, column: 11)
!12961 = !DILocation(line: 4518, column: 11, scope: !12960)
!12962 = !DILocation(line: 4518, column: 11, scope: !12955)
!12963 = !DILocalVariable(name: "tok", scope: !12964, file: !3, line: 4520, type: !4459)
!12964 = distinct !DILexicalBlock(scope: !12960, file: !3, line: 4519, column: 2)
!12965 = !DILocation(line: 4520, column: 13, scope: !12964)
!12966 = !DILocation(line: 4520, column: 40, scope: !12964)
!12967 = !DILocation(line: 4520, column: 19, scope: !12964)
!12968 = !DILocation(line: 4521, column: 11, scope: !12964)
!12969 = !DILocation(line: 4521, column: 16, scope: !12964)
!12970 = !DILocation(line: 4521, column: 9, scope: !12964)
!12971 = !DILocation(line: 4522, column: 35, scope: !12964)
!12972 = !DILocation(line: 4522, column: 40, scope: !12964)
!12973 = !DILocation(line: 4522, column: 50, scope: !12964)
!12974 = !DILocation(line: 4522, column: 12, scope: !12964)
!12975 = !DILocation(line: 4522, column: 10, scope: !12964)
!12976 = !DILocation(line: 4523, column: 28, scope: !12964)
!12977 = !DILocation(line: 4523, column: 4, scope: !12964)
!12978 = !DILocation(line: 4524, column: 4, scope: !12964)
!12979 = !DILocation(line: 4524, column: 22, scope: !12964)
!12980 = !DILocation(line: 4525, column: 2, scope: !12964)
!12981 = !DILocation(line: 4528, column: 20, scope: !12982)
!12982 = distinct !DILexicalBlock(scope: !12960, file: !3, line: 4527, column: 2)
!12983 = !DILocation(line: 4528, column: 4, scope: !12982)
!12984 = !DILocation(line: 4529, column: 4, scope: !12982)
!12985 = !DILocation(line: 4532, column: 28, scope: !12955)
!12986 = !DILocation(line: 4533, column: 7, scope: !12955)
!12987 = !DILocation(line: 4532, column: 14, scope: !12955)
!12988 = !DILocation(line: 4532, column: 12, scope: !12955)
!12989 = !DILocation(line: 4534, column: 14, scope: !12955)
!12990 = !DILocation(line: 4534, column: 12, scope: !12955)
!12991 = !DILocation(line: 4535, column: 35, scope: !12992)
!12992 = distinct !DILexicalBlock(scope: !12955, file: !3, line: 4535, column: 11)
!12993 = !DILocation(line: 4535, column: 11, scope: !12992)
!12994 = !DILocation(line: 4535, column: 11, scope: !12955)
!12995 = !DILocation(line: 4536, column: 26, scope: !12992)
!12996 = !DILocation(line: 4536, column: 2, scope: !12992)
!12997 = !DILocation(line: 4538, column: 19, scope: !12992)
!12998 = !DILocation(line: 4538, column: 9, scope: !12992)
!12999 = !DILocation(line: 4538, column: 2, scope: !12992)
!13000 = distinct !{!13000, !12953, !13001}
!13001 = !DILocation(line: 4539, column: 5, scope: !12948)
!13002 = !DILocation(line: 4540, column: 1, scope: !12948)
!13003 = distinct !DISubprogram(name: "c_parser_struct_declaration", scope: !3, file: !3, line: 2003, type: !6114, scopeLine: 2004, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!13004 = !DILocalVariable(name: "parser", arg: 1, scope: !13003, file: !3, line: 2003, type: !3401)
!13005 = !DILocation(line: 2003, column: 40, scope: !13003)
!13006 = !DILocalVariable(name: "specs", scope: !13003, file: !3, line: 2005, type: !4282)
!13007 = !DILocation(line: 2005, column: 23, scope: !13003)
!13008 = !DILocalVariable(name: "prefix_attrs", scope: !13003, file: !3, line: 2006, type: !2224)
!13009 = !DILocation(line: 2006, column: 8, scope: !13003)
!13010 = !DILocalVariable(name: "all_prefix_attrs", scope: !13003, file: !3, line: 2007, type: !2224)
!13011 = !DILocation(line: 2007, column: 8, scope: !13003)
!13012 = !DILocalVariable(name: "decls", scope: !13003, file: !3, line: 2008, type: !2224)
!13013 = !DILocation(line: 2008, column: 8, scope: !13003)
!13014 = !DILocalVariable(name: "decl_loc", scope: !13003, file: !3, line: 2009, type: !2352)
!13015 = !DILocation(line: 2009, column: 14, scope: !13003)
!13016 = !DILocation(line: 2010, column: 39, scope: !13017)
!13017 = distinct !DILexicalBlock(scope: !13003, file: !3, line: 2010, column: 7)
!13018 = !DILocation(line: 2010, column: 7, scope: !13017)
!13019 = !DILocation(line: 2010, column: 7, scope: !13003)
!13020 = !DILocalVariable(name: "ext", scope: !13021, file: !3, line: 2012, type: !2321)
!13021 = distinct !DILexicalBlock(scope: !13017, file: !3, line: 2011, column: 5)
!13022 = !DILocation(line: 2012, column: 11, scope: !13021)
!13023 = !DILocalVariable(name: "decl", scope: !13021, file: !3, line: 2013, type: !2224)
!13024 = !DILocation(line: 2013, column: 12, scope: !13021)
!13025 = !DILocation(line: 2014, column: 13, scope: !13021)
!13026 = !DILocation(line: 2014, column: 11, scope: !13021)
!13027 = !DILocation(line: 2015, column: 31, scope: !13021)
!13028 = !DILocation(line: 2015, column: 7, scope: !13021)
!13029 = !DILocation(line: 2016, column: 43, scope: !13021)
!13030 = !DILocation(line: 2016, column: 14, scope: !13021)
!13031 = !DILocation(line: 2016, column: 12, scope: !13021)
!13032 = !DILocation(line: 2017, column: 38, scope: !13021)
!13033 = !DILocation(line: 2017, column: 7, scope: !13021)
!13034 = !DILocation(line: 2018, column: 14, scope: !13021)
!13035 = !DILocation(line: 2018, column: 7, scope: !13021)
!13036 = !DILocation(line: 2020, column: 11, scope: !13003)
!13037 = !DILocation(line: 2020, column: 9, scope: !13003)
!13038 = !DILocation(line: 2021, column: 35, scope: !13003)
!13039 = !DILocation(line: 2021, column: 14, scope: !13003)
!13040 = !DILocation(line: 2021, column: 44, scope: !13003)
!13041 = !DILocation(line: 2021, column: 12, scope: !13003)
!13042 = !DILocation(line: 2022, column: 23, scope: !13003)
!13043 = !DILocation(line: 2022, column: 31, scope: !13003)
!13044 = !DILocation(line: 2022, column: 3, scope: !13003)
!13045 = !DILocation(line: 2023, column: 7, scope: !13046)
!13046 = distinct !DILexicalBlock(scope: !13003, file: !3, line: 2023, column: 7)
!13047 = !DILocation(line: 2023, column: 15, scope: !13046)
!13048 = !DILocation(line: 2023, column: 7, scope: !13003)
!13049 = !DILocation(line: 2024, column: 5, scope: !13046)
!13050 = !DILocation(line: 2025, column: 8, scope: !13051)
!13051 = distinct !DILexicalBlock(scope: !13003, file: !3, line: 2025, column: 7)
!13052 = !DILocation(line: 2025, column: 15, scope: !13051)
!13053 = !DILocation(line: 2025, column: 7, scope: !13003)
!13054 = !DILocation(line: 2027, column: 23, scope: !13055)
!13055 = distinct !DILexicalBlock(scope: !13051, file: !3, line: 2026, column: 5)
!13056 = !DILocation(line: 2027, column: 7, scope: !13055)
!13057 = !DILocation(line: 2028, column: 7, scope: !13055)
!13058 = !DILocation(line: 2030, column: 21, scope: !13003)
!13059 = !DILocation(line: 2030, column: 3, scope: !13003)
!13060 = !DILocation(line: 2031, column: 31, scope: !13061)
!13061 = distinct !DILexicalBlock(scope: !13003, file: !3, line: 2031, column: 7)
!13062 = !DILocation(line: 2031, column: 7, scope: !13061)
!13063 = !DILocation(line: 2031, column: 7, scope: !13003)
!13064 = !DILocalVariable(name: "ret", scope: !13065, file: !3, line: 2033, type: !2224)
!13065 = distinct !DILexicalBlock(scope: !13061, file: !3, line: 2032, column: 5)
!13066 = !DILocation(line: 2033, column: 12, scope: !13065)
!13067 = !DILocation(line: 2034, column: 12, scope: !13068)
!13068 = distinct !DILexicalBlock(scope: !13065, file: !3, line: 2034, column: 11)
!13069 = !DILocation(line: 2034, column: 19, scope: !13068)
!13070 = !DILocation(line: 2034, column: 11, scope: !13065)
!13071 = !DILocation(line: 2036, column: 13, scope: !13072)
!13072 = distinct !DILexicalBlock(scope: !13068, file: !3, line: 2035, column: 2)
!13073 = !DILocation(line: 2036, column: 4, scope: !13072)
!13074 = !DILocation(line: 2038, column: 23, scope: !13072)
!13075 = !DILocation(line: 2038, column: 30, scope: !13072)
!13076 = !DILocation(line: 2038, column: 4, scope: !13072)
!13077 = !DILocation(line: 2039, column: 8, scope: !13072)
!13078 = !DILocation(line: 2040, column: 2, scope: !13072)
!13079 = !DILocalVariable(name: "attrs", scope: !13080, file: !3, line: 2046, type: !2224)
!13080 = distinct !DILexicalBlock(scope: !13068, file: !3, line: 2042, column: 2)
!13081 = !DILocation(line: 2046, column: 9, scope: !13080)
!13082 = !DILocation(line: 2048, column: 42, scope: !13080)
!13083 = !DILocation(line: 2048, column: 21, scope: !13080)
!13084 = !DILocation(line: 2048, column: 51, scope: !13080)
!13085 = !DILocation(line: 2049, column: 7, scope: !13080)
!13086 = !DILocation(line: 2049, column: 40, scope: !13080)
!13087 = !DILocation(line: 2048, column: 10, scope: !13080)
!13088 = !DILocation(line: 2048, column: 8, scope: !13080)
!13089 = !DILocation(line: 2051, column: 8, scope: !13090)
!13090 = distinct !DILexicalBlock(scope: !13080, file: !3, line: 2051, column: 8)
!13091 = !DILocation(line: 2051, column: 8, scope: !13080)
!13092 = !DILocation(line: 2052, column: 29, scope: !13090)
!13093 = !DILocation(line: 2052, column: 6, scope: !13090)
!13094 = !DILocation(line: 2054, column: 14, scope: !13065)
!13095 = !DILocation(line: 2054, column: 7, scope: !13065)
!13096 = !DILocation(line: 2056, column: 3, scope: !13003)
!13097 = !DILocation(line: 2057, column: 18, scope: !13003)
!13098 = !DILocation(line: 2057, column: 25, scope: !13003)
!13099 = !DILocation(line: 2057, column: 16, scope: !13003)
!13100 = !DILocation(line: 2058, column: 22, scope: !13003)
!13101 = !DILocation(line: 2058, column: 20, scope: !13003)
!13102 = !DILocation(line: 2059, column: 3, scope: !13003)
!13103 = !DILocation(line: 2059, column: 10, scope: !13003)
!13104 = !DILocation(line: 2059, column: 16, scope: !13003)
!13105 = !DILocation(line: 2060, column: 9, scope: !13003)
!13106 = !DILocation(line: 2061, column: 3, scope: !13003)
!13107 = !DILocalVariable(name: "declarator", scope: !13108, file: !3, line: 2064, type: !4315)
!13108 = distinct !DILexicalBlock(scope: !13003, file: !3, line: 2062, column: 5)
!13109 = !DILocation(line: 2064, column: 28, scope: !13108)
!13110 = !DILocalVariable(name: "dummy", scope: !13108, file: !3, line: 2065, type: !2344)
!13111 = !DILocation(line: 2065, column: 12, scope: !13108)
!13112 = !DILocation(line: 2066, column: 35, scope: !13113)
!13113 = distinct !DILexicalBlock(scope: !13108, file: !3, line: 2066, column: 11)
!13114 = !DILocation(line: 2066, column: 11, scope: !13113)
!13115 = !DILocation(line: 2066, column: 11, scope: !13108)
!13116 = !DILocation(line: 2067, column: 15, scope: !13113)
!13117 = !DILocation(line: 2067, column: 13, scope: !13113)
!13118 = !DILocation(line: 2067, column: 2, scope: !13113)
!13119 = !DILocation(line: 2069, column: 36, scope: !13113)
!13120 = !DILocation(line: 2069, column: 44, scope: !13113)
!13121 = !DILocation(line: 2069, column: 51, scope: !13113)
!13122 = !DILocation(line: 2069, column: 15, scope: !13113)
!13123 = !DILocation(line: 2069, column: 13, scope: !13113)
!13124 = !DILocation(line: 2071, column: 11, scope: !13125)
!13125 = distinct !DILexicalBlock(scope: !13108, file: !3, line: 2071, column: 11)
!13126 = !DILocation(line: 2071, column: 22, scope: !13125)
!13127 = !DILocation(line: 2071, column: 11, scope: !13108)
!13128 = !DILocation(line: 2073, column: 48, scope: !13129)
!13129 = distinct !DILexicalBlock(scope: !13125, file: !3, line: 2072, column: 2)
!13130 = !DILocation(line: 2073, column: 4, scope: !13129)
!13131 = !DILocation(line: 2074, column: 4, scope: !13129)
!13132 = !DILocation(line: 2076, column: 35, scope: !13133)
!13133 = distinct !DILexicalBlock(scope: !13108, file: !3, line: 2076, column: 11)
!13134 = !DILocation(line: 2076, column: 11, scope: !13133)
!13135 = !DILocation(line: 2077, column: 4, scope: !13133)
!13136 = !DILocation(line: 2077, column: 31, scope: !13133)
!13137 = !DILocation(line: 2077, column: 7, scope: !13133)
!13138 = !DILocation(line: 2078, column: 4, scope: !13133)
!13139 = !DILocation(line: 2078, column: 31, scope: !13133)
!13140 = !DILocation(line: 2078, column: 7, scope: !13133)
!13141 = !DILocation(line: 2079, column: 4, scope: !13133)
!13142 = !DILocation(line: 2079, column: 31, scope: !13133)
!13143 = !DILocation(line: 2079, column: 7, scope: !13133)
!13144 = !DILocation(line: 2080, column: 4, scope: !13133)
!13145 = !DILocation(line: 2080, column: 39, scope: !13133)
!13146 = !DILocation(line: 2080, column: 7, scope: !13133)
!13147 = !DILocation(line: 2076, column: 11, scope: !13108)
!13148 = !DILocalVariable(name: "postfix_attrs", scope: !13149, file: !3, line: 2082, type: !2224)
!13149 = distinct !DILexicalBlock(scope: !13133, file: !3, line: 2081, column: 2)
!13150 = !DILocation(line: 2082, column: 9, scope: !13149)
!13151 = !DILocalVariable(name: "width", scope: !13149, file: !3, line: 2083, type: !2224)
!13152 = !DILocation(line: 2083, column: 9, scope: !13149)
!13153 = !DILocalVariable(name: "d", scope: !13149, file: !3, line: 2084, type: !2224)
!13154 = !DILocation(line: 2084, column: 9, scope: !13149)
!13155 = !DILocation(line: 2085, column: 32, scope: !13156)
!13156 = distinct !DILexicalBlock(scope: !13149, file: !3, line: 2085, column: 8)
!13157 = !DILocation(line: 2085, column: 8, scope: !13156)
!13158 = !DILocation(line: 2085, column: 8, scope: !13149)
!13159 = !DILocation(line: 2087, column: 32, scope: !13160)
!13160 = distinct !DILexicalBlock(scope: !13156, file: !3, line: 2086, column: 6)
!13161 = !DILocation(line: 2087, column: 8, scope: !13160)
!13162 = !DILocation(line: 2088, column: 41, scope: !13160)
!13163 = !DILocation(line: 2088, column: 16, scope: !13160)
!13164 = !DILocation(line: 2088, column: 55, scope: !13160)
!13165 = !DILocation(line: 2088, column: 14, scope: !13160)
!13166 = !DILocation(line: 2089, column: 6, scope: !13160)
!13167 = !DILocation(line: 2090, column: 40, scope: !13168)
!13168 = distinct !DILexicalBlock(scope: !13149, file: !3, line: 2090, column: 8)
!13169 = !DILocation(line: 2090, column: 8, scope: !13168)
!13170 = !DILocation(line: 2090, column: 8, scope: !13149)
!13171 = !DILocation(line: 2091, column: 43, scope: !13168)
!13172 = !DILocation(line: 2091, column: 22, scope: !13168)
!13173 = !DILocation(line: 2091, column: 20, scope: !13168)
!13174 = !DILocation(line: 2091, column: 6, scope: !13168)
!13175 = !DILocation(line: 2092, column: 40, scope: !13149)
!13176 = !DILocation(line: 2092, column: 19, scope: !13149)
!13177 = !DILocation(line: 2092, column: 49, scope: !13149)
!13178 = !DILocation(line: 2093, column: 5, scope: !13149)
!13179 = !DILocation(line: 2093, column: 17, scope: !13149)
!13180 = !DILocation(line: 2093, column: 24, scope: !13149)
!13181 = !DILocation(line: 2092, column: 8, scope: !13149)
!13182 = !DILocation(line: 2092, column: 6, scope: !13149)
!13183 = !DILocation(line: 2094, column: 34, scope: !13149)
!13184 = !DILocation(line: 2095, column: 6, scope: !13149)
!13185 = !DILocation(line: 2094, column: 25, scope: !13149)
!13186 = !DILocation(line: 2094, column: 4, scope: !13149)
!13187 = !DILocation(line: 2096, column: 21, scope: !13149)
!13188 = !DILocation(line: 2096, column: 4, scope: !13149)
!13189 = !DILocation(line: 2096, column: 19, scope: !13149)
!13190 = !DILocation(line: 2097, column: 12, scope: !13149)
!13191 = !DILocation(line: 2097, column: 10, scope: !13149)
!13192 = !DILocation(line: 2098, column: 40, scope: !13193)
!13193 = distinct !DILexicalBlock(scope: !13149, file: !3, line: 2098, column: 8)
!13194 = !DILocation(line: 2098, column: 8, scope: !13193)
!13195 = !DILocation(line: 2098, column: 8, scope: !13149)
!13196 = !DILocation(line: 2099, column: 55, scope: !13193)
!13197 = !DILocation(line: 2099, column: 34, scope: !13193)
!13198 = !DILocation(line: 2100, column: 6, scope: !13193)
!13199 = !DILocation(line: 2099, column: 25, scope: !13193)
!13200 = !DILocation(line: 2099, column: 23, scope: !13193)
!13201 = !DILocation(line: 2099, column: 6, scope: !13193)
!13202 = !DILocation(line: 2102, column: 25, scope: !13193)
!13203 = !DILocation(line: 2102, column: 23, scope: !13193)
!13204 = !DILocation(line: 2103, column: 32, scope: !13205)
!13205 = distinct !DILexicalBlock(scope: !13149, file: !3, line: 2103, column: 8)
!13206 = !DILocation(line: 2103, column: 8, scope: !13205)
!13207 = !DILocation(line: 2103, column: 8, scope: !13149)
!13208 = !DILocation(line: 2104, column: 30, scope: !13205)
!13209 = !DILocation(line: 2104, column: 6, scope: !13205)
!13210 = !DILocation(line: 2105, column: 37, scope: !13211)
!13211 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 2105, column: 13)
!13212 = !DILocation(line: 2105, column: 13, scope: !13211)
!13213 = !DILocation(line: 2106, column: 6, scope: !13211)
!13214 = !DILocation(line: 2106, column: 33, scope: !13211)
!13215 = !DILocation(line: 2106, column: 9, scope: !13211)
!13216 = !DILocation(line: 2105, column: 13, scope: !13205)
!13217 = !DILocation(line: 2109, column: 8, scope: !13218)
!13218 = distinct !DILexicalBlock(scope: !13211, file: !3, line: 2107, column: 6)
!13219 = !DILocation(line: 2113, column: 24, scope: !13220)
!13220 = distinct !DILexicalBlock(scope: !13211, file: !3, line: 2112, column: 6)
!13221 = !DILocation(line: 2113, column: 8, scope: !13220)
!13222 = !DILocation(line: 2114, column: 8, scope: !13220)
!13223 = !DILocation(line: 2116, column: 2, scope: !13149)
!13224 = !DILocation(line: 2119, column: 20, scope: !13225)
!13225 = distinct !DILexicalBlock(scope: !13133, file: !3, line: 2118, column: 2)
!13226 = !DILocation(line: 2119, column: 4, scope: !13225)
!13227 = !DILocation(line: 2122, column: 4, scope: !13225)
!13228 = distinct !{!13228, !13106, !13229}
!13229 = !DILocation(line: 2124, column: 5, scope: !13003)
!13230 = !DILocation(line: 2125, column: 10, scope: !13003)
!13231 = !DILocation(line: 2125, column: 3, scope: !13003)
!13232 = !DILocation(line: 2126, column: 1, scope: !13003)
!13233 = distinct !DISubprogram(name: "c_parser_direct_declarator", scope: !3, file: !3, line: 2289, type: !7261, scopeLine: 2291, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!13234 = !DILocalVariable(name: "parser", arg: 1, scope: !13233, file: !3, line: 2289, type: !3401)
!13235 = !DILocation(line: 2289, column: 39, scope: !13233)
!13236 = !DILocalVariable(name: "type_seen_p", arg: 2, scope: !13233, file: !3, line: 2289, type: !2344)
!13237 = !DILocation(line: 2289, column: 52, scope: !13233)
!13238 = !DILocalVariable(name: "kind", arg: 3, scope: !13233, file: !3, line: 2289, type: !7263)
!13239 = !DILocation(line: 2289, column: 75, scope: !13233)
!13240 = !DILocalVariable(name: "seen_id", arg: 4, scope: !13233, file: !3, line: 2290, type: !7264)
!13241 = !DILocation(line: 2290, column: 14, scope: !13233)
!13242 = !DILocation(line: 2326, column: 7, scope: !13243)
!13243 = distinct !DILexicalBlock(scope: !13233, file: !3, line: 2326, column: 7)
!13244 = !DILocation(line: 2326, column: 12, scope: !13243)
!13245 = !DILocation(line: 2327, column: 7, scope: !13243)
!13246 = !DILocation(line: 2327, column: 34, scope: !13243)
!13247 = !DILocation(line: 2327, column: 10, scope: !13243)
!13248 = !DILocation(line: 2328, column: 7, scope: !13243)
!13249 = !DILocation(line: 2328, column: 12, scope: !13243)
!13250 = !DILocation(line: 2329, column: 5, scope: !13243)
!13251 = !DILocation(line: 2329, column: 29, scope: !13243)
!13252 = !DILocation(line: 2329, column: 8, scope: !13243)
!13253 = !DILocation(line: 2329, column: 38, scope: !13243)
!13254 = !DILocation(line: 2329, column: 46, scope: !13243)
!13255 = !DILocation(line: 2330, column: 4, scope: !13243)
!13256 = !DILocation(line: 2330, column: 28, scope: !13243)
!13257 = !DILocation(line: 2330, column: 7, scope: !13243)
!13258 = !DILocation(line: 2330, column: 37, scope: !13243)
!13259 = !DILocation(line: 2330, column: 45, scope: !13243)
!13260 = !DILocation(line: 2326, column: 7, scope: !13233)
!13261 = !DILocalVariable(name: "inner", scope: !13262, file: !3, line: 2332, type: !4315)
!13262 = distinct !DILexicalBlock(scope: !13243, file: !3, line: 2331, column: 5)
!13263 = !DILocation(line: 2332, column: 28, scope: !13262)
!13264 = !DILocation(line: 2333, column: 46, scope: !13262)
!13265 = !DILocation(line: 2333, column: 25, scope: !13262)
!13266 = !DILocation(line: 2333, column: 55, scope: !13262)
!13267 = !DILocation(line: 2333, column: 4, scope: !13262)
!13268 = !DILocation(line: 2334, column: 8, scope: !13262)
!13269 = !DILocation(line: 2334, column: 16, scope: !13262)
!13270 = !DILocation(line: 2335, column: 44, scope: !13262)
!13271 = !DILocation(line: 2335, column: 23, scope: !13262)
!13272 = !DILocation(line: 2335, column: 53, scope: !13262)
!13273 = !DILocation(line: 2335, column: 7, scope: !13262)
!13274 = !DILocation(line: 2335, column: 14, scope: !13262)
!13275 = !DILocation(line: 2335, column: 21, scope: !13262)
!13276 = !DILocation(line: 2336, column: 31, scope: !13262)
!13277 = !DILocation(line: 2336, column: 7, scope: !13262)
!13278 = !DILocation(line: 2337, column: 48, scope: !13262)
!13279 = !DILocation(line: 2337, column: 57, scope: !13262)
!13280 = !DILocation(line: 2337, column: 56, scope: !13262)
!13281 = !DILocation(line: 2337, column: 66, scope: !13262)
!13282 = !DILocation(line: 2337, column: 14, scope: !13262)
!13283 = !DILocation(line: 2337, column: 7, scope: !13262)
!13284 = !DILocation(line: 2340, column: 7, scope: !13285)
!13285 = distinct !DILexicalBlock(scope: !13233, file: !3, line: 2340, column: 7)
!13286 = !DILocation(line: 2340, column: 12, scope: !13285)
!13287 = !DILocation(line: 2341, column: 7, scope: !13285)
!13288 = !DILocation(line: 2341, column: 34, scope: !13285)
!13289 = !DILocation(line: 2341, column: 10, scope: !13285)
!13290 = !DILocation(line: 2340, column: 7, scope: !13233)
!13291 = !DILocalVariable(name: "inner", scope: !13292, file: !3, line: 2343, type: !4315)
!13292 = distinct !DILexicalBlock(scope: !13285, file: !3, line: 2342, column: 5)
!13293 = !DILocation(line: 2343, column: 28, scope: !13292)
!13294 = !DILocation(line: 2343, column: 36, scope: !13292)
!13295 = !DILocation(line: 2344, column: 48, scope: !13292)
!13296 = !DILocation(line: 2344, column: 57, scope: !13292)
!13297 = !DILocation(line: 2344, column: 56, scope: !13292)
!13298 = !DILocation(line: 2344, column: 66, scope: !13292)
!13299 = !DILocation(line: 2344, column: 14, scope: !13292)
!13300 = !DILocation(line: 2344, column: 7, scope: !13292)
!13301 = !DILocation(line: 2350, column: 31, scope: !13302)
!13302 = distinct !DILexicalBlock(scope: !13233, file: !3, line: 2350, column: 7)
!13303 = !DILocation(line: 2350, column: 7, scope: !13302)
!13304 = !DILocation(line: 2350, column: 7, scope: !13233)
!13305 = !DILocalVariable(name: "attrs", scope: !13306, file: !3, line: 2352, type: !2224)
!13306 = distinct !DILexicalBlock(scope: !13302, file: !3, line: 2351, column: 5)
!13307 = !DILocation(line: 2352, column: 12, scope: !13306)
!13308 = !DILocalVariable(name: "inner", scope: !13306, file: !3, line: 2353, type: !4315)
!13309 = !DILocation(line: 2353, column: 28, scope: !13306)
!13310 = !DILocation(line: 2354, column: 31, scope: !13306)
!13311 = !DILocation(line: 2354, column: 7, scope: !13306)
!13312 = !DILocation(line: 2355, column: 36, scope: !13306)
!13313 = !DILocation(line: 2355, column: 15, scope: !13306)
!13314 = !DILocation(line: 2355, column: 13, scope: !13306)
!13315 = !DILocation(line: 2356, column: 11, scope: !13316)
!13316 = distinct !DILexicalBlock(scope: !13306, file: !3, line: 2356, column: 11)
!13317 = !DILocation(line: 2356, column: 16, scope: !13316)
!13318 = !DILocation(line: 2357, column: 4, scope: !13316)
!13319 = !DILocation(line: 2357, column: 46, scope: !13316)
!13320 = !DILocation(line: 2357, column: 8, scope: !13316)
!13321 = !DILocation(line: 2358, column: 8, scope: !13316)
!13322 = !DILocation(line: 2358, column: 35, scope: !13316)
!13323 = !DILocation(line: 2358, column: 11, scope: !13316)
!13324 = !DILocation(line: 2356, column: 11, scope: !13306)
!13325 = !DILocalVariable(name: "args", scope: !13326, file: !3, line: 2360, type: !4326)
!13326 = distinct !DILexicalBlock(scope: !13316, file: !3, line: 2359, column: 2)
!13327 = !DILocation(line: 2360, column: 23, scope: !13326)
!13328 = !DILocation(line: 2361, column: 35, scope: !13326)
!13329 = !DILocation(line: 2361, column: 43, scope: !13326)
!13330 = !DILocation(line: 2361, column: 48, scope: !13326)
!13331 = !DILocation(line: 2362, column: 7, scope: !13326)
!13332 = !DILocation(line: 2361, column: 8, scope: !13326)
!13333 = !DILocation(line: 2363, column: 8, scope: !13334)
!13334 = distinct !DILexicalBlock(scope: !13326, file: !3, line: 2363, column: 8)
!13335 = !DILocation(line: 2363, column: 13, scope: !13334)
!13336 = !DILocation(line: 2363, column: 8, scope: !13326)
!13337 = !DILocation(line: 2364, column: 6, scope: !13334)
!13338 = !DILocation(line: 2368, column: 32, scope: !13339)
!13339 = distinct !DILexicalBlock(scope: !13334, file: !3, line: 2366, column: 6)
!13340 = !DILocation(line: 2369, column: 11, scope: !13339)
!13341 = !DILocation(line: 2368, column: 5, scope: !13339)
!13342 = !DILocation(line: 2368, column: 3, scope: !13339)
!13343 = !DILocation(line: 2370, column: 49, scope: !13339)
!13344 = !DILocation(line: 2370, column: 58, scope: !13339)
!13345 = !DILocation(line: 2370, column: 57, scope: !13339)
!13346 = !DILocation(line: 2371, column: 14, scope: !13339)
!13347 = !DILocation(line: 2370, column: 15, scope: !13339)
!13348 = !DILocation(line: 2370, column: 8, scope: !13339)
!13349 = !DILocation(line: 2375, column: 36, scope: !13306)
!13350 = !DILocation(line: 2375, column: 44, scope: !13306)
!13351 = !DILocation(line: 2375, column: 57, scope: !13306)
!13352 = !DILocation(line: 2375, column: 63, scope: !13306)
!13353 = !DILocation(line: 2375, column: 15, scope: !13306)
!13354 = !DILocation(line: 2375, column: 13, scope: !13306)
!13355 = !DILocation(line: 2376, column: 11, scope: !13356)
!13356 = distinct !DILexicalBlock(scope: !13306, file: !3, line: 2376, column: 11)
!13357 = !DILocation(line: 2376, column: 17, scope: !13356)
!13358 = !DILocation(line: 2376, column: 25, scope: !13356)
!13359 = !DILocation(line: 2376, column: 28, scope: !13356)
!13360 = !DILocation(line: 2376, column: 34, scope: !13356)
!13361 = !DILocation(line: 2376, column: 11, scope: !13306)
!13362 = !DILocation(line: 2377, column: 34, scope: !13356)
!13363 = !DILocation(line: 2377, column: 41, scope: !13356)
!13364 = !DILocation(line: 2377, column: 10, scope: !13356)
!13365 = !DILocation(line: 2377, column: 8, scope: !13356)
!13366 = !DILocation(line: 2377, column: 2, scope: !13356)
!13367 = !DILocation(line: 2378, column: 35, scope: !13368)
!13368 = distinct !DILexicalBlock(scope: !13306, file: !3, line: 2378, column: 11)
!13369 = !DILocation(line: 2378, column: 11, scope: !13368)
!13370 = !DILocation(line: 2378, column: 11, scope: !13306)
!13371 = !DILocation(line: 2380, column: 28, scope: !13372)
!13372 = distinct !DILexicalBlock(scope: !13368, file: !3, line: 2379, column: 2)
!13373 = !DILocation(line: 2380, column: 4, scope: !13372)
!13374 = !DILocation(line: 2381, column: 8, scope: !13375)
!13375 = distinct !DILexicalBlock(scope: !13372, file: !3, line: 2381, column: 8)
!13376 = !DILocation(line: 2381, column: 14, scope: !13375)
!13377 = !DILocation(line: 2381, column: 8, scope: !13372)
!13378 = !DILocation(line: 2382, column: 6, scope: !13375)
!13379 = !DILocation(line: 2384, column: 47, scope: !13375)
!13380 = !DILocation(line: 2384, column: 56, scope: !13375)
!13381 = !DILocation(line: 2384, column: 55, scope: !13375)
!13382 = !DILocation(line: 2384, column: 65, scope: !13375)
!13383 = !DILocation(line: 2384, column: 13, scope: !13375)
!13384 = !DILocation(line: 2384, column: 6, scope: !13375)
!13385 = !DILocation(line: 2388, column: 31, scope: !13386)
!13386 = distinct !DILexicalBlock(scope: !13368, file: !3, line: 2387, column: 2)
!13387 = !DILocation(line: 2388, column: 4, scope: !13386)
!13388 = !DILocation(line: 2390, column: 4, scope: !13386)
!13389 = !DILocation(line: 2395, column: 11, scope: !13390)
!13390 = distinct !DILexicalBlock(scope: !13391, file: !3, line: 2395, column: 11)
!13391 = distinct !DILexicalBlock(scope: !13302, file: !3, line: 2394, column: 5)
!13392 = !DILocation(line: 2395, column: 16, scope: !13390)
!13393 = !DILocation(line: 2395, column: 11, scope: !13391)
!13394 = !DILocation(line: 2397, column: 20, scope: !13395)
!13395 = distinct !DILexicalBlock(scope: !13390, file: !3, line: 2396, column: 2)
!13396 = !DILocation(line: 2397, column: 4, scope: !13395)
!13397 = !DILocation(line: 2398, column: 4, scope: !13395)
!13398 = !DILocation(line: 2401, column: 9, scope: !13390)
!13399 = !DILocation(line: 2401, column: 2, scope: !13390)
!13400 = !DILocation(line: 2403, column: 1, scope: !13233)
!13401 = distinct !DISubprogram(name: "c_parser_direct_declarator_inner", scope: !3, file: !3, line: 2411, type: !13402, scopeLine: 2413, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!13402 = !DISubroutineType(types: !13403)
!13403 = !{!4315, !3401, !2344, !4315}
!13404 = !DILocalVariable(name: "parser", arg: 1, scope: !13401, file: !3, line: 2411, type: !3401)
!13405 = !DILocation(line: 2411, column: 45, scope: !13401)
!13406 = !DILocalVariable(name: "id_present", arg: 2, scope: !13401, file: !3, line: 2411, type: !2344)
!13407 = !DILocation(line: 2411, column: 58, scope: !13401)
!13408 = !DILocalVariable(name: "inner", arg: 3, scope: !13401, file: !3, line: 2412, type: !4315)
!13409 = !DILocation(line: 2412, column: 28, scope: !13401)
!13410 = !DILocation(line: 2415, column: 31, scope: !13411)
!13411 = distinct !DILexicalBlock(scope: !13401, file: !3, line: 2415, column: 7)
!13412 = !DILocation(line: 2415, column: 7, scope: !13411)
!13413 = !DILocation(line: 2415, column: 7, scope: !13401)
!13414 = !DILocalVariable(name: "brace_loc", scope: !13415, file: !3, line: 2417, type: !2352)
!13415 = distinct !DILexicalBlock(scope: !13411, file: !3, line: 2416, column: 5)
!13416 = !DILocation(line: 2417, column: 18, scope: !13415)
!13417 = !DILocation(line: 2417, column: 51, scope: !13415)
!13418 = !DILocation(line: 2417, column: 30, scope: !13415)
!13419 = !DILocation(line: 2417, column: 60, scope: !13415)
!13420 = !DILocalVariable(name: "declarator", scope: !13415, file: !3, line: 2418, type: !4315)
!13421 = !DILocation(line: 2418, column: 28, scope: !13415)
!13422 = !DILocalVariable(name: "quals_attrs", scope: !13415, file: !3, line: 2419, type: !4282)
!13423 = !DILocation(line: 2419, column: 27, scope: !13415)
!13424 = !DILocation(line: 2419, column: 41, scope: !13415)
!13425 = !DILocalVariable(name: "static_seen", scope: !13415, file: !3, line: 2420, type: !2344)
!13426 = !DILocation(line: 2420, column: 12, scope: !13415)
!13427 = !DILocalVariable(name: "star_seen", scope: !13415, file: !3, line: 2421, type: !2344)
!13428 = !DILocation(line: 2421, column: 12, scope: !13415)
!13429 = !DILocalVariable(name: "dimen", scope: !13415, file: !3, line: 2422, type: !2224)
!13430 = !DILocation(line: 2422, column: 12, scope: !13415)
!13431 = !DILocation(line: 2423, column: 31, scope: !13415)
!13432 = !DILocation(line: 2423, column: 7, scope: !13415)
!13433 = !DILocation(line: 2424, column: 27, scope: !13415)
!13434 = !DILocation(line: 2424, column: 35, scope: !13415)
!13435 = !DILocation(line: 2424, column: 7, scope: !13415)
!13436 = !DILocation(line: 2425, column: 53, scope: !13415)
!13437 = !DILocation(line: 2425, column: 21, scope: !13415)
!13438 = !DILocation(line: 2425, column: 19, scope: !13415)
!13439 = !DILocation(line: 2426, column: 11, scope: !13440)
!13440 = distinct !DILexicalBlock(scope: !13415, file: !3, line: 2426, column: 11)
!13441 = !DILocation(line: 2426, column: 11, scope: !13415)
!13442 = !DILocation(line: 2427, column: 26, scope: !13440)
!13443 = !DILocation(line: 2427, column: 2, scope: !13440)
!13444 = !DILocation(line: 2428, column: 11, scope: !13445)
!13445 = distinct !DILexicalBlock(scope: !13415, file: !3, line: 2428, column: 11)
!13446 = !DILocation(line: 2428, column: 23, scope: !13445)
!13447 = !DILocation(line: 2428, column: 27, scope: !13445)
!13448 = !DILocation(line: 2428, column: 40, scope: !13445)
!13449 = !DILocation(line: 2428, column: 11, scope: !13415)
!13450 = !DILocation(line: 2429, column: 22, scope: !13445)
!13451 = !DILocation(line: 2429, column: 30, scope: !13445)
!13452 = !DILocation(line: 2429, column: 2, scope: !13445)
!13453 = !DILocation(line: 2430, column: 12, scope: !13454)
!13454 = distinct !DILexicalBlock(scope: !13415, file: !3, line: 2430, column: 11)
!13455 = !DILocation(line: 2430, column: 25, scope: !13454)
!13456 = !DILocation(line: 2430, column: 11, scope: !13415)
!13457 = !DILocation(line: 2431, column: 14, scope: !13454)
!13458 = !DILocation(line: 2431, column: 2, scope: !13454)
!13459 = !DILocation(line: 2435, column: 11, scope: !13460)
!13460 = distinct !DILexicalBlock(scope: !13415, file: !3, line: 2435, column: 11)
!13461 = !DILocation(line: 2435, column: 11, scope: !13415)
!13462 = !DILocation(line: 2437, column: 14, scope: !13463)
!13463 = distinct !DILexicalBlock(scope: !13460, file: !3, line: 2436, column: 2)
!13464 = !DILocation(line: 2438, column: 37, scope: !13463)
!13465 = !DILocation(line: 2438, column: 12, scope: !13463)
!13466 = !DILocation(line: 2438, column: 51, scope: !13463)
!13467 = !DILocation(line: 2438, column: 10, scope: !13463)
!13468 = !DILocation(line: 2439, column: 2, scope: !13463)
!13469 = !DILocation(line: 2442, column: 32, scope: !13470)
!13470 = distinct !DILexicalBlock(scope: !13471, file: !3, line: 2442, column: 8)
!13471 = distinct !DILexicalBlock(scope: !13460, file: !3, line: 2441, column: 2)
!13472 = !DILocation(line: 2442, column: 8, scope: !13470)
!13473 = !DILocation(line: 2442, column: 8, scope: !13471)
!13474 = !DILocation(line: 2444, column: 14, scope: !13475)
!13475 = distinct !DILexicalBlock(scope: !13470, file: !3, line: 2443, column: 6)
!13476 = !DILocation(line: 2445, column: 18, scope: !13475)
!13477 = !DILocation(line: 2446, column: 6, scope: !13475)
!13478 = !DILocation(line: 2447, column: 37, scope: !13479)
!13479 = distinct !DILexicalBlock(scope: !13470, file: !3, line: 2447, column: 13)
!13480 = !DILocation(line: 2447, column: 13, scope: !13479)
!13481 = !DILocation(line: 2447, column: 13, scope: !13470)
!13482 = !DILocation(line: 2449, column: 37, scope: !13483)
!13483 = distinct !DILexicalBlock(scope: !13484, file: !3, line: 2449, column: 12)
!13484 = distinct !DILexicalBlock(scope: !13479, file: !3, line: 2448, column: 6)
!13485 = !DILocation(line: 2449, column: 12, scope: !13483)
!13486 = !DILocation(line: 2449, column: 46, scope: !13483)
!13487 = !DILocation(line: 2449, column: 51, scope: !13483)
!13488 = !DILocation(line: 2449, column: 12, scope: !13484)
!13489 = !DILocation(line: 2451, column: 11, scope: !13490)
!13490 = distinct !DILexicalBlock(scope: !13483, file: !3, line: 2450, column: 3)
!13491 = !DILocation(line: 2452, column: 15, scope: !13490)
!13492 = !DILocation(line: 2453, column: 29, scope: !13490)
!13493 = !DILocation(line: 2453, column: 5, scope: !13490)
!13494 = !DILocation(line: 2454, column: 3, scope: !13490)
!13495 = !DILocation(line: 2457, column: 15, scope: !13496)
!13496 = distinct !DILexicalBlock(scope: !13483, file: !3, line: 2456, column: 3)
!13497 = !DILocation(line: 2458, column: 38, scope: !13496)
!13498 = !DILocation(line: 2458, column: 13, scope: !13496)
!13499 = !DILocation(line: 2458, column: 52, scope: !13496)
!13500 = !DILocation(line: 2458, column: 11, scope: !13496)
!13501 = !DILocation(line: 2460, column: 6, scope: !13484)
!13502 = !DILocation(line: 2463, column: 18, scope: !13503)
!13503 = distinct !DILexicalBlock(scope: !13479, file: !3, line: 2462, column: 6)
!13504 = !DILocation(line: 2464, column: 41, scope: !13503)
!13505 = !DILocation(line: 2464, column: 16, scope: !13503)
!13506 = !DILocation(line: 2464, column: 55, scope: !13503)
!13507 = !DILocation(line: 2464, column: 14, scope: !13503)
!13508 = !DILocation(line: 2467, column: 35, scope: !13509)
!13509 = distinct !DILexicalBlock(scope: !13415, file: !3, line: 2467, column: 11)
!13510 = !DILocation(line: 2467, column: 11, scope: !13509)
!13511 = !DILocation(line: 2467, column: 11, scope: !13415)
!13512 = !DILocation(line: 2468, column: 26, scope: !13509)
!13513 = !DILocation(line: 2468, column: 2, scope: !13509)
!13514 = !DILocation(line: 2471, column: 31, scope: !13515)
!13515 = distinct !DILexicalBlock(scope: !13509, file: !3, line: 2470, column: 2)
!13516 = !DILocation(line: 2471, column: 4, scope: !13515)
!13517 = !DILocation(line: 2473, column: 4, scope: !13515)
!13518 = !DILocation(line: 2475, column: 44, scope: !13415)
!13519 = !DILocation(line: 2475, column: 55, scope: !13415)
!13520 = !DILocation(line: 2475, column: 62, scope: !13415)
!13521 = !DILocation(line: 2476, column: 9, scope: !13415)
!13522 = !DILocation(line: 2476, column: 22, scope: !13415)
!13523 = !DILocation(line: 2475, column: 20, scope: !13415)
!13524 = !DILocation(line: 2475, column: 18, scope: !13415)
!13525 = !DILocation(line: 2477, column: 11, scope: !13526)
!13526 = distinct !DILexicalBlock(scope: !13415, file: !3, line: 2477, column: 11)
!13527 = !DILocation(line: 2477, column: 22, scope: !13526)
!13528 = !DILocation(line: 2477, column: 11, scope: !13415)
!13529 = !DILocation(line: 2478, column: 2, scope: !13526)
!13530 = !DILocation(line: 2479, column: 43, scope: !13415)
!13531 = !DILocation(line: 2479, column: 55, scope: !13415)
!13532 = !DILocation(line: 2479, column: 15, scope: !13415)
!13533 = !DILocation(line: 2479, column: 13, scope: !13415)
!13534 = !DILocation(line: 2480, column: 48, scope: !13415)
!13535 = !DILocation(line: 2480, column: 56, scope: !13415)
!13536 = !DILocation(line: 2480, column: 68, scope: !13415)
!13537 = !DILocation(line: 2480, column: 14, scope: !13415)
!13538 = !DILocation(line: 2480, column: 7, scope: !13415)
!13539 = !DILocation(line: 2482, column: 36, scope: !13540)
!13540 = distinct !DILexicalBlock(scope: !13411, file: !3, line: 2482, column: 12)
!13541 = !DILocation(line: 2482, column: 12, scope: !13540)
!13542 = !DILocation(line: 2482, column: 12, scope: !13411)
!13543 = !DILocalVariable(name: "attrs", scope: !13544, file: !3, line: 2484, type: !2224)
!13544 = distinct !DILexicalBlock(scope: !13540, file: !3, line: 2483, column: 5)
!13545 = !DILocation(line: 2484, column: 12, scope: !13544)
!13546 = !DILocalVariable(name: "args", scope: !13544, file: !3, line: 2485, type: !4326)
!13547 = !DILocation(line: 2485, column: 26, scope: !13544)
!13548 = !DILocation(line: 2486, column: 31, scope: !13544)
!13549 = !DILocation(line: 2486, column: 7, scope: !13544)
!13550 = !DILocation(line: 2487, column: 36, scope: !13544)
!13551 = !DILocation(line: 2487, column: 15, scope: !13544)
!13552 = !DILocation(line: 2487, column: 13, scope: !13544)
!13553 = !DILocation(line: 2488, column: 41, scope: !13544)
!13554 = !DILocation(line: 2488, column: 49, scope: !13544)
!13555 = !DILocation(line: 2488, column: 61, scope: !13544)
!13556 = !DILocation(line: 2488, column: 14, scope: !13544)
!13557 = !DILocation(line: 2488, column: 12, scope: !13544)
!13558 = !DILocation(line: 2489, column: 11, scope: !13559)
!13559 = distinct !DILexicalBlock(scope: !13544, file: !3, line: 2489, column: 11)
!13560 = !DILocation(line: 2489, column: 16, scope: !13559)
!13561 = !DILocation(line: 2489, column: 11, scope: !13544)
!13562 = !DILocation(line: 2490, column: 2, scope: !13559)
!13563 = !DILocation(line: 2493, column: 39, scope: !13564)
!13564 = distinct !DILexicalBlock(scope: !13559, file: !3, line: 2492, column: 2)
!13565 = !DILocation(line: 2493, column: 45, scope: !13564)
!13566 = !DILocation(line: 2493, column: 12, scope: !13564)
!13567 = !DILocation(line: 2493, column: 10, scope: !13564)
!13568 = !DILocation(line: 2494, column: 45, scope: !13564)
!13569 = !DILocation(line: 2494, column: 53, scope: !13564)
!13570 = !DILocation(line: 2494, column: 65, scope: !13564)
!13571 = !DILocation(line: 2494, column: 11, scope: !13564)
!13572 = !DILocation(line: 2494, column: 4, scope: !13564)
!13573 = !DILocation(line: 2497, column: 10, scope: !13401)
!13574 = !DILocation(line: 2497, column: 3, scope: !13401)
!13575 = !DILocation(line: 2498, column: 1, scope: !13401)
!13576 = distinct !DISubprogram(name: "c_parser_parms_declarator", scope: !3, file: !3, line: 2506, type: !13577, scopeLine: 2507, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!13577 = !DISubroutineType(types: !13578)
!13578 = !{!4326, !3401, !2344, !2224}
!13579 = !DILocalVariable(name: "parser", arg: 1, scope: !13576, file: !3, line: 2506, type: !3401)
!13580 = !DILocation(line: 2506, column: 38, scope: !13576)
!13581 = !DILocalVariable(name: "id_list_ok", arg: 2, scope: !13576, file: !3, line: 2506, type: !2344)
!13582 = !DILocation(line: 2506, column: 51, scope: !13576)
!13583 = !DILocalVariable(name: "attrs", arg: 3, scope: !13576, file: !3, line: 2506, type: !2224)
!13584 = !DILocation(line: 2506, column: 68, scope: !13576)
!13585 = !DILocation(line: 2508, column: 3, scope: !13576)
!13586 = !DILocation(line: 2509, column: 3, scope: !13576)
!13587 = !DILocation(line: 2512, column: 7, scope: !13588)
!13588 = distinct !DILexicalBlock(scope: !13576, file: !3, line: 2512, column: 7)
!13589 = !DILocation(line: 2513, column: 7, scope: !13588)
!13590 = !DILocation(line: 2513, column: 11, scope: !13588)
!13591 = !DILocation(line: 2514, column: 7, scope: !13588)
!13592 = !DILocation(line: 2514, column: 34, scope: !13588)
!13593 = !DILocation(line: 2514, column: 10, scope: !13588)
!13594 = !DILocation(line: 2515, column: 7, scope: !13588)
!13595 = !DILocation(line: 2515, column: 31, scope: !13588)
!13596 = !DILocation(line: 2515, column: 10, scope: !13588)
!13597 = !DILocation(line: 2515, column: 40, scope: !13588)
!13598 = !DILocation(line: 2515, column: 48, scope: !13588)
!13599 = !DILocation(line: 2512, column: 7, scope: !13576)
!13600 = !DILocalVariable(name: "list", scope: !13601, file: !3, line: 2517, type: !2224)
!13601 = distinct !DILexicalBlock(scope: !13588, file: !3, line: 2516, column: 5)
!13602 = !DILocation(line: 2517, column: 12, scope: !13601)
!13603 = !DILocalVariable(name: "nextp", scope: !13601, file: !3, line: 2517, type: !3129)
!13604 = !DILocation(line: 2517, column: 31, scope: !13601)
!13605 = !DILocation(line: 2518, column: 7, scope: !13601)
!13606 = !DILocation(line: 2518, column: 38, scope: !13601)
!13607 = !DILocation(line: 2518, column: 14, scope: !13601)
!13608 = !DILocation(line: 2519, column: 7, scope: !13601)
!13609 = !DILocation(line: 2519, column: 31, scope: !13601)
!13610 = !DILocation(line: 2519, column: 10, scope: !13601)
!13611 = !DILocation(line: 2519, column: 40, scope: !13601)
!13612 = !DILocation(line: 2519, column: 48, scope: !13601)
!13613 = !DILocation(line: 0, scope: !13601)
!13614 = !DILocation(line: 2521, column: 13, scope: !13615)
!13615 = distinct !DILexicalBlock(scope: !13601, file: !3, line: 2520, column: 2)
!13616 = !DILocation(line: 2521, column: 5, scope: !13615)
!13617 = !DILocation(line: 2521, column: 11, scope: !13615)
!13618 = !DILocation(line: 2523, column: 14, scope: !13615)
!13619 = !DILocation(line: 2523, column: 10, scope: !13615)
!13620 = !DILocation(line: 2524, column: 28, scope: !13615)
!13621 = !DILocation(line: 2524, column: 4, scope: !13615)
!13622 = !DILocation(line: 2525, column: 36, scope: !13623)
!13623 = distinct !DILexicalBlock(scope: !13615, file: !3, line: 2525, column: 8)
!13624 = !DILocation(line: 2525, column: 8, scope: !13623)
!13625 = !DILocation(line: 2525, column: 8, scope: !13615)
!13626 = !DILocation(line: 2526, column: 6, scope: !13623)
!13627 = !DILocation(line: 2527, column: 28, scope: !13615)
!13628 = !DILocation(line: 2527, column: 4, scope: !13615)
!13629 = !DILocation(line: 2528, column: 32, scope: !13630)
!13630 = distinct !DILexicalBlock(scope: !13615, file: !3, line: 2528, column: 8)
!13631 = !DILocation(line: 2528, column: 8, scope: !13630)
!13632 = !DILocation(line: 2528, column: 8, scope: !13615)
!13633 = !DILocation(line: 2530, column: 24, scope: !13634)
!13634 = distinct !DILexicalBlock(scope: !13630, file: !3, line: 2529, column: 6)
!13635 = !DILocation(line: 2530, column: 8, scope: !13634)
!13636 = !DILocation(line: 2531, column: 8, scope: !13634)
!13637 = distinct !{!13637, !13605, !13638}
!13638 = !DILocation(line: 2533, column: 2, scope: !13601)
!13639 = !DILocation(line: 2534, column: 35, scope: !13640)
!13640 = distinct !DILexicalBlock(scope: !13601, file: !3, line: 2534, column: 11)
!13641 = !DILocation(line: 2534, column: 11, scope: !13640)
!13642 = !DILocation(line: 2534, column: 11, scope: !13601)
!13643 = !DILocalVariable(name: "ret", scope: !13644, file: !3, line: 2536, type: !4326)
!13644 = distinct !DILexicalBlock(scope: !13640, file: !3, line: 2535, column: 2)
!13645 = !DILocation(line: 2536, column: 23, scope: !13644)
!13646 = !DILocation(line: 2536, column: 29, scope: !13644)
!13647 = !DILocation(line: 2537, column: 4, scope: !13644)
!13648 = !DILocation(line: 2537, column: 9, scope: !13644)
!13649 = !DILocation(line: 2537, column: 15, scope: !13644)
!13650 = !DILocation(line: 2538, column: 4, scope: !13644)
!13651 = !DILocation(line: 2538, column: 9, scope: !13644)
!13652 = !DILocation(line: 2538, column: 14, scope: !13644)
!13653 = !DILocation(line: 2539, column: 17, scope: !13644)
!13654 = !DILocation(line: 2539, column: 4, scope: !13644)
!13655 = !DILocation(line: 2539, column: 9, scope: !13644)
!13656 = !DILocation(line: 2539, column: 15, scope: !13644)
!13657 = !DILocation(line: 2540, column: 4, scope: !13644)
!13658 = !DILocation(line: 2540, column: 9, scope: !13644)
!13659 = !DILocation(line: 2540, column: 16, scope: !13644)
!13660 = !DILocation(line: 2541, column: 4, scope: !13644)
!13661 = !DILocation(line: 2541, column: 9, scope: !13644)
!13662 = !DILocation(line: 2541, column: 23, scope: !13644)
!13663 = !DILocation(line: 2542, column: 4, scope: !13644)
!13664 = !DILocation(line: 2542, column: 9, scope: !13644)
!13665 = !DILocation(line: 2542, column: 24, scope: !13644)
!13666 = !DILocation(line: 2543, column: 28, scope: !13644)
!13667 = !DILocation(line: 2543, column: 4, scope: !13644)
!13668 = !DILocation(line: 2544, column: 4, scope: !13644)
!13669 = !DILocation(line: 2545, column: 11, scope: !13644)
!13670 = !DILocation(line: 2545, column: 4, scope: !13644)
!13671 = !DILocation(line: 2549, column: 31, scope: !13672)
!13672 = distinct !DILexicalBlock(scope: !13640, file: !3, line: 2548, column: 2)
!13673 = !DILocation(line: 2549, column: 4, scope: !13672)
!13674 = !DILocation(line: 2551, column: 4, scope: !13672)
!13675 = !DILocation(line: 2552, column: 4, scope: !13672)
!13676 = !DILocalVariable(name: "ret", scope: !13677, file: !3, line: 2557, type: !4326)
!13677 = distinct !DILexicalBlock(scope: !13588, file: !3, line: 2556, column: 5)
!13678 = !DILocation(line: 2557, column: 26, scope: !13677)
!13679 = !DILocation(line: 2557, column: 64, scope: !13677)
!13680 = !DILocation(line: 2557, column: 72, scope: !13677)
!13681 = !DILocation(line: 2557, column: 32, scope: !13677)
!13682 = !DILocation(line: 2558, column: 7, scope: !13677)
!13683 = !DILocation(line: 2559, column: 14, scope: !13677)
!13684 = !DILocation(line: 2559, column: 7, scope: !13677)
!13685 = !DILocation(line: 2561, column: 1, scope: !13576)
!13686 = distinct !DISubprogram(name: "c_parser_parms_list_declarator", scope: !3, file: !3, line: 2568, type: !13687, scopeLine: 2569, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!13687 = !DISubroutineType(types: !13688)
!13688 = !{!4326, !3401, !2224}
!13689 = !DILocalVariable(name: "parser", arg: 1, scope: !13686, file: !3, line: 2568, type: !3401)
!13690 = !DILocation(line: 2568, column: 43, scope: !13686)
!13691 = !DILocalVariable(name: "attrs", arg: 2, scope: !13686, file: !3, line: 2568, type: !2224)
!13692 = !DILocation(line: 2568, column: 56, scope: !13686)
!13693 = !DILocalVariable(name: "good_parm", scope: !13686, file: !3, line: 2570, type: !2344)
!13694 = !DILocation(line: 2570, column: 8, scope: !13686)
!13695 = !DILocation(line: 2577, column: 31, scope: !13696)
!13696 = distinct !DILexicalBlock(scope: !13686, file: !3, line: 2577, column: 7)
!13697 = !DILocation(line: 2577, column: 7, scope: !13696)
!13698 = !DILocation(line: 2577, column: 7, scope: !13686)
!13699 = !DILocalVariable(name: "ret", scope: !13700, file: !3, line: 2579, type: !4326)
!13700 = distinct !DILexicalBlock(scope: !13696, file: !3, line: 2578, column: 5)
!13701 = !DILocation(line: 2579, column: 26, scope: !13700)
!13702 = !DILocation(line: 2579, column: 32, scope: !13700)
!13703 = !DILocation(line: 2580, column: 7, scope: !13700)
!13704 = !DILocation(line: 2580, column: 12, scope: !13700)
!13705 = !DILocation(line: 2580, column: 18, scope: !13700)
!13706 = !DILocation(line: 2581, column: 7, scope: !13700)
!13707 = !DILocation(line: 2581, column: 12, scope: !13700)
!13708 = !DILocation(line: 2581, column: 17, scope: !13700)
!13709 = !DILocation(line: 2582, column: 7, scope: !13700)
!13710 = !DILocation(line: 2582, column: 12, scope: !13700)
!13711 = !DILocation(line: 2582, column: 18, scope: !13700)
!13712 = !DILocation(line: 2583, column: 7, scope: !13700)
!13713 = !DILocation(line: 2583, column: 12, scope: !13700)
!13714 = !DILocation(line: 2583, column: 19, scope: !13700)
!13715 = !DILocation(line: 2584, column: 7, scope: !13700)
!13716 = !DILocation(line: 2584, column: 12, scope: !13700)
!13717 = !DILocation(line: 2584, column: 26, scope: !13700)
!13718 = !DILocation(line: 2585, column: 7, scope: !13700)
!13719 = !DILocation(line: 2585, column: 12, scope: !13700)
!13720 = !DILocation(line: 2585, column: 27, scope: !13700)
!13721 = !DILocation(line: 2586, column: 31, scope: !13700)
!13722 = !DILocation(line: 2586, column: 7, scope: !13700)
!13723 = !DILocation(line: 2587, column: 14, scope: !13700)
!13724 = !DILocation(line: 2587, column: 7, scope: !13700)
!13725 = !DILocation(line: 2589, column: 31, scope: !13726)
!13726 = distinct !DILexicalBlock(scope: !13686, file: !3, line: 2589, column: 7)
!13727 = !DILocation(line: 2589, column: 7, scope: !13726)
!13728 = !DILocation(line: 2589, column: 7, scope: !13686)
!13729 = !DILocalVariable(name: "ret", scope: !13730, file: !3, line: 2591, type: !4326)
!13730 = distinct !DILexicalBlock(scope: !13726, file: !3, line: 2590, column: 5)
!13731 = !DILocation(line: 2591, column: 26, scope: !13730)
!13732 = !DILocation(line: 2591, column: 32, scope: !13730)
!13733 = !DILocation(line: 2592, column: 7, scope: !13730)
!13734 = !DILocation(line: 2592, column: 12, scope: !13730)
!13735 = !DILocation(line: 2592, column: 18, scope: !13730)
!13736 = !DILocation(line: 2593, column: 7, scope: !13730)
!13737 = !DILocation(line: 2593, column: 12, scope: !13730)
!13738 = !DILocation(line: 2593, column: 17, scope: !13730)
!13739 = !DILocation(line: 2594, column: 7, scope: !13730)
!13740 = !DILocation(line: 2594, column: 12, scope: !13730)
!13741 = !DILocation(line: 2594, column: 19, scope: !13730)
!13742 = !DILocation(line: 2595, column: 7, scope: !13730)
!13743 = !DILocation(line: 2595, column: 12, scope: !13730)
!13744 = !DILocation(line: 2595, column: 26, scope: !13730)
!13745 = !DILocation(line: 2596, column: 7, scope: !13730)
!13746 = !DILocation(line: 2596, column: 12, scope: !13730)
!13747 = !DILocation(line: 2596, column: 27, scope: !13730)
!13748 = !DILocation(line: 2598, column: 20, scope: !13730)
!13749 = !DILocation(line: 2598, column: 7, scope: !13730)
!13750 = !DILocation(line: 2598, column: 12, scope: !13730)
!13751 = !DILocation(line: 2598, column: 18, scope: !13730)
!13752 = !DILocation(line: 2599, column: 38, scope: !13730)
!13753 = !DILocation(line: 2599, column: 17, scope: !13730)
!13754 = !DILocation(line: 2599, column: 47, scope: !13730)
!13755 = !DILocation(line: 2599, column: 7, scope: !13730)
!13756 = !DILocation(line: 2601, column: 31, scope: !13730)
!13757 = !DILocation(line: 2601, column: 7, scope: !13730)
!13758 = !DILocation(line: 2602, column: 35, scope: !13759)
!13759 = distinct !DILexicalBlock(scope: !13730, file: !3, line: 2602, column: 11)
!13760 = !DILocation(line: 2602, column: 11, scope: !13759)
!13761 = !DILocation(line: 2602, column: 11, scope: !13730)
!13762 = !DILocation(line: 2604, column: 28, scope: !13763)
!13763 = distinct !DILexicalBlock(scope: !13759, file: !3, line: 2603, column: 2)
!13764 = !DILocation(line: 2604, column: 4, scope: !13763)
!13765 = !DILocation(line: 2605, column: 11, scope: !13763)
!13766 = !DILocation(line: 2605, column: 4, scope: !13763)
!13767 = !DILocation(line: 2609, column: 31, scope: !13768)
!13768 = distinct !DILexicalBlock(scope: !13759, file: !3, line: 2608, column: 2)
!13769 = !DILocation(line: 2609, column: 4, scope: !13768)
!13770 = !DILocation(line: 2611, column: 4, scope: !13768)
!13771 = !DILocation(line: 2617, column: 3, scope: !13686)
!13772 = !DILocalVariable(name: "parm", scope: !13773, file: !3, line: 2620, type: !6642)
!13773 = distinct !DILexicalBlock(scope: !13686, file: !3, line: 2618, column: 5)
!13774 = !DILocation(line: 2620, column: 22, scope: !13773)
!13775 = !DILocation(line: 2620, column: 61, scope: !13773)
!13776 = !DILocation(line: 2620, column: 69, scope: !13773)
!13777 = !DILocation(line: 2620, column: 29, scope: !13773)
!13778 = !DILocation(line: 2621, column: 13, scope: !13773)
!13779 = !DILocation(line: 2622, column: 11, scope: !13780)
!13780 = distinct !DILexicalBlock(scope: !13773, file: !3, line: 2622, column: 11)
!13781 = !DILocation(line: 2622, column: 16, scope: !13780)
!13782 = !DILocation(line: 2622, column: 11, scope: !13773)
!13783 = !DILocation(line: 2624, column: 14, scope: !13784)
!13784 = distinct !DILexicalBlock(scope: !13780, file: !3, line: 2623, column: 2)
!13785 = !DILocation(line: 2625, column: 20, scope: !13784)
!13786 = !DILocation(line: 2625, column: 4, scope: !13784)
!13787 = !DILocation(line: 2626, column: 2, scope: !13784)
!13788 = !DILocation(line: 2627, column: 35, scope: !13789)
!13789 = distinct !DILexicalBlock(scope: !13773, file: !3, line: 2627, column: 11)
!13790 = !DILocation(line: 2627, column: 11, scope: !13789)
!13791 = !DILocation(line: 2627, column: 11, scope: !13773)
!13792 = !DILocalVariable(name: "new_attrs", scope: !13793, file: !3, line: 2629, type: !2224)
!13793 = distinct !DILexicalBlock(scope: !13789, file: !3, line: 2628, column: 2)
!13794 = !DILocation(line: 2629, column: 9, scope: !13793)
!13795 = !DILocation(line: 2630, column: 28, scope: !13793)
!13796 = !DILocation(line: 2630, column: 4, scope: !13793)
!13797 = !DILocation(line: 2631, column: 4, scope: !13793)
!13798 = !DILocation(line: 2632, column: 37, scope: !13793)
!13799 = !DILocation(line: 2632, column: 16, scope: !13793)
!13800 = !DILocation(line: 2632, column: 14, scope: !13793)
!13801 = !DILocation(line: 2633, column: 43, scope: !13793)
!13802 = !DILocation(line: 2633, column: 51, scope: !13793)
!13803 = !DILocation(line: 2633, column: 11, scope: !13793)
!13804 = !DILocation(line: 2633, column: 4, scope: !13793)
!13805 = !DILocation(line: 2635, column: 35, scope: !13806)
!13806 = distinct !DILexicalBlock(scope: !13773, file: !3, line: 2635, column: 11)
!13807 = !DILocation(line: 2635, column: 11, scope: !13806)
!13808 = !DILocation(line: 2635, column: 11, scope: !13773)
!13809 = !DILocation(line: 2637, column: 28, scope: !13810)
!13810 = distinct !DILexicalBlock(scope: !13806, file: !3, line: 2636, column: 2)
!13811 = !DILocation(line: 2637, column: 4, scope: !13810)
!13812 = !DILocation(line: 2638, column: 8, scope: !13813)
!13813 = distinct !DILexicalBlock(scope: !13810, file: !3, line: 2638, column: 8)
!13814 = !DILocation(line: 2638, column: 8, scope: !13810)
!13815 = !DILocation(line: 2639, column: 13, scope: !13813)
!13816 = !DILocation(line: 2639, column: 6, scope: !13813)
!13817 = !DILocalVariable(name: "ret", scope: !13818, file: !3, line: 2642, type: !4326)
!13818 = distinct !DILexicalBlock(scope: !13813, file: !3, line: 2641, column: 6)
!13819 = !DILocation(line: 2642, column: 27, scope: !13818)
!13820 = !DILocation(line: 2643, column: 5, scope: !13818)
!13821 = !DILocation(line: 2644, column: 8, scope: !13818)
!13822 = !DILocation(line: 2644, column: 13, scope: !13818)
!13823 = !DILocation(line: 2644, column: 19, scope: !13818)
!13824 = !DILocation(line: 2645, column: 8, scope: !13818)
!13825 = !DILocation(line: 2645, column: 13, scope: !13818)
!13826 = !DILocation(line: 2645, column: 18, scope: !13818)
!13827 = !DILocation(line: 2646, column: 8, scope: !13818)
!13828 = !DILocation(line: 2646, column: 13, scope: !13818)
!13829 = !DILocation(line: 2646, column: 19, scope: !13818)
!13830 = !DILocation(line: 2647, column: 8, scope: !13818)
!13831 = !DILocation(line: 2647, column: 13, scope: !13818)
!13832 = !DILocation(line: 2647, column: 20, scope: !13818)
!13833 = !DILocation(line: 2648, column: 8, scope: !13818)
!13834 = !DILocation(line: 2648, column: 13, scope: !13818)
!13835 = !DILocation(line: 2648, column: 27, scope: !13818)
!13836 = !DILocation(line: 2649, column: 8, scope: !13818)
!13837 = !DILocation(line: 2649, column: 13, scope: !13818)
!13838 = !DILocation(line: 2649, column: 28, scope: !13818)
!13839 = !DILocation(line: 2650, column: 15, scope: !13818)
!13840 = !DILocation(line: 2650, column: 8, scope: !13818)
!13841 = !DILocation(line: 2653, column: 30, scope: !13842)
!13842 = distinct !DILexicalBlock(scope: !13773, file: !3, line: 2653, column: 11)
!13843 = !DILocation(line: 2653, column: 12, scope: !13842)
!13844 = !DILocation(line: 2653, column: 11, scope: !13773)
!13845 = !DILocation(line: 2656, column: 31, scope: !13846)
!13846 = distinct !DILexicalBlock(scope: !13842, file: !3, line: 2655, column: 2)
!13847 = !DILocation(line: 2656, column: 4, scope: !13846)
!13848 = !DILocation(line: 2657, column: 4, scope: !13846)
!13849 = !DILocation(line: 2658, column: 4, scope: !13846)
!13850 = !DILocation(line: 2660, column: 35, scope: !13851)
!13851 = distinct !DILexicalBlock(scope: !13773, file: !3, line: 2660, column: 11)
!13852 = !DILocation(line: 2660, column: 11, scope: !13851)
!13853 = !DILocation(line: 2660, column: 11, scope: !13773)
!13854 = !DILocation(line: 2662, column: 28, scope: !13855)
!13855 = distinct !DILexicalBlock(scope: !13851, file: !3, line: 2661, column: 2)
!13856 = !DILocation(line: 2662, column: 4, scope: !13855)
!13857 = !DILocation(line: 2663, column: 32, scope: !13858)
!13858 = distinct !DILexicalBlock(scope: !13855, file: !3, line: 2663, column: 8)
!13859 = !DILocation(line: 2663, column: 8, scope: !13858)
!13860 = !DILocation(line: 2663, column: 8, scope: !13855)
!13861 = !DILocation(line: 2665, column: 32, scope: !13862)
!13862 = distinct !DILexicalBlock(scope: !13858, file: !3, line: 2664, column: 6)
!13863 = !DILocation(line: 2665, column: 8, scope: !13862)
!13864 = !DILocation(line: 2666, column: 12, scope: !13865)
!13865 = distinct !DILexicalBlock(scope: !13862, file: !3, line: 2666, column: 12)
!13866 = !DILocation(line: 2666, column: 12, scope: !13862)
!13867 = !DILocation(line: 2667, column: 10, scope: !13865)
!13868 = !DILocation(line: 2667, column: 3, scope: !13865)
!13869 = !DILocalVariable(name: "ret", scope: !13870, file: !3, line: 2670, type: !4326)
!13870 = distinct !DILexicalBlock(scope: !13865, file: !3, line: 2669, column: 3)
!13871 = !DILocation(line: 2670, column: 24, scope: !13870)
!13872 = !DILocation(line: 2671, column: 9, scope: !13870)
!13873 = !DILocation(line: 2672, column: 5, scope: !13870)
!13874 = !DILocation(line: 2672, column: 10, scope: !13870)
!13875 = !DILocation(line: 2672, column: 16, scope: !13870)
!13876 = !DILocation(line: 2673, column: 5, scope: !13870)
!13877 = !DILocation(line: 2673, column: 10, scope: !13870)
!13878 = !DILocation(line: 2673, column: 15, scope: !13870)
!13879 = !DILocation(line: 2674, column: 5, scope: !13870)
!13880 = !DILocation(line: 2674, column: 10, scope: !13870)
!13881 = !DILocation(line: 2674, column: 16, scope: !13870)
!13882 = !DILocation(line: 2675, column: 5, scope: !13870)
!13883 = !DILocation(line: 2675, column: 10, scope: !13870)
!13884 = !DILocation(line: 2675, column: 17, scope: !13870)
!13885 = !DILocation(line: 2676, column: 5, scope: !13870)
!13886 = !DILocation(line: 2676, column: 10, scope: !13870)
!13887 = !DILocation(line: 2676, column: 24, scope: !13870)
!13888 = !DILocation(line: 2677, column: 5, scope: !13870)
!13889 = !DILocation(line: 2677, column: 10, scope: !13870)
!13890 = !DILocation(line: 2677, column: 25, scope: !13870)
!13891 = !DILocation(line: 2678, column: 12, scope: !13870)
!13892 = !DILocation(line: 2678, column: 5, scope: !13870)
!13893 = !DILocation(line: 2683, column: 35, scope: !13894)
!13894 = distinct !DILexicalBlock(scope: !13858, file: !3, line: 2682, column: 6)
!13895 = !DILocation(line: 2683, column: 8, scope: !13894)
!13896 = !DILocation(line: 2685, column: 8, scope: !13894)
!13897 = !DILocation(line: 2686, column: 8, scope: !13894)
!13898 = distinct !{!13898, !13771, !13899}
!13899 = !DILocation(line: 2689, column: 5, scope: !13686)
!13900 = !DILocation(line: 2690, column: 1, scope: !13686)
!13901 = distinct !DISubprogram(name: "c_parser_skip_to_end_of_parameter", scope: !3, file: !3, line: 695, type: !4514, scopeLine: 696, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!13902 = !DILocalVariable(name: "parser", arg: 1, scope: !13901, file: !3, line: 695, type: !3401)
!13903 = !DILocation(line: 695, column: 46, scope: !13901)
!13904 = !DILocalVariable(name: "nesting_depth", scope: !13901, file: !3, line: 697, type: !7)
!13905 = !DILocation(line: 697, column: 12, scope: !13901)
!13906 = !DILocation(line: 699, column: 3, scope: !13901)
!13907 = !DILocalVariable(name: "token", scope: !13908, file: !3, line: 701, type: !4459)
!13908 = distinct !DILexicalBlock(scope: !13901, file: !3, line: 700, column: 5)
!13909 = !DILocation(line: 701, column: 16, scope: !13908)
!13910 = !DILocation(line: 701, column: 45, scope: !13908)
!13911 = !DILocation(line: 701, column: 24, scope: !13908)
!13912 = !DILocation(line: 702, column: 12, scope: !13913)
!13913 = distinct !DILexicalBlock(scope: !13908, file: !3, line: 702, column: 11)
!13914 = !DILocation(line: 702, column: 19, scope: !13913)
!13915 = !DILocation(line: 702, column: 24, scope: !13913)
!13916 = !DILocation(line: 702, column: 37, scope: !13913)
!13917 = !DILocation(line: 702, column: 40, scope: !13913)
!13918 = !DILocation(line: 702, column: 47, scope: !13913)
!13919 = !DILocation(line: 702, column: 52, scope: !13913)
!13920 = !DILocation(line: 703, column: 4, scope: !13913)
!13921 = !DILocation(line: 703, column: 8, scope: !13913)
!13922 = !DILocation(line: 702, column: 11, scope: !13908)
!13923 = !DILocation(line: 704, column: 2, scope: !13913)
!13924 = !DILocation(line: 706, column: 11, scope: !13925)
!13925 = distinct !DILexicalBlock(scope: !13908, file: !3, line: 706, column: 11)
!13926 = !DILocation(line: 706, column: 18, scope: !13925)
!13927 = !DILocation(line: 706, column: 23, scope: !13925)
!13928 = !DILocation(line: 706, column: 11, scope: !13908)
!13929 = !DILocation(line: 707, column: 2, scope: !13925)
!13930 = !DILocation(line: 708, column: 11, scope: !13931)
!13931 = distinct !DILexicalBlock(scope: !13908, file: !3, line: 708, column: 11)
!13932 = !DILocation(line: 708, column: 18, scope: !13931)
!13933 = !DILocation(line: 708, column: 23, scope: !13931)
!13934 = !DILocation(line: 708, column: 41, scope: !13931)
!13935 = !DILocation(line: 708, column: 44, scope: !13931)
!13936 = !DILocation(line: 708, column: 52, scope: !13931)
!13937 = !DILocation(line: 708, column: 11, scope: !13908)
!13938 = !DILocation(line: 709, column: 2, scope: !13931)
!13939 = !DILocation(line: 710, column: 11, scope: !13940)
!13940 = distinct !DILexicalBlock(scope: !13908, file: !3, line: 710, column: 11)
!13941 = !DILocation(line: 710, column: 18, scope: !13940)
!13942 = !DILocation(line: 710, column: 23, scope: !13940)
!13943 = !DILocation(line: 711, column: 4, scope: !13940)
!13944 = !DILocation(line: 711, column: 7, scope: !13940)
!13945 = !DILocation(line: 711, column: 14, scope: !13940)
!13946 = !DILocation(line: 711, column: 19, scope: !13940)
!13947 = !DILocation(line: 712, column: 4, scope: !13940)
!13948 = !DILocation(line: 712, column: 7, scope: !13940)
!13949 = !DILocation(line: 712, column: 14, scope: !13940)
!13950 = !DILocation(line: 712, column: 19, scope: !13940)
!13951 = !DILocation(line: 710, column: 11, scope: !13908)
!13952 = !DILocation(line: 713, column: 2, scope: !13940)
!13953 = !DILocation(line: 714, column: 16, scope: !13954)
!13954 = distinct !DILexicalBlock(scope: !13940, file: !3, line: 714, column: 16)
!13955 = !DILocation(line: 714, column: 23, scope: !13954)
!13956 = !DILocation(line: 714, column: 28, scope: !13954)
!13957 = !DILocation(line: 715, column: 9, scope: !13954)
!13958 = !DILocation(line: 715, column: 12, scope: !13954)
!13959 = !DILocation(line: 715, column: 19, scope: !13954)
!13960 = !DILocation(line: 715, column: 24, scope: !13954)
!13961 = !DILocation(line: 716, column: 9, scope: !13954)
!13962 = !DILocation(line: 716, column: 12, scope: !13954)
!13963 = !DILocation(line: 716, column: 19, scope: !13954)
!13964 = !DILocation(line: 716, column: 24, scope: !13954)
!13965 = !DILocation(line: 714, column: 16, scope: !13940)
!13966 = !DILocation(line: 718, column: 21, scope: !13967)
!13967 = distinct !DILexicalBlock(scope: !13968, file: !3, line: 718, column: 8)
!13968 = distinct !DILexicalBlock(scope: !13954, file: !3, line: 717, column: 2)
!13969 = !DILocation(line: 718, column: 24, scope: !13967)
!13970 = !DILocation(line: 718, column: 8, scope: !13968)
!13971 = !DILocation(line: 719, column: 6, scope: !13967)
!13972 = !DILocation(line: 720, column: 2, scope: !13968)
!13973 = !DILocation(line: 722, column: 31, scope: !13908)
!13974 = !DILocation(line: 722, column: 7, scope: !13908)
!13975 = distinct !{!13975, !13906, !13976}
!13976 = !DILocation(line: 723, column: 5, scope: !13901)
!13977 = !DILocation(line: 724, column: 3, scope: !13901)
!13978 = !DILocation(line: 724, column: 11, scope: !13901)
!13979 = !DILocation(line: 724, column: 17, scope: !13901)
!13980 = !DILocation(line: 725, column: 1, scope: !13901)
!13981 = distinct !DISubprogram(name: "c_parser_omp_barrier", scope: !3, file: !3, line: 7911, type: !4514, scopeLine: 7912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!13982 = !DILocalVariable(name: "parser", arg: 1, scope: !13981, file: !3, line: 7911, type: !3401)
!13983 = !DILocation(line: 7911, column: 33, scope: !13981)
!13984 = !DILocalVariable(name: "loc", scope: !13981, file: !3, line: 7913, type: !2352)
!13985 = !DILocation(line: 7913, column: 14, scope: !13981)
!13986 = !DILocation(line: 7913, column: 41, scope: !13981)
!13987 = !DILocation(line: 7913, column: 20, scope: !13981)
!13988 = !DILocation(line: 7913, column: 50, scope: !13981)
!13989 = !DILocation(line: 7914, column: 28, scope: !13981)
!13990 = !DILocation(line: 7914, column: 3, scope: !13981)
!13991 = !DILocation(line: 7915, column: 32, scope: !13981)
!13992 = !DILocation(line: 7915, column: 3, scope: !13981)
!13993 = !DILocation(line: 7917, column: 25, scope: !13981)
!13994 = !DILocation(line: 7917, column: 3, scope: !13981)
!13995 = !DILocation(line: 7918, column: 1, scope: !13981)
!13996 = distinct !DISubprogram(name: "c_parser_omp_flush", scope: !3, file: !3, line: 7958, type: !4514, scopeLine: 7959, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!13997 = !DILocalVariable(name: "parser", arg: 1, scope: !13996, file: !3, line: 7958, type: !3401)
!13998 = !DILocation(line: 7958, column: 31, scope: !13996)
!13999 = !DILocalVariable(name: "loc", scope: !13996, file: !3, line: 7960, type: !2352)
!14000 = !DILocation(line: 7960, column: 14, scope: !13996)
!14001 = !DILocation(line: 7960, column: 41, scope: !13996)
!14002 = !DILocation(line: 7960, column: 20, scope: !13996)
!14003 = !DILocation(line: 7960, column: 50, scope: !13996)
!14004 = !DILocation(line: 7961, column: 28, scope: !13996)
!14005 = !DILocation(line: 7961, column: 3, scope: !13996)
!14006 = !DILocation(line: 7962, column: 31, scope: !14007)
!14007 = distinct !DILexicalBlock(scope: !13996, file: !3, line: 7962, column: 7)
!14008 = !DILocation(line: 7962, column: 7, scope: !14007)
!14009 = !DILocation(line: 7962, column: 7, scope: !13996)
!14010 = !DILocation(line: 7963, column: 35, scope: !14007)
!14011 = !DILocation(line: 7963, column: 5, scope: !14007)
!14012 = !DILocation(line: 7964, column: 40, scope: !14013)
!14013 = distinct !DILexicalBlock(scope: !14007, file: !3, line: 7964, column: 12)
!14014 = !DILocation(line: 7964, column: 12, scope: !14013)
!14015 = !DILocation(line: 7964, column: 12, scope: !14007)
!14016 = !DILocation(line: 7965, column: 21, scope: !14013)
!14017 = !DILocation(line: 7965, column: 5, scope: !14013)
!14018 = !DILocation(line: 7966, column: 32, scope: !13996)
!14019 = !DILocation(line: 7966, column: 3, scope: !13996)
!14020 = !DILocation(line: 7968, column: 23, scope: !13996)
!14021 = !DILocation(line: 7968, column: 3, scope: !13996)
!14022 = !DILocation(line: 7969, column: 1, scope: !13996)
!14023 = distinct !DISubprogram(name: "c_parser_omp_taskwait", scope: !3, file: !3, line: 8581, type: !4514, scopeLine: 8582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14024 = !DILocalVariable(name: "parser", arg: 1, scope: !14023, file: !3, line: 8581, type: !3401)
!14025 = !DILocation(line: 8581, column: 34, scope: !14023)
!14026 = !DILocalVariable(name: "loc", scope: !14023, file: !3, line: 8583, type: !2352)
!14027 = !DILocation(line: 8583, column: 14, scope: !14023)
!14028 = !DILocation(line: 8583, column: 41, scope: !14023)
!14029 = !DILocation(line: 8583, column: 20, scope: !14023)
!14030 = !DILocation(line: 8583, column: 50, scope: !14023)
!14031 = !DILocation(line: 8584, column: 28, scope: !14023)
!14032 = !DILocation(line: 8584, column: 3, scope: !14023)
!14033 = !DILocation(line: 8585, column: 32, scope: !14023)
!14034 = !DILocation(line: 8585, column: 3, scope: !14023)
!14035 = !DILocation(line: 8587, column: 26, scope: !14023)
!14036 = !DILocation(line: 8587, column: 3, scope: !14023)
!14037 = !DILocation(line: 8588, column: 1, scope: !14023)
!14038 = distinct !DISubprogram(name: "c_parser_omp_threadprivate", scope: !3, file: !3, line: 8645, type: !4514, scopeLine: 8646, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14039 = !DILocalVariable(name: "parser", arg: 1, scope: !14038, file: !3, line: 8645, type: !3401)
!14040 = !DILocation(line: 8645, column: 39, scope: !14038)
!14041 = !DILocalVariable(name: "vars", scope: !14038, file: !3, line: 8647, type: !2224)
!14042 = !DILocation(line: 8647, column: 8, scope: !14038)
!14043 = !DILocalVariable(name: "t", scope: !14038, file: !3, line: 8647, type: !2224)
!14044 = !DILocation(line: 8647, column: 14, scope: !14038)
!14045 = !DILocalVariable(name: "loc", scope: !14038, file: !3, line: 8648, type: !2352)
!14046 = !DILocation(line: 8648, column: 14, scope: !14038)
!14047 = !DILocation(line: 8650, column: 28, scope: !14038)
!14048 = !DILocation(line: 8650, column: 3, scope: !14038)
!14049 = !DILocation(line: 8651, column: 30, scope: !14038)
!14050 = !DILocation(line: 8651, column: 9, scope: !14038)
!14051 = !DILocation(line: 8651, column: 39, scope: !14038)
!14052 = !DILocation(line: 8651, column: 7, scope: !14038)
!14053 = !DILocation(line: 8652, column: 40, scope: !14038)
!14054 = !DILocation(line: 8652, column: 10, scope: !14038)
!14055 = !DILocation(line: 8652, column: 8, scope: !14038)
!14056 = !DILocation(line: 8655, column: 12, scope: !14057)
!14057 = distinct !DILexicalBlock(scope: !14038, file: !3, line: 8655, column: 3)
!14058 = !DILocation(line: 8655, column: 10, scope: !14057)
!14059 = !DILocation(line: 8655, column: 8, scope: !14057)
!14060 = !DILocation(line: 8655, column: 18, scope: !14061)
!14061 = distinct !DILexicalBlock(scope: !14057, file: !3, line: 8655, column: 3)
!14062 = !DILocation(line: 8655, column: 3, scope: !14057)
!14063 = !DILocalVariable(name: "v", scope: !14064, file: !3, line: 8657, type: !2224)
!14064 = distinct !DILexicalBlock(scope: !14061, file: !3, line: 8656, column: 5)
!14065 = !DILocation(line: 8657, column: 12, scope: !14064)
!14066 = !DILocation(line: 8657, column: 16, scope: !14064)
!14067 = !DILocation(line: 8667, column: 11, scope: !14068)
!14068 = distinct !DILexicalBlock(scope: !14064, file: !3, line: 8667, column: 11)
!14069 = !DILocation(line: 8667, column: 25, scope: !14068)
!14070 = !DILocation(line: 8667, column: 11, scope: !14064)
!14071 = !DILocation(line: 8668, column: 12, scope: !14068)
!14072 = !DILocation(line: 8668, column: 42, scope: !14068)
!14073 = !DILocation(line: 8668, column: 2, scope: !14068)
!14074 = !DILocation(line: 8669, column: 16, scope: !14075)
!14075 = distinct !DILexicalBlock(scope: !14068, file: !3, line: 8669, column: 16)
!14076 = !DILocation(line: 8669, column: 30, scope: !14075)
!14077 = !DILocation(line: 8669, column: 34, scope: !14075)
!14078 = !DILocation(line: 8669, column: 16, scope: !14068)
!14079 = !DILocation(line: 8670, column: 12, scope: !14075)
!14080 = !DILocation(line: 8670, column: 67, scope: !14075)
!14081 = !DILocation(line: 8670, column: 2, scope: !14075)
!14082 = !DILocation(line: 8671, column: 18, scope: !14083)
!14083 = distinct !DILexicalBlock(scope: !14075, file: !3, line: 8671, column: 16)
!14084 = !DILocation(line: 8671, column: 34, scope: !14083)
!14085 = !DILocation(line: 8671, column: 39, scope: !14083)
!14086 = !DILocation(line: 8671, column: 16, scope: !14075)
!14087 = !DILocation(line: 8672, column: 12, scope: !14083)
!14088 = !DILocation(line: 8672, column: 71, scope: !14083)
!14089 = !DILocation(line: 8672, column: 2, scope: !14083)
!14090 = !DILocation(line: 8673, column: 16, scope: !14091)
!14091 = distinct !DILexicalBlock(scope: !14083, file: !3, line: 8673, column: 16)
!14092 = !DILocation(line: 8673, column: 33, scope: !14091)
!14093 = !DILocation(line: 8673, column: 30, scope: !14091)
!14094 = !DILocation(line: 8673, column: 16, scope: !14083)
!14095 = !DILocation(line: 8675, column: 18, scope: !14096)
!14096 = distinct !DILexicalBlock(scope: !14091, file: !3, line: 8675, column: 16)
!14097 = !DILocation(line: 8675, column: 16, scope: !14091)
!14098 = !DILocation(line: 8676, column: 12, scope: !14096)
!14099 = !DILocation(line: 8676, column: 62, scope: !14096)
!14100 = !DILocation(line: 8676, column: 2, scope: !14096)
!14101 = !DILocation(line: 8679, column: 10, scope: !14102)
!14102 = distinct !DILexicalBlock(scope: !14103, file: !3, line: 8679, column: 8)
!14103 = distinct !DILexicalBlock(scope: !14096, file: !3, line: 8678, column: 2)
!14104 = !DILocation(line: 8679, column: 8, scope: !14103)
!14105 = !DILocation(line: 8681, column: 53, scope: !14106)
!14106 = distinct !DILexicalBlock(scope: !14102, file: !3, line: 8680, column: 6)
!14107 = !DILocation(line: 8681, column: 29, scope: !14106)
!14108 = !DILocation(line: 8681, column: 8, scope: !14106)
!14109 = !DILocation(line: 8681, column: 27, scope: !14106)
!14110 = !DILocation(line: 8685, column: 12, scope: !14111)
!14111 = distinct !DILexicalBlock(scope: !14106, file: !3, line: 8685, column: 12)
!14112 = !DILocation(line: 8685, column: 12, scope: !14106)
!14113 = !DILocation(line: 8686, column: 18, scope: !14111)
!14114 = !DILocation(line: 8686, column: 3, scope: !14111)
!14115 = !DILocation(line: 8687, column: 6, scope: !14106)
!14116 = !DILocation(line: 8688, column: 4, scope: !14103)
!14117 = !DILocation(line: 8688, column: 31, scope: !14103)
!14118 = !DILocation(line: 8690, column: 5, scope: !14064)
!14119 = !DILocation(line: 8655, column: 25, scope: !14061)
!14120 = !DILocation(line: 8655, column: 23, scope: !14061)
!14121 = !DILocation(line: 8655, column: 3, scope: !14061)
!14122 = distinct !{!14122, !14062, !14123}
!14123 = !DILocation(line: 8690, column: 5, scope: !14057)
!14124 = !DILocation(line: 8692, column: 32, scope: !14038)
!14125 = !DILocation(line: 8692, column: 3, scope: !14038)
!14126 = !DILocation(line: 8693, column: 1, scope: !14038)
!14127 = distinct !DISubprogram(name: "c_parser_omp_construct", scope: !3, file: !3, line: 8593, type: !4514, scopeLine: 8594, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14128 = !DILocalVariable(name: "parser", arg: 1, scope: !14127, file: !3, line: 8593, type: !3401)
!14129 = !DILocation(line: 8593, column: 35, scope: !14127)
!14130 = !DILocalVariable(name: "p_kind", scope: !14127, file: !3, line: 8595, type: !649)
!14131 = !DILocation(line: 8595, column: 20, scope: !14127)
!14132 = !DILocalVariable(name: "loc", scope: !14127, file: !3, line: 8596, type: !2352)
!14133 = !DILocation(line: 8596, column: 14, scope: !14127)
!14134 = !DILocalVariable(name: "stmt", scope: !14127, file: !3, line: 8597, type: !2224)
!14135 = !DILocation(line: 8597, column: 8, scope: !14127)
!14136 = !DILocation(line: 8599, column: 30, scope: !14127)
!14137 = !DILocation(line: 8599, column: 9, scope: !14127)
!14138 = !DILocation(line: 8599, column: 39, scope: !14127)
!14139 = !DILocation(line: 8599, column: 7, scope: !14127)
!14140 = !DILocation(line: 8600, column: 33, scope: !14127)
!14141 = !DILocation(line: 8600, column: 12, scope: !14127)
!14142 = !DILocation(line: 8600, column: 42, scope: !14127)
!14143 = !DILocation(line: 8600, column: 10, scope: !14127)
!14144 = !DILocation(line: 8601, column: 28, scope: !14127)
!14145 = !DILocation(line: 8601, column: 3, scope: !14127)
!14146 = !DILocation(line: 8603, column: 11, scope: !14127)
!14147 = !DILocation(line: 8603, column: 3, scope: !14127)
!14148 = !DILocation(line: 8606, column: 28, scope: !14149)
!14149 = distinct !DILexicalBlock(scope: !14127, file: !3, line: 8604, column: 5)
!14150 = !DILocation(line: 8606, column: 33, scope: !14149)
!14151 = !DILocation(line: 8606, column: 7, scope: !14149)
!14152 = !DILocation(line: 8607, column: 7, scope: !14149)
!14153 = !DILocation(line: 8609, column: 37, scope: !14149)
!14154 = !DILocation(line: 8609, column: 42, scope: !14149)
!14155 = !DILocation(line: 8609, column: 14, scope: !14149)
!14156 = !DILocation(line: 8609, column: 12, scope: !14149)
!14157 = !DILocation(line: 8610, column: 7, scope: !14149)
!14158 = !DILocation(line: 8612, column: 32, scope: !14149)
!14159 = !DILocation(line: 8612, column: 37, scope: !14149)
!14160 = !DILocation(line: 8612, column: 14, scope: !14149)
!14161 = !DILocation(line: 8612, column: 12, scope: !14149)
!14162 = !DILocation(line: 8613, column: 7, scope: !14149)
!14163 = !DILocation(line: 8615, column: 35, scope: !14149)
!14164 = !DILocation(line: 8615, column: 40, scope: !14149)
!14165 = !DILocation(line: 8615, column: 14, scope: !14149)
!14166 = !DILocation(line: 8615, column: 12, scope: !14149)
!14167 = !DILocation(line: 8616, column: 7, scope: !14149)
!14168 = !DILocation(line: 8618, column: 36, scope: !14149)
!14169 = !DILocation(line: 8618, column: 41, scope: !14149)
!14170 = !DILocation(line: 8618, column: 14, scope: !14149)
!14171 = !DILocation(line: 8618, column: 12, scope: !14149)
!14172 = !DILocation(line: 8619, column: 7, scope: !14149)
!14173 = !DILocation(line: 8621, column: 37, scope: !14149)
!14174 = !DILocation(line: 8621, column: 42, scope: !14149)
!14175 = !DILocation(line: 8621, column: 14, scope: !14149)
!14176 = !DILocation(line: 8621, column: 12, scope: !14149)
!14177 = !DILocation(line: 8622, column: 7, scope: !14149)
!14178 = !DILocation(line: 8624, column: 37, scope: !14149)
!14179 = !DILocation(line: 8624, column: 42, scope: !14149)
!14180 = !DILocation(line: 8624, column: 14, scope: !14149)
!14181 = !DILocation(line: 8624, column: 12, scope: !14149)
!14182 = !DILocation(line: 8625, column: 7, scope: !14149)
!14183 = !DILocation(line: 8627, column: 35, scope: !14149)
!14184 = !DILocation(line: 8627, column: 40, scope: !14149)
!14185 = !DILocation(line: 8627, column: 14, scope: !14149)
!14186 = !DILocation(line: 8627, column: 12, scope: !14149)
!14187 = !DILocation(line: 8628, column: 7, scope: !14149)
!14188 = !DILocation(line: 8630, column: 33, scope: !14149)
!14189 = !DILocation(line: 8630, column: 38, scope: !14149)
!14190 = !DILocation(line: 8630, column: 14, scope: !14149)
!14191 = !DILocation(line: 8630, column: 12, scope: !14149)
!14192 = !DILocation(line: 8631, column: 7, scope: !14149)
!14193 = !DILocation(line: 8633, column: 7, scope: !14149)
!14194 = !DILocation(line: 8634, column: 5, scope: !14149)
!14195 = !DILocation(line: 8636, column: 7, scope: !14196)
!14196 = distinct !DILexicalBlock(scope: !14127, file: !3, line: 8636, column: 7)
!14197 = !DILocation(line: 8636, column: 7, scope: !14127)
!14198 = !DILocation(line: 8637, column: 5, scope: !14196)
!14199 = !DILocation(line: 8638, column: 1, scope: !14127)
!14200 = distinct !DISubprogram(name: "c_parser_omp_var_list_parens", scope: !3, file: !3, line: 7250, type: !14201, scopeLine: 7252, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14201 = !DISubroutineType(types: !14202)
!14202 = !{!2224, !3401, !157, !2224}
!14203 = !DILocalVariable(name: "parser", arg: 1, scope: !14200, file: !3, line: 7250, type: !3401)
!14204 = !DILocation(line: 7250, column: 41, scope: !14200)
!14205 = !DILocalVariable(name: "kind", arg: 2, scope: !14200, file: !3, line: 7250, type: !157)
!14206 = !DILocation(line: 7250, column: 70, scope: !14200)
!14207 = !DILocalVariable(name: "list", arg: 3, scope: !14200, file: !3, line: 7251, type: !2224)
!14208 = !DILocation(line: 7251, column: 15, scope: !14200)
!14209 = !DILocalVariable(name: "loc", scope: !14200, file: !3, line: 7254, type: !2352)
!14210 = !DILocation(line: 7254, column: 14, scope: !14200)
!14211 = !DILocation(line: 7254, column: 41, scope: !14200)
!14212 = !DILocation(line: 7254, column: 20, scope: !14200)
!14213 = !DILocation(line: 7254, column: 50, scope: !14200)
!14214 = !DILocation(line: 7256, column: 25, scope: !14215)
!14215 = distinct !DILexicalBlock(scope: !14200, file: !3, line: 7256, column: 7)
!14216 = !DILocation(line: 7256, column: 7, scope: !14215)
!14217 = !DILocation(line: 7256, column: 7, scope: !14200)
!14218 = !DILocation(line: 7258, column: 42, scope: !14219)
!14219 = distinct !DILexicalBlock(scope: !14215, file: !3, line: 7257, column: 5)
!14220 = !DILocation(line: 7258, column: 50, scope: !14219)
!14221 = !DILocation(line: 7258, column: 55, scope: !14219)
!14222 = !DILocation(line: 7258, column: 61, scope: !14219)
!14223 = !DILocation(line: 7258, column: 14, scope: !14219)
!14224 = !DILocation(line: 7258, column: 12, scope: !14219)
!14225 = !DILocation(line: 7259, column: 34, scope: !14219)
!14226 = !DILocation(line: 7259, column: 7, scope: !14219)
!14227 = !DILocation(line: 7260, column: 5, scope: !14219)
!14228 = !DILocation(line: 7261, column: 10, scope: !14200)
!14229 = !DILocation(line: 7261, column: 3, scope: !14200)
!14230 = distinct !DISubprogram(name: "c_parser_omp_variable_list", scope: !3, file: !3, line: 7206, type: !14231, scopeLine: 7210, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14231 = !DISubroutineType(types: !14232)
!14232 = !{!2224, !3401, !2352, !157, !2224}
!14233 = !DILocalVariable(name: "parser", arg: 1, scope: !14230, file: !3, line: 7206, type: !3401)
!14234 = !DILocation(line: 7206, column: 39, scope: !14230)
!14235 = !DILocalVariable(name: "clause_loc", arg: 2, scope: !14230, file: !3, line: 7207, type: !2352)
!14236 = !DILocation(line: 7207, column: 19, scope: !14230)
!14237 = !DILocalVariable(name: "kind", arg: 3, scope: !14230, file: !3, line: 7208, type: !157)
!14238 = !DILocation(line: 7208, column: 29, scope: !14230)
!14239 = !DILocalVariable(name: "list", arg: 4, scope: !14230, file: !3, line: 7209, type: !2224)
!14240 = !DILocation(line: 7209, column: 34, scope: !14230)
!14241 = !DILocation(line: 7211, column: 35, scope: !14242)
!14242 = distinct !DILexicalBlock(scope: !14230, file: !3, line: 7211, column: 7)
!14243 = !DILocation(line: 7211, column: 7, scope: !14242)
!14244 = !DILocation(line: 7212, column: 7, scope: !14242)
!14245 = !DILocation(line: 7212, column: 31, scope: !14242)
!14246 = !DILocation(line: 7212, column: 10, scope: !14242)
!14247 = !DILocation(line: 7212, column: 40, scope: !14242)
!14248 = !DILocation(line: 7212, column: 48, scope: !14242)
!14249 = !DILocation(line: 7211, column: 7, scope: !14230)
!14250 = !DILocation(line: 7213, column: 21, scope: !14242)
!14251 = !DILocation(line: 7213, column: 5, scope: !14242)
!14252 = !DILocation(line: 7215, column: 3, scope: !14230)
!14253 = !DILocation(line: 7215, column: 34, scope: !14230)
!14254 = !DILocation(line: 7215, column: 10, scope: !14230)
!14255 = !DILocation(line: 7216, column: 3, scope: !14230)
!14256 = !DILocation(line: 7216, column: 27, scope: !14230)
!14257 = !DILocation(line: 7216, column: 6, scope: !14230)
!14258 = !DILocation(line: 7216, column: 36, scope: !14230)
!14259 = !DILocation(line: 7216, column: 44, scope: !14230)
!14260 = !DILocation(line: 0, scope: !14230)
!14261 = !DILocalVariable(name: "t", scope: !14262, file: !3, line: 7218, type: !2224)
!14262 = distinct !DILexicalBlock(scope: !14230, file: !3, line: 7217, column: 5)
!14263 = !DILocation(line: 7218, column: 12, scope: !14262)
!14264 = !DILocation(line: 7218, column: 50, scope: !14262)
!14265 = !DILocation(line: 7218, column: 29, scope: !14262)
!14266 = !DILocation(line: 7218, column: 59, scope: !14262)
!14267 = !DILocation(line: 7218, column: 16, scope: !14262)
!14268 = !DILocation(line: 7220, column: 11, scope: !14269)
!14269 = distinct !DILexicalBlock(scope: !14262, file: !3, line: 7220, column: 11)
!14270 = !DILocation(line: 7220, column: 13, scope: !14269)
!14271 = !DILocation(line: 7220, column: 11, scope: !14262)
!14272 = !DILocation(line: 7221, column: 44, scope: !14269)
!14273 = !DILocation(line: 7221, column: 23, scope: !14269)
!14274 = !DILocation(line: 7221, column: 53, scope: !14269)
!14275 = !DILocation(line: 7222, column: 30, scope: !14269)
!14276 = !DILocation(line: 7222, column: 9, scope: !14269)
!14277 = !DILocation(line: 7222, column: 39, scope: !14269)
!14278 = !DILocation(line: 7221, column: 2, scope: !14269)
!14279 = !DILocation(line: 7223, column: 16, scope: !14280)
!14280 = distinct !DILexicalBlock(scope: !14269, file: !3, line: 7223, column: 16)
!14281 = !DILocation(line: 7223, column: 21, scope: !14280)
!14282 = !DILocation(line: 7223, column: 18, scope: !14280)
!14283 = !DILocation(line: 7223, column: 16, scope: !14269)
!14284 = !DILocation(line: 7225, column: 16, scope: !14285)
!14285 = distinct !DILexicalBlock(scope: !14280, file: !3, line: 7225, column: 16)
!14286 = !DILocation(line: 7225, column: 21, scope: !14285)
!14287 = !DILocation(line: 7225, column: 16, scope: !14280)
!14288 = !DILocalVariable(name: "u", scope: !14289, file: !3, line: 7227, type: !2224)
!14289 = distinct !DILexicalBlock(scope: !14285, file: !3, line: 7226, column: 2)
!14290 = !DILocation(line: 7227, column: 9, scope: !14289)
!14291 = !DILocation(line: 7227, column: 31, scope: !14289)
!14292 = !DILocation(line: 7227, column: 43, scope: !14289)
!14293 = !DILocation(line: 7227, column: 13, scope: !14289)
!14294 = !DILocation(line: 7228, column: 26, scope: !14289)
!14295 = !DILocation(line: 7228, column: 4, scope: !14289)
!14296 = !DILocation(line: 7228, column: 24, scope: !14289)
!14297 = !DILocation(line: 7229, column: 27, scope: !14289)
!14298 = !DILocation(line: 7229, column: 4, scope: !14289)
!14299 = !DILocation(line: 7229, column: 25, scope: !14289)
!14300 = !DILocation(line: 7230, column: 11, scope: !14289)
!14301 = !DILocation(line: 7230, column: 9, scope: !14289)
!14302 = !DILocation(line: 7231, column: 2, scope: !14289)
!14303 = !DILocation(line: 7233, column: 9, scope: !14285)
!14304 = !DILocation(line: 7233, column: 7, scope: !14285)
!14305 = !DILocation(line: 7235, column: 31, scope: !14262)
!14306 = !DILocation(line: 7235, column: 7, scope: !14262)
!14307 = !DILocation(line: 7237, column: 39, scope: !14308)
!14308 = distinct !DILexicalBlock(scope: !14262, file: !3, line: 7237, column: 11)
!14309 = !DILocation(line: 7237, column: 11, scope: !14308)
!14310 = !DILocation(line: 7237, column: 11, scope: !14262)
!14311 = !DILocation(line: 7238, column: 2, scope: !14308)
!14312 = !DILocation(line: 7240, column: 31, scope: !14262)
!14313 = !DILocation(line: 7240, column: 7, scope: !14262)
!14314 = distinct !{!14314, !14252, !14315}
!14315 = !DILocation(line: 7241, column: 5, scope: !14230)
!14316 = !DILocation(line: 7243, column: 10, scope: !14230)
!14317 = !DILocation(line: 7243, column: 3, scope: !14230)
!14318 = distinct !DISubprogram(name: "c_parser_omp_atomic", scope: !3, file: !3, line: 7821, type: !14319, scopeLine: 7822, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14319 = !DISubroutineType(types: !14320)
!14320 = !{null, !2352, !3401}
!14321 = !DILocalVariable(name: "loc", arg: 1, scope: !14318, file: !3, line: 7821, type: !2352)
!14322 = !DILocation(line: 7821, column: 33, scope: !14318)
!14323 = !DILocalVariable(name: "parser", arg: 2, scope: !14318, file: !3, line: 7821, type: !3401)
!14324 = !DILocation(line: 7821, column: 48, scope: !14318)
!14325 = !DILocalVariable(name: "lhs", scope: !14318, file: !3, line: 7823, type: !2224)
!14326 = !DILocation(line: 7823, column: 8, scope: !14318)
!14327 = !DILocalVariable(name: "rhs", scope: !14318, file: !3, line: 7823, type: !2224)
!14328 = !DILocation(line: 7823, column: 13, scope: !14318)
!14329 = !DILocalVariable(name: "stmt", scope: !14318, file: !3, line: 7824, type: !2224)
!14330 = !DILocation(line: 7824, column: 8, scope: !14318)
!14331 = !DILocalVariable(name: "code", scope: !14318, file: !3, line: 7825, type: !190)
!14332 = !DILocation(line: 7825, column: 18, scope: !14318)
!14333 = !DILocalVariable(name: "rhs_expr", scope: !14318, file: !3, line: 7826, type: !2221)
!14334 = !DILocation(line: 7826, column: 17, scope: !14318)
!14335 = !DILocation(line: 7828, column: 32, scope: !14318)
!14336 = !DILocation(line: 7828, column: 3, scope: !14318)
!14337 = !DILocation(line: 7830, column: 36, scope: !14318)
!14338 = !DILocation(line: 7830, column: 9, scope: !14318)
!14339 = !DILocation(line: 7830, column: 44, scope: !14318)
!14340 = !DILocation(line: 7830, column: 7, scope: !14318)
!14341 = !DILocation(line: 7831, column: 23, scope: !14318)
!14342 = !DILocation(line: 7831, column: 9, scope: !14318)
!14343 = !DILocation(line: 7831, column: 7, scope: !14318)
!14344 = !DILocation(line: 7832, column: 11, scope: !14318)
!14345 = !DILocation(line: 7832, column: 3, scope: !14318)
!14346 = !DILocation(line: 7833, column: 5, scope: !14318)
!14347 = !DILabel(scope: !14348, name: "saw_error", file: !3, line: 7835)
!14348 = distinct !DILexicalBlock(scope: !14318, file: !3, line: 7833, column: 5)
!14349 = !DILocation(line: 7835, column: 5, scope: !14348)
!14350 = !DILocation(line: 7836, column: 51, scope: !14348)
!14351 = !DILocation(line: 7836, column: 7, scope: !14348)
!14352 = !DILocation(line: 7837, column: 7, scope: !14348)
!14353 = !DILocation(line: 7841, column: 13, scope: !14348)
!14354 = !DILocation(line: 7841, column: 11, scope: !14348)
!14355 = !DILocation(line: 7842, column: 12, scope: !14348)
!14356 = !DILocation(line: 7843, column: 13, scope: !14348)
!14357 = !DILocation(line: 7843, column: 11, scope: !14348)
!14358 = !DILocation(line: 7844, column: 7, scope: !14348)
!14359 = !DILocation(line: 7848, column: 13, scope: !14348)
!14360 = !DILocation(line: 7848, column: 11, scope: !14348)
!14361 = !DILocation(line: 7849, column: 12, scope: !14348)
!14362 = !DILocation(line: 7850, column: 13, scope: !14348)
!14363 = !DILocation(line: 7850, column: 11, scope: !14348)
!14364 = !DILocation(line: 7851, column: 7, scope: !14348)
!14365 = !DILocation(line: 7854, column: 36, scope: !14348)
!14366 = !DILocation(line: 7854, column: 15, scope: !14348)
!14367 = !DILocation(line: 7854, column: 45, scope: !14348)
!14368 = !DILocation(line: 7854, column: 7, scope: !14348)
!14369 = !DILocation(line: 7857, column: 9, scope: !14370)
!14370 = distinct !DILexicalBlock(scope: !14348, file: !3, line: 7855, column: 2)
!14371 = !DILocation(line: 7858, column: 4, scope: !14370)
!14372 = !DILocation(line: 7860, column: 9, scope: !14370)
!14373 = !DILocation(line: 7861, column: 4, scope: !14370)
!14374 = !DILocation(line: 7863, column: 9, scope: !14370)
!14375 = !DILocation(line: 7864, column: 4, scope: !14370)
!14376 = !DILocation(line: 7866, column: 9, scope: !14370)
!14377 = !DILocation(line: 7867, column: 4, scope: !14370)
!14378 = !DILocation(line: 7869, column: 9, scope: !14370)
!14379 = !DILocation(line: 7870, column: 4, scope: !14370)
!14380 = !DILocation(line: 7872, column: 9, scope: !14370)
!14381 = !DILocation(line: 7873, column: 4, scope: !14370)
!14382 = !DILocation(line: 7875, column: 9, scope: !14370)
!14383 = !DILocation(line: 7876, column: 4, scope: !14370)
!14384 = !DILocation(line: 7878, column: 9, scope: !14370)
!14385 = !DILocation(line: 7879, column: 4, scope: !14370)
!14386 = !DILocation(line: 7881, column: 9, scope: !14370)
!14387 = !DILocation(line: 7882, column: 4, scope: !14370)
!14388 = !DILocation(line: 7884, column: 20, scope: !14370)
!14389 = !DILocation(line: 7884, column: 4, scope: !14370)
!14390 = !DILocation(line: 7886, column: 4, scope: !14370)
!14391 = !DILocation(line: 7889, column: 31, scope: !14348)
!14392 = !DILocation(line: 7889, column: 7, scope: !14348)
!14393 = !DILocalVariable(name: "rhs_loc", scope: !14394, file: !3, line: 7891, type: !2352)
!14394 = distinct !DILexicalBlock(scope: !14348, file: !3, line: 7890, column: 7)
!14395 = !DILocation(line: 7891, column: 13, scope: !14394)
!14396 = !DILocation(line: 7891, column: 44, scope: !14394)
!14397 = !DILocation(line: 7891, column: 23, scope: !14394)
!14398 = !DILocation(line: 7891, column: 53, scope: !14394)
!14399 = !DILocation(line: 7892, column: 34, scope: !14394)
!14400 = !DILocation(line: 7892, column: 13, scope: !14394)
!14401 = !DILocation(line: 7893, column: 48, scope: !14394)
!14402 = !DILocation(line: 7893, column: 13, scope: !14394)
!14403 = !DILocation(line: 7895, column: 22, scope: !14348)
!14404 = !DILocation(line: 7895, column: 11, scope: !14348)
!14405 = !DILocation(line: 7896, column: 27, scope: !14348)
!14406 = !DILocation(line: 7896, column: 13, scope: !14348)
!14407 = !DILocation(line: 7896, column: 11, scope: !14348)
!14408 = !DILocation(line: 7897, column: 7, scope: !14348)
!14409 = !DILocation(line: 7899, column: 31, scope: !14318)
!14410 = !DILocation(line: 7899, column: 36, scope: !14318)
!14411 = !DILocation(line: 7899, column: 42, scope: !14318)
!14412 = !DILocation(line: 7899, column: 47, scope: !14318)
!14413 = !DILocation(line: 7899, column: 10, scope: !14318)
!14414 = !DILocation(line: 7899, column: 8, scope: !14318)
!14415 = !DILocation(line: 7900, column: 7, scope: !14416)
!14416 = distinct !DILexicalBlock(scope: !14318, file: !3, line: 7900, column: 7)
!14417 = !DILocation(line: 7900, column: 15, scope: !14416)
!14418 = !DILocation(line: 7900, column: 12, scope: !14416)
!14419 = !DILocation(line: 7900, column: 7, scope: !14318)
!14420 = !DILocation(line: 7901, column: 15, scope: !14416)
!14421 = !DILocation(line: 7901, column: 5, scope: !14416)
!14422 = !DILocation(line: 7902, column: 30, scope: !14318)
!14423 = !DILocation(line: 7902, column: 3, scope: !14318)
!14424 = !DILocation(line: 7903, column: 1, scope: !14318)
!14425 = distinct !DISubprogram(name: "c_parser_omp_critical", scope: !3, file: !3, line: 7927, type: !14426, scopeLine: 7928, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14426 = !DISubroutineType(types: !14427)
!14427 = !{!2224, !2352, !3401}
!14428 = !DILocalVariable(name: "loc", arg: 1, scope: !14425, file: !3, line: 7927, type: !2352)
!14429 = !DILocation(line: 7927, column: 35, scope: !14425)
!14430 = !DILocalVariable(name: "parser", arg: 2, scope: !14425, file: !3, line: 7927, type: !3401)
!14431 = !DILocation(line: 7927, column: 50, scope: !14425)
!14432 = !DILocalVariable(name: "stmt", scope: !14425, file: !3, line: 7929, type: !2224)
!14433 = !DILocation(line: 7929, column: 8, scope: !14425)
!14434 = !DILocalVariable(name: "name", scope: !14425, file: !3, line: 7929, type: !2224)
!14435 = !DILocation(line: 7929, column: 14, scope: !14425)
!14436 = !DILocation(line: 7931, column: 31, scope: !14437)
!14437 = distinct !DILexicalBlock(scope: !14425, file: !3, line: 7931, column: 7)
!14438 = !DILocation(line: 7931, column: 7, scope: !14437)
!14439 = !DILocation(line: 7931, column: 7, scope: !14425)
!14440 = !DILocation(line: 7933, column: 31, scope: !14441)
!14441 = distinct !DILexicalBlock(scope: !14437, file: !3, line: 7932, column: 5)
!14442 = !DILocation(line: 7933, column: 7, scope: !14441)
!14443 = !DILocation(line: 7934, column: 35, scope: !14444)
!14444 = distinct !DILexicalBlock(scope: !14441, file: !3, line: 7934, column: 11)
!14445 = !DILocation(line: 7934, column: 11, scope: !14444)
!14446 = !DILocation(line: 7934, column: 11, scope: !14441)
!14447 = !DILocation(line: 7936, column: 32, scope: !14448)
!14448 = distinct !DILexicalBlock(scope: !14444, file: !3, line: 7935, column: 2)
!14449 = !DILocation(line: 7936, column: 11, scope: !14448)
!14450 = !DILocation(line: 7936, column: 41, scope: !14448)
!14451 = !DILocation(line: 7936, column: 9, scope: !14448)
!14452 = !DILocation(line: 7937, column: 28, scope: !14448)
!14453 = !DILocation(line: 7937, column: 4, scope: !14448)
!14454 = !DILocation(line: 7938, column: 22, scope: !14448)
!14455 = !DILocation(line: 7938, column: 4, scope: !14448)
!14456 = !DILocation(line: 7939, column: 2, scope: !14448)
!14457 = !DILocation(line: 7941, column: 18, scope: !14444)
!14458 = !DILocation(line: 7941, column: 2, scope: !14444)
!14459 = !DILocation(line: 7942, column: 5, scope: !14441)
!14460 = !DILocation(line: 7943, column: 40, scope: !14461)
!14461 = distinct !DILexicalBlock(scope: !14437, file: !3, line: 7943, column: 12)
!14462 = !DILocation(line: 7943, column: 12, scope: !14461)
!14463 = !DILocation(line: 7943, column: 12, scope: !14437)
!14464 = !DILocation(line: 7944, column: 21, scope: !14461)
!14465 = !DILocation(line: 7944, column: 5, scope: !14461)
!14466 = !DILocation(line: 7945, column: 32, scope: !14425)
!14467 = !DILocation(line: 7945, column: 3, scope: !14425)
!14468 = !DILocation(line: 7947, column: 41, scope: !14425)
!14469 = !DILocation(line: 7947, column: 10, scope: !14425)
!14470 = !DILocation(line: 7947, column: 8, scope: !14425)
!14471 = !DILocation(line: 7948, column: 33, scope: !14425)
!14472 = !DILocation(line: 7948, column: 38, scope: !14425)
!14473 = !DILocation(line: 7948, column: 44, scope: !14425)
!14474 = !DILocation(line: 7948, column: 10, scope: !14425)
!14475 = !DILocation(line: 7948, column: 3, scope: !14425)
!14476 = distinct !DISubprogram(name: "c_parser_omp_for", scope: !3, file: !3, line: 8276, type: !14426, scopeLine: 8277, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14477 = !DILocalVariable(name: "loc", arg: 1, scope: !14476, file: !3, line: 8276, type: !2352)
!14478 = !DILocation(line: 8276, column: 30, scope: !14476)
!14479 = !DILocalVariable(name: "parser", arg: 2, scope: !14476, file: !3, line: 8276, type: !3401)
!14480 = !DILocation(line: 8276, column: 45, scope: !14476)
!14481 = !DILocalVariable(name: "block", scope: !14476, file: !3, line: 8278, type: !2224)
!14482 = !DILocation(line: 8278, column: 8, scope: !14476)
!14483 = !DILocalVariable(name: "clauses", scope: !14476, file: !3, line: 8278, type: !2224)
!14484 = !DILocation(line: 8278, column: 15, scope: !14476)
!14485 = !DILocalVariable(name: "ret", scope: !14476, file: !3, line: 8278, type: !2224)
!14486 = !DILocation(line: 8278, column: 24, scope: !14476)
!14487 = !DILocation(line: 8280, column: 39, scope: !14476)
!14488 = !DILocation(line: 8280, column: 13, scope: !14476)
!14489 = !DILocation(line: 8280, column: 11, scope: !14476)
!14490 = !DILocation(line: 8283, column: 11, scope: !14476)
!14491 = !DILocation(line: 8283, column: 9, scope: !14476)
!14492 = !DILocation(line: 8284, column: 32, scope: !14476)
!14493 = !DILocation(line: 8284, column: 37, scope: !14476)
!14494 = !DILocation(line: 8284, column: 45, scope: !14476)
!14495 = !DILocation(line: 8284, column: 9, scope: !14476)
!14496 = !DILocation(line: 8284, column: 7, scope: !14476)
!14497 = !DILocation(line: 8285, column: 32, scope: !14476)
!14498 = !DILocation(line: 8285, column: 37, scope: !14476)
!14499 = !DILocation(line: 8285, column: 11, scope: !14476)
!14500 = !DILocation(line: 8285, column: 9, scope: !14476)
!14501 = !DILocation(line: 8286, column: 13, scope: !14476)
!14502 = !DILocation(line: 8286, column: 3, scope: !14476)
!14503 = !DILocation(line: 8288, column: 10, scope: !14476)
!14504 = !DILocation(line: 8288, column: 3, scope: !14476)
!14505 = distinct !DISubprogram(name: "c_parser_omp_master", scope: !3, file: !3, line: 8299, type: !14426, scopeLine: 8300, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14506 = !DILocalVariable(name: "loc", arg: 1, scope: !14505, file: !3, line: 8299, type: !2352)
!14507 = !DILocation(line: 8299, column: 33, scope: !14505)
!14508 = !DILocalVariable(name: "parser", arg: 2, scope: !14505, file: !3, line: 8299, type: !3401)
!14509 = !DILocation(line: 8299, column: 48, scope: !14505)
!14510 = !DILocation(line: 8301, column: 32, scope: !14505)
!14511 = !DILocation(line: 8301, column: 3, scope: !14505)
!14512 = !DILocation(line: 8302, column: 31, scope: !14505)
!14513 = !DILocation(line: 8302, column: 67, scope: !14505)
!14514 = !DILocation(line: 8302, column: 36, scope: !14505)
!14515 = !DILocation(line: 8302, column: 10, scope: !14505)
!14516 = !DILocation(line: 8302, column: 3, scope: !14505)
!14517 = distinct !DISubprogram(name: "c_parser_omp_ordered", scope: !3, file: !3, line: 8313, type: !14426, scopeLine: 8314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14518 = !DILocalVariable(name: "loc", arg: 1, scope: !14517, file: !3, line: 8313, type: !2352)
!14519 = !DILocation(line: 8313, column: 34, scope: !14517)
!14520 = !DILocalVariable(name: "parser", arg: 2, scope: !14517, file: !3, line: 8313, type: !3401)
!14521 = !DILocation(line: 8313, column: 49, scope: !14517)
!14522 = !DILocation(line: 8315, column: 32, scope: !14517)
!14523 = !DILocation(line: 8315, column: 3, scope: !14517)
!14524 = !DILocation(line: 8316, column: 32, scope: !14517)
!14525 = !DILocation(line: 8316, column: 68, scope: !14517)
!14526 = !DILocation(line: 8316, column: 37, scope: !14517)
!14527 = !DILocation(line: 8316, column: 10, scope: !14517)
!14528 = !DILocation(line: 8316, column: 3, scope: !14517)
!14529 = distinct !DISubprogram(name: "c_parser_omp_parallel", scope: !3, file: !3, line: 8458, type: !14426, scopeLine: 8459, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14530 = !DILocalVariable(name: "loc", arg: 1, scope: !14529, file: !3, line: 8458, type: !2352)
!14531 = !DILocation(line: 8458, column: 35, scope: !14529)
!14532 = !DILocalVariable(name: "parser", arg: 2, scope: !14529, file: !3, line: 8458, type: !3401)
!14533 = !DILocation(line: 8458, column: 50, scope: !14529)
!14534 = !DILocalVariable(name: "p_kind", scope: !14529, file: !3, line: 8460, type: !649)
!14535 = !DILocation(line: 8460, column: 20, scope: !14529)
!14536 = !DILocalVariable(name: "p_name", scope: !14529, file: !3, line: 8461, type: !2428)
!14537 = !DILocation(line: 8461, column: 15, scope: !14529)
!14538 = !DILocalVariable(name: "stmt", scope: !14529, file: !3, line: 8462, type: !2224)
!14539 = !DILocation(line: 8462, column: 8, scope: !14529)
!14540 = !DILocalVariable(name: "clauses", scope: !14529, file: !3, line: 8462, type: !2224)
!14541 = !DILocation(line: 8462, column: 14, scope: !14529)
!14542 = !DILocalVariable(name: "par_clause", scope: !14529, file: !3, line: 8462, type: !2224)
!14543 = !DILocation(line: 8462, column: 23, scope: !14529)
!14544 = !DILocalVariable(name: "ws_clause", scope: !14529, file: !3, line: 8462, type: !2224)
!14545 = !DILocation(line: 8462, column: 35, scope: !14529)
!14546 = !DILocalVariable(name: "block", scope: !14529, file: !3, line: 8462, type: !2224)
!14547 = !DILocation(line: 8462, column: 46, scope: !14529)
!14548 = !DILocalVariable(name: "mask", scope: !14529, file: !3, line: 8463, type: !7)
!14549 = !DILocation(line: 8463, column: 16, scope: !14529)
!14550 = !DILocation(line: 8465, column: 39, scope: !14551)
!14551 = distinct !DILexicalBlock(scope: !14529, file: !3, line: 8465, column: 7)
!14552 = !DILocation(line: 8465, column: 7, scope: !14551)
!14553 = !DILocation(line: 8465, column: 7, scope: !14529)
!14554 = !DILocation(line: 8467, column: 31, scope: !14555)
!14555 = distinct !DILexicalBlock(scope: !14551, file: !3, line: 8466, column: 5)
!14556 = !DILocation(line: 8467, column: 7, scope: !14555)
!14557 = !DILocation(line: 8468, column: 14, scope: !14555)
!14558 = !DILocation(line: 8469, column: 14, scope: !14555)
!14559 = !DILocation(line: 8470, column: 12, scope: !14555)
!14560 = !DILocation(line: 8471, column: 12, scope: !14555)
!14561 = !DILocation(line: 8472, column: 5, scope: !14555)
!14562 = !DILocation(line: 8473, column: 36, scope: !14563)
!14563 = distinct !DILexicalBlock(scope: !14551, file: !3, line: 8473, column: 12)
!14564 = !DILocation(line: 8473, column: 12, scope: !14563)
!14565 = !DILocation(line: 8473, column: 12, scope: !14551)
!14566 = !DILocalVariable(name: "p", scope: !14567, file: !3, line: 8475, type: !2428)
!14567 = distinct !DILexicalBlock(scope: !14563, file: !3, line: 8474, column: 5)
!14568 = !DILocation(line: 8475, column: 19, scope: !14567)
!14569 = !DILocation(line: 8475, column: 23, scope: !14567)
!14570 = !DILocation(line: 8476, column: 19, scope: !14571)
!14571 = distinct !DILexicalBlock(scope: !14567, file: !3, line: 8476, column: 11)
!14572 = !DILocation(line: 8476, column: 11, scope: !14571)
!14573 = !DILocation(line: 8476, column: 34, scope: !14571)
!14574 = !DILocation(line: 8476, column: 11, scope: !14567)
!14575 = !DILocation(line: 8478, column: 28, scope: !14576)
!14576 = distinct !DILexicalBlock(scope: !14571, file: !3, line: 8477, column: 2)
!14577 = !DILocation(line: 8478, column: 4, scope: !14576)
!14578 = !DILocation(line: 8479, column: 11, scope: !14576)
!14579 = !DILocation(line: 8480, column: 11, scope: !14576)
!14580 = !DILocation(line: 8481, column: 9, scope: !14576)
!14581 = !DILocation(line: 8482, column: 9, scope: !14576)
!14582 = !DILocation(line: 8483, column: 2, scope: !14576)
!14583 = !DILocation(line: 8484, column: 5, scope: !14567)
!14584 = !DILocation(line: 8486, column: 39, scope: !14529)
!14585 = !DILocation(line: 8486, column: 47, scope: !14529)
!14586 = !DILocation(line: 8486, column: 53, scope: !14529)
!14587 = !DILocation(line: 8486, column: 13, scope: !14529)
!14588 = !DILocation(line: 8486, column: 11, scope: !14529)
!14589 = !DILocation(line: 8488, column: 11, scope: !14529)
!14590 = !DILocation(line: 8488, column: 3, scope: !14529)
!14591 = !DILocation(line: 8491, column: 15, scope: !14592)
!14592 = distinct !DILexicalBlock(scope: !14529, file: !3, line: 8489, column: 5)
!14593 = !DILocation(line: 8491, column: 13, scope: !14592)
!14594 = !DILocation(line: 8492, column: 27, scope: !14592)
!14595 = !DILocation(line: 8492, column: 7, scope: !14592)
!14596 = !DILocation(line: 8493, column: 37, scope: !14592)
!14597 = !DILocation(line: 8493, column: 42, scope: !14592)
!14598 = !DILocation(line: 8493, column: 51, scope: !14592)
!14599 = !DILocation(line: 8493, column: 14, scope: !14592)
!14600 = !DILocation(line: 8493, column: 12, scope: !14592)
!14601 = !DILocation(line: 8494, column: 7, scope: !14592)
!14602 = !DILocation(line: 8497, column: 15, scope: !14592)
!14603 = !DILocation(line: 8497, column: 13, scope: !14592)
!14604 = !DILocation(line: 8498, column: 33, scope: !14592)
!14605 = !DILocation(line: 8498, column: 38, scope: !14592)
!14606 = !DILocation(line: 8498, column: 7, scope: !14592)
!14607 = !DILocation(line: 8499, column: 30, scope: !14592)
!14608 = !DILocation(line: 8499, column: 35, scope: !14592)
!14609 = !DILocation(line: 8499, column: 43, scope: !14592)
!14610 = !DILocation(line: 8499, column: 7, scope: !14592)
!14611 = !DILocation(line: 8500, column: 37, scope: !14592)
!14612 = !DILocation(line: 8500, column: 42, scope: !14592)
!14613 = !DILocation(line: 8500, column: 54, scope: !14592)
!14614 = !DILocation(line: 8500, column: 14, scope: !14592)
!14615 = !DILocation(line: 8500, column: 12, scope: !14592)
!14616 = !DILocation(line: 8501, column: 7, scope: !14592)
!14617 = !DILocation(line: 8501, column: 36, scope: !14592)
!14618 = !DILocation(line: 8502, column: 7, scope: !14592)
!14619 = !DILocation(line: 8505, column: 15, scope: !14592)
!14620 = !DILocation(line: 8505, column: 13, scope: !14592)
!14621 = !DILocation(line: 8506, column: 33, scope: !14592)
!14622 = !DILocation(line: 8506, column: 38, scope: !14592)
!14623 = !DILocation(line: 8506, column: 7, scope: !14592)
!14624 = !DILocation(line: 8507, column: 43, scope: !14592)
!14625 = !DILocation(line: 8507, column: 48, scope: !14592)
!14626 = !DILocation(line: 8507, column: 14, scope: !14592)
!14627 = !DILocation(line: 8507, column: 12, scope: !14592)
!14628 = !DILocation(line: 8508, column: 11, scope: !14629)
!14629 = distinct !DILexicalBlock(scope: !14592, file: !3, line: 8508, column: 11)
!14630 = !DILocation(line: 8508, column: 11, scope: !14592)
!14631 = !DILocation(line: 8509, column: 32, scope: !14629)
!14632 = !DILocation(line: 8509, column: 2, scope: !14629)
!14633 = !DILocation(line: 8509, column: 30, scope: !14629)
!14634 = !DILocation(line: 8510, column: 37, scope: !14592)
!14635 = !DILocation(line: 8510, column: 42, scope: !14592)
!14636 = !DILocation(line: 8510, column: 54, scope: !14592)
!14637 = !DILocation(line: 8510, column: 14, scope: !14592)
!14638 = !DILocation(line: 8510, column: 12, scope: !14592)
!14639 = !DILocation(line: 8511, column: 7, scope: !14592)
!14640 = !DILocation(line: 8511, column: 36, scope: !14592)
!14641 = !DILocation(line: 8512, column: 7, scope: !14592)
!14642 = !DILocation(line: 8515, column: 7, scope: !14592)
!14643 = !DILocation(line: 8516, column: 5, scope: !14592)
!14644 = !DILocation(line: 8518, column: 10, scope: !14529)
!14645 = !DILocation(line: 8518, column: 3, scope: !14529)
!14646 = distinct !DISubprogram(name: "c_parser_omp_sections", scope: !3, file: !3, line: 8422, type: !14426, scopeLine: 8423, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14647 = !DILocalVariable(name: "loc", arg: 1, scope: !14646, file: !3, line: 8422, type: !2352)
!14648 = !DILocation(line: 8422, column: 35, scope: !14646)
!14649 = !DILocalVariable(name: "parser", arg: 2, scope: !14646, file: !3, line: 8422, type: !3401)
!14650 = !DILocation(line: 8422, column: 50, scope: !14646)
!14651 = !DILocalVariable(name: "block", scope: !14646, file: !3, line: 8424, type: !2224)
!14652 = !DILocation(line: 8424, column: 8, scope: !14646)
!14653 = !DILocalVariable(name: "clauses", scope: !14646, file: !3, line: 8424, type: !2224)
!14654 = !DILocation(line: 8424, column: 15, scope: !14646)
!14655 = !DILocalVariable(name: "ret", scope: !14646, file: !3, line: 8424, type: !2224)
!14656 = !DILocation(line: 8424, column: 24, scope: !14646)
!14657 = !DILocation(line: 8426, column: 39, scope: !14646)
!14658 = !DILocation(line: 8426, column: 13, scope: !14646)
!14659 = !DILocation(line: 8426, column: 11, scope: !14646)
!14660 = !DILocation(line: 8429, column: 11, scope: !14646)
!14661 = !DILocation(line: 8429, column: 9, scope: !14646)
!14662 = !DILocation(line: 8430, column: 38, scope: !14646)
!14663 = !DILocation(line: 8430, column: 43, scope: !14646)
!14664 = !DILocation(line: 8430, column: 9, scope: !14646)
!14665 = !DILocation(line: 8430, column: 7, scope: !14646)
!14666 = !DILocation(line: 8431, column: 7, scope: !14667)
!14667 = distinct !DILexicalBlock(scope: !14646, file: !3, line: 8431, column: 7)
!14668 = !DILocation(line: 8431, column: 7, scope: !14646)
!14669 = !DILocation(line: 8432, column: 34, scope: !14667)
!14670 = !DILocation(line: 8432, column: 5, scope: !14667)
!14671 = !DILocation(line: 8432, column: 32, scope: !14667)
!14672 = !DILocation(line: 8433, column: 32, scope: !14646)
!14673 = !DILocation(line: 8433, column: 37, scope: !14646)
!14674 = !DILocation(line: 8433, column: 11, scope: !14646)
!14675 = !DILocation(line: 8433, column: 9, scope: !14646)
!14676 = !DILocation(line: 8434, column: 13, scope: !14646)
!14677 = !DILocation(line: 8434, column: 3, scope: !14646)
!14678 = !DILocation(line: 8436, column: 10, scope: !14646)
!14679 = !DILocation(line: 8436, column: 3, scope: !14646)
!14680 = distinct !DISubprogram(name: "c_parser_omp_single", scope: !3, file: !3, line: 8535, type: !14426, scopeLine: 8536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14681 = !DILocalVariable(name: "loc", arg: 1, scope: !14680, file: !3, line: 8535, type: !2352)
!14682 = !DILocation(line: 8535, column: 33, scope: !14680)
!14683 = !DILocalVariable(name: "parser", arg: 2, scope: !14680, file: !3, line: 8535, type: !3401)
!14684 = !DILocation(line: 8535, column: 48, scope: !14680)
!14685 = !DILocalVariable(name: "stmt", scope: !14680, file: !3, line: 8537, type: !2224)
!14686 = !DILocation(line: 8537, column: 8, scope: !14680)
!14687 = !DILocation(line: 8537, column: 15, scope: !14680)
!14688 = !DILocation(line: 8538, column: 3, scope: !14680)
!14689 = !DILocation(line: 8539, column: 22, scope: !14680)
!14690 = !DILocation(line: 8539, column: 3, scope: !14680)
!14691 = !DILocation(line: 8539, column: 20, scope: !14680)
!14692 = !DILocation(line: 8542, column: 33, scope: !14680)
!14693 = !DILocation(line: 8542, column: 7, scope: !14680)
!14694 = !DILocation(line: 8541, column: 3, scope: !14680)
!14695 = !DILocation(line: 8542, column: 5, scope: !14680)
!14696 = !DILocation(line: 8544, column: 59, scope: !14680)
!14697 = !DILocation(line: 8544, column: 28, scope: !14680)
!14698 = !DILocation(line: 8544, column: 3, scope: !14680)
!14699 = !DILocation(line: 8544, column: 26, scope: !14680)
!14700 = !DILocation(line: 8546, column: 20, scope: !14680)
!14701 = !DILocation(line: 8546, column: 10, scope: !14680)
!14702 = !DILocation(line: 8546, column: 3, scope: !14680)
!14703 = distinct !DISubprogram(name: "c_parser_omp_task", scope: !3, file: !3, line: 8564, type: !14426, scopeLine: 8565, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14704 = !DILocalVariable(name: "loc", arg: 1, scope: !14703, file: !3, line: 8564, type: !2352)
!14705 = !DILocation(line: 8564, column: 31, scope: !14703)
!14706 = !DILocalVariable(name: "parser", arg: 2, scope: !14703, file: !3, line: 8564, type: !3401)
!14707 = !DILocation(line: 8564, column: 46, scope: !14703)
!14708 = !DILocalVariable(name: "clauses", scope: !14703, file: !3, line: 8566, type: !2224)
!14709 = !DILocation(line: 8566, column: 8, scope: !14703)
!14710 = !DILocalVariable(name: "block", scope: !14703, file: !3, line: 8566, type: !2224)
!14711 = !DILocation(line: 8566, column: 17, scope: !14703)
!14712 = !DILocation(line: 8568, column: 39, scope: !14703)
!14713 = !DILocation(line: 8568, column: 13, scope: !14703)
!14714 = !DILocation(line: 8568, column: 11, scope: !14703)
!14715 = !DILocation(line: 8571, column: 11, scope: !14703)
!14716 = !DILocation(line: 8571, column: 9, scope: !14703)
!14717 = !DILocation(line: 8572, column: 23, scope: !14703)
!14718 = !DILocation(line: 8572, column: 3, scope: !14703)
!14719 = !DILocation(line: 8573, column: 29, scope: !14703)
!14720 = !DILocation(line: 8573, column: 34, scope: !14703)
!14721 = !DILocation(line: 8573, column: 43, scope: !14703)
!14722 = !DILocation(line: 8573, column: 10, scope: !14703)
!14723 = !DILocation(line: 8573, column: 3, scope: !14703)
!14724 = distinct !DISubprogram(name: "c_parser_omp_structured_block", scope: !3, file: !3, line: 7800, type: !6114, scopeLine: 7801, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14725 = !DILocalVariable(name: "parser", arg: 1, scope: !14724, file: !3, line: 7800, type: !3401)
!14726 = !DILocation(line: 7800, column: 42, scope: !14724)
!14727 = !DILocalVariable(name: "stmt", scope: !14724, file: !3, line: 7802, type: !2224)
!14728 = !DILocation(line: 7802, column: 8, scope: !14724)
!14729 = !DILocation(line: 7802, column: 15, scope: !14724)
!14730 = !DILocation(line: 7803, column: 23, scope: !14724)
!14731 = !DILocation(line: 7803, column: 3, scope: !14724)
!14732 = !DILocation(line: 7804, column: 25, scope: !14724)
!14733 = !DILocation(line: 7804, column: 10, scope: !14724)
!14734 = !DILocation(line: 7804, column: 3, scope: !14724)
!14735 = distinct !DISubprogram(name: "c_parser_omp_all_clauses", scope: !3, file: !3, line: 7689, type: !14736, scopeLine: 7691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14736 = !DISubroutineType(types: !14737)
!14737 = !{!2224, !3401, !7, !2428}
!14738 = !DILocalVariable(name: "parser", arg: 1, scope: !14735, file: !3, line: 7689, type: !3401)
!14739 = !DILocation(line: 7689, column: 37, scope: !14735)
!14740 = !DILocalVariable(name: "mask", arg: 2, scope: !14735, file: !3, line: 7689, type: !7)
!14741 = !DILocation(line: 7689, column: 58, scope: !14735)
!14742 = !DILocalVariable(name: "where", arg: 3, scope: !14735, file: !3, line: 7690, type: !2428)
!14743 = !DILocation(line: 7690, column: 18, scope: !14735)
!14744 = !DILocalVariable(name: "clauses", scope: !14735, file: !3, line: 7692, type: !2224)
!14745 = !DILocation(line: 7692, column: 8, scope: !14735)
!14746 = !DILocalVariable(name: "first", scope: !14735, file: !3, line: 7693, type: !2344)
!14747 = !DILocation(line: 7693, column: 8, scope: !14735)
!14748 = !DILocation(line: 7695, column: 3, scope: !14735)
!14749 = !DILocation(line: 7695, column: 38, scope: !14735)
!14750 = !DILocation(line: 7695, column: 10, scope: !14735)
!14751 = !DILocalVariable(name: "here", scope: !14752, file: !3, line: 7697, type: !2352)
!14752 = distinct !DILexicalBlock(scope: !14735, file: !3, line: 7696, column: 5)
!14753 = !DILocation(line: 7697, column: 18, scope: !14752)
!14754 = !DILocalVariable(name: "c_kind", scope: !14752, file: !3, line: 7698, type: !14755)
!14755 = !DIDerivedType(tag: DW_TAG_typedef, name: "pragma_omp_clause", file: !650, line: 74, baseType: !4231)
!14756 = !DILocation(line: 7698, column: 25, scope: !14752)
!14757 = !DILocalVariable(name: "c_name", scope: !14752, file: !3, line: 7699, type: !2428)
!14758 = !DILocation(line: 7699, column: 19, scope: !14752)
!14759 = !DILocalVariable(name: "prev", scope: !14752, file: !3, line: 7700, type: !2224)
!14760 = !DILocation(line: 7700, column: 12, scope: !14752)
!14761 = !DILocation(line: 7700, column: 19, scope: !14752)
!14762 = !DILocation(line: 7702, column: 12, scope: !14763)
!14763 = distinct !DILexicalBlock(scope: !14752, file: !3, line: 7702, column: 11)
!14764 = !DILocation(line: 7702, column: 18, scope: !14763)
!14765 = !DILocation(line: 7702, column: 45, scope: !14763)
!14766 = !DILocation(line: 7702, column: 21, scope: !14763)
!14767 = !DILocation(line: 7702, column: 11, scope: !14752)
!14768 = !DILocation(line: 7703, column: 26, scope: !14763)
!14769 = !DILocation(line: 7703, column: 2, scope: !14763)
!14770 = !DILocation(line: 7705, column: 13, scope: !14752)
!14771 = !DILocation(line: 7706, column: 35, scope: !14752)
!14772 = !DILocation(line: 7706, column: 14, scope: !14752)
!14773 = !DILocation(line: 7706, column: 44, scope: !14752)
!14774 = !DILocation(line: 7706, column: 12, scope: !14752)
!14775 = !DILocation(line: 7707, column: 42, scope: !14752)
!14776 = !DILocation(line: 7707, column: 16, scope: !14752)
!14777 = !DILocation(line: 7707, column: 14, scope: !14752)
!14778 = !DILocation(line: 7709, column: 15, scope: !14752)
!14779 = !DILocation(line: 7709, column: 7, scope: !14752)
!14780 = !DILocation(line: 7712, column: 44, scope: !14781)
!14781 = distinct !DILexicalBlock(scope: !14752, file: !3, line: 7710, column: 2)
!14782 = !DILocation(line: 7712, column: 52, scope: !14781)
!14783 = !DILocation(line: 7712, column: 14, scope: !14781)
!14784 = !DILocation(line: 7712, column: 12, scope: !14781)
!14785 = !DILocation(line: 7713, column: 11, scope: !14781)
!14786 = !DILocation(line: 7714, column: 4, scope: !14781)
!14787 = !DILocation(line: 7716, column: 42, scope: !14781)
!14788 = !DILocation(line: 7716, column: 50, scope: !14781)
!14789 = !DILocation(line: 7716, column: 14, scope: !14781)
!14790 = !DILocation(line: 7716, column: 12, scope: !14781)
!14791 = !DILocation(line: 7717, column: 11, scope: !14781)
!14792 = !DILocation(line: 7718, column: 4, scope: !14781)
!14793 = !DILocation(line: 7720, column: 47, scope: !14781)
!14794 = !DILocation(line: 7720, column: 55, scope: !14781)
!14795 = !DILocation(line: 7720, column: 14, scope: !14781)
!14796 = !DILocation(line: 7720, column: 12, scope: !14781)
!14797 = !DILocation(line: 7721, column: 11, scope: !14781)
!14798 = !DILocation(line: 7722, column: 4, scope: !14781)
!14799 = !DILocation(line: 7724, column: 43, scope: !14781)
!14800 = !DILocation(line: 7724, column: 51, scope: !14781)
!14801 = !DILocation(line: 7724, column: 14, scope: !14781)
!14802 = !DILocation(line: 7724, column: 12, scope: !14781)
!14803 = !DILocation(line: 7725, column: 11, scope: !14781)
!14804 = !DILocation(line: 7726, column: 4, scope: !14781)
!14805 = !DILocation(line: 7728, column: 48, scope: !14781)
!14806 = !DILocation(line: 7728, column: 56, scope: !14781)
!14807 = !DILocation(line: 7728, column: 14, scope: !14781)
!14808 = !DILocation(line: 7728, column: 12, scope: !14781)
!14809 = !DILocation(line: 7729, column: 11, scope: !14781)
!14810 = !DILocation(line: 7730, column: 4, scope: !14781)
!14811 = !DILocation(line: 7732, column: 38, scope: !14781)
!14812 = !DILocation(line: 7732, column: 46, scope: !14781)
!14813 = !DILocation(line: 7732, column: 14, scope: !14781)
!14814 = !DILocation(line: 7732, column: 12, scope: !14781)
!14815 = !DILocation(line: 7733, column: 11, scope: !14781)
!14816 = !DILocation(line: 7734, column: 4, scope: !14781)
!14817 = !DILocation(line: 7736, column: 47, scope: !14781)
!14818 = !DILocation(line: 7736, column: 55, scope: !14781)
!14819 = !DILocation(line: 7736, column: 14, scope: !14781)
!14820 = !DILocation(line: 7736, column: 12, scope: !14781)
!14821 = !DILocation(line: 7737, column: 11, scope: !14781)
!14822 = !DILocation(line: 7738, column: 4, scope: !14781)
!14823 = !DILocation(line: 7740, column: 42, scope: !14781)
!14824 = !DILocation(line: 7740, column: 50, scope: !14781)
!14825 = !DILocation(line: 7740, column: 14, scope: !14781)
!14826 = !DILocation(line: 7740, column: 12, scope: !14781)
!14827 = !DILocation(line: 7741, column: 11, scope: !14781)
!14828 = !DILocation(line: 7742, column: 4, scope: !14781)
!14829 = !DILocation(line: 7744, column: 47, scope: !14781)
!14830 = !DILocation(line: 7744, column: 55, scope: !14781)
!14831 = !DILocation(line: 7744, column: 14, scope: !14781)
!14832 = !DILocation(line: 7744, column: 12, scope: !14781)
!14833 = !DILocation(line: 7745, column: 11, scope: !14781)
!14834 = !DILocation(line: 7746, column: 4, scope: !14781)
!14835 = !DILocation(line: 7748, column: 43, scope: !14781)
!14836 = !DILocation(line: 7748, column: 51, scope: !14781)
!14837 = !DILocation(line: 7748, column: 14, scope: !14781)
!14838 = !DILocation(line: 7748, column: 12, scope: !14781)
!14839 = !DILocation(line: 7749, column: 11, scope: !14781)
!14840 = !DILocation(line: 7750, column: 4, scope: !14781)
!14841 = !DILocation(line: 7752, column: 43, scope: !14781)
!14842 = !DILocation(line: 7752, column: 51, scope: !14781)
!14843 = !DILocation(line: 7752, column: 14, scope: !14781)
!14844 = !DILocation(line: 7752, column: 12, scope: !14781)
!14845 = !DILocation(line: 7753, column: 11, scope: !14781)
!14846 = !DILocation(line: 7754, column: 4, scope: !14781)
!14847 = !DILocation(line: 7756, column: 45, scope: !14781)
!14848 = !DILocation(line: 7756, column: 53, scope: !14781)
!14849 = !DILocation(line: 7756, column: 14, scope: !14781)
!14850 = !DILocation(line: 7756, column: 12, scope: !14781)
!14851 = !DILocation(line: 7757, column: 11, scope: !14781)
!14852 = !DILocation(line: 7758, column: 4, scope: !14781)
!14853 = !DILocation(line: 7760, column: 44, scope: !14781)
!14854 = !DILocation(line: 7760, column: 52, scope: !14781)
!14855 = !DILocation(line: 7760, column: 14, scope: !14781)
!14856 = !DILocation(line: 7760, column: 12, scope: !14781)
!14857 = !DILocation(line: 7761, column: 11, scope: !14781)
!14858 = !DILocation(line: 7762, column: 4, scope: !14781)
!14859 = !DILocation(line: 7764, column: 42, scope: !14781)
!14860 = !DILocation(line: 7764, column: 50, scope: !14781)
!14861 = !DILocation(line: 7764, column: 14, scope: !14781)
!14862 = !DILocation(line: 7764, column: 12, scope: !14781)
!14863 = !DILocation(line: 7765, column: 11, scope: !14781)
!14864 = !DILocation(line: 7766, column: 4, scope: !14781)
!14865 = !DILocation(line: 7768, column: 42, scope: !14781)
!14866 = !DILocation(line: 7768, column: 50, scope: !14781)
!14867 = !DILocation(line: 7768, column: 14, scope: !14781)
!14868 = !DILocation(line: 7768, column: 12, scope: !14781)
!14869 = !DILocation(line: 7769, column: 11, scope: !14781)
!14870 = !DILocation(line: 7770, column: 4, scope: !14781)
!14871 = !DILocation(line: 7772, column: 20, scope: !14781)
!14872 = !DILocation(line: 7772, column: 4, scope: !14781)
!14873 = !DILocation(line: 7773, column: 4, scope: !14781)
!14874 = !DILocation(line: 7776, column: 13, scope: !14875)
!14875 = distinct !DILexicalBlock(scope: !14752, file: !3, line: 7776, column: 11)
!14876 = !DILocation(line: 7776, column: 21, scope: !14875)
!14877 = !DILocation(line: 7776, column: 18, scope: !14875)
!14878 = !DILocation(line: 7776, column: 29, scope: !14875)
!14879 = !DILocation(line: 7776, column: 34, scope: !14875)
!14880 = !DILocation(line: 7776, column: 39, scope: !14875)
!14881 = !DILocation(line: 7776, column: 43, scope: !14875)
!14882 = !DILocation(line: 7776, column: 51, scope: !14875)
!14883 = !DILocation(line: 7776, column: 11, scope: !14752)
!14884 = !DILocation(line: 7780, column: 14, scope: !14885)
!14885 = distinct !DILexicalBlock(scope: !14875, file: !3, line: 7777, column: 2)
!14886 = !DILocation(line: 7780, column: 12, scope: !14885)
!14887 = !DILocation(line: 7781, column: 14, scope: !14885)
!14888 = !DILocation(line: 7781, column: 48, scope: !14885)
!14889 = !DILocation(line: 7781, column: 56, scope: !14885)
!14890 = !DILocation(line: 7781, column: 4, scope: !14885)
!14891 = !DILocation(line: 7782, column: 2, scope: !14885)
!14892 = distinct !{!14892, !14748, !14893}
!14893 = !DILocation(line: 7783, column: 5, scope: !14735)
!14894 = !DILabel(scope: !14735, name: "saw_error", file: !3, line: 7785)
!14895 = !DILocation(line: 7785, column: 2, scope: !14735)
!14896 = !DILocation(line: 7786, column: 32, scope: !14735)
!14897 = !DILocation(line: 7786, column: 3, scope: !14735)
!14898 = !DILocation(line: 7788, column: 32, scope: !14735)
!14899 = !DILocation(line: 7788, column: 10, scope: !14735)
!14900 = !DILocation(line: 7788, column: 3, scope: !14735)
!14901 = distinct !DISubprogram(name: "c_parser_omp_for_loop", scope: !3, file: !3, line: 7977, type: !14902, scopeLine: 7979, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!14902 = !DISubroutineType(types: !14903)
!14903 = !{!2224, !2352, !3401, !2224, !3129}
!14904 = !DILocalVariable(name: "loc", arg: 1, scope: !14901, file: !3, line: 7977, type: !2352)
!14905 = !DILocation(line: 7977, column: 35, scope: !14901)
!14906 = !DILocalVariable(name: "parser", arg: 2, scope: !14901, file: !3, line: 7978, type: !3401)
!14907 = !DILocation(line: 7978, column: 20, scope: !14901)
!14908 = !DILocalVariable(name: "clauses", arg: 3, scope: !14901, file: !3, line: 7978, type: !2224)
!14909 = !DILocation(line: 7978, column: 33, scope: !14901)
!14910 = !DILocalVariable(name: "par_clauses", arg: 4, scope: !14901, file: !3, line: 7978, type: !3129)
!14911 = !DILocation(line: 7978, column: 48, scope: !14901)
!14912 = !DILocalVariable(name: "decl", scope: !14901, file: !3, line: 7980, type: !2224)
!14913 = !DILocation(line: 7980, column: 8, scope: !14901)
!14914 = !DILocalVariable(name: "cond", scope: !14901, file: !3, line: 7980, type: !2224)
!14915 = !DILocation(line: 7980, column: 14, scope: !14901)
!14916 = !DILocalVariable(name: "incr", scope: !14901, file: !3, line: 7980, type: !2224)
!14917 = !DILocation(line: 7980, column: 20, scope: !14901)
!14918 = !DILocalVariable(name: "save_break", scope: !14901, file: !3, line: 7980, type: !2224)
!14919 = !DILocation(line: 7980, column: 26, scope: !14901)
!14920 = !DILocalVariable(name: "save_cont", scope: !14901, file: !3, line: 7980, type: !2224)
!14921 = !DILocation(line: 7980, column: 38, scope: !14901)
!14922 = !DILocalVariable(name: "body", scope: !14901, file: !3, line: 7980, type: !2224)
!14923 = !DILocation(line: 7980, column: 49, scope: !14901)
!14924 = !DILocalVariable(name: "init", scope: !14901, file: !3, line: 7980, type: !2224)
!14925 = !DILocation(line: 7980, column: 55, scope: !14901)
!14926 = !DILocalVariable(name: "stmt", scope: !14901, file: !3, line: 7980, type: !2224)
!14927 = !DILocation(line: 7980, column: 61, scope: !14901)
!14928 = !DILocalVariable(name: "cl", scope: !14901, file: !3, line: 7980, type: !2224)
!14929 = !DILocation(line: 7980, column: 67, scope: !14901)
!14930 = !DILocalVariable(name: "declv", scope: !14901, file: !3, line: 7981, type: !2224)
!14931 = !DILocation(line: 7981, column: 8, scope: !14901)
!14932 = !DILocalVariable(name: "condv", scope: !14901, file: !3, line: 7981, type: !2224)
!14933 = !DILocation(line: 7981, column: 15, scope: !14901)
!14934 = !DILocalVariable(name: "incrv", scope: !14901, file: !3, line: 7981, type: !2224)
!14935 = !DILocation(line: 7981, column: 22, scope: !14901)
!14936 = !DILocalVariable(name: "initv", scope: !14901, file: !3, line: 7981, type: !2224)
!14937 = !DILocation(line: 7981, column: 29, scope: !14901)
!14938 = !DILocalVariable(name: "for_block", scope: !14901, file: !3, line: 7981, type: !2224)
!14939 = !DILocation(line: 7981, column: 36, scope: !14901)
!14940 = !DILocalVariable(name: "ret", scope: !14901, file: !3, line: 7981, type: !2224)
!14941 = !DILocation(line: 7981, column: 54, scope: !14901)
!14942 = !DILocalVariable(name: "fail", scope: !14901, file: !3, line: 7982, type: !2344)
!14943 = !DILocation(line: 7982, column: 8, scope: !14901)
!14944 = !DILocalVariable(name: "open_brace_parsed", scope: !14901, file: !3, line: 7982, type: !2344)
!14945 = !DILocation(line: 7982, column: 22, scope: !14901)
!14946 = !DILocalVariable(name: "i", scope: !14901, file: !3, line: 7983, type: !2321)
!14947 = !DILocation(line: 7983, column: 7, scope: !14901)
!14948 = !DILocalVariable(name: "collapse", scope: !14901, file: !3, line: 7983, type: !2321)
!14949 = !DILocation(line: 7983, column: 10, scope: !14901)
!14950 = !DILocalVariable(name: "nbraces", scope: !14901, file: !3, line: 7983, type: !2321)
!14951 = !DILocation(line: 7983, column: 24, scope: !14901)
!14952 = !DILocalVariable(name: "for_loc", scope: !14901, file: !3, line: 7984, type: !2352)
!14953 = !DILocation(line: 7984, column: 14, scope: !14901)
!14954 = !DILocation(line: 7986, column: 13, scope: !14955)
!14955 = distinct !DILexicalBlock(scope: !14901, file: !3, line: 7986, column: 3)
!14956 = !DILocation(line: 7986, column: 11, scope: !14955)
!14957 = !DILocation(line: 7986, column: 8, scope: !14955)
!14958 = !DILocation(line: 7986, column: 22, scope: !14959)
!14959 = distinct !DILexicalBlock(scope: !14955, file: !3, line: 7986, column: 3)
!14960 = !DILocation(line: 7986, column: 3, scope: !14955)
!14961 = !DILocation(line: 7987, column: 9, scope: !14962)
!14962 = distinct !DILexicalBlock(scope: !14959, file: !3, line: 7987, column: 9)
!14963 = !DILocation(line: 7987, column: 30, scope: !14962)
!14964 = !DILocation(line: 7987, column: 9, scope: !14959)
!14965 = !DILocation(line: 7988, column: 32, scope: !14962)
!14966 = !DILocation(line: 7988, column: 18, scope: !14962)
!14967 = !DILocation(line: 7988, column: 16, scope: !14962)
!14968 = !DILocation(line: 7988, column: 7, scope: !14962)
!14969 = !DILocation(line: 7987, column: 33, scope: !14962)
!14970 = !DILocation(line: 7986, column: 31, scope: !14959)
!14971 = !DILocation(line: 7986, column: 29, scope: !14959)
!14972 = !DILocation(line: 7986, column: 3, scope: !14959)
!14973 = distinct !{!14973, !14960, !14974}
!14974 = !DILocation(line: 7988, column: 64, scope: !14955)
!14975 = !DILocation(line: 7990, column: 3, scope: !14901)
!14976 = !DILocation(line: 7992, column: 11, scope: !14901)
!14977 = !DILocation(line: 7992, column: 9, scope: !14901)
!14978 = !DILocation(line: 7993, column: 11, scope: !14901)
!14979 = !DILocation(line: 7993, column: 9, scope: !14901)
!14980 = !DILocation(line: 7994, column: 11, scope: !14901)
!14981 = !DILocation(line: 7994, column: 9, scope: !14901)
!14982 = !DILocation(line: 7995, column: 11, scope: !14901)
!14983 = !DILocation(line: 7995, column: 9, scope: !14901)
!14984 = !DILocation(line: 7997, column: 40, scope: !14985)
!14985 = distinct !DILexicalBlock(scope: !14901, file: !3, line: 7997, column: 7)
!14986 = !DILocation(line: 7997, column: 8, scope: !14985)
!14987 = !DILocation(line: 7997, column: 7, scope: !14901)
!14988 = !DILocation(line: 7999, column: 23, scope: !14989)
!14989 = distinct !DILexicalBlock(scope: !14985, file: !3, line: 7998, column: 5)
!14990 = !DILocation(line: 7999, column: 7, scope: !14989)
!14991 = !DILocation(line: 8000, column: 7, scope: !14989)
!14992 = !DILocation(line: 8002, column: 34, scope: !14901)
!14993 = !DILocation(line: 8002, column: 13, scope: !14901)
!14994 = !DILocation(line: 8002, column: 43, scope: !14901)
!14995 = !DILocation(line: 8002, column: 11, scope: !14901)
!14996 = !DILocation(line: 8003, column: 27, scope: !14901)
!14997 = !DILocation(line: 8003, column: 3, scope: !14901)
!14998 = !DILocation(line: 8005, column: 10, scope: !14999)
!14999 = distinct !DILexicalBlock(scope: !14901, file: !3, line: 8005, column: 3)
!15000 = !DILocation(line: 8005, column: 8, scope: !14999)
!15001 = !DILocation(line: 8005, column: 15, scope: !15002)
!15002 = distinct !DILexicalBlock(scope: !14999, file: !3, line: 8005, column: 3)
!15003 = !DILocation(line: 8005, column: 19, scope: !15002)
!15004 = !DILocation(line: 8005, column: 17, scope: !15002)
!15005 = !DILocation(line: 8005, column: 3, scope: !14999)
!15006 = !DILocalVariable(name: "bracecount", scope: !15007, file: !3, line: 8007, type: !2321)
!15007 = distinct !DILexicalBlock(scope: !15002, file: !3, line: 8006, column: 5)
!15008 = !DILocation(line: 8007, column: 11, scope: !15007)
!15009 = !DILocation(line: 8009, column: 30, scope: !15010)
!15010 = distinct !DILexicalBlock(scope: !15007, file: !3, line: 8009, column: 11)
!15011 = !DILocation(line: 8009, column: 12, scope: !15010)
!15012 = !DILocation(line: 8009, column: 11, scope: !15007)
!15013 = !DILocation(line: 8010, column: 2, scope: !15010)
!15014 = !DILocation(line: 8013, column: 49, scope: !15015)
!15015 = distinct !DILexicalBlock(scope: !15007, file: !3, line: 8013, column: 11)
!15016 = !DILocation(line: 8013, column: 11, scope: !15015)
!15017 = !DILocation(line: 8013, column: 11, scope: !15007)
!15018 = !DILocation(line: 8015, column: 8, scope: !15019)
!15019 = distinct !DILexicalBlock(scope: !15020, file: !3, line: 8015, column: 8)
!15020 = distinct !DILexicalBlock(scope: !15015, file: !3, line: 8014, column: 2)
!15021 = !DILocation(line: 8015, column: 10, scope: !15019)
!15022 = !DILocation(line: 8015, column: 8, scope: !15020)
!15023 = !DILocation(line: 8017, column: 10, scope: !15019)
!15024 = !DILocation(line: 8017, column: 8, scope: !15019)
!15025 = !DILocation(line: 8016, column: 6, scope: !15019)
!15026 = !DILocation(line: 8018, column: 35, scope: !15020)
!15027 = !DILocation(line: 8018, column: 4, scope: !15020)
!15028 = !DILocation(line: 8019, column: 33, scope: !15020)
!15029 = !DILocation(line: 8019, column: 11, scope: !15020)
!15030 = !DILocation(line: 8019, column: 9, scope: !15020)
!15031 = !DILocation(line: 8020, column: 8, scope: !15032)
!15032 = distinct !DILexicalBlock(scope: !15020, file: !3, line: 8020, column: 8)
!15033 = !DILocation(line: 8020, column: 13, scope: !15032)
!15034 = !DILocation(line: 8020, column: 8, scope: !15020)
!15035 = !DILocation(line: 8021, column: 6, scope: !15032)
!15036 = !DILocation(line: 8022, column: 8, scope: !15037)
!15037 = distinct !DILexicalBlock(scope: !15020, file: !3, line: 8022, column: 8)
!15038 = !DILocation(line: 8022, column: 31, scope: !15037)
!15039 = !DILocation(line: 8022, column: 28, scope: !15037)
!15040 = !DILocation(line: 8022, column: 8, scope: !15020)
!15041 = !DILocation(line: 8023, column: 13, scope: !15037)
!15042 = !DILocation(line: 8023, column: 11, scope: !15037)
!15043 = !DILocation(line: 8023, column: 6, scope: !15037)
!15044 = !DILocation(line: 8024, column: 11, scope: !15020)
!15045 = !DILocation(line: 8024, column: 9, scope: !15020)
!15046 = !DILocation(line: 8025, column: 2, scope: !15020)
!15047 = !DILocation(line: 8026, column: 40, scope: !15048)
!15048 = distinct !DILexicalBlock(scope: !15015, file: !3, line: 8026, column: 16)
!15049 = !DILocation(line: 8026, column: 16, scope: !15048)
!15050 = !DILocation(line: 8027, column: 9, scope: !15048)
!15051 = !DILocation(line: 8027, column: 37, scope: !15048)
!15052 = !DILocation(line: 8027, column: 12, scope: !15048)
!15053 = !DILocation(line: 8027, column: 46, scope: !15048)
!15054 = !DILocation(line: 8027, column: 51, scope: !15048)
!15055 = !DILocation(line: 8026, column: 16, scope: !15015)
!15056 = !DILocalVariable(name: "decl_exp", scope: !15057, file: !3, line: 8029, type: !2221)
!15057 = distinct !DILexicalBlock(scope: !15048, file: !3, line: 8028, column: 2)
!15058 = !DILocation(line: 8029, column: 18, scope: !15057)
!15059 = !DILocalVariable(name: "init_exp", scope: !15057, file: !3, line: 8030, type: !2221)
!15060 = !DILocation(line: 8030, column: 18, scope: !15057)
!15061 = !DILocalVariable(name: "init_loc", scope: !15057, file: !3, line: 8031, type: !2352)
!15062 = !DILocation(line: 8031, column: 15, scope: !15057)
!15063 = !DILocation(line: 8033, column: 44, scope: !15057)
!15064 = !DILocation(line: 8033, column: 15, scope: !15057)
!15065 = !DILocation(line: 8034, column: 20, scope: !15057)
!15066 = !DILocation(line: 8034, column: 9, scope: !15057)
!15067 = !DILocation(line: 8036, column: 22, scope: !15057)
!15068 = !DILocation(line: 8036, column: 4, scope: !15057)
!15069 = !DILocation(line: 8038, column: 36, scope: !15057)
!15070 = !DILocation(line: 8038, column: 15, scope: !15057)
!15071 = !DILocation(line: 8038, column: 45, scope: !15057)
!15072 = !DILocation(line: 8038, column: 13, scope: !15057)
!15073 = !DILocation(line: 8039, column: 40, scope: !15057)
!15074 = !DILocation(line: 8039, column: 15, scope: !15057)
!15075 = !DILocation(line: 8040, column: 50, scope: !15057)
!15076 = !DILocation(line: 8040, column: 15, scope: !15057)
!15077 = !DILocation(line: 8041, column: 30, scope: !15057)
!15078 = !DILocation(line: 8041, column: 40, scope: !15057)
!15079 = !DILocation(line: 8041, column: 55, scope: !15057)
!15080 = !DILocation(line: 8042, column: 19, scope: !15057)
!15081 = !DILocation(line: 8042, column: 38, scope: !15057)
!15082 = !DILocation(line: 8043, column: 18, scope: !15057)
!15083 = !DILocation(line: 8041, column: 11, scope: !15057)
!15084 = !DILocation(line: 8041, column: 9, scope: !15057)
!15085 = !DILocation(line: 8044, column: 32, scope: !15057)
!15086 = !DILocation(line: 8044, column: 42, scope: !15057)
!15087 = !DILocation(line: 8044, column: 11, scope: !15057)
!15088 = !DILocation(line: 8044, column: 9, scope: !15057)
!15089 = !DILocation(line: 8046, column: 31, scope: !15057)
!15090 = !DILocation(line: 8046, column: 4, scope: !15057)
!15091 = !DILocation(line: 8047, column: 2, scope: !15057)
!15092 = !DILocation(line: 8049, column: 2, scope: !15048)
!15093 = !DILabel(scope: !15094, name: "error_init", file: !3, line: 8050)
!15094 = distinct !DILexicalBlock(scope: !15048, file: !3, line: 8049, column: 2)
!15095 = !DILocation(line: 8050, column: 2, scope: !15094)
!15096 = !DILocation(line: 8051, column: 20, scope: !15094)
!15097 = !DILocation(line: 8051, column: 4, scope: !15094)
!15098 = !DILocation(line: 8053, column: 31, scope: !15094)
!15099 = !DILocation(line: 8053, column: 4, scope: !15094)
!15100 = !DILocation(line: 8055, column: 9, scope: !15094)
!15101 = !DILocation(line: 8056, column: 4, scope: !15094)
!15102 = !DILocation(line: 8060, column: 12, scope: !15007)
!15103 = !DILocation(line: 8061, column: 39, scope: !15104)
!15104 = distinct !DILexicalBlock(scope: !15007, file: !3, line: 8061, column: 11)
!15105 = !DILocation(line: 8061, column: 11, scope: !15104)
!15106 = !DILocation(line: 8061, column: 11, scope: !15007)
!15107 = !DILocalVariable(name: "cond_loc", scope: !15108, file: !3, line: 8063, type: !2352)
!15108 = distinct !DILexicalBlock(scope: !15104, file: !3, line: 8062, column: 2)
!15109 = !DILocation(line: 8063, column: 15, scope: !15108)
!15110 = !DILocation(line: 8063, column: 47, scope: !15108)
!15111 = !DILocation(line: 8063, column: 26, scope: !15108)
!15112 = !DILocation(line: 8063, column: 56, scope: !15108)
!15113 = !DILocalVariable(name: "cond_expr", scope: !15108, file: !3, line: 8064, type: !2221)
!15114 = !DILocation(line: 8064, column: 18, scope: !15108)
!15115 = !DILocation(line: 8064, column: 58, scope: !15108)
!15116 = !DILocation(line: 8064, column: 30, scope: !15108)
!15117 = !DILocation(line: 8066, column: 21, scope: !15108)
!15118 = !DILocation(line: 8066, column: 9, scope: !15108)
!15119 = !DILocation(line: 8067, column: 48, scope: !15108)
!15120 = !DILocation(line: 8067, column: 58, scope: !15108)
!15121 = !DILocation(line: 8067, column: 11, scope: !15108)
!15122 = !DILocation(line: 8067, column: 9, scope: !15108)
!15123 = !DILocation(line: 8068, column: 25, scope: !15108)
!15124 = !DILocation(line: 8068, column: 11, scope: !15108)
!15125 = !DILocation(line: 8068, column: 9, scope: !15108)
!15126 = !DILocation(line: 8069, column: 22, scope: !15108)
!15127 = !DILocation(line: 8069, column: 4, scope: !15108)
!15128 = !DILocation(line: 8075, column: 8, scope: !15129)
!15129 = distinct !DILexicalBlock(scope: !15108, file: !3, line: 8070, column: 6)
!15130 = !DILocation(line: 8079, column: 15, scope: !15129)
!15131 = !DILocation(line: 8079, column: 13, scope: !15129)
!15132 = !DILocation(line: 8080, column: 8, scope: !15129)
!15133 = !DILocation(line: 8082, column: 33, scope: !15108)
!15134 = !DILocation(line: 8082, column: 39, scope: !15108)
!15135 = !DILocation(line: 8082, column: 4, scope: !15108)
!15136 = !DILocation(line: 8083, column: 2, scope: !15108)
!15137 = !DILocation(line: 8084, column: 34, scope: !15007)
!15138 = !DILocation(line: 8084, column: 7, scope: !15007)
!15139 = !DILocation(line: 8087, column: 12, scope: !15007)
!15140 = !DILocation(line: 8088, column: 39, scope: !15141)
!15141 = distinct !DILexicalBlock(scope: !15007, file: !3, line: 8088, column: 11)
!15142 = !DILocation(line: 8088, column: 11, scope: !15141)
!15143 = !DILocation(line: 8088, column: 11, scope: !15007)
!15144 = !DILocalVariable(name: "incr_loc", scope: !15145, file: !3, line: 8090, type: !2352)
!15145 = distinct !DILexicalBlock(scope: !15141, file: !3, line: 8089, column: 2)
!15146 = !DILocation(line: 8090, column: 15, scope: !15145)
!15147 = !DILocation(line: 8090, column: 47, scope: !15145)
!15148 = !DILocation(line: 8090, column: 26, scope: !15145)
!15149 = !DILocation(line: 8090, column: 56, scope: !15145)
!15150 = !DILocation(line: 8092, column: 32, scope: !15145)
!15151 = !DILocation(line: 8093, column: 32, scope: !15145)
!15152 = !DILocation(line: 8093, column: 11, scope: !15145)
!15153 = !DILocation(line: 8093, column: 40, scope: !15145)
!15154 = !DILocation(line: 8092, column: 11, scope: !15145)
!15155 = !DILocation(line: 8092, column: 9, scope: !15145)
!15156 = !DILocation(line: 8094, column: 2, scope: !15145)
!15157 = !DILocation(line: 8095, column: 34, scope: !15007)
!15158 = !DILocation(line: 8095, column: 7, scope: !15007)
!15159 = !DILocation(line: 8097, column: 11, scope: !15160)
!15160 = distinct !DILexicalBlock(scope: !15007, file: !3, line: 8097, column: 11)
!15161 = !DILocation(line: 8097, column: 16, scope: !15160)
!15162 = !DILocation(line: 8097, column: 24, scope: !15160)
!15163 = !DILocation(line: 8097, column: 27, scope: !15160)
!15164 = !DILocation(line: 8097, column: 35, scope: !15160)
!15165 = !DILocation(line: 8097, column: 32, scope: !15160)
!15166 = !DILocation(line: 8097, column: 51, scope: !15160)
!15167 = !DILocation(line: 8097, column: 54, scope: !15160)
!15168 = !DILocation(line: 8097, column: 62, scope: !15160)
!15169 = !DILocation(line: 8097, column: 59, scope: !15160)
!15170 = !DILocation(line: 8097, column: 11, scope: !15007)
!15171 = !DILocation(line: 8098, column: 7, scope: !15160)
!15172 = !DILocation(line: 8098, column: 2, scope: !15160)
!15173 = !DILocation(line: 8101, column: 30, scope: !15174)
!15174 = distinct !DILexicalBlock(scope: !15160, file: !3, line: 8100, column: 2)
!15175 = !DILocation(line: 8101, column: 4, scope: !15174)
!15176 = !DILocation(line: 8101, column: 28, scope: !15174)
!15177 = !DILocation(line: 8102, column: 30, scope: !15174)
!15178 = !DILocation(line: 8102, column: 4, scope: !15174)
!15179 = !DILocation(line: 8102, column: 28, scope: !15174)
!15180 = !DILocation(line: 8103, column: 30, scope: !15174)
!15181 = !DILocation(line: 8103, column: 4, scope: !15174)
!15182 = !DILocation(line: 8103, column: 28, scope: !15174)
!15183 = !DILocation(line: 8104, column: 30, scope: !15174)
!15184 = !DILocation(line: 8104, column: 4, scope: !15174)
!15185 = !DILocation(line: 8104, column: 28, scope: !15174)
!15186 = !DILabel(scope: !15007, name: "parse_next", file: !3, line: 8107)
!15187 = !DILocation(line: 8107, column: 5, scope: !15007)
!15188 = !DILocation(line: 8108, column: 11, scope: !15189)
!15189 = distinct !DILexicalBlock(scope: !15007, file: !3, line: 8108, column: 11)
!15190 = !DILocation(line: 8108, column: 16, scope: !15189)
!15191 = !DILocation(line: 8108, column: 25, scope: !15189)
!15192 = !DILocation(line: 8108, column: 13, scope: !15189)
!15193 = !DILocation(line: 8108, column: 11, scope: !15007)
!15194 = !DILocation(line: 8109, column: 2, scope: !15189)
!15195 = !DILocation(line: 8115, column: 7, scope: !15007)
!15196 = !DILocation(line: 8117, column: 40, scope: !15197)
!15197 = distinct !DILexicalBlock(scope: !15198, file: !3, line: 8117, column: 8)
!15198 = distinct !DILexicalBlock(scope: !15007, file: !3, line: 8116, column: 2)
!15199 = !DILocation(line: 8117, column: 8, scope: !15197)
!15200 = !DILocation(line: 8117, column: 8, scope: !15198)
!15201 = !DILocation(line: 8119, column: 32, scope: !15202)
!15202 = distinct !DILexicalBlock(scope: !15197, file: !3, line: 8118, column: 6)
!15203 = !DILocation(line: 8119, column: 8, scope: !15202)
!15204 = !DILocation(line: 8120, column: 8, scope: !15202)
!15205 = !DILocation(line: 8122, column: 37, scope: !15206)
!15206 = distinct !DILexicalBlock(scope: !15197, file: !3, line: 8122, column: 13)
!15207 = !DILocation(line: 8122, column: 13, scope: !15206)
!15208 = !DILocation(line: 8122, column: 13, scope: !15197)
!15209 = !DILocation(line: 8124, column: 32, scope: !15210)
!15210 = distinct !DILexicalBlock(scope: !15206, file: !3, line: 8123, column: 6)
!15211 = !DILocation(line: 8124, column: 8, scope: !15210)
!15212 = !DILocation(line: 8125, column: 18, scope: !15210)
!15213 = !DILocation(line: 8126, column: 6, scope: !15210)
!15214 = !DILocation(line: 8127, column: 13, scope: !15215)
!15215 = distinct !DILexicalBlock(scope: !15206, file: !3, line: 8127, column: 13)
!15216 = !DILocation(line: 8128, column: 6, scope: !15215)
!15217 = !DILocation(line: 8128, column: 33, scope: !15215)
!15218 = !DILocation(line: 8128, column: 9, scope: !15215)
!15219 = !DILocation(line: 8127, column: 13, scope: !15206)
!15220 = !DILocation(line: 8129, column: 30, scope: !15215)
!15221 = !DILocation(line: 8129, column: 6, scope: !15215)
!15222 = !DILocation(line: 8132, column: 24, scope: !15223)
!15223 = distinct !DILexicalBlock(scope: !15215, file: !3, line: 8131, column: 6)
!15224 = !DILocation(line: 8132, column: 8, scope: !15223)
!15225 = !DILocation(line: 8133, column: 12, scope: !15226)
!15226 = distinct !DILexicalBlock(scope: !15223, file: !3, line: 8133, column: 12)
!15227 = !DILocation(line: 8133, column: 12, scope: !15223)
!15228 = !DILocation(line: 8135, column: 23, scope: !15229)
!15229 = distinct !DILexicalBlock(scope: !15226, file: !3, line: 8134, column: 3)
!15230 = !DILocation(line: 8136, column: 15, scope: !15229)
!15231 = !DILocation(line: 8137, column: 3, scope: !15229)
!15232 = !DILocation(line: 8138, column: 13, scope: !15223)
!15233 = !DILocation(line: 8139, column: 17, scope: !15223)
!15234 = !DILocation(line: 8140, column: 8, scope: !15223)
!15235 = !DILocation(line: 8142, column: 2, scope: !15198)
!15236 = distinct !{!15236, !15195, !15237}
!15237 = !DILocation(line: 8143, column: 15, scope: !15007)
!15238 = !DILocation(line: 8145, column: 18, scope: !15007)
!15239 = !DILocation(line: 8145, column: 15, scope: !15007)
!15240 = !DILocation(line: 8146, column: 5, scope: !15007)
!15241 = !DILocation(line: 8005, column: 30, scope: !15002)
!15242 = !DILocation(line: 8005, column: 3, scope: !15002)
!15243 = distinct !{!15243, !15005, !15244}
!15244 = !DILocation(line: 8146, column: 5, scope: !14999)
!15245 = !DILocation(line: 8148, column: 16, scope: !14901)
!15246 = !DILocation(line: 8148, column: 14, scope: !14901)
!15247 = !DILocation(line: 8149, column: 19, scope: !14901)
!15248 = !DILocation(line: 8149, column: 17, scope: !14901)
!15249 = !DILocation(line: 8150, column: 15, scope: !14901)
!15250 = !DILocation(line: 8150, column: 13, scope: !14901)
!15251 = !DILocation(line: 8151, column: 16, scope: !14901)
!15252 = !DILocation(line: 8152, column: 10, scope: !14901)
!15253 = !DILocation(line: 8152, column: 8, scope: !14901)
!15254 = !DILocation(line: 8154, column: 7, scope: !15255)
!15255 = distinct !DILexicalBlock(scope: !14901, file: !3, line: 8154, column: 7)
!15256 = !DILocation(line: 8154, column: 7, scope: !14901)
!15257 = !DILocalVariable(name: "here", scope: !15258, file: !3, line: 8156, type: !2352)
!15258 = distinct !DILexicalBlock(scope: !15255, file: !3, line: 8155, column: 5)
!15259 = !DILocation(line: 8156, column: 18, scope: !15258)
!15260 = !DILocation(line: 8156, column: 46, scope: !15258)
!15261 = !DILocation(line: 8156, column: 25, scope: !15258)
!15262 = !DILocation(line: 8156, column: 55, scope: !15258)
!15263 = !DILocation(line: 8157, column: 14, scope: !15258)
!15264 = !DILocation(line: 8157, column: 12, scope: !15258)
!15265 = !DILocation(line: 8158, column: 44, scope: !15258)
!15266 = !DILocation(line: 8158, column: 7, scope: !15258)
!15267 = !DILocation(line: 8159, column: 38, scope: !15258)
!15268 = !DILocation(line: 8159, column: 44, scope: !15258)
!15269 = !DILocation(line: 8159, column: 17, scope: !15258)
!15270 = !DILocation(line: 8159, column: 7, scope: !15258)
!15271 = !DILocation(line: 8160, column: 5, scope: !15258)
!15272 = !DILocation(line: 8162, column: 45, scope: !15255)
!15273 = !DILocation(line: 8162, column: 15, scope: !15255)
!15274 = !DILocation(line: 8162, column: 5, scope: !15255)
!15275 = !DILocation(line: 8163, column: 7, scope: !15276)
!15276 = distinct !DILexicalBlock(scope: !14901, file: !3, line: 8163, column: 7)
!15277 = !DILocation(line: 8163, column: 7, scope: !14901)
!15278 = !DILocalVariable(name: "t", scope: !15279, file: !3, line: 8165, type: !2224)
!15279 = distinct !DILexicalBlock(scope: !15276, file: !3, line: 8164, column: 5)
!15280 = !DILocation(line: 8165, column: 12, scope: !15279)
!15281 = !DILocation(line: 8165, column: 16, scope: !15279)
!15282 = !DILocation(line: 8166, column: 7, scope: !15279)
!15283 = !DILocation(line: 8167, column: 17, scope: !15279)
!15284 = !DILocation(line: 8167, column: 7, scope: !15279)
!15285 = !DILocation(line: 8168, column: 5, scope: !15279)
!15286 = !DILocation(line: 8170, column: 25, scope: !14901)
!15287 = !DILocation(line: 8170, column: 10, scope: !14901)
!15288 = !DILocation(line: 8170, column: 8, scope: !14901)
!15289 = !DILocation(line: 8171, column: 19, scope: !14901)
!15290 = !DILocation(line: 8171, column: 17, scope: !14901)
!15291 = !DILocation(line: 8172, column: 18, scope: !14901)
!15292 = !DILocation(line: 8172, column: 16, scope: !14901)
!15293 = !DILocation(line: 8174, column: 3, scope: !14901)
!15294 = !DILocation(line: 8174, column: 10, scope: !14901)
!15295 = !DILocation(line: 8176, column: 35, scope: !15296)
!15296 = distinct !DILexicalBlock(scope: !15297, file: !3, line: 8176, column: 11)
!15297 = distinct !DILexicalBlock(scope: !14901, file: !3, line: 8175, column: 5)
!15298 = !DILocation(line: 8176, column: 11, scope: !15296)
!15299 = !DILocation(line: 8176, column: 11, scope: !15297)
!15300 = !DILocation(line: 8178, column: 28, scope: !15301)
!15301 = distinct !DILexicalBlock(scope: !15296, file: !3, line: 8177, column: 2)
!15302 = !DILocation(line: 8178, column: 4, scope: !15301)
!15303 = !DILocation(line: 8179, column: 11, scope: !15301)
!15304 = !DILocation(line: 8180, column: 2, scope: !15301)
!15305 = !DILocation(line: 8181, column: 40, scope: !15306)
!15306 = distinct !DILexicalBlock(scope: !15296, file: !3, line: 8181, column: 16)
!15307 = !DILocation(line: 8181, column: 16, scope: !15306)
!15308 = !DILocation(line: 8181, column: 16, scope: !15296)
!15309 = !DILocation(line: 8182, column: 26, scope: !15306)
!15310 = !DILocation(line: 8182, column: 2, scope: !15306)
!15311 = !DILocation(line: 8185, column: 20, scope: !15312)
!15312 = distinct !DILexicalBlock(scope: !15306, file: !3, line: 8184, column: 2)
!15313 = !DILocation(line: 8185, column: 4, scope: !15312)
!15314 = !DILocation(line: 8186, column: 4, scope: !15312)
!15315 = !DILocation(line: 8186, column: 11, scope: !15312)
!15316 = !DILocalVariable(name: "here", scope: !15317, file: !3, line: 8188, type: !2352)
!15317 = distinct !DILexicalBlock(scope: !15312, file: !3, line: 8187, column: 6)
!15318 = !DILocation(line: 8188, column: 19, scope: !15317)
!15319 = !DILocation(line: 8188, column: 47, scope: !15317)
!15320 = !DILocation(line: 8188, column: 26, scope: !15317)
!15321 = !DILocation(line: 8188, column: 56, scope: !15317)
!15322 = !DILocation(line: 8189, column: 15, scope: !15317)
!15323 = !DILocation(line: 8189, column: 13, scope: !15317)
!15324 = !DILocation(line: 8190, column: 18, scope: !15317)
!15325 = !DILocation(line: 8190, column: 8, scope: !15317)
!15326 = !DILocation(line: 8191, column: 45, scope: !15317)
!15327 = !DILocation(line: 8191, column: 8, scope: !15317)
!15328 = !DILocation(line: 8192, column: 36, scope: !15317)
!15329 = !DILocation(line: 8192, column: 42, scope: !15317)
!15330 = !DILocation(line: 8192, column: 15, scope: !15317)
!15331 = !DILocation(line: 8192, column: 13, scope: !15317)
!15332 = !DILocation(line: 8193, column: 15, scope: !15317)
!15333 = distinct !{!15333, !15314, !15334}
!15334 = !DILocation(line: 8194, column: 6, scope: !15312)
!15335 = !DILocation(line: 8195, column: 4, scope: !15312)
!15336 = distinct !{!15336, !15293, !15337}
!15337 = !DILocation(line: 8197, column: 5, scope: !14901)
!15338 = !DILocation(line: 8201, column: 8, scope: !15339)
!15339 = distinct !DILexicalBlock(scope: !14901, file: !3, line: 8201, column: 7)
!15340 = !DILocation(line: 8201, column: 7, scope: !14901)
!15341 = !DILocation(line: 8203, column: 32, scope: !15342)
!15342 = distinct !DILexicalBlock(scope: !15339, file: !3, line: 8202, column: 5)
!15343 = !DILocation(line: 8203, column: 37, scope: !15342)
!15344 = !DILocation(line: 8203, column: 44, scope: !15342)
!15345 = !DILocation(line: 8203, column: 51, scope: !15342)
!15346 = !DILocation(line: 8203, column: 58, scope: !15342)
!15347 = !DILocation(line: 8203, column: 65, scope: !15342)
!15348 = !DILocation(line: 8203, column: 14, scope: !15342)
!15349 = !DILocation(line: 8203, column: 12, scope: !15342)
!15350 = !DILocation(line: 8204, column: 11, scope: !15351)
!15351 = distinct !DILexicalBlock(scope: !15342, file: !3, line: 8204, column: 11)
!15352 = !DILocation(line: 8204, column: 11, scope: !15342)
!15353 = !DILocation(line: 8206, column: 8, scope: !15354)
!15354 = distinct !DILexicalBlock(scope: !15355, file: !3, line: 8206, column: 8)
!15355 = distinct !DILexicalBlock(scope: !15351, file: !3, line: 8205, column: 2)
!15356 = !DILocation(line: 8206, column: 20, scope: !15354)
!15357 = !DILocation(line: 8206, column: 8, scope: !15355)
!15358 = !DILocalVariable(name: "c", scope: !15359, file: !3, line: 8208, type: !3129)
!15359 = distinct !DILexicalBlock(scope: !15354, file: !3, line: 8207, column: 6)
!15360 = !DILocation(line: 8208, column: 14, scope: !15359)
!15361 = !DILocation(line: 8209, column: 17, scope: !15362)
!15362 = distinct !DILexicalBlock(scope: !15359, file: !3, line: 8209, column: 8)
!15363 = !DILocation(line: 8209, column: 15, scope: !15362)
!15364 = !DILocation(line: 8209, column: 13, scope: !15362)
!15365 = !DILocation(line: 8209, column: 31, scope: !15366)
!15366 = distinct !DILexicalBlock(scope: !15362, file: !3, line: 8209, column: 8)
!15367 = !DILocation(line: 8209, column: 30, scope: !15366)
!15368 = !DILocation(line: 8209, column: 8, scope: !15362)
!15369 = !DILocation(line: 8210, column: 7, scope: !15370)
!15370 = distinct !DILexicalBlock(scope: !15366, file: !3, line: 8210, column: 7)
!15371 = !DILocation(line: 8210, column: 28, scope: !15370)
!15372 = !DILocation(line: 8211, column: 7, scope: !15370)
!15373 = !DILocation(line: 8211, column: 10, scope: !15370)
!15374 = !DILocation(line: 8211, column: 31, scope: !15370)
!15375 = !DILocation(line: 8210, column: 7, scope: !15366)
!15376 = !DILocation(line: 8212, column: 10, scope: !15370)
!15377 = !DILocation(line: 8212, column: 7, scope: !15370)
!15378 = !DILocation(line: 8212, column: 5, scope: !15370)
!15379 = !DILocation(line: 8215, column: 14, scope: !15380)
!15380 = distinct !DILexicalBlock(scope: !15381, file: !3, line: 8215, column: 7)
!15381 = distinct !DILexicalBlock(scope: !15370, file: !3, line: 8214, column: 5)
!15382 = !DILocation(line: 8215, column: 12, scope: !15380)
!15383 = !DILocation(line: 8215, column: 19, scope: !15384)
!15384 = distinct !DILexicalBlock(scope: !15380, file: !3, line: 8215, column: 7)
!15385 = !DILocation(line: 8215, column: 23, scope: !15384)
!15386 = !DILocation(line: 8215, column: 21, scope: !15384)
!15387 = !DILocation(line: 8215, column: 7, scope: !15380)
!15388 = !DILocation(line: 8216, column: 13, scope: !15389)
!15389 = distinct !DILexicalBlock(scope: !15384, file: !3, line: 8216, column: 13)
!15390 = !DILocation(line: 8216, column: 40, scope: !15389)
!15391 = !DILocation(line: 8216, column: 37, scope: !15389)
!15392 = !DILocation(line: 8216, column: 13, scope: !15384)
!15393 = !DILocation(line: 8217, column: 4, scope: !15389)
!15394 = !DILocation(line: 8215, column: 34, scope: !15384)
!15395 = !DILocation(line: 8215, column: 7, scope: !15384)
!15396 = distinct !{!15396, !15387, !15397}
!15397 = !DILocation(line: 8217, column: 4, scope: !15380)
!15398 = !DILocation(line: 8218, column: 11, scope: !15399)
!15399 = distinct !DILexicalBlock(scope: !15381, file: !3, line: 8218, column: 11)
!15400 = !DILocation(line: 8218, column: 16, scope: !15399)
!15401 = !DILocation(line: 8218, column: 13, scope: !15399)
!15402 = !DILocation(line: 8218, column: 11, scope: !15381)
!15403 = !DILocation(line: 8219, column: 14, scope: !15399)
!15404 = !DILocation(line: 8219, column: 11, scope: !15399)
!15405 = !DILocation(line: 8219, column: 9, scope: !15399)
!15406 = !DILocation(line: 8220, column: 16, scope: !15407)
!15407 = distinct !DILexicalBlock(scope: !15399, file: !3, line: 8220, column: 16)
!15408 = !DILocation(line: 8220, column: 37, scope: !15407)
!15409 = !DILocation(line: 8220, column: 16, scope: !15399)
!15410 = !DILocation(line: 8222, column: 14, scope: !15411)
!15411 = distinct !DILexicalBlock(scope: !15407, file: !3, line: 8221, column: 9)
!15412 = !DILocation(line: 8224, column: 7, scope: !15411)
!15413 = !DILocation(line: 8222, column: 4, scope: !15411)
!15414 = !DILocation(line: 8225, column: 9, scope: !15411)
!15415 = !DILocation(line: 8225, column: 5, scope: !15411)
!15416 = !DILocation(line: 8225, column: 7, scope: !15411)
!15417 = !DILocation(line: 8226, column: 9, scope: !15411)
!15418 = !DILocalVariable(name: "l", scope: !15419, file: !3, line: 8232, type: !2224)
!15419 = distinct !DILexicalBlock(scope: !15407, file: !3, line: 8228, column: 9)
!15420 = !DILocation(line: 8232, column: 9, scope: !15419)
!15421 = !DILocation(line: 8232, column: 31, scope: !15419)
!15422 = !DILocation(line: 8232, column: 13, scope: !15419)
!15423 = !DILocation(line: 8234, column: 26, scope: !15419)
!15424 = !DILocation(line: 8234, column: 4, scope: !15419)
!15425 = !DILocation(line: 8234, column: 24, scope: !15419)
!15426 = !DILocation(line: 8235, column: 27, scope: !15419)
!15427 = !DILocation(line: 8235, column: 4, scope: !15419)
!15428 = !DILocation(line: 8235, column: 25, scope: !15419)
!15429 = !DILocation(line: 8236, column: 14, scope: !15419)
!15430 = !DILocation(line: 8236, column: 12, scope: !15419)
!15431 = !DILocation(line: 8237, column: 4, scope: !15419)
!15432 = !DILocation(line: 8209, column: 8, scope: !15366)
!15433 = distinct !{!15433, !15368, !15434}
!15434 = !DILocation(line: 8239, column: 5, scope: !15362)
!15435 = !DILocation(line: 8240, column: 6, scope: !15359)
!15436 = !DILocation(line: 8241, column: 29, scope: !15355)
!15437 = !DILocation(line: 8241, column: 4, scope: !15355)
!15438 = !DILocation(line: 8241, column: 27, scope: !15355)
!15439 = !DILocation(line: 8242, column: 2, scope: !15355)
!15440 = !DILocation(line: 8243, column: 13, scope: !15342)
!15441 = !DILocation(line: 8243, column: 11, scope: !15342)
!15442 = !DILocation(line: 8244, column: 5, scope: !15342)
!15443 = !DILabel(scope: !14901, name: "pop_scopes", file: !3, line: 8245)
!15444 = !DILocation(line: 8245, column: 1, scope: !14901)
!15445 = !DILocation(line: 8246, column: 3, scope: !14901)
!15446 = !DILocation(line: 8246, column: 10, scope: !14901)
!15447 = !DILocation(line: 8251, column: 35, scope: !15448)
!15448 = distinct !DILexicalBlock(scope: !14901, file: !3, line: 8247, column: 5)
!15449 = !DILocation(line: 8251, column: 40, scope: !15448)
!15450 = !DILocation(line: 8251, column: 14, scope: !15448)
!15451 = !DILocation(line: 8251, column: 12, scope: !15448)
!15452 = !DILocation(line: 8252, column: 17, scope: !15448)
!15453 = !DILocation(line: 8252, column: 7, scope: !15448)
!15454 = !DILocation(line: 8253, column: 19, scope: !15448)
!15455 = !DILocation(line: 8253, column: 17, scope: !15448)
!15456 = distinct !{!15456, !15445, !15457}
!15457 = !DILocation(line: 8254, column: 5, scope: !14901)
!15458 = !DILocation(line: 8255, column: 10, scope: !14901)
!15459 = !DILocation(line: 8255, column: 3, scope: !14901)
!15460 = !DILocation(line: 8256, column: 1, scope: !14901)
!15461 = distinct !DISubprogram(name: "c_parser_omp_clause_name", scope: !3, file: !3, line: 7109, type: !15462, scopeLine: 7110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15462 = !DISubroutineType(types: !15463)
!15463 = !{!14755, !3401}
!15464 = !DILocalVariable(name: "parser", arg: 1, scope: !15461, file: !3, line: 7109, type: !3401)
!15465 = !DILocation(line: 7109, column: 37, scope: !15461)
!15466 = !DILocalVariable(name: "result", scope: !15461, file: !3, line: 7111, type: !14755)
!15467 = !DILocation(line: 7111, column: 21, scope: !15461)
!15468 = !DILocation(line: 7113, column: 39, scope: !15469)
!15469 = distinct !DILexicalBlock(scope: !15461, file: !3, line: 7113, column: 7)
!15470 = !DILocation(line: 7113, column: 7, scope: !15469)
!15471 = !DILocation(line: 7113, column: 7, scope: !15461)
!15472 = !DILocation(line: 7114, column: 12, scope: !15469)
!15473 = !DILocation(line: 7114, column: 5, scope: !15469)
!15474 = !DILocation(line: 7115, column: 44, scope: !15475)
!15475 = distinct !DILexicalBlock(scope: !15469, file: !3, line: 7115, column: 12)
!15476 = !DILocation(line: 7115, column: 12, scope: !15475)
!15477 = !DILocation(line: 7115, column: 12, scope: !15469)
!15478 = !DILocation(line: 7116, column: 12, scope: !15475)
!15479 = !DILocation(line: 7116, column: 5, scope: !15475)
!15480 = !DILocation(line: 7117, column: 36, scope: !15481)
!15481 = distinct !DILexicalBlock(scope: !15475, file: !3, line: 7117, column: 12)
!15482 = !DILocation(line: 7117, column: 12, scope: !15481)
!15483 = !DILocation(line: 7117, column: 12, scope: !15475)
!15484 = !DILocalVariable(name: "p", scope: !15485, file: !3, line: 7119, type: !2428)
!15485 = distinct !DILexicalBlock(scope: !15481, file: !3, line: 7118, column: 5)
!15486 = !DILocation(line: 7119, column: 19, scope: !15485)
!15487 = !DILocation(line: 7119, column: 23, scope: !15485)
!15488 = !DILocation(line: 7121, column: 15, scope: !15485)
!15489 = !DILocation(line: 7121, column: 7, scope: !15485)
!15490 = !DILocation(line: 7124, column: 29, scope: !15491)
!15491 = distinct !DILexicalBlock(scope: !15492, file: !3, line: 7124, column: 8)
!15492 = distinct !DILexicalBlock(scope: !15485, file: !3, line: 7122, column: 2)
!15493 = !DILocation(line: 7124, column: 9, scope: !15491)
!15494 = !DILocation(line: 7124, column: 8, scope: !15492)
!15495 = !DILocation(line: 7125, column: 13, scope: !15491)
!15496 = !DILocation(line: 7125, column: 6, scope: !15491)
!15497 = !DILocation(line: 7126, column: 32, scope: !15498)
!15498 = distinct !DILexicalBlock(scope: !15491, file: !3, line: 7126, column: 13)
!15499 = !DILocation(line: 7126, column: 14, scope: !15498)
!15500 = !DILocation(line: 7126, column: 13, scope: !15491)
!15501 = !DILocation(line: 7127, column: 13, scope: !15498)
!15502 = !DILocation(line: 7127, column: 6, scope: !15498)
!15503 = !DILocation(line: 7128, column: 44, scope: !15504)
!15504 = distinct !DILexicalBlock(scope: !15498, file: !3, line: 7128, column: 20)
!15505 = !DILocation(line: 7128, column: 21, scope: !15504)
!15506 = !DILocation(line: 7128, column: 20, scope: !15498)
!15507 = !DILocation(line: 7129, column: 13, scope: !15504)
!15508 = !DILocation(line: 7129, column: 6, scope: !15504)
!15509 = !DILocation(line: 7130, column: 4, scope: !15492)
!15510 = !DILocation(line: 7132, column: 33, scope: !15511)
!15511 = distinct !DILexicalBlock(scope: !15492, file: !3, line: 7132, column: 8)
!15512 = !DILocation(line: 7132, column: 9, scope: !15511)
!15513 = !DILocation(line: 7132, column: 8, scope: !15492)
!15514 = !DILocation(line: 7133, column: 13, scope: !15511)
!15515 = !DILocation(line: 7133, column: 6, scope: !15511)
!15516 = !DILocation(line: 7134, column: 4, scope: !15492)
!15517 = !DILocation(line: 7136, column: 32, scope: !15518)
!15518 = distinct !DILexicalBlock(scope: !15492, file: !3, line: 7136, column: 8)
!15519 = !DILocation(line: 7136, column: 9, scope: !15518)
!15520 = !DILocation(line: 7136, column: 8, scope: !15492)
!15521 = !DILocation(line: 7137, column: 13, scope: !15518)
!15522 = !DILocation(line: 7137, column: 6, scope: !15518)
!15523 = !DILocation(line: 7138, column: 4, scope: !15492)
!15524 = !DILocation(line: 7140, column: 27, scope: !15525)
!15525 = distinct !DILexicalBlock(scope: !15492, file: !3, line: 7140, column: 8)
!15526 = !DILocation(line: 7140, column: 9, scope: !15525)
!15527 = !DILocation(line: 7140, column: 8, scope: !15492)
!15528 = !DILocation(line: 7141, column: 13, scope: !15525)
!15529 = !DILocation(line: 7141, column: 6, scope: !15525)
!15530 = !DILocation(line: 7142, column: 37, scope: !15531)
!15531 = distinct !DILexicalBlock(scope: !15525, file: !3, line: 7142, column: 13)
!15532 = !DILocation(line: 7142, column: 14, scope: !15531)
!15533 = !DILocation(line: 7142, column: 13, scope: !15525)
!15534 = !DILocation(line: 7143, column: 13, scope: !15531)
!15535 = !DILocation(line: 7143, column: 6, scope: !15531)
!15536 = !DILocation(line: 7144, column: 4, scope: !15492)
!15537 = !DILocation(line: 7146, column: 28, scope: !15538)
!15538 = distinct !DILexicalBlock(scope: !15492, file: !3, line: 7146, column: 8)
!15539 = !DILocation(line: 7146, column: 9, scope: !15538)
!15540 = !DILocation(line: 7146, column: 8, scope: !15492)
!15541 = !DILocation(line: 7147, column: 13, scope: !15538)
!15542 = !DILocation(line: 7147, column: 6, scope: !15538)
!15543 = !DILocation(line: 7148, column: 4, scope: !15492)
!15544 = !DILocation(line: 7150, column: 28, scope: !15545)
!15545 = distinct !DILexicalBlock(scope: !15492, file: !3, line: 7150, column: 8)
!15546 = !DILocation(line: 7150, column: 9, scope: !15545)
!15547 = !DILocation(line: 7150, column: 8, scope: !15492)
!15548 = !DILocation(line: 7151, column: 13, scope: !15545)
!15549 = !DILocation(line: 7151, column: 6, scope: !15545)
!15550 = !DILocation(line: 7152, column: 4, scope: !15492)
!15551 = !DILocation(line: 7154, column: 30, scope: !15552)
!15552 = distinct !DILexicalBlock(scope: !15492, file: !3, line: 7154, column: 8)
!15553 = !DILocation(line: 7154, column: 9, scope: !15552)
!15554 = !DILocation(line: 7154, column: 8, scope: !15492)
!15555 = !DILocation(line: 7155, column: 13, scope: !15552)
!15556 = !DILocation(line: 7155, column: 6, scope: !15552)
!15557 = !DILocation(line: 7156, column: 4, scope: !15492)
!15558 = !DILocation(line: 7158, column: 29, scope: !15559)
!15559 = distinct !DILexicalBlock(scope: !15492, file: !3, line: 7158, column: 8)
!15560 = !DILocation(line: 7158, column: 9, scope: !15559)
!15561 = !DILocation(line: 7158, column: 8, scope: !15492)
!15562 = !DILocation(line: 7159, column: 13, scope: !15559)
!15563 = !DILocation(line: 7159, column: 6, scope: !15559)
!15564 = !DILocation(line: 7160, column: 32, scope: !15565)
!15565 = distinct !DILexicalBlock(scope: !15559, file: !3, line: 7160, column: 13)
!15566 = !DILocation(line: 7160, column: 14, scope: !15565)
!15567 = !DILocation(line: 7160, column: 13, scope: !15559)
!15568 = !DILocation(line: 7161, column: 13, scope: !15565)
!15569 = !DILocation(line: 7161, column: 6, scope: !15565)
!15570 = !DILocation(line: 7162, column: 4, scope: !15492)
!15571 = !DILocation(line: 7164, column: 27, scope: !15572)
!15572 = distinct !DILexicalBlock(scope: !15492, file: !3, line: 7164, column: 8)
!15573 = !DILocation(line: 7164, column: 9, scope: !15572)
!15574 = !DILocation(line: 7164, column: 8, scope: !15492)
!15575 = !DILocation(line: 7165, column: 13, scope: !15572)
!15576 = !DILocation(line: 7165, column: 6, scope: !15572)
!15577 = !DILocation(line: 7166, column: 4, scope: !15492)
!15578 = !DILocation(line: 7168, column: 5, scope: !15485)
!15579 = !DILocation(line: 7170, column: 7, scope: !15580)
!15580 = distinct !DILexicalBlock(scope: !15461, file: !3, line: 7170, column: 7)
!15581 = !DILocation(line: 7170, column: 14, scope: !15580)
!15582 = !DILocation(line: 7170, column: 7, scope: !15461)
!15583 = !DILocation(line: 7171, column: 29, scope: !15580)
!15584 = !DILocation(line: 7171, column: 5, scope: !15580)
!15585 = !DILocation(line: 7173, column: 10, scope: !15461)
!15586 = !DILocation(line: 7173, column: 3, scope: !15461)
!15587 = distinct !DISubprogram(name: "c_parser_omp_clause_collapse", scope: !3, file: !3, line: 7268, type: !15588, scopeLine: 7269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15588 = !DISubroutineType(types: !15589)
!15589 = !{!2224, !3401, !2224}
!15590 = !DILocalVariable(name: "parser", arg: 1, scope: !15587, file: !3, line: 7268, type: !3401)
!15591 = !DILocation(line: 7268, column: 41, scope: !15587)
!15592 = !DILocalVariable(name: "list", arg: 2, scope: !15587, file: !3, line: 7268, type: !2224)
!15593 = !DILocation(line: 7268, column: 54, scope: !15587)
!15594 = !DILocalVariable(name: "c", scope: !15587, file: !3, line: 7270, type: !2224)
!15595 = !DILocation(line: 7270, column: 8, scope: !15587)
!15596 = !DILocalVariable(name: "num", scope: !15587, file: !3, line: 7270, type: !2224)
!15597 = !DILocation(line: 7270, column: 11, scope: !15587)
!15598 = !DILocation(line: 7270, column: 17, scope: !15587)
!15599 = !DILocalVariable(name: "n", scope: !15587, file: !3, line: 7271, type: !2280)
!15600 = !DILocation(line: 7271, column: 17, scope: !15587)
!15601 = !DILocalVariable(name: "loc", scope: !15587, file: !3, line: 7272, type: !2352)
!15602 = !DILocation(line: 7272, column: 14, scope: !15587)
!15603 = !DILocation(line: 7274, column: 30, scope: !15587)
!15604 = !DILocation(line: 7274, column: 3, scope: !15587)
!15605 = !DILocation(line: 7276, column: 30, scope: !15587)
!15606 = !DILocation(line: 7276, column: 9, scope: !15587)
!15607 = !DILocation(line: 7276, column: 39, scope: !15587)
!15608 = !DILocation(line: 7276, column: 7, scope: !15587)
!15609 = !DILocation(line: 7277, column: 25, scope: !15610)
!15610 = distinct !DILexicalBlock(scope: !15587, file: !3, line: 7277, column: 7)
!15611 = !DILocation(line: 7277, column: 7, scope: !15610)
!15612 = !DILocation(line: 7277, column: 7, scope: !15587)
!15613 = !DILocation(line: 7279, column: 38, scope: !15614)
!15614 = distinct !DILexicalBlock(scope: !15610, file: !3, line: 7278, column: 5)
!15615 = !DILocation(line: 7279, column: 13, scope: !15614)
!15616 = !DILocation(line: 7279, column: 52, scope: !15614)
!15617 = !DILocation(line: 7279, column: 11, scope: !15614)
!15618 = !DILocation(line: 7280, column: 34, scope: !15614)
!15619 = !DILocation(line: 7280, column: 7, scope: !15614)
!15620 = !DILocation(line: 7281, column: 5, scope: !15614)
!15621 = !DILocation(line: 7282, column: 7, scope: !15622)
!15622 = distinct !DILexicalBlock(scope: !15587, file: !3, line: 7282, column: 7)
!15623 = !DILocation(line: 7282, column: 14, scope: !15622)
!15624 = !DILocation(line: 7282, column: 11, scope: !15622)
!15625 = !DILocation(line: 7282, column: 7, scope: !15587)
!15626 = !DILocation(line: 7283, column: 12, scope: !15622)
!15627 = !DILocation(line: 7283, column: 5, scope: !15622)
!15628 = !DILocation(line: 7284, column: 8, scope: !15629)
!15629 = distinct !DILexicalBlock(scope: !15587, file: !3, line: 7284, column: 7)
!15630 = !DILocation(line: 7285, column: 7, scope: !15629)
!15631 = !DILocation(line: 7285, column: 26, scope: !15629)
!15632 = !DILocation(line: 7285, column: 11, scope: !15629)
!15633 = !DILocation(line: 7286, column: 7, scope: !15629)
!15634 = !DILocation(line: 7286, column: 29, scope: !15629)
!15635 = !DILocation(line: 7286, column: 15, scope: !15629)
!15636 = !DILocation(line: 7286, column: 13, scope: !15629)
!15637 = !DILocation(line: 7286, column: 38, scope: !15629)
!15638 = !DILocation(line: 7287, column: 7, scope: !15629)
!15639 = !DILocation(line: 7287, column: 16, scope: !15629)
!15640 = !DILocation(line: 7287, column: 10, scope: !15629)
!15641 = !DILocation(line: 7287, column: 21, scope: !15629)
!15642 = !DILocation(line: 7287, column: 18, scope: !15629)
!15643 = !DILocation(line: 7284, column: 7, scope: !15587)
!15644 = !DILocation(line: 7289, column: 17, scope: !15645)
!15645 = distinct !DILexicalBlock(scope: !15629, file: !3, line: 7288, column: 5)
!15646 = !DILocation(line: 7289, column: 7, scope: !15645)
!15647 = !DILocation(line: 7291, column: 14, scope: !15645)
!15648 = !DILocation(line: 7291, column: 7, scope: !15645)
!15649 = !DILocation(line: 7293, column: 25, scope: !15587)
!15650 = !DILocation(line: 7293, column: 7, scope: !15587)
!15651 = !DILocation(line: 7293, column: 5, scope: !15587)
!15652 = !DILocation(line: 7294, column: 34, scope: !15587)
!15653 = !DILocation(line: 7294, column: 3, scope: !15587)
!15654 = !DILocation(line: 7294, column: 32, scope: !15587)
!15655 = !DILocation(line: 7295, column: 26, scope: !15587)
!15656 = !DILocation(line: 7295, column: 3, scope: !15587)
!15657 = !DILocation(line: 7295, column: 24, scope: !15587)
!15658 = !DILocation(line: 7296, column: 10, scope: !15587)
!15659 = !DILocation(line: 7296, column: 3, scope: !15587)
!15660 = !DILocation(line: 7297, column: 1, scope: !15587)
!15661 = distinct !DISubprogram(name: "c_parser_omp_clause_copyin", scope: !3, file: !3, line: 7303, type: !15588, scopeLine: 7304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15662 = !DILocalVariable(name: "parser", arg: 1, scope: !15661, file: !3, line: 7303, type: !3401)
!15663 = !DILocation(line: 7303, column: 39, scope: !15661)
!15664 = !DILocalVariable(name: "list", arg: 2, scope: !15661, file: !3, line: 7303, type: !2224)
!15665 = !DILocation(line: 7303, column: 52, scope: !15661)
!15666 = !DILocation(line: 7305, column: 40, scope: !15661)
!15667 = !DILocation(line: 7305, column: 67, scope: !15661)
!15668 = !DILocation(line: 7305, column: 10, scope: !15661)
!15669 = !DILocation(line: 7305, column: 3, scope: !15661)
!15670 = distinct !DISubprogram(name: "c_parser_omp_clause_copyprivate", scope: !3, file: !3, line: 7312, type: !15588, scopeLine: 7313, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15671 = !DILocalVariable(name: "parser", arg: 1, scope: !15670, file: !3, line: 7312, type: !3401)
!15672 = !DILocation(line: 7312, column: 44, scope: !15670)
!15673 = !DILocalVariable(name: "list", arg: 2, scope: !15670, file: !3, line: 7312, type: !2224)
!15674 = !DILocation(line: 7312, column: 57, scope: !15670)
!15675 = !DILocation(line: 7314, column: 40, scope: !15670)
!15676 = !DILocation(line: 7314, column: 72, scope: !15670)
!15677 = !DILocation(line: 7314, column: 10, scope: !15670)
!15678 = !DILocation(line: 7314, column: 3, scope: !15670)
!15679 = distinct !DISubprogram(name: "c_parser_omp_clause_default", scope: !3, file: !3, line: 7321, type: !15588, scopeLine: 7322, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15680 = !DILocalVariable(name: "parser", arg: 1, scope: !15679, file: !3, line: 7321, type: !3401)
!15681 = !DILocation(line: 7321, column: 40, scope: !15679)
!15682 = !DILocalVariable(name: "list", arg: 2, scope: !15679, file: !3, line: 7321, type: !2224)
!15683 = !DILocation(line: 7321, column: 53, scope: !15679)
!15684 = !DILocalVariable(name: "kind", scope: !15679, file: !3, line: 7323, type: !176)
!15685 = !DILocation(line: 7323, column: 32, scope: !15679)
!15686 = !DILocalVariable(name: "loc", scope: !15679, file: !3, line: 7324, type: !2352)
!15687 = !DILocation(line: 7324, column: 14, scope: !15679)
!15688 = !DILocation(line: 7324, column: 41, scope: !15679)
!15689 = !DILocation(line: 7324, column: 20, scope: !15679)
!15690 = !DILocation(line: 7324, column: 50, scope: !15679)
!15691 = !DILocalVariable(name: "c", scope: !15679, file: !3, line: 7325, type: !2224)
!15692 = !DILocation(line: 7325, column: 8, scope: !15679)
!15693 = !DILocation(line: 7327, column: 26, scope: !15694)
!15694 = distinct !DILexicalBlock(scope: !15679, file: !3, line: 7327, column: 7)
!15695 = !DILocation(line: 7327, column: 8, scope: !15694)
!15696 = !DILocation(line: 7327, column: 7, scope: !15679)
!15697 = !DILocation(line: 7328, column: 12, scope: !15694)
!15698 = !DILocation(line: 7328, column: 5, scope: !15694)
!15699 = !DILocation(line: 7329, column: 31, scope: !15700)
!15700 = distinct !DILexicalBlock(scope: !15679, file: !3, line: 7329, column: 7)
!15701 = !DILocation(line: 7329, column: 7, scope: !15700)
!15702 = !DILocation(line: 7329, column: 7, scope: !15679)
!15703 = !DILocalVariable(name: "p", scope: !15704, file: !3, line: 7331, type: !2428)
!15704 = distinct !DILexicalBlock(scope: !15700, file: !3, line: 7330, column: 5)
!15705 = !DILocation(line: 7331, column: 19, scope: !15704)
!15706 = !DILocation(line: 7331, column: 23, scope: !15704)
!15707 = !DILocation(line: 7333, column: 15, scope: !15704)
!15708 = !DILocation(line: 7333, column: 7, scope: !15704)
!15709 = !DILocation(line: 7336, column: 24, scope: !15710)
!15710 = distinct !DILexicalBlock(scope: !15711, file: !3, line: 7336, column: 8)
!15711 = distinct !DILexicalBlock(scope: !15704, file: !3, line: 7334, column: 2)
!15712 = !DILocation(line: 7336, column: 8, scope: !15710)
!15713 = !DILocation(line: 7336, column: 27, scope: !15710)
!15714 = !DILocation(line: 7336, column: 8, scope: !15711)
!15715 = !DILocation(line: 7337, column: 6, scope: !15710)
!15716 = !DILocation(line: 7338, column: 9, scope: !15711)
!15717 = !DILocation(line: 7339, column: 4, scope: !15711)
!15718 = !DILocation(line: 7342, column: 26, scope: !15719)
!15719 = distinct !DILexicalBlock(scope: !15711, file: !3, line: 7342, column: 8)
!15720 = !DILocation(line: 7342, column: 8, scope: !15719)
!15721 = !DILocation(line: 7342, column: 29, scope: !15719)
!15722 = !DILocation(line: 7342, column: 8, scope: !15711)
!15723 = !DILocation(line: 7343, column: 6, scope: !15719)
!15724 = !DILocation(line: 7344, column: 9, scope: !15711)
!15725 = !DILocation(line: 7345, column: 4, scope: !15711)
!15726 = !DILocation(line: 7348, column: 4, scope: !15711)
!15727 = !DILocation(line: 7351, column: 31, scope: !15704)
!15728 = !DILocation(line: 7351, column: 7, scope: !15704)
!15729 = !DILocation(line: 7352, column: 5, scope: !15704)
!15730 = !DILocation(line: 7354, column: 5, scope: !15700)
!15731 = !DILabel(scope: !15732, name: "invalid_kind", file: !3, line: 7355)
!15732 = distinct !DILexicalBlock(scope: !15700, file: !3, line: 7354, column: 5)
!15733 = !DILocation(line: 7355, column: 5, scope: !15732)
!15734 = !DILocation(line: 7356, column: 23, scope: !15732)
!15735 = !DILocation(line: 7356, column: 7, scope: !15732)
!15736 = !DILocation(line: 7358, column: 30, scope: !15679)
!15737 = !DILocation(line: 7358, column: 3, scope: !15679)
!15738 = !DILocation(line: 7360, column: 7, scope: !15739)
!15739 = distinct !DILexicalBlock(scope: !15679, file: !3, line: 7360, column: 7)
!15740 = !DILocation(line: 7360, column: 12, scope: !15739)
!15741 = !DILocation(line: 7360, column: 7, scope: !15679)
!15742 = !DILocation(line: 7361, column: 12, scope: !15739)
!15743 = !DILocation(line: 7361, column: 5, scope: !15739)
!15744 = !DILocation(line: 7363, column: 30, scope: !15679)
!15745 = !DILocation(line: 7363, column: 3, scope: !15679)
!15746 = !DILocation(line: 7364, column: 25, scope: !15679)
!15747 = !DILocation(line: 7364, column: 7, scope: !15679)
!15748 = !DILocation(line: 7364, column: 5, scope: !15679)
!15749 = !DILocation(line: 7365, column: 26, scope: !15679)
!15750 = !DILocation(line: 7365, column: 3, scope: !15679)
!15751 = !DILocation(line: 7365, column: 24, scope: !15679)
!15752 = !DILocation(line: 7366, column: 33, scope: !15679)
!15753 = !DILocation(line: 7366, column: 3, scope: !15679)
!15754 = !DILocation(line: 7366, column: 31, scope: !15679)
!15755 = !DILocation(line: 7368, column: 10, scope: !15679)
!15756 = !DILocation(line: 7368, column: 3, scope: !15679)
!15757 = !DILocation(line: 7369, column: 1, scope: !15679)
!15758 = distinct !DISubprogram(name: "c_parser_omp_clause_firstprivate", scope: !3, file: !3, line: 7375, type: !15588, scopeLine: 7376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15759 = !DILocalVariable(name: "parser", arg: 1, scope: !15758, file: !3, line: 7375, type: !3401)
!15760 = !DILocation(line: 7375, column: 45, scope: !15758)
!15761 = !DILocalVariable(name: "list", arg: 2, scope: !15758, file: !3, line: 7375, type: !2224)
!15762 = !DILocation(line: 7375, column: 58, scope: !15758)
!15763 = !DILocation(line: 7377, column: 40, scope: !15758)
!15764 = !DILocation(line: 7377, column: 73, scope: !15758)
!15765 = !DILocation(line: 7377, column: 10, scope: !15758)
!15766 = !DILocation(line: 7377, column: 3, scope: !15758)
!15767 = distinct !DISubprogram(name: "c_parser_omp_clause_if", scope: !3, file: !3, line: 7384, type: !15588, scopeLine: 7385, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15768 = !DILocalVariable(name: "parser", arg: 1, scope: !15767, file: !3, line: 7384, type: !3401)
!15769 = !DILocation(line: 7384, column: 35, scope: !15767)
!15770 = !DILocalVariable(name: "list", arg: 2, scope: !15767, file: !3, line: 7384, type: !2224)
!15771 = !DILocation(line: 7384, column: 48, scope: !15767)
!15772 = !DILocalVariable(name: "loc", scope: !15767, file: !3, line: 7386, type: !2352)
!15773 = !DILocation(line: 7386, column: 14, scope: !15767)
!15774 = !DILocation(line: 7386, column: 41, scope: !15767)
!15775 = !DILocation(line: 7386, column: 20, scope: !15767)
!15776 = !DILocation(line: 7386, column: 50, scope: !15767)
!15777 = !DILocation(line: 7387, column: 31, scope: !15778)
!15778 = distinct !DILexicalBlock(scope: !15767, file: !3, line: 7387, column: 7)
!15779 = !DILocation(line: 7387, column: 7, scope: !15778)
!15780 = !DILocation(line: 7387, column: 7, scope: !15767)
!15781 = !DILocalVariable(name: "t", scope: !15782, file: !3, line: 7389, type: !2224)
!15782 = distinct !DILexicalBlock(scope: !15778, file: !3, line: 7388, column: 5)
!15783 = !DILocation(line: 7389, column: 12, scope: !15782)
!15784 = !DILocation(line: 7389, column: 42, scope: !15782)
!15785 = !DILocation(line: 7389, column: 16, scope: !15782)
!15786 = !DILocalVariable(name: "c", scope: !15782, file: !3, line: 7390, type: !2224)
!15787 = !DILocation(line: 7390, column: 12, scope: !15782)
!15788 = !DILocation(line: 7392, column: 34, scope: !15782)
!15789 = !DILocation(line: 7392, column: 7, scope: !15782)
!15790 = !DILocation(line: 7394, column: 29, scope: !15782)
!15791 = !DILocation(line: 7394, column: 11, scope: !15782)
!15792 = !DILocation(line: 7394, column: 9, scope: !15782)
!15793 = !DILocation(line: 7395, column: 32, scope: !15782)
!15794 = !DILocation(line: 7395, column: 7, scope: !15782)
!15795 = !DILocation(line: 7395, column: 30, scope: !15782)
!15796 = !DILocation(line: 7396, column: 30, scope: !15782)
!15797 = !DILocation(line: 7396, column: 7, scope: !15782)
!15798 = !DILocation(line: 7396, column: 28, scope: !15782)
!15799 = !DILocation(line: 7397, column: 14, scope: !15782)
!15800 = !DILocation(line: 7397, column: 12, scope: !15782)
!15801 = !DILocation(line: 7398, column: 5, scope: !15782)
!15802 = !DILocation(line: 7400, column: 21, scope: !15778)
!15803 = !DILocation(line: 7400, column: 5, scope: !15778)
!15804 = !DILocation(line: 7402, column: 10, scope: !15767)
!15805 = !DILocation(line: 7402, column: 3, scope: !15767)
!15806 = distinct !DISubprogram(name: "c_parser_omp_clause_lastprivate", scope: !3, file: !3, line: 7409, type: !15588, scopeLine: 7410, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15807 = !DILocalVariable(name: "parser", arg: 1, scope: !15806, file: !3, line: 7409, type: !3401)
!15808 = !DILocation(line: 7409, column: 44, scope: !15806)
!15809 = !DILocalVariable(name: "list", arg: 2, scope: !15806, file: !3, line: 7409, type: !2224)
!15810 = !DILocation(line: 7409, column: 57, scope: !15806)
!15811 = !DILocation(line: 7411, column: 40, scope: !15806)
!15812 = !DILocation(line: 7411, column: 72, scope: !15806)
!15813 = !DILocation(line: 7411, column: 10, scope: !15806)
!15814 = !DILocation(line: 7411, column: 3, scope: !15806)
!15815 = distinct !DISubprogram(name: "c_parser_omp_clause_nowait", scope: !3, file: !3, line: 7418, type: !15588, scopeLine: 7419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15816 = !DILocalVariable(name: "parser", arg: 1, scope: !15815, file: !3, line: 7418, type: !3401)
!15817 = !DILocation(line: 7418, column: 39, scope: !15815)
!15818 = !DILocalVariable(name: "list", arg: 2, scope: !15815, file: !3, line: 7418, type: !2224)
!15819 = !DILocation(line: 7418, column: 69, scope: !15815)
!15820 = !DILocalVariable(name: "c", scope: !15815, file: !3, line: 7420, type: !2224)
!15821 = !DILocation(line: 7420, column: 8, scope: !15815)
!15822 = !DILocalVariable(name: "loc", scope: !15815, file: !3, line: 7421, type: !2352)
!15823 = !DILocation(line: 7421, column: 14, scope: !15815)
!15824 = !DILocation(line: 7421, column: 41, scope: !15815)
!15825 = !DILocation(line: 7421, column: 20, scope: !15815)
!15826 = !DILocation(line: 7421, column: 50, scope: !15815)
!15827 = !DILocation(line: 7423, column: 30, scope: !15815)
!15828 = !DILocation(line: 7423, column: 3, scope: !15815)
!15829 = !DILocation(line: 7425, column: 25, scope: !15815)
!15830 = !DILocation(line: 7425, column: 7, scope: !15815)
!15831 = !DILocation(line: 7425, column: 5, scope: !15815)
!15832 = !DILocation(line: 7426, column: 26, scope: !15815)
!15833 = !DILocation(line: 7426, column: 3, scope: !15815)
!15834 = !DILocation(line: 7426, column: 24, scope: !15815)
!15835 = !DILocation(line: 7427, column: 10, scope: !15815)
!15836 = !DILocation(line: 7427, column: 3, scope: !15815)
!15837 = distinct !DISubprogram(name: "c_parser_omp_clause_num_threads", scope: !3, file: !3, line: 7434, type: !15588, scopeLine: 7435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15838 = !DILocalVariable(name: "parser", arg: 1, scope: !15837, file: !3, line: 7434, type: !3401)
!15839 = !DILocation(line: 7434, column: 44, scope: !15837)
!15840 = !DILocalVariable(name: "list", arg: 2, scope: !15837, file: !3, line: 7434, type: !2224)
!15841 = !DILocation(line: 7434, column: 57, scope: !15837)
!15842 = !DILocalVariable(name: "num_threads_loc", scope: !15837, file: !3, line: 7436, type: !2352)
!15843 = !DILocation(line: 7436, column: 14, scope: !15837)
!15844 = !DILocation(line: 7436, column: 53, scope: !15837)
!15845 = !DILocation(line: 7436, column: 32, scope: !15837)
!15846 = !DILocation(line: 7436, column: 62, scope: !15837)
!15847 = !DILocation(line: 7437, column: 25, scope: !15848)
!15848 = distinct !DILexicalBlock(scope: !15837, file: !3, line: 7437, column: 7)
!15849 = !DILocation(line: 7437, column: 7, scope: !15848)
!15850 = !DILocation(line: 7437, column: 7, scope: !15837)
!15851 = !DILocalVariable(name: "expr_loc", scope: !15852, file: !3, line: 7439, type: !2352)
!15852 = distinct !DILexicalBlock(scope: !15848, file: !3, line: 7438, column: 5)
!15853 = !DILocation(line: 7439, column: 18, scope: !15852)
!15854 = !DILocation(line: 7439, column: 50, scope: !15852)
!15855 = !DILocation(line: 7439, column: 29, scope: !15852)
!15856 = !DILocation(line: 7439, column: 59, scope: !15852)
!15857 = !DILocalVariable(name: "c", scope: !15852, file: !3, line: 7440, type: !2224)
!15858 = !DILocation(line: 7440, column: 12, scope: !15852)
!15859 = !DILocalVariable(name: "t", scope: !15852, file: !3, line: 7440, type: !2224)
!15860 = !DILocation(line: 7440, column: 15, scope: !15852)
!15861 = !DILocation(line: 7440, column: 40, scope: !15852)
!15862 = !DILocation(line: 7440, column: 19, scope: !15852)
!15863 = !DILocation(line: 7440, column: 48, scope: !15852)
!15864 = !DILocation(line: 7441, column: 25, scope: !15852)
!15865 = !DILocation(line: 7441, column: 11, scope: !15852)
!15866 = !DILocation(line: 7441, column: 9, scope: !15852)
!15867 = !DILocation(line: 7443, column: 34, scope: !15852)
!15868 = !DILocation(line: 7443, column: 7, scope: !15852)
!15869 = !DILocation(line: 7445, column: 12, scope: !15870)
!15870 = distinct !DILexicalBlock(scope: !15852, file: !3, line: 7445, column: 11)
!15871 = !DILocation(line: 7445, column: 11, scope: !15852)
!15872 = !DILocation(line: 7447, column: 20, scope: !15873)
!15873 = distinct !DILexicalBlock(scope: !15870, file: !3, line: 7446, column: 2)
!15874 = !DILocation(line: 7447, column: 4, scope: !15873)
!15875 = !DILocation(line: 7448, column: 11, scope: !15873)
!15876 = !DILocation(line: 7448, column: 4, scope: !15873)
!15877 = !DILocation(line: 7452, column: 11, scope: !15852)
!15878 = !DILocation(line: 7452, column: 9, scope: !15852)
!15879 = !DILocation(line: 7454, column: 11, scope: !15880)
!15880 = distinct !DILexicalBlock(scope: !15852, file: !3, line: 7454, column: 11)
!15881 = !DILocation(line: 7454, column: 11, scope: !15852)
!15882 = !DILocation(line: 7455, column: 2, scope: !15880)
!15883 = !DILocation(line: 7456, column: 11, scope: !15884)
!15884 = distinct !DILexicalBlock(scope: !15852, file: !3, line: 7456, column: 11)
!15885 = !DILocation(line: 7456, column: 16, scope: !15884)
!15886 = !DILocation(line: 7456, column: 13, scope: !15884)
!15887 = !DILocation(line: 7456, column: 11, scope: !15852)
!15888 = !DILocation(line: 7458, column: 16, scope: !15889)
!15889 = distinct !DILexicalBlock(scope: !15884, file: !3, line: 7457, column: 2)
!15890 = !DILocation(line: 7458, column: 4, scope: !15889)
!15891 = !DILocation(line: 7460, column: 8, scope: !15889)
!15892 = !DILocation(line: 7460, column: 6, scope: !15889)
!15893 = !DILocation(line: 7461, column: 2, scope: !15889)
!15894 = !DILocation(line: 7463, column: 34, scope: !15852)
!15895 = !DILocation(line: 7463, column: 7, scope: !15852)
!15896 = !DILocation(line: 7465, column: 29, scope: !15852)
!15897 = !DILocation(line: 7465, column: 11, scope: !15852)
!15898 = !DILocation(line: 7465, column: 9, scope: !15852)
!15899 = !DILocation(line: 7466, column: 41, scope: !15852)
!15900 = !DILocation(line: 7466, column: 7, scope: !15852)
!15901 = !DILocation(line: 7466, column: 39, scope: !15852)
!15902 = !DILocation(line: 7467, column: 30, scope: !15852)
!15903 = !DILocation(line: 7467, column: 7, scope: !15852)
!15904 = !DILocation(line: 7467, column: 28, scope: !15852)
!15905 = !DILocation(line: 7468, column: 14, scope: !15852)
!15906 = !DILocation(line: 7468, column: 12, scope: !15852)
!15907 = !DILocation(line: 7469, column: 5, scope: !15852)
!15908 = !DILocation(line: 7471, column: 10, scope: !15837)
!15909 = !DILocation(line: 7471, column: 3, scope: !15837)
!15910 = !DILocation(line: 7472, column: 1, scope: !15837)
!15911 = distinct !DISubprogram(name: "c_parser_omp_clause_ordered", scope: !3, file: !3, line: 7478, type: !15588, scopeLine: 7479, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15912 = !DILocalVariable(name: "parser", arg: 1, scope: !15911, file: !3, line: 7478, type: !3401)
!15913 = !DILocation(line: 7478, column: 40, scope: !15911)
!15914 = !DILocalVariable(name: "list", arg: 2, scope: !15911, file: !3, line: 7478, type: !2224)
!15915 = !DILocation(line: 7478, column: 53, scope: !15911)
!15916 = !DILocalVariable(name: "c", scope: !15911, file: !3, line: 7480, type: !2224)
!15917 = !DILocation(line: 7480, column: 8, scope: !15911)
!15918 = !DILocation(line: 7482, column: 30, scope: !15911)
!15919 = !DILocation(line: 7482, column: 3, scope: !15911)
!15920 = !DILocation(line: 7484, column: 46, scope: !15911)
!15921 = !DILocation(line: 7484, column: 25, scope: !15911)
!15922 = !DILocation(line: 7484, column: 55, scope: !15911)
!15923 = !DILocation(line: 7484, column: 7, scope: !15911)
!15924 = !DILocation(line: 7484, column: 5, scope: !15911)
!15925 = !DILocation(line: 7486, column: 26, scope: !15911)
!15926 = !DILocation(line: 7486, column: 3, scope: !15911)
!15927 = !DILocation(line: 7486, column: 24, scope: !15911)
!15928 = !DILocation(line: 7488, column: 10, scope: !15911)
!15929 = !DILocation(line: 7488, column: 3, scope: !15911)
!15930 = distinct !DISubprogram(name: "c_parser_omp_clause_private", scope: !3, file: !3, line: 7495, type: !15588, scopeLine: 7496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15931 = !DILocalVariable(name: "parser", arg: 1, scope: !15930, file: !3, line: 7495, type: !3401)
!15932 = !DILocation(line: 7495, column: 40, scope: !15930)
!15933 = !DILocalVariable(name: "list", arg: 2, scope: !15930, file: !3, line: 7495, type: !2224)
!15934 = !DILocation(line: 7495, column: 53, scope: !15930)
!15935 = !DILocation(line: 7497, column: 40, scope: !15930)
!15936 = !DILocation(line: 7497, column: 68, scope: !15930)
!15937 = !DILocation(line: 7497, column: 10, scope: !15930)
!15938 = !DILocation(line: 7497, column: 3, scope: !15930)
!15939 = distinct !DISubprogram(name: "c_parser_omp_clause_reduction", scope: !3, file: !3, line: 7507, type: !15588, scopeLine: 7508, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!15940 = !DILocalVariable(name: "parser", arg: 1, scope: !15939, file: !3, line: 7507, type: !3401)
!15941 = !DILocation(line: 7507, column: 42, scope: !15939)
!15942 = !DILocalVariable(name: "list", arg: 2, scope: !15939, file: !3, line: 7507, type: !2224)
!15943 = !DILocation(line: 7507, column: 55, scope: !15939)
!15944 = !DILocalVariable(name: "clause_loc", scope: !15939, file: !3, line: 7509, type: !2352)
!15945 = !DILocation(line: 7509, column: 14, scope: !15939)
!15946 = !DILocation(line: 7509, column: 48, scope: !15939)
!15947 = !DILocation(line: 7509, column: 27, scope: !15939)
!15948 = !DILocation(line: 7509, column: 57, scope: !15939)
!15949 = !DILocation(line: 7510, column: 25, scope: !15950)
!15950 = distinct !DILexicalBlock(scope: !15939, file: !3, line: 7510, column: 7)
!15951 = !DILocation(line: 7510, column: 7, scope: !15950)
!15952 = !DILocation(line: 7510, column: 7, scope: !15939)
!15953 = !DILocalVariable(name: "code", scope: !15954, file: !3, line: 7512, type: !190)
!15954 = distinct !DILexicalBlock(scope: !15950, file: !3, line: 7511, column: 5)
!15955 = !DILocation(line: 7512, column: 22, scope: !15954)
!15956 = !DILocation(line: 7514, column: 36, scope: !15954)
!15957 = !DILocation(line: 7514, column: 15, scope: !15954)
!15958 = !DILocation(line: 7514, column: 45, scope: !15954)
!15959 = !DILocation(line: 7514, column: 7, scope: !15954)
!15960 = !DILocation(line: 7517, column: 9, scope: !15961)
!15961 = distinct !DILexicalBlock(scope: !15954, file: !3, line: 7515, column: 2)
!15962 = !DILocation(line: 7518, column: 4, scope: !15961)
!15963 = !DILocation(line: 7520, column: 9, scope: !15961)
!15964 = !DILocation(line: 7521, column: 4, scope: !15961)
!15965 = !DILocation(line: 7523, column: 9, scope: !15961)
!15966 = !DILocation(line: 7524, column: 4, scope: !15961)
!15967 = !DILocation(line: 7526, column: 9, scope: !15961)
!15968 = !DILocation(line: 7527, column: 4, scope: !15961)
!15969 = !DILocation(line: 7529, column: 9, scope: !15961)
!15970 = !DILocation(line: 7530, column: 4, scope: !15961)
!15971 = !DILocation(line: 7532, column: 9, scope: !15961)
!15972 = !DILocation(line: 7533, column: 4, scope: !15961)
!15973 = !DILocation(line: 7535, column: 9, scope: !15961)
!15974 = !DILocation(line: 7536, column: 4, scope: !15961)
!15975 = !DILocation(line: 7538, column: 9, scope: !15961)
!15976 = !DILocation(line: 7539, column: 4, scope: !15961)
!15977 = !DILocation(line: 7541, column: 20, scope: !15961)
!15978 = !DILocation(line: 7541, column: 4, scope: !15961)
!15979 = !DILocation(line: 7544, column: 31, scope: !15961)
!15980 = !DILocation(line: 7544, column: 4, scope: !15961)
!15981 = !DILocation(line: 7545, column: 11, scope: !15961)
!15982 = !DILocation(line: 7545, column: 4, scope: !15961)
!15983 = !DILocation(line: 7547, column: 31, scope: !15954)
!15984 = !DILocation(line: 7547, column: 7, scope: !15954)
!15985 = !DILocation(line: 7548, column: 29, scope: !15986)
!15986 = distinct !DILexicalBlock(scope: !15954, file: !3, line: 7548, column: 11)
!15987 = !DILocation(line: 7548, column: 11, scope: !15986)
!15988 = !DILocation(line: 7548, column: 11, scope: !15954)
!15989 = !DILocalVariable(name: "nl", scope: !15990, file: !3, line: 7550, type: !2224)
!15990 = distinct !DILexicalBlock(scope: !15986, file: !3, line: 7549, column: 2)
!15991 = !DILocation(line: 7550, column: 9, scope: !15990)
!15992 = !DILocalVariable(name: "c", scope: !15990, file: !3, line: 7550, type: !2224)
!15993 = !DILocation(line: 7550, column: 13, scope: !15990)
!15994 = !DILocation(line: 7552, column: 37, scope: !15990)
!15995 = !DILocation(line: 7552, column: 45, scope: !15990)
!15996 = !DILocation(line: 7553, column: 31, scope: !15990)
!15997 = !DILocation(line: 7552, column: 9, scope: !15990)
!15998 = !DILocation(line: 7552, column: 7, scope: !15990)
!15999 = !DILocation(line: 7554, column: 13, scope: !16000)
!16000 = distinct !DILexicalBlock(scope: !15990, file: !3, line: 7554, column: 4)
!16001 = !DILocation(line: 7554, column: 11, scope: !16000)
!16002 = !DILocation(line: 7554, column: 9, scope: !16000)
!16003 = !DILocation(line: 7554, column: 17, scope: !16004)
!16004 = distinct !DILexicalBlock(scope: !16000, file: !3, line: 7554, column: 4)
!16005 = !DILocation(line: 7554, column: 22, scope: !16004)
!16006 = !DILocation(line: 7554, column: 19, scope: !16004)
!16007 = !DILocation(line: 7554, column: 4, scope: !16000)
!16008 = !DILocation(line: 7555, column: 38, scope: !16004)
!16009 = !DILocation(line: 7555, column: 6, scope: !16004)
!16010 = !DILocation(line: 7555, column: 36, scope: !16004)
!16011 = !DILocation(line: 7554, column: 32, scope: !16004)
!16012 = !DILocation(line: 7554, column: 30, scope: !16004)
!16013 = !DILocation(line: 7554, column: 4, scope: !16004)
!16014 = distinct !{!16014, !16007, !16015}
!16015 = !DILocation(line: 7555, column: 38, scope: !16000)
!16016 = !DILocation(line: 7557, column: 11, scope: !15990)
!16017 = !DILocation(line: 7557, column: 9, scope: !15990)
!16018 = !DILocation(line: 7558, column: 2, scope: !15990)
!16019 = !DILocation(line: 7559, column: 34, scope: !15954)
!16020 = !DILocation(line: 7559, column: 7, scope: !15954)
!16021 = !DILocation(line: 7560, column: 5, scope: !15954)
!16022 = !DILocation(line: 7561, column: 10, scope: !15939)
!16023 = !DILocation(line: 7561, column: 3, scope: !15939)
!16024 = !DILocation(line: 7562, column: 1, scope: !15939)
!16025 = distinct !DISubprogram(name: "c_parser_omp_clause_schedule", scope: !3, file: !3, line: 7573, type: !15588, scopeLine: 7574, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!16026 = !DILocalVariable(name: "parser", arg: 1, scope: !16025, file: !3, line: 7573, type: !3401)
!16027 = !DILocation(line: 7573, column: 41, scope: !16025)
!16028 = !DILocalVariable(name: "list", arg: 2, scope: !16025, file: !3, line: 7573, type: !2224)
!16029 = !DILocation(line: 7573, column: 54, scope: !16025)
!16030 = !DILocalVariable(name: "c", scope: !16025, file: !3, line: 7575, type: !2224)
!16031 = !DILocation(line: 7575, column: 8, scope: !16025)
!16032 = !DILocalVariable(name: "t", scope: !16025, file: !3, line: 7575, type: !2224)
!16033 = !DILocation(line: 7575, column: 11, scope: !16025)
!16034 = !DILocalVariable(name: "loc", scope: !16025, file: !3, line: 7576, type: !2352)
!16035 = !DILocation(line: 7576, column: 14, scope: !16025)
!16036 = !DILocation(line: 7576, column: 41, scope: !16025)
!16037 = !DILocation(line: 7576, column: 20, scope: !16025)
!16038 = !DILocation(line: 7576, column: 50, scope: !16025)
!16039 = !DILocation(line: 7578, column: 26, scope: !16040)
!16040 = distinct !DILexicalBlock(scope: !16025, file: !3, line: 7578, column: 7)
!16041 = !DILocation(line: 7578, column: 8, scope: !16040)
!16042 = !DILocation(line: 7578, column: 7, scope: !16025)
!16043 = !DILocation(line: 7579, column: 12, scope: !16040)
!16044 = !DILocation(line: 7579, column: 5, scope: !16040)
!16045 = !DILocation(line: 7581, column: 25, scope: !16025)
!16046 = !DILocation(line: 7581, column: 7, scope: !16025)
!16047 = !DILocation(line: 7581, column: 5, scope: !16025)
!16048 = !DILocation(line: 7583, column: 31, scope: !16049)
!16049 = distinct !DILexicalBlock(scope: !16025, file: !3, line: 7583, column: 7)
!16050 = !DILocation(line: 7583, column: 7, scope: !16049)
!16051 = !DILocation(line: 7583, column: 7, scope: !16025)
!16052 = !DILocalVariable(name: "kind", scope: !16053, file: !3, line: 7585, type: !2224)
!16053 = distinct !DILexicalBlock(scope: !16049, file: !3, line: 7584, column: 5)
!16054 = !DILocation(line: 7585, column: 12, scope: !16053)
!16055 = !DILocation(line: 7585, column: 40, scope: !16053)
!16056 = !DILocation(line: 7585, column: 19, scope: !16053)
!16057 = !DILocation(line: 7585, column: 49, scope: !16053)
!16058 = !DILocalVariable(name: "p", scope: !16053, file: !3, line: 7586, type: !2428)
!16059 = !DILocation(line: 7586, column: 19, scope: !16053)
!16060 = !DILocation(line: 7586, column: 23, scope: !16053)
!16061 = !DILocation(line: 7588, column: 15, scope: !16053)
!16062 = !DILocation(line: 7588, column: 7, scope: !16053)
!16063 = !DILocation(line: 7591, column: 27, scope: !16064)
!16064 = distinct !DILexicalBlock(scope: !16065, file: !3, line: 7591, column: 8)
!16065 = distinct !DILexicalBlock(scope: !16053, file: !3, line: 7589, column: 2)
!16066 = !DILocation(line: 7591, column: 8, scope: !16064)
!16067 = !DILocation(line: 7591, column: 30, scope: !16064)
!16068 = !DILocation(line: 7591, column: 8, scope: !16065)
!16069 = !DILocation(line: 7592, column: 6, scope: !16064)
!16070 = !DILocation(line: 7593, column: 4, scope: !16065)
!16071 = !DILocation(line: 7593, column: 33, scope: !16065)
!16072 = !DILocation(line: 7594, column: 4, scope: !16065)
!16073 = !DILocation(line: 7597, column: 26, scope: !16074)
!16074 = distinct !DILexicalBlock(scope: !16065, file: !3, line: 7597, column: 8)
!16075 = !DILocation(line: 7597, column: 8, scope: !16074)
!16076 = !DILocation(line: 7597, column: 29, scope: !16074)
!16077 = !DILocation(line: 7597, column: 8, scope: !16065)
!16078 = !DILocation(line: 7598, column: 6, scope: !16074)
!16079 = !DILocation(line: 7599, column: 4, scope: !16065)
!16080 = !DILocation(line: 7599, column: 33, scope: !16065)
!16081 = !DILocation(line: 7600, column: 4, scope: !16065)
!16082 = !DILocation(line: 7603, column: 27, scope: !16083)
!16083 = distinct !DILexicalBlock(scope: !16065, file: !3, line: 7603, column: 8)
!16084 = !DILocation(line: 7603, column: 8, scope: !16083)
!16085 = !DILocation(line: 7603, column: 30, scope: !16083)
!16086 = !DILocation(line: 7603, column: 8, scope: !16065)
!16087 = !DILocation(line: 7604, column: 6, scope: !16083)
!16088 = !DILocation(line: 7605, column: 4, scope: !16065)
!16089 = !DILocation(line: 7605, column: 33, scope: !16065)
!16090 = !DILocation(line: 7606, column: 4, scope: !16065)
!16091 = !DILocation(line: 7609, column: 4, scope: !16065)
!16092 = !DILocation(line: 7611, column: 5, scope: !16053)
!16093 = !DILocation(line: 7612, column: 44, scope: !16094)
!16094 = distinct !DILexicalBlock(scope: !16049, file: !3, line: 7612, column: 12)
!16095 = !DILocation(line: 7612, column: 12, scope: !16094)
!16096 = !DILocation(line: 7612, column: 12, scope: !16049)
!16097 = !DILocation(line: 7613, column: 5, scope: !16094)
!16098 = !DILocation(line: 7613, column: 34, scope: !16094)
!16099 = !DILocation(line: 7614, column: 44, scope: !16100)
!16100 = distinct !DILexicalBlock(scope: !16094, file: !3, line: 7614, column: 12)
!16101 = !DILocation(line: 7614, column: 12, scope: !16100)
!16102 = !DILocation(line: 7614, column: 12, scope: !16094)
!16103 = !DILocation(line: 7615, column: 5, scope: !16100)
!16104 = !DILocation(line: 7615, column: 34, scope: !16100)
!16105 = !DILocation(line: 7617, column: 5, scope: !16100)
!16106 = !DILocation(line: 7619, column: 27, scope: !16025)
!16107 = !DILocation(line: 7619, column: 3, scope: !16025)
!16108 = !DILocation(line: 7620, column: 31, scope: !16109)
!16109 = distinct !DILexicalBlock(scope: !16025, file: !3, line: 7620, column: 7)
!16110 = !DILocation(line: 7620, column: 7, scope: !16109)
!16111 = !DILocation(line: 7620, column: 7, scope: !16025)
!16112 = !DILocalVariable(name: "here", scope: !16113, file: !3, line: 7622, type: !2352)
!16113 = distinct !DILexicalBlock(scope: !16109, file: !3, line: 7621, column: 5)
!16114 = !DILocation(line: 7622, column: 18, scope: !16113)
!16115 = !DILocation(line: 7623, column: 31, scope: !16113)
!16116 = !DILocation(line: 7623, column: 7, scope: !16113)
!16117 = !DILocation(line: 7625, column: 35, scope: !16113)
!16118 = !DILocation(line: 7625, column: 14, scope: !16113)
!16119 = !DILocation(line: 7625, column: 44, scope: !16113)
!16120 = !DILocation(line: 7625, column: 12, scope: !16113)
!16121 = !DILocation(line: 7626, column: 36, scope: !16113)
!16122 = !DILocation(line: 7626, column: 11, scope: !16113)
!16123 = !DILocation(line: 7626, column: 50, scope: !16113)
!16124 = !DILocation(line: 7626, column: 9, scope: !16113)
!16125 = !DILocation(line: 7627, column: 25, scope: !16113)
!16126 = !DILocation(line: 7627, column: 11, scope: !16113)
!16127 = !DILocation(line: 7627, column: 9, scope: !16113)
!16128 = !DILocation(line: 7629, column: 11, scope: !16129)
!16129 = distinct !DILexicalBlock(scope: !16113, file: !3, line: 7629, column: 11)
!16130 = !DILocation(line: 7629, column: 40, scope: !16129)
!16131 = !DILocation(line: 7629, column: 11, scope: !16113)
!16132 = !DILocation(line: 7630, column: 12, scope: !16129)
!16133 = !DILocation(line: 7630, column: 2, scope: !16129)
!16134 = !DILocation(line: 7632, column: 16, scope: !16135)
!16135 = distinct !DILexicalBlock(scope: !16129, file: !3, line: 7632, column: 16)
!16136 = !DILocation(line: 7632, column: 45, scope: !16135)
!16137 = !DILocation(line: 7632, column: 16, scope: !16129)
!16138 = !DILocation(line: 7633, column: 12, scope: !16135)
!16139 = !DILocation(line: 7633, column: 2, scope: !16135)
!16140 = !DILocation(line: 7636, column: 16, scope: !16141)
!16141 = distinct !DILexicalBlock(scope: !16135, file: !3, line: 7636, column: 16)
!16142 = !DILocation(line: 7636, column: 42, scope: !16141)
!16143 = !DILocation(line: 7636, column: 16, scope: !16135)
!16144 = !DILocation(line: 7637, column: 39, scope: !16141)
!16145 = !DILocation(line: 7637, column: 2, scope: !16141)
!16146 = !DILocation(line: 7637, column: 37, scope: !16141)
!16147 = !DILocation(line: 7639, column: 18, scope: !16141)
!16148 = !DILocation(line: 7639, column: 2, scope: !16141)
!16149 = !DILocation(line: 7641, column: 34, scope: !16113)
!16150 = !DILocation(line: 7641, column: 7, scope: !16113)
!16151 = !DILocation(line: 7642, column: 5, scope: !16113)
!16152 = !DILocation(line: 7644, column: 32, scope: !16109)
!16153 = !DILocation(line: 7644, column: 5, scope: !16109)
!16154 = !DILocation(line: 7647, column: 30, scope: !16025)
!16155 = !DILocation(line: 7647, column: 3, scope: !16025)
!16156 = !DILocation(line: 7648, column: 26, scope: !16025)
!16157 = !DILocation(line: 7648, column: 3, scope: !16025)
!16158 = !DILocation(line: 7648, column: 24, scope: !16025)
!16159 = !DILocation(line: 7649, column: 10, scope: !16025)
!16160 = !DILocation(line: 7649, column: 3, scope: !16025)
!16161 = !DILabel(scope: !16025, name: "invalid_kind", file: !3, line: 7651)
!16162 = !DILocation(line: 7651, column: 2, scope: !16025)
!16163 = !DILocation(line: 7652, column: 19, scope: !16025)
!16164 = !DILocation(line: 7652, column: 3, scope: !16025)
!16165 = !DILocation(line: 7653, column: 30, scope: !16025)
!16166 = !DILocation(line: 7653, column: 3, scope: !16025)
!16167 = !DILocation(line: 7654, column: 10, scope: !16025)
!16168 = !DILocation(line: 7654, column: 3, scope: !16025)
!16169 = !DILocation(line: 7655, column: 1, scope: !16025)
!16170 = distinct !DISubprogram(name: "c_parser_omp_clause_shared", scope: !3, file: !3, line: 7661, type: !15588, scopeLine: 7662, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!16171 = !DILocalVariable(name: "parser", arg: 1, scope: !16170, file: !3, line: 7661, type: !3401)
!16172 = !DILocation(line: 7661, column: 39, scope: !16170)
!16173 = !DILocalVariable(name: "list", arg: 2, scope: !16170, file: !3, line: 7661, type: !2224)
!16174 = !DILocation(line: 7661, column: 52, scope: !16170)
!16175 = !DILocation(line: 7663, column: 40, scope: !16170)
!16176 = !DILocation(line: 7663, column: 67, scope: !16170)
!16177 = !DILocation(line: 7663, column: 10, scope: !16170)
!16178 = !DILocation(line: 7663, column: 3, scope: !16170)
!16179 = distinct !DISubprogram(name: "c_parser_omp_clause_untied", scope: !3, file: !3, line: 7670, type: !15588, scopeLine: 7671, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!16180 = !DILocalVariable(name: "parser", arg: 1, scope: !16179, file: !3, line: 7670, type: !3401)
!16181 = !DILocation(line: 7670, column: 39, scope: !16179)
!16182 = !DILocalVariable(name: "list", arg: 2, scope: !16179, file: !3, line: 7670, type: !2224)
!16183 = !DILocation(line: 7670, column: 69, scope: !16179)
!16184 = !DILocalVariable(name: "c", scope: !16179, file: !3, line: 7672, type: !2224)
!16185 = !DILocation(line: 7672, column: 8, scope: !16179)
!16186 = !DILocation(line: 7675, column: 30, scope: !16179)
!16187 = !DILocation(line: 7675, column: 3, scope: !16179)
!16188 = !DILocation(line: 7677, column: 46, scope: !16179)
!16189 = !DILocation(line: 7677, column: 25, scope: !16179)
!16190 = !DILocation(line: 7677, column: 55, scope: !16179)
!16191 = !DILocation(line: 7677, column: 7, scope: !16179)
!16192 = !DILocation(line: 7677, column: 5, scope: !16179)
!16193 = !DILocation(line: 7679, column: 26, scope: !16179)
!16194 = !DILocation(line: 7679, column: 3, scope: !16179)
!16195 = !DILocation(line: 7679, column: 24, scope: !16179)
!16196 = !DILocation(line: 7681, column: 10, scope: !16179)
!16197 = !DILocation(line: 7681, column: 3, scope: !16179)
!16198 = distinct !DISubprogram(name: "check_no_duplicate_clause", scope: !3, file: !3, line: 7179, type: !16199, scopeLine: 7181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!16199 = !DISubroutineType(types: !16200)
!16200 = !{null, !2224, !157, !2428}
!16201 = !DILocalVariable(name: "clauses", arg: 1, scope: !16198, file: !3, line: 7179, type: !2224)
!16202 = !DILocation(line: 7179, column: 33, scope: !16198)
!16203 = !DILocalVariable(name: "code", arg: 2, scope: !16198, file: !3, line: 7179, type: !157)
!16204 = !DILocation(line: 7179, column: 63, scope: !16198)
!16205 = !DILocalVariable(name: "name", arg: 3, scope: !16198, file: !3, line: 7180, type: !2428)
!16206 = !DILocation(line: 7180, column: 19, scope: !16198)
!16207 = !DILocalVariable(name: "c", scope: !16198, file: !3, line: 7182, type: !2224)
!16208 = !DILocation(line: 7182, column: 8, scope: !16198)
!16209 = !DILocation(line: 7184, column: 12, scope: !16210)
!16210 = distinct !DILexicalBlock(scope: !16198, file: !3, line: 7184, column: 3)
!16211 = !DILocation(line: 7184, column: 10, scope: !16210)
!16212 = !DILocation(line: 7184, column: 8, scope: !16210)
!16213 = !DILocation(line: 7184, column: 21, scope: !16214)
!16214 = distinct !DILexicalBlock(scope: !16210, file: !3, line: 7184, column: 3)
!16215 = !DILocation(line: 7184, column: 3, scope: !16210)
!16216 = !DILocation(line: 7185, column: 9, scope: !16217)
!16217 = distinct !DILexicalBlock(scope: !16214, file: !3, line: 7185, column: 9)
!16218 = !DILocation(line: 7185, column: 32, scope: !16217)
!16219 = !DILocation(line: 7185, column: 29, scope: !16217)
!16220 = !DILocation(line: 7185, column: 9, scope: !16214)
!16221 = !DILocalVariable(name: "loc", scope: !16222, file: !3, line: 7187, type: !2352)
!16222 = distinct !DILexicalBlock(scope: !16217, file: !3, line: 7186, column: 7)
!16223 = !DILocation(line: 7187, column: 13, scope: !16222)
!16224 = !DILocation(line: 7187, column: 19, scope: !16222)
!16225 = !DILocation(line: 7188, column: 12, scope: !16222)
!16226 = !DILocation(line: 7188, column: 41, scope: !16222)
!16227 = !DILocation(line: 7188, column: 2, scope: !16222)
!16228 = !DILocation(line: 7189, column: 2, scope: !16222)
!16229 = !DILocation(line: 7184, column: 29, scope: !16214)
!16230 = !DILocation(line: 7184, column: 27, scope: !16214)
!16231 = !DILocation(line: 7184, column: 3, scope: !16214)
!16232 = distinct !{!16232, !16215, !16233}
!16233 = !DILocation(line: 7190, column: 7, scope: !16210)
!16234 = !DILocation(line: 7191, column: 1, scope: !16198)
!16235 = distinct !DISubprogram(name: "c_parser_omp_sections_scope", scope: !3, file: !3, line: 8331, type: !14426, scopeLine: 8332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!16236 = !DILocalVariable(name: "sections_loc", arg: 1, scope: !16235, file: !3, line: 8331, type: !2352)
!16237 = !DILocation(line: 8331, column: 41, scope: !16235)
!16238 = !DILocalVariable(name: "parser", arg: 2, scope: !16235, file: !3, line: 8331, type: !3401)
!16239 = !DILocation(line: 8331, column: 65, scope: !16235)
!16240 = !DILocalVariable(name: "stmt", scope: !16235, file: !3, line: 8333, type: !2224)
!16241 = !DILocation(line: 8333, column: 8, scope: !16235)
!16242 = !DILocalVariable(name: "substmt", scope: !16235, file: !3, line: 8333, type: !2224)
!16243 = !DILocation(line: 8333, column: 14, scope: !16235)
!16244 = !DILocalVariable(name: "error_suppress", scope: !16235, file: !3, line: 8334, type: !2344)
!16245 = !DILocation(line: 8334, column: 8, scope: !16235)
!16246 = !DILocalVariable(name: "loc", scope: !16235, file: !3, line: 8335, type: !2352)
!16247 = !DILocation(line: 8335, column: 14, scope: !16235)
!16248 = !DILocation(line: 8337, column: 30, scope: !16235)
!16249 = !DILocation(line: 8337, column: 9, scope: !16235)
!16250 = !DILocation(line: 8337, column: 39, scope: !16235)
!16251 = !DILocation(line: 8337, column: 7, scope: !16235)
!16252 = !DILocation(line: 8338, column: 26, scope: !16253)
!16253 = distinct !DILexicalBlock(scope: !16235, file: !3, line: 8338, column: 7)
!16254 = !DILocation(line: 8338, column: 8, scope: !16253)
!16255 = !DILocation(line: 8338, column: 7, scope: !16235)
!16256 = !DILocation(line: 8341, column: 7, scope: !16257)
!16257 = distinct !DILexicalBlock(scope: !16253, file: !3, line: 8339, column: 5)
!16258 = !DILocation(line: 8341, column: 15, scope: !16257)
!16259 = !DILocation(line: 8341, column: 21, scope: !16257)
!16260 = !DILocation(line: 8342, column: 7, scope: !16257)
!16261 = !DILocation(line: 8345, column: 10, scope: !16235)
!16262 = !DILocation(line: 8345, column: 8, scope: !16235)
!16263 = !DILocation(line: 8347, column: 28, scope: !16264)
!16264 = distinct !DILexicalBlock(scope: !16235, file: !3, line: 8347, column: 7)
!16265 = !DILocation(line: 8347, column: 7, scope: !16264)
!16266 = !DILocation(line: 8347, column: 37, scope: !16264)
!16267 = !DILocation(line: 8347, column: 49, scope: !16264)
!16268 = !DILocation(line: 8347, column: 7, scope: !16235)
!16269 = !DILocation(line: 8349, column: 17, scope: !16270)
!16270 = distinct !DILexicalBlock(scope: !16264, file: !3, line: 8348, column: 5)
!16271 = !DILocation(line: 8349, column: 15, scope: !16270)
!16272 = !DILocation(line: 8351, column: 7, scope: !16270)
!16273 = !DILocation(line: 8353, column: 31, scope: !16274)
!16274 = distinct !DILexicalBlock(scope: !16270, file: !3, line: 8352, column: 2)
!16275 = !DILocation(line: 8353, column: 11, scope: !16274)
!16276 = !DILocation(line: 8355, column: 29, scope: !16277)
!16277 = distinct !DILexicalBlock(scope: !16274, file: !3, line: 8355, column: 8)
!16278 = !DILocation(line: 8355, column: 8, scope: !16277)
!16279 = !DILocation(line: 8355, column: 38, scope: !16277)
!16280 = !DILocation(line: 8355, column: 50, scope: !16277)
!16281 = !DILocation(line: 8355, column: 8, scope: !16274)
!16282 = !DILocation(line: 8356, column: 6, scope: !16277)
!16283 = !DILocation(line: 8357, column: 32, scope: !16284)
!16284 = distinct !DILexicalBlock(scope: !16274, file: !3, line: 8357, column: 8)
!16285 = !DILocation(line: 8357, column: 8, scope: !16284)
!16286 = !DILocation(line: 8357, column: 8, scope: !16274)
!16287 = !DILocation(line: 8358, column: 6, scope: !16284)
!16288 = !DILocation(line: 8359, column: 32, scope: !16289)
!16289 = distinct !DILexicalBlock(scope: !16274, file: !3, line: 8359, column: 8)
!16290 = !DILocation(line: 8359, column: 8, scope: !16289)
!16291 = !DILocation(line: 8359, column: 8, scope: !16274)
!16292 = !DILocation(line: 8360, column: 6, scope: !16289)
!16293 = distinct !{!16293, !16272, !16294}
!16294 = !DILocation(line: 8361, column: 2, scope: !16270)
!16295 = !DILocation(line: 8363, column: 32, scope: !16270)
!16296 = !DILocation(line: 8363, column: 17, scope: !16270)
!16297 = !DILocation(line: 8363, column: 15, scope: !16270)
!16298 = !DILocation(line: 8364, column: 17, scope: !16270)
!16299 = !DILocation(line: 8364, column: 15, scope: !16270)
!16300 = !DILocation(line: 8365, column: 7, scope: !16270)
!16301 = !DILocation(line: 8366, column: 17, scope: !16270)
!16302 = !DILocation(line: 8366, column: 7, scope: !16270)
!16303 = !DILocation(line: 8367, column: 5, scope: !16270)
!16304 = !DILocation(line: 8369, column: 3, scope: !16235)
!16305 = !DILocation(line: 8371, column: 35, scope: !16306)
!16306 = distinct !DILexicalBlock(scope: !16307, file: !3, line: 8371, column: 11)
!16307 = distinct !DILexicalBlock(scope: !16235, file: !3, line: 8370, column: 5)
!16308 = !DILocation(line: 8371, column: 11, scope: !16306)
!16309 = !DILocation(line: 8371, column: 11, scope: !16307)
!16310 = !DILocation(line: 8372, column: 2, scope: !16306)
!16311 = !DILocation(line: 8373, column: 35, scope: !16312)
!16312 = distinct !DILexicalBlock(scope: !16307, file: !3, line: 8373, column: 11)
!16313 = !DILocation(line: 8373, column: 11, scope: !16312)
!16314 = !DILocation(line: 8373, column: 11, scope: !16307)
!16315 = !DILocation(line: 8374, column: 2, scope: !16312)
!16316 = !DILocation(line: 8376, column: 34, scope: !16307)
!16317 = !DILocation(line: 8376, column: 13, scope: !16307)
!16318 = !DILocation(line: 8376, column: 43, scope: !16307)
!16319 = !DILocation(line: 8376, column: 11, scope: !16307)
!16320 = !DILocation(line: 8377, column: 32, scope: !16321)
!16321 = distinct !DILexicalBlock(scope: !16307, file: !3, line: 8377, column: 11)
!16322 = !DILocation(line: 8377, column: 11, scope: !16321)
!16323 = !DILocation(line: 8377, column: 41, scope: !16321)
!16324 = !DILocation(line: 8377, column: 53, scope: !16321)
!16325 = !DILocation(line: 8377, column: 11, scope: !16307)
!16326 = !DILocation(line: 8379, column: 29, scope: !16327)
!16327 = distinct !DILexicalBlock(scope: !16321, file: !3, line: 8378, column: 2)
!16328 = !DILocation(line: 8379, column: 4, scope: !16327)
!16329 = !DILocation(line: 8380, column: 33, scope: !16327)
!16330 = !DILocation(line: 8380, column: 4, scope: !16327)
!16331 = !DILocation(line: 8381, column: 19, scope: !16327)
!16332 = !DILocation(line: 8382, column: 2, scope: !16327)
!16333 = !DILocation(line: 8383, column: 17, scope: !16334)
!16334 = distinct !DILexicalBlock(scope: !16321, file: !3, line: 8383, column: 16)
!16335 = !DILocation(line: 8383, column: 16, scope: !16321)
!16336 = !DILocation(line: 8385, column: 14, scope: !16337)
!16337 = distinct !DILexicalBlock(scope: !16334, file: !3, line: 8384, column: 2)
!16338 = !DILocation(line: 8385, column: 4, scope: !16337)
!16339 = !DILocation(line: 8386, column: 19, scope: !16337)
!16340 = !DILocation(line: 8387, column: 2, scope: !16337)
!16341 = !DILocation(line: 8389, column: 48, scope: !16307)
!16342 = !DILocation(line: 8389, column: 17, scope: !16307)
!16343 = !DILocation(line: 8389, column: 15, scope: !16307)
!16344 = !DILocation(line: 8390, column: 17, scope: !16307)
!16345 = !DILocation(line: 8390, column: 15, scope: !16307)
!16346 = !DILocation(line: 8391, column: 7, scope: !16307)
!16347 = !DILocation(line: 8392, column: 17, scope: !16307)
!16348 = !DILocation(line: 8392, column: 7, scope: !16307)
!16349 = distinct !{!16349, !16304, !16350}
!16350 = !DILocation(line: 8393, column: 5, scope: !16235)
!16351 = !DILocation(line: 8394, column: 30, scope: !16235)
!16352 = !DILocation(line: 8394, column: 3, scope: !16235)
!16353 = !DILocation(line: 8397, column: 28, scope: !16235)
!16354 = !DILocation(line: 8397, column: 13, scope: !16235)
!16355 = !DILocation(line: 8397, column: 11, scope: !16235)
!16356 = !DILocation(line: 8399, column: 10, scope: !16235)
!16357 = !DILocation(line: 8399, column: 8, scope: !16235)
!16358 = !DILocation(line: 8400, column: 3, scope: !16235)
!16359 = !DILocation(line: 8401, column: 22, scope: !16235)
!16360 = !DILocation(line: 8401, column: 3, scope: !16235)
!16361 = !DILocation(line: 8401, column: 20, scope: !16235)
!16362 = !DILocation(line: 8402, column: 30, scope: !16235)
!16363 = !DILocation(line: 8402, column: 3, scope: !16235)
!16364 = !DILocation(line: 8402, column: 28, scope: !16235)
!16365 = !DILocation(line: 8404, column: 20, scope: !16235)
!16366 = !DILocation(line: 8404, column: 10, scope: !16235)
!16367 = !DILocation(line: 8404, column: 3, scope: !16235)
!16368 = !DILocation(line: 8405, column: 1, scope: !16235)
!16369 = distinct !DISubprogram(name: "c_parser_initializer", scope: !3, file: !3, line: 3065, type: !8622, scopeLine: 3066, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3425)
!16370 = !DILocalVariable(name: "parser", arg: 1, scope: !16369, file: !3, line: 3065, type: !3401)
!16371 = !DILocation(line: 3065, column: 33, scope: !16369)
!16372 = !DILocation(line: 3067, column: 31, scope: !16373)
!16373 = distinct !DILexicalBlock(scope: !16369, file: !3, line: 3067, column: 7)
!16374 = !DILocation(line: 3067, column: 7, scope: !16373)
!16375 = !DILocation(line: 3067, column: 7, scope: !16369)
!16376 = !DILocation(line: 3068, column: 34, scope: !16373)
!16377 = !DILocation(line: 3068, column: 12, scope: !16373)
!16378 = !DILocation(line: 3068, column: 5, scope: !16373)
!16379 = !DILocalVariable(name: "ret", scope: !16380, file: !3, line: 3071, type: !2221)
!16380 = distinct !DILexicalBlock(scope: !16373, file: !3, line: 3070, column: 5)
!16381 = !DILocation(line: 3071, column: 21, scope: !16380)
!16382 = !DILocalVariable(name: "loc", scope: !16380, file: !3, line: 3072, type: !2352)
!16383 = !DILocation(line: 3072, column: 18, scope: !16380)
!16384 = !DILocation(line: 3072, column: 45, scope: !16380)
!16385 = !DILocation(line: 3072, column: 24, scope: !16380)
!16386 = !DILocation(line: 3072, column: 54, scope: !16380)
!16387 = !DILocation(line: 3073, column: 38, scope: !16380)
!16388 = !DILocation(line: 3073, column: 13, scope: !16380)
!16389 = !DILocation(line: 3074, column: 11, scope: !16390)
!16390 = distinct !DILexicalBlock(scope: !16380, file: !3, line: 3074, column: 11)
!16391 = !DILocation(line: 3074, column: 33, scope: !16390)
!16392 = !DILocation(line: 3075, column: 4, scope: !16390)
!16393 = !DILocation(line: 3075, column: 7, scope: !16390)
!16394 = !DILocation(line: 3075, column: 29, scope: !16390)
!16395 = !DILocation(line: 3074, column: 11, scope: !16380)
!16396 = !DILocation(line: 3076, column: 43, scope: !16390)
!16397 = !DILocation(line: 3076, column: 8, scope: !16390)
!16398 = !DILocation(line: 3076, column: 2, scope: !16390)
!16399 = !DILocation(line: 3077, column: 7, scope: !16380)
!16400 = !DILocation(line: 3079, column: 1, scope: !16369)
