; ModuleID = 'cfgexpand.c'
source_filename = "cfgexpand.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.ssaexpand = type { %struct._var_map*, %struct.bitmap_head_def*, %struct.rtx_def**, %struct.bitmap_head_def* }
%struct._var_map = type { %struct.partition_def*, i32*, i32*, i32, i32, i32, i32*, %struct.VEC_tree_heap* }
%struct.partition_def = type { i32, [1 x %struct.partition_elem] }
%struct.partition_elem = type { i32, %struct.partition_elem*, i32 }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.stack_var = type { %union.tree_node*, i64, i64, i32, i64, i64, %struct.bitmap_head_def* }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void ()*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i8 (%union.tree_node*)*, void (i32, i8*, i32, i8)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)*, void (i32)*, void (%struct.rtx_def*)*, void ()*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void (i32)*, void (%union.tree_node*, %union.tree_node*)*, i32 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.pointer_set_t = type opaque
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.separate_ops = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.tree_complex = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_vector = type { %struct.tree_common, %union.tree_node* }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.tree_constructor = type { %struct.tree_common, %struct.VEC_constructor_elt_gc* }
%struct.VEC_constructor_elt_gc = type { %struct.VEC_constructor_elt_base }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.constructor_elt_d = type { %union.tree_node*, %union.tree_node* }

@tree_code_type = external dso_local constant [0 x i32], align 4
@currently_expanding_to_rtl = external dso_local global i32, align 4
@.str = private unnamed_addr constant [12 x i8] c"cfgexpand.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@current_function_decl = external dso_local global %union.tree_node*, align 8
@cfun = external dso_local global %struct.function*, align 8
@stack_vars_num = internal global i64 0, align 8, !dbg !0
@stack_vars_sorted = internal global i64* null, align 8, !dbg !3629
@.str.2 = private unnamed_addr constant [7 x i8] c"expand\00", align 1
@pass_expand = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i8 ()* null, i32 ()* @gimple_expand_cfg, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 116, i32 1068, i32 128, i32 295, i32 28, i32 3 } }, align 8, !dbg !3557
@SA = common dso_local global %struct.ssaexpand zeroinitializer, align 8, !dbg !3585
@currently_expanding_gimple_stmt = common dso_local global %union.gimple_statement_d* null, align 8, !dbg !3627
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@has_protected_decls = internal global i8 0, align 1, !dbg !3631
@has_short_buffer = internal global i8 0, align 1, !dbg !3633
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@x_rtl = external dso_local global %struct.rtl_data, align 8
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@.str.4 = private unnamed_addr constant [35 x i8] c"size of variable %q+D is too large\00", align 1
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@global_rtl = external dso_local global [11 x %struct.rtx_def*], align 16
@.str.5 = private unnamed_addr constant [18 x i8] c"./tree-ssa-live.h\00", align 1
@flag_stack_protect = external dso_local global i32, align 4
@optimize = external dso_local global i32, align 4
@stack_vars_alloc = internal global i64 0, align 8, !dbg !3635
@stack_vars = internal global %struct.stack_var* null, align 8, !dbg !3637
@frame_phase = internal global i32 0, align 4, !dbg !3639
@prologue_locator = external dso_local global i32, align 4
@targetm = external dso_local global %struct.gcc_target, align 8
@warn_stack_protect = external dso_local global i32, align 4
@.str.6 = private unnamed_addr constant [55 x i8] c"not protecting local variables: variable length buffer\00", align 1
@.str.7 = private unnamed_addr constant [58 x i8] c"not protecting function: no buffer at least %d bytes long\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@lab_rtx_for_bb = internal global %struct.pointer_map_t* null, align 8, !dbg !3641
@flag_var_tracking_assignments = external dso_local global i32, align 4
@generating_concat_p = external dso_local global i32, align 4
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.8 = private unnamed_addr constant [50 x i8] c"\0A\0A;;\0A;; Full RTL generated for this function:\0A;;\0A\00", align 1
@debug_hooks = external dso_local global %struct.gcc_debug_hooks*, align 8
@ix86_preferred_stack_boundary = external dso_local global i32, align 4
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@.str.9 = private unnamed_addr constant [34 x i8] c"Partition %lu: size %ld align %u\0A\00", align 1
@dump_flags = external dso_local global i32, align 4
@.str.10 = private unnamed_addr constant [14 x i8] c", offset %ld\0A\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.12 = private unnamed_addr constant [46 x i8] c"\0A;; Generating RTL for gimple basic block %d\0A\00", align 1
@input_location = external dso_local global i32, align 4
@rtx_class = external dso_local constant [139 x i32], align 16
@.str.13 = private unnamed_addr constant [5 x i8] c"\0A;; \00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.15 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@ix86_branch_cost = external dso_local global i32, align 4
@flag_strict_aliasing = external dso_local global i32, align 4
@mode_class = external dso_local constant [87 x i8], align 16
@mode_size = external dso_local global [87 x i8], align 16
@const_true_rtx = external dso_local global %struct.rtx_def*, align 8
@mode_inner = external dso_local constant [87 x i8], align 16
@ix86_incoming_stack_boundary = external dso_local global i32, align 4
@flag_non_call_exceptions = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @gimple_assign_rhs_to_tree(%union.gimple_statement_d* %stmt) #0 !dbg !3647 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %t = alloca %union.tree_node*, align 8
  %grhs_class = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3651, metadata !DIExpression()), !dbg !3652
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !3653, metadata !DIExpression()), !dbg !3654
  call void @llvm.dbg.declare(metadata i32* %grhs_class, metadata !3655, metadata !DIExpression()), !dbg !3656
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3657
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !3658
  %call1 = call i32 @get_gimple_rhs_class(i32 %call), !dbg !3659
  store i32 %call1, i32* %grhs_class, align 4, !dbg !3660
  %1 = load i32, i32* %grhs_class, align 4, !dbg !3661
  %cmp = icmp eq i32 %1, 1, !dbg !3663
  br i1 %cmp, label %if.then, label %if.else, !dbg !3664

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3665
  %call2 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2), !dbg !3665
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3665
  %call3 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %3), !dbg !3665
  %common = bitcast %union.tree_node* %call3 to %struct.tree_common*, !dbg !3665
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3665
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3665
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3665
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %5), !dbg !3665
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3665
  %call5 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %6), !dbg !3665
  %call6 = call %union.tree_node* @build2_stat(i32 %call2, %union.tree_node* %4, %union.tree_node* %call4, %union.tree_node* %call5), !dbg !3665
  store %union.tree_node* %call6, %union.tree_node** %t, align 8, !dbg !3666
  br label %if.end86, !dbg !3667

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %grhs_class, align 4, !dbg !3668
  %cmp7 = icmp eq i32 %7, 2, !dbg !3670
  br i1 %cmp7, label %if.then8, label %if.else15, !dbg !3671

if.then8:                                         ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3672
  %call9 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %8), !dbg !3672
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3672
  %call10 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %9), !dbg !3672
  %common11 = bitcast %union.tree_node* %call10 to %struct.tree_common*, !dbg !3672
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !3672
  %10 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !3672
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3672
  %call13 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %11), !dbg !3672
  %call14 = call %union.tree_node* @build1_stat(i32 %call9, %union.tree_node* %10, %union.tree_node* %call13), !dbg !3672
  store %union.tree_node* %call14, %union.tree_node** %t, align 8, !dbg !3673
  br label %if.end85, !dbg !3674

if.else15:                                        ; preds = %if.else
  %12 = load i32, i32* %grhs_class, align 4, !dbg !3675
  %cmp16 = icmp eq i32 %12, 3, !dbg !3677
  br i1 %cmp16, label %if.then17, label %if.else83, !dbg !3678

if.then17:                                        ; preds = %if.else15
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3679
  %call18 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %13), !dbg !3681
  store %union.tree_node* %call18, %union.tree_node** %t, align 8, !dbg !3682
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3683
  %call19 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %14), !dbg !3685
  %conv = zext i8 %call19 to i32, !dbg !3685
  %tobool = icmp ne i32 %conv, 0, !dbg !3685
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !3686

land.lhs.true:                                    ; preds = %if.then17
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3687
  %tobool20 = icmp ne %union.tree_node* %15, null, !dbg !3687
  br i1 %tobool20, label %land.lhs.true21, label %lor.lhs.false, !dbg !3687

land.lhs.true21:                                  ; preds = %land.lhs.true
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3687
  %base = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !3687
  %17 = bitcast %struct.tree_base* %base to i64*, !dbg !3687
  %bf.load = load i64, i64* %17, align 8, !dbg !3687
  %bf.clear = and i64 %bf.load, 65535, !dbg !3687
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3687
  %idxprom = sext i32 %bf.cast to i64, !dbg !3687
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3687
  %18 = load i32, i32* %arrayidx, align 4, !dbg !3687
  %cmp22 = icmp uge i32 %18, 4, !dbg !3687
  br i1 %cmp22, label %land.lhs.true24, label %lor.lhs.false, !dbg !3687

land.lhs.true24:                                  ; preds = %land.lhs.true21
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3687
  %base25 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !3687
  %20 = bitcast %struct.tree_base* %base25 to i64*, !dbg !3687
  %bf.load26 = load i64, i64* %20, align 8, !dbg !3687
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !3687
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !3687
  %idxprom29 = sext i32 %bf.cast28 to i64, !dbg !3687
  %arrayidx30 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom29, !dbg !3687
  %21 = load i32, i32* %arrayidx30, align 4, !dbg !3687
  %cmp31 = icmp ule i32 %21, 10, !dbg !3687
  br i1 %cmp31, label %land.lhs.true33, label %lor.lhs.false, !dbg !3688

land.lhs.true33:                                  ; preds = %land.lhs.true24
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3689
  %call34 = call i32 @gimple_location(%union.gimple_statement_d* %22), !dbg !3690
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3691
  %base35 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !3691
  %24 = bitcast %struct.tree_base* %base35 to i64*, !dbg !3691
  %bf.load36 = load i64, i64* %24, align 8, !dbg !3691
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !3691
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !3691
  %idxprom39 = sext i32 %bf.cast38 to i64, !dbg !3691
  %arrayidx40 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom39, !dbg !3691
  %25 = load i32, i32* %arrayidx40, align 4, !dbg !3691
  %cmp41 = icmp uge i32 %25, 4, !dbg !3691
  br i1 %cmp41, label %land.lhs.true43, label %cond.false, !dbg !3691

land.lhs.true43:                                  ; preds = %land.lhs.true33
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3691
  %base44 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !3691
  %27 = bitcast %struct.tree_base* %base44 to i64*, !dbg !3691
  %bf.load45 = load i64, i64* %27, align 8, !dbg !3691
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !3691
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !3691
  %idxprom48 = sext i32 %bf.cast47 to i64, !dbg !3691
  %arrayidx49 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom48, !dbg !3691
  %28 = load i32, i32* %arrayidx49, align 4, !dbg !3691
  %cmp50 = icmp ule i32 %28, 10, !dbg !3691
  br i1 %cmp50, label %cond.true, label %cond.false, !dbg !3691

cond.true:                                        ; preds = %land.lhs.true43
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3691
  %exp = bitcast %union.tree_node* %29 to %struct.tree_exp*, !dbg !3691
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !3691
  %30 = load i32, i32* %locus, align 8, !dbg !3691
  br label %cond.end, !dbg !3691

cond.false:                                       ; preds = %land.lhs.true43, %land.lhs.true33
  br label %cond.end, !dbg !3691

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %30, %cond.true ], [ 0, %cond.false ], !dbg !3691
  %cmp52 = icmp ne i32 %call34, %cond, !dbg !3692
  br i1 %cmp52, label %if.then81, label %lor.lhs.false, !dbg !3693

lor.lhs.false:                                    ; preds = %cond.end, %land.lhs.true24, %land.lhs.true21, %land.lhs.true, %if.then17
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3694
  %call54 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %31), !dbg !3695
  %tobool55 = icmp ne %union.tree_node* %call54, null, !dbg !3695
  br i1 %tobool55, label %land.lhs.true56, label %if.end, !dbg !3696

land.lhs.true56:                                  ; preds = %lor.lhs.false
  %32 = load i32, i32* @currently_expanding_to_rtl, align 4, !dbg !3697
  %tobool57 = icmp ne i32 %32, 0, !dbg !3697
  br i1 %tobool57, label %land.lhs.true58, label %if.end, !dbg !3698

land.lhs.true58:                                  ; preds = %land.lhs.true56
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3699
  %base59 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !3699
  %34 = bitcast %struct.tree_base* %base59 to i64*, !dbg !3699
  %bf.load60 = load i64, i64* %34, align 8, !dbg !3699
  %bf.clear61 = and i64 %bf.load60, 65535, !dbg !3699
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !3699
  %idxprom63 = sext i32 %bf.cast62 to i64, !dbg !3699
  %arrayidx64 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom63, !dbg !3699
  %35 = load i32, i32* %arrayidx64, align 4, !dbg !3699
  %cmp65 = icmp uge i32 %35, 4, !dbg !3699
  br i1 %cmp65, label %land.lhs.true67, label %if.end, !dbg !3699

land.lhs.true67:                                  ; preds = %land.lhs.true58
  %36 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3699
  %base68 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !3699
  %37 = bitcast %struct.tree_base* %base68 to i64*, !dbg !3699
  %bf.load69 = load i64, i64* %37, align 8, !dbg !3699
  %bf.clear70 = and i64 %bf.load69, 65535, !dbg !3699
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !3699
  %idxprom72 = sext i32 %bf.cast71 to i64, !dbg !3699
  %arrayidx73 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom72, !dbg !3699
  %38 = load i32, i32* %arrayidx73, align 4, !dbg !3699
  %cmp74 = icmp ule i32 %38, 10, !dbg !3699
  br i1 %cmp74, label %land.lhs.true76, label %if.end, !dbg !3700

land.lhs.true76:                                  ; preds = %land.lhs.true67
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3701
  %call77 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %39), !dbg !3702
  %40 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3703
  %call78 = call %union.tree_node** @tree_block(%union.tree_node* %40), !dbg !3703
  %41 = load %union.tree_node*, %union.tree_node** %call78, align 8, !dbg !3703
  %cmp79 = icmp ne %union.tree_node* %call77, %41, !dbg !3704
  br i1 %cmp79, label %if.then81, label %if.end, !dbg !3705

if.then81:                                        ; preds = %land.lhs.true76, %cond.end
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3706
  %call82 = call %union.tree_node* @copy_node_stat(%union.tree_node* %42), !dbg !3706
  store %union.tree_node* %call82, %union.tree_node** %t, align 8, !dbg !3707
  br label %if.end, !dbg !3708

if.end:                                           ; preds = %if.then81, %land.lhs.true76, %land.lhs.true67, %land.lhs.true58, %land.lhs.true56, %lor.lhs.false
  br label %if.end84, !dbg !3709

if.else83:                                        ; preds = %if.else15
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 89, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3710
  br label %if.end84

if.end84:                                         ; preds = %if.else83, %if.end
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.then8
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.then
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3711
  %call87 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %43), !dbg !3713
  %conv88 = zext i8 %call87 to i32, !dbg !3713
  %tobool89 = icmp ne i32 %conv88, 0, !dbg !3713
  br i1 %tobool89, label %land.lhs.true90, label %if.end114, !dbg !3714

land.lhs.true90:                                  ; preds = %if.end86
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3715
  %tobool91 = icmp ne %union.tree_node* %44, null, !dbg !3715
  br i1 %tobool91, label %land.lhs.true92, label %if.end114, !dbg !3715

land.lhs.true92:                                  ; preds = %land.lhs.true90
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3715
  %base93 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !3715
  %46 = bitcast %struct.tree_base* %base93 to i64*, !dbg !3715
  %bf.load94 = load i64, i64* %46, align 8, !dbg !3715
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !3715
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !3715
  %idxprom97 = sext i32 %bf.cast96 to i64, !dbg !3715
  %arrayidx98 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom97, !dbg !3715
  %47 = load i32, i32* %arrayidx98, align 4, !dbg !3715
  %cmp99 = icmp uge i32 %47, 4, !dbg !3715
  br i1 %cmp99, label %land.lhs.true101, label %if.end114, !dbg !3715

land.lhs.true101:                                 ; preds = %land.lhs.true92
  %48 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3715
  %base102 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !3715
  %49 = bitcast %struct.tree_base* %base102 to i64*, !dbg !3715
  %bf.load103 = load i64, i64* %49, align 8, !dbg !3715
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !3715
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !3715
  %idxprom106 = sext i32 %bf.cast105 to i64, !dbg !3715
  %arrayidx107 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom106, !dbg !3715
  %50 = load i32, i32* %arrayidx107, align 4, !dbg !3715
  %cmp108 = icmp ule i32 %50, 10, !dbg !3715
  br i1 %cmp108, label %if.then110, label %if.end114, !dbg !3716

if.then110:                                       ; preds = %land.lhs.true101
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3717
  %call111 = call i32 @gimple_location(%union.gimple_statement_d* %51), !dbg !3717
  %52 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3717
  %exp112 = bitcast %union.tree_node* %52 to %struct.tree_exp*, !dbg !3717
  %locus113 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp112, i32 0, i32 1, !dbg !3717
  store i32 %call111, i32* %locus113, align 8, !dbg !3717
  br label %if.end114, !dbg !3717

if.end114:                                        ; preds = %if.then110, %land.lhs.true101, %land.lhs.true92, %land.lhs.true90, %if.end86
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3718
  %call115 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %53), !dbg !3720
  %tobool116 = icmp ne %union.tree_node* %call115, null, !dbg !3720
  br i1 %tobool116, label %land.lhs.true117, label %if.end140, !dbg !3721

land.lhs.true117:                                 ; preds = %if.end114
  %54 = load i32, i32* @currently_expanding_to_rtl, align 4, !dbg !3722
  %tobool118 = icmp ne i32 %54, 0, !dbg !3722
  br i1 %tobool118, label %land.lhs.true119, label %if.end140, !dbg !3723

land.lhs.true119:                                 ; preds = %land.lhs.true117
  %55 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3724
  %base120 = bitcast %union.tree_node* %55 to %struct.tree_base*, !dbg !3724
  %56 = bitcast %struct.tree_base* %base120 to i64*, !dbg !3724
  %bf.load121 = load i64, i64* %56, align 8, !dbg !3724
  %bf.clear122 = and i64 %bf.load121, 65535, !dbg !3724
  %bf.cast123 = trunc i64 %bf.clear122 to i32, !dbg !3724
  %idxprom124 = sext i32 %bf.cast123 to i64, !dbg !3724
  %arrayidx125 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom124, !dbg !3724
  %57 = load i32, i32* %arrayidx125, align 4, !dbg !3724
  %cmp126 = icmp uge i32 %57, 4, !dbg !3724
  br i1 %cmp126, label %land.lhs.true128, label %if.end140, !dbg !3724

land.lhs.true128:                                 ; preds = %land.lhs.true119
  %58 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3724
  %base129 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !3724
  %59 = bitcast %struct.tree_base* %base129 to i64*, !dbg !3724
  %bf.load130 = load i64, i64* %59, align 8, !dbg !3724
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !3724
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !3724
  %idxprom133 = sext i32 %bf.cast132 to i64, !dbg !3724
  %arrayidx134 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom133, !dbg !3724
  %60 = load i32, i32* %arrayidx134, align 4, !dbg !3724
  %cmp135 = icmp ule i32 %60, 10, !dbg !3724
  br i1 %cmp135, label %if.then137, label %if.end140, !dbg !3725

if.then137:                                       ; preds = %land.lhs.true128
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3726
  %call138 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %61), !dbg !3727
  %62 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3728
  %call139 = call %union.tree_node** @tree_block(%union.tree_node* %62), !dbg !3728
  store %union.tree_node* %call138, %union.tree_node** %call139, align 8, !dbg !3729
  br label %if.end140, !dbg !3728

if.end140:                                        ; preds = %if.then137, %land.lhs.true128, %land.lhs.true119, %land.lhs.true117, %if.end114
  %63 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3730
  ret %union.tree_node* %63, !dbg !3731
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !3732 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3735, metadata !DIExpression()), !dbg !3736
  %0 = load i32, i32* %code.addr, align 4, !dbg !3737
  %idxprom = sext i32 %0 to i64, !dbg !3738
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !3738
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3738
  %conv = zext i8 %1 to i32, !dbg !3739
  ret i32 %conv, !dbg !3740
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !3741 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3745, metadata !DIExpression()), !dbg !3746
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3747, metadata !DIExpression()), !dbg !3748
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3749
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3750
  store i32 %call, i32* %code, align 4, !dbg !3748
  %1 = load i32, i32* %code, align 4, !dbg !3751
  %cmp = icmp eq i32 %1, 6, !dbg !3753
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3754

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !3755
  %cmp1 = icmp eq i32 %2, 1, !dbg !3756
  br i1 %cmp1, label %if.then, label %if.else, !dbg !3757

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3758
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !3759
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3760
  %bf.load = load i32, i32* %4, align 8, !dbg !3760
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3760
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !3761
  br label %return, !dbg !3761

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !3762
  %cmp2 = icmp eq i32 %5, 8, !dbg !3764
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !3765

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !3766
  br label %return, !dbg !3766

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3767
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !3768
  br label %return, !dbg !3768

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !3769
  ret i32 %6, !dbg !3769
}

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !3770 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3771, metadata !DIExpression()), !dbg !3772
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3773, metadata !DIExpression()), !dbg !3774
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3775
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !3776
  store i32 %call, i32* %code, align 4, !dbg !3777
  %1 = load i32, i32* %code, align 4, !dbg !3778
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !3780
  %cmp = icmp eq i32 %call1, 3, !dbg !3781
  br i1 %cmp, label %if.then, label %if.end, !dbg !3782

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3783
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !3783
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !3783
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3783
  %bf.load = load i64, i64* %3, align 8, !dbg !3783
  %bf.clear = and i64 %bf.load, 65535, !dbg !3783
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3783
  store i32 %bf.cast, i32* %code, align 4, !dbg !3784
  br label %if.end, !dbg !3785

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !3786
  ret i32 %4, !dbg !3787
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !3788 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3791, metadata !DIExpression()), !dbg !3792
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3793
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !3794
  ret %union.tree_node* %call, !dbg !3795
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !3796 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3797, metadata !DIExpression()), !dbg !3798
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3799
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !3800
  ret %union.tree_node* %call, !dbg !3801
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !3802 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3803, metadata !DIExpression()), !dbg !3804
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3805
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !3807
  %cmp = icmp uge i32 %call, 3, !dbg !3808
  br i1 %cmp, label %if.then, label %if.else, !dbg !3809

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3810
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !3811
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !3812
  br label %return, !dbg !3812

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3813
  br label %return, !dbg !3813

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3814
  ret %union.tree_node* %2, !dbg !3814
}

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) #0 !dbg !3815 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3818, metadata !DIExpression()), !dbg !3819
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3820
  %call = call i32 @gimple_location(%union.gimple_statement_d* %0), !dbg !3821
  %cmp = icmp ne i32 %call, 0, !dbg !3822
  %conv = zext i1 %cmp to i32, !dbg !3822
  %conv1 = trunc i32 %conv to i8, !dbg !3821
  ret i8 %conv1, !dbg !3823
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !3824 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3827, metadata !DIExpression()), !dbg !3828
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3829
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3830
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !3831
  %1 = load i32, i32* %location, align 8, !dbg !3831
  ret i32 %1, !dbg !3832
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_block(%union.gimple_statement_d* %g) #0 !dbg !3833 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3834, metadata !DIExpression()), !dbg !3835
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3836
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3837
  %block = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 5, !dbg !3838
  %1 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3838
  ret %union.tree_node* %1, !dbg !3839
}

declare dso_local %union.tree_node** @tree_block(%union.tree_node*) #2

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @estimated_stack_frame_size() #0 !dbg !3840 {
entry:
  %size = alloca i64, align 8
  %i = alloca i64, align 8
  %t = alloca %union.tree_node*, align 8
  %outer_block = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata i64* %size, metadata !3843, metadata !DIExpression()), !dbg !3844
  store i64 0, i64* %size, align 8, !dbg !3844
  call void @llvm.dbg.declare(metadata i64* %i, metadata !3845, metadata !DIExpression()), !dbg !3846
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !3847, metadata !DIExpression()), !dbg !3848
  call void @llvm.dbg.declare(metadata %union.tree_node** %outer_block, metadata !3849, metadata !DIExpression()), !dbg !3850
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3851
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !3851
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !3851
  %1 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !3851
  store %union.tree_node* %1, %union.tree_node** %outer_block, align 8, !dbg !3850
  call void @init_vars_expansion(), !dbg !3852
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3853
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3853
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 9, !dbg !3855
  %3 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !3855
  store %union.tree_node* %3, %union.tree_node** %t, align 8, !dbg !3856
  br label %for.cond, !dbg !3857

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3858
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !3860
  br i1 %tobool, label %for.body, label %for.end, !dbg !3860

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !3861, metadata !DIExpression()), !dbg !3863
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3864
  %list = bitcast %union.tree_node* %5 to %struct.tree_list*, !dbg !3864
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !3864
  %6 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3864
  store %union.tree_node* %6, %union.tree_node** %var, align 8, !dbg !3863
  %7 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3865
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3865
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !3865
  %bf.load = load i64, i64* %8, align 8, !dbg !3865
  %bf.lshr = lshr i64 %bf.load, 24, !dbg !3865
  %bf.clear = and i64 %bf.lshr, 1, !dbg !3865
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3865
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !3865
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3867

if.then:                                          ; preds = %for.body
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3868
  %call = call i64 @expand_one_var(%union.tree_node* %9, i8 zeroext 1, i8 zeroext 0), !dbg !3869
  %10 = load i64, i64* %size, align 8, !dbg !3870
  %add = add nsw i64 %10, %call, !dbg !3870
  store i64 %add, i64* %size, align 8, !dbg !3870
  br label %if.end, !dbg !3871

if.end:                                           ; preds = %if.then, %for.body
  %11 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3872
  %base2 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !3872
  %12 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3872
  %bf.load3 = load i64, i64* %12, align 8, !dbg !3873
  %bf.clear4 = and i64 %bf.load3, -16777217, !dbg !3873
  %bf.set = or i64 %bf.clear4, 16777216, !dbg !3873
  store i64 %bf.set, i64* %12, align 8, !dbg !3873
  br label %for.inc, !dbg !3874

for.inc:                                          ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3875
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !3875
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3875
  %14 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3875
  store %union.tree_node* %14, %union.tree_node** %t, align 8, !dbg !3876
  br label %for.cond, !dbg !3877, !llvm.loop !3878

for.end:                                          ; preds = %for.cond
  %15 = load %union.tree_node*, %union.tree_node** %outer_block, align 8, !dbg !3880
  %call5 = call i64 @account_used_vars_for_block(%union.tree_node* %15, i8 zeroext 1), !dbg !3881
  %16 = load i64, i64* %size, align 8, !dbg !3882
  %add6 = add nsw i64 %16, %call5, !dbg !3882
  store i64 %add6, i64* %size, align 8, !dbg !3882
  %17 = load i64, i64* @stack_vars_num, align 8, !dbg !3883
  %cmp = icmp ugt i64 %17, 0, !dbg !3885
  br i1 %cmp, label %if.then7, label %if.end16, !dbg !3886

if.then7:                                         ; preds = %for.end
  %18 = load i64, i64* @stack_vars_num, align 8, !dbg !3887
  %mul = mul i64 8, %18, !dbg !3887
  %call8 = call i8* @xmalloc(i64 %mul), !dbg !3887
  %19 = bitcast i8* %call8 to i64*, !dbg !3887
  store i64* %19, i64** @stack_vars_sorted, align 8, !dbg !3889
  store i64 0, i64* %i, align 8, !dbg !3890
  br label %for.cond9, !dbg !3892

for.cond9:                                        ; preds = %for.inc12, %if.then7
  %20 = load i64, i64* %i, align 8, !dbg !3893
  %21 = load i64, i64* @stack_vars_num, align 8, !dbg !3895
  %cmp10 = icmp ult i64 %20, %21, !dbg !3896
  br i1 %cmp10, label %for.body11, label %for.end13, !dbg !3897

for.body11:                                       ; preds = %for.cond9
  %22 = load i64, i64* %i, align 8, !dbg !3898
  %23 = load i64*, i64** @stack_vars_sorted, align 8, !dbg !3899
  %24 = load i64, i64* %i, align 8, !dbg !3900
  %arrayidx = getelementptr inbounds i64, i64* %23, i64 %24, !dbg !3899
  store i64 %22, i64* %arrayidx, align 8, !dbg !3901
  br label %for.inc12, !dbg !3899

for.inc12:                                        ; preds = %for.body11
  %25 = load i64, i64* %i, align 8, !dbg !3902
  %inc = add i64 %25, 1, !dbg !3902
  store i64 %inc, i64* %i, align 8, !dbg !3902
  br label %for.cond9, !dbg !3903, !llvm.loop !3904

for.end13:                                        ; preds = %for.cond9
  %call14 = call i64 @account_stack_vars(), !dbg !3906
  %26 = load i64, i64* %size, align 8, !dbg !3907
  %add15 = add nsw i64 %26, %call14, !dbg !3907
  store i64 %add15, i64* %size, align 8, !dbg !3907
  call void @fini_vars_expansion(), !dbg !3908
  br label %if.end16, !dbg !3909

if.end16:                                         ; preds = %for.end13, %for.end
  %27 = load i64, i64* %size, align 8, !dbg !3910
  ret i64 %27, !dbg !3911
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_vars_expansion() #0 !dbg !3912 {
entry:
  %t = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !3915, metadata !DIExpression()), !dbg !3916
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3917
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3917
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 9, !dbg !3919
  %1 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !3919
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !3920
  br label %for.cond, !dbg !3921

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3922
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !3924
  br i1 %tobool, label %for.body, label %for.end, !dbg !3924

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3925
  %list = bitcast %union.tree_node* %3 to %struct.tree_list*, !dbg !3925
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !3925
  %4 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !3925
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !3925
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !3925
  %bf.load = load i64, i64* %5, align 8, !dbg !3926
  %bf.clear = and i64 %bf.load, -16777217, !dbg !3926
  %bf.set = or i64 %bf.clear, 16777216, !dbg !3926
  store i64 %bf.set, i64* %5, align 8, !dbg !3926
  br label %for.inc, !dbg !3925

for.inc:                                          ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !3927
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !3927
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !3927
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3927
  store %union.tree_node* %7, %union.tree_node** %t, align 8, !dbg !3928
  br label %for.cond, !dbg !3929, !llvm.loop !3930

for.end:                                          ; preds = %for.cond
  %8 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3932
  %decl_common = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !3932
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !3932
  %9 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !3932
  call void @clear_tree_used(%union.tree_node* %9), !dbg !3933
  store i8 0, i8* @has_protected_decls, align 1, !dbg !3934
  store i8 0, i8* @has_short_buffer, align 1, !dbg !3935
  ret void, !dbg !3936
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @expand_one_var(%union.tree_node* %var, i8 zeroext %toplevel, i8 zeroext %really_expand) #0 !dbg !3937 {
entry:
  %retval = alloca i64, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %toplevel.addr = alloca i8, align 1
  %really_expand.addr = alloca i8, align 1
  %origvar = alloca %union.tree_node*, align 8
  %align = alloca i32, align 4
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3940, metadata !DIExpression()), !dbg !3941
  store i8 %toplevel, i8* %toplevel.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %toplevel.addr, metadata !3942, metadata !DIExpression()), !dbg !3943
  store i8 %really_expand, i8* %really_expand.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %really_expand.addr, metadata !3944, metadata !DIExpression()), !dbg !3945
  call void @llvm.dbg.declare(metadata %union.tree_node** %origvar, metadata !3946, metadata !DIExpression()), !dbg !3947
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3948
  store %union.tree_node* %0, %union.tree_node** %origvar, align 8, !dbg !3947
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3949
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3949
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3949
  %bf.load = load i64, i64* %2, align 8, !dbg !3949
  %bf.clear = and i64 %bf.load, 65535, !dbg !3949
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3949
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !3949
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3949

cond.true:                                        ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3949
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !3949
  %var1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !3949
  %4 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !3949
  br label %cond.end, !dbg !3949

cond.false:                                       ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3949
  br label %cond.end, !dbg !3949

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %4, %cond.true ], [ %5, %cond.false ], !dbg !3949
  store %union.tree_node* %cond, %union.tree_node** %var.addr, align 8, !dbg !3950
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3951
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !3951
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3951
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3951
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !3953
  %cmp2 = icmp ne %union.tree_node* %7, %8, !dbg !3954
  br i1 %cmp2, label %land.lhs.true, label %if.end60, !dbg !3955

land.lhs.true:                                    ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3956
  %base3 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3956
  %10 = bitcast %struct.tree_base* %base3 to i64*, !dbg !3956
  %bf.load4 = load i64, i64* %10, align 8, !dbg !3956
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !3956
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !3956
  %cmp7 = icmp eq i32 %bf.cast6, 32, !dbg !3957
  br i1 %cmp7, label %if.then, label %if.end60, !dbg !3958

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %align, metadata !3959, metadata !DIExpression()), !dbg !3961
  %11 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3962
  %base8 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !3962
  %12 = bitcast %struct.tree_base* %base8 to i64*, !dbg !3962
  %bf.load9 = load i64, i64* %12, align 8, !dbg !3962
  %bf.lshr = lshr i64 %bf.load9, 26, !dbg !3962
  %bf.clear10 = and i64 %bf.lshr, 1, !dbg !3962
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !3962
  %tobool = icmp ne i32 %bf.cast11, 0, !dbg !3962
  br i1 %tobool, label %if.then17, label %lor.lhs.false, !dbg !3964

lor.lhs.false:                                    ; preds = %if.then
  %13 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3965
  %decl_common = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !3965
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3965
  %14 = bitcast i40* %decl_flag_1 to i64*, !dbg !3965
  %bf.load12 = load i64, i64* %14, align 8, !dbg !3965
  %bf.lshr13 = lshr i64 %bf.load12, 25, !dbg !3965
  %bf.clear14 = and i64 %bf.lshr13, 1, !dbg !3965
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !3965
  %tobool16 = icmp ne i32 %bf.cast15, 0, !dbg !3965
  br i1 %tobool16, label %if.then17, label %if.else, !dbg !3966

if.then17:                                        ; preds = %lor.lhs.false, %if.then
  %15 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3967
  %common18 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !3967
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !3967
  %16 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !3967
  %17 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3967
  %common20 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !3967
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !3967
  %18 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !3967
  %base22 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !3967
  %19 = bitcast %struct.tree_base* %base22 to i64*, !dbg !3967
  %bf.load23 = load i64, i64* %19, align 8, !dbg !3967
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !3967
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !3967
  %cmp26 = icmp eq i32 %bf.cast25, 14, !dbg !3967
  br i1 %cmp26, label %cond.true27, label %cond.false30, !dbg !3967

cond.true27:                                      ; preds = %if.then17
  %20 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3967
  %common28 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !3967
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !3967
  %21 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !3967
  %call = call i32 @vector_type_mode(%union.tree_node* %21), !dbg !3967
  br label %cond.end37, !dbg !3967

cond.false30:                                     ; preds = %if.then17
  %22 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3967
  %common31 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !3967
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !3967
  %23 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !3967
  %type33 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !3967
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type33, i32 0, i32 6, !dbg !3967
  %bf.load34 = load i32, i32* %mode, align 4, !dbg !3967
  %bf.lshr35 = lshr i32 %bf.load34, 16, !dbg !3967
  %bf.clear36 = and i32 %bf.lshr35, 255, !dbg !3967
  br label %cond.end37, !dbg !3967

cond.end37:                                       ; preds = %cond.false30, %cond.true27
  %cond38 = phi i32 [ %call, %cond.true27 ], [ %bf.clear36, %cond.false30 ], !dbg !3967
  %24 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3967
  %common39 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !3967
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !3967
  %25 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !3967
  %type41 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !3967
  %align42 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type41, i32 0, i32 7, !dbg !3967
  %26 = load i32, i32* %align42, align 8, !dbg !3967
  %call43 = call i32 @ix86_minimum_alignment(%union.tree_node* %16, i32 %cond38, i32 %26), !dbg !3967
  store i32 %call43, i32* %align, align 4, !dbg !3968
  br label %if.end, !dbg !3969

if.else:                                          ; preds = %lor.lhs.false
  %27 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3970
  %28 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3970
  %decl_common44 = bitcast %union.tree_node* %28 to %struct.tree_decl_common*, !dbg !3970
  %mode45 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common44, i32 0, i32 2, !dbg !3970
  %29 = bitcast i40* %mode45 to i64*, !dbg !3970
  %bf.load46 = load i64, i64* %29, align 8, !dbg !3970
  %bf.clear47 = and i64 %bf.load46, 255, !dbg !3970
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !3970
  %30 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3970
  %decl_common49 = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !3970
  %align50 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common49, i32 0, i32 3, !dbg !3970
  %31 = load i32, i32* %align50, align 8, !dbg !3970
  %call51 = call i32 @ix86_minimum_alignment(%union.tree_node* %27, i32 %bf.cast48, i32 %31), !dbg !3970
  store i32 %call51, i32* %align, align 4, !dbg !3971
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end37
  %32 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !3972
  %33 = load i32, i32* %align, align 4, !dbg !3974
  %cmp52 = icmp ult i32 %32, %33, !dbg !3975
  br i1 %cmp52, label %if.then53, label %if.end59, !dbg !3976

if.then53:                                        ; preds = %if.end
  %34 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 46), align 2, !dbg !3977
  %tobool54 = icmp ne i8 %34, 0, !dbg !3977
  br i1 %tobool54, label %cond.true55, label %cond.false56, !dbg !3977

cond.true55:                                      ; preds = %if.then53
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 944, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3977
  br label %cond.end57, !dbg !3977

cond.false56:                                     ; preds = %if.then53
  br label %cond.end57, !dbg !3977

cond.end57:                                       ; preds = %cond.false56, %cond.true55
  %cond58 = phi i32 [ 0, %cond.true55 ], [ 0, %cond.false56 ], !dbg !3977
  %35 = load i32, i32* %align, align 4, !dbg !3979
  store i32 %35, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !3980
  br label %if.end59, !dbg !3981

if.end59:                                         ; preds = %cond.end57, %if.end
  br label %if.end60, !dbg !3982

if.end60:                                         ; preds = %if.end59, %land.lhs.true, %cond.end
  %36 = load %union.tree_node*, %union.tree_node** %origvar, align 8, !dbg !3983
  %base61 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !3983
  %37 = bitcast %struct.tree_base* %base61 to i64*, !dbg !3983
  %bf.load62 = load i64, i64* %37, align 8, !dbg !3983
  %bf.clear63 = and i64 %bf.load62, 65535, !dbg !3983
  %bf.cast64 = trunc i64 %bf.clear63 to i32, !dbg !3983
  %cmp65 = icmp eq i32 %bf.cast64, 141, !dbg !3985
  br i1 %cmp65, label %if.then66, label %if.end109, !dbg !3986

if.then66:                                        ; preds = %if.end60
  %38 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3987
  %base67 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !3987
  %39 = bitcast %struct.tree_base* %base67 to i64*, !dbg !3987
  %bf.load68 = load i64, i64* %39, align 8, !dbg !3987
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !3987
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !3987
  %cmp71 = icmp ne i32 %bf.cast70, 32, !dbg !3987
  br i1 %cmp71, label %cond.false106, label %lor.lhs.false72, !dbg !3987

lor.lhs.false72:                                  ; preds = %if.then66
  %40 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3987
  %decl_common73 = bitcast %union.tree_node* %40 to %struct.tree_decl_common*, !dbg !3987
  %decl_flag_174 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common73, i32 0, i32 2, !dbg !3987
  %41 = bitcast i40* %decl_flag_174 to i64*, !dbg !3987
  %bf.load75 = load i64, i64* %41, align 8, !dbg !3987
  %bf.lshr76 = lshr i64 %bf.load75, 25, !dbg !3987
  %bf.clear77 = and i64 %bf.lshr76, 1, !dbg !3987
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !3987
  %tobool79 = icmp ne i32 %bf.cast78, 0, !dbg !3987
  br i1 %tobool79, label %cond.true105, label %land.lhs.true80, !dbg !3987

land.lhs.true80:                                  ; preds = %lor.lhs.false72
  %42 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3987
  %decl_common81 = bitcast %union.tree_node* %42 to %struct.tree_decl_common*, !dbg !3987
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common81, i32 0, i32 2, !dbg !3987
  %43 = bitcast i40* %decl_flag_2 to i64*, !dbg !3987
  %bf.load82 = load i64, i64* %43, align 8, !dbg !3987
  %bf.lshr83 = lshr i64 %bf.load82, 26, !dbg !3987
  %bf.clear84 = and i64 %bf.lshr83, 1, !dbg !3987
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !3987
  %tobool86 = icmp ne i32 %bf.cast85, 0, !dbg !3987
  br i1 %tobool86, label %cond.true105, label %land.lhs.true87, !dbg !3987

land.lhs.true87:                                  ; preds = %land.lhs.true80
  %44 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3987
  %base88 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !3987
  %45 = bitcast %struct.tree_base* %base88 to i64*, !dbg !3987
  %bf.load89 = load i64, i64* %45, align 8, !dbg !3987
  %bf.lshr90 = lshr i64 %bf.load89, 26, !dbg !3987
  %bf.clear91 = and i64 %bf.lshr90, 1, !dbg !3987
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !3987
  %tobool93 = icmp ne i32 %bf.cast92, 0, !dbg !3987
  br i1 %tobool93, label %cond.true105, label %land.lhs.true94, !dbg !3987

land.lhs.true94:                                  ; preds = %land.lhs.true87
  %46 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3987
  %common95 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !3987
  %type96 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common95, i32 0, i32 2, !dbg !3987
  %47 = load %union.tree_node*, %union.tree_node** %type96, align 8, !dbg !3987
  %48 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !3987
  %cmp97 = icmp ne %union.tree_node* %47, %48, !dbg !3987
  br i1 %cmp97, label %land.lhs.true98, label %cond.true105, !dbg !3987

land.lhs.true98:                                  ; preds = %land.lhs.true94
  %49 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3987
  %decl_with_vis = bitcast %union.tree_node* %49 to %struct.tree_decl_with_vis*, !dbg !3987
  %hard_register = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !3987
  %50 = bitcast i24* %hard_register to i32*, !dbg !3987
  %bf.load99 = load i32, i32* %50, align 8, !dbg !3987
  %bf.lshr100 = lshr i32 %bf.load99, 1, !dbg !3987
  %bf.clear101 = and i32 %bf.lshr100, 1, !dbg !3987
  %tobool102 = icmp ne i32 %bf.clear101, 0, !dbg !3987
  br i1 %tobool102, label %cond.true105, label %land.lhs.true103, !dbg !3987

land.lhs.true103:                                 ; preds = %land.lhs.true98
  %51 = load i8, i8* %really_expand.addr, align 1, !dbg !3987
  %conv = zext i8 %51 to i32, !dbg !3987
  %tobool104 = icmp ne i32 %conv, 0, !dbg !3987
  br i1 %tobool104, label %cond.false106, label %cond.true105, !dbg !3987

cond.true105:                                     ; preds = %land.lhs.true103, %land.lhs.true98, %land.lhs.true94, %land.lhs.true87, %land.lhs.true80, %lor.lhs.false72
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 957, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3987
  br label %cond.end107, !dbg !3987

cond.false106:                                    ; preds = %land.lhs.true103, %if.then66
  br label %cond.end107, !dbg !3987

cond.end107:                                      ; preds = %cond.false106, %cond.true105
  %cond108 = phi i32 [ 0, %cond.true105 ], [ 0, %cond.false106 ], !dbg !3987
  br label %if.end109, !dbg !3989

if.end109:                                        ; preds = %cond.end107, %if.end60
  %52 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3990
  %base110 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !3990
  %53 = bitcast %struct.tree_base* %base110 to i64*, !dbg !3990
  %bf.load111 = load i64, i64* %53, align 8, !dbg !3990
  %bf.clear112 = and i64 %bf.load111, 65535, !dbg !3990
  %bf.cast113 = trunc i64 %bf.clear112 to i32, !dbg !3990
  %cmp114 = icmp ne i32 %bf.cast113, 32, !dbg !3992
  br i1 %cmp114, label %land.lhs.true116, label %if.else124, !dbg !3993

land.lhs.true116:                                 ; preds = %if.end109
  %54 = load %union.tree_node*, %union.tree_node** %origvar, align 8, !dbg !3994
  %base117 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !3994
  %55 = bitcast %struct.tree_base* %base117 to i64*, !dbg !3994
  %bf.load118 = load i64, i64* %55, align 8, !dbg !3994
  %bf.clear119 = and i64 %bf.load118, 65535, !dbg !3994
  %bf.cast120 = trunc i64 %bf.clear119 to i32, !dbg !3994
  %cmp121 = icmp ne i32 %bf.cast120, 141, !dbg !3995
  br i1 %cmp121, label %if.then123, label %if.else124, !dbg !3996

if.then123:                                       ; preds = %land.lhs.true116
  br label %if.end231, !dbg !3996

if.else124:                                       ; preds = %land.lhs.true116, %if.end109
  %56 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3997
  %decl_common125 = bitcast %union.tree_node* %56 to %struct.tree_decl_common*, !dbg !3997
  %decl_flag_1126 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common125, i32 0, i32 2, !dbg !3997
  %57 = bitcast i40* %decl_flag_1126 to i64*, !dbg !3997
  %bf.load127 = load i64, i64* %57, align 8, !dbg !3997
  %bf.lshr128 = lshr i64 %bf.load127, 25, !dbg !3997
  %bf.clear129 = and i64 %bf.lshr128, 1, !dbg !3997
  %bf.cast130 = trunc i64 %bf.clear129 to i32, !dbg !3997
  %tobool131 = icmp ne i32 %bf.cast130, 0, !dbg !3997
  br i1 %tobool131, label %if.then132, label %if.else133, !dbg !3999

if.then132:                                       ; preds = %if.else124
  br label %if.end230, !dbg !3999

if.else133:                                       ; preds = %if.else124
  %58 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4000
  %decl_common134 = bitcast %union.tree_node* %58 to %struct.tree_decl_common*, !dbg !4000
  %decl_flag_2135 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common134, i32 0, i32 2, !dbg !4000
  %59 = bitcast i40* %decl_flag_2135 to i64*, !dbg !4000
  %bf.load136 = load i64, i64* %59, align 8, !dbg !4000
  %bf.lshr137 = lshr i64 %bf.load136, 26, !dbg !4000
  %bf.clear138 = and i64 %bf.lshr137, 1, !dbg !4000
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !4000
  %tobool140 = icmp ne i32 %bf.cast139, 0, !dbg !4000
  br i1 %tobool140, label %if.then141, label %if.else142, !dbg !4002

if.then141:                                       ; preds = %if.else133
  br label %if.end229, !dbg !4002

if.else142:                                       ; preds = %if.else133
  %60 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4003
  %base143 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !4003
  %61 = bitcast %struct.tree_base* %base143 to i64*, !dbg !4003
  %bf.load144 = load i64, i64* %61, align 8, !dbg !4003
  %bf.lshr145 = lshr i64 %bf.load144, 26, !dbg !4003
  %bf.clear146 = and i64 %bf.lshr145, 1, !dbg !4003
  %bf.cast147 = trunc i64 %bf.clear146 to i32, !dbg !4003
  %tobool148 = icmp ne i32 %bf.cast147, 0, !dbg !4003
  br i1 %tobool148, label %if.then149, label %if.else150, !dbg !4005

if.then149:                                       ; preds = %if.else142
  br label %if.end228, !dbg !4005

if.else150:                                       ; preds = %if.else142
  %62 = load %union.tree_node*, %union.tree_node** %origvar, align 8, !dbg !4006
  %base151 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !4006
  %63 = bitcast %struct.tree_base* %base151 to i64*, !dbg !4006
  %bf.load152 = load i64, i64* %63, align 8, !dbg !4006
  %bf.clear153 = and i64 %bf.load152, 65535, !dbg !4006
  %bf.cast154 = trunc i64 %bf.clear153 to i32, !dbg !4006
  %cmp155 = icmp ne i32 %bf.cast154, 141, !dbg !4008
  br i1 %cmp155, label %land.lhs.true157, label %if.else169, !dbg !4009

land.lhs.true157:                                 ; preds = %if.else150
  %64 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4010
  %base158 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !4010
  %65 = bitcast %struct.tree_base* %base158 to i64*, !dbg !4010
  %bf.load159 = load i64, i64* %65, align 8, !dbg !4010
  %bf.clear160 = and i64 %bf.load159, 65535, !dbg !4010
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !4010
  %idxprom = zext i32 %bf.cast161 to i64, !dbg !4010
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !4010
  %arrayidx162 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !4010
  %66 = load i8, i8* %arrayidx162, align 1, !dbg !4010
  %conv163 = zext i8 %66 to i32, !dbg !4010
  %tobool164 = icmp ne i32 %conv163, 0, !dbg !4010
  br i1 %tobool164, label %land.lhs.true165, label %if.else169, !dbg !4010

land.lhs.true165:                                 ; preds = %land.lhs.true157
  %67 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4010
  %decl_with_rtl = bitcast %union.tree_node* %67 to %struct.tree_decl_with_rtl*, !dbg !4010
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !4010
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !4010
  %cmp166 = icmp ne %struct.rtx_def* %68, null, !dbg !4010
  br i1 %cmp166, label %if.then168, label %if.else169, !dbg !4011

if.then168:                                       ; preds = %land.lhs.true165
  br label %if.end227, !dbg !4011

if.else169:                                       ; preds = %land.lhs.true165, %land.lhs.true157, %if.else150
  %69 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4012
  %common170 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !4012
  %type171 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common170, i32 0, i32 2, !dbg !4012
  %70 = load %union.tree_node*, %union.tree_node** %type171, align 8, !dbg !4012
  %71 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !4014
  %cmp172 = icmp eq %union.tree_node* %70, %71, !dbg !4015
  br i1 %cmp172, label %if.then174, label %if.else178, !dbg !4016

if.then174:                                       ; preds = %if.else169
  %72 = load i8, i8* %really_expand.addr, align 1, !dbg !4017
  %tobool175 = icmp ne i8 %72, 0, !dbg !4017
  br i1 %tobool175, label %if.then176, label %if.end177, !dbg !4020

if.then176:                                       ; preds = %if.then174
  %73 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4021
  call void @expand_one_error_var(%union.tree_node* %73), !dbg !4022
  br label %if.end177, !dbg !4022

if.end177:                                        ; preds = %if.then176, %if.then174
  br label %if.end226, !dbg !4023

if.else178:                                       ; preds = %if.else169
  %74 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4024
  %base179 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !4024
  %75 = bitcast %struct.tree_base* %base179 to i64*, !dbg !4024
  %bf.load180 = load i64, i64* %75, align 8, !dbg !4024
  %bf.clear181 = and i64 %bf.load180, 65535, !dbg !4024
  %bf.cast182 = trunc i64 %bf.clear181 to i32, !dbg !4024
  %cmp183 = icmp eq i32 %bf.cast182, 32, !dbg !4026
  br i1 %cmp183, label %land.lhs.true185, label %if.else196, !dbg !4027

land.lhs.true185:                                 ; preds = %if.else178
  %76 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4028
  %decl_with_vis186 = bitcast %union.tree_node* %76 to %struct.tree_decl_with_vis*, !dbg !4028
  %hard_register187 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis186, i32 0, i32 4, !dbg !4028
  %77 = bitcast i24* %hard_register187 to i32*, !dbg !4028
  %bf.load188 = load i32, i32* %77, align 8, !dbg !4028
  %bf.lshr189 = lshr i32 %bf.load188, 1, !dbg !4028
  %bf.clear190 = and i32 %bf.lshr189, 1, !dbg !4028
  %tobool191 = icmp ne i32 %bf.clear190, 0, !dbg !4028
  br i1 %tobool191, label %if.then192, label %if.else196, !dbg !4029

if.then192:                                       ; preds = %land.lhs.true185
  %78 = load i8, i8* %really_expand.addr, align 1, !dbg !4030
  %tobool193 = icmp ne i8 %78, 0, !dbg !4030
  br i1 %tobool193, label %if.then194, label %if.end195, !dbg !4033

if.then194:                                       ; preds = %if.then192
  %79 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4034
  call void @expand_one_hard_reg_var(%union.tree_node* %79), !dbg !4035
  br label %if.end195, !dbg !4035

if.end195:                                        ; preds = %if.then194, %if.then192
  br label %if.end225, !dbg !4036

if.else196:                                       ; preds = %land.lhs.true185, %if.else178
  %80 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4037
  %call197 = call zeroext i8 @use_register_for_decl(%union.tree_node* %80), !dbg !4039
  %tobool198 = icmp ne i8 %call197, 0, !dbg !4039
  br i1 %tobool198, label %if.then199, label %if.else203, !dbg !4040

if.then199:                                       ; preds = %if.else196
  %81 = load i8, i8* %really_expand.addr, align 1, !dbg !4041
  %tobool200 = icmp ne i8 %81, 0, !dbg !4041
  br i1 %tobool200, label %if.then201, label %if.end202, !dbg !4044

if.then201:                                       ; preds = %if.then199
  %82 = load %union.tree_node*, %union.tree_node** %origvar, align 8, !dbg !4045
  call void @expand_one_register_var(%union.tree_node* %82), !dbg !4046
  br label %if.end202, !dbg !4046

if.end202:                                        ; preds = %if.then201, %if.then199
  br label %if.end224, !dbg !4047

if.else203:                                       ; preds = %if.else196
  %83 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4048
  %decl_common204 = bitcast %union.tree_node* %83 to %struct.tree_decl_common*, !dbg !4048
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common204, i32 0, i32 4, !dbg !4048
  %84 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4048
  %call205 = call i32 @host_integerp(%union.tree_node* %84, i32 1), !dbg !4050
  %tobool206 = icmp ne i32 %call205, 0, !dbg !4050
  br i1 %tobool206, label %if.else211, label %if.then207, !dbg !4051

if.then207:                                       ; preds = %if.else203
  %85 = load i8, i8* %really_expand.addr, align 1, !dbg !4052
  %tobool208 = icmp ne i8 %85, 0, !dbg !4052
  br i1 %tobool208, label %if.then209, label %if.end210, !dbg !4055

if.then209:                                       ; preds = %if.then207
  %86 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4056
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0), %union.tree_node* %86), !dbg !4058
  %87 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4059
  call void @expand_one_error_var(%union.tree_node* %87), !dbg !4060
  br label %if.end210, !dbg !4061

if.end210:                                        ; preds = %if.then209, %if.then207
  br label %if.end223, !dbg !4062

if.else211:                                       ; preds = %if.else203
  %88 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4063
  %89 = load i8, i8* %toplevel.addr, align 1, !dbg !4065
  %call212 = call zeroext i8 @defer_stack_allocation(%union.tree_node* %88, i8 zeroext %89), !dbg !4066
  %tobool213 = icmp ne i8 %call212, 0, !dbg !4066
  br i1 %tobool213, label %if.then214, label %if.else215, !dbg !4067

if.then214:                                       ; preds = %if.else211
  %90 = load %union.tree_node*, %union.tree_node** %origvar, align 8, !dbg !4068
  call void @add_stack_var(%union.tree_node* %90), !dbg !4069
  br label %if.end222, !dbg !4069

if.else215:                                       ; preds = %if.else211
  %91 = load i8, i8* %really_expand.addr, align 1, !dbg !4070
  %tobool216 = icmp ne i8 %91, 0, !dbg !4070
  br i1 %tobool216, label %if.then217, label %if.end218, !dbg !4073

if.then217:                                       ; preds = %if.else215
  %92 = load %union.tree_node*, %union.tree_node** %origvar, align 8, !dbg !4074
  call void @expand_one_stack_var(%union.tree_node* %92), !dbg !4075
  br label %if.end218, !dbg !4075

if.end218:                                        ; preds = %if.then217, %if.else215
  %93 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4076
  %decl_common219 = bitcast %union.tree_node* %93 to %struct.tree_decl_common*, !dbg !4076
  %size_unit220 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common219, i32 0, i32 4, !dbg !4076
  %94 = load %union.tree_node*, %union.tree_node** %size_unit220, align 8, !dbg !4076
  %call221 = call i64 @tree_low_cst(%union.tree_node* %94, i32 1), !dbg !4077
  store i64 %call221, i64* %retval, align 8, !dbg !4078
  br label %return, !dbg !4078

if.end222:                                        ; preds = %if.then214
  br label %if.end223

if.end223:                                        ; preds = %if.end222, %if.end210
  br label %if.end224

if.end224:                                        ; preds = %if.end223, %if.end202
  br label %if.end225

if.end225:                                        ; preds = %if.end224, %if.end195
  br label %if.end226

if.end226:                                        ; preds = %if.end225, %if.end177
  br label %if.end227

if.end227:                                        ; preds = %if.end226, %if.then168
  br label %if.end228

if.end228:                                        ; preds = %if.end227, %if.then149
  br label %if.end229

if.end229:                                        ; preds = %if.end228, %if.then141
  br label %if.end230

if.end230:                                        ; preds = %if.end229, %if.then132
  br label %if.end231

if.end231:                                        ; preds = %if.end230, %if.then123
  store i64 0, i64* %retval, align 8, !dbg !4079
  br label %return, !dbg !4079

return:                                           ; preds = %if.end231, %if.end218
  %95 = load i64, i64* %retval, align 8, !dbg !4080
  ret i64 %95, !dbg !4080
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @account_used_vars_for_block(%union.tree_node* %block, i8 zeroext %toplevel) #0 !dbg !4081 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %toplevel.addr = alloca i8, align 1
  %t = alloca %union.tree_node*, align 8
  %size = alloca i64, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !4084, metadata !DIExpression()), !dbg !4085
  store i8 %toplevel, i8* %toplevel.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %toplevel.addr, metadata !4086, metadata !DIExpression()), !dbg !4087
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4088, metadata !DIExpression()), !dbg !4089
  call void @llvm.dbg.declare(metadata i64* %size, metadata !4090, metadata !DIExpression()), !dbg !4091
  store i64 0, i64* %size, align 8, !dbg !4091
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !4092
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*, !dbg !4092
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 3, !dbg !4092
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !4092
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !4094
  br label %for.cond, !dbg !4095

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4096
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !4098
  br i1 %tobool, label %for.body, label %for.end, !dbg !4098

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4099
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4099
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !4099
  %bf.load = load i64, i64* %4, align 8, !dbg !4099
  %bf.lshr = lshr i64 %bf.load, 24, !dbg !4099
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4099
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4099
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !4099
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4101

if.then:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4102
  %6 = load i8, i8* %toplevel.addr, align 1, !dbg !4103
  %call = call i64 @expand_one_var(%union.tree_node* %5, i8 zeroext %6, i8 zeroext 0), !dbg !4104
  %7 = load i64, i64* %size, align 8, !dbg !4105
  %add = add nsw i64 %7, %call, !dbg !4105
  store i64 %add, i64* %size, align 8, !dbg !4105
  br label %if.end, !dbg !4106

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !4099

for.inc:                                          ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4107
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !4107
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4107
  %9 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4107
  store %union.tree_node* %9, %union.tree_node** %t, align 8, !dbg !4108
  br label %for.cond, !dbg !4109, !llvm.loop !4110

for.end:                                          ; preds = %for.cond
  %10 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !4112
  %block3 = bitcast %union.tree_node* %10 to %struct.tree_block*, !dbg !4112
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block3, i32 0, i32 5, !dbg !4112
  %11 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !4112
  store %union.tree_node* %11, %union.tree_node** %t, align 8, !dbg !4114
  br label %for.cond4, !dbg !4115

for.cond4:                                        ; preds = %for.inc9, %for.end
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4116
  %tobool5 = icmp ne %union.tree_node* %12, null, !dbg !4118
  br i1 %tobool5, label %for.body6, label %for.end12, !dbg !4118

for.body6:                                        ; preds = %for.cond4
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4119
  %call7 = call i64 @account_used_vars_for_block(%union.tree_node* %13, i8 zeroext 0), !dbg !4120
  %14 = load i64, i64* %size, align 8, !dbg !4121
  %add8 = add nsw i64 %14, %call7, !dbg !4121
  store i64 %add8, i64* %size, align 8, !dbg !4121
  br label %for.inc9, !dbg !4122

for.inc9:                                         ; preds = %for.body6
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4123
  %common10 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !4123
  %chain11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 1, !dbg !4123
  %16 = load %union.tree_node*, %union.tree_node** %chain11, align 8, !dbg !4123
  store %union.tree_node* %16, %union.tree_node** %t, align 8, !dbg !4124
  br label %for.cond4, !dbg !4125, !llvm.loop !4126

for.end12:                                        ; preds = %for.cond4
  %17 = load i64, i64* %size, align 8, !dbg !4128
  ret i64 %17, !dbg !4129
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @account_stack_vars() #0 !dbg !4130 {
entry:
  %si = alloca i64, align 8
  %j = alloca i64, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %size = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %si, metadata !4131, metadata !DIExpression()), !dbg !4132
  call void @llvm.dbg.declare(metadata i64* %j, metadata !4133, metadata !DIExpression()), !dbg !4134
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4135, metadata !DIExpression()), !dbg !4136
  call void @llvm.dbg.declare(metadata i64* %n, metadata !4137, metadata !DIExpression()), !dbg !4138
  %0 = load i64, i64* @stack_vars_num, align 8, !dbg !4139
  store i64 %0, i64* %n, align 8, !dbg !4138
  call void @llvm.dbg.declare(metadata i64* %size, metadata !4140, metadata !DIExpression()), !dbg !4141
  store i64 0, i64* %size, align 8, !dbg !4141
  store i64 0, i64* %si, align 8, !dbg !4142
  br label %for.cond, !dbg !4144

for.cond:                                         ; preds = %for.inc10, %entry
  %1 = load i64, i64* %si, align 8, !dbg !4145
  %2 = load i64, i64* %n, align 8, !dbg !4147
  %cmp = icmp ult i64 %1, %2, !dbg !4148
  br i1 %cmp, label %for.body, label %for.end11, !dbg !4149

for.body:                                         ; preds = %for.cond
  %3 = load i64*, i64** @stack_vars_sorted, align 8, !dbg !4150
  %4 = load i64, i64* %si, align 8, !dbg !4152
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 %4, !dbg !4150
  %5 = load i64, i64* %arrayidx, align 8, !dbg !4150
  store i64 %5, i64* %i, align 8, !dbg !4153
  %6 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4154
  %7 = load i64, i64* %i, align 8, !dbg !4156
  %arrayidx1 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %6, i64 %7, !dbg !4154
  %representative = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx1, i32 0, i32 4, !dbg !4157
  %8 = load i64, i64* %representative, align 8, !dbg !4157
  %9 = load i64, i64* %i, align 8, !dbg !4158
  %cmp2 = icmp ne i64 %8, %9, !dbg !4159
  br i1 %cmp2, label %if.then, label %if.end, !dbg !4160

if.then:                                          ; preds = %for.body
  br label %for.inc10, !dbg !4161

if.end:                                           ; preds = %for.body
  %10 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4162
  %11 = load i64, i64* %i, align 8, !dbg !4163
  %arrayidx3 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %10, i64 %11, !dbg !4162
  %size4 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx3, i32 0, i32 2, !dbg !4164
  %12 = load i64, i64* %size4, align 8, !dbg !4164
  %13 = load i64, i64* %size, align 8, !dbg !4165
  %add = add nsw i64 %13, %12, !dbg !4165
  store i64 %add, i64* %size, align 8, !dbg !4165
  %14 = load i64, i64* %i, align 8, !dbg !4166
  store i64 %14, i64* %j, align 8, !dbg !4168
  br label %for.cond5, !dbg !4169

for.cond5:                                        ; preds = %for.inc, %if.end
  %15 = load i64, i64* %j, align 8, !dbg !4170
  %cmp6 = icmp ne i64 %15, -1, !dbg !4172
  br i1 %cmp6, label %for.body7, label %for.end, !dbg !4173

for.body7:                                        ; preds = %for.cond5
  %16 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4174
  %17 = load i64, i64* %j, align 8, !dbg !4175
  %arrayidx8 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %16, i64 %17, !dbg !4174
  %decl = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx8, i32 0, i32 0, !dbg !4176
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4176
  call void @set_rtl(%union.tree_node* %18, %struct.rtx_def* null), !dbg !4177
  br label %for.inc, !dbg !4177

for.inc:                                          ; preds = %for.body7
  %19 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4178
  %20 = load i64, i64* %j, align 8, !dbg !4179
  %arrayidx9 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %19, i64 %20, !dbg !4178
  %next = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx9, i32 0, i32 5, !dbg !4180
  %21 = load i64, i64* %next, align 8, !dbg !4180
  store i64 %21, i64* %j, align 8, !dbg !4181
  br label %for.cond5, !dbg !4182, !llvm.loop !4183

for.end:                                          ; preds = %for.cond5
  br label %for.inc10, !dbg !4185

for.inc10:                                        ; preds = %for.end, %if.then
  %22 = load i64, i64* %si, align 8, !dbg !4186
  %inc = add i64 %22, 1, !dbg !4186
  store i64 %inc, i64* %si, align 8, !dbg !4186
  br label %for.cond, !dbg !4187, !llvm.loop !4188

for.end11:                                        ; preds = %for.cond
  %23 = load i64, i64* %size, align 8, !dbg !4190
  ret i64 %23, !dbg !4191
}

; Function Attrs: noinline nounwind uwtable
define internal void @fini_vars_expansion() #0 !dbg !4192 {
entry:
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4193, metadata !DIExpression()), !dbg !4194
  call void @llvm.dbg.declare(metadata i64* %n, metadata !4195, metadata !DIExpression()), !dbg !4196
  %0 = load i64, i64* @stack_vars_num, align 8, !dbg !4197
  store i64 %0, i64* %n, align 8, !dbg !4196
  store i64 0, i64* %i, align 8, !dbg !4198
  br label %for.cond, !dbg !4200

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !dbg !4201
  %2 = load i64, i64* %n, align 8, !dbg !4203
  %cmp = icmp ult i64 %1, %2, !dbg !4204
  br i1 %cmp, label %for.body, label %for.end, !dbg !4205

for.body:                                         ; preds = %for.cond
  %3 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4206
  %4 = load i64, i64* %i, align 8, !dbg !4206
  %arrayidx = getelementptr inbounds %struct.stack_var, %struct.stack_var* %3, i64 %4, !dbg !4206
  %conflicts = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx, i32 0, i32 6, !dbg !4206
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %conflicts, align 8, !dbg !4206
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %5), !dbg !4206
  %6 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4206
  %7 = load i64, i64* %i, align 8, !dbg !4206
  %arrayidx1 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %6, i64 %7, !dbg !4206
  %conflicts2 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx1, i32 0, i32 6, !dbg !4206
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %conflicts2, align 8, !dbg !4206
  br label %for.inc, !dbg !4206

for.inc:                                          ; preds = %for.body
  %8 = load i64, i64* %i, align 8, !dbg !4207
  %inc = add i64 %8, 1, !dbg !4207
  store i64 %inc, i64* %i, align 8, !dbg !4207
  br label %for.cond, !dbg !4208, !llvm.loop !4209

for.end:                                          ; preds = %for.cond
  %9 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4211
  %10 = bitcast %struct.stack_var* %9 to i8*, !dbg !4211
  call void @free(i8* %10), !dbg !4211
  %11 = load i64*, i64** @stack_vars_sorted, align 8, !dbg !4212
  %12 = bitcast i64* %11 to i8*, !dbg !4212
  call void @free(i8* %12), !dbg !4212
  store %struct.stack_var* null, %struct.stack_var** @stack_vars, align 8, !dbg !4213
  store i64 0, i64* @stack_vars_num, align 8, !dbg !4214
  store i64 0, i64* @stack_vars_alloc, align 8, !dbg !4215
  ret void, !dbg !4216
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expand_cfg() #0 !dbg !4217 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %init_block = alloca %struct.basic_block_def*, align 8
  %blocks = alloca %struct.simple_bitmap_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %i = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %e200 = alloca %struct.edge_def*, align 8
  %ei201 = alloca %struct.edge_iterator, align 8
  %tmp202 = alloca %struct.edge_iterator, align 8
  %e228 = alloca %struct.edge_def*, align 8
  %ei229 = alloca %struct.edge_iterator, align 8
  %tmp230 = alloca %struct.edge_iterator, align 8
  %parent = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4218, metadata !DIExpression()), !dbg !4219
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %init_block, metadata !4220, metadata !DIExpression()), !dbg !4221
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %blocks, metadata !4222, metadata !DIExpression()), !dbg !4233
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4234, metadata !DIExpression()), !dbg !4241
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4242, metadata !DIExpression()), !dbg !4243
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4244, metadata !DIExpression()), !dbg !4245
  %call = call i32 @rewrite_out_of_ssa(%struct.ssaexpand* @SA), !dbg !4246
  %0 = load %struct._var_map*, %struct._var_map** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 0), align 8, !dbg !4247
  %num_partitions = getelementptr inbounds %struct._var_map, %struct._var_map* %0, i32 0, i32 3, !dbg !4248
  %1 = load i32, i32* %num_partitions, align 8, !dbg !4248
  %conv = zext i32 %1 to i64, !dbg !4249
  %call1 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !4250
  %2 = bitcast i8* %call1 to %struct.rtx_def**, !dbg !4251
  store %struct.rtx_def** %2, %struct.rtx_def*** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 2), align 8, !dbg !4252
  store i32 1, i32* @currently_expanding_to_rtl, align 4, !dbg !4253
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4254
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4254
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4254
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4254
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 0, !dbg !4254
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4254
  call void @rtl_profile_for_bb(%struct.basic_block_def* %5), !dbg !4255
  call void @insn_locators_alloc(), !dbg !4256
  %6 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4257
  %decl_minimal = bitcast %union.tree_node* %6 to %struct.tree_decl_minimal*, !dbg !4257
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !4257
  %7 = load i32, i32* %locus, align 8, !dbg !4257
  %cmp = icmp ule i32 %7, 1, !dbg !4257
  br i1 %cmp, label %if.end11, label %if.then, !dbg !4259

if.then:                                          ; preds = %entry
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4260
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !4260
  %function_start_locus = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 15, !dbg !4263
  %9 = load i32, i32* %function_start_locus, align 8, !dbg !4263
  %cmp4 = icmp eq i32 %9, 0, !dbg !4264
  br i1 %cmp4, label %if.then6, label %if.else, !dbg !4265

if.then6:                                         ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4266
  %decl_minimal7 = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !4266
  %locus8 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal7, i32 0, i32 1, !dbg !4266
  %11 = load i32, i32* %locus8, align 8, !dbg !4266
  call void @set_curr_insn_source_location(i32 %11), !dbg !4267
  br label %if.end, !dbg !4267

if.else:                                          ; preds = %if.then
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4268
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !4268
  %function_start_locus10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 15, !dbg !4269
  %13 = load i32, i32* %function_start_locus10, align 8, !dbg !4269
  call void @set_curr_insn_source_location(i32 %13), !dbg !4270
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then6
  br label %if.end11, !dbg !4271

if.end11:                                         ; preds = %if.end, %entry
  %14 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4272
  %decl_common = bitcast %union.tree_node* %14 to %struct.tree_decl_common*, !dbg !4272
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !4272
  %15 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !4272
  call void @set_curr_insn_block(%union.tree_node* %15), !dbg !4273
  %call12 = call i32 @curr_insn_locator(), !dbg !4274
  store i32 %call12, i32* @prologue_locator, align 4, !dbg !4275
  %call13 = call %struct.rtx_def* @emit_note(i32 0), !dbg !4276
  call void @discover_nonconstant_array_refs(), !dbg !4277
  %16 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 98), align 8, !dbg !4278
  call void %16(), !dbg !4279
  store i32 32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 22), align 4, !dbg !4280
  store i32 32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 25), align 8, !dbg !4281
  store i32 0, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !4282
  store i32 32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 23), align 8, !dbg !4283
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4284
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !4284
  %cfg15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 1, !dbg !4285
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg15, align 8, !dbg !4285
  %max_jumptable_ents = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 10, !dbg !4286
  store i32 0, i32* %max_jumptable_ents, align 4, !dbg !4287
  call void @expand_used_vars(), !dbg !4288
  %19 = load i32, i32* @warn_stack_protect, align 4, !dbg !4289
  %tobool = icmp ne i32 %19, 0, !dbg !4289
  br i1 %tobool, label %if.then16, label %if.end28, !dbg !4291

if.then16:                                        ; preds = %if.end11
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4292
  %add.ptr17 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !4292
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %add.ptr17, i32 0, i32 20, !dbg !4295
  %bf.load = load i32, i32* %calls_alloca, align 8, !dbg !4295
  %bf.lshr = lshr i32 %bf.load, 19, !dbg !4295
  %bf.clear = and i32 %bf.lshr, 1, !dbg !4295
  %tobool18 = icmp ne i32 %bf.clear, 0, !dbg !4292
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !4296

if.then19:                                        ; preds = %if.then16
  %call20 = call zeroext i8 (i32, i8*, ...) @warning(i32 181, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0)), !dbg !4297
  br label %if.end21, !dbg !4297

if.end21:                                         ; preds = %if.then19, %if.then16
  %21 = load i8, i8* @has_short_buffer, align 1, !dbg !4298
  %conv22 = zext i8 %21 to i32, !dbg !4298
  %tobool23 = icmp ne i32 %conv22, 0, !dbg !4298
  br i1 %tobool23, label %land.lhs.true, label %if.end27, !dbg !4300

land.lhs.true:                                    ; preds = %if.end21
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 9), align 8, !dbg !4301
  %tobool24 = icmp ne %union.tree_node* %22, null, !dbg !4302
  br i1 %tobool24, label %if.end27, label %if.then25, !dbg !4303

if.then25:                                        ; preds = %land.lhs.true
  %23 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4304
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %23, i64 93, !dbg !4304
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !4304
  %24 = load i32, i32* %value, align 8, !dbg !4304
  %call26 = call zeroext i8 (i32, i8*, ...) @warning(i32 181, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.7, i64 0, i64 0), i32 %24), !dbg !4305
  br label %if.end27, !dbg !4305

if.end27:                                         ; preds = %if.then25, %land.lhs.true, %if.end21
  br label %if.end28, !dbg !4306

if.end28:                                         ; preds = %if.end27, %if.end11
  %25 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4307
  call void @expand_function_start(%union.tree_node* %25), !dbg !4308
  store i32 0, i32* %i, align 4, !dbg !4309
  br label %for.cond, !dbg !4311

for.cond:                                         ; preds = %for.inc, %if.end28
  %26 = load i32, i32* %i, align 4, !dbg !4312
  %27 = load %struct._var_map*, %struct._var_map** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 0), align 8, !dbg !4314
  %num_partitions29 = getelementptr inbounds %struct._var_map, %struct._var_map* %27, i32 0, i32 3, !dbg !4315
  %28 = load i32, i32* %num_partitions29, align 8, !dbg !4315
  %cmp30 = icmp ult i32 %26, %28, !dbg !4316
  br i1 %cmp30, label %for.body, label %for.end, !dbg !4317

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !4318, metadata !DIExpression()), !dbg !4320
  %29 = load %struct._var_map*, %struct._var_map** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 0), align 8, !dbg !4321
  %30 = load i32, i32* %i, align 4, !dbg !4321
  %call32 = call %union.tree_node* @partition_to_var(%struct._var_map* %29, i32 %30), !dbg !4321
  %ssa_name = bitcast %union.tree_node* %call32 to %struct.tree_ssa_name*, !dbg !4321
  %var33 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4321
  %31 = load %union.tree_node*, %union.tree_node** %var33, align 8, !dbg !4321
  store %union.tree_node* %31, %union.tree_node** %var, align 8, !dbg !4320
  %32 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4322
  %base = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !4322
  %33 = bitcast %struct.tree_base* %base to i64*, !dbg !4322
  %bf.load34 = load i64, i64* %33, align 8, !dbg !4322
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !4322
  %bf.cast = trunc i64 %bf.clear35 to i32, !dbg !4322
  %cmp36 = icmp ne i32 %bf.cast, 32, !dbg !4324
  br i1 %cmp36, label %land.lhs.true38, label %if.end67, !dbg !4325

land.lhs.true38:                                  ; preds = %for.body
  %34 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 2), align 8, !dbg !4326
  %35 = load i32, i32* %i, align 4, !dbg !4327
  %idxprom = zext i32 %35 to i64, !dbg !4328
  %arrayidx39 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %34, i64 %idxprom, !dbg !4328
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx39, align 8, !dbg !4328
  %tobool40 = icmp ne %struct.rtx_def* %36, null, !dbg !4328
  br i1 %tobool40, label %if.end67, label %if.then41, !dbg !4329

if.then41:                                        ; preds = %land.lhs.true38
  %37 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4330
  %base42 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !4330
  %38 = bitcast %struct.tree_base* %base42 to i64*, !dbg !4330
  %bf.load43 = load i64, i64* %38, align 8, !dbg !4330
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !4330
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !4330
  %idxprom46 = zext i32 %bf.cast45 to i64, !dbg !4330
  %arrayidx47 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom46, !dbg !4330
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx47, i64 0, i64 11, !dbg !4330
  %39 = load i8, i8* %arrayidx48, align 1, !dbg !4330
  %conv49 = zext i8 %39 to i32, !dbg !4330
  %tobool50 = icmp ne i32 %conv49, 0, !dbg !4330
  br i1 %tobool50, label %land.lhs.true51, label %cond.false62, !dbg !4330

land.lhs.true51:                                  ; preds = %if.then41
  %40 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4330
  %decl_with_rtl = bitcast %union.tree_node* %40 to %struct.tree_decl_with_rtl*, !dbg !4330
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !4330
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !4330
  %cmp52 = icmp ne %struct.rtx_def* %41, null, !dbg !4330
  br i1 %cmp52, label %cond.true, label %cond.false62, !dbg !4330

cond.true:                                        ; preds = %land.lhs.true51
  %42 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4330
  %decl_with_rtl54 = bitcast %union.tree_node* %42 to %struct.tree_decl_with_rtl*, !dbg !4330
  %rtl55 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl54, i32 0, i32 1, !dbg !4330
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rtl55, align 8, !dbg !4330
  %tobool56 = icmp ne %struct.rtx_def* %43, null, !dbg !4330
  br i1 %tobool56, label %cond.true57, label %cond.false, !dbg !4330

cond.true57:                                      ; preds = %cond.true
  %44 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4330
  %decl_with_rtl58 = bitcast %union.tree_node* %44 to %struct.tree_decl_with_rtl*, !dbg !4330
  %rtl59 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl58, i32 0, i32 1, !dbg !4330
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtl59, align 8, !dbg !4330
  br label %cond.end, !dbg !4330

cond.false:                                       ; preds = %cond.true
  %46 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4330
  call void @make_decl_rtl(%union.tree_node* %46), !dbg !4330
  %47 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4330
  %decl_with_rtl60 = bitcast %union.tree_node* %47 to %struct.tree_decl_with_rtl*, !dbg !4330
  %rtl61 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl60, i32 0, i32 1, !dbg !4330
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rtl61, align 8, !dbg !4330
  br label %cond.end, !dbg !4330

cond.end:                                         ; preds = %cond.false, %cond.true57
  %cond = phi %struct.rtx_def* [ %45, %cond.true57 ], [ %48, %cond.false ], !dbg !4330
  br label %cond.end63, !dbg !4330

cond.false62:                                     ; preds = %land.lhs.true51, %if.then41
  br label %cond.end63, !dbg !4330

cond.end63:                                       ; preds = %cond.false62, %cond.end
  %cond64 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false62 ], !dbg !4330
  %49 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 2), align 8, !dbg !4331
  %50 = load i32, i32* %i, align 4, !dbg !4332
  %idxprom65 = zext i32 %50 to i64, !dbg !4333
  %arrayidx66 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %49, i64 %idxprom65, !dbg !4333
  store %struct.rtx_def* %cond64, %struct.rtx_def** %arrayidx66, align 8, !dbg !4334
  br label %if.end67, !dbg !4333

if.end67:                                         ; preds = %cond.end63, %land.lhs.true38, %for.body
  %51 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 2), align 8, !dbg !4335
  %52 = load i32, i32* %i, align 4, !dbg !4335
  %idxprom68 = zext i32 %52 to i64, !dbg !4335
  %arrayidx69 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %51, i64 %idxprom68, !dbg !4335
  %53 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx69, align 8, !dbg !4335
  %tobool70 = icmp ne %struct.rtx_def* %53, null, !dbg !4335
  br i1 %tobool70, label %cond.false72, label %cond.true71, !dbg !4335

cond.true71:                                      ; preds = %if.end67
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 3792, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4335
  br label %cond.end73, !dbg !4335

cond.false72:                                     ; preds = %if.end67
  br label %cond.end73, !dbg !4335

cond.end73:                                       ; preds = %cond.false72, %cond.true71
  %cond74 = phi i32 [ 0, %cond.true71 ], [ 0, %cond.false72 ], !dbg !4335
  %54 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4336
  %base75 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !4336
  %55 = bitcast %struct.tree_base* %base75 to i64*, !dbg !4336
  %bf.load76 = load i64, i64* %55, align 8, !dbg !4336
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !4336
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !4336
  %idxprom79 = zext i32 %bf.cast78 to i64, !dbg !4336
  %arrayidx80 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom79, !dbg !4336
  %arrayidx81 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx80, i64 0, i64 11, !dbg !4336
  %56 = load i8, i8* %arrayidx81, align 1, !dbg !4336
  %conv82 = zext i8 %56 to i32, !dbg !4336
  %tobool83 = icmp ne i32 %conv82, 0, !dbg !4336
  br i1 %tobool83, label %land.lhs.true84, label %cond.false101, !dbg !4336

land.lhs.true84:                                  ; preds = %cond.end73
  %57 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4336
  %decl_with_rtl85 = bitcast %union.tree_node* %57 to %struct.tree_decl_with_rtl*, !dbg !4336
  %rtl86 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl85, i32 0, i32 1, !dbg !4336
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtl86, align 8, !dbg !4336
  %cmp87 = icmp ne %struct.rtx_def* %58, null, !dbg !4336
  br i1 %cmp87, label %cond.true89, label %cond.false101, !dbg !4336

cond.true89:                                      ; preds = %land.lhs.true84
  %59 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4336
  %decl_with_rtl90 = bitcast %union.tree_node* %59 to %struct.tree_decl_with_rtl*, !dbg !4336
  %rtl91 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl90, i32 0, i32 1, !dbg !4336
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtl91, align 8, !dbg !4336
  %tobool92 = icmp ne %struct.rtx_def* %60, null, !dbg !4336
  br i1 %tobool92, label %cond.true93, label %cond.false96, !dbg !4336

cond.true93:                                      ; preds = %cond.true89
  %61 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4336
  %decl_with_rtl94 = bitcast %union.tree_node* %61 to %struct.tree_decl_with_rtl*, !dbg !4336
  %rtl95 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl94, i32 0, i32 1, !dbg !4336
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtl95, align 8, !dbg !4336
  br label %cond.end99, !dbg !4336

cond.false96:                                     ; preds = %cond.true89
  %63 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4336
  call void @make_decl_rtl(%union.tree_node* %63), !dbg !4336
  %64 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4336
  %decl_with_rtl97 = bitcast %union.tree_node* %64 to %struct.tree_decl_with_rtl*, !dbg !4336
  %rtl98 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl97, i32 0, i32 1, !dbg !4336
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rtl98, align 8, !dbg !4336
  br label %cond.end99, !dbg !4336

cond.end99:                                       ; preds = %cond.false96, %cond.true93
  %cond100 = phi %struct.rtx_def* [ %62, %cond.true93 ], [ %65, %cond.false96 ], !dbg !4336
  br label %cond.end102, !dbg !4336

cond.false101:                                    ; preds = %land.lhs.true84, %cond.end73
  br label %cond.end102, !dbg !4336

cond.end102:                                      ; preds = %cond.false101, %cond.end99
  %cond103 = phi %struct.rtx_def* [ %cond100, %cond.end99 ], [ null, %cond.false101 ], !dbg !4336
  %66 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !4338
  %cmp104 = icmp eq %struct.rtx_def* %cond103, %66, !dbg !4339
  br i1 %cmp104, label %if.then106, label %if.end107, !dbg !4340

if.then106:                                       ; preds = %cond.end102
  %67 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4341
  call void @set_decl_rtl(%union.tree_node* %67, %struct.rtx_def* null), !dbg !4341
  br label %if.end107, !dbg !4341

if.end107:                                        ; preds = %if.then106, %cond.end102
  %68 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4342
  %base108 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !4342
  %69 = bitcast %struct.tree_base* %base108 to i64*, !dbg !4342
  %bf.load109 = load i64, i64* %69, align 8, !dbg !4342
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !4342
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !4342
  %idxprom112 = zext i32 %bf.cast111 to i64, !dbg !4342
  %arrayidx113 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom112, !dbg !4342
  %arrayidx114 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx113, i64 0, i64 11, !dbg !4342
  %70 = load i8, i8* %arrayidx114, align 1, !dbg !4342
  %conv115 = zext i8 %70 to i32, !dbg !4342
  %tobool116 = icmp ne i32 %conv115, 0, !dbg !4342
  br i1 %tobool116, label %land.lhs.true117, label %if.then122, !dbg !4342

land.lhs.true117:                                 ; preds = %if.end107
  %71 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4342
  %decl_with_rtl118 = bitcast %union.tree_node* %71 to %struct.tree_decl_with_rtl*, !dbg !4342
  %rtl119 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl118, i32 0, i32 1, !dbg !4342
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rtl119, align 8, !dbg !4342
  %cmp120 = icmp ne %struct.rtx_def* %72, null, !dbg !4342
  br i1 %cmp120, label %if.end133, label %if.then122, !dbg !4344

if.then122:                                       ; preds = %land.lhs.true117, %if.end107
  %73 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 2), align 8, !dbg !4345
  %74 = load i32, i32* %i, align 4, !dbg !4345
  %idxprom123 = zext i32 %74 to i64, !dbg !4345
  %arrayidx124 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %73, i64 %idxprom123, !dbg !4345
  %75 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx124, align 8, !dbg !4345
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !4345
  %bf.load125 = load i32, i32* %76, align 8, !dbg !4345
  %bf.clear126 = and i32 %bf.load125, 65535, !dbg !4345
  %cmp127 = icmp eq i32 %bf.clear126, 43, !dbg !4345
  br i1 %cmp127, label %if.then129, label %if.end132, !dbg !4348

if.then129:                                       ; preds = %if.then122
  %77 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 2), align 8, !dbg !4349
  %78 = load i32, i32* %i, align 4, !dbg !4350
  %idxprom130 = zext i32 %78 to i64, !dbg !4351
  %arrayidx131 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %77, i64 %idxprom130, !dbg !4351
  %79 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx131, align 8, !dbg !4351
  call void @set_mem_expr(%struct.rtx_def* %79, %union.tree_node* null), !dbg !4352
  br label %if.end132, !dbg !4352

if.end132:                                        ; preds = %if.then129, %if.then122
  br label %if.end133, !dbg !4353

if.end133:                                        ; preds = %if.end132, %land.lhs.true117
  br label %for.inc, !dbg !4354

for.inc:                                          ; preds = %if.end133
  %80 = load i32, i32* %i, align 4, !dbg !4355
  %inc = add i32 %80, 1, !dbg !4355
  store i32 %inc, i32* %i, align 4, !dbg !4355
  br label %for.cond, !dbg !4356, !llvm.loop !4357

for.end:                                          ; preds = %for.cond
  %81 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4359
  %decl_minimal134 = bitcast %union.tree_node* %81 to %struct.tree_decl_minimal*, !dbg !4359
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal134, i32 0, i32 3, !dbg !4359
  %82 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4359
  %tobool135 = icmp ne %union.tree_node* %82, null, !dbg !4359
  br i1 %tobool135, label %land.lhs.true136, label %if.end153, !dbg !4361

land.lhs.true136:                                 ; preds = %for.end
  %83 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4362
  %decl_minimal137 = bitcast %union.tree_node* %83 to %struct.tree_decl_minimal*, !dbg !4362
  %name138 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal137, i32 0, i32 3, !dbg !4362
  %84 = load %union.tree_node*, %union.tree_node** %name138, align 8, !dbg !4362
  %85 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 56), align 16, !dbg !4362
  %cmp139 = icmp eq %union.tree_node* %84, %85, !dbg !4362
  br i1 %cmp139, label %land.lhs.true141, label %if.end153, !dbg !4363

land.lhs.true141:                                 ; preds = %land.lhs.true136
  %86 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4364
  %decl_minimal142 = bitcast %union.tree_node* %86 to %struct.tree_decl_minimal*, !dbg !4364
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal142, i32 0, i32 4, !dbg !4364
  %87 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4364
  %tobool143 = icmp ne %union.tree_node* %87, null, !dbg !4364
  br i1 %tobool143, label %lor.lhs.false, label %if.then152, !dbg !4364

lor.lhs.false:                                    ; preds = %land.lhs.true141
  %88 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4364
  %decl_minimal144 = bitcast %union.tree_node* %88 to %struct.tree_decl_minimal*, !dbg !4364
  %context145 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal144, i32 0, i32 4, !dbg !4364
  %89 = load %union.tree_node*, %union.tree_node** %context145, align 8, !dbg !4364
  %base146 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !4364
  %90 = bitcast %struct.tree_base* %base146 to i64*, !dbg !4364
  %bf.load147 = load i64, i64* %90, align 8, !dbg !4364
  %bf.clear148 = and i64 %bf.load147, 65535, !dbg !4364
  %bf.cast149 = trunc i64 %bf.clear148 to i32, !dbg !4364
  %cmp150 = icmp eq i32 %bf.cast149, 40, !dbg !4364
  br i1 %cmp150, label %if.then152, label %if.end153, !dbg !4365

if.then152:                                       ; preds = %lor.lhs.false, %land.lhs.true141
  call void @expand_main_function(), !dbg !4366
  br label %if.end153, !dbg !4366

if.end153:                                        ; preds = %if.then152, %lor.lhs.false, %land.lhs.true136, %for.end
  %91 = load %union.tree_node*, %union.tree_node** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 9), align 8, !dbg !4367
  %tobool154 = icmp ne %union.tree_node* %91, null, !dbg !4369
  br i1 %tobool154, label %if.then155, label %if.end156, !dbg !4370

if.then155:                                       ; preds = %if.end153
  call void @stack_protect_prologue(), !dbg !4371
  br label %if.end156, !dbg !4371

if.end156:                                        ; preds = %if.then155, %if.end153
  call void @expand_phi_nodes(%struct.ssaexpand* @SA), !dbg !4372
  call void @rtl_register_cfg_hooks(), !dbg !4373
  %call157 = call %struct.basic_block_def* @construct_init_block(), !dbg !4374
  store %struct.basic_block_def* %call157, %struct.basic_block_def** %init_block, align 8, !dbg !4375
  %92 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4376
  %add.ptr158 = getelementptr inbounds %struct.function, %struct.function* %92, i64 0, !dbg !4376
  %cfg159 = getelementptr inbounds %struct.function, %struct.function* %add.ptr158, i32 0, i32 1, !dbg !4376
  %93 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg159, align 8, !dbg !4376
  %x_entry_block_ptr160 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %93, i32 0, i32 0, !dbg !4376
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr160, align 8, !dbg !4376
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 1, !dbg !4376
  %call161 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4376
  %95 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4376
  %96 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %95, i32 0, i32 0, !dbg !4376
  %97 = extractvalue { i32, %struct.VEC_edge_gc** } %call161, 0, !dbg !4376
  store i32 %97, i32* %96, align 8, !dbg !4376
  %98 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %95, i32 0, i32 1, !dbg !4376
  %99 = extractvalue { i32, %struct.VEC_edge_gc** } %call161, 1, !dbg !4376
  store %struct.VEC_edge_gc** %99, %struct.VEC_edge_gc*** %98, align 8, !dbg !4376
  %100 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4376
  %101 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4376
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 16, i1 false), !dbg !4376
  br label %for.cond162, !dbg !4376

for.cond162:                                      ; preds = %for.inc166, %if.end156
  %102 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4378
  %103 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %102, i32 0, i32 0, !dbg !4378
  %104 = load i32, i32* %103, align 8, !dbg !4378
  %105 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %102, i32 0, i32 1, !dbg !4378
  %106 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %105, align 8, !dbg !4378
  %call163 = call zeroext i8 @ei_cond(i32 %104, %struct.VEC_edge_gc** %106, %struct.edge_def** %e), !dbg !4378
  %tobool164 = icmp ne i8 %call163, 0, !dbg !4376
  br i1 %tobool164, label %for.body165, label %for.end167, !dbg !4376

for.body165:                                      ; preds = %for.cond162
  %107 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4380
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %107, i32 0, i32 7, !dbg !4381
  %108 = load i32, i32* %flags, align 8, !dbg !4382
  %and = and i32 %108, -4097, !dbg !4382
  store i32 %and, i32* %flags, align 8, !dbg !4382
  br label %for.inc166, !dbg !4380

for.inc166:                                       ; preds = %for.body165
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4378
  br label %for.cond162, !dbg !4378, !llvm.loop !4383

for.end167:                                       ; preds = %for.cond162
  %call168 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !4385
  store %struct.pointer_map_t* %call168, %struct.pointer_map_t** @lab_rtx_for_bb, align 8, !dbg !4386
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %init_block, align 8, !dbg !4387
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %109, i32 0, i32 6, !dbg !4387
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4387
  store %struct.basic_block_def* %110, %struct.basic_block_def** %bb, align 8, !dbg !4387
  br label %for.cond169, !dbg !4387

for.cond169:                                      ; preds = %for.inc176, %for.end167
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4389
  %112 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4389
  %add.ptr170 = getelementptr inbounds %struct.function, %struct.function* %112, i64 0, !dbg !4389
  %cfg171 = getelementptr inbounds %struct.function, %struct.function* %add.ptr170, i32 0, i32 1, !dbg !4389
  %113 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg171, align 8, !dbg !4389
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %113, i32 0, i32 1, !dbg !4389
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4389
  %cmp172 = icmp ne %struct.basic_block_def* %111, %114, !dbg !4389
  br i1 %cmp172, label %for.body174, label %for.end178, !dbg !4387

for.body174:                                      ; preds = %for.cond169
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4391
  %call175 = call %struct.basic_block_def* @expand_gimple_basic_block(%struct.basic_block_def* %115), !dbg !4392
  store %struct.basic_block_def* %call175, %struct.basic_block_def** %bb, align 8, !dbg !4393
  br label %for.inc176, !dbg !4394

for.inc176:                                       ; preds = %for.body174
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4389
  %next_bb177 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %116, i32 0, i32 6, !dbg !4389
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb177, align 8, !dbg !4389
  store %struct.basic_block_def* %117, %struct.basic_block_def** %bb, align 8, !dbg !4389
  br label %for.cond169, !dbg !4389, !llvm.loop !4395

for.end178:                                       ; preds = %for.cond169
  %118 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !4397
  %tobool179 = icmp ne i32 %118, 0, !dbg !4397
  br i1 %tobool179, label %if.then180, label %if.end181, !dbg !4399

if.then180:                                       ; preds = %for.end178
  call void @expand_debug_locations(), !dbg !4400
  br label %if.end181, !dbg !4400

if.end181:                                        ; preds = %if.then180, %for.end178
  %call182 = call i32 @execute_free_datastructures(), !dbg !4401
  call void @finish_out_of_ssa(%struct.ssaexpand* @SA), !dbg !4402
  %119 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4403
  %add.ptr183 = getelementptr inbounds %struct.function, %struct.function* %119, i64 0, !dbg !4403
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr183, i32 0, i32 3, !dbg !4404
  %120 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4404
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %120, i32 0, i32 10, !dbg !4405
  %bf.load184 = load i8, i8* %in_ssa_p, align 8, !dbg !4406
  %bf.clear185 = and i8 %bf.load184, -2, !dbg !4406
  store i8 %bf.clear185, i8* %in_ssa_p, align 8, !dbg !4406
  %121 = load %struct.pointer_map_t*, %struct.pointer_map_t** @lab_rtx_for_bb, align 8, !dbg !4407
  call void @pointer_map_destroy(%struct.pointer_map_t* %121), !dbg !4408
  call void @free_histograms(), !dbg !4409
  call void @construct_exit_block(), !dbg !4410
  %122 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4411
  %decl_common186 = bitcast %union.tree_node* %122 to %struct.tree_decl_common*, !dbg !4411
  %initial187 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common186, i32 0, i32 5, !dbg !4411
  %123 = load %union.tree_node*, %union.tree_node** %initial187, align 8, !dbg !4411
  call void @set_curr_insn_block(%union.tree_node* %123), !dbg !4412
  call void @insn_locators_finalize(), !dbg !4413
  %124 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4414
  %add.ptr188 = getelementptr inbounds %struct.function, %struct.function* %124, i64 0, !dbg !4414
  call void @set_eh_throw_stmt_table(%struct.function* %add.ptr188, %struct.htab* null), !dbg !4415
  %call189 = call %struct.rtx_def* @get_insns(), !dbg !4416
  call void @rebuild_jump_labels(%struct.rtx_def* %call189), !dbg !4417
  %125 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4418
  %add.ptr190 = getelementptr inbounds %struct.function, %struct.function* %125, i64 0, !dbg !4418
  %cfg191 = getelementptr inbounds %struct.function, %struct.function* %add.ptr190, i32 0, i32 1, !dbg !4418
  %126 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg191, align 8, !dbg !4418
  %x_entry_block_ptr192 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %126, i32 0, i32 0, !dbg !4418
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr192, align 8, !dbg !4418
  store %struct.basic_block_def* %127, %struct.basic_block_def** %bb, align 8, !dbg !4418
  br label %for.cond193, !dbg !4418

for.cond193:                                      ; preds = %for.inc214, %if.end181
  %128 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4420
  %129 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4420
  %add.ptr194 = getelementptr inbounds %struct.function, %struct.function* %129, i64 0, !dbg !4420
  %cfg195 = getelementptr inbounds %struct.function, %struct.function* %add.ptr194, i32 0, i32 1, !dbg !4420
  %130 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg195, align 8, !dbg !4420
  %x_exit_block_ptr196 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %130, i32 0, i32 1, !dbg !4420
  %131 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr196, align 8, !dbg !4420
  %cmp197 = icmp ne %struct.basic_block_def* %128, %131, !dbg !4420
  br i1 %cmp197, label %for.body199, label %for.end216, !dbg !4418

for.body199:                                      ; preds = %for.cond193
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e200, metadata !4422, metadata !DIExpression()), !dbg !4424
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei201, metadata !4425, metadata !DIExpression()), !dbg !4426
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4427
  %succs203 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %132, i32 0, i32 1, !dbg !4427
  %call204 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs203), !dbg !4427
  %133 = bitcast %struct.edge_iterator* %tmp202 to { i32, %struct.VEC_edge_gc** }*, !dbg !4427
  %134 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %133, i32 0, i32 0, !dbg !4427
  %135 = extractvalue { i32, %struct.VEC_edge_gc** } %call204, 0, !dbg !4427
  store i32 %135, i32* %134, align 8, !dbg !4427
  %136 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %133, i32 0, i32 1, !dbg !4427
  %137 = extractvalue { i32, %struct.VEC_edge_gc** } %call204, 1, !dbg !4427
  store %struct.VEC_edge_gc** %137, %struct.VEC_edge_gc*** %136, align 8, !dbg !4427
  %138 = bitcast %struct.edge_iterator* %ei201 to i8*, !dbg !4427
  %139 = bitcast %struct.edge_iterator* %tmp202 to i8*, !dbg !4427
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 16, i1 false), !dbg !4427
  br label %for.cond205, !dbg !4429

for.cond205:                                      ; preds = %if.end212, %for.body199
  %140 = bitcast %struct.edge_iterator* %ei201 to { i32, %struct.VEC_edge_gc** }*, !dbg !4430
  %141 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %140, i32 0, i32 0, !dbg !4430
  %142 = load i32, i32* %141, align 8, !dbg !4430
  %143 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %140, i32 0, i32 1, !dbg !4430
  %144 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %143, align 8, !dbg !4430
  %call206 = call %struct.edge_def* @ei_safe_edge(i32 %142, %struct.VEC_edge_gc** %144), !dbg !4430
  store %struct.edge_def* %call206, %struct.edge_def** %e200, align 8, !dbg !4432
  %tobool207 = icmp ne %struct.edge_def* %call206, null, !dbg !4433
  br i1 %tobool207, label %for.body208, label %for.end213, !dbg !4433

for.body208:                                      ; preds = %for.cond205
  %145 = load %struct.edge_def*, %struct.edge_def** %e200, align 8, !dbg !4434
  %insns = getelementptr inbounds %struct.edge_def, %struct.edge_def* %145, i32 0, i32 2, !dbg !4437
  %r = bitcast %union.edge_def_insns* %insns to %struct.rtx_def**, !dbg !4438
  %146 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8, !dbg !4438
  %tobool209 = icmp ne %struct.rtx_def* %146, null, !dbg !4434
  br i1 %tobool209, label %if.then210, label %if.else211, !dbg !4439

if.then210:                                       ; preds = %for.body208
  %147 = load %struct.edge_def*, %struct.edge_def** %e200, align 8, !dbg !4440
  call void @commit_one_edge_insertion(%struct.edge_def* %147), !dbg !4441
  br label %if.end212, !dbg !4441

if.else211:                                       ; preds = %for.body208
  call void @ei_next(%struct.edge_iterator* %ei201), !dbg !4442
  br label %if.end212

if.end212:                                        ; preds = %if.else211, %if.then210
  br label %for.cond205, !dbg !4443, !llvm.loop !4444

for.end213:                                       ; preds = %for.cond205
  br label %for.inc214, !dbg !4446

for.inc214:                                       ; preds = %for.end213
  %148 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4420
  %next_bb215 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %148, i32 0, i32 6, !dbg !4420
  %149 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb215, align 8, !dbg !4420
  store %struct.basic_block_def* %149, %struct.basic_block_def** %bb, align 8, !dbg !4420
  br label %for.cond193, !dbg !4420, !llvm.loop !4447

for.end216:                                       ; preds = %for.cond193
  store i32 0, i32* @currently_expanding_to_rtl, align 4, !dbg !4449
  %150 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4450
  %add.ptr217 = getelementptr inbounds %struct.function, %struct.function* %150, i64 0, !dbg !4450
  %cfg218 = getelementptr inbounds %struct.function, %struct.function* %add.ptr217, i32 0, i32 1, !dbg !4450
  %151 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg218, align 8, !dbg !4450
  %x_entry_block_ptr219 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %151, i32 0, i32 0, !dbg !4450
  %152 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr219, align 8, !dbg !4450
  %next_bb220 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %152, i32 0, i32 6, !dbg !4450
  %153 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb220, align 8, !dbg !4450
  store %struct.basic_block_def* %153, %struct.basic_block_def** %bb, align 8, !dbg !4450
  br label %for.cond221, !dbg !4450

for.cond221:                                      ; preds = %for.inc250, %for.end216
  %154 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4452
  %155 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4452
  %add.ptr222 = getelementptr inbounds %struct.function, %struct.function* %155, i64 0, !dbg !4452
  %cfg223 = getelementptr inbounds %struct.function, %struct.function* %add.ptr222, i32 0, i32 1, !dbg !4452
  %156 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg223, align 8, !dbg !4452
  %x_exit_block_ptr224 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %156, i32 0, i32 1, !dbg !4452
  %157 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr224, align 8, !dbg !4452
  %cmp225 = icmp ne %struct.basic_block_def* %154, %157, !dbg !4452
  br i1 %cmp225, label %for.body227, label %for.end252, !dbg !4450

for.body227:                                      ; preds = %for.cond221
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e228, metadata !4454, metadata !DIExpression()), !dbg !4456
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei229, metadata !4457, metadata !DIExpression()), !dbg !4458
  %158 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4459
  %succs231 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %158, i32 0, i32 1, !dbg !4459
  %call232 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs231), !dbg !4459
  %159 = bitcast %struct.edge_iterator* %tmp230 to { i32, %struct.VEC_edge_gc** }*, !dbg !4459
  %160 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %159, i32 0, i32 0, !dbg !4459
  %161 = extractvalue { i32, %struct.VEC_edge_gc** } %call232, 0, !dbg !4459
  store i32 %161, i32* %160, align 8, !dbg !4459
  %162 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %159, i32 0, i32 1, !dbg !4459
  %163 = extractvalue { i32, %struct.VEC_edge_gc** } %call232, 1, !dbg !4459
  store %struct.VEC_edge_gc** %163, %struct.VEC_edge_gc*** %162, align 8, !dbg !4459
  %164 = bitcast %struct.edge_iterator* %ei229 to i8*, !dbg !4459
  %165 = bitcast %struct.edge_iterator* %tmp230 to i8*, !dbg !4459
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %164, i8* align 8 %165, i64 16, i1 false), !dbg !4459
  br label %for.cond233, !dbg !4461

for.cond233:                                      ; preds = %if.end248, %for.body227
  %166 = bitcast %struct.edge_iterator* %ei229 to { i32, %struct.VEC_edge_gc** }*, !dbg !4462
  %167 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %166, i32 0, i32 0, !dbg !4462
  %168 = load i32, i32* %167, align 8, !dbg !4462
  %169 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %166, i32 0, i32 1, !dbg !4462
  %170 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %169, align 8, !dbg !4462
  %call234 = call %struct.edge_def* @ei_safe_edge(i32 %168, %struct.VEC_edge_gc** %170), !dbg !4462
  store %struct.edge_def* %call234, %struct.edge_def** %e228, align 8, !dbg !4464
  %tobool235 = icmp ne %struct.edge_def* %call234, null, !dbg !4465
  br i1 %tobool235, label %for.body236, label %for.end249, !dbg !4465

for.body236:                                      ; preds = %for.cond233
  %171 = load %struct.edge_def*, %struct.edge_def** %e228, align 8, !dbg !4466
  %flags237 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %171, i32 0, i32 7, !dbg !4468
  %172 = load i32, i32* %flags237, align 8, !dbg !4469
  %and238 = and i32 %172, -4097, !dbg !4469
  store i32 %and238, i32* %flags237, align 8, !dbg !4469
  %173 = load %struct.edge_def*, %struct.edge_def** %e228, align 8, !dbg !4470
  %flags239 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %173, i32 0, i32 7, !dbg !4472
  %174 = load i32, i32* %flags239, align 8, !dbg !4472
  %and240 = and i32 %174, 2, !dbg !4473
  %tobool241 = icmp ne i32 %and240, 0, !dbg !4473
  br i1 %tobool241, label %land.lhs.true242, label %if.else247, !dbg !4474

land.lhs.true242:                                 ; preds = %for.body236
  %175 = load %struct.edge_def*, %struct.edge_def** %e228, align 8, !dbg !4475
  %flags243 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %175, i32 0, i32 7, !dbg !4476
  %176 = load i32, i32* %flags243, align 8, !dbg !4476
  %and244 = and i32 %176, 256, !dbg !4477
  %tobool245 = icmp ne i32 %and244, 0, !dbg !4477
  br i1 %tobool245, label %if.else247, label %if.then246, !dbg !4478

if.then246:                                       ; preds = %land.lhs.true242
  %177 = load %struct.edge_def*, %struct.edge_def** %e228, align 8, !dbg !4479
  call void @remove_edge(%struct.edge_def* %177), !dbg !4480
  br label %if.end248, !dbg !4480

if.else247:                                       ; preds = %land.lhs.true242, %for.body236
  call void @ei_next(%struct.edge_iterator* %ei229), !dbg !4481
  br label %if.end248

if.end248:                                        ; preds = %if.else247, %if.then246
  br label %for.cond233, !dbg !4482, !llvm.loop !4483

for.end249:                                       ; preds = %for.cond233
  br label %for.inc250, !dbg !4485

for.inc250:                                       ; preds = %for.end249
  %178 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4452
  %next_bb251 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %178, i32 0, i32 6, !dbg !4452
  %179 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb251, align 8, !dbg !4452
  store %struct.basic_block_def* %179, %struct.basic_block_def** %bb, align 8, !dbg !4452
  br label %for.cond221, !dbg !4452, !llvm.loop !4486

for.end252:                                       ; preds = %for.cond221
  %180 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4488
  %add.ptr253 = getelementptr inbounds %struct.function, %struct.function* %180, i64 0, !dbg !4488
  %cfg254 = getelementptr inbounds %struct.function, %struct.function* %add.ptr253, i32 0, i32 1, !dbg !4488
  %181 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg254, align 8, !dbg !4488
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %181, i32 0, i32 5, !dbg !4488
  %182 = load i32, i32* %x_last_basic_block, align 8, !dbg !4488
  %call255 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %182), !dbg !4489
  store %struct.simple_bitmap_def* %call255, %struct.simple_bitmap_def** %blocks, align 8, !dbg !4490
  %183 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks, align 8, !dbg !4491
  call void @sbitmap_ones(%struct.simple_bitmap_def* %183), !dbg !4492
  %184 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks, align 8, !dbg !4493
  call void @find_many_sub_basic_blocks(%struct.simple_bitmap_def* %184), !dbg !4494
  %185 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks, align 8, !dbg !4495
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %185, i32 0, i32 0, !dbg !4495
  %186 = load i8*, i8** %popcount, align 8, !dbg !4495
  call void @free(i8* %186), !dbg !4495
  %187 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %blocks, align 8, !dbg !4495
  %188 = bitcast %struct.simple_bitmap_def* %187 to i8*, !dbg !4495
  call void @free(i8* %188), !dbg !4495
  %call256 = call zeroext i8 @purge_all_dead_edges(), !dbg !4496
  call void @compact_blocks(), !dbg !4497
  call void @expand_stack_alignment(), !dbg !4498
  %189 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4499
  %decl_with_vis = bitcast %union.tree_node* %189 to %struct.tree_decl_with_vis*, !dbg !4499
  %defer_output = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !4499
  %190 = bitcast i24* %defer_output to i32*, !dbg !4499
  %bf.load257 = load i32, i32* %190, align 8, !dbg !4500
  %bf.clear258 = and i32 %bf.load257, -2, !dbg !4500
  store i32 %bf.clear258, i32* %190, align 8, !dbg !4500
  store i32 0, i32* @generating_concat_p, align 4, !dbg !4501
  %191 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4502
  %tobool259 = icmp ne %struct._IO_FILE* %191, null, !dbg !4502
  br i1 %tobool259, label %if.then260, label %if.end262, !dbg !4504

if.then260:                                       ; preds = %for.end252
  %192 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4505
  %call261 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %192, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.8, i64 0, i64 0)), !dbg !4507
  br label %if.end262, !dbg !4508

if.end262:                                        ; preds = %if.then260, %for.end252
  call void @llvm.dbg.declare(metadata %union.tree_node** %parent, metadata !4509, metadata !DIExpression()), !dbg !4511
  %193 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4512
  %decl_minimal263 = bitcast %union.tree_node* %193 to %struct.tree_decl_minimal*, !dbg !4512
  %context264 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal263, i32 0, i32 4, !dbg !4512
  %194 = load %union.tree_node*, %union.tree_node** %context264, align 8, !dbg !4512
  store %union.tree_node* %194, %union.tree_node** %parent, align 8, !dbg !4514
  br label %for.cond265, !dbg !4515

for.cond265:                                      ; preds = %for.inc281, %if.end262
  %195 = load %union.tree_node*, %union.tree_node** %parent, align 8, !dbg !4516
  %cmp266 = icmp ne %union.tree_node* %195, null, !dbg !4518
  br i1 %cmp266, label %for.body268, label %for.end283, !dbg !4519

for.body268:                                      ; preds = %for.cond265
  %196 = load %union.tree_node*, %union.tree_node** %parent, align 8, !dbg !4520
  %base269 = bitcast %union.tree_node* %196 to %struct.tree_base*, !dbg !4520
  %197 = bitcast %struct.tree_base* %base269 to i64*, !dbg !4520
  %bf.load270 = load i64, i64* %197, align 8, !dbg !4520
  %bf.clear271 = and i64 %bf.load270, 65535, !dbg !4520
  %bf.cast272 = trunc i64 %bf.clear271 to i32, !dbg !4520
  %cmp273 = icmp eq i32 %bf.cast272, 29, !dbg !4522
  br i1 %cmp273, label %if.then275, label %if.end280, !dbg !4523

if.then275:                                       ; preds = %for.body268
  %198 = load %union.tree_node*, %union.tree_node** %parent, align 8, !dbg !4524
  %call276 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %198), !dbg !4524
  %base277 = bitcast %union.tree_node* %call276 to %struct.tree_base*, !dbg !4524
  %199 = bitcast %struct.tree_base* %base277 to i64*, !dbg !4524
  %bf.load278 = load i64, i64* %199, align 8, !dbg !4525
  %bf.clear279 = and i64 %bf.load278, -67108865, !dbg !4525
  %bf.set = or i64 %bf.clear279, 67108864, !dbg !4525
  store i64 %bf.set, i64* %199, align 8, !dbg !4525
  br label %if.end280, !dbg !4524

if.end280:                                        ; preds = %if.then275, %for.body268
  br label %for.inc281, !dbg !4526

for.inc281:                                       ; preds = %if.end280
  %200 = load %union.tree_node*, %union.tree_node** %parent, align 8, !dbg !4527
  %call282 = call %union.tree_node* @get_containing_scope(%union.tree_node* %200), !dbg !4528
  store %union.tree_node* %call282, %union.tree_node** %parent, align 8, !dbg !4529
  br label %for.cond265, !dbg !4530, !llvm.loop !4531

for.end283:                                       ; preds = %for.cond265
  %201 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4533
  %call284 = call zeroext i8 @cgraph_function_possibly_inlined_p(%union.tree_node* %201), !dbg !4535
  %tobool285 = icmp ne i8 %call284, 0, !dbg !4535
  br i1 %tobool285, label %if.then286, label %if.end287, !dbg !4536

if.then286:                                       ; preds = %for.end283
  %202 = load %struct.gcc_debug_hooks*, %struct.gcc_debug_hooks** @debug_hooks, align 8, !dbg !4537
  %outlining_inline_function = getelementptr inbounds %struct.gcc_debug_hooks, %struct.gcc_debug_hooks* %202, i32 0, i32 21, !dbg !4538
  %203 = load void (%union.tree_node*)*, void (%union.tree_node*)** %outlining_inline_function, align 8, !dbg !4538
  %204 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4539
  call void %203(%union.tree_node* %204), !dbg !4540
  br label %if.end287, !dbg !4540

if.end287:                                        ; preds = %if.then286, %for.end283
  %205 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4541
  %base288 = bitcast %union.tree_node* %205 to %struct.tree_base*, !dbg !4541
  %206 = bitcast %struct.tree_base* %base288 to i64*, !dbg !4541
  %bf.load289 = load i64, i64* %206, align 8, !dbg !4542
  %bf.clear290 = and i64 %bf.load289, -4194305, !dbg !4542
  %bf.set291 = or i64 %bf.clear290, 4194304, !dbg !4542
  store i64 %bf.set291, i64* %206, align 8, !dbg !4542
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 11), align 8, !dbg !4543
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 12), align 8, !dbg !4544
  %207 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4545
  %add.ptr292 = getelementptr inbounds %struct.function, %struct.function* %207, i64 0, !dbg !4545
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr292, i32 0, i32 6, !dbg !4545
  %208 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4545
  %decl_common293 = bitcast %union.tree_node* %208 to %struct.tree_decl_common*, !dbg !4545
  %initial294 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common293, i32 0, i32 5, !dbg !4545
  %209 = load %union.tree_node*, %union.tree_node** %initial294, align 8, !dbg !4545
  call void @set_block_levels(%union.tree_node* %209, i32 0), !dbg !4546
  call void @default_rtl_profile(), !dbg !4547
  ret i32 0, !dbg !4548
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !4549 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4552, metadata !DIExpression()), !dbg !4553
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4554
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4555
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4556
  %bf.load = load i32, i32* %1, align 8, !dbg !4556
  %bf.clear = and i32 %bf.load, 255, !dbg !4556
  ret i32 %bf.clear, !dbg !4557
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !4558 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4561, metadata !DIExpression()), !dbg !4562
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !4563, metadata !DIExpression()), !dbg !4564
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4565
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !4567
  %tobool = icmp ne i8 %call, 0, !dbg !4567
  br i1 %tobool, label %if.then, label %if.else, !dbg !4568

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4569
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !4571
  %2 = load i32, i32* %i.addr, align 4, !dbg !4572
  %idxprom = zext i32 %2 to i64, !dbg !4571
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !4571
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4571
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !4573
  br label %return, !dbg !4573

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4574
  br label %return, !dbg !4574

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4575
  ret %union.tree_node* %4, !dbg !4575
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !4576 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4577, metadata !DIExpression()), !dbg !4578
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4579
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4580
  %cmp = icmp uge i32 %call, 1, !dbg !4581
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4582

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4583
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !4584
  %cmp2 = icmp ule i32 %call1, 9, !dbg !4585
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !4586
  %land.ext = zext i1 %2 to i32, !dbg !4582
  %conv = trunc i32 %land.ext to i8, !dbg !4580
  ret i8 %conv, !dbg !4587
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !4588 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4591, metadata !DIExpression()), !dbg !4592
  call void @llvm.dbg.declare(metadata i64* %off, metadata !4593, metadata !DIExpression()), !dbg !4594
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4595
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !4596
  %idxprom = zext i32 %call to i64, !dbg !4597
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !4597
  %1 = load i64, i64* %arrayidx, align 8, !dbg !4597
  store i64 %1, i64* %off, align 8, !dbg !4598
  %2 = load i64, i64* %off, align 8, !dbg !4599
  %cmp = icmp ne i64 %2, 0, !dbg !4599
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4599

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4599
  br label %cond.end, !dbg !4599

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4599

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4599
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4600
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !4601
  %5 = load i64, i64* %off, align 8, !dbg !4602
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !4603
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !4604
  ret %union.tree_node** %6, !dbg !4605
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !4606 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4609, metadata !DIExpression()), !dbg !4610
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4611
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4612
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !4613
  ret i32 %call1, !dbg !4614
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !4615 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !4618, metadata !DIExpression()), !dbg !4619
  %0 = load i32, i32* %code.addr, align 4, !dbg !4620
  %idxprom = zext i32 %0 to i64, !dbg !4621
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !4621
  %1 = load i32, i32* %arrayidx, align 4, !dbg !4621
  ret i32 %1, !dbg !4622
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !4623 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4626, metadata !DIExpression()), !dbg !4627
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4628
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4629
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !4630
  %1 = load i32, i32* %num_ops, align 4, !dbg !4630
  ret i32 %1, !dbg !4631
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_tree_used(%union.tree_node* %block) #0 !dbg !4632 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !4635, metadata !DIExpression()), !dbg !4636
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4637, metadata !DIExpression()), !dbg !4638
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !4639
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*, !dbg !4639
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 3, !dbg !4639
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !4639
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !4641
  br label %for.cond, !dbg !4642

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4643
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !4645
  br i1 %tobool, label %for.body, label %for.end, !dbg !4645

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4646
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !4646
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !4646
  %bf.load = load i64, i64* %4, align 8, !dbg !4647
  %bf.clear = and i64 %bf.load, -16777217, !dbg !4647
  store i64 %bf.clear, i64* %4, align 8, !dbg !4647
  br label %for.inc, !dbg !4646

for.inc:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4648
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4648
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4648
  %6 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4648
  store %union.tree_node* %6, %union.tree_node** %t, align 8, !dbg !4649
  br label %for.cond, !dbg !4650, !llvm.loop !4651

for.end:                                          ; preds = %for.cond
  %7 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !4653
  %block2 = bitcast %union.tree_node* %7 to %struct.tree_block*, !dbg !4653
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block2, i32 0, i32 5, !dbg !4653
  %8 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !4653
  store %union.tree_node* %8, %union.tree_node** %t, align 8, !dbg !4655
  br label %for.cond3, !dbg !4656

for.cond3:                                        ; preds = %for.inc6, %for.end
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4657
  %tobool4 = icmp ne %union.tree_node* %9, null, !dbg !4659
  br i1 %tobool4, label %for.body5, label %for.end9, !dbg !4659

for.body5:                                        ; preds = %for.cond3
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4660
  call void @clear_tree_used(%union.tree_node* %10), !dbg !4661
  br label %for.inc6, !dbg !4661

for.inc6:                                         ; preds = %for.body5
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4662
  %common7 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !4662
  %chain8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 1, !dbg !4662
  %12 = load %union.tree_node*, %union.tree_node** %chain8, align 8, !dbg !4662
  store %union.tree_node* %12, %union.tree_node** %t, align 8, !dbg !4663
  br label %for.cond3, !dbg !4664, !llvm.loop !4665

for.end9:                                         ; preds = %for.cond3
  ret void, !dbg !4667
}

declare dso_local i32 @ix86_minimum_alignment(%union.tree_node*, i32, i32) #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @expand_one_error_var(%union.tree_node* %var) #0 !dbg !4668 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4669, metadata !DIExpression()), !dbg !4670
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !4671, metadata !DIExpression()), !dbg !4672
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4673
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !4673
  %mode1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4673
  %1 = bitcast i40* %mode1 to i64*, !dbg !4673
  %bf.load = load i64, i64* %1, align 8, !dbg !4673
  %bf.clear = and i64 %bf.load, 255, !dbg !4673
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4673
  store i32 %bf.cast, i32* %mode, align 4, !dbg !4672
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4674, metadata !DIExpression()), !dbg !4675
  %2 = load i32, i32* %mode, align 4, !dbg !4676
  %cmp = icmp eq i32 %2, 1, !dbg !4678
  br i1 %cmp, label %if.then, label %if.else, !dbg !4679

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4680
  %call = call %struct.rtx_def* @gen_rtx_MEM(i32 1, %struct.rtx_def* %3), !dbg !4681
  store %struct.rtx_def* %call, %struct.rtx_def** %x, align 8, !dbg !4682
  br label %if.end6, !dbg !4683

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %mode, align 4, !dbg !4684
  %cmp2 = icmp eq i32 %4, 0, !dbg !4686
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !4687

if.then3:                                         ; preds = %if.else
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4688
  store %struct.rtx_def* %5, %struct.rtx_def** %x, align 8, !dbg !4689
  br label %if.end, !dbg !4690

if.else4:                                         ; preds = %if.else
  %6 = load i32, i32* %mode, align 4, !dbg !4691
  %call5 = call %struct.rtx_def* @gen_reg_rtx(i32 %6), !dbg !4692
  store %struct.rtx_def* %call5, %struct.rtx_def** %x, align 8, !dbg !4693
  br label %if.end

if.end:                                           ; preds = %if.else4, %if.then3
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4694
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4694
  call void @set_decl_rtl(%union.tree_node* %7, %struct.rtx_def* %8), !dbg !4694
  ret void, !dbg !4695
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_one_hard_reg_var(%union.tree_node* %var) #0 !dbg !4696 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4697, metadata !DIExpression()), !dbg !4698
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4699
  call void @rest_of_decl_compilation(%union.tree_node* %0, i32 0, i32 0), !dbg !4700
  ret void, !dbg !4701
}

declare dso_local zeroext i8 @use_register_for_decl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @expand_one_register_var(%union.tree_node* %var) #0 !dbg !4702 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %reg_mode = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4703, metadata !DIExpression()), !dbg !4704
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !4705, metadata !DIExpression()), !dbg !4706
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4707
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4707
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4707
  %bf.load = load i64, i64* %1, align 8, !dbg !4707
  %bf.clear = and i64 %bf.load, 65535, !dbg !4707
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4707
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !4707
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4707

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4707
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !4707
  %var1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4707
  %3 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !4707
  br label %cond.end, !dbg !4707

cond.false:                                       ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4707
  br label %cond.end, !dbg !4707

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %3, %cond.true ], [ %4, %cond.false ], !dbg !4707
  store %union.tree_node* %cond, %union.tree_node** %decl, align 8, !dbg !4706
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4708, metadata !DIExpression()), !dbg !4709
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4710
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4710
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4710
  %6 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !4710
  store %union.tree_node* %6, %union.tree_node** %type, align 8, !dbg !4709
  call void @llvm.dbg.declare(metadata i32* %reg_mode, metadata !4711, metadata !DIExpression()), !dbg !4712
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4713
  %call = call i32 @promote_decl_mode(%union.tree_node* %7, i32* null), !dbg !4714
  store i32 %call, i32* %reg_mode, align 4, !dbg !4712
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4715, metadata !DIExpression()), !dbg !4716
  %8 = load i32, i32* %reg_mode, align 4, !dbg !4717
  %call3 = call %struct.rtx_def* @gen_reg_rtx(i32 %8), !dbg !4718
  store %struct.rtx_def* %call3, %struct.rtx_def** %x, align 8, !dbg !4716
  %9 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4719
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4720
  call void @set_rtl(%union.tree_node* %9, %struct.rtx_def* %10), !dbg !4721
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4722
  %decl_common = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !4722
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4722
  %12 = bitcast i40* %artificial_flag to i64*, !dbg !4722
  %bf.load4 = load i64, i64* %12, align 8, !dbg !4722
  %bf.lshr = lshr i64 %bf.load4, 12, !dbg !4722
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !4722
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !4722
  %tobool = icmp ne i32 %bf.cast6, 0, !dbg !4722
  br i1 %tobool, label %if.end, label %if.then, !dbg !4724

if.then:                                          ; preds = %cond.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4725
  call void @mark_user_reg(%struct.rtx_def* %13), !dbg !4726
  br label %if.end, !dbg !4726

if.end:                                           ; preds = %if.then, %cond.end
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4727
  %base7 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !4727
  %15 = bitcast %struct.tree_base* %base7 to i64*, !dbg !4727
  %bf.load8 = load i64, i64* %15, align 8, !dbg !4727
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !4727
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !4727
  %cmp11 = icmp eq i32 %bf.cast10, 10, !dbg !4727
  br i1 %cmp11, label %if.then17, label %lor.lhs.false, !dbg !4727

lor.lhs.false:                                    ; preds = %if.end
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4727
  %base12 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !4727
  %17 = bitcast %struct.tree_base* %base12 to i64*, !dbg !4727
  %bf.load13 = load i64, i64* %17, align 8, !dbg !4727
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !4727
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !4727
  %cmp16 = icmp eq i32 %bf.cast15, 12, !dbg !4727
  br i1 %cmp16, label %if.then17, label %if.end21, !dbg !4729

if.then17:                                        ; preds = %lor.lhs.false, %if.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4730
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4731
  %common18 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !4731
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !4731
  %20 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !4731
  %type20 = bitcast %union.tree_node* %20 to %struct.tree_type*, !dbg !4731
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type20, i32 0, i32 7, !dbg !4731
  %21 = load i32, i32* %align, align 8, !dbg !4731
  call void @mark_reg_pointer(%struct.rtx_def* %18, i32 %21), !dbg !4732
  br label %if.end21, !dbg !4732

if.end21:                                         ; preds = %if.then17, %lor.lhs.false
  ret void, !dbg !4733
}

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local void @error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @defer_stack_allocation(%union.tree_node* %var, i8 zeroext %toplevel) #0 !dbg !4734 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %toplevel.addr = alloca i8, align 1
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4737, metadata !DIExpression()), !dbg !4738
  store i8 %toplevel, i8* %toplevel.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %toplevel.addr, metadata !4739, metadata !DIExpression()), !dbg !4740
  %0 = load i32, i32* @flag_stack_protect, align 4, !dbg !4741
  %tobool = icmp ne i32 %0, 0, !dbg !4741
  br i1 %tobool, label %if.then, label %if.end, !dbg !4743

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4744
  br label %return, !dbg !4744

if.end:                                           ; preds = %entry
  %1 = load i8, i8* %toplevel.addr, align 1, !dbg !4745
  %conv = zext i8 %1 to i32, !dbg !4745
  %tobool1 = icmp ne i32 %conv, 0, !dbg !4745
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !4747

land.lhs.true:                                    ; preds = %if.end
  %2 = load i32, i32* @optimize, align 4, !dbg !4748
  %cmp = icmp slt i32 %2, 2, !dbg !4749
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !4750

if.then3:                                         ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !4751
  br label %return, !dbg !4751

if.end4:                                          ; preds = %land.lhs.true, %if.end
  %3 = load i32, i32* @optimize, align 4, !dbg !4752
  %cmp5 = icmp eq i32 %3, 0, !dbg !4754
  br i1 %cmp5, label %land.lhs.true7, label %if.end11, !dbg !4755

land.lhs.true7:                                   ; preds = %if.end4
  %4 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4756
  %decl_common = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !4756
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !4756
  %5 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4756
  %call = call i64 @tree_low_cst(%union.tree_node* %5, i32 1), !dbg !4757
  %cmp8 = icmp slt i64 %call, 32, !dbg !4758
  br i1 %cmp8, label %if.then10, label %if.end11, !dbg !4759

if.then10:                                        ; preds = %land.lhs.true7
  store i8 0, i8* %retval, align 1, !dbg !4760
  br label %return, !dbg !4760

if.end11:                                         ; preds = %land.lhs.true7, %if.end4
  store i8 1, i8* %retval, align 1, !dbg !4761
  br label %return, !dbg !4761

return:                                           ; preds = %if.end11, %if.then10, %if.then3, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !4762
  ret i8 %6, !dbg !4762
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_stack_var(%union.tree_node* %decl) #0 !dbg !4763 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4764, metadata !DIExpression()), !dbg !4765
  %0 = load i64, i64* @stack_vars_num, align 8, !dbg !4766
  %1 = load i64, i64* @stack_vars_alloc, align 8, !dbg !4768
  %cmp = icmp uge i64 %0, %1, !dbg !4769
  br i1 %cmp, label %if.then, label %if.end3, !dbg !4770

if.then:                                          ; preds = %entry
  %2 = load i64, i64* @stack_vars_alloc, align 8, !dbg !4771
  %tobool = icmp ne i64 %2, 0, !dbg !4771
  br i1 %tobool, label %if.then1, label %if.else, !dbg !4774

if.then1:                                         ; preds = %if.then
  %3 = load i64, i64* @stack_vars_alloc, align 8, !dbg !4775
  %mul = mul i64 %3, 3, !dbg !4776
  %div = udiv i64 %mul, 2, !dbg !4777
  store i64 %div, i64* @stack_vars_alloc, align 8, !dbg !4778
  br label %if.end, !dbg !4779

if.else:                                          ; preds = %if.then
  store i64 32, i64* @stack_vars_alloc, align 8, !dbg !4780
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then1
  %4 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4781
  %5 = bitcast %struct.stack_var* %4 to i8*, !dbg !4781
  %6 = load i64, i64* @stack_vars_alloc, align 8, !dbg !4781
  %mul2 = mul i64 56, %6, !dbg !4781
  %call = call i8* @xrealloc(i8* %5, i64 %mul2), !dbg !4781
  %7 = bitcast i8* %call to %struct.stack_var*, !dbg !4781
  store %struct.stack_var* %7, %struct.stack_var** @stack_vars, align 8, !dbg !4782
  br label %if.end3, !dbg !4783

if.end3:                                          ; preds = %if.end, %entry
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4784
  %9 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4785
  %10 = load i64, i64* @stack_vars_num, align 8, !dbg !4786
  %arrayidx = getelementptr inbounds %struct.stack_var, %struct.stack_var* %9, i64 %10, !dbg !4785
  %decl4 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx, i32 0, i32 0, !dbg !4787
  store %union.tree_node* %8, %union.tree_node** %decl4, align 8, !dbg !4788
  %11 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4789
  %12 = load i64, i64* @stack_vars_num, align 8, !dbg !4790
  %arrayidx5 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %11, i64 %12, !dbg !4789
  %offset = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx5, i32 0, i32 1, !dbg !4791
  store i64 0, i64* %offset, align 8, !dbg !4792
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4793
  %base = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !4793
  %14 = bitcast %struct.tree_base* %base to i64*, !dbg !4793
  %bf.load = load i64, i64* %14, align 8, !dbg !4793
  %bf.clear = and i64 %bf.load, 65535, !dbg !4793
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4793
  %cmp6 = icmp eq i32 %bf.cast, 141, !dbg !4793
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !4793

cond.true:                                        ; preds = %if.end3
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4793
  %ssa_name = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !4793
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4793
  %16 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4793
  br label %cond.end, !dbg !4793

cond.false:                                       ; preds = %if.end3
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4793
  br label %cond.end, !dbg !4793

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %16, %cond.true ], [ %17, %cond.false ], !dbg !4793
  %decl_common = bitcast %union.tree_node* %cond to %struct.tree_decl_common*, !dbg !4793
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !4793
  %18 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4793
  %call7 = call i64 @tree_low_cst(%union.tree_node* %18, i32 1), !dbg !4794
  %19 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4795
  %20 = load i64, i64* @stack_vars_num, align 8, !dbg !4796
  %arrayidx8 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %19, i64 %20, !dbg !4795
  %size = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx8, i32 0, i32 2, !dbg !4797
  store i64 %call7, i64* %size, align 8, !dbg !4798
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4799
  %base9 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !4799
  %22 = bitcast %struct.tree_base* %base9 to i64*, !dbg !4799
  %bf.load10 = load i64, i64* %22, align 8, !dbg !4799
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !4799
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !4799
  %cmp13 = icmp eq i32 %bf.cast12, 141, !dbg !4799
  br i1 %cmp13, label %cond.true14, label %cond.false17, !dbg !4799

cond.true14:                                      ; preds = %cond.end
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4799
  %ssa_name15 = bitcast %union.tree_node* %23 to %struct.tree_ssa_name*, !dbg !4799
  %var16 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name15, i32 0, i32 1, !dbg !4799
  %24 = load %union.tree_node*, %union.tree_node** %var16, align 8, !dbg !4799
  br label %cond.end18, !dbg !4799

cond.false17:                                     ; preds = %cond.end
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4799
  br label %cond.end18, !dbg !4799

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi %union.tree_node* [ %24, %cond.true14 ], [ %25, %cond.false17 ], !dbg !4799
  %call20 = call i32 @get_decl_align_unit(%union.tree_node* %cond19), !dbg !4800
  %26 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4801
  %27 = load i64, i64* @stack_vars_num, align 8, !dbg !4802
  %arrayidx21 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %26, i64 %27, !dbg !4801
  %alignb = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx21, i32 0, i32 3, !dbg !4803
  store i32 %call20, i32* %alignb, align 8, !dbg !4804
  %28 = load i64, i64* @stack_vars_num, align 8, !dbg !4805
  %29 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4806
  %30 = load i64, i64* @stack_vars_num, align 8, !dbg !4807
  %arrayidx22 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %29, i64 %30, !dbg !4806
  %representative = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx22, i32 0, i32 4, !dbg !4808
  store i64 %28, i64* %representative, align 8, !dbg !4809
  %31 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4810
  %32 = load i64, i64* @stack_vars_num, align 8, !dbg !4811
  %arrayidx23 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %31, i64 %32, !dbg !4810
  %next = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx23, i32 0, i32 5, !dbg !4812
  store i64 -1, i64* %next, align 8, !dbg !4813
  %33 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !4814
  %34 = load i64, i64* @stack_vars_num, align 8, !dbg !4815
  %arrayidx24 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %33, i64 %34, !dbg !4814
  %conflicts = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx24, i32 0, i32 6, !dbg !4816
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %conflicts, align 8, !dbg !4817
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4818
  %36 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !4819
  call void @set_rtl(%union.tree_node* %35, %struct.rtx_def* %36), !dbg !4820
  %37 = load i64, i64* @stack_vars_num, align 8, !dbg !4821
  %inc = add i64 %37, 1, !dbg !4821
  store i64 %inc, i64* @stack_vars_num, align 8, !dbg !4821
  ret void, !dbg !4822
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_one_stack_var(%union.tree_node* %var) #0 !dbg !4823 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %size = alloca i64, align 8
  %offset = alloca i64, align 8
  %align = alloca i64, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4824, metadata !DIExpression()), !dbg !4825
  call void @llvm.dbg.declare(metadata i64* %size, metadata !4826, metadata !DIExpression()), !dbg !4827
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !4828, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.declare(metadata i64* %align, metadata !4830, metadata !DIExpression()), !dbg !4831
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4832
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4832
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4832
  %bf.load = load i64, i64* %1, align 8, !dbg !4832
  %bf.clear = and i64 %bf.load, 65535, !dbg !4832
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4832
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !4832
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4832

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4832
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !4832
  %var1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4832
  %3 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !4832
  br label %cond.end, !dbg !4832

cond.false:                                       ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4832
  br label %cond.end, !dbg !4832

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %3, %cond.true ], [ %4, %cond.false ], !dbg !4832
  %decl_common = bitcast %union.tree_node* %cond to %struct.tree_decl_common*, !dbg !4832
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !4832
  %5 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4832
  %call = call i64 @tree_low_cst(%union.tree_node* %5, i32 1), !dbg !4833
  store i64 %call, i64* %size, align 8, !dbg !4834
  %6 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4835
  %base2 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4835
  %7 = bitcast %struct.tree_base* %base2 to i64*, !dbg !4835
  %bf.load3 = load i64, i64* %7, align 8, !dbg !4835
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !4835
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !4835
  %cmp6 = icmp eq i32 %bf.cast5, 141, !dbg !4835
  br i1 %cmp6, label %cond.true7, label %cond.false10, !dbg !4835

cond.true7:                                       ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4835
  %ssa_name8 = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !4835
  %var9 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name8, i32 0, i32 1, !dbg !4835
  %9 = load %union.tree_node*, %union.tree_node** %var9, align 8, !dbg !4835
  br label %cond.end11, !dbg !4835

cond.false10:                                     ; preds = %cond.end
  %10 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4835
  br label %cond.end11, !dbg !4835

cond.end11:                                       ; preds = %cond.false10, %cond.true7
  %cond12 = phi %union.tree_node* [ %9, %cond.true7 ], [ %10, %cond.false10 ], !dbg !4835
  %call13 = call i32 @get_decl_align_unit(%union.tree_node* %cond12), !dbg !4836
  %conv = zext i32 %call13 to i64, !dbg !4836
  store i64 %conv, i64* %align, align 8, !dbg !4837
  %11 = load i64, i64* %size, align 8, !dbg !4838
  %12 = load i64, i64* %align, align 8, !dbg !4839
  %call14 = call i64 @alloc_stack_frame_space(i64 %11, i64 %12), !dbg !4840
  store i64 %call14, i64* %offset, align 8, !dbg !4841
  %13 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4842
  %14 = load i64, i64* %offset, align 8, !dbg !4843
  call void @expand_one_stack_var_at(%union.tree_node* %13, i64 %14), !dbg !4844
  ret void, !dbg !4845
}

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_reg_rtx(i32) #2

declare dso_local void @set_decl_rtl(%union.tree_node*, %struct.rtx_def*) #2

declare dso_local void @rest_of_decl_compilation(%union.tree_node*, i32, i32) #2

declare dso_local i32 @promote_decl_mode(%union.tree_node*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_rtl(%union.tree_node* %t, %struct.rtx_def* %x) #0 !dbg !4846 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %var17 = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !4849, metadata !DIExpression()), !dbg !4850
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !4851, metadata !DIExpression()), !dbg !4852
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4853
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4853
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4853
  %bf.load = load i64, i64* %1, align 8, !dbg !4853
  %bf.clear = and i64 %bf.load, 65535, !dbg !4853
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4853
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !4855
  br i1 %cmp, label %if.then, label %if.else61, !dbg !4856

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4857
  %3 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 2), align 8, !dbg !4859
  %4 = load %struct._var_map*, %struct._var_map** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 0), align 8, !dbg !4860
  %5 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4861
  %call = call i32 @var_to_partition(%struct._var_map* %4, %union.tree_node* %5), !dbg !4862
  %idxprom = sext i32 %call to i64, !dbg !4863
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %3, i64 %idxprom, !dbg !4863
  store %struct.rtx_def* %2, %struct.rtx_def** %arrayidx, align 8, !dbg !4864
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4865
  %tobool = icmp ne %struct.rtx_def* %6, null, !dbg !4865
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4867

land.lhs.true:                                    ; preds = %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4868
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4868
  %bf.load1 = load i32, i32* %8, align 8, !dbg !4868
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4868
  %cmp3 = icmp eq i32 %bf.clear2, 43, !dbg !4868
  br i1 %cmp3, label %if.end, label %if.then4, !dbg !4869

if.then4:                                         ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4870
  %ssa_name = bitcast %union.tree_node* %9 to %struct.tree_ssa_name*, !dbg !4870
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4870
  %10 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4870
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4871
  call void @set_reg_attrs_for_decl_rtl(%union.tree_node* %10, %struct.rtx_def* %11), !dbg !4872
  br label %if.end, !dbg !4872

if.end:                                           ; preds = %if.then4, %land.lhs.true, %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4873
  %tobool5 = icmp ne %struct.rtx_def* %12, null, !dbg !4873
  br i1 %tobool5, label %land.lhs.true6, label %if.end60, !dbg !4875

land.lhs.true6:                                   ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4876
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !4877
  %cmp7 = icmp ne %struct.rtx_def* %13, %14, !dbg !4878
  br i1 %cmp7, label %land.lhs.true8, label %if.end60, !dbg !4879

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %15 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4880
  %ssa_name9 = bitcast %union.tree_node* %15 to %struct.tree_ssa_name*, !dbg !4880
  %var10 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name9, i32 0, i32 1, !dbg !4880
  %16 = load %union.tree_node*, %union.tree_node** %var10, align 8, !dbg !4880
  %base11 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !4880
  %17 = bitcast %struct.tree_base* %base11 to i64*, !dbg !4880
  %bf.load12 = load i64, i64* %17, align 8, !dbg !4880
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !4880
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !4880
  %cmp15 = icmp eq i32 %bf.cast14, 32, !dbg !4881
  br i1 %cmp15, label %if.then16, label %if.end60, !dbg !4882

if.then16:                                        ; preds = %land.lhs.true8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var17, metadata !4883, metadata !DIExpression()), !dbg !4885
  %18 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4886
  %ssa_name18 = bitcast %union.tree_node* %18 to %struct.tree_ssa_name*, !dbg !4886
  %var19 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name18, i32 0, i32 1, !dbg !4886
  %19 = load %union.tree_node*, %union.tree_node** %var19, align 8, !dbg !4886
  store %union.tree_node* %19, %union.tree_node** %var17, align 8, !dbg !4885
  %20 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4887
  %base20 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !4887
  %21 = bitcast %struct.tree_base* %base20 to i64*, !dbg !4887
  %bf.load21 = load i64, i64* %21, align 8, !dbg !4887
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !4887
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !4887
  %idxprom24 = zext i32 %bf.cast23 to i64, !dbg !4887
  %arrayidx25 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom24, !dbg !4887
  %arrayidx26 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx25, i64 0, i64 11, !dbg !4887
  %22 = load i8, i8* %arrayidx26, align 1, !dbg !4887
  %conv = zext i8 %22 to i32, !dbg !4887
  %tobool27 = icmp ne i32 %conv, 0, !dbg !4887
  br i1 %tobool27, label %land.lhs.true28, label %if.then31, !dbg !4887

land.lhs.true28:                                  ; preds = %if.then16
  %23 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4887
  %decl_with_rtl = bitcast %union.tree_node* %23 to %struct.tree_decl_with_rtl*, !dbg !4887
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !4887
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !4887
  %cmp29 = icmp ne %struct.rtx_def* %24, null, !dbg !4887
  br i1 %cmp29, label %if.else, label %if.then31, !dbg !4889

if.then31:                                        ; preds = %land.lhs.true28, %if.then16
  %25 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4890
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4890
  call void @set_decl_rtl(%union.tree_node* %25, %struct.rtx_def* %26), !dbg !4890
  br label %if.end59, !dbg !4890

if.else:                                          ; preds = %land.lhs.true28
  %27 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4891
  %decl_with_rtl32 = bitcast %union.tree_node* %27 to %struct.tree_decl_with_rtl*, !dbg !4891
  %rtl33 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl32, i32 0, i32 1, !dbg !4891
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtl33, align 8, !dbg !4891
  %tobool34 = icmp ne %struct.rtx_def* %28, null, !dbg !4891
  br i1 %tobool34, label %cond.true, label %cond.false, !dbg !4891

cond.true:                                        ; preds = %if.else
  %29 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4891
  %decl_with_rtl35 = bitcast %union.tree_node* %29 to %struct.tree_decl_with_rtl*, !dbg !4891
  %rtl36 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl35, i32 0, i32 1, !dbg !4891
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtl36, align 8, !dbg !4891
  br label %cond.end, !dbg !4891

cond.false:                                       ; preds = %if.else
  %31 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4891
  call void @make_decl_rtl(%union.tree_node* %31), !dbg !4891
  %32 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4891
  %decl_with_rtl37 = bitcast %union.tree_node* %32 to %struct.tree_decl_with_rtl*, !dbg !4891
  %rtl38 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl37, i32 0, i32 1, !dbg !4891
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtl38, align 8, !dbg !4891
  br label %cond.end, !dbg !4891

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %30, %cond.true ], [ %33, %cond.false ], !dbg !4891
  %34 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !4893
  %cmp39 = icmp eq %struct.rtx_def* %cond, %34, !dbg !4894
  br i1 %cmp39, label %if.then41, label %if.else42, !dbg !4895

if.then41:                                        ; preds = %cond.end
  br label %if.end58, !dbg !4895

if.else42:                                        ; preds = %cond.end
  %35 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4896
  %decl_with_rtl43 = bitcast %union.tree_node* %35 to %struct.tree_decl_with_rtl*, !dbg !4896
  %rtl44 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl43, i32 0, i32 1, !dbg !4896
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtl44, align 8, !dbg !4896
  %tobool45 = icmp ne %struct.rtx_def* %36, null, !dbg !4896
  br i1 %tobool45, label %cond.true46, label %cond.false49, !dbg !4896

cond.true46:                                      ; preds = %if.else42
  %37 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4896
  %decl_with_rtl47 = bitcast %union.tree_node* %37 to %struct.tree_decl_with_rtl*, !dbg !4896
  %rtl48 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl47, i32 0, i32 1, !dbg !4896
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtl48, align 8, !dbg !4896
  br label %cond.end52, !dbg !4896

cond.false49:                                     ; preds = %if.else42
  %39 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4896
  call void @make_decl_rtl(%union.tree_node* %39), !dbg !4896
  %40 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4896
  %decl_with_rtl50 = bitcast %union.tree_node* %40 to %struct.tree_decl_with_rtl*, !dbg !4896
  %rtl51 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl50, i32 0, i32 1, !dbg !4896
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rtl51, align 8, !dbg !4896
  br label %cond.end52, !dbg !4896

cond.end52:                                       ; preds = %cond.false49, %cond.true46
  %cond53 = phi %struct.rtx_def* [ %38, %cond.true46 ], [ %41, %cond.false49 ], !dbg !4896
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4898
  %cmp54 = icmp ne %struct.rtx_def* %cond53, %42, !dbg !4899
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !4900

if.then56:                                        ; preds = %cond.end52
  %43 = load %union.tree_node*, %union.tree_node** %var17, align 8, !dbg !4901
  %44 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !4901
  call void @set_decl_rtl(%union.tree_node* %43, %struct.rtx_def* %44), !dbg !4901
  br label %if.end57, !dbg !4901

if.end57:                                         ; preds = %if.then56, %cond.end52
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then41
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then31
  br label %if.end60, !dbg !4902

if.end60:                                         ; preds = %if.end59, %land.lhs.true8, %land.lhs.true6, %if.end
  br label %if.end62, !dbg !4903

if.else61:                                        ; preds = %entry
  %45 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !4904
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4904
  call void @set_decl_rtl(%union.tree_node* %45, %struct.rtx_def* %46), !dbg !4904
  br label %if.end62

if.end62:                                         ; preds = %if.else61, %if.end60
  ret void, !dbg !4905
}

declare dso_local void @mark_user_reg(%struct.rtx_def*) #2

declare dso_local void @mark_reg_pointer(%struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @var_to_partition(%struct._var_map* %map, %union.tree_node* %var) #0 !dbg !4906 {
entry:
  %map.addr = alloca %struct._var_map*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %part = alloca i32, align 4
  store %struct._var_map* %map, %struct._var_map** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._var_map** %map.addr, metadata !4909, metadata !DIExpression()), !dbg !4910
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !4911, metadata !DIExpression()), !dbg !4912
  call void @llvm.dbg.declare(metadata i32* %part, metadata !4913, metadata !DIExpression()), !dbg !4914
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4915
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4915
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4915
  %bf.load = load i64, i64* %1, align 8, !dbg !4915
  %bf.clear = and i64 %bf.load, 65535, !dbg !4915
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4915
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !4915
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4915

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i32 147, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4915
  br label %cond.end, !dbg !4915

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4915

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4915
  %2 = load %struct._var_map*, %struct._var_map** %map.addr, align 8, !dbg !4916
  %var_partition = getelementptr inbounds %struct._var_map, %struct._var_map* %2, i32 0, i32 0, !dbg !4916
  %3 = load %struct.partition_def*, %struct.partition_def** %var_partition, align 8, !dbg !4916
  %elements = getelementptr inbounds %struct.partition_def, %struct.partition_def* %3, i32 0, i32 1, !dbg !4916
  %4 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !4916
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !4916
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !4916
  %5 = load i32, i32* %version, align 8, !dbg !4916
  %idxprom = zext i32 %5 to i64, !dbg !4916
  %arrayidx = getelementptr inbounds [1 x %struct.partition_elem], [1 x %struct.partition_elem]* %elements, i64 0, i64 %idxprom, !dbg !4916
  %class_element = getelementptr inbounds %struct.partition_elem, %struct.partition_elem* %arrayidx, i32 0, i32 0, !dbg !4916
  %6 = load i32, i32* %class_element, align 8, !dbg !4916
  store i32 %6, i32* %part, align 4, !dbg !4917
  %7 = load %struct._var_map*, %struct._var_map** %map.addr, align 8, !dbg !4918
  %partition_to_view = getelementptr inbounds %struct._var_map, %struct._var_map* %7, i32 0, i32 1, !dbg !4920
  %8 = load i32*, i32** %partition_to_view, align 8, !dbg !4920
  %tobool = icmp ne i32* %8, null, !dbg !4918
  br i1 %tobool, label %if.then, label %if.end, !dbg !4921

if.then:                                          ; preds = %cond.end
  %9 = load %struct._var_map*, %struct._var_map** %map.addr, align 8, !dbg !4922
  %partition_to_view1 = getelementptr inbounds %struct._var_map, %struct._var_map* %9, i32 0, i32 1, !dbg !4923
  %10 = load i32*, i32** %partition_to_view1, align 8, !dbg !4923
  %11 = load i32, i32* %part, align 4, !dbg !4924
  %idxprom2 = sext i32 %11 to i64, !dbg !4922
  %arrayidx3 = getelementptr inbounds i32, i32* %10, i64 %idxprom2, !dbg !4922
  %12 = load i32, i32* %arrayidx3, align 4, !dbg !4922
  store i32 %12, i32* %part, align 4, !dbg !4925
  br label %if.end, !dbg !4926

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load i32, i32* %part, align 4, !dbg !4927
  ret i32 %13, !dbg !4928
}

declare dso_local void @set_reg_attrs_for_decl_rtl(%union.tree_node*, %struct.rtx_def*) #2

declare dso_local void @make_decl_rtl(%union.tree_node*) #2

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_decl_align_unit(%union.tree_node* %decl) #0 !dbg !4929 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %align = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4932, metadata !DIExpression()), !dbg !4933
  call void @llvm.dbg.declare(metadata i32* %align, metadata !4934, metadata !DIExpression()), !dbg !4935
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4936
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4936
  %decl_common = bitcast %union.tree_node* %1 to %struct.tree_decl_common*, !dbg !4936
  %align1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !4936
  %2 = load i32, i32* %align1, align 8, !dbg !4936
  %call = call i32 @ix86_local_alignment(%union.tree_node* %0, i32 0, i32 %2), !dbg !4936
  store i32 %call, i32* %align, align 4, !dbg !4937
  %3 = load i32, i32* %align, align 4, !dbg !4938
  %cmp = icmp ugt i32 %3, -2147483648, !dbg !4940
  br i1 %cmp, label %if.then, label %if.end, !dbg !4941

if.then:                                          ; preds = %entry
  store i32 -2147483648, i32* %align, align 4, !dbg !4942
  br label %if.end, !dbg !4943

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !4944
  %5 = load i32, i32* %align, align 4, !dbg !4948
  %cmp2 = icmp ult i32 %4, %5, !dbg !4949
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !4950

if.then3:                                         ; preds = %if.end
  %6 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 46), align 2, !dbg !4951
  %tobool = icmp ne i8 %6, 0, !dbg !4951
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4951

cond.true:                                        ; preds = %if.then3
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 215, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4951
  br label %cond.end, !dbg !4951

cond.false:                                       ; preds = %if.then3
  br label %cond.end, !dbg !4951

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4951
  %7 = load i32, i32* %align, align 4, !dbg !4953
  store i32 %7, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !4954
  br label %if.end4, !dbg !4955

if.end4:                                          ; preds = %cond.end, %if.end
  %8 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 22), align 4, !dbg !4956
  %9 = load i32, i32* %align, align 4, !dbg !4958
  %cmp5 = icmp ult i32 %8, %9, !dbg !4959
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !4960

if.then6:                                         ; preds = %if.end4
  %10 = load i32, i32* %align, align 4, !dbg !4961
  store i32 %10, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 22), align 4, !dbg !4962
  br label %if.end7, !dbg !4963

if.end7:                                          ; preds = %if.then6, %if.end4
  %11 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 25), align 8, !dbg !4964
  %12 = load i32, i32* %align, align 4, !dbg !4966
  %cmp8 = icmp ult i32 %11, %12, !dbg !4967
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !4968

if.then9:                                         ; preds = %if.end7
  %13 = load i32, i32* %align, align 4, !dbg !4969
  store i32 %13, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 25), align 8, !dbg !4970
  br label %if.end10, !dbg !4971

if.end10:                                         ; preds = %if.then9, %if.end7
  %14 = load i32, i32* %align, align 4, !dbg !4972
  %div = udiv i32 %14, 8, !dbg !4973
  ret i32 %div, !dbg !4974
}

declare dso_local i32 @ix86_local_alignment(%union.tree_node*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i64 @alloc_stack_frame_space(i64 %size, i64 %align) #0 !dbg !4975 {
entry:
  %size.addr = alloca i64, align 8
  %align.addr = alloca i64, align 8
  %offset = alloca i64, align 8
  %new_frame_offset = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !4978, metadata !DIExpression()), !dbg !4979
  store i64 %align, i64* %align.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %align.addr, metadata !4980, metadata !DIExpression()), !dbg !4981
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !4982, metadata !DIExpression()), !dbg !4983
  call void @llvm.dbg.declare(metadata i64* %new_frame_offset, metadata !4984, metadata !DIExpression()), !dbg !4985
  %0 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !4986
  store i64 %0, i64* %new_frame_offset, align 8, !dbg !4987
  %1 = load i64, i64* %size.addr, align 8, !dbg !4988
  %2 = load i32, i32* @frame_phase, align 4, !dbg !4991
  %conv = sext i32 %2 to i64, !dbg !4991
  %add = add nsw i64 %1, %conv, !dbg !4992
  %3 = load i64, i64* %new_frame_offset, align 8, !dbg !4993
  %sub = sub nsw i64 %3, %add, !dbg !4993
  store i64 %sub, i64* %new_frame_offset, align 8, !dbg !4993
  %4 = load i64, i64* %align.addr, align 8, !dbg !4994
  %sub1 = sub nsw i64 0, %4, !dbg !4995
  %5 = load i64, i64* %new_frame_offset, align 8, !dbg !4996
  %and = and i64 %5, %sub1, !dbg !4996
  store i64 %and, i64* %new_frame_offset, align 8, !dbg !4996
  %6 = load i32, i32* @frame_phase, align 4, !dbg !4997
  %conv2 = sext i32 %6 to i64, !dbg !4997
  %7 = load i64, i64* %new_frame_offset, align 8, !dbg !4998
  %add3 = add nsw i64 %7, %conv2, !dbg !4998
  store i64 %add3, i64* %new_frame_offset, align 8, !dbg !4998
  %8 = load i64, i64* %new_frame_offset, align 8, !dbg !4999
  store i64 %8, i64* %offset, align 8, !dbg !5000
  %9 = load i64, i64* %new_frame_offset, align 8, !dbg !5001
  store i64 %9, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !5002
  %10 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !5003
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5005
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !5005
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 6, !dbg !5006
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5006
  %call = call zeroext i8 @frame_offset_overflow(i64 %10, %union.tree_node* %12), !dbg !5007
  %tobool = icmp ne i8 %call, 0, !dbg !5007
  br i1 %tobool, label %if.then, label %if.end, !dbg !5008

if.then:                                          ; preds = %entry
  store i64 0, i64* %offset, align 8, !dbg !5009
  store i64 0, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !5010
  br label %if.end, !dbg !5011

if.end:                                           ; preds = %if.then, %entry
  %13 = load i64, i64* %offset, align 8, !dbg !5012
  ret i64 %13, !dbg !5013
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_one_stack_var_at(%union.tree_node* %decl, i64 %offset) #0 !dbg !5014 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %offset.addr = alloca i64, align 8
  %align = alloca i64, align 8
  %x = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5017, metadata !DIExpression()), !dbg !5018
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !5019, metadata !DIExpression()), !dbg !5020
  call void @llvm.dbg.declare(metadata i64* %align, metadata !5021, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !5023, metadata !DIExpression()), !dbg !5024
  %0 = load i64, i64* %offset.addr, align 8, !dbg !5025
  %1 = load i64, i64* %offset.addr, align 8, !dbg !5025
  %call = call i64 @trunc_int_for_mode(i64 %1, i32 16), !dbg !5025
  %cmp = icmp eq i64 %0, %call, !dbg !5025
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5025

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 716, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5025
  br label %cond.end, !dbg !5025

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5025

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5025
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !dbg !5026
  %3 = load i64, i64* %offset.addr, align 8, !dbg !5027
  %call1 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %2, i64 %3), !dbg !5028
  store %struct.rtx_def* %call1, %struct.rtx_def** %x, align 8, !dbg !5029
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5030
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5030
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !5030
  %bf.load = load i64, i64* %5, align 8, !dbg !5030
  %bf.clear = and i64 %bf.load, 65535, !dbg !5030
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5030
  %cmp2 = icmp eq i32 %bf.cast, 141, !dbg !5030
  br i1 %cmp2, label %cond.true3, label %cond.false4, !dbg !5030

cond.true3:                                       ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5030
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !5030
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5030
  %7 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5030
  br label %cond.end5, !dbg !5030

cond.false4:                                      ; preds = %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5030
  br label %cond.end5, !dbg !5030

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi %union.tree_node* [ %7, %cond.true3 ], [ %8, %cond.false4 ], !dbg !5030
  %decl_common = bitcast %union.tree_node* %cond6 to %struct.tree_decl_common*, !dbg !5030
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5030
  %9 = bitcast i40* %mode to i64*, !dbg !5030
  %bf.load7 = load i64, i64* %9, align 8, !dbg !5030
  %bf.clear8 = and i64 %bf.load7, 255, !dbg !5030
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !5030
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5031
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast9, %struct.rtx_def* %10), !dbg !5032
  store %struct.rtx_def* %call10, %struct.rtx_def** %x, align 8, !dbg !5033
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5034
  %base11 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5034
  %12 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5034
  %bf.load12 = load i64, i64* %12, align 8, !dbg !5034
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !5034
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !5034
  %cmp15 = icmp ne i32 %bf.cast14, 141, !dbg !5036
  br i1 %cmp15, label %if.then, label %if.end30, !dbg !5037

if.then:                                          ; preds = %cond.end5
  %13 = load i32, i32* @frame_phase, align 4, !dbg !5038
  %conv = sext i32 %13 to i64, !dbg !5038
  %14 = load i64, i64* %offset.addr, align 8, !dbg !5040
  %sub = sub nsw i64 %14, %conv, !dbg !5040
  store i64 %sub, i64* %offset.addr, align 8, !dbg !5040
  %15 = load i64, i64* %offset.addr, align 8, !dbg !5041
  %16 = load i64, i64* %offset.addr, align 8, !dbg !5042
  %sub16 = sub nsw i64 0, %16, !dbg !5043
  %and = and i64 %15, %sub16, !dbg !5044
  store i64 %and, i64* %align, align 8, !dbg !5045
  %17 = load i64, i64* %align, align 8, !dbg !5046
  %mul = mul i64 %17, 8, !dbg !5046
  store i64 %mul, i64* %align, align 8, !dbg !5046
  %18 = load i64, i64* %align, align 8, !dbg !5047
  %cmp17 = icmp eq i64 %18, 0, !dbg !5049
  br i1 %cmp17, label %if.then19, label %if.else, !dbg !5050

if.then19:                                        ; preds = %if.then
  store i64 32, i64* %align, align 8, !dbg !5051
  br label %if.end23, !dbg !5052

if.else:                                          ; preds = %if.then
  %19 = load i64, i64* %align, align 8, !dbg !5053
  %cmp20 = icmp ugt i64 %19, 2147483648, !dbg !5055
  br i1 %cmp20, label %if.then22, label %if.end, !dbg !5056

if.then22:                                        ; preds = %if.else
  store i64 2147483648, i64* %align, align 8, !dbg !5057
  br label %if.end, !dbg !5058

if.end:                                           ; preds = %if.then22, %if.else
  br label %if.end23

if.end23:                                         ; preds = %if.end, %if.then19
  %20 = load i64, i64* %align, align 8, !dbg !5059
  %conv24 = trunc i64 %20 to i32, !dbg !5059
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5060
  %decl_common25 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !5060
  %align26 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common25, i32 0, i32 3, !dbg !5060
  store i32 %conv24, i32* %align26, align 8, !dbg !5061
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5062
  %common = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !5062
  %base27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !5062
  %23 = bitcast %struct.tree_base* %base27 to i64*, !dbg !5062
  %bf.load28 = load i64, i64* %23, align 8, !dbg !5063
  %bf.clear29 = and i64 %bf.load28, -4398046511105, !dbg !5063
  store i64 %bf.clear29, i64* %23, align 8, !dbg !5063
  br label %if.end30, !dbg !5064

if.end30:                                         ; preds = %if.end23, %cond.end5
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5065
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5066
  %base31 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !5066
  %26 = bitcast %struct.tree_base* %base31 to i64*, !dbg !5066
  %bf.load32 = load i64, i64* %26, align 8, !dbg !5066
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !5066
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !5066
  %cmp35 = icmp eq i32 %bf.cast34, 141, !dbg !5066
  br i1 %cmp35, label %cond.true37, label %cond.false40, !dbg !5066

cond.true37:                                      ; preds = %if.end30
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5066
  %ssa_name38 = bitcast %union.tree_node* %27 to %struct.tree_ssa_name*, !dbg !5066
  %var39 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name38, i32 0, i32 1, !dbg !5066
  %28 = load %union.tree_node*, %union.tree_node** %var39, align 8, !dbg !5066
  br label %cond.end41, !dbg !5066

cond.false40:                                     ; preds = %if.end30
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5066
  br label %cond.end41, !dbg !5066

cond.end41:                                       ; preds = %cond.false40, %cond.true37
  %cond42 = phi %union.tree_node* [ %28, %cond.true37 ], [ %29, %cond.false40 ], !dbg !5066
  call void @set_mem_attributes(%struct.rtx_def* %24, %union.tree_node* %cond42, i32 1), !dbg !5067
  %30 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5068
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5069
  call void @set_rtl(%union.tree_node* %30, %struct.rtx_def* %31), !dbg !5070
  ret void, !dbg !5071
}

declare dso_local zeroext i8 @frame_offset_overflow(i64, %union.tree_node*) #2

declare dso_local i64 @trunc_int_for_mode(i64, i32) #2

declare dso_local %struct.rtx_def* @plus_constant(%struct.rtx_def*, i64) #2

declare dso_local void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local void @free(i8*) #2

declare dso_local i32 @rewrite_out_of_ssa(%struct.ssaexpand*) #2

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local void @rtl_profile_for_bb(%struct.basic_block_def*) #2

declare dso_local void @insn_locators_alloc() #2

declare dso_local void @set_curr_insn_source_location(i32) #2

declare dso_local void @set_curr_insn_block(%union.tree_node*) #2

declare dso_local i32 @curr_insn_locator() #2

declare dso_local %struct.rtx_def* @emit_note(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @discover_nonconstant_array_refs() #0 !dbg !5072 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5073, metadata !DIExpression()), !dbg !5074
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5075, metadata !DIExpression()), !dbg !5082
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5083
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5083
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5083
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5083
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !5083
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5083
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !5083
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5083
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !5083
  br label %for.cond, !dbg !5083

for.cond:                                         ; preds = %for.inc9, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5085
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5085
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5085
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !5085
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5085
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !5085
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5085
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !5085
  br i1 %cmp, label %for.body, label %for.end11, !dbg !5083

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5087
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !5089
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5089
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5089
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !5089
  br label %for.cond3, !dbg !5090

for.cond3:                                        ; preds = %for.inc, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5091
  %tobool = icmp ne i8 %call, 0, !dbg !5093
  %lnot = xor i1 %tobool, true, !dbg !5093
  br i1 %lnot, label %for.body4, label %for.end, !dbg !5094

for.body4:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5095, metadata !DIExpression()), !dbg !5097
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5098
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %stmt, align 8, !dbg !5097
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5099
  %call6 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %11), !dbg !5101
  %tobool7 = icmp ne i8 %call6, 0, !dbg !5101
  br i1 %tobool7, label %if.end, label %if.then, !dbg !5102

if.then:                                          ; preds = %for.body4
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5103
  %call8 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %12, %union.tree_node* (%union.tree_node**, i32*, i8*)* @discover_nonconstant_array_refs_r, %struct.walk_stmt_info* null), !dbg !5104
  br label %if.end, !dbg !5104

if.end:                                           ; preds = %if.then, %for.body4
  br label %for.inc, !dbg !5105

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !5106
  br label %for.cond3, !dbg !5107, !llvm.loop !5108

for.end:                                          ; preds = %for.cond3
  br label %for.inc9, !dbg !5109

for.inc9:                                         ; preds = %for.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5085
  %next_bb10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 6, !dbg !5085
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb10, align 8, !dbg !5085
  store %struct.basic_block_def* %14, %struct.basic_block_def** %bb, align 8, !dbg !5085
  br label %for.cond, !dbg !5085, !llvm.loop !5110

for.end11:                                        ; preds = %for.cond
  ret void, !dbg !5112
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_used_vars() #0 !dbg !5113 {
entry:
  %t = alloca %union.tree_node*, align 8
  %next = alloca %union.tree_node*, align 8
  %outer_block = alloca %union.tree_node*, align 8
  %maybe_local_decls = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %align = alloca i32, align 4
  %off = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  %var25 = alloca %union.tree_node*, align 8
  %expand_now = alloca i8, align 1
  %rtl = alloca %struct.rtx_def*, align 8
  %var172 = alloca %union.tree_node*, align 8
  %rtl175 = alloca %struct.rtx_def*, align 8
  %align228 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5114, metadata !DIExpression()), !dbg !5115
  call void @llvm.dbg.declare(metadata %union.tree_node** %next, metadata !5116, metadata !DIExpression()), !dbg !5117
  call void @llvm.dbg.declare(metadata %union.tree_node** %outer_block, metadata !5118, metadata !DIExpression()), !dbg !5119
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5120
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !5120
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !5120
  %1 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5120
  store %union.tree_node* %1, %union.tree_node** %outer_block, align 8, !dbg !5119
  call void @llvm.dbg.declare(metadata %union.tree_node** %maybe_local_decls, metadata !5121, metadata !DIExpression()), !dbg !5122
  store %union.tree_node* null, %union.tree_node** %maybe_local_decls, align 8, !dbg !5122
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5123, metadata !DIExpression()), !dbg !5124
  call void @llvm.dbg.declare(metadata i32* %align, metadata !5125, metadata !DIExpression()), !dbg !5127
  %2 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !5128
  %div = udiv i32 %2, 8, !dbg !5129
  store i32 %div, i32* %align, align 4, !dbg !5127
  call void @llvm.dbg.declare(metadata i32* %off, metadata !5130, metadata !DIExpression()), !dbg !5131
  %3 = load i32, i32* %align, align 4, !dbg !5132
  %rem = srem i32 0, %3, !dbg !5133
  store i32 %rem, i32* %off, align 4, !dbg !5131
  %4 = load i32, i32* %off, align 4, !dbg !5134
  %tobool = icmp ne i32 %4, 0, !dbg !5134
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5134

cond.true:                                        ; preds = %entry
  %5 = load i32, i32* %align, align 4, !dbg !5135
  %6 = load i32, i32* %off, align 4, !dbg !5136
  %sub = sub nsw i32 %5, %6, !dbg !5137
  br label %cond.end, !dbg !5134

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5134

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ], !dbg !5134
  store i32 %cond, i32* @frame_phase, align 4, !dbg !5138
  call void @init_vars_expansion(), !dbg !5139
  store i32 0, i32* %i, align 4, !dbg !5140
  br label %for.cond, !dbg !5142

for.cond:                                         ; preds = %for.inc, %cond.end
  %7 = load i32, i32* %i, align 4, !dbg !5143
  %8 = load %struct._var_map*, %struct._var_map** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 0), align 8, !dbg !5145
  %num_partitions = getelementptr inbounds %struct._var_map, %struct._var_map* %8, i32 0, i32 3, !dbg !5146
  %9 = load i32, i32* %num_partitions, align 8, !dbg !5146
  %cmp = icmp ult i32 %7, %9, !dbg !5147
  br i1 %cmp, label %for.body, label %for.end, !dbg !5148

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5149, metadata !DIExpression()), !dbg !5151
  %10 = load %struct._var_map*, %struct._var_map** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 0), align 8, !dbg !5152
  %11 = load i32, i32* %i, align 4, !dbg !5153
  %call = call %union.tree_node* @partition_to_var(%struct._var_map* %10, i32 %11), !dbg !5154
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !5151
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5155
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %12), !dbg !5155
  %tobool2 = icmp ne i8 %call1, 0, !dbg !5155
  br i1 %tobool2, label %cond.false4, label %cond.true3, !dbg !5155

cond.true3:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 1312, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5155
  br label %cond.end5, !dbg !5155

cond.false4:                                      ; preds = %for.body
  br label %cond.end5, !dbg !5155

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !5155
  %13 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5156
  %ssa_name = bitcast %union.tree_node* %13 to %struct.tree_ssa_name*, !dbg !5156
  %var7 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5156
  %14 = load %union.tree_node*, %union.tree_node** %var7, align 8, !dbg !5156
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5156
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !5156
  %bf.load = load i64, i64* %15, align 8, !dbg !5156
  %bf.clear = and i64 %bf.load, 65535, !dbg !5156
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5156
  %cmp8 = icmp eq i32 %bf.cast, 32, !dbg !5158
  br i1 %cmp8, label %if.then, label %if.else, !dbg !5159

if.then:                                          ; preds = %cond.end5
  %16 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5160
  %call9 = call i64 @expand_one_var(%union.tree_node* %16, i8 zeroext 1, i8 zeroext 1), !dbg !5161
  br label %if.end19, !dbg !5161

if.else:                                          ; preds = %cond.end5
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 3), align 8, !dbg !5162
  %18 = load i32, i32* %i, align 4, !dbg !5165
  %call10 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %17, i32 %18), !dbg !5166
  %tobool11 = icmp ne i32 %call10, 0, !dbg !5166
  br i1 %tobool11, label %if.end, label %if.then12, !dbg !5167

if.then12:                                        ; preds = %if.else
  %19 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5168
  %call13 = call i64 @expand_one_var(%union.tree_node* %19, i8 zeroext 1, i8 zeroext 1), !dbg !5170
  %20 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 2), align 8, !dbg !5171
  %21 = load i32, i32* %i, align 4, !dbg !5171
  %idxprom = zext i32 %21 to i64, !dbg !5171
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %20, i64 %idxprom, !dbg !5171
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !5171
  %tobool14 = icmp ne %struct.rtx_def* %22, null, !dbg !5171
  br i1 %tobool14, label %cond.false16, label %cond.true15, !dbg !5171

cond.true15:                                      ; preds = %if.then12
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 1325, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5171
  br label %cond.end17, !dbg !5171

cond.false16:                                     ; preds = %if.then12
  br label %cond.end17, !dbg !5171

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i32 [ 0, %cond.true15 ], [ 0, %cond.false16 ], !dbg !5171
  br label %if.end, !dbg !5172

if.end:                                           ; preds = %cond.end17, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then
  br label %for.inc, !dbg !5173

for.inc:                                          ; preds = %if.end19
  %23 = load i32, i32* %i, align 4, !dbg !5174
  %inc = add i32 %23, 1, !dbg !5174
  store i32 %inc, i32* %i, align 4, !dbg !5174
  br label %for.cond, !dbg !5175, !llvm.loop !5176

for.end:                                          ; preds = %for.cond
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5178
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !5178
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 9, !dbg !5179
  %25 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !5179
  store %union.tree_node* %25, %union.tree_node** %t, align 8, !dbg !5180
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5181
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !5181
  %local_decls21 = getelementptr inbounds %struct.function, %struct.function* %add.ptr20, i32 0, i32 9, !dbg !5182
  store %union.tree_node* null, %union.tree_node** %local_decls21, align 8, !dbg !5183
  br label %for.cond22, !dbg !5184

for.cond22:                                       ; preds = %for.inc131, %for.end
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5185
  %tobool23 = icmp ne %union.tree_node* %27, null, !dbg !5188
  br i1 %tobool23, label %for.body24, label %for.end132, !dbg !5188

for.body24:                                       ; preds = %for.cond22
  call void @llvm.dbg.declare(metadata %union.tree_node** %var25, metadata !5189, metadata !DIExpression()), !dbg !5191
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5192
  %list = bitcast %union.tree_node* %28 to %struct.tree_list*, !dbg !5192
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !5192
  %29 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5192
  store %union.tree_node* %29, %union.tree_node** %var25, align 8, !dbg !5191
  call void @llvm.dbg.declare(metadata i8* %expand_now, metadata !5193, metadata !DIExpression()), !dbg !5194
  store i8 0, i8* %expand_now, align 1, !dbg !5194
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5195
  %common = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !5195
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5195
  %31 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5195
  store %union.tree_node* %31, %union.tree_node** %next, align 8, !dbg !5196
  %32 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5197
  %call26 = call zeroext i8 @is_gimple_reg(%union.tree_node* %32), !dbg !5199
  %tobool27 = icmp ne i8 %call26, 0, !dbg !5199
  br i1 %tobool27, label %if.then28, label %if.else32, !dbg !5200

if.then28:                                        ; preds = %for.body24
  %33 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5201
  %base29 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !5201
  %34 = bitcast %struct.tree_base* %base29 to i64*, !dbg !5201
  %bf.load30 = load i64, i64* %34, align 8, !dbg !5203
  %bf.clear31 = and i64 %bf.load30, -16777217, !dbg !5203
  store i64 %bf.clear31, i64* %34, align 8, !dbg !5203
  br label %next63, !dbg !5204

if.else32:                                        ; preds = %for.body24
  %35 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5205
  %base33 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !5205
  %36 = bitcast %struct.tree_base* %base33 to i64*, !dbg !5205
  %bf.load34 = load i64, i64* %36, align 8, !dbg !5205
  %bf.lshr = lshr i64 %bf.load34, 26, !dbg !5205
  %bf.clear35 = and i64 %bf.lshr, 1, !dbg !5205
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !5205
  %tobool37 = icmp ne i32 %bf.cast36, 0, !dbg !5205
  br i1 %tobool37, label %if.then44, label %lor.lhs.false, !dbg !5207

lor.lhs.false:                                    ; preds = %if.else32
  %37 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5208
  %decl_common38 = bitcast %union.tree_node* %37 to %struct.tree_decl_common*, !dbg !5208
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common38, i32 0, i32 2, !dbg !5208
  %38 = bitcast i40* %decl_flag_1 to i64*, !dbg !5208
  %bf.load39 = load i64, i64* %38, align 8, !dbg !5208
  %bf.lshr40 = lshr i64 %bf.load39, 25, !dbg !5208
  %bf.clear41 = and i64 %bf.lshr40, 1, !dbg !5208
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !5208
  %tobool43 = icmp ne i32 %bf.cast42, 0, !dbg !5208
  br i1 %tobool43, label %if.then44, label %if.else45, !dbg !5209

if.then44:                                        ; preds = %lor.lhs.false, %if.else32
  store i8 1, i8* %expand_now, align 1, !dbg !5210
  br label %if.end54, !dbg !5211

if.else45:                                        ; preds = %lor.lhs.false
  %39 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5212
  %base46 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !5212
  %40 = bitcast %struct.tree_base* %base46 to i64*, !dbg !5212
  %bf.load47 = load i64, i64* %40, align 8, !dbg !5212
  %bf.lshr48 = lshr i64 %bf.load47, 24, !dbg !5212
  %bf.clear49 = and i64 %bf.lshr48, 1, !dbg !5212
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !5212
  %tobool51 = icmp ne i32 %bf.cast50, 0, !dbg !5212
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !5214

if.then52:                                        ; preds = %if.else45
  store i8 1, i8* %expand_now, align 1, !dbg !5215
  br label %if.end53, !dbg !5216

if.end53:                                         ; preds = %if.then52, %if.else45
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then44
  br label %if.end55

if.end55:                                         ; preds = %if.end54
  %41 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5217
  %base56 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !5217
  %42 = bitcast %struct.tree_base* %base56 to i64*, !dbg !5217
  %bf.load57 = load i64, i64* %42, align 8, !dbg !5218
  %bf.clear58 = and i64 %bf.load57, -16777217, !dbg !5218
  %bf.set = or i64 %bf.clear58, 16777216, !dbg !5218
  store i64 %bf.set, i64* %42, align 8, !dbg !5218
  %43 = load i8, i8* %expand_now, align 1, !dbg !5219
  %tobool59 = icmp ne i8 %43, 0, !dbg !5219
  br i1 %tobool59, label %if.then60, label %if.end62, !dbg !5221

if.then60:                                        ; preds = %if.end55
  %44 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5222
  %call61 = call i64 @expand_one_var(%union.tree_node* %44, i8 zeroext 1, i8 zeroext 1), !dbg !5223
  br label %if.end62, !dbg !5223

if.end62:                                         ; preds = %if.then60, %if.end55
  br label %next63, !dbg !5219

next63:                                           ; preds = %if.end62, %if.then28
  call void @llvm.dbg.label(metadata !5224), !dbg !5225
  %45 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5226
  %decl_common64 = bitcast %union.tree_node* %45 to %struct.tree_decl_common*, !dbg !5226
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common64, i32 0, i32 2, !dbg !5226
  %46 = bitcast i40* %artificial_flag to i64*, !dbg !5226
  %bf.load65 = load i64, i64* %46, align 8, !dbg !5226
  %bf.lshr66 = lshr i64 %bf.load65, 12, !dbg !5226
  %bf.clear67 = and i64 %bf.lshr66, 1, !dbg !5226
  %bf.cast68 = trunc i64 %bf.clear67 to i32, !dbg !5226
  %tobool69 = icmp ne i32 %bf.cast68, 0, !dbg !5226
  br i1 %tobool69, label %land.lhs.true, label %if.end130, !dbg !5228

land.lhs.true:                                    ; preds = %next63
  %47 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5229
  %decl_common70 = bitcast %union.tree_node* %47 to %struct.tree_decl_common*, !dbg !5229
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common70, i32 0, i32 2, !dbg !5229
  %48 = bitcast i40* %ignored_flag to i64*, !dbg !5229
  %bf.load71 = load i64, i64* %48, align 8, !dbg !5229
  %bf.lshr72 = lshr i64 %bf.load71, 10, !dbg !5229
  %bf.clear73 = and i64 %bf.lshr72, 1, !dbg !5229
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !5229
  %tobool75 = icmp ne i32 %bf.cast74, 0, !dbg !5229
  br i1 %tobool75, label %if.end130, label %if.then76, !dbg !5230

if.then76:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtl, metadata !5231, metadata !DIExpression()), !dbg !5233
  %49 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5234
  %base77 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !5234
  %50 = bitcast %struct.tree_base* %base77 to i64*, !dbg !5234
  %bf.load78 = load i64, i64* %50, align 8, !dbg !5234
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !5234
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !5234
  %idxprom81 = zext i32 %bf.cast80 to i64, !dbg !5234
  %arrayidx82 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom81, !dbg !5234
  %arrayidx83 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx82, i64 0, i64 11, !dbg !5234
  %51 = load i8, i8* %arrayidx83, align 1, !dbg !5234
  %conv = zext i8 %51 to i32, !dbg !5234
  %tobool84 = icmp ne i32 %conv, 0, !dbg !5234
  br i1 %tobool84, label %land.lhs.true85, label %cond.false101, !dbg !5234

land.lhs.true85:                                  ; preds = %if.then76
  %52 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5234
  %decl_with_rtl = bitcast %union.tree_node* %52 to %struct.tree_decl_with_rtl*, !dbg !5234
  %rtl86 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !5234
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtl86, align 8, !dbg !5234
  %cmp87 = icmp ne %struct.rtx_def* %53, null, !dbg !5234
  br i1 %cmp87, label %cond.true89, label %cond.false101, !dbg !5234

cond.true89:                                      ; preds = %land.lhs.true85
  %54 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5234
  %decl_with_rtl90 = bitcast %union.tree_node* %54 to %struct.tree_decl_with_rtl*, !dbg !5234
  %rtl91 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl90, i32 0, i32 1, !dbg !5234
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtl91, align 8, !dbg !5234
  %tobool92 = icmp ne %struct.rtx_def* %55, null, !dbg !5234
  br i1 %tobool92, label %cond.true93, label %cond.false96, !dbg !5234

cond.true93:                                      ; preds = %cond.true89
  %56 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5234
  %decl_with_rtl94 = bitcast %union.tree_node* %56 to %struct.tree_decl_with_rtl*, !dbg !5234
  %rtl95 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl94, i32 0, i32 1, !dbg !5234
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtl95, align 8, !dbg !5234
  br label %cond.end99, !dbg !5234

cond.false96:                                     ; preds = %cond.true89
  %58 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5234
  call void @make_decl_rtl(%union.tree_node* %58), !dbg !5234
  %59 = load %union.tree_node*, %union.tree_node** %var25, align 8, !dbg !5234
  %decl_with_rtl97 = bitcast %union.tree_node* %59 to %struct.tree_decl_with_rtl*, !dbg !5234
  %rtl98 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl97, i32 0, i32 1, !dbg !5234
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtl98, align 8, !dbg !5234
  br label %cond.end99, !dbg !5234

cond.end99:                                       ; preds = %cond.false96, %cond.true93
  %cond100 = phi %struct.rtx_def* [ %57, %cond.true93 ], [ %60, %cond.false96 ], !dbg !5234
  br label %cond.end102, !dbg !5234

cond.false101:                                    ; preds = %land.lhs.true85, %if.then76
  br label %cond.end102, !dbg !5234

cond.end102:                                      ; preds = %cond.false101, %cond.end99
  %cond103 = phi %struct.rtx_def* [ %cond100, %cond.end99 ], [ null, %cond.false101 ], !dbg !5234
  store %struct.rtx_def* %cond103, %struct.rtx_def** %rtl, align 8, !dbg !5233
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !5235
  %tobool104 = icmp ne %struct.rtx_def* %61, null, !dbg !5235
  br i1 %tobool104, label %land.lhs.true105, label %if.else122, !dbg !5237

land.lhs.true105:                                 ; preds = %cond.end102
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !5238
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !5238
  %bf.load106 = load i32, i32* %63, align 8, !dbg !5238
  %bf.clear107 = and i32 %bf.load106, 65535, !dbg !5238
  %cmp108 = icmp eq i32 %bf.clear107, 43, !dbg !5238
  br i1 %cmp108, label %if.then115, label %lor.lhs.false110, !dbg !5239

lor.lhs.false110:                                 ; preds = %land.lhs.true105
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !5240
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !5240
  %bf.load111 = load i32, i32* %65, align 8, !dbg !5240
  %bf.clear112 = and i32 %bf.load111, 65535, !dbg !5240
  %cmp113 = icmp eq i32 %bf.clear112, 41, !dbg !5241
  br i1 %cmp113, label %if.then115, label %if.else122, !dbg !5242

if.then115:                                       ; preds = %lor.lhs.false110, %land.lhs.true105
  %66 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5243
  %add.ptr116 = getelementptr inbounds %struct.function, %struct.function* %66, i64 0, !dbg !5243
  %local_decls117 = getelementptr inbounds %struct.function, %struct.function* %add.ptr116, i32 0, i32 9, !dbg !5245
  %67 = load %union.tree_node*, %union.tree_node** %local_decls117, align 8, !dbg !5245
  %68 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5246
  %common118 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !5246
  %chain119 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common118, i32 0, i32 1, !dbg !5246
  store %union.tree_node* %67, %union.tree_node** %chain119, align 8, !dbg !5247
  %69 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5248
  %70 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5249
  %add.ptr120 = getelementptr inbounds %struct.function, %struct.function* %70, i64 0, !dbg !5249
  %local_decls121 = getelementptr inbounds %struct.function, %struct.function* %add.ptr120, i32 0, i32 9, !dbg !5250
  store %union.tree_node* %69, %union.tree_node** %local_decls121, align 8, !dbg !5251
  br label %for.inc131, !dbg !5252

if.else122:                                       ; preds = %lor.lhs.false110, %cond.end102
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !5253
  %cmp123 = icmp eq %struct.rtx_def* %71, null, !dbg !5255
  br i1 %cmp123, label %if.then125, label %if.end128, !dbg !5256

if.then125:                                       ; preds = %if.else122
  %72 = load %union.tree_node*, %union.tree_node** %maybe_local_decls, align 8, !dbg !5257
  %73 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5259
  %common126 = bitcast %union.tree_node* %73 to %struct.tree_common*, !dbg !5259
  %chain127 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common126, i32 0, i32 1, !dbg !5259
  store %union.tree_node* %72, %union.tree_node** %chain127, align 8, !dbg !5260
  %74 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5261
  store %union.tree_node* %74, %union.tree_node** %maybe_local_decls, align 8, !dbg !5262
  br label %for.inc131, !dbg !5263

if.end128:                                        ; preds = %if.else122
  br label %if.end129

if.end129:                                        ; preds = %if.end128
  br label %if.end130, !dbg !5264

if.end130:                                        ; preds = %if.end129, %land.lhs.true, %next63
  %75 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5265
  %76 = bitcast %union.tree_node* %75 to i8*, !dbg !5265
  call void @ggc_free(i8* %76), !dbg !5266
  br label %for.inc131, !dbg !5267

for.inc131:                                       ; preds = %if.end130, %if.then125, %if.then115
  %77 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !5268
  store %union.tree_node* %77, %union.tree_node** %t, align 8, !dbg !5269
  br label %for.cond22, !dbg !5270, !llvm.loop !5271

for.end132:                                       ; preds = %for.cond22
  %78 = load %union.tree_node*, %union.tree_node** %outer_block, align 8, !dbg !5273
  call void @expand_used_vars_for_block(%union.tree_node* %78, i8 zeroext 1), !dbg !5274
  %79 = load i64, i64* @stack_vars_num, align 8, !dbg !5275
  %cmp133 = icmp ugt i64 %79, 0, !dbg !5277
  br i1 %cmp133, label %if.then135, label %if.end142, !dbg !5278

if.then135:                                       ; preds = %for.end132
  call void @add_alias_set_conflicts(), !dbg !5279
  %80 = load i32, i32* @flag_stack_protect, align 4, !dbg !5281
  %tobool136 = icmp ne i32 %80, 0, !dbg !5281
  br i1 %tobool136, label %if.then137, label %if.end138, !dbg !5283

if.then137:                                       ; preds = %if.then135
  call void @add_stack_protection_conflicts(), !dbg !5284
  br label %if.end138, !dbg !5284

if.end138:                                        ; preds = %if.then137, %if.then135
  call void @partition_stack_vars(), !dbg !5285
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5286
  %tobool139 = icmp ne %struct._IO_FILE* %81, null, !dbg !5286
  br i1 %tobool139, label %if.then140, label %if.end141, !dbg !5288

if.then140:                                       ; preds = %if.end138
  call void @dump_stack_var_partition(), !dbg !5289
  br label %if.end141, !dbg !5289

if.end141:                                        ; preds = %if.then140, %if.end138
  br label %if.end142, !dbg !5290

if.end142:                                        ; preds = %if.end141, %for.end132
  %82 = load i32, i32* @flag_stack_protect, align 4, !dbg !5291
  %cmp143 = icmp eq i32 %82, 2, !dbg !5293
  br i1 %cmp143, label %if.then156, label %lor.lhs.false145, !dbg !5294

lor.lhs.false145:                                 ; preds = %if.end142
  %83 = load i32, i32* @flag_stack_protect, align 4, !dbg !5295
  %tobool146 = icmp ne i32 %83, 0, !dbg !5295
  br i1 %tobool146, label %land.lhs.true147, label %if.end157, !dbg !5296

land.lhs.true147:                                 ; preds = %lor.lhs.false145
  %84 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5297
  %add.ptr148 = getelementptr inbounds %struct.function, %struct.function* %84, i64 0, !dbg !5297
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %add.ptr148, i32 0, i32 20, !dbg !5298
  %bf.load149 = load i32, i32* %calls_alloca, align 8, !dbg !5298
  %bf.lshr150 = lshr i32 %bf.load149, 19, !dbg !5298
  %bf.clear151 = and i32 %bf.lshr150, 1, !dbg !5298
  %tobool152 = icmp ne i32 %bf.clear151, 0, !dbg !5297
  br i1 %tobool152, label %if.then156, label %lor.lhs.false153, !dbg !5299

lor.lhs.false153:                                 ; preds = %land.lhs.true147
  %85 = load i8, i8* @has_protected_decls, align 1, !dbg !5300
  %conv154 = zext i8 %85 to i32, !dbg !5300
  %tobool155 = icmp ne i32 %conv154, 0, !dbg !5300
  br i1 %tobool155, label %if.then156, label %if.end157, !dbg !5301

if.then156:                                       ; preds = %lor.lhs.false153, %land.lhs.true147, %if.end142
  call void @create_stack_guard(), !dbg !5302
  br label %if.end157, !dbg !5302

if.end157:                                        ; preds = %if.then156, %lor.lhs.false153, %lor.lhs.false145
  %86 = load i64, i64* @stack_vars_num, align 8, !dbg !5303
  %cmp158 = icmp ugt i64 %86, 0, !dbg !5305
  br i1 %cmp158, label %if.then160, label %if.end168, !dbg !5306

if.then160:                                       ; preds = %if.end157
  %87 = load i8, i8* @has_protected_decls, align 1, !dbg !5307
  %tobool161 = icmp ne i8 %87, 0, !dbg !5307
  br i1 %tobool161, label %if.then162, label %if.end167, !dbg !5310

if.then162:                                       ; preds = %if.then160
  call void @expand_stack_vars(i8 (%union.tree_node*)* @stack_protect_decl_phase_1), !dbg !5311
  %88 = load i32, i32* @flag_stack_protect, align 4, !dbg !5313
  %cmp163 = icmp eq i32 %88, 2, !dbg !5315
  br i1 %cmp163, label %if.then165, label %if.end166, !dbg !5316

if.then165:                                       ; preds = %if.then162
  call void @expand_stack_vars(i8 (%union.tree_node*)* @stack_protect_decl_phase_2), !dbg !5317
  br label %if.end166, !dbg !5317

if.end166:                                        ; preds = %if.then165, %if.then162
  br label %if.end167, !dbg !5318

if.end167:                                        ; preds = %if.end166, %if.then160
  call void @expand_stack_vars(i8 (%union.tree_node*)* null), !dbg !5319
  call void @fini_vars_expansion(), !dbg !5320
  br label %if.end168, !dbg !5321

if.end168:                                        ; preds = %if.end167, %if.end157
  %89 = load %union.tree_node*, %union.tree_node** %maybe_local_decls, align 8, !dbg !5322
  store %union.tree_node* %89, %union.tree_node** %t, align 8, !dbg !5324
  br label %for.cond169, !dbg !5325

for.cond169:                                      ; preds = %for.inc226, %if.end168
  %90 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5326
  %tobool170 = icmp ne %union.tree_node* %90, null, !dbg !5328
  br i1 %tobool170, label %for.body171, label %for.end227, !dbg !5328

for.body171:                                      ; preds = %for.cond169
  call void @llvm.dbg.declare(metadata %union.tree_node** %var172, metadata !5329, metadata !DIExpression()), !dbg !5331
  %91 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5332
  %list173 = bitcast %union.tree_node* %91 to %struct.tree_list*, !dbg !5332
  %value174 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list173, i32 0, i32 2, !dbg !5332
  %92 = load %union.tree_node*, %union.tree_node** %value174, align 8, !dbg !5332
  store %union.tree_node* %92, %union.tree_node** %var172, align 8, !dbg !5331
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtl175, metadata !5333, metadata !DIExpression()), !dbg !5334
  %93 = load %union.tree_node*, %union.tree_node** %var172, align 8, !dbg !5335
  %base176 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !5335
  %94 = bitcast %struct.tree_base* %base176 to i64*, !dbg !5335
  %bf.load177 = load i64, i64* %94, align 8, !dbg !5335
  %bf.clear178 = and i64 %bf.load177, 65535, !dbg !5335
  %bf.cast179 = trunc i64 %bf.clear178 to i32, !dbg !5335
  %idxprom180 = zext i32 %bf.cast179 to i64, !dbg !5335
  %arrayidx181 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom180, !dbg !5335
  %arrayidx182 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx181, i64 0, i64 11, !dbg !5335
  %95 = load i8, i8* %arrayidx182, align 1, !dbg !5335
  %conv183 = zext i8 %95 to i32, !dbg !5335
  %tobool184 = icmp ne i32 %conv183, 0, !dbg !5335
  br i1 %tobool184, label %land.lhs.true185, label %cond.false202, !dbg !5335

land.lhs.true185:                                 ; preds = %for.body171
  %96 = load %union.tree_node*, %union.tree_node** %var172, align 8, !dbg !5335
  %decl_with_rtl186 = bitcast %union.tree_node* %96 to %struct.tree_decl_with_rtl*, !dbg !5335
  %rtl187 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl186, i32 0, i32 1, !dbg !5335
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtl187, align 8, !dbg !5335
  %cmp188 = icmp ne %struct.rtx_def* %97, null, !dbg !5335
  br i1 %cmp188, label %cond.true190, label %cond.false202, !dbg !5335

cond.true190:                                     ; preds = %land.lhs.true185
  %98 = load %union.tree_node*, %union.tree_node** %var172, align 8, !dbg !5335
  %decl_with_rtl191 = bitcast %union.tree_node* %98 to %struct.tree_decl_with_rtl*, !dbg !5335
  %rtl192 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl191, i32 0, i32 1, !dbg !5335
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rtl192, align 8, !dbg !5335
  %tobool193 = icmp ne %struct.rtx_def* %99, null, !dbg !5335
  br i1 %tobool193, label %cond.true194, label %cond.false197, !dbg !5335

cond.true194:                                     ; preds = %cond.true190
  %100 = load %union.tree_node*, %union.tree_node** %var172, align 8, !dbg !5335
  %decl_with_rtl195 = bitcast %union.tree_node* %100 to %struct.tree_decl_with_rtl*, !dbg !5335
  %rtl196 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl195, i32 0, i32 1, !dbg !5335
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rtl196, align 8, !dbg !5335
  br label %cond.end200, !dbg !5335

cond.false197:                                    ; preds = %cond.true190
  %102 = load %union.tree_node*, %union.tree_node** %var172, align 8, !dbg !5335
  call void @make_decl_rtl(%union.tree_node* %102), !dbg !5335
  %103 = load %union.tree_node*, %union.tree_node** %var172, align 8, !dbg !5335
  %decl_with_rtl198 = bitcast %union.tree_node* %103 to %struct.tree_decl_with_rtl*, !dbg !5335
  %rtl199 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl198, i32 0, i32 1, !dbg !5335
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rtl199, align 8, !dbg !5335
  br label %cond.end200, !dbg !5335

cond.end200:                                      ; preds = %cond.false197, %cond.true194
  %cond201 = phi %struct.rtx_def* [ %101, %cond.true194 ], [ %104, %cond.false197 ], !dbg !5335
  br label %cond.end203, !dbg !5335

cond.false202:                                    ; preds = %land.lhs.true185, %for.body171
  br label %cond.end203, !dbg !5335

cond.end203:                                      ; preds = %cond.false202, %cond.end200
  %cond204 = phi %struct.rtx_def* [ %cond201, %cond.end200 ], [ null, %cond.false202 ], !dbg !5335
  store %struct.rtx_def* %cond204, %struct.rtx_def** %rtl175, align 8, !dbg !5334
  %105 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5336
  %common205 = bitcast %union.tree_node* %105 to %struct.tree_common*, !dbg !5336
  %chain206 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common205, i32 0, i32 1, !dbg !5336
  %106 = load %union.tree_node*, %union.tree_node** %chain206, align 8, !dbg !5336
  store %union.tree_node* %106, %union.tree_node** %next, align 8, !dbg !5337
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rtl175, align 8, !dbg !5338
  %tobool207 = icmp ne %struct.rtx_def* %107, null, !dbg !5338
  br i1 %tobool207, label %land.lhs.true208, label %if.end225, !dbg !5340

land.lhs.true208:                                 ; preds = %cond.end203
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rtl175, align 8, !dbg !5341
  %109 = bitcast %struct.rtx_def* %108 to i32*, !dbg !5341
  %bf.load209 = load i32, i32* %109, align 8, !dbg !5341
  %bf.clear210 = and i32 %bf.load209, 65535, !dbg !5341
  %cmp211 = icmp eq i32 %bf.clear210, 43, !dbg !5341
  br i1 %cmp211, label %if.then218, label %lor.lhs.false213, !dbg !5342

lor.lhs.false213:                                 ; preds = %land.lhs.true208
  %110 = load %struct.rtx_def*, %struct.rtx_def** %rtl175, align 8, !dbg !5343
  %111 = bitcast %struct.rtx_def* %110 to i32*, !dbg !5343
  %bf.load214 = load i32, i32* %111, align 8, !dbg !5343
  %bf.clear215 = and i32 %bf.load214, 65535, !dbg !5343
  %cmp216 = icmp eq i32 %bf.clear215, 41, !dbg !5344
  br i1 %cmp216, label %if.then218, label %if.end225, !dbg !5345

if.then218:                                       ; preds = %lor.lhs.false213, %land.lhs.true208
  %112 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5346
  %add.ptr219 = getelementptr inbounds %struct.function, %struct.function* %112, i64 0, !dbg !5346
  %local_decls220 = getelementptr inbounds %struct.function, %struct.function* %add.ptr219, i32 0, i32 9, !dbg !5348
  %113 = load %union.tree_node*, %union.tree_node** %local_decls220, align 8, !dbg !5348
  %114 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5349
  %common221 = bitcast %union.tree_node* %114 to %struct.tree_common*, !dbg !5349
  %chain222 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common221, i32 0, i32 1, !dbg !5349
  store %union.tree_node* %113, %union.tree_node** %chain222, align 8, !dbg !5350
  %115 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5351
  %116 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5352
  %add.ptr223 = getelementptr inbounds %struct.function, %struct.function* %116, i64 0, !dbg !5352
  %local_decls224 = getelementptr inbounds %struct.function, %struct.function* %add.ptr223, i32 0, i32 9, !dbg !5353
  store %union.tree_node* %115, %union.tree_node** %local_decls224, align 8, !dbg !5354
  br label %for.inc226, !dbg !5355

if.end225:                                        ; preds = %lor.lhs.false213, %cond.end203
  %117 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5356
  %118 = bitcast %union.tree_node* %117 to i8*, !dbg !5356
  call void @ggc_free(i8* %118), !dbg !5357
  br label %for.inc226, !dbg !5358

for.inc226:                                       ; preds = %if.end225, %if.then218
  %119 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !5359
  store %union.tree_node* %119, %union.tree_node** %t, align 8, !dbg !5360
  br label %for.cond169, !dbg !5361, !llvm.loop !5362

for.end227:                                       ; preds = %for.cond169
  call void @llvm.dbg.declare(metadata i64* %align228, metadata !5364, metadata !DIExpression()), !dbg !5367
  %120 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !5368
  %div229 = udiv i32 %120, 8, !dbg !5369
  %conv230 = zext i32 %div229 to i64, !dbg !5368
  store i64 %conv230, i64* %align228, align 8, !dbg !5367
  %121 = load i64, i64* %align228, align 8, !dbg !5370
  %sub231 = sub nsw i64 0, %121, !dbg !5371
  %122 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !5372
  %and = and i64 %122, %sub231, !dbg !5372
  store i64 %and, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !5372
  ret void, !dbg !5373
}

declare dso_local zeroext i8 @warning(i32, i8*, ...) #2

declare dso_local void @expand_function_start(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @partition_to_var(%struct._var_map* %map, i32 %i) #0 !dbg !5374 {
entry:
  %map.addr = alloca %struct._var_map*, align 8
  %i.addr = alloca i32, align 4
  %name = alloca %union.tree_node*, align 8
  store %struct._var_map* %map, %struct._var_map** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._var_map** %map.addr, metadata !5377, metadata !DIExpression()), !dbg !5378
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5379, metadata !DIExpression()), !dbg !5380
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !5381, metadata !DIExpression()), !dbg !5382
  %0 = load %struct._var_map*, %struct._var_map** %map.addr, align 8, !dbg !5383
  %view_to_partition = getelementptr inbounds %struct._var_map, %struct._var_map* %0, i32 0, i32 2, !dbg !5385
  %1 = load i32*, i32** %view_to_partition, align 8, !dbg !5385
  %tobool = icmp ne i32* %1, null, !dbg !5383
  br i1 %tobool, label %if.then, label %if.end, !dbg !5386

if.then:                                          ; preds = %entry
  %2 = load %struct._var_map*, %struct._var_map** %map.addr, align 8, !dbg !5387
  %view_to_partition1 = getelementptr inbounds %struct._var_map, %struct._var_map* %2, i32 0, i32 2, !dbg !5388
  %3 = load i32*, i32** %view_to_partition1, align 8, !dbg !5388
  %4 = load i32, i32* %i.addr, align 4, !dbg !5389
  %idxprom = sext i32 %4 to i64, !dbg !5387
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom, !dbg !5387
  %5 = load i32, i32* %arrayidx, align 4, !dbg !5387
  store i32 %5, i32* %i.addr, align 4, !dbg !5390
  br label %if.end, !dbg !5391

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct._var_map*, %struct._var_map** %map.addr, align 8, !dbg !5392
  %var_partition = getelementptr inbounds %struct._var_map, %struct._var_map* %6, i32 0, i32 0, !dbg !5392
  %7 = load %struct.partition_def*, %struct.partition_def** %var_partition, align 8, !dbg !5392
  %elements = getelementptr inbounds %struct.partition_def, %struct.partition_def* %7, i32 0, i32 1, !dbg !5392
  %8 = load i32, i32* %i.addr, align 4, !dbg !5392
  %idxprom2 = sext i32 %8 to i64, !dbg !5392
  %arrayidx3 = getelementptr inbounds [1 x %struct.partition_elem], [1 x %struct.partition_elem]* %elements, i64 0, i64 %idxprom2, !dbg !5392
  %class_element = getelementptr inbounds %struct.partition_elem, %struct.partition_elem* %arrayidx3, i32 0, i32 0, !dbg !5392
  %9 = load i32, i32* %class_element, align 8, !dbg !5392
  store i32 %9, i32* %i.addr, align 4, !dbg !5393
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5394
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !5394
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !5394
  %11 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5394
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %11, i32 0, i32 2, !dbg !5394
  %12 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !5394
  %tobool4 = icmp ne %struct.VEC_tree_gc* %12, null, !dbg !5394
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !5394

cond.true:                                        ; preds = %if.end
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5394
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !5394
  %gimple_df6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 3, !dbg !5394
  %14 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df6, align 8, !dbg !5394
  %ssa_names7 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %14, i32 0, i32 2, !dbg !5394
  %15 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names7, align 8, !dbg !5394
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %15, i32 0, i32 0, !dbg !5394
  br label %cond.end, !dbg !5394

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5394

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5394
  %16 = load i32, i32* %i.addr, align 4, !dbg !5394
  %call = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %16), !dbg !5394
  store %union.tree_node* %call, %union.tree_node** %name, align 8, !dbg !5395
  %17 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5396
  ret %union.tree_node* %17, !dbg !5397
}

declare dso_local void @set_mem_expr(%struct.rtx_def*, %union.tree_node*) #2

declare dso_local void @expand_main_function() #2

declare dso_local void @stack_protect_prologue() #2

declare dso_local void @expand_phi_nodes(%struct.ssaexpand*) #2

declare dso_local void @rtl_register_cfg_hooks() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @construct_init_block() #0 !dbg !5398 {
entry:
  %init_block = alloca %struct.basic_block_def*, align 8
  %first_block = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %flags = alloca i32, align 4
  %label = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %init_block, metadata !5401, metadata !DIExpression()), !dbg !5402
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_block, metadata !5403, metadata !DIExpression()), !dbg !5404
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5405, metadata !DIExpression()), !dbg !5406
  store %struct.edge_def* null, %struct.edge_def** %e, align 8, !dbg !5406
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !5407, metadata !DIExpression()), !dbg !5408
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5409
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5409
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5409
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5409
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !5409
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5409
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !5409
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5409
  %tobool = icmp ne %struct.VEC_edge_gc* %3, null, !dbg !5409
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5409

cond.true:                                        ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5409
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !5409
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !5409
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !5409
  %x_entry_block_ptr3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !5409
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr3, align 8, !dbg !5409
  %succs4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 1, !dbg !5409
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs4, align 8, !dbg !5409
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %7, i32 0, i32 0, !dbg !5409
  br label %cond.end, !dbg !5409

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5409

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5409
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5409
  %cmp = icmp eq i32 %call, 1, !dbg !5409
  br i1 %cmp, label %cond.false6, label %cond.true5, !dbg !5409

cond.true5:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 3452, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5409
  br label %cond.end7, !dbg !5409

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !5409

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !5409
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5410
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !5410
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !5410
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !5410
  %x_entry_block_ptr11 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 0, !dbg !5410
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr11, align 8, !dbg !5410
  call void @init_rtl_bb_info(%struct.basic_block_def* %10), !dbg !5411
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5412
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !5412
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !5412
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !5412
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 1, !dbg !5412
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5412
  call void @init_rtl_bb_info(%struct.basic_block_def* %13), !dbg !5413
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5414
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !5414
  %cfg15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 1, !dbg !5414
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg15, align 8, !dbg !5414
  %x_entry_block_ptr16 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 0, !dbg !5414
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr16, align 8, !dbg !5414
  %flags17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 13, !dbg !5415
  %17 = load i32, i32* %flags17, align 8, !dbg !5416
  %or = or i32 %17, 512, !dbg !5416
  store i32 %or, i32* %flags17, align 8, !dbg !5416
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5417
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !5417
  %cfg19 = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 1, !dbg !5417
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg19, align 8, !dbg !5417
  %x_exit_block_ptr20 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 1, !dbg !5417
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr20, align 8, !dbg !5417
  %flags21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 13, !dbg !5418
  %21 = load i32, i32* %flags21, align 8, !dbg !5419
  %or22 = or i32 %21, 512, !dbg !5419
  store i32 %or22, i32* %flags21, align 8, !dbg !5419
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5420
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !5420
  %cfg24 = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 1, !dbg !5420
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg24, align 8, !dbg !5420
  %x_entry_block_ptr25 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 0, !dbg !5420
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr25, align 8, !dbg !5420
  %succs26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 1, !dbg !5420
  %25 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs26, align 8, !dbg !5420
  %tobool27 = icmp ne %struct.VEC_edge_gc* %25, null, !dbg !5420
  br i1 %tobool27, label %cond.true28, label %cond.false34, !dbg !5420

cond.true28:                                      ; preds = %cond.end7
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5420
  %add.ptr29 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !5420
  %cfg30 = getelementptr inbounds %struct.function, %struct.function* %add.ptr29, i32 0, i32 1, !dbg !5420
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg30, align 8, !dbg !5420
  %x_entry_block_ptr31 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i32 0, i32 0, !dbg !5420
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr31, align 8, !dbg !5420
  %succs32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 1, !dbg !5420
  %29 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs32, align 8, !dbg !5420
  %base33 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %29, i32 0, i32 0, !dbg !5420
  br label %cond.end35, !dbg !5420

cond.false34:                                     ; preds = %cond.end7
  br label %cond.end35, !dbg !5420

cond.end35:                                       ; preds = %cond.false34, %cond.true28
  %cond36 = phi %struct.VEC_edge_base* [ %base33, %cond.true28 ], [ null, %cond.false34 ], !dbg !5420
  %call37 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond36, i32 0), !dbg !5420
  store %struct.edge_def* %call37, %struct.edge_def** %e, align 8, !dbg !5421
  %30 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5422
  %tobool38 = icmp ne %struct.edge_def* %30, null, !dbg !5422
  br i1 %tobool38, label %land.lhs.true, label %if.else, !dbg !5424

land.lhs.true:                                    ; preds = %cond.end35
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5425
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 1, !dbg !5426
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5426
  %33 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5427
  %add.ptr39 = getelementptr inbounds %struct.function, %struct.function* %33, i64 0, !dbg !5427
  %cfg40 = getelementptr inbounds %struct.function, %struct.function* %add.ptr39, i32 0, i32 1, !dbg !5427
  %34 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg40, align 8, !dbg !5427
  %x_entry_block_ptr41 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %34, i32 0, i32 0, !dbg !5427
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr41, align 8, !dbg !5427
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 6, !dbg !5428
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5428
  %cmp42 = icmp ne %struct.basic_block_def* %32, %36, !dbg !5429
  br i1 %cmp42, label %if.then, label %if.else, !dbg !5430

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !5431, metadata !DIExpression()), !dbg !5433
  %37 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5434
  %dest43 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %37, i32 0, i32 1, !dbg !5435
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %dest43, align 8, !dbg !5435
  %call44 = call %union.tree_node* @gimple_block_label(%struct.basic_block_def* %38), !dbg !5436
  store %union.tree_node* %call44, %union.tree_node** %label, align 8, !dbg !5433
  %39 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !5437
  %call45 = call %struct.rtx_def* @label_rtx(%union.tree_node* %39), !dbg !5438
  call void @emit_jump(%struct.rtx_def* %call45), !dbg !5439
  store i32 0, i32* %flags, align 4, !dbg !5440
  br label %if.end, !dbg !5441

if.else:                                          ; preds = %land.lhs.true, %cond.end35
  store i32 1, i32* %flags, align 4, !dbg !5442
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call46 = call %struct.rtx_def* @get_insns(), !dbg !5443
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call46, i32 0, i32 1, !dbg !5443
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5443
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !5443
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5443
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5443
  %41 = bitcast %struct.rtx_def* %40 to i8*, !dbg !5443
  %call47 = call %struct.rtx_def* @get_last_insn(), !dbg !5444
  %42 = bitcast %struct.rtx_def* %call47 to i8*, !dbg !5444
  %43 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5445
  %add.ptr48 = getelementptr inbounds %struct.function, %struct.function* %43, i64 0, !dbg !5445
  %cfg49 = getelementptr inbounds %struct.function, %struct.function* %add.ptr48, i32 0, i32 1, !dbg !5445
  %44 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg49, align 8, !dbg !5445
  %x_entry_block_ptr50 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %44, i32 0, i32 0, !dbg !5445
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr50, align 8, !dbg !5445
  %call51 = call %struct.basic_block_def* @create_basic_block(i8* %41, i8* %42, %struct.basic_block_def* %45), !dbg !5446
  store %struct.basic_block_def* %call51, %struct.basic_block_def** %init_block, align 8, !dbg !5447
  %46 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5448
  %add.ptr52 = getelementptr inbounds %struct.function, %struct.function* %46, i64 0, !dbg !5448
  %cfg53 = getelementptr inbounds %struct.function, %struct.function* %add.ptr52, i32 0, i32 1, !dbg !5448
  %47 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg53, align 8, !dbg !5448
  %x_entry_block_ptr54 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %47, i32 0, i32 0, !dbg !5448
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr54, align 8, !dbg !5448
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 11, !dbg !5449
  %49 = load i32, i32* %frequency, align 8, !dbg !5449
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %init_block, align 8, !dbg !5450
  %frequency55 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 11, !dbg !5451
  store i32 %49, i32* %frequency55, align 8, !dbg !5452
  %51 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5453
  %add.ptr56 = getelementptr inbounds %struct.function, %struct.function* %51, i64 0, !dbg !5453
  %cfg57 = getelementptr inbounds %struct.function, %struct.function* %add.ptr56, i32 0, i32 1, !dbg !5453
  %52 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg57, align 8, !dbg !5453
  %x_entry_block_ptr58 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %52, i32 0, i32 0, !dbg !5453
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr58, align 8, !dbg !5453
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 8, !dbg !5454
  %54 = load i64, i64* %count, align 8, !dbg !5454
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %init_block, align 8, !dbg !5455
  %count59 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 8, !dbg !5456
  store i64 %54, i64* %count59, align 8, !dbg !5457
  %56 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5458
  %tobool60 = icmp ne %struct.edge_def* %56, null, !dbg !5458
  br i1 %tobool60, label %if.then61, label %if.else64, !dbg !5460

if.then61:                                        ; preds = %if.end
  %57 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5461
  %dest62 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %57, i32 0, i32 1, !dbg !5463
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %dest62, align 8, !dbg !5463
  store %struct.basic_block_def* %58, %struct.basic_block_def** %first_block, align 8, !dbg !5464
  %59 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5465
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %init_block, align 8, !dbg !5466
  call void @redirect_edge_succ(%struct.edge_def* %59, %struct.basic_block_def* %60), !dbg !5467
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %init_block, align 8, !dbg !5468
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %first_block, align 8, !dbg !5469
  %63 = load i32, i32* %flags, align 4, !dbg !5470
  %call63 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %61, %struct.basic_block_def* %62, i32 %63), !dbg !5471
  store %struct.edge_def* %call63, %struct.edge_def** %e, align 8, !dbg !5472
  br label %if.end69, !dbg !5473

if.else64:                                        ; preds = %if.end
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %init_block, align 8, !dbg !5474
  %65 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5475
  %add.ptr65 = getelementptr inbounds %struct.function, %struct.function* %65, i64 0, !dbg !5475
  %cfg66 = getelementptr inbounds %struct.function, %struct.function* %add.ptr65, i32 0, i32 1, !dbg !5475
  %66 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg66, align 8, !dbg !5475
  %x_exit_block_ptr67 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %66, i32 0, i32 1, !dbg !5475
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr67, align 8, !dbg !5475
  %call68 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %64, %struct.basic_block_def* %67, i32 1), !dbg !5476
  store %struct.edge_def* %call68, %struct.edge_def** %e, align 8, !dbg !5477
  br label %if.end69

if.end69:                                         ; preds = %if.else64, %if.then61
  %68 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5478
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 8, !dbg !5479
  store i32 10000, i32* %probability, align 4, !dbg !5480
  %69 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5481
  %add.ptr70 = getelementptr inbounds %struct.function, %struct.function* %69, i64 0, !dbg !5481
  %cfg71 = getelementptr inbounds %struct.function, %struct.function* %add.ptr70, i32 0, i32 1, !dbg !5481
  %70 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg71, align 8, !dbg !5481
  %x_entry_block_ptr72 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %70, i32 0, i32 0, !dbg !5481
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr72, align 8, !dbg !5481
  %count73 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 8, !dbg !5482
  %72 = load i64, i64* %count73, align 8, !dbg !5482
  %73 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5483
  %count74 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 9, !dbg !5484
  store i64 %72, i64* %count74, align 8, !dbg !5485
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %init_block, align 8, !dbg !5486
  call void @update_bb_for_insn(%struct.basic_block_def* %74), !dbg !5487
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %init_block, align 8, !dbg !5488
  ret %struct.basic_block_def* %75, !dbg !5489
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !5490 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !5493, metadata !DIExpression()), !dbg !5494
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !5495, metadata !DIExpression()), !dbg !5496
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !5497
  store i32 0, i32* %index, align 8, !dbg !5498
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !5499
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !5500
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !5501
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !5502
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !5502
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !5502
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !5503 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5507, metadata !DIExpression()), !dbg !5508
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !5509, metadata !DIExpression()), !dbg !5510
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5511
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5511
  %5 = load i32, i32* %4, align 8, !dbg !5511
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5511
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5511
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5511
  %tobool = icmp ne i8 %call, 0, !dbg !5511
  br i1 %tobool, label %if.else, label %if.then, !dbg !5513

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5514
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5514
  %10 = load i32, i32* %9, align 8, !dbg !5514
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5514
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5514
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5514
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !5516
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !5517
  store i8 1, i8* %retval, align 1, !dbg !5518
  br label %return, !dbg !5518

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !5519
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !5521
  store i8 0, i8* %retval, align 1, !dbg !5522
  br label %return, !dbg !5522

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !5523
  ret i8 %15, !dbg !5523
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !5524 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !5528, metadata !DIExpression()), !dbg !5529
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5530
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !5530
  %1 = load i32, i32* %index, align 8, !dbg !5530
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5530
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !5530
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5530
  %5 = load i32, i32* %4, align 8, !dbg !5530
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5530
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5530
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5530
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5530
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5530

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5530
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !5530
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5530
  %11 = load i32, i32* %10, align 8, !dbg !5530
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5530
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5530
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5530
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5530
  br label %cond.end, !dbg !5530

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5530

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5530
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5530
  %cmp = icmp ult i32 %1, %call2, !dbg !5530
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !5530

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5530
  br label %cond.end5, !dbg !5530

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5530

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !5530
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5531
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !5532
  %15 = load i32, i32* %index7, align 8, !dbg !5533
  %inc = add i32 %15, 1, !dbg !5533
  store i32 %inc, i32* %index7, align 8, !dbg !5533
  ret void, !dbg !5534
}

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @expand_gimple_basic_block(%struct.basic_block_def* %bb) #0 !dbg !5535 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %elt = alloca i8**, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %ret_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp29 = alloca %struct.gimple_stmt_iterator, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %op = alloca %union.tree_node*, align 8
  %def = alloca %union.gimple_statement_d*, align 8
  %sloc = alloca i32, align 4
  %sblock = alloca %union.tree_node*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %have_debug_uses = alloca i8, align 1
  %debugstmt = alloca %union.gimple_statement_d*, align 8
  %value = alloca %union.tree_node*, align 8
  %vexpr = alloca %union.tree_node*, align 8
  %val = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %sloc202 = alloca i32, align 4
  %sblock204 = alloca %union.tree_node*, align 8
  %nsi = alloca %struct.gimple_stmt_iterator, align 8
  %var = alloca %union.tree_node*, align 8
  %value208 = alloca %union.tree_node*, align 8
  %val209 = alloca %struct.rtx_def*, align 8
  %mode210 = alloca i32, align 4
  %can_fallthru = alloca i8, align 1
  %def_p = alloca %union.tree_node**, align 8
  %tmp324 = alloca %struct.edge_iterator, align 8
  %dummy = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5538, metadata !DIExpression()), !dbg !5539
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5540, metadata !DIExpression()), !dbg !5541
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !5542, metadata !DIExpression()), !dbg !5543
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5544, metadata !DIExpression()), !dbg !5545
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !5545
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !5546, metadata !DIExpression()), !dbg !5547
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !5548, metadata !DIExpression()), !dbg !5549
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5550, metadata !DIExpression()), !dbg !5551
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5552, metadata !DIExpression()), !dbg !5553
  call void @llvm.dbg.declare(metadata i8*** %elt, metadata !5554, metadata !DIExpression()), !dbg !5555
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5556
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !5556
  br i1 %tobool, label %if.then, label %if.end, !dbg !5558

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5559
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5560
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !5561
  %3 = load i32, i32* %index, align 8, !dbg !5561
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.12, i64 0, i64 0), i32 %3), !dbg !5562
  br label %if.end, !dbg !5562

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5563
  %call1 = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %4), !dbg !5564
  store %struct.gimple_seq_d* %call1, %struct.gimple_seq_d** %stmts, align 8, !dbg !5565
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5566
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 7, !dbg !5567
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5568
  store %struct.gimple_bb_info* null, %struct.gimple_bb_info** %gimple, align 8, !dbg !5569
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5570
  call void @rtl_profile_for_bb(%struct.basic_block_def* %6), !dbg !5571
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5572
  call void @init_rtl_bb_info(%struct.basic_block_def* %7), !dbg !5573
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5574
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 13, !dbg !5575
  %9 = load i32, i32* %flags, align 8, !dbg !5576
  %or = or i32 %9, 512, !dbg !5576
  store i32 %or, i32* %flags, align 8, !dbg !5576
  %10 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5577
  call void @gsi_last(%struct.gimple_stmt_iterator* sret %tmp, %struct.gimple_seq_d* %10), !dbg !5578
  %11 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5578
  %12 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5578
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false), !dbg !5578
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5579
  %tobool3 = icmp ne i8 %call2, 0, !dbg !5579
  br i1 %tobool3, label %if.end28, label %land.lhs.true, !dbg !5581

land.lhs.true:                                    ; preds = %if.end
  %call4 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5582
  %call5 = call i32 @gimple_code(%union.gimple_statement_d* %call4), !dbg !5583
  %cmp = icmp eq i32 %call5, 9, !dbg !5584
  br i1 %cmp, label %if.then6, label %if.end28, !dbg !5585

if.then6:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ret_stmt, metadata !5586, metadata !DIExpression()), !dbg !5588
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5589
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %ret_stmt, align 8, !dbg !5588
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5590
  %call8 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %13), !dbg !5590
  %tobool9 = icmp ne i8 %call8, 0, !dbg !5590
  br i1 %tobool9, label %cond.false, label %cond.true, !dbg !5590

cond.true:                                        ; preds = %if.then6
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 3137, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5590
  br label %cond.end, !dbg !5590

cond.false:                                       ; preds = %if.then6
  br label %cond.end, !dbg !5590

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5590
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5591
  %call10 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %14), !dbg !5591
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5591
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !5591
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5591
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5591
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 1, !dbg !5591
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5591
  %cmp11 = icmp eq %struct.basic_block_def* %call10, %17, !dbg !5591
  br i1 %cmp11, label %cond.false13, label %cond.true12, !dbg !5591

cond.true12:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 3138, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5591
  br label %cond.end14, !dbg !5591

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14, !dbg !5591

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i32 [ 0, %cond.true12 ], [ 0, %cond.false13 ], !dbg !5591
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5592
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 6, !dbg !5594
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5594
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5595
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !5595
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 1, !dbg !5595
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !5595
  %x_exit_block_ptr18 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 1, !dbg !5595
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr18, align 8, !dbg !5595
  %cmp19 = icmp eq %struct.basic_block_def* %19, %22, !dbg !5596
  br i1 %cmp19, label %land.lhs.true20, label %if.end27, !dbg !5597

land.lhs.true20:                                  ; preds = %cond.end14
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret_stmt, align 8, !dbg !5598
  %call21 = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %23), !dbg !5599
  %tobool22 = icmp ne %union.tree_node* %call21, null, !dbg !5599
  br i1 %tobool22, label %if.end27, label %if.then23, !dbg !5600

if.then23:                                        ; preds = %land.lhs.true20
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 0), !dbg !5601
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5603
  %call24 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %24), !dbg !5604
  %flags25 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call24, i32 0, i32 7, !dbg !5605
  %25 = load i32, i32* %flags25, align 8, !dbg !5606
  %or26 = or i32 %25, 1, !dbg !5606
  store i32 %or26, i32* %flags25, align 8, !dbg !5606
  br label %if.end27, !dbg !5607

if.end27:                                         ; preds = %if.then23, %land.lhs.true20, %cond.end14
  br label %if.end28, !dbg !5608

if.end28:                                         ; preds = %if.end27, %land.lhs.true, %if.end
  %26 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5609
  call void @gsi_start(%struct.gimple_stmt_iterator* sret %tmp29, %struct.gimple_seq_d* %26), !dbg !5610
  %27 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5610
  %28 = bitcast %struct.gimple_stmt_iterator* %tmp29 to i8*, !dbg !5610
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 24, i1 false), !dbg !5610
  %call30 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5611
  %tobool31 = icmp ne i8 %call30, 0, !dbg !5611
  br i1 %tobool31, label %if.end38, label %if.then32, !dbg !5613

if.then32:                                        ; preds = %if.end28
  %call33 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5614
  store %union.gimple_statement_d* %call33, %union.gimple_statement_d** %stmt, align 8, !dbg !5616
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5617
  %call34 = call i32 @gimple_code(%union.gimple_statement_d* %29), !dbg !5619
  %cmp35 = icmp ne i32 %call34, 4, !dbg !5620
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !5621

if.then36:                                        ; preds = %if.then32
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !5622
  br label %if.end37, !dbg !5623

if.end37:                                         ; preds = %if.then36, %if.then32
  br label %if.end38, !dbg !5624

if.end38:                                         ; preds = %if.end37, %if.end28
  %30 = load %struct.pointer_map_t*, %struct.pointer_map_t** @lab_rtx_for_bb, align 8, !dbg !5625
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5626
  %32 = bitcast %struct.basic_block_def* %31 to i8*, !dbg !5626
  %call39 = call i8** @pointer_map_contains(%struct.pointer_map_t* %30, i8* %32), !dbg !5627
  store i8** %call39, i8*** %elt, align 8, !dbg !5628
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5629
  %tobool40 = icmp ne %union.gimple_statement_d* %33, null, !dbg !5629
  br i1 %tobool40, label %if.then42, label %lor.lhs.false, !dbg !5631

lor.lhs.false:                                    ; preds = %if.end38
  %34 = load i8**, i8*** %elt, align 8, !dbg !5632
  %tobool41 = icmp ne i8** %34, null, !dbg !5632
  br i1 %tobool41, label %if.then42, label %if.else, !dbg !5633

if.then42:                                        ; preds = %lor.lhs.false, %if.end38
  %call43 = call %struct.rtx_def* @get_last_insn(), !dbg !5634
  store %struct.rtx_def* %call43, %struct.rtx_def** %last, align 8, !dbg !5636
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5637
  %tobool44 = icmp ne %union.gimple_statement_d* %35, null, !dbg !5637
  br i1 %tobool44, label %if.then45, label %if.end47, !dbg !5639

if.then45:                                        ; preds = %if.then42
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5640
  %call46 = call %struct.rtx_def* @expand_gimple_stmt(%union.gimple_statement_d* %36), !dbg !5642
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !5643
  br label %if.end47, !dbg !5644

if.end47:                                         ; preds = %if.then45, %if.then42
  %37 = load i8**, i8*** %elt, align 8, !dbg !5645
  %tobool48 = icmp ne i8** %37, null, !dbg !5645
  br i1 %tobool48, label %if.then49, label %if.end51, !dbg !5647

if.then49:                                        ; preds = %if.end47
  %38 = load i8**, i8*** %elt, align 8, !dbg !5648
  %39 = load i8*, i8** %38, align 8, !dbg !5649
  %40 = bitcast i8* %39 to %struct.rtx_def*, !dbg !5650
  %call50 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %40), !dbg !5651
  br label %if.end51, !dbg !5651

if.end51:                                         ; preds = %if.then49, %if.end47
  %41 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !5652
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !5652
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5652
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !5652
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5652
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5652
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5653
  %il52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 7, !dbg !5653
  %rtl = bitcast %union.basic_block_il_dependent* %il52 to %struct.rtl_bb_info**, !dbg !5653
  %44 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5653
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %44, i32 0, i32 0, !dbg !5653
  store %struct.rtx_def* %42, %struct.rtx_def** %head_, align 8, !dbg !5654
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5655
  %il53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 7, !dbg !5655
  %rtl54 = bitcast %union.basic_block_il_dependent* %il53 to %struct.rtl_bb_info**, !dbg !5655
  %46 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl54, align 8, !dbg !5655
  %head_55 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %46, i32 0, i32 0, !dbg !5655
  %47 = load %struct.rtx_def*, %struct.rtx_def** %head_55, align 8, !dbg !5655
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !5655
  %bf.load = load i32, i32* %48, align 8, !dbg !5655
  %bf.clear = and i32 %bf.load, 65535, !dbg !5655
  %cmp56 = icmp eq i32 %bf.clear, 13, !dbg !5655
  br i1 %cmp56, label %if.then57, label %if.end68, !dbg !5657

if.then57:                                        ; preds = %if.end51
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5658
  %il58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 7, !dbg !5658
  %rtl59 = bitcast %union.basic_block_il_dependent* %il58 to %struct.rtl_bb_info**, !dbg !5658
  %50 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl59, align 8, !dbg !5658
  %head_60 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %50, i32 0, i32 0, !dbg !5658
  %51 = load %struct.rtx_def*, %struct.rtx_def** %head_60, align 8, !dbg !5658
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !5658
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !5658
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 2, !dbg !5658
  %rt_rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**, !dbg !5658
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx64, align 8, !dbg !5658
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5659
  %il65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 7, !dbg !5659
  %rtl66 = bitcast %union.basic_block_il_dependent* %il65 to %struct.rtl_bb_info**, !dbg !5659
  %54 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl66, align 8, !dbg !5659
  %head_67 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %54, i32 0, i32 0, !dbg !5659
  store %struct.rtx_def* %52, %struct.rtx_def** %head_67, align 8, !dbg !5660
  br label %if.end68, !dbg !5659

if.end68:                                         ; preds = %if.then57, %if.end51
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5661
  %il69 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 7, !dbg !5661
  %rtl70 = bitcast %union.basic_block_il_dependent* %il69 to %struct.rtl_bb_info**, !dbg !5661
  %56 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl70, align 8, !dbg !5661
  %head_71 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %56, i32 0, i32 0, !dbg !5661
  %57 = load %struct.rtx_def*, %struct.rtx_def** %head_71, align 8, !dbg !5661
  %call72 = call %struct.rtx_def* @emit_note_after(i32 10, %struct.rtx_def* %57), !dbg !5662
  store %struct.rtx_def* %call72, %struct.rtx_def** %note, align 8, !dbg !5663
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5664
  %59 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !5665
  call void @maybe_dump_rtl_for_gimple_stmt(%union.gimple_statement_d* %58, %struct.rtx_def* %59), !dbg !5666
  br label %if.end77, !dbg !5667

if.else:                                          ; preds = %lor.lhs.false
  %call73 = call %struct.rtx_def* @emit_note(i32 10), !dbg !5668
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5669
  %il74 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 7, !dbg !5669
  %rtl75 = bitcast %union.basic_block_il_dependent* %il74 to %struct.rtl_bb_info**, !dbg !5669
  %61 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl75, align 8, !dbg !5669
  %head_76 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %61, i32 0, i32 0, !dbg !5669
  store %struct.rtx_def* %call73, %struct.rtx_def** %head_76, align 8, !dbg !5670
  store %struct.rtx_def* %call73, %struct.rtx_def** %note, align 8, !dbg !5671
  br label %if.end77

if.end77:                                         ; preds = %if.else, %if.end68
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5672
  %63 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5673
  %u78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !5673
  %fld79 = bitcast %union.u* %u78 to [1 x %union.rtunion_def]*, !dbg !5673
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i64 0, i64 4, !dbg !5673
  %rt_bb = bitcast %union.rtunion_def* %arrayidx80 to %struct.basic_block_def**, !dbg !5673
  store %struct.basic_block_def* %62, %struct.basic_block_def** %rt_bb, align 8, !dbg !5674
  br label %for.cond, !dbg !5675

for.cond:                                         ; preds = %for.inc322, %if.end77
  %call81 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5676
  %tobool82 = icmp ne i8 %call81, 0, !dbg !5679
  %lnot = xor i1 %tobool82, true, !dbg !5679
  br i1 %lnot, label %for.body, label %for.end323, !dbg !5680

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !5681, metadata !DIExpression()), !dbg !5683
  %call83 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5684
  store %union.gimple_statement_d* %call83, %union.gimple_statement_d** %stmt, align 8, !dbg !5685
  %64 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !5686
  %tobool84 = icmp ne i32 %64, 0, !dbg !5686
  br i1 %tobool84, label %land.lhs.true85, label %if.end190, !dbg !5688

land.lhs.true85:                                  ; preds = %for.body
  %65 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 1), align 8, !dbg !5689
  %tobool86 = icmp ne %struct.bitmap_head_def* %65, null, !dbg !5690
  br i1 %tobool86, label %land.lhs.true87, label %if.end190, !dbg !5691

land.lhs.true87:                                  ; preds = %land.lhs.true85
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5692
  %call88 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %66), !dbg !5693
  %tobool89 = icmp ne i8 %call88, 0, !dbg !5693
  br i1 %tobool89, label %if.end190, label %if.then90, !dbg !5694

if.then90:                                        ; preds = %land.lhs.true87
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !5695, metadata !DIExpression()), !dbg !5709
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !5710, metadata !DIExpression()), !dbg !5711
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def, metadata !5712, metadata !DIExpression()), !dbg !5713
  call void @llvm.dbg.declare(metadata i32* %sloc, metadata !5714, metadata !DIExpression()), !dbg !5715
  %call91 = call i32 @get_curr_insn_source_location(), !dbg !5716
  store i32 %call91, i32* %sloc, align 4, !dbg !5715
  call void @llvm.dbg.declare(metadata %union.tree_node** %sblock, metadata !5717, metadata !DIExpression()), !dbg !5718
  %call92 = call %union.tree_node* @get_curr_insn_block(), !dbg !5719
  store %union.tree_node* %call92, %union.tree_node** %sblock, align 8, !dbg !5718
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5720
  %call93 = call %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %67, i32 1), !dbg !5720
  store %union.tree_node* %call93, %union.tree_node** %op, align 8, !dbg !5720
  br label %for.cond94, !dbg !5720

for.cond94:                                       ; preds = %for.inc187, %if.then90
  %call95 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !5722
  %tobool96 = icmp ne i8 %call95, 0, !dbg !5722
  %lnot97 = xor i1 %tobool96, true, !dbg !5722
  br i1 %lnot97, label %for.body98, label %for.end189, !dbg !5720

for.body98:                                       ; preds = %for.cond94
  %68 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5724
  %call99 = call %union.gimple_statement_d* @get_gimple_for_ssa_name(%union.tree_node* %68), !dbg !5726
  store %union.gimple_statement_d* %call99, %union.gimple_statement_d** %def, align 8, !dbg !5727
  %tobool100 = icmp ne %union.gimple_statement_d* %call99, null, !dbg !5727
  br i1 %tobool100, label %if.then101, label %if.end186, !dbg !5728

if.then101:                                       ; preds = %for.body98
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !5729, metadata !DIExpression()), !dbg !5738
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !5739, metadata !DIExpression()), !dbg !5740
  call void @llvm.dbg.declare(metadata i8* %have_debug_uses, metadata !5741, metadata !DIExpression()), !dbg !5742
  store i8 0, i8* %have_debug_uses, align 1, !dbg !5742
  %69 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5743
  %call102 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %69), !dbg !5743
  store %struct.ssa_use_operand_d* %call102, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5743
  br label %for.cond103, !dbg !5743

for.cond103:                                      ; preds = %for.inc, %if.then101
  %call104 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5745
  %tobool105 = icmp ne i8 %call104, 0, !dbg !5745
  %lnot106 = xor i1 %tobool105, true, !dbg !5745
  br i1 %lnot106, label %for.body107, label %for.end, !dbg !5743

for.body107:                                      ; preds = %for.cond103
  %70 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5747
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %70, i32 0, i32 2, !dbg !5747
  %stmt108 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !5747
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt108, align 8, !dbg !5747
  %call109 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %71), !dbg !5750
  %tobool110 = icmp ne i8 %call109, 0, !dbg !5750
  br i1 %tobool110, label %if.then111, label %if.end112, !dbg !5751

if.then111:                                       ; preds = %for.body107
  store i8 1, i8* %have_debug_uses, align 1, !dbg !5752
  br label %for.end, !dbg !5754

if.end112:                                        ; preds = %for.body107
  br label %for.inc, !dbg !5755

for.inc:                                          ; preds = %if.end112
  %call113 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5745
  store %struct.ssa_use_operand_d* %call113, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5745
  br label %for.cond103, !dbg !5745, !llvm.loop !5756

for.end:                                          ; preds = %if.then111, %for.cond103
  %72 = load i8, i8* %have_debug_uses, align 1, !dbg !5758
  %tobool114 = icmp ne i8 %72, 0, !dbg !5758
  br i1 %tobool114, label %if.then115, label %if.end185, !dbg !5760

if.then115:                                       ; preds = %for.end
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %debugstmt, metadata !5761, metadata !DIExpression()), !dbg !5763
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !5764, metadata !DIExpression()), !dbg !5765
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !5766
  %call116 = call %union.tree_node* @gimple_assign_rhs_to_tree(%union.gimple_statement_d* %73), !dbg !5767
  store %union.tree_node* %call116, %union.tree_node** %value, align 8, !dbg !5765
  call void @llvm.dbg.declare(metadata %union.tree_node** %vexpr, metadata !5768, metadata !DIExpression()), !dbg !5769
  %call117 = call %union.tree_node* @make_node_stat(i32 37), !dbg !5770
  store %union.tree_node* %call117, %union.tree_node** %vexpr, align 8, !dbg !5769
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val, metadata !5771, metadata !DIExpression()), !dbg !5772
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !5773, metadata !DIExpression()), !dbg !5774
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !5775
  %call118 = call i32 @gimple_location(%union.gimple_statement_d* %74), !dbg !5776
  call void @set_curr_insn_source_location(i32 %call118), !dbg !5777
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !5778
  %call119 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %75), !dbg !5779
  call void @set_curr_insn_block(%union.tree_node* %call119), !dbg !5780
  %76 = load %union.tree_node*, %union.tree_node** %vexpr, align 8, !dbg !5781
  %decl_common = bitcast %union.tree_node* %76 to %struct.tree_decl_common*, !dbg !5781
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5781
  %77 = bitcast i40* %artificial_flag to i64*, !dbg !5781
  %bf.load120 = load i64, i64* %77, align 8, !dbg !5782
  %bf.clear121 = and i64 %bf.load120, -4097, !dbg !5782
  %bf.set = or i64 %bf.clear121, 4096, !dbg !5782
  store i64 %bf.set, i64* %77, align 8, !dbg !5782
  %78 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5783
  %common = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !5783
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5783
  %79 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5783
  %80 = load %union.tree_node*, %union.tree_node** %vexpr, align 8, !dbg !5784
  %common122 = bitcast %union.tree_node* %80 to %struct.tree_common*, !dbg !5784
  %type123 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common122, i32 0, i32 2, !dbg !5784
  store %union.tree_node* %79, %union.tree_node** %type123, align 8, !dbg !5785
  %81 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5786
  %base = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !5786
  %82 = bitcast %struct.tree_base* %base to i64*, !dbg !5786
  %bf.load124 = load i64, i64* %82, align 8, !dbg !5786
  %bf.clear125 = and i64 %bf.load124, 65535, !dbg !5786
  %bf.cast = trunc i64 %bf.clear125 to i32, !dbg !5786
  %idxprom = sext i32 %bf.cast to i64, !dbg !5786
  %arrayidx126 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5786
  %83 = load i32, i32* %arrayidx126, align 4, !dbg !5786
  %cmp127 = icmp eq i32 %83, 3, !dbg !5786
  br i1 %cmp127, label %if.then128, label %if.else134, !dbg !5788

if.then128:                                       ; preds = %if.then115
  %84 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5789
  %decl_common129 = bitcast %union.tree_node* %84 to %struct.tree_decl_common*, !dbg !5789
  %mode130 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common129, i32 0, i32 2, !dbg !5789
  %85 = bitcast i40* %mode130 to i64*, !dbg !5789
  %bf.load131 = load i64, i64* %85, align 8, !dbg !5789
  %bf.clear132 = and i64 %bf.load131, 255, !dbg !5789
  %bf.cast133 = trunc i64 %bf.clear132 to i32, !dbg !5789
  store i32 %bf.cast133, i32* %mode, align 4, !dbg !5790
  br label %if.end155, !dbg !5791

if.else134:                                       ; preds = %if.then115
  %86 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5792
  %common135 = bitcast %union.tree_node* %86 to %struct.tree_common*, !dbg !5792
  %type136 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common135, i32 0, i32 2, !dbg !5792
  %87 = load %union.tree_node*, %union.tree_node** %type136, align 8, !dbg !5792
  %base137 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !5792
  %88 = bitcast %struct.tree_base* %base137 to i64*, !dbg !5792
  %bf.load138 = load i64, i64* %88, align 8, !dbg !5792
  %bf.clear139 = and i64 %bf.load138, 65535, !dbg !5792
  %bf.cast140 = trunc i64 %bf.clear139 to i32, !dbg !5792
  %cmp141 = icmp eq i32 %bf.cast140, 14, !dbg !5792
  br i1 %cmp141, label %cond.true142, label %cond.false146, !dbg !5792

cond.true142:                                     ; preds = %if.else134
  %89 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5792
  %common143 = bitcast %union.tree_node* %89 to %struct.tree_common*, !dbg !5792
  %type144 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common143, i32 0, i32 2, !dbg !5792
  %90 = load %union.tree_node*, %union.tree_node** %type144, align 8, !dbg !5792
  %call145 = call i32 @vector_type_mode(%union.tree_node* %90), !dbg !5792
  br label %cond.end153, !dbg !5792

cond.false146:                                    ; preds = %if.else134
  %91 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5792
  %common147 = bitcast %union.tree_node* %91 to %struct.tree_common*, !dbg !5792
  %type148 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common147, i32 0, i32 2, !dbg !5792
  %92 = load %union.tree_node*, %union.tree_node** %type148, align 8, !dbg !5792
  %type149 = bitcast %union.tree_node* %92 to %struct.tree_type*, !dbg !5792
  %mode150 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type149, i32 0, i32 6, !dbg !5792
  %bf.load151 = load i32, i32* %mode150, align 4, !dbg !5792
  %bf.lshr = lshr i32 %bf.load151, 16, !dbg !5792
  %bf.clear152 = and i32 %bf.lshr, 255, !dbg !5792
  br label %cond.end153, !dbg !5792

cond.end153:                                      ; preds = %cond.false146, %cond.true142
  %cond154 = phi i32 [ %call145, %cond.true142 ], [ %bf.clear152, %cond.false146 ], !dbg !5792
  store i32 %cond154, i32* %mode, align 4, !dbg !5793
  br label %if.end155

if.end155:                                        ; preds = %cond.end153, %if.then128
  %93 = load i32, i32* %mode, align 4, !dbg !5794
  %94 = load %union.tree_node*, %union.tree_node** %vexpr, align 8, !dbg !5795
  %decl_common156 = bitcast %union.tree_node* %94 to %struct.tree_decl_common*, !dbg !5795
  %mode157 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common156, i32 0, i32 2, !dbg !5795
  %95 = bitcast i40* %mode157 to i64*, !dbg !5795
  %96 = zext i32 %93 to i64, !dbg !5796
  %bf.load158 = load i64, i64* %95, align 8, !dbg !5796
  %bf.value = and i64 %96, 255, !dbg !5796
  %bf.clear159 = and i64 %bf.load158, -256, !dbg !5796
  %bf.set160 = or i64 %bf.clear159, %bf.value, !dbg !5796
  store i64 %bf.set160, i64* %95, align 8, !dbg !5796
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !5796
  %97 = load i32, i32* %mode, align 4, !dbg !5797
  %98 = load %union.tree_node*, %union.tree_node** %vexpr, align 8, !dbg !5797
  %99 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5797
  %100 = bitcast %union.tree_node* %99 to %struct.rtx_def*, !dbg !5797
  %call161 = call %struct.rtx_def* @gen_rtx_fmt_tei_stat(i32 138, i32 %97, %union.tree_node* %98, %struct.rtx_def* %100, i32 2), !dbg !5797
  store %struct.rtx_def* %call161, %struct.rtx_def** %val, align 8, !dbg !5798
  %101 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !5799
  %call162 = call %struct.rtx_def* @emit_debug_insn(%struct.rtx_def* %101), !dbg !5800
  store %struct.rtx_def* %call162, %struct.rtx_def** %val, align 8, !dbg !5801
  %102 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5802
  %call163 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %102), !dbg !5802
  store %union.gimple_statement_d* %call163, %union.gimple_statement_d** %debugstmt, align 8, !dbg !5802
  br label %for.cond164, !dbg !5802

for.cond164:                                      ; preds = %for.inc182, %if.end155
  %call165 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5804
  %tobool166 = icmp ne i8 %call165, 0, !dbg !5804
  %lnot167 = xor i1 %tobool166, true, !dbg !5804
  br i1 %lnot167, label %for.body168, label %for.end184, !dbg !5802

for.body168:                                      ; preds = %for.cond164
  %103 = load %union.gimple_statement_d*, %union.gimple_statement_d** %debugstmt, align 8, !dbg !5806
  %call169 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %103), !dbg !5809
  %tobool170 = icmp ne i8 %call169, 0, !dbg !5809
  br i1 %tobool170, label %if.end172, label %if.then171, !dbg !5810

if.then171:                                       ; preds = %for.body168
  br label %for.inc182, !dbg !5811

if.end172:                                        ; preds = %for.body168
  %call173 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5812
  store %struct.ssa_use_operand_d* %call173, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5812
  br label %for.cond174, !dbg !5812

for.cond174:                                      ; preds = %for.inc179, %if.end172
  %call175 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5814
  %tobool176 = icmp ne i8 %call175, 0, !dbg !5814
  %lnot177 = xor i1 %tobool176, true, !dbg !5814
  br i1 %lnot177, label %for.body178, label %for.end181, !dbg !5812

for.body178:                                      ; preds = %for.cond174
  %104 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5816
  %105 = load %union.tree_node*, %union.tree_node** %vexpr, align 8, !dbg !5816
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %104, %union.tree_node* %105), !dbg !5816
  br label %for.inc179, !dbg !5816

for.inc179:                                       ; preds = %for.body178
  %call180 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5814
  store %struct.ssa_use_operand_d* %call180, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !5814
  br label %for.cond174, !dbg !5814, !llvm.loop !5817

for.end181:                                       ; preds = %for.cond174
  %106 = load %union.gimple_statement_d*, %union.gimple_statement_d** %debugstmt, align 8, !dbg !5819
  call void @update_stmt(%union.gimple_statement_d* %106), !dbg !5820
  br label %for.inc182, !dbg !5821

for.inc182:                                       ; preds = %for.end181, %if.then171
  %call183 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !5804
  store %union.gimple_statement_d* %call183, %union.gimple_statement_d** %debugstmt, align 8, !dbg !5804
  br label %for.cond164, !dbg !5804, !llvm.loop !5822

for.end184:                                       ; preds = %for.cond164
  br label %if.end185, !dbg !5824

if.end185:                                        ; preds = %for.end184, %for.end
  br label %if.end186, !dbg !5825

if.end186:                                        ; preds = %if.end185, %for.body98
  br label %for.inc187, !dbg !5826

for.inc187:                                       ; preds = %if.end186
  %call188 = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %iter), !dbg !5722
  store %union.tree_node* %call188, %union.tree_node** %op, align 8, !dbg !5722
  br label %for.cond94, !dbg !5722, !llvm.loop !5827

for.end189:                                       ; preds = %for.cond94
  %107 = load i32, i32* %sloc, align 4, !dbg !5829
  call void @set_curr_insn_source_location(i32 %107), !dbg !5830
  %108 = load %union.tree_node*, %union.tree_node** %sblock, align 8, !dbg !5831
  call void @set_curr_insn_block(%union.tree_node* %108), !dbg !5832
  br label %if.end190, !dbg !5833

if.end190:                                        ; preds = %for.end189, %land.lhs.true87, %land.lhs.true85, %for.body
  %109 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5834
  store %union.gimple_statement_d* %109, %union.gimple_statement_d** @currently_expanding_gimple_stmt, align 8, !dbg !5835
  %110 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5836
  %call191 = call i32 @gimple_code(%union.gimple_statement_d* %110), !dbg !5838
  %cmp192 = icmp eq i32 %call191, 1, !dbg !5839
  br i1 %cmp192, label %if.then193, label %if.else198, !dbg !5840

if.then193:                                       ; preds = %if.end190
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5841
  %112 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5843
  %call194 = call %struct.basic_block_def* @expand_gimple_cond(%struct.basic_block_def* %111, %union.gimple_statement_d* %112), !dbg !5844
  store %struct.basic_block_def* %call194, %struct.basic_block_def** %new_bb, align 8, !dbg !5845
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5846
  %tobool195 = icmp ne %struct.basic_block_def* %113, null, !dbg !5846
  br i1 %tobool195, label %if.then196, label %if.end197, !dbg !5848

if.then196:                                       ; preds = %if.then193
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5849
  store %struct.basic_block_def* %114, %struct.basic_block_def** %retval, align 8, !dbg !5850
  br label %return, !dbg !5850

if.end197:                                        ; preds = %if.then193
  br label %if.end321, !dbg !5851

if.else198:                                       ; preds = %if.end190
  %115 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5852
  %call199 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %115), !dbg !5854
  %tobool200 = icmp ne i8 %call199, 0, !dbg !5854
  br i1 %tobool200, label %if.then201, label %if.else289, !dbg !5855

if.then201:                                       ; preds = %if.else198
  call void @llvm.dbg.declare(metadata i32* %sloc202, metadata !5856, metadata !DIExpression()), !dbg !5858
  %call203 = call i32 @get_curr_insn_source_location(), !dbg !5859
  store i32 %call203, i32* %sloc202, align 4, !dbg !5858
  call void @llvm.dbg.declare(metadata %union.tree_node** %sblock204, metadata !5860, metadata !DIExpression()), !dbg !5861
  %call205 = call %union.tree_node* @get_curr_insn_block(), !dbg !5862
  store %union.tree_node* %call205, %union.tree_node** %sblock204, align 8, !dbg !5861
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %nsi, metadata !5863, metadata !DIExpression()), !dbg !5864
  %116 = bitcast %struct.gimple_stmt_iterator* %nsi to i8*, !dbg !5865
  %117 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5865
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %116, i8* align 8 %117, i64 24, i1 false), !dbg !5865
  br label %for.cond206, !dbg !5866

for.cond206:                                      ; preds = %if.end287, %if.then201
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5867, metadata !DIExpression()), !dbg !5871
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5872
  %call207 = call %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %118), !dbg !5873
  store %union.tree_node* %call207, %union.tree_node** %var, align 8, !dbg !5871
  call void @llvm.dbg.declare(metadata %union.tree_node** %value208, metadata !5874, metadata !DIExpression()), !dbg !5875
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val209, metadata !5876, metadata !DIExpression()), !dbg !5877
  call void @llvm.dbg.declare(metadata i32* %mode210, metadata !5878, metadata !DIExpression()), !dbg !5879
  %119 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5880
  %call211 = call zeroext i8 @gimple_debug_bind_has_value_p(%union.gimple_statement_d* %119), !dbg !5882
  %tobool212 = icmp ne i8 %call211, 0, !dbg !5882
  br i1 %tobool212, label %if.then213, label %if.else215, !dbg !5883

if.then213:                                       ; preds = %for.cond206
  %120 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5884
  %call214 = call %union.tree_node* @gimple_debug_bind_get_value(%union.gimple_statement_d* %120), !dbg !5885
  store %union.tree_node* %call214, %union.tree_node** %value208, align 8, !dbg !5886
  br label %if.end216, !dbg !5887

if.else215:                                       ; preds = %for.cond206
  store %union.tree_node* null, %union.tree_node** %value208, align 8, !dbg !5888
  br label %if.end216

if.end216:                                        ; preds = %if.else215, %if.then213
  %call217 = call %struct.rtx_def* @get_last_insn(), !dbg !5889
  store %struct.rtx_def* %call217, %struct.rtx_def** %last, align 8, !dbg !5890
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5891
  %call218 = call i32 @gimple_location(%union.gimple_statement_d* %121), !dbg !5892
  call void @set_curr_insn_source_location(i32 %call218), !dbg !5893
  %122 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5894
  %call219 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %122), !dbg !5895
  call void @set_curr_insn_block(%union.tree_node* %call219), !dbg !5896
  %123 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5897
  %base220 = bitcast %union.tree_node* %123 to %struct.tree_base*, !dbg !5897
  %124 = bitcast %struct.tree_base* %base220 to i64*, !dbg !5897
  %bf.load221 = load i64, i64* %124, align 8, !dbg !5897
  %bf.clear222 = and i64 %bf.load221, 65535, !dbg !5897
  %bf.cast223 = trunc i64 %bf.clear222 to i32, !dbg !5897
  %idxprom224 = sext i32 %bf.cast223 to i64, !dbg !5897
  %arrayidx225 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom224, !dbg !5897
  %125 = load i32, i32* %arrayidx225, align 4, !dbg !5897
  %cmp226 = icmp eq i32 %125, 3, !dbg !5897
  br i1 %cmp226, label %if.then227, label %if.else233, !dbg !5899

if.then227:                                       ; preds = %if.end216
  %126 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5900
  %decl_common228 = bitcast %union.tree_node* %126 to %struct.tree_decl_common*, !dbg !5900
  %mode229 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common228, i32 0, i32 2, !dbg !5900
  %127 = bitcast i40* %mode229 to i64*, !dbg !5900
  %bf.load230 = load i64, i64* %127, align 8, !dbg !5900
  %bf.clear231 = and i64 %bf.load230, 255, !dbg !5900
  %bf.cast232 = trunc i64 %bf.clear231 to i32, !dbg !5900
  store i32 %bf.cast232, i32* %mode210, align 4, !dbg !5901
  br label %if.end255, !dbg !5902

if.else233:                                       ; preds = %if.end216
  %128 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5903
  %common234 = bitcast %union.tree_node* %128 to %struct.tree_common*, !dbg !5903
  %type235 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common234, i32 0, i32 2, !dbg !5903
  %129 = load %union.tree_node*, %union.tree_node** %type235, align 8, !dbg !5903
  %base236 = bitcast %union.tree_node* %129 to %struct.tree_base*, !dbg !5903
  %130 = bitcast %struct.tree_base* %base236 to i64*, !dbg !5903
  %bf.load237 = load i64, i64* %130, align 8, !dbg !5903
  %bf.clear238 = and i64 %bf.load237, 65535, !dbg !5903
  %bf.cast239 = trunc i64 %bf.clear238 to i32, !dbg !5903
  %cmp240 = icmp eq i32 %bf.cast239, 14, !dbg !5903
  br i1 %cmp240, label %cond.true241, label %cond.false245, !dbg !5903

cond.true241:                                     ; preds = %if.else233
  %131 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5903
  %common242 = bitcast %union.tree_node* %131 to %struct.tree_common*, !dbg !5903
  %type243 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common242, i32 0, i32 2, !dbg !5903
  %132 = load %union.tree_node*, %union.tree_node** %type243, align 8, !dbg !5903
  %call244 = call i32 @vector_type_mode(%union.tree_node* %132), !dbg !5903
  br label %cond.end253, !dbg !5903

cond.false245:                                    ; preds = %if.else233
  %133 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5903
  %common246 = bitcast %union.tree_node* %133 to %struct.tree_common*, !dbg !5903
  %type247 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common246, i32 0, i32 2, !dbg !5903
  %134 = load %union.tree_node*, %union.tree_node** %type247, align 8, !dbg !5903
  %type248 = bitcast %union.tree_node* %134 to %struct.tree_type*, !dbg !5903
  %mode249 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type248, i32 0, i32 6, !dbg !5903
  %bf.load250 = load i32, i32* %mode249, align 4, !dbg !5903
  %bf.lshr251 = lshr i32 %bf.load250, 16, !dbg !5903
  %bf.clear252 = and i32 %bf.lshr251, 255, !dbg !5903
  br label %cond.end253, !dbg !5903

cond.end253:                                      ; preds = %cond.false245, %cond.true241
  %cond254 = phi i32 [ %call244, %cond.true241 ], [ %bf.clear252, %cond.false245 ], !dbg !5903
  store i32 %cond254, i32* %mode210, align 4, !dbg !5904
  br label %if.end255

if.end255:                                        ; preds = %cond.end253, %if.then227
  %135 = load i32, i32* %mode210, align 4, !dbg !5905
  %136 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5905
  %137 = load %union.tree_node*, %union.tree_node** %value208, align 8, !dbg !5905
  %138 = bitcast %union.tree_node* %137 to %struct.rtx_def*, !dbg !5905
  %call256 = call %struct.rtx_def* @gen_rtx_fmt_tei_stat(i32 138, i32 %135, %union.tree_node* %136, %struct.rtx_def* %138, i32 2), !dbg !5905
  store %struct.rtx_def* %call256, %struct.rtx_def** %val209, align 8, !dbg !5906
  %139 = load %struct.rtx_def*, %struct.rtx_def** %val209, align 8, !dbg !5907
  %call257 = call %struct.rtx_def* @emit_debug_insn(%struct.rtx_def* %139), !dbg !5908
  store %struct.rtx_def* %call257, %struct.rtx_def** %val209, align 8, !dbg !5909
  %140 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5910
  %tobool258 = icmp ne %struct._IO_FILE* %140, null, !dbg !5910
  br i1 %tobool258, label %land.lhs.true259, label %if.end278, !dbg !5912

land.lhs.true259:                                 ; preds = %if.end255
  %141 = load i32, i32* @dump_flags, align 4, !dbg !5913
  %and = and i32 %141, 8, !dbg !5914
  %tobool260 = icmp ne i32 %and, 0, !dbg !5914
  br i1 %tobool260, label %if.then261, label %if.end278, !dbg !5915

if.then261:                                       ; preds = %land.lhs.true259
  %142 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5916
  %143 = load %struct.rtx_def*, %struct.rtx_def** %val209, align 8, !dbg !5918
  %u262 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %143, i32 0, i32 1, !dbg !5918
  %fld263 = bitcast %union.u* %u262 to [1 x %union.rtunion_def]*, !dbg !5918
  %arrayidx264 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld263, i64 0, i64 5, !dbg !5918
  %rt_rtx265 = bitcast %union.rtunion_def* %arrayidx264 to %struct.rtx_def**, !dbg !5918
  %144 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx265, align 8, !dbg !5918
  %u266 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1, !dbg !5918
  %fld267 = bitcast %union.u* %u266 to [1 x %union.rtunion_def]*, !dbg !5918
  %arrayidx268 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld267, i64 0, i64 1, !dbg !5918
  %rt_rtx269 = bitcast %union.rtunion_def* %arrayidx268 to %struct.rtx_def**, !dbg !5918
  store %struct.rtx_def* %142, %struct.rtx_def** %rt_rtx269, align 8, !dbg !5919
  %145 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5920
  %146 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !5921
  call void @maybe_dump_rtl_for_gimple_stmt(%union.gimple_statement_d* %145, %struct.rtx_def* %146), !dbg !5922
  %147 = load %union.tree_node*, %union.tree_node** %value208, align 8, !dbg !5923
  %148 = bitcast %union.tree_node* %147 to %struct.rtx_def*, !dbg !5924
  %149 = load %struct.rtx_def*, %struct.rtx_def** %val209, align 8, !dbg !5925
  %u270 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1, !dbg !5925
  %fld271 = bitcast %union.u* %u270 to [1 x %union.rtunion_def]*, !dbg !5925
  %arrayidx272 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld271, i64 0, i64 5, !dbg !5925
  %rt_rtx273 = bitcast %union.rtunion_def* %arrayidx272 to %struct.rtx_def**, !dbg !5925
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx273, align 8, !dbg !5925
  %u274 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %150, i32 0, i32 1, !dbg !5925
  %fld275 = bitcast %union.u* %u274 to [1 x %union.rtunion_def]*, !dbg !5925
  %arrayidx276 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld275, i64 0, i64 1, !dbg !5925
  %rt_rtx277 = bitcast %union.rtunion_def* %arrayidx276 to %struct.rtx_def**, !dbg !5925
  store %struct.rtx_def* %148, %struct.rtx_def** %rt_rtx277, align 8, !dbg !5926
  br label %if.end278, !dbg !5927

if.end278:                                        ; preds = %if.then261, %land.lhs.true259, %if.end255
  %151 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5928
  call void @delink_stmt_imm_use(%union.gimple_statement_d* %151), !dbg !5929
  %152 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5930
  %153 = bitcast %struct.gimple_stmt_iterator* %nsi to i8*, !dbg !5930
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %152, i8* align 8 %153, i64 24, i1 false), !dbg !5930
  call void @gsi_next(%struct.gimple_stmt_iterator* %nsi), !dbg !5931
  %call279 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %nsi), !dbg !5932
  %tobool280 = icmp ne i8 %call279, 0, !dbg !5932
  br i1 %tobool280, label %if.then281, label %if.end282, !dbg !5934

if.then281:                                       ; preds = %if.end278
  br label %for.end288, !dbg !5935

if.end282:                                        ; preds = %if.end278
  %call283 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %nsi), !dbg !5936
  store %union.gimple_statement_d* %call283, %union.gimple_statement_d** %stmt, align 8, !dbg !5937
  %154 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5938
  %call284 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %154), !dbg !5940
  %tobool285 = icmp ne i8 %call284, 0, !dbg !5940
  br i1 %tobool285, label %if.end287, label %if.then286, !dbg !5941

if.then286:                                       ; preds = %if.end282
  br label %for.end288, !dbg !5942

if.end287:                                        ; preds = %if.end282
  br label %for.cond206, !dbg !5943, !llvm.loop !5944

for.end288:                                       ; preds = %if.then286, %if.then281
  %155 = load i32, i32* %sloc202, align 4, !dbg !5947
  call void @set_curr_insn_source_location(i32 %155), !dbg !5948
  %156 = load %union.tree_node*, %union.tree_node** %sblock204, align 8, !dbg !5949
  call void @set_curr_insn_block(%union.tree_node* %156), !dbg !5950
  br label %if.end320, !dbg !5951

if.else289:                                       ; preds = %if.else198
  %157 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5952
  %call290 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %157), !dbg !5955
  %conv = zext i8 %call290 to i32, !dbg !5955
  %tobool291 = icmp ne i32 %conv, 0, !dbg !5955
  br i1 %tobool291, label %land.lhs.true292, label %if.else305, !dbg !5956

land.lhs.true292:                                 ; preds = %if.else289
  %158 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5957
  %call293 = call zeroext i8 @gimple_call_tail_p(%union.gimple_statement_d* %158), !dbg !5958
  %conv294 = zext i8 %call293 to i32, !dbg !5958
  %tobool295 = icmp ne i32 %conv294, 0, !dbg !5958
  br i1 %tobool295, label %if.then296, label %if.else305, !dbg !5959

if.then296:                                       ; preds = %land.lhs.true292
  call void @llvm.dbg.declare(metadata i8* %can_fallthru, metadata !5960, metadata !DIExpression()), !dbg !5962
  %159 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5963
  %160 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5964
  %call297 = call %struct.basic_block_def* @expand_gimple_tailcall(%struct.basic_block_def* %159, %union.gimple_statement_d* %160, i8* %can_fallthru), !dbg !5965
  store %struct.basic_block_def* %call297, %struct.basic_block_def** %new_bb, align 8, !dbg !5966
  %161 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5967
  %tobool298 = icmp ne %struct.basic_block_def* %161, null, !dbg !5967
  br i1 %tobool298, label %if.then299, label %if.end304, !dbg !5969

if.then299:                                       ; preds = %if.then296
  %162 = load i8, i8* %can_fallthru, align 1, !dbg !5970
  %tobool300 = icmp ne i8 %162, 0, !dbg !5970
  br i1 %tobool300, label %if.then301, label %if.else302, !dbg !5973

if.then301:                                       ; preds = %if.then299
  %163 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5974
  store %struct.basic_block_def* %163, %struct.basic_block_def** %bb.addr, align 8, !dbg !5975
  br label %if.end303, !dbg !5976

if.else302:                                       ; preds = %if.then299
  %164 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5977
  store %struct.basic_block_def* %164, %struct.basic_block_def** %retval, align 8, !dbg !5978
  br label %return, !dbg !5978

if.end303:                                        ; preds = %if.then301
  br label %if.end304, !dbg !5979

if.end304:                                        ; preds = %if.end303, %if.then296
  br label %if.end319, !dbg !5980

if.else305:                                       ; preds = %land.lhs.true292, %if.else289
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !5981, metadata !DIExpression()), !dbg !5983
  %165 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5984
  %call306 = call %union.tree_node** @single_ssa_def_operand(%union.gimple_statement_d* %165, i32 2), !dbg !5984
  store %union.tree_node** %call306, %union.tree_node*** %def_p, align 8, !dbg !5985
  %166 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !5986
  %cmp307 = icmp ne %union.tree_node** %166, null, !dbg !5988
  br i1 %cmp307, label %if.then309, label %if.end317, !dbg !5989

if.then309:                                       ; preds = %if.else305
  %167 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 1), align 8, !dbg !5990
  %tobool310 = icmp ne %struct.bitmap_head_def* %167, null, !dbg !5993
  br i1 %tobool310, label %land.lhs.true311, label %if.end316, !dbg !5994

land.lhs.true311:                                 ; preds = %if.then309
  %168 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 1), align 8, !dbg !5995
  %169 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !5996
  %call312 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %169), !dbg !5996
  %ssa_name = bitcast %union.tree_node* %call312 to %struct.tree_ssa_name*, !dbg !5996
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !5996
  %170 = load i32, i32* %version, align 8, !dbg !5996
  %call313 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %168, i32 %170), !dbg !5997
  %tobool314 = icmp ne i32 %call313, 0, !dbg !5997
  br i1 %tobool314, label %if.then315, label %if.end316, !dbg !5998

if.then315:                                       ; preds = %land.lhs.true311
  br label %for.inc322, !dbg !5999

if.end316:                                        ; preds = %land.lhs.true311, %if.then309
  br label %if.end317, !dbg !6000

if.end317:                                        ; preds = %if.end316, %if.else305
  %171 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6001
  %call318 = call %struct.rtx_def* @expand_gimple_stmt(%union.gimple_statement_d* %171), !dbg !6002
  store %struct.rtx_def* %call318, %struct.rtx_def** %last, align 8, !dbg !6003
  %172 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6004
  %173 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6005
  call void @maybe_dump_rtl_for_gimple_stmt(%union.gimple_statement_d* %172, %struct.rtx_def* %173), !dbg !6006
  br label %if.end319

if.end319:                                        ; preds = %if.end317, %if.end304
  br label %if.end320

if.end320:                                        ; preds = %if.end319, %for.end288
  br label %if.end321

if.end321:                                        ; preds = %if.end320, %if.end197
  br label %for.inc322, !dbg !6007

for.inc322:                                       ; preds = %if.end321, %if.then315
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6008
  br label %for.cond, !dbg !6009, !llvm.loop !6010

for.end323:                                       ; preds = %for.cond
  store %union.gimple_statement_d* null, %union.gimple_statement_d** @currently_expanding_gimple_stmt, align 8, !dbg !6012
  %174 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6013
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %174, i32 0, i32 1, !dbg !6013
  %call325 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !6013
  %175 = bitcast %struct.edge_iterator* %tmp324 to { i32, %struct.VEC_edge_gc** }*, !dbg !6013
  %176 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %175, i32 0, i32 0, !dbg !6013
  %177 = extractvalue { i32, %struct.VEC_edge_gc** } %call325, 0, !dbg !6013
  store i32 %177, i32* %176, align 8, !dbg !6013
  %178 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %175, i32 0, i32 1, !dbg !6013
  %179 = extractvalue { i32, %struct.VEC_edge_gc** } %call325, 1, !dbg !6013
  store %struct.VEC_edge_gc** %179, %struct.VEC_edge_gc*** %178, align 8, !dbg !6013
  %180 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6013
  %181 = bitcast %struct.edge_iterator* %tmp324 to i8*, !dbg !6013
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %180, i8* align 8 %181, i64 16, i1 false), !dbg !6013
  br label %for.cond326, !dbg !6013

for.cond326:                                      ; preds = %for.inc353, %for.end323
  %182 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6015
  %183 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %182, i32 0, i32 0, !dbg !6015
  %184 = load i32, i32* %183, align 8, !dbg !6015
  %185 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %182, i32 0, i32 1, !dbg !6015
  %186 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %185, align 8, !dbg !6015
  %call327 = call zeroext i8 @ei_cond(i32 %184, %struct.VEC_edge_gc** %186, %struct.edge_def** %e), !dbg !6015
  %tobool328 = icmp ne i8 %call327, 0, !dbg !6013
  br i1 %tobool328, label %for.body329, label %for.end354, !dbg !6013

for.body329:                                      ; preds = %for.cond326
  %187 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6017
  %goto_locus = getelementptr inbounds %struct.edge_def, %struct.edge_def* %187, i32 0, i32 5, !dbg !6020
  %188 = load i32, i32* %goto_locus, align 8, !dbg !6020
  %tobool330 = icmp ne i32 %188, 0, !dbg !6017
  br i1 %tobool330, label %land.lhs.true331, label %if.end338, !dbg !6021

land.lhs.true331:                                 ; preds = %for.body329
  %189 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6022
  %goto_block = getelementptr inbounds %struct.edge_def, %struct.edge_def* %189, i32 0, i32 4, !dbg !6023
  %190 = load %union.tree_node*, %union.tree_node** %goto_block, align 8, !dbg !6023
  %tobool332 = icmp ne %union.tree_node* %190, null, !dbg !6022
  br i1 %tobool332, label %if.then333, label %if.end338, !dbg !6024

if.then333:                                       ; preds = %land.lhs.true331
  %191 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6025
  %goto_locus334 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %191, i32 0, i32 5, !dbg !6027
  %192 = load i32, i32* %goto_locus334, align 8, !dbg !6027
  call void @set_curr_insn_source_location(i32 %192), !dbg !6028
  %193 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6029
  %goto_block335 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %193, i32 0, i32 4, !dbg !6030
  %194 = load %union.tree_node*, %union.tree_node** %goto_block335, align 8, !dbg !6030
  call void @set_curr_insn_block(%union.tree_node* %194), !dbg !6031
  %call336 = call i32 @curr_insn_locator(), !dbg !6032
  %195 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6033
  %goto_locus337 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %195, i32 0, i32 5, !dbg !6034
  store i32 %call336, i32* %goto_locus337, align 8, !dbg !6035
  br label %if.end338, !dbg !6036

if.end338:                                        ; preds = %if.then333, %land.lhs.true331, %for.body329
  %196 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6037
  %goto_block339 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %196, i32 0, i32 4, !dbg !6038
  store %union.tree_node* null, %union.tree_node** %goto_block339, align 8, !dbg !6039
  %197 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6040
  %flags340 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %197, i32 0, i32 7, !dbg !6042
  %198 = load i32, i32* %flags340, align 8, !dbg !6042
  %and341 = and i32 %198, 1, !dbg !6043
  %tobool342 = icmp ne i32 %and341, 0, !dbg !6043
  br i1 %tobool342, label %land.lhs.true343, label %if.end352, !dbg !6044

land.lhs.true343:                                 ; preds = %if.end338
  %199 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6045
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %199, i32 0, i32 1, !dbg !6046
  %200 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6046
  %201 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6047
  %next_bb344 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %201, i32 0, i32 6, !dbg !6048
  %202 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb344, align 8, !dbg !6048
  %cmp345 = icmp ne %struct.basic_block_def* %200, %202, !dbg !6049
  br i1 %cmp345, label %if.then347, label %if.end352, !dbg !6050

if.then347:                                       ; preds = %land.lhs.true343
  %203 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6051
  %dest348 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %203, i32 0, i32 1, !dbg !6053
  %204 = load %struct.basic_block_def*, %struct.basic_block_def** %dest348, align 8, !dbg !6053
  %call349 = call %struct.rtx_def* @label_rtx_for_bb(%struct.basic_block_def* %204), !dbg !6054
  call void @emit_jump(%struct.rtx_def* %call349), !dbg !6055
  %205 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6056
  %flags350 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %205, i32 0, i32 7, !dbg !6057
  %206 = load i32, i32* %flags350, align 8, !dbg !6058
  %and351 = and i32 %206, -2, !dbg !6058
  store i32 %and351, i32* %flags350, align 8, !dbg !6058
  br label %if.end352, !dbg !6059

if.end352:                                        ; preds = %if.then347, %land.lhs.true343, %if.end338
  br label %for.inc353, !dbg !6060

for.inc353:                                       ; preds = %if.end352
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6015
  br label %for.cond326, !dbg !6015, !llvm.loop !6061

for.end354:                                       ; preds = %for.cond326
  %207 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6063
  %call355 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %207), !dbg !6065
  %conv356 = zext i8 %call355 to i32, !dbg !6065
  %tobool357 = icmp ne i32 %conv356, 0, !dbg !6065
  br i1 %tobool357, label %land.lhs.true358, label %if.end375, !dbg !6066

land.lhs.true358:                                 ; preds = %for.end354
  %208 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6067
  %call359 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %208), !dbg !6068
  %flags360 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call359, i32 0, i32 7, !dbg !6069
  %209 = load i32, i32* %flags360, align 8, !dbg !6069
  %and361 = and i32 %209, 1, !dbg !6070
  %tobool362 = icmp ne i32 %and361, 0, !dbg !6070
  br i1 %tobool362, label %land.lhs.true363, label %if.end375, !dbg !6071

land.lhs.true363:                                 ; preds = %land.lhs.true358
  %call364 = call %struct.rtx_def* @get_last_insn(), !dbg !6072
  store %struct.rtx_def* %call364, %struct.rtx_def** %last, align 8, !dbg !6073
  %tobool365 = icmp ne %struct.rtx_def* %call364, null, !dbg !6073
  br i1 %tobool365, label %land.lhs.true366, label %if.end375, !dbg !6074

land.lhs.true366:                                 ; preds = %land.lhs.true363
  %210 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6075
  %211 = bitcast %struct.rtx_def* %210 to i32*, !dbg !6075
  %bf.load367 = load i32, i32* %211, align 8, !dbg !6075
  %bf.clear368 = and i32 %bf.load367, 65535, !dbg !6075
  %cmp369 = icmp eq i32 %bf.clear368, 9, !dbg !6075
  br i1 %cmp369, label %if.then371, label %if.end375, !dbg !6076

if.then371:                                       ; preds = %land.lhs.true366
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dummy, metadata !6077, metadata !DIExpression()), !dbg !6079
  %call372 = call %struct.rtx_def* @gen_reg_rtx(i32 16), !dbg !6080
  store %struct.rtx_def* %call372, %struct.rtx_def** %dummy, align 8, !dbg !6079
  %212 = load %struct.rtx_def*, %struct.rtx_def** %dummy, align 8, !dbg !6081
  %213 = load %struct.rtx_def*, %struct.rtx_def** %dummy, align 8, !dbg !6082
  %call373 = call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %212, %struct.rtx_def* %213), !dbg !6083
  %214 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6084
  %call374 = call %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def* %call373, %struct.rtx_def* %214, %struct.basic_block_def* null), !dbg !6085
  br label %if.end375, !dbg !6086

if.end375:                                        ; preds = %if.then371, %land.lhs.true366, %land.lhs.true363, %land.lhs.true358, %for.end354
  call void @do_pending_stack_adjust(), !dbg !6087
  %call376 = call %struct.rtx_def* @get_last_insn(), !dbg !6088
  store %struct.rtx_def* %call376, %struct.rtx_def** %last, align 8, !dbg !6089
  %215 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6090
  %216 = bitcast %struct.rtx_def* %215 to i32*, !dbg !6090
  %bf.load377 = load i32, i32* %216, align 8, !dbg !6090
  %bf.clear378 = and i32 %bf.load377, 65535, !dbg !6090
  %cmp379 = icmp eq i32 %bf.clear378, 11, !dbg !6090
  br i1 %cmp379, label %if.then381, label %if.end386, !dbg !6092

if.then381:                                       ; preds = %if.end375
  %217 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6093
  %u382 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %217, i32 0, i32 1, !dbg !6093
  %fld383 = bitcast %union.u* %u382 to [1 x %union.rtunion_def]*, !dbg !6093
  %arrayidx384 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld383, i64 0, i64 1, !dbg !6093
  %rt_rtx385 = bitcast %union.rtunion_def* %arrayidx384 to %struct.rtx_def**, !dbg !6093
  %218 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx385, align 8, !dbg !6093
  store %struct.rtx_def* %218, %struct.rtx_def** %last, align 8, !dbg !6094
  br label %if.end386, !dbg !6095

if.end386:                                        ; preds = %if.then381, %if.end375
  %219 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6096
  %220 = bitcast %struct.rtx_def* %219 to i32*, !dbg !6096
  %bf.load387 = load i32, i32* %220, align 8, !dbg !6096
  %bf.clear388 = and i32 %bf.load387, 65535, !dbg !6096
  %cmp389 = icmp eq i32 %bf.clear388, 9, !dbg !6096
  br i1 %cmp389, label %land.lhs.true391, label %if.end418, !dbg !6096

land.lhs.true391:                                 ; preds = %if.end386
  %221 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6096
  %u392 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %221, i32 0, i32 1, !dbg !6096
  %fld393 = bitcast %union.u* %u392 to [1 x %union.rtunion_def]*, !dbg !6096
  %arrayidx394 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld393, i64 0, i64 5, !dbg !6096
  %rt_rtx395 = bitcast %union.rtunion_def* %arrayidx394 to %struct.rtx_def**, !dbg !6096
  %222 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx395, align 8, !dbg !6096
  %223 = bitcast %struct.rtx_def* %222 to i32*, !dbg !6096
  %bf.load396 = load i32, i32* %223, align 8, !dbg !6096
  %bf.clear397 = and i32 %bf.load396, 65535, !dbg !6096
  %cmp398 = icmp eq i32 %bf.clear397, 20, !dbg !6096
  br i1 %cmp398, label %if.then409, label %lor.lhs.false400, !dbg !6096

lor.lhs.false400:                                 ; preds = %land.lhs.true391
  %224 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6096
  %u401 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %224, i32 0, i32 1, !dbg !6096
  %fld402 = bitcast %union.u* %u401 to [1 x %union.rtunion_def]*, !dbg !6096
  %arrayidx403 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld402, i64 0, i64 5, !dbg !6096
  %rt_rtx404 = bitcast %union.rtunion_def* %arrayidx403 to %struct.rtx_def**, !dbg !6096
  %225 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx404, align 8, !dbg !6096
  %226 = bitcast %struct.rtx_def* %225 to i32*, !dbg !6096
  %bf.load405 = load i32, i32* %226, align 8, !dbg !6096
  %bf.clear406 = and i32 %bf.load405, 65535, !dbg !6096
  %cmp407 = icmp eq i32 %bf.clear406, 21, !dbg !6096
  br i1 %cmp407, label %if.then409, label %if.end418, !dbg !6098

if.then409:                                       ; preds = %lor.lhs.false400, %land.lhs.true391
  %227 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6099
  %u410 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %227, i32 0, i32 1, !dbg !6099
  %fld411 = bitcast %union.u* %u410 to [1 x %union.rtunion_def]*, !dbg !6099
  %arrayidx412 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld411, i64 0, i64 1, !dbg !6099
  %rt_rtx413 = bitcast %union.rtunion_def* %arrayidx412 to %struct.rtx_def**, !dbg !6099
  %228 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx413, align 8, !dbg !6099
  %u414 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %228, i32 0, i32 1, !dbg !6099
  %fld415 = bitcast %union.u* %u414 to [1 x %union.rtunion_def]*, !dbg !6099
  %arrayidx416 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld415, i64 0, i64 1, !dbg !6099
  %rt_rtx417 = bitcast %union.rtunion_def* %arrayidx416 to %struct.rtx_def**, !dbg !6099
  %229 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx417, align 8, !dbg !6099
  store %struct.rtx_def* %229, %struct.rtx_def** %last, align 8, !dbg !6100
  br label %if.end418, !dbg !6101

if.end418:                                        ; preds = %if.then409, %lor.lhs.false400, %if.end386
  %230 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6102
  %231 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6103
  %il419 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %231, i32 0, i32 7, !dbg !6103
  %rtl420 = bitcast %union.basic_block_il_dependent* %il419 to %struct.rtl_bb_info**, !dbg !6103
  %232 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl420, align 8, !dbg !6103
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %232, i32 0, i32 1, !dbg !6103
  store %struct.rtx_def* %230, %struct.rtx_def** %end_, align 8, !dbg !6104
  %233 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6105
  call void @update_bb_for_insn(%struct.basic_block_def* %233), !dbg !6106
  %234 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6107
  store %struct.basic_block_def* %234, %struct.basic_block_def** %retval, align 8, !dbg !6108
  br label %return, !dbg !6108

return:                                           ; preds = %if.end418, %if.else302, %if.then196
  %235 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !6109
  ret %struct.basic_block_def* %235, !dbg !6109
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_debug_locations() #0 !dbg !6110 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %save_strict_alias = alloca i32, align 4
  %value = alloca %union.tree_node*, align 8
  %val = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6111, metadata !DIExpression()), !dbg !6112
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !6113, metadata !DIExpression()), !dbg !6114
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !6115
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !6114
  call void @llvm.dbg.declare(metadata i32* %save_strict_alias, metadata !6116, metadata !DIExpression()), !dbg !6117
  %0 = load i32, i32* @flag_strict_aliasing, align 4, !dbg !6118
  store i32 %0, i32* %save_strict_alias, align 4, !dbg !6117
  store i32 0, i32* @flag_strict_aliasing, align 4, !dbg !6119
  %call1 = call %struct.rtx_def* @get_insns(), !dbg !6120
  store %struct.rtx_def* %call1, %struct.rtx_def** %insn, align 8, !dbg !6122
  br label %for.cond, !dbg !6123

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6124
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !6126
  br i1 %tobool, label %for.body, label %for.end, !dbg !6126

for.body:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6127
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6127
  %bf.load = load i32, i32* %3, align 8, !dbg !6127
  %bf.clear = and i32 %bf.load, 65535, !dbg !6127
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !6127
  br i1 %cmp, label %if.then, label %if.end57, !dbg !6129

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !6130, metadata !DIExpression()), !dbg !6132
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6133
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !6133
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6133
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6133
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6133
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6133
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !6133
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !6133
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 1, !dbg !6133
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !6133
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx5, align 8, !dbg !6133
  %7 = bitcast %struct.rtx_def* %6 to %union.tree_node*, !dbg !6134
  store %union.tree_node* %7, %union.tree_node** %value, align 8, !dbg !6132
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val, metadata !6135, metadata !DIExpression()), !dbg !6136
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !6137, metadata !DIExpression()), !dbg !6138
  %8 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6139
  %cmp6 = icmp eq %union.tree_node* %8, null, !dbg !6141
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !6142

if.then7:                                         ; preds = %if.then
  store %struct.rtx_def* null, %struct.rtx_def** %val, align 8, !dbg !6143
  br label %if.end, !dbg !6144

if.else:                                          ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6145
  %call8 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %9), !dbg !6147
  store %struct.rtx_def* %call8, %struct.rtx_def** %val, align 8, !dbg !6148
  %10 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !6149
  %call9 = call %struct.rtx_def* @get_last_insn(), !dbg !6149
  %cmp10 = icmp eq %struct.rtx_def* %10, %call9, !dbg !6149
  br i1 %cmp10, label %cond.false, label %cond.true, !dbg !6149

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 3079, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6149
  br label %cond.end, !dbg !6149

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !6149

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6149
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !6150
  %tobool11 = icmp ne %struct.rtx_def* %11, null, !dbg !6150
  br i1 %tobool11, label %if.else14, label %if.then12, !dbg !6152

if.then12:                                        ; preds = %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6153
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 25, i32 0, %struct.rtx_def* %12), !dbg !6153
  store %struct.rtx_def* %call13, %struct.rtx_def** %val, align 8, !dbg !6154
  br label %if.end48, !dbg !6155

if.else14:                                        ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6156
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !6156
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !6156
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 5, !dbg !6156
  %rt_rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**, !dbg !6156
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx18, align 8, !dbg !6156
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !6156
  %bf.load19 = load i32, i32* %15, align 8, !dbg !6156
  %bf.lshr = lshr i32 %bf.load19, 16, !dbg !6156
  %bf.clear20 = and i32 %bf.lshr, 255, !dbg !6156
  store i32 %bf.clear20, i32* %mode, align 4, !dbg !6158
  %16 = load i32, i32* %mode, align 4, !dbg !6159
  %17 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !6159
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !6159
  %bf.load21 = load i32, i32* %18, align 8, !dbg !6159
  %bf.lshr22 = lshr i32 %bf.load21, 16, !dbg !6159
  %bf.clear23 = and i32 %bf.lshr22, 255, !dbg !6159
  %cmp24 = icmp eq i32 %16, %bf.clear23, !dbg !6159
  br i1 %cmp24, label %cond.false45, label %lor.lhs.false, !dbg !6159

lor.lhs.false:                                    ; preds = %if.else14
  %19 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !6159
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !6159
  %bf.load25 = load i32, i32* %20, align 8, !dbg !6159
  %bf.lshr26 = lshr i32 %bf.load25, 16, !dbg !6159
  %bf.clear27 = and i32 %bf.lshr26, 255, !dbg !6159
  %cmp28 = icmp eq i32 %bf.clear27, 0, !dbg !6159
  br i1 %cmp28, label %land.lhs.true, label %cond.true44, !dbg !6159

land.lhs.true:                                    ; preds = %lor.lhs.false
  %21 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !6159
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !6159
  %bf.load29 = load i32, i32* %22, align 8, !dbg !6159
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !6159
  %cmp31 = icmp eq i32 %bf.clear30, 30, !dbg !6159
  br i1 %cmp31, label %cond.false45, label %lor.lhs.false32, !dbg !6159

lor.lhs.false32:                                  ; preds = %land.lhs.true
  %23 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !6159
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !6159
  %bf.load33 = load i32, i32* %24, align 8, !dbg !6159
  %bf.clear34 = and i32 %bf.load33, 65535, !dbg !6159
  %cmp35 = icmp eq i32 %bf.clear34, 31, !dbg !6159
  br i1 %cmp35, label %cond.false45, label %lor.lhs.false36, !dbg !6159

lor.lhs.false36:                                  ; preds = %lor.lhs.false32
  %25 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !6159
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !6159
  %bf.load37 = load i32, i32* %26, align 8, !dbg !6159
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !6159
  %cmp39 = icmp eq i32 %bf.clear38, 32, !dbg !6159
  br i1 %cmp39, label %cond.false45, label %lor.lhs.false40, !dbg !6159

lor.lhs.false40:                                  ; preds = %lor.lhs.false36
  %27 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !6159
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !6159
  %bf.load41 = load i32, i32* %28, align 8, !dbg !6159
  %bf.clear42 = and i32 %bf.load41, 65535, !dbg !6159
  %cmp43 = icmp eq i32 %bf.clear42, 44, !dbg !6159
  br i1 %cmp43, label %cond.false45, label %cond.true44, !dbg !6159

cond.true44:                                      ; preds = %lor.lhs.false40, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 3093, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6159
  br label %cond.end46, !dbg !6159

cond.false45:                                     ; preds = %lor.lhs.false40, %lor.lhs.false36, %lor.lhs.false32, %land.lhs.true, %if.else14
  br label %cond.end46, !dbg !6159

cond.end46:                                       ; preds = %cond.false45, %cond.true44
  %cond47 = phi i32 [ 0, %cond.true44 ], [ 0, %cond.false45 ], !dbg !6159
  br label %if.end48

if.end48:                                         ; preds = %cond.end46, %if.then12
  %29 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !6160
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6161
  %u49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !6161
  %fld50 = bitcast %union.u* %u49 to [1 x %union.rtunion_def]*, !dbg !6161
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i64 0, i64 5, !dbg !6161
  %rt_rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**, !dbg !6161
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx52, align 8, !dbg !6161
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !6161
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !6161
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 1, !dbg !6161
  %rt_rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**, !dbg !6161
  store %struct.rtx_def* %29, %struct.rtx_def** %rt_rtx56, align 8, !dbg !6162
  br label %if.end57, !dbg !6163

if.end57:                                         ; preds = %if.end48, %for.body
  br label %for.inc, !dbg !6127

for.inc:                                          ; preds = %if.end57
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6164
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !6164
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !6164
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 2, !dbg !6164
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !6164
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !6164
  store %struct.rtx_def* %33, %struct.rtx_def** %insn, align 8, !dbg !6165
  br label %for.cond, !dbg !6166, !llvm.loop !6167

for.end:                                          ; preds = %for.cond
  %34 = load i32, i32* %save_strict_alias, align 4, !dbg !6169
  store i32 %34, i32* @flag_strict_aliasing, align 4, !dbg !6170
  ret void, !dbg !6171
}

declare dso_local i32 @execute_free_datastructures() #2

declare dso_local void @finish_out_of_ssa(%struct.ssaexpand*) #2

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

declare dso_local void @free_histograms() #2

; Function Attrs: noinline nounwind uwtable
define internal void @construct_exit_block() #0 !dbg !6172 {
entry:
  %head = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %exit_block = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %e2 = alloca %struct.edge_def*, align 8
  %ix = alloca i32, align 4
  %ei = alloca %struct.edge_iterator, align 8
  %orig_end = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !6173, metadata !DIExpression()), !dbg !6174
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !6175
  store %struct.rtx_def* %call, %struct.rtx_def** %head, align 8, !dbg !6174
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end, metadata !6176, metadata !DIExpression()), !dbg !6177
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_block, metadata !6178, metadata !DIExpression()), !dbg !6179
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6180, metadata !DIExpression()), !dbg !6181
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e2, metadata !6182, metadata !DIExpression()), !dbg !6183
  call void @llvm.dbg.declare(metadata i32* %ix, metadata !6184, metadata !DIExpression()), !dbg !6185
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6186, metadata !DIExpression()), !dbg !6187
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig_end, metadata !6188, metadata !DIExpression()), !dbg !6189
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6190
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6190
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6190
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6190
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 1, !dbg !6190
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6190
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 5, !dbg !6190
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !6190
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !6190
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6190
  %4 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6190
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %4, i32 0, i32 1, !dbg !6190
  %5 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6190
  store %struct.rtx_def* %5, %struct.rtx_def** %orig_end, align 8, !dbg !6189
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6191
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !6191
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !6191
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !6191
  %x_exit_block_ptr3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !6191
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr3, align 8, !dbg !6191
  call void @rtl_profile_for_bb(%struct.basic_block_def* %8), !dbg !6192
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6193
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !6193
  %function_end_locus = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 16, !dbg !6195
  %10 = load i32, i32* %function_end_locus, align 4, !dbg !6195
  %cmp = icmp ne i32 %10, 0, !dbg !6196
  br i1 %cmp, label %if.then, label %if.end, !dbg !6197

if.then:                                          ; preds = %entry
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6198
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !6198
  %function_end_locus6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 16, !dbg !6199
  %12 = load i32, i32* %function_end_locus6, align 4, !dbg !6199
  store i32 %12, i32* @input_location, align 4, !dbg !6200
  br label %if.end, !dbg !6201

if.end:                                           ; preds = %if.then, %entry
  %13 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6202
  %decl_common = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !6202
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !6202
  %14 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !6202
  call void @set_curr_insn_block(%union.tree_node* %14), !dbg !6203
  call void @expand_function_end(), !dbg !6204
  %call7 = call %struct.rtx_def* @get_last_insn(), !dbg !6205
  store %struct.rtx_def* %call7, %struct.rtx_def** %end, align 8, !dbg !6206
  %15 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !6207
  %16 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !6209
  %cmp8 = icmp eq %struct.rtx_def* %15, %16, !dbg !6210
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !6211

if.then9:                                         ; preds = %if.end
  br label %return, !dbg !6212

if.end10:                                         ; preds = %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %orig_end, align 8, !dbg !6213
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6214
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !6214
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !6214
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !6214
  %x_exit_block_ptr13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 1, !dbg !6214
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr13, align 8, !dbg !6214
  %prev_bb14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 5, !dbg !6214
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb14, align 8, !dbg !6214
  %il15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 7, !dbg !6214
  %rtl16 = bitcast %union.basic_block_il_dependent* %il15 to %struct.rtl_bb_info**, !dbg !6214
  %22 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl16, align 8, !dbg !6214
  %end_17 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %22, i32 0, i32 1, !dbg !6214
  store %struct.rtx_def* %17, %struct.rtx_def** %end_17, align 8, !dbg !6215
  br label %while.cond, !dbg !6216

while.cond:                                       ; preds = %while.body, %if.end10
  %23 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !6217
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !6217
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6217
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6217
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6217
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6217
  %tobool = icmp ne %struct.rtx_def* %24, null, !dbg !6217
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6218

land.rhs:                                         ; preds = %while.cond
  %25 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !6219
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !6219
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !6219
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 2, !dbg !6219
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !6219
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !6219
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !6219
  %bf.load = load i32, i32* %27, align 8, !dbg !6219
  %bf.clear = and i32 %bf.load, 65535, !dbg !6219
  %cmp22 = icmp eq i32 %bf.clear, 13, !dbg !6219
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %28 = phi i1 [ false, %while.cond ], [ %cmp22, %land.rhs ], !dbg !6220
  br i1 %28, label %while.body, label %while.end, !dbg !6216

while.body:                                       ; preds = %land.end
  %29 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !6221
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !6221
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !6221
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 2, !dbg !6221
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !6221
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !6221
  store %struct.rtx_def* %30, %struct.rtx_def** %head, align 8, !dbg !6222
  br label %while.cond, !dbg !6216, !llvm.loop !6223

while.end:                                        ; preds = %land.end
  %31 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !6224
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !6224
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !6224
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 2, !dbg !6224
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !6224
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !6224
  %33 = bitcast %struct.rtx_def* %32 to i8*, !dbg !6224
  %34 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !6225
  %35 = bitcast %struct.rtx_def* %34 to i8*, !dbg !6225
  %36 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6226
  %add.ptr31 = getelementptr inbounds %struct.function, %struct.function* %36, i64 0, !dbg !6226
  %cfg32 = getelementptr inbounds %struct.function, %struct.function* %add.ptr31, i32 0, i32 1, !dbg !6226
  %37 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg32, align 8, !dbg !6226
  %x_exit_block_ptr33 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %37, i32 0, i32 1, !dbg !6226
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr33, align 8, !dbg !6226
  %prev_bb34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 5, !dbg !6227
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb34, align 8, !dbg !6227
  %call35 = call %struct.basic_block_def* @create_basic_block(i8* %33, i8* %35, %struct.basic_block_def* %39), !dbg !6228
  store %struct.basic_block_def* %call35, %struct.basic_block_def** %exit_block, align 8, !dbg !6229
  %40 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6230
  %add.ptr36 = getelementptr inbounds %struct.function, %struct.function* %40, i64 0, !dbg !6230
  %cfg37 = getelementptr inbounds %struct.function, %struct.function* %add.ptr36, i32 0, i32 1, !dbg !6230
  %41 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg37, align 8, !dbg !6230
  %x_exit_block_ptr38 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %41, i32 0, i32 1, !dbg !6230
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr38, align 8, !dbg !6230
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 11, !dbg !6231
  %43 = load i32, i32* %frequency, align 8, !dbg !6231
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !6232
  %frequency39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 11, !dbg !6233
  store i32 %43, i32* %frequency39, align 8, !dbg !6234
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6235
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, !dbg !6235
  %cfg41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 1, !dbg !6235
  %46 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg41, align 8, !dbg !6235
  %x_exit_block_ptr42 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %46, i32 0, i32 1, !dbg !6235
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr42, align 8, !dbg !6235
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 8, !dbg !6236
  %48 = load i64, i64* %count, align 8, !dbg !6236
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !6237
  %count43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 8, !dbg !6238
  store i64 %48, i64* %count43, align 8, !dbg !6239
  store i32 0, i32* %ix, align 4, !dbg !6240
  br label %while.cond44, !dbg !6241

while.cond44:                                     ; preds = %if.end73, %while.end
  %50 = load i32, i32* %ix, align 4, !dbg !6242
  %51 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6243
  %add.ptr45 = getelementptr inbounds %struct.function, %struct.function* %51, i64 0, !dbg !6243
  %cfg46 = getelementptr inbounds %struct.function, %struct.function* %add.ptr45, i32 0, i32 1, !dbg !6243
  %52 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg46, align 8, !dbg !6243
  %x_exit_block_ptr47 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %52, i32 0, i32 1, !dbg !6243
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr47, align 8, !dbg !6243
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 0, !dbg !6243
  %54 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6243
  %tobool48 = icmp ne %struct.VEC_edge_gc* %54, null, !dbg !6243
  br i1 %tobool48, label %cond.true, label %cond.false, !dbg !6243

cond.true:                                        ; preds = %while.cond44
  %55 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6243
  %add.ptr49 = getelementptr inbounds %struct.function, %struct.function* %55, i64 0, !dbg !6243
  %cfg50 = getelementptr inbounds %struct.function, %struct.function* %add.ptr49, i32 0, i32 1, !dbg !6243
  %56 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg50, align 8, !dbg !6243
  %x_exit_block_ptr51 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %56, i32 0, i32 1, !dbg !6243
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr51, align 8, !dbg !6243
  %preds52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 0, !dbg !6243
  %58 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds52, align 8, !dbg !6243
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %58, i32 0, i32 0, !dbg !6243
  br label %cond.end, !dbg !6243

cond.false:                                       ; preds = %while.cond44
  br label %cond.end, !dbg !6243

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6243
  %call53 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6243
  %cmp54 = icmp ult i32 %50, %call53, !dbg !6244
  br i1 %cmp54, label %while.body55, label %while.end74, !dbg !6241

while.body55:                                     ; preds = %cond.end
  %59 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6245
  %add.ptr56 = getelementptr inbounds %struct.function, %struct.function* %59, i64 0, !dbg !6245
  %cfg57 = getelementptr inbounds %struct.function, %struct.function* %add.ptr56, i32 0, i32 1, !dbg !6245
  %60 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg57, align 8, !dbg !6245
  %x_exit_block_ptr58 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %60, i32 0, i32 1, !dbg !6245
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr58, align 8, !dbg !6245
  %preds59 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 0, !dbg !6245
  %62 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds59, align 8, !dbg !6245
  %tobool60 = icmp ne %struct.VEC_edge_gc* %62, null, !dbg !6245
  br i1 %tobool60, label %cond.true61, label %cond.false67, !dbg !6245

cond.true61:                                      ; preds = %while.body55
  %63 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6245
  %add.ptr62 = getelementptr inbounds %struct.function, %struct.function* %63, i64 0, !dbg !6245
  %cfg63 = getelementptr inbounds %struct.function, %struct.function* %add.ptr62, i32 0, i32 1, !dbg !6245
  %64 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg63, align 8, !dbg !6245
  %x_exit_block_ptr64 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %64, i32 0, i32 1, !dbg !6245
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr64, align 8, !dbg !6245
  %preds65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 0, !dbg !6245
  %66 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds65, align 8, !dbg !6245
  %base66 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %66, i32 0, i32 0, !dbg !6245
  br label %cond.end68, !dbg !6245

cond.false67:                                     ; preds = %while.body55
  br label %cond.end68, !dbg !6245

cond.end68:                                       ; preds = %cond.false67, %cond.true61
  %cond69 = phi %struct.VEC_edge_base* [ %base66, %cond.true61 ], [ null, %cond.false67 ], !dbg !6245
  %67 = load i32, i32* %ix, align 4, !dbg !6245
  %call70 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond69, i32 %67), !dbg !6245
  store %struct.edge_def* %call70, %struct.edge_def** %e, align 8, !dbg !6247
  %68 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6248
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 7, !dbg !6250
  %69 = load i32, i32* %flags, align 8, !dbg !6250
  %and = and i32 %69, 2, !dbg !6251
  %tobool71 = icmp ne i32 %and, 0, !dbg !6251
  br i1 %tobool71, label %if.else, label %if.then72, !dbg !6252

if.then72:                                        ; preds = %cond.end68
  %70 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6253
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !6254
  call void @redirect_edge_succ(%struct.edge_def* %70, %struct.basic_block_def* %71), !dbg !6255
  br label %if.end73, !dbg !6255

if.else:                                          ; preds = %cond.end68
  %72 = load i32, i32* %ix, align 4, !dbg !6256
  %inc = add i32 %72, 1, !dbg !6256
  store i32 %inc, i32* %ix, align 4, !dbg !6256
  br label %if.end73

if.end73:                                         ; preds = %if.else, %if.then72
  br label %while.cond44, !dbg !6241, !llvm.loop !6257

while.end74:                                      ; preds = %cond.end
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !6259
  %74 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6260
  %add.ptr75 = getelementptr inbounds %struct.function, %struct.function* %74, i64 0, !dbg !6260
  %cfg76 = getelementptr inbounds %struct.function, %struct.function* %add.ptr75, i32 0, i32 1, !dbg !6260
  %75 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg76, align 8, !dbg !6260
  %x_exit_block_ptr77 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %75, i32 0, i32 1, !dbg !6260
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr77, align 8, !dbg !6260
  %call78 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %73, %struct.basic_block_def* %76, i32 1), !dbg !6261
  store %struct.edge_def* %call78, %struct.edge_def** %e, align 8, !dbg !6262
  %77 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6263
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %77, i32 0, i32 8, !dbg !6264
  store i32 10000, i32* %probability, align 4, !dbg !6265
  %78 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6266
  %add.ptr79 = getelementptr inbounds %struct.function, %struct.function* %78, i64 0, !dbg !6266
  %cfg80 = getelementptr inbounds %struct.function, %struct.function* %add.ptr79, i32 0, i32 1, !dbg !6266
  %79 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg80, align 8, !dbg !6266
  %x_exit_block_ptr81 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %79, i32 0, i32 1, !dbg !6266
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr81, align 8, !dbg !6266
  %count82 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %80, i32 0, i32 8, !dbg !6267
  %81 = load i64, i64* %count82, align 8, !dbg !6267
  %82 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6268
  %count83 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %82, i32 0, i32 9, !dbg !6269
  store i64 %81, i64* %count83, align 8, !dbg !6270
  %83 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6271
  %add.ptr84 = getelementptr inbounds %struct.function, %struct.function* %83, i64 0, !dbg !6271
  %cfg85 = getelementptr inbounds %struct.function, %struct.function* %add.ptr84, i32 0, i32 1, !dbg !6271
  %84 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg85, align 8, !dbg !6271
  %x_exit_block_ptr86 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %84, i32 0, i32 1, !dbg !6271
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr86, align 8, !dbg !6271
  %preds87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 0, !dbg !6271
  %call88 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds87), !dbg !6271
  %86 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6271
  %87 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %86, i32 0, i32 0, !dbg !6271
  %88 = extractvalue { i32, %struct.VEC_edge_gc** } %call88, 0, !dbg !6271
  store i32 %88, i32* %87, align 8, !dbg !6271
  %89 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %86, i32 0, i32 1, !dbg !6271
  %90 = extractvalue { i32, %struct.VEC_edge_gc** } %call88, 1, !dbg !6271
  store %struct.VEC_edge_gc** %90, %struct.VEC_edge_gc*** %89, align 8, !dbg !6271
  %91 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6271
  %92 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6271
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 16, i1 false), !dbg !6271
  br label %for.cond, !dbg !6271

for.cond:                                         ; preds = %for.inc, %while.end74
  %93 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6273
  %94 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %93, i32 0, i32 0, !dbg !6273
  %95 = load i32, i32* %94, align 8, !dbg !6273
  %96 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %93, i32 0, i32 1, !dbg !6273
  %97 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %96, align 8, !dbg !6273
  %call89 = call zeroext i8 @ei_cond(i32 %95, %struct.VEC_edge_gc** %97, %struct.edge_def** %e2), !dbg !6273
  %tobool90 = icmp ne i8 %call89, 0, !dbg !6271
  br i1 %tobool90, label %for.body, label %for.end, !dbg !6271

for.body:                                         ; preds = %for.cond
  %98 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !6275
  %99 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6277
  %cmp91 = icmp ne %struct.edge_def* %98, %99, !dbg !6278
  br i1 %cmp91, label %if.then92, label %if.end102, !dbg !6279

if.then92:                                        ; preds = %for.body
  %100 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !6280
  %count93 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %100, i32 0, i32 9, !dbg !6282
  %101 = load i64, i64* %count93, align 8, !dbg !6282
  %102 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6283
  %count94 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %102, i32 0, i32 9, !dbg !6284
  %103 = load i64, i64* %count94, align 8, !dbg !6285
  %sub = sub nsw i64 %103, %101, !dbg !6285
  store i64 %sub, i64* %count94, align 8, !dbg !6285
  %104 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !6286
  %count95 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %104, i32 0, i32 9, !dbg !6287
  %105 = load i64, i64* %count95, align 8, !dbg !6287
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !6288
  %count96 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %106, i32 0, i32 8, !dbg !6289
  %107 = load i64, i64* %count96, align 8, !dbg !6290
  %sub97 = sub nsw i64 %107, %105, !dbg !6290
  store i64 %sub97, i64* %count96, align 8, !dbg !6290
  %108 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !6291
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %108, i32 0, i32 0, !dbg !6291
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6291
  %frequency98 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %109, i32 0, i32 11, !dbg !6291
  %110 = load i32, i32* %frequency98, align 8, !dbg !6291
  %111 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !6291
  %probability99 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %111, i32 0, i32 8, !dbg !6291
  %112 = load i32, i32* %probability99, align 4, !dbg !6291
  %mul = mul nsw i32 %110, %112, !dbg !6291
  %add = add nsw i32 %mul, 5000, !dbg !6291
  %div = sdiv i32 %add, 10000, !dbg !6291
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !6292
  %frequency100 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %113, i32 0, i32 11, !dbg !6293
  %114 = load i32, i32* %frequency100, align 8, !dbg !6294
  %sub101 = sub nsw i32 %114, %div, !dbg !6294
  store i32 %sub101, i32* %frequency100, align 8, !dbg !6294
  br label %if.end102, !dbg !6295

if.end102:                                        ; preds = %if.then92, %for.body
  br label %for.inc, !dbg !6277

for.inc:                                          ; preds = %if.end102
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6273
  br label %for.cond, !dbg !6273, !llvm.loop !6296

for.end:                                          ; preds = %for.cond
  %115 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6298
  %count103 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %115, i32 0, i32 9, !dbg !6300
  %116 = load i64, i64* %count103, align 8, !dbg !6300
  %cmp104 = icmp slt i64 %116, 0, !dbg !6301
  br i1 %cmp104, label %if.then105, label %if.end107, !dbg !6302

if.then105:                                       ; preds = %for.end
  %117 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6303
  %count106 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %117, i32 0, i32 9, !dbg !6304
  store i64 0, i64* %count106, align 8, !dbg !6305
  br label %if.end107, !dbg !6303

if.end107:                                        ; preds = %if.then105, %for.end
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !6306
  %count108 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %118, i32 0, i32 8, !dbg !6308
  %119 = load i64, i64* %count108, align 8, !dbg !6308
  %cmp109 = icmp slt i64 %119, 0, !dbg !6309
  br i1 %cmp109, label %if.then110, label %if.end112, !dbg !6310

if.then110:                                       ; preds = %if.end107
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !6311
  %count111 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %120, i32 0, i32 8, !dbg !6312
  store i64 0, i64* %count111, align 8, !dbg !6313
  br label %if.end112, !dbg !6311

if.end112:                                        ; preds = %if.then110, %if.end107
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !6314
  %frequency113 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %121, i32 0, i32 11, !dbg !6316
  %122 = load i32, i32* %frequency113, align 8, !dbg !6316
  %cmp114 = icmp slt i32 %122, 0, !dbg !6317
  br i1 %cmp114, label %if.then115, label %if.end117, !dbg !6318

if.then115:                                       ; preds = %if.end112
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !6319
  %frequency116 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %123, i32 0, i32 11, !dbg !6320
  store i32 0, i32* %frequency116, align 8, !dbg !6321
  br label %if.end117, !dbg !6319

if.end117:                                        ; preds = %if.then115, %if.end112
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_block, align 8, !dbg !6322
  call void @update_bb_for_insn(%struct.basic_block_def* %124), !dbg !6323
  br label %return, !dbg !6324

return:                                           ; preds = %if.end117, %if.then9
  ret void, !dbg !6324
}

declare dso_local void @insn_locators_finalize() #2

declare dso_local void @set_eh_throw_stmt_table(%struct.function*, %struct.htab*) #2

declare dso_local void @rebuild_jump_labels(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @get_insns() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_safe_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6325 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6328, metadata !DIExpression()), !dbg !6329
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6330
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6330
  %5 = load i32, i32* %4, align 8, !dbg !6330
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6330
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6330
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6330
  %tobool = icmp ne i8 %call, 0, !dbg !6330
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6331

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6332
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6332
  %10 = load i32, i32* %9, align 8, !dbg !6332
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6332
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6332
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6332
  br label %cond.end, !dbg !6331

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6331

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !6331
  ret %struct.edge_def* %cond, !dbg !6333
}

declare dso_local void @commit_one_edge_insertion(%struct.edge_def*) #2

declare dso_local void @remove_edge(%struct.edge_def*) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_ones(%struct.simple_bitmap_def*) #2

declare dso_local void @find_many_sub_basic_blocks(%struct.simple_bitmap_def*) #2

declare dso_local zeroext i8 @purge_all_dead_edges() #2

declare dso_local void @compact_blocks() #2

; Function Attrs: noinline nounwind uwtable
define internal void @expand_stack_alignment() #0 !dbg !6334 {
entry:
  %drap_rtx = alloca %struct.rtx_def*, align 8
  %preferred_stack_boundary = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %drap_rtx, metadata !6335, metadata !DIExpression()), !dbg !6336
  call void @llvm.dbg.declare(metadata i32* %preferred_stack_boundary, metadata !6337, metadata !DIExpression()), !dbg !6338
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6339
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6339
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !6341
  %bf.load = load i32, i32* %calls_alloca, align 8, !dbg !6341
  %bf.lshr = lshr i32 %bf.load, 19, !dbg !6341
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6341
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !6339
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !6342

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6343
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !6343
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 20, !dbg !6344
  %bf.load2 = load i32, i32* %has_nonlocal_label, align 8, !dbg !6344
  %bf.lshr3 = lshr i32 %bf.load2, 20, !dbg !6344
  %bf.clear4 = and i32 %bf.lshr3, 1, !dbg !6344
  %tobool5 = icmp ne i32 %bf.clear4, 0, !dbg !6343
  br i1 %tobool5, label %if.then, label %lor.lhs.false6, !dbg !6345

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %2 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 31), align 1, !dbg !6346
  %conv = zext i8 %2 to i32, !dbg !6347
  %tobool7 = icmp ne i32 %conv, 0, !dbg !6347
  br i1 %tobool7, label %if.then, label %if.end, !dbg !6348

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  store i8 1, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 45), align 1, !dbg !6349
  br label %if.end, !dbg !6350

if.end:                                           ; preds = %if.then, %lor.lhs.false6
  %3 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 18), align 8, !dbg !6351
  %tobool8 = icmp ne void ()* %3, null, !dbg !6353
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !6354

if.then9:                                         ; preds = %if.end
  %4 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 18), align 8, !dbg !6355
  call void %4(), !dbg !6356
  br label %if.end10, !dbg !6356

if.end10:                                         ; preds = %if.then9, %if.end
  %5 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 24), align 4, !dbg !6357
  %6 = load i32, i32* @ix86_incoming_stack_boundary, align 4, !dbg !6357
  %cmp = icmp ule i32 %5, %6, !dbg !6357
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6357

cond.true:                                        ; preds = %if.end10
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 3665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6357
  br label %cond.end, !dbg !6357

cond.false:                                       ; preds = %if.end10
  br label %cond.end, !dbg !6357

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6357
  %7 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !6358
  %tobool12 = icmp ne i32 %7, 0, !dbg !6358
  br i1 %tobool12, label %land.lhs.true, label %if.else, !dbg !6360

land.lhs.true:                                    ; preds = %cond.end
  %8 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !6361
  %9 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 23), align 8, !dbg !6362
  %cmp13 = icmp ugt i32 %8, %9, !dbg !6363
  br i1 %cmp13, label %if.then15, label %if.else, !dbg !6364

if.then15:                                        ; preds = %land.lhs.true
  %10 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !6365
  store i32 %10, i32* %preferred_stack_boundary, align 4, !dbg !6366
  br label %if.end16, !dbg !6367

if.else:                                          ; preds = %land.lhs.true, %cond.end
  %11 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 23), align 8, !dbg !6368
  store i32 %11, i32* %preferred_stack_boundary, align 4, !dbg !6369
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then15
  %12 = load i32, i32* %preferred_stack_boundary, align 4, !dbg !6370
  %13 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !6372
  %cmp17 = icmp ugt i32 %12, %13, !dbg !6373
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !6374

if.then19:                                        ; preds = %if.end16
  %14 = load i32, i32* %preferred_stack_boundary, align 4, !dbg !6375
  store i32 %14, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !6376
  br label %if.end20, !dbg !6377

if.end20:                                         ; preds = %if.then19, %if.end16
  %15 = load i32, i32* %preferred_stack_boundary, align 4, !dbg !6378
  %16 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 22), align 4, !dbg !6380
  %cmp21 = icmp ugt i32 %15, %16, !dbg !6381
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !6382

if.then23:                                        ; preds = %if.end20
  %17 = load i32, i32* %preferred_stack_boundary, align 4, !dbg !6383
  store i32 %17, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 22), align 4, !dbg !6384
  br label %if.end24, !dbg !6385

if.end24:                                         ; preds = %if.then23, %if.end20
  %18 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 22), align 4, !dbg !6386
  %19 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !6386
  %cmp25 = icmp ule i32 %18, %19, !dbg !6386
  br i1 %cmp25, label %cond.false28, label %cond.true27, !dbg !6386

cond.true27:                                      ; preds = %if.end24
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 3682, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6386
  br label %cond.end29, !dbg !6386

cond.false28:                                     ; preds = %if.end24
  br label %cond.end29, !dbg !6386

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ 0, %cond.true27 ], [ 0, %cond.false28 ], !dbg !6386
  %20 = load i32, i32* @ix86_incoming_stack_boundary, align 4, !dbg !6387
  %21 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !6388
  %cmp31 = icmp ult i32 %20, %21, !dbg !6389
  %conv32 = zext i1 %cmp31 to i32, !dbg !6389
  %conv33 = trunc i32 %conv32 to i8, !dbg !6387
  store i8 %conv33, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 43), align 1, !dbg !6390
  %22 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 43), align 1, !dbg !6391
  store i8 %22, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 44), align 8, !dbg !6392
  store i8 1, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 46), align 2, !dbg !6393
  %23 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 19), align 8, !dbg !6394
  %cmp34 = icmp ne %struct.rtx_def* ()* %23, null, !dbg !6394
  br i1 %cmp34, label %cond.false37, label %cond.true36, !dbg !6394

cond.true36:                                      ; preds = %cond.end29
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 3692, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6394
  br label %cond.end38, !dbg !6394

cond.false37:                                     ; preds = %cond.end29
  br label %cond.end38, !dbg !6394

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi i32 [ 0, %cond.true36 ], [ 0, %cond.false37 ], !dbg !6394
  %24 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 19), align 8, !dbg !6395
  %call = call %struct.rtx_def* %24(), !dbg !6396
  store %struct.rtx_def* %call, %struct.rtx_def** %drap_rtx, align 8, !dbg !6397
  %25 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 43), align 1, !dbg !6398
  %conv40 = zext i8 %25 to i32, !dbg !6398
  %tobool41 = icmp ne i32 %conv40, 0, !dbg !6398
  br i1 %tobool41, label %land.rhs, label %land.end, !dbg !6398

land.rhs:                                         ; preds = %cond.end38
  %26 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 45), align 1, !dbg !6398
  %conv42 = zext i8 %26 to i32, !dbg !6398
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !6398
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end38
  %27 = phi i1 [ false, %cond.end38 ], [ %tobool43, %land.rhs ], !dbg !6399
  %land.ext = zext i1 %27 to i32, !dbg !6398
  %cmp44 = icmp ne i32 %land.ext, 0, !dbg !6398
  %conv45 = zext i1 %cmp44 to i32, !dbg !6398
  %28 = load %struct.rtx_def*, %struct.rtx_def** %drap_rtx, align 8, !dbg !6398
  %cmp46 = icmp ne %struct.rtx_def* %28, null, !dbg !6398
  %conv47 = zext i1 %cmp46 to i32, !dbg !6398
  %cmp48 = icmp eq i32 %conv45, %conv47, !dbg !6398
  br i1 %cmp48, label %cond.false51, label %cond.true50, !dbg !6398

cond.true50:                                      ; preds = %land.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 3696, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6398
  br label %cond.end52, !dbg !6398

cond.false51:                                     ; preds = %land.end
  br label %cond.end52, !dbg !6398

cond.end52:                                       ; preds = %cond.false51, %cond.true50
  %cond53 = phi i32 [ 0, %cond.true50 ], [ 0, %cond.false51 ], !dbg !6398
  %29 = load %struct.rtx_def*, %struct.rtx_def** %drap_rtx, align 8, !dbg !6400
  %cmp54 = icmp ne %struct.rtx_def* null, %29, !dbg !6402
  br i1 %cmp54, label %if.then56, label %if.end57, !dbg !6403

if.then56:                                        ; preds = %cond.end52
  %30 = load %struct.rtx_def*, %struct.rtx_def** %drap_rtx, align 8, !dbg !6404
  store %struct.rtx_def* %30, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !6406
  call void @fixup_tail_calls(), !dbg !6407
  br label %if.end57, !dbg !6408

if.end57:                                         ; preds = %if.then56, %cond.end52
  ret void, !dbg !6409
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local %union.tree_node* @decl_assembler_name(%union.tree_node*) #2

declare dso_local %union.tree_node* @get_containing_scope(%union.tree_node*) #2

declare dso_local zeroext i8 @cgraph_function_possibly_inlined_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_block_levels(%union.tree_node* %block, i32 %level) #0 !dbg !6410 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %level.addr = alloca i32, align 4
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !6413, metadata !DIExpression()), !dbg !6414
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !6415, metadata !DIExpression()), !dbg !6416
  br label %while.cond, !dbg !6417

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !6418
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6417
  br i1 %tobool, label %while.body, label %while.end, !dbg !6417

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %level.addr, align 4, !dbg !6419
  %2 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !6421
  %block1 = bitcast %union.tree_node* %2 to %struct.tree_block*, !dbg !6421
  %block_num = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 1, !dbg !6421
  %bf.load = load i32, i32* %block_num, align 8, !dbg !6422
  %bf.value = and i32 %1, 2147483647, !dbg !6422
  %bf.shl = shl i32 %bf.value, 1, !dbg !6422
  %bf.clear = and i32 %bf.load, 1, !dbg !6422
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !6422
  store i32 %bf.set, i32* %block_num, align 8, !dbg !6422
  %3 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !6423
  %block2 = bitcast %union.tree_node* %3 to %struct.tree_block*, !dbg !6423
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block2, i32 0, i32 5, !dbg !6423
  %4 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !6423
  %5 = load i32, i32* %level.addr, align 4, !dbg !6424
  %add = add nsw i32 %5, 1, !dbg !6425
  call void @set_block_levels(%union.tree_node* %4, i32 %add), !dbg !6426
  %6 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !6427
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !6427
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6427
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6427
  store %union.tree_node* %7, %union.tree_node** %block.addr, align 8, !dbg !6428
  br label %while.cond, !dbg !6417, !llvm.loop !6429

while.end:                                        ; preds = %while.cond
  ret void, !dbg !6431
}

declare dso_local void @default_rtl_profile() #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6432 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6435, metadata !DIExpression()), !dbg !6436
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6437, metadata !DIExpression()), !dbg !6438
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6439, metadata !DIExpression()), !dbg !6440
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6441
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6442
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6443
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6444
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6445
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6446
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6447
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6448
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6449
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6450
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6451
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6452
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6453
  ret void, !dbg !6454
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6455 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6458, metadata !DIExpression()), !dbg !6459
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6460
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6460
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !6461
  %conv = zext i1 %cmp to i32, !dbg !6461
  %conv1 = trunc i32 %conv to i8, !dbg !6462
  ret i8 %conv1, !dbg !6463
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6464 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6467, metadata !DIExpression()), !dbg !6468
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6469
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6469
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !6470
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6470
  ret %union.gimple_statement_d* %1, !dbg !6471
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !6472 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6473, metadata !DIExpression()), !dbg !6474
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6475
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6476
  %cmp = icmp eq i32 %call, 2, !dbg !6477
  %conv = zext i1 %cmp to i32, !dbg !6477
  %conv1 = trunc i32 %conv to i8, !dbg !6476
  ret i8 %conv1, !dbg !6478
}

declare dso_local %union.tree_node* @walk_gimple_op(%union.gimple_statement_d*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @discover_nonconstant_array_refs_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !6479 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !6482, metadata !DIExpression()), !dbg !6483
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !6484, metadata !DIExpression()), !dbg !6485
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6486, metadata !DIExpression()), !dbg !6487
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6488, metadata !DIExpression()), !dbg !6489
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !6490
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6491
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !6489
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6492
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6492
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6492
  %bf.load = load i64, i64* %3, align 8, !dbg !6492
  %bf.clear = and i64 %bf.load, 65535, !dbg !6492
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6492
  %idxprom = sext i32 %bf.cast to i64, !dbg !6492
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6492
  %4 = load i32, i32* %arrayidx, align 4, !dbg !6492
  %cmp = icmp eq i32 %4, 2, !dbg !6492
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6492

lor.lhs.false:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6492
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6492
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6492
  %bf.load2 = load i64, i64* %6, align 8, !dbg !6492
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6492
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6492
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !6492
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !6492
  %7 = load i32, i32* %arrayidx6, align 4, !dbg !6492
  %cmp7 = icmp eq i32 %7, 3, !dbg !6492
  br i1 %cmp7, label %if.then, label %if.else, !dbg !6494

if.then:                                          ; preds = %lor.lhs.false, %entry
  %8 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6495
  store i32 0, i32* %8, align 4, !dbg !6496
  br label %if.end145, !dbg !6497

if.else:                                          ; preds = %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6498
  %base8 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !6498
  %10 = bitcast %struct.tree_base* %base8 to i64*, !dbg !6498
  %bf.load9 = load i64, i64* %10, align 8, !dbg !6498
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !6498
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !6498
  %cmp12 = icmp eq i32 %bf.cast11, 45, !dbg !6500
  br i1 %cmp12, label %if.then19, label %lor.lhs.false13, !dbg !6501

lor.lhs.false13:                                  ; preds = %if.else
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6502
  %base14 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !6502
  %12 = bitcast %struct.tree_base* %base14 to i64*, !dbg !6502
  %bf.load15 = load i64, i64* %12, align 8, !dbg !6502
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !6502
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !6502
  %cmp18 = icmp eq i32 %bf.cast17, 46, !dbg !6503
  br i1 %cmp18, label %if.then19, label %if.end144, !dbg !6504

if.then19:                                        ; preds = %lor.lhs.false13, %if.else
  br label %while.cond, !dbg !6505

while.cond:                                       ; preds = %while.body, %if.then19
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6507
  %base20 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6507
  %14 = bitcast %struct.tree_base* %base20 to i64*, !dbg !6507
  %bf.load21 = load i64, i64* %14, align 8, !dbg !6507
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !6507
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !6507
  %cmp24 = icmp eq i32 %bf.cast23, 45, !dbg !6508
  br i1 %cmp24, label %land.lhs.true, label %lor.lhs.false25, !dbg !6509

lor.lhs.false25:                                  ; preds = %while.cond
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6510
  %base26 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !6510
  %16 = bitcast %struct.tree_base* %base26 to i64*, !dbg !6510
  %bf.load27 = load i64, i64* %16, align 8, !dbg !6510
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !6510
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !6510
  %cmp30 = icmp eq i32 %bf.cast29, 46, !dbg !6511
  br i1 %cmp30, label %land.lhs.true, label %lor.lhs.false44, !dbg !6512

land.lhs.true:                                    ; preds = %lor.lhs.false25, %while.cond
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6513
  %exp = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !6513
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6513
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !6513
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8, !dbg !6513
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %18), !dbg !6514
  %conv = zext i8 %call to i32, !dbg !6514
  %tobool = icmp ne i32 %conv, 0, !dbg !6514
  br i1 %tobool, label %land.lhs.true32, label %lor.lhs.false44, !dbg !6515

land.lhs.true32:                                  ; preds = %land.lhs.true
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6516
  %exp33 = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !6516
  %operands34 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp33, i32 0, i32 3, !dbg !6516
  %arrayidx35 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands34, i64 0, i64 2, !dbg !6516
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx35, align 8, !dbg !6516
  %tobool36 = icmp ne %union.tree_node* %20, null, !dbg !6516
  br i1 %tobool36, label %lor.lhs.false37, label %lor.end104, !dbg !6517

lor.lhs.false37:                                  ; preds = %land.lhs.true32
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6518
  %exp38 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !6518
  %operands39 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp38, i32 0, i32 3, !dbg !6518
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands39, i64 0, i64 2, !dbg !6518
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx40, align 8, !dbg !6518
  %call41 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %22), !dbg !6519
  %conv42 = zext i8 %call41 to i32, !dbg !6519
  %tobool43 = icmp ne i32 %conv42, 0, !dbg !6519
  br i1 %tobool43, label %lor.end104, label %lor.lhs.false44, !dbg !6520

lor.lhs.false44:                                  ; preds = %lor.lhs.false37, %land.lhs.true, %lor.lhs.false25
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6521
  %base45 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !6521
  %24 = bitcast %struct.tree_base* %base45 to i64*, !dbg !6521
  %bf.load46 = load i64, i64* %24, align 8, !dbg !6521
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !6521
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !6521
  %cmp49 = icmp eq i32 %bf.cast48, 41, !dbg !6522
  br i1 %cmp49, label %land.lhs.true51, label %lor.lhs.false63, !dbg !6523

land.lhs.true51:                                  ; preds = %lor.lhs.false44
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6524
  %exp52 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !6524
  %operands53 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp52, i32 0, i32 3, !dbg !6524
  %arrayidx54 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands53, i64 0, i64 2, !dbg !6524
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx54, align 8, !dbg !6524
  %tobool55 = icmp ne %union.tree_node* %26, null, !dbg !6524
  br i1 %tobool55, label %lor.lhs.false56, label %lor.end104, !dbg !6525

lor.lhs.false56:                                  ; preds = %land.lhs.true51
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6526
  %exp57 = bitcast %union.tree_node* %27 to %struct.tree_exp*, !dbg !6526
  %operands58 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp57, i32 0, i32 3, !dbg !6526
  %arrayidx59 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands58, i64 0, i64 2, !dbg !6526
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 8, !dbg !6526
  %call60 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %28), !dbg !6527
  %conv61 = zext i8 %call60 to i32, !dbg !6527
  %tobool62 = icmp ne i32 %conv61, 0, !dbg !6527
  br i1 %tobool62, label %lor.end104, label %lor.lhs.false63, !dbg !6528

lor.lhs.false63:                                  ; preds = %lor.lhs.false56, %lor.lhs.false44
  %29 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6529
  %base64 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !6529
  %30 = bitcast %struct.tree_base* %base64 to i64*, !dbg !6529
  %bf.load65 = load i64, i64* %30, align 8, !dbg !6529
  %bf.clear66 = and i64 %bf.load65, 65535, !dbg !6529
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !6529
  %cmp68 = icmp eq i32 %bf.cast67, 42, !dbg !6530
  br i1 %cmp68, label %lor.end104, label %lor.lhs.false70, !dbg !6531

lor.lhs.false70:                                  ; preds = %lor.lhs.false63
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6532
  %base71 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !6532
  %32 = bitcast %struct.tree_base* %base71 to i64*, !dbg !6532
  %bf.load72 = load i64, i64* %32, align 8, !dbg !6532
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !6532
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !6532
  %cmp75 = icmp eq i32 %bf.cast74, 43, !dbg !6533
  br i1 %cmp75, label %lor.end104, label %lor.lhs.false77, !dbg !6534

lor.lhs.false77:                                  ; preds = %lor.lhs.false70
  %33 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6535
  %base78 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !6535
  %34 = bitcast %struct.tree_base* %base78 to i64*, !dbg !6535
  %bf.load79 = load i64, i64* %34, align 8, !dbg !6535
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !6535
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !6535
  %cmp82 = icmp eq i32 %bf.cast81, 44, !dbg !6536
  br i1 %cmp82, label %lor.end104, label %lor.lhs.false84, !dbg !6537

lor.lhs.false84:                                  ; preds = %lor.lhs.false77
  %35 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6538
  %base85 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !6538
  %36 = bitcast %struct.tree_base* %base85 to i64*, !dbg !6538
  %bf.load86 = load i64, i64* %36, align 8, !dbg !6538
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !6538
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !6538
  %cmp89 = icmp eq i32 %bf.cast88, 118, !dbg !6539
  br i1 %cmp89, label %lor.end104, label %lor.rhs, !dbg !6540

lor.rhs:                                          ; preds = %lor.lhs.false84
  %37 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6541
  %base91 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !6541
  %38 = bitcast %struct.tree_base* %base91 to i64*, !dbg !6541
  %bf.load92 = load i64, i64* %38, align 8, !dbg !6541
  %bf.clear93 = and i64 %bf.load92, 65535, !dbg !6541
  %bf.cast94 = trunc i64 %bf.clear93 to i32, !dbg !6541
  %cmp95 = icmp eq i32 %bf.cast94, 116, !dbg !6541
  br i1 %cmp95, label %lor.end, label %lor.rhs97, !dbg !6541

lor.rhs97:                                        ; preds = %lor.rhs
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6541
  %base98 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !6541
  %40 = bitcast %struct.tree_base* %base98 to i64*, !dbg !6541
  %bf.load99 = load i64, i64* %40, align 8, !dbg !6541
  %bf.clear100 = and i64 %bf.load99, 65535, !dbg !6541
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !6541
  %cmp102 = icmp eq i32 %bf.cast101, 113, !dbg !6541
  br label %lor.end, !dbg !6541

lor.end:                                          ; preds = %lor.rhs97, %lor.rhs
  %41 = phi i1 [ true, %lor.rhs ], [ %cmp102, %lor.rhs97 ]
  br label %lor.end104, !dbg !6540

lor.end104:                                       ; preds = %lor.end, %lor.lhs.false84, %lor.lhs.false77, %lor.lhs.false70, %lor.lhs.false63, %lor.lhs.false56, %land.lhs.true51, %lor.lhs.false37, %land.lhs.true32
  %42 = phi i1 [ true, %lor.lhs.false84 ], [ true, %lor.lhs.false77 ], [ true, %lor.lhs.false70 ], [ true, %lor.lhs.false63 ], [ true, %lor.lhs.false56 ], [ true, %land.lhs.true51 ], [ true, %lor.lhs.false37 ], [ true, %land.lhs.true32 ], [ %41, %lor.end ]
  br i1 %42, label %while.body, label %while.end, !dbg !6505

while.body:                                       ; preds = %lor.end104
  %43 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6542
  %exp105 = bitcast %union.tree_node* %43 to %struct.tree_exp*, !dbg !6542
  %operands106 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp105, i32 0, i32 3, !dbg !6542
  %arrayidx107 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands106, i64 0, i64 0, !dbg !6542
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx107, align 8, !dbg !6542
  store %union.tree_node* %44, %union.tree_node** %t, align 8, !dbg !6543
  br label %while.cond, !dbg !6505, !llvm.loop !6544

while.end:                                        ; preds = %lor.end104
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6545
  %base108 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !6545
  %46 = bitcast %struct.tree_base* %base108 to i64*, !dbg !6545
  %bf.load109 = load i64, i64* %46, align 8, !dbg !6545
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !6545
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !6545
  %cmp112 = icmp eq i32 %bf.cast111, 45, !dbg !6547
  br i1 %cmp112, label %if.then121, label %lor.lhs.false114, !dbg !6548

lor.lhs.false114:                                 ; preds = %while.end
  %47 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6549
  %base115 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !6549
  %48 = bitcast %struct.tree_base* %base115 to i64*, !dbg !6549
  %bf.load116 = load i64, i64* %48, align 8, !dbg !6549
  %bf.clear117 = and i64 %bf.load116, 65535, !dbg !6549
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !6549
  %cmp119 = icmp eq i32 %bf.cast118, 46, !dbg !6550
  br i1 %cmp119, label %if.then121, label %if.end143, !dbg !6551

if.then121:                                       ; preds = %lor.lhs.false114, %while.end
  %49 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6552
  %call122 = call %union.tree_node* @get_base_address(%union.tree_node* %49), !dbg !6554
  store %union.tree_node* %call122, %union.tree_node** %t, align 8, !dbg !6555
  %50 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6556
  %tobool123 = icmp ne %union.tree_node* %50, null, !dbg !6556
  br i1 %tobool123, label %land.lhs.true124, label %if.end, !dbg !6558

land.lhs.true124:                                 ; preds = %if.then121
  %51 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6559
  %base125 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !6559
  %52 = bitcast %struct.tree_base* %base125 to i64*, !dbg !6559
  %bf.load126 = load i64, i64* %52, align 8, !dbg !6559
  %bf.clear127 = and i64 %bf.load126, 65535, !dbg !6559
  %bf.cast128 = trunc i64 %bf.clear127 to i32, !dbg !6559
  %idxprom129 = sext i32 %bf.cast128 to i64, !dbg !6559
  %arrayidx130 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom129, !dbg !6559
  %53 = load i32, i32* %arrayidx130, align 4, !dbg !6559
  %cmp131 = icmp eq i32 %53, 3, !dbg !6559
  br i1 %cmp131, label %land.lhs.true133, label %if.end, !dbg !6560

land.lhs.true133:                                 ; preds = %land.lhs.true124
  %54 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6561
  %decl_common = bitcast %union.tree_node* %54 to %struct.tree_decl_common*, !dbg !6561
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6561
  %55 = bitcast i40* %mode to i64*, !dbg !6561
  %bf.load134 = load i64, i64* %55, align 8, !dbg !6561
  %bf.clear135 = and i64 %bf.load134, 255, !dbg !6561
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !6561
  %cmp137 = icmp ne i32 %bf.cast136, 1, !dbg !6562
  br i1 %cmp137, label %if.then139, label %if.end, !dbg !6563

if.then139:                                       ; preds = %land.lhs.true133
  %56 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6564
  %base140 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !6564
  %57 = bitcast %struct.tree_base* %base140 to i64*, !dbg !6564
  %bf.load141 = load i64, i64* %57, align 8, !dbg !6565
  %bf.clear142 = and i64 %bf.load141, -262145, !dbg !6565
  %bf.set = or i64 %bf.clear142, 262144, !dbg !6565
  store i64 %bf.set, i64* %57, align 8, !dbg !6565
  br label %if.end, !dbg !6564

if.end:                                           ; preds = %if.then139, %land.lhs.true133, %land.lhs.true124, %if.then121
  br label %if.end143, !dbg !6566

if.end143:                                        ; preds = %if.end, %lor.lhs.false114
  %58 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !6567
  store i32 0, i32* %58, align 4, !dbg !6568
  br label %if.end144, !dbg !6569

if.end144:                                        ; preds = %if.end143, %lor.lhs.false13
  br label %if.end145

if.end145:                                        ; preds = %if.end144, %if.then
  ret %union.tree_node* null, !dbg !6570
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !6571 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6575, metadata !DIExpression()), !dbg !6576
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6577
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6578
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6578
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !6579
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !6579
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6580
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6581
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6582
  ret void, !dbg !6583
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6584 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6590, metadata !DIExpression()), !dbg !6591
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6592
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6593
  %1 = load i32, i32* %flags, align 8, !dbg !6593
  %and = and i32 %1, 512, !dbg !6594
  %tobool = icmp ne i32 %and, 0, !dbg !6594
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !6595

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6596
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6597
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6598
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6598
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6596
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6599

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6600
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6601
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6602
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6602
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !6603
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6603
  br label %cond.end, !dbg !6599

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6599

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !6599
  ret %struct.gimple_seq_d* %cond, !dbg !6604
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !6605 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6611, metadata !DIExpression()), !dbg !6612
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6613
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6613
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6613

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6614
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !6615
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6615
  br label %cond.end, !dbg !6613

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6613

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6613
  ret %struct.gimple_seq_node_d* %cond, !dbg !6616
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @ggc_free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @expand_used_vars_for_block(%union.tree_node* %block, i8 zeroext %toplevel) #0 !dbg !6617 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %toplevel.addr = alloca i8, align 1
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %old_sv_num = alloca i64, align 8
  %this_sv_num = alloca i64, align 8
  %new_sv_num = alloca i64, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !6620, metadata !DIExpression()), !dbg !6621
  store i8 %toplevel, i8* %toplevel.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %toplevel.addr, metadata !6622, metadata !DIExpression()), !dbg !6623
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6624, metadata !DIExpression()), !dbg !6625
  call void @llvm.dbg.declare(metadata i64* %j, metadata !6626, metadata !DIExpression()), !dbg !6627
  call void @llvm.dbg.declare(metadata i64* %old_sv_num, metadata !6628, metadata !DIExpression()), !dbg !6629
  call void @llvm.dbg.declare(metadata i64* %this_sv_num, metadata !6630, metadata !DIExpression()), !dbg !6631
  call void @llvm.dbg.declare(metadata i64* %new_sv_num, metadata !6632, metadata !DIExpression()), !dbg !6633
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6634, metadata !DIExpression()), !dbg !6635
  %0 = load i8, i8* %toplevel.addr, align 1, !dbg !6636
  %conv = zext i8 %0 to i32, !dbg !6636
  %tobool = icmp ne i32 %conv, 0, !dbg !6636
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6636

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !6636

cond.false:                                       ; preds = %entry
  %1 = load i64, i64* @stack_vars_num, align 8, !dbg !6637
  br label %cond.end, !dbg !6636

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %1, %cond.false ], !dbg !6636
  store i64 %cond, i64* %old_sv_num, align 8, !dbg !6638
  %2 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !6639
  %block1 = bitcast %union.tree_node* %2 to %struct.tree_block*, !dbg !6639
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 3, !dbg !6639
  %3 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !6639
  store %union.tree_node* %3, %union.tree_node** %t, align 8, !dbg !6641
  br label %for.cond, !dbg !6642

for.cond:                                         ; preds = %for.inc, %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6643
  %tobool2 = icmp ne %union.tree_node* %4, null, !dbg !6645
  br i1 %tobool2, label %for.body, label %for.end, !dbg !6645

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6646
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6646
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !6646
  %bf.load = load i64, i64* %6, align 8, !dbg !6646
  %bf.lshr = lshr i64 %bf.load, 24, !dbg !6646
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6646
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6646
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !6646
  br i1 %tobool3, label %if.then, label %if.end, !dbg !6648

if.then:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6649
  %8 = load i8, i8* %toplevel.addr, align 1, !dbg !6650
  %call = call i64 @expand_one_var(%union.tree_node* %7, i8 zeroext %8, i8 zeroext 1), !dbg !6651
  br label %if.end, !dbg !6651

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6646

for.inc:                                          ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6652
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !6652
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6652
  %10 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6652
  store %union.tree_node* %10, %union.tree_node** %t, align 8, !dbg !6653
  br label %for.cond, !dbg !6654, !llvm.loop !6655

for.end:                                          ; preds = %for.cond
  %11 = load i64, i64* @stack_vars_num, align 8, !dbg !6657
  store i64 %11, i64* %this_sv_num, align 8, !dbg !6658
  %12 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !6659
  %block4 = bitcast %union.tree_node* %12 to %struct.tree_block*, !dbg !6659
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block4, i32 0, i32 5, !dbg !6659
  %13 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !6659
  store %union.tree_node* %13, %union.tree_node** %t, align 8, !dbg !6661
  br label %for.cond5, !dbg !6662

for.cond5:                                        ; preds = %for.inc8, %for.end
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6663
  %tobool6 = icmp ne %union.tree_node* %14, null, !dbg !6665
  br i1 %tobool6, label %for.body7, label %for.end11, !dbg !6665

for.body7:                                        ; preds = %for.cond5
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6666
  call void @expand_used_vars_for_block(%union.tree_node* %15, i8 zeroext 0), !dbg !6667
  br label %for.inc8, !dbg !6667

for.inc8:                                         ; preds = %for.body7
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6668
  %common9 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !6668
  %chain10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 1, !dbg !6668
  %17 = load %union.tree_node*, %union.tree_node** %chain10, align 8, !dbg !6668
  store %union.tree_node* %17, %union.tree_node** %t, align 8, !dbg !6669
  br label %for.cond5, !dbg !6670, !llvm.loop !6671

for.end11:                                        ; preds = %for.cond5
  %18 = load i64, i64* %old_sv_num, align 8, !dbg !6673
  %19 = load i64, i64* %this_sv_num, align 8, !dbg !6675
  %cmp = icmp ult i64 %18, %19, !dbg !6676
  br i1 %cmp, label %if.then13, label %if.end31, !dbg !6677

if.then13:                                        ; preds = %for.end11
  %20 = load i64, i64* @stack_vars_num, align 8, !dbg !6678
  store i64 %20, i64* %new_sv_num, align 8, !dbg !6680
  %21 = load i64, i64* %old_sv_num, align 8, !dbg !6681
  store i64 %21, i64* %i, align 8, !dbg !6683
  br label %for.cond14, !dbg !6684

for.cond14:                                       ; preds = %for.inc29, %if.then13
  %22 = load i64, i64* %i, align 8, !dbg !6685
  %23 = load i64, i64* %new_sv_num, align 8, !dbg !6687
  %cmp15 = icmp ult i64 %22, %23, !dbg !6688
  br i1 %cmp15, label %for.body17, label %for.end30, !dbg !6689

for.body17:                                       ; preds = %for.cond14
  %24 = load i64, i64* %i, align 8, !dbg !6690
  %25 = load i64, i64* %this_sv_num, align 8, !dbg !6692
  %cmp18 = icmp ult i64 %24, %25, !dbg !6693
  br i1 %cmp18, label %cond.true20, label %cond.false21, !dbg !6690

cond.true20:                                      ; preds = %for.body17
  %26 = load i64, i64* %i, align 8, !dbg !6694
  br label %cond.end22, !dbg !6690

cond.false21:                                     ; preds = %for.body17
  %27 = load i64, i64* %this_sv_num, align 8, !dbg !6695
  br label %cond.end22, !dbg !6690

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i64 [ %26, %cond.true20 ], [ %27, %cond.false21 ], !dbg !6690
  store i64 %cond23, i64* %j, align 8, !dbg !6696
  br label %for.cond24, !dbg !6697

for.cond24:                                       ; preds = %for.body27, %cond.end22
  %28 = load i64, i64* %j, align 8, !dbg !6698
  %dec = add i64 %28, -1, !dbg !6698
  store i64 %dec, i64* %j, align 8, !dbg !6698
  %29 = load i64, i64* %old_sv_num, align 8, !dbg !6700
  %cmp25 = icmp ugt i64 %28, %29, !dbg !6701
  br i1 %cmp25, label %for.body27, label %for.end28, !dbg !6702

for.body27:                                       ; preds = %for.cond24
  %30 = load i64, i64* %i, align 8, !dbg !6703
  %31 = load i64, i64* %j, align 8, !dbg !6704
  call void @add_stack_var_conflict(i64 %30, i64 %31), !dbg !6705
  br label %for.cond24, !dbg !6706, !llvm.loop !6707

for.end28:                                        ; preds = %for.cond24
  br label %for.inc29, !dbg !6708

for.inc29:                                        ; preds = %for.end28
  %32 = load i64, i64* %i, align 8, !dbg !6709
  %inc = add i64 %32, 1, !dbg !6709
  store i64 %inc, i64* %i, align 8, !dbg !6709
  br label %for.cond14, !dbg !6710, !llvm.loop !6711

for.end30:                                        ; preds = %for.cond14
  br label %if.end31, !dbg !6713

if.end31:                                         ; preds = %for.end30, %for.end11
  ret void, !dbg !6714
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_alias_set_conflicts() #0 !dbg !6715 {
entry:
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %n = alloca i64, align 8
  %type_i = alloca %union.tree_node*, align 8
  %aggr_i = alloca i8, align 1
  %contains_union = alloca i8, align 1
  %type_j = alloca %union.tree_node*, align 8
  %aggr_j = alloca i8, align 1
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6716, metadata !DIExpression()), !dbg !6717
  call void @llvm.dbg.declare(metadata i64* %j, metadata !6718, metadata !DIExpression()), !dbg !6719
  call void @llvm.dbg.declare(metadata i64* %n, metadata !6720, metadata !DIExpression()), !dbg !6721
  %0 = load i64, i64* @stack_vars_num, align 8, !dbg !6722
  store i64 %0, i64* %n, align 8, !dbg !6721
  store i64 0, i64* %i, align 8, !dbg !6723
  br label %for.cond, !dbg !6725

for.cond:                                         ; preds = %for.inc68, %entry
  %1 = load i64, i64* %i, align 8, !dbg !6726
  %2 = load i64, i64* %n, align 8, !dbg !6728
  %cmp = icmp ult i64 %1, %2, !dbg !6729
  br i1 %cmp, label %for.body, label %for.end70, !dbg !6730

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_i, metadata !6731, metadata !DIExpression()), !dbg !6733
  %3 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !6734
  %4 = load i64, i64* %i, align 8, !dbg !6734
  %arrayidx = getelementptr inbounds %struct.stack_var, %struct.stack_var* %3, i64 %4, !dbg !6734
  %decl = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx, i32 0, i32 0, !dbg !6734
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6734
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !6734
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6734
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6734
  store %union.tree_node* %6, %union.tree_node** %type_i, align 8, !dbg !6733
  call void @llvm.dbg.declare(metadata i8* %aggr_i, metadata !6735, metadata !DIExpression()), !dbg !6736
  %7 = load %union.tree_node*, %union.tree_node** %type_i, align 8, !dbg !6737
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6737
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !6737
  %bf.load = load i64, i64* %8, align 8, !dbg !6737
  %bf.clear = and i64 %bf.load, 65535, !dbg !6737
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6737
  %cmp1 = icmp eq i32 %bf.cast, 15, !dbg !6737
  br i1 %cmp1, label %lor.end18, label %lor.rhs, !dbg !6737

lor.rhs:                                          ; preds = %for.body
  %9 = load %union.tree_node*, %union.tree_node** %type_i, align 8, !dbg !6737
  %base2 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !6737
  %10 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6737
  %bf.load3 = load i64, i64* %10, align 8, !dbg !6737
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !6737
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !6737
  %cmp6 = icmp eq i32 %bf.cast5, 16, !dbg !6737
  br i1 %cmp6, label %lor.end, label %lor.lhs.false, !dbg !6737

lor.lhs.false:                                    ; preds = %lor.rhs
  %11 = load %union.tree_node*, %union.tree_node** %type_i, align 8, !dbg !6737
  %base7 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !6737
  %12 = bitcast %struct.tree_base* %base7 to i64*, !dbg !6737
  %bf.load8 = load i64, i64* %12, align 8, !dbg !6737
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !6737
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !6737
  %cmp11 = icmp eq i32 %bf.cast10, 17, !dbg !6737
  br i1 %cmp11, label %lor.end, label %lor.rhs12, !dbg !6737

lor.rhs12:                                        ; preds = %lor.lhs.false
  %13 = load %union.tree_node*, %union.tree_node** %type_i, align 8, !dbg !6737
  %base13 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6737
  %14 = bitcast %struct.tree_base* %base13 to i64*, !dbg !6737
  %bf.load14 = load i64, i64* %14, align 8, !dbg !6737
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !6737
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !6737
  %cmp17 = icmp eq i32 %bf.cast16, 18, !dbg !6737
  br label %lor.end, !dbg !6737

lor.end:                                          ; preds = %lor.rhs12, %lor.lhs.false, %lor.rhs
  %15 = phi i1 [ true, %lor.lhs.false ], [ true, %lor.rhs ], [ %cmp17, %lor.rhs12 ]
  br label %lor.end18, !dbg !6737

lor.end18:                                        ; preds = %lor.end, %for.body
  %16 = phi i1 [ true, %for.body ], [ %15, %lor.end ]
  %lor.ext = zext i1 %16 to i32, !dbg !6737
  %conv = trunc i32 %lor.ext to i8, !dbg !6737
  store i8 %conv, i8* %aggr_i, align 1, !dbg !6736
  call void @llvm.dbg.declare(metadata i8* %contains_union, metadata !6738, metadata !DIExpression()), !dbg !6739
  %17 = load %union.tree_node*, %union.tree_node** %type_i, align 8, !dbg !6740
  %call = call zeroext i8 @aggregate_contains_union_type(%union.tree_node* %17), !dbg !6741
  store i8 %call, i8* %contains_union, align 1, !dbg !6742
  store i64 0, i64* %j, align 8, !dbg !6743
  br label %for.cond19, !dbg !6745

for.cond19:                                       ; preds = %for.inc, %lor.end18
  %18 = load i64, i64* %j, align 8, !dbg !6746
  %19 = load i64, i64* %i, align 8, !dbg !6748
  %cmp20 = icmp ult i64 %18, %19, !dbg !6749
  br i1 %cmp20, label %for.body22, label %for.end, !dbg !6750

for.body22:                                       ; preds = %for.cond19
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_j, metadata !6751, metadata !DIExpression()), !dbg !6753
  %20 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !6754
  %21 = load i64, i64* %j, align 8, !dbg !6754
  %arrayidx23 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %20, i64 %21, !dbg !6754
  %decl24 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx23, i32 0, i32 0, !dbg !6754
  %22 = load %union.tree_node*, %union.tree_node** %decl24, align 8, !dbg !6754
  %common25 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !6754
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !6754
  %23 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !6754
  store %union.tree_node* %23, %union.tree_node** %type_j, align 8, !dbg !6753
  call void @llvm.dbg.declare(metadata i8* %aggr_j, metadata !6755, metadata !DIExpression()), !dbg !6756
  %24 = load %union.tree_node*, %union.tree_node** %type_j, align 8, !dbg !6757
  %base27 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !6757
  %25 = bitcast %struct.tree_base* %base27 to i64*, !dbg !6757
  %bf.load28 = load i64, i64* %25, align 8, !dbg !6757
  %bf.clear29 = and i64 %bf.load28, 65535, !dbg !6757
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !6757
  %cmp31 = icmp eq i32 %bf.cast30, 15, !dbg !6757
  br i1 %cmp31, label %lor.end56, label %lor.rhs33, !dbg !6757

lor.rhs33:                                        ; preds = %for.body22
  %26 = load %union.tree_node*, %union.tree_node** %type_j, align 8, !dbg !6757
  %base34 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !6757
  %27 = bitcast %struct.tree_base* %base34 to i64*, !dbg !6757
  %bf.load35 = load i64, i64* %27, align 8, !dbg !6757
  %bf.clear36 = and i64 %bf.load35, 65535, !dbg !6757
  %bf.cast37 = trunc i64 %bf.clear36 to i32, !dbg !6757
  %cmp38 = icmp eq i32 %bf.cast37, 16, !dbg !6757
  br i1 %cmp38, label %lor.end54, label %lor.lhs.false40, !dbg !6757

lor.lhs.false40:                                  ; preds = %lor.rhs33
  %28 = load %union.tree_node*, %union.tree_node** %type_j, align 8, !dbg !6757
  %base41 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !6757
  %29 = bitcast %struct.tree_base* %base41 to i64*, !dbg !6757
  %bf.load42 = load i64, i64* %29, align 8, !dbg !6757
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !6757
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !6757
  %cmp45 = icmp eq i32 %bf.cast44, 17, !dbg !6757
  br i1 %cmp45, label %lor.end54, label %lor.rhs47, !dbg !6757

lor.rhs47:                                        ; preds = %lor.lhs.false40
  %30 = load %union.tree_node*, %union.tree_node** %type_j, align 8, !dbg !6757
  %base48 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !6757
  %31 = bitcast %struct.tree_base* %base48 to i64*, !dbg !6757
  %bf.load49 = load i64, i64* %31, align 8, !dbg !6757
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !6757
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !6757
  %cmp52 = icmp eq i32 %bf.cast51, 18, !dbg !6757
  br label %lor.end54, !dbg !6757

lor.end54:                                        ; preds = %lor.rhs47, %lor.lhs.false40, %lor.rhs33
  %32 = phi i1 [ true, %lor.lhs.false40 ], [ true, %lor.rhs33 ], [ %cmp52, %lor.rhs47 ]
  br label %lor.end56, !dbg !6757

lor.end56:                                        ; preds = %lor.end54, %for.body22
  %33 = phi i1 [ true, %for.body22 ], [ %32, %lor.end54 ]
  %lor.ext57 = zext i1 %33 to i32, !dbg !6757
  %conv58 = trunc i32 %lor.ext57 to i8, !dbg !6757
  store i8 %conv58, i8* %aggr_j, align 1, !dbg !6756
  %34 = load i8, i8* %aggr_i, align 1, !dbg !6758
  %conv59 = zext i8 %34 to i32, !dbg !6758
  %35 = load i8, i8* %aggr_j, align 1, !dbg !6760
  %conv60 = zext i8 %35 to i32, !dbg !6760
  %cmp61 = icmp ne i32 %conv59, %conv60, !dbg !6761
  br i1 %cmp61, label %if.then, label %lor.lhs.false63, !dbg !6762

lor.lhs.false63:                                  ; preds = %lor.end56
  %36 = load %union.tree_node*, %union.tree_node** %type_i, align 8, !dbg !6763
  %37 = load %union.tree_node*, %union.tree_node** %type_j, align 8, !dbg !6764
  %call64 = call i32 @objects_must_conflict_p(%union.tree_node* %36, %union.tree_node* %37), !dbg !6765
  %tobool = icmp ne i32 %call64, 0, !dbg !6765
  br i1 %tobool, label %lor.lhs.false65, label %if.then, !dbg !6766

lor.lhs.false65:                                  ; preds = %lor.lhs.false63
  %38 = load i8, i8* %contains_union, align 1, !dbg !6767
  %conv66 = zext i8 %38 to i32, !dbg !6767
  %tobool67 = icmp ne i32 %conv66, 0, !dbg !6767
  br i1 %tobool67, label %if.then, label %if.end, !dbg !6768

if.then:                                          ; preds = %lor.lhs.false65, %lor.lhs.false63, %lor.end56
  %39 = load i64, i64* %i, align 8, !dbg !6769
  %40 = load i64, i64* %j, align 8, !dbg !6770
  call void @add_stack_var_conflict(i64 %39, i64 %40), !dbg !6771
  br label %if.end, !dbg !6771

if.end:                                           ; preds = %if.then, %lor.lhs.false65
  br label %for.inc, !dbg !6772

for.inc:                                          ; preds = %if.end
  %41 = load i64, i64* %j, align 8, !dbg !6773
  %inc = add i64 %41, 1, !dbg !6773
  store i64 %inc, i64* %j, align 8, !dbg !6773
  br label %for.cond19, !dbg !6774, !llvm.loop !6775

for.end:                                          ; preds = %for.cond19
  br label %for.inc68, !dbg !6777

for.inc68:                                        ; preds = %for.end
  %42 = load i64, i64* %i, align 8, !dbg !6778
  %inc69 = add i64 %42, 1, !dbg !6778
  store i64 %inc69, i64* %i, align 8, !dbg !6778
  br label %for.cond, !dbg !6779, !llvm.loop !6780

for.end70:                                        ; preds = %for.cond
  ret void, !dbg !6782
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_stack_protection_conflicts() #0 !dbg !6783 {
entry:
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %n = alloca i64, align 8
  %phase = alloca i8*, align 8
  %ph_i = alloca i8, align 1
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6784, metadata !DIExpression()), !dbg !6785
  call void @llvm.dbg.declare(metadata i64* %j, metadata !6786, metadata !DIExpression()), !dbg !6787
  call void @llvm.dbg.declare(metadata i64* %n, metadata !6788, metadata !DIExpression()), !dbg !6789
  %0 = load i64, i64* @stack_vars_num, align 8, !dbg !6790
  store i64 %0, i64* %n, align 8, !dbg !6789
  call void @llvm.dbg.declare(metadata i8** %phase, metadata !6791, metadata !DIExpression()), !dbg !6792
  %1 = load i64, i64* %n, align 8, !dbg !6793
  %mul = mul i64 1, %1, !dbg !6793
  %call = call i8* @xmalloc(i64 %mul), !dbg !6793
  store i8* %call, i8** %phase, align 8, !dbg !6794
  store i64 0, i64* %i, align 8, !dbg !6795
  br label %for.cond, !dbg !6797

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i, align 8, !dbg !6798
  %3 = load i64, i64* %n, align 8, !dbg !6800
  %cmp = icmp ult i64 %2, %3, !dbg !6801
  br i1 %cmp, label %for.body, label %for.end, !dbg !6802

for.body:                                         ; preds = %for.cond
  %4 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !6803
  %5 = load i64, i64* %i, align 8, !dbg !6804
  %arrayidx = getelementptr inbounds %struct.stack_var, %struct.stack_var* %4, i64 %5, !dbg !6803
  %decl = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx, i32 0, i32 0, !dbg !6805
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6805
  %call1 = call i32 @stack_protect_decl_phase(%union.tree_node* %6), !dbg !6806
  %conv = trunc i32 %call1 to i8, !dbg !6806
  %7 = load i8*, i8** %phase, align 8, !dbg !6807
  %8 = load i64, i64* %i, align 8, !dbg !6808
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i64 %8, !dbg !6807
  store i8 %conv, i8* %arrayidx2, align 1, !dbg !6809
  br label %for.inc, !dbg !6807

for.inc:                                          ; preds = %for.body
  %9 = load i64, i64* %i, align 8, !dbg !6810
  %inc = add i64 %9, 1, !dbg !6810
  store i64 %inc, i64* %i, align 8, !dbg !6810
  br label %for.cond, !dbg !6811, !llvm.loop !6812

for.end:                                          ; preds = %for.cond
  store i64 0, i64* %i, align 8, !dbg !6814
  br label %for.cond3, !dbg !6816

for.cond3:                                        ; preds = %for.inc20, %for.end
  %10 = load i64, i64* %i, align 8, !dbg !6817
  %11 = load i64, i64* %n, align 8, !dbg !6819
  %cmp4 = icmp ult i64 %10, %11, !dbg !6820
  br i1 %cmp4, label %for.body6, label %for.end22, !dbg !6821

for.body6:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata i8* %ph_i, metadata !6822, metadata !DIExpression()), !dbg !6824
  %12 = load i8*, i8** %phase, align 8, !dbg !6825
  %13 = load i64, i64* %i, align 8, !dbg !6826
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i64 %13, !dbg !6825
  %14 = load i8, i8* %arrayidx7, align 1, !dbg !6825
  store i8 %14, i8* %ph_i, align 1, !dbg !6824
  store i64 0, i64* %j, align 8, !dbg !6827
  br label %for.cond8, !dbg !6829

for.cond8:                                        ; preds = %for.inc17, %for.body6
  %15 = load i64, i64* %j, align 8, !dbg !6830
  %16 = load i64, i64* %i, align 8, !dbg !6832
  %cmp9 = icmp ult i64 %15, %16, !dbg !6833
  br i1 %cmp9, label %for.body11, label %for.end19, !dbg !6834

for.body11:                                       ; preds = %for.cond8
  %17 = load i8, i8* %ph_i, align 1, !dbg !6835
  %conv12 = zext i8 %17 to i32, !dbg !6835
  %18 = load i8*, i8** %phase, align 8, !dbg !6837
  %19 = load i64, i64* %j, align 8, !dbg !6838
  %arrayidx13 = getelementptr inbounds i8, i8* %18, i64 %19, !dbg !6837
  %20 = load i8, i8* %arrayidx13, align 1, !dbg !6837
  %conv14 = zext i8 %20 to i32, !dbg !6837
  %cmp15 = icmp ne i32 %conv12, %conv14, !dbg !6839
  br i1 %cmp15, label %if.then, label %if.end, !dbg !6840

if.then:                                          ; preds = %for.body11
  %21 = load i64, i64* %i, align 8, !dbg !6841
  %22 = load i64, i64* %j, align 8, !dbg !6842
  call void @add_stack_var_conflict(i64 %21, i64 %22), !dbg !6843
  br label %if.end, !dbg !6843

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc17, !dbg !6844

for.inc17:                                        ; preds = %if.end
  %23 = load i64, i64* %j, align 8, !dbg !6845
  %inc18 = add i64 %23, 1, !dbg !6845
  store i64 %inc18, i64* %j, align 8, !dbg !6845
  br label %for.cond8, !dbg !6846, !llvm.loop !6847

for.end19:                                        ; preds = %for.cond8
  br label %for.inc20, !dbg !6849

for.inc20:                                        ; preds = %for.end19
  %24 = load i64, i64* %i, align 8, !dbg !6850
  %inc21 = add i64 %24, 1, !dbg !6850
  store i64 %inc21, i64* %i, align 8, !dbg !6850
  br label %for.cond3, !dbg !6851, !llvm.loop !6852

for.end22:                                        ; preds = %for.cond3
  %25 = load i8*, i8** %phase, align 8, !dbg !6854
  call void @free(i8* %25), !dbg !6854
  ret void, !dbg !6855
}

; Function Attrs: noinline nounwind uwtable
define internal void @partition_stack_vars() #0 !dbg !6856 {
entry:
  %si = alloca i64, align 8
  %sj = alloca i64, align 8
  %n = alloca i64, align 8
  %i = alloca i64, align 8
  %isize = alloca i64, align 8
  %offset = alloca i64, align 8
  %j = alloca i64, align 8
  %jsize = alloca i64, align 8
  %jalign = alloca i32, align 4
  %toff = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %si, metadata !6857, metadata !DIExpression()), !dbg !6858
  call void @llvm.dbg.declare(metadata i64* %sj, metadata !6859, metadata !DIExpression()), !dbg !6860
  call void @llvm.dbg.declare(metadata i64* %n, metadata !6861, metadata !DIExpression()), !dbg !6862
  %0 = load i64, i64* @stack_vars_num, align 8, !dbg !6863
  store i64 %0, i64* %n, align 8, !dbg !6862
  %1 = load i64, i64* @stack_vars_num, align 8, !dbg !6864
  %mul = mul i64 8, %1, !dbg !6864
  %call = call i8* @xmalloc(i64 %mul), !dbg !6864
  %2 = bitcast i8* %call to i64*, !dbg !6864
  store i64* %2, i64** @stack_vars_sorted, align 8, !dbg !6865
  store i64 0, i64* %si, align 8, !dbg !6866
  br label %for.cond, !dbg !6868

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %si, align 8, !dbg !6869
  %4 = load i64, i64* %n, align 8, !dbg !6871
  %cmp = icmp ult i64 %3, %4, !dbg !6872
  br i1 %cmp, label %for.body, label %for.end, !dbg !6873

for.body:                                         ; preds = %for.cond
  %5 = load i64, i64* %si, align 8, !dbg !6874
  %6 = load i64*, i64** @stack_vars_sorted, align 8, !dbg !6875
  %7 = load i64, i64* %si, align 8, !dbg !6876
  %arrayidx = getelementptr inbounds i64, i64* %6, i64 %7, !dbg !6875
  store i64 %5, i64* %arrayidx, align 8, !dbg !6877
  br label %for.inc, !dbg !6875

for.inc:                                          ; preds = %for.body
  %8 = load i64, i64* %si, align 8, !dbg !6878
  %inc = add i64 %8, 1, !dbg !6878
  store i64 %inc, i64* %si, align 8, !dbg !6878
  br label %for.cond, !dbg !6879, !llvm.loop !6880

for.end:                                          ; preds = %for.cond
  %9 = load i64, i64* %n, align 8, !dbg !6882
  %cmp1 = icmp eq i64 %9, 1, !dbg !6884
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6885

if.then:                                          ; preds = %for.end
  br label %if.end51, !dbg !6886

if.end:                                           ; preds = %for.end
  %10 = load i64*, i64** @stack_vars_sorted, align 8, !dbg !6887
  %11 = bitcast i64* %10 to i8*, !dbg !6887
  %12 = load i64, i64* %n, align 8, !dbg !6888
  call void @spec_qsort(i8* %11, i64 %12, i64 8, i32 (i8*, i8*)* @stack_var_size_cmp), !dbg !6889
  store i64 0, i64* %si, align 8, !dbg !6890
  br label %for.cond2, !dbg !6892

for.cond2:                                        ; preds = %for.inc46, %if.end
  %13 = load i64, i64* %si, align 8, !dbg !6893
  %14 = load i64, i64* %n, align 8, !dbg !6895
  %cmp3 = icmp ult i64 %13, %14, !dbg !6896
  br i1 %cmp3, label %for.body4, label %for.end48, !dbg !6897

for.body4:                                        ; preds = %for.cond2
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6898, metadata !DIExpression()), !dbg !6900
  %15 = load i64*, i64** @stack_vars_sorted, align 8, !dbg !6901
  %16 = load i64, i64* %si, align 8, !dbg !6902
  %arrayidx5 = getelementptr inbounds i64, i64* %15, i64 %16, !dbg !6901
  %17 = load i64, i64* %arrayidx5, align 8, !dbg !6901
  store i64 %17, i64* %i, align 8, !dbg !6900
  call void @llvm.dbg.declare(metadata i64* %isize, metadata !6903, metadata !DIExpression()), !dbg !6904
  %18 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !6905
  %19 = load i64, i64* %i, align 8, !dbg !6906
  %arrayidx6 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %18, i64 %19, !dbg !6905
  %size = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx6, i32 0, i32 2, !dbg !6907
  %20 = load i64, i64* %size, align 8, !dbg !6907
  store i64 %20, i64* %isize, align 8, !dbg !6904
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !6908, metadata !DIExpression()), !dbg !6909
  store i64 0, i64* %offset, align 8, !dbg !6909
  %21 = load i64, i64* %si, align 8, !dbg !6910
  store i64 %21, i64* %sj, align 8, !dbg !6912
  br label %for.cond7, !dbg !6913

for.cond7:                                        ; preds = %if.end44, %if.then35, %if.then22, %if.then19, %if.then16, %for.body4
  %22 = load i64, i64* %sj, align 8, !dbg !6914
  %dec = add i64 %22, -1, !dbg !6914
  store i64 %dec, i64* %sj, align 8, !dbg !6914
  %cmp8 = icmp ugt i64 %22, 0, !dbg !6916
  br i1 %cmp8, label %for.body9, label %for.end45, !dbg !6917

for.body9:                                        ; preds = %for.cond7
  call void @llvm.dbg.declare(metadata i64* %j, metadata !6918, metadata !DIExpression()), !dbg !6920
  %23 = load i64*, i64** @stack_vars_sorted, align 8, !dbg !6921
  %24 = load i64, i64* %sj, align 8, !dbg !6922
  %arrayidx10 = getelementptr inbounds i64, i64* %23, i64 %24, !dbg !6921
  %25 = load i64, i64* %arrayidx10, align 8, !dbg !6921
  store i64 %25, i64* %j, align 8, !dbg !6920
  call void @llvm.dbg.declare(metadata i64* %jsize, metadata !6923, metadata !DIExpression()), !dbg !6924
  %26 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !6925
  %27 = load i64, i64* %j, align 8, !dbg !6926
  %arrayidx11 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %26, i64 %27, !dbg !6925
  %size12 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx11, i32 0, i32 2, !dbg !6927
  %28 = load i64, i64* %size12, align 8, !dbg !6927
  store i64 %28, i64* %jsize, align 8, !dbg !6924
  call void @llvm.dbg.declare(metadata i32* %jalign, metadata !6928, metadata !DIExpression()), !dbg !6929
  %29 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !6930
  %30 = load i64, i64* %j, align 8, !dbg !6931
  %arrayidx13 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %29, i64 %30, !dbg !6930
  %alignb = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx13, i32 0, i32 3, !dbg !6932
  %31 = load i32, i32* %alignb, align 8, !dbg !6932
  store i32 %31, i32* %jalign, align 4, !dbg !6929
  %32 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !6933
  %33 = load i64, i64* %j, align 8, !dbg !6935
  %arrayidx14 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %32, i64 %33, !dbg !6933
  %representative = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx14, i32 0, i32 4, !dbg !6936
  %34 = load i64, i64* %representative, align 8, !dbg !6936
  %35 = load i64, i64* %j, align 8, !dbg !6937
  %cmp15 = icmp ne i64 %34, %35, !dbg !6938
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !6939

if.then16:                                        ; preds = %for.body9
  br label %for.cond7, !dbg !6940, !llvm.loop !6941

if.end17:                                         ; preds = %for.body9
  %36 = load i64, i64* %isize, align 8, !dbg !6943
  %37 = load i64, i64* %jsize, align 8, !dbg !6945
  %cmp18 = icmp slt i64 %36, %37, !dbg !6946
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !6947

if.then19:                                        ; preds = %if.end17
  br label %for.cond7, !dbg !6948, !llvm.loop !6941

if.end20:                                         ; preds = %if.end17
  %38 = load i64, i64* %i, align 8, !dbg !6949
  %39 = load i64, i64* %j, align 8, !dbg !6951
  %call21 = call zeroext i8 @stack_var_conflict_p(i64 %38, i64 %39), !dbg !6952
  %tobool = icmp ne i8 %call21, 0, !dbg !6952
  br i1 %tobool, label %if.then22, label %if.end23, !dbg !6953

if.then22:                                        ; preds = %if.end20
  br label %for.cond7, !dbg !6954, !llvm.loop !6941

if.end23:                                         ; preds = %if.end20
  %40 = load i64, i64* %offset, align 8, !dbg !6955
  %41 = load i32, i32* %jalign, align 4, !dbg !6957
  %sub = sub i32 %41, 1, !dbg !6958
  %conv = zext i32 %sub to i64, !dbg !6959
  %and = and i64 %40, %conv, !dbg !6960
  %tobool24 = icmp ne i64 %and, 0, !dbg !6960
  br i1 %tobool24, label %if.then25, label %if.end39, !dbg !6961

if.then25:                                        ; preds = %if.end23
  call void @llvm.dbg.declare(metadata i64* %toff, metadata !6962, metadata !DIExpression()), !dbg !6964
  %42 = load i64, i64* %offset, align 8, !dbg !6965
  store i64 %42, i64* %toff, align 8, !dbg !6964
  %43 = load i32, i32* %jalign, align 4, !dbg !6966
  %sub26 = sub i32 %43, 1, !dbg !6967
  %conv27 = zext i32 %sub26 to i64, !dbg !6966
  %44 = load i64, i64* %toff, align 8, !dbg !6968
  %add = add nsw i64 %44, %conv27, !dbg !6968
  store i64 %add, i64* %toff, align 8, !dbg !6968
  %45 = load i32, i32* %jalign, align 4, !dbg !6969
  %conv28 = zext i32 %45 to i64, !dbg !6970
  %sub29 = sub nsw i64 0, %conv28, !dbg !6971
  %46 = load i64, i64* %toff, align 8, !dbg !6972
  %and30 = and i64 %46, %sub29, !dbg !6972
  store i64 %and30, i64* %toff, align 8, !dbg !6972
  %47 = load i64, i64* %isize, align 8, !dbg !6973
  %48 = load i64, i64* %toff, align 8, !dbg !6975
  %49 = load i64, i64* %offset, align 8, !dbg !6976
  %sub31 = sub nsw i64 %48, %49, !dbg !6977
  %sub32 = sub nsw i64 %47, %sub31, !dbg !6978
  %50 = load i64, i64* %jsize, align 8, !dbg !6979
  %cmp33 = icmp slt i64 %sub32, %50, !dbg !6980
  br i1 %cmp33, label %if.then35, label %if.end36, !dbg !6981

if.then35:                                        ; preds = %if.then25
  br label %for.cond7, !dbg !6982, !llvm.loop !6941

if.end36:                                         ; preds = %if.then25
  %51 = load i64, i64* %toff, align 8, !dbg !6983
  %52 = load i64, i64* %offset, align 8, !dbg !6984
  %sub37 = sub nsw i64 %51, %52, !dbg !6985
  %53 = load i64, i64* %isize, align 8, !dbg !6986
  %sub38 = sub nsw i64 %53, %sub37, !dbg !6986
  store i64 %sub38, i64* %isize, align 8, !dbg !6986
  %54 = load i64, i64* %toff, align 8, !dbg !6987
  store i64 %54, i64* %offset, align 8, !dbg !6988
  br label %if.end39, !dbg !6989

if.end39:                                         ; preds = %if.end36, %if.end23
  %55 = load i64, i64* %i, align 8, !dbg !6990
  %56 = load i64, i64* %j, align 8, !dbg !6991
  %57 = load i64, i64* %offset, align 8, !dbg !6992
  call void @union_stack_vars(i64 %55, i64 %56, i64 %57), !dbg !6993
  %58 = load i64, i64* %jsize, align 8, !dbg !6994
  %59 = load i64, i64* %isize, align 8, !dbg !6995
  %sub40 = sub nsw i64 %59, %58, !dbg !6995
  store i64 %sub40, i64* %isize, align 8, !dbg !6995
  %60 = load i64, i64* %isize, align 8, !dbg !6996
  %cmp41 = icmp eq i64 %60, 0, !dbg !6998
  br i1 %cmp41, label %if.then43, label %if.end44, !dbg !6999

if.then43:                                        ; preds = %if.end39
  br label %for.end45, !dbg !7000

if.end44:                                         ; preds = %if.end39
  br label %for.cond7, !dbg !7001, !llvm.loop !6941

for.end45:                                        ; preds = %if.then43, %for.cond7
  br label %for.inc46, !dbg !7002

for.inc46:                                        ; preds = %for.end45
  %61 = load i64, i64* %si, align 8, !dbg !7003
  %inc47 = add i64 %61, 1, !dbg !7003
  store i64 %inc47, i64* %si, align 8, !dbg !7003
  br label %for.cond2, !dbg !7004, !llvm.loop !7005

for.end48:                                        ; preds = %for.cond2
  %62 = load i32, i32* @optimize, align 4, !dbg !7007
  %tobool49 = icmp ne i32 %62, 0, !dbg !7007
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !7009

if.then50:                                        ; preds = %for.end48
  call void @update_alias_info_with_stack_vars(), !dbg !7010
  br label %if.end51, !dbg !7010

if.end51:                                         ; preds = %if.then, %if.then50, %for.end48
  ret void, !dbg !7011
}

; Function Attrs: noinline nounwind uwtable
define internal void @dump_stack_var_partition() #0 !dbg !7012 {
entry:
  %si = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %n = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %si, metadata !7013, metadata !DIExpression()), !dbg !7014
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7015, metadata !DIExpression()), !dbg !7016
  call void @llvm.dbg.declare(metadata i64* %j, metadata !7017, metadata !DIExpression()), !dbg !7018
  call void @llvm.dbg.declare(metadata i64* %n, metadata !7019, metadata !DIExpression()), !dbg !7020
  %0 = load i64, i64* @stack_vars_num, align 8, !dbg !7021
  store i64 %0, i64* %n, align 8, !dbg !7020
  store i64 0, i64* %si, align 8, !dbg !7022
  br label %for.cond, !dbg !7024

for.cond:                                         ; preds = %for.inc13, %entry
  %1 = load i64, i64* %si, align 8, !dbg !7025
  %2 = load i64, i64* %n, align 8, !dbg !7027
  %cmp = icmp ult i64 %1, %2, !dbg !7028
  br i1 %cmp, label %for.body, label %for.end14, !dbg !7029

for.body:                                         ; preds = %for.cond
  %3 = load i64*, i64** @stack_vars_sorted, align 8, !dbg !7030
  %4 = load i64, i64* %si, align 8, !dbg !7032
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 %4, !dbg !7030
  %5 = load i64, i64* %arrayidx, align 8, !dbg !7030
  store i64 %5, i64* %i, align 8, !dbg !7033
  %6 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7034
  %7 = load i64, i64* %i, align 8, !dbg !7036
  %arrayidx1 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %6, i64 %7, !dbg !7034
  %representative = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx1, i32 0, i32 4, !dbg !7037
  %8 = load i64, i64* %representative, align 8, !dbg !7037
  %9 = load i64, i64* %i, align 8, !dbg !7038
  %cmp2 = icmp ne i64 %8, %9, !dbg !7039
  br i1 %cmp2, label %if.then, label %if.end, !dbg !7040

if.then:                                          ; preds = %for.body
  br label %for.inc13, !dbg !7041

if.end:                                           ; preds = %for.body
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7042
  %11 = load i64, i64* %i, align 8, !dbg !7043
  %12 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7044
  %13 = load i64, i64* %i, align 8, !dbg !7045
  %arrayidx3 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %12, i64 %13, !dbg !7044
  %size = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx3, i32 0, i32 2, !dbg !7046
  %14 = load i64, i64* %size, align 8, !dbg !7046
  %15 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7047
  %16 = load i64, i64* %i, align 8, !dbg !7048
  %arrayidx4 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %15, i64 %16, !dbg !7047
  %alignb = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx4, i32 0, i32 3, !dbg !7049
  %17 = load i32, i32* %alignb, align 8, !dbg !7049
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.9, i64 0, i64 0), i64 %11, i64 %14, i32 %17), !dbg !7050
  %18 = load i64, i64* %i, align 8, !dbg !7051
  store i64 %18, i64* %j, align 8, !dbg !7053
  br label %for.cond5, !dbg !7054

for.cond5:                                        ; preds = %for.inc, %if.end
  %19 = load i64, i64* %j, align 8, !dbg !7055
  %cmp6 = icmp ne i64 %19, -1, !dbg !7057
  br i1 %cmp6, label %for.body7, label %for.end, !dbg !7058

for.body7:                                        ; preds = %for.cond5
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7059
  %call8 = call i32 @fputc(i32 9, %struct._IO_FILE* %20), !dbg !7061
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7062
  %22 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7063
  %23 = load i64, i64* %j, align 8, !dbg !7064
  %arrayidx9 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %22, i64 %23, !dbg !7063
  %decl = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx9, i32 0, i32 0, !dbg !7065
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7065
  %25 = load i32, i32* @dump_flags, align 4, !dbg !7066
  call void @print_generic_expr(%struct._IO_FILE* %21, %union.tree_node* %24, i32 %25), !dbg !7067
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7068
  %27 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7069
  %28 = load i64, i64* %j, align 8, !dbg !7070
  %arrayidx10 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %27, i64 %28, !dbg !7069
  %offset = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx10, i32 0, i32 1, !dbg !7071
  %29 = load i64, i64* %offset, align 8, !dbg !7071
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0), i64 %29), !dbg !7072
  br label %for.inc, !dbg !7073

for.inc:                                          ; preds = %for.body7
  %30 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7074
  %31 = load i64, i64* %j, align 8, !dbg !7075
  %arrayidx12 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %30, i64 %31, !dbg !7074
  %next = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx12, i32 0, i32 5, !dbg !7076
  %32 = load i64, i64* %next, align 8, !dbg !7076
  store i64 %32, i64* %j, align 8, !dbg !7077
  br label %for.cond5, !dbg !7078, !llvm.loop !7079

for.end:                                          ; preds = %for.cond5
  br label %for.inc13, !dbg !7081

for.inc13:                                        ; preds = %for.end, %if.then
  %33 = load i64, i64* %si, align 8, !dbg !7082
  %inc = add i64 %33, 1, !dbg !7082
  store i64 %inc, i64* %si, align 8, !dbg !7082
  br label %for.cond, !dbg !7083, !llvm.loop !7084

for.end14:                                        ; preds = %for.cond
  ret void, !dbg !7086
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_stack_guard() #0 !dbg !7087 {
entry:
  %guard = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %guard, metadata !7088, metadata !DIExpression()), !dbg !7089
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7090
  %decl_minimal = bitcast %union.tree_node* %0 to %struct.tree_decl_minimal*, !dbg !7090
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !7090
  %1 = load i32, i32* %locus, align 8, !dbg !7090
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !7090
  %call = call %union.tree_node* @build_decl_stat(i32 %1, i32 32, %union.tree_node* null, %union.tree_node* %2), !dbg !7090
  store %union.tree_node* %call, %union.tree_node** %guard, align 8, !dbg !7089
  %3 = load %union.tree_node*, %union.tree_node** %guard, align 8, !dbg !7091
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7091
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7091
  %bf.load = load i64, i64* %4, align 8, !dbg !7092
  %bf.clear = and i64 %bf.load, -524289, !dbg !7092
  %bf.set = or i64 %bf.clear, 524288, !dbg !7092
  store i64 %bf.set, i64* %4, align 8, !dbg !7092
  %5 = load %union.tree_node*, %union.tree_node** %guard, align 8, !dbg !7093
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7093
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7093
  %bf.load2 = load i64, i64* %6, align 8, !dbg !7094
  %bf.clear3 = and i64 %bf.load2, -16777217, !dbg !7094
  %bf.set4 = or i64 %bf.clear3, 16777216, !dbg !7094
  store i64 %bf.set4, i64* %6, align 8, !dbg !7094
  %7 = load %union.tree_node*, %union.tree_node** %guard, align 8, !dbg !7095
  call void @expand_one_stack_var(%union.tree_node* %7), !dbg !7096
  %8 = load %union.tree_node*, %union.tree_node** %guard, align 8, !dbg !7097
  store %union.tree_node* %8, %union.tree_node** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 9), align 8, !dbg !7098
  ret void, !dbg !7099
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_stack_vars(i8 (%union.tree_node*)* %pred) #0 !dbg !7100 {
entry:
  %pred.addr = alloca i8 (%union.tree_node*)*, align 8
  %si = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %n = alloca i64, align 8
  %offset = alloca i64, align 8
  store i8 (%union.tree_node*)* %pred, i8 (%union.tree_node*)** %pred.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.tree_node*)** %pred.addr, metadata !7106, metadata !DIExpression()), !dbg !7107
  call void @llvm.dbg.declare(metadata i64* %si, metadata !7108, metadata !DIExpression()), !dbg !7109
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7110, metadata !DIExpression()), !dbg !7111
  call void @llvm.dbg.declare(metadata i64* %j, metadata !7112, metadata !DIExpression()), !dbg !7113
  call void @llvm.dbg.declare(metadata i64* %n, metadata !7114, metadata !DIExpression()), !dbg !7115
  %0 = load i64, i64* @stack_vars_num, align 8, !dbg !7116
  store i64 %0, i64* %n, align 8, !dbg !7115
  store i64 0, i64* %si, align 8, !dbg !7117
  br label %for.cond, !dbg !7119

for.cond:                                         ; preds = %for.inc56, %entry
  %1 = load i64, i64* %si, align 8, !dbg !7120
  %2 = load i64, i64* %n, align 8, !dbg !7122
  %cmp = icmp ult i64 %1, %2, !dbg !7123
  br i1 %cmp, label %for.body, label %for.end57, !dbg !7124

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !7125, metadata !DIExpression()), !dbg !7127
  %3 = load i64*, i64** @stack_vars_sorted, align 8, !dbg !7128
  %4 = load i64, i64* %si, align 8, !dbg !7129
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 %4, !dbg !7128
  %5 = load i64, i64* %arrayidx, align 8, !dbg !7128
  store i64 %5, i64* %i, align 8, !dbg !7130
  %6 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7131
  %7 = load i64, i64* %i, align 8, !dbg !7133
  %arrayidx1 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %6, i64 %7, !dbg !7131
  %representative = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx1, i32 0, i32 4, !dbg !7134
  %8 = load i64, i64* %representative, align 8, !dbg !7134
  %9 = load i64, i64* %i, align 8, !dbg !7135
  %cmp2 = icmp ne i64 %8, %9, !dbg !7136
  br i1 %cmp2, label %if.then, label %if.end, !dbg !7137

if.then:                                          ; preds = %for.body
  br label %for.inc56, !dbg !7138

if.end:                                           ; preds = %for.body
  %10 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7139
  %11 = load i64, i64* %i, align 8, !dbg !7139
  %arrayidx3 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %10, i64 %11, !dbg !7139
  %decl = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx3, i32 0, i32 0, !dbg !7139
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7139
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7139
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !7139
  %bf.load = load i64, i64* %13, align 8, !dbg !7139
  %bf.clear = and i64 %bf.load, 65535, !dbg !7139
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7139
  %cmp4 = icmp eq i32 %bf.cast, 141, !dbg !7141
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !7139

cond.true:                                        ; preds = %if.end
  %14 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 2), align 8, !dbg !7142
  %15 = load %struct._var_map*, %struct._var_map** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 0), align 8, !dbg !7143
  %16 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7144
  %17 = load i64, i64* %i, align 8, !dbg !7145
  %arrayidx5 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %16, i64 %17, !dbg !7144
  %decl6 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx5, i32 0, i32 0, !dbg !7146
  %18 = load %union.tree_node*, %union.tree_node** %decl6, align 8, !dbg !7146
  %call = call i32 @var_to_partition(%struct._var_map* %15, %union.tree_node* %18), !dbg !7147
  %idxprom = sext i32 %call to i64, !dbg !7148
  %arrayidx7 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %14, i64 %idxprom, !dbg !7148
  %19 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8, !dbg !7148
  br label %cond.end22, !dbg !7139

cond.false:                                       ; preds = %if.end
  %20 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7149
  %21 = load i64, i64* %i, align 8, !dbg !7149
  %arrayidx8 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %20, i64 %21, !dbg !7149
  %decl9 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx8, i32 0, i32 0, !dbg !7149
  %22 = load %union.tree_node*, %union.tree_node** %decl9, align 8, !dbg !7149
  %decl_with_rtl = bitcast %union.tree_node* %22 to %struct.tree_decl_with_rtl*, !dbg !7149
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !7149
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !7149
  %tobool = icmp ne %struct.rtx_def* %23, null, !dbg !7149
  br i1 %tobool, label %cond.true10, label %cond.false15, !dbg !7149

cond.true10:                                      ; preds = %cond.false
  %24 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7149
  %25 = load i64, i64* %i, align 8, !dbg !7149
  %arrayidx11 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %24, i64 %25, !dbg !7149
  %decl12 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx11, i32 0, i32 0, !dbg !7149
  %26 = load %union.tree_node*, %union.tree_node** %decl12, align 8, !dbg !7149
  %decl_with_rtl13 = bitcast %union.tree_node* %26 to %struct.tree_decl_with_rtl*, !dbg !7149
  %rtl14 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl13, i32 0, i32 1, !dbg !7149
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtl14, align 8, !dbg !7149
  br label %cond.end, !dbg !7149

cond.false15:                                     ; preds = %cond.false
  %28 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7149
  %29 = load i64, i64* %i, align 8, !dbg !7149
  %arrayidx16 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %28, i64 %29, !dbg !7149
  %decl17 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx16, i32 0, i32 0, !dbg !7149
  %30 = load %union.tree_node*, %union.tree_node** %decl17, align 8, !dbg !7149
  call void @make_decl_rtl(%union.tree_node* %30), !dbg !7149
  %31 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7149
  %32 = load i64, i64* %i, align 8, !dbg !7149
  %arrayidx18 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %31, i64 %32, !dbg !7149
  %decl19 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx18, i32 0, i32 0, !dbg !7149
  %33 = load %union.tree_node*, %union.tree_node** %decl19, align 8, !dbg !7149
  %decl_with_rtl20 = bitcast %union.tree_node* %33 to %struct.tree_decl_with_rtl*, !dbg !7149
  %rtl21 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl20, i32 0, i32 1, !dbg !7149
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtl21, align 8, !dbg !7149
  br label %cond.end, !dbg !7149

cond.end:                                         ; preds = %cond.false15, %cond.true10
  %cond = phi %struct.rtx_def* [ %27, %cond.true10 ], [ %34, %cond.false15 ], !dbg !7149
  br label %cond.end22, !dbg !7139

cond.end22:                                       ; preds = %cond.end, %cond.true
  %cond23 = phi %struct.rtx_def* [ %19, %cond.true ], [ %cond, %cond.end ], !dbg !7139
  %35 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !7150
  %cmp24 = icmp ne %struct.rtx_def* %cond23, %35, !dbg !7151
  br i1 %cmp24, label %if.then25, label %if.end26, !dbg !7152

if.then25:                                        ; preds = %cond.end22
  br label %for.inc56, !dbg !7153

if.end26:                                         ; preds = %cond.end22
  %36 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %pred.addr, align 8, !dbg !7154
  %tobool27 = icmp ne i8 (%union.tree_node*)* %36, null, !dbg !7154
  br i1 %tobool27, label %land.lhs.true, label %if.end33, !dbg !7156

land.lhs.true:                                    ; preds = %if.end26
  %37 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** %pred.addr, align 8, !dbg !7157
  %38 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7158
  %39 = load i64, i64* %i, align 8, !dbg !7159
  %arrayidx28 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %38, i64 %39, !dbg !7158
  %decl29 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx28, i32 0, i32 0, !dbg !7160
  %40 = load %union.tree_node*, %union.tree_node** %decl29, align 8, !dbg !7160
  %call30 = call zeroext i8 %37(%union.tree_node* %40), !dbg !7157
  %tobool31 = icmp ne i8 %call30, 0, !dbg !7157
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !7161

if.then32:                                        ; preds = %land.lhs.true
  br label %for.inc56, !dbg !7162

if.end33:                                         ; preds = %land.lhs.true, %if.end26
  %41 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7163
  %42 = load i64, i64* %i, align 8, !dbg !7164
  %arrayidx34 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %41, i64 %42, !dbg !7163
  %size = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx34, i32 0, i32 2, !dbg !7165
  %43 = load i64, i64* %size, align 8, !dbg !7165
  %44 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7166
  %45 = load i64, i64* %i, align 8, !dbg !7167
  %arrayidx35 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %44, i64 %45, !dbg !7166
  %alignb = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx35, i32 0, i32 3, !dbg !7168
  %46 = load i32, i32* %alignb, align 8, !dbg !7168
  %conv = zext i32 %46 to i64, !dbg !7166
  %call36 = call i64 @alloc_stack_frame_space(i64 %43, i64 %conv), !dbg !7169
  store i64 %call36, i64* %offset, align 8, !dbg !7170
  %47 = load i64, i64* %i, align 8, !dbg !7171
  store i64 %47, i64* %j, align 8, !dbg !7173
  br label %for.cond37, !dbg !7174

for.cond37:                                       ; preds = %for.inc, %if.end33
  %48 = load i64, i64* %j, align 8, !dbg !7175
  %cmp38 = icmp ne i64 %48, -1, !dbg !7177
  br i1 %cmp38, label %for.body40, label %for.end, !dbg !7178

for.body40:                                       ; preds = %for.cond37
  %49 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7179
  %50 = load i64, i64* %j, align 8, !dbg !7179
  %arrayidx41 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %49, i64 %50, !dbg !7179
  %offset42 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx41, i32 0, i32 1, !dbg !7179
  %51 = load i64, i64* %offset42, align 8, !dbg !7179
  %52 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7179
  %53 = load i64, i64* %i, align 8, !dbg !7179
  %arrayidx43 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %52, i64 %53, !dbg !7179
  %size44 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx43, i32 0, i32 2, !dbg !7179
  %54 = load i64, i64* %size44, align 8, !dbg !7179
  %cmp45 = icmp sle i64 %51, %54, !dbg !7179
  br i1 %cmp45, label %cond.false48, label %cond.true47, !dbg !7179

cond.true47:                                      ; preds = %for.body40
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 780, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7179
  br label %cond.end49, !dbg !7179

cond.false48:                                     ; preds = %for.body40
  br label %cond.end49, !dbg !7179

cond.end49:                                       ; preds = %cond.false48, %cond.true47
  %cond50 = phi i32 [ 0, %cond.true47 ], [ 0, %cond.false48 ], !dbg !7179
  %55 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7181
  %56 = load i64, i64* %j, align 8, !dbg !7182
  %arrayidx51 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %55, i64 %56, !dbg !7181
  %decl52 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx51, i32 0, i32 0, !dbg !7183
  %57 = load %union.tree_node*, %union.tree_node** %decl52, align 8, !dbg !7183
  %58 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7184
  %59 = load i64, i64* %j, align 8, !dbg !7185
  %arrayidx53 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %58, i64 %59, !dbg !7184
  %offset54 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx53, i32 0, i32 1, !dbg !7186
  %60 = load i64, i64* %offset54, align 8, !dbg !7186
  %61 = load i64, i64* %offset, align 8, !dbg !7187
  %add = add nsw i64 %60, %61, !dbg !7188
  call void @expand_one_stack_var_at(%union.tree_node* %57, i64 %add), !dbg !7189
  br label %for.inc, !dbg !7190

for.inc:                                          ; preds = %cond.end49
  %62 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7191
  %63 = load i64, i64* %j, align 8, !dbg !7192
  %arrayidx55 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %62, i64 %63, !dbg !7191
  %next = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx55, i32 0, i32 5, !dbg !7193
  %64 = load i64, i64* %next, align 8, !dbg !7193
  store i64 %64, i64* %j, align 8, !dbg !7194
  br label %for.cond37, !dbg !7195, !llvm.loop !7196

for.end:                                          ; preds = %for.cond37
  br label %for.inc56, !dbg !7198

for.inc56:                                        ; preds = %for.end, %if.then32, %if.then25, %if.then
  %65 = load i64, i64* %si, align 8, !dbg !7199
  %inc = add i64 %65, 1, !dbg !7199
  store i64 %inc, i64* %si, align 8, !dbg !7199
  br label %for.cond, !dbg !7200, !llvm.loop !7201

for.end57:                                        ; preds = %for.cond
  ret void, !dbg !7203
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stack_protect_decl_phase_1(%union.tree_node* %decl) #0 !dbg !7204 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7205, metadata !DIExpression()), !dbg !7206
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7207
  %call = call i32 @stack_protect_decl_phase(%union.tree_node* %0), !dbg !7208
  %cmp = icmp eq i32 %call, 1, !dbg !7209
  %conv = zext i1 %cmp to i32, !dbg !7209
  %conv1 = trunc i32 %conv to i8, !dbg !7208
  ret i8 %conv1, !dbg !7210
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stack_protect_decl_phase_2(%union.tree_node* %decl) #0 !dbg !7211 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7212, metadata !DIExpression()), !dbg !7213
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7214
  %call = call i32 @stack_protect_decl_phase(%union.tree_node* %0), !dbg !7215
  %cmp = icmp eq i32 %call, 2, !dbg !7216
  %conv = zext i1 %cmp to i32, !dbg !7216
  %conv1 = trunc i32 %conv to i8, !dbg !7215
  ret i8 %conv1, !dbg !7217
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_stack_var_conflict(i64 %x, i64 %y) #0 !dbg !7218 {
entry:
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  %a = alloca %struct.stack_var*, align 8
  %b = alloca %struct.stack_var*, align 8
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !7221, metadata !DIExpression()), !dbg !7222
  store i64 %y, i64* %y.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %y.addr, metadata !7223, metadata !DIExpression()), !dbg !7224
  call void @llvm.dbg.declare(metadata %struct.stack_var** %a, metadata !7225, metadata !DIExpression()), !dbg !7226
  %0 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7227
  %1 = load i64, i64* %x.addr, align 8, !dbg !7228
  %arrayidx = getelementptr inbounds %struct.stack_var, %struct.stack_var* %0, i64 %1, !dbg !7227
  store %struct.stack_var* %arrayidx, %struct.stack_var** %a, align 8, !dbg !7226
  call void @llvm.dbg.declare(metadata %struct.stack_var** %b, metadata !7229, metadata !DIExpression()), !dbg !7230
  %2 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7231
  %3 = load i64, i64* %y.addr, align 8, !dbg !7232
  %arrayidx1 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %2, i64 %3, !dbg !7231
  store %struct.stack_var* %arrayidx1, %struct.stack_var** %b, align 8, !dbg !7230
  %4 = load %struct.stack_var*, %struct.stack_var** %a, align 8, !dbg !7233
  %conflicts = getelementptr inbounds %struct.stack_var, %struct.stack_var* %4, i32 0, i32 6, !dbg !7235
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %conflicts, align 8, !dbg !7235
  %tobool = icmp ne %struct.bitmap_head_def* %5, null, !dbg !7233
  br i1 %tobool, label %if.end, label %if.then, !dbg !7236

if.then:                                          ; preds = %entry
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !7237
  %6 = load %struct.stack_var*, %struct.stack_var** %a, align 8, !dbg !7238
  %conflicts2 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %6, i32 0, i32 6, !dbg !7239
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %conflicts2, align 8, !dbg !7240
  br label %if.end, !dbg !7238

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.stack_var*, %struct.stack_var** %b, align 8, !dbg !7241
  %conflicts3 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %7, i32 0, i32 6, !dbg !7243
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %conflicts3, align 8, !dbg !7243
  %tobool4 = icmp ne %struct.bitmap_head_def* %8, null, !dbg !7241
  br i1 %tobool4, label %if.end8, label %if.then5, !dbg !7244

if.then5:                                         ; preds = %if.end
  %call6 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !7245
  %9 = load %struct.stack_var*, %struct.stack_var** %b, align 8, !dbg !7246
  %conflicts7 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %9, i32 0, i32 6, !dbg !7247
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** %conflicts7, align 8, !dbg !7248
  br label %if.end8, !dbg !7246

if.end8:                                          ; preds = %if.then5, %if.end
  %10 = load %struct.stack_var*, %struct.stack_var** %a, align 8, !dbg !7249
  %conflicts9 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %10, i32 0, i32 6, !dbg !7250
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %conflicts9, align 8, !dbg !7250
  %12 = load i64, i64* %y.addr, align 8, !dbg !7251
  %conv = trunc i64 %12 to i32, !dbg !7251
  %call10 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %11, i32 %conv), !dbg !7252
  %13 = load %struct.stack_var*, %struct.stack_var** %b, align 8, !dbg !7253
  %conflicts11 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %13, i32 0, i32 6, !dbg !7254
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %conflicts11, align 8, !dbg !7254
  %15 = load i64, i64* %x.addr, align 8, !dbg !7255
  %conv12 = trunc i64 %15 to i32, !dbg !7255
  %call13 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %14, i32 %conv12), !dbg !7256
  ret void, !dbg !7257
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @aggregate_contains_union_type(%union.tree_node* %type) #0 !dbg !7258 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7259, metadata !DIExpression()), !dbg !7260
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !7261, metadata !DIExpression()), !dbg !7262
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7263
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7263
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7263
  %bf.load = load i64, i64* %1, align 8, !dbg !7263
  %bf.clear = and i64 %bf.load, 65535, !dbg !7263
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7263
  %cmp = icmp eq i32 %bf.cast, 17, !dbg !7265
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7266

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7267
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7267
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7267
  %bf.load2 = load i64, i64* %3, align 8, !dbg !7267
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7267
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7267
  %cmp5 = icmp eq i32 %bf.cast4, 18, !dbg !7268
  br i1 %cmp5, label %if.then, label %if.end, !dbg !7269

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !7270
  br label %return, !dbg !7270

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7271
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !7271
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !7271
  %bf.load7 = load i64, i64* %5, align 8, !dbg !7271
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !7271
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !7271
  %cmp10 = icmp eq i32 %bf.cast9, 15, !dbg !7273
  br i1 %cmp10, label %if.then11, label %if.end13, !dbg !7274

if.then11:                                        ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7275
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !7275
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7275
  %7 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7275
  %call = call zeroext i8 @aggregate_contains_union_type(%union.tree_node* %7), !dbg !7276
  store i8 %call, i8* %retval, align 1, !dbg !7277
  br label %return, !dbg !7277

if.end13:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7278
  %base14 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7278
  %9 = bitcast %struct.tree_base* %base14 to i64*, !dbg !7278
  %bf.load15 = load i64, i64* %9, align 8, !dbg !7278
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !7278
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !7278
  %cmp18 = icmp ne i32 %bf.cast17, 16, !dbg !7280
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !7281

if.then19:                                        ; preds = %if.end13
  store i8 0, i8* %retval, align 1, !dbg !7282
  br label %return, !dbg !7282

if.end20:                                         ; preds = %if.end13
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7283
  %type21 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !7283
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type21, i32 0, i32 1, !dbg !7283
  %11 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !7283
  store %union.tree_node* %11, %union.tree_node** %field, align 8, !dbg !7285
  br label %for.cond, !dbg !7286

for.cond:                                         ; preds = %for.inc, %if.end20
  %12 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7287
  %tobool = icmp ne %union.tree_node* %12, null, !dbg !7289
  br i1 %tobool, label %for.body, label %for.end, !dbg !7289

for.body:                                         ; preds = %for.cond
  %13 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7290
  %base22 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7290
  %14 = bitcast %struct.tree_base* %base22 to i64*, !dbg !7290
  %bf.load23 = load i64, i64* %14, align 8, !dbg !7290
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !7290
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !7290
  %cmp26 = icmp eq i32 %bf.cast25, 31, !dbg !7292
  br i1 %cmp26, label %if.then27, label %if.end34, !dbg !7293

if.then27:                                        ; preds = %for.body
  %15 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7294
  %common28 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !7294
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !7294
  %16 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !7294
  %call30 = call zeroext i8 @aggregate_contains_union_type(%union.tree_node* %16), !dbg !7296
  %tobool31 = icmp ne i8 %call30, 0, !dbg !7296
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !7297

if.then32:                                        ; preds = %if.then27
  store i8 1, i8* %retval, align 1, !dbg !7298
  br label %return, !dbg !7298

if.end33:                                         ; preds = %if.then27
  br label %if.end34, !dbg !7299

if.end34:                                         ; preds = %if.end33, %for.body
  br label %for.inc, !dbg !7300

for.inc:                                          ; preds = %if.end34
  %17 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7301
  %common35 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !7301
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common35, i32 0, i32 1, !dbg !7301
  %18 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7301
  store %union.tree_node* %18, %union.tree_node** %field, align 8, !dbg !7302
  br label %for.cond, !dbg !7303, !llvm.loop !7304

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !7306
  br label %return, !dbg !7306

return:                                           ; preds = %for.end, %if.then32, %if.then19, %if.then11, %if.then
  %19 = load i8, i8* %retval, align 1, !dbg !7307
  ret i8 %19, !dbg !7307
}

declare dso_local i32 @objects_must_conflict_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @stack_protect_decl_phase(%union.tree_node* %decl) #0 !dbg !7308 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %bits = alloca i32, align 4
  %ret = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7311, metadata !DIExpression()), !dbg !7312
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !7313, metadata !DIExpression()), !dbg !7314
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7315
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !7315
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7315
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7315
  %call = call i32 @stack_protect_classify_type(%union.tree_node* %1), !dbg !7316
  store i32 %call, i32* %bits, align 4, !dbg !7314
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7317, metadata !DIExpression()), !dbg !7318
  store i32 0, i32* %ret, align 4, !dbg !7318
  %2 = load i32, i32* %bits, align 4, !dbg !7319
  %and = and i32 %2, 2, !dbg !7321
  %tobool = icmp ne i32 %and, 0, !dbg !7321
  br i1 %tobool, label %if.then, label %if.end, !dbg !7322

if.then:                                          ; preds = %entry
  store i8 1, i8* @has_short_buffer, align 1, !dbg !7323
  br label %if.end, !dbg !7324

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* @flag_stack_protect, align 4, !dbg !7325
  %cmp = icmp eq i32 %3, 2, !dbg !7327
  br i1 %cmp, label %if.then1, label %if.else12, !dbg !7328

if.then1:                                         ; preds = %if.end
  %4 = load i32, i32* %bits, align 4, !dbg !7329
  %and2 = and i32 %4, 3, !dbg !7332
  %tobool3 = icmp ne i32 %and2, 0, !dbg !7332
  br i1 %tobool3, label %land.lhs.true, label %if.else, !dbg !7333

land.lhs.true:                                    ; preds = %if.then1
  %5 = load i32, i32* %bits, align 4, !dbg !7334
  %and4 = and i32 %5, 8, !dbg !7335
  %tobool5 = icmp ne i32 %and4, 0, !dbg !7335
  br i1 %tobool5, label %if.else, label %if.then6, !dbg !7336

if.then6:                                         ; preds = %land.lhs.true
  store i32 1, i32* %ret, align 4, !dbg !7337
  br label %if.end11, !dbg !7338

if.else:                                          ; preds = %land.lhs.true, %if.then1
  %6 = load i32, i32* %bits, align 4, !dbg !7339
  %and7 = and i32 %6, 4, !dbg !7341
  %tobool8 = icmp ne i32 %and7, 0, !dbg !7341
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !7342

if.then9:                                         ; preds = %if.else
  store i32 2, i32* %ret, align 4, !dbg !7343
  br label %if.end10, !dbg !7344

if.end10:                                         ; preds = %if.then9, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.then6
  br label %if.end15, !dbg !7345

if.else12:                                        ; preds = %if.end
  %7 = load i32, i32* %bits, align 4, !dbg !7346
  %and13 = and i32 %7, 1, !dbg !7347
  %cmp14 = icmp ne i32 %and13, 0, !dbg !7348
  %conv = zext i1 %cmp14 to i32, !dbg !7348
  store i32 %conv, i32* %ret, align 4, !dbg !7349
  br label %if.end15

if.end15:                                         ; preds = %if.else12, %if.end11
  %8 = load i32, i32* %ret, align 4, !dbg !7350
  %tobool16 = icmp ne i32 %8, 0, !dbg !7350
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !7352

if.then17:                                        ; preds = %if.end15
  store i8 1, i8* @has_protected_decls, align 1, !dbg !7353
  br label %if.end18, !dbg !7354

if.end18:                                         ; preds = %if.then17, %if.end15
  %9 = load i32, i32* %ret, align 4, !dbg !7355
  ret i32 %9, !dbg !7356
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @stack_protect_classify_type(%union.tree_node* %type) #0 !dbg !7357 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %ret = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  %max = alloca i64, align 8
  %len = alloca i64, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7358, metadata !DIExpression()), !dbg !7359
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7360, metadata !DIExpression()), !dbg !7361
  store i32 0, i32* %ret, align 4, !dbg !7361
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7362, metadata !DIExpression()), !dbg !7363
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7364
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7364
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7364
  %bf.load = load i64, i64* %1, align 8, !dbg !7364
  %bf.clear = and i64 %bf.load, 65535, !dbg !7364
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7364
  switch i32 %bf.cast, label %sw.default [
    i32 15, label %sw.bb
    i32 17, label %sw.bb22
    i32 18, label %sw.bb22
    i32 16, label %sw.bb22
  ], !dbg !7365

sw.bb:                                            ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7366
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !7366
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7366
  %3 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7366
  %type2 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !7366
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 16, !dbg !7366
  %4 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !7366
  store %union.tree_node* %4, %union.tree_node** %t, align 8, !dbg !7368
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7369
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !7371
  %cmp = icmp eq %union.tree_node* %5, %6, !dbg !7372
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7373

lor.lhs.false:                                    ; preds = %sw.bb
  %7 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7374
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !7375
  %cmp3 = icmp eq %union.tree_node* %7, %8, !dbg !7376
  br i1 %cmp3, label %if.then, label %lor.lhs.false4, !dbg !7377

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7378
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !7379
  %cmp5 = icmp eq %union.tree_node* %9, %10, !dbg !7380
  br i1 %cmp5, label %if.then, label %if.else20, !dbg !7381

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %sw.bb
  call void @llvm.dbg.declare(metadata i64* %max, metadata !7382, metadata !DIExpression()), !dbg !7384
  %11 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !7385
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %11, i64 93, !dbg !7385
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !7385
  %12 = load i32, i32* %value, align 8, !dbg !7385
  %conv = sext i32 %12 to i64, !dbg !7385
  store i64 %conv, i64* %max, align 8, !dbg !7384
  call void @llvm.dbg.declare(metadata i64* %len, metadata !7386, metadata !DIExpression()), !dbg !7387
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7388
  %type6 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !7388
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i32 0, i32 3, !dbg !7388
  %14 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !7388
  %tobool = icmp ne %union.tree_node* %14, null, !dbg !7388
  br i1 %tobool, label %lor.lhs.false7, label %if.then11, !dbg !7390

lor.lhs.false7:                                   ; preds = %if.then
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7391
  %type8 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !7391
  %size_unit9 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 3, !dbg !7391
  %16 = load %union.tree_node*, %union.tree_node** %size_unit9, align 8, !dbg !7391
  %call = call i32 @host_integerp(%union.tree_node* %16, i32 1), !dbg !7392
  %tobool10 = icmp ne i32 %call, 0, !dbg !7392
  br i1 %tobool10, label %if.else, label %if.then11, !dbg !7393

if.then11:                                        ; preds = %lor.lhs.false7, %if.then
  %17 = load i64, i64* %max, align 8, !dbg !7394
  store i64 %17, i64* %len, align 8, !dbg !7395
  br label %if.end, !dbg !7396

if.else:                                          ; preds = %lor.lhs.false7
  %18 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7397
  %type12 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !7397
  %size_unit13 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 3, !dbg !7397
  %19 = load %union.tree_node*, %union.tree_node** %size_unit13, align 8, !dbg !7397
  %call14 = call i64 @tree_low_cst(%union.tree_node* %19, i32 1), !dbg !7398
  store i64 %call14, i64* %len, align 8, !dbg !7399
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then11
  %20 = load i64, i64* %len, align 8, !dbg !7400
  %21 = load i64, i64* %max, align 8, !dbg !7402
  %cmp15 = icmp ult i64 %20, %21, !dbg !7403
  br i1 %cmp15, label %if.then17, label %if.else18, !dbg !7404

if.then17:                                        ; preds = %if.end
  store i32 6, i32* %ret, align 4, !dbg !7405
  br label %if.end19, !dbg !7406

if.else18:                                        ; preds = %if.end
  store i32 5, i32* %ret, align 4, !dbg !7407
  br label %if.end19

if.end19:                                         ; preds = %if.else18, %if.then17
  br label %if.end21, !dbg !7408

if.else20:                                        ; preds = %lor.lhs.false4
  store i32 4, i32* %ret, align 4, !dbg !7409
  br label %if.end21

if.end21:                                         ; preds = %if.else20, %if.end19
  br label %sw.epilog, !dbg !7410

sw.bb22:                                          ; preds = %entry, %entry, %entry
  store i32 8, i32* %ret, align 4, !dbg !7411
  %22 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7412
  %type23 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !7412
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 1, !dbg !7412
  %23 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !7412
  store %union.tree_node* %23, %union.tree_node** %t, align 8, !dbg !7414
  br label %for.cond, !dbg !7415

for.cond:                                         ; preds = %for.inc, %sw.bb22
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7416
  %tobool24 = icmp ne %union.tree_node* %24, null, !dbg !7418
  br i1 %tobool24, label %for.body, label %for.end, !dbg !7418

for.body:                                         ; preds = %for.cond
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7419
  %base25 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !7419
  %26 = bitcast %struct.tree_base* %base25 to i64*, !dbg !7419
  %bf.load26 = load i64, i64* %26, align 8, !dbg !7419
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !7419
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !7419
  %cmp29 = icmp eq i32 %bf.cast28, 31, !dbg !7421
  br i1 %cmp29, label %if.then31, label %if.end35, !dbg !7422

if.then31:                                        ; preds = %for.body
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7423
  %common32 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !7423
  %type33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2, !dbg !7423
  %28 = load %union.tree_node*, %union.tree_node** %type33, align 8, !dbg !7423
  %call34 = call i32 @stack_protect_classify_type(%union.tree_node* %28), !dbg !7424
  %29 = load i32, i32* %ret, align 4, !dbg !7425
  %or = or i32 %29, %call34, !dbg !7425
  store i32 %or, i32* %ret, align 4, !dbg !7425
  br label %if.end35, !dbg !7426

if.end35:                                         ; preds = %if.then31, %for.body
  br label %for.inc, !dbg !7427

for.inc:                                          ; preds = %if.end35
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7428
  %common36 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !7428
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 1, !dbg !7428
  %31 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7428
  store %union.tree_node* %31, %union.tree_node** %t, align 8, !dbg !7429
  br label %for.cond, !dbg !7430, !llvm.loop !7431

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !7433

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !7434

sw.epilog:                                        ; preds = %sw.default, %for.end, %if.end21
  %32 = load i32, i32* %ret, align 4, !dbg !7435
  ret i32 %32, !dbg !7436
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @stack_var_size_cmp(i8* %a, i8* %b) #0 !dbg !7437 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %sa = alloca i64, align 8
  %sb = alloca i64, align 8
  %decla = alloca %union.tree_node*, align 8
  %declb = alloca %union.tree_node*, align 8
  %uida = alloca i32, align 4
  %uidb = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !7438, metadata !DIExpression()), !dbg !7439
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !7440, metadata !DIExpression()), !dbg !7441
  call void @llvm.dbg.declare(metadata i64* %sa, metadata !7442, metadata !DIExpression()), !dbg !7443
  %0 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7444
  %1 = load i8*, i8** %a.addr, align 8, !dbg !7445
  %2 = bitcast i8* %1 to i64*, !dbg !7446
  %3 = load i64, i64* %2, align 8, !dbg !7447
  %arrayidx = getelementptr inbounds %struct.stack_var, %struct.stack_var* %0, i64 %3, !dbg !7444
  %size = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx, i32 0, i32 2, !dbg !7448
  %4 = load i64, i64* %size, align 8, !dbg !7448
  store i64 %4, i64* %sa, align 8, !dbg !7443
  call void @llvm.dbg.declare(metadata i64* %sb, metadata !7449, metadata !DIExpression()), !dbg !7450
  %5 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7451
  %6 = load i8*, i8** %b.addr, align 8, !dbg !7452
  %7 = bitcast i8* %6 to i64*, !dbg !7453
  %8 = load i64, i64* %7, align 8, !dbg !7454
  %arrayidx1 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %5, i64 %8, !dbg !7451
  %size2 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx1, i32 0, i32 2, !dbg !7455
  %9 = load i64, i64* %size2, align 8, !dbg !7455
  store i64 %9, i64* %sb, align 8, !dbg !7450
  call void @llvm.dbg.declare(metadata %union.tree_node** %decla, metadata !7456, metadata !DIExpression()), !dbg !7457
  call void @llvm.dbg.declare(metadata %union.tree_node** %declb, metadata !7458, metadata !DIExpression()), !dbg !7459
  call void @llvm.dbg.declare(metadata i32* %uida, metadata !7460, metadata !DIExpression()), !dbg !7461
  call void @llvm.dbg.declare(metadata i32* %uidb, metadata !7462, metadata !DIExpression()), !dbg !7463
  %10 = load i64, i64* %sa, align 8, !dbg !7464
  %11 = load i64, i64* %sb, align 8, !dbg !7466
  %cmp = icmp slt i64 %10, %11, !dbg !7467
  br i1 %cmp, label %if.then, label %if.end, !dbg !7468

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !7469
  br label %return, !dbg !7469

if.end:                                           ; preds = %entry
  %12 = load i64, i64* %sa, align 8, !dbg !7470
  %13 = load i64, i64* %sb, align 8, !dbg !7472
  %cmp3 = icmp sgt i64 %12, %13, !dbg !7473
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !7474

if.then4:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !7475
  br label %return, !dbg !7475

if.end5:                                          ; preds = %if.end
  %14 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7476
  %15 = load i8*, i8** %a.addr, align 8, !dbg !7477
  %16 = bitcast i8* %15 to i64*, !dbg !7478
  %17 = load i64, i64* %16, align 8, !dbg !7479
  %arrayidx6 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %14, i64 %17, !dbg !7476
  %decl = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx6, i32 0, i32 0, !dbg !7480
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7480
  store %union.tree_node* %18, %union.tree_node** %decla, align 8, !dbg !7481
  %19 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7482
  %20 = load i8*, i8** %b.addr, align 8, !dbg !7483
  %21 = bitcast i8* %20 to i64*, !dbg !7484
  %22 = load i64, i64* %21, align 8, !dbg !7485
  %arrayidx7 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %19, i64 %22, !dbg !7482
  %decl8 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx7, i32 0, i32 0, !dbg !7486
  %23 = load %union.tree_node*, %union.tree_node** %decl8, align 8, !dbg !7486
  store %union.tree_node* %23, %union.tree_node** %declb, align 8, !dbg !7487
  %24 = load %union.tree_node*, %union.tree_node** %decla, align 8, !dbg !7488
  %base = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !7488
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !7488
  %bf.load = load i64, i64* %25, align 8, !dbg !7488
  %bf.clear = and i64 %bf.load, 65535, !dbg !7488
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7488
  %cmp9 = icmp eq i32 %bf.cast, 141, !dbg !7490
  br i1 %cmp9, label %if.then10, label %if.else20, !dbg !7491

if.then10:                                        ; preds = %if.end5
  %26 = load %union.tree_node*, %union.tree_node** %declb, align 8, !dbg !7492
  %base11 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !7492
  %27 = bitcast %struct.tree_base* %base11 to i64*, !dbg !7492
  %bf.load12 = load i64, i64* %27, align 8, !dbg !7492
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !7492
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !7492
  %cmp15 = icmp eq i32 %bf.cast14, 141, !dbg !7495
  br i1 %cmp15, label %if.then16, label %if.else, !dbg !7496

if.then16:                                        ; preds = %if.then10
  %28 = load %union.tree_node*, %union.tree_node** %decla, align 8, !dbg !7497
  %ssa_name = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !7497
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !7497
  %29 = load i32, i32* %version, align 8, !dbg !7497
  store i32 %29, i32* %uida, align 4, !dbg !7498
  %30 = load %union.tree_node*, %union.tree_node** %declb, align 8, !dbg !7499
  %ssa_name17 = bitcast %union.tree_node* %30 to %struct.tree_ssa_name*, !dbg !7499
  %version18 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name17, i32 0, i32 3, !dbg !7499
  %31 = load i32, i32* %version18, align 8, !dbg !7499
  store i32 %31, i32* %uidb, align 4, !dbg !7500
  br label %if.end19, !dbg !7501

if.else:                                          ; preds = %if.then10
  store i32 -1, i32* %retval, align 4, !dbg !7502
  br label %return, !dbg !7502

if.end19:                                         ; preds = %if.then16
  br label %if.end31, !dbg !7503

if.else20:                                        ; preds = %if.end5
  %32 = load %union.tree_node*, %union.tree_node** %declb, align 8, !dbg !7504
  %base21 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !7504
  %33 = bitcast %struct.tree_base* %base21 to i64*, !dbg !7504
  %bf.load22 = load i64, i64* %33, align 8, !dbg !7504
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !7504
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !7504
  %cmp25 = icmp eq i32 %bf.cast24, 141, !dbg !7506
  br i1 %cmp25, label %if.then26, label %if.else27, !dbg !7507

if.then26:                                        ; preds = %if.else20
  store i32 1, i32* %retval, align 4, !dbg !7508
  br label %return, !dbg !7508

if.else27:                                        ; preds = %if.else20
  %34 = load %union.tree_node*, %union.tree_node** %decla, align 8, !dbg !7509
  %decl_minimal = bitcast %union.tree_node* %34 to %struct.tree_decl_minimal*, !dbg !7509
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !7509
  %35 = load i32, i32* %uid, align 4, !dbg !7509
  store i32 %35, i32* %uida, align 4, !dbg !7510
  %36 = load %union.tree_node*, %union.tree_node** %declb, align 8, !dbg !7511
  %decl_minimal28 = bitcast %union.tree_node* %36 to %struct.tree_decl_minimal*, !dbg !7511
  %uid29 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal28, i32 0, i32 2, !dbg !7511
  %37 = load i32, i32* %uid29, align 4, !dbg !7511
  store i32 %37, i32* %uidb, align 4, !dbg !7512
  br label %if.end30

if.end30:                                         ; preds = %if.else27
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.end19
  %38 = load i32, i32* %uida, align 4, !dbg !7513
  %39 = load i32, i32* %uidb, align 4, !dbg !7515
  %cmp32 = icmp ult i32 %38, %39, !dbg !7516
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !7517

if.then33:                                        ; preds = %if.end31
  store i32 -1, i32* %retval, align 4, !dbg !7518
  br label %return, !dbg !7518

if.end34:                                         ; preds = %if.end31
  %40 = load i32, i32* %uida, align 4, !dbg !7519
  %41 = load i32, i32* %uidb, align 4, !dbg !7521
  %cmp35 = icmp ugt i32 %40, %41, !dbg !7522
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !7523

if.then36:                                        ; preds = %if.end34
  store i32 1, i32* %retval, align 4, !dbg !7524
  br label %return, !dbg !7524

if.end37:                                         ; preds = %if.end34
  store i32 0, i32* %retval, align 4, !dbg !7525
  br label %return, !dbg !7525

return:                                           ; preds = %if.end37, %if.then36, %if.then33, %if.then26, %if.else, %if.then4, %if.then
  %42 = load i32, i32* %retval, align 4, !dbg !7526
  ret i32 %42, !dbg !7526
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @stack_var_conflict_p(i64 %x, i64 %y) #0 !dbg !7527 {
entry:
  %retval = alloca i8, align 1
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  %a = alloca %struct.stack_var*, align 8
  %b = alloca %struct.stack_var*, align 8
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !7530, metadata !DIExpression()), !dbg !7531
  store i64 %y, i64* %y.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %y.addr, metadata !7532, metadata !DIExpression()), !dbg !7533
  call void @llvm.dbg.declare(metadata %struct.stack_var** %a, metadata !7534, metadata !DIExpression()), !dbg !7535
  %0 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7536
  %1 = load i64, i64* %x.addr, align 8, !dbg !7537
  %arrayidx = getelementptr inbounds %struct.stack_var, %struct.stack_var* %0, i64 %1, !dbg !7536
  store %struct.stack_var* %arrayidx, %struct.stack_var** %a, align 8, !dbg !7535
  call void @llvm.dbg.declare(metadata %struct.stack_var** %b, metadata !7538, metadata !DIExpression()), !dbg !7539
  %2 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7540
  %3 = load i64, i64* %y.addr, align 8, !dbg !7541
  %arrayidx1 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %2, i64 %3, !dbg !7540
  store %struct.stack_var* %arrayidx1, %struct.stack_var** %b, align 8, !dbg !7539
  %4 = load %struct.stack_var*, %struct.stack_var** %a, align 8, !dbg !7542
  %conflicts = getelementptr inbounds %struct.stack_var, %struct.stack_var* %4, i32 0, i32 6, !dbg !7544
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %conflicts, align 8, !dbg !7544
  %tobool = icmp ne %struct.bitmap_head_def* %5, null, !dbg !7542
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7545

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.stack_var*, %struct.stack_var** %b, align 8, !dbg !7546
  %conflicts2 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %6, i32 0, i32 6, !dbg !7547
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %conflicts2, align 8, !dbg !7547
  %tobool3 = icmp ne %struct.bitmap_head_def* %7, null, !dbg !7546
  br i1 %tobool3, label %if.end, label %if.then, !dbg !7548

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !7549
  br label %return, !dbg !7549

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.stack_var*, %struct.stack_var** %a, align 8, !dbg !7550
  %conflicts4 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %8, i32 0, i32 6, !dbg !7551
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %conflicts4, align 8, !dbg !7551
  %10 = load i64, i64* %y.addr, align 8, !dbg !7552
  %conv = trunc i64 %10 to i32, !dbg !7552
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %9, i32 %conv), !dbg !7553
  %conv5 = trunc i32 %call to i8, !dbg !7553
  store i8 %conv5, i8* %retval, align 1, !dbg !7554
  br label %return, !dbg !7554

return:                                           ; preds = %if.end, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !7555
  ret i8 %11, !dbg !7555
}

; Function Attrs: noinline nounwind uwtable
define internal void @union_stack_vars(i64 %a, i64 %b, i64 %offset) #0 !dbg !7556 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %offset.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %last = alloca i64, align 8
  %vb = alloca %struct.stack_var*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %u = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7559, metadata !DIExpression()), !dbg !7560
  store i64 %b, i64* %b.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %b.addr, metadata !7561, metadata !DIExpression()), !dbg !7562
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !7563, metadata !DIExpression()), !dbg !7564
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7565, metadata !DIExpression()), !dbg !7566
  call void @llvm.dbg.declare(metadata i64* %last, metadata !7567, metadata !DIExpression()), !dbg !7568
  call void @llvm.dbg.declare(metadata %struct.stack_var** %vb, metadata !7569, metadata !DIExpression()), !dbg !7570
  %0 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7571
  %1 = load i64, i64* %b.addr, align 8, !dbg !7572
  %arrayidx = getelementptr inbounds %struct.stack_var, %struct.stack_var* %0, i64 %1, !dbg !7571
  store %struct.stack_var* %arrayidx, %struct.stack_var** %vb, align 8, !dbg !7570
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7573, metadata !DIExpression()), !dbg !7581
  call void @llvm.dbg.declare(metadata i32* %u, metadata !7582, metadata !DIExpression()), !dbg !7583
  %2 = load i64, i64* %b.addr, align 8, !dbg !7584
  store i64 %2, i64* %i, align 8, !dbg !7586
  store i64 %2, i64* %last, align 8, !dbg !7587
  br label %for.cond, !dbg !7588

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %i, align 8, !dbg !7589
  %cmp = icmp ne i64 %3, -1, !dbg !7591
  br i1 %cmp, label %for.body, label %for.end, !dbg !7592

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %offset.addr, align 8, !dbg !7593
  %5 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7595
  %6 = load i64, i64* %i, align 8, !dbg !7596
  %arrayidx1 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %5, i64 %6, !dbg !7595
  %offset2 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx1, i32 0, i32 1, !dbg !7597
  %7 = load i64, i64* %offset2, align 8, !dbg !7598
  %add = add nsw i64 %7, %4, !dbg !7598
  store i64 %add, i64* %offset2, align 8, !dbg !7598
  %8 = load i64, i64* %a.addr, align 8, !dbg !7599
  %9 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7600
  %10 = load i64, i64* %i, align 8, !dbg !7601
  %arrayidx3 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %9, i64 %10, !dbg !7600
  %representative = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx3, i32 0, i32 4, !dbg !7602
  store i64 %8, i64* %representative, align 8, !dbg !7603
  br label %for.inc, !dbg !7604

for.inc:                                          ; preds = %for.body
  %11 = load i64, i64* %i, align 8, !dbg !7605
  store i64 %11, i64* %last, align 8, !dbg !7606
  %12 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7607
  %13 = load i64, i64* %i, align 8, !dbg !7608
  %arrayidx4 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %12, i64 %13, !dbg !7607
  %next = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx4, i32 0, i32 5, !dbg !7609
  %14 = load i64, i64* %next, align 8, !dbg !7609
  store i64 %14, i64* %i, align 8, !dbg !7610
  br label %for.cond, !dbg !7611, !llvm.loop !7612

for.end:                                          ; preds = %for.cond
  %15 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7614
  %16 = load i64, i64* %a.addr, align 8, !dbg !7615
  %arrayidx5 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %15, i64 %16, !dbg !7614
  %next6 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx5, i32 0, i32 5, !dbg !7616
  %17 = load i64, i64* %next6, align 8, !dbg !7616
  %18 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7617
  %19 = load i64, i64* %last, align 8, !dbg !7618
  %arrayidx7 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %18, i64 %19, !dbg !7617
  %next8 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx7, i32 0, i32 5, !dbg !7619
  store i64 %17, i64* %next8, align 8, !dbg !7620
  %20 = load i64, i64* %b.addr, align 8, !dbg !7621
  %21 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7622
  %22 = load i64, i64* %a.addr, align 8, !dbg !7623
  %arrayidx9 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %21, i64 %22, !dbg !7622
  %next10 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx9, i32 0, i32 5, !dbg !7624
  store i64 %20, i64* %next10, align 8, !dbg !7625
  %23 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7626
  %24 = load i64, i64* %a.addr, align 8, !dbg !7628
  %arrayidx11 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %23, i64 %24, !dbg !7626
  %alignb = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx11, i32 0, i32 3, !dbg !7629
  %25 = load i32, i32* %alignb, align 8, !dbg !7629
  %26 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7630
  %27 = load i64, i64* %b.addr, align 8, !dbg !7631
  %arrayidx12 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %26, i64 %27, !dbg !7630
  %alignb13 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx12, i32 0, i32 3, !dbg !7632
  %28 = load i32, i32* %alignb13, align 8, !dbg !7632
  %cmp14 = icmp ult i32 %25, %28, !dbg !7633
  br i1 %cmp14, label %if.then, label %if.end, !dbg !7634

if.then:                                          ; preds = %for.end
  %29 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7635
  %30 = load i64, i64* %b.addr, align 8, !dbg !7636
  %arrayidx15 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %29, i64 %30, !dbg !7635
  %alignb16 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx15, i32 0, i32 3, !dbg !7637
  %31 = load i32, i32* %alignb16, align 8, !dbg !7637
  %32 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7638
  %33 = load i64, i64* %a.addr, align 8, !dbg !7639
  %arrayidx17 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %32, i64 %33, !dbg !7638
  %alignb18 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx17, i32 0, i32 3, !dbg !7640
  store i32 %31, i32* %alignb18, align 8, !dbg !7641
  br label %if.end, !dbg !7638

if.end:                                           ; preds = %if.then, %for.end
  %34 = load %struct.stack_var*, %struct.stack_var** %vb, align 8, !dbg !7642
  %conflicts = getelementptr inbounds %struct.stack_var, %struct.stack_var* %34, i32 0, i32 6, !dbg !7644
  %35 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %conflicts, align 8, !dbg !7644
  %tobool = icmp ne %struct.bitmap_head_def* %35, null, !dbg !7642
  br i1 %tobool, label %if.then19, label %if.end30, !dbg !7645

if.then19:                                        ; preds = %if.end
  %36 = load %struct.stack_var*, %struct.stack_var** %vb, align 8, !dbg !7646
  %conflicts20 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %36, i32 0, i32 6, !dbg !7646
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %conflicts20, align 8, !dbg !7646
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %37, i32 0, i32* %u), !dbg !7646
  br label %for.cond21, !dbg !7646

for.cond21:                                       ; preds = %for.inc26, %if.then19
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %u), !dbg !7649
  %tobool22 = icmp ne i8 %call, 0, !dbg !7646
  br i1 %tobool22, label %for.body23, label %for.end27, !dbg !7646

for.body23:                                       ; preds = %for.cond21
  %38 = load i64, i64* %a.addr, align 8, !dbg !7651
  %39 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7652
  %40 = load i32, i32* %u, align 4, !dbg !7653
  %idxprom = zext i32 %40 to i64, !dbg !7652
  %arrayidx24 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %39, i64 %idxprom, !dbg !7652
  %representative25 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx24, i32 0, i32 4, !dbg !7654
  %41 = load i64, i64* %representative25, align 8, !dbg !7654
  call void @add_stack_var_conflict(i64 %38, i64 %41), !dbg !7655
  br label %for.inc26, !dbg !7655

for.inc26:                                        ; preds = %for.body23
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %u), !dbg !7649
  br label %for.cond21, !dbg !7649, !llvm.loop !7656

for.end27:                                        ; preds = %for.cond21
  %42 = load %struct.stack_var*, %struct.stack_var** %vb, align 8, !dbg !7658
  %conflicts28 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %42, i32 0, i32 6, !dbg !7658
  %43 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %conflicts28, align 8, !dbg !7658
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %43), !dbg !7658
  %44 = load %struct.stack_var*, %struct.stack_var** %vb, align 8, !dbg !7658
  %conflicts29 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %44, i32 0, i32 6, !dbg !7658
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %conflicts29, align 8, !dbg !7658
  br label %if.end30, !dbg !7659

if.end30:                                         ; preds = %for.end27, %if.end
  ret void, !dbg !7660
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_alias_info_with_stack_vars() #0 !dbg !7661 {
entry:
  %decls_to_partitions = alloca %struct.pointer_map_t*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %var = alloca %union.tree_node*, align 8
  %part = alloca %struct.bitmap_head_def*, align 8
  %name = alloca %union.tree_node*, align 8
  %pi = alloca %struct.ptr_info_def*, align 8
  %decl = alloca %union.tree_node*, align 8
  %uid = alloca i32, align 4
  %i36 = alloca i32, align 4
  %visited = alloca %struct.pointer_set_t*, align 8
  %temp = alloca %struct.bitmap_head_def*, align 8
  %name55 = alloca %union.tree_node*, align 8
  %pi69 = alloca %struct.ptr_info_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %decls_to_partitions, metadata !7662, metadata !DIExpression()), !dbg !7663
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %decls_to_partitions, align 8, !dbg !7663
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7664, metadata !DIExpression()), !dbg !7665
  call void @llvm.dbg.declare(metadata i64* %j, metadata !7666, metadata !DIExpression()), !dbg !7667
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7668, metadata !DIExpression()), !dbg !7669
  store %union.tree_node* null, %union.tree_node** %var, align 8, !dbg !7669
  store i64 0, i64* %i, align 8, !dbg !7670
  br label %for.cond, !dbg !7672

for.cond:                                         ; preds = %for.inc32, %entry
  %0 = load i64, i64* %i, align 8, !dbg !7673
  %1 = load i64, i64* @stack_vars_num, align 8, !dbg !7675
  %cmp = icmp ult i64 %0, %1, !dbg !7676
  br i1 %cmp, label %for.body, label %for.end33, !dbg !7677

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %part, metadata !7678, metadata !DIExpression()), !dbg !7680
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %part, align 8, !dbg !7680
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !7681, metadata !DIExpression()), !dbg !7682
  call void @llvm.dbg.declare(metadata %struct.ptr_info_def** %pi, metadata !7683, metadata !DIExpression()), !dbg !7684
  %2 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7685
  %3 = load i64, i64* %i, align 8, !dbg !7687
  %arrayidx = getelementptr inbounds %struct.stack_var, %struct.stack_var* %2, i64 %3, !dbg !7685
  %representative = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx, i32 0, i32 4, !dbg !7688
  %4 = load i64, i64* %representative, align 8, !dbg !7688
  %5 = load i64, i64* %i, align 8, !dbg !7689
  %cmp1 = icmp ne i64 %4, %5, !dbg !7690
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !7691

lor.lhs.false:                                    ; preds = %for.body
  %6 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7692
  %7 = load i64, i64* %i, align 8, !dbg !7693
  %arrayidx2 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %6, i64 %7, !dbg !7692
  %next = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx2, i32 0, i32 5, !dbg !7694
  %8 = load i64, i64* %next, align 8, !dbg !7694
  %cmp3 = icmp eq i64 %8, -1, !dbg !7695
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7696

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc32, !dbg !7697

if.end:                                           ; preds = %lor.lhs.false
  %9 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_partitions, align 8, !dbg !7698
  %tobool = icmp ne %struct.pointer_map_t* %9, null, !dbg !7698
  br i1 %tobool, label %if.end6, label %if.then4, !dbg !7700

if.then4:                                         ; preds = %if.end
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !7701
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** %decls_to_partitions, align 8, !dbg !7703
  %call5 = call %struct.pointer_map_t* @pointer_map_create(), !dbg !7704
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7705
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !7705
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !7706
  %11 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !7706
  %decls_to_pointers = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %11, i32 0, i32 6, !dbg !7707
  store %struct.pointer_map_t* %call5, %struct.pointer_map_t** %decls_to_pointers, align 8, !dbg !7708
  br label %if.end6, !dbg !7709

if.end6:                                          ; preds = %if.then4, %if.end
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7710
  %cmp7 = icmp eq %union.tree_node* %12, null, !dbg !7712
  br i1 %cmp7, label %if.then8, label %if.end10, !dbg !7713

if.then8:                                         ; preds = %if.end6
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !7714
  %call9 = call %union.tree_node* @create_tmp_var(%union.tree_node* %13, i8* null), !dbg !7715
  store %union.tree_node* %call9, %union.tree_node** %var, align 8, !dbg !7716
  br label %if.end10, !dbg !7717

if.end10:                                         ; preds = %if.then8, %if.end6
  %14 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7718
  %call11 = call %union.tree_node* @make_ssa_name(%union.tree_node* %14, %union.gimple_statement_d* null), !dbg !7719
  store %union.tree_node* %call11, %union.tree_node** %name, align 8, !dbg !7720
  %call12 = call %struct.bitmap_head_def* @bitmap_gc_alloc_stat(), !dbg !7721
  store %struct.bitmap_head_def* %call12, %struct.bitmap_head_def** %part, align 8, !dbg !7722
  %15 = load i64, i64* %i, align 8, !dbg !7723
  store i64 %15, i64* %j, align 8, !dbg !7725
  br label %for.cond13, !dbg !7726

for.cond13:                                       ; preds = %for.inc, %if.end10
  %16 = load i64, i64* %j, align 8, !dbg !7727
  %cmp14 = icmp ne i64 %16, -1, !dbg !7729
  br i1 %cmp14, label %for.body15, label %for.end, !dbg !7730

for.body15:                                       ; preds = %for.cond13
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7731, metadata !DIExpression()), !dbg !7733
  %17 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7734
  %18 = load i64, i64* %j, align 8, !dbg !7735
  %arrayidx16 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %17, i64 %18, !dbg !7734
  %decl17 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx16, i32 0, i32 0, !dbg !7736
  %19 = load %union.tree_node*, %union.tree_node** %decl17, align 8, !dbg !7736
  store %union.tree_node* %19, %union.tree_node** %decl, align 8, !dbg !7733
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !7737, metadata !DIExpression()), !dbg !7738
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7739
  %decl_minimal = bitcast %union.tree_node* %20 to %struct.tree_decl_minimal*, !dbg !7739
  %uid18 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !7739
  %21 = load i32, i32* %uid18, align 4, !dbg !7739
  store i32 %21, i32* %uid, align 4, !dbg !7738
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7740
  %base = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !7740
  %23 = bitcast %struct.tree_base* %base to i64*, !dbg !7740
  %bf.load = load i64, i64* %23, align 8, !dbg !7740
  %bf.clear = and i64 %bf.load, 65535, !dbg !7740
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7740
  %idxprom = sext i32 %bf.cast to i64, !dbg !7740
  %arrayidx19 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7740
  %24 = load i32, i32* %arrayidx19, align 4, !dbg !7740
  %cmp20 = icmp eq i32 %24, 3, !dbg !7740
  br i1 %cmp20, label %land.lhs.true, label %cond.true, !dbg !7740

land.lhs.true:                                    ; preds = %for.body15
  %25 = load i32, i32* %uid, align 4, !dbg !7740
  %call21 = call %union.tree_node* @referenced_var_lookup(i32 %25), !dbg !7740
  %tobool22 = icmp ne %union.tree_node* %call21, null, !dbg !7740
  br i1 %tobool22, label %cond.false, label %cond.true, !dbg !7740

cond.true:                                        ; preds = %land.lhs.true, %for.body15
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 508, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7740
  br label %cond.end, !dbg !7740

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7740

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7740
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %part, align 8, !dbg !7741
  %27 = load i32, i32* %uid, align 4, !dbg !7742
  %call23 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %26, i32 %27), !dbg !7743
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %part, align 8, !dbg !7744
  %29 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_partitions, align 8, !dbg !7745
  %30 = load i32, i32* %uid, align 4, !dbg !7746
  %conv = zext i32 %30 to i64, !dbg !7747
  %31 = inttoptr i64 %conv to i8*, !dbg !7748
  %call24 = call i8** @pointer_map_insert(%struct.pointer_map_t* %29, i8* %31), !dbg !7749
  %32 = bitcast i8** %call24 to %struct.bitmap_head_def**, !dbg !7750
  store %struct.bitmap_head_def* %28, %struct.bitmap_head_def** %32, align 8, !dbg !7751
  %33 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7752
  %34 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7753
  %add.ptr25 = getelementptr inbounds %struct.function, %struct.function* %34, i64 0, !dbg !7753
  %gimple_df26 = getelementptr inbounds %struct.function, %struct.function* %add.ptr25, i32 0, i32 3, !dbg !7754
  %35 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df26, align 8, !dbg !7754
  %decls_to_pointers27 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %35, i32 0, i32 6, !dbg !7755
  %36 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_pointers27, align 8, !dbg !7755
  %37 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7756
  %38 = bitcast %union.tree_node* %37 to i8*, !dbg !7756
  %call28 = call i8** @pointer_map_insert(%struct.pointer_map_t* %36, i8* %38), !dbg !7757
  %39 = bitcast i8** %call28 to %union.tree_node**, !dbg !7758
  store %union.tree_node* %33, %union.tree_node** %39, align 8, !dbg !7759
  br label %for.inc, !dbg !7760

for.inc:                                          ; preds = %cond.end
  %40 = load %struct.stack_var*, %struct.stack_var** @stack_vars, align 8, !dbg !7761
  %41 = load i64, i64* %j, align 8, !dbg !7762
  %arrayidx29 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %40, i64 %41, !dbg !7761
  %next30 = getelementptr inbounds %struct.stack_var, %struct.stack_var* %arrayidx29, i32 0, i32 5, !dbg !7763
  %42 = load i64, i64* %next30, align 8, !dbg !7763
  store i64 %42, i64* %j, align 8, !dbg !7764
  br label %for.cond13, !dbg !7765, !llvm.loop !7766

for.end:                                          ; preds = %for.cond13
  %43 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7768
  %call31 = call %struct.ptr_info_def* @get_ptr_info(%union.tree_node* %43), !dbg !7769
  store %struct.ptr_info_def* %call31, %struct.ptr_info_def** %pi, align 8, !dbg !7770
  %44 = load %struct.ptr_info_def*, %struct.ptr_info_def** %pi, align 8, !dbg !7771
  %pt = getelementptr inbounds %struct.ptr_info_def, %struct.ptr_info_def* %44, i32 0, i32 0, !dbg !7772
  %45 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %part, align 8, !dbg !7773
  call void @pt_solution_set(%struct.pt_solution* %pt, %struct.bitmap_head_def* %45), !dbg !7774
  br label %for.inc32, !dbg !7775

for.inc32:                                        ; preds = %for.end, %if.then
  %46 = load i64, i64* %i, align 8, !dbg !7776
  %inc = add i64 %46, 1, !dbg !7776
  store i64 %inc, i64* %i, align 8, !dbg !7776
  br label %for.cond, !dbg !7777, !llvm.loop !7778

for.end33:                                        ; preds = %for.cond
  %47 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_partitions, align 8, !dbg !7780
  %tobool34 = icmp ne %struct.pointer_map_t* %47, null, !dbg !7780
  br i1 %tobool34, label %if.then35, label %if.end100, !dbg !7782

if.then35:                                        ; preds = %for.end33
  call void @llvm.dbg.declare(metadata i32* %i36, metadata !7783, metadata !DIExpression()), !dbg !7785
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited, metadata !7786, metadata !DIExpression()), !dbg !7789
  %call37 = call %struct.pointer_set_t* @pointer_set_create(), !dbg !7790
  store %struct.pointer_set_t* %call37, %struct.pointer_set_t** %visited, align 8, !dbg !7789
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %temp, metadata !7791, metadata !DIExpression()), !dbg !7792
  %call38 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !7793
  store %struct.bitmap_head_def* %call38, %struct.bitmap_head_def** %temp, align 8, !dbg !7792
  store i32 1, i32* %i36, align 4, !dbg !7794
  br label %for.cond39, !dbg !7796

for.cond39:                                       ; preds = %for.inc93, %if.then35
  %48 = load i32, i32* %i36, align 4, !dbg !7797
  %49 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7799
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %49, i64 0, !dbg !7799
  %gimple_df41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 3, !dbg !7799
  %50 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df41, align 8, !dbg !7799
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %50, i32 0, i32 2, !dbg !7799
  %51 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !7799
  %tobool42 = icmp ne %struct.VEC_tree_gc* %51, null, !dbg !7799
  br i1 %tobool42, label %cond.true43, label %cond.false48, !dbg !7799

cond.true43:                                      ; preds = %for.cond39
  %52 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7799
  %add.ptr44 = getelementptr inbounds %struct.function, %struct.function* %52, i64 0, !dbg !7799
  %gimple_df45 = getelementptr inbounds %struct.function, %struct.function* %add.ptr44, i32 0, i32 3, !dbg !7799
  %53 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df45, align 8, !dbg !7799
  %ssa_names46 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %53, i32 0, i32 2, !dbg !7799
  %54 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names46, align 8, !dbg !7799
  %base47 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %54, i32 0, i32 0, !dbg !7799
  br label %cond.end49, !dbg !7799

cond.false48:                                     ; preds = %for.cond39
  br label %cond.end49, !dbg !7799

cond.end49:                                       ; preds = %cond.false48, %cond.true43
  %cond50 = phi %struct.VEC_tree_base* [ %base47, %cond.true43 ], [ null, %cond.false48 ], !dbg !7799
  %call51 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond50), !dbg !7799
  %cmp52 = icmp ult i32 %48, %call51, !dbg !7800
  br i1 %cmp52, label %for.body54, label %for.end95, !dbg !7801

for.body54:                                       ; preds = %cond.end49
  call void @llvm.dbg.declare(metadata %union.tree_node** %name55, metadata !7802, metadata !DIExpression()), !dbg !7804
  %55 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7805
  %add.ptr56 = getelementptr inbounds %struct.function, %struct.function* %55, i64 0, !dbg !7805
  %gimple_df57 = getelementptr inbounds %struct.function, %struct.function* %add.ptr56, i32 0, i32 3, !dbg !7805
  %56 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df57, align 8, !dbg !7805
  %ssa_names58 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %56, i32 0, i32 2, !dbg !7805
  %57 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names58, align 8, !dbg !7805
  %tobool59 = icmp ne %struct.VEC_tree_gc* %57, null, !dbg !7805
  br i1 %tobool59, label %cond.true60, label %cond.false65, !dbg !7805

cond.true60:                                      ; preds = %for.body54
  %58 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7805
  %add.ptr61 = getelementptr inbounds %struct.function, %struct.function* %58, i64 0, !dbg !7805
  %gimple_df62 = getelementptr inbounds %struct.function, %struct.function* %add.ptr61, i32 0, i32 3, !dbg !7805
  %59 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df62, align 8, !dbg !7805
  %ssa_names63 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %59, i32 0, i32 2, !dbg !7805
  %60 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names63, align 8, !dbg !7805
  %base64 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %60, i32 0, i32 0, !dbg !7805
  br label %cond.end66, !dbg !7805

cond.false65:                                     ; preds = %for.body54
  br label %cond.end66, !dbg !7805

cond.end66:                                       ; preds = %cond.false65, %cond.true60
  %cond67 = phi %struct.VEC_tree_base* [ %base64, %cond.true60 ], [ null, %cond.false65 ], !dbg !7805
  %61 = load i32, i32* %i36, align 4, !dbg !7805
  %call68 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond67, i32 %61), !dbg !7805
  store %union.tree_node* %call68, %union.tree_node** %name55, align 8, !dbg !7804
  call void @llvm.dbg.declare(metadata %struct.ptr_info_def** %pi69, metadata !7806, metadata !DIExpression()), !dbg !7807
  %62 = load %union.tree_node*, %union.tree_node** %name55, align 8, !dbg !7808
  %tobool70 = icmp ne %union.tree_node* %62, null, !dbg !7808
  br i1 %tobool70, label %land.lhs.true71, label %if.end92, !dbg !7810

land.lhs.true71:                                  ; preds = %cond.end66
  %63 = load %union.tree_node*, %union.tree_node** %name55, align 8, !dbg !7811
  %common = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !7811
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7811
  %64 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7811
  %base72 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !7811
  %65 = bitcast %struct.tree_base* %base72 to i64*, !dbg !7811
  %bf.load73 = load i64, i64* %65, align 8, !dbg !7811
  %bf.clear74 = and i64 %bf.load73, 65535, !dbg !7811
  %bf.cast75 = trunc i64 %bf.clear74 to i32, !dbg !7811
  %cmp76 = icmp eq i32 %bf.cast75, 10, !dbg !7811
  br i1 %cmp76, label %land.lhs.true87, label %lor.lhs.false78, !dbg !7811

lor.lhs.false78:                                  ; preds = %land.lhs.true71
  %66 = load %union.tree_node*, %union.tree_node** %name55, align 8, !dbg !7811
  %common79 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !7811
  %type80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 2, !dbg !7811
  %67 = load %union.tree_node*, %union.tree_node** %type80, align 8, !dbg !7811
  %base81 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !7811
  %68 = bitcast %struct.tree_base* %base81 to i64*, !dbg !7811
  %bf.load82 = load i64, i64* %68, align 8, !dbg !7811
  %bf.clear83 = and i64 %bf.load82, 65535, !dbg !7811
  %bf.cast84 = trunc i64 %bf.clear83 to i32, !dbg !7811
  %cmp85 = icmp eq i32 %bf.cast84, 12, !dbg !7811
  br i1 %cmp85, label %land.lhs.true87, label %if.end92, !dbg !7812

land.lhs.true87:                                  ; preds = %lor.lhs.false78, %land.lhs.true71
  %69 = load %union.tree_node*, %union.tree_node** %name55, align 8, !dbg !7813
  %ssa_name = bitcast %union.tree_node* %69 to %struct.tree_ssa_name*, !dbg !7813
  %ptr_info = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 4, !dbg !7813
  %70 = load %struct.ptr_info_def*, %struct.ptr_info_def** %ptr_info, align 8, !dbg !7813
  store %struct.ptr_info_def* %70, %struct.ptr_info_def** %pi69, align 8, !dbg !7814
  %cmp88 = icmp ne %struct.ptr_info_def* %70, null, !dbg !7815
  br i1 %cmp88, label %if.then90, label %if.end92, !dbg !7816

if.then90:                                        ; preds = %land.lhs.true87
  %71 = load %struct.ptr_info_def*, %struct.ptr_info_def** %pi69, align 8, !dbg !7817
  %pt91 = getelementptr inbounds %struct.ptr_info_def, %struct.ptr_info_def* %71, i32 0, i32 0, !dbg !7818
  %72 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_partitions, align 8, !dbg !7819
  %73 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !7820
  %74 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp, align 8, !dbg !7821
  call void @add_partitioned_vars_to_ptset(%struct.pt_solution* %pt91, %struct.pointer_map_t* %72, %struct.pointer_set_t* %73, %struct.bitmap_head_def* %74), !dbg !7822
  br label %if.end92, !dbg !7822

if.end92:                                         ; preds = %if.then90, %land.lhs.true87, %lor.lhs.false78, %cond.end66
  br label %for.inc93, !dbg !7823

for.inc93:                                        ; preds = %if.end92
  %75 = load i32, i32* %i36, align 4, !dbg !7824
  %inc94 = add i32 %75, 1, !dbg !7824
  store i32 %inc94, i32* %i36, align 4, !dbg !7824
  br label %for.cond39, !dbg !7825, !llvm.loop !7826

for.end95:                                        ; preds = %cond.end49
  %76 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7828
  %add.ptr96 = getelementptr inbounds %struct.function, %struct.function* %76, i64 0, !dbg !7828
  %gimple_df97 = getelementptr inbounds %struct.function, %struct.function* %add.ptr96, i32 0, i32 3, !dbg !7829
  %77 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df97, align 8, !dbg !7829
  %escaped = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %77, i32 0, i32 4, !dbg !7830
  %78 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_partitions, align 8, !dbg !7831
  %79 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !7832
  %80 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp, align 8, !dbg !7833
  call void @add_partitioned_vars_to_ptset(%struct.pt_solution* %escaped, %struct.pointer_map_t* %78, %struct.pointer_set_t* %79, %struct.bitmap_head_def* %80), !dbg !7834
  %81 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7835
  %add.ptr98 = getelementptr inbounds %struct.function, %struct.function* %81, i64 0, !dbg !7835
  %gimple_df99 = getelementptr inbounds %struct.function, %struct.function* %add.ptr98, i32 0, i32 3, !dbg !7836
  %82 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df99, align 8, !dbg !7836
  %callused = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %82, i32 0, i32 5, !dbg !7837
  %83 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_partitions, align 8, !dbg !7838
  %84 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !7839
  %85 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp, align 8, !dbg !7840
  call void @add_partitioned_vars_to_ptset(%struct.pt_solution* %callused, %struct.pointer_map_t* %83, %struct.pointer_set_t* %84, %struct.bitmap_head_def* %85), !dbg !7841
  %86 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited, align 8, !dbg !7842
  call void @pointer_set_destroy(%struct.pointer_set_t* %86), !dbg !7843
  %87 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_partitions, align 8, !dbg !7844
  call void @pointer_map_destroy(%struct.pointer_map_t* %87), !dbg !7845
  %88 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp, align 8, !dbg !7846
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %88), !dbg !7846
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %temp, align 8, !dbg !7846
  br label %if.end100, !dbg !7847

if.end100:                                        ; preds = %for.end95, %for.end33
  ret void, !dbg !7848
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !7849 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !7857, metadata !DIExpression()), !dbg !7858
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !7859, metadata !DIExpression()), !dbg !7860
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !7861, metadata !DIExpression()), !dbg !7862
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !7863, metadata !DIExpression()), !dbg !7864
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !7865
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !7866
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !7866
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7867
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !7868
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !7869
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7870
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !7871
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !7872
  br label %while.body, !dbg !7873

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7874
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !7877
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !7877
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !7874
  br i1 %tobool, label %if.end, label %if.then, !dbg !7878

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7879
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !7881
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !7882
  br label %while.end, !dbg !7883

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7884
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !7886
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !7886
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !7887
  %9 = load i32, i32* %indx, align 8, !dbg !7887
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !7888
  %div = udiv i32 %10, 128, !dbg !7889
  %cmp = icmp uge i32 %9, %div, !dbg !7890
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !7891

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !7892

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7893
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !7894
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !7894
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !7895
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !7895
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7896
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !7897
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !7898
  br label %while.body, !dbg !7873, !llvm.loop !7899

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7901
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !7903
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !7903
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !7904
  %17 = load i32, i32* %indx9, align 8, !dbg !7904
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !7905
  %div10 = udiv i32 %18, 128, !dbg !7906
  %cmp11 = icmp ne i32 %17, %div10, !dbg !7907
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !7908

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7909
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !7910
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !7910
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !7911
  %21 = load i32, i32* %indx14, align 8, !dbg !7911
  %mul = mul i32 %21, 128, !dbg !7912
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !7913
  br label %if.end15, !dbg !7914

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !7915
  %div16 = udiv i32 %22, 64, !dbg !7916
  %rem = urem i32 %div16, 2, !dbg !7917
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7918
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !7919
  store i32 %rem, i32* %word_no, align 8, !dbg !7920
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7921
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !7922
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !7922
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !7923
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7924
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !7925
  %27 = load i32, i32* %word_no18, align 8, !dbg !7925
  %idxprom = zext i32 %27 to i64, !dbg !7921
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !7921
  %28 = load i64, i64* %arrayidx, align 8, !dbg !7921
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7926
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !7927
  store i64 %28, i64* %bits19, align 8, !dbg !7928
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !7929
  %rem20 = urem i32 %30, 64, !dbg !7930
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7931
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !7932
  %32 = load i64, i64* %bits21, align 8, !dbg !7933
  %sh_prom = zext i32 %rem20 to i64, !dbg !7933
  %shr = lshr i64 %32, %sh_prom, !dbg !7933
  store i64 %shr, i64* %bits21, align 8, !dbg !7933
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7934
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !7935
  %34 = load i64, i64* %bits22, align 8, !dbg !7935
  %tobool23 = icmp ne i64 %34, 0, !dbg !7936
  %lnot = xor i1 %tobool23, true, !dbg !7936
  %lnot.ext = zext i1 %lnot to i32, !dbg !7936
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !7937
  %add = add i32 %35, %lnot.ext, !dbg !7937
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !7937
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !7938
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !7939
  store i32 %36, i32* %37, align 4, !dbg !7940
  ret void, !dbg !7941
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !7942 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !7945, metadata !DIExpression()), !dbg !7946
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !7947, metadata !DIExpression()), !dbg !7948
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7949
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !7951
  %1 = load i64, i64* %bits, align 8, !dbg !7951
  %tobool = icmp ne i64 %1, 0, !dbg !7949
  br i1 %tobool, label %if.then, label %if.end, !dbg !7952

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !7953

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !7954), !dbg !7956
  br label %while.cond, !dbg !7957

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7958
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !7959
  %3 = load i64, i64* %bits1, align 8, !dbg !7959
  %and = and i64 %3, 1, !dbg !7960
  %tobool2 = icmp ne i64 %and, 0, !dbg !7961
  %lnot = xor i1 %tobool2, true, !dbg !7961
  br i1 %lnot, label %while.body, label %while.end, !dbg !7957

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7962
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !7964
  %5 = load i64, i64* %bits3, align 8, !dbg !7965
  %shr = lshr i64 %5, 1, !dbg !7965
  store i64 %shr, i64* %bits3, align 8, !dbg !7965
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !7966
  %7 = load i32, i32* %6, align 4, !dbg !7967
  %add = add i32 %7, 1, !dbg !7967
  store i32 %add, i32* %6, align 4, !dbg !7967
  br label %while.cond, !dbg !7957, !llvm.loop !7968

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !7970
  br label %return, !dbg !7970

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !7971
  %9 = load i32, i32* %8, align 4, !dbg !7972
  %add4 = add i32 %9, 64, !dbg !7973
  %sub = sub i32 %add4, 1, !dbg !7974
  %div = udiv i32 %sub, 64, !dbg !7975
  %mul = mul i32 %div, 64, !dbg !7976
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !7977
  store i32 %mul, i32* %10, align 4, !dbg !7978
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7979
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !7980
  %12 = load i32, i32* %word_no, align 8, !dbg !7981
  %inc = add i32 %12, 1, !dbg !7981
  store i32 %inc, i32* %word_no, align 8, !dbg !7981
  br label %while.body6, !dbg !7982

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !7983

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7985
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !7986
  %14 = load i32, i32* %word_no8, align 8, !dbg !7986
  %cmp = icmp ne i32 %14, 2, !dbg !7987
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !7983

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7988
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !7990
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !7990
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !7991
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7992
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !7993
  %18 = load i32, i32* %word_no11, align 8, !dbg !7993
  %idxprom = zext i32 %18 to i64, !dbg !7988
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !7988
  %19 = load i64, i64* %arrayidx, align 8, !dbg !7988
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7994
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !7995
  store i64 %19, i64* %bits12, align 8, !dbg !7996
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !7997
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !7999
  %22 = load i64, i64* %bits13, align 8, !dbg !7999
  %tobool14 = icmp ne i64 %22, 0, !dbg !7997
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !8000

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !8001

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !8002
  %24 = load i32, i32* %23, align 4, !dbg !8003
  %add17 = add i32 %24, 64, !dbg !8003
  store i32 %add17, i32* %23, align 4, !dbg !8003
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8004
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !8005
  %26 = load i32, i32* %word_no18, align 8, !dbg !8006
  %inc19 = add i32 %26, 1, !dbg !8006
  store i32 %inc19, i32* %word_no18, align 8, !dbg !8006
  br label %while.cond7, !dbg !7983, !llvm.loop !8007

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8009
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !8010
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !8010
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !8011
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !8011
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8012
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !8013
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !8014
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8015
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !8017
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !8017
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !8015
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !8018

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !8019
  br label %return, !dbg !8019

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8020
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !8021
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !8021
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !8022
  %35 = load i32, i32* %indx, align 8, !dbg !8022
  %mul28 = mul i32 %35, 128, !dbg !8023
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !8024
  store i32 %mul28, i32* %36, align 4, !dbg !8025
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8026
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !8027
  store i32 0, i32* %word_no29, align 8, !dbg !8028
  br label %while.body6, !dbg !7982, !llvm.loop !8029

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !8031
  ret i8 %38, !dbg !8031
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !8032 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !8035, metadata !DIExpression()), !dbg !8036
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !8037, metadata !DIExpression()), !dbg !8038
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8039
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !8040
  %1 = load i64, i64* %bits, align 8, !dbg !8041
  %shr = lshr i64 %1, 1, !dbg !8041
  store i64 %shr, i64* %bits, align 8, !dbg !8041
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !8042
  %3 = load i32, i32* %2, align 4, !dbg !8043
  %add = add i32 %3, 1, !dbg !8043
  store i32 %add, i32* %2, align 4, !dbg !8043
  ret void, !dbg !8044
}

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !8045 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8049, metadata !DIExpression()), !dbg !8050
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8051, metadata !DIExpression()), !dbg !8052
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8053
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8053
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8054
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8055
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !8056
  ret %union.tree_node* %call, !dbg !8057
}

declare dso_local %struct.bitmap_head_def* @bitmap_gc_alloc_stat() #2

declare dso_local %union.tree_node* @referenced_var_lookup(i32) #2

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

declare dso_local %struct.ptr_info_def* @get_ptr_info(%union.tree_node*) #2

declare dso_local void @pt_solution_set(%struct.pt_solution*, %struct.bitmap_head_def*) #2

declare dso_local %struct.pointer_set_t* @pointer_set_create() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !8058 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !8063, metadata !DIExpression()), !dbg !8064
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8064
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !8064
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8064

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8064
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !8064
  %2 = load i32, i32* %num, align 8, !dbg !8064
  br label %cond.end, !dbg !8064

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8064

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8064
  ret i32 %cond, !dbg !8064
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !8065 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !8068, metadata !DIExpression()), !dbg !8069
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8070, metadata !DIExpression()), !dbg !8069
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8069
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !8069
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8069

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8069
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8069
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !8069
  %3 = load i32, i32* %num, align 8, !dbg !8069
  %cmp = icmp ult i32 %1, %3, !dbg !8069
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8071
  %land.ext = zext i1 %4 to i32, !dbg !8069
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8069
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !8069
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8069
  %idxprom = zext i32 %6 to i64, !dbg !8069
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !8069
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8069
  ret %union.tree_node* %7, !dbg !8069
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_partitioned_vars_to_ptset(%struct.pt_solution* %pt, %struct.pointer_map_t* %decls_to_partitions, %struct.pointer_set_t* %visited, %struct.bitmap_head_def* %temp) #0 !dbg !8072 {
entry:
  %pt.addr = alloca %struct.pt_solution*, align 8
  %decls_to_partitions.addr = alloca %struct.pointer_map_t*, align 8
  %visited.addr = alloca %struct.pointer_set_t*, align 8
  %temp.addr = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %part = alloca %struct.bitmap_head_def**, align 8
  store %struct.pt_solution* %pt, %struct.pt_solution** %pt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pt_solution** %pt.addr, metadata !8076, metadata !DIExpression()), !dbg !8077
  store %struct.pointer_map_t* %decls_to_partitions, %struct.pointer_map_t** %decls_to_partitions.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_map_t** %decls_to_partitions.addr, metadata !8078, metadata !DIExpression()), !dbg !8079
  store %struct.pointer_set_t* %visited, %struct.pointer_set_t** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pointer_set_t** %visited.addr, metadata !8080, metadata !DIExpression()), !dbg !8081
  store %struct.bitmap_head_def* %temp, %struct.bitmap_head_def** %temp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %temp.addr, metadata !8082, metadata !DIExpression()), !dbg !8083
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !8084, metadata !DIExpression()), !dbg !8085
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8086, metadata !DIExpression()), !dbg !8087
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %part, metadata !8088, metadata !DIExpression()), !dbg !8089
  %0 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !8090
  %1 = bitcast %struct.pt_solution* %0 to i8*, !dbg !8092
  %bf.load = load i8, i8* %1, align 8, !dbg !8092
  %bf.clear = and i8 %bf.load, 1, !dbg !8092
  %bf.cast = zext i8 %bf.clear to i32, !dbg !8092
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8090
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !8093

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !8094
  %vars = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %2, i32 0, i32 1, !dbg !8095
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars, align 8, !dbg !8095
  %cmp = icmp eq %struct.bitmap_head_def* %3, null, !dbg !8096
  br i1 %cmp, label %if.then, label %lor.lhs.false1, !dbg !8097

lor.lhs.false1:                                   ; preds = %lor.lhs.false
  %4 = load %struct.pointer_set_t*, %struct.pointer_set_t** %visited.addr, align 8, !dbg !8098
  %5 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !8099
  %vars2 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %5, i32 0, i32 1, !dbg !8100
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars2, align 8, !dbg !8100
  %7 = bitcast %struct.bitmap_head_def* %6 to i8*, !dbg !8099
  %call = call i32 @pointer_set_insert(%struct.pointer_set_t* %4, i8* %7), !dbg !8101
  %tobool3 = icmp ne i32 %call, 0, !dbg !8101
  br i1 %tobool3, label %if.then, label %if.end, !dbg !8102

if.then:                                          ; preds = %lor.lhs.false1, %lor.lhs.false, %entry
  br label %if.end20, !dbg !8103

if.end:                                           ; preds = %lor.lhs.false1
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp.addr, align 8, !dbg !8104
  call void @bitmap_clear(%struct.bitmap_head_def* %8), !dbg !8105
  %9 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !8106
  %vars4 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %9, i32 0, i32 1, !dbg !8106
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars4, align 8, !dbg !8106
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %10, i32 0, i32* %i), !dbg !8106
  br label %for.cond, !dbg !8106

for.cond:                                         ; preds = %for.inc, %if.end
  %call5 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8108
  %tobool6 = icmp ne i8 %call5, 0, !dbg !8106
  br i1 %tobool6, label %for.body, label %for.end, !dbg !8106

for.body:                                         ; preds = %for.cond
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp.addr, align 8, !dbg !8110
  %tobool7 = icmp ne %struct.bitmap_head_def* %11, null, !dbg !8110
  br i1 %tobool7, label %lor.lhs.false8, label %land.lhs.true, !dbg !8112

lor.lhs.false8:                                   ; preds = %for.body
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp.addr, align 8, !dbg !8113
  %13 = load i32, i32* %i, align 4, !dbg !8114
  %call9 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %12, i32 %13), !dbg !8115
  %tobool10 = icmp ne i32 %call9, 0, !dbg !8115
  br i1 %tobool10, label %if.end15, label %land.lhs.true, !dbg !8116

land.lhs.true:                                    ; preds = %lor.lhs.false8, %for.body
  %14 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decls_to_partitions.addr, align 8, !dbg !8117
  %15 = load i32, i32* %i, align 4, !dbg !8118
  %conv = zext i32 %15 to i64, !dbg !8119
  %16 = inttoptr i64 %conv to i8*, !dbg !8120
  %call11 = call i8** @pointer_map_contains(%struct.pointer_map_t* %14, i8* %16), !dbg !8121
  %17 = bitcast i8** %call11 to %struct.bitmap_head_def**, !dbg !8122
  store %struct.bitmap_head_def** %17, %struct.bitmap_head_def*** %part, align 8, !dbg !8123
  %tobool12 = icmp ne %struct.bitmap_head_def** %17, null, !dbg !8123
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !8124

if.then13:                                        ; preds = %land.lhs.true
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp.addr, align 8, !dbg !8125
  %19 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %part, align 8, !dbg !8126
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %19, align 8, !dbg !8127
  %call14 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %18, %struct.bitmap_head_def* %20), !dbg !8128
  br label %if.end15, !dbg !8128

if.end15:                                         ; preds = %if.then13, %land.lhs.true, %lor.lhs.false8
  br label %for.inc, !dbg !8129

for.inc:                                          ; preds = %if.end15
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8108
  br label %for.cond, !dbg !8108, !llvm.loop !8130

for.end:                                          ; preds = %for.cond
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp.addr, align 8, !dbg !8132
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %21, i32 0, i32 0, !dbg !8132
  %22 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !8132
  %tobool16 = icmp ne %struct.bitmap_element_def* %22, null, !dbg !8132
  br i1 %tobool16, label %if.then17, label %if.end20, !dbg !8134

if.then17:                                        ; preds = %for.end
  %23 = load %struct.pt_solution*, %struct.pt_solution** %pt.addr, align 8, !dbg !8135
  %vars18 = getelementptr inbounds %struct.pt_solution, %struct.pt_solution* %23, i32 0, i32 1, !dbg !8136
  %24 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %vars18, align 8, !dbg !8136
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %temp.addr, align 8, !dbg !8137
  %call19 = call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %24, %struct.bitmap_head_def* %25), !dbg !8138
  br label %if.end20, !dbg !8138

if.end20:                                         ; preds = %if.then, %if.then17, %for.end
  ret void, !dbg !8139
}

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

declare dso_local i32 @pointer_set_insert(%struct.pointer_set_t*, i8*) #2

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !8140 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !8145, metadata !DIExpression()), !dbg !8146
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8146
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !8146
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8146

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8146
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !8146
  %2 = load i32, i32* %num, align 8, !dbg !8146
  br label %cond.end, !dbg !8146

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8146

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8146
  ret i32 %cond, !dbg !8146
}

declare dso_local void @init_rtl_bb_info(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !8147 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !8150, metadata !DIExpression()), !dbg !8151
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8152, metadata !DIExpression()), !dbg !8151
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8151
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !8151
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8151

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8151
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8151
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !8151
  %3 = load i32, i32* %num, align 8, !dbg !8151
  %cmp = icmp ult i32 %1, %3, !dbg !8151
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8153
  %land.ext = zext i1 %4 to i32, !dbg !8151
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !8151
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !8151
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8151
  %idxprom = zext i32 %6 to i64, !dbg !8151
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !8151
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !8151
  ret %struct.edge_def* %7, !dbg !8151
}

declare dso_local %union.tree_node* @gimple_block_label(%struct.basic_block_def*) #2

declare dso_local void @emit_jump(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @label_rtx(%union.tree_node*) #2

declare dso_local %struct.basic_block_def* @create_basic_block(i8*, i8*, %struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @get_last_insn() #2

declare dso_local void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

declare dso_local void @update_bb_for_insn(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !8154 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !8157, metadata !DIExpression()), !dbg !8158
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !8159
  %3 = load i32, i32* %index, align 8, !dbg !8159
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8160
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !8160
  %6 = load i32, i32* %5, align 8, !dbg !8160
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !8160
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !8160
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !8160
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !8160
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8160

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8160
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !8160
  %11 = load i32, i32* %10, align 8, !dbg !8160
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !8160
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !8160
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !8160
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !8160
  br label %cond.end, !dbg !8160

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8160

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8160
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8160
  %cmp = icmp eq i32 %3, %call2, !dbg !8161
  %conv = zext i1 %cmp to i32, !dbg !8161
  %conv3 = trunc i32 %conv to i8, !dbg !8162
  ret i8 %conv3, !dbg !8163
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !8164 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !8165, metadata !DIExpression()), !dbg !8166
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8167
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !8167
  %5 = load i32, i32* %4, align 8, !dbg !8167
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !8167
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !8167
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !8167
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !8167
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8167

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8167
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !8167
  %10 = load i32, i32* %9, align 8, !dbg !8167
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !8167
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !8167
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !8167
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !8167
  br label %cond.end, !dbg !8167

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8167

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8167
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !8167
  %13 = load i32, i32* %index, align 8, !dbg !8167
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !8167
  ret %struct.edge_def* %call2, !dbg !8168
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !8169 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !8172, metadata !DIExpression()), !dbg !8173
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !8174
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !8174
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !8174
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8174

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8174
  br label %cond.end, !dbg !8174

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8174

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8174
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !8175
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !8175
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !8176
  ret %struct.VEC_edge_gc* %5, !dbg !8177
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !8178 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !8181, metadata !DIExpression()), !dbg !8182
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !8183, metadata !DIExpression()), !dbg !8184
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !8185
  %call = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %0), !dbg !8186
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8187
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !8188
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !8189
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !8190
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !8191
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8192
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !8192
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !8193
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !8194

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8195
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !8195
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !8196
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8196
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !8197
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !8198

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8199
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !8199
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !8200
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !8200
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !8201
  br label %cond.end, !dbg !8198

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !8198

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !8198
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !8202
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !8203
  ret void, !dbg !8204
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !8205 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8208, metadata !DIExpression()), !dbg !8209
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8210
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !8210
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8210
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !8210
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8210

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8210
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !8210
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !8210
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !8210
  br label %cond.end, !dbg !8210

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8210

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8210
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8210
  %cmp = icmp eq i32 %call, 1, !dbg !8211
  %conv = zext i1 %cmp to i32, !dbg !8211
  %conv2 = trunc i32 %conv to i8, !dbg !8210
  ret i8 %conv2, !dbg !8212
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !8213 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8216, metadata !DIExpression()), !dbg !8217
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8218
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !8219
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !8220
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8220
  ret %struct.basic_block_def* %1, !dbg !8221
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %gs) #0 !dbg !8222 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8223, metadata !DIExpression()), !dbg !8224
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8225
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !8226
  ret %union.tree_node* %call, !dbg !8227
}

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !8228 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8231, metadata !DIExpression()), !dbg !8232
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8233
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !8233
  %tobool = icmp ne i8 %call, 0, !dbg !8233
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8233

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8233
  br label %cond.end, !dbg !8233

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8233

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8233
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8234
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !8234
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8234
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !8234
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8234

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8234
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !8234
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !8234
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !8234
  br label %cond.end5, !dbg !8234

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !8234

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !8234
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !8234
  ret %struct.edge_def* %call7, !dbg !8235
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) #0 !dbg !8236 {
entry:
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !8237, metadata !DIExpression()), !dbg !8238
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !8239, metadata !DIExpression()), !dbg !8240
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !8241
  %call = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %0), !dbg !8242
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8243
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !8244
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !8245
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !8246
  store %struct.gimple_seq_d* %1, %struct.gimple_seq_d** %seq1, align 8, !dbg !8247
  %ptr2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8248
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr2, align 8, !dbg !8248
  %tobool = icmp ne %struct.gimple_seq_node_d* %2, null, !dbg !8249
  br i1 %tobool, label %land.lhs.true, label %cond.false, !dbg !8250

land.lhs.true:                                    ; preds = %entry
  %ptr3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8251
  %3 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr3, align 8, !dbg !8251
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %3, i32 0, i32 0, !dbg !8252
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8252
  %tobool4 = icmp ne %union.gimple_statement_d* %4, null, !dbg !8253
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !8254

cond.true:                                        ; preds = %land.lhs.true
  %ptr5 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !8255
  %5 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr5, align 8, !dbg !8255
  %stmt6 = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %5, i32 0, i32 0, !dbg !8256
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !8256
  %call7 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %6), !dbg !8257
  br label %cond.end, !dbg !8254

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !8254

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %cond.false ], !dbg !8254
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !8258
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !8259
  ret void, !dbg !8260
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_gimple_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !8261 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lp_nr = alloca i32, align 4
  %last = alloca %struct.rtx_def*, align 8
  %saved_location = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8264, metadata !DIExpression()), !dbg !8265
  call void @llvm.dbg.declare(metadata i32* %lp_nr, metadata !8266, metadata !DIExpression()), !dbg !8267
  store i32 0, i32* %lp_nr, align 4, !dbg !8267
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8268, metadata !DIExpression()), !dbg !8269
  store %struct.rtx_def* null, %struct.rtx_def** %last, align 8, !dbg !8269
  call void @llvm.dbg.declare(metadata i32* %saved_location, metadata !8270, metadata !DIExpression()), !dbg !8271
  %0 = load i32, i32* @input_location, align 4, !dbg !8272
  store i32 %0, i32* %saved_location, align 4, !dbg !8271
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !8273
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !8274
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8275
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !8275
  %tobool = icmp ne %struct.function* %add.ptr, null, !dbg !8275
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8275

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 1971, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8275
  br label %cond.end, !dbg !8275

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8275

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8275
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8276
  %call1 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %2), !dbg !8278
  %tobool2 = icmp ne i8 %call1, 0, !dbg !8278
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8279

if.then:                                          ; preds = %cond.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8280
  %call3 = call i32 @gimple_location(%union.gimple_statement_d* %3), !dbg !8282
  store i32 %call3, i32* @input_location, align 4, !dbg !8283
  %4 = load i32, i32* @input_location, align 4, !dbg !8284
  call void @set_curr_insn_source_location(i32 %4), !dbg !8285
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8286
  %call4 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %5), !dbg !8287
  call void @set_curr_insn_block(%union.tree_node* %call4), !dbg !8288
  br label %if.end, !dbg !8289

if.end:                                           ; preds = %if.then, %cond.end
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8290
  call void @expand_gimple_stmt_1(%union.gimple_statement_d* %6), !dbg !8291
  call void @free_temp_slots(), !dbg !8292
  %7 = load i32, i32* %saved_location, align 4, !dbg !8293
  store i32 %7, i32* @input_location, align 4, !dbg !8294
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8295
  %call5 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %8), !dbg !8296
  store i32 %call5, i32* %lp_nr, align 4, !dbg !8297
  %9 = load i32, i32* %lp_nr, align 4, !dbg !8298
  %tobool6 = icmp ne i32 %9, 0, !dbg !8298
  br i1 %tobool6, label %if.then7, label %if.end26, !dbg !8300

if.then7:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8301, metadata !DIExpression()), !dbg !8303
  %10 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8304
  %call8 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %10), !dbg !8306
  store %struct.rtx_def* %call8, %struct.rtx_def** %insn, align 8, !dbg !8307
  br label %for.cond, !dbg !8308

for.cond:                                         ; preds = %for.inc, %if.then7
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8309
  %tobool9 = icmp ne %struct.rtx_def* %11, null, !dbg !8311
  br i1 %tobool9, label %for.body, label %for.end, !dbg !8311

for.body:                                         ; preds = %for.cond
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8312
  %call10 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %12, i32 25, %struct.rtx_def* null), !dbg !8315
  %tobool11 = icmp ne %struct.rtx_def* %call10, null, !dbg !8315
  br i1 %tobool11, label %if.end24, label %land.lhs.true, !dbg !8316

land.lhs.true:                                    ; preds = %for.body
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8317
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !8317
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8317
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !8317
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8317
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8317
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !8317
  %bf.load = load i32, i32* %15, align 8, !dbg !8317
  %bf.clear = and i32 %bf.load, 65535, !dbg !8317
  %cmp = icmp ne i32 %bf.clear, 25, !dbg !8318
  br i1 %cmp, label %land.lhs.true12, label %if.end24, !dbg !8319

land.lhs.true12:                                  ; preds = %land.lhs.true
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8320
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !8320
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !8320
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 5, !dbg !8320
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !8320
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !8320
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !8320
  %bf.load17 = load i32, i32* %18, align 8, !dbg !8320
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !8320
  %cmp19 = icmp ne i32 %bf.clear18, 24, !dbg !8321
  br i1 %cmp19, label %land.lhs.true20, label %if.end24, !dbg !8322

land.lhs.true20:                                  ; preds = %land.lhs.true12
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8323
  %call21 = call zeroext i8 @insn_could_throw_p(%struct.rtx_def* %19), !dbg !8324
  %conv = zext i8 %call21 to i32, !dbg !8324
  %tobool22 = icmp ne i32 %conv, 0, !dbg !8324
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !8325

if.then23:                                        ; preds = %land.lhs.true20
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8326
  %21 = load i32, i32* %lp_nr, align 4, !dbg !8327
  call void @make_reg_eh_region_note(%struct.rtx_def* %20, i32 0, i32 %21), !dbg !8328
  br label %if.end24, !dbg !8328

if.end24:                                         ; preds = %if.then23, %land.lhs.true20, %land.lhs.true12, %land.lhs.true, %for.body
  br label %for.inc, !dbg !8329

for.inc:                                          ; preds = %if.end24
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8330
  %call25 = call %struct.rtx_def* @next_real_insn(%struct.rtx_def* %22), !dbg !8331
  store %struct.rtx_def* %call25, %struct.rtx_def** %insn, align 8, !dbg !8332
  br label %for.cond, !dbg !8333, !llvm.loop !8334

for.end:                                          ; preds = %for.cond
  br label %if.end26, !dbg !8336

if.end26:                                         ; preds = %for.end, %if.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8337
  ret %struct.rtx_def* %23, !dbg !8338
}

declare dso_local %struct.rtx_def* @emit_label(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_note_after(i32, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @maybe_dump_rtl_for_gimple_stmt(%union.gimple_statement_d* %stmt, %struct.rtx_def* %since) #0 !dbg !8339 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %since.addr = alloca %struct.rtx_def*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8342, metadata !DIExpression()), !dbg !8343
  store %struct.rtx_def* %since, %struct.rtx_def** %since.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %since.addr, metadata !8344, metadata !DIExpression()), !dbg !8345
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8346
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !8346
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8348

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !8349
  %and = and i32 %1, 8, !dbg !8350
  %tobool1 = icmp ne i32 %and, 0, !dbg !8350
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8351

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8352
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0)), !dbg !8354
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8355
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8356
  %5 = load i32, i32* @dump_flags, align 4, !dbg !8357
  %and2 = and i32 %5, 128, !dbg !8358
  %or = or i32 2, %and2, !dbg !8359
  call void @print_gimple_stmt(%struct._IO_FILE* %3, %union.gimple_statement_d* %4, i32 0, i32 %or), !dbg !8360
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8361
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i64 0, i64 0)), !dbg !8362
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8363
  %8 = load %struct.rtx_def*, %struct.rtx_def** %since.addr, align 8, !dbg !8364
  %tobool4 = icmp ne %struct.rtx_def* %8, null, !dbg !8364
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !8364

cond.true:                                        ; preds = %if.then
  %9 = load %struct.rtx_def*, %struct.rtx_def** %since.addr, align 8, !dbg !8365
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !8365
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8365
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8365
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8365
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8365
  br label %cond.end, !dbg !8364

cond.false:                                       ; preds = %if.then
  %11 = load %struct.rtx_def*, %struct.rtx_def** %since.addr, align 8, !dbg !8366
  br label %cond.end, !dbg !8364

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %10, %cond.true ], [ %11, %cond.false ], !dbg !8364
  call void @print_rtl(%struct._IO_FILE* %7, %struct.rtx_def* %cond), !dbg !8367
  br label %if.end, !dbg !8368

if.end:                                           ; preds = %cond.end, %land.lhs.true, %entry
  ret void, !dbg !8369
}

declare dso_local i32 @get_curr_insn_source_location() #2

declare dso_local %union.tree_node* @get_curr_insn_block() #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !8370 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8374, metadata !DIExpression()), !dbg !8375
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8376, metadata !DIExpression()), !dbg !8377
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8378, metadata !DIExpression()), !dbg !8379
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8380
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8381
  %2 = load i32, i32* %flags.addr, align 4, !dbg !8382
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %0, %union.gimple_statement_d* %1, i32 %2), !dbg !8383
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8384
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 1, !dbg !8385
  store i32 1, i32* %iter_type, align 4, !dbg !8386
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8387
  %call = call %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %4), !dbg !8388
  ret %union.tree_node* %call, !dbg !8389
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8390 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8395, metadata !DIExpression()), !dbg !8396
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8397
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !8398
  %1 = load i8, i8* %done, align 8, !dbg !8398
  ret i8 %1, !dbg !8399
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @get_gimple_for_ssa_name(%union.tree_node* %exp) #0 !dbg !8400 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %v = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !8403, metadata !DIExpression()), !dbg !8404
  call void @llvm.dbg.declare(metadata i32* %v, metadata !8405, metadata !DIExpression()), !dbg !8406
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8407
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !8407
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !8407
  %1 = load i32, i32* %version, align 8, !dbg !8407
  store i32 %1, i32* %v, align 4, !dbg !8406
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 1), align 8, !dbg !8408
  %tobool = icmp ne %struct.bitmap_head_def* %2, null, !dbg !8410
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8411

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 1), align 8, !dbg !8412
  %4 = load i32, i32* %v, align 4, !dbg !8413
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %3, i32 %4), !dbg !8414
  %tobool1 = icmp ne i32 %call, 0, !dbg !8414
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8415

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8416
  %ssa_name2 = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !8416
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name2, i32 0, i32 2, !dbg !8416
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8416
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %retval, align 8, !dbg !8417
  br label %return, !dbg !8417

if.end:                                           ; preds = %land.lhs.true, %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8418
  br label %return, !dbg !8418

return:                                           ; preds = %if.end, %if.then
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !8419
  ret %union.gimple_statement_d* %7, !dbg !8419
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !8420 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8424, metadata !DIExpression()), !dbg !8425
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8426, metadata !DIExpression()), !dbg !8427
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8428
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !8428
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !8428
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8429
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !8430
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !8431
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8432
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !8433
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !8433
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !8434
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8434
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8435
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !8436
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8437
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8438
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %6), !dbg !8440
  %tobool = icmp ne i8 %call, 0, !dbg !8440
  br i1 %tobool, label %if.then, label %if.end, !dbg !8441

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8442
  br label %return, !dbg !8442

if.end:                                           ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8443
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !8444
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !8444
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8445
  br label %return, !dbg !8445

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8446
  ret %struct.ssa_use_operand_d* %9, !dbg !8446
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8447 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8452, metadata !DIExpression()), !dbg !8453
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8454
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !8455
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8455
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8456
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !8457
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !8457
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !8458
  %conv = zext i1 %cmp to i32, !dbg !8458
  %conv1 = trunc i32 %conv to i8, !dbg !8459
  ret i8 %conv1, !dbg !8460
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %s) #0 !dbg !8461 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8462, metadata !DIExpression()), !dbg !8463
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8464
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %0), !dbg !8466
  %tobool = icmp ne i8 %call, 0, !dbg !8466
  br i1 %tobool, label %if.then, label %if.end, !dbg !8467

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8468
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !8469
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8470
  %bf.load = load i32, i32* %2, align 8, !dbg !8470
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8470
  %cmp = icmp eq i32 %bf.lshr, 0, !dbg !8471
  %conv = zext i1 %cmp to i32, !dbg !8471
  %conv1 = trunc i32 %conv to i8, !dbg !8468
  store i8 %conv1, i8* %retval, align 1, !dbg !8472
  br label %return, !dbg !8472

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8473
  br label %return, !dbg !8473

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !8474
  ret i8 %3, !dbg !8474
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8475 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %old = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8478, metadata !DIExpression()), !dbg !8479
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %old, metadata !8480, metadata !DIExpression()), !dbg !8481
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8482
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !8483
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8483
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %old, align 8, !dbg !8481
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %old, align 8, !dbg !8484
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8485
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8485
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8486
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !8487
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !8488
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8489
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %5), !dbg !8491
  %tobool = icmp ne i8 %call, 0, !dbg !8491
  br i1 %tobool, label %if.then, label %if.end, !dbg !8492

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8493
  br label %return, !dbg !8493

if.end:                                           ; preds = %entry
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8494
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 0, !dbg !8495
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !8495
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8496
  br label %return, !dbg !8496

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8497
  ret %struct.ssa_use_operand_d* %8, !dbg !8497
}

declare dso_local %union.tree_node* @make_node_stat(i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_tei_stat(i32, i32, %union.tree_node*, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @emit_debug_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !8498 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8501, metadata !DIExpression()), !dbg !8502
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8503, metadata !DIExpression()), !dbg !8504
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8505
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !8505
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !8505
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8506
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !8507
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !8508
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8509
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !8510
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !8510
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !8511
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8511
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8512
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !8513
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8514
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8515
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !8516
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !8517
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8518
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !8519
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !8520
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8521
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8522
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !8523
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !8524
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !8525
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8526
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !8527
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !8528
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !8529
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !8530
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8531
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !8532
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !8533
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !8534
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8535
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !8537
  %tobool = icmp ne i8 %call, 0, !dbg !8537
  br i1 %tobool, label %if.then, label %if.end, !dbg !8538

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8539
  br label %return, !dbg !8539

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8540
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !8541
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !8541
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8542
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !8543
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8544
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !8544
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !8544
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !8544
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !8544
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !8544
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !8545
  br label %return, !dbg !8545

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !8546
  ret %union.gimple_statement_d* %18, !dbg !8546
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8547 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8548, metadata !DIExpression()), !dbg !8549
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8550
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !8551
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8551
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8552
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !8553
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !8553
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !8554
  %conv = zext i1 %cmp to i32, !dbg !8554
  %conv1 = trunc i32 %conv to i8, !dbg !8555
  ret i8 %conv1, !dbg !8556
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8557 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8558, metadata !DIExpression()), !dbg !8559
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8560
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !8561
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8561
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !8562
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8562
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8563
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !8564
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !8565
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8566
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !8567
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !8567
  ret %struct.ssa_use_operand_d* %5, !dbg !8568
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8569 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8570, metadata !DIExpression()), !dbg !8571
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8572
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !8573
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8573
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8574
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !8575
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !8576
  %conv = zext i1 %cmp to i32, !dbg !8576
  %conv1 = trunc i32 %conv to i8, !dbg !8577
  ret i8 %conv1, !dbg !8578
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !8579 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !8582, metadata !DIExpression()), !dbg !8583
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !8584, metadata !DIExpression()), !dbg !8585
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !8586
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !8587
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !8588
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !8589
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !8590
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !8590
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !8591
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !8592
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !8593
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !8594
  ret void, !dbg !8595
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8596 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8597, metadata !DIExpression()), !dbg !8598
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8599
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !8600
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !8600
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8601
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !8602
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8603
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8604
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !8606
  %tobool = icmp ne i8 %call, 0, !dbg !8606
  br i1 %tobool, label %if.then, label %if.else, !dbg !8607

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8608
  br label %return, !dbg !8608

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8609
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !8611
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !8611
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !8612
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8612
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8613
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !8614
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !8615
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8616
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !8617
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !8617
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8618
  br label %return, !dbg !8618

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8619
  ret %struct.ssa_use_operand_d* %10, !dbg !8619
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !8620 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8623, metadata !DIExpression()), !dbg !8624
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8625
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !8627
  %tobool = icmp ne i8 %call, 0, !dbg !8627
  br i1 %tobool, label %if.then, label %if.end, !dbg !8628

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8629
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !8631
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8632
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !8633
  br label %if.end, !dbg !8634

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8635
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8636 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8639, metadata !DIExpression()), !dbg !8640
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8641
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !8642
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !8643
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8643
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8644
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !8645
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8646
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8647
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !8649
  %tobool = icmp ne i8 %call, 0, !dbg !8649
  br i1 %tobool, label %if.then, label %if.end4, !dbg !8650

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8651
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !8654
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !8655
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8655
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !8656
  br i1 %cmp, label %if.then2, label %if.end, !dbg !8657

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8658
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !8659
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !8660
  br label %if.end, !dbg !8660

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8661
  br label %return, !dbg !8661

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8662
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !8663
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !8663
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8664
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !8665
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8666
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !8666
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !8666
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !8666
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !8666
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8666
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !8667
  br label %return, !dbg !8667

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !8668
  ret %union.gimple_statement_d* %13, !dbg !8668
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !8669 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !8672, metadata !DIExpression()), !dbg !8673
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !8674, metadata !DIExpression()), !dbg !8675
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8676
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !8678
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !8678
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !8676
  br i1 %tobool, label %if.then, label %if.end, !dbg !8679

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8680
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !8680
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !8680
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !8680
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_ptr), !dbg !8680
  store %union.tree_node* %call, %union.tree_node** %val, align 8, !dbg !8682
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8683
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !8684
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !8684
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !8685
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !8685
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8686
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !8687
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !8688
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8689
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !8690
  br label %return, !dbg !8690

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8691
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 2, !dbg !8693
  %10 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !8693
  %tobool4 = icmp ne %struct.def_optype_d* %10, null, !dbg !8691
  br i1 %tobool4, label %if.then5, label %if.end11, !dbg !8694

if.then5:                                         ; preds = %if.end
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8695
  %defs6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !8695
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs6, align 8, !dbg !8695
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 1, !dbg !8695
  %13 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !8695
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %13), !dbg !8695
  store %union.tree_node* %call7, %union.tree_node** %val, align 8, !dbg !8697
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8698
  %defs8 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !8699
  %15 = load %struct.def_optype_d*, %struct.def_optype_d** %defs8, align 8, !dbg !8699
  %next9 = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %15, i32 0, i32 0, !dbg !8700
  %16 = load %struct.def_optype_d*, %struct.def_optype_d** %next9, align 8, !dbg !8700
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8701
  %defs10 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 2, !dbg !8702
  store %struct.def_optype_d* %16, %struct.def_optype_d** %defs10, align 8, !dbg !8703
  %18 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8704
  store %union.tree_node* %18, %union.tree_node** %retval, align 8, !dbg !8705
  br label %return, !dbg !8705

if.end11:                                         ; preds = %if.end
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !8706
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 0, !dbg !8707
  store i8 1, i8* %done, align 8, !dbg !8708
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8709
  br label %return, !dbg !8709

return:                                           ; preds = %if.end11, %if.then5, %if.then
  %20 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8710
  ret %union.tree_node* %20, !dbg !8710
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @expand_gimple_cond(%struct.basic_block_def* %bb, %union.gimple_statement_d* %stmt) #0 !dbg !8711 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %dest = alloca %struct.basic_block_def*, align 8
  %new_edge = alloca %struct.edge_def*, align 8
  %true_edge = alloca %struct.edge_def*, align 8
  %false_edge = alloca %struct.edge_def*, align 8
  %last2 = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %second = alloca %union.gimple_statement_d*, align 8
  %code2 = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8714, metadata !DIExpression()), !dbg !8715
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8716, metadata !DIExpression()), !dbg !8717
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !8718, metadata !DIExpression()), !dbg !8719
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest, metadata !8720, metadata !DIExpression()), !dbg !8721
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_edge, metadata !8722, metadata !DIExpression()), !dbg !8723
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_edge, metadata !8724, metadata !DIExpression()), !dbg !8725
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_edge, metadata !8726, metadata !DIExpression()), !dbg !8727
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last2, metadata !8728, metadata !DIExpression()), !dbg !8729
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !8730, metadata !DIExpression()), !dbg !8731
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8732, metadata !DIExpression()), !dbg !8733
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !8734, metadata !DIExpression()), !dbg !8735
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !8736, metadata !DIExpression()), !dbg !8737
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8738
  %call = call i32 @gimple_cond_code(%union.gimple_statement_d* %0), !dbg !8739
  store i32 %call, i32* %code, align 4, !dbg !8740
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8741
  %call1 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %1), !dbg !8742
  store %union.tree_node* %call1, %union.tree_node** %op0, align 8, !dbg !8743
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8744
  %call2 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %2), !dbg !8745
  store %union.tree_node* %call2, %union.tree_node** %op1, align 8, !dbg !8746
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8747
  %call3 = call zeroext i8 @gimple_cond_single_var_p(%union.gimple_statement_d* %3), !dbg !8749
  %conv = zext i8 %call3 to i32, !dbg !8749
  %tobool = icmp ne i32 %conv, 0, !dbg !8749
  br i1 %tobool, label %land.lhs.true, label %if.end60, !dbg !8750

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 1), align 8, !dbg !8751
  %tobool4 = icmp ne %struct.bitmap_head_def* %4, null, !dbg !8752
  br i1 %tobool4, label %land.lhs.true5, label %if.end60, !dbg !8753

land.lhs.true5:                                   ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8754
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !8754
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !8754
  %bf.load = load i64, i64* %6, align 8, !dbg !8754
  %bf.clear = and i64 %bf.load, 65535, !dbg !8754
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8754
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !8755
  br i1 %cmp, label %land.lhs.true7, label %if.end60, !dbg !8756

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 1), align 8, !dbg !8757
  %8 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8758
  %ssa_name = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !8758
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !8758
  %9 = load i32, i32* %version, align 8, !dbg !8758
  %call8 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %7, i32 %9), !dbg !8759
  %tobool9 = icmp ne i32 %call8, 0, !dbg !8759
  br i1 %tobool9, label %if.then, label %if.end60, !dbg !8760

if.then:                                          ; preds = %land.lhs.true7
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %second, metadata !8761, metadata !DIExpression()), !dbg !8763
  %10 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8764
  %ssa_name10 = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !8764
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name10, i32 0, i32 2, !dbg !8764
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8764
  store %union.gimple_statement_d* %11, %union.gimple_statement_d** %second, align 8, !dbg !8763
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %second, align 8, !dbg !8765
  %call11 = call i32 @gimple_code(%union.gimple_statement_d* %12), !dbg !8767
  %cmp12 = icmp eq i32 %call11, 6, !dbg !8768
  br i1 %cmp12, label %if.then14, label %if.end59, !dbg !8769

if.then14:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %code2, metadata !8770, metadata !DIExpression()), !dbg !8772
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %second, align 8, !dbg !8773
  %call15 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %13), !dbg !8774
  store i32 %call15, i32* %code2, align 4, !dbg !8772
  %14 = load i32, i32* %code2, align 4, !dbg !8775
  %idxprom = sext i32 %14 to i64, !dbg !8775
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8775
  %15 = load i32, i32* %arrayidx, align 4, !dbg !8775
  %cmp16 = icmp eq i32 %15, 5, !dbg !8777
  br i1 %cmp16, label %if.then18, label %if.else, !dbg !8778

if.then18:                                        ; preds = %if.then14
  %16 = load i32, i32* %code2, align 4, !dbg !8779
  store i32 %16, i32* %code, align 4, !dbg !8781
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %second, align 8, !dbg !8782
  %call19 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %17), !dbg !8783
  store %union.tree_node* %call19, %union.tree_node** %op0, align 8, !dbg !8784
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %second, align 8, !dbg !8785
  %call20 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %18), !dbg !8786
  store %union.tree_node* %call20, %union.tree_node** %op1, align 8, !dbg !8787
  br label %if.end58, !dbg !8788

if.else:                                          ; preds = %if.then14
  %call21 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !8789
  %tobool22 = icmp ne i8 %call21, 0, !dbg !8789
  br i1 %tobool22, label %cond.false, label %cond.true, !dbg !8789

cond.true:                                        ; preds = %if.else
  br label %cond.end, !dbg !8789

cond.false:                                       ; preds = %if.else
  %19 = load i32, i32* @ix86_branch_cost, align 4, !dbg !8789
  br label %cond.end, !dbg !8789

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 2, %cond.true ], [ %19, %cond.false ], !dbg !8789
  %cmp23 = icmp slt i32 %cond, 4, !dbg !8791
  br i1 %cmp23, label %if.then25, label %if.end57, !dbg !8792

if.then25:                                        ; preds = %cond.end
  %20 = load i32, i32* %code2, align 4, !dbg !8793
  %cmp26 = icmp eq i32 %20, 89, !dbg !8796
  br i1 %cmp26, label %land.lhs.true28, label %lor.lhs.false, !dbg !8797

land.lhs.true28:                                  ; preds = %if.then25
  %21 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8798
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !8798
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8798
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8798
  %type29 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !8798
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 6, !dbg !8798
  %bf.load30 = load i32, i32* %precision, align 4, !dbg !8798
  %bf.clear31 = and i32 %bf.load30, 1023, !dbg !8798
  %cmp32 = icmp eq i32 %bf.clear31, 1, !dbg !8799
  br i1 %cmp32, label %land.lhs.true34, label %lor.lhs.false, !dbg !8800

land.lhs.true34:                                  ; preds = %land.lhs.true28
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %second, align 8, !dbg !8801
  %call35 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %23), !dbg !8801
  %base36 = bitcast %union.tree_node* %call35 to %struct.tree_base*, !dbg !8801
  %24 = bitcast %struct.tree_base* %base36 to i64*, !dbg !8801
  %bf.load37 = load i64, i64* %24, align 8, !dbg !8801
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !8801
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !8801
  %cmp40 = icmp ne i32 %bf.cast39, 23, !dbg !8802
  br i1 %cmp40, label %if.then44, label %lor.lhs.false, !dbg !8803

lor.lhs.false:                                    ; preds = %land.lhs.true34, %land.lhs.true28, %if.then25
  %25 = load i32, i32* %code2, align 4, !dbg !8804
  %cmp42 = icmp eq i32 %25, 93, !dbg !8805
  br i1 %cmp42, label %if.then44, label %if.else47, !dbg !8806

if.then44:                                        ; preds = %lor.lhs.false, %land.lhs.true34
  store i32 91, i32* %code, align 4, !dbg !8807
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %second, align 8, !dbg !8809
  %call45 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %26), !dbg !8810
  store %union.tree_node* %call45, %union.tree_node** %op0, align 8, !dbg !8811
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %second, align 8, !dbg !8812
  %call46 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %27), !dbg !8813
  store %union.tree_node* %call46, %union.tree_node** %op1, align 8, !dbg !8814
  br label %if.end56, !dbg !8815

if.else47:                                        ; preds = %lor.lhs.false
  %28 = load i32, i32* %code2, align 4, !dbg !8816
  %cmp48 = icmp eq i32 %28, 87, !dbg !8818
  br i1 %cmp48, label %if.then53, label %lor.lhs.false50, !dbg !8819

lor.lhs.false50:                                  ; preds = %if.else47
  %29 = load i32, i32* %code2, align 4, !dbg !8820
  %cmp51 = icmp eq i32 %29, 94, !dbg !8821
  br i1 %cmp51, label %if.then53, label %if.end, !dbg !8822

if.then53:                                        ; preds = %lor.lhs.false50, %if.else47
  store i32 92, i32* %code, align 4, !dbg !8823
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %second, align 8, !dbg !8825
  %call54 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %30), !dbg !8826
  store %union.tree_node* %call54, %union.tree_node** %op0, align 8, !dbg !8827
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %second, align 8, !dbg !8828
  %call55 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %31), !dbg !8829
  store %union.tree_node* %call55, %union.tree_node** %op1, align 8, !dbg !8830
  br label %if.end, !dbg !8831

if.end:                                           ; preds = %if.then53, %lor.lhs.false50
  br label %if.end56

if.end56:                                         ; preds = %if.end, %if.then44
  br label %if.end57, !dbg !8832

if.end57:                                         ; preds = %if.end56, %cond.end
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then18
  br label %if.end59, !dbg !8833

if.end59:                                         ; preds = %if.end58, %if.then
  br label %if.end60, !dbg !8834

if.end60:                                         ; preds = %if.end59, %land.lhs.true7, %land.lhs.true5, %land.lhs.true, %entry
  %call61 = call %struct.rtx_def* @get_last_insn(), !dbg !8835
  store %struct.rtx_def* %call61, %struct.rtx_def** %last, align 8, !dbg !8836
  store %struct.rtx_def* %call61, %struct.rtx_def** %last2, align 8, !dbg !8837
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8838
  call void @extract_true_false_edges_from_block(%struct.basic_block_def* %32, %struct.edge_def** %true_edge, %struct.edge_def** %false_edge), !dbg !8839
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8840
  %call62 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %33), !dbg !8842
  %tobool63 = icmp ne i8 %call62, 0, !dbg !8842
  br i1 %tobool63, label %if.then64, label %if.end67, !dbg !8843

if.then64:                                        ; preds = %if.end60
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8844
  %call65 = call i32 @gimple_location(%union.gimple_statement_d* %34), !dbg !8846
  call void @set_curr_insn_source_location(i32 %call65), !dbg !8847
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8848
  %call66 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %35), !dbg !8849
  call void @set_curr_insn_block(%union.tree_node* %call66), !dbg !8850
  br label %if.end67, !dbg !8851

if.end67:                                         ; preds = %if.then64, %if.end60
  %36 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8852
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %36, i32 0, i32 7, !dbg !8853
  %37 = load i32, i32* %flags, align 8, !dbg !8854
  %and = and i32 %37, -1025, !dbg !8854
  store i32 %and, i32* %flags, align 8, !dbg !8854
  %38 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8855
  %flags68 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 7, !dbg !8856
  %39 = load i32, i32* %flags68, align 8, !dbg !8857
  %and69 = and i32 %39, -2049, !dbg !8857
  store i32 %and69, i32* %flags68, align 8, !dbg !8857
  %40 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8858
  %dest70 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %40, i32 0, i32 1, !dbg !8860
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %dest70, align 8, !dbg !8860
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8861
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 6, !dbg !8862
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8862
  %cmp71 = icmp eq %struct.basic_block_def* %41, %43, !dbg !8863
  br i1 %cmp71, label %if.then73, label %if.end84, !dbg !8864

if.then73:                                        ; preds = %if.end67
  %44 = load i32, i32* %code, align 4, !dbg !8865
  %45 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8867
  %46 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8868
  %47 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8869
  %dest74 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 1, !dbg !8870
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %dest74, align 8, !dbg !8870
  %call75 = call %struct.rtx_def* @label_rtx_for_bb(%struct.basic_block_def* %48), !dbg !8871
  %49 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8872
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 8, !dbg !8873
  %50 = load i32, i32* %probability, align 4, !dbg !8873
  call void @jumpif_1(i32 %44, %union.tree_node* %45, %union.tree_node* %46, %struct.rtx_def* %call75, i32 %50), !dbg !8874
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8875
  %52 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8876
  call void @maybe_dump_rtl_for_gimple_stmt(%union.gimple_statement_d* %51, %struct.rtx_def* %52), !dbg !8877
  %53 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8878
  %goto_locus = getelementptr inbounds %struct.edge_def, %struct.edge_def* %53, i32 0, i32 5, !dbg !8880
  %54 = load i32, i32* %goto_locus, align 8, !dbg !8880
  %tobool76 = icmp ne i32 %54, 0, !dbg !8878
  br i1 %tobool76, label %if.then77, label %if.end81, !dbg !8881

if.then77:                                        ; preds = %if.then73
  %55 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8882
  %goto_locus78 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 5, !dbg !8884
  %56 = load i32, i32* %goto_locus78, align 8, !dbg !8884
  call void @set_curr_insn_source_location(i32 %56), !dbg !8885
  %57 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8886
  %goto_block = getelementptr inbounds %struct.edge_def, %struct.edge_def* %57, i32 0, i32 4, !dbg !8887
  %58 = load %union.tree_node*, %union.tree_node** %goto_block, align 8, !dbg !8887
  call void @set_curr_insn_block(%union.tree_node* %58), !dbg !8888
  %call79 = call i32 @curr_insn_locator(), !dbg !8889
  %59 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8890
  %goto_locus80 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %59, i32 0, i32 5, !dbg !8891
  store i32 %call79, i32* %goto_locus80, align 8, !dbg !8892
  br label %if.end81, !dbg !8893

if.end81:                                         ; preds = %if.then77, %if.then73
  %60 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8894
  %goto_block82 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %60, i32 0, i32 4, !dbg !8895
  store %union.tree_node* null, %union.tree_node** %goto_block82, align 8, !dbg !8896
  %61 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8897
  %flags83 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 7, !dbg !8898
  %62 = load i32, i32* %flags83, align 8, !dbg !8899
  %or = or i32 %62, 1, !dbg !8899
  store i32 %or, i32* %flags83, align 8, !dbg !8899
  %63 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8900
  %64 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8901
  call void @maybe_cleanup_end_of_block(%struct.edge_def* %63, %struct.rtx_def* %64), !dbg !8902
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !8903
  br label %return, !dbg !8903

if.end84:                                         ; preds = %if.end67
  %65 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8904
  %dest85 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %65, i32 0, i32 1, !dbg !8906
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %dest85, align 8, !dbg !8906
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8907
  %next_bb86 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 6, !dbg !8908
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb86, align 8, !dbg !8908
  %cmp87 = icmp eq %struct.basic_block_def* %66, %68, !dbg !8909
  br i1 %cmp87, label %if.then89, label %if.end104, !dbg !8910

if.then89:                                        ; preds = %if.end84
  %69 = load i32, i32* %code, align 4, !dbg !8911
  %70 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8913
  %71 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8914
  %72 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8915
  %dest90 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %72, i32 0, i32 1, !dbg !8916
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %dest90, align 8, !dbg !8916
  %call91 = call %struct.rtx_def* @label_rtx_for_bb(%struct.basic_block_def* %73), !dbg !8917
  %74 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8918
  %probability92 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %74, i32 0, i32 8, !dbg !8919
  %75 = load i32, i32* %probability92, align 4, !dbg !8919
  call void @jumpifnot_1(i32 %69, %union.tree_node* %70, %union.tree_node* %71, %struct.rtx_def* %call91, i32 %75), !dbg !8920
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8921
  %77 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8922
  call void @maybe_dump_rtl_for_gimple_stmt(%union.gimple_statement_d* %76, %struct.rtx_def* %77), !dbg !8923
  %78 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8924
  %goto_locus93 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 5, !dbg !8926
  %79 = load i32, i32* %goto_locus93, align 8, !dbg !8926
  %tobool94 = icmp ne i32 %79, 0, !dbg !8924
  br i1 %tobool94, label %if.then95, label %if.end100, !dbg !8927

if.then95:                                        ; preds = %if.then89
  %80 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8928
  %goto_locus96 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %80, i32 0, i32 5, !dbg !8930
  %81 = load i32, i32* %goto_locus96, align 8, !dbg !8930
  call void @set_curr_insn_source_location(i32 %81), !dbg !8931
  %82 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8932
  %goto_block97 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %82, i32 0, i32 4, !dbg !8933
  %83 = load %union.tree_node*, %union.tree_node** %goto_block97, align 8, !dbg !8933
  call void @set_curr_insn_block(%union.tree_node* %83), !dbg !8934
  %call98 = call i32 @curr_insn_locator(), !dbg !8935
  %84 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8936
  %goto_locus99 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %84, i32 0, i32 5, !dbg !8937
  store i32 %call98, i32* %goto_locus99, align 8, !dbg !8938
  br label %if.end100, !dbg !8939

if.end100:                                        ; preds = %if.then95, %if.then89
  %85 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8940
  %goto_block101 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %85, i32 0, i32 4, !dbg !8941
  store %union.tree_node* null, %union.tree_node** %goto_block101, align 8, !dbg !8942
  %86 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8943
  %flags102 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %86, i32 0, i32 7, !dbg !8944
  %87 = load i32, i32* %flags102, align 8, !dbg !8945
  %or103 = or i32 %87, 1, !dbg !8945
  store i32 %or103, i32* %flags102, align 8, !dbg !8945
  %88 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8946
  %89 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8947
  call void @maybe_cleanup_end_of_block(%struct.edge_def* %88, %struct.rtx_def* %89), !dbg !8948
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !8949
  br label %return, !dbg !8949

if.end104:                                        ; preds = %if.end84
  %90 = load i32, i32* %code, align 4, !dbg !8950
  %91 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8951
  %92 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !8952
  %93 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8953
  %dest105 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %93, i32 0, i32 1, !dbg !8954
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %dest105, align 8, !dbg !8954
  %call106 = call %struct.rtx_def* @label_rtx_for_bb(%struct.basic_block_def* %94), !dbg !8955
  %95 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !8956
  %probability107 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %95, i32 0, i32 8, !dbg !8957
  %96 = load i32, i32* %probability107, align 4, !dbg !8957
  call void @jumpif_1(i32 %90, %union.tree_node* %91, %union.tree_node* %92, %struct.rtx_def* %call106, i32 %96), !dbg !8958
  %call108 = call %struct.rtx_def* @get_last_insn(), !dbg !8959
  store %struct.rtx_def* %call108, %struct.rtx_def** %last, align 8, !dbg !8960
  %97 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8961
  %goto_locus109 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %97, i32 0, i32 5, !dbg !8963
  %98 = load i32, i32* %goto_locus109, align 8, !dbg !8963
  %tobool110 = icmp ne i32 %98, 0, !dbg !8961
  br i1 %tobool110, label %if.then111, label %if.end116, !dbg !8964

if.then111:                                       ; preds = %if.end104
  %99 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8965
  %goto_locus112 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %99, i32 0, i32 5, !dbg !8967
  %100 = load i32, i32* %goto_locus112, align 8, !dbg !8967
  call void @set_curr_insn_source_location(i32 %100), !dbg !8968
  %101 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8969
  %goto_block113 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %101, i32 0, i32 4, !dbg !8970
  %102 = load %union.tree_node*, %union.tree_node** %goto_block113, align 8, !dbg !8970
  call void @set_curr_insn_block(%union.tree_node* %102), !dbg !8971
  %call114 = call i32 @curr_insn_locator(), !dbg !8972
  %103 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8973
  %goto_locus115 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %103, i32 0, i32 5, !dbg !8974
  store i32 %call114, i32* %goto_locus115, align 8, !dbg !8975
  br label %if.end116, !dbg !8976

if.end116:                                        ; preds = %if.then111, %if.end104
  %104 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8977
  %goto_block117 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %104, i32 0, i32 4, !dbg !8978
  store %union.tree_node* null, %union.tree_node** %goto_block117, align 8, !dbg !8979
  %105 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !8980
  %dest118 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %105, i32 0, i32 1, !dbg !8981
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %dest118, align 8, !dbg !8981
  %call119 = call %struct.rtx_def* @label_rtx_for_bb(%struct.basic_block_def* %106), !dbg !8982
  call void @emit_jump(%struct.rtx_def* %call119), !dbg !8983
  %107 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8984
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8985
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %108, i32 0, i32 7, !dbg !8985
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8985
  %109 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8985
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %109, i32 0, i32 1, !dbg !8985
  store %struct.rtx_def* %107, %struct.rtx_def** %end_, align 8, !dbg !8986
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8987
  %il120 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %110, i32 0, i32 7, !dbg !8987
  %rtl121 = bitcast %union.basic_block_il_dependent* %il120 to %struct.rtl_bb_info**, !dbg !8987
  %111 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl121, align 8, !dbg !8987
  %end_122 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %111, i32 0, i32 1, !dbg !8987
  %112 = load %struct.rtx_def*, %struct.rtx_def** %end_122, align 8, !dbg !8987
  %113 = bitcast %struct.rtx_def* %112 to i32*, !dbg !8987
  %bf.load123 = load i32, i32* %113, align 8, !dbg !8987
  %bf.clear124 = and i32 %bf.load123, 65535, !dbg !8987
  %cmp125 = icmp eq i32 %bf.clear124, 11, !dbg !8987
  br i1 %cmp125, label %if.then127, label %if.end135, !dbg !8989

if.then127:                                       ; preds = %if.end116
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8990
  %il128 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %114, i32 0, i32 7, !dbg !8990
  %rtl129 = bitcast %union.basic_block_il_dependent* %il128 to %struct.rtl_bb_info**, !dbg !8990
  %115 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl129, align 8, !dbg !8990
  %end_130 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %115, i32 0, i32 1, !dbg !8990
  %116 = load %struct.rtx_def*, %struct.rtx_def** %end_130, align 8, !dbg !8990
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1, !dbg !8990
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8990
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8990
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx131 to %struct.rtx_def**, !dbg !8990
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8990
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8991
  %il132 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %118, i32 0, i32 7, !dbg !8991
  %rtl133 = bitcast %union.basic_block_il_dependent* %il132 to %struct.rtl_bb_info**, !dbg !8991
  %119 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl133, align 8, !dbg !8991
  %end_134 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %119, i32 0, i32 1, !dbg !8991
  store %struct.rtx_def* %117, %struct.rtx_def** %end_134, align 8, !dbg !8992
  br label %if.end135, !dbg !8991

if.end135:                                        ; preds = %if.then127, %if.end116
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8993
  call void @update_bb_for_insn(%struct.basic_block_def* %120), !dbg !8994
  %121 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !8995
  %u136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %121, i32 0, i32 1, !dbg !8995
  %fld137 = bitcast %union.u* %u136 to [1 x %union.rtunion_def]*, !dbg !8995
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i64 0, i64 2, !dbg !8995
  %rt_rtx139 = bitcast %union.rtunion_def* %arrayidx138 to %struct.rtx_def**, !dbg !8995
  %122 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx139, align 8, !dbg !8995
  %123 = bitcast %struct.rtx_def* %122 to i8*, !dbg !8995
  %call140 = call %struct.rtx_def* @get_last_insn(), !dbg !8996
  %124 = bitcast %struct.rtx_def* %call140 to i8*, !dbg !8996
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8997
  %call141 = call %struct.basic_block_def* @create_basic_block(i8* %123, i8* %124, %struct.basic_block_def* %125), !dbg !8998
  store %struct.basic_block_def* %call141, %struct.basic_block_def** %new_bb, align 8, !dbg !8999
  %126 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !9000
  %dest142 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %126, i32 0, i32 1, !dbg !9001
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %dest142, align 8, !dbg !9001
  store %struct.basic_block_def* %127, %struct.basic_block_def** %dest, align 8, !dbg !9002
  %128 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !9003
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9004
  call void @redirect_edge_succ(%struct.edge_def* %128, %struct.basic_block_def* %129), !dbg !9005
  %130 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !9006
  %flags143 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %130, i32 0, i32 7, !dbg !9007
  %131 = load i32, i32* %flags143, align 8, !dbg !9008
  %or144 = or i32 %131, 1, !dbg !9008
  store i32 %or144, i32* %flags143, align 8, !dbg !9008
  %132 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !9009
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %132, i32 0, i32 9, !dbg !9010
  %133 = load i64, i64* %count, align 8, !dbg !9010
  %134 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9011
  %count145 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %134, i32 0, i32 8, !dbg !9012
  store i64 %133, i64* %count145, align 8, !dbg !9013
  %135 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !9014
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %135, i32 0, i32 0, !dbg !9014
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9014
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %136, i32 0, i32 11, !dbg !9014
  %137 = load i32, i32* %frequency, align 8, !dbg !9014
  %138 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !9014
  %probability146 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %138, i32 0, i32 8, !dbg !9014
  %139 = load i32, i32* %probability146, align 4, !dbg !9014
  %mul = mul nsw i32 %137, %139, !dbg !9014
  %add = add nsw i32 %mul, 5000, !dbg !9014
  %div = sdiv i32 %add, 10000, !dbg !9014
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9015
  %frequency147 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %140, i32 0, i32 11, !dbg !9016
  store i32 %div, i32* %frequency147, align 8, !dbg !9017
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9018
  %142 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9019
  %call148 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %141, %struct.basic_block_def* %142, i32 0), !dbg !9020
  store %struct.edge_def* %call148, %struct.edge_def** %new_edge, align 8, !dbg !9021
  %143 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !9022
  %probability149 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %143, i32 0, i32 8, !dbg !9023
  store i32 10000, i32* %probability149, align 4, !dbg !9024
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9025
  %count150 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %144, i32 0, i32 8, !dbg !9026
  %145 = load i64, i64* %count150, align 8, !dbg !9026
  %146 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !9027
  %count151 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %146, i32 0, i32 9, !dbg !9028
  store i64 %145, i64* %count151, align 8, !dbg !9029
  %147 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9030
  %il152 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %147, i32 0, i32 7, !dbg !9030
  %rtl153 = bitcast %union.basic_block_il_dependent* %il152 to %struct.rtl_bb_info**, !dbg !9030
  %148 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl153, align 8, !dbg !9030
  %end_154 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %148, i32 0, i32 1, !dbg !9030
  %149 = load %struct.rtx_def*, %struct.rtx_def** %end_154, align 8, !dbg !9030
  %150 = bitcast %struct.rtx_def* %149 to i32*, !dbg !9030
  %bf.load155 = load i32, i32* %150, align 8, !dbg !9030
  %bf.clear156 = and i32 %bf.load155, 65535, !dbg !9030
  %cmp157 = icmp eq i32 %bf.clear156, 11, !dbg !9030
  br i1 %cmp157, label %if.then159, label %if.end170, !dbg !9032

if.then159:                                       ; preds = %if.end135
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9033
  %il160 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %151, i32 0, i32 7, !dbg !9033
  %rtl161 = bitcast %union.basic_block_il_dependent* %il160 to %struct.rtl_bb_info**, !dbg !9033
  %152 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl161, align 8, !dbg !9033
  %end_162 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %152, i32 0, i32 1, !dbg !9033
  %153 = load %struct.rtx_def*, %struct.rtx_def** %end_162, align 8, !dbg !9033
  %u163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %153, i32 0, i32 1, !dbg !9033
  %fld164 = bitcast %union.u* %u163 to [1 x %union.rtunion_def]*, !dbg !9033
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i64 0, i64 1, !dbg !9033
  %rt_rtx166 = bitcast %union.rtunion_def* %arrayidx165 to %struct.rtx_def**, !dbg !9033
  %154 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx166, align 8, !dbg !9033
  %155 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9034
  %il167 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %155, i32 0, i32 7, !dbg !9034
  %rtl168 = bitcast %union.basic_block_il_dependent* %il167 to %struct.rtl_bb_info**, !dbg !9034
  %156 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl168, align 8, !dbg !9034
  %end_169 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %156, i32 0, i32 1, !dbg !9034
  store %struct.rtx_def* %154, %struct.rtx_def** %end_169, align 8, !dbg !9035
  br label %if.end170, !dbg !9034

if.end170:                                        ; preds = %if.then159, %if.end135
  %157 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9036
  call void @update_bb_for_insn(%struct.basic_block_def* %157), !dbg !9037
  %158 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9038
  %159 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !9039
  call void @maybe_dump_rtl_for_gimple_stmt(%union.gimple_statement_d* %158, %struct.rtx_def* %159), !dbg !9040
  %160 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !9041
  %goto_locus171 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %160, i32 0, i32 5, !dbg !9043
  %161 = load i32, i32* %goto_locus171, align 8, !dbg !9043
  %tobool172 = icmp ne i32 %161, 0, !dbg !9041
  br i1 %tobool172, label %if.then173, label %if.end178, !dbg !9044

if.then173:                                       ; preds = %if.end170
  %162 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !9045
  %goto_locus174 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %162, i32 0, i32 5, !dbg !9047
  %163 = load i32, i32* %goto_locus174, align 8, !dbg !9047
  call void @set_curr_insn_source_location(i32 %163), !dbg !9048
  %164 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !9049
  %goto_block175 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %164, i32 0, i32 4, !dbg !9050
  %165 = load %union.tree_node*, %union.tree_node** %goto_block175, align 8, !dbg !9050
  call void @set_curr_insn_block(%union.tree_node* %165), !dbg !9051
  %call176 = call i32 @curr_insn_locator(), !dbg !9052
  %166 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !9053
  %goto_locus177 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %166, i32 0, i32 5, !dbg !9054
  store i32 %call176, i32* %goto_locus177, align 8, !dbg !9055
  br label %if.end178, !dbg !9056

if.end178:                                        ; preds = %if.then173, %if.end170
  %167 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !9057
  %goto_block179 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %167, i32 0, i32 4, !dbg !9058
  store %union.tree_node* null, %union.tree_node** %goto_block179, align 8, !dbg !9059
  %168 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9060
  store %struct.basic_block_def* %168, %struct.basic_block_def** %retval, align 8, !dbg !9061
  br label %return, !dbg !9061

return:                                           ; preds = %if.end178, %if.end100, %if.end81
  %169 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !9062
  ret %struct.basic_block_def* %169, !dbg !9062
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %dbg) #0 !dbg !9063 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !9064, metadata !DIExpression()), !dbg !9065
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !9066
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !9067
  ret %union.tree_node* %call, !dbg !9068
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_debug_bind_has_value_p(%union.gimple_statement_d* %dbg) #0 !dbg !9069 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !9072, metadata !DIExpression()), !dbg !9073
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !9074
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !9075
  %cmp = icmp ne %union.tree_node* %call, null, !dbg !9076
  %conv = zext i1 %cmp to i32, !dbg !9076
  %conv1 = trunc i32 %conv to i8, !dbg !9075
  ret i8 %conv1, !dbg !9077
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_debug_bind_get_value(%union.gimple_statement_d* %dbg) #0 !dbg !9078 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !9079, metadata !DIExpression()), !dbg !9080
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !9081
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !9082
  ret %union.tree_node* %call, !dbg !9083
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_stmt_imm_use(%union.gimple_statement_d* %stmt) #0 !dbg !9084 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9085, metadata !DIExpression()), !dbg !9086
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !9087, metadata !DIExpression()), !dbg !9088
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !9089, metadata !DIExpression()), !dbg !9090
  %call = call zeroext i8 @ssa_operands_active(), !dbg !9091
  %tobool = icmp ne i8 %call, 0, !dbg !9091
  br i1 %tobool, label %if.then, label %if.end, !dbg !9093

if.then:                                          ; preds = %entry
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9094
  %call1 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 5), !dbg !9094
  store %struct.ssa_use_operand_d* %call1, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9094
  br label %for.cond, !dbg !9094

for.cond:                                         ; preds = %for.inc, %if.then
  %call2 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !9096
  %tobool3 = icmp ne i8 %call2, 0, !dbg !9096
  %lnot = xor i1 %tobool3, true, !dbg !9096
  br i1 %lnot, label %for.body, label %for.end, !dbg !9094

for.body:                                         ; preds = %for.cond
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9098
  call void @delink_imm_use(%struct.ssa_use_operand_d* %1), !dbg !9099
  br label %for.inc, !dbg !9099

for.inc:                                          ; preds = %for.body
  %call4 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !9096
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9096
  br label %for.cond, !dbg !9096, !llvm.loop !9100

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !9101

if.end:                                           ; preds = %for.end, %entry
  ret void, !dbg !9102
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !9103 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9104, metadata !DIExpression()), !dbg !9105
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9106
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9107
  %cmp = icmp eq i32 %call, 8, !dbg !9108
  %conv = zext i1 %cmp to i32, !dbg !9108
  %conv1 = trunc i32 %conv to i8, !dbg !9107
  ret i8 %conv1, !dbg !9109
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_tail_p(%union.gimple_statement_d* %s) #0 !dbg !9110 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !9111, metadata !DIExpression()), !dbg !9112
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9113
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9114
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9115
  %bf.load = load i32, i32* %1, align 8, !dbg !9115
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9115
  %and = and i32 %bf.lshr, 8, !dbg !9116
  %cmp = icmp ne i32 %and, 0, !dbg !9117
  %conv = zext i1 %cmp to i32, !dbg !9117
  %conv1 = trunc i32 %conv to i8, !dbg !9118
  ret i8 %conv1, !dbg !9119
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @expand_gimple_tailcall(%struct.basic_block_def* %bb, %union.gimple_statement_d* %stmt, i8* %can_fallthru) #0 !dbg !9120 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %can_fallthru.addr = alloca i8*, align 8
  %last2 = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %probability = alloca i32, align 4
  %count = alloca i64, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9123, metadata !DIExpression()), !dbg !9124
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9125, metadata !DIExpression()), !dbg !9126
  store i8* %can_fallthru, i8** %can_fallthru.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %can_fallthru.addr, metadata !9127, metadata !DIExpression()), !dbg !9128
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last2, metadata !9129, metadata !DIExpression()), !dbg !9130
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9131, metadata !DIExpression()), !dbg !9132
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !9133, metadata !DIExpression()), !dbg !9134
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9135, metadata !DIExpression()), !dbg !9136
  call void @llvm.dbg.declare(metadata i32* %probability, metadata !9137, metadata !DIExpression()), !dbg !9138
  call void @llvm.dbg.declare(metadata i64* %count, metadata !9139, metadata !DIExpression()), !dbg !9140
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9141
  %call = call %struct.rtx_def* @expand_gimple_stmt(%union.gimple_statement_d* %0), !dbg !9142
  store %struct.rtx_def* %call, %struct.rtx_def** %last, align 8, !dbg !9143
  store %struct.rtx_def* %call, %struct.rtx_def** %last2, align 8, !dbg !9144
  %1 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9145
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !9145
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9145
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9145
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9145
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9145
  store %struct.rtx_def* %2, %struct.rtx_def** %last, align 8, !dbg !9147
  br label %for.cond, !dbg !9148

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9149
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !9151
  br i1 %tobool, label %for.body, label %for.end, !dbg !9151

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9152
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !9152
  %bf.load = load i32, i32* %5, align 8, !dbg !9152
  %bf.clear = and i32 %bf.load, 65535, !dbg !9152
  %cmp = icmp eq i32 %bf.clear, 10, !dbg !9152
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9154

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9155
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !9155
  %bf.load1 = load i32, i32* %7, align 8, !dbg !9155
  %bf.lshr = lshr i32 %bf.load1, 24, !dbg !9155
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !9155
  %tobool3 = icmp ne i32 %bf.clear2, 0, !dbg !9155
  br i1 %tobool3, label %if.then, label %if.end, !dbg !9156

if.then:                                          ; preds = %land.lhs.true
  br label %found, !dbg !9157

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !9155

for.inc:                                          ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9158
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !9158
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !9158
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 2, !dbg !9158
  %rt_rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**, !dbg !9158
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx7, align 8, !dbg !9158
  store %struct.rtx_def* %9, %struct.rtx_def** %last, align 8, !dbg !9159
  br label %for.cond, !dbg !9160, !llvm.loop !9161

for.end:                                          ; preds = %for.cond
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9163
  %11 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !9164
  call void @maybe_dump_rtl_for_gimple_stmt(%union.gimple_statement_d* %10, %struct.rtx_def* %11), !dbg !9165
  %12 = load i8*, i8** %can_fallthru.addr, align 8, !dbg !9166
  store i8 1, i8* %12, align 1, !dbg !9167
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !9168
  br label %return, !dbg !9168

found:                                            ; preds = %if.then
  call void @llvm.dbg.label(metadata !9169), !dbg !9170
  call void @do_pending_stack_adjust(), !dbg !9171
  store i32 0, i32* %probability, align 4, !dbg !9172
  store i64 0, i64* %count, align 8, !dbg !9173
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9174
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 1, !dbg !9174
  %call8 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !9174
  %14 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !9174
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 0, !dbg !9174
  %16 = extractvalue { i32, %struct.VEC_edge_gc** } %call8, 0, !dbg !9174
  store i32 %16, i32* %15, align 8, !dbg !9174
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 1, !dbg !9174
  %18 = extractvalue { i32, %struct.VEC_edge_gc** } %call8, 1, !dbg !9174
  store %struct.VEC_edge_gc** %18, %struct.VEC_edge_gc*** %17, align 8, !dbg !9174
  %19 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9174
  %20 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !9174
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false), !dbg !9174
  br label %for.cond9, !dbg !9176

for.cond9:                                        ; preds = %if.end43, %found
  %21 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9177
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 0, !dbg !9177
  %23 = load i32, i32* %22, align 8, !dbg !9177
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 1, !dbg !9177
  %25 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %24, align 8, !dbg !9177
  %call10 = call %struct.edge_def* @ei_safe_edge(i32 %23, %struct.VEC_edge_gc** %25), !dbg !9177
  store %struct.edge_def* %call10, %struct.edge_def** %e, align 8, !dbg !9179
  %tobool11 = icmp ne %struct.edge_def* %call10, null, !dbg !9180
  br i1 %tobool11, label %for.body12, label %for.end44, !dbg !9180

for.body12:                                       ; preds = %for.cond9
  %26 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9181
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 7, !dbg !9184
  %27 = load i32, i32* %flags, align 8, !dbg !9184
  %and = and i32 %27, 10, !dbg !9185
  %tobool13 = icmp ne i32 %and, 0, !dbg !9185
  br i1 %tobool13, label %if.else, label %if.then14, !dbg !9186

if.then14:                                        ; preds = %for.body12
  %28 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9187
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 1, !dbg !9190
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9190
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9191
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !9191
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !9191
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9191
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 1, !dbg !9191
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !9191
  %cmp15 = icmp ne %struct.basic_block_def* %29, %32, !dbg !9192
  br i1 %cmp15, label %if.then16, label %if.end38, !dbg !9193

if.then16:                                        ; preds = %if.then14
  %33 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9194
  %count17 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 9, !dbg !9196
  %34 = load i64, i64* %count17, align 8, !dbg !9196
  %35 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9197
  %dest18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 1, !dbg !9198
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %dest18, align 8, !dbg !9198
  %count19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 8, !dbg !9199
  %37 = load i64, i64* %count19, align 8, !dbg !9200
  %sub = sub nsw i64 %37, %34, !dbg !9200
  store i64 %sub, i64* %count19, align 8, !dbg !9200
  %38 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9201
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 0, !dbg !9201
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9201
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 11, !dbg !9201
  %40 = load i32, i32* %frequency, align 8, !dbg !9201
  %41 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9201
  %probability20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %41, i32 0, i32 8, !dbg !9201
  %42 = load i32, i32* %probability20, align 4, !dbg !9201
  %mul = mul nsw i32 %40, %42, !dbg !9201
  %add = add nsw i32 %mul, 5000, !dbg !9201
  %div = sdiv i32 %add, 10000, !dbg !9201
  %43 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9202
  %dest21 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 1, !dbg !9203
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %dest21, align 8, !dbg !9203
  %frequency22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 11, !dbg !9204
  %45 = load i32, i32* %frequency22, align 8, !dbg !9205
  %sub23 = sub nsw i32 %45, %div, !dbg !9205
  store i32 %sub23, i32* %frequency22, align 8, !dbg !9205
  %46 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9206
  %dest24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 1, !dbg !9208
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %dest24, align 8, !dbg !9208
  %count25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 8, !dbg !9209
  %48 = load i64, i64* %count25, align 8, !dbg !9209
  %cmp26 = icmp slt i64 %48, 0, !dbg !9210
  br i1 %cmp26, label %if.then27, label %if.end30, !dbg !9211

if.then27:                                        ; preds = %if.then16
  %49 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9212
  %dest28 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 1, !dbg !9213
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %dest28, align 8, !dbg !9213
  %count29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 8, !dbg !9214
  store i64 0, i64* %count29, align 8, !dbg !9215
  br label %if.end30, !dbg !9212

if.end30:                                         ; preds = %if.then27, %if.then16
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9216
  %dest31 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 1, !dbg !9218
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %dest31, align 8, !dbg !9218
  %frequency32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 11, !dbg !9219
  %53 = load i32, i32* %frequency32, align 8, !dbg !9219
  %cmp33 = icmp slt i32 %53, 0, !dbg !9220
  br i1 %cmp33, label %if.then34, label %if.end37, !dbg !9221

if.then34:                                        ; preds = %if.end30
  %54 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9222
  %dest35 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %54, i32 0, i32 1, !dbg !9223
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %dest35, align 8, !dbg !9223
  %frequency36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 11, !dbg !9224
  store i32 0, i32* %frequency36, align 8, !dbg !9225
  br label %if.end37, !dbg !9222

if.end37:                                         ; preds = %if.then34, %if.end30
  br label %if.end38, !dbg !9226

if.end38:                                         ; preds = %if.end37, %if.then14
  %56 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9227
  %count39 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 9, !dbg !9228
  %57 = load i64, i64* %count39, align 8, !dbg !9228
  %58 = load i64, i64* %count, align 8, !dbg !9229
  %add40 = add nsw i64 %58, %57, !dbg !9229
  store i64 %add40, i64* %count, align 8, !dbg !9229
  %59 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9230
  %probability41 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %59, i32 0, i32 8, !dbg !9231
  %60 = load i32, i32* %probability41, align 4, !dbg !9231
  %61 = load i32, i32* %probability, align 4, !dbg !9232
  %add42 = add nsw i32 %61, %60, !dbg !9232
  store i32 %add42, i32* %probability, align 4, !dbg !9232
  %62 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9233
  call void @remove_edge(%struct.edge_def* %62), !dbg !9234
  br label %if.end43, !dbg !9235

if.else:                                          ; preds = %for.body12
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !9236
  br label %if.end43

if.end43:                                         ; preds = %if.else, %if.end38
  br label %for.cond9, !dbg !9237, !llvm.loop !9238

for.end44:                                        ; preds = %for.cond9
  %63 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9240
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !9240
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !9240
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 2, !dbg !9240
  %rt_rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**, !dbg !9240
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx48, align 8, !dbg !9240
  store %struct.rtx_def* %64, %struct.rtx_def** %last, align 8, !dbg !9241
  %65 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9242
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !9242
  %bf.load49 = load i32, i32* %66, align 8, !dbg !9242
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !9242
  %cmp51 = icmp eq i32 %bf.clear50, 11, !dbg !9242
  br i1 %cmp51, label %cond.false, label %cond.true, !dbg !9242

cond.true:                                        ; preds = %for.end44
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 2079, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9242
  br label %cond.end, !dbg !9242

cond.false:                                       ; preds = %for.end44
  br label %cond.end, !dbg !9242

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9242
  %67 = load i8*, i8** %can_fallthru.addr, align 8, !dbg !9243
  store i8 0, i8* %67, align 1, !dbg !9244
  br label %while.cond, !dbg !9245

while.cond:                                       ; preds = %if.end65, %cond.end
  %68 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9246
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !9246
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !9246
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 2, !dbg !9246
  %rt_rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**, !dbg !9246
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx55, align 8, !dbg !9246
  %tobool56 = icmp ne %struct.rtx_def* %69, null, !dbg !9245
  br i1 %tobool56, label %while.body, label %while.end, !dbg !9245

while.body:                                       ; preds = %while.cond
  %70 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9247
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !9247
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !9247
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 2, !dbg !9247
  %rt_rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**, !dbg !9247
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx60, align 8, !dbg !9247
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !9247
  %bf.load61 = load i32, i32* %72, align 8, !dbg !9247
  %bf.clear62 = and i32 %bf.load61, 65535, !dbg !9247
  %cmp63 = icmp eq i32 %bf.clear62, 12, !dbg !9247
  br i1 %cmp63, label %if.then64, label %if.end65, !dbg !9250

if.then64:                                        ; preds = %while.body
  %73 = load i8*, i8** %can_fallthru.addr, align 8, !dbg !9251
  store i8 1, i8* %73, align 1, !dbg !9253
  br label %while.end, !dbg !9254

if.end65:                                         ; preds = %while.body
  %74 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9255
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !9255
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !9255
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 2, !dbg !9255
  %rt_rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**, !dbg !9255
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx69, align 8, !dbg !9255
  %call70 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %75), !dbg !9256
  br label %while.cond, !dbg !9245, !llvm.loop !9257

while.end:                                        ; preds = %if.then64, %while.cond
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9259
  %77 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9260
  %add.ptr71 = getelementptr inbounds %struct.function, %struct.function* %77, i64 0, !dbg !9260
  %cfg72 = getelementptr inbounds %struct.function, %struct.function* %add.ptr71, i32 0, i32 1, !dbg !9260
  %78 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg72, align 8, !dbg !9260
  %x_exit_block_ptr73 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %78, i32 0, i32 1, !dbg !9260
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr73, align 8, !dbg !9260
  %call74 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %76, %struct.basic_block_def* %79, i32 258), !dbg !9261
  store %struct.edge_def* %call74, %struct.edge_def** %e, align 8, !dbg !9262
  %80 = load i32, i32* %probability, align 4, !dbg !9263
  %81 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9264
  %probability75 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %81, i32 0, i32 8, !dbg !9265
  %82 = load i32, i32* %probability75, align 4, !dbg !9266
  %add76 = add nsw i32 %82, %80, !dbg !9266
  store i32 %add76, i32* %probability75, align 4, !dbg !9266
  %83 = load i64, i64* %count, align 8, !dbg !9267
  %84 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9268
  %count77 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %84, i32 0, i32 9, !dbg !9269
  %85 = load i64, i64* %count77, align 8, !dbg !9270
  %add78 = add nsw i64 %85, %83, !dbg !9270
  store i64 %add78, i64* %count77, align 8, !dbg !9270
  %86 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9271
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9272
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 7, !dbg !9272
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9272
  %88 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9272
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %88, i32 0, i32 1, !dbg !9272
  store %struct.rtx_def* %86, %struct.rtx_def** %end_, align 8, !dbg !9273
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9274
  call void @update_bb_for_insn(%struct.basic_block_def* %89), !dbg !9275
  %90 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9276
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %90, i32 0, i32 1, !dbg !9276
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !9276
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 2, !dbg !9276
  %rt_rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**, !dbg !9276
  %91 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx82, align 8, !dbg !9276
  %tobool83 = icmp ne %struct.rtx_def* %91, null, !dbg !9276
  br i1 %tobool83, label %if.then84, label %if.end106, !dbg !9278

if.then84:                                        ; preds = %while.end
  %92 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9279
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1, !dbg !9279
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !9279
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 2, !dbg !9279
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !9279
  %93 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx88, align 8, !dbg !9279
  %94 = bitcast %struct.rtx_def* %93 to i8*, !dbg !9279
  %call89 = call %struct.rtx_def* @get_last_insn(), !dbg !9281
  %95 = bitcast %struct.rtx_def* %call89 to i8*, !dbg !9281
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9282
  %call90 = call %struct.basic_block_def* @create_basic_block(i8* %94, i8* %95, %struct.basic_block_def* %96), !dbg !9283
  store %struct.basic_block_def* %call90, %struct.basic_block_def** %bb.addr, align 8, !dbg !9284
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9285
  %il91 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %97, i32 0, i32 7, !dbg !9285
  %rtl92 = bitcast %union.basic_block_il_dependent* %il91 to %struct.rtl_bb_info**, !dbg !9285
  %98 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl92, align 8, !dbg !9285
  %end_93 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %98, i32 0, i32 1, !dbg !9285
  %99 = load %struct.rtx_def*, %struct.rtx_def** %end_93, align 8, !dbg !9285
  store %struct.rtx_def* %99, %struct.rtx_def** %last, align 8, !dbg !9286
  %100 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9287
  %101 = bitcast %struct.rtx_def* %100 to i32*, !dbg !9287
  %bf.load94 = load i32, i32* %101, align 8, !dbg !9287
  %bf.clear95 = and i32 %bf.load94, 65535, !dbg !9287
  %cmp96 = icmp eq i32 %bf.clear95, 11, !dbg !9287
  br i1 %cmp96, label %if.then97, label %if.end105, !dbg !9289

if.then97:                                        ; preds = %if.then84
  %102 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9290
  %u98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1, !dbg !9290
  %fld99 = bitcast %union.u* %u98 to [1 x %union.rtunion_def]*, !dbg !9290
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i64 0, i64 1, !dbg !9290
  %rt_rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**, !dbg !9290
  %103 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx101, align 8, !dbg !9290
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9291
  %il102 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %104, i32 0, i32 7, !dbg !9291
  %rtl103 = bitcast %union.basic_block_il_dependent* %il102 to %struct.rtl_bb_info**, !dbg !9291
  %105 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl103, align 8, !dbg !9291
  %end_104 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %105, i32 0, i32 1, !dbg !9291
  store %struct.rtx_def* %103, %struct.rtx_def** %end_104, align 8, !dbg !9292
  br label %if.end105, !dbg !9291

if.end105:                                        ; preds = %if.then97, %if.then84
  br label %if.end106, !dbg !9293

if.end106:                                        ; preds = %if.end105, %while.end
  %106 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9294
  %107 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !9295
  call void @maybe_dump_rtl_for_gimple_stmt(%union.gimple_statement_d* %106, %struct.rtx_def* %107), !dbg !9296
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9297
  store %struct.basic_block_def* %108, %struct.basic_block_def** %retval, align 8, !dbg !9298
  br label %return, !dbg !9298

return:                                           ; preds = %if.end106, %for.end
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !9299
  ret %struct.basic_block_def* %109, !dbg !9299
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @single_ssa_def_operand(%union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !9300 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %var = alloca %union.tree_node**, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9303, metadata !DIExpression()), !dbg !9304
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !9305, metadata !DIExpression()), !dbg !9306
  call void @llvm.dbg.declare(metadata %union.tree_node*** %var, metadata !9307, metadata !DIExpression()), !dbg !9308
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !9309, metadata !DIExpression()), !dbg !9310
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9311
  %1 = load i32, i32* %flags.addr, align 4, !dbg !9312
  %call = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 %1), !dbg !9313
  store %union.tree_node** %call, %union.tree_node*** %var, align 8, !dbg !9314
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !9315
  %tobool = icmp ne i8 %call1, 0, !dbg !9315
  br i1 %tobool, label %if.then, label %if.end, !dbg !9317

if.then:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !9318
  br label %return, !dbg !9318

if.end:                                           ; preds = %entry
  %call2 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %iter), !dbg !9319
  %call3 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !9320
  %tobool4 = icmp ne i8 %call3, 0, !dbg !9320
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !9322

if.then5:                                         ; preds = %if.end
  %2 = load %union.tree_node**, %union.tree_node*** %var, align 8, !dbg !9323
  store %union.tree_node** %2, %union.tree_node*** %retval, align 8, !dbg !9324
  br label %return, !dbg !9324

if.end6:                                          ; preds = %if.end
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !9325
  br label %return, !dbg !9325

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !9326
  ret %union.tree_node** %3, !dbg !9326
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !9327 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !9330, metadata !DIExpression()), !dbg !9331
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !9332
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9333
  ret %union.tree_node* %1, !dbg !9334
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @label_rtx_for_bb(%struct.basic_block_def* %bb) #0 !dbg !9335 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %lab = alloca %union.tree_node*, align 8
  %lab_stmt = alloca %union.gimple_statement_d*, align 8
  %elt = alloca i8**, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9338, metadata !DIExpression()), !dbg !9339
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !9340, metadata !DIExpression()), !dbg !9341
  call void @llvm.dbg.declare(metadata %union.tree_node** %lab, metadata !9342, metadata !DIExpression()), !dbg !9343
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %lab_stmt, metadata !9344, metadata !DIExpression()), !dbg !9345
  call void @llvm.dbg.declare(metadata i8*** %elt, metadata !9346, metadata !DIExpression()), !dbg !9347
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9348
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !9350
  %1 = load i32, i32* %flags, align 8, !dbg !9350
  %and = and i32 %1, 512, !dbg !9351
  %tobool = icmp ne i32 %and, 0, !dbg !9351
  br i1 %tobool, label %if.then, label %if.end, !dbg !9352

if.then:                                          ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9353
  %call = call %struct.rtx_def* @block_label(%struct.basic_block_def* %2), !dbg !9354
  store %struct.rtx_def* %call, %struct.rtx_def** %retval, align 8, !dbg !9355
  br label %return, !dbg !9355

if.end:                                           ; preds = %entry
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** @lab_rtx_for_bb, align 8, !dbg !9356
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9357
  %5 = bitcast %struct.basic_block_def* %4 to i8*, !dbg !9357
  %call1 = call i8** @pointer_map_contains(%struct.pointer_map_t* %3, i8* %5), !dbg !9358
  store i8** %call1, i8*** %elt, align 8, !dbg !9359
  %6 = load i8**, i8*** %elt, align 8, !dbg !9360
  %tobool2 = icmp ne i8** %6, null, !dbg !9360
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !9362

if.then3:                                         ; preds = %if.end
  %7 = load i8**, i8*** %elt, align 8, !dbg !9363
  %8 = load i8*, i8** %7, align 8, !dbg !9364
  %9 = bitcast i8* %8 to %struct.rtx_def*, !dbg !9365
  store %struct.rtx_def* %9, %struct.rtx_def** %retval, align 8, !dbg !9366
  br label %return, !dbg !9366

if.end4:                                          ; preds = %if.end
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9367
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %10), !dbg !9369
  %11 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !9369
  %12 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9369
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false), !dbg !9369
  br label %for.cond, !dbg !9370

for.cond:                                         ; preds = %for.inc, %if.end4
  %call5 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9371
  %tobool6 = icmp ne i8 %call5, 0, !dbg !9373
  %lnot = xor i1 %tobool6, true, !dbg !9373
  br i1 %lnot, label %for.body, label %for.end, !dbg !9374

for.body:                                         ; preds = %for.cond
  %call7 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !9375
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %lab_stmt, align 8, !dbg !9377
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %lab_stmt, align 8, !dbg !9378
  %call8 = call i32 @gimple_code(%union.gimple_statement_d* %13), !dbg !9380
  %cmp = icmp ne i32 %call8, 4, !dbg !9381
  br i1 %cmp, label %if.then9, label %if.end10, !dbg !9382

if.then9:                                         ; preds = %for.body
  br label %for.end, !dbg !9383

if.end10:                                         ; preds = %for.body
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %lab_stmt, align 8, !dbg !9384
  %call11 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %14), !dbg !9385
  store %union.tree_node* %call11, %union.tree_node** %lab, align 8, !dbg !9386
  %15 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !9387
  %decl_common = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !9387
  %nonlocal_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !9387
  %16 = bitcast i40* %nonlocal_flag to i64*, !dbg !9387
  %bf.load = load i64, i64* %16, align 8, !dbg !9387
  %bf.lshr = lshr i64 %bf.load, 8, !dbg !9387
  %bf.clear = and i64 %bf.lshr, 1, !dbg !9387
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9387
  %tobool12 = icmp ne i32 %bf.cast, 0, !dbg !9387
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !9389

if.then13:                                        ; preds = %if.end10
  br label %for.end, !dbg !9390

if.end14:                                         ; preds = %if.end10
  %17 = load %union.tree_node*, %union.tree_node** %lab, align 8, !dbg !9391
  %call15 = call %struct.rtx_def* @label_rtx(%union.tree_node* %17), !dbg !9392
  store %struct.rtx_def* %call15, %struct.rtx_def** %retval, align 8, !dbg !9393
  br label %return, !dbg !9393

for.inc:                                          ; No predecessors!
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !9394
  br label %for.cond, !dbg !9395, !llvm.loop !9396

for.end:                                          ; preds = %if.then13, %if.then9, %for.cond
  %18 = load %struct.pointer_map_t*, %struct.pointer_map_t** @lab_rtx_for_bb, align 8, !dbg !9398
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9399
  %20 = bitcast %struct.basic_block_def* %19 to i8*, !dbg !9399
  %call16 = call i8** @pointer_map_insert(%struct.pointer_map_t* %18, i8* %20), !dbg !9400
  store i8** %call16, i8*** %elt, align 8, !dbg !9401
  %call17 = call %struct.rtx_def* @gen_label_rtx(), !dbg !9402
  %21 = bitcast %struct.rtx_def* %call17 to i8*, !dbg !9402
  %22 = load i8**, i8*** %elt, align 8, !dbg !9403
  store i8* %21, i8** %22, align 8, !dbg !9404
  %23 = load i8**, i8*** %elt, align 8, !dbg !9405
  %24 = load i8*, i8** %23, align 8, !dbg !9406
  %25 = bitcast i8* %24 to %struct.rtx_def*, !dbg !9407
  store %struct.rtx_def* %25, %struct.rtx_def** %retval, align 8, !dbg !9408
  br label %return, !dbg !9408

return:                                           ; preds = %for.end, %if.end14, %if.then3, %if.then
  %26 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9409
  ret %struct.rtx_def* %26, !dbg !9409
}

declare dso_local %struct.rtx_def* @emit_insn_after_noloc(%struct.rtx_def*, %struct.rtx_def*, %struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @gen_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @do_pending_stack_adjust() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !9410 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !9411, metadata !DIExpression()), !dbg !9412
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9413
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !9413
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9413

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !9414
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !9415
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !9415
  br label %cond.end, !dbg !9413

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9413

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !9413
  ret %struct.gimple_seq_node_d* %cond, !dbg !9416
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !9417 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9420, metadata !DIExpression()), !dbg !9421
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9422
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9423
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !9424
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9424
  ret %struct.basic_block_def* %1, !dbg !9425
}

; Function Attrs: noinline nounwind uwtable
define internal void @expand_gimple_stmt_1(%union.gimple_statement_d* %stmt) #0 !dbg !9426 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %result = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %target = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %nontemporal = alloca i8, align 1
  %ops = alloca %struct.separate_ops, align 8
  %promoted = alloca i8, align 1
  %unsignedp = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9427, metadata !DIExpression()), !dbg !9428
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !9429, metadata !DIExpression()), !dbg !9430
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9431
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9432
  switch i32 %call, label %sw.default192 [
    i32 3, label %sw.bb
    i32 4, label %sw.bb2
    i32 18, label %sw.bb4
    i32 33, label %sw.bb4
    i32 5, label %sw.bb5
    i32 7, label %sw.bb6
    i32 8, label %sw.bb7
    i32 9, label %sw.bb8
    i32 6, label %sw.bb27
  ], !dbg !9433

sw.bb:                                            ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9434
  %call1 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %1), !dbg !9436
  store %union.tree_node* %call1, %union.tree_node** %op0, align 8, !dbg !9437
  %2 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9438
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9438
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9438
  %bf.load = load i64, i64* %3, align 8, !dbg !9438
  %bf.clear = and i64 %bf.load, 65535, !dbg !9438
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9438
  %cmp = icmp eq i32 %bf.cast, 30, !dbg !9440
  br i1 %cmp, label %if.then, label %if.else, !dbg !9441

if.then:                                          ; preds = %sw.bb
  %4 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9442
  call void @expand_goto(%union.tree_node* %4), !dbg !9443
  br label %if.end, !dbg !9443

if.else:                                          ; preds = %sw.bb
  %5 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9444
  call void @expand_computed_goto(%union.tree_node* %5), !dbg !9445
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog193, !dbg !9446

sw.bb2:                                           ; preds = %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9447
  %call3 = call %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %6), !dbg !9448
  call void @expand_label(%union.tree_node* %call3), !dbg !9449
  br label %sw.epilog193, !dbg !9450

sw.bb4:                                           ; preds = %entry, %entry
  br label %sw.epilog193, !dbg !9451

sw.bb5:                                           ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9452
  call void @expand_case(%union.gimple_statement_d* %7), !dbg !9453
  br label %sw.epilog193, !dbg !9454

sw.bb6:                                           ; preds = %entry
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9455
  call void @expand_asm_stmt(%union.gimple_statement_d* %8), !dbg !9456
  br label %sw.epilog193, !dbg !9457

sw.bb7:                                           ; preds = %entry
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9458
  call void @expand_call_stmt(%union.gimple_statement_d* %9), !dbg !9459
  br label %sw.epilog193, !dbg !9460

sw.bb8:                                           ; preds = %entry
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9461
  %call9 = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %10), !dbg !9462
  store %union.tree_node* %call9, %union.tree_node** %op0, align 8, !dbg !9463
  %11 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9464
  %tobool = icmp ne %union.tree_node* %11, null, !dbg !9464
  br i1 %tobool, label %land.lhs.true, label %if.end22, !dbg !9466

land.lhs.true:                                    ; preds = %sw.bb8
  %12 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9467
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !9468
  %cmp10 = icmp ne %union.tree_node* %12, %13, !dbg !9469
  br i1 %cmp10, label %if.then11, label %if.end22, !dbg !9470

if.then11:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !9471, metadata !DIExpression()), !dbg !9473
  %14 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !9474
  %decl_non_common = bitcast %union.tree_node* %14 to %struct.tree_decl_non_common*, !dbg !9474
  %result12 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !9474
  %15 = load %union.tree_node*, %union.tree_node** %result12, align 8, !dbg !9474
  store %union.tree_node* %15, %union.tree_node** %result, align 8, !dbg !9473
  %16 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9475
  %17 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9477
  %cmp13 = icmp ne %union.tree_node* %16, %17, !dbg !9478
  br i1 %cmp13, label %if.then14, label %if.end21, !dbg !9479

if.then14:                                        ; preds = %if.then11
  %18 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9480
  %base15 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !9480
  %19 = bitcast %struct.tree_base* %base15 to i64*, !dbg !9480
  %bf.load16 = load i64, i64* %19, align 8, !dbg !9480
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !9480
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !9480
  %cmp19 = icmp ne i32 %bf.cast18, 36, !dbg !9480
  br i1 %cmp19, label %cond.false, label %cond.true, !dbg !9480

cond.true:                                        ; preds = %if.then14
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 1841, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9480
  br label %cond.end, !dbg !9480

cond.false:                                       ; preds = %if.then14
  br label %cond.end, !dbg !9480

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9480
  %20 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9482
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !9482
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9482
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9482
  %22 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !9482
  %23 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9482
  %call20 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %21, %union.tree_node* %22, %union.tree_node* %23), !dbg !9482
  store %union.tree_node* %call20, %union.tree_node** %op0, align 8, !dbg !9483
  br label %if.end21, !dbg !9484

if.end21:                                         ; preds = %cond.end, %if.then11
  br label %if.end22, !dbg !9485

if.end22:                                         ; preds = %if.end21, %land.lhs.true, %sw.bb8
  %24 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9486
  %tobool23 = icmp ne %union.tree_node* %24, null, !dbg !9486
  br i1 %tobool23, label %if.else25, label %if.then24, !dbg !9488

if.then24:                                        ; preds = %if.end22
  call void @expand_null_return(), !dbg !9489
  br label %if.end26, !dbg !9489

if.else25:                                        ; preds = %if.end22
  %25 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !9490
  call void @expand_return(%union.tree_node* %25), !dbg !9491
  br label %if.end26

if.end26:                                         ; preds = %if.else25, %if.then24
  br label %sw.epilog193, !dbg !9492

sw.bb27:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !9493, metadata !DIExpression()), !dbg !9495
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9496
  %call28 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %26), !dbg !9497
  store %union.tree_node* %call28, %union.tree_node** %lhs, align 8, !dbg !9495
  %27 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9498
  %base29 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !9498
  %28 = bitcast %struct.tree_base* %base29 to i64*, !dbg !9498
  %bf.load30 = load i64, i64* %28, align 8, !dbg !9498
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !9498
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !9498
  %cmp33 = icmp ne i32 %bf.cast32, 141, !dbg !9500
  br i1 %cmp33, label %if.then37, label %lor.lhs.false, !dbg !9501

lor.lhs.false:                                    ; preds = %sw.bb27
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9502
  %call34 = call i32 @gimple_expr_code(%union.gimple_statement_d* %29), !dbg !9503
  %call35 = call i32 @get_gimple_rhs_class(i32 %call34), !dbg !9504
  %cmp36 = icmp eq i32 %call35, 3, !dbg !9505
  br i1 %cmp36, label %if.then37, label %if.else70, !dbg !9506

if.then37:                                        ; preds = %lor.lhs.false, %sw.bb27
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !9507, metadata !DIExpression()), !dbg !9509
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9510
  %call38 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %30), !dbg !9511
  store %union.tree_node* %call38, %union.tree_node** %rhs, align 8, !dbg !9509
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9512
  %call39 = call i32 @gimple_expr_code(%union.gimple_statement_d* %31), !dbg !9512
  %call40 = call i32 @get_gimple_rhs_class(i32 %call39), !dbg !9512
  %cmp41 = icmp eq i32 %call40, 3, !dbg !9512
  br i1 %cmp41, label %cond.false43, label %cond.true42, !dbg !9512

cond.true42:                                      ; preds = %if.then37
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 1873, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9512
  br label %cond.end44, !dbg !9512

cond.false43:                                     ; preds = %if.then37
  br label %cond.end44, !dbg !9512

cond.end44:                                       ; preds = %cond.false43, %cond.true42
  %cond45 = phi i32 [ 0, %cond.true42 ], [ 0, %cond.false43 ], !dbg !9512
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9513
  %call46 = call zeroext i8 @gimple_has_location(%union.gimple_statement_d* %32), !dbg !9515
  %conv = zext i8 %call46 to i32, !dbg !9515
  %tobool47 = icmp ne i32 %conv, 0, !dbg !9515
  br i1 %tobool47, label %land.lhs.true48, label %if.end68, !dbg !9516

land.lhs.true48:                                  ; preds = %cond.end44
  %33 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9517
  %tobool49 = icmp ne %union.tree_node* %33, null, !dbg !9517
  br i1 %tobool49, label %land.lhs.true50, label %if.end68, !dbg !9517

land.lhs.true50:                                  ; preds = %land.lhs.true48
  %34 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9517
  %base51 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !9517
  %35 = bitcast %struct.tree_base* %base51 to i64*, !dbg !9517
  %bf.load52 = load i64, i64* %35, align 8, !dbg !9517
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !9517
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !9517
  %idxprom = sext i32 %bf.cast54 to i64, !dbg !9517
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !9517
  %36 = load i32, i32* %arrayidx, align 4, !dbg !9517
  %cmp55 = icmp uge i32 %36, 4, !dbg !9517
  br i1 %cmp55, label %land.lhs.true57, label %if.end68, !dbg !9517

land.lhs.true57:                                  ; preds = %land.lhs.true50
  %37 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9517
  %base58 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !9517
  %38 = bitcast %struct.tree_base* %base58 to i64*, !dbg !9517
  %bf.load59 = load i64, i64* %38, align 8, !dbg !9517
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !9517
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !9517
  %idxprom62 = sext i32 %bf.cast61 to i64, !dbg !9517
  %arrayidx63 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom62, !dbg !9517
  %39 = load i32, i32* %arrayidx63, align 4, !dbg !9517
  %cmp64 = icmp ule i32 %39, 10, !dbg !9517
  br i1 %cmp64, label %if.then66, label %if.end68, !dbg !9518

if.then66:                                        ; preds = %land.lhs.true57
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9519
  %call67 = call i32 @gimple_location(%union.gimple_statement_d* %40), !dbg !9519
  %41 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9519
  %exp = bitcast %union.tree_node* %41 to %struct.tree_exp*, !dbg !9519
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !9519
  store i32 %call67, i32* %locus, align 8, !dbg !9519
  br label %if.end68, !dbg !9519

if.end68:                                         ; preds = %if.then66, %land.lhs.true57, %land.lhs.true50, %land.lhs.true48, %cond.end44
  %42 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9520
  %43 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !9521
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9522
  %call69 = call zeroext i8 @gimple_assign_nontemporal_move_p(%union.gimple_statement_d* %44), !dbg !9523
  call void @expand_assignment(%union.tree_node* %42, %union.tree_node* %43, i8 zeroext %call69), !dbg !9524
  br label %if.end191, !dbg !9525

if.else70:                                        ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !9526, metadata !DIExpression()), !dbg !9528
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !9529, metadata !DIExpression()), !dbg !9530
  call void @llvm.dbg.declare(metadata i8* %nontemporal, metadata !9531, metadata !DIExpression()), !dbg !9532
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9533
  %call71 = call zeroext i8 @gimple_assign_nontemporal_move_p(%union.gimple_statement_d* %45), !dbg !9534
  store i8 %call71, i8* %nontemporal, align 1, !dbg !9532
  call void @llvm.dbg.declare(metadata %struct.separate_ops* %ops, metadata !9535, metadata !DIExpression()), !dbg !9544
  call void @llvm.dbg.declare(metadata i8* %promoted, metadata !9545, metadata !DIExpression()), !dbg !9546
  store i8 0, i8* %promoted, align 1, !dbg !9546
  %46 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9547
  %call72 = call %struct.rtx_def* @expand_expr(%union.tree_node* %46, %struct.rtx_def* null, i32 0, i32 5), !dbg !9548
  store %struct.rtx_def* %call72, %struct.rtx_def** %target, align 8, !dbg !9549
  %47 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9550
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !9550
  %bf.load73 = load i32, i32* %48, align 8, !dbg !9550
  %bf.clear74 = and i32 %bf.load73, 65535, !dbg !9550
  %cmp75 = icmp eq i32 %bf.clear74, 39, !dbg !9552
  br i1 %cmp75, label %land.lhs.true77, label %if.end82, !dbg !9553

land.lhs.true77:                                  ; preds = %if.else70
  %49 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9554
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !9554
  %bf.load78 = load i32, i32* %50, align 8, !dbg !9554
  %bf.lshr = lshr i32 %bf.load78, 28, !dbg !9554
  %bf.clear79 = and i32 %bf.lshr, 1, !dbg !9554
  %tobool80 = icmp ne i32 %bf.clear79, 0, !dbg !9554
  br i1 %tobool80, label %if.then81, label %if.end82, !dbg !9555

if.then81:                                        ; preds = %land.lhs.true77
  store i8 1, i8* %promoted, align 1, !dbg !9556
  br label %if.end82, !dbg !9557

if.end82:                                         ; preds = %if.then81, %land.lhs.true77, %if.else70
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9558
  %call83 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %51), !dbg !9559
  %code = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %ops, i32 0, i32 0, !dbg !9560
  store i32 %call83, i32* %code, align 8, !dbg !9561
  %52 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9562
  %common84 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !9562
  %type85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 2, !dbg !9562
  %53 = load %union.tree_node*, %union.tree_node** %type85, align 8, !dbg !9562
  %type86 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %ops, i32 0, i32 1, !dbg !9563
  store %union.tree_node* %53, %union.tree_node** %type86, align 8, !dbg !9564
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9565
  %call87 = call i32 @gimple_expr_code(%union.gimple_statement_d* %54), !dbg !9566
  %call88 = call i32 @get_gimple_rhs_class(i32 %call87), !dbg !9567
  switch i32 %call88, label %sw.default [
    i32 1, label %sw.bb89
    i32 2, label %sw.bb91
  ], !dbg !9568

sw.bb89:                                          ; preds = %if.end82
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9569
  %call90 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %55), !dbg !9571
  %op1 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %ops, i32 0, i32 3, !dbg !9572
  store %union.tree_node* %call90, %union.tree_node** %op1, align 8, !dbg !9573
  br label %sw.bb91, !dbg !9574

sw.bb91:                                          ; preds = %if.end82, %sw.bb89
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9575
  %call92 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %56), !dbg !9576
  %op093 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %ops, i32 0, i32 2, !dbg !9577
  store %union.tree_node* %call92, %union.tree_node** %op093, align 8, !dbg !9578
  br label %sw.epilog, !dbg !9579

sw.default:                                       ; preds = %if.end82
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 1901, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9580
  br label %sw.epilog, !dbg !9581

sw.epilog:                                        ; preds = %sw.default, %sw.bb91
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9582
  %call94 = call i32 @gimple_location(%union.gimple_statement_d* %57), !dbg !9583
  %location = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %ops, i32 0, i32 5, !dbg !9584
  store i32 %call94, i32* %location, align 8, !dbg !9585
  %58 = load i8, i8* %nontemporal, align 1, !dbg !9586
  %conv95 = zext i8 %58 to i32, !dbg !9586
  %tobool96 = icmp ne i32 %conv95, 0, !dbg !9586
  br i1 %tobool96, label %cond.true100, label %lor.lhs.false97, !dbg !9587

lor.lhs.false97:                                  ; preds = %sw.epilog
  %59 = load i8, i8* %promoted, align 1, !dbg !9588
  %conv98 = zext i8 %59 to i32, !dbg !9588
  %tobool99 = icmp ne i32 %conv98, 0, !dbg !9588
  br i1 %tobool99, label %cond.true100, label %cond.false101, !dbg !9586

cond.true100:                                     ; preds = %lor.lhs.false97, %sw.epilog
  br label %cond.end102, !dbg !9586

cond.false101:                                    ; preds = %lor.lhs.false97
  %60 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9589
  br label %cond.end102, !dbg !9586

cond.end102:                                      ; preds = %cond.false101, %cond.true100
  %cond103 = phi %struct.rtx_def* [ null, %cond.true100 ], [ %60, %cond.false101 ], !dbg !9586
  store %struct.rtx_def* %cond103, %struct.rtx_def** %temp, align 8, !dbg !9590
  %61 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9591
  %62 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9592
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !9592
  %bf.load104 = load i32, i32* %63, align 8, !dbg !9592
  %bf.lshr105 = lshr i32 %bf.load104, 16, !dbg !9592
  %bf.clear106 = and i32 %bf.lshr105, 255, !dbg !9592
  %call107 = call %struct.rtx_def* @expand_expr_real_2(%struct.separate_ops* %ops, %struct.rtx_def* %61, i32 %bf.clear106, i32 0), !dbg !9593
  store %struct.rtx_def* %call107, %struct.rtx_def** %temp, align 8, !dbg !9594
  %64 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9595
  %65 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9597
  %cmp108 = icmp eq %struct.rtx_def* %64, %65, !dbg !9598
  br i1 %cmp108, label %if.then110, label %if.else111, !dbg !9599

if.then110:                                       ; preds = %cond.end102
  br label %if.end190, !dbg !9599

if.else111:                                       ; preds = %cond.end102
  %66 = load i8, i8* %promoted, align 1, !dbg !9600
  %tobool112 = icmp ne i8 %66, 0, !dbg !9600
  br i1 %tobool112, label %if.then113, label %if.else173, !dbg !9602

if.then113:                                       ; preds = %if.else111
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !9603, metadata !DIExpression()), !dbg !9605
  %67 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9606
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !9606
  %bf.load114 = load i32, i32* %68, align 8, !dbg !9606
  %bf.lshr115 = lshr i32 %bf.load114, 27, !dbg !9606
  %bf.clear116 = and i32 %bf.lshr115, 1, !dbg !9606
  %tobool117 = icmp ne i32 %bf.clear116, 0, !dbg !9606
  br i1 %tobool117, label %cond.true118, label %cond.false119, !dbg !9606

cond.true118:                                     ; preds = %if.then113
  br label %cond.end123, !dbg !9606

cond.false119:                                    ; preds = %if.then113
  %69 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9606
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !9606
  %bf.load120 = load i32, i32* %70, align 8, !dbg !9606
  %bf.lshr121 = lshr i32 %bf.load120, 26, !dbg !9606
  %bf.clear122 = and i32 %bf.lshr121, 1, !dbg !9606
  br label %cond.end123, !dbg !9606

cond.end123:                                      ; preds = %cond.false119, %cond.true118
  %cond124 = phi i32 [ -1, %cond.true118 ], [ %bf.clear122, %cond.false119 ], !dbg !9606
  store i32 %cond124, i32* %unsignedp, align 4, !dbg !9605
  %71 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9607
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !9607
  %bf.load125 = load i32, i32* %72, align 8, !dbg !9607
  %bf.clear126 = and i32 %bf.load125, 65535, !dbg !9607
  %idxprom127 = sext i32 %bf.clear126 to i64, !dbg !9607
  %arrayidx128 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom127, !dbg !9607
  %73 = load i32, i32* %arrayidx128, align 4, !dbg !9607
  %cmp129 = icmp eq i32 %73, 9, !dbg !9607
  br i1 %cmp129, label %land.lhs.true131, label %if.end168, !dbg !9609

land.lhs.true131:                                 ; preds = %cond.end123
  %74 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9610
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !9610
  %bf.load132 = load i32, i32* %75, align 8, !dbg !9610
  %bf.lshr133 = lshr i32 %bf.load132, 16, !dbg !9610
  %bf.clear134 = and i32 %bf.lshr133, 255, !dbg !9610
  %cmp135 = icmp eq i32 %bf.clear134, 0, !dbg !9611
  br i1 %cmp135, label %if.then137, label %if.end168, !dbg !9612

if.then137:                                       ; preds = %land.lhs.true131
  %76 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9613
  %77 = bitcast %struct.rtx_def* %76 to i32*, !dbg !9613
  %bf.load138 = load i32, i32* %77, align 8, !dbg !9613
  %bf.lshr139 = lshr i32 %bf.load138, 16, !dbg !9613
  %bf.clear140 = and i32 %bf.lshr139, 255, !dbg !9613
  %type141 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %ops, i32 0, i32 1, !dbg !9615
  %78 = load %union.tree_node*, %union.tree_node** %type141, align 8, !dbg !9615
  %base142 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !9615
  %79 = bitcast %struct.tree_base* %base142 to i64*, !dbg !9615
  %bf.load143 = load i64, i64* %79, align 8, !dbg !9615
  %bf.clear144 = and i64 %bf.load143, 65535, !dbg !9615
  %bf.cast145 = trunc i64 %bf.clear144 to i32, !dbg !9615
  %cmp146 = icmp eq i32 %bf.cast145, 14, !dbg !9615
  br i1 %cmp146, label %cond.true148, label %cond.false151, !dbg !9615

cond.true148:                                     ; preds = %if.then137
  %type149 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %ops, i32 0, i32 1, !dbg !9615
  %80 = load %union.tree_node*, %union.tree_node** %type149, align 8, !dbg !9615
  %call150 = call i32 @vector_type_mode(%union.tree_node* %80), !dbg !9615
  br label %cond.end157, !dbg !9615

cond.false151:                                    ; preds = %if.then137
  %type152 = getelementptr inbounds %struct.separate_ops, %struct.separate_ops* %ops, i32 0, i32 1, !dbg !9615
  %81 = load %union.tree_node*, %union.tree_node** %type152, align 8, !dbg !9615
  %type153 = bitcast %union.tree_node* %81 to %struct.tree_type*, !dbg !9615
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type153, i32 0, i32 6, !dbg !9615
  %bf.load154 = load i32, i32* %mode, align 4, !dbg !9615
  %bf.lshr155 = lshr i32 %bf.load154, 16, !dbg !9615
  %bf.clear156 = and i32 %bf.lshr155, 255, !dbg !9615
  br label %cond.end157, !dbg !9615

cond.end157:                                      ; preds = %cond.false151, %cond.true148
  %cond158 = phi i32 [ %call150, %cond.true148 ], [ %bf.clear156, %cond.false151 ], !dbg !9615
  %82 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9616
  %83 = load i32, i32* %unsignedp, align 4, !dbg !9617
  %call159 = call %struct.rtx_def* @convert_modes(i32 %bf.clear140, i32 %cond158, %struct.rtx_def* %82, i32 %83), !dbg !9618
  store %struct.rtx_def* %call159, %struct.rtx_def** %temp, align 8, !dbg !9619
  %84 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9620
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !9620
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9620
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9620
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx160 to %struct.rtx_def**, !dbg !9620
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9620
  %86 = bitcast %struct.rtx_def* %85 to i32*, !dbg !9620
  %bf.load161 = load i32, i32* %86, align 8, !dbg !9620
  %bf.lshr162 = lshr i32 %bf.load161, 16, !dbg !9620
  %bf.clear163 = and i32 %bf.lshr162, 255, !dbg !9620
  %87 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9621
  %88 = bitcast %struct.rtx_def* %87 to i32*, !dbg !9621
  %bf.load164 = load i32, i32* %88, align 8, !dbg !9621
  %bf.lshr165 = lshr i32 %bf.load164, 16, !dbg !9621
  %bf.clear166 = and i32 %bf.lshr165, 255, !dbg !9621
  %89 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9622
  %90 = load i32, i32* %unsignedp, align 4, !dbg !9623
  %call167 = call %struct.rtx_def* @convert_modes(i32 %bf.clear163, i32 %bf.clear166, %struct.rtx_def* %89, i32 %90), !dbg !9624
  store %struct.rtx_def* %call167, %struct.rtx_def** %temp, align 8, !dbg !9625
  br label %if.end168, !dbg !9626

if.end168:                                        ; preds = %cond.end157, %land.lhs.true131, %cond.end123
  %91 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9627
  %u169 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !9627
  %fld170 = bitcast %union.u* %u169 to [1 x %union.rtunion_def]*, !dbg !9627
  %arrayidx171 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld170, i64 0, i64 0, !dbg !9627
  %rt_rtx172 = bitcast %union.rtunion_def* %arrayidx171 to %struct.rtx_def**, !dbg !9627
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx172, align 8, !dbg !9627
  %93 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9628
  %94 = load i32, i32* %unsignedp, align 4, !dbg !9629
  call void @convert_move(%struct.rtx_def* %92, %struct.rtx_def* %93, i32 %94), !dbg !9630
  br label %if.end189, !dbg !9631

if.else173:                                       ; preds = %if.else111
  %95 = load i8, i8* %nontemporal, align 1, !dbg !9632
  %conv174 = zext i8 %95 to i32, !dbg !9632
  %tobool175 = icmp ne i32 %conv174, 0, !dbg !9632
  br i1 %tobool175, label %land.lhs.true176, label %if.else181, !dbg !9634

land.lhs.true176:                                 ; preds = %if.else173
  %96 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9635
  %97 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9636
  %call177 = call zeroext i8 @emit_storent_insn(%struct.rtx_def* %96, %struct.rtx_def* %97), !dbg !9637
  %conv178 = zext i8 %call177 to i32, !dbg !9637
  %tobool179 = icmp ne i32 %conv178, 0, !dbg !9637
  br i1 %tobool179, label %if.then180, label %if.else181, !dbg !9638

if.then180:                                       ; preds = %land.lhs.true176
  br label %if.end188, !dbg !9638

if.else181:                                       ; preds = %land.lhs.true176, %if.else173
  %98 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9639
  %99 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9641
  %call182 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %98, %struct.rtx_def* %99), !dbg !9642
  store %struct.rtx_def* %call182, %struct.rtx_def** %temp, align 8, !dbg !9643
  %100 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9644
  %101 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9646
  %cmp183 = icmp ne %struct.rtx_def* %100, %101, !dbg !9647
  br i1 %cmp183, label %if.then185, label %if.end187, !dbg !9648

if.then185:                                       ; preds = %if.else181
  %102 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9649
  %103 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !9650
  %call186 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %102, %struct.rtx_def* %103), !dbg !9651
  br label %if.end187, !dbg !9651

if.end187:                                        ; preds = %if.then185, %if.else181
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.then180
  br label %if.end189

if.end189:                                        ; preds = %if.end188, %if.end168
  br label %if.end190

if.end190:                                        ; preds = %if.end189, %if.then110
  br label %if.end191

if.end191:                                        ; preds = %if.end190, %if.end68
  br label %sw.epilog193, !dbg !9652

sw.default192:                                    ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 1943, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9653
  br label %sw.epilog193, !dbg !9654

sw.epilog193:                                     ; preds = %sw.default192, %if.end191, %if.end26, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb2, %if.end
  ret void, !dbg !9655
}

declare dso_local void @free_temp_slots() #2

declare dso_local i32 @lookup_stmt_eh_lp(%union.gimple_statement_d*) #2

declare dso_local %struct.rtx_def* @next_real_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local zeroext i8 @insn_could_throw_p(%struct.rtx_def*) #2

declare dso_local void @make_reg_eh_region_note(%struct.rtx_def*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %gs) #0 !dbg !9656 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9657, metadata !DIExpression()), !dbg !9658
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9659
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !9660
  ret %union.tree_node* %call, !dbg !9661
}

declare dso_local void @expand_goto(%union.tree_node*) #2

declare dso_local void @expand_computed_goto(%union.tree_node*) #2

declare dso_local void @expand_label(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %gs) #0 !dbg !9662 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9663, metadata !DIExpression()), !dbg !9664
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9665
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !9666
  ret %union.tree_node* %call, !dbg !9667
}

declare dso_local void @expand_case(%union.gimple_statement_d*) #2

declare dso_local void @expand_asm_stmt(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @expand_call_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !9668 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %exp = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  %builtin_p = alloca i8, align 1
  %decl = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %def = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9669, metadata !DIExpression()), !dbg !9670
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp, metadata !9671, metadata !DIExpression()), !dbg !9672
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !9673, metadata !DIExpression()), !dbg !9674
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9675
  %call = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %0), !dbg !9676
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !9674
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9677, metadata !DIExpression()), !dbg !9678
  call void @llvm.dbg.declare(metadata i8* %builtin_p, metadata !9679, metadata !DIExpression()), !dbg !9680
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !9681, metadata !DIExpression()), !dbg !9682
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9683
  %call1 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %1), !dbg !9683
  %add = add i32 %call1, 3, !dbg !9683
  %call2 = call %union.tree_node* @build_vl_exp_stat(i32 59, i32 %add), !dbg !9683
  store %union.tree_node* %call2, %union.tree_node** %exp, align 8, !dbg !9684
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9685
  %call3 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %2), !dbg !9686
  %3 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9687
  %exp4 = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !9687
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !9687
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !9687
  store %union.tree_node* %call3, %union.tree_node** %arrayidx, align 8, !dbg !9688
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9689
  %call5 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %4), !dbg !9690
  store %union.tree_node* %call5, %union.tree_node** %decl, align 8, !dbg !9691
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9692
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !9692
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9693

land.rhs:                                         ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9694
  %function_decl = bitcast %union.tree_node* %6 to %struct.tree_function_decl*, !dbg !9694
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !9694
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !9694
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !9694
  %bf.clear = and i32 %bf.lshr, 3, !dbg !9694
  %cmp = icmp ne i32 %bf.clear, 0, !dbg !9694
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %7 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !9695
  %land.ext = zext i1 %7 to i32, !dbg !9693
  %conv = trunc i32 %land.ext to i8, !dbg !9692
  store i8 %conv, i8* %builtin_p, align 1, !dbg !9696
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9697
  %call6 = call %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %8), !dbg !9698
  %9 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9699
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !9699
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9699
  store %union.tree_node* %call6, %union.tree_node** %type, align 8, !dbg !9700
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9701
  %call7 = call %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %10), !dbg !9702
  %11 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9703
  %exp8 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !9703
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !9703
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 2, !dbg !9703
  store %union.tree_node* %call7, %union.tree_node** %arrayidx10, align 8, !dbg !9704
  store i64 0, i64* %i, align 8, !dbg !9705
  br label %for.cond, !dbg !9707

for.cond:                                         ; preds = %for.inc, %land.end
  %12 = load i64, i64* %i, align 8, !dbg !9708
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9710
  %call11 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %13), !dbg !9711
  %conv12 = zext i32 %call11 to i64, !dbg !9711
  %cmp13 = icmp ult i64 %12, %conv12, !dbg !9712
  br i1 %cmp13, label %for.body, label %for.end, !dbg !9713

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !9714, metadata !DIExpression()), !dbg !9716
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9717
  %15 = load i64, i64* %i, align 8, !dbg !9718
  %conv15 = trunc i64 %15 to i32, !dbg !9718
  %call16 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %14, i32 %conv15), !dbg !9719
  store %union.tree_node* %call16, %union.tree_node** %arg, align 8, !dbg !9716
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def, metadata !9720, metadata !DIExpression()), !dbg !9721
  %16 = load i8, i8* %builtin_p, align 1, !dbg !9722
  %conv17 = zext i8 %16 to i32, !dbg !9722
  %tobool18 = icmp ne i32 %conv17, 0, !dbg !9722
  br i1 %tobool18, label %land.lhs.true, label %if.end, !dbg !9724

land.lhs.true:                                    ; preds = %for.body
  %17 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9725
  %base = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !9725
  %18 = bitcast %struct.tree_base* %base to i64*, !dbg !9725
  %bf.load19 = load i64, i64* %18, align 8, !dbg !9725
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !9725
  %bf.cast = trunc i64 %bf.clear20 to i32, !dbg !9725
  %cmp21 = icmp eq i32 %bf.cast, 141, !dbg !9726
  br i1 %cmp21, label %land.lhs.true23, label %if.end, !dbg !9727

land.lhs.true23:                                  ; preds = %land.lhs.true
  %19 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9728
  %call24 = call %union.gimple_statement_d* @get_gimple_for_ssa_name(%union.tree_node* %19), !dbg !9729
  store %union.gimple_statement_d* %call24, %union.gimple_statement_d** %def, align 8, !dbg !9730
  %tobool25 = icmp ne %union.gimple_statement_d* %call24, null, !dbg !9730
  br i1 %tobool25, label %land.lhs.true26, label %if.end, !dbg !9731

land.lhs.true26:                                  ; preds = %land.lhs.true23
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !9732
  %call27 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %20), !dbg !9733
  %cmp28 = icmp eq i32 %call27, 121, !dbg !9734
  br i1 %cmp28, label %if.then, label %if.end, !dbg !9735

if.then:                                          ; preds = %land.lhs.true26
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !9736
  %call30 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %21), !dbg !9737
  store %union.tree_node* %call30, %union.tree_node** %arg, align 8, !dbg !9738
  br label %if.end, !dbg !9739

if.end:                                           ; preds = %if.then, %land.lhs.true26, %land.lhs.true23, %land.lhs.true, %for.body
  %22 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !9740
  %23 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9741
  %exp31 = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !9741
  %operands32 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp31, i32 0, i32 3, !dbg !9741
  %24 = load i64, i64* %i, align 8, !dbg !9741
  %add33 = add i64 %24, 3, !dbg !9741
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands32, i64 0, i64 %add33, !dbg !9741
  store %union.tree_node* %22, %union.tree_node** %arrayidx34, align 8, !dbg !9742
  br label %for.inc, !dbg !9743

for.inc:                                          ; preds = %if.end
  %25 = load i64, i64* %i, align 8, !dbg !9744
  %inc = add i64 %25, 1, !dbg !9744
  store i64 %inc, i64* %i, align 8, !dbg !9744
  br label %for.cond, !dbg !9745, !llvm.loop !9746

for.end:                                          ; preds = %for.cond
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9748
  %call35 = call zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d* %26), !dbg !9750
  %tobool36 = icmp ne i8 %call35, 0, !dbg !9750
  br i1 %tobool36, label %if.then37, label %if.end41, !dbg !9751

if.then37:                                        ; preds = %for.end
  %27 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9752
  %base38 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !9752
  %28 = bitcast %struct.tree_base* %base38 to i64*, !dbg !9752
  %bf.load39 = load i64, i64* %28, align 8, !dbg !9753
  %bf.clear40 = and i64 %bf.load39, -65537, !dbg !9753
  %bf.set = or i64 %bf.clear40, 65536, !dbg !9753
  store i64 %bf.set, i64* %28, align 8, !dbg !9753
  br label %if.end41, !dbg !9752

if.end41:                                         ; preds = %if.then37, %for.end
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9754
  %call42 = call zeroext i8 @gimple_call_nothrow_p(%union.gimple_statement_d* %29), !dbg !9756
  %tobool43 = icmp ne i8 %call42, 0, !dbg !9756
  br i1 %tobool43, label %if.then44, label %if.end49, !dbg !9757

if.then44:                                        ; preds = %if.end41
  %30 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9758
  %base45 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !9758
  %31 = bitcast %struct.tree_base* %base45 to i64*, !dbg !9758
  %bf.load46 = load i64, i64* %31, align 8, !dbg !9759
  %bf.clear47 = and i64 %bf.load46, -33554433, !dbg !9759
  %bf.set48 = or i64 %bf.clear47, 33554432, !dbg !9759
  store i64 %bf.set48, i64* %31, align 8, !dbg !9759
  br label %if.end49, !dbg !9758

if.end49:                                         ; preds = %if.then44, %if.end41
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9760
  %call50 = call zeroext i8 @gimple_call_tail_p(%union.gimple_statement_d* %32), !dbg !9761
  %conv51 = zext i8 %call50 to i32, !dbg !9761
  %33 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9762
  %base52 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !9762
  %34 = bitcast %struct.tree_base* %base52 to i64*, !dbg !9762
  %35 = zext i32 %conv51 to i64, !dbg !9763
  %bf.load53 = load i64, i64* %34, align 8, !dbg !9763
  %bf.value = and i64 %35, 1, !dbg !9763
  %bf.shl = shl i64 %bf.value, 18, !dbg !9763
  %bf.clear54 = and i64 %bf.load53, -262145, !dbg !9763
  %bf.set55 = or i64 %bf.clear54, %bf.shl, !dbg !9763
  store i64 %bf.set55, i64* %34, align 8, !dbg !9763
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !9763
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9764
  %call56 = call zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %36), !dbg !9765
  %conv57 = zext i8 %call56 to i32, !dbg !9765
  %37 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9766
  %base58 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !9766
  %38 = bitcast %struct.tree_base* %base58 to i64*, !dbg !9766
  %39 = zext i32 %conv57 to i64, !dbg !9767
  %bf.load59 = load i64, i64* %38, align 8, !dbg !9767
  %bf.value60 = and i64 %39, 1, !dbg !9767
  %bf.shl61 = shl i64 %bf.value60, 28, !dbg !9767
  %bf.clear62 = and i64 %bf.load59, -268435457, !dbg !9767
  %bf.set63 = or i64 %bf.clear62, %bf.shl61, !dbg !9767
  store i64 %bf.set63, i64* %38, align 8, !dbg !9767
  %bf.result.cast64 = trunc i64 %bf.value60 to i32, !dbg !9767
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9768
  %call65 = call zeroext i8 @gimple_call_from_thunk_p(%union.gimple_statement_d* %40), !dbg !9769
  %conv66 = zext i8 %call65 to i32, !dbg !9769
  %41 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9770
  %base67 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !9770
  %42 = bitcast %struct.tree_base* %base67 to i64*, !dbg !9770
  %43 = zext i32 %conv66 to i64, !dbg !9771
  %bf.load68 = load i64, i64* %42, align 8, !dbg !9771
  %bf.value69 = and i64 %43, 1, !dbg !9771
  %bf.shl70 = shl i64 %bf.value69, 29, !dbg !9771
  %bf.clear71 = and i64 %bf.load68, -536870913, !dbg !9771
  %bf.set72 = or i64 %bf.clear71, %bf.shl70, !dbg !9771
  store i64 %bf.set72, i64* %42, align 8, !dbg !9771
  %bf.result.cast73 = trunc i64 %bf.value69 to i32, !dbg !9771
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9772
  %call74 = call zeroext i8 @gimple_call_cannot_inline_p(%union.gimple_statement_d* %44), !dbg !9773
  %conv75 = zext i8 %call74 to i32, !dbg !9773
  %45 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9774
  %base76 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !9774
  %46 = bitcast %struct.tree_base* %base76 to i64*, !dbg !9774
  %47 = zext i32 %conv75 to i64, !dbg !9775
  %bf.load77 = load i64, i64* %46, align 8, !dbg !9775
  %bf.value78 = and i64 %47, 1, !dbg !9775
  %bf.shl79 = shl i64 %bf.value78, 26, !dbg !9775
  %bf.clear80 = and i64 %bf.load77, -67108865, !dbg !9775
  %bf.set81 = or i64 %bf.clear80, %bf.shl79, !dbg !9775
  store i64 %bf.set81, i64* %46, align 8, !dbg !9775
  %bf.result.cast82 = trunc i64 %bf.value78 to i32, !dbg !9775
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9776
  %call83 = call zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %48), !dbg !9777
  %conv84 = zext i8 %call83 to i32, !dbg !9777
  %49 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9778
  %base85 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !9778
  %50 = bitcast %struct.tree_base* %base85 to i64*, !dbg !9778
  %51 = zext i32 %conv84 to i64, !dbg !9779
  %bf.load86 = load i64, i64* %50, align 8, !dbg !9779
  %bf.value87 = and i64 %51, 1, !dbg !9779
  %bf.shl88 = shl i64 %bf.value87, 27, !dbg !9779
  %bf.clear89 = and i64 %bf.load86, -134217729, !dbg !9779
  %bf.set90 = or i64 %bf.clear89, %bf.shl88, !dbg !9779
  store i64 %bf.set90, i64* %50, align 8, !dbg !9779
  %bf.result.cast91 = trunc i64 %bf.value87 to i32, !dbg !9779
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9780
  %call92 = call i32 @gimple_location(%union.gimple_statement_d* %52), !dbg !9780
  %53 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9780
  %exp93 = bitcast %union.tree_node* %53 to %struct.tree_exp*, !dbg !9780
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp93, i32 0, i32 1, !dbg !9780
  store i32 %call92, i32* %locus, align 8, !dbg !9780
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9781
  %call94 = call %union.tree_node* @gimple_block(%union.gimple_statement_d* %54), !dbg !9782
  %55 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9783
  %call95 = call %union.tree_node** @tree_block(%union.tree_node* %55), !dbg !9783
  store %union.tree_node* %call94, %union.tree_node** %call95, align 8, !dbg !9784
  %56 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9785
  %tobool96 = icmp ne %union.tree_node* %56, null, !dbg !9785
  br i1 %tobool96, label %if.then97, label %if.else, !dbg !9787

if.then97:                                        ; preds = %if.end49
  %57 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !9788
  %58 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9789
  call void @expand_assignment(%union.tree_node* %57, %union.tree_node* %58, i8 zeroext 0), !dbg !9790
  br label %if.end99, !dbg !9790

if.else:                                          ; preds = %if.end49
  %59 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !9791
  %60 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !9792
  %call98 = call %struct.rtx_def* @expand_expr_real_1(%union.tree_node* %59, %struct.rtx_def* %60, i32 0, i32 0, %struct.rtx_def** null), !dbg !9793
  br label %if.end99

if.end99:                                         ; preds = %if.else, %if.then97
  ret void, !dbg !9794
}

declare dso_local void @expand_null_return() #2

declare dso_local void @expand_return(%union.tree_node*) #2

declare dso_local void @expand_assignment(%union.tree_node*, %union.tree_node*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_assign_nontemporal_move_p(%union.gimple_statement_d* %gs) #0 !dbg !9795 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9796, metadata !DIExpression()), !dbg !9797
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9798
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9799
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9800
  %bf.load = load i32, i32* %1, align 8, !dbg !9800
  %bf.lshr = lshr i32 %bf.load, 10, !dbg !9800
  %bf.clear = and i32 %bf.lshr, 1, !dbg !9800
  %conv = trunc i32 %bf.clear to i8, !dbg !9798
  ret i8 %conv, !dbg !9801
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_expr(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %mode, i32 %modifier) #0 !dbg !9802 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %modifier.addr = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !9805, metadata !DIExpression()), !dbg !9806
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9807, metadata !DIExpression()), !dbg !9808
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9809, metadata !DIExpression()), !dbg !9810
  store i32 %modifier, i32* %modifier.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %modifier.addr, metadata !9811, metadata !DIExpression()), !dbg !9812
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9813
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9814
  %2 = load i32, i32* %mode.addr, align 4, !dbg !9815
  %3 = load i32, i32* %modifier.addr, align 4, !dbg !9816
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* %1, i32 %2, i32 %3, %struct.rtx_def** null), !dbg !9817
  ret %struct.rtx_def* %call, !dbg !9818
}

declare dso_local %struct.rtx_def* @expand_expr_real_2(%struct.separate_ops*, %struct.rtx_def*, i32, i32) #2

declare dso_local %struct.rtx_def* @convert_modes(i32, i32, %struct.rtx_def*, i32) #2

declare dso_local void @convert_move(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local zeroext i8 @emit_storent_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !9819 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9820, metadata !DIExpression()), !dbg !9821
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9822
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !9823
  ret %union.tree_node* %call, !dbg !9824
}

declare dso_local %union.tree_node* @build_vl_exp_stat(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !9825 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9826, metadata !DIExpression()), !dbg !9827
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !9828, metadata !DIExpression()), !dbg !9829
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9830
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !9831
  store i32 %call, i32* %num_ops, align 4, !dbg !9832
  %1 = load i32, i32* %num_ops, align 4, !dbg !9833
  %sub = sub i32 %1, 3, !dbg !9834
  ret i32 %sub, !dbg !9835
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !9836 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9837, metadata !DIExpression()), !dbg !9838
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9839
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !9840
  ret %union.tree_node* %call, !dbg !9841
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !9842 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9843, metadata !DIExpression()), !dbg !9844
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !9845, metadata !DIExpression()), !dbg !9846
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9847
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !9848
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !9846
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !9849
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !9849
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !9849
  %bf.load = load i64, i64* %2, align 8, !dbg !9849
  %bf.clear = and i64 %bf.load, 65535, !dbg !9849
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9849
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !9851
  br i1 %cmp, label %if.then, label %if.end, !dbg !9852

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !9853
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !9853
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9853
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9853
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9853
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !9854
  br label %return, !dbg !9854

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9855
  br label %return, !dbg !9855

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9856
  ret %union.tree_node* %5, !dbg !9856
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) #0 !dbg !9857 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %fn = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9858, metadata !DIExpression()), !dbg !9859
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn, metadata !9860, metadata !DIExpression()), !dbg !9861
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9862
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !9863
  store %union.tree_node* %call, %union.tree_node** %fn, align 8, !dbg !9861
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !9864, metadata !DIExpression()), !dbg !9865
  %1 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !9866
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !9866
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9866
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !9866
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !9865
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9867
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !9867
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !9867
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !9867
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !9868
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9869
  %common4 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !9869
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !9869
  %6 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !9869
  ret %union.tree_node* %6, !dbg !9870
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %gs) #0 !dbg !9871 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9872, metadata !DIExpression()), !dbg !9873
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9874
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 2), !dbg !9875
  ret %union.tree_node* %call, !dbg !9876
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !9877 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9878, metadata !DIExpression()), !dbg !9879
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !9880, metadata !DIExpression()), !dbg !9881
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9882
  %1 = load i32, i32* %index.addr, align 4, !dbg !9883
  %add = add i32 %1, 3, !dbg !9884
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !9885
  ret %union.tree_node* %call, !dbg !9886
}

declare dso_local zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_nothrow_p(%union.gimple_statement_d* %s) #0 !dbg !9887 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !9888, metadata !DIExpression()), !dbg !9889
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9890
  %call = call i32 @gimple_call_flags(%union.gimple_statement_d* %0), !dbg !9891
  %and = and i32 %call, 64, !dbg !9892
  %cmp = icmp ne i32 %and, 0, !dbg !9893
  %conv = zext i1 %cmp to i32, !dbg !9893
  %conv1 = trunc i32 %conv to i8, !dbg !9894
  ret i8 %conv1, !dbg !9895
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %s) #0 !dbg !9896 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !9897, metadata !DIExpression()), !dbg !9898
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9899
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9900
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9901
  %bf.load = load i32, i32* %1, align 8, !dbg !9901
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9901
  %and = and i32 %bf.lshr, 4, !dbg !9902
  %cmp = icmp ne i32 %and, 0, !dbg !9903
  %conv = zext i1 %cmp to i32, !dbg !9903
  %conv1 = trunc i32 %conv to i8, !dbg !9904
  ret i8 %conv1, !dbg !9905
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_from_thunk_p(%union.gimple_statement_d* %s) #0 !dbg !9906 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !9907, metadata !DIExpression()), !dbg !9908
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9909
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9910
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9911
  %bf.load = load i32, i32* %1, align 8, !dbg !9911
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9911
  %and = and i32 %bf.lshr, 2, !dbg !9912
  %cmp = icmp ne i32 %and, 0, !dbg !9913
  %conv = zext i1 %cmp to i32, !dbg !9913
  %conv1 = trunc i32 %conv to i8, !dbg !9914
  ret i8 %conv1, !dbg !9915
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_cannot_inline_p(%union.gimple_statement_d* %s) #0 !dbg !9916 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !9917, metadata !DIExpression()), !dbg !9918
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9919
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9920
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9921
  %bf.load = load i32, i32* %1, align 8, !dbg !9921
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9921
  %and = and i32 %bf.lshr, 1, !dbg !9922
  %cmp = icmp ne i32 %and, 0, !dbg !9923
  %conv = zext i1 %cmp to i32, !dbg !9923
  %conv1 = trunc i32 %conv to i8, !dbg !9924
  ret i8 %conv1, !dbg !9925
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %s) #0 !dbg !9926 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !9927, metadata !DIExpression()), !dbg !9928
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !9929
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9930
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9931
  %bf.load = load i32, i32* %1, align 8, !dbg !9931
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9931
  %and = and i32 %bf.lshr, 16, !dbg !9932
  %cmp = icmp ne i32 %and, 0, !dbg !9933
  %conv = zext i1 %cmp to i32, !dbg !9933
  %conv1 = trunc i32 %conv to i8, !dbg !9934
  ret i8 %conv1, !dbg !9935
}

declare dso_local %struct.rtx_def* @expand_expr_real_1(%union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def**) #2

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

declare dso_local %struct.rtx_def* @expand_expr_real(%union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def**) #2

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

declare dso_local void @print_rtl(%struct._IO_FILE*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !9936 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !9939, metadata !DIExpression()), !dbg !9940
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !9941, metadata !DIExpression()), !dbg !9942
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !9943, metadata !DIExpression()), !dbg !9944
  %0 = load i32, i32* %flags.addr, align 4, !dbg !9945
  %and = and i32 %0, 8, !dbg !9945
  %tobool = icmp ne i32 %and, 0, !dbg !9945
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !9945

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !9945
  %and1 = and i32 %1, 2, !dbg !9945
  %tobool2 = icmp ne i32 %and1, 0, !dbg !9945
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !9945

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !9945
  %and3 = and i32 %2, 4, !dbg !9945
  %tobool4 = icmp ne i32 %and3, 0, !dbg !9945
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !9945

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !9945
  %and6 = and i32 %3, 1, !dbg !9945
  %tobool7 = icmp ne i32 %and6, 0, !dbg !9945
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !9945

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.15, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9945
  br label %cond.end, !dbg !9945

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !9945

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9945
  %4 = load i32, i32* %flags.addr, align 4, !dbg !9946
  %and8 = and i32 %4, 10, !dbg !9947
  %tobool9 = icmp ne i32 %and8, 0, !dbg !9947
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !9948

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9949
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !9950
  br label %cond.end12, !dbg !9948

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !9948

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !9948
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9951
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !9952
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !9953
  %7 = load i32, i32* %flags.addr, align 4, !dbg !9954
  %and14 = and i32 %7, 8, !dbg !9956
  %tobool15 = icmp ne i32 %and14, 0, !dbg !9956
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !9957

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9958
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !9959
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !9959
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !9958
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !9960

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9961
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !9962
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !9963
  br i1 %cmp, label %if.then, label %if.end, !dbg !9964

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9965
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !9966
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !9966
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !9967
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !9967
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9968
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !9969
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !9970
  br label %if.end, !dbg !9968

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !9971
  %and23 = and i32 %15, 5, !dbg !9972
  %tobool24 = icmp ne i32 %and23, 0, !dbg !9972
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !9973

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9974
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !9975
  br label %cond.end28, !dbg !9973

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !9973

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !9973
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9976
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !9977
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !9978
  %18 = load i32, i32* %flags.addr, align 4, !dbg !9979
  %and30 = and i32 %18, 4, !dbg !9981
  %tobool31 = icmp ne i32 %and30, 0, !dbg !9981
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !9982

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9983
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !9984
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !9984
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !9983
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !9985

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !9986
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !9987
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !9988
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !9989

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9990
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !9991
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !9991
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !9992
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !9992
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9993
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !9994
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !9995
  br label %if.end42, !dbg !9993

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9996
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !9997
  store i8 0, i8* %done, align 8, !dbg !9998
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9999
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !10000
  store i32 0, i32* %phi_i, align 8, !dbg !10001
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10002
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !10003
  store i32 0, i32* %num_phi, align 4, !dbg !10004
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10005
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !10006
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10007
  ret void, !dbg !10008
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !10009 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10012, metadata !DIExpression()), !dbg !10013
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10014
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !10016
  %tobool = icmp ne i8 %call, 0, !dbg !10016
  br i1 %tobool, label %if.end, label %if.then, !dbg !10017

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !10018
  br label %return, !dbg !10018

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10019
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !10020
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !10021
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !10022
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !10022
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !10023
  br label %return, !dbg !10023

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !10024
  ret %struct.def_optype_d* %3, !dbg !10024
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !10025 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10026, metadata !DIExpression()), !dbg !10027
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10028
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10030
  %tobool = icmp ne i8 %call, 0, !dbg !10030
  br i1 %tobool, label %if.end, label %if.then, !dbg !10031

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10032
  br label %return, !dbg !10032

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10033
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10034
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !10035
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !10035
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !10036
  br label %return, !dbg !10036

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10037
  ret %union.tree_node* %3, !dbg !10037
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !10038 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10041, metadata !DIExpression()), !dbg !10042
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10043
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !10045
  %tobool = icmp ne i8 %call, 0, !dbg !10045
  br i1 %tobool, label %if.end, label %if.then, !dbg !10046

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !10047
  br label %return, !dbg !10047

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10048
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !10049
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !10050
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !10051
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !10051
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !10052
  br label %return, !dbg !10052

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !10053
  ret %struct.use_optype_d* %3, !dbg !10053
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !10054 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10055, metadata !DIExpression()), !dbg !10056
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10057
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10059
  %tobool = icmp ne i8 %call, 0, !dbg !10059
  br i1 %tobool, label %if.end, label %if.then, !dbg !10060

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10061
  br label %return, !dbg !10061

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10062
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10063
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !10064
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !10064
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !10065
  br label %return, !dbg !10065

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10066
  ret %union.tree_node* %3, !dbg !10066
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !10067 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10068, metadata !DIExpression()), !dbg !10069
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10070
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !10071
  %cmp = icmp uge i32 %call, 6, !dbg !10072
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10073

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10074
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !10075
  %cmp2 = icmp ule i32 %call1, 9, !dbg !10076
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !10077
  %land.ext = zext i1 %2 to i32, !dbg !10073
  %conv = trunc i32 %land.ext to i8, !dbg !10071
  ret i8 %conv, !dbg !10078
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !10079 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !10082, metadata !DIExpression()), !dbg !10083
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !10084, metadata !DIExpression()), !dbg !10085
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !10086, metadata !DIExpression()), !dbg !10087
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !10088, metadata !DIExpression()), !dbg !10089
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10090
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10089
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !10091, metadata !DIExpression()), !dbg !10092
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10093
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !10093
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !10093
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !10093
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !10092
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !10094, metadata !DIExpression()), !dbg !10095
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10096
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !10096
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !10095
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !10097, metadata !DIExpression()), !dbg !10098
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !10099, metadata !DIExpression()), !dbg !10100
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !10101
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !10102
  %conv = zext i8 %call1 to i32, !dbg !10102
  %tobool = icmp ne i32 %conv, 0, !dbg !10102
  %5 = zext i1 %tobool to i64, !dbg !10102
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !10102
  store i32 %cond, i32* %flag, align 4, !dbg !10103
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !10104
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !10106
  %cmp = icmp eq i32 %call2, 16, !dbg !10107
  br i1 %cmp, label %if.then, label %if.else, !dbg !10108

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !10109
  %8 = load i32, i32* %flag, align 4, !dbg !10109
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !10109
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10109
  br label %for.cond, !dbg !10109

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !10112
  %tobool6 = icmp ne i8 %call5, 0, !dbg !10112
  %lnot = xor i1 %tobool6, true, !dbg !10112
  br i1 %lnot, label %for.body, label %for.end, !dbg !10109

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10114
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !10114
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !10116
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !10117
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !10118

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10119
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10120
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10121
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !10122
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10123
  br label %if.end, !dbg !10124

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !10116

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !10112
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10112
  br label %for.cond, !dbg !10112, !llvm.loop !10125

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !10127

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !10128
  %cmp13 = icmp eq i32 %14, 1, !dbg !10131
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !10132

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !10133
  %16 = load i32, i32* %flag, align 4, !dbg !10133
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !10133
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10133
  br label %for.cond17, !dbg !10133

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !10136
  %tobool19 = icmp ne i8 %call18, 0, !dbg !10136
  %lnot20 = xor i1 %tobool19, true, !dbg !10136
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !10133

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10138
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !10138
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !10140
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !10141
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !10142

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10143
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10144
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10145
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !10146
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10147
  br label %if.end27, !dbg !10148

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !10140

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !10136
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10136
  br label %for.cond17, !dbg !10136, !llvm.loop !10149

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !10151

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !10152
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !10154
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10155
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !10156
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !10157

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10158
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !10158
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !10161
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !10162
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !10163

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10164
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10165
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10166
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !10167
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10168
  br label %if.end41, !dbg !10169

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !10170

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10171
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !10173
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !10174
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10174
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !10175
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !10176

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10177
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !10178
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !10179
  br label %if.end49, !dbg !10179

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !10180
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !10181
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !10182
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !10183
  ret void, !dbg !10184
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !10185 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !10188, metadata !DIExpression()), !dbg !10189
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !10190
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !10191
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !10191
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !10192
  ret %union.tree_node* %2, !dbg !10193
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !10194 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10197, metadata !DIExpression()), !dbg !10198
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !10199, metadata !DIExpression()), !dbg !10200
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10201, metadata !DIExpression()), !dbg !10202
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !10203, metadata !DIExpression()), !dbg !10204
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !10205
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !10206
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !10204
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !10207, metadata !DIExpression()), !dbg !10208
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10209
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !10210
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10211
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !10212
  store i8 0, i8* %done, align 8, !dbg !10213
  %3 = load i32, i32* %flags.addr, align 4, !dbg !10214
  %and = and i32 %3, 5, !dbg !10214
  %cmp = icmp ne i32 %and, 0, !dbg !10214
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10214

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.15, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10214
  br label %cond.end, !dbg !10214

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10214

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10214
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !10215
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !10216
  %conv = zext i8 %call1 to i32, !dbg !10216
  %tobool = icmp ne i32 %conv, 0, !dbg !10216
  %5 = zext i1 %tobool to i64, !dbg !10216
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !10216
  store i32 %cond2, i32* %comp, align 4, !dbg !10217
  %6 = load i32, i32* %flags.addr, align 4, !dbg !10218
  %7 = load i32, i32* %comp, align 4, !dbg !10220
  %and3 = and i32 %6, %7, !dbg !10221
  %cmp4 = icmp eq i32 %and3, 0, !dbg !10222
  br i1 %cmp4, label %if.then, label %if.end, !dbg !10223

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10224
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !10226
  store i8 1, i8* %done6, align 8, !dbg !10227
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10228
  br label %return, !dbg !10228

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !10229
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10230
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !10231
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10232
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !10233
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !10234
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10235
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !10236
  store i32 %call7, i32* %num_phi, align 4, !dbg !10237
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10238
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !10239
  store i32 2, i32* %iter_type, align 4, !dbg !10240
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10241
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !10242
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10243
  br label %return, !dbg !10243

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10244
  ret %struct.ssa_use_operand_d* %15, !dbg !10244
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !10245 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !10248, metadata !DIExpression()), !dbg !10249
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !10250, metadata !DIExpression()), !dbg !10251
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !10252, metadata !DIExpression()), !dbg !10253
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10254
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !10256
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !10257
  br i1 %cmp, label %if.then, label %if.end3, !dbg !10258

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10259
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !10262
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10262
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10263
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !10264
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !10265

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10266
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10267
  br label %if.end, !dbg !10268

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10269
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !10271
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10272
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10273
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !10274
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !10275
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10276
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !10277

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !10278
  ret %struct.ssa_use_operand_d* %10, !dbg !10279
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !10280 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10283, metadata !DIExpression()), !dbg !10284
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !10285, metadata !DIExpression()), !dbg !10286
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10287
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !10289
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !10289
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !10287
  br i1 %tobool, label %if.then, label %if.end, !dbg !10290

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10291
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !10291
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !10291
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !10291
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10293
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10294
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !10295
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !10295
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !10296
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !10296
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10297
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !10298
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !10299
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !10300
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10301
  br label %return, !dbg !10301

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10302
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !10304
  %10 = load i32, i32* %phi_i, align 8, !dbg !10304
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10305
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !10306
  %12 = load i32, i32* %num_phi, align 4, !dbg !10306
  %cmp = icmp slt i32 %10, %12, !dbg !10307
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !10308

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10309
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !10309
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10309
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10309
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !10309
  %16 = load i32, i32* %phi_i5, align 8, !dbg !10309
  %inc = add nsw i32 %16, 1, !dbg !10309
  store i32 %inc, i32* %phi_i5, align 8, !dbg !10309
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !10309
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10311
  br label %return, !dbg !10311

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10312
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !10313
  store i8 1, i8* %done, align 8, !dbg !10314
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10315
  br label %return, !dbg !10315

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10316
  ret %struct.ssa_use_operand_d* %18, !dbg !10316
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !10317 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10318, metadata !DIExpression()), !dbg !10319
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10320, metadata !DIExpression()), !dbg !10321
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10322, metadata !DIExpression()), !dbg !10323
  %0 = load i32, i32* %flags.addr, align 4, !dbg !10324
  %and = and i32 %0, 10, !dbg !10324
  %cmp = icmp eq i32 %and, 0, !dbg !10324
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !10324

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !10324
  %and1 = and i32 %1, 1, !dbg !10324
  %tobool = icmp ne i32 %and1, 0, !dbg !10324
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10324

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.15, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10324
  br label %cond.end, !dbg !10324

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !10324

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10324
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10325
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10326
  %4 = load i32, i32* %flags.addr, align 4, !dbg !10327
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !10328
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10329
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !10330
  store i32 2, i32* %iter_type, align 4, !dbg !10331
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10332
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !10333
  ret %struct.ssa_use_operand_d* %call, !dbg !10334
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !10335 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !10338, metadata !DIExpression()), !dbg !10339
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !10340, metadata !DIExpression()), !dbg !10341
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10342
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !10344
  %tobool = icmp ne i8 %call, 0, !dbg !10344
  br i1 %tobool, label %if.end, label %if.then, !dbg !10345

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10346
  br label %return, !dbg !10346

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10347
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !10348
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !10349
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !10350
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !10350
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !10351
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !10352
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !10352
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !10354

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !10355
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !10355
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !10356
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !10356
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !10357
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !10358
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !10359
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !10360
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !10361

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !10362
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !10362
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10363
  br label %return, !dbg !10363

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10364
  br label %return, !dbg !10364

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !10365
  ret %struct.ssa_use_operand_d* %8, !dbg !10365
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !10366 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !10369, metadata !DIExpression()), !dbg !10370
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10371
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !10373
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10373
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !10374
  br i1 %cmp, label %if.then, label %if.end, !dbg !10375

if.then:                                          ; preds = %entry
  br label %return, !dbg !10376

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10377
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !10378
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10378
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10379
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !10380
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !10380
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !10381
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !10382
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10383
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !10384
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !10384
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10385
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !10386
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !10386
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !10387
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !10388
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10389
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !10390
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !10391
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10392
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !10393
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !10394
  br label %return, !dbg !10395

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !10395
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !10396 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !10399, metadata !DIExpression()), !dbg !10400
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !10401, metadata !DIExpression()), !dbg !10402
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10403
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10404
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !10405
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10406
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10407
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !10408
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10408
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10409
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !10410
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !10411
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10412
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10413
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !10414
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !10414
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !10415
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !10416
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10417
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !10418
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !10419
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !10420
  ret void, !dbg !10421
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !10422 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10423, metadata !DIExpression()), !dbg !10424
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10425
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !10426
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !10427
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !10427
  ret %union.tree_node* %1, !dbg !10428
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !10429 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10432, metadata !DIExpression()), !dbg !10433
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10434
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !10435
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !10436
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10437
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !10438
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !10439
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10440
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !10441
  store i32 0, i32* %iter_type, align 4, !dbg !10442
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10443
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !10444
  store i32 0, i32* %phi_i, align 8, !dbg !10445
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10446
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !10447
  store i32 0, i32* %num_phi, align 4, !dbg !10448
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10449
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !10450
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !10451
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10452
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !10453
  store i8 1, i8* %done, align 8, !dbg !10454
  ret void, !dbg !10455
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !10456 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10457, metadata !DIExpression()), !dbg !10458
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10459
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !10460
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !10461
  %1 = load i32, i32* %nargs, align 4, !dbg !10461
  ret i32 %1, !dbg !10462
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !10463 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10466, metadata !DIExpression()), !dbg !10467
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !10468, metadata !DIExpression()), !dbg !10469
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10470
  %1 = load i32, i32* %i.addr, align 4, !dbg !10471
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !10472
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !10473
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !10474
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !10475 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10479, metadata !DIExpression()), !dbg !10480
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !10481, metadata !DIExpression()), !dbg !10482
  %0 = load i32, i32* %index.addr, align 4, !dbg !10483
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10483
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !10483
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !10483
  %2 = load i32, i32* %capacity, align 8, !dbg !10483
  %cmp = icmp ule i32 %0, %2, !dbg !10483
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !10483

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10483
  br label %cond.end, !dbg !10483

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10483

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10483
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10484
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !10485
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !10486
  %4 = load i32, i32* %index.addr, align 4, !dbg !10487
  %idxprom = zext i32 %4 to i64, !dbg !10484
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !10484
  ret %struct.phi_arg_d* %arrayidx, !dbg !10488
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !10489 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !10492, metadata !DIExpression()), !dbg !10493
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !10494, metadata !DIExpression()), !dbg !10495
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !10496, metadata !DIExpression()), !dbg !10497
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !10498
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !10498
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !10500

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !10501
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10501
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10501
  %bf.load = load i64, i64* %2, align 8, !dbg !10501
  %bf.clear = and i64 %bf.load, 65535, !dbg !10501
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10501
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !10502
  br i1 %cmp, label %if.then, label %if.else, !dbg !10503

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10504
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !10505
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10506
  br label %if.end, !dbg !10504

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !10507
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !10507
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !10507
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !10509
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !10510
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !10511
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !10512
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !10513
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !10514 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10515, metadata !DIExpression()), !dbg !10516
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10517
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !10518
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !10519
  %bf.load = load i32, i32* %1, align 8, !dbg !10519
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10519
  ret i32 %bf.lshr, !dbg !10520
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !10521 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10522, metadata !DIExpression()), !dbg !10523
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10524
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !10525
  ret %union.tree_node* %call, !dbg !10526
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !10527 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10528, metadata !DIExpression()), !dbg !10529
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10530
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !10531
  ret %union.tree_node* %call, !dbg !10532
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_cond_single_var_p(%union.gimple_statement_d* %gs) #0 !dbg !10533 {
entry:
  %retval = alloca i8, align 1
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !10534, metadata !DIExpression()), !dbg !10535
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10536
  %call = call i32 @gimple_cond_code(%union.gimple_statement_d* %0), !dbg !10538
  %cmp = icmp eq i32 %call, 102, !dbg !10539
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !10540

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10541
  %call1 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %1), !dbg !10542
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !10543
  %cmp2 = icmp eq %union.tree_node* %call1, %2, !dbg !10544
  br i1 %cmp2, label %if.then, label %if.end, !dbg !10545

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !10546
  br label %return, !dbg !10546

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10547
  %call3 = call i32 @gimple_cond_code(%union.gimple_statement_d* %3), !dbg !10549
  %cmp4 = icmp eq i32 %call3, 101, !dbg !10550
  br i1 %cmp4, label %land.lhs.true5, label %if.end9, !dbg !10551

land.lhs.true5:                                   ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !10552
  %call6 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %4), !dbg !10553
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !10554
  %cmp7 = icmp eq %union.tree_node* %call6, %5, !dbg !10555
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !10556

if.then8:                                         ; preds = %land.lhs.true5
  store i8 1, i8* %retval, align 1, !dbg !10557
  br label %return, !dbg !10557

if.end9:                                          ; preds = %land.lhs.true5, %if.end
  store i8 0, i8* %retval, align 1, !dbg !10558
  br label %return, !dbg !10558

return:                                           ; preds = %if.end9, %if.then8, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !10559
  ret i8 %6, !dbg !10559
}

declare dso_local zeroext i8 @optimize_insn_for_speed_p() #2

declare dso_local void @extract_true_false_edges_from_block(%struct.basic_block_def*, %struct.edge_def**, %struct.edge_def**) #2

declare dso_local void @jumpif_1(i32, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @maybe_cleanup_end_of_block(%struct.edge_def* %e, %struct.rtx_def* %last) #0 !dbg !10560 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %last.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !10563, metadata !DIExpression()), !dbg !10564
  store %struct.rtx_def* %last, %struct.rtx_def** %last.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last.addr, metadata !10565, metadata !DIExpression()), !dbg !10566
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !10567
  %0 = bitcast %struct.rtx_def* %call to i32*, !dbg !10567
  %bf.load = load i32, i32* %0, align 8, !dbg !10567
  %bf.clear = and i32 %bf.load, 65535, !dbg !10567
  %cmp = icmp eq i32 %bf.clear, 11, !dbg !10567
  br i1 %cmp, label %if.then, label %if.end28, !dbg !10569

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !10570, metadata !DIExpression()), !dbg !10572
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !10573
  call void @remove_edge(%struct.edge_def* %1), !dbg !10574
  %call1 = call %struct.rtx_def* @get_last_insn(), !dbg !10575
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call1, i32 0, i32 1, !dbg !10575
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10575
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !10575
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10575
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10575
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !10576
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10577
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !10577
  %bf.load2 = load i32, i32* %4, align 8, !dbg !10577
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !10577
  %cmp4 = icmp eq i32 %bf.clear3, 9, !dbg !10577
  br i1 %cmp4, label %land.lhs.true, label %cond.true, !dbg !10577

land.lhs.true:                                    ; preds = %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10577
  %call5 = call i32 @any_condjump_p(%struct.rtx_def* %5), !dbg !10577
  %tobool = icmp ne i32 %call5, 0, !dbg !10577
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10577

cond.true:                                        ; preds = %land.lhs.true, %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 1576, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10577
  br label %cond.end, !dbg !10577

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !10577

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10577
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10578
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !10578
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !10578
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !10578
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !10578
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !10578
  store %struct.rtx_def* %7, %struct.rtx_def** %insn, align 8, !dbg !10580
  br label %for.cond, !dbg !10581

for.cond:                                         ; preds = %if.end, %cond.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10582
  %9 = load %struct.rtx_def*, %struct.rtx_def** %last.addr, align 8, !dbg !10584
  %cmp10 = icmp ne %struct.rtx_def* %8, %9, !dbg !10585
  br i1 %cmp10, label %for.body, label %for.end, !dbg !10586

for.body:                                         ; preds = %for.cond
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10587
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !10587
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !10587
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 1, !dbg !10587
  %rt_rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !10587
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx14, align 8, !dbg !10587
  store %struct.rtx_def* %11, %struct.rtx_def** %insn, align 8, !dbg !10589
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10590
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !10590
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !10590
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 2, !dbg !10590
  %rt_rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**, !dbg !10590
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx18, align 8, !dbg !10590
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !10590
  %bf.load19 = load i32, i32* %14, align 8, !dbg !10590
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !10590
  %cmp21 = icmp eq i32 %bf.clear20, 9, !dbg !10590
  br i1 %cmp21, label %if.then22, label %if.end, !dbg !10592

if.then22:                                        ; preds = %for.body
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10593
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !10593
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !10593
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 2, !dbg !10593
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !10593
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !10593
  %call27 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %16), !dbg !10594
  br label %if.end, !dbg !10594

if.end:                                           ; preds = %if.then22, %for.body
  br label %for.cond, !dbg !10595, !llvm.loop !10596

for.end:                                          ; preds = %for.cond
  br label %if.end28, !dbg !10598

if.end28:                                         ; preds = %for.end, %entry
  ret void, !dbg !10599
}

declare dso_local void @jumpifnot_1(i32, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, i32) #2

declare dso_local i32 @any_condjump_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @delete_insn(%struct.rtx_def*) #2

declare dso_local zeroext i8 @ssa_operands_active() #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !10600 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10603, metadata !DIExpression()), !dbg !10604
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !10605, metadata !DIExpression()), !dbg !10606
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10607, metadata !DIExpression()), !dbg !10608
  %0 = load i32, i32* %flags.addr, align 4, !dbg !10609
  %and = and i32 %0, 5, !dbg !10609
  %cmp = icmp eq i32 %and, 0, !dbg !10609
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !10609

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !10609
  %and1 = and i32 %1, 2, !dbg !10609
  %tobool = icmp ne i32 %and1, 0, !dbg !10609
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10609

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.15, i64 0, i64 0), i32 783, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10609
  br label %cond.end, !dbg !10609

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !10609

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10609
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10610
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !10611
  %4 = load i32, i32* %flags.addr, align 4, !dbg !10612
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !10613
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10614
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !10615
  store i32 3, i32* %iter_type, align 4, !dbg !10616
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10617
  %call = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %6), !dbg !10618
  ret %union.tree_node** %call, !dbg !10619
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !10620 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %def_p = alloca %union.tree_node**, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !10623, metadata !DIExpression()), !dbg !10624
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !10625, metadata !DIExpression()), !dbg !10626
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10627
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !10629
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !10629
  %tobool = icmp ne %struct.def_optype_d* %1, null, !dbg !10627
  br i1 %tobool, label %if.then, label %if.end, !dbg !10630

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10631
  %defs1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 2, !dbg !10631
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %defs1, align 8, !dbg !10631
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %3, i32 0, i32 1, !dbg !10631
  %4 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !10631
  store %union.tree_node** %4, %union.tree_node*** %def_p, align 8, !dbg !10633
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10634
  %defs2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 2, !dbg !10635
  %6 = load %struct.def_optype_d*, %struct.def_optype_d** %defs2, align 8, !dbg !10635
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %6, i32 0, i32 0, !dbg !10636
  %7 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !10636
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10637
  %defs3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !10638
  store %struct.def_optype_d* %7, %struct.def_optype_d** %defs3, align 8, !dbg !10639
  %9 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !10640
  store %union.tree_node** %9, %union.tree_node*** %retval, align 8, !dbg !10641
  br label %return, !dbg !10641

if.end:                                           ; preds = %entry
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !10642
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 0, !dbg !10643
  store i8 1, i8* %done, align 8, !dbg !10644
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !10645
  br label %return, !dbg !10645

return:                                           ; preds = %if.end, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !10646
  ret %union.tree_node** %11, !dbg !10646
}

declare dso_local %struct.rtx_def* @block_label(%struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @gen_label_rtx() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_debug_expr(%union.tree_node* %exp) #0 !dbg !10647 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %op0 = alloca %struct.rtx_def*, align 8
  %op1 = alloca %struct.rtx_def*, align 8
  %op2 = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %as = alloca i8, align 1
  %address_mode = alloca i32, align 4
  %inner_mode = alloca i32, align 4
  %align = alloca i32, align 4
  %mode1 = alloca i32, align 4
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %offset = alloca %union.tree_node*, align 8
  %volatilep = alloca i32, align 4
  %tem = alloca %union.tree_node*, align 8
  %orig_op0 = alloca %struct.rtx_def*, align 8
  %addrmode = alloca i32, align 4
  %offmode = alloca i32, align 4
  %units = alloca i64, align 8
  %opmode = alloca i32, align 4
  %div920 = alloca %struct.rtx_def*, align 8
  %mod = alloca %struct.rtx_def*, align 8
  %adj = alloca %struct.rtx_def*, align 8
  %mod930 = alloca %struct.rtx_def*, align 8
  %adj932 = alloca %struct.rtx_def*, align 8
  %div940 = alloca %struct.rtx_def*, align 8
  %mod942 = alloca %struct.rtx_def*, align 8
  %adj944 = alloca %struct.rtx_def*, align 8
  %div948 = alloca %struct.rtx_def*, align 8
  %mod950 = alloca %struct.rtx_def*, align 8
  %adj952 = alloca %struct.rtx_def*, align 8
  %mod958 = alloca %struct.rtx_def*, align 8
  %adj960 = alloca %struct.rtx_def*, align 8
  %mod966 = alloca %struct.rtx_def*, align 8
  %adj968 = alloca %struct.rtx_def*, align 8
  %div976 = alloca %struct.rtx_def*, align 8
  %mod978 = alloca %struct.rtx_def*, align 8
  %adj980 = alloca %struct.rtx_def*, align 8
  %div984 = alloca %struct.rtx_def*, align 8
  %mod986 = alloca %struct.rtx_def*, align 8
  %adj988 = alloca %struct.rtx_def*, align 8
  %mod994 = alloca %struct.rtx_def*, align 8
  %adj996 = alloca %struct.rtx_def*, align 8
  %mod1002 = alloca %struct.rtx_def*, align 8
  %adj1004 = alloca %struct.rtx_def*, align 8
  %imode = alloca i32, align 4
  %re = alloca %struct.rtx_def*, align 8
  %im = alloca %struct.rtx_def*, align 8
  %ifmode = alloca i32, align 4
  %ihmode = alloca i32, align 4
  %halfsize = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %val = alloca %union.tree_node*, align 8
  %g = alloca %union.gimple_statement_d*, align 8
  %part = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !10650, metadata !DIExpression()), !dbg !10651
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op0, metadata !10652, metadata !DIExpression()), !dbg !10653
  store %struct.rtx_def* null, %struct.rtx_def** %op0, align 8, !dbg !10653
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1, metadata !10654, metadata !DIExpression()), !dbg !10655
  store %struct.rtx_def* null, %struct.rtx_def** %op1, align 8, !dbg !10655
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op2, metadata !10656, metadata !DIExpression()), !dbg !10657
  store %struct.rtx_def* null, %struct.rtx_def** %op2, align 8, !dbg !10657
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !10658, metadata !DIExpression()), !dbg !10659
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10660
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !10660
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10660
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10660
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10660
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10660
  %bf.load = load i64, i64* %2, align 8, !dbg !10660
  %bf.clear = and i64 %bf.load, 65535, !dbg !10660
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10660
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !10660
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !10660

cond.true:                                        ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10660
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !10660
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !10660
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !10660
  %call = call i32 @vector_type_mode(%union.tree_node* %4), !dbg !10660
  br label %cond.end, !dbg !10660

cond.false:                                       ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10660
  %common3 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !10660
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !10660
  %6 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !10660
  %type5 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !10660
  %mode6 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 6, !dbg !10660
  %bf.load7 = load i32, i32* %mode6, align 4, !dbg !10660
  %bf.lshr = lshr i32 %bf.load7, 16, !dbg !10660
  %bf.clear8 = and i32 %bf.lshr, 255, !dbg !10660
  br label %cond.end, !dbg !10660

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear8, %cond.false ], !dbg !10660
  store i32 %cond, i32* %mode, align 4, !dbg !10659
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !10661, metadata !DIExpression()), !dbg !10662
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10663
  %common9 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !10663
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !10663
  %8 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !10663
  %base11 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !10663
  %9 = bitcast %struct.tree_base* %base11 to i64*, !dbg !10663
  %bf.load12 = load i64, i64* %9, align 8, !dbg !10663
  %bf.lshr13 = lshr i64 %bf.load12, 21, !dbg !10663
  %bf.clear14 = and i64 %bf.lshr13, 1, !dbg !10663
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !10663
  store i32 %bf.cast15, i32* %unsignedp, align 4, !dbg !10662
  call void @llvm.dbg.declare(metadata i8* %as, metadata !10664, metadata !DIExpression()), !dbg !10666
  call void @llvm.dbg.declare(metadata i32* %address_mode, metadata !10667, metadata !DIExpression()), !dbg !10668
  %10 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10669
  %base16 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !10669
  %11 = bitcast %struct.tree_base* %base16 to i64*, !dbg !10669
  %bf.load17 = load i64, i64* %11, align 8, !dbg !10669
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !10669
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !10669
  %idxprom = sext i32 %bf.cast19 to i64, !dbg !10669
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10669
  %12 = load i32, i32* %arrayidx, align 4, !dbg !10669
  switch i32 %12, label %sw.epilog48 [
    i32 10, label %sw.bb
    i32 7, label %sw.bb30
    i32 5, label %sw.bb30
    i32 6, label %sw.bb38
    i32 2, label %sw.bb46
    i32 8, label %sw.bb46
    i32 1, label %sw.bb47
    i32 0, label %sw.bb47
    i32 3, label %sw.bb47
    i32 4, label %sw.bb47
    i32 9, label %sw.bb47
  ], !dbg !10670

sw.bb:                                            ; preds = %cond.end
  %13 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10671
  %base20 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !10671
  %14 = bitcast %struct.tree_base* %base20 to i64*, !dbg !10671
  %bf.load21 = load i64, i64* %14, align 8, !dbg !10671
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !10671
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !10671
  switch i32 %bf.cast23, label %sw.default [
    i32 56, label %sw.bb24
    i32 167, label %sw.bb24
    i32 91, label %sw.bb25
    i32 92, label %sw.bb25
    i32 93, label %sw.bb25
    i32 94, label %sw.bb25
    i32 95, label %sw.bb25
    i32 96, label %sw.bb26
  ], !dbg !10673

sw.bb24:                                          ; preds = %sw.bb, %sw.bb
  br label %ternary, !dbg !10674

sw.bb25:                                          ; preds = %sw.bb, %sw.bb, %sw.bb, %sw.bb, %sw.bb
  br label %binary, !dbg !10676

sw.bb26:                                          ; preds = %sw.bb
  br label %unary, !dbg !10677

sw.default:                                       ; preds = %sw.bb
  br label %sw.epilog, !dbg !10678

sw.epilog:                                        ; preds = %sw.default
  br label %sw.epilog48, !dbg !10679

ternary:                                          ; preds = %sw.bb24
  call void @llvm.dbg.label(metadata !10680), !dbg !10681
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10682
  %exp27 = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !10682
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp27, i32 0, i32 3, !dbg !10682
  %arrayidx28 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !10682
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx28, align 8, !dbg !10682
  %call29 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %16), !dbg !10683
  store %struct.rtx_def* %call29, %struct.rtx_def** %op2, align 8, !dbg !10684
  %17 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8, !dbg !10685
  %tobool = icmp ne %struct.rtx_def* %17, null, !dbg !10685
  br i1 %tobool, label %if.end, label %if.then, !dbg !10687

if.then:                                          ; preds = %ternary
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10688
  br label %return, !dbg !10688

if.end:                                           ; preds = %ternary
  br label %binary, !dbg !10685

binary:                                           ; preds = %if.end, %sw.bb25
  call void @llvm.dbg.label(metadata !10689), !dbg !10690
  br label %sw.bb30, !dbg !10685

sw.bb30:                                          ; preds = %cond.end, %cond.end, %binary
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10691
  %exp31 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !10691
  %operands32 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp31, i32 0, i32 3, !dbg !10691
  %arrayidx33 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands32, i64 0, i64 1, !dbg !10691
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx33, align 8, !dbg !10691
  %call34 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %19), !dbg !10692
  store %struct.rtx_def* %call34, %struct.rtx_def** %op1, align 8, !dbg !10693
  %20 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !10694
  %tobool35 = icmp ne %struct.rtx_def* %20, null, !dbg !10694
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !10696

if.then36:                                        ; preds = %sw.bb30
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10697
  br label %return, !dbg !10697

if.end37:                                         ; preds = %sw.bb30
  br label %unary, !dbg !10694

unary:                                            ; preds = %if.end37, %sw.bb26
  call void @llvm.dbg.label(metadata !10698), !dbg !10699
  br label %sw.bb38, !dbg !10694

sw.bb38:                                          ; preds = %cond.end, %unary
  %21 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10700
  %exp39 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !10700
  %operands40 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp39, i32 0, i32 3, !dbg !10700
  %arrayidx41 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands40, i64 0, i64 0, !dbg !10700
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx41, align 8, !dbg !10700
  %call42 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %22), !dbg !10701
  store %struct.rtx_def* %call42, %struct.rtx_def** %op0, align 8, !dbg !10702
  %23 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10703
  %tobool43 = icmp ne %struct.rtx_def* %23, null, !dbg !10703
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !10705

if.then44:                                        ; preds = %sw.bb38
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10706
  br label %return, !dbg !10706

if.end45:                                         ; preds = %sw.bb38
  br label %sw.epilog48, !dbg !10707

sw.bb46:                                          ; preds = %cond.end, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 2284, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10708
  br label %sw.bb47, !dbg !10708

sw.bb47:                                          ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %sw.bb46
  br label %sw.epilog48, !dbg !10709

sw.epilog48:                                      ; preds = %cond.end, %sw.bb47, %if.end45, %sw.epilog
  %24 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10710
  %base49 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !10710
  %25 = bitcast %struct.tree_base* %base49 to i64*, !dbg !10710
  %bf.load50 = load i64, i64* %25, align 8, !dbg !10710
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !10710
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !10710
  switch i32 %bf.cast52, label %sw.default1541 [
    i32 28, label %sw.bb53
    i32 23, label %sw.bb69
    i32 24, label %sw.bb69
    i32 25, label %sw.bb69
    i32 26, label %sw.bb71
    i32 37, label %sw.bb90
    i32 32, label %sw.bb122
    i32 34, label %sw.bb122
    i32 29, label %sw.bb122
    i32 30, label %sw.bb122
    i32 33, label %sw.bb122
    i32 36, label %sw.bb122
    i32 112, label %sw.bb253
    i32 116, label %sw.bb253
    i32 113, label %sw.bb253
    i32 47, label %sw.bb539
    i32 48, label %sw.bb539
    i32 49, label %sw.bb539
    i32 152, label %sw.bb593
    i32 45, label %sw.bb637
    i32 46, label %sw.bb637
    i32 41, label %sw.bb637
    i32 42, label %sw.bb637
    i32 43, label %sw.bb637
    i32 44, label %sw.bb637
    i32 118, label %sw.bb637
    i32 82, label %sw.bb879
    i32 79, label %sw.bb881
    i32 90, label %sw.bb883
    i32 78, label %sw.bb885
    i32 77, label %sw.bb891
    i32 66, label %sw.bb897
    i32 63, label %sw.bb897
    i32 64, label %sw.bb899
    i32 65, label %sw.bb901
    i32 75, label %sw.bb903
    i32 67, label %sw.bb903
    i32 76, label %sw.bb903
    i32 71, label %sw.bb909
    i32 69, label %sw.bb915
    i32 73, label %sw.bb925
    i32 68, label %sw.bb937
    i32 72, label %sw.bb955
    i32 70, label %sw.bb973
    i32 74, label %sw.bb991
    i32 83, label %sw.bb1009
    i32 84, label %sw.bb1011
    i32 85, label %sw.bb1017
    i32 86, label %sw.bb1019
    i32 80, label %sw.bb1021
    i32 81, label %sw.bb1027
    i32 89, label %sw.bb1033
    i32 93, label %sw.bb1033
    i32 87, label %sw.bb1035
    i32 94, label %sw.bb1035
    i32 88, label %sw.bb1037
    i32 95, label %sw.bb1037
    i32 91, label %sw.bb1039
    i32 92, label %sw.bb1041
    i32 96, label %sw.bb1043
    i32 97, label %sw.bb1045
    i32 98, label %sw.bb1051
    i32 99, label %sw.bb1057
    i32 100, label %sw.bb1063
    i32 101, label %sw.bb1069
    i32 102, label %sw.bb1071
    i32 103, label %sw.bb1073
    i32 104, label %sw.bb1075
    i32 105, label %sw.bb1077
    i32 106, label %sw.bb1079
    i32 107, label %sw.bb1081
    i32 108, label %sw.bb1083
    i32 109, label %sw.bb1085
    i32 110, label %sw.bb1087
    i32 56, label %sw.bb1089
    i32 123, label %sw.bb1091
    i32 124, label %sw.bb1130
    i32 121, label %sw.bb1208
    i32 27, label %sw.bb1226
    i32 51, label %sw.bb1230
    i32 59, label %sw.bb1330
    i32 141, label %sw.bb1331
    i32 0, label %sw.bb1358
    i32 151, label %sw.bb1359
    i32 164, label %sw.bb1359
    i32 165, label %sw.bb1359
    i32 166, label %sw.bb1359
    i32 57, label %sw.bb1359
    i32 181, label %sw.bb1359
    i32 182, label %sw.bb1359
    i32 183, label %sw.bb1359
    i32 184, label %sw.bb1359
    i32 170, label %sw.bb1359
    i32 180, label %sw.bb1359
    i32 179, label %sw.bb1359
    i32 178, label %sw.bb1359
    i32 171, label %sw.bb1359
    i32 176, label %sw.bb1359
    i32 177, label %sw.bb1359
    i32 174, label %sw.bb1359
    i32 175, label %sw.bb1359
    i32 172, label %sw.bb1359
    i32 173, label %sw.bb1359
    i32 114, label %sw.bb1360
    i32 115, label %sw.bb1360
    i32 50, label %sw.bb1360
    i32 150, label %sw.bb1360
    i32 167, label %sw.bb1361
    i32 169, label %sw.bb1427
    i32 168, label %sw.bb1492
  ], !dbg !10711

sw.bb53:                                          ; preds = %sw.epilog48
  %26 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10712
  %call54 = call %struct.rtx_def* @lookup_constant_def(%union.tree_node* %26), !dbg !10715
  %tobool55 = icmp ne %struct.rtx_def* %call54, null, !dbg !10715
  br i1 %tobool55, label %if.end68, label %if.then56, !dbg !10716

if.then56:                                        ; preds = %sw.bb53
  %27 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10717
  %string = bitcast %union.tree_node* %27 to %struct.tree_string*, !dbg !10717
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !10717
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !10717
  %call57 = call i64 @strlen(i8* %arraydecay), !dbg !10720
  %add = add i64 %call57, 1, !dbg !10721
  %28 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10722
  %string58 = bitcast %union.tree_node* %28 to %struct.tree_string*, !dbg !10722
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string58, i32 0, i32 1, !dbg !10722
  %29 = load i32, i32* %length, align 8, !dbg !10722
  %conv = sext i32 %29 to i64, !dbg !10723
  %cmp59 = icmp ne i64 %add, %conv, !dbg !10724
  br i1 %cmp59, label %if.then61, label %if.end62, !dbg !10725

if.then61:                                        ; preds = %if.then56
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10726
  br label %return, !dbg !10726

if.end62:                                         ; preds = %if.then56
  %30 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10727
  %string63 = bitcast %union.tree_node* %30 to %struct.tree_string*, !dbg !10727
  %str64 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string63, i32 0, i32 2, !dbg !10727
  %arraydecay65 = getelementptr inbounds [1 x i8], [1 x i8]* %str64, i64 0, i64 0, !dbg !10727
  %call66 = call %struct.rtx_def* @gen_rtx_fmt_s_stat(i32 34, i32 16, i8* %arraydecay65), !dbg !10727
  store %struct.rtx_def* %call66, %struct.rtx_def** %op0, align 8, !dbg !10728
  %31 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10729
  %call67 = call %struct.rtx_def* @gen_rtx_MEM(i32 1, %struct.rtx_def* %31), !dbg !10730
  store %struct.rtx_def* %call67, %struct.rtx_def** %op0, align 8, !dbg !10731
  %32 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10732
  %33 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10733
  call void @set_mem_attributes(%struct.rtx_def* %32, %union.tree_node* %33, i32 0), !dbg !10734
  %34 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10735
  store %struct.rtx_def* %34, %struct.rtx_def** %retval, align 8, !dbg !10736
  br label %return, !dbg !10736

if.end68:                                         ; preds = %sw.bb53
  br label %sw.bb69, !dbg !10737

sw.bb69:                                          ; preds = %sw.epilog48, %sw.epilog48, %sw.epilog48, %if.end68
  %35 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10738
  %36 = load i32, i32* %mode, align 4, !dbg !10739
  %call70 = call %struct.rtx_def* @expand_expr(%union.tree_node* %35, %struct.rtx_def* null, i32 %36, i32 4), !dbg !10740
  store %struct.rtx_def* %call70, %struct.rtx_def** %op0, align 8, !dbg !10741
  %37 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10742
  store %struct.rtx_def* %37, %struct.rtx_def** %retval, align 8, !dbg !10743
  br label %return, !dbg !10743

sw.bb71:                                          ; preds = %sw.epilog48
  %38 = load i32, i32* %mode, align 4, !dbg !10744
  %idxprom72 = zext i32 %38 to i64, !dbg !10744
  %arrayidx73 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom72, !dbg !10744
  %39 = load i8, i8* %arrayidx73, align 1, !dbg !10744
  %conv74 = zext i8 %39 to i32, !dbg !10744
  %cmp75 = icmp eq i32 %conv74, 10, !dbg !10744
  br i1 %cmp75, label %cond.false83, label %lor.lhs.false, !dbg !10744

lor.lhs.false:                                    ; preds = %sw.bb71
  %40 = load i32, i32* %mode, align 4, !dbg !10744
  %idxprom77 = zext i32 %40 to i64, !dbg !10744
  %arrayidx78 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom77, !dbg !10744
  %41 = load i8, i8* %arrayidx78, align 1, !dbg !10744
  %conv79 = zext i8 %41 to i32, !dbg !10744
  %cmp80 = icmp eq i32 %conv79, 11, !dbg !10744
  br i1 %cmp80, label %cond.false83, label %cond.true82, !dbg !10744

cond.true82:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 2316, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10744
  br label %cond.end84, !dbg !10744

cond.false83:                                     ; preds = %lor.lhs.false, %sw.bb71
  br label %cond.end84, !dbg !10744

cond.end84:                                       ; preds = %cond.false83, %cond.true82
  %cond85 = phi i32 [ 0, %cond.true82 ], [ 0, %cond.false83 ], !dbg !10744
  %42 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10745
  %complex = bitcast %union.tree_node* %42 to %struct.tree_complex*, !dbg !10745
  %real = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex, i32 0, i32 1, !dbg !10745
  %43 = load %union.tree_node*, %union.tree_node** %real, align 8, !dbg !10745
  %call86 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %43), !dbg !10746
  store %struct.rtx_def* %call86, %struct.rtx_def** %op0, align 8, !dbg !10747
  %44 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10748
  %complex87 = bitcast %union.tree_node* %44 to %struct.tree_complex*, !dbg !10748
  %imag = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex87, i32 0, i32 2, !dbg !10748
  %45 = load %union.tree_node*, %union.tree_node** %imag, align 8, !dbg !10748
  %call88 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %45), !dbg !10749
  store %struct.rtx_def* %call88, %struct.rtx_def** %op1, align 8, !dbg !10750
  %46 = load i32, i32* %mode, align 4, !dbg !10751
  %47 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10751
  %48 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !10751
  %call89 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 41, i32 %46, %struct.rtx_def* %47, %struct.rtx_def* %48), !dbg !10751
  store %struct.rtx_def* %call89, %struct.rtx_def** %retval, align 8, !dbg !10752
  br label %return, !dbg !10752

sw.bb90:                                          ; preds = %sw.epilog48
  %49 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10753
  %base91 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !10753
  %50 = bitcast %struct.tree_base* %base91 to i64*, !dbg !10753
  %bf.load92 = load i64, i64* %50, align 8, !dbg !10753
  %bf.clear93 = and i64 %bf.load92, 65535, !dbg !10753
  %bf.cast94 = trunc i64 %bf.clear93 to i32, !dbg !10753
  %idxprom95 = zext i32 %bf.cast94 to i64, !dbg !10753
  %arrayidx96 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom95, !dbg !10753
  %arrayidx97 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx96, i64 0, i64 11, !dbg !10753
  %51 = load i8, i8* %arrayidx97, align 1, !dbg !10753
  %conv98 = zext i8 %51 to i32, !dbg !10753
  %tobool99 = icmp ne i32 %conv98, 0, !dbg !10753
  br i1 %tobool99, label %land.lhs.true, label %cond.false114, !dbg !10753

land.lhs.true:                                    ; preds = %sw.bb90
  %52 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10753
  %decl_with_rtl = bitcast %union.tree_node* %52 to %struct.tree_decl_with_rtl*, !dbg !10753
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !10753
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !10753
  %cmp100 = icmp ne %struct.rtx_def* %53, null, !dbg !10753
  br i1 %cmp100, label %cond.true102, label %cond.false114, !dbg !10753

cond.true102:                                     ; preds = %land.lhs.true
  %54 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10753
  %decl_with_rtl103 = bitcast %union.tree_node* %54 to %struct.tree_decl_with_rtl*, !dbg !10753
  %rtl104 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl103, i32 0, i32 1, !dbg !10753
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtl104, align 8, !dbg !10753
  %tobool105 = icmp ne %struct.rtx_def* %55, null, !dbg !10753
  br i1 %tobool105, label %cond.true106, label %cond.false109, !dbg !10753

cond.true106:                                     ; preds = %cond.true102
  %56 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10753
  %decl_with_rtl107 = bitcast %union.tree_node* %56 to %struct.tree_decl_with_rtl*, !dbg !10753
  %rtl108 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl107, i32 0, i32 1, !dbg !10753
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rtl108, align 8, !dbg !10753
  br label %cond.end112, !dbg !10753

cond.false109:                                    ; preds = %cond.true102
  %58 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10753
  call void @make_decl_rtl(%union.tree_node* %58), !dbg !10753
  %59 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10753
  %decl_with_rtl110 = bitcast %union.tree_node* %59 to %struct.tree_decl_with_rtl*, !dbg !10753
  %rtl111 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl110, i32 0, i32 1, !dbg !10753
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rtl111, align 8, !dbg !10753
  br label %cond.end112, !dbg !10753

cond.end112:                                      ; preds = %cond.false109, %cond.true106
  %cond113 = phi %struct.rtx_def* [ %57, %cond.true106 ], [ %60, %cond.false109 ], !dbg !10753
  br label %cond.end115, !dbg !10753

cond.false114:                                    ; preds = %land.lhs.true, %sw.bb90
  br label %cond.end115, !dbg !10753

cond.end115:                                      ; preds = %cond.false114, %cond.end112
  %cond116 = phi %struct.rtx_def* [ %cond113, %cond.end112 ], [ null, %cond.false114 ], !dbg !10753
  store %struct.rtx_def* %cond116, %struct.rtx_def** %op0, align 8, !dbg !10754
  %61 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10755
  %tobool117 = icmp ne %struct.rtx_def* %61, null, !dbg !10755
  br i1 %tobool117, label %if.then118, label %if.end119, !dbg !10757

if.then118:                                       ; preds = %cond.end115
  %62 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10758
  store %struct.rtx_def* %62, %struct.rtx_def** %retval, align 8, !dbg !10759
  br label %return, !dbg !10759

if.end119:                                        ; preds = %cond.end115
  %63 = load i32, i32* %mode, align 4, !dbg !10760
  %call120 = call %struct.rtx_def* @gen_rtx_fmt_0_stat(i32 2, i32 %63), !dbg !10760
  store %struct.rtx_def* %call120, %struct.rtx_def** %op0, align 8, !dbg !10761
  %64 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10762
  %65 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10763
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !10763
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10763
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !10763
  %rt_tree = bitcast %union.rtunion_def* %arrayidx121 to %union.tree_node**, !dbg !10763
  store %union.tree_node* %64, %union.tree_node** %rt_tree, align 8, !dbg !10764
  %66 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10765
  %67 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10765
  call void @set_decl_rtl(%union.tree_node* %66, %struct.rtx_def* %67), !dbg !10765
  %68 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10766
  store %struct.rtx_def* %68, %struct.rtx_def** %retval, align 8, !dbg !10767
  br label %return, !dbg !10767

sw.bb122:                                         ; preds = %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48
  %69 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10768
  %base123 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !10768
  %70 = bitcast %struct.tree_base* %base123 to i64*, !dbg !10768
  %bf.load124 = load i64, i64* %70, align 8, !dbg !10768
  %bf.clear125 = and i64 %bf.load124, 65535, !dbg !10768
  %bf.cast126 = trunc i64 %bf.clear125 to i32, !dbg !10768
  %idxprom127 = zext i32 %bf.cast126 to i64, !dbg !10768
  %arrayidx128 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom127, !dbg !10768
  %arrayidx129 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx128, i64 0, i64 11, !dbg !10768
  %71 = load i8, i8* %arrayidx129, align 1, !dbg !10768
  %conv130 = zext i8 %71 to i32, !dbg !10768
  %tobool131 = icmp ne i32 %conv130, 0, !dbg !10768
  br i1 %tobool131, label %land.lhs.true132, label %cond.false149, !dbg !10768

land.lhs.true132:                                 ; preds = %sw.bb122
  %72 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10768
  %decl_with_rtl133 = bitcast %union.tree_node* %72 to %struct.tree_decl_with_rtl*, !dbg !10768
  %rtl134 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl133, i32 0, i32 1, !dbg !10768
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rtl134, align 8, !dbg !10768
  %cmp135 = icmp ne %struct.rtx_def* %73, null, !dbg !10768
  br i1 %cmp135, label %cond.true137, label %cond.false149, !dbg !10768

cond.true137:                                     ; preds = %land.lhs.true132
  %74 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10768
  %decl_with_rtl138 = bitcast %union.tree_node* %74 to %struct.tree_decl_with_rtl*, !dbg !10768
  %rtl139 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl138, i32 0, i32 1, !dbg !10768
  %75 = load %struct.rtx_def*, %struct.rtx_def** %rtl139, align 8, !dbg !10768
  %tobool140 = icmp ne %struct.rtx_def* %75, null, !dbg !10768
  br i1 %tobool140, label %cond.true141, label %cond.false144, !dbg !10768

cond.true141:                                     ; preds = %cond.true137
  %76 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10768
  %decl_with_rtl142 = bitcast %union.tree_node* %76 to %struct.tree_decl_with_rtl*, !dbg !10768
  %rtl143 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl142, i32 0, i32 1, !dbg !10768
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rtl143, align 8, !dbg !10768
  br label %cond.end147, !dbg !10768

cond.false144:                                    ; preds = %cond.true137
  %78 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10768
  call void @make_decl_rtl(%union.tree_node* %78), !dbg !10768
  %79 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10768
  %decl_with_rtl145 = bitcast %union.tree_node* %79 to %struct.tree_decl_with_rtl*, !dbg !10768
  %rtl146 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl145, i32 0, i32 1, !dbg !10768
  %80 = load %struct.rtx_def*, %struct.rtx_def** %rtl146, align 8, !dbg !10768
  br label %cond.end147, !dbg !10768

cond.end147:                                      ; preds = %cond.false144, %cond.true141
  %cond148 = phi %struct.rtx_def* [ %77, %cond.true141 ], [ %80, %cond.false144 ], !dbg !10768
  br label %cond.end150, !dbg !10768

cond.false149:                                    ; preds = %land.lhs.true132, %sw.bb122
  br label %cond.end150, !dbg !10768

cond.end150:                                      ; preds = %cond.false149, %cond.end147
  %cond151 = phi %struct.rtx_def* [ %cond148, %cond.end147 ], [ null, %cond.false149 ], !dbg !10768
  store %struct.rtx_def* %cond151, %struct.rtx_def** %op0, align 8, !dbg !10769
  %81 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10770
  %tobool152 = icmp ne %struct.rtx_def* %81, null, !dbg !10770
  br i1 %tobool152, label %if.else, label %if.then153, !dbg !10772

if.then153:                                       ; preds = %cond.end150
  %82 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10773
  %base154 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !10773
  %83 = bitcast %struct.tree_base* %base154 to i64*, !dbg !10773
  %bf.load155 = load i64, i64* %83, align 8, !dbg !10773
  %bf.clear156 = and i64 %bf.load155, 65535, !dbg !10773
  %bf.cast157 = trunc i64 %bf.clear156 to i32, !dbg !10773
  %cmp158 = icmp ne i32 %bf.cast157, 32, !dbg !10776
  br i1 %cmp158, label %if.then183, label %lor.lhs.false160, !dbg !10777

lor.lhs.false160:                                 ; preds = %if.then153
  %84 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10778
  %decl_common = bitcast %union.tree_node* %84 to %struct.tree_decl_common*, !dbg !10778
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !10778
  %85 = bitcast i40* %decl_flag_1 to i64*, !dbg !10778
  %bf.load161 = load i64, i64* %85, align 8, !dbg !10778
  %bf.lshr162 = lshr i64 %bf.load161, 25, !dbg !10778
  %bf.clear163 = and i64 %bf.lshr162, 1, !dbg !10778
  %bf.cast164 = trunc i64 %bf.clear163 to i32, !dbg !10778
  %tobool165 = icmp ne i32 %bf.cast164, 0, !dbg !10778
  br i1 %tobool165, label %if.then183, label %lor.lhs.false166, !dbg !10779

lor.lhs.false166:                                 ; preds = %lor.lhs.false160
  %86 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10780
  %base167 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !10780
  %87 = bitcast %struct.tree_base* %base167 to i64*, !dbg !10780
  %bf.load168 = load i64, i64* %87, align 8, !dbg !10780
  %bf.lshr169 = lshr i64 %bf.load168, 26, !dbg !10780
  %bf.clear170 = and i64 %bf.lshr169, 1, !dbg !10780
  %bf.cast171 = trunc i64 %bf.clear170 to i32, !dbg !10780
  %tobool172 = icmp ne i32 %bf.cast171, 0, !dbg !10780
  br i1 %tobool172, label %lor.lhs.false173, label %if.then183, !dbg !10781

lor.lhs.false173:                                 ; preds = %lor.lhs.false166
  %88 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10782
  %decl_minimal = bitcast %union.tree_node* %88 to %struct.tree_decl_minimal*, !dbg !10782
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !10782
  %89 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !10782
  %tobool174 = icmp ne %union.tree_node* %89, null, !dbg !10782
  br i1 %tobool174, label %lor.lhs.false175, label %if.then183, !dbg !10783

lor.lhs.false175:                                 ; preds = %lor.lhs.false173
  %90 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10784
  %decl_with_vis = bitcast %union.tree_node* %90 to %struct.tree_decl_with_vis*, !dbg !10784
  %hard_register = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !10784
  %91 = bitcast i24* %hard_register to i32*, !dbg !10784
  %bf.load176 = load i32, i32* %91, align 8, !dbg !10784
  %bf.lshr177 = lshr i32 %bf.load176, 1, !dbg !10784
  %bf.clear178 = and i32 %bf.lshr177, 1, !dbg !10784
  %tobool179 = icmp ne i32 %bf.clear178, 0, !dbg !10784
  br i1 %tobool179, label %if.then183, label %lor.lhs.false180, !dbg !10785

lor.lhs.false180:                                 ; preds = %lor.lhs.false175
  %92 = load i32, i32* %mode, align 4, !dbg !10786
  %cmp181 = icmp eq i32 %92, 0, !dbg !10787
  br i1 %cmp181, label %if.then183, label %if.end184, !dbg !10788

if.then183:                                       ; preds = %lor.lhs.false180, %lor.lhs.false175, %lor.lhs.false173, %lor.lhs.false166, %lor.lhs.false160, %if.then153
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10789
  br label %return, !dbg !10789

if.end184:                                        ; preds = %lor.lhs.false180
  %93 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10790
  %call185 = call %struct.rtx_def* @make_decl_rtl_for_debug(%union.tree_node* %93), !dbg !10791
  store %struct.rtx_def* %call185, %struct.rtx_def** %op0, align 8, !dbg !10792
  %94 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10793
  %95 = bitcast %struct.rtx_def* %94 to i32*, !dbg !10793
  %bf.load186 = load i32, i32* %95, align 8, !dbg !10793
  %bf.clear187 = and i32 %bf.load186, 65535, !dbg !10793
  %cmp188 = icmp eq i32 %bf.clear187, 43, !dbg !10793
  br i1 %cmp188, label %lor.lhs.false190, label %if.then221, !dbg !10795

lor.lhs.false190:                                 ; preds = %if.end184
  %96 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10796
  %u191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1, !dbg !10796
  %fld192 = bitcast %union.u* %u191 to [1 x %union.rtunion_def]*, !dbg !10796
  %arrayidx193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld192, i64 0, i64 0, !dbg !10796
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx193 to %struct.rtx_def**, !dbg !10796
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10796
  %98 = bitcast %struct.rtx_def* %97 to i32*, !dbg !10796
  %bf.load194 = load i32, i32* %98, align 8, !dbg !10796
  %bf.clear195 = and i32 %bf.load194, 65535, !dbg !10796
  %cmp196 = icmp ne i32 %bf.clear195, 45, !dbg !10797
  br i1 %cmp196, label %if.then221, label %lor.lhs.false198, !dbg !10798

lor.lhs.false198:                                 ; preds = %lor.lhs.false190
  %99 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10799
  %u199 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !10799
  %fld200 = bitcast %union.u* %u199 to [1 x %union.rtunion_def]*, !dbg !10799
  %arrayidx201 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld200, i64 0, i64 0, !dbg !10799
  %rt_rtx202 = bitcast %union.rtunion_def* %arrayidx201 to %struct.rtx_def**, !dbg !10799
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx202, align 8, !dbg !10799
  %101 = bitcast %struct.rtx_def* %100 to i32*, !dbg !10799
  %bf.load203 = load i32, i32* %101, align 8, !dbg !10799
  %bf.lshr204 = lshr i32 %bf.load203, 26, !dbg !10799
  %bf.clear205 = and i32 %bf.lshr204, 1, !dbg !10799
  %tobool206 = icmp ne i32 %bf.clear205, 0, !dbg !10799
  br i1 %tobool206, label %cond.true207, label %cond.false208, !dbg !10799

cond.true207:                                     ; preds = %lor.lhs.false198
  br label %cond.end217, !dbg !10799

cond.false208:                                    ; preds = %lor.lhs.false198
  %102 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10799
  %u209 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1, !dbg !10799
  %fld210 = bitcast %union.u* %u209 to [1 x %union.rtunion_def]*, !dbg !10799
  %arrayidx211 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld210, i64 0, i64 0, !dbg !10799
  %rt_rtx212 = bitcast %union.rtunion_def* %arrayidx211 to %struct.rtx_def**, !dbg !10799
  %103 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx212, align 8, !dbg !10799
  %u213 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !10799
  %fld214 = bitcast %union.u* %u213 to [1 x %union.rtunion_def]*, !dbg !10799
  %arrayidx215 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld214, i64 0, i64 2, !dbg !10799
  %rt_tree216 = bitcast %union.rtunion_def* %arrayidx215 to %union.tree_node**, !dbg !10799
  %104 = load %union.tree_node*, %union.tree_node** %rt_tree216, align 8, !dbg !10799
  br label %cond.end217, !dbg !10799

cond.end217:                                      ; preds = %cond.false208, %cond.true207
  %cond218 = phi %union.tree_node* [ null, %cond.true207 ], [ %104, %cond.false208 ], !dbg !10799
  %105 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10800
  %cmp219 = icmp ne %union.tree_node* %cond218, %105, !dbg !10801
  br i1 %cmp219, label %if.then221, label %if.end222, !dbg !10802

if.then221:                                       ; preds = %cond.end217, %lor.lhs.false190, %if.end184
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10803
  br label %return, !dbg !10803

if.end222:                                        ; preds = %cond.end217
  br label %if.end224, !dbg !10804

if.else:                                          ; preds = %cond.end150
  %106 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10805
  %call223 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %106), !dbg !10806
  store %struct.rtx_def* %call223, %struct.rtx_def** %op0, align 8, !dbg !10807
  br label %if.end224

if.end224:                                        ; preds = %if.else, %if.end222
  %107 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10808
  %108 = bitcast %struct.rtx_def* %107 to i32*, !dbg !10808
  %bf.load225 = load i32, i32* %108, align 8, !dbg !10808
  %bf.lshr226 = lshr i32 %bf.load225, 16, !dbg !10808
  %bf.clear227 = and i32 %bf.lshr226, 255, !dbg !10808
  %cmp228 = icmp eq i32 %bf.clear227, 1, !dbg !10810
  br i1 %cmp228, label %if.then242, label %lor.lhs.false230, !dbg !10811

lor.lhs.false230:                                 ; preds = %if.end224
  %109 = load i32, i32* %mode, align 4, !dbg !10812
  %cmp231 = icmp eq i32 %109, 1, !dbg !10813
  br i1 %cmp231, label %if.then242, label %lor.lhs.false233, !dbg !10814

lor.lhs.false233:                                 ; preds = %lor.lhs.false230
  %110 = load i32, i32* %mode, align 4, !dbg !10815
  %cmp234 = icmp eq i32 %110, 0, !dbg !10816
  br i1 %cmp234, label %land.lhs.true236, label %if.end252, !dbg !10817

land.lhs.true236:                                 ; preds = %lor.lhs.false233
  %111 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10818
  %112 = bitcast %struct.rtx_def* %111 to i32*, !dbg !10818
  %bf.load237 = load i32, i32* %112, align 8, !dbg !10818
  %bf.lshr238 = lshr i32 %bf.load237, 16, !dbg !10818
  %bf.clear239 = and i32 %bf.lshr238, 255, !dbg !10818
  %cmp240 = icmp ne i32 %bf.clear239, 0, !dbg !10819
  br i1 %cmp240, label %if.then242, label %if.end252, !dbg !10820

if.then242:                                       ; preds = %land.lhs.true236, %lor.lhs.false230, %if.end224
  %113 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10821
  %114 = bitcast %struct.rtx_def* %113 to i32*, !dbg !10821
  %bf.load243 = load i32, i32* %114, align 8, !dbg !10821
  %bf.clear244 = and i32 %bf.load243, 65535, !dbg !10821
  %cmp245 = icmp eq i32 %bf.clear244, 43, !dbg !10821
  br i1 %cmp245, label %cond.false248, label %cond.true247, !dbg !10821

cond.true247:                                     ; preds = %if.then242
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 2368, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10821
  br label %cond.end249, !dbg !10821

cond.false248:                                    ; preds = %if.then242
  br label %cond.end249, !dbg !10821

cond.end249:                                      ; preds = %cond.false248, %cond.true247
  %cond250 = phi i32 [ 0, %cond.true247 ], [ 0, %cond.false248 ], !dbg !10821
  %115 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10823
  %116 = load i32, i32* %mode, align 4, !dbg !10823
  %call251 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %115, i32 %116, i64 0, i32 0, i32 1), !dbg !10823
  store %struct.rtx_def* %call251, %struct.rtx_def** %op0, align 8, !dbg !10824
  %117 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10825
  store %struct.rtx_def* %117, %struct.rtx_def** %retval, align 8, !dbg !10826
  br label %return, !dbg !10826

if.end252:                                        ; preds = %land.lhs.true236, %lor.lhs.false233
  br label %adjust_mode, !dbg !10827

adjust_mode:                                      ; preds = %if.end1357, %if.end252
  call void @llvm.dbg.label(metadata !10828), !dbg !10829
  br label %sw.bb253, !dbg !10827

sw.bb253:                                         ; preds = %sw.epilog48, %sw.epilog48, %sw.epilog48, %adjust_mode
  call void @llvm.dbg.declare(metadata i32* %inner_mode, metadata !10830, metadata !DIExpression()), !dbg !10832
  %118 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10833
  %119 = bitcast %struct.rtx_def* %118 to i32*, !dbg !10833
  %bf.load254 = load i32, i32* %119, align 8, !dbg !10833
  %bf.lshr255 = lshr i32 %bf.load254, 16, !dbg !10833
  %bf.clear256 = and i32 %bf.lshr255, 255, !dbg !10833
  store i32 %bf.clear256, i32* %inner_mode, align 4, !dbg !10832
  %120 = load i32, i32* %mode, align 4, !dbg !10834
  %121 = load i32, i32* %inner_mode, align 4, !dbg !10836
  %cmp257 = icmp eq i32 %120, %121, !dbg !10837
  br i1 %cmp257, label %if.then259, label %if.end260, !dbg !10838

if.then259:                                       ; preds = %sw.bb253
  %122 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10839
  store %struct.rtx_def* %122, %struct.rtx_def** %retval, align 8, !dbg !10840
  br label %return, !dbg !10840

if.end260:                                        ; preds = %sw.bb253
  %123 = load i32, i32* %inner_mode, align 4, !dbg !10841
  %cmp261 = icmp eq i32 %123, 0, !dbg !10843
  br i1 %cmp261, label %if.then263, label %if.end330, !dbg !10844

if.then263:                                       ; preds = %if.end260
  %124 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10845
  %base264 = bitcast %union.tree_node* %124 to %struct.tree_base*, !dbg !10845
  %125 = bitcast %struct.tree_base* %base264 to i64*, !dbg !10845
  %bf.load265 = load i64, i64* %125, align 8, !dbg !10845
  %bf.clear266 = and i64 %bf.load265, 65535, !dbg !10845
  %bf.cast267 = trunc i64 %bf.clear266 to i32, !dbg !10845
  %cmp268 = icmp eq i32 %bf.cast267, 141, !dbg !10848
  br i1 %cmp268, label %if.then270, label %if.else293, !dbg !10849

if.then270:                                       ; preds = %if.then263
  %126 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10850
  %common271 = bitcast %union.tree_node* %126 to %struct.tree_common*, !dbg !10850
  %type272 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common271, i32 0, i32 2, !dbg !10850
  %127 = load %union.tree_node*, %union.tree_node** %type272, align 8, !dbg !10850
  %base273 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !10850
  %128 = bitcast %struct.tree_base* %base273 to i64*, !dbg !10850
  %bf.load274 = load i64, i64* %128, align 8, !dbg !10850
  %bf.clear275 = and i64 %bf.load274, 65535, !dbg !10850
  %bf.cast276 = trunc i64 %bf.clear275 to i32, !dbg !10850
  %cmp277 = icmp eq i32 %bf.cast276, 14, !dbg !10850
  br i1 %cmp277, label %cond.true279, label %cond.false283, !dbg !10850

cond.true279:                                     ; preds = %if.then270
  %129 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10850
  %common280 = bitcast %union.tree_node* %129 to %struct.tree_common*, !dbg !10850
  %type281 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common280, i32 0, i32 2, !dbg !10850
  %130 = load %union.tree_node*, %union.tree_node** %type281, align 8, !dbg !10850
  %call282 = call i32 @vector_type_mode(%union.tree_node* %130), !dbg !10850
  br label %cond.end291, !dbg !10850

cond.false283:                                    ; preds = %if.then270
  %131 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10850
  %common284 = bitcast %union.tree_node* %131 to %struct.tree_common*, !dbg !10850
  %type285 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common284, i32 0, i32 2, !dbg !10850
  %132 = load %union.tree_node*, %union.tree_node** %type285, align 8, !dbg !10850
  %type286 = bitcast %union.tree_node* %132 to %struct.tree_type*, !dbg !10850
  %mode287 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type286, i32 0, i32 6, !dbg !10850
  %bf.load288 = load i32, i32* %mode287, align 4, !dbg !10850
  %bf.lshr289 = lshr i32 %bf.load288, 16, !dbg !10850
  %bf.clear290 = and i32 %bf.lshr289, 255, !dbg !10850
  br label %cond.end291, !dbg !10850

cond.end291:                                      ; preds = %cond.false283, %cond.true279
  %cond292 = phi i32 [ %call282, %cond.true279 ], [ %bf.clear290, %cond.false283 ], !dbg !10850
  store i32 %cond292, i32* %inner_mode, align 4, !dbg !10851
  br label %if.end325, !dbg !10852

if.else293:                                       ; preds = %if.then263
  %133 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10853
  %exp294 = bitcast %union.tree_node* %133 to %struct.tree_exp*, !dbg !10853
  %operands295 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp294, i32 0, i32 3, !dbg !10853
  %arrayidx296 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands295, i64 0, i64 0, !dbg !10853
  %134 = load %union.tree_node*, %union.tree_node** %arrayidx296, align 8, !dbg !10853
  %common297 = bitcast %union.tree_node* %134 to %struct.tree_common*, !dbg !10853
  %type298 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common297, i32 0, i32 2, !dbg !10853
  %135 = load %union.tree_node*, %union.tree_node** %type298, align 8, !dbg !10853
  %base299 = bitcast %union.tree_node* %135 to %struct.tree_base*, !dbg !10853
  %136 = bitcast %struct.tree_base* %base299 to i64*, !dbg !10853
  %bf.load300 = load i64, i64* %136, align 8, !dbg !10853
  %bf.clear301 = and i64 %bf.load300, 65535, !dbg !10853
  %bf.cast302 = trunc i64 %bf.clear301 to i32, !dbg !10853
  %cmp303 = icmp eq i32 %bf.cast302, 14, !dbg !10853
  br i1 %cmp303, label %cond.true305, label %cond.false312, !dbg !10853

cond.true305:                                     ; preds = %if.else293
  %137 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10853
  %exp306 = bitcast %union.tree_node* %137 to %struct.tree_exp*, !dbg !10853
  %operands307 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp306, i32 0, i32 3, !dbg !10853
  %arrayidx308 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands307, i64 0, i64 0, !dbg !10853
  %138 = load %union.tree_node*, %union.tree_node** %arrayidx308, align 8, !dbg !10853
  %common309 = bitcast %union.tree_node* %138 to %struct.tree_common*, !dbg !10853
  %type310 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common309, i32 0, i32 2, !dbg !10853
  %139 = load %union.tree_node*, %union.tree_node** %type310, align 8, !dbg !10853
  %call311 = call i32 @vector_type_mode(%union.tree_node* %139), !dbg !10853
  br label %cond.end323, !dbg !10853

cond.false312:                                    ; preds = %if.else293
  %140 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10853
  %exp313 = bitcast %union.tree_node* %140 to %struct.tree_exp*, !dbg !10853
  %operands314 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp313, i32 0, i32 3, !dbg !10853
  %arrayidx315 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands314, i64 0, i64 0, !dbg !10853
  %141 = load %union.tree_node*, %union.tree_node** %arrayidx315, align 8, !dbg !10853
  %common316 = bitcast %union.tree_node* %141 to %struct.tree_common*, !dbg !10853
  %type317 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common316, i32 0, i32 2, !dbg !10853
  %142 = load %union.tree_node*, %union.tree_node** %type317, align 8, !dbg !10853
  %type318 = bitcast %union.tree_node* %142 to %struct.tree_type*, !dbg !10853
  %mode319 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type318, i32 0, i32 6, !dbg !10853
  %bf.load320 = load i32, i32* %mode319, align 4, !dbg !10853
  %bf.lshr321 = lshr i32 %bf.load320, 16, !dbg !10853
  %bf.clear322 = and i32 %bf.lshr321, 255, !dbg !10853
  br label %cond.end323, !dbg !10853

cond.end323:                                      ; preds = %cond.false312, %cond.true305
  %cond324 = phi i32 [ %call311, %cond.true305 ], [ %bf.clear322, %cond.false312 ], !dbg !10853
  store i32 %cond324, i32* %inner_mode, align 4, !dbg !10854
  br label %if.end325

if.end325:                                        ; preds = %cond.end323, %cond.end291
  %143 = load i32, i32* %mode, align 4, !dbg !10855
  %144 = load i32, i32* %inner_mode, align 4, !dbg !10857
  %cmp326 = icmp eq i32 %143, %144, !dbg !10858
  br i1 %cmp326, label %if.then328, label %if.end329, !dbg !10859

if.then328:                                       ; preds = %if.end325
  %145 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10860
  store %struct.rtx_def* %145, %struct.rtx_def** %retval, align 8, !dbg !10861
  br label %return, !dbg !10861

if.end329:                                        ; preds = %if.end325
  br label %if.end330, !dbg !10862

if.end330:                                        ; preds = %if.end329, %if.end260
  %146 = load i32, i32* %mode, align 4, !dbg !10863
  %idxprom331 = zext i32 %146 to i64, !dbg !10863
  %arrayidx332 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom331, !dbg !10863
  %147 = load i8, i8* %arrayidx332, align 1, !dbg !10863
  %conv333 = zext i8 %147 to i32, !dbg !10863
  %cmp334 = icmp eq i32 %conv333, 8, !dbg !10863
  br i1 %cmp334, label %land.lhs.true354, label %lor.lhs.false336, !dbg !10863

lor.lhs.false336:                                 ; preds = %if.end330
  %148 = load i32, i32* %mode, align 4, !dbg !10863
  %idxprom337 = zext i32 %148 to i64, !dbg !10863
  %arrayidx338 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom337, !dbg !10863
  %149 = load i8, i8* %arrayidx338, align 1, !dbg !10863
  %conv339 = zext i8 %149 to i32, !dbg !10863
  %cmp340 = icmp eq i32 %conv339, 9, !dbg !10863
  br i1 %cmp340, label %land.lhs.true354, label %lor.lhs.false342, !dbg !10863

lor.lhs.false342:                                 ; preds = %lor.lhs.false336
  %150 = load i32, i32* %mode, align 4, !dbg !10863
  %idxprom343 = zext i32 %150 to i64, !dbg !10863
  %arrayidx344 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom343, !dbg !10863
  %151 = load i8, i8* %arrayidx344, align 1, !dbg !10863
  %conv345 = zext i8 %151 to i32, !dbg !10863
  %cmp346 = icmp eq i32 %conv345, 11, !dbg !10863
  br i1 %cmp346, label %land.lhs.true354, label %lor.lhs.false348, !dbg !10863

lor.lhs.false348:                                 ; preds = %lor.lhs.false342
  %152 = load i32, i32* %mode, align 4, !dbg !10863
  %idxprom349 = zext i32 %152 to i64, !dbg !10863
  %arrayidx350 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom349, !dbg !10863
  %153 = load i8, i8* %arrayidx350, align 1, !dbg !10863
  %conv351 = zext i8 %153 to i32, !dbg !10863
  %cmp352 = icmp eq i32 %conv351, 17, !dbg !10863
  br i1 %cmp352, label %land.lhs.true354, label %if.else419, !dbg !10865

land.lhs.true354:                                 ; preds = %lor.lhs.false348, %lor.lhs.false342, %lor.lhs.false336, %if.end330
  %154 = load i32, i32* %inner_mode, align 4, !dbg !10866
  %idxprom355 = zext i32 %154 to i64, !dbg !10866
  %arrayidx356 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom355, !dbg !10866
  %155 = load i8, i8* %arrayidx356, align 1, !dbg !10866
  %conv357 = zext i8 %155 to i32, !dbg !10866
  %cmp358 = icmp eq i32 %conv357, 8, !dbg !10866
  br i1 %cmp358, label %if.then378, label %lor.lhs.false360, !dbg !10866

lor.lhs.false360:                                 ; preds = %land.lhs.true354
  %156 = load i32, i32* %inner_mode, align 4, !dbg !10866
  %idxprom361 = zext i32 %156 to i64, !dbg !10866
  %arrayidx362 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom361, !dbg !10866
  %157 = load i8, i8* %arrayidx362, align 1, !dbg !10866
  %conv363 = zext i8 %157 to i32, !dbg !10866
  %cmp364 = icmp eq i32 %conv363, 9, !dbg !10866
  br i1 %cmp364, label %if.then378, label %lor.lhs.false366, !dbg !10866

lor.lhs.false366:                                 ; preds = %lor.lhs.false360
  %158 = load i32, i32* %inner_mode, align 4, !dbg !10866
  %idxprom367 = zext i32 %158 to i64, !dbg !10866
  %arrayidx368 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom367, !dbg !10866
  %159 = load i8, i8* %arrayidx368, align 1, !dbg !10866
  %conv369 = zext i8 %159 to i32, !dbg !10866
  %cmp370 = icmp eq i32 %conv369, 11, !dbg !10866
  br i1 %cmp370, label %if.then378, label %lor.lhs.false372, !dbg !10866

lor.lhs.false372:                                 ; preds = %lor.lhs.false366
  %160 = load i32, i32* %inner_mode, align 4, !dbg !10866
  %idxprom373 = zext i32 %160 to i64, !dbg !10866
  %arrayidx374 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom373, !dbg !10866
  %161 = load i8, i8* %arrayidx374, align 1, !dbg !10866
  %conv375 = zext i8 %161 to i32, !dbg !10866
  %cmp376 = icmp eq i32 %conv375, 17, !dbg !10866
  br i1 %cmp376, label %if.then378, label %if.else419, !dbg !10867

if.then378:                                       ; preds = %lor.lhs.false372, %lor.lhs.false366, %lor.lhs.false360, %land.lhs.true354
  %162 = load i32, i32* %mode, align 4, !dbg !10868
  %idxprom379 = zext i32 %162 to i64, !dbg !10868
  %arrayidx380 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom379, !dbg !10868
  %163 = load i8, i8* %arrayidx380, align 1, !dbg !10868
  %conv381 = zext i8 %163 to i16, !dbg !10868
  %conv382 = zext i16 %conv381 to i32, !dbg !10868
  %mul = mul nsw i32 %conv382, 8, !dbg !10868
  %conv383 = trunc i32 %mul to i16, !dbg !10868
  %conv384 = zext i16 %conv383 to i32, !dbg !10868
  %164 = load i32, i32* %inner_mode, align 4, !dbg !10871
  %idxprom385 = zext i32 %164 to i64, !dbg !10871
  %arrayidx386 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom385, !dbg !10871
  %165 = load i8, i8* %arrayidx386, align 1, !dbg !10871
  %conv387 = zext i8 %165 to i16, !dbg !10871
  %conv388 = zext i16 %conv387 to i32, !dbg !10871
  %mul389 = mul nsw i32 %conv388, 8, !dbg !10871
  %conv390 = trunc i32 %mul389 to i16, !dbg !10871
  %conv391 = zext i16 %conv390 to i32, !dbg !10871
  %cmp392 = icmp eq i32 %conv384, %conv391, !dbg !10872
  br i1 %cmp392, label %if.then394, label %if.else396, !dbg !10873

if.then394:                                       ; preds = %if.then378
  %166 = load i32, i32* %mode, align 4, !dbg !10874
  %167 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10875
  %168 = load i32, i32* %inner_mode, align 4, !dbg !10876
  %call395 = call %struct.rtx_def* @simplify_gen_subreg(i32 %166, %struct.rtx_def* %167, i32 %168, i32 0), !dbg !10877
  store %struct.rtx_def* %call395, %struct.rtx_def** %op0, align 8, !dbg !10878
  br label %if.end418, !dbg !10879

if.else396:                                       ; preds = %if.then378
  %169 = load i32, i32* %mode, align 4, !dbg !10880
  %idxprom397 = zext i32 %169 to i64, !dbg !10880
  %arrayidx398 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom397, !dbg !10880
  %170 = load i8, i8* %arrayidx398, align 1, !dbg !10880
  %conv399 = zext i8 %170 to i16, !dbg !10880
  %conv400 = zext i16 %conv399 to i32, !dbg !10880
  %mul401 = mul nsw i32 %conv400, 8, !dbg !10880
  %conv402 = trunc i32 %mul401 to i16, !dbg !10880
  %conv403 = zext i16 %conv402 to i32, !dbg !10880
  %171 = load i32, i32* %inner_mode, align 4, !dbg !10882
  %idxprom404 = zext i32 %171 to i64, !dbg !10882
  %arrayidx405 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom404, !dbg !10882
  %172 = load i8, i8* %arrayidx405, align 1, !dbg !10882
  %conv406 = zext i8 %172 to i16, !dbg !10882
  %conv407 = zext i16 %conv406 to i32, !dbg !10882
  %mul408 = mul nsw i32 %conv407, 8, !dbg !10882
  %conv409 = trunc i32 %mul408 to i16, !dbg !10882
  %conv410 = zext i16 %conv409 to i32, !dbg !10882
  %cmp411 = icmp slt i32 %conv403, %conv410, !dbg !10883
  br i1 %cmp411, label %if.then413, label %if.else415, !dbg !10884

if.then413:                                       ; preds = %if.else396
  %173 = load i32, i32* %mode, align 4, !dbg !10885
  %174 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10886
  %175 = load i32, i32* %inner_mode, align 4, !dbg !10887
  %call414 = call %struct.rtx_def* @simplify_gen_unary(i32 102, i32 %173, %struct.rtx_def* %174, i32 %175), !dbg !10888
  store %struct.rtx_def* %call414, %struct.rtx_def** %op0, align 8, !dbg !10889
  br label %if.end417, !dbg !10890

if.else415:                                       ; preds = %if.else396
  %176 = load i32, i32* %mode, align 4, !dbg !10891
  %177 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10892
  %178 = load i32, i32* %inner_mode, align 4, !dbg !10893
  %call416 = call %struct.rtx_def* @simplify_gen_unary(i32 101, i32 %176, %struct.rtx_def* %177, i32 %178), !dbg !10894
  store %struct.rtx_def* %call416, %struct.rtx_def** %op0, align 8, !dbg !10895
  br label %if.end417

if.end417:                                        ; preds = %if.else415, %if.then413
  br label %if.end418

if.end418:                                        ; preds = %if.end417, %if.then394
  br label %if.end538, !dbg !10896

if.else419:                                       ; preds = %lor.lhs.false372, %lor.lhs.false348
  %179 = load i32, i32* %mode, align 4, !dbg !10897
  %idxprom420 = zext i32 %179 to i64, !dbg !10897
  %arrayidx421 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom420, !dbg !10897
  %180 = load i8, i8* %arrayidx421, align 1, !dbg !10897
  %conv422 = zext i8 %180 to i32, !dbg !10897
  %cmp423 = icmp eq i32 %conv422, 8, !dbg !10897
  br i1 %cmp423, label %if.then443, label %lor.lhs.false425, !dbg !10897

lor.lhs.false425:                                 ; preds = %if.else419
  %181 = load i32, i32* %mode, align 4, !dbg !10897
  %idxprom426 = zext i32 %181 to i64, !dbg !10897
  %arrayidx427 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom426, !dbg !10897
  %182 = load i8, i8* %arrayidx427, align 1, !dbg !10897
  %conv428 = zext i8 %182 to i32, !dbg !10897
  %cmp429 = icmp eq i32 %conv428, 9, !dbg !10897
  br i1 %cmp429, label %if.then443, label %lor.lhs.false431, !dbg !10897

lor.lhs.false431:                                 ; preds = %lor.lhs.false425
  %183 = load i32, i32* %mode, align 4, !dbg !10897
  %idxprom432 = zext i32 %183 to i64, !dbg !10897
  %arrayidx433 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom432, !dbg !10897
  %184 = load i8, i8* %arrayidx433, align 1, !dbg !10897
  %conv434 = zext i8 %184 to i32, !dbg !10897
  %cmp435 = icmp eq i32 %conv434, 11, !dbg !10897
  br i1 %cmp435, label %if.then443, label %lor.lhs.false437, !dbg !10897

lor.lhs.false437:                                 ; preds = %lor.lhs.false431
  %185 = load i32, i32* %mode, align 4, !dbg !10897
  %idxprom438 = zext i32 %185 to i64, !dbg !10897
  %arrayidx439 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom438, !dbg !10897
  %186 = load i8, i8* %arrayidx439, align 1, !dbg !10897
  %conv440 = zext i8 %186 to i32, !dbg !10897
  %cmp441 = icmp eq i32 %conv440, 17, !dbg !10897
  br i1 %cmp441, label %if.then443, label %if.else470, !dbg !10899

if.then443:                                       ; preds = %lor.lhs.false437, %lor.lhs.false431, %lor.lhs.false425, %if.else419
  %187 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10900
  %base444 = bitcast %union.tree_node* %187 to %struct.tree_base*, !dbg !10900
  %188 = bitcast %struct.tree_base* %base444 to i64*, !dbg !10900
  %bf.load445 = load i64, i64* %188, align 8, !dbg !10900
  %bf.clear446 = and i64 %bf.load445, 65535, !dbg !10900
  %bf.cast447 = trunc i64 %bf.clear446 to i32, !dbg !10900
  %cmp448 = icmp ne i32 %bf.cast447, 141, !dbg !10900
  br i1 %cmp448, label %cond.false451, label %cond.true450, !dbg !10900

cond.true450:                                     ; preds = %if.then443
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 2406, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10900
  br label %cond.end452, !dbg !10900

cond.false451:                                    ; preds = %if.then443
  br label %cond.end452, !dbg !10900

cond.end452:                                      ; preds = %cond.false451, %cond.true450
  %cond453 = phi i32 [ 0, %cond.true450 ], [ 0, %cond.false451 ], !dbg !10900
  %189 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10902
  %exp454 = bitcast %union.tree_node* %189 to %struct.tree_exp*, !dbg !10902
  %operands455 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp454, i32 0, i32 3, !dbg !10902
  %arrayidx456 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands455, i64 0, i64 0, !dbg !10902
  %190 = load %union.tree_node*, %union.tree_node** %arrayidx456, align 8, !dbg !10902
  %common457 = bitcast %union.tree_node* %190 to %struct.tree_common*, !dbg !10902
  %type458 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common457, i32 0, i32 2, !dbg !10902
  %191 = load %union.tree_node*, %union.tree_node** %type458, align 8, !dbg !10902
  %base459 = bitcast %union.tree_node* %191 to %struct.tree_base*, !dbg !10902
  %192 = bitcast %struct.tree_base* %base459 to i64*, !dbg !10902
  %bf.load460 = load i64, i64* %192, align 8, !dbg !10902
  %bf.lshr461 = lshr i64 %bf.load460, 21, !dbg !10902
  %bf.clear462 = and i64 %bf.lshr461, 1, !dbg !10902
  %bf.cast463 = trunc i64 %bf.clear462 to i32, !dbg !10902
  %tobool464 = icmp ne i32 %bf.cast463, 0, !dbg !10902
  br i1 %tobool464, label %if.then465, label %if.else467, !dbg !10904

if.then465:                                       ; preds = %cond.end452
  %193 = load i32, i32* %mode, align 4, !dbg !10905
  %194 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10906
  %195 = load i32, i32* %inner_mode, align 4, !dbg !10907
  %call466 = call %struct.rtx_def* @simplify_gen_unary(i32 105, i32 %193, %struct.rtx_def* %194, i32 %195), !dbg !10908
  store %struct.rtx_def* %call466, %struct.rtx_def** %op0, align 8, !dbg !10909
  br label %if.end469, !dbg !10910

if.else467:                                       ; preds = %cond.end452
  %196 = load i32, i32* %mode, align 4, !dbg !10911
  %197 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10912
  %198 = load i32, i32* %inner_mode, align 4, !dbg !10913
  %call468 = call %struct.rtx_def* @simplify_gen_unary(i32 103, i32 %196, %struct.rtx_def* %197, i32 %198), !dbg !10914
  store %struct.rtx_def* %call468, %struct.rtx_def** %op0, align 8, !dbg !10915
  br label %if.end469

if.end469:                                        ; preds = %if.else467, %if.then465
  br label %if.end537, !dbg !10916

if.else470:                                       ; preds = %lor.lhs.false437
  %199 = load i32, i32* %inner_mode, align 4, !dbg !10917
  %idxprom471 = zext i32 %199 to i64, !dbg !10917
  %arrayidx472 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom471, !dbg !10917
  %200 = load i8, i8* %arrayidx472, align 1, !dbg !10917
  %conv473 = zext i8 %200 to i32, !dbg !10917
  %cmp474 = icmp eq i32 %conv473, 8, !dbg !10917
  br i1 %cmp474, label %if.then494, label %lor.lhs.false476, !dbg !10917

lor.lhs.false476:                                 ; preds = %if.else470
  %201 = load i32, i32* %inner_mode, align 4, !dbg !10917
  %idxprom477 = zext i32 %201 to i64, !dbg !10917
  %arrayidx478 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom477, !dbg !10917
  %202 = load i8, i8* %arrayidx478, align 1, !dbg !10917
  %conv479 = zext i8 %202 to i32, !dbg !10917
  %cmp480 = icmp eq i32 %conv479, 9, !dbg !10917
  br i1 %cmp480, label %if.then494, label %lor.lhs.false482, !dbg !10917

lor.lhs.false482:                                 ; preds = %lor.lhs.false476
  %203 = load i32, i32* %inner_mode, align 4, !dbg !10917
  %idxprom483 = zext i32 %203 to i64, !dbg !10917
  %arrayidx484 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom483, !dbg !10917
  %204 = load i8, i8* %arrayidx484, align 1, !dbg !10917
  %conv485 = zext i8 %204 to i32, !dbg !10917
  %cmp486 = icmp eq i32 %conv485, 11, !dbg !10917
  br i1 %cmp486, label %if.then494, label %lor.lhs.false488, !dbg !10917

lor.lhs.false488:                                 ; preds = %lor.lhs.false482
  %205 = load i32, i32* %inner_mode, align 4, !dbg !10917
  %idxprom489 = zext i32 %205 to i64, !dbg !10917
  %arrayidx490 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom489, !dbg !10917
  %206 = load i8, i8* %arrayidx490, align 1, !dbg !10917
  %conv491 = zext i8 %206 to i32, !dbg !10917
  %cmp492 = icmp eq i32 %conv491, 17, !dbg !10917
  br i1 %cmp492, label %if.then494, label %if.else501, !dbg !10919

if.then494:                                       ; preds = %lor.lhs.false488, %lor.lhs.false482, %lor.lhs.false476, %if.else470
  %207 = load i32, i32* %unsignedp, align 4, !dbg !10920
  %tobool495 = icmp ne i32 %207, 0, !dbg !10920
  br i1 %tobool495, label %if.then496, label %if.else498, !dbg !10923

if.then496:                                       ; preds = %if.then494
  %208 = load i32, i32* %mode, align 4, !dbg !10924
  %209 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10925
  %210 = load i32, i32* %inner_mode, align 4, !dbg !10926
  %call497 = call %struct.rtx_def* @simplify_gen_unary(i32 106, i32 %208, %struct.rtx_def* %209, i32 %210), !dbg !10927
  store %struct.rtx_def* %call497, %struct.rtx_def** %op0, align 8, !dbg !10928
  br label %if.end500, !dbg !10929

if.else498:                                       ; preds = %if.then494
  %211 = load i32, i32* %mode, align 4, !dbg !10930
  %212 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10931
  %213 = load i32, i32* %inner_mode, align 4, !dbg !10932
  %call499 = call %struct.rtx_def* @simplify_gen_unary(i32 104, i32 %211, %struct.rtx_def* %212, i32 %213), !dbg !10933
  store %struct.rtx_def* %call499, %struct.rtx_def** %op0, align 8, !dbg !10934
  br label %if.end500

if.end500:                                        ; preds = %if.else498, %if.then496
  br label %if.end536, !dbg !10935

if.else501:                                       ; preds = %lor.lhs.false488
  %214 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10936
  %215 = bitcast %struct.rtx_def* %214 to i32*, !dbg !10936
  %bf.load502 = load i32, i32* %215, align 8, !dbg !10936
  %bf.clear503 = and i32 %bf.load502, 65535, !dbg !10936
  %idxprom504 = sext i32 %bf.clear503 to i64, !dbg !10936
  %arrayidx505 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom504, !dbg !10936
  %216 = load i32, i32* %arrayidx505, align 4, !dbg !10936
  %cmp506 = icmp eq i32 %216, 9, !dbg !10936
  br i1 %cmp506, label %if.then525, label %lor.lhs.false508, !dbg !10938

lor.lhs.false508:                                 ; preds = %if.else501
  %217 = load i32, i32* %mode, align 4, !dbg !10939
  %idxprom509 = zext i32 %217 to i64, !dbg !10939
  %arrayidx510 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom509, !dbg !10939
  %218 = load i8, i8* %arrayidx510, align 1, !dbg !10939
  %conv511 = zext i8 %218 to i16, !dbg !10939
  %conv512 = zext i16 %conv511 to i32, !dbg !10939
  %mul513 = mul nsw i32 %conv512, 8, !dbg !10939
  %conv514 = trunc i32 %mul513 to i16, !dbg !10939
  %conv515 = zext i16 %conv514 to i32, !dbg !10939
  %219 = load i32, i32* %inner_mode, align 4, !dbg !10940
  %idxprom516 = zext i32 %219 to i64, !dbg !10940
  %arrayidx517 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom516, !dbg !10940
  %220 = load i8, i8* %arrayidx517, align 1, !dbg !10940
  %conv518 = zext i8 %220 to i16, !dbg !10940
  %conv519 = zext i16 %conv518 to i32, !dbg !10940
  %mul520 = mul nsw i32 %conv519, 8, !dbg !10940
  %conv521 = trunc i32 %mul520 to i16, !dbg !10940
  %conv522 = zext i16 %conv521 to i32, !dbg !10940
  %cmp523 = icmp sle i32 %conv515, %conv522, !dbg !10941
  br i1 %cmp523, label %if.then525, label %if.else528, !dbg !10942

if.then525:                                       ; preds = %lor.lhs.false508, %if.else501
  %221 = load i32, i32* %mode, align 4, !dbg !10943
  %222 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10944
  %223 = load i32, i32* %inner_mode, align 4, !dbg !10945
  %224 = load i32, i32* %mode, align 4, !dbg !10946
  %225 = load i32, i32* %inner_mode, align 4, !dbg !10947
  %call526 = call i32 @subreg_lowpart_offset(i32 %224, i32 %225), !dbg !10948
  %call527 = call %struct.rtx_def* @simplify_gen_subreg(i32 %221, %struct.rtx_def* %222, i32 %223, i32 %call526), !dbg !10949
  store %struct.rtx_def* %call527, %struct.rtx_def** %op0, align 8, !dbg !10950
  br label %if.end535, !dbg !10951

if.else528:                                       ; preds = %lor.lhs.false508
  %226 = load i32, i32* %unsignedp, align 4, !dbg !10952
  %tobool529 = icmp ne i32 %226, 0, !dbg !10952
  br i1 %tobool529, label %if.then530, label %if.else532, !dbg !10954

if.then530:                                       ; preds = %if.else528
  %227 = load i32, i32* %mode, align 4, !dbg !10955
  %228 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10955
  %call531 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 99, i32 %227, %struct.rtx_def* %228), !dbg !10955
  store %struct.rtx_def* %call531, %struct.rtx_def** %op0, align 8, !dbg !10956
  br label %if.end534, !dbg !10957

if.else532:                                       ; preds = %if.else528
  %229 = load i32, i32* %mode, align 4, !dbg !10958
  %230 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10958
  %call533 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 98, i32 %229, %struct.rtx_def* %230), !dbg !10958
  store %struct.rtx_def* %call533, %struct.rtx_def** %op0, align 8, !dbg !10959
  br label %if.end534

if.end534:                                        ; preds = %if.else532, %if.then530
  br label %if.end535

if.end535:                                        ; preds = %if.end534, %if.then525
  br label %if.end536

if.end536:                                        ; preds = %if.end535, %if.end500
  br label %if.end537

if.end537:                                        ; preds = %if.end536, %if.end469
  br label %if.end538

if.end538:                                        ; preds = %if.end537, %if.end418
  %231 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10960
  store %struct.rtx_def* %231, %struct.rtx_def** %retval, align 8, !dbg !10961
  br label %return, !dbg !10961

sw.bb539:                                         ; preds = %sw.epilog48, %sw.epilog48, %sw.epilog48
  %232 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10962
  %exp540 = bitcast %union.tree_node* %232 to %struct.tree_exp*, !dbg !10962
  %operands541 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp540, i32 0, i32 3, !dbg !10962
  %arrayidx542 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands541, i64 0, i64 0, !dbg !10962
  %233 = load %union.tree_node*, %union.tree_node** %arrayidx542, align 8, !dbg !10962
  %call543 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %233), !dbg !10963
  store %struct.rtx_def* %call543, %struct.rtx_def** %op0, align 8, !dbg !10964
  %234 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10965
  %tobool544 = icmp ne %struct.rtx_def* %234, null, !dbg !10965
  br i1 %tobool544, label %if.end546, label %if.then545, !dbg !10967

if.then545:                                       ; preds = %sw.bb539
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10968
  br label %return, !dbg !10968

if.end546:                                        ; preds = %sw.bb539
  %235 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10969
  %common547 = bitcast %union.tree_node* %235 to %struct.tree_common*, !dbg !10969
  %type548 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common547, i32 0, i32 2, !dbg !10969
  %236 = load %union.tree_node*, %union.tree_node** %type548, align 8, !dbg !10969
  %base549 = bitcast %union.tree_node* %236 to %struct.tree_base*, !dbg !10969
  %237 = bitcast %struct.tree_base* %base549 to i64*, !dbg !10969
  %bf.load550 = load i64, i64* %237, align 8, !dbg !10969
  %bf.clear551 = and i64 %bf.load550, 65535, !dbg !10969
  %bf.cast552 = trunc i64 %bf.clear551 to i32, !dbg !10969
  %cmp553 = icmp eq i32 %bf.cast552, 10, !dbg !10969
  br i1 %cmp553, label %if.then564, label %lor.lhs.false555, !dbg !10969

lor.lhs.false555:                                 ; preds = %if.end546
  %238 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10969
  %common556 = bitcast %union.tree_node* %238 to %struct.tree_common*, !dbg !10969
  %type557 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common556, i32 0, i32 2, !dbg !10969
  %239 = load %union.tree_node*, %union.tree_node** %type557, align 8, !dbg !10969
  %base558 = bitcast %union.tree_node* %239 to %struct.tree_base*, !dbg !10969
  %240 = bitcast %struct.tree_base* %base558 to i64*, !dbg !10969
  %bf.load559 = load i64, i64* %240, align 8, !dbg !10969
  %bf.clear560 = and i64 %bf.load559, 65535, !dbg !10969
  %bf.cast561 = trunc i64 %bf.clear560 to i32, !dbg !10969
  %cmp562 = icmp eq i32 %bf.cast561, 12, !dbg !10969
  br i1 %cmp562, label %if.then564, label %if.else575, !dbg !10971

if.then564:                                       ; preds = %lor.lhs.false555, %if.end546
  %241 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10972
  %common565 = bitcast %union.tree_node* %241 to %struct.tree_common*, !dbg !10972
  %type566 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common565, i32 0, i32 2, !dbg !10972
  %242 = load %union.tree_node*, %union.tree_node** %type566, align 8, !dbg !10972
  %common567 = bitcast %union.tree_node* %242 to %struct.tree_common*, !dbg !10972
  %type568 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common567, i32 0, i32 2, !dbg !10972
  %243 = load %union.tree_node*, %union.tree_node** %type568, align 8, !dbg !10972
  %base569 = bitcast %union.tree_node* %243 to %struct.tree_base*, !dbg !10972
  %244 = bitcast %struct.tree_base* %base569 to i64*, !dbg !10972
  %bf.load570 = load i64, i64* %244, align 8, !dbg !10972
  %bf.lshr571 = lshr i64 %bf.load570, 56, !dbg !10972
  %bf.cast572 = trunc i64 %bf.lshr571 to i32, !dbg !10972
  %conv573 = trunc i32 %bf.cast572 to i8, !dbg !10972
  store i8 %conv573, i8* %as, align 1, !dbg !10974
  %245 = load i32 (i8)*, i32 (i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 57, i32 1), align 8, !dbg !10975
  %246 = load i8, i8* %as, align 1, !dbg !10976
  %call574 = call i32 %245(i8 zeroext %246), !dbg !10977
  store i32 %call574, i32* %address_mode, align 4, !dbg !10978
  br label %if.end576, !dbg !10979

if.else575:                                       ; preds = %lor.lhs.false555
  store i8 0, i8* %as, align 1, !dbg !10980
  store i32 16, i32* %address_mode, align 4, !dbg !10982
  br label %if.end576

if.end576:                                        ; preds = %if.else575, %if.then564
  %247 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10983
  %base577 = bitcast %union.tree_node* %247 to %struct.tree_base*, !dbg !10983
  %248 = bitcast %struct.tree_base* %base577 to i64*, !dbg !10983
  %bf.load578 = load i64, i64* %248, align 8, !dbg !10983
  %bf.clear579 = and i64 %bf.load578, 65535, !dbg !10983
  %bf.cast580 = trunc i64 %bf.clear579 to i32, !dbg !10983
  %cmp581 = icmp eq i32 %bf.cast580, 48, !dbg !10985
  br i1 %cmp581, label %if.then583, label %if.end591, !dbg !10986

if.then583:                                       ; preds = %if.end576
  call void @llvm.dbg.declare(metadata i32* %align, metadata !10987, metadata !DIExpression()), !dbg !10989
  %249 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10990
  %common584 = bitcast %union.tree_node* %249 to %struct.tree_common*, !dbg !10990
  %type585 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common584, i32 0, i32 2, !dbg !10990
  %250 = load %union.tree_node*, %union.tree_node** %type585, align 8, !dbg !10990
  %type586 = bitcast %union.tree_node* %250 to %struct.tree_type*, !dbg !10990
  %align587 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type586, i32 0, i32 7, !dbg !10990
  %251 = load i32, i32* %align587, align 8, !dbg !10990
  %div = udiv i32 %251, 8, !dbg !10990
  store i32 %div, i32* %align, align 4, !dbg !10989
  %252 = load i32, i32* %address_mode, align 4, !dbg !10991
  %253 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10991
  %254 = load i32, i32* %align, align 4, !dbg !10991
  %sub = sub nsw i32 0, %254, !dbg !10991
  %conv588 = sext i32 %sub to i64, !dbg !10991
  %call589 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv588), !dbg !10991
  %call590 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 61, i32 %252, %struct.rtx_def* %253, %struct.rtx_def* %call589), !dbg !10991
  store %struct.rtx_def* %call590, %struct.rtx_def** %op0, align 8, !dbg !10992
  br label %if.end591, !dbg !10993

if.end591:                                        ; preds = %if.then583, %if.end576
  %255 = load i32, i32* %mode, align 4, !dbg !10994
  %256 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10995
  %call592 = call %struct.rtx_def* @gen_rtx_MEM(i32 %255, %struct.rtx_def* %256), !dbg !10996
  store %struct.rtx_def* %call592, %struct.rtx_def** %op0, align 8, !dbg !10997
  %257 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !10998
  %258 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !10999
  call void @set_mem_attributes(%struct.rtx_def* %257, %union.tree_node* %258, i32 0), !dbg !11000
  %259 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11001
  %260 = load i8, i8* %as, align 1, !dbg !11002
  call void @set_mem_addr_space(%struct.rtx_def* %259, i8 zeroext %260), !dbg !11003
  %261 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11004
  store %struct.rtx_def* %261, %struct.rtx_def** %retval, align 8, !dbg !11005
  br label %return, !dbg !11005

sw.bb593:                                         ; preds = %sw.epilog48
  %262 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11006
  %exp594 = bitcast %union.tree_node* %262 to %struct.tree_exp*, !dbg !11006
  %operands595 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp594, i32 0, i32 3, !dbg !11006
  %arrayidx596 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands595, i64 0, i64 0, !dbg !11006
  %263 = load %union.tree_node*, %union.tree_node** %arrayidx596, align 8, !dbg !11006
  %tobool597 = icmp ne %union.tree_node* %263, null, !dbg !11006
  br i1 %tobool597, label %land.lhs.true598, label %if.end620, !dbg !11008

land.lhs.true598:                                 ; preds = %sw.bb593
  %264 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11009
  %exp599 = bitcast %union.tree_node* %264 to %struct.tree_exp*, !dbg !11009
  %operands600 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp599, i32 0, i32 3, !dbg !11009
  %arrayidx601 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands600, i64 0, i64 0, !dbg !11009
  %265 = load %union.tree_node*, %union.tree_node** %arrayidx601, align 8, !dbg !11009
  %base602 = bitcast %union.tree_node* %265 to %struct.tree_base*, !dbg !11009
  %266 = bitcast %struct.tree_base* %base602 to i64*, !dbg !11009
  %bf.load603 = load i64, i64* %266, align 8, !dbg !11009
  %bf.clear604 = and i64 %bf.load603, 65535, !dbg !11009
  %bf.cast605 = trunc i64 %bf.clear604 to i32, !dbg !11009
  %idxprom606 = zext i32 %bf.cast605 to i64, !dbg !11009
  %arrayidx607 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom606, !dbg !11009
  %arrayidx608 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx607, i64 0, i64 11, !dbg !11009
  %267 = load i8, i8* %arrayidx608, align 1, !dbg !11009
  %conv609 = zext i8 %267 to i32, !dbg !11009
  %tobool610 = icmp ne i32 %conv609, 0, !dbg !11009
  br i1 %tobool610, label %land.lhs.true611, label %if.then619, !dbg !11009

land.lhs.true611:                                 ; preds = %land.lhs.true598
  %268 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11009
  %exp612 = bitcast %union.tree_node* %268 to %struct.tree_exp*, !dbg !11009
  %operands613 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp612, i32 0, i32 3, !dbg !11009
  %arrayidx614 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands613, i64 0, i64 0, !dbg !11009
  %269 = load %union.tree_node*, %union.tree_node** %arrayidx614, align 8, !dbg !11009
  %decl_with_rtl615 = bitcast %union.tree_node* %269 to %struct.tree_decl_with_rtl*, !dbg !11009
  %rtl616 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl615, i32 0, i32 1, !dbg !11009
  %270 = load %struct.rtx_def*, %struct.rtx_def** %rtl616, align 8, !dbg !11009
  %cmp617 = icmp ne %struct.rtx_def* %270, null, !dbg !11009
  br i1 %cmp617, label %if.end620, label %if.then619, !dbg !11010

if.then619:                                       ; preds = %land.lhs.true611, %land.lhs.true598
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11011
  br label %return, !dbg !11011

if.end620:                                        ; preds = %land.lhs.true611, %sw.bb593
  %271 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11012
  %common621 = bitcast %union.tree_node* %271 to %struct.tree_common*, !dbg !11012
  %type622 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common621, i32 0, i32 2, !dbg !11012
  %272 = load %union.tree_node*, %union.tree_node** %type622, align 8, !dbg !11012
  %call623 = call %union.tree_node* @build_pointer_type(%union.tree_node* %272), !dbg !11013
  %273 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11014
  %call624 = call %union.tree_node* @tree_mem_ref_addr(%union.tree_node* %call623, %union.tree_node* %273), !dbg !11015
  %call625 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %call624), !dbg !11016
  store %struct.rtx_def* %call625, %struct.rtx_def** %op0, align 8, !dbg !11017
  %274 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11018
  %tobool626 = icmp ne %struct.rtx_def* %274, null, !dbg !11018
  br i1 %tobool626, label %if.end628, label %if.then627, !dbg !11020

if.then627:                                       ; preds = %if.end620
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11021
  br label %return, !dbg !11021

if.end628:                                        ; preds = %if.end620
  %275 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11022
  %common629 = bitcast %union.tree_node* %275 to %struct.tree_common*, !dbg !11022
  %type630 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common629, i32 0, i32 2, !dbg !11022
  %276 = load %union.tree_node*, %union.tree_node** %type630, align 8, !dbg !11022
  %base631 = bitcast %union.tree_node* %276 to %struct.tree_base*, !dbg !11022
  %277 = bitcast %struct.tree_base* %base631 to i64*, !dbg !11022
  %bf.load632 = load i64, i64* %277, align 8, !dbg !11022
  %bf.lshr633 = lshr i64 %bf.load632, 56, !dbg !11022
  %bf.cast634 = trunc i64 %bf.lshr633 to i32, !dbg !11022
  %conv635 = trunc i32 %bf.cast634 to i8, !dbg !11022
  store i8 %conv635, i8* %as, align 1, !dbg !11023
  %278 = load i32, i32* %mode, align 4, !dbg !11024
  %279 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11025
  %call636 = call %struct.rtx_def* @gen_rtx_MEM(i32 %278, %struct.rtx_def* %279), !dbg !11026
  store %struct.rtx_def* %call636, %struct.rtx_def** %op0, align 8, !dbg !11027
  %280 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11028
  %281 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11029
  call void @set_mem_attributes(%struct.rtx_def* %280, %union.tree_node* %281, i32 0), !dbg !11030
  %282 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11031
  %283 = load i8, i8* %as, align 1, !dbg !11032
  call void @set_mem_addr_space(%struct.rtx_def* %282, i8 zeroext %283), !dbg !11033
  %284 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11034
  store %struct.rtx_def* %284, %struct.rtx_def** %retval, align 8, !dbg !11035
  br label %return, !dbg !11035

sw.bb637:                                         ; preds = %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48
  call void @llvm.dbg.declare(metadata i32* %mode1, metadata !11036, metadata !DIExpression()), !dbg !11038
  call void @llvm.dbg.declare(metadata i64* %bitsize, metadata !11039, metadata !DIExpression()), !dbg !11040
  call void @llvm.dbg.declare(metadata i64* %bitpos, metadata !11041, metadata !DIExpression()), !dbg !11042
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset, metadata !11043, metadata !DIExpression()), !dbg !11044
  call void @llvm.dbg.declare(metadata i32* %volatilep, metadata !11045, metadata !DIExpression()), !dbg !11046
  store i32 0, i32* %volatilep, align 4, !dbg !11046
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !11047, metadata !DIExpression()), !dbg !11048
  %285 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11049
  %call638 = call %union.tree_node* @get_inner_reference(%union.tree_node* %285, i64* %bitsize, i64* %bitpos, %union.tree_node** %offset, i32* %mode1, i32* %unsignedp, i32* %volatilep, i8 zeroext 0), !dbg !11050
  store %union.tree_node* %call638, %union.tree_node** %tem, align 8, !dbg !11048
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig_op0, metadata !11051, metadata !DIExpression()), !dbg !11052
  %286 = load i64, i64* %bitsize, align 8, !dbg !11053
  %cmp639 = icmp eq i64 %286, 0, !dbg !11055
  br i1 %cmp639, label %if.then641, label %if.end642, !dbg !11056

if.then641:                                       ; preds = %sw.bb637
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11057
  br label %return, !dbg !11057

if.end642:                                        ; preds = %sw.bb637
  %287 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !11058
  %call643 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %287), !dbg !11059
  store %struct.rtx_def* %call643, %struct.rtx_def** %op0, align 8, !dbg !11060
  store %struct.rtx_def* %call643, %struct.rtx_def** %orig_op0, align 8, !dbg !11061
  %288 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11062
  %tobool644 = icmp ne %struct.rtx_def* %288, null, !dbg !11062
  br i1 %tobool644, label %if.end646, label %if.then645, !dbg !11064

if.then645:                                       ; preds = %if.end642
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11065
  br label %return, !dbg !11065

if.end646:                                        ; preds = %if.end642
  %289 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !11066
  %tobool647 = icmp ne %union.tree_node* %289, null, !dbg !11066
  br i1 %tobool647, label %if.then648, label %if.end707, !dbg !11068

if.then648:                                       ; preds = %if.end646
  call void @llvm.dbg.declare(metadata i32* %addrmode, metadata !11069, metadata !DIExpression()), !dbg !11071
  call void @llvm.dbg.declare(metadata i32* %offmode, metadata !11072, metadata !DIExpression()), !dbg !11073
  %290 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11074
  %291 = bitcast %struct.rtx_def* %290 to i32*, !dbg !11074
  %bf.load649 = load i32, i32* %291, align 8, !dbg !11074
  %bf.clear650 = and i32 %bf.load649, 65535, !dbg !11074
  %cmp651 = icmp eq i32 %bf.clear650, 43, !dbg !11074
  br i1 %cmp651, label %if.end654, label %if.then653, !dbg !11076

if.then653:                                       ; preds = %if.then648
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11077
  br label %return, !dbg !11077

if.end654:                                        ; preds = %if.then648
  %292 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11078
  %u655 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %292, i32 0, i32 1, !dbg !11078
  %fld656 = bitcast %union.u* %u655 to [1 x %union.rtunion_def]*, !dbg !11078
  %arrayidx657 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld656, i64 0, i64 0, !dbg !11078
  %rt_rtx658 = bitcast %union.rtunion_def* %arrayidx657 to %struct.rtx_def**, !dbg !11078
  %293 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx658, align 8, !dbg !11078
  store %struct.rtx_def* %293, %struct.rtx_def** %op0, align 8, !dbg !11079
  %294 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11080
  %295 = bitcast %struct.rtx_def* %294 to i32*, !dbg !11080
  %bf.load659 = load i32, i32* %295, align 8, !dbg !11080
  %bf.lshr660 = lshr i32 %bf.load659, 16, !dbg !11080
  %bf.clear661 = and i32 %bf.lshr660, 255, !dbg !11080
  store i32 %bf.clear661, i32* %addrmode, align 4, !dbg !11081
  %296 = load i32, i32* %addrmode, align 4, !dbg !11082
  %cmp662 = icmp eq i32 %296, 0, !dbg !11084
  br i1 %cmp662, label %if.then664, label %if.end665, !dbg !11085

if.then664:                                       ; preds = %if.end654
  store i32 16, i32* %addrmode, align 4, !dbg !11086
  br label %if.end665, !dbg !11087

if.end665:                                        ; preds = %if.then664, %if.end654
  %297 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !11088
  %call666 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %297), !dbg !11089
  store %struct.rtx_def* %call666, %struct.rtx_def** %op1, align 8, !dbg !11090
  %298 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11091
  %tobool667 = icmp ne %struct.rtx_def* %298, null, !dbg !11091
  br i1 %tobool667, label %if.end669, label %if.then668, !dbg !11093

if.then668:                                       ; preds = %if.end665
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11094
  br label %return, !dbg !11094

if.end669:                                        ; preds = %if.end665
  %299 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11095
  %300 = bitcast %struct.rtx_def* %299 to i32*, !dbg !11095
  %bf.load670 = load i32, i32* %300, align 8, !dbg !11095
  %bf.lshr671 = lshr i32 %bf.load670, 16, !dbg !11095
  %bf.clear672 = and i32 %bf.lshr671, 255, !dbg !11095
  store i32 %bf.clear672, i32* %offmode, align 4, !dbg !11096
  %301 = load i32, i32* %offmode, align 4, !dbg !11097
  %cmp673 = icmp eq i32 %301, 0, !dbg !11099
  br i1 %cmp673, label %if.then675, label %if.end698, !dbg !11100

if.then675:                                       ; preds = %if.end669
  %302 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !11101
  %common676 = bitcast %union.tree_node* %302 to %struct.tree_common*, !dbg !11101
  %type677 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common676, i32 0, i32 2, !dbg !11101
  %303 = load %union.tree_node*, %union.tree_node** %type677, align 8, !dbg !11101
  %base678 = bitcast %union.tree_node* %303 to %struct.tree_base*, !dbg !11101
  %304 = bitcast %struct.tree_base* %base678 to i64*, !dbg !11101
  %bf.load679 = load i64, i64* %304, align 8, !dbg !11101
  %bf.clear680 = and i64 %bf.load679, 65535, !dbg !11101
  %bf.cast681 = trunc i64 %bf.clear680 to i32, !dbg !11101
  %cmp682 = icmp eq i32 %bf.cast681, 14, !dbg !11101
  br i1 %cmp682, label %cond.true684, label %cond.false688, !dbg !11101

cond.true684:                                     ; preds = %if.then675
  %305 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !11101
  %common685 = bitcast %union.tree_node* %305 to %struct.tree_common*, !dbg !11101
  %type686 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common685, i32 0, i32 2, !dbg !11101
  %306 = load %union.tree_node*, %union.tree_node** %type686, align 8, !dbg !11101
  %call687 = call i32 @vector_type_mode(%union.tree_node* %306), !dbg !11101
  br label %cond.end696, !dbg !11101

cond.false688:                                    ; preds = %if.then675
  %307 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !11101
  %common689 = bitcast %union.tree_node* %307 to %struct.tree_common*, !dbg !11101
  %type690 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common689, i32 0, i32 2, !dbg !11101
  %308 = load %union.tree_node*, %union.tree_node** %type690, align 8, !dbg !11101
  %type691 = bitcast %union.tree_node* %308 to %struct.tree_type*, !dbg !11101
  %mode692 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type691, i32 0, i32 6, !dbg !11101
  %bf.load693 = load i32, i32* %mode692, align 4, !dbg !11101
  %bf.lshr694 = lshr i32 %bf.load693, 16, !dbg !11101
  %bf.clear695 = and i32 %bf.lshr694, 255, !dbg !11101
  br label %cond.end696, !dbg !11101

cond.end696:                                      ; preds = %cond.false688, %cond.true684
  %cond697 = phi i32 [ %call687, %cond.true684 ], [ %bf.clear695, %cond.false688 ], !dbg !11101
  store i32 %cond697, i32* %offmode, align 4, !dbg !11102
  br label %if.end698, !dbg !11103

if.end698:                                        ; preds = %cond.end696, %if.end669
  %309 = load i32, i32* %addrmode, align 4, !dbg !11104
  %310 = load i32, i32* %offmode, align 4, !dbg !11106
  %cmp699 = icmp ne i32 %309, %310, !dbg !11107
  br i1 %cmp699, label %if.then701, label %if.end704, !dbg !11108

if.then701:                                       ; preds = %if.end698
  %311 = load i32, i32* %addrmode, align 4, !dbg !11109
  %312 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11110
  %313 = load i32, i32* %offmode, align 4, !dbg !11111
  %314 = load i32, i32* %addrmode, align 4, !dbg !11112
  %315 = load i32, i32* %offmode, align 4, !dbg !11113
  %call702 = call i32 @subreg_lowpart_offset(i32 %314, i32 %315), !dbg !11114
  %call703 = call %struct.rtx_def* @simplify_gen_subreg(i32 %311, %struct.rtx_def* %312, i32 %313, i32 %call702), !dbg !11115
  store %struct.rtx_def* %call703, %struct.rtx_def** %op1, align 8, !dbg !11116
  br label %if.end704, !dbg !11117

if.end704:                                        ; preds = %if.then701, %if.end698
  %316 = load i32, i32* %mode, align 4, !dbg !11118
  %317 = load i32, i32* %addrmode, align 4, !dbg !11119
  %318 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11119
  %319 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11119
  %call705 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %317, %struct.rtx_def* %318, %struct.rtx_def* %319), !dbg !11119
  %call706 = call %struct.rtx_def* @gen_rtx_MEM(i32 %316, %struct.rtx_def* %call705), !dbg !11120
  store %struct.rtx_def* %call706, %struct.rtx_def** %op0, align 8, !dbg !11121
  br label %if.end707, !dbg !11122

if.end707:                                        ; preds = %if.end704, %if.end646
  %320 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11123
  %321 = bitcast %struct.rtx_def* %320 to i32*, !dbg !11123
  %bf.load708 = load i32, i32* %321, align 8, !dbg !11123
  %bf.clear709 = and i32 %bf.load708, 65535, !dbg !11123
  %cmp710 = icmp eq i32 %bf.clear709, 43, !dbg !11123
  br i1 %cmp710, label %if.then712, label %if.end769, !dbg !11125

if.then712:                                       ; preds = %if.end707
  %322 = load i32, i32* %mode1, align 4, !dbg !11126
  %cmp713 = icmp eq i32 %322, 0, !dbg !11129
  br i1 %cmp713, label %if.then715, label %if.end718, !dbg !11130

if.then715:                                       ; preds = %if.then712
  %323 = load i64, i64* %bitsize, align 8, !dbg !11131
  %conv716 = trunc i64 %323 to i32, !dbg !11131
  %call717 = call i32 @smallest_mode_for_size(i32 %conv716, i32 2), !dbg !11132
  store i32 %call717, i32* %mode1, align 4, !dbg !11133
  br label %if.end718, !dbg !11134

if.end718:                                        ; preds = %if.then715, %if.then712
  %324 = load i64, i64* %bitpos, align 8, !dbg !11135
  %cmp719 = icmp sge i64 %324, 8, !dbg !11137
  br i1 %cmp719, label %if.then721, label %if.else724, !dbg !11138

if.then721:                                       ; preds = %if.end718
  %325 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11139
  %326 = load i32, i32* %mode1, align 4, !dbg !11139
  %327 = load i64, i64* %bitpos, align 8, !dbg !11139
  %div722 = sdiv i64 %327, 8, !dbg !11139
  %call723 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %325, i32 %326, i64 %div722, i32 0, i32 1), !dbg !11139
  store %struct.rtx_def* %call723, %struct.rtx_def** %op0, align 8, !dbg !11141
  %328 = load i64, i64* %bitpos, align 8, !dbg !11142
  %rem = srem i64 %328, 8, !dbg !11142
  store i64 %rem, i64* %bitpos, align 8, !dbg !11142
  br label %if.end763, !dbg !11143

if.else724:                                       ; preds = %if.end718
  %329 = load i64, i64* %bitpos, align 8, !dbg !11144
  %cmp725 = icmp slt i64 %329, 0, !dbg !11146
  br i1 %cmp725, label %if.then727, label %if.else735, !dbg !11147

if.then727:                                       ; preds = %if.else724
  call void @llvm.dbg.declare(metadata i64* %units, metadata !11148, metadata !DIExpression()), !dbg !11150
  %330 = load i64, i64* %bitpos, align 8, !dbg !11151
  %sub728 = sub nsw i64 0, %330, !dbg !11152
  %add729 = add nsw i64 %sub728, 8, !dbg !11153
  %sub730 = sub nsw i64 %add729, 1, !dbg !11154
  %div731 = sdiv i64 %sub730, 8, !dbg !11155
  store i64 %div731, i64* %units, align 8, !dbg !11150
  %331 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11156
  %332 = load i32, i32* %mode1, align 4, !dbg !11156
  %333 = load i64, i64* %units, align 8, !dbg !11156
  %call732 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %331, i32 %332, i64 %333, i32 0, i32 1), !dbg !11156
  store %struct.rtx_def* %call732, %struct.rtx_def** %op0, align 8, !dbg !11157
  %334 = load i64, i64* %units, align 8, !dbg !11158
  %mul733 = mul nsw i64 %334, 8, !dbg !11159
  %335 = load i64, i64* %bitpos, align 8, !dbg !11160
  %add734 = add nsw i64 %335, %mul733, !dbg !11160
  store i64 %add734, i64* %bitpos, align 8, !dbg !11160
  br label %if.end762, !dbg !11161

if.else735:                                       ; preds = %if.else724
  %336 = load i64, i64* %bitpos, align 8, !dbg !11162
  %cmp736 = icmp eq i64 %336, 0, !dbg !11164
  br i1 %cmp736, label %land.lhs.true738, label %if.else750, !dbg !11165

land.lhs.true738:                                 ; preds = %if.else735
  %337 = load i64, i64* %bitsize, align 8, !dbg !11166
  %338 = load i32, i32* %mode, align 4, !dbg !11167
  %idxprom739 = zext i32 %338 to i64, !dbg !11167
  %arrayidx740 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom739, !dbg !11167
  %339 = load i8, i8* %arrayidx740, align 1, !dbg !11167
  %conv741 = zext i8 %339 to i16, !dbg !11167
  %conv742 = zext i16 %conv741 to i32, !dbg !11167
  %mul743 = mul nsw i32 %conv742, 8, !dbg !11167
  %conv744 = trunc i32 %mul743 to i16, !dbg !11167
  %conv745 = zext i16 %conv744 to i64, !dbg !11167
  %cmp746 = icmp eq i64 %337, %conv745, !dbg !11168
  br i1 %cmp746, label %if.then748, label %if.else750, !dbg !11169

if.then748:                                       ; preds = %land.lhs.true738
  %340 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11170
  %341 = load i32, i32* %mode, align 4, !dbg !11170
  %call749 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %340, i32 %341, i64 0, i32 0, i32 1), !dbg !11170
  store %struct.rtx_def* %call749, %struct.rtx_def** %op0, align 8, !dbg !11171
  br label %if.end761, !dbg !11172

if.else750:                                       ; preds = %land.lhs.true738, %if.else735
  %342 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11173
  %343 = bitcast %struct.rtx_def* %342 to i32*, !dbg !11173
  %bf.load751 = load i32, i32* %343, align 8, !dbg !11173
  %bf.lshr752 = lshr i32 %bf.load751, 16, !dbg !11173
  %bf.clear753 = and i32 %bf.lshr752, 255, !dbg !11173
  %344 = load i32, i32* %mode1, align 4, !dbg !11175
  %cmp754 = icmp ne i32 %bf.clear753, %344, !dbg !11176
  br i1 %cmp754, label %if.then756, label %if.else758, !dbg !11177

if.then756:                                       ; preds = %if.else750
  %345 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11178
  %346 = load i32, i32* %mode1, align 4, !dbg !11178
  %call757 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %345, i32 %346, i64 0, i32 0, i32 1), !dbg !11178
  store %struct.rtx_def* %call757, %struct.rtx_def** %op0, align 8, !dbg !11179
  br label %if.end760, !dbg !11180

if.else758:                                       ; preds = %if.else750
  %347 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11181
  %call759 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %347), !dbg !11182
  store %struct.rtx_def* %call759, %struct.rtx_def** %op0, align 8, !dbg !11183
  br label %if.end760

if.end760:                                        ; preds = %if.else758, %if.then756
  br label %if.end761

if.end761:                                        ; preds = %if.end760, %if.then748
  br label %if.end762

if.end762:                                        ; preds = %if.end761, %if.then727
  br label %if.end763

if.end763:                                        ; preds = %if.end762, %if.then721
  %348 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11184
  %349 = load %struct.rtx_def*, %struct.rtx_def** %orig_op0, align 8, !dbg !11186
  %cmp764 = icmp eq %struct.rtx_def* %348, %349, !dbg !11187
  br i1 %cmp764, label %if.then766, label %if.end768, !dbg !11188

if.then766:                                       ; preds = %if.end763
  %350 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11189
  %call767 = call %struct.rtx_def* @shallow_copy_rtx_stat(%struct.rtx_def* %350), !dbg !11189
  store %struct.rtx_def* %call767, %struct.rtx_def** %op0, align 8, !dbg !11190
  br label %if.end768, !dbg !11191

if.end768:                                        ; preds = %if.then766, %if.end763
  %351 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11192
  %352 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11193
  call void @set_mem_attributes(%struct.rtx_def* %351, %union.tree_node* %352, i32 0), !dbg !11194
  br label %if.end769, !dbg !11195

if.end769:                                        ; preds = %if.end768, %if.end707
  %353 = load i64, i64* %bitpos, align 8, !dbg !11196
  %cmp770 = icmp eq i64 %353, 0, !dbg !11198
  br i1 %cmp770, label %land.lhs.true772, label %if.end779, !dbg !11199

land.lhs.true772:                                 ; preds = %if.end769
  %354 = load i32, i32* %mode, align 4, !dbg !11200
  %355 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11201
  %356 = bitcast %struct.rtx_def* %355 to i32*, !dbg !11201
  %bf.load773 = load i32, i32* %356, align 8, !dbg !11201
  %bf.lshr774 = lshr i32 %bf.load773, 16, !dbg !11201
  %bf.clear775 = and i32 %bf.lshr774, 255, !dbg !11201
  %cmp776 = icmp eq i32 %354, %bf.clear775, !dbg !11202
  br i1 %cmp776, label %if.then778, label %if.end779, !dbg !11203

if.then778:                                       ; preds = %land.lhs.true772
  %357 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11204
  store %struct.rtx_def* %357, %struct.rtx_def** %retval, align 8, !dbg !11205
  br label %return, !dbg !11205

if.end779:                                        ; preds = %land.lhs.true772, %if.end769
  %358 = load i64, i64* %bitpos, align 8, !dbg !11206
  %cmp780 = icmp slt i64 %358, 0, !dbg !11208
  br i1 %cmp780, label %if.then782, label %if.end783, !dbg !11209

if.then782:                                       ; preds = %if.end779
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11210
  br label %return, !dbg !11210

if.end783:                                        ; preds = %if.end779
  %359 = load i64, i64* %bitpos, align 8, !dbg !11211
  %rem784 = srem i64 %359, 8, !dbg !11213
  %cmp785 = icmp eq i64 %rem784, 0, !dbg !11214
  br i1 %cmp785, label %land.lhs.true787, label %if.end837, !dbg !11215

land.lhs.true787:                                 ; preds = %if.end783
  %360 = load i64, i64* %bitsize, align 8, !dbg !11216
  %361 = load i32, i32* %mode1, align 4, !dbg !11217
  %idxprom788 = zext i32 %361 to i64, !dbg !11217
  %arrayidx789 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom788, !dbg !11217
  %362 = load i8, i8* %arrayidx789, align 1, !dbg !11217
  %conv790 = zext i8 %362 to i16, !dbg !11217
  %conv791 = zext i16 %conv790 to i32, !dbg !11217
  %mul792 = mul nsw i32 %conv791, 8, !dbg !11217
  %conv793 = trunc i32 %mul792 to i16, !dbg !11217
  %conv794 = zext i16 %conv793 to i64, !dbg !11217
  %cmp795 = icmp eq i64 %360, %conv794, !dbg !11218
  br i1 %cmp795, label %if.then797, label %if.end837, !dbg !11219

if.then797:                                       ; preds = %land.lhs.true787
  call void @llvm.dbg.declare(metadata i32* %opmode, metadata !11220, metadata !DIExpression()), !dbg !11222
  %363 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11223
  %364 = bitcast %struct.rtx_def* %363 to i32*, !dbg !11223
  %bf.load798 = load i32, i32* %364, align 8, !dbg !11223
  %bf.lshr799 = lshr i32 %bf.load798, 16, !dbg !11223
  %bf.clear800 = and i32 %bf.lshr799, 255, !dbg !11223
  store i32 %bf.clear800, i32* %opmode, align 4, !dbg !11222
  %365 = load i32, i32* %opmode, align 4, !dbg !11224
  %cmp801 = icmp ne i32 %365, 1, !dbg !11224
  br i1 %cmp801, label %cond.false804, label %cond.true803, !dbg !11224

cond.true803:                                     ; preds = %if.then797
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 2575, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11224
  br label %cond.end805, !dbg !11224

cond.false804:                                    ; preds = %if.then797
  br label %cond.end805, !dbg !11224

cond.end805:                                      ; preds = %cond.false804, %cond.true803
  %cond806 = phi i32 [ 0, %cond.true803 ], [ 0, %cond.false804 ], !dbg !11224
  %366 = load i32, i32* %opmode, align 4, !dbg !11225
  %cmp807 = icmp eq i32 %366, 0, !dbg !11227
  br i1 %cmp807, label %if.then809, label %if.end810, !dbg !11228

if.then809:                                       ; preds = %cond.end805
  %367 = load i32, i32* %mode1, align 4, !dbg !11229
  store i32 %367, i32* %opmode, align 4, !dbg !11230
  br label %if.end810, !dbg !11231

if.end810:                                        ; preds = %if.then809, %cond.end805
  %368 = load i64, i64* %bitpos, align 8, !dbg !11232
  %369 = load i32, i32* %opmode, align 4, !dbg !11234
  %idxprom811 = zext i32 %369 to i64, !dbg !11234
  %arrayidx812 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom811, !dbg !11234
  %370 = load i8, i8* %arrayidx812, align 1, !dbg !11234
  %conv813 = zext i8 %370 to i16, !dbg !11234
  %conv814 = zext i16 %conv813 to i32, !dbg !11234
  %mul815 = mul nsw i32 %conv814, 8, !dbg !11234
  %conv816 = trunc i32 %mul815 to i16, !dbg !11234
  %conv817 = zext i16 %conv816 to i64, !dbg !11234
  %cmp818 = icmp sge i64 %368, %conv817, !dbg !11235
  br i1 %cmp818, label %if.then820, label %if.end821, !dbg !11236

if.then820:                                       ; preds = %if.end810
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11237
  br label %return, !dbg !11237

if.end821:                                        ; preds = %if.end810
  %371 = load i64, i64* %bitpos, align 8, !dbg !11238
  %372 = load i32, i32* %mode, align 4, !dbg !11240
  %idxprom822 = zext i32 %372 to i64, !dbg !11240
  %arrayidx823 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom822, !dbg !11240
  %373 = load i8, i8* %arrayidx823, align 1, !dbg !11240
  %conv824 = zext i8 %373 to i16, !dbg !11240
  %conv825 = zext i16 %conv824 to i32, !dbg !11240
  %mul826 = mul nsw i32 %conv825, 8, !dbg !11240
  %conv827 = trunc i32 %mul826 to i16, !dbg !11240
  %conv828 = zext i16 %conv827 to i64, !dbg !11240
  %rem829 = srem i64 %371, %conv828, !dbg !11241
  %cmp830 = icmp eq i64 %rem829, 0, !dbg !11242
  br i1 %cmp830, label %if.then832, label %if.end836, !dbg !11243

if.then832:                                       ; preds = %if.end821
  %374 = load i32, i32* %mode, align 4, !dbg !11244
  %375 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11245
  %376 = load i32, i32* %opmode, align 4, !dbg !11246
  %377 = load i64, i64* %bitpos, align 8, !dbg !11247
  %div833 = sdiv i64 %377, 8, !dbg !11248
  %conv834 = trunc i64 %div833 to i32, !dbg !11247
  %call835 = call %struct.rtx_def* @simplify_gen_subreg(i32 %374, %struct.rtx_def* %375, i32 %376, i32 %conv834), !dbg !11249
  store %struct.rtx_def* %call835, %struct.rtx_def** %retval, align 8, !dbg !11250
  br label %return, !dbg !11250

if.end836:                                        ; preds = %if.end821
  br label %if.end837, !dbg !11251

if.end837:                                        ; preds = %if.end836, %land.lhs.true787, %if.end783
  %378 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11252
  %379 = bitcast %struct.rtx_def* %378 to i32*, !dbg !11252
  %bf.load838 = load i32, i32* %379, align 8, !dbg !11252
  %bf.lshr839 = lshr i32 %bf.load838, 16, !dbg !11252
  %bf.clear840 = and i32 %bf.lshr839, 255, !dbg !11252
  %idxprom841 = zext i32 %bf.clear840 to i64, !dbg !11252
  %arrayidx842 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom841, !dbg !11252
  %380 = load i8, i8* %arrayidx842, align 1, !dbg !11252
  %conv843 = zext i8 %380 to i32, !dbg !11252
  %cmp844 = icmp eq i32 %conv843, 2, !dbg !11252
  br i1 %cmp844, label %land.rhs, label %lor.lhs.false846, !dbg !11252

lor.lhs.false846:                                 ; preds = %if.end837
  %381 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11252
  %382 = bitcast %struct.rtx_def* %381 to i32*, !dbg !11252
  %bf.load847 = load i32, i32* %382, align 8, !dbg !11252
  %bf.lshr848 = lshr i32 %bf.load847, 16, !dbg !11252
  %bf.clear849 = and i32 %bf.lshr848, 255, !dbg !11252
  %idxprom850 = zext i32 %bf.clear849 to i64, !dbg !11252
  %arrayidx851 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom850, !dbg !11252
  %383 = load i8, i8* %arrayidx851, align 1, !dbg !11252
  %conv852 = zext i8 %383 to i32, !dbg !11252
  %cmp853 = icmp eq i32 %conv852, 3, !dbg !11252
  br i1 %cmp853, label %land.rhs, label %land.end, !dbg !11253

land.rhs:                                         ; preds = %lor.lhs.false846, %if.end837
  %384 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11254
  %common855 = bitcast %union.tree_node* %384 to %struct.tree_common*, !dbg !11254
  %type856 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common855, i32 0, i32 2, !dbg !11254
  %385 = load %union.tree_node*, %union.tree_node** %type856, align 8, !dbg !11254
  %base857 = bitcast %union.tree_node* %385 to %struct.tree_base*, !dbg !11254
  %386 = bitcast %struct.tree_base* %base857 to i64*, !dbg !11254
  %bf.load858 = load i64, i64* %386, align 8, !dbg !11254
  %bf.lshr859 = lshr i64 %bf.load858, 21, !dbg !11254
  %bf.clear860 = and i64 %bf.lshr859, 1, !dbg !11254
  %bf.cast861 = trunc i64 %bf.clear860 to i32, !dbg !11254
  %tobool862 = icmp ne i32 %bf.cast861, 0, !dbg !11253
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false846
  %387 = phi i1 [ false, %lor.lhs.false846 ], [ %tobool862, %land.rhs ], !dbg !11255
  %388 = zext i1 %387 to i64, !dbg !11252
  %cond863 = select i1 %387, i32 119, i32 120, !dbg !11252
  %389 = load i32, i32* %mode, align 4, !dbg !11256
  %390 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11257
  %391 = bitcast %struct.rtx_def* %390 to i32*, !dbg !11257
  %bf.load864 = load i32, i32* %391, align 8, !dbg !11257
  %bf.lshr865 = lshr i32 %bf.load864, 16, !dbg !11257
  %bf.clear866 = and i32 %bf.lshr865, 255, !dbg !11257
  %cmp867 = icmp ne i32 %bf.clear866, 0, !dbg !11258
  br i1 %cmp867, label %cond.true869, label %cond.false873, !dbg !11257

cond.true869:                                     ; preds = %land.end
  %392 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11259
  %393 = bitcast %struct.rtx_def* %392 to i32*, !dbg !11259
  %bf.load870 = load i32, i32* %393, align 8, !dbg !11259
  %bf.lshr871 = lshr i32 %bf.load870, 16, !dbg !11259
  %bf.clear872 = and i32 %bf.lshr871, 255, !dbg !11259
  br label %cond.end874, !dbg !11257

cond.false873:                                    ; preds = %land.end
  %394 = load i32, i32* %mode1, align 4, !dbg !11260
  br label %cond.end874, !dbg !11257

cond.end874:                                      ; preds = %cond.false873, %cond.true869
  %cond875 = phi i32 [ %bf.clear872, %cond.true869 ], [ %394, %cond.false873 ], !dbg !11257
  %395 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11261
  %396 = load i64, i64* %bitsize, align 8, !dbg !11262
  %call876 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %396), !dbg !11262
  %397 = load i64, i64* %bitpos, align 8, !dbg !11263
  %call877 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %397), !dbg !11263
  %call878 = call %struct.rtx_def* @simplify_gen_ternary(i32 %cond863, i32 %389, i32 %cond875, %struct.rtx_def* %395, %struct.rtx_def* %call876, %struct.rtx_def* %call877), !dbg !11264
  store %struct.rtx_def* %call878, %struct.rtx_def** %retval, align 8, !dbg !11265
  br label %return, !dbg !11265

sw.bb879:                                         ; preds = %sw.epilog48
  %398 = load i32, i32* %mode, align 4, !dbg !11266
  %399 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11266
  %call880 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 111, i32 %398, %struct.rtx_def* %399), !dbg !11266
  store %struct.rtx_def* %call880, %struct.rtx_def** %retval, align 8, !dbg !11267
  br label %return, !dbg !11267

sw.bb881:                                         ; preds = %sw.epilog48
  %400 = load i32, i32* %mode, align 4, !dbg !11268
  %401 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11268
  %call882 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 51, i32 %400, %struct.rtx_def* %401), !dbg !11268
  store %struct.rtx_def* %call882, %struct.rtx_def** %retval, align 8, !dbg !11269
  br label %return, !dbg !11269

sw.bb883:                                         ; preds = %sw.epilog48
  %402 = load i32, i32* %mode, align 4, !dbg !11270
  %403 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11270
  %call884 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 64, i32 %402, %struct.rtx_def* %403), !dbg !11270
  store %struct.rtx_def* %call884, %struct.rtx_def** %retval, align 8, !dbg !11271
  br label %return, !dbg !11271

sw.bb885:                                         ; preds = %sw.epilog48
  %404 = load i32, i32* %unsignedp, align 4, !dbg !11272
  %tobool886 = icmp ne i32 %404, 0, !dbg !11272
  br i1 %tobool886, label %if.then887, label %if.else889, !dbg !11274

if.then887:                                       ; preds = %sw.bb885
  %405 = load i32, i32* %mode, align 4, !dbg !11275
  %406 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11275
  %call888 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 105, i32 %405, %struct.rtx_def* %406), !dbg !11275
  store %struct.rtx_def* %call888, %struct.rtx_def** %retval, align 8, !dbg !11276
  br label %return, !dbg !11276

if.else889:                                       ; preds = %sw.bb885
  %407 = load i32, i32* %mode, align 4, !dbg !11277
  %408 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11277
  %call890 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 103, i32 %407, %struct.rtx_def* %408), !dbg !11277
  store %struct.rtx_def* %call890, %struct.rtx_def** %retval, align 8, !dbg !11278
  br label %return, !dbg !11278

sw.bb891:                                         ; preds = %sw.epilog48
  %409 = load i32, i32* %unsignedp, align 4, !dbg !11279
  %tobool892 = icmp ne i32 %409, 0, !dbg !11279
  br i1 %tobool892, label %if.then893, label %if.else895, !dbg !11281

if.then893:                                       ; preds = %sw.bb891
  %410 = load i32, i32* %mode, align 4, !dbg !11282
  %411 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11282
  %call894 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 106, i32 %410, %struct.rtx_def* %411), !dbg !11282
  store %struct.rtx_def* %call894, %struct.rtx_def** %retval, align 8, !dbg !11283
  br label %return, !dbg !11283

if.else895:                                       ; preds = %sw.bb891
  %412 = load i32, i32* %mode, align 4, !dbg !11284
  %413 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11284
  %call896 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 104, i32 %412, %struct.rtx_def* %413), !dbg !11284
  store %struct.rtx_def* %call896, %struct.rtx_def** %retval, align 8, !dbg !11285
  br label %return, !dbg !11285

sw.bb897:                                         ; preds = %sw.epilog48, %sw.epilog48
  %414 = load i32, i32* %mode, align 4, !dbg !11286
  %415 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11286
  %416 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11286
  %call898 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %414, %struct.rtx_def* %415, %struct.rtx_def* %416), !dbg !11286
  store %struct.rtx_def* %call898, %struct.rtx_def** %retval, align 8, !dbg !11287
  br label %return, !dbg !11287

sw.bb899:                                         ; preds = %sw.epilog48
  %417 = load i32, i32* %mode, align 4, !dbg !11288
  %418 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11288
  %419 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11288
  %call900 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %417, %struct.rtx_def* %418, %struct.rtx_def* %419), !dbg !11288
  store %struct.rtx_def* %call900, %struct.rtx_def** %retval, align 8, !dbg !11289
  br label %return, !dbg !11289

sw.bb901:                                         ; preds = %sw.epilog48
  %420 = load i32, i32* %mode, align 4, !dbg !11290
  %421 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11290
  %422 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11290
  %call902 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %420, %struct.rtx_def* %421, %struct.rtx_def* %422), !dbg !11290
  store %struct.rtx_def* %call902, %struct.rtx_def** %retval, align 8, !dbg !11291
  br label %return, !dbg !11291

sw.bb903:                                         ; preds = %sw.epilog48, %sw.epilog48, %sw.epilog48
  %423 = load i32, i32* %unsignedp, align 4, !dbg !11292
  %tobool904 = icmp ne i32 %423, 0, !dbg !11292
  br i1 %tobool904, label %if.then905, label %if.else907, !dbg !11294

if.then905:                                       ; preds = %sw.bb903
  %424 = load i32, i32* %mode, align 4, !dbg !11295
  %425 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11295
  %426 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11295
  %call906 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 59, i32 %424, %struct.rtx_def* %425, %struct.rtx_def* %426), !dbg !11295
  store %struct.rtx_def* %call906, %struct.rtx_def** %retval, align 8, !dbg !11296
  br label %return, !dbg !11296

if.else907:                                       ; preds = %sw.bb903
  %427 = load i32, i32* %mode, align 4, !dbg !11297
  %428 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11297
  %429 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11297
  %call908 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 55, i32 %427, %struct.rtx_def* %428, %struct.rtx_def* %429), !dbg !11297
  store %struct.rtx_def* %call908, %struct.rtx_def** %retval, align 8, !dbg !11298
  br label %return, !dbg !11298

sw.bb909:                                         ; preds = %sw.epilog48
  %430 = load i32, i32* %unsignedp, align 4, !dbg !11299
  %tobool910 = icmp ne i32 %430, 0, !dbg !11299
  br i1 %tobool910, label %if.then911, label %if.else913, !dbg !11301

if.then911:                                       ; preds = %sw.bb909
  %431 = load i32, i32* %mode, align 4, !dbg !11302
  %432 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11302
  %433 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11302
  %call912 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 60, i32 %431, %struct.rtx_def* %432, %struct.rtx_def* %433), !dbg !11302
  store %struct.rtx_def* %call912, %struct.rtx_def** %retval, align 8, !dbg !11303
  br label %return, !dbg !11303

if.else913:                                       ; preds = %sw.bb909
  %434 = load i32, i32* %mode, align 4, !dbg !11304
  %435 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11304
  %436 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11304
  %call914 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 58, i32 %434, %struct.rtx_def* %435, %struct.rtx_def* %436), !dbg !11304
  store %struct.rtx_def* %call914, %struct.rtx_def** %retval, align 8, !dbg !11305
  br label %return, !dbg !11305

sw.bb915:                                         ; preds = %sw.epilog48
  %437 = load i32, i32* %unsignedp, align 4, !dbg !11306
  %tobool916 = icmp ne i32 %437, 0, !dbg !11306
  br i1 %tobool916, label %if.then917, label %if.else919, !dbg !11308

if.then917:                                       ; preds = %sw.bb915
  %438 = load i32, i32* %mode, align 4, !dbg !11309
  %439 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11309
  %440 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11309
  %call918 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 59, i32 %438, %struct.rtx_def* %439, %struct.rtx_def* %440), !dbg !11309
  store %struct.rtx_def* %call918, %struct.rtx_def** %retval, align 8, !dbg !11310
  br label %return, !dbg !11310

if.else919:                                       ; preds = %sw.bb915
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %div920, metadata !11311, metadata !DIExpression()), !dbg !11313
  %441 = load i32, i32* %mode, align 4, !dbg !11314
  %442 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11314
  %443 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11314
  %call921 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 55, i32 %441, %struct.rtx_def* %442, %struct.rtx_def* %443), !dbg !11314
  store %struct.rtx_def* %call921, %struct.rtx_def** %div920, align 8, !dbg !11313
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod, metadata !11315, metadata !DIExpression()), !dbg !11316
  %444 = load i32, i32* %mode, align 4, !dbg !11317
  %445 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11317
  %446 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11317
  %call922 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 58, i32 %444, %struct.rtx_def* %445, %struct.rtx_def* %446), !dbg !11317
  store %struct.rtx_def* %call922, %struct.rtx_def** %mod, align 8, !dbg !11316
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adj, metadata !11318, metadata !DIExpression()), !dbg !11319
  %447 = load i32, i32* %mode, align 4, !dbg !11320
  %448 = load %struct.rtx_def*, %struct.rtx_def** %mod, align 8, !dbg !11321
  %449 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11322
  %call923 = call %struct.rtx_def* @floor_sdiv_adjust(i32 %447, %struct.rtx_def* %448, %struct.rtx_def* %449), !dbg !11323
  store %struct.rtx_def* %call923, %struct.rtx_def** %adj, align 8, !dbg !11319
  %450 = load i32, i32* %mode, align 4, !dbg !11324
  %451 = load %struct.rtx_def*, %struct.rtx_def** %div920, align 8, !dbg !11324
  %452 = load %struct.rtx_def*, %struct.rtx_def** %adj, align 8, !dbg !11324
  %call924 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %450, %struct.rtx_def* %451, %struct.rtx_def* %452), !dbg !11324
  store %struct.rtx_def* %call924, %struct.rtx_def** %retval, align 8, !dbg !11325
  br label %return, !dbg !11325

sw.bb925:                                         ; preds = %sw.epilog48
  %453 = load i32, i32* %unsignedp, align 4, !dbg !11326
  %tobool926 = icmp ne i32 %453, 0, !dbg !11326
  br i1 %tobool926, label %if.then927, label %if.else929, !dbg !11328

if.then927:                                       ; preds = %sw.bb925
  %454 = load i32, i32* %mode, align 4, !dbg !11329
  %455 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11329
  %456 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11329
  %call928 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 60, i32 %454, %struct.rtx_def* %455, %struct.rtx_def* %456), !dbg !11329
  store %struct.rtx_def* %call928, %struct.rtx_def** %retval, align 8, !dbg !11330
  br label %return, !dbg !11330

if.else929:                                       ; preds = %sw.bb925
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod930, metadata !11331, metadata !DIExpression()), !dbg !11333
  %457 = load i32, i32* %mode, align 4, !dbg !11334
  %458 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11334
  %459 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11334
  %call931 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 58, i32 %457, %struct.rtx_def* %458, %struct.rtx_def* %459), !dbg !11334
  store %struct.rtx_def* %call931, %struct.rtx_def** %mod930, align 8, !dbg !11333
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adj932, metadata !11335, metadata !DIExpression()), !dbg !11336
  %460 = load i32, i32* %mode, align 4, !dbg !11337
  %461 = load %struct.rtx_def*, %struct.rtx_def** %mod930, align 8, !dbg !11338
  %462 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11339
  %call933 = call %struct.rtx_def* @floor_sdiv_adjust(i32 %460, %struct.rtx_def* %461, %struct.rtx_def* %462), !dbg !11340
  store %struct.rtx_def* %call933, %struct.rtx_def** %adj932, align 8, !dbg !11336
  %463 = load i32, i32* %mode, align 4, !dbg !11341
  %464 = load i32, i32* %mode, align 4, !dbg !11341
  %465 = load %struct.rtx_def*, %struct.rtx_def** %adj932, align 8, !dbg !11341
  %466 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11341
  %call934 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %464, %struct.rtx_def* %465, %struct.rtx_def* %466), !dbg !11341
  %call935 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 51, i32 %463, %struct.rtx_def* %call934), !dbg !11341
  store %struct.rtx_def* %call935, %struct.rtx_def** %adj932, align 8, !dbg !11342
  %467 = load i32, i32* %mode, align 4, !dbg !11343
  %468 = load %struct.rtx_def*, %struct.rtx_def** %mod930, align 8, !dbg !11343
  %469 = load %struct.rtx_def*, %struct.rtx_def** %adj932, align 8, !dbg !11343
  %call936 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %467, %struct.rtx_def* %468, %struct.rtx_def* %469), !dbg !11343
  store %struct.rtx_def* %call936, %struct.rtx_def** %retval, align 8, !dbg !11344
  br label %return, !dbg !11344

sw.bb937:                                         ; preds = %sw.epilog48
  %470 = load i32, i32* %unsignedp, align 4, !dbg !11345
  %tobool938 = icmp ne i32 %470, 0, !dbg !11345
  br i1 %tobool938, label %if.then939, label %if.else947, !dbg !11347

if.then939:                                       ; preds = %sw.bb937
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %div940, metadata !11348, metadata !DIExpression()), !dbg !11350
  %471 = load i32, i32* %mode, align 4, !dbg !11351
  %472 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11351
  %473 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11351
  %call941 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 59, i32 %471, %struct.rtx_def* %472, %struct.rtx_def* %473), !dbg !11351
  store %struct.rtx_def* %call941, %struct.rtx_def** %div940, align 8, !dbg !11350
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod942, metadata !11352, metadata !DIExpression()), !dbg !11353
  %474 = load i32, i32* %mode, align 4, !dbg !11354
  %475 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11354
  %476 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11354
  %call943 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 60, i32 %474, %struct.rtx_def* %475, %struct.rtx_def* %476), !dbg !11354
  store %struct.rtx_def* %call943, %struct.rtx_def** %mod942, align 8, !dbg !11353
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adj944, metadata !11355, metadata !DIExpression()), !dbg !11356
  %477 = load i32, i32* %mode, align 4, !dbg !11357
  %478 = load %struct.rtx_def*, %struct.rtx_def** %mod942, align 8, !dbg !11358
  %479 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11359
  %call945 = call %struct.rtx_def* @ceil_udiv_adjust(i32 %477, %struct.rtx_def* %478, %struct.rtx_def* %479), !dbg !11360
  store %struct.rtx_def* %call945, %struct.rtx_def** %adj944, align 8, !dbg !11356
  %480 = load i32, i32* %mode, align 4, !dbg !11361
  %481 = load %struct.rtx_def*, %struct.rtx_def** %div940, align 8, !dbg !11361
  %482 = load %struct.rtx_def*, %struct.rtx_def** %adj944, align 8, !dbg !11361
  %call946 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %480, %struct.rtx_def* %481, %struct.rtx_def* %482), !dbg !11361
  store %struct.rtx_def* %call946, %struct.rtx_def** %retval, align 8, !dbg !11362
  br label %return, !dbg !11362

if.else947:                                       ; preds = %sw.bb937
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %div948, metadata !11363, metadata !DIExpression()), !dbg !11365
  %483 = load i32, i32* %mode, align 4, !dbg !11366
  %484 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11366
  %485 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11366
  %call949 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 55, i32 %483, %struct.rtx_def* %484, %struct.rtx_def* %485), !dbg !11366
  store %struct.rtx_def* %call949, %struct.rtx_def** %div948, align 8, !dbg !11365
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod950, metadata !11367, metadata !DIExpression()), !dbg !11368
  %486 = load i32, i32* %mode, align 4, !dbg !11369
  %487 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11369
  %488 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11369
  %call951 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 58, i32 %486, %struct.rtx_def* %487, %struct.rtx_def* %488), !dbg !11369
  store %struct.rtx_def* %call951, %struct.rtx_def** %mod950, align 8, !dbg !11368
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adj952, metadata !11370, metadata !DIExpression()), !dbg !11371
  %489 = load i32, i32* %mode, align 4, !dbg !11372
  %490 = load %struct.rtx_def*, %struct.rtx_def** %mod950, align 8, !dbg !11373
  %491 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11374
  %call953 = call %struct.rtx_def* @ceil_sdiv_adjust(i32 %489, %struct.rtx_def* %490, %struct.rtx_def* %491), !dbg !11375
  store %struct.rtx_def* %call953, %struct.rtx_def** %adj952, align 8, !dbg !11371
  %492 = load i32, i32* %mode, align 4, !dbg !11376
  %493 = load %struct.rtx_def*, %struct.rtx_def** %div948, align 8, !dbg !11376
  %494 = load %struct.rtx_def*, %struct.rtx_def** %adj952, align 8, !dbg !11376
  %call954 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %492, %struct.rtx_def* %493, %struct.rtx_def* %494), !dbg !11376
  store %struct.rtx_def* %call954, %struct.rtx_def** %retval, align 8, !dbg !11377
  br label %return, !dbg !11377

sw.bb955:                                         ; preds = %sw.epilog48
  %495 = load i32, i32* %unsignedp, align 4, !dbg !11378
  %tobool956 = icmp ne i32 %495, 0, !dbg !11378
  br i1 %tobool956, label %if.then957, label %if.else965, !dbg !11380

if.then957:                                       ; preds = %sw.bb955
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod958, metadata !11381, metadata !DIExpression()), !dbg !11383
  %496 = load i32, i32* %mode, align 4, !dbg !11384
  %497 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11384
  %498 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11384
  %call959 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 60, i32 %496, %struct.rtx_def* %497, %struct.rtx_def* %498), !dbg !11384
  store %struct.rtx_def* %call959, %struct.rtx_def** %mod958, align 8, !dbg !11383
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adj960, metadata !11385, metadata !DIExpression()), !dbg !11386
  %499 = load i32, i32* %mode, align 4, !dbg !11387
  %500 = load %struct.rtx_def*, %struct.rtx_def** %mod958, align 8, !dbg !11388
  %501 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11389
  %call961 = call %struct.rtx_def* @ceil_udiv_adjust(i32 %499, %struct.rtx_def* %500, %struct.rtx_def* %501), !dbg !11390
  store %struct.rtx_def* %call961, %struct.rtx_def** %adj960, align 8, !dbg !11386
  %502 = load i32, i32* %mode, align 4, !dbg !11391
  %503 = load i32, i32* %mode, align 4, !dbg !11391
  %504 = load %struct.rtx_def*, %struct.rtx_def** %adj960, align 8, !dbg !11391
  %505 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11391
  %call962 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %503, %struct.rtx_def* %504, %struct.rtx_def* %505), !dbg !11391
  %call963 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 51, i32 %502, %struct.rtx_def* %call962), !dbg !11391
  store %struct.rtx_def* %call963, %struct.rtx_def** %adj960, align 8, !dbg !11392
  %506 = load i32, i32* %mode, align 4, !dbg !11393
  %507 = load %struct.rtx_def*, %struct.rtx_def** %mod958, align 8, !dbg !11393
  %508 = load %struct.rtx_def*, %struct.rtx_def** %adj960, align 8, !dbg !11393
  %call964 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %506, %struct.rtx_def* %507, %struct.rtx_def* %508), !dbg !11393
  store %struct.rtx_def* %call964, %struct.rtx_def** %retval, align 8, !dbg !11394
  br label %return, !dbg !11394

if.else965:                                       ; preds = %sw.bb955
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod966, metadata !11395, metadata !DIExpression()), !dbg !11397
  %509 = load i32, i32* %mode, align 4, !dbg !11398
  %510 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11398
  %511 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11398
  %call967 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 58, i32 %509, %struct.rtx_def* %510, %struct.rtx_def* %511), !dbg !11398
  store %struct.rtx_def* %call967, %struct.rtx_def** %mod966, align 8, !dbg !11397
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adj968, metadata !11399, metadata !DIExpression()), !dbg !11400
  %512 = load i32, i32* %mode, align 4, !dbg !11401
  %513 = load %struct.rtx_def*, %struct.rtx_def** %mod966, align 8, !dbg !11402
  %514 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11403
  %call969 = call %struct.rtx_def* @ceil_sdiv_adjust(i32 %512, %struct.rtx_def* %513, %struct.rtx_def* %514), !dbg !11404
  store %struct.rtx_def* %call969, %struct.rtx_def** %adj968, align 8, !dbg !11400
  %515 = load i32, i32* %mode, align 4, !dbg !11405
  %516 = load i32, i32* %mode, align 4, !dbg !11405
  %517 = load %struct.rtx_def*, %struct.rtx_def** %adj968, align 8, !dbg !11405
  %518 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11405
  %call970 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %516, %struct.rtx_def* %517, %struct.rtx_def* %518), !dbg !11405
  %call971 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 51, i32 %515, %struct.rtx_def* %call970), !dbg !11405
  store %struct.rtx_def* %call971, %struct.rtx_def** %adj968, align 8, !dbg !11406
  %519 = load i32, i32* %mode, align 4, !dbg !11407
  %520 = load %struct.rtx_def*, %struct.rtx_def** %mod966, align 8, !dbg !11407
  %521 = load %struct.rtx_def*, %struct.rtx_def** %adj968, align 8, !dbg !11407
  %call972 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %519, %struct.rtx_def* %520, %struct.rtx_def* %521), !dbg !11407
  store %struct.rtx_def* %call972, %struct.rtx_def** %retval, align 8, !dbg !11408
  br label %return, !dbg !11408

sw.bb973:                                         ; preds = %sw.epilog48
  %522 = load i32, i32* %unsignedp, align 4, !dbg !11409
  %tobool974 = icmp ne i32 %522, 0, !dbg !11409
  br i1 %tobool974, label %if.then975, label %if.else983, !dbg !11411

if.then975:                                       ; preds = %sw.bb973
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %div976, metadata !11412, metadata !DIExpression()), !dbg !11414
  %523 = load i32, i32* %mode, align 4, !dbg !11415
  %524 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11415
  %525 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11415
  %call977 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 59, i32 %523, %struct.rtx_def* %524, %struct.rtx_def* %525), !dbg !11415
  store %struct.rtx_def* %call977, %struct.rtx_def** %div976, align 8, !dbg !11414
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod978, metadata !11416, metadata !DIExpression()), !dbg !11417
  %526 = load i32, i32* %mode, align 4, !dbg !11418
  %527 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11418
  %528 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11418
  %call979 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 60, i32 %526, %struct.rtx_def* %527, %struct.rtx_def* %528), !dbg !11418
  store %struct.rtx_def* %call979, %struct.rtx_def** %mod978, align 8, !dbg !11417
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adj980, metadata !11419, metadata !DIExpression()), !dbg !11420
  %529 = load i32, i32* %mode, align 4, !dbg !11421
  %530 = load %struct.rtx_def*, %struct.rtx_def** %mod978, align 8, !dbg !11422
  %531 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11423
  %call981 = call %struct.rtx_def* @round_udiv_adjust(i32 %529, %struct.rtx_def* %530, %struct.rtx_def* %531), !dbg !11424
  store %struct.rtx_def* %call981, %struct.rtx_def** %adj980, align 8, !dbg !11420
  %532 = load i32, i32* %mode, align 4, !dbg !11425
  %533 = load %struct.rtx_def*, %struct.rtx_def** %div976, align 8, !dbg !11425
  %534 = load %struct.rtx_def*, %struct.rtx_def** %adj980, align 8, !dbg !11425
  %call982 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %532, %struct.rtx_def* %533, %struct.rtx_def* %534), !dbg !11425
  store %struct.rtx_def* %call982, %struct.rtx_def** %retval, align 8, !dbg !11426
  br label %return, !dbg !11426

if.else983:                                       ; preds = %sw.bb973
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %div984, metadata !11427, metadata !DIExpression()), !dbg !11429
  %535 = load i32, i32* %mode, align 4, !dbg !11430
  %536 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11430
  %537 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11430
  %call985 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 55, i32 %535, %struct.rtx_def* %536, %struct.rtx_def* %537), !dbg !11430
  store %struct.rtx_def* %call985, %struct.rtx_def** %div984, align 8, !dbg !11429
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod986, metadata !11431, metadata !DIExpression()), !dbg !11432
  %538 = load i32, i32* %mode, align 4, !dbg !11433
  %539 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11433
  %540 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11433
  %call987 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 58, i32 %538, %struct.rtx_def* %539, %struct.rtx_def* %540), !dbg !11433
  store %struct.rtx_def* %call987, %struct.rtx_def** %mod986, align 8, !dbg !11432
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adj988, metadata !11434, metadata !DIExpression()), !dbg !11435
  %541 = load i32, i32* %mode, align 4, !dbg !11436
  %542 = load %struct.rtx_def*, %struct.rtx_def** %mod986, align 8, !dbg !11437
  %543 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11438
  %call989 = call %struct.rtx_def* @round_sdiv_adjust(i32 %541, %struct.rtx_def* %542, %struct.rtx_def* %543), !dbg !11439
  store %struct.rtx_def* %call989, %struct.rtx_def** %adj988, align 8, !dbg !11435
  %544 = load i32, i32* %mode, align 4, !dbg !11440
  %545 = load %struct.rtx_def*, %struct.rtx_def** %div984, align 8, !dbg !11440
  %546 = load %struct.rtx_def*, %struct.rtx_def** %adj988, align 8, !dbg !11440
  %call990 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %544, %struct.rtx_def* %545, %struct.rtx_def* %546), !dbg !11440
  store %struct.rtx_def* %call990, %struct.rtx_def** %retval, align 8, !dbg !11441
  br label %return, !dbg !11441

sw.bb991:                                         ; preds = %sw.epilog48
  %547 = load i32, i32* %unsignedp, align 4, !dbg !11442
  %tobool992 = icmp ne i32 %547, 0, !dbg !11442
  br i1 %tobool992, label %if.then993, label %if.else1001, !dbg !11444

if.then993:                                       ; preds = %sw.bb991
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod994, metadata !11445, metadata !DIExpression()), !dbg !11447
  %548 = load i32, i32* %mode, align 4, !dbg !11448
  %549 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11448
  %550 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11448
  %call995 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 60, i32 %548, %struct.rtx_def* %549, %struct.rtx_def* %550), !dbg !11448
  store %struct.rtx_def* %call995, %struct.rtx_def** %mod994, align 8, !dbg !11447
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adj996, metadata !11449, metadata !DIExpression()), !dbg !11450
  %551 = load i32, i32* %mode, align 4, !dbg !11451
  %552 = load %struct.rtx_def*, %struct.rtx_def** %mod994, align 8, !dbg !11452
  %553 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11453
  %call997 = call %struct.rtx_def* @round_udiv_adjust(i32 %551, %struct.rtx_def* %552, %struct.rtx_def* %553), !dbg !11454
  store %struct.rtx_def* %call997, %struct.rtx_def** %adj996, align 8, !dbg !11450
  %554 = load i32, i32* %mode, align 4, !dbg !11455
  %555 = load i32, i32* %mode, align 4, !dbg !11455
  %556 = load %struct.rtx_def*, %struct.rtx_def** %adj996, align 8, !dbg !11455
  %557 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11455
  %call998 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %555, %struct.rtx_def* %556, %struct.rtx_def* %557), !dbg !11455
  %call999 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 51, i32 %554, %struct.rtx_def* %call998), !dbg !11455
  store %struct.rtx_def* %call999, %struct.rtx_def** %adj996, align 8, !dbg !11456
  %558 = load i32, i32* %mode, align 4, !dbg !11457
  %559 = load %struct.rtx_def*, %struct.rtx_def** %mod994, align 8, !dbg !11457
  %560 = load %struct.rtx_def*, %struct.rtx_def** %adj996, align 8, !dbg !11457
  %call1000 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %558, %struct.rtx_def* %559, %struct.rtx_def* %560), !dbg !11457
  store %struct.rtx_def* %call1000, %struct.rtx_def** %retval, align 8, !dbg !11458
  br label %return, !dbg !11458

if.else1001:                                      ; preds = %sw.bb991
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod1002, metadata !11459, metadata !DIExpression()), !dbg !11461
  %561 = load i32, i32* %mode, align 4, !dbg !11462
  %562 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11462
  %563 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11462
  %call1003 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 58, i32 %561, %struct.rtx_def* %562, %struct.rtx_def* %563), !dbg !11462
  store %struct.rtx_def* %call1003, %struct.rtx_def** %mod1002, align 8, !dbg !11461
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adj1004, metadata !11463, metadata !DIExpression()), !dbg !11464
  %564 = load i32, i32* %mode, align 4, !dbg !11465
  %565 = load %struct.rtx_def*, %struct.rtx_def** %mod1002, align 8, !dbg !11466
  %566 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11467
  %call1005 = call %struct.rtx_def* @round_sdiv_adjust(i32 %564, %struct.rtx_def* %565, %struct.rtx_def* %566), !dbg !11468
  store %struct.rtx_def* %call1005, %struct.rtx_def** %adj1004, align 8, !dbg !11464
  %567 = load i32, i32* %mode, align 4, !dbg !11469
  %568 = load i32, i32* %mode, align 4, !dbg !11469
  %569 = load %struct.rtx_def*, %struct.rtx_def** %adj1004, align 8, !dbg !11469
  %570 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11469
  %call1006 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %568, %struct.rtx_def* %569, %struct.rtx_def* %570), !dbg !11469
  %call1007 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 51, i32 %567, %struct.rtx_def* %call1006), !dbg !11469
  store %struct.rtx_def* %call1007, %struct.rtx_def** %adj1004, align 8, !dbg !11470
  %571 = load i32, i32* %mode, align 4, !dbg !11471
  %572 = load %struct.rtx_def*, %struct.rtx_def** %mod1002, align 8, !dbg !11471
  %573 = load %struct.rtx_def*, %struct.rtx_def** %adj1004, align 8, !dbg !11471
  %call1008 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %571, %struct.rtx_def* %572, %struct.rtx_def* %573), !dbg !11471
  store %struct.rtx_def* %call1008, %struct.rtx_def** %retval, align 8, !dbg !11472
  br label %return, !dbg !11472

sw.bb1009:                                        ; preds = %sw.epilog48
  %574 = load i32, i32* %mode, align 4, !dbg !11473
  %575 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11473
  %576 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11473
  %call1010 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 65, i32 %574, %struct.rtx_def* %575, %struct.rtx_def* %576), !dbg !11473
  store %struct.rtx_def* %call1010, %struct.rtx_def** %retval, align 8, !dbg !11474
  br label %return, !dbg !11474

sw.bb1011:                                        ; preds = %sw.epilog48
  %577 = load i32, i32* %unsignedp, align 4, !dbg !11475
  %tobool1012 = icmp ne i32 %577, 0, !dbg !11475
  br i1 %tobool1012, label %if.then1013, label %if.else1015, !dbg !11477

if.then1013:                                      ; preds = %sw.bb1011
  %578 = load i32, i32* %mode, align 4, !dbg !11478
  %579 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11478
  %580 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11478
  %call1014 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 68, i32 %578, %struct.rtx_def* %579, %struct.rtx_def* %580), !dbg !11478
  store %struct.rtx_def* %call1014, %struct.rtx_def** %retval, align 8, !dbg !11479
  br label %return, !dbg !11479

if.else1015:                                      ; preds = %sw.bb1011
  %581 = load i32, i32* %mode, align 4, !dbg !11480
  %582 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11480
  %583 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11480
  %call1016 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 67, i32 %581, %struct.rtx_def* %582, %struct.rtx_def* %583), !dbg !11480
  store %struct.rtx_def* %call1016, %struct.rtx_def** %retval, align 8, !dbg !11481
  br label %return, !dbg !11481

sw.bb1017:                                        ; preds = %sw.epilog48
  %584 = load i32, i32* %mode, align 4, !dbg !11482
  %585 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11482
  %586 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11482
  %call1018 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 66, i32 %584, %struct.rtx_def* %585, %struct.rtx_def* %586), !dbg !11482
  store %struct.rtx_def* %call1018, %struct.rtx_def** %retval, align 8, !dbg !11483
  br label %return, !dbg !11483

sw.bb1019:                                        ; preds = %sw.epilog48
  %587 = load i32, i32* %mode, align 4, !dbg !11484
  %588 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11484
  %589 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11484
  %call1020 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 69, i32 %587, %struct.rtx_def* %588, %struct.rtx_def* %589), !dbg !11484
  store %struct.rtx_def* %call1020, %struct.rtx_def** %retval, align 8, !dbg !11485
  br label %return, !dbg !11485

sw.bb1021:                                        ; preds = %sw.epilog48
  %590 = load i32, i32* %unsignedp, align 4, !dbg !11486
  %tobool1022 = icmp ne i32 %590, 0, !dbg !11486
  br i1 %tobool1022, label %if.then1023, label %if.else1025, !dbg !11488

if.then1023:                                      ; preds = %sw.bb1021
  %591 = load i32, i32* %mode, align 4, !dbg !11489
  %592 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11489
  %593 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11489
  %call1024 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 72, i32 %591, %struct.rtx_def* %592, %struct.rtx_def* %593), !dbg !11489
  store %struct.rtx_def* %call1024, %struct.rtx_def** %retval, align 8, !dbg !11490
  br label %return, !dbg !11490

if.else1025:                                      ; preds = %sw.bb1021
  %594 = load i32, i32* %mode, align 4, !dbg !11491
  %595 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11491
  %596 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11491
  %call1026 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 70, i32 %594, %struct.rtx_def* %595, %struct.rtx_def* %596), !dbg !11491
  store %struct.rtx_def* %call1026, %struct.rtx_def** %retval, align 8, !dbg !11492
  br label %return, !dbg !11492

sw.bb1027:                                        ; preds = %sw.epilog48
  %597 = load i32, i32* %unsignedp, align 4, !dbg !11493
  %tobool1028 = icmp ne i32 %597, 0, !dbg !11493
  br i1 %tobool1028, label %if.then1029, label %if.else1031, !dbg !11495

if.then1029:                                      ; preds = %sw.bb1027
  %598 = load i32, i32* %mode, align 4, !dbg !11496
  %599 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11496
  %600 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11496
  %call1030 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 73, i32 %598, %struct.rtx_def* %599, %struct.rtx_def* %600), !dbg !11496
  store %struct.rtx_def* %call1030, %struct.rtx_def** %retval, align 8, !dbg !11497
  br label %return, !dbg !11497

if.else1031:                                      ; preds = %sw.bb1027
  %601 = load i32, i32* %mode, align 4, !dbg !11498
  %602 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11498
  %603 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11498
  %call1032 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 71, i32 %601, %struct.rtx_def* %602, %struct.rtx_def* %603), !dbg !11498
  store %struct.rtx_def* %call1032, %struct.rtx_def** %retval, align 8, !dbg !11499
  br label %return, !dbg !11499

sw.bb1033:                                        ; preds = %sw.epilog48, %sw.epilog48
  %604 = load i32, i32* %mode, align 4, !dbg !11500
  %605 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11500
  %606 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11500
  %call1034 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 61, i32 %604, %struct.rtx_def* %605, %struct.rtx_def* %606), !dbg !11500
  store %struct.rtx_def* %call1034, %struct.rtx_def** %retval, align 8, !dbg !11501
  br label %return, !dbg !11501

sw.bb1035:                                        ; preds = %sw.epilog48, %sw.epilog48
  %607 = load i32, i32* %mode, align 4, !dbg !11502
  %608 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11502
  %609 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11502
  %call1036 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 62, i32 %607, %struct.rtx_def* %608, %struct.rtx_def* %609), !dbg !11502
  store %struct.rtx_def* %call1036, %struct.rtx_def** %retval, align 8, !dbg !11503
  br label %return, !dbg !11503

sw.bb1037:                                        ; preds = %sw.epilog48, %sw.epilog48
  %610 = load i32, i32* %mode, align 4, !dbg !11504
  %611 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11504
  %612 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11504
  %call1038 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 63, i32 %610, %struct.rtx_def* %611, %struct.rtx_def* %612), !dbg !11504
  store %struct.rtx_def* %call1038, %struct.rtx_def** %retval, align 8, !dbg !11505
  br label %return, !dbg !11505

sw.bb1039:                                        ; preds = %sw.epilog48
  %613 = load i32, i32* %mode, align 4, !dbg !11506
  %614 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11506
  %615 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11506
  %616 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11506
  %call1040 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %613, %struct.rtx_def* %614, %struct.rtx_def* %615, %struct.rtx_def* %616), !dbg !11506
  store %struct.rtx_def* %call1040, %struct.rtx_def** %retval, align 8, !dbg !11507
  br label %return, !dbg !11507

sw.bb1041:                                        ; preds = %sw.epilog48
  %617 = load i32, i32* %mode, align 4, !dbg !11508
  %618 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11508
  %619 = load %struct.rtx_def*, %struct.rtx_def** @const_true_rtx, align 8, !dbg !11508
  %620 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11508
  %call1042 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %617, %struct.rtx_def* %618, %struct.rtx_def* %619, %struct.rtx_def* %620), !dbg !11508
  store %struct.rtx_def* %call1042, %struct.rtx_def** %retval, align 8, !dbg !11509
  br label %return, !dbg !11509

sw.bb1043:                                        ; preds = %sw.epilog48
  %621 = load i32, i32* %mode, align 4, !dbg !11510
  %622 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11510
  %623 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11510
  %call1044 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 81, i32 %621, %struct.rtx_def* %622, %struct.rtx_def* %623), !dbg !11510
  store %struct.rtx_def* %call1044, %struct.rtx_def** %retval, align 8, !dbg !11511
  br label %return, !dbg !11511

sw.bb1045:                                        ; preds = %sw.epilog48
  %624 = load i32, i32* %unsignedp, align 4, !dbg !11512
  %tobool1046 = icmp ne i32 %624, 0, !dbg !11512
  br i1 %tobool1046, label %if.then1047, label %if.else1049, !dbg !11514

if.then1047:                                      ; preds = %sw.bb1045
  %625 = load i32, i32* %mode, align 4, !dbg !11515
  %626 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11515
  %627 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11515
  %call1048 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 89, i32 %625, %struct.rtx_def* %626, %struct.rtx_def* %627), !dbg !11515
  store %struct.rtx_def* %call1048, %struct.rtx_def** %retval, align 8, !dbg !11516
  br label %return, !dbg !11516

if.else1049:                                      ; preds = %sw.bb1045
  %628 = load i32, i32* %mode, align 4, !dbg !11517
  %629 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11517
  %630 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11517
  %call1050 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 85, i32 %628, %struct.rtx_def* %629, %struct.rtx_def* %630), !dbg !11517
  store %struct.rtx_def* %call1050, %struct.rtx_def** %retval, align 8, !dbg !11518
  br label %return, !dbg !11518

sw.bb1051:                                        ; preds = %sw.epilog48
  %631 = load i32, i32* %unsignedp, align 4, !dbg !11519
  %tobool1052 = icmp ne i32 %631, 0, !dbg !11519
  br i1 %tobool1052, label %if.then1053, label %if.else1055, !dbg !11521

if.then1053:                                      ; preds = %sw.bb1051
  %632 = load i32, i32* %mode, align 4, !dbg !11522
  %633 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11522
  %634 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11522
  %call1054 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 88, i32 %632, %struct.rtx_def* %633, %struct.rtx_def* %634), !dbg !11522
  store %struct.rtx_def* %call1054, %struct.rtx_def** %retval, align 8, !dbg !11523
  br label %return, !dbg !11523

if.else1055:                                      ; preds = %sw.bb1051
  %635 = load i32, i32* %mode, align 4, !dbg !11524
  %636 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11524
  %637 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11524
  %call1056 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 84, i32 %635, %struct.rtx_def* %636, %struct.rtx_def* %637), !dbg !11524
  store %struct.rtx_def* %call1056, %struct.rtx_def** %retval, align 8, !dbg !11525
  br label %return, !dbg !11525

sw.bb1057:                                        ; preds = %sw.epilog48
  %638 = load i32, i32* %unsignedp, align 4, !dbg !11526
  %tobool1058 = icmp ne i32 %638, 0, !dbg !11526
  br i1 %tobool1058, label %if.then1059, label %if.else1061, !dbg !11528

if.then1059:                                      ; preds = %sw.bb1057
  %639 = load i32, i32* %mode, align 4, !dbg !11529
  %640 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11529
  %641 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11529
  %call1060 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 87, i32 %639, %struct.rtx_def* %640, %struct.rtx_def* %641), !dbg !11529
  store %struct.rtx_def* %call1060, %struct.rtx_def** %retval, align 8, !dbg !11530
  br label %return, !dbg !11530

if.else1061:                                      ; preds = %sw.bb1057
  %642 = load i32, i32* %mode, align 4, !dbg !11531
  %643 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11531
  %644 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11531
  %call1062 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 83, i32 %642, %struct.rtx_def* %643, %struct.rtx_def* %644), !dbg !11531
  store %struct.rtx_def* %call1062, %struct.rtx_def** %retval, align 8, !dbg !11532
  br label %return, !dbg !11532

sw.bb1063:                                        ; preds = %sw.epilog48
  %645 = load i32, i32* %unsignedp, align 4, !dbg !11533
  %tobool1064 = icmp ne i32 %645, 0, !dbg !11533
  br i1 %tobool1064, label %if.then1065, label %if.else1067, !dbg !11535

if.then1065:                                      ; preds = %sw.bb1063
  %646 = load i32, i32* %mode, align 4, !dbg !11536
  %647 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11536
  %648 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11536
  %call1066 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 86, i32 %646, %struct.rtx_def* %647, %struct.rtx_def* %648), !dbg !11536
  store %struct.rtx_def* %call1066, %struct.rtx_def** %retval, align 8, !dbg !11537
  br label %return, !dbg !11537

if.else1067:                                      ; preds = %sw.bb1063
  %649 = load i32, i32* %mode, align 4, !dbg !11538
  %650 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11538
  %651 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11538
  %call1068 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 82, i32 %649, %struct.rtx_def* %650, %struct.rtx_def* %651), !dbg !11538
  store %struct.rtx_def* %call1068, %struct.rtx_def** %retval, align 8, !dbg !11539
  br label %return, !dbg !11539

sw.bb1069:                                        ; preds = %sw.epilog48
  %652 = load i32, i32* %mode, align 4, !dbg !11540
  %653 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11540
  %654 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11540
  %call1070 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 81, i32 %652, %struct.rtx_def* %653, %struct.rtx_def* %654), !dbg !11540
  store %struct.rtx_def* %call1070, %struct.rtx_def** %retval, align 8, !dbg !11541
  br label %return, !dbg !11541

sw.bb1071:                                        ; preds = %sw.epilog48
  %655 = load i32, i32* %mode, align 4, !dbg !11542
  %656 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11542
  %657 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11542
  %call1072 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 80, i32 %655, %struct.rtx_def* %656, %struct.rtx_def* %657), !dbg !11542
  store %struct.rtx_def* %call1072, %struct.rtx_def** %retval, align 8, !dbg !11543
  br label %return, !dbg !11543

sw.bb1073:                                        ; preds = %sw.epilog48
  %658 = load i32, i32* %mode, align 4, !dbg !11544
  %659 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11544
  %660 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11544
  %call1074 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 90, i32 %658, %struct.rtx_def* %659, %struct.rtx_def* %660), !dbg !11544
  store %struct.rtx_def* %call1074, %struct.rtx_def** %retval, align 8, !dbg !11545
  br label %return, !dbg !11545

sw.bb1075:                                        ; preds = %sw.epilog48
  %661 = load i32, i32* %mode, align 4, !dbg !11546
  %662 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11546
  %663 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11546
  %call1076 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 91, i32 %661, %struct.rtx_def* %662, %struct.rtx_def* %663), !dbg !11546
  store %struct.rtx_def* %call1076, %struct.rtx_def** %retval, align 8, !dbg !11547
  br label %return, !dbg !11547

sw.bb1077:                                        ; preds = %sw.epilog48
  %664 = load i32, i32* %mode, align 4, !dbg !11548
  %665 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11548
  %666 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11548
  %call1078 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 96, i32 %664, %struct.rtx_def* %665, %struct.rtx_def* %666), !dbg !11548
  store %struct.rtx_def* %call1078, %struct.rtx_def** %retval, align 8, !dbg !11549
  br label %return, !dbg !11549

sw.bb1079:                                        ; preds = %sw.epilog48
  %667 = load i32, i32* %mode, align 4, !dbg !11550
  %668 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11550
  %669 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11550
  %call1080 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 95, i32 %667, %struct.rtx_def* %668, %struct.rtx_def* %669), !dbg !11550
  store %struct.rtx_def* %call1080, %struct.rtx_def** %retval, align 8, !dbg !11551
  br label %return, !dbg !11551

sw.bb1081:                                        ; preds = %sw.epilog48
  %670 = load i32, i32* %mode, align 4, !dbg !11552
  %671 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11552
  %672 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11552
  %call1082 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 94, i32 %670, %struct.rtx_def* %671, %struct.rtx_def* %672), !dbg !11552
  store %struct.rtx_def* %call1082, %struct.rtx_def** %retval, align 8, !dbg !11553
  br label %return, !dbg !11553

sw.bb1083:                                        ; preds = %sw.epilog48
  %673 = load i32, i32* %mode, align 4, !dbg !11554
  %674 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11554
  %675 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11554
  %call1084 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 93, i32 %673, %struct.rtx_def* %674, %struct.rtx_def* %675), !dbg !11554
  store %struct.rtx_def* %call1084, %struct.rtx_def** %retval, align 8, !dbg !11555
  br label %return, !dbg !11555

sw.bb1085:                                        ; preds = %sw.epilog48
  %676 = load i32, i32* %mode, align 4, !dbg !11556
  %677 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11556
  %678 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11556
  %call1086 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 92, i32 %676, %struct.rtx_def* %677, %struct.rtx_def* %678), !dbg !11556
  store %struct.rtx_def* %call1086, %struct.rtx_def** %retval, align 8, !dbg !11557
  br label %return, !dbg !11557

sw.bb1087:                                        ; preds = %sw.epilog48
  %679 = load i32, i32* %mode, align 4, !dbg !11558
  %680 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11558
  %681 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11558
  %call1088 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 97, i32 %679, %struct.rtx_def* %680, %struct.rtx_def* %681), !dbg !11558
  store %struct.rtx_def* %call1088, %struct.rtx_def** %retval, align 8, !dbg !11559
  br label %return, !dbg !11559

sw.bb1089:                                        ; preds = %sw.epilog48
  %682 = load i32, i32* %mode, align 4, !dbg !11560
  %683 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11560
  %684 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11560
  %685 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8, !dbg !11560
  %call1090 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %682, %struct.rtx_def* %683, %struct.rtx_def* %684, %struct.rtx_def* %685), !dbg !11560
  store %struct.rtx_def* %call1090, %struct.rtx_def** %retval, align 8, !dbg !11561
  br label %return, !dbg !11561

sw.bb1091:                                        ; preds = %sw.epilog48
  %686 = load i32, i32* %mode, align 4, !dbg !11562
  %idxprom1092 = zext i32 %686 to i64, !dbg !11562
  %arrayidx1093 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1092, !dbg !11562
  %687 = load i8, i8* %arrayidx1093, align 1, !dbg !11562
  %conv1094 = zext i8 %687 to i32, !dbg !11562
  %cmp1095 = icmp eq i32 %conv1094, 10, !dbg !11562
  br i1 %cmp1095, label %cond.false1104, label %lor.lhs.false1097, !dbg !11562

lor.lhs.false1097:                                ; preds = %sw.bb1091
  %688 = load i32, i32* %mode, align 4, !dbg !11562
  %idxprom1098 = zext i32 %688 to i64, !dbg !11562
  %arrayidx1099 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1098, !dbg !11562
  %689 = load i8, i8* %arrayidx1099, align 1, !dbg !11562
  %conv1100 = zext i8 %689 to i32, !dbg !11562
  %cmp1101 = icmp eq i32 %conv1100, 11, !dbg !11562
  br i1 %cmp1101, label %cond.false1104, label %cond.true1103, !dbg !11562

cond.true1103:                                    ; preds = %lor.lhs.false1097
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 2840, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11562
  br label %cond.end1105, !dbg !11562

cond.false1104:                                   ; preds = %lor.lhs.false1097, %sw.bb1091
  br label %cond.end1105, !dbg !11562

cond.end1105:                                     ; preds = %cond.false1104, %cond.true1103
  %cond1106 = phi i32 [ 0, %cond.true1103 ], [ 0, %cond.false1104 ], !dbg !11562
  %690 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11563
  %691 = bitcast %struct.rtx_def* %690 to i32*, !dbg !11563
  %bf.load1107 = load i32, i32* %691, align 8, !dbg !11563
  %bf.lshr1108 = lshr i32 %bf.load1107, 16, !dbg !11563
  %bf.clear1109 = and i32 %bf.lshr1108, 255, !dbg !11563
  %cmp1110 = icmp eq i32 %bf.clear1109, 0, !dbg !11565
  br i1 %cmp1110, label %if.then1112, label %if.end1117, !dbg !11566

if.then1112:                                      ; preds = %cond.end1105
  %692 = load i32, i32* %mode, align 4, !dbg !11567
  %idxprom1113 = zext i32 %692 to i64, !dbg !11567
  %arrayidx1114 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1113, !dbg !11567
  %693 = load i8, i8* %arrayidx1114, align 1, !dbg !11567
  %conv1115 = zext i8 %693 to i32, !dbg !11567
  %694 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11567
  %call1116 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 35, i32 %conv1115, %struct.rtx_def* %694), !dbg !11567
  store %struct.rtx_def* %call1116, %struct.rtx_def** %op0, align 8, !dbg !11568
  br label %if.end1117, !dbg !11569

if.end1117:                                       ; preds = %if.then1112, %cond.end1105
  %695 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11570
  %696 = bitcast %struct.rtx_def* %695 to i32*, !dbg !11570
  %bf.load1118 = load i32, i32* %696, align 8, !dbg !11570
  %bf.lshr1119 = lshr i32 %bf.load1118, 16, !dbg !11570
  %bf.clear1120 = and i32 %bf.lshr1119, 255, !dbg !11570
  %cmp1121 = icmp eq i32 %bf.clear1120, 0, !dbg !11572
  br i1 %cmp1121, label %if.then1123, label %if.end1128, !dbg !11573

if.then1123:                                      ; preds = %if.end1117
  %697 = load i32, i32* %mode, align 4, !dbg !11574
  %idxprom1124 = zext i32 %697 to i64, !dbg !11574
  %arrayidx1125 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1124, !dbg !11574
  %698 = load i8, i8* %arrayidx1125, align 1, !dbg !11574
  %conv1126 = zext i8 %698 to i32, !dbg !11574
  %699 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11574
  %call1127 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 35, i32 %conv1126, %struct.rtx_def* %699), !dbg !11574
  store %struct.rtx_def* %call1127, %struct.rtx_def** %op1, align 8, !dbg !11575
  br label %if.end1128, !dbg !11576

if.end1128:                                       ; preds = %if.then1123, %if.end1117
  %700 = load i32, i32* %mode, align 4, !dbg !11577
  %701 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11577
  %702 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11577
  %call1129 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 41, i32 %700, %struct.rtx_def* %701, %struct.rtx_def* %702), !dbg !11577
  store %struct.rtx_def* %call1129, %struct.rtx_def** %retval, align 8, !dbg !11578
  br label %return, !dbg !11578

sw.bb1130:                                        ; preds = %sw.epilog48
  %703 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11579
  %704 = bitcast %struct.rtx_def* %703 to i32*, !dbg !11579
  %bf.load1131 = load i32, i32* %704, align 8, !dbg !11579
  %bf.clear1132 = and i32 %bf.load1131, 65535, !dbg !11579
  %cmp1133 = icmp eq i32 %bf.clear1132, 41, !dbg !11581
  br i1 %cmp1133, label %if.then1135, label %if.else1149, !dbg !11582

if.then1135:                                      ; preds = %sw.bb1130
  %705 = load i32, i32* %mode, align 4, !dbg !11583
  %706 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11583
  %u1136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %706, i32 0, i32 1, !dbg !11583
  %fld1137 = bitcast %union.u* %u1136 to [1 x %union.rtunion_def]*, !dbg !11583
  %arrayidx1138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1137, i64 0, i64 0, !dbg !11583
  %rt_rtx1139 = bitcast %union.rtunion_def* %arrayidx1138 to %struct.rtx_def**, !dbg !11583
  %707 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx1139, align 8, !dbg !11583
  %708 = load i32, i32* %mode, align 4, !dbg !11583
  %idxprom1140 = zext i32 %708 to i64, !dbg !11583
  %arrayidx1141 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1140, !dbg !11583
  %709 = load i8, i8* %arrayidx1141, align 1, !dbg !11583
  %conv1142 = zext i8 %709 to i32, !dbg !11583
  %710 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11583
  %u1143 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %710, i32 0, i32 1, !dbg !11583
  %fld1144 = bitcast %union.u* %u1143 to [1 x %union.rtunion_def]*, !dbg !11583
  %arrayidx1145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1144, i64 0, i64 1, !dbg !11583
  %rt_rtx1146 = bitcast %union.rtunion_def* %arrayidx1145 to %struct.rtx_def**, !dbg !11583
  %711 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx1146, align 8, !dbg !11583
  %call1147 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 51, i32 %conv1142, %struct.rtx_def* %711), !dbg !11583
  %call1148 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 41, i32 %705, %struct.rtx_def* %707, %struct.rtx_def* %call1147), !dbg !11583
  store %struct.rtx_def* %call1148, %struct.rtx_def** %retval, align 8, !dbg !11584
  br label %return, !dbg !11584

if.else1149:                                      ; preds = %sw.bb1130
  call void @llvm.dbg.declare(metadata i32* %imode, metadata !11585, metadata !DIExpression()), !dbg !11587
  %712 = load i32, i32* %mode, align 4, !dbg !11588
  %idxprom1150 = zext i32 %712 to i64, !dbg !11588
  %arrayidx1151 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1150, !dbg !11588
  %713 = load i8, i8* %arrayidx1151, align 1, !dbg !11588
  %conv1152 = zext i8 %713 to i32, !dbg !11588
  store i32 %conv1152, i32* %imode, align 4, !dbg !11587
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %re, metadata !11589, metadata !DIExpression()), !dbg !11590
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %im, metadata !11591, metadata !DIExpression()), !dbg !11592
  %714 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11593
  %715 = bitcast %struct.rtx_def* %714 to i32*, !dbg !11593
  %bf.load1153 = load i32, i32* %715, align 8, !dbg !11593
  %bf.clear1154 = and i32 %bf.load1153, 65535, !dbg !11593
  %cmp1155 = icmp eq i32 %bf.clear1154, 43, !dbg !11593
  br i1 %cmp1155, label %if.then1157, label %if.else1164, !dbg !11595

if.then1157:                                      ; preds = %if.else1149
  %716 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11596
  %717 = load i32, i32* %imode, align 4, !dbg !11596
  %call1158 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %716, i32 %717, i64 0, i32 0, i32 1), !dbg !11596
  store %struct.rtx_def* %call1158, %struct.rtx_def** %re, align 8, !dbg !11598
  %718 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11599
  %719 = load i32, i32* %imode, align 4, !dbg !11599
  %720 = load i32, i32* %imode, align 4, !dbg !11599
  %idxprom1159 = zext i32 %720 to i64, !dbg !11599
  %arrayidx1160 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom1159, !dbg !11599
  %721 = load i8, i8* %arrayidx1160, align 1, !dbg !11599
  %conv1161 = zext i8 %721 to i16, !dbg !11599
  %conv1162 = zext i16 %conv1161 to i64, !dbg !11599
  %call1163 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %718, i32 %719, i64 %conv1162, i32 0, i32 1), !dbg !11599
  store %struct.rtx_def* %call1163, %struct.rtx_def** %im, align 8, !dbg !11600
  br label %if.end1205, !dbg !11601

if.else1164:                                      ; preds = %if.else1149
  call void @llvm.dbg.declare(metadata i32* %ifmode, metadata !11602, metadata !DIExpression()), !dbg !11604
  %722 = load i32, i32* %mode, align 4, !dbg !11605
  %call1165 = call i32 @int_mode_for_mode(i32 %722), !dbg !11606
  store i32 %call1165, i32* %ifmode, align 4, !dbg !11604
  call void @llvm.dbg.declare(metadata i32* %ihmode, metadata !11607, metadata !DIExpression()), !dbg !11608
  %723 = load i32, i32* %imode, align 4, !dbg !11609
  %call1166 = call i32 @int_mode_for_mode(i32 %723), !dbg !11610
  store i32 %call1166, i32* %ihmode, align 4, !dbg !11608
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %halfsize, metadata !11611, metadata !DIExpression()), !dbg !11612
  %724 = load i32, i32* %ifmode, align 4, !dbg !11613
  %cmp1167 = icmp eq i32 %724, 1, !dbg !11615
  br i1 %cmp1167, label %if.then1172, label %lor.lhs.false1169, !dbg !11616

lor.lhs.false1169:                                ; preds = %if.else1164
  %725 = load i32, i32* %ihmode, align 4, !dbg !11617
  %cmp1170 = icmp eq i32 %725, 1, !dbg !11618
  br i1 %cmp1170, label %if.then1172, label %if.end1173, !dbg !11619

if.then1172:                                      ; preds = %lor.lhs.false1169, %if.else1164
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11620
  br label %return, !dbg !11620

if.end1173:                                       ; preds = %lor.lhs.false1169
  %726 = load i32, i32* %ihmode, align 4, !dbg !11621
  %idxprom1174 = zext i32 %726 to i64, !dbg !11621
  %arrayidx1175 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom1174, !dbg !11621
  %727 = load i8, i8* %arrayidx1175, align 1, !dbg !11621
  %conv1176 = zext i8 %727 to i16, !dbg !11621
  %conv1177 = zext i16 %conv1176 to i32, !dbg !11621
  %mul1178 = mul nsw i32 %conv1177, 8, !dbg !11621
  %conv1179 = trunc i32 %mul1178 to i16, !dbg !11621
  %conv1180 = zext i16 %conv1179 to i64, !dbg !11621
  %call1181 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv1180), !dbg !11621
  store %struct.rtx_def* %call1181, %struct.rtx_def** %halfsize, align 8, !dbg !11622
  %728 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11623
  store %struct.rtx_def* %728, %struct.rtx_def** %re, align 8, !dbg !11624
  %729 = load i32, i32* %mode, align 4, !dbg !11625
  %730 = load i32, i32* %ifmode, align 4, !dbg !11627
  %cmp1182 = icmp ne i32 %729, %730, !dbg !11628
  br i1 %cmp1182, label %if.then1184, label %if.end1186, !dbg !11629

if.then1184:                                      ; preds = %if.end1173
  %731 = load i32, i32* %ifmode, align 4, !dbg !11630
  %732 = load %struct.rtx_def*, %struct.rtx_def** %re, align 8, !dbg !11631
  %call1185 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %731, %struct.rtx_def* %732, i32 0), !dbg !11632
  store %struct.rtx_def* %call1185, %struct.rtx_def** %re, align 8, !dbg !11633
  br label %if.end1186, !dbg !11634

if.end1186:                                       ; preds = %if.then1184, %if.end1173
  %733 = load i32, i32* %ihmode, align 4, !dbg !11635
  %734 = load %struct.rtx_def*, %struct.rtx_def** %re, align 8, !dbg !11635
  %735 = load %struct.rtx_def*, %struct.rtx_def** %halfsize, align 8, !dbg !11635
  %736 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11635
  %call1187 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 120, i32 %733, %struct.rtx_def* %734, %struct.rtx_def* %735, %struct.rtx_def* %736), !dbg !11635
  store %struct.rtx_def* %call1187, %struct.rtx_def** %re, align 8, !dbg !11636
  %737 = load i32, i32* %imode, align 4, !dbg !11637
  %738 = load i32, i32* %ihmode, align 4, !dbg !11639
  %cmp1188 = icmp ne i32 %737, %738, !dbg !11640
  br i1 %cmp1188, label %if.then1190, label %if.end1192, !dbg !11641

if.then1190:                                      ; preds = %if.end1186
  %739 = load i32, i32* %imode, align 4, !dbg !11642
  %740 = load %struct.rtx_def*, %struct.rtx_def** %re, align 8, !dbg !11643
  %call1191 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %739, %struct.rtx_def* %740, i32 0), !dbg !11644
  store %struct.rtx_def* %call1191, %struct.rtx_def** %re, align 8, !dbg !11645
  br label %if.end1192, !dbg !11646

if.end1192:                                       ; preds = %if.then1190, %if.end1186
  %741 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11647
  %call1193 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %741), !dbg !11648
  store %struct.rtx_def* %call1193, %struct.rtx_def** %im, align 8, !dbg !11649
  %742 = load i32, i32* %mode, align 4, !dbg !11650
  %743 = load i32, i32* %ifmode, align 4, !dbg !11652
  %cmp1194 = icmp ne i32 %742, %743, !dbg !11653
  br i1 %cmp1194, label %if.then1196, label %if.end1198, !dbg !11654

if.then1196:                                      ; preds = %if.end1192
  %744 = load i32, i32* %ifmode, align 4, !dbg !11655
  %745 = load %struct.rtx_def*, %struct.rtx_def** %im, align 8, !dbg !11656
  %call1197 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %744, %struct.rtx_def* %745, i32 0), !dbg !11657
  store %struct.rtx_def* %call1197, %struct.rtx_def** %im, align 8, !dbg !11658
  br label %if.end1198, !dbg !11659

if.end1198:                                       ; preds = %if.then1196, %if.end1192
  %746 = load i32, i32* %ihmode, align 4, !dbg !11660
  %747 = load %struct.rtx_def*, %struct.rtx_def** %im, align 8, !dbg !11660
  %748 = load %struct.rtx_def*, %struct.rtx_def** %halfsize, align 8, !dbg !11660
  %749 = load %struct.rtx_def*, %struct.rtx_def** %halfsize, align 8, !dbg !11660
  %call1199 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 120, i32 %746, %struct.rtx_def* %747, %struct.rtx_def* %748, %struct.rtx_def* %749), !dbg !11660
  store %struct.rtx_def* %call1199, %struct.rtx_def** %im, align 8, !dbg !11661
  %750 = load i32, i32* %imode, align 4, !dbg !11662
  %751 = load i32, i32* %ihmode, align 4, !dbg !11664
  %cmp1200 = icmp ne i32 %750, %751, !dbg !11665
  br i1 %cmp1200, label %if.then1202, label %if.end1204, !dbg !11666

if.then1202:                                      ; preds = %if.end1198
  %752 = load i32, i32* %imode, align 4, !dbg !11667
  %753 = load %struct.rtx_def*, %struct.rtx_def** %im, align 8, !dbg !11668
  %call1203 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %752, %struct.rtx_def* %753, i32 0), !dbg !11669
  store %struct.rtx_def* %call1203, %struct.rtx_def** %im, align 8, !dbg !11670
  br label %if.end1204, !dbg !11671

if.end1204:                                       ; preds = %if.then1202, %if.end1198
  br label %if.end1205

if.end1205:                                       ; preds = %if.end1204, %if.then1157
  %754 = load i32, i32* %imode, align 4, !dbg !11672
  %755 = load %struct.rtx_def*, %struct.rtx_def** %im, align 8, !dbg !11672
  %call1206 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 51, i32 %754, %struct.rtx_def* %755), !dbg !11672
  store %struct.rtx_def* %call1206, %struct.rtx_def** %im, align 8, !dbg !11673
  %756 = load i32, i32* %mode, align 4, !dbg !11674
  %757 = load %struct.rtx_def*, %struct.rtx_def** %re, align 8, !dbg !11674
  %758 = load %struct.rtx_def*, %struct.rtx_def** %im, align 8, !dbg !11674
  %call1207 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 41, i32 %756, %struct.rtx_def* %757, %struct.rtx_def* %758), !dbg !11674
  store %struct.rtx_def* %call1207, %struct.rtx_def** %retval, align 8, !dbg !11675
  br label %return, !dbg !11675

sw.bb1208:                                        ; preds = %sw.epilog48
  %759 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11676
  %exp1209 = bitcast %union.tree_node* %759 to %struct.tree_exp*, !dbg !11676
  %operands1210 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1209, i32 0, i32 3, !dbg !11676
  %arrayidx1211 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1210, i64 0, i64 0, !dbg !11676
  %760 = load %union.tree_node*, %union.tree_node** %arrayidx1211, align 8, !dbg !11676
  %call1212 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %760), !dbg !11677
  store %struct.rtx_def* %call1212, %struct.rtx_def** %op0, align 8, !dbg !11678
  %761 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11679
  %tobool1213 = icmp ne %struct.rtx_def* %761, null, !dbg !11679
  br i1 %tobool1213, label %lor.lhs.false1214, label %if.then1219, !dbg !11681

lor.lhs.false1214:                                ; preds = %sw.bb1208
  %762 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11682
  %763 = bitcast %struct.rtx_def* %762 to i32*, !dbg !11682
  %bf.load1215 = load i32, i32* %763, align 8, !dbg !11682
  %bf.clear1216 = and i32 %bf.load1215, 65535, !dbg !11682
  %cmp1217 = icmp eq i32 %bf.clear1216, 43, !dbg !11682
  br i1 %cmp1217, label %if.end1220, label %if.then1219, !dbg !11683

if.then1219:                                      ; preds = %lor.lhs.false1214, %sw.bb1208
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11684
  br label %return, !dbg !11684

if.end1220:                                       ; preds = %lor.lhs.false1214
  %764 = load i32, i32* %mode, align 4, !dbg !11685
  %765 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11686
  %u1221 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %765, i32 0, i32 1, !dbg !11686
  %fld1222 = bitcast %union.u* %u1221 to [1 x %union.rtunion_def]*, !dbg !11686
  %arrayidx1223 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1222, i64 0, i64 0, !dbg !11686
  %rt_rtx1224 = bitcast %union.rtunion_def* %arrayidx1223 to %struct.rtx_def**, !dbg !11686
  %766 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx1224, align 8, !dbg !11686
  %call1225 = call %struct.rtx_def* @convert_debug_memory_address(i32 %764, %struct.rtx_def* %766), !dbg !11687
  store %struct.rtx_def* %call1225, %struct.rtx_def** %op0, align 8, !dbg !11688
  %767 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11689
  store %struct.rtx_def* %767, %struct.rtx_def** %retval, align 8, !dbg !11690
  br label %return, !dbg !11690

sw.bb1226:                                        ; preds = %sw.epilog48
  %768 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11691
  %common1227 = bitcast %union.tree_node* %768 to %struct.tree_common*, !dbg !11691
  %type1228 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1227, i32 0, i32 2, !dbg !11691
  %769 = load %union.tree_node*, %union.tree_node** %type1228, align 8, !dbg !11691
  %770 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11692
  %vector = bitcast %union.tree_node* %770 to %struct.tree_vector*, !dbg !11692
  %elements = getelementptr inbounds %struct.tree_vector, %struct.tree_vector* %vector, i32 0, i32 1, !dbg !11692
  %771 = load %union.tree_node*, %union.tree_node** %elements, align 8, !dbg !11692
  %call1229 = call %union.tree_node* @build_constructor_from_list(%union.tree_node* %769, %union.tree_node* %771), !dbg !11693
  store %union.tree_node* %call1229, %union.tree_node** %exp.addr, align 8, !dbg !11694
  br label %sw.bb1230, !dbg !11695

sw.bb1230:                                        ; preds = %sw.epilog48, %sw.bb1226
  %772 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11696
  %common1231 = bitcast %union.tree_node* %772 to %struct.tree_common*, !dbg !11696
  %type1232 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1231, i32 0, i32 2, !dbg !11696
  %773 = load %union.tree_node*, %union.tree_node** %type1232, align 8, !dbg !11696
  %base1233 = bitcast %union.tree_node* %773 to %struct.tree_base*, !dbg !11696
  %774 = bitcast %struct.tree_base* %base1233 to i64*, !dbg !11696
  %bf.load1234 = load i64, i64* %774, align 8, !dbg !11696
  %bf.clear1235 = and i64 %bf.load1234, 65535, !dbg !11696
  %bf.cast1236 = trunc i64 %bf.clear1235 to i32, !dbg !11696
  %cmp1237 = icmp eq i32 %bf.cast1236, 14, !dbg !11698
  br i1 %cmp1237, label %if.then1239, label %if.else1329, !dbg !11699

if.then1239:                                      ; preds = %sw.bb1230
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11700, metadata !DIExpression()), !dbg !11702
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !11703, metadata !DIExpression()), !dbg !11704
  %775 = load i32, i32* %mode, align 4, !dbg !11705
  %776 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11705
  %common1240 = bitcast %union.tree_node* %776 to %struct.tree_common*, !dbg !11705
  %type1241 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1240, i32 0, i32 2, !dbg !11705
  %777 = load %union.tree_node*, %union.tree_node** %type1241, align 8, !dbg !11705
  %type1242 = bitcast %union.tree_node* %777 to %struct.tree_type*, !dbg !11705
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1242, i32 0, i32 6, !dbg !11705
  %bf.load1243 = load i32, i32* %precision, align 4, !dbg !11705
  %bf.clear1244 = and i32 %bf.load1243, 1023, !dbg !11705
  %sh_prom = zext i32 %bf.clear1244 to i64, !dbg !11705
  %shl = shl i64 1, %sh_prom, !dbg !11705
  %conv1245 = trunc i64 %shl to i32, !dbg !11705
  %call1246 = call %struct.rtvec_def* @rtvec_alloc(i32 %conv1245), !dbg !11705
  %call1247 = call %struct.rtx_def* @gen_rtx_fmt_E_stat(i32 42, i32 %775, %struct.rtvec_def* %call1246), !dbg !11705
  store %struct.rtx_def* %call1247, %struct.rtx_def** %op0, align 8, !dbg !11706
  store i32 0, i32* %i, align 4, !dbg !11707
  br label %for.cond, !dbg !11707

for.cond:                                         ; preds = %for.inc, %if.then1239
  %778 = load i32, i32* %i, align 4, !dbg !11709
  %779 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11709
  %constructor = bitcast %union.tree_node* %779 to %struct.tree_constructor*, !dbg !11709
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !11709
  %780 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !11709
  %tobool1248 = icmp ne %struct.VEC_constructor_elt_gc* %780, null, !dbg !11709
  br i1 %tobool1248, label %cond.true1249, label %cond.false1253, !dbg !11709

cond.true1249:                                    ; preds = %for.cond
  %781 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11709
  %constructor1250 = bitcast %union.tree_node* %781 to %struct.tree_constructor*, !dbg !11709
  %elts1251 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor1250, i32 0, i32 1, !dbg !11709
  %782 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts1251, align 8, !dbg !11709
  %base1252 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %782, i32 0, i32 0, !dbg !11709
  br label %cond.end1254, !dbg !11709

cond.false1253:                                   ; preds = %for.cond
  br label %cond.end1254, !dbg !11709

cond.end1254:                                     ; preds = %cond.false1253, %cond.true1249
  %cond1255 = phi %struct.VEC_constructor_elt_base* [ %base1252, %cond.true1249 ], [ null, %cond.false1253 ], !dbg !11709
  %call1256 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond1255), !dbg !11709
  %cmp1257 = icmp uge i32 %778, %call1256, !dbg !11709
  br i1 %cmp1257, label %cond.true1259, label %cond.false1260, !dbg !11709

cond.true1259:                                    ; preds = %cond.end1254
  br label %cond.end1272, !dbg !11709

cond.false1260:                                   ; preds = %cond.end1254
  %783 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11709
  %constructor1261 = bitcast %union.tree_node* %783 to %struct.tree_constructor*, !dbg !11709
  %elts1262 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor1261, i32 0, i32 1, !dbg !11709
  %784 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts1262, align 8, !dbg !11709
  %tobool1263 = icmp ne %struct.VEC_constructor_elt_gc* %784, null, !dbg !11709
  br i1 %tobool1263, label %cond.true1264, label %cond.false1268, !dbg !11709

cond.true1264:                                    ; preds = %cond.false1260
  %785 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11709
  %constructor1265 = bitcast %union.tree_node* %785 to %struct.tree_constructor*, !dbg !11709
  %elts1266 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor1265, i32 0, i32 1, !dbg !11709
  %786 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts1266, align 8, !dbg !11709
  %base1267 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %786, i32 0, i32 0, !dbg !11709
  br label %cond.end1269, !dbg !11709

cond.false1268:                                   ; preds = %cond.false1260
  br label %cond.end1269, !dbg !11709

cond.end1269:                                     ; preds = %cond.false1268, %cond.true1264
  %cond1270 = phi %struct.VEC_constructor_elt_base* [ %base1267, %cond.true1264 ], [ null, %cond.false1268 ], !dbg !11709
  %787 = load i32, i32* %i, align 4, !dbg !11709
  %call1271 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond1270, i32 %787), !dbg !11709
  %value = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call1271, i32 0, i32 1, !dbg !11709
  %788 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !11709
  store %union.tree_node* %788, %union.tree_node** %val, align 8, !dbg !11709
  br label %cond.end1272, !dbg !11709

cond.end1272:                                     ; preds = %cond.end1269, %cond.true1259
  %cond1273 = phi i32 [ 0, %cond.true1259 ], [ 1, %cond.end1269 ], !dbg !11709
  %tobool1274 = icmp ne i32 %cond1273, 0, !dbg !11707
  br i1 %tobool1274, label %for.body, label %for.end, !dbg !11707

for.body:                                         ; preds = %cond.end1272
  %789 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !11711
  %call1275 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %789), !dbg !11713
  store %struct.rtx_def* %call1275, %struct.rtx_def** %op1, align 8, !dbg !11714
  %790 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11715
  %tobool1276 = icmp ne %struct.rtx_def* %790, null, !dbg !11715
  br i1 %tobool1276, label %if.end1278, label %if.then1277, !dbg !11717

if.then1277:                                      ; preds = %for.body
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11718
  br label %return, !dbg !11718

if.end1278:                                       ; preds = %for.body
  %791 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11719
  %792 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11720
  %u1279 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %792, i32 0, i32 1, !dbg !11720
  %fld1280 = bitcast %union.u* %u1279 to [1 x %union.rtunion_def]*, !dbg !11720
  %arrayidx1281 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1280, i64 0, i64 0, !dbg !11720
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx1281 to %struct.rtvec_def**, !dbg !11720
  %793 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !11720
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %793, i32 0, i32 1, !dbg !11720
  %794 = load i32, i32* %i, align 4, !dbg !11720
  %idxprom1282 = zext i32 %794 to i64, !dbg !11720
  %arrayidx1283 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom1282, !dbg !11720
  store %struct.rtx_def* %791, %struct.rtx_def** %arrayidx1283, align 8, !dbg !11721
  br label %for.inc, !dbg !11722

for.inc:                                          ; preds = %if.end1278
  %795 = load i32, i32* %i, align 4, !dbg !11709
  %inc = add i32 %795, 1, !dbg !11709
  store i32 %inc, i32* %i, align 4, !dbg !11709
  br label %for.cond, !dbg !11709, !llvm.loop !11723

for.end:                                          ; preds = %cond.end1272
  %796 = load i32, i32* %i, align 4, !dbg !11725
  %conv1284 = zext i32 %796 to i64, !dbg !11725
  %797 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11727
  %common1285 = bitcast %union.tree_node* %797 to %struct.tree_common*, !dbg !11727
  %type1286 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1285, i32 0, i32 2, !dbg !11727
  %798 = load %union.tree_node*, %union.tree_node** %type1286, align 8, !dbg !11727
  %type1287 = bitcast %union.tree_node* %798 to %struct.tree_type*, !dbg !11727
  %precision1288 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1287, i32 0, i32 6, !dbg !11727
  %bf.load1289 = load i32, i32* %precision1288, align 4, !dbg !11727
  %bf.clear1290 = and i32 %bf.load1289, 1023, !dbg !11727
  %sh_prom1291 = zext i32 %bf.clear1290 to i64, !dbg !11727
  %shl1292 = shl i64 1, %sh_prom1291, !dbg !11727
  %cmp1293 = icmp ult i64 %conv1284, %shl1292, !dbg !11728
  br i1 %cmp1293, label %if.then1295, label %if.end1328, !dbg !11729

if.then1295:                                      ; preds = %for.end
  %799 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11730
  %common1296 = bitcast %union.tree_node* %799 to %struct.tree_common*, !dbg !11730
  %type1297 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1296, i32 0, i32 2, !dbg !11730
  %800 = load %union.tree_node*, %union.tree_node** %type1297, align 8, !dbg !11730
  %common1298 = bitcast %union.tree_node* %800 to %struct.tree_common*, !dbg !11730
  %type1299 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1298, i32 0, i32 2, !dbg !11730
  %801 = load %union.tree_node*, %union.tree_node** %type1299, align 8, !dbg !11730
  %802 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !11730
  %call1300 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %801, %union.tree_node* %802), !dbg !11730
  %call1301 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %call1300), !dbg !11732
  store %struct.rtx_def* %call1301, %struct.rtx_def** %op1, align 8, !dbg !11733
  %803 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11734
  %tobool1302 = icmp ne %struct.rtx_def* %803, null, !dbg !11734
  br i1 %tobool1302, label %if.end1304, label %if.then1303, !dbg !11736

if.then1303:                                      ; preds = %if.then1295
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11737
  br label %return, !dbg !11737

if.end1304:                                       ; preds = %if.then1295
  br label %for.cond1305, !dbg !11738

for.cond1305:                                     ; preds = %for.inc1325, %if.end1304
  %804 = load i32, i32* %i, align 4, !dbg !11739
  %conv1306 = zext i32 %804 to i64, !dbg !11739
  %805 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11742
  %common1307 = bitcast %union.tree_node* %805 to %struct.tree_common*, !dbg !11742
  %type1308 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1307, i32 0, i32 2, !dbg !11742
  %806 = load %union.tree_node*, %union.tree_node** %type1308, align 8, !dbg !11742
  %type1309 = bitcast %union.tree_node* %806 to %struct.tree_type*, !dbg !11742
  %precision1310 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1309, i32 0, i32 6, !dbg !11742
  %bf.load1311 = load i32, i32* %precision1310, align 4, !dbg !11742
  %bf.clear1312 = and i32 %bf.load1311, 1023, !dbg !11742
  %sh_prom1313 = zext i32 %bf.clear1312 to i64, !dbg !11742
  %shl1314 = shl i64 1, %sh_prom1313, !dbg !11742
  %cmp1315 = icmp ult i64 %conv1306, %shl1314, !dbg !11743
  br i1 %cmp1315, label %for.body1317, label %for.end1327, !dbg !11744

for.body1317:                                     ; preds = %for.cond1305
  %807 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11745
  %808 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11746
  %u1318 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %808, i32 0, i32 1, !dbg !11746
  %fld1319 = bitcast %union.u* %u1318 to [1 x %union.rtunion_def]*, !dbg !11746
  %arrayidx1320 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1319, i64 0, i64 0, !dbg !11746
  %rt_rtvec1321 = bitcast %union.rtunion_def* %arrayidx1320 to %struct.rtvec_def**, !dbg !11746
  %809 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec1321, align 8, !dbg !11746
  %elem1322 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %809, i32 0, i32 1, !dbg !11746
  %810 = load i32, i32* %i, align 4, !dbg !11746
  %idxprom1323 = zext i32 %810 to i64, !dbg !11746
  %arrayidx1324 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem1322, i64 0, i64 %idxprom1323, !dbg !11746
  store %struct.rtx_def* %807, %struct.rtx_def** %arrayidx1324, align 8, !dbg !11747
  br label %for.inc1325, !dbg !11746

for.inc1325:                                      ; preds = %for.body1317
  %811 = load i32, i32* %i, align 4, !dbg !11748
  %inc1326 = add i32 %811, 1, !dbg !11748
  store i32 %inc1326, i32* %i, align 4, !dbg !11748
  br label %for.cond1305, !dbg !11749, !llvm.loop !11750

for.end1327:                                      ; preds = %for.cond1305
  br label %if.end1328, !dbg !11752

if.end1328:                                       ; preds = %for.end1327, %for.end
  %812 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11753
  store %struct.rtx_def* %812, %struct.rtx_def** %retval, align 8, !dbg !11754
  br label %return, !dbg !11754

if.else1329:                                      ; preds = %sw.bb1230
  br label %flag_unsupported, !dbg !11755

sw.bb1330:                                        ; preds = %sw.epilog48
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11756
  br label %return, !dbg !11756

sw.bb1331:                                        ; preds = %sw.epilog48
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g, metadata !11757, metadata !DIExpression()), !dbg !11759
  %813 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11760
  %call1332 = call %union.gimple_statement_d* @get_gimple_for_ssa_name(%union.tree_node* %813), !dbg !11761
  store %union.gimple_statement_d* %call1332, %union.gimple_statement_d** %g, align 8, !dbg !11759
  %814 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !11762
  %tobool1333 = icmp ne %union.gimple_statement_d* %814, null, !dbg !11762
  br i1 %tobool1333, label %if.then1334, label %if.else1340, !dbg !11764

if.then1334:                                      ; preds = %sw.bb1331
  %815 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g, align 8, !dbg !11765
  %call1335 = call %union.tree_node* @gimple_assign_rhs_to_tree(%union.gimple_statement_d* %815), !dbg !11767
  %call1336 = call %struct.rtx_def* @expand_debug_expr(%union.tree_node* %call1335), !dbg !11768
  store %struct.rtx_def* %call1336, %struct.rtx_def** %op0, align 8, !dbg !11769
  %816 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11770
  %tobool1337 = icmp ne %struct.rtx_def* %816, null, !dbg !11770
  br i1 %tobool1337, label %if.end1339, label %if.then1338, !dbg !11772

if.then1338:                                      ; preds = %if.then1334
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11773
  br label %return, !dbg !11773

if.end1339:                                       ; preds = %if.then1334
  br label %if.end1357, !dbg !11774

if.else1340:                                      ; preds = %sw.bb1331
  call void @llvm.dbg.declare(metadata i32* %part, metadata !11775, metadata !DIExpression()), !dbg !11777
  %817 = load %struct._var_map*, %struct._var_map** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 0), align 8, !dbg !11778
  %818 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11779
  %call1341 = call i32 @var_to_partition(%struct._var_map* %817, %union.tree_node* %818), !dbg !11780
  store i32 %call1341, i32* %part, align 4, !dbg !11777
  %819 = load i32, i32* %part, align 4, !dbg !11781
  %cmp1342 = icmp eq i32 %819, -1, !dbg !11783
  br i1 %cmp1342, label %if.then1344, label %if.end1345, !dbg !11784

if.then1344:                                      ; preds = %if.else1340
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11785
  br label %return, !dbg !11785

if.end1345:                                       ; preds = %if.else1340
  %820 = load i32, i32* %part, align 4, !dbg !11786
  %cmp1346 = icmp sge i32 %820, 0, !dbg !11786
  br i1 %cmp1346, label %land.lhs.true1348, label %cond.true1351, !dbg !11786

land.lhs.true1348:                                ; preds = %if.end1345
  %821 = load i32, i32* %part, align 4, !dbg !11786
  %822 = load %struct._var_map*, %struct._var_map** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 0), align 8, !dbg !11786
  %num_partitions = getelementptr inbounds %struct._var_map, %struct._var_map* %822, i32 0, i32 3, !dbg !11786
  %823 = load i32, i32* %num_partitions, align 8, !dbg !11786
  %cmp1349 = icmp ult i32 %821, %823, !dbg !11786
  br i1 %cmp1349, label %cond.false1352, label %cond.true1351, !dbg !11786

cond.true1351:                                    ; preds = %land.lhs.true1348, %if.end1345
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 2955, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11786
  br label %cond.end1353, !dbg !11786

cond.false1352:                                   ; preds = %land.lhs.true1348
  br label %cond.end1353, !dbg !11786

cond.end1353:                                     ; preds = %cond.false1352, %cond.true1351
  %cond1354 = phi i32 [ 0, %cond.true1351 ], [ 0, %cond.false1352 ], !dbg !11786
  %824 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.ssaexpand, %struct.ssaexpand* @SA, i32 0, i32 2), align 8, !dbg !11787
  %825 = load i32, i32* %part, align 4, !dbg !11788
  %idxprom1355 = sext i32 %825 to i64, !dbg !11789
  %arrayidx1356 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %824, i64 %idxprom1355, !dbg !11789
  %826 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1356, align 8, !dbg !11789
  store %struct.rtx_def* %826, %struct.rtx_def** %op0, align 8, !dbg !11790
  br label %if.end1357

if.end1357:                                       ; preds = %cond.end1353, %if.end1339
  br label %adjust_mode, !dbg !11791

sw.bb1358:                                        ; preds = %sw.epilog48
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11792
  br label %return, !dbg !11792

sw.bb1359:                                        ; preds = %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11793
  br label %return, !dbg !11793

sw.bb1360:                                        ; preds = %sw.epilog48, %sw.epilog48, %sw.epilog48, %sw.epilog48
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11794
  br label %return, !dbg !11794

sw.bb1361:                                        ; preds = %sw.epilog48
  %827 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11795
  %828 = bitcast %struct.rtx_def* %827 to i32*, !dbg !11795
  %bf.load1362 = load i32, i32* %828, align 8, !dbg !11795
  %bf.lshr1363 = lshr i32 %bf.load1362, 16, !dbg !11795
  %bf.clear1364 = and i32 %bf.lshr1363, 255, !dbg !11795
  %idxprom1365 = zext i32 %bf.clear1364 to i64, !dbg !11795
  %arrayidx1366 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1365, !dbg !11795
  %829 = load i8, i8* %arrayidx1366, align 1, !dbg !11795
  %conv1367 = zext i8 %829 to i32, !dbg !11795
  %cmp1368 = icmp eq i32 %conv1367, 2, !dbg !11795
  br i1 %cmp1368, label %land.lhs.true1379, label %lor.lhs.false1370, !dbg !11795

lor.lhs.false1370:                                ; preds = %sw.bb1361
  %830 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11795
  %831 = bitcast %struct.rtx_def* %830 to i32*, !dbg !11795
  %bf.load1371 = load i32, i32* %831, align 8, !dbg !11795
  %bf.lshr1372 = lshr i32 %bf.load1371, 16, !dbg !11795
  %bf.clear1373 = and i32 %bf.lshr1372, 255, !dbg !11795
  %idxprom1374 = zext i32 %bf.clear1373 to i64, !dbg !11795
  %arrayidx1375 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1374, !dbg !11795
  %832 = load i8, i8* %arrayidx1375, align 1, !dbg !11795
  %conv1376 = zext i8 %832 to i32, !dbg !11795
  %cmp1377 = icmp eq i32 %conv1376, 3, !dbg !11795
  br i1 %cmp1377, label %land.lhs.true1379, label %if.end1426, !dbg !11797

land.lhs.true1379:                                ; preds = %lor.lhs.false1370, %sw.bb1361
  %833 = load i32, i32* %mode, align 4, !dbg !11798
  %idxprom1380 = zext i32 %833 to i64, !dbg !11798
  %arrayidx1381 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1380, !dbg !11798
  %834 = load i8, i8* %arrayidx1381, align 1, !dbg !11798
  %conv1382 = zext i8 %834 to i32, !dbg !11798
  %cmp1383 = icmp eq i32 %conv1382, 2, !dbg !11798
  br i1 %cmp1383, label %if.then1391, label %lor.lhs.false1385, !dbg !11798

lor.lhs.false1385:                                ; preds = %land.lhs.true1379
  %835 = load i32, i32* %mode, align 4, !dbg !11798
  %idxprom1386 = zext i32 %835 to i64, !dbg !11798
  %arrayidx1387 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1386, !dbg !11798
  %836 = load i8, i8* %arrayidx1387, align 1, !dbg !11798
  %conv1388 = zext i8 %836 to i32, !dbg !11798
  %cmp1389 = icmp eq i32 %conv1388, 3, !dbg !11798
  br i1 %cmp1389, label %if.then1391, label %if.end1426, !dbg !11799

if.then1391:                                      ; preds = %lor.lhs.false1385, %land.lhs.true1379
  %837 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11800
  %exp1392 = bitcast %union.tree_node* %837 to %struct.tree_exp*, !dbg !11800
  %operands1393 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1392, i32 0, i32 3, !dbg !11800
  %arrayidx1394 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1393, i64 0, i64 0, !dbg !11800
  %838 = load %union.tree_node*, %union.tree_node** %arrayidx1394, align 8, !dbg !11800
  %common1395 = bitcast %union.tree_node* %838 to %struct.tree_common*, !dbg !11800
  %type1396 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1395, i32 0, i32 2, !dbg !11800
  %839 = load %union.tree_node*, %union.tree_node** %type1396, align 8, !dbg !11800
  %base1397 = bitcast %union.tree_node* %839 to %struct.tree_base*, !dbg !11800
  %840 = bitcast %struct.tree_base* %base1397 to i64*, !dbg !11800
  %bf.load1398 = load i64, i64* %840, align 8, !dbg !11800
  %bf.lshr1399 = lshr i64 %bf.load1398, 21, !dbg !11800
  %bf.clear1400 = and i64 %bf.lshr1399, 1, !dbg !11800
  %bf.cast1401 = trunc i64 %bf.clear1400 to i32, !dbg !11800
  %tobool1402 = icmp ne i32 %bf.cast1401, 0, !dbg !11800
  br i1 %tobool1402, label %if.then1403, label %if.else1405, !dbg !11803

if.then1403:                                      ; preds = %if.then1391
  %841 = load i32, i32* %mode, align 4, !dbg !11804
  %842 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11804
  %call1404 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 99, i32 %841, %struct.rtx_def* %842), !dbg !11804
  store %struct.rtx_def* %call1404, %struct.rtx_def** %op0, align 8, !dbg !11805
  br label %if.end1407, !dbg !11806

if.else1405:                                      ; preds = %if.then1391
  %843 = load i32, i32* %mode, align 4, !dbg !11807
  %844 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11807
  %call1406 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 98, i32 %843, %struct.rtx_def* %844), !dbg !11807
  store %struct.rtx_def* %call1406, %struct.rtx_def** %op0, align 8, !dbg !11808
  br label %if.end1407

if.end1407:                                       ; preds = %if.else1405, %if.then1403
  %845 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11809
  %exp1408 = bitcast %union.tree_node* %845 to %struct.tree_exp*, !dbg !11809
  %operands1409 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1408, i32 0, i32 3, !dbg !11809
  %arrayidx1410 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1409, i64 0, i64 1, !dbg !11809
  %846 = load %union.tree_node*, %union.tree_node** %arrayidx1410, align 8, !dbg !11809
  %common1411 = bitcast %union.tree_node* %846 to %struct.tree_common*, !dbg !11809
  %type1412 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1411, i32 0, i32 2, !dbg !11809
  %847 = load %union.tree_node*, %union.tree_node** %type1412, align 8, !dbg !11809
  %base1413 = bitcast %union.tree_node* %847 to %struct.tree_base*, !dbg !11809
  %848 = bitcast %struct.tree_base* %base1413 to i64*, !dbg !11809
  %bf.load1414 = load i64, i64* %848, align 8, !dbg !11809
  %bf.lshr1415 = lshr i64 %bf.load1414, 21, !dbg !11809
  %bf.clear1416 = and i64 %bf.lshr1415, 1, !dbg !11809
  %bf.cast1417 = trunc i64 %bf.clear1416 to i32, !dbg !11809
  %tobool1418 = icmp ne i32 %bf.cast1417, 0, !dbg !11809
  br i1 %tobool1418, label %if.then1419, label %if.else1421, !dbg !11811

if.then1419:                                      ; preds = %if.end1407
  %849 = load i32, i32* %mode, align 4, !dbg !11812
  %850 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11812
  %call1420 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 99, i32 %849, %struct.rtx_def* %850), !dbg !11812
  store %struct.rtx_def* %call1420, %struct.rtx_def** %op1, align 8, !dbg !11813
  br label %if.end1423, !dbg !11814

if.else1421:                                      ; preds = %if.end1407
  %851 = load i32, i32* %mode, align 4, !dbg !11815
  %852 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11815
  %call1422 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 98, i32 %851, %struct.rtx_def* %852), !dbg !11815
  store %struct.rtx_def* %call1422, %struct.rtx_def** %op1, align 8, !dbg !11816
  br label %if.end1423

if.end1423:                                       ; preds = %if.else1421, %if.then1419
  %853 = load i32, i32* %mode, align 4, !dbg !11817
  %854 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11817
  %855 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11817
  %call1424 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %853, %struct.rtx_def* %854, %struct.rtx_def* %855), !dbg !11817
  store %struct.rtx_def* %call1424, %struct.rtx_def** %op0, align 8, !dbg !11818
  %856 = load i32, i32* %mode, align 4, !dbg !11819
  %857 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11819
  %858 = load %struct.rtx_def*, %struct.rtx_def** %op2, align 8, !dbg !11819
  %call1425 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %856, %struct.rtx_def* %857, %struct.rtx_def* %858), !dbg !11819
  store %struct.rtx_def* %call1425, %struct.rtx_def** %retval, align 8, !dbg !11820
  br label %return, !dbg !11820

if.end1426:                                       ; preds = %lor.lhs.false1385, %lor.lhs.false1370
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11821
  br label %return, !dbg !11821

sw.bb1427:                                        ; preds = %sw.epilog48
  %859 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11822
  %860 = bitcast %struct.rtx_def* %859 to i32*, !dbg !11822
  %bf.load1428 = load i32, i32* %860, align 8, !dbg !11822
  %bf.lshr1429 = lshr i32 %bf.load1428, 16, !dbg !11822
  %bf.clear1430 = and i32 %bf.lshr1429, 255, !dbg !11822
  %idxprom1431 = zext i32 %bf.clear1430 to i64, !dbg !11822
  %arrayidx1432 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1431, !dbg !11822
  %861 = load i8, i8* %arrayidx1432, align 1, !dbg !11822
  %conv1433 = zext i8 %861 to i32, !dbg !11822
  %cmp1434 = icmp eq i32 %conv1433, 2, !dbg !11822
  br i1 %cmp1434, label %land.lhs.true1445, label %lor.lhs.false1436, !dbg !11822

lor.lhs.false1436:                                ; preds = %sw.bb1427
  %862 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11822
  %863 = bitcast %struct.rtx_def* %862 to i32*, !dbg !11822
  %bf.load1437 = load i32, i32* %863, align 8, !dbg !11822
  %bf.lshr1438 = lshr i32 %bf.load1437, 16, !dbg !11822
  %bf.clear1439 = and i32 %bf.lshr1438, 255, !dbg !11822
  %idxprom1440 = zext i32 %bf.clear1439 to i64, !dbg !11822
  %arrayidx1441 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1440, !dbg !11822
  %864 = load i8, i8* %arrayidx1441, align 1, !dbg !11822
  %conv1442 = zext i8 %864 to i32, !dbg !11822
  %cmp1443 = icmp eq i32 %conv1442, 3, !dbg !11822
  br i1 %cmp1443, label %land.lhs.true1445, label %if.end1491, !dbg !11824

land.lhs.true1445:                                ; preds = %lor.lhs.false1436, %sw.bb1427
  %865 = load i32, i32* %mode, align 4, !dbg !11825
  %idxprom1446 = zext i32 %865 to i64, !dbg !11825
  %arrayidx1447 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1446, !dbg !11825
  %866 = load i8, i8* %arrayidx1447, align 1, !dbg !11825
  %conv1448 = zext i8 %866 to i32, !dbg !11825
  %cmp1449 = icmp eq i32 %conv1448, 2, !dbg !11825
  br i1 %cmp1449, label %if.then1457, label %lor.lhs.false1451, !dbg !11825

lor.lhs.false1451:                                ; preds = %land.lhs.true1445
  %867 = load i32, i32* %mode, align 4, !dbg !11825
  %idxprom1452 = zext i32 %867 to i64, !dbg !11825
  %arrayidx1453 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1452, !dbg !11825
  %868 = load i8, i8* %arrayidx1453, align 1, !dbg !11825
  %conv1454 = zext i8 %868 to i32, !dbg !11825
  %cmp1455 = icmp eq i32 %conv1454, 3, !dbg !11825
  br i1 %cmp1455, label %if.then1457, label %if.end1491, !dbg !11826

if.then1457:                                      ; preds = %lor.lhs.false1451, %land.lhs.true1445
  %869 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11827
  %exp1458 = bitcast %union.tree_node* %869 to %struct.tree_exp*, !dbg !11827
  %operands1459 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1458, i32 0, i32 3, !dbg !11827
  %arrayidx1460 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1459, i64 0, i64 0, !dbg !11827
  %870 = load %union.tree_node*, %union.tree_node** %arrayidx1460, align 8, !dbg !11827
  %common1461 = bitcast %union.tree_node* %870 to %struct.tree_common*, !dbg !11827
  %type1462 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1461, i32 0, i32 2, !dbg !11827
  %871 = load %union.tree_node*, %union.tree_node** %type1462, align 8, !dbg !11827
  %base1463 = bitcast %union.tree_node* %871 to %struct.tree_base*, !dbg !11827
  %872 = bitcast %struct.tree_base* %base1463 to i64*, !dbg !11827
  %bf.load1464 = load i64, i64* %872, align 8, !dbg !11827
  %bf.lshr1465 = lshr i64 %bf.load1464, 21, !dbg !11827
  %bf.clear1466 = and i64 %bf.lshr1465, 1, !dbg !11827
  %bf.cast1467 = trunc i64 %bf.clear1466 to i32, !dbg !11827
  %tobool1468 = icmp ne i32 %bf.cast1467, 0, !dbg !11827
  br i1 %tobool1468, label %if.then1469, label %if.else1471, !dbg !11830

if.then1469:                                      ; preds = %if.then1457
  %873 = load i32, i32* %mode, align 4, !dbg !11831
  %874 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11831
  %call1470 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 99, i32 %873, %struct.rtx_def* %874), !dbg !11831
  store %struct.rtx_def* %call1470, %struct.rtx_def** %op0, align 8, !dbg !11832
  br label %if.end1473, !dbg !11833

if.else1471:                                      ; preds = %if.then1457
  %875 = load i32, i32* %mode, align 4, !dbg !11834
  %876 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11834
  %call1472 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 98, i32 %875, %struct.rtx_def* %876), !dbg !11834
  store %struct.rtx_def* %call1472, %struct.rtx_def** %op0, align 8, !dbg !11835
  br label %if.end1473

if.end1473:                                       ; preds = %if.else1471, %if.then1469
  %877 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11836
  %exp1474 = bitcast %union.tree_node* %877 to %struct.tree_exp*, !dbg !11836
  %operands1475 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1474, i32 0, i32 3, !dbg !11836
  %arrayidx1476 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1475, i64 0, i64 1, !dbg !11836
  %878 = load %union.tree_node*, %union.tree_node** %arrayidx1476, align 8, !dbg !11836
  %common1477 = bitcast %union.tree_node* %878 to %struct.tree_common*, !dbg !11836
  %type1478 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1477, i32 0, i32 2, !dbg !11836
  %879 = load %union.tree_node*, %union.tree_node** %type1478, align 8, !dbg !11836
  %base1479 = bitcast %union.tree_node* %879 to %struct.tree_base*, !dbg !11836
  %880 = bitcast %struct.tree_base* %base1479 to i64*, !dbg !11836
  %bf.load1480 = load i64, i64* %880, align 8, !dbg !11836
  %bf.lshr1481 = lshr i64 %bf.load1480, 21, !dbg !11836
  %bf.clear1482 = and i64 %bf.lshr1481, 1, !dbg !11836
  %bf.cast1483 = trunc i64 %bf.clear1482 to i32, !dbg !11836
  %tobool1484 = icmp ne i32 %bf.cast1483, 0, !dbg !11836
  br i1 %tobool1484, label %if.then1485, label %if.else1487, !dbg !11838

if.then1485:                                      ; preds = %if.end1473
  %881 = load i32, i32* %mode, align 4, !dbg !11839
  %882 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11839
  %call1486 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 99, i32 %881, %struct.rtx_def* %882), !dbg !11839
  store %struct.rtx_def* %call1486, %struct.rtx_def** %op1, align 8, !dbg !11840
  br label %if.end1489, !dbg !11841

if.else1487:                                      ; preds = %if.end1473
  %883 = load i32, i32* %mode, align 4, !dbg !11842
  %884 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11842
  %call1488 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 98, i32 %883, %struct.rtx_def* %884), !dbg !11842
  store %struct.rtx_def* %call1488, %struct.rtx_def** %op1, align 8, !dbg !11843
  br label %if.end1489

if.end1489:                                       ; preds = %if.else1487, %if.then1485
  %885 = load i32, i32* %mode, align 4, !dbg !11844
  %886 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11844
  %887 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11844
  %call1490 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 52, i32 %885, %struct.rtx_def* %886, %struct.rtx_def* %887), !dbg !11844
  store %struct.rtx_def* %call1490, %struct.rtx_def** %retval, align 8, !dbg !11845
  br label %return, !dbg !11845

if.end1491:                                       ; preds = %lor.lhs.false1451, %lor.lhs.false1436
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11846
  br label %return, !dbg !11846

sw.bb1492:                                        ; preds = %sw.epilog48
  %888 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11847
  %889 = bitcast %struct.rtx_def* %888 to i32*, !dbg !11847
  %bf.load1493 = load i32, i32* %889, align 8, !dbg !11847
  %bf.lshr1494 = lshr i32 %bf.load1493, 16, !dbg !11847
  %bf.clear1495 = and i32 %bf.lshr1494, 255, !dbg !11847
  %idxprom1496 = zext i32 %bf.clear1495 to i64, !dbg !11847
  %arrayidx1497 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1496, !dbg !11847
  %890 = load i8, i8* %arrayidx1497, align 1, !dbg !11847
  %conv1498 = zext i8 %890 to i32, !dbg !11847
  %cmp1499 = icmp eq i32 %conv1498, 2, !dbg !11847
  br i1 %cmp1499, label %land.lhs.true1510, label %lor.lhs.false1501, !dbg !11847

lor.lhs.false1501:                                ; preds = %sw.bb1492
  %891 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11847
  %892 = bitcast %struct.rtx_def* %891 to i32*, !dbg !11847
  %bf.load1502 = load i32, i32* %892, align 8, !dbg !11847
  %bf.lshr1503 = lshr i32 %bf.load1502, 16, !dbg !11847
  %bf.clear1504 = and i32 %bf.lshr1503, 255, !dbg !11847
  %idxprom1505 = zext i32 %bf.clear1504 to i64, !dbg !11847
  %arrayidx1506 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1505, !dbg !11847
  %893 = load i8, i8* %arrayidx1506, align 1, !dbg !11847
  %conv1507 = zext i8 %893 to i32, !dbg !11847
  %cmp1508 = icmp eq i32 %conv1507, 3, !dbg !11847
  br i1 %cmp1508, label %land.lhs.true1510, label %if.end1540, !dbg !11849

land.lhs.true1510:                                ; preds = %lor.lhs.false1501, %sw.bb1492
  %894 = load i32, i32* %mode, align 4, !dbg !11850
  %idxprom1511 = zext i32 %894 to i64, !dbg !11850
  %arrayidx1512 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1511, !dbg !11850
  %895 = load i8, i8* %arrayidx1512, align 1, !dbg !11850
  %conv1513 = zext i8 %895 to i32, !dbg !11850
  %cmp1514 = icmp eq i32 %conv1513, 2, !dbg !11850
  br i1 %cmp1514, label %if.then1522, label %lor.lhs.false1516, !dbg !11850

lor.lhs.false1516:                                ; preds = %land.lhs.true1510
  %896 = load i32, i32* %mode, align 4, !dbg !11850
  %idxprom1517 = zext i32 %896 to i64, !dbg !11850
  %arrayidx1518 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1517, !dbg !11850
  %897 = load i8, i8* %arrayidx1518, align 1, !dbg !11850
  %conv1519 = zext i8 %897 to i32, !dbg !11850
  %cmp1520 = icmp eq i32 %conv1519, 3, !dbg !11850
  br i1 %cmp1520, label %if.then1522, label %if.end1540, !dbg !11851

if.then1522:                                      ; preds = %lor.lhs.false1516, %land.lhs.true1510
  %898 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11852
  %exp1523 = bitcast %union.tree_node* %898 to %struct.tree_exp*, !dbg !11852
  %operands1524 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1523, i32 0, i32 3, !dbg !11852
  %arrayidx1525 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands1524, i64 0, i64 0, !dbg !11852
  %899 = load %union.tree_node*, %union.tree_node** %arrayidx1525, align 8, !dbg !11852
  %common1526 = bitcast %union.tree_node* %899 to %struct.tree_common*, !dbg !11852
  %type1527 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1526, i32 0, i32 2, !dbg !11852
  %900 = load %union.tree_node*, %union.tree_node** %type1527, align 8, !dbg !11852
  %base1528 = bitcast %union.tree_node* %900 to %struct.tree_base*, !dbg !11852
  %901 = bitcast %struct.tree_base* %base1528 to i64*, !dbg !11852
  %bf.load1529 = load i64, i64* %901, align 8, !dbg !11852
  %bf.lshr1530 = lshr i64 %bf.load1529, 21, !dbg !11852
  %bf.clear1531 = and i64 %bf.lshr1530, 1, !dbg !11852
  %bf.cast1532 = trunc i64 %bf.clear1531 to i32, !dbg !11852
  %tobool1533 = icmp ne i32 %bf.cast1532, 0, !dbg !11852
  br i1 %tobool1533, label %if.then1534, label %if.else1536, !dbg !11855

if.then1534:                                      ; preds = %if.then1522
  %902 = load i32, i32* %mode, align 4, !dbg !11856
  %903 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11856
  %call1535 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 99, i32 %902, %struct.rtx_def* %903), !dbg !11856
  store %struct.rtx_def* %call1535, %struct.rtx_def** %op0, align 8, !dbg !11857
  br label %if.end1538, !dbg !11858

if.else1536:                                      ; preds = %if.then1522
  %904 = load i32, i32* %mode, align 4, !dbg !11859
  %905 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11859
  %call1537 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 98, i32 %904, %struct.rtx_def* %905), !dbg !11859
  store %struct.rtx_def* %call1537, %struct.rtx_def** %op0, align 8, !dbg !11860
  br label %if.end1538

if.end1538:                                       ; preds = %if.else1536, %if.then1534
  %906 = load i32, i32* %mode, align 4, !dbg !11861
  %907 = load %struct.rtx_def*, %struct.rtx_def** %op0, align 8, !dbg !11861
  %908 = load %struct.rtx_def*, %struct.rtx_def** %op1, align 8, !dbg !11861
  %call1539 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 %906, %struct.rtx_def* %907, %struct.rtx_def* %908), !dbg !11861
  store %struct.rtx_def* %call1539, %struct.rtx_def** %retval, align 8, !dbg !11862
  br label %return, !dbg !11862

if.end1540:                                       ; preds = %lor.lhs.false1516, %lor.lhs.false1501
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11863
  br label %return, !dbg !11863

sw.default1541:                                   ; preds = %sw.epilog48
  br label %flag_unsupported, !dbg !11863

flag_unsupported:                                 ; preds = %sw.default1541, %if.else1329
  call void @llvm.dbg.label(metadata !11864), !dbg !11865
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !11866
  br label %return, !dbg !11866

return:                                           ; preds = %flag_unsupported, %if.end1540, %if.end1538, %if.end1491, %if.end1489, %if.end1426, %if.end1423, %sw.bb1360, %sw.bb1359, %sw.bb1358, %if.then1344, %if.then1338, %sw.bb1330, %if.end1328, %if.then1303, %if.then1277, %if.end1220, %if.then1219, %if.end1205, %if.then1172, %if.then1135, %if.end1128, %sw.bb1089, %sw.bb1087, %sw.bb1085, %sw.bb1083, %sw.bb1081, %sw.bb1079, %sw.bb1077, %sw.bb1075, %sw.bb1073, %sw.bb1071, %sw.bb1069, %if.else1067, %if.then1065, %if.else1061, %if.then1059, %if.else1055, %if.then1053, %if.else1049, %if.then1047, %sw.bb1043, %sw.bb1041, %sw.bb1039, %sw.bb1037, %sw.bb1035, %sw.bb1033, %if.else1031, %if.then1029, %if.else1025, %if.then1023, %sw.bb1019, %sw.bb1017, %if.else1015, %if.then1013, %sw.bb1009, %if.else1001, %if.then993, %if.else983, %if.then975, %if.else965, %if.then957, %if.else947, %if.then939, %if.else929, %if.then927, %if.else919, %if.then917, %if.else913, %if.then911, %if.else907, %if.then905, %sw.bb901, %sw.bb899, %sw.bb897, %if.else895, %if.then893, %if.else889, %if.then887, %sw.bb883, %sw.bb881, %sw.bb879, %cond.end874, %if.then832, %if.then820, %if.then782, %if.then778, %if.then668, %if.then653, %if.then645, %if.then641, %if.end628, %if.then627, %if.then619, %if.end591, %if.then545, %if.end538, %if.then328, %if.then259, %cond.end249, %if.then221, %if.then183, %if.end119, %if.then118, %cond.end84, %sw.bb69, %if.end62, %if.then61, %if.then44, %if.then36, %if.then
  %909 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !11867
  ret %struct.rtx_def* %909, !dbg !11867
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_e_stat(i32, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @lookup_constant_def(%union.tree_node*) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_s_stat(i32, i32, i8*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_0_stat(i32, i32) #2

declare dso_local %struct.rtx_def* @make_decl_rtl_for_debug(%union.tree_node*) #2

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #2

declare dso_local %struct.rtx_def* @simplify_gen_subreg(i32, %struct.rtx_def*, i32, i32) #2

declare dso_local %struct.rtx_def* @simplify_gen_unary(i32, i32, %struct.rtx_def*, i32) #2

declare dso_local i32 @subreg_lowpart_offset(i32, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

declare dso_local void @set_mem_addr_space(%struct.rtx_def*, i8 zeroext) #2

declare dso_local %union.tree_node* @tree_mem_ref_addr(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @get_inner_reference(%union.tree_node*, i64*, i64*, %union.tree_node**, i32*, i32*, i32*, i8 zeroext) #2

declare dso_local i32 @smallest_mode_for_size(i32, i32) #2

declare dso_local %struct.rtx_def* @shallow_copy_rtx_stat(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @simplify_gen_ternary(i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @floor_sdiv_adjust(i32 %mode, %struct.rtx_def* %mod, %struct.rtx_def* %op1) #0 !dbg !11868 {
entry:
  %mode.addr = alloca i32, align 4
  %mod.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11871, metadata !DIExpression()), !dbg !11872
  store %struct.rtx_def* %mod, %struct.rtx_def** %mod.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod.addr, metadata !11873, metadata !DIExpression()), !dbg !11874
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !11875, metadata !DIExpression()), !dbg !11876
  %0 = load i32, i32* %mode.addr, align 4, !dbg !11877
  %1 = load %struct.rtx_def*, %struct.rtx_def** %mod.addr, align 8, !dbg !11877
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11877
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 80, i32 13, %struct.rtx_def* %1, %struct.rtx_def* %2), !dbg !11877
  %3 = load i32, i32* %mode.addr, align 4, !dbg !11877
  %4 = load i32, i32* %mode.addr, align 4, !dbg !11877
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11877
  %6 = load %struct.rtx_def*, %struct.rtx_def** %mod.addr, align 8, !dbg !11877
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 55, i32 %4, %struct.rtx_def* %5, %struct.rtx_def* %6), !dbg !11877
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11877
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 85, i32 13, %struct.rtx_def* %call1, %struct.rtx_def* %7), !dbg !11877
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !11877
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11877
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %3, %struct.rtx_def* %call2, %struct.rtx_def* %8, %struct.rtx_def* %9), !dbg !11877
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11877
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %0, %struct.rtx_def* %call, %struct.rtx_def* %call3, %struct.rtx_def* %10), !dbg !11877
  ret %struct.rtx_def* %call4, !dbg !11878
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @ceil_udiv_adjust(i32 %mode, %struct.rtx_def* %mod, %struct.rtx_def* %op1) #0 !dbg !11879 {
entry:
  %mode.addr = alloca i32, align 4
  %mod.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11880, metadata !DIExpression()), !dbg !11881
  store %struct.rtx_def* %mod, %struct.rtx_def** %mod.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod.addr, metadata !11882, metadata !DIExpression()), !dbg !11883
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !11884, metadata !DIExpression()), !dbg !11885
  %0 = load i32, i32* %mode.addr, align 4, !dbg !11886
  %1 = load %struct.rtx_def*, %struct.rtx_def** %mod.addr, align 8, !dbg !11886
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11886
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 80, i32 13, %struct.rtx_def* %1, %struct.rtx_def* %2), !dbg !11886
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !11886
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11886
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %0, %struct.rtx_def* %call, %struct.rtx_def* %3, %struct.rtx_def* %4), !dbg !11886
  ret %struct.rtx_def* %call1, !dbg !11887
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @ceil_sdiv_adjust(i32 %mode, %struct.rtx_def* %mod, %struct.rtx_def* %op1) #0 !dbg !11888 {
entry:
  %mode.addr = alloca i32, align 4
  %mod.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11889, metadata !DIExpression()), !dbg !11890
  store %struct.rtx_def* %mod, %struct.rtx_def** %mod.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod.addr, metadata !11891, metadata !DIExpression()), !dbg !11892
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !11893, metadata !DIExpression()), !dbg !11894
  %0 = load i32, i32* %mode.addr, align 4, !dbg !11895
  %1 = load %struct.rtx_def*, %struct.rtx_def** %mod.addr, align 8, !dbg !11895
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11895
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 80, i32 13, %struct.rtx_def* %1, %struct.rtx_def* %2), !dbg !11895
  %3 = load i32, i32* %mode.addr, align 4, !dbg !11895
  %4 = load i32, i32* %mode.addr, align 4, !dbg !11895
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11895
  %6 = load %struct.rtx_def*, %struct.rtx_def** %mod.addr, align 8, !dbg !11895
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 55, i32 %4, %struct.rtx_def* %5, %struct.rtx_def* %6), !dbg !11895
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11895
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 83, i32 13, %struct.rtx_def* %call1, %struct.rtx_def* %7), !dbg !11895
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !11895
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11895
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %3, %struct.rtx_def* %call2, %struct.rtx_def* %8, %struct.rtx_def* %9), !dbg !11895
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11895
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %0, %struct.rtx_def* %call, %struct.rtx_def* %call3, %struct.rtx_def* %10), !dbg !11895
  ret %struct.rtx_def* %call4, !dbg !11896
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @round_udiv_adjust(i32 %mode, %struct.rtx_def* %mod, %struct.rtx_def* %op1) #0 !dbg !11897 {
entry:
  %mode.addr = alloca i32, align 4
  %mod.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11898, metadata !DIExpression()), !dbg !11899
  store %struct.rtx_def* %mod, %struct.rtx_def** %mod.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod.addr, metadata !11900, metadata !DIExpression()), !dbg !11901
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !11902, metadata !DIExpression()), !dbg !11903
  %0 = load i32, i32* %mode.addr, align 4, !dbg !11904
  %1 = load %struct.rtx_def*, %struct.rtx_def** %mod.addr, align 8, !dbg !11904
  %2 = load i32, i32* %mode.addr, align 4, !dbg !11904
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11904
  %4 = load %struct.rtx_def*, %struct.rtx_def** %mod.addr, align 8, !dbg !11904
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %2, %struct.rtx_def* %3, %struct.rtx_def* %4), !dbg !11904
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 82, i32 13, %struct.rtx_def* %1, %struct.rtx_def* %call), !dbg !11904
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !11904
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11904
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %0, %struct.rtx_def* %call1, %struct.rtx_def* %5, %struct.rtx_def* %6), !dbg !11904
  ret %struct.rtx_def* %call2, !dbg !11905
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @round_sdiv_adjust(i32 %mode, %struct.rtx_def* %mod, %struct.rtx_def* %op1) #0 !dbg !11906 {
entry:
  %mode.addr = alloca i32, align 4
  %mod.addr = alloca %struct.rtx_def*, align 8
  %op1.addr = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11907, metadata !DIExpression()), !dbg !11908
  store %struct.rtx_def* %mod, %struct.rtx_def** %mod.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mod.addr, metadata !11909, metadata !DIExpression()), !dbg !11910
  store %struct.rtx_def* %op1, %struct.rtx_def** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op1.addr, metadata !11911, metadata !DIExpression()), !dbg !11912
  %0 = load i32, i32* %mode.addr, align 4, !dbg !11913
  %1 = load i32, i32* %mode.addr, align 4, !dbg !11913
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mod.addr, align 8, !dbg !11913
  %call = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 111, i32 %1, %struct.rtx_def* %2), !dbg !11913
  %3 = load i32, i32* %mode.addr, align 4, !dbg !11913
  %4 = load i32, i32* %mode.addr, align 4, !dbg !11913
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11913
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 111, i32 %4, %struct.rtx_def* %5), !dbg !11913
  %6 = load i32, i32* %mode.addr, align 4, !dbg !11913
  %7 = load %struct.rtx_def*, %struct.rtx_def** %mod.addr, align 8, !dbg !11913
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 111, i32 %6, %struct.rtx_def* %7), !dbg !11913
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 50, i32 %3, %struct.rtx_def* %call1, %struct.rtx_def* %call2), !dbg !11913
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 82, i32 13, %struct.rtx_def* %call, %struct.rtx_def* %call3), !dbg !11913
  %8 = load i32, i32* %mode.addr, align 4, !dbg !11913
  %9 = load i32, i32* %mode.addr, align 4, !dbg !11913
  %10 = load %struct.rtx_def*, %struct.rtx_def** %op1.addr, align 8, !dbg !11913
  %11 = load %struct.rtx_def*, %struct.rtx_def** %mod.addr, align 8, !dbg !11913
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 55, i32 %9, %struct.rtx_def* %10, %struct.rtx_def* %11), !dbg !11913
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11913
  %call6 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 83, i32 13, %struct.rtx_def* %call5, %struct.rtx_def* %12), !dbg !11913
  %13 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !11913
  %14 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !11913
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %8, %struct.rtx_def* %call6, %struct.rtx_def* %13, %struct.rtx_def* %14), !dbg !11913
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11913
  %call8 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %0, %struct.rtx_def* %call4, %struct.rtx_def* %call7, %struct.rtx_def* %15), !dbg !11913
  ret %struct.rtx_def* %call8, !dbg !11914
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @int_mode_for_mode(i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_SUBREG(i32, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @convert_debug_memory_address(i32 %mode, %struct.rtx_def* %x) #0 !dbg !11915 {
entry:
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %xmode = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11918, metadata !DIExpression()), !dbg !11919
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !11920, metadata !DIExpression()), !dbg !11921
  call void @llvm.dbg.declare(metadata i32* %xmode, metadata !11922, metadata !DIExpression()), !dbg !11923
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11924
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !11924
  %bf.load = load i32, i32* %1, align 8, !dbg !11924
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !11924
  %bf.clear = and i32 %bf.lshr, 255, !dbg !11924
  store i32 %bf.clear, i32* %xmode, align 4, !dbg !11923
  %2 = load i32, i32* %mode.addr, align 4, !dbg !11925
  %cmp = icmp eq i32 %2, 16, !dbg !11925
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11925

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 2202, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11925
  br label %cond.end, !dbg !11925

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11925

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11925
  %3 = load i32, i32* %xmode, align 4, !dbg !11926
  %4 = load i32, i32* %mode.addr, align 4, !dbg !11926
  %cmp1 = icmp eq i32 %3, %4, !dbg !11926
  br i1 %cmp1, label %cond.false4, label %lor.lhs.false, !dbg !11926

lor.lhs.false:                                    ; preds = %cond.end
  %5 = load i32, i32* %xmode, align 4, !dbg !11926
  %cmp2 = icmp eq i32 %5, 0, !dbg !11926
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !11926

cond.true3:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 2203, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11926
  br label %cond.end5, !dbg !11926

cond.false4:                                      ; preds = %lor.lhs.false, %cond.end
  br label %cond.end5, !dbg !11926

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !11926
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11927
  ret %struct.rtx_def* %6, !dbg !11928
}

declare dso_local %union.tree_node* @build_constructor_from_list(%union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_E_stat(i32, i32, %struct.rtvec_def*) #2

declare dso_local %struct.rtvec_def* @rtvec_alloc(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %vec_) #0 !dbg !11929 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !11934, metadata !DIExpression()), !dbg !11935
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !11935
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !11935
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11935

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !11935
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %1, i32 0, i32 0, !dbg !11935
  %2 = load i32, i32* %num, align 8, !dbg !11935
  br label %cond.end, !dbg !11935

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11935

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !11935
  ret i32 %cond, !dbg !11935
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %vec_, i32 %ix_) #0 !dbg !11936 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !11941, metadata !DIExpression()), !dbg !11942
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !11943, metadata !DIExpression()), !dbg !11942
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !11942
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !11942
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !11942

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !11942
  %2 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !11942
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %2, i32 0, i32 0, !dbg !11942
  %3 = load i32, i32* %num, align 8, !dbg !11942
  %cmp = icmp ult i32 %1, %3, !dbg !11942
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !11944
  %land.ext = zext i1 %4 to i32, !dbg !11942
  %5 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !11942
  %vec = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %5, i32 0, i32 2, !dbg !11942
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !11942
  %idxprom = zext i32 %6 to i64, !dbg !11942
  %arrayidx = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec, i64 0, i64 %idxprom, !dbg !11942
  ret %struct.constructor_elt_d* %arrayidx, !dbg !11942
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @expand_function_end() #2

declare dso_local void @fixup_tail_calls() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3643, !3644, !3645}
!llvm.ident = !{!3646}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "stack_vars_num", scope: !2, file: !3, line: 179, type: !2140, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !2135, globals: !3556, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "cfgexpand.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !329, !336, !342, !347, !352, !370, !377, !384, !391, !404, !411, !587, !625, !651, !785, !822, !965, !979, !995, !1869, !1992, !2006, !2020, !2027, !2032, !2066, !2076, !2091, !2097, !2110, !2113}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !330, line: 30, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!331 = !{!332, !333, !334, !335}
!332 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !337, line: 363, baseType: !7, size: 32, elements: !338)
!337 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!338 = !{!339, !340, !341}
!339 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!340 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!341 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !337, line: 355, baseType: !7, size: 32, elements: !343)
!343 = !{!344, !345, !346}
!344 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!345 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!346 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!347 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !348, line: 474, baseType: !7, size: 32, elements: !349)
!348 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!349 = !{!350, !351}
!350 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!352 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !353)
!353 = !{!354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369}
!354 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383}
!379 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !385, line: 80, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!386 = !{!387, !388, !389, !390}
!387 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!391 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !392)
!392 = !{!393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403}
!393 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!397 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!398 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!399 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!400 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!401 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!402 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!403 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!404 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !405, line: 104, baseType: !7, size: 32, elements: !406)
!405 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!406 = !{!407, !408, !409, !410}
!407 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!408 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!409 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!410 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!411 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !412, line: 74, baseType: !7, size: 32, elements: !413)
!412 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!413 = !{!414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586}
!414 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!586 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!587 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !385, line: 51, baseType: !7, size: 32, elements: !588)
!588 = !{!589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624}
!589 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!590 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!591 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!592 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!593 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!598 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!599 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!613 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!618 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!619 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!620 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!621 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!622 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!623 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!624 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!625 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !385, line: 727, baseType: !7, size: 32, elements: !626)
!626 = !{!627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650}
!627 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!628 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!629 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!630 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!631 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!632 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!633 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!634 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!635 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!636 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!637 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!638 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!639 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!640 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!641 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!642 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!643 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!644 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!645 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!646 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!647 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!648 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!649 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!650 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!651 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !135, line: 3410, baseType: !7, size: 32, elements: !652)
!652 = !{!653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784}
!653 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!654 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!655 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!656 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!657 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!658 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!659 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!660 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!661 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!662 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!663 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!664 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!665 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!666 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!667 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!668 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!669 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!670 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!671 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!672 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!673 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!674 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!675 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!676 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!677 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!678 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!679 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!680 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!681 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!682 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!683 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!684 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!685 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!686 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!687 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!688 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!689 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!690 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!691 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!692 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!693 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!708 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!709 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!710 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!711 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!712 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!713 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!714 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!715 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!716 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!717 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!718 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!719 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!720 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!721 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!722 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!723 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!724 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!725 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!726 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!727 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!728 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!729 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!730 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!731 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!732 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!733 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!734 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!735 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!736 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!737 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!738 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!739 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!740 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!741 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!742 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!743 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!744 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!745 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!746 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!747 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!748 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!749 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!750 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!751 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!752 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!753 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!754 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!755 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!756 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!757 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!758 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!759 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!760 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!761 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!762 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!763 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!764 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!765 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!766 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!767 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!768 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!769 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!770 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!771 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!772 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!773 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!774 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!775 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!776 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!777 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!778 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!779 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!780 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!781 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!782 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!783 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!784 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!785 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !135, line: 630, baseType: !7, size: 32, elements: !786)
!786 = !{!787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821}
!787 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!788 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!789 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!790 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!791 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!792 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!793 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!794 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!795 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!796 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!797 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!798 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!799 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!800 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!801 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!802 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!803 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!804 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!805 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!806 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!807 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!808 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!809 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!810 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!811 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!812 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!813 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!814 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!815 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!816 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!817 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!818 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!819 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!820 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!821 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!822 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !823, line: 45, baseType: !7, size: 32, elements: !824)
!823 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!824 = !{!825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964}
!825 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!826 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!827 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!828 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!829 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!830 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!831 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!832 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!833 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!834 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!835 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!836 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!837 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!838 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!839 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!840 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!841 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!842 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!843 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!844 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!845 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!846 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!847 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!848 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!849 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!850 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!851 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!852 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!853 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!854 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!855 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!856 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!857 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!858 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!859 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!860 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!861 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!862 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!863 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!864 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!865 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!866 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!867 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!868 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!869 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!870 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!871 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!872 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!873 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!874 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!875 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!876 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!877 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!878 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!879 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!880 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!881 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!882 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!883 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!884 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!885 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!886 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!887 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!888 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!889 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!890 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!891 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!892 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!893 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!894 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!895 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!896 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!897 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!898 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!899 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!900 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!901 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!902 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!903 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!904 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!905 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!906 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!907 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!908 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!909 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!910 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!911 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!912 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!913 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!914 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!915 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!916 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!917 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!918 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!919 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!920 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!921 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!922 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!923 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!924 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!925 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!926 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!927 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!928 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!929 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!930 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!931 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!932 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!933 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!934 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!935 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!936 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!937 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!938 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!939 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!940 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!941 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!942 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!943 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!944 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!945 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!946 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!947 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!948 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!949 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!950 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!951 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!952 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!953 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!954 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!955 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!956 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!957 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!958 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!959 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!960 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!961 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!962 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!963 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!964 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!965 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !823, line: 1994, baseType: !7, size: 32, elements: !966)
!966 = !{!967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978}
!967 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!968 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!969 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!970 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!971 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!972 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!973 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!974 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!975 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!976 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!977 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!978 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!979 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !823, line: 956, baseType: !7, size: 32, elements: !980)
!980 = !{!981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994}
!981 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!982 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!983 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!984 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!985 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!986 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!987 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!988 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!989 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!990 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!991 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!992 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!993 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!994 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!995 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !996, line: 723, baseType: !7, size: 32, elements: !997)
!996 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!997 = !{!998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868}
!998 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!999 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!1000 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!1001 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!1002 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!1003 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!1004 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!1005 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!1006 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!1007 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!1008 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!1009 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!1010 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!1011 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!1012 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!1013 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!1014 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!1015 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!1016 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!1017 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!1018 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!1019 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!1020 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!1021 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!1022 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!1023 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!1024 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!1025 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!1026 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!1027 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!1028 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!1029 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!1030 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!1031 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!1032 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!1033 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!1034 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!1035 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!1036 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!1037 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!1038 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!1039 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!1040 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!1041 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!1042 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!1043 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!1044 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!1045 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!1046 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!1047 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!1048 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!1049 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!1050 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!1051 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!1052 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!1053 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!1054 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!1055 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!1056 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!1057 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!1058 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!1059 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!1060 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!1061 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!1062 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!1063 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!1064 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!1065 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!1066 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!1067 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!1068 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!1069 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!1070 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!1071 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!1072 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!1073 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!1074 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!1075 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!1076 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!1077 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!1078 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!1079 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!1080 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!1081 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!1082 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!1083 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!1084 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!1085 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!1086 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!1087 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!1088 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!1089 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!1090 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!1091 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!1092 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!1093 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!1094 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!1095 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!1096 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!1097 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!1098 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!1099 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!1100 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!1101 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!1102 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!1103 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!1104 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!1105 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!1106 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!1107 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!1108 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!1109 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!1110 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!1111 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!1112 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!1113 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!1114 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!1115 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!1116 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!1117 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!1118 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!1119 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!1120 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!1121 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!1122 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!1123 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!1124 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!1125 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!1126 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!1127 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!1128 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!1129 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!1130 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!1131 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!1132 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!1133 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!1134 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!1135 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!1136 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!1137 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!1138 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!1139 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!1140 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!1141 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!1142 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!1143 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!1144 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!1145 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!1146 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!1147 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!1148 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!1149 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!1150 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!1151 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!1152 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!1153 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!1154 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!1155 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!1156 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!1157 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!1158 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!1159 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!1160 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!1161 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!1162 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!1163 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!1164 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!1165 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!1166 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!1167 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!1168 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!1169 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!1170 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!1171 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!1172 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!1173 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!1174 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!1175 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!1176 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!1177 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!1178 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!1179 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!1180 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!1181 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!1182 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!1183 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!1184 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!1185 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!1186 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!1187 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!1188 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!1189 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!1190 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!1191 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!1192 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!1193 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!1194 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!1195 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!1196 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!1197 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!1198 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!1199 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!1200 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!1201 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!1202 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!1203 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!1204 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!1205 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!1206 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!1207 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!1208 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!1209 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!1210 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!1211 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!1212 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!1213 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!1214 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!1215 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!1216 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!1217 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!1218 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!1219 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!1220 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!1221 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!1222 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!1223 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!1224 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!1225 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!1226 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!1227 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!1228 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!1229 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!1230 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!1231 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!1232 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!1233 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!1234 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!1235 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!1236 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!1237 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!1238 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!1239 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!1240 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!1241 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!1242 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!1243 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!1244 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!1245 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!1246 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!1247 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!1248 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!1249 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!1250 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!1251 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!1252 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!1253 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!1254 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!1255 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!1256 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!1257 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!1258 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!1259 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!1260 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!1261 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!1262 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!1263 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!1264 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!1265 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!1266 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!1267 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!1268 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!1269 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!1270 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!1271 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!1272 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!1273 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!1274 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!1275 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!1276 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!1277 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!1278 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!1279 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!1280 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!1281 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!1282 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!1283 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!1284 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!1285 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!1286 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!1287 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!1288 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!1289 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!1290 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!1291 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!1292 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!1293 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!1294 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!1295 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!1296 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!1297 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!1298 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!1299 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!1300 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!1301 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!1302 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!1304 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!1305 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!1306 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!1307 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!1308 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!1309 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!1310 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!1311 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!1312 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!1313 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!1314 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!1315 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!1316 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!1317 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!1318 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!1319 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!1320 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!1321 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!1322 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!1323 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!1324 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!1325 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!1326 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!1327 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!1328 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!1329 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!1330 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!1331 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!1332 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!1333 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!1334 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!1335 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!1336 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!1337 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!1338 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!1339 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!1340 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!1341 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!1342 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!1343 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!1344 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!1345 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!1346 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!1347 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!1348 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!1349 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!1350 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!1351 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!1352 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!1353 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!1354 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!1355 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!1356 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!1357 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!1358 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!1359 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!1360 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!1361 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!1362 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!1363 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!1364 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!1365 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!1366 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!1367 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!1368 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!1369 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!1370 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!1371 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!1372 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!1373 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!1374 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!1375 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!1376 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!1377 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!1378 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!1379 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!1380 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!1381 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!1382 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!1383 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!1384 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!1385 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!1386 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!1387 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!1388 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!1389 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!1390 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!1391 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!1392 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!1393 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!1394 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!1395 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!1396 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!1397 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!1398 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!1399 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!1400 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!1401 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!1402 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!1403 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!1404 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!1405 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!1406 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!1407 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!1408 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!1409 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!1410 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!1411 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!1412 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!1413 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!1414 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!1415 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!1416 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!1417 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!1418 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!1419 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!1420 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!1421 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!1422 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!1423 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!1424 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!1425 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!1426 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!1427 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!1428 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!1429 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!1430 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!1431 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!1432 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!1433 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!1434 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!1435 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!1436 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!1437 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!1438 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!1439 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!1440 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!1441 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!1442 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!1443 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!1444 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!1445 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!1446 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!1447 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!1448 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!1449 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!1450 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!1451 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!1452 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!1453 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!1454 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!1455 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!1456 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!1457 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!1458 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!1459 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!1460 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!1461 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!1462 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!1463 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!1464 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!1465 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!1466 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!1467 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!1468 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!1469 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!1470 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!1471 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!1472 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!1473 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!1474 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!1475 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!1476 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!1477 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!1478 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!1479 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!1480 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!1481 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!1482 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!1483 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!1484 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!1485 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!1486 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!1487 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!1488 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!1489 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!1490 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!1491 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!1492 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!1493 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!1494 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!1495 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!1496 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!1497 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!1498 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!1499 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!1500 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!1501 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!1502 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!1503 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!1504 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!1505 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!1506 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!1507 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!1508 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!1509 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!1510 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!1511 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!1512 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!1513 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!1514 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!1515 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!1516 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!1517 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!1518 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!1519 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!1520 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!1521 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!1522 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!1523 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!1524 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!1525 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!1526 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!1527 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!1528 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!1529 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!1530 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!1531 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!1532 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!1533 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!1534 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!1535 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!1536 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!1537 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!1538 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!1539 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!1540 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!1541 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!1542 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!1543 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!1544 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!1545 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!1546 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!1547 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!1548 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!1549 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!1550 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!1551 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!1552 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!1553 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!1554 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!1555 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!1556 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!1557 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!1558 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!1559 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!1560 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!1561 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!1562 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!1563 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!1564 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!1565 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!1566 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!1567 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!1568 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!1569 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!1570 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!1571 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!1572 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!1573 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!1574 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!1575 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!1576 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!1577 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!1578 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!1579 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!1580 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!1581 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!1582 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!1583 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!1584 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!1585 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!1586 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!1587 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!1588 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!1589 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!1590 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!1591 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!1592 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!1593 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!1594 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!1595 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!1596 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!1597 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!1598 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!1599 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!1600 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!1601 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!1602 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!1603 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!1604 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!1605 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!1606 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!1607 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!1608 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!1609 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!1610 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!1611 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!1612 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!1613 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!1614 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!1615 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!1616 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!1617 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!1618 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!1619 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!1620 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!1621 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!1622 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!1623 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!1624 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!1625 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!1626 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!1627 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!1628 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!1629 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!1630 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!1631 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!1632 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!1633 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!1634 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!1635 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!1636 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!1637 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!1638 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!1639 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!1640 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!1641 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!1642 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!1643 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!1644 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!1645 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!1646 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!1647 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!1648 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!1649 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!1650 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!1651 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!1652 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!1653 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!1654 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!1655 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!1656 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!1657 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!1658 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!1659 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!1660 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!1661 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!1662 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!1663 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!1664 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!1665 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!1666 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!1667 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!1668 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!1669 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!1670 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!1671 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!1672 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!1673 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!1674 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!1675 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!1676 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!1677 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!1678 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!1679 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!1680 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!1681 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!1682 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!1683 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!1684 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!1685 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!1686 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!1687 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!1688 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!1689 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!1690 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!1691 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!1692 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!1693 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!1694 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!1695 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!1696 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!1697 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!1698 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!1699 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!1700 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!1701 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!1702 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!1703 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!1704 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!1705 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!1706 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!1707 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!1708 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!1709 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!1710 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!1711 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!1712 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!1713 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!1714 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!1715 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!1716 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!1717 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!1718 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!1719 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!1720 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!1721 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!1722 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!1723 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!1724 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!1725 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!1726 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!1727 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!1728 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!1729 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!1730 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!1731 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!1732 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!1733 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!1734 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!1735 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!1736 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!1737 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!1738 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!1739 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!1740 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!1741 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!1742 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!1743 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!1744 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!1745 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!1746 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!1747 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!1748 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!1749 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!1750 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!1751 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!1752 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!1753 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!1754 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!1755 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!1756 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!1757 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!1758 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!1759 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!1760 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!1761 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!1762 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!1763 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!1764 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!1765 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!1766 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!1767 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!1768 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!1769 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!1770 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!1771 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!1772 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!1773 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!1774 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!1775 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!1776 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!1777 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!1778 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!1779 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!1780 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!1781 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!1782 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!1783 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!1784 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!1785 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!1786 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!1787 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!1788 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!1789 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!1790 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!1791 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!1792 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!1793 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!1794 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!1795 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!1796 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!1797 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!1798 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!1799 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!1800 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!1801 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!1802 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!1803 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!1804 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!1805 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!1806 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!1807 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!1808 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!1809 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!1810 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!1811 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!1812 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!1813 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!1814 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!1815 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!1816 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!1817 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!1818 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!1819 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!1820 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!1821 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!1822 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!1823 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!1824 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!1825 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!1826 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!1827 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!1828 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!1829 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!1830 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!1831 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!1832 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!1833 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!1834 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!1835 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!1836 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!1837 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!1838 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!1839 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!1840 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!1841 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!1842 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!1843 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!1844 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!1845 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!1846 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!1847 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!1848 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!1849 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!1850 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!1851 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!1852 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!1853 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!1854 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!1855 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!1856 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!1857 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!1858 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!1859 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!1860 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!1861 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!1862 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!1863 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!1864 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!1865 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!1866 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!1867 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!1868 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!1869 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !1870, line: 82, baseType: !7, size: 32, elements: !1871)
!1870 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1871 = !{!1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991}
!1872 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!1873 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!1874 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!1875 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!1876 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!1877 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!1878 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!1879 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!1880 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!1881 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!1882 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!1883 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!1884 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!1885 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!1886 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!1887 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!1888 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!1889 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!1890 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!1891 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!1892 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!1893 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!1894 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!1895 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!1896 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!1897 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!1898 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!1899 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!1900 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!1901 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!1902 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!1903 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!1904 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!1905 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!1906 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!1907 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!1908 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!1909 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!1910 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!1911 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!1912 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!1913 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!1914 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!1915 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!1916 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!1917 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!1918 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!1919 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!1920 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!1921 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!1922 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!1923 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!1924 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!1925 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!1926 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!1927 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!1928 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!1929 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!1930 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!1931 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!1932 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!1933 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!1934 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!1935 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!1936 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!1937 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!1938 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!1939 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!1940 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!1941 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!1942 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!1943 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!1944 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!1945 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!1946 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!1947 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!1948 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!1949 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!1950 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!1951 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!1952 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!1953 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!1954 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!1955 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!1956 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!1957 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!1958 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!1959 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!1960 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!1961 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!1962 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!1963 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!1964 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!1965 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!1966 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!1967 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!1968 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!1969 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!1970 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!1971 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!1972 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!1973 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!1974 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!1975 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!1976 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!1977 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!1978 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!1979 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!1980 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!1981 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!1982 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!1983 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!1984 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!1985 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!1986 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!1987 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!1988 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!1989 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!1990 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!1991 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!1992 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !337, line: 295, baseType: !7, size: 32, elements: !1993)
!1993 = !{!1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005}
!1994 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1995 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1996 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1997 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1998 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1999 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!2000 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!2001 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!2002 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!2003 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!2004 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!2005 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!2006 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !135, line: 3745, baseType: !7, size: 32, elements: !2007)
!2007 = !{!2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019}
!2008 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!2009 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!2010 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!2011 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!2012 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!2013 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!2014 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!2015 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!2016 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!2017 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!2018 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!2019 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!2020 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !2021, line: 119, baseType: !7, size: 32, elements: !2022)
!2021 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2022 = !{!2023, !2024, !2025, !2026}
!2023 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!2024 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!2025 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!2026 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!2027 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "var_init_status", file: !823, line: 940, baseType: !7, size: 32, elements: !2028)
!2028 = !{!2029, !2030, !2031}
!2029 = !DIEnumerator(name: "VAR_INIT_STATUS_UNKNOWN", value: 0, isUnsigned: true)
!2030 = !DIEnumerator(name: "VAR_INIT_STATUS_UNINITIALIZED", value: 1, isUnsigned: true)
!2031 = !DIEnumerator(name: "VAR_INIT_STATUS_INITIALIZED", value: 2, isUnsigned: true)
!2032 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !823, line: 836, baseType: !7, size: 32, elements: !2033)
!2033 = !{!2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065}
!2034 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!2035 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!2036 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!2037 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!2038 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!2039 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!2040 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!2041 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!2042 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!2043 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!2044 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!2045 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!2046 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!2047 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!2048 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!2049 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!2050 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!2051 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!2052 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!2053 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!2054 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!2055 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!2056 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!2057 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!2058 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!2059 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!2060 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!2061 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!2062 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!2063 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!2064 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!2065 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!2066 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "expand_modifier", file: !2067, line: 52, baseType: !7, size: 32, elements: !2068)
!2067 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2068 = !{!2069, !2070, !2071, !2072, !2073, !2074, !2075}
!2069 = !DIEnumerator(name: "EXPAND_NORMAL", value: 0, isUnsigned: true)
!2070 = !DIEnumerator(name: "EXPAND_STACK_PARM", value: 1, isUnsigned: true)
!2071 = !DIEnumerator(name: "EXPAND_SUM", value: 2, isUnsigned: true)
!2072 = !DIEnumerator(name: "EXPAND_CONST_ADDRESS", value: 3, isUnsigned: true)
!2073 = !DIEnumerator(name: "EXPAND_INITIALIZER", value: 4, isUnsigned: true)
!2074 = !DIEnumerator(name: "EXPAND_WRITE", value: 5, isUnsigned: true)
!2075 = !DIEnumerator(name: "EXPAND_MEMORY", value: 6, isUnsigned: true)
!2076 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !823, line: 60, baseType: !7, size: 32, elements: !2077)
!2077 = !{!2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090}
!2078 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!2079 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!2080 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!2081 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!2082 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!2083 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!2084 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!2085 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!2086 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!2087 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!2088 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!2089 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!2090 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!2091 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !135, line: 205, baseType: !7, size: 32, elements: !2092)
!2092 = !{!2093, !2094, !2095, !2096}
!2093 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!2094 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!2095 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!2096 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!2097 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !385, line: 100, baseType: !7, size: 32, elements: !2098)
!2098 = !{!2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109}
!2099 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!2100 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!2101 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!2102 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!2103 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!2104 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!2105 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!2106 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!2107 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!2108 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!2109 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!2110 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_debug_subcode", file: !385, line: 124, baseType: !7, size: 32, elements: !2111)
!2111 = !{!2112}
!2112 = !DIEnumerator(name: "GIMPLE_DEBUG_BIND", value: 0, isUnsigned: true)
!2113 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !2114, line: 36, baseType: !7, size: 32, elements: !2115)
!2114 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2115 = !{!2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134}
!2116 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!2117 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!2118 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!2119 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!2120 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!2121 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!2122 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!2123 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!2124 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!2125 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!2126 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!2127 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!2128 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!2129 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!2130 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!2131 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!2132 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!2133 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!2134 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!2135 = !{!2136, !134, !2137, !2139, !384, !2143, !3534, !2326, !2316, !2834, !2301, !822, !3536, !2140, !7, !2806, !3546, !2207, !3547, !2295, !3548, !3550, !2142, !5, !3551, !3554, !2232, !2113, !3555}
!2136 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!2137 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !2138, line: 44, baseType: !7)
!2138 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2140, size: 64)
!2140 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2141, line: 46, baseType: !2142)
!2141 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2142 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!2143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2144, size: 64)
!2144 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !385, line: 737, size: 768, elements: !2145)
!2145 = !{!2146, !3381, !3391, !3397, !3402, !3407, !3414, !3420, !3426, !3431, !3445, !3450, !3456, !3461, !3471, !3476, !3492, !3499, !3506, !3512, !3517, !3523, !3529}
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2144, file: !385, line: 738, baseType: !2147, size: 256)
!2147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !385, line: 271, size: 256, elements: !2148)
!2148 = !{!2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2162, !2163, !3380}
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2147, file: !385, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !2147, file: !385, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2147, file: !385, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !2147, file: !385, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !2147, file: !385, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2147, file: !385, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !2147, file: !385, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2147, file: !385, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2147, file: !385, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2147, file: !385, line: 312, baseType: !7, size: 32, offset: 32)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !2147, file: !385, line: 316, baseType: !2160, size: 32, offset: 64)
!2160 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !2161, line: 58, baseType: !2137)
!2161 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !2147, file: !385, line: 319, baseType: !7, size: 32, offset: 96)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2147, file: !385, line: 323, baseType: !2164, size: 64, offset: 128)
!2164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2165, size: 64)
!2165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !337, line: 217, size: 832, elements: !2166)
!2166 = !{!2167, !3345, !3346, !3347, !3350, !3354, !3355, !3356, !3374, !3375, !3376, !3377, !3378, !3379}
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2165, file: !337, line: 219, baseType: !2168, size: 64)
!2168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2169, size: 64)
!2169 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !337, line: 151, baseType: !2170)
!2170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !337, line: 151, size: 128, elements: !2171)
!2171 = !{!2172}
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2170, file: !337, line: 151, baseType: !2173, size: 128)
!2173 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !337, line: 150, baseType: !2174)
!2174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !337, line: 150, size: 128, elements: !2175)
!2175 = !{!2176, !2177, !2178}
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2174, file: !337, line: 150, baseType: !7, size: 32)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2174, file: !337, line: 150, baseType: !7, size: 32, offset: 32)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2174, file: !337, line: 150, baseType: !2179, size: 64, offset: 64)
!2179 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2180, size: 64, elements: !2244)
!2180 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !2181, line: 108, baseType: !2182)
!2181 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2183, size: 64)
!2183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !337, line: 122, size: 512, elements: !2184)
!2184 = !{!2185, !2186, !2187, !3337, !3338, !3339, !3340, !3341, !3342, !3343}
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2183, file: !337, line: 124, baseType: !2164, size: 64)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2183, file: !337, line: 125, baseType: !2164, size: 64, offset: 64)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2183, file: !337, line: 131, baseType: !2188, size: 64, offset: 128)
!2188 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !337, line: 128, size: 64, elements: !2189)
!2189 = !{!2190, !2206}
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2188, file: !337, line: 129, baseType: !2191, size: 64)
!2191 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !2181, line: 66, baseType: !2192)
!2192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2193, size: 64)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !385, line: 143, size: 192, elements: !2194)
!2194 = !{!2195, !2204, !2205}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2193, file: !385, line: 145, baseType: !2196, size: 64)
!2196 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !2181, line: 69, baseType: !2197)
!2197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2198, size: 64)
!2198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !385, line: 136, size: 192, elements: !2199)
!2199 = !{!2200, !2202, !2203}
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2198, file: !385, line: 137, baseType: !2201, size: 64)
!2201 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !2181, line: 58, baseType: !2143)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2198, file: !385, line: 138, baseType: !2197, size: 64, offset: 64)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2198, file: !385, line: 139, baseType: !2197, size: 64, offset: 128)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2193, file: !385, line: 146, baseType: !2196, size: 64, offset: 64)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2193, file: !385, line: 152, baseType: !2191, size: 64, offset: 128)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2188, file: !337, line: 130, baseType: !2207, size: 64)
!2207 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !2181, line: 50, baseType: !2208)
!2208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2209, size: 64)
!2209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !823, line: 240, size: 384, elements: !2210)
!2210 = !{!2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221}
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2209, file: !823, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2209, file: !823, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !2209, file: !823, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2209, file: !823, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !2209, file: !823, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !2209, file: !823, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !2209, file: !823, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2209, file: !823, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !2209, file: !823, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !2209, file: !823, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2209, file: !823, line: 321, baseType: !2222, size: 320, offset: 64)
!2222 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !823, line: 315, size: 320, elements: !2223)
!2223 = !{!2224, !3304, !3306, !3335, !3336}
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2222, file: !823, line: 316, baseType: !2225, size: 64)
!2225 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2226, size: 64, elements: !2244)
!2226 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !823, line: 183, baseType: !2227)
!2227 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !823, line: 166, size: 64, elements: !2228)
!2228 = !{!2229, !2230, !2231, !2235, !2236, !2246, !2247, !2259, !2262, !2325, !3282, !3283, !3294, !3301}
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !2227, file: !823, line: 168, baseType: !2136, size: 32)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !2227, file: !823, line: 169, baseType: !7, size: 32)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !2227, file: !823, line: 170, baseType: !2232, size: 64)
!2232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2233, size: 64)
!2233 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2234)
!2234 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !2227, file: !823, line: 171, baseType: !2207, size: 64)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !2227, file: !823, line: 172, baseType: !2237, size: 64)
!2237 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !2181, line: 53, baseType: !2238)
!2238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2239, size: 64)
!2239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !823, line: 359, size: 128, elements: !2240)
!2240 = !{!2241, !2242}
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !2239, file: !823, line: 360, baseType: !2136, size: 32)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !2239, file: !823, line: 361, baseType: !2243, size: 64, offset: 64)
!2243 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2207, size: 64, elements: !2244)
!2244 = !{!2245}
!2245 = !DISubrange(count: 1)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !2227, file: !823, line: 173, baseType: !5, size: 32)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !2227, file: !823, line: 174, baseType: !2248, size: 32)
!2248 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !823, line: 133, baseType: !2249)
!2249 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !823, line: 115, size: 32, elements: !2250)
!2250 = !{!2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258}
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !2249, file: !823, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !2249, file: !823, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !2249, file: !823, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !2249, file: !823, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !2249, file: !823, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !2249, file: !823, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !2249, file: !823, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !2249, file: !823, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !2227, file: !823, line: 175, baseType: !2260, size: 64)
!2260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2261, size: 64)
!2261 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !823, line: 175, flags: DIFlagFwdDecl)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !2227, file: !823, line: 176, baseType: !2263, size: 64)
!2263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2264, size: 64)
!2264 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2265, line: 75, size: 256, elements: !2266)
!2265 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2266 = !{!2267, !2281, !2282, !2283}
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2264, file: !2265, line: 76, baseType: !2268, size: 64)
!2268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2269, size: 64)
!2269 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2265, line: 68, baseType: !2270)
!2270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2265, line: 63, size: 320, elements: !2271)
!2271 = !{!2272, !2274, !2275, !2276}
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2270, file: !2265, line: 64, baseType: !2273, size: 64)
!2273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2270, size: 64)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2270, file: !2265, line: 65, baseType: !2273, size: 64, offset: 64)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2270, file: !2265, line: 66, baseType: !7, size: 32, offset: 128)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2270, file: !2265, line: 67, baseType: !2277, size: 128, offset: 192)
!2277 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2278, size: 128, elements: !2279)
!2278 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2265, line: 29, baseType: !2142)
!2279 = !{!2280}
!2280 = !DISubrange(count: 2)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2264, file: !2265, line: 77, baseType: !2268, size: 64, offset: 64)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2264, file: !2265, line: 78, baseType: !7, size: 32, offset: 128)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2264, file: !2265, line: 79, baseType: !2284, size: 64, offset: 192)
!2284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2285, size: 64)
!2285 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2265, line: 49, baseType: !2286)
!2286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2265, line: 45, size: 832, elements: !2287)
!2287 = !{!2288, !2289, !2290}
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2286, file: !2265, line: 46, baseType: !2273, size: 64)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2286, file: !2265, line: 47, baseType: !2263, size: 64, offset: 64)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2286, file: !2265, line: 48, baseType: !2291, size: 704, offset: 128)
!2291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2292, line: 164, size: 704, elements: !2293)
!2292 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2293 = !{!2294, !2296, !2307, !2308, !2309, !2310, !2311, !2312, !2317, !2321, !2322, !2323, !2324}
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2291, file: !2292, line: 166, baseType: !2295, size: 64)
!2295 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2291, file: !2292, line: 167, baseType: !2297, size: 64, offset: 64)
!2297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2298, size: 64)
!2298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2292, line: 157, size: 192, elements: !2299)
!2299 = !{!2300, !2302, !2303}
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2298, file: !2292, line: 159, baseType: !2301, size: 64)
!2301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2234, size: 64)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2298, file: !2292, line: 160, baseType: !2297, size: 64, offset: 64)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2298, file: !2292, line: 161, baseType: !2304, size: 32, offset: 128)
!2304 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2234, size: 32, elements: !2305)
!2305 = !{!2306}
!2306 = !DISubrange(count: 4)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2291, file: !2292, line: 168, baseType: !2301, size: 64, offset: 128)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2291, file: !2292, line: 169, baseType: !2301, size: 64, offset: 192)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2291, file: !2292, line: 170, baseType: !2301, size: 64, offset: 256)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2291, file: !2292, line: 171, baseType: !2295, size: 64, offset: 320)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2291, file: !2292, line: 172, baseType: !2136, size: 32, offset: 384)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2291, file: !2292, line: 176, baseType: !2313, size: 64, offset: 448)
!2313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2314, size: 64)
!2314 = !DISubroutineType(types: !2315)
!2315 = !{!2297, !2316, !2295}
!2316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2291, file: !2292, line: 177, baseType: !2318, size: 64, offset: 512)
!2318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2319, size: 64)
!2319 = !DISubroutineType(types: !2320)
!2320 = !{null, !2316, !2297}
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2291, file: !2292, line: 178, baseType: !2316, size: 64, offset: 576)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2291, file: !2292, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2291, file: !2292, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2291, file: !2292, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !2227, file: !823, line: 177, baseType: !2326, size: 64)
!2326 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !2181, line: 56, baseType: !2327)
!2327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2328, size: 64)
!2328 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !2329)
!2329 = !{!2330, !2363, !2369, !2380, !2399, !2410, !2415, !2422, !2428, !2442, !2450, !2488, !2493, !2521, !2538, !2539, !2544, !2553, !2559, !2564, !2568, !2572, !2932, !2981, !2987, !2993, !3000, !3013, !3027, !3044, !3056, !3078, !3093, !3264}
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2328, file: !135, line: 3372, baseType: !2331, size: 64)
!2331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !2332)
!2332 = !{!2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362}
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2331, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !2331, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !2331, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !2331, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !2331, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !2331, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !2331, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !2331, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !2331, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !2331, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !2331, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !2331, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !2331, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !2331, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !2331, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !2331, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !2331, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !2331, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2331, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2331, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2331, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2331, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2331, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2331, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2331, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2331, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !2331, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !2331, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !2331, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !2331, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2328, file: !135, line: 3373, baseType: !2364, size: 192)
!2364 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !2365)
!2365 = !{!2366, !2367, !2368}
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2364, file: !135, line: 403, baseType: !2331, size: 64)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !2364, file: !135, line: 404, baseType: !2326, size: 64, offset: 64)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2364, file: !135, line: 405, baseType: !2326, size: 64, offset: 128)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2328, file: !135, line: 3374, baseType: !2370, size: 320)
!2370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !2371)
!2371 = !{!2372, !2373}
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2370, file: !135, line: 1385, baseType: !2364, size: 192)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2370, file: !135, line: 1386, baseType: !2374, size: 128, offset: 192)
!2374 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !2375, line: 58, baseType: !2376)
!2375 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2376 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2375, line: 54, size: 128, elements: !2377)
!2377 = !{!2378, !2379}
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !2376, file: !2375, line: 56, baseType: !2142, size: 64)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !2376, file: !2375, line: 57, baseType: !2295, size: 64, offset: 64)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !2328, file: !135, line: 3375, baseType: !2381, size: 256)
!2381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !2382)
!2382 = !{!2383, !2384}
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2381, file: !135, line: 1398, baseType: !2364, size: 192)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !2381, file: !135, line: 1399, baseType: !2385, size: 64, offset: 192)
!2385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2386, size: 64)
!2386 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !2387, line: 52, size: 256, elements: !2388)
!2387 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2388 = !{!2389, !2390, !2391, !2392, !2393, !2394, !2395}
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !2386, file: !2387, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !2386, file: !2387, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !2386, file: !2387, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !2386, file: !2387, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2386, file: !2387, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !2386, file: !2387, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !2386, file: !2387, line: 62, baseType: !2396, size: 192, offset: 64)
!2396 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2142, size: 192, elements: !2397)
!2397 = !{!2398}
!2398 = !DISubrange(count: 3)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !2328, file: !135, line: 3376, baseType: !2400, size: 256)
!2400 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !2401)
!2401 = !{!2402, !2403}
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2400, file: !135, line: 1409, baseType: !2364, size: 192)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !2400, file: !135, line: 1410, baseType: !2404, size: 64, offset: 192)
!2404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2405, size: 64)
!2405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !2406, line: 27, size: 192, elements: !2407)
!2406 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2407 = !{!2408, !2409}
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2405, file: !2406, line: 29, baseType: !2374, size: 128)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2405, file: !2406, line: 30, baseType: !5, size: 32, offset: 128)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !2328, file: !135, line: 3377, baseType: !2411, size: 256)
!2411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !2412)
!2412 = !{!2413, !2414}
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2411, file: !135, line: 1438, baseType: !2364, size: 192)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2411, file: !135, line: 1439, baseType: !2326, size: 64, offset: 192)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2328, file: !135, line: 3378, baseType: !2416, size: 256)
!2416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !2417)
!2417 = !{!2418, !2419, !2420}
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2416, file: !135, line: 1419, baseType: !2364, size: 192)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2416, file: !135, line: 1420, baseType: !2136, size: 32, offset: 192)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2416, file: !135, line: 1421, baseType: !2421, size: 8, offset: 224)
!2421 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2234, size: 8, elements: !2244)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !2328, file: !135, line: 3379, baseType: !2423, size: 320)
!2423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !2424)
!2424 = !{!2425, !2426, !2427}
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2423, file: !135, line: 1429, baseType: !2364, size: 192)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !2423, file: !135, line: 1430, baseType: !2326, size: 64, offset: 192)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !2423, file: !135, line: 1431, baseType: !2326, size: 64, offset: 256)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !2328, file: !135, line: 3380, baseType: !2429, size: 320)
!2429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !2430)
!2430 = !{!2431, !2432}
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2429, file: !135, line: 1461, baseType: !2364, size: 192)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2429, file: !135, line: 1462, baseType: !2433, size: 128, offset: 192)
!2433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !2434, line: 31, size: 128, elements: !2435)
!2434 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2435 = !{!2436, !2440, !2441}
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2433, file: !2434, line: 32, baseType: !2437, size: 64)
!2437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2438, size: 64)
!2438 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2439)
!2439 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2433, file: !2434, line: 33, baseType: !7, size: 32, offset: 64)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !2433, file: !2434, line: 34, baseType: !7, size: 32, offset: 96)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !2328, file: !135, line: 3381, baseType: !2443, size: 384)
!2443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !2444)
!2444 = !{!2445, !2446, !2447, !2448, !2449}
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2443, file: !135, line: 2508, baseType: !2364, size: 192)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2443, file: !135, line: 2509, baseType: !2160, size: 32, offset: 192)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2443, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2443, file: !135, line: 2511, baseType: !2326, size: 64, offset: 256)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2443, file: !135, line: 2512, baseType: !2326, size: 64, offset: 320)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !2328, file: !135, line: 3382, baseType: !2451, size: 896)
!2451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !2452)
!2452 = !{!2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485}
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2451, file: !135, line: 2653, baseType: !2443, size: 384)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2451, file: !135, line: 2654, baseType: !2326, size: 64, offset: 384)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2451, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !2451, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !2451, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !2451, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2451, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !2451, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !2451, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !2451, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2451, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2451, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2451, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2451, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2451, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2451, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2451, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !2451, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !2451, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !2451, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !2451, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !2451, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !2451, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !2451, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !2451, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !2451, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !2451, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2451, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2451, file: !135, line: 2705, baseType: !2326, size: 64, offset: 576)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2451, file: !135, line: 2706, baseType: !2326, size: 64, offset: 640)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2451, file: !135, line: 2707, baseType: !2326, size: 64, offset: 704)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2451, file: !135, line: 2708, baseType: !2326, size: 64, offset: 768)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2451, file: !135, line: 2711, baseType: !2486, size: 64, offset: 832)
!2486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2487, size: 64)
!2487 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !2328, file: !135, line: 3383, baseType: !2489, size: 960)
!2489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !2490)
!2490 = !{!2491, !2492}
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2489, file: !135, line: 2757, baseType: !2451, size: 896)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2489, file: !135, line: 2758, baseType: !2207, size: 64, offset: 896)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !2328, file: !135, line: 3384, baseType: !2494, size: 1472)
!2494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !2495)
!2495 = !{!2496, !2517, !2518, !2519, !2520}
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2494, file: !135, line: 3115, baseType: !2497, size: 1216)
!2497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !2498)
!2498 = !{!2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516}
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2497, file: !135, line: 2985, baseType: !2489, size: 960)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2497, file: !135, line: 2986, baseType: !2326, size: 64, offset: 960)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2497, file: !135, line: 2987, baseType: !2326, size: 64, offset: 1024)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2497, file: !135, line: 2988, baseType: !2326, size: 64, offset: 1088)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2497, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2497, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2497, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2497, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2497, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2497, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2497, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2497, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2497, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2497, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2497, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2497, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2497, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2497, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2494, file: !135, line: 3117, baseType: !2326, size: 64, offset: 1216)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2494, file: !135, line: 3119, baseType: !2326, size: 64, offset: 1280)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2494, file: !135, line: 3121, baseType: !2326, size: 64, offset: 1344)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2494, file: !135, line: 3123, baseType: !2326, size: 64, offset: 1408)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !2328, file: !135, line: 3385, baseType: !2522, size: 1088)
!2522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !2523)
!2523 = !{!2524, !2525, !2526}
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2522, file: !135, line: 2875, baseType: !2489, size: 960)
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2522, file: !135, line: 2876, baseType: !2207, size: 64, offset: 960)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2522, file: !135, line: 2877, baseType: !2527, size: 64, offset: 1024)
!2527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2528, size: 64)
!2528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2529, line: 172, size: 128, elements: !2530)
!2529 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2530 = !{!2531, !2532, !2533, !2534, !2535, !2536, !2537}
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2528, file: !2529, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2528, file: !2529, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2528, file: !2529, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2528, file: !2529, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2528, file: !2529, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2528, file: !2529, line: 195, baseType: !7, size: 32, offset: 32)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2528, file: !2529, line: 199, baseType: !2326, size: 64, offset: 64)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !2328, file: !135, line: 3386, baseType: !2497, size: 1216)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !2328, file: !135, line: 3387, baseType: !2540, size: 1280)
!2540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !2541)
!2541 = !{!2542, !2543}
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2540, file: !135, line: 3094, baseType: !2497, size: 1216)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2540, file: !135, line: 3095, baseType: !2527, size: 64, offset: 1216)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !2328, file: !135, line: 3388, baseType: !2545, size: 1216)
!2545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !2546)
!2546 = !{!2547, !2548, !2549, !2550, !2551, !2552}
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2545, file: !135, line: 2825, baseType: !2451, size: 896)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2545, file: !135, line: 2827, baseType: !2326, size: 64, offset: 896)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2545, file: !135, line: 2828, baseType: !2326, size: 64, offset: 960)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2545, file: !135, line: 2829, baseType: !2326, size: 64, offset: 1024)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2545, file: !135, line: 2830, baseType: !2326, size: 64, offset: 1088)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2545, file: !135, line: 2831, baseType: !2326, size: 64, offset: 1152)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !2328, file: !135, line: 3389, baseType: !2554, size: 1024)
!2554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !2555)
!2555 = !{!2556, !2557, !2558}
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2554, file: !135, line: 2851, baseType: !2489, size: 960)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2554, file: !135, line: 2852, baseType: !2136, size: 32, offset: 960)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2554, file: !135, line: 2853, baseType: !2136, size: 32, offset: 992)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !2328, file: !135, line: 3390, baseType: !2560, size: 1024)
!2560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !2561)
!2561 = !{!2562, !2563}
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2560, file: !135, line: 2858, baseType: !2489, size: 960)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2560, file: !135, line: 2859, baseType: !2527, size: 64, offset: 960)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !2328, file: !135, line: 3391, baseType: !2565, size: 960)
!2565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !2566)
!2566 = !{!2567}
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2565, file: !135, line: 2863, baseType: !2489, size: 960)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !2328, file: !135, line: 3392, baseType: !2569, size: 1472)
!2569 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !2570)
!2570 = !{!2571}
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2569, file: !135, line: 3305, baseType: !2494, size: 1472)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2328, file: !135, line: 3393, baseType: !2573, size: 1792)
!2573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !2574)
!2574 = !{!2575, !2576, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931}
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2573, file: !135, line: 3249, baseType: !2494, size: 1472)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2573, file: !135, line: 3251, baseType: !2577, size: 64, offset: 1472)
!2577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2578, size: 64)
!2578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2579, line: 463, size: 1152, elements: !2580)
!2579 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2580 = !{!2581, !2743, !2774, !2775, !2852, !2855, !2856, !2857, !2858, !2859, !2860, !2884, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910}
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2578, file: !2579, line: 464, baseType: !2582, size: 64)
!2582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2583, size: 64)
!2583 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !330, line: 194, size: 384, elements: !2584)
!2584 = !{!2585, !2634, !2647, !2661, !2711, !2724}
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !2583, file: !330, line: 197, baseType: !2586, size: 64)
!2586 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !330, line: 182, baseType: !2587)
!2587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2588, size: 64)
!2588 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !330, line: 116, size: 704, elements: !2589)
!2589 = !{!2590, !2591, !2592, !2593, !2594, !2595, !2622, !2631, !2632, !2633}
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !2588, file: !330, line: 119, baseType: !2587, size: 64)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2588, file: !330, line: 122, baseType: !2587, size: 64, offset: 64)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !2588, file: !330, line: 123, baseType: !2587, size: 64, offset: 128)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2588, file: !330, line: 126, baseType: !2136, size: 32, offset: 192)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2588, file: !330, line: 129, baseType: !329, size: 32, offset: 224)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2588, file: !330, line: 165, baseType: !2596, size: 192, offset: 256)
!2596 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !330, line: 132, size: 192, elements: !2597)
!2597 = !{!2598, !2611, !2617}
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !2596, file: !330, line: 137, baseType: !2599, size: 128)
!2599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !330, line: 133, size: 128, elements: !2600)
!2600 = !{!2601, !2610}
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !2599, file: !330, line: 135, baseType: !2602, size: 64)
!2602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2603, size: 64)
!2603 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !330, line: 93, size: 320, elements: !2604)
!2604 = !{!2605, !2606, !2607, !2608, !2609}
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !2603, file: !330, line: 96, baseType: !2602, size: 64)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !2603, file: !330, line: 97, baseType: !2602, size: 64, offset: 64)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2603, file: !330, line: 101, baseType: !2326, size: 64, offset: 128)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !2603, file: !330, line: 106, baseType: !2326, size: 64, offset: 192)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2603, file: !330, line: 111, baseType: !2326, size: 64, offset: 256)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !2599, file: !330, line: 136, baseType: !2602, size: 64, offset: 64)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !2596, file: !330, line: 151, baseType: !2612, size: 192)
!2612 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !330, line: 139, size: 192, elements: !2613)
!2613 = !{!2614, !2615, !2616}
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2612, file: !330, line: 141, baseType: !2326, size: 64)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2612, file: !330, line: 145, baseType: !2326, size: 64, offset: 64)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !2612, file: !330, line: 150, baseType: !2136, size: 32, offset: 128)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !2596, file: !330, line: 164, baseType: !2618, size: 128)
!2618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !330, line: 153, size: 128, elements: !2619)
!2619 = !{!2620, !2621}
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !2618, file: !330, line: 161, baseType: !2326, size: 64)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !2618, file: !330, line: 163, baseType: !2160, size: 32, offset: 64)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !2588, file: !330, line: 168, baseType: !2623, size: 64, offset: 448)
!2623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2624, size: 64)
!2624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !330, line: 67, size: 320, elements: !2625)
!2625 = !{!2626, !2627, !2628, !2629, !2630}
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !2624, file: !330, line: 70, baseType: !2623, size: 64)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2624, file: !330, line: 73, baseType: !2587, size: 64, offset: 64)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !2624, file: !330, line: 78, baseType: !2326, size: 64, offset: 128)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !2624, file: !330, line: 85, baseType: !2207, size: 64, offset: 192)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2624, file: !330, line: 88, baseType: !2136, size: 32, offset: 256)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !2588, file: !330, line: 173, baseType: !2207, size: 64, offset: 512)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !2588, file: !330, line: 173, baseType: !2207, size: 64, offset: 576)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !2588, file: !330, line: 177, baseType: !2439, size: 8, offset: 640)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !2583, file: !330, line: 200, baseType: !2635, size: 64, offset: 64)
!2635 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2636, size: 64)
!2636 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !330, line: 185, baseType: !2637)
!2637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !330, line: 185, size: 128, elements: !2638)
!2638 = !{!2639}
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2637, file: !330, line: 185, baseType: !2640, size: 128)
!2640 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !330, line: 184, baseType: !2641)
!2641 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !330, line: 184, size: 128, elements: !2642)
!2642 = !{!2643, !2644, !2645}
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2641, file: !330, line: 184, baseType: !7, size: 32)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2641, file: !330, line: 184, baseType: !7, size: 32, offset: 32)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2641, file: !330, line: 184, baseType: !2646, size: 64, offset: 64)
!2646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2586, size: 64, elements: !2244)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !2583, file: !330, line: 203, baseType: !2648, size: 64, offset: 128)
!2648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2649, size: 64)
!2649 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, baseType: !2650)
!2650 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, size: 128, elements: !2651)
!2651 = !{!2652}
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2650, file: !330, line: 189, baseType: !2653, size: 128)
!2653 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !330, line: 188, baseType: !2654)
!2654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !330, line: 188, size: 128, elements: !2655)
!2655 = !{!2656, !2657, !2658}
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2654, file: !330, line: 188, baseType: !7, size: 32)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2654, file: !330, line: 188, baseType: !7, size: 32, offset: 32)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2654, file: !330, line: 188, baseType: !2659, size: 64, offset: 64)
!2659 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2660, size: 64, elements: !2244)
!2660 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !330, line: 180, baseType: !2623)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !2583, file: !330, line: 207, baseType: !2662, size: 64, offset: 192)
!2662 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2663, line: 144, baseType: !2664)
!2663 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2665, size: 64)
!2665 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2663, line: 100, size: 896, elements: !2666)
!2666 = !{!2667, !2675, !2680, !2685, !2687, !2688, !2689, !2690, !2691, !2692, !2697, !2699, !2700, !2705, !2710}
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2665, file: !2663, line: 102, baseType: !2668, size: 64)
!2668 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2663, line: 52, baseType: !2669)
!2669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2670, size: 64)
!2670 = !DISubroutineType(types: !2671)
!2671 = !{!2672, !2673}
!2672 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2663, line: 47, baseType: !7)
!2673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2674, size: 64)
!2674 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2665, file: !2663, line: 105, baseType: !2676, size: 64, offset: 64)
!2676 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2663, line: 59, baseType: !2677)
!2677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2678, size: 64)
!2678 = !DISubroutineType(types: !2679)
!2679 = !{!2136, !2673, !2673}
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2665, file: !2663, line: 108, baseType: !2681, size: 64, offset: 128)
!2681 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2663, line: 63, baseType: !2682)
!2682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2683, size: 64)
!2683 = !DISubroutineType(types: !2684)
!2684 = !{null, !2316}
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2665, file: !2663, line: 111, baseType: !2686, size: 64, offset: 192)
!2686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2316, size: 64)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2665, file: !2663, line: 114, baseType: !2140, size: 64, offset: 256)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2665, file: !2663, line: 117, baseType: !2140, size: 64, offset: 320)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2665, file: !2663, line: 120, baseType: !2140, size: 64, offset: 384)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2665, file: !2663, line: 124, baseType: !7, size: 32, offset: 448)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2665, file: !2663, line: 128, baseType: !7, size: 32, offset: 480)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2665, file: !2663, line: 131, baseType: !2693, size: 64, offset: 512)
!2693 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2663, line: 75, baseType: !2694)
!2694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2695, size: 64)
!2695 = !DISubroutineType(types: !2696)
!2696 = !{!2316, !2140, !2140}
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2665, file: !2663, line: 132, baseType: !2698, size: 64, offset: 576)
!2698 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2663, line: 78, baseType: !2682)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2665, file: !2663, line: 135, baseType: !2316, size: 64, offset: 640)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2665, file: !2663, line: 136, baseType: !2701, size: 64, offset: 704)
!2701 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2663, line: 82, baseType: !2702)
!2702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2703, size: 64)
!2703 = !DISubroutineType(types: !2704)
!2704 = !{!2316, !2316, !2140, !2140}
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2665, file: !2663, line: 137, baseType: !2706, size: 64, offset: 768)
!2706 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2663, line: 83, baseType: !2707)
!2707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2708, size: 64)
!2708 = !DISubroutineType(types: !2709)
!2709 = !{null, !2316, !2316}
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2665, file: !2663, line: 141, baseType: !7, size: 32, offset: 832)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !2583, file: !330, line: 211, baseType: !2712, size: 64, offset: 256)
!2712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2713, size: 64)
!2713 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !2714)
!2714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !2715)
!2715 = !{!2716}
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2714, file: !135, line: 183, baseType: !2717, size: 128)
!2717 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !2718)
!2718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !2719)
!2719 = !{!2720, !2721, !2722}
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2718, file: !135, line: 182, baseType: !7, size: 32)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2718, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2718, file: !135, line: 182, baseType: !2723, size: 64, offset: 64)
!2723 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2326, size: 64, elements: !2244)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !2583, file: !330, line: 220, baseType: !2725, size: 64, offset: 320)
!2725 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !330, line: 217, size: 64, elements: !2726)
!2726 = !{!2727, !2728}
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !2725, file: !330, line: 218, baseType: !2712, size: 64)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !2725, file: !330, line: 219, baseType: !2729, size: 64)
!2729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2730, size: 64)
!2730 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !2731, line: 29, baseType: !2732)
!2731 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !2731, line: 29, size: 96, elements: !2733)
!2733 = !{!2734}
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2732, file: !2731, line: 29, baseType: !2735, size: 96)
!2735 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !2731, line: 27, baseType: !2736)
!2736 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !2731, line: 27, size: 96, elements: !2737)
!2737 = !{!2738, !2739, !2740}
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2736, file: !2731, line: 27, baseType: !7, size: 32)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2736, file: !2731, line: 27, baseType: !7, size: 32, offset: 32)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2736, file: !2731, line: 27, baseType: !2741, size: 8, offset: 64)
!2741 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2742, size: 8, elements: !2244)
!2742 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !2731, line: 26, baseType: !2439)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2578, file: !2579, line: 467, baseType: !2744, size: 64, offset: 64)
!2744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2745, size: 64)
!2745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !337, line: 374, size: 640, elements: !2746)
!2746 = !{!2747, !2749, !2750, !2763, !2764, !2765, !2766, !2767, !2768, !2770, !2772, !2773}
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2745, file: !337, line: 377, baseType: !2748, size: 64)
!2748 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !2181, line: 111, baseType: !2164)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2745, file: !337, line: 378, baseType: !2748, size: 64, offset: 64)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2745, file: !337, line: 381, baseType: !2751, size: 64, offset: 128)
!2751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2752, size: 64)
!2752 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !337, line: 282, baseType: !2753)
!2753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !337, line: 282, size: 128, elements: !2754)
!2754 = !{!2755}
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2753, file: !337, line: 282, baseType: !2756, size: 128)
!2756 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !337, line: 281, baseType: !2757)
!2757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !337, line: 281, size: 128, elements: !2758)
!2758 = !{!2759, !2760, !2761}
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2757, file: !337, line: 281, baseType: !7, size: 32)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2757, file: !337, line: 281, baseType: !7, size: 32, offset: 32)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2757, file: !337, line: 281, baseType: !2762, size: 64, offset: 64)
!2762 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2748, size: 64, elements: !2244)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2745, file: !337, line: 384, baseType: !2136, size: 32, offset: 192)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2745, file: !337, line: 387, baseType: !2136, size: 32, offset: 224)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2745, file: !337, line: 390, baseType: !2136, size: 32, offset: 256)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2745, file: !337, line: 394, baseType: !2751, size: 64, offset: 320)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2745, file: !337, line: 396, baseType: !336, size: 32, offset: 384)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2745, file: !337, line: 399, baseType: !2769, size: 64, offset: 416)
!2769 = !DICompositeType(tag: DW_TAG_array_type, baseType: !342, size: 64, elements: !2279)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2745, file: !337, line: 402, baseType: !2771, size: 64, offset: 480)
!2771 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !2279)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2745, file: !337, line: 406, baseType: !2136, size: 32, offset: 544)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2745, file: !337, line: 409, baseType: !2136, size: 32, offset: 576)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2578, file: !2579, line: 470, baseType: !2192, size: 64, offset: 128)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2578, file: !2579, line: 473, baseType: !2776, size: 64, offset: 192)
!2776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2777, size: 64)
!2777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2529, line: 39, size: 1152, elements: !2778)
!2778 = !{!2779, !2780, !2793, !2794, !2795, !2807, !2808, !2812, !2813, !2814, !2815, !2816}
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2777, file: !2529, line: 41, baseType: !2662, size: 64)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2777, file: !2529, line: 48, baseType: !2781, size: 64, offset: 64)
!2781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2782, size: 64)
!2782 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !385, line: 35, baseType: !2783)
!2783 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !385, line: 35, size: 128, elements: !2784)
!2784 = !{!2785}
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2783, file: !385, line: 35, baseType: !2786, size: 128)
!2786 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !385, line: 33, baseType: !2787)
!2787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !385, line: 33, size: 128, elements: !2788)
!2788 = !{!2789, !2790, !2791}
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2787, file: !385, line: 33, baseType: !7, size: 32)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2787, file: !385, line: 33, baseType: !7, size: 32, offset: 32)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2787, file: !385, line: 33, baseType: !2792, size: 64, offset: 64)
!2792 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2201, size: 64, elements: !2244)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2777, file: !2529, line: 51, baseType: !2712, size: 64, offset: 128)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2777, file: !2529, line: 54, baseType: !2326, size: 64, offset: 192)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2777, file: !2529, line: 57, baseType: !2796, size: 128, offset: 256)
!2796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2797, line: 31, size: 128, elements: !2798)
!2797 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2798 = !{!2799, !2800, !2801, !2802, !2803, !2804, !2805}
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2796, file: !2797, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2796, file: !2797, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2796, file: !2797, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2796, file: !2797, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2796, file: !2797, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2796, file: !2797, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2796, file: !2797, line: 56, baseType: !2806, size: 64, offset: 64)
!2806 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !2181, line: 47, baseType: !2263)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2777, file: !2529, line: 60, baseType: !2796, size: 128, offset: 384)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2777, file: !2529, line: 64, baseType: !2809, size: 64, offset: 512)
!2809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2810, size: 64)
!2810 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2811, line: 33, flags: DIFlagFwdDecl)
!2811 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2777, file: !2529, line: 67, baseType: !2326, size: 64, offset: 576)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2777, file: !2529, line: 73, baseType: !2662, size: 64, offset: 640)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2777, file: !2529, line: 77, baseType: !2806, size: 64, offset: 704)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2777, file: !2529, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2777, file: !2529, line: 82, baseType: !2817, size: 320, offset: 832)
!2817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !2021, line: 62, size: 320, elements: !2818)
!2818 = !{!2819, !2825, !2826, !2827, !2828, !2835}
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2817, file: !2021, line: 63, baseType: !2820, size: 64)
!2820 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2821, size: 64)
!2821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !2021, line: 56, size: 128, elements: !2822)
!2822 = !{!2823, !2824}
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2821, file: !2021, line: 57, baseType: !2820, size: 64)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2821, file: !2021, line: 58, baseType: !2421, size: 8, offset: 64)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2817, file: !2021, line: 64, baseType: !7, size: 32, offset: 64)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2817, file: !2021, line: 66, baseType: !7, size: 32, offset: 96)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2817, file: !2021, line: 68, baseType: !2439, size: 8, offset: 128)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2817, file: !2021, line: 70, baseType: !2829, size: 64, offset: 192)
!2829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2830, size: 64)
!2830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !2021, line: 37, size: 128, elements: !2831)
!2831 = !{!2832, !2833}
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2830, file: !2021, line: 39, baseType: !2829, size: 64)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2830, file: !2021, line: 40, baseType: !2834, size: 64, offset: 64)
!2834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2326, size: 64)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2817, file: !2021, line: 71, baseType: !2836, size: 64, offset: 256)
!2836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2837, size: 64)
!2837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !2021, line: 45, size: 320, elements: !2838)
!2838 = !{!2839, !2840}
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2837, file: !2021, line: 47, baseType: !2836, size: 64)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2837, file: !2021, line: 48, baseType: !2841, size: 256, offset: 64)
!2841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !2842)
!2842 = !{!2843, !2845, !2846, !2851}
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2841, file: !135, line: 1884, baseType: !2844, size: 64)
!2844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2841, size: 64)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2841, file: !135, line: 1885, baseType: !2844, size: 64, offset: 64)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2841, file: !135, line: 1891, baseType: !2847, size: 64, offset: 128)
!2847 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2841, file: !135, line: 1891, size: 64, elements: !2848)
!2848 = !{!2849, !2850}
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2847, file: !135, line: 1891, baseType: !2201, size: 64)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2847, file: !135, line: 1891, baseType: !2326, size: 64)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2841, file: !135, line: 1892, baseType: !2834, size: 64, offset: 192)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2578, file: !2579, line: 476, baseType: !2853, size: 64, offset: 256)
!2853 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2854, size: 64)
!2854 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !2579, line: 476, flags: DIFlagFwdDecl)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2578, file: !2579, line: 479, baseType: !2662, size: 64, offset: 320)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2578, file: !2579, line: 484, baseType: !2326, size: 64, offset: 384)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2578, file: !2579, line: 488, baseType: !2326, size: 64, offset: 448)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2578, file: !2579, line: 493, baseType: !2326, size: 64, offset: 512)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2578, file: !2579, line: 496, baseType: !2326, size: 64, offset: 576)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2578, file: !2579, line: 501, baseType: !2861, size: 64, offset: 640)
!2861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2862, size: 64)
!2862 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !348, line: 2355, size: 576, elements: !2863)
!2863 = !{!2864, !2867, !2868, !2869, !2870, !2872, !2873, !2878, !2879, !2880, !2881, !2882, !2883}
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2862, file: !348, line: 2356, baseType: !2865, size: 64)
!2865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2866, size: 64)
!2866 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !348, line: 2356, flags: DIFlagFwdDecl)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2862, file: !348, line: 2357, baseType: !2232, size: 64, offset: 64)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2862, file: !348, line: 2358, baseType: !2136, size: 32, offset: 128)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2862, file: !348, line: 2359, baseType: !2136, size: 32, offset: 160)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2862, file: !348, line: 2360, baseType: !2871, size: 128, offset: 192)
!2871 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2136, size: 128, elements: !2305)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2862, file: !348, line: 2364, baseType: !2136, size: 32, offset: 320)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2862, file: !348, line: 2367, baseType: !2874, size: 128, offset: 384)
!2874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !348, line: 2349, size: 128, elements: !2875)
!2875 = !{!2876, !2877}
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2874, file: !348, line: 2351, baseType: !2207, size: 64)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2874, file: !348, line: 2352, baseType: !2295, size: 64, offset: 64)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2862, file: !348, line: 2371, baseType: !347, size: 32, offset: 512)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2862, file: !348, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2862, file: !348, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2862, file: !348, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2862, file: !348, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2862, file: !348, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2578, file: !2579, line: 504, baseType: !2885, size: 64, offset: 704)
!2885 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2886, size: 64)
!2886 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2579, line: 504, flags: DIFlagFwdDecl)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2578, file: !2579, line: 507, baseType: !2662, size: 64, offset: 768)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2578, file: !2579, line: 510, baseType: !2136, size: 32, offset: 832)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2578, file: !2579, line: 513, baseType: !2136, size: 32, offset: 864)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2578, file: !2579, line: 516, baseType: !2160, size: 32, offset: 896)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2578, file: !2579, line: 519, baseType: !2160, size: 32, offset: 928)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2578, file: !2579, line: 522, baseType: !7, size: 32, offset: 960)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2578, file: !2579, line: 523, baseType: !7, size: 32, offset: 992)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2578, file: !2579, line: 528, baseType: !2232, size: 64, offset: 1024)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2578, file: !2579, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2578, file: !2579, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2578, file: !2579, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2578, file: !2579, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2578, file: !2579, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2578, file: !2579, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2578, file: !2579, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2578, file: !2579, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2578, file: !2579, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2578, file: !2579, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2578, file: !2579, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2578, file: !2579, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2578, file: !2579, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2578, file: !2579, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2578, file: !2579, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2578, file: !2579, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2573, file: !135, line: 3254, baseType: !2326, size: 64, offset: 1536)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2573, file: !135, line: 3257, baseType: !2326, size: 64, offset: 1600)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2573, file: !135, line: 3258, baseType: !2326, size: 64, offset: 1664)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2573, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2573, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2573, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2573, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2573, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2573, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2573, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2573, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2573, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2573, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2573, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2573, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2573, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2573, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2573, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2573, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2573, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2573, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2328, file: !135, line: 3394, baseType: !2933, size: 1344)
!2933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !2934)
!2934 = !{!2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2960, !2961, !2962, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978}
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2933, file: !135, line: 2280, baseType: !2364, size: 192)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2933, file: !135, line: 2281, baseType: !2326, size: 64, offset: 192)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2933, file: !135, line: 2282, baseType: !2326, size: 64, offset: 256)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2933, file: !135, line: 2283, baseType: !2326, size: 64, offset: 320)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2933, file: !135, line: 2284, baseType: !2326, size: 64, offset: 384)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2933, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2933, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2933, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2933, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2933, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2933, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2933, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2933, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2933, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2933, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2933, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2933, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2933, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2933, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2933, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2933, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2933, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2933, file: !135, line: 2306, baseType: !2958, size: 32, offset: 544)
!2958 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2959, line: 31, baseType: !2136)
!2959 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2933, file: !135, line: 2307, baseType: !2326, size: 64, offset: 576)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2933, file: !135, line: 2308, baseType: !2326, size: 64, offset: 640)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2933, file: !135, line: 2314, baseType: !2963, size: 64, offset: 704)
!2963 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !2964)
!2964 = !{!2965, !2966, !2967}
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2963, file: !135, line: 2310, baseType: !2136, size: 32)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2963, file: !135, line: 2311, baseType: !2232, size: 64)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2963, file: !135, line: 2312, baseType: !2968, size: 64)
!2968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2969, size: 64)
!2969 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2933, file: !135, line: 2315, baseType: !2326, size: 64, offset: 768)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2933, file: !135, line: 2316, baseType: !2326, size: 64, offset: 832)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2933, file: !135, line: 2317, baseType: !2326, size: 64, offset: 896)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2933, file: !135, line: 2318, baseType: !2326, size: 64, offset: 960)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2933, file: !135, line: 2319, baseType: !2326, size: 64, offset: 1024)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2933, file: !135, line: 2320, baseType: !2326, size: 64, offset: 1088)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2933, file: !135, line: 2321, baseType: !2326, size: 64, offset: 1152)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2933, file: !135, line: 2322, baseType: !2326, size: 64, offset: 1216)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2933, file: !135, line: 2324, baseType: !2979, size: 64, offset: 1280)
!2979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2980, size: 64)
!2980 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2328, file: !135, line: 3395, baseType: !2982, size: 320)
!2982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !2983)
!2983 = !{!2984, !2985, !2986}
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2982, file: !135, line: 1470, baseType: !2364, size: 192)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2982, file: !135, line: 1471, baseType: !2326, size: 64, offset: 192)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2982, file: !135, line: 1472, baseType: !2326, size: 64, offset: 256)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2328, file: !135, line: 3396, baseType: !2988, size: 320)
!2988 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !2989)
!2989 = !{!2990, !2991, !2992}
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2988, file: !135, line: 1483, baseType: !2364, size: 192)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2988, file: !135, line: 1484, baseType: !2136, size: 32, offset: 192)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2988, file: !135, line: 1485, baseType: !2723, size: 64, offset: 256)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !2328, file: !135, line: 3397, baseType: !2994, size: 384)
!2994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !2995)
!2995 = !{!2996, !2997, !2998, !2999}
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2994, file: !135, line: 1830, baseType: !2364, size: 192)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2994, file: !135, line: 1831, baseType: !2160, size: 32, offset: 192)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2994, file: !135, line: 1832, baseType: !2326, size: 64, offset: 256)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2994, file: !135, line: 1835, baseType: !2723, size: 64, offset: 320)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2328, file: !135, line: 3398, baseType: !3001, size: 704)
!3001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !3002)
!3002 = !{!3003, !3004, !3005, !3006, !3007, !3012}
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3001, file: !135, line: 1899, baseType: !2364, size: 192)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !3001, file: !135, line: 1902, baseType: !2326, size: 64, offset: 192)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !3001, file: !135, line: 1905, baseType: !2201, size: 64, offset: 256)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !3001, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3001, file: !135, line: 1911, baseType: !3008, size: 64, offset: 384)
!3008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3009, size: 64)
!3009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2529, line: 117, size: 128, elements: !3010)
!3010 = !{!3011}
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !3009, file: !2529, line: 120, baseType: !2796, size: 128)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !3001, file: !135, line: 1914, baseType: !2841, size: 256, offset: 448)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2328, file: !135, line: 3399, baseType: !3014, size: 704)
!3014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !3015)
!3015 = !{!3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026}
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3014, file: !135, line: 2009, baseType: !2364, size: 192)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3014, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !3014, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3014, file: !135, line: 2014, baseType: !2160, size: 32, offset: 224)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3014, file: !135, line: 2016, baseType: !2326, size: 64, offset: 256)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !3014, file: !135, line: 2017, baseType: !2712, size: 64, offset: 320)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !3014, file: !135, line: 2019, baseType: !2326, size: 64, offset: 384)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !3014, file: !135, line: 2020, baseType: !2326, size: 64, offset: 448)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3014, file: !135, line: 2021, baseType: !2326, size: 64, offset: 512)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !3014, file: !135, line: 2022, baseType: !2326, size: 64, offset: 576)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !3014, file: !135, line: 2023, baseType: !2326, size: 64, offset: 640)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2328, file: !135, line: 3400, baseType: !3028, size: 832)
!3028 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !3029)
!3029 = !{!3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039}
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3028, file: !135, line: 2431, baseType: !2364, size: 192)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3028, file: !135, line: 2433, baseType: !2326, size: 64, offset: 192)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !3028, file: !135, line: 2434, baseType: !2326, size: 64, offset: 256)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !3028, file: !135, line: 2435, baseType: !2326, size: 64, offset: 320)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !3028, file: !135, line: 2436, baseType: !2326, size: 64, offset: 384)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !3028, file: !135, line: 2437, baseType: !2712, size: 64, offset: 448)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !3028, file: !135, line: 2438, baseType: !2326, size: 64, offset: 512)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !3028, file: !135, line: 2440, baseType: !2326, size: 64, offset: 576)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !3028, file: !135, line: 2441, baseType: !2326, size: 64, offset: 640)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !3028, file: !135, line: 2443, baseType: !3040, size: 128, offset: 704)
!3040 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !3041)
!3041 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !3042)
!3042 = !{!3043}
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3041, file: !135, line: 182, baseType: !2717, size: 128)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !2328, file: !135, line: 3401, baseType: !3045, size: 320)
!3045 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !3046)
!3046 = !{!3047, !3048, !3055}
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3045, file: !135, line: 3329, baseType: !2364, size: 192)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !3045, file: !135, line: 3330, baseType: !3049, size: 64, offset: 192)
!3049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3050, size: 64)
!3050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !3051)
!3051 = !{!3052, !3053, !3054}
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3050, file: !135, line: 3322, baseType: !3049, size: 64)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3050, file: !135, line: 3323, baseType: !3049, size: 64, offset: 64)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3050, file: !135, line: 3324, baseType: !2326, size: 64, offset: 128)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !3045, file: !135, line: 3331, baseType: !3049, size: 64, offset: 256)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !2328, file: !135, line: 3402, baseType: !3057, size: 256)
!3057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !3058)
!3058 = !{!3059, !3060}
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3057, file: !135, line: 1541, baseType: !2364, size: 192)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !3057, file: !135, line: 1542, baseType: !3061, size: 64, offset: 192)
!3061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3062, size: 64)
!3062 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !3063)
!3063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !3064)
!3064 = !{!3065}
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3063, file: !135, line: 1538, baseType: !3066, size: 192)
!3066 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !3067)
!3067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !3068)
!3068 = !{!3069, !3070, !3071}
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3067, file: !135, line: 1537, baseType: !7, size: 32)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3067, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3067, file: !135, line: 1537, baseType: !3072, size: 128, offset: 64)
!3072 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3073, size: 128, elements: !2244)
!3073 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !3074)
!3074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !3075)
!3075 = !{!3076, !3077}
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3074, file: !135, line: 1533, baseType: !2326, size: 64)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3074, file: !135, line: 1534, baseType: !2326, size: 64, offset: 64)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !2328, file: !135, line: 3403, baseType: !3079, size: 512)
!3079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !3080)
!3080 = !{!3081, !3082, !3083, !3084, !3090, !3091, !3092}
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3079, file: !135, line: 1939, baseType: !2364, size: 192)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3079, file: !135, line: 1940, baseType: !2160, size: 32, offset: 192)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3079, file: !135, line: 1941, baseType: !352, size: 32, offset: 224)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3079, file: !135, line: 1946, baseType: !3085, size: 32, offset: 256)
!3085 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !3086)
!3086 = !{!3087, !3088, !3089}
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !3085, file: !135, line: 1943, baseType: !370, size: 32)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !3085, file: !135, line: 1944, baseType: !377, size: 32)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !3085, file: !135, line: 1945, baseType: !134, size: 32)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !3079, file: !135, line: 1950, baseType: !2191, size: 64, offset: 320)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !3079, file: !135, line: 1951, baseType: !2191, size: 64, offset: 384)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3079, file: !135, line: 1953, baseType: !2723, size: 64, offset: 448)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !2328, file: !135, line: 3404, baseType: !3094, size: 1664)
!3094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !3095)
!3095 = !{!3096, !3097}
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3094, file: !135, line: 3338, baseType: !2364, size: 192)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3094, file: !135, line: 3341, baseType: !3098, size: 1472, offset: 192)
!3098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !996, line: 410, size: 1472, elements: !3099)
!3099 = !{!3100, !3101, !3102, !3103, !3104, !3105, !3106, !3107, !3108, !3110, !3111, !3112, !3113, !3114, !3115, !3116, !3117, !3118, !3119, !3120, !3121, !3122, !3123, !3124, !3125, !3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3135, !3136, !3137, !3138, !3139, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147, !3148, !3149, !3150, !3151, !3152, !3153, !3154, !3155, !3156, !3157, !3158, !3159, !3160, !3161, !3162, !3163, !3164, !3165, !3166, !3167, !3168, !3169, !3170, !3171, !3172, !3173, !3174, !3175, !3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3191, !3192, !3193, !3194, !3195, !3196, !3197, !3198, !3199, !3200, !3201, !3202, !3203, !3204, !3205, !3206, !3207, !3208, !3209, !3210, !3211, !3212, !3213, !3214, !3215, !3216, !3217, !3218, !3219, !3220, !3221, !3222, !3223, !3224, !3225, !3226, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3238, !3239, !3240, !3241, !3242, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263}
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !3098, file: !996, line: 412, baseType: !2136, size: 32)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !3098, file: !996, line: 413, baseType: !2136, size: 32, offset: 32)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !3098, file: !996, line: 414, baseType: !2136, size: 32, offset: 64)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !3098, file: !996, line: 415, baseType: !2136, size: 32, offset: 96)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !3098, file: !996, line: 416, baseType: !2136, size: 32, offset: 128)
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !3098, file: !996, line: 417, baseType: !2136, size: 32, offset: 160)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !3098, file: !996, line: 418, baseType: !2439, size: 8, offset: 192)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !3098, file: !996, line: 419, baseType: !2439, size: 8, offset: 200)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !3098, file: !996, line: 420, baseType: !3109, size: 8, offset: 208)
!3109 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !3098, file: !996, line: 421, baseType: !3109, size: 8, offset: 216)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !3098, file: !996, line: 422, baseType: !3109, size: 8, offset: 224)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !3098, file: !996, line: 423, baseType: !3109, size: 8, offset: 232)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !3098, file: !996, line: 424, baseType: !3109, size: 8, offset: 240)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !3098, file: !996, line: 425, baseType: !3109, size: 8, offset: 248)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !3098, file: !996, line: 426, baseType: !3109, size: 8, offset: 256)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !3098, file: !996, line: 427, baseType: !3109, size: 8, offset: 264)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !3098, file: !996, line: 428, baseType: !3109, size: 8, offset: 272)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !3098, file: !996, line: 429, baseType: !3109, size: 8, offset: 280)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !3098, file: !996, line: 430, baseType: !3109, size: 8, offset: 288)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !3098, file: !996, line: 431, baseType: !3109, size: 8, offset: 296)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !3098, file: !996, line: 432, baseType: !3109, size: 8, offset: 304)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !3098, file: !996, line: 433, baseType: !3109, size: 8, offset: 312)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !3098, file: !996, line: 434, baseType: !3109, size: 8, offset: 320)
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !3098, file: !996, line: 435, baseType: !3109, size: 8, offset: 328)
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !3098, file: !996, line: 436, baseType: !3109, size: 8, offset: 336)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !3098, file: !996, line: 437, baseType: !3109, size: 8, offset: 344)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !3098, file: !996, line: 438, baseType: !3109, size: 8, offset: 352)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !3098, file: !996, line: 439, baseType: !3109, size: 8, offset: 360)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !3098, file: !996, line: 440, baseType: !3109, size: 8, offset: 368)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !3098, file: !996, line: 441, baseType: !3109, size: 8, offset: 376)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !3098, file: !996, line: 442, baseType: !3109, size: 8, offset: 384)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !3098, file: !996, line: 443, baseType: !3109, size: 8, offset: 392)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !3098, file: !996, line: 444, baseType: !3109, size: 8, offset: 400)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !3098, file: !996, line: 445, baseType: !3109, size: 8, offset: 408)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !3098, file: !996, line: 446, baseType: !3109, size: 8, offset: 416)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !3098, file: !996, line: 447, baseType: !3109, size: 8, offset: 424)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !3098, file: !996, line: 448, baseType: !3109, size: 8, offset: 432)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !3098, file: !996, line: 449, baseType: !3109, size: 8, offset: 440)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !3098, file: !996, line: 450, baseType: !3109, size: 8, offset: 448)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !3098, file: !996, line: 451, baseType: !3109, size: 8, offset: 456)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !3098, file: !996, line: 452, baseType: !3109, size: 8, offset: 464)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !3098, file: !996, line: 453, baseType: !3109, size: 8, offset: 472)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !3098, file: !996, line: 454, baseType: !3109, size: 8, offset: 480)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !3098, file: !996, line: 455, baseType: !3109, size: 8, offset: 488)
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !3098, file: !996, line: 456, baseType: !3109, size: 8, offset: 496)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !3098, file: !996, line: 457, baseType: !3109, size: 8, offset: 504)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !3098, file: !996, line: 458, baseType: !3109, size: 8, offset: 512)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !3098, file: !996, line: 459, baseType: !3109, size: 8, offset: 520)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !3098, file: !996, line: 460, baseType: !3109, size: 8, offset: 528)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !3098, file: !996, line: 461, baseType: !3109, size: 8, offset: 536)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !3098, file: !996, line: 462, baseType: !3109, size: 8, offset: 544)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !3098, file: !996, line: 463, baseType: !3109, size: 8, offset: 552)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !3098, file: !996, line: 464, baseType: !3109, size: 8, offset: 560)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !3098, file: !996, line: 465, baseType: !3109, size: 8, offset: 568)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !3098, file: !996, line: 466, baseType: !3109, size: 8, offset: 576)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !3098, file: !996, line: 467, baseType: !3109, size: 8, offset: 584)
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !3098, file: !996, line: 468, baseType: !3109, size: 8, offset: 592)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !3098, file: !996, line: 469, baseType: !3109, size: 8, offset: 600)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !3098, file: !996, line: 470, baseType: !3109, size: 8, offset: 608)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !3098, file: !996, line: 471, baseType: !3109, size: 8, offset: 616)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !3098, file: !996, line: 472, baseType: !3109, size: 8, offset: 624)
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !3098, file: !996, line: 473, baseType: !3109, size: 8, offset: 632)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !3098, file: !996, line: 474, baseType: !3109, size: 8, offset: 640)
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !3098, file: !996, line: 475, baseType: !3109, size: 8, offset: 648)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !3098, file: !996, line: 476, baseType: !3109, size: 8, offset: 656)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !3098, file: !996, line: 477, baseType: !3109, size: 8, offset: 664)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !3098, file: !996, line: 478, baseType: !3109, size: 8, offset: 672)
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !3098, file: !996, line: 479, baseType: !3109, size: 8, offset: 680)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !3098, file: !996, line: 480, baseType: !3109, size: 8, offset: 688)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !3098, file: !996, line: 481, baseType: !3109, size: 8, offset: 696)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !3098, file: !996, line: 482, baseType: !3109, size: 8, offset: 704)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !3098, file: !996, line: 483, baseType: !3109, size: 8, offset: 712)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !3098, file: !996, line: 484, baseType: !3109, size: 8, offset: 720)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !3098, file: !996, line: 485, baseType: !3109, size: 8, offset: 728)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !3098, file: !996, line: 486, baseType: !3109, size: 8, offset: 736)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !3098, file: !996, line: 487, baseType: !3109, size: 8, offset: 744)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !3098, file: !996, line: 488, baseType: !3109, size: 8, offset: 752)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !3098, file: !996, line: 489, baseType: !3109, size: 8, offset: 760)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !3098, file: !996, line: 490, baseType: !3109, size: 8, offset: 768)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !3098, file: !996, line: 491, baseType: !3109, size: 8, offset: 776)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !3098, file: !996, line: 492, baseType: !3109, size: 8, offset: 784)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !3098, file: !996, line: 493, baseType: !3109, size: 8, offset: 792)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !3098, file: !996, line: 494, baseType: !3109, size: 8, offset: 800)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !3098, file: !996, line: 495, baseType: !3109, size: 8, offset: 808)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !3098, file: !996, line: 496, baseType: !3109, size: 8, offset: 816)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !3098, file: !996, line: 497, baseType: !3109, size: 8, offset: 824)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !3098, file: !996, line: 498, baseType: !3109, size: 8, offset: 832)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !3098, file: !996, line: 499, baseType: !3109, size: 8, offset: 840)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !3098, file: !996, line: 500, baseType: !3109, size: 8, offset: 848)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !3098, file: !996, line: 501, baseType: !3109, size: 8, offset: 856)
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !3098, file: !996, line: 502, baseType: !3109, size: 8, offset: 864)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !3098, file: !996, line: 503, baseType: !3109, size: 8, offset: 872)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !3098, file: !996, line: 504, baseType: !3109, size: 8, offset: 880)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !3098, file: !996, line: 505, baseType: !3109, size: 8, offset: 888)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !3098, file: !996, line: 506, baseType: !3109, size: 8, offset: 896)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !3098, file: !996, line: 507, baseType: !3109, size: 8, offset: 904)
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !3098, file: !996, line: 508, baseType: !3109, size: 8, offset: 912)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !3098, file: !996, line: 509, baseType: !3109, size: 8, offset: 920)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !3098, file: !996, line: 510, baseType: !3109, size: 8, offset: 928)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !3098, file: !996, line: 511, baseType: !3109, size: 8, offset: 936)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !3098, file: !996, line: 512, baseType: !3109, size: 8, offset: 944)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !3098, file: !996, line: 513, baseType: !3109, size: 8, offset: 952)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !3098, file: !996, line: 514, baseType: !3109, size: 8, offset: 960)
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !3098, file: !996, line: 515, baseType: !3109, size: 8, offset: 968)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !3098, file: !996, line: 516, baseType: !3109, size: 8, offset: 976)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !3098, file: !996, line: 517, baseType: !3109, size: 8, offset: 984)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !3098, file: !996, line: 518, baseType: !3109, size: 8, offset: 992)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !3098, file: !996, line: 519, baseType: !3109, size: 8, offset: 1000)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !3098, file: !996, line: 520, baseType: !3109, size: 8, offset: 1008)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !3098, file: !996, line: 521, baseType: !3109, size: 8, offset: 1016)
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !3098, file: !996, line: 522, baseType: !3109, size: 8, offset: 1024)
!3212 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !3098, file: !996, line: 523, baseType: !3109, size: 8, offset: 1032)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !3098, file: !996, line: 524, baseType: !3109, size: 8, offset: 1040)
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !3098, file: !996, line: 525, baseType: !3109, size: 8, offset: 1048)
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !3098, file: !996, line: 526, baseType: !3109, size: 8, offset: 1056)
!3216 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !3098, file: !996, line: 527, baseType: !3109, size: 8, offset: 1064)
!3217 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !3098, file: !996, line: 528, baseType: !3109, size: 8, offset: 1072)
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !3098, file: !996, line: 529, baseType: !3109, size: 8, offset: 1080)
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !3098, file: !996, line: 530, baseType: !3109, size: 8, offset: 1088)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !3098, file: !996, line: 531, baseType: !3109, size: 8, offset: 1096)
!3221 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !3098, file: !996, line: 532, baseType: !3109, size: 8, offset: 1104)
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !3098, file: !996, line: 533, baseType: !3109, size: 8, offset: 1112)
!3223 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !3098, file: !996, line: 534, baseType: !3109, size: 8, offset: 1120)
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !3098, file: !996, line: 535, baseType: !3109, size: 8, offset: 1128)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !3098, file: !996, line: 536, baseType: !3109, size: 8, offset: 1136)
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !3098, file: !996, line: 537, baseType: !3109, size: 8, offset: 1144)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !3098, file: !996, line: 538, baseType: !3109, size: 8, offset: 1152)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !3098, file: !996, line: 539, baseType: !3109, size: 8, offset: 1160)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !3098, file: !996, line: 540, baseType: !3109, size: 8, offset: 1168)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !3098, file: !996, line: 541, baseType: !3109, size: 8, offset: 1176)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !3098, file: !996, line: 542, baseType: !3109, size: 8, offset: 1184)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !3098, file: !996, line: 543, baseType: !3109, size: 8, offset: 1192)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !3098, file: !996, line: 544, baseType: !3109, size: 8, offset: 1200)
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !3098, file: !996, line: 545, baseType: !3109, size: 8, offset: 1208)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !3098, file: !996, line: 546, baseType: !3109, size: 8, offset: 1216)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !3098, file: !996, line: 547, baseType: !3109, size: 8, offset: 1224)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !3098, file: !996, line: 548, baseType: !3109, size: 8, offset: 1232)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !3098, file: !996, line: 549, baseType: !3109, size: 8, offset: 1240)
!3239 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !3098, file: !996, line: 550, baseType: !3109, size: 8, offset: 1248)
!3240 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !3098, file: !996, line: 551, baseType: !3109, size: 8, offset: 1256)
!3241 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !3098, file: !996, line: 552, baseType: !3109, size: 8, offset: 1264)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !3098, file: !996, line: 553, baseType: !3109, size: 8, offset: 1272)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !3098, file: !996, line: 554, baseType: !3109, size: 8, offset: 1280)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !3098, file: !996, line: 555, baseType: !3109, size: 8, offset: 1288)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !3098, file: !996, line: 556, baseType: !3109, size: 8, offset: 1296)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !3098, file: !996, line: 557, baseType: !3109, size: 8, offset: 1304)
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !3098, file: !996, line: 558, baseType: !3109, size: 8, offset: 1312)
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !3098, file: !996, line: 559, baseType: !3109, size: 8, offset: 1320)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !3098, file: !996, line: 560, baseType: !3109, size: 8, offset: 1328)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !3098, file: !996, line: 561, baseType: !3109, size: 8, offset: 1336)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !3098, file: !996, line: 562, baseType: !3109, size: 8, offset: 1344)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !3098, file: !996, line: 563, baseType: !3109, size: 8, offset: 1352)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !3098, file: !996, line: 564, baseType: !3109, size: 8, offset: 1360)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !3098, file: !996, line: 565, baseType: !3109, size: 8, offset: 1368)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !3098, file: !996, line: 566, baseType: !3109, size: 8, offset: 1376)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !3098, file: !996, line: 567, baseType: !3109, size: 8, offset: 1384)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !3098, file: !996, line: 568, baseType: !3109, size: 8, offset: 1392)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !3098, file: !996, line: 569, baseType: !3109, size: 8, offset: 1400)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !3098, file: !996, line: 570, baseType: !3109, size: 8, offset: 1408)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !3098, file: !996, line: 571, baseType: !3109, size: 8, offset: 1416)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !3098, file: !996, line: 572, baseType: !3109, size: 8, offset: 1424)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !3098, file: !996, line: 573, baseType: !3109, size: 8, offset: 1432)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !3098, file: !996, line: 574, baseType: !3109, size: 8, offset: 1440)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !2328, file: !135, line: 3405, baseType: !3265, size: 384)
!3265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !3266)
!3266 = !{!3267, !3268}
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3265, file: !135, line: 3353, baseType: !2364, size: 192)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3265, file: !135, line: 3356, baseType: !3269, size: 192, offset: 192)
!3269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !996, line: 578, size: 192, elements: !3270)
!3270 = !{!3271, !3272, !3273, !3274, !3275, !3276, !3277, !3278, !3279, !3280, !3281}
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3269, file: !996, line: 580, baseType: !2136, size: 32)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3269, file: !996, line: 581, baseType: !2136, size: 32, offset: 32)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3269, file: !996, line: 582, baseType: !2136, size: 32, offset: 64)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3269, file: !996, line: 583, baseType: !2136, size: 32, offset: 96)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3269, file: !996, line: 584, baseType: !2439, size: 8, offset: 128)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3269, file: !996, line: 585, baseType: !2439, size: 8, offset: 136)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3269, file: !996, line: 586, baseType: !2439, size: 8, offset: 144)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3269, file: !996, line: 587, baseType: !2439, size: 8, offset: 152)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3269, file: !996, line: 588, baseType: !2439, size: 8, offset: 160)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3269, file: !996, line: 589, baseType: !2439, size: 8, offset: 168)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3269, file: !996, line: 590, baseType: !2439, size: 8, offset: 176)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !2227, file: !823, line: 178, baseType: !2164, size: 64)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !2227, file: !823, line: 179, baseType: !3284, size: 64)
!3284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3285, size: 64)
!3285 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !823, line: 150, baseType: !3286)
!3286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !823, line: 142, size: 320, elements: !3287)
!3287 = !{!3288, !3289, !3290, !3291, !3292, !3293}
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3286, file: !823, line: 144, baseType: !2326, size: 64)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3286, file: !823, line: 145, baseType: !2207, size: 64, offset: 64)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3286, file: !823, line: 146, baseType: !2207, size: 64, offset: 128)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3286, file: !823, line: 147, baseType: !2958, size: 32, offset: 192)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3286, file: !823, line: 148, baseType: !7, size: 32, offset: 224)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !3286, file: !823, line: 149, baseType: !2439, size: 8, offset: 256)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !2227, file: !823, line: 180, baseType: !3295, size: 64)
!3295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3296, size: 64)
!3296 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !823, line: 162, baseType: !3297)
!3297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !823, line: 159, size: 128, elements: !3298)
!3298 = !{!3299, !3300}
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3297, file: !823, line: 160, baseType: !2326, size: 64)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3297, file: !823, line: 161, baseType: !2295, size: 64, offset: 64)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !2227, file: !823, line: 181, baseType: !3302, size: 64)
!3302 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3303, size: 64)
!3303 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !823, line: 181, flags: DIFlagFwdDecl)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !2222, file: !823, line: 317, baseType: !3305, size: 64)
!3305 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2295, size: 64, elements: !2244)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !2222, file: !823, line: 318, baseType: !3307, size: 320)
!3307 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !823, line: 188, size: 320, elements: !3308)
!3308 = !{!3309, !3311, !3334}
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3307, file: !823, line: 190, baseType: !3310, size: 192)
!3310 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2226, size: 192, elements: !2397)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3307, file: !823, line: 193, baseType: !3312, size: 64, offset: 192)
!3312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3313, size: 64)
!3313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !823, line: 206, size: 320, elements: !3314)
!3314 = !{!3315, !3319, !3320, !3321, !3333}
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !3313, file: !823, line: 208, baseType: !3316, size: 64)
!3316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3317, size: 64)
!3317 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !2181, line: 62, baseType: !3318)
!3318 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2181, line: 61, flags: DIFlagFwdDecl)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !3313, file: !823, line: 211, baseType: !7, size: 32, offset: 64)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3313, file: !823, line: 214, baseType: !2295, size: 64, offset: 128)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !3313, file: !823, line: 224, baseType: !3322, size: 64, offset: 192)
!3322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3323, size: 64)
!3323 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !823, line: 202, baseType: !3324)
!3324 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !823, line: 202, size: 128, elements: !3325)
!3325 = !{!3326}
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3324, file: !823, line: 202, baseType: !3327, size: 128)
!3327 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !823, line: 200, baseType: !3328)
!3328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !823, line: 200, size: 128, elements: !3329)
!3329 = !{!3330, !3331, !3332}
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3328, file: !823, line: 200, baseType: !7, size: 32)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3328, file: !823, line: 200, baseType: !7, size: 32, offset: 32)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3328, file: !823, line: 200, baseType: !2243, size: 64, offset: 64)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !3313, file: !823, line: 234, baseType: !3322, size: 64, offset: 256)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3307, file: !823, line: 197, baseType: !2295, size: 64, offset: 256)
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !2222, file: !823, line: 319, baseType: !2386, size: 256)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !2222, file: !823, line: 320, baseType: !2405, size: 192)
!3337 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2183, file: !337, line: 134, baseType: !2316, size: 64, offset: 192)
!3338 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2183, file: !337, line: 137, baseType: !2326, size: 64, offset: 256)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2183, file: !337, line: 138, baseType: !2160, size: 32, offset: 320)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2183, file: !337, line: 142, baseType: !7, size: 32, offset: 352)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2183, file: !337, line: 144, baseType: !2136, size: 32, offset: 384)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2183, file: !337, line: 145, baseType: !2136, size: 32, offset: 416)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2183, file: !337, line: 146, baseType: !3344, size: 64, offset: 448)
!3344 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !337, line: 119, baseType: !2295)
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2165, file: !337, line: 220, baseType: !2168, size: 64, offset: 64)
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2165, file: !337, line: 223, baseType: !2316, size: 64, offset: 128)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2165, file: !337, line: 226, baseType: !3348, size: 64, offset: 192)
!3348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3349, size: 64)
!3349 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !337, line: 185, flags: DIFlagFwdDecl)
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2165, file: !337, line: 229, baseType: !3351, size: 128, offset: 256)
!3351 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3352, size: 128, elements: !2279)
!3352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3353, size: 64)
!3353 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !337, line: 229, flags: DIFlagFwdDecl)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2165, file: !337, line: 232, baseType: !2164, size: 64, offset: 384)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2165, file: !337, line: 233, baseType: !2164, size: 64, offset: 448)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2165, file: !337, line: 238, baseType: !3357, size: 64, offset: 512)
!3357 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !337, line: 235, size: 64, elements: !3358)
!3358 = !{!3359, !3365}
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !3357, file: !337, line: 236, baseType: !3360, size: 64)
!3360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3361, size: 64)
!3361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !337, line: 273, size: 128, elements: !3362)
!3362 = !{!3363, !3364}
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3361, file: !337, line: 275, baseType: !2191, size: 64)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !3361, file: !337, line: 278, baseType: !2191, size: 64, offset: 64)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3357, file: !337, line: 237, baseType: !3366, size: 64)
!3366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3367, size: 64)
!3367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !337, line: 259, size: 320, elements: !3368)
!3368 = !{!3369, !3370, !3371, !3372, !3373}
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !3367, file: !337, line: 261, baseType: !2207, size: 64)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !3367, file: !337, line: 262, baseType: !2207, size: 64, offset: 64)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !3367, file: !337, line: 266, baseType: !2207, size: 64, offset: 128)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !3367, file: !337, line: 267, baseType: !2207, size: 64, offset: 192)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3367, file: !337, line: 270, baseType: !2136, size: 32, offset: 256)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2165, file: !337, line: 241, baseType: !3344, size: 64, offset: 576)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2165, file: !337, line: 244, baseType: !2136, size: 32, offset: 640)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2165, file: !337, line: 247, baseType: !2136, size: 32, offset: 672)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2165, file: !337, line: 250, baseType: !2136, size: 32, offset: 704)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2165, file: !337, line: 253, baseType: !2136, size: 32, offset: 736)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2165, file: !337, line: 256, baseType: !2136, size: 32, offset: 768)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2147, file: !385, line: 327, baseType: !2326, size: 64, offset: 192)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !2144, file: !385, line: 739, baseType: !3382, size: 448)
!3382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !385, line: 350, size: 448, elements: !3383)
!3383 = !{!3384, !3390}
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !3382, file: !385, line: 353, baseType: !3385, size: 384)
!3385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !385, line: 333, size: 384, elements: !3386)
!3386 = !{!3387, !3388, !3389}
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3385, file: !385, line: 336, baseType: !2147, size: 256)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !3385, file: !385, line: 343, baseType: !2829, size: 64, offset: 256)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !3385, file: !385, line: 344, baseType: !2836, size: 64, offset: 320)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3382, file: !385, line: 359, baseType: !2723, size: 64, offset: 384)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !2144, file: !385, line: 740, baseType: !3392, size: 512)
!3392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !385, line: 365, size: 512, elements: !3393)
!3393 = !{!3394, !3395, !3396}
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !3392, file: !385, line: 368, baseType: !3385, size: 384)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !3392, file: !385, line: 373, baseType: !2326, size: 64, offset: 384)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !3392, file: !385, line: 374, baseType: !2326, size: 64, offset: 448)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !2144, file: !385, line: 741, baseType: !3398, size: 576)
!3398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !385, line: 380, size: 576, elements: !3399)
!3399 = !{!3400, !3401}
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !3398, file: !385, line: 383, baseType: !3392, size: 512)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3398, file: !385, line: 389, baseType: !2723, size: 64, offset: 512)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2144, file: !385, line: 742, baseType: !3403, size: 320)
!3403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !385, line: 395, size: 320, elements: !3404)
!3404 = !{!3405, !3406}
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3403, file: !385, line: 397, baseType: !2147, size: 256)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !3403, file: !385, line: 400, baseType: !2191, size: 64, offset: 256)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !2144, file: !385, line: 743, baseType: !3408, size: 448)
!3408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !385, line: 406, size: 448, elements: !3409)
!3409 = !{!3410, !3411, !3412, !3413}
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3408, file: !385, line: 408, baseType: !2147, size: 256)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3408, file: !385, line: 412, baseType: !2326, size: 64, offset: 256)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3408, file: !385, line: 420, baseType: !2326, size: 64, offset: 320)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !3408, file: !385, line: 423, baseType: !2191, size: 64, offset: 384)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !2144, file: !385, line: 744, baseType: !3415, size: 384)
!3415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !385, line: 429, size: 384, elements: !3416)
!3416 = !{!3417, !3418, !3419}
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3415, file: !385, line: 431, baseType: !2147, size: 256)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !3415, file: !385, line: 434, baseType: !2326, size: 64, offset: 256)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !3415, file: !385, line: 437, baseType: !2191, size: 64, offset: 320)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !2144, file: !385, line: 745, baseType: !3421, size: 384)
!3421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !385, line: 443, size: 384, elements: !3422)
!3422 = !{!3423, !3424, !3425}
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3421, file: !385, line: 445, baseType: !2147, size: 256)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !3421, file: !385, line: 449, baseType: !2326, size: 64, offset: 256)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !3421, file: !385, line: 453, baseType: !2191, size: 64, offset: 320)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !2144, file: !385, line: 746, baseType: !3427, size: 320)
!3427 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !385, line: 459, size: 320, elements: !3428)
!3428 = !{!3429, !3430}
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3427, file: !385, line: 461, baseType: !2147, size: 256)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !3427, file: !385, line: 464, baseType: !2326, size: 64, offset: 256)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !2144, file: !385, line: 747, baseType: !3432, size: 768)
!3432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !385, line: 469, size: 768, elements: !3433)
!3433 = !{!3434, !3435, !3436, !3437, !3438}
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3432, file: !385, line: 471, baseType: !2147, size: 256)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !3432, file: !385, line: 474, baseType: !7, size: 32, offset: 256)
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !3432, file: !385, line: 475, baseType: !7, size: 32, offset: 288)
!3437 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !3432, file: !385, line: 478, baseType: !2326, size: 64, offset: 320)
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !3432, file: !385, line: 481, baseType: !3439, size: 384, offset: 384)
!3439 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3440, size: 384, elements: !2244)
!3440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !3441)
!3441 = !{!3442, !3443, !3444}
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !3440, file: !135, line: 1920, baseType: !2841, size: 256)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !3440, file: !135, line: 1921, baseType: !2326, size: 64, offset: 256)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3440, file: !135, line: 1922, baseType: !2160, size: 32, offset: 320)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !2144, file: !385, line: 748, baseType: !3446, size: 320)
!3446 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !385, line: 487, size: 320, elements: !3447)
!3447 = !{!3448, !3449}
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3446, file: !385, line: 490, baseType: !2147, size: 256)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !3446, file: !385, line: 494, baseType: !2136, size: 32, offset: 256)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !2144, file: !385, line: 749, baseType: !3451, size: 384)
!3451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !385, line: 500, size: 384, elements: !3452)
!3452 = !{!3453, !3454, !3455}
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3451, file: !385, line: 502, baseType: !2147, size: 256)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !3451, file: !385, line: 506, baseType: !2191, size: 64, offset: 256)
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !3451, file: !385, line: 510, baseType: !2191, size: 64, offset: 320)
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !2144, file: !385, line: 750, baseType: !3457, size: 320)
!3457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !385, line: 529, size: 320, elements: !3458)
!3458 = !{!3459, !3460}
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3457, file: !385, line: 531, baseType: !2147, size: 256)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !3457, file: !385, line: 540, baseType: !2191, size: 64, offset: 256)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !2144, file: !385, line: 751, baseType: !3462, size: 704)
!3462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !385, line: 546, size: 704, elements: !3463)
!3463 = !{!3464, !3465, !3466, !3467, !3468, !3469, !3470}
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !3462, file: !385, line: 549, baseType: !3392, size: 512)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3462, file: !385, line: 553, baseType: !2232, size: 64, offset: 512)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !3462, file: !385, line: 557, baseType: !2439, size: 8, offset: 576)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !3462, file: !385, line: 558, baseType: !2439, size: 8, offset: 584)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !3462, file: !385, line: 559, baseType: !2439, size: 8, offset: 592)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !3462, file: !385, line: 560, baseType: !2439, size: 8, offset: 600)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3462, file: !385, line: 566, baseType: !2723, size: 64, offset: 640)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !2144, file: !385, line: 752, baseType: !3472, size: 384)
!3472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !385, line: 571, size: 384, elements: !3473)
!3473 = !{!3474, !3475}
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3472, file: !385, line: 573, baseType: !3403, size: 320)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3472, file: !385, line: 577, baseType: !2326, size: 64, offset: 320)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !2144, file: !385, line: 753, baseType: !3477, size: 576)
!3477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !385, line: 600, size: 576, elements: !3478)
!3478 = !{!3479, !3480, !3481, !3482, !3491}
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3477, file: !385, line: 602, baseType: !3403, size: 320)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3477, file: !385, line: 605, baseType: !2326, size: 64, offset: 320)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !3477, file: !385, line: 609, baseType: !2140, size: 64, offset: 384)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !3477, file: !385, line: 612, baseType: !3483, size: 64, offset: 448)
!3483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3484, size: 64)
!3484 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !385, line: 581, size: 320, elements: !3485)
!3485 = !{!3486, !3487, !3488, !3489, !3490}
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !3484, file: !385, line: 583, baseType: !134, size: 32)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3484, file: !385, line: 586, baseType: !2326, size: 64, offset: 64)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !3484, file: !385, line: 589, baseType: !2326, size: 64, offset: 128)
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !3484, file: !385, line: 592, baseType: !2326, size: 64, offset: 192)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !3484, file: !385, line: 595, baseType: !2326, size: 64, offset: 256)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !3477, file: !385, line: 616, baseType: !2191, size: 64, offset: 512)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !2144, file: !385, line: 754, baseType: !3493, size: 512)
!3493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !385, line: 622, size: 512, elements: !3494)
!3494 = !{!3495, !3496, !3497, !3498}
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3493, file: !385, line: 624, baseType: !3403, size: 320)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3493, file: !385, line: 628, baseType: !2326, size: 64, offset: 320)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !3493, file: !385, line: 632, baseType: !2326, size: 64, offset: 384)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !3493, file: !385, line: 636, baseType: !2326, size: 64, offset: 448)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !2144, file: !385, line: 755, baseType: !3500, size: 704)
!3500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !385, line: 642, size: 704, elements: !3501)
!3501 = !{!3502, !3503, !3504, !3505}
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !3500, file: !385, line: 644, baseType: !3493, size: 512)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !3500, file: !385, line: 648, baseType: !2326, size: 64, offset: 512)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !3500, file: !385, line: 652, baseType: !2326, size: 64, offset: 576)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !3500, file: !385, line: 653, baseType: !2326, size: 64, offset: 640)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !2144, file: !385, line: 756, baseType: !3507, size: 448)
!3507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !385, line: 663, size: 448, elements: !3508)
!3508 = !{!3509, !3510, !3511}
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3507, file: !385, line: 665, baseType: !3403, size: 320)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3507, file: !385, line: 668, baseType: !2326, size: 64, offset: 320)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !3507, file: !385, line: 673, baseType: !2326, size: 64, offset: 384)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !2144, file: !385, line: 757, baseType: !3513, size: 384)
!3513 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !385, line: 694, size: 384, elements: !3514)
!3514 = !{!3515, !3516}
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3513, file: !385, line: 696, baseType: !3403, size: 320)
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3513, file: !385, line: 699, baseType: !2326, size: 64, offset: 320)
!3517 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !2144, file: !385, line: 758, baseType: !3518, size: 384)
!3518 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !385, line: 681, size: 384, elements: !3519)
!3519 = !{!3520, !3521, !3522}
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3518, file: !385, line: 683, baseType: !2147, size: 256)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !3518, file: !385, line: 686, baseType: !2326, size: 64, offset: 256)
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !3518, file: !385, line: 689, baseType: !2326, size: 64, offset: 320)
!3523 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !2144, file: !385, line: 759, baseType: !3524, size: 384)
!3524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !385, line: 707, size: 384, elements: !3525)
!3525 = !{!3526, !3527, !3528}
!3526 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3524, file: !385, line: 709, baseType: !2147, size: 256)
!3527 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !3524, file: !385, line: 712, baseType: !2326, size: 64, offset: 256)
!3528 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !3524, file: !385, line: 712, baseType: !2326, size: 64, offset: 320)
!3529 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !2144, file: !385, line: 760, baseType: !3530, size: 320)
!3530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !385, line: 718, size: 320, elements: !3531)
!3531 = !{!3532, !3533}
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3530, file: !385, line: 720, baseType: !2147, size: 256)
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3530, file: !385, line: 723, baseType: !2326, size: 64, offset: 256)
!3534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3535, size: 64)
!3535 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2144)
!3536 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3537, size: 64)
!3537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stack_var", file: !3, line: 146, size: 448, elements: !3538)
!3538 = !{!3539, !3540, !3541, !3542, !3543, !3544, !3545}
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3537, file: !3, line: 149, baseType: !2326, size: 64)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3537, file: !3, line: 154, baseType: !2295, size: 64, offset: 64)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3537, file: !3, line: 158, baseType: !2295, size: 64, offset: 128)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "alignb", scope: !3537, file: !3, line: 162, baseType: !7, size: 32, offset: 192)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "representative", scope: !3537, file: !3, line: 165, baseType: !2140, size: 64, offset: 256)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3537, file: !3, line: 168, baseType: !2140, size: 64, offset: 320)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "conflicts", scope: !3537, file: !3, line: 171, baseType: !2806, size: 64, offset: 384)
!3546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2207, size: 64)
!3547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2439, size: 64)
!3548 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3549, size: 64)
!3549 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2140)
!3550 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2806, size: 64)
!3551 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !2021, line: 30, baseType: !3552)
!3552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3553, size: 64)
!3553 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !2841)
!3554 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !2021, line: 27, baseType: !2834)
!3555 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3556 = !{!3557, !3585, !3627, !0, !3629, !3631, !3633, !3635, !3637, !3639, !3641}
!3557 = !DIGlobalVariableExpression(var: !3558, expr: !DIExpression())
!3558 = distinct !DIGlobalVariable(name: "pass_expand", scope: !2, file: !3, line: 3958, type: !3559, isLocal: false, isDefinition: true)
!3559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !405, line: 162, size: 640, elements: !3560)
!3560 = !{!3561}
!3561 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3559, file: !405, line: 164, baseType: !3562, size: 640)
!3562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !405, line: 114, size: 640, elements: !3563)
!3563 = !{!3564, !3565, !3566, !3570, !3574, !3576, !3577, !3578, !3580, !3581, !3582, !3583, !3584}
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3562, file: !405, line: 117, baseType: !404, size: 32)
!3565 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3562, file: !405, line: 121, baseType: !2232, size: 64, offset: 64)
!3566 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3562, file: !405, line: 125, baseType: !3567, size: 64, offset: 128)
!3567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3568, size: 64)
!3568 = !DISubroutineType(types: !3569)
!3569 = !{!2439}
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3562, file: !405, line: 130, baseType: !3571, size: 64, offset: 192)
!3571 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3572, size: 64)
!3572 = !DISubroutineType(types: !3573)
!3573 = !{!7}
!3574 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3562, file: !405, line: 133, baseType: !3575, size: 64, offset: 256)
!3575 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3562, size: 64)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3562, file: !405, line: 136, baseType: !3575, size: 64, offset: 320)
!3577 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3562, file: !405, line: 139, baseType: !2136, size: 32, offset: 384)
!3578 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3562, file: !405, line: 143, baseType: !3579, size: 32, offset: 416)
!3579 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !412, line: 80, baseType: !411)
!3580 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3562, file: !405, line: 146, baseType: !7, size: 32, offset: 448)
!3581 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3562, file: !405, line: 147, baseType: !7, size: 32, offset: 480)
!3582 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3562, file: !405, line: 148, baseType: !7, size: 32, offset: 512)
!3583 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3562, file: !405, line: 151, baseType: !7, size: 32, offset: 544)
!3584 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3562, file: !405, line: 152, baseType: !7, size: 32, offset: 576)
!3585 = !DIGlobalVariableExpression(var: !3586, expr: !DIExpression())
!3586 = distinct !DIGlobalVariable(name: "SA", scope: !2, file: !3, line: 50, type: !3587, isLocal: false, isDefinition: true)
!3587 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssaexpand", file: !3588, line: 29, size: 256, elements: !3589)
!3588 = !DIFile(filename: "./ssaexpand.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3589 = !{!3590, !3624, !3625, !3626}
!3590 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !3587, file: !3588, line: 32, baseType: !3591, size: 64)
!3591 = !DIDerivedType(tag: DW_TAG_typedef, name: "var_map", file: !3592, line: 77, baseType: !3593)
!3592 = !DIFile(filename: "./tree-ssa-live.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3593 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3594, size: 64)
!3594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_var_map", file: !3592, line: 54, size: 448, elements: !3595)
!3595 = !{!3596, !3611, !3613, !3614, !3615, !3616, !3617, !3618}
!3596 = !DIDerivedType(tag: DW_TAG_member, name: "var_partition", scope: !3594, file: !3592, line: 57, baseType: !3597, size: 64)
!3597 = !DIDerivedType(tag: DW_TAG_typedef, name: "partition", file: !3598, line: 65, baseType: !3599)
!3598 = !DIFile(filename: "./include/partition.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3600, size: 64)
!3600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "partition_def", file: !3598, line: 59, size: 256, elements: !3601)
!3601 = !{!3602, !3603}
!3602 = !DIDerivedType(tag: DW_TAG_member, name: "num_elements", scope: !3600, file: !3598, line: 62, baseType: !2136, size: 32)
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !3600, file: !3598, line: 64, baseType: !3604, size: 192, offset: 64)
!3604 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3605, size: 192, elements: !2244)
!3605 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "partition_elem", file: !3598, line: 46, size: 192, elements: !3606)
!3606 = !{!3607, !3608, !3610}
!3607 = !DIDerivedType(tag: DW_TAG_member, name: "class_element", scope: !3605, file: !3598, line: 50, baseType: !2136, size: 32)
!3608 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3605, file: !3598, line: 53, baseType: !3609, size: 64, offset: 64)
!3609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3605, size: 64)
!3610 = !DIDerivedType(tag: DW_TAG_member, name: "class_count", scope: !3605, file: !3598, line: 56, baseType: !7, size: 32, offset: 128)
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "partition_to_view", scope: !3594, file: !3592, line: 60, baseType: !3612, size: 64, offset: 64)
!3612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2136, size: 64)
!3613 = !DIDerivedType(tag: DW_TAG_member, name: "view_to_partition", scope: !3594, file: !3592, line: 61, baseType: !3612, size: 64, offset: 128)
!3614 = !DIDerivedType(tag: DW_TAG_member, name: "num_partitions", scope: !3594, file: !3592, line: 64, baseType: !7, size: 32, offset: 192)
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "partition_size", scope: !3594, file: !3592, line: 67, baseType: !7, size: 32, offset: 224)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "num_basevars", scope: !3594, file: !3592, line: 70, baseType: !2136, size: 32, offset: 256)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "partition_to_base_index", scope: !3594, file: !3592, line: 73, baseType: !3612, size: 64, offset: 320)
!3618 = !DIDerivedType(tag: DW_TAG_member, name: "basevars", scope: !3594, file: !3592, line: 76, baseType: !3619, size: 64, offset: 384)
!3619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3620, size: 64)
!3620 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !3621)
!3621 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !3622)
!3622 = !{!3623}
!3623 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3621, file: !135, line: 184, baseType: !2717, size: 128)
!3624 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !3587, file: !3588, line: 36, baseType: !2806, size: 64, offset: 64)
!3625 = !DIDerivedType(tag: DW_TAG_member, name: "partition_to_pseudo", scope: !3587, file: !3588, line: 41, baseType: !3546, size: 64, offset: 128)
!3626 = !DIDerivedType(tag: DW_TAG_member, name: "partition_has_default_def", scope: !3587, file: !3588, line: 45, baseType: !2806, size: 64, offset: 192)
!3627 = !DIGlobalVariableExpression(var: !3628, expr: !DIExpression())
!3628 = distinct !DIGlobalVariable(name: "currently_expanding_gimple_stmt", scope: !2, file: !3, line: 54, type: !2201, isLocal: false, isDefinition: true)
!3629 = !DIGlobalVariableExpression(var: !3630, expr: !DIExpression())
!3630 = distinct !DIGlobalVariable(name: "stack_vars_sorted", scope: !2, file: !3, line: 183, type: !2139, isLocal: true, isDefinition: true)
!3631 = !DIGlobalVariableExpression(var: !3632, expr: !DIExpression())
!3632 = distinct !DIGlobalVariable(name: "has_protected_decls", scope: !2, file: !3, line: 192, type: !2439, isLocal: true, isDefinition: true)
!3633 = !DIGlobalVariableExpression(var: !3634, expr: !DIExpression())
!3634 = distinct !DIGlobalVariable(name: "has_short_buffer", scope: !2, file: !3, line: 196, type: !2439, isLocal: true, isDefinition: true)
!3635 = !DIGlobalVariableExpression(var: !3636, expr: !DIExpression())
!3636 = distinct !DIGlobalVariable(name: "stack_vars_alloc", scope: !2, file: !3, line: 178, type: !2140, isLocal: true, isDefinition: true)
!3637 = !DIGlobalVariableExpression(var: !3638, expr: !DIExpression())
!3638 = distinct !DIGlobalVariable(name: "stack_vars", scope: !2, file: !3, line: 177, type: !3536, isLocal: true, isDefinition: true)
!3639 = !DIGlobalVariableExpression(var: !3640, expr: !DIExpression())
!3640 = distinct !DIGlobalVariable(name: "frame_phase", scope: !2, file: !3, line: 188, type: !2136, isLocal: true, isDefinition: true)
!3641 = !DIGlobalVariableExpression(var: !3642, expr: !DIExpression())
!3642 = distinct !DIGlobalVariable(name: "lab_rtx_for_bb", scope: !2, file: !3, line: 1501, type: !2809, isLocal: true, isDefinition: true)
!3643 = !{i32 7, !"Dwarf Version", i32 4}
!3644 = !{i32 2, !"Debug Info Version", i32 3}
!3645 = !{i32 1, !"wchar_size", i32 4}
!3646 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3647 = distinct !DISubprogram(name: "gimple_assign_rhs_to_tree", scope: !3, file: !3, line: 60, type: !3648, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3648 = !DISubroutineType(types: !3649)
!3649 = !{!2326, !2201}
!3650 = !{}
!3651 = !DILocalVariable(name: "stmt", arg: 1, scope: !3647, file: !3, line: 60, type: !2201)
!3652 = !DILocation(line: 60, column: 35, scope: !3647)
!3653 = !DILocalVariable(name: "t", scope: !3647, file: !3, line: 62, type: !2326)
!3654 = !DILocation(line: 62, column: 8, scope: !3647)
!3655 = !DILocalVariable(name: "grhs_class", scope: !3647, file: !3, line: 63, type: !384)
!3656 = !DILocation(line: 63, column: 25, scope: !3647)
!3657 = !DILocation(line: 65, column: 56, scope: !3647)
!3658 = !DILocation(line: 65, column: 38, scope: !3647)
!3659 = !DILocation(line: 65, column: 16, scope: !3647)
!3660 = !DILocation(line: 65, column: 14, scope: !3647)
!3661 = !DILocation(line: 67, column: 7, scope: !3662)
!3662 = distinct !DILexicalBlock(scope: !3647, file: !3, line: 67, column: 7)
!3663 = !DILocation(line: 67, column: 18, scope: !3662)
!3664 = !DILocation(line: 67, column: 7, scope: !3647)
!3665 = !DILocation(line: 68, column: 9, scope: !3662)
!3666 = !DILocation(line: 68, column: 7, scope: !3662)
!3667 = !DILocation(line: 68, column: 5, scope: !3662)
!3668 = !DILocation(line: 72, column: 12, scope: !3669)
!3669 = distinct !DILexicalBlock(scope: !3662, file: !3, line: 72, column: 12)
!3670 = !DILocation(line: 72, column: 23, scope: !3669)
!3671 = !DILocation(line: 72, column: 12, scope: !3662)
!3672 = !DILocation(line: 73, column: 9, scope: !3669)
!3673 = !DILocation(line: 73, column: 7, scope: !3669)
!3674 = !DILocation(line: 73, column: 5, scope: !3669)
!3675 = !DILocation(line: 76, column: 12, scope: !3676)
!3676 = distinct !DILexicalBlock(scope: !3669, file: !3, line: 76, column: 12)
!3677 = !DILocation(line: 76, column: 23, scope: !3676)
!3678 = !DILocation(line: 76, column: 12, scope: !3669)
!3679 = !DILocation(line: 78, column: 31, scope: !3680)
!3680 = distinct !DILexicalBlock(scope: !3676, file: !3, line: 77, column: 5)
!3681 = !DILocation(line: 78, column: 11, scope: !3680)
!3682 = !DILocation(line: 78, column: 9, scope: !3680)
!3683 = !DILocation(line: 80, column: 33, scope: !3684)
!3684 = distinct !DILexicalBlock(scope: !3680, file: !3, line: 80, column: 11)
!3685 = !DILocation(line: 80, column: 12, scope: !3684)
!3686 = !DILocation(line: 80, column: 39, scope: !3684)
!3687 = !DILocation(line: 80, column: 42, scope: !3684)
!3688 = !DILocation(line: 81, column: 5, scope: !3684)
!3689 = !DILocation(line: 81, column: 25, scope: !3684)
!3690 = !DILocation(line: 81, column: 8, scope: !3684)
!3691 = !DILocation(line: 81, column: 34, scope: !3684)
!3692 = !DILocation(line: 81, column: 31, scope: !3684)
!3693 = !DILocation(line: 82, column: 4, scope: !3684)
!3694 = !DILocation(line: 82, column: 22, scope: !3684)
!3695 = !DILocation(line: 82, column: 8, scope: !3684)
!3696 = !DILocation(line: 83, column: 8, scope: !3684)
!3697 = !DILocation(line: 83, column: 11, scope: !3684)
!3698 = !DILocation(line: 84, column: 8, scope: !3684)
!3699 = !DILocation(line: 84, column: 11, scope: !3684)
!3700 = !DILocation(line: 85, column: 8, scope: !3684)
!3701 = !DILocation(line: 85, column: 25, scope: !3684)
!3702 = !DILocation(line: 85, column: 11, scope: !3684)
!3703 = !DILocation(line: 85, column: 34, scope: !3684)
!3704 = !DILocation(line: 85, column: 31, scope: !3684)
!3705 = !DILocation(line: 80, column: 11, scope: !3680)
!3706 = !DILocation(line: 86, column: 6, scope: !3684)
!3707 = !DILocation(line: 86, column: 4, scope: !3684)
!3708 = !DILocation(line: 86, column: 2, scope: !3684)
!3709 = !DILocation(line: 87, column: 5, scope: !3680)
!3710 = !DILocation(line: 89, column: 5, scope: !3676)
!3711 = !DILocation(line: 91, column: 28, scope: !3712)
!3712 = distinct !DILexicalBlock(scope: !3647, file: !3, line: 91, column: 7)
!3713 = !DILocation(line: 91, column: 7, scope: !3712)
!3714 = !DILocation(line: 91, column: 34, scope: !3712)
!3715 = !DILocation(line: 91, column: 37, scope: !3712)
!3716 = !DILocation(line: 91, column: 7, scope: !3647)
!3717 = !DILocation(line: 92, column: 5, scope: !3712)
!3718 = !DILocation(line: 93, column: 21, scope: !3719)
!3719 = distinct !DILexicalBlock(scope: !3647, file: !3, line: 93, column: 7)
!3720 = !DILocation(line: 93, column: 7, scope: !3719)
!3721 = !DILocation(line: 93, column: 27, scope: !3719)
!3722 = !DILocation(line: 93, column: 30, scope: !3719)
!3723 = !DILocation(line: 93, column: 57, scope: !3719)
!3724 = !DILocation(line: 93, column: 60, scope: !3719)
!3725 = !DILocation(line: 93, column: 7, scope: !3647)
!3726 = !DILocation(line: 94, column: 36, scope: !3719)
!3727 = !DILocation(line: 94, column: 22, scope: !3719)
!3728 = !DILocation(line: 94, column: 5, scope: !3719)
!3729 = !DILocation(line: 94, column: 20, scope: !3719)
!3730 = !DILocation(line: 96, column: 10, scope: !3647)
!3731 = !DILocation(line: 96, column: 3, scope: !3647)
!3732 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !385, file: !385, line: 1686, type: !3733, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3733 = !DISubroutineType(types: !3734)
!3734 = !{!384, !134}
!3735 = !DILocalVariable(name: "code", arg: 1, scope: !3732, file: !385, line: 1686, type: !134)
!3736 = !DILocation(line: 1686, column: 38, scope: !3732)
!3737 = !DILocation(line: 1688, column: 63, scope: !3732)
!3738 = !DILocation(line: 1688, column: 34, scope: !3732)
!3739 = !DILocation(line: 1688, column: 10, scope: !3732)
!3740 = !DILocation(line: 1688, column: 3, scope: !3732)
!3741 = distinct !DISubprogram(name: "gimple_expr_code", scope: !385, file: !385, line: 1438, type: !3742, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3742 = !DISubroutineType(types: !3743)
!3743 = !{!134, !3744}
!3744 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !2181, line: 60, baseType: !3534)
!3745 = !DILocalVariable(name: "stmt", arg: 1, scope: !3741, file: !385, line: 1438, type: !3744)
!3746 = !DILocation(line: 1438, column: 32, scope: !3741)
!3747 = !DILocalVariable(name: "code", scope: !3741, file: !385, line: 1440, type: !587)
!3748 = !DILocation(line: 1440, column: 20, scope: !3741)
!3749 = !DILocation(line: 1440, column: 40, scope: !3741)
!3750 = !DILocation(line: 1440, column: 27, scope: !3741)
!3751 = !DILocation(line: 1441, column: 7, scope: !3752)
!3752 = distinct !DILexicalBlock(scope: !3741, file: !385, line: 1441, column: 7)
!3753 = !DILocation(line: 1441, column: 12, scope: !3752)
!3754 = !DILocation(line: 1441, column: 29, scope: !3752)
!3755 = !DILocation(line: 1441, column: 32, scope: !3752)
!3756 = !DILocation(line: 1441, column: 37, scope: !3752)
!3757 = !DILocation(line: 1441, column: 7, scope: !3741)
!3758 = !DILocation(line: 1442, column: 29, scope: !3752)
!3759 = !DILocation(line: 1442, column: 35, scope: !3752)
!3760 = !DILocation(line: 1442, column: 42, scope: !3752)
!3761 = !DILocation(line: 1442, column: 5, scope: !3752)
!3762 = !DILocation(line: 1443, column: 12, scope: !3763)
!3763 = distinct !DILexicalBlock(scope: !3752, file: !385, line: 1443, column: 12)
!3764 = !DILocation(line: 1443, column: 17, scope: !3763)
!3765 = !DILocation(line: 1443, column: 12, scope: !3752)
!3766 = !DILocation(line: 1444, column: 5, scope: !3763)
!3767 = !DILocation(line: 1446, column: 5, scope: !3763)
!3768 = !DILocation(line: 1448, column: 5, scope: !3741)
!3769 = !DILocation(line: 1450, column: 1, scope: !3741)
!3770 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !385, file: !385, line: 1815, type: !3742, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3771 = !DILocalVariable(name: "gs", arg: 1, scope: !3770, file: !385, line: 1815, type: !3744)
!3772 = !DILocation(line: 1815, column: 38, scope: !3770)
!3773 = !DILocalVariable(name: "code", scope: !3770, file: !385, line: 1817, type: !134)
!3774 = !DILocation(line: 1817, column: 18, scope: !3770)
!3775 = !DILocation(line: 1820, column: 28, scope: !3770)
!3776 = !DILocation(line: 1820, column: 10, scope: !3770)
!3777 = !DILocation(line: 1820, column: 8, scope: !3770)
!3778 = !DILocation(line: 1821, column: 29, scope: !3779)
!3779 = distinct !DILexicalBlock(scope: !3770, file: !385, line: 1821, column: 7)
!3780 = !DILocation(line: 1821, column: 7, scope: !3779)
!3781 = !DILocation(line: 1821, column: 35, scope: !3779)
!3782 = !DILocation(line: 1821, column: 7, scope: !3770)
!3783 = !DILocation(line: 1822, column: 12, scope: !3779)
!3784 = !DILocation(line: 1822, column: 10, scope: !3779)
!3785 = !DILocation(line: 1822, column: 5, scope: !3779)
!3786 = !DILocation(line: 1824, column: 10, scope: !3770)
!3787 = !DILocation(line: 1824, column: 3, scope: !3770)
!3788 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !385, file: !385, line: 1694, type: !3789, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3789 = !DISubroutineType(types: !3790)
!3790 = !{!2326, !3744}
!3791 = !DILocalVariable(name: "gs", arg: 1, scope: !3788, file: !385, line: 1694, type: !3744)
!3792 = !DILocation(line: 1694, column: 33, scope: !3788)
!3793 = !DILocation(line: 1697, column: 21, scope: !3788)
!3794 = !DILocation(line: 1697, column: 10, scope: !3788)
!3795 = !DILocation(line: 1697, column: 3, scope: !3788)
!3796 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !385, file: !385, line: 1727, type: !3789, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3797 = !DILocalVariable(name: "gs", arg: 1, scope: !3796, file: !385, line: 1727, type: !3744)
!3798 = !DILocation(line: 1727, column: 34, scope: !3796)
!3799 = !DILocation(line: 1730, column: 21, scope: !3796)
!3800 = !DILocation(line: 1730, column: 10, scope: !3796)
!3801 = !DILocation(line: 1730, column: 3, scope: !3796)
!3802 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !385, file: !385, line: 1759, type: !3789, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3803 = !DILocalVariable(name: "gs", arg: 1, scope: !3802, file: !385, line: 1759, type: !3744)
!3804 = !DILocation(line: 1759, column: 34, scope: !3802)
!3805 = !DILocation(line: 1763, column: 23, scope: !3806)
!3806 = distinct !DILexicalBlock(scope: !3802, file: !385, line: 1763, column: 7)
!3807 = !DILocation(line: 1763, column: 7, scope: !3806)
!3808 = !DILocation(line: 1763, column: 27, scope: !3806)
!3809 = !DILocation(line: 1763, column: 7, scope: !3802)
!3810 = !DILocation(line: 1764, column: 23, scope: !3806)
!3811 = !DILocation(line: 1764, column: 12, scope: !3806)
!3812 = !DILocation(line: 1764, column: 5, scope: !3806)
!3813 = !DILocation(line: 1766, column: 5, scope: !3806)
!3814 = !DILocation(line: 1767, column: 1, scope: !3802)
!3815 = distinct !DISubprogram(name: "gimple_has_location", scope: !385, file: !385, line: 1165, type: !3816, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3816 = !DISubroutineType(types: !3817)
!3817 = !{!2439, !3744}
!3818 = !DILocalVariable(name: "g", arg: 1, scope: !3815, file: !385, line: 1165, type: !3744)
!3819 = !DILocation(line: 1165, column: 35, scope: !3815)
!3820 = !DILocation(line: 1167, column: 27, scope: !3815)
!3821 = !DILocation(line: 1167, column: 10, scope: !3815)
!3822 = !DILocation(line: 1167, column: 30, scope: !3815)
!3823 = !DILocation(line: 1167, column: 3, scope: !3815)
!3824 = distinct !DISubprogram(name: "gimple_location", scope: !385, file: !385, line: 1139, type: !3825, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3825 = !DISubroutineType(types: !3826)
!3826 = !{!2160, !3744}
!3827 = !DILocalVariable(name: "g", arg: 1, scope: !3824, file: !385, line: 1139, type: !3744)
!3828 = !DILocation(line: 1139, column: 31, scope: !3824)
!3829 = !DILocation(line: 1141, column: 10, scope: !3824)
!3830 = !DILocation(line: 1141, column: 13, scope: !3824)
!3831 = !DILocation(line: 1141, column: 20, scope: !3824)
!3832 = !DILocation(line: 1141, column: 3, scope: !3824)
!3833 = distinct !DISubprogram(name: "gimple_block", scope: !385, file: !385, line: 1121, type: !3789, scopeLine: 1122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3834 = !DILocalVariable(name: "g", arg: 1, scope: !3833, file: !385, line: 1121, type: !3744)
!3835 = !DILocation(line: 1121, column: 28, scope: !3833)
!3836 = !DILocation(line: 1123, column: 10, scope: !3833)
!3837 = !DILocation(line: 1123, column: 13, scope: !3833)
!3838 = !DILocation(line: 1123, column: 20, scope: !3833)
!3839 = !DILocation(line: 1123, column: 3, scope: !3833)
!3840 = distinct !DISubprogram(name: "estimated_stack_frame_size", scope: !3, file: !3, line: 1259, type: !3841, scopeLine: 1260, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3841 = !DISubroutineType(types: !3842)
!3842 = !{!2295}
!3843 = !DILocalVariable(name: "size", scope: !3840, file: !3, line: 1261, type: !2295)
!3844 = !DILocation(line: 1261, column: 17, scope: !3840)
!3845 = !DILocalVariable(name: "i", scope: !3840, file: !3, line: 1262, type: !2140)
!3846 = !DILocation(line: 1262, column: 10, scope: !3840)
!3847 = !DILocalVariable(name: "t", scope: !3840, file: !3, line: 1263, type: !2326)
!3848 = !DILocation(line: 1263, column: 8, scope: !3840)
!3849 = !DILocalVariable(name: "outer_block", scope: !3840, file: !3, line: 1263, type: !2326)
!3850 = !DILocation(line: 1263, column: 11, scope: !3840)
!3851 = !DILocation(line: 1263, column: 25, scope: !3840)
!3852 = !DILocation(line: 1265, column: 3, scope: !3840)
!3853 = !DILocation(line: 1267, column: 12, scope: !3854)
!3854 = distinct !DILexicalBlock(scope: !3840, file: !3, line: 1267, column: 3)
!3855 = !DILocation(line: 1267, column: 18, scope: !3854)
!3856 = !DILocation(line: 1267, column: 10, scope: !3854)
!3857 = !DILocation(line: 1267, column: 8, scope: !3854)
!3858 = !DILocation(line: 1267, column: 31, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3854, file: !3, line: 1267, column: 3)
!3860 = !DILocation(line: 1267, column: 3, scope: !3854)
!3861 = !DILocalVariable(name: "var", scope: !3862, file: !3, line: 1269, type: !2326)
!3862 = distinct !DILexicalBlock(scope: !3859, file: !3, line: 1268, column: 5)
!3863 = !DILocation(line: 1269, column: 12, scope: !3862)
!3864 = !DILocation(line: 1269, column: 18, scope: !3862)
!3865 = !DILocation(line: 1271, column: 11, scope: !3866)
!3866 = distinct !DILexicalBlock(scope: !3862, file: !3, line: 1271, column: 11)
!3867 = !DILocation(line: 1271, column: 11, scope: !3862)
!3868 = !DILocation(line: 1272, column: 33, scope: !3866)
!3869 = !DILocation(line: 1272, column: 17, scope: !3866)
!3870 = !DILocation(line: 1272, column: 14, scope: !3866)
!3871 = !DILocation(line: 1272, column: 9, scope: !3866)
!3872 = !DILocation(line: 1273, column: 7, scope: !3862)
!3873 = !DILocation(line: 1273, column: 23, scope: !3862)
!3874 = !DILocation(line: 1274, column: 5, scope: !3862)
!3875 = !DILocation(line: 1267, column: 38, scope: !3859)
!3876 = !DILocation(line: 1267, column: 36, scope: !3859)
!3877 = !DILocation(line: 1267, column: 3, scope: !3859)
!3878 = distinct !{!3878, !3860, !3879}
!3879 = !DILocation(line: 1274, column: 5, scope: !3854)
!3880 = !DILocation(line: 1275, column: 40, scope: !3840)
!3881 = !DILocation(line: 1275, column: 11, scope: !3840)
!3882 = !DILocation(line: 1275, column: 8, scope: !3840)
!3883 = !DILocation(line: 1277, column: 7, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3840, file: !3, line: 1277, column: 7)
!3885 = !DILocation(line: 1277, column: 22, scope: !3884)
!3886 = !DILocation(line: 1277, column: 7, scope: !3840)
!3887 = !DILocation(line: 1280, column: 27, scope: !3888)
!3888 = distinct !DILexicalBlock(scope: !3884, file: !3, line: 1278, column: 5)
!3889 = !DILocation(line: 1280, column: 25, scope: !3888)
!3890 = !DILocation(line: 1281, column: 14, scope: !3891)
!3891 = distinct !DILexicalBlock(scope: !3888, file: !3, line: 1281, column: 7)
!3892 = !DILocation(line: 1281, column: 12, scope: !3891)
!3893 = !DILocation(line: 1281, column: 19, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3891, file: !3, line: 1281, column: 7)
!3895 = !DILocation(line: 1281, column: 23, scope: !3894)
!3896 = !DILocation(line: 1281, column: 21, scope: !3894)
!3897 = !DILocation(line: 1281, column: 7, scope: !3891)
!3898 = !DILocation(line: 1282, column: 25, scope: !3894)
!3899 = !DILocation(line: 1282, column: 2, scope: !3894)
!3900 = !DILocation(line: 1282, column: 20, scope: !3894)
!3901 = !DILocation(line: 1282, column: 23, scope: !3894)
!3902 = !DILocation(line: 1281, column: 39, scope: !3894)
!3903 = !DILocation(line: 1281, column: 7, scope: !3894)
!3904 = distinct !{!3904, !3897, !3905}
!3905 = !DILocation(line: 1282, column: 25, scope: !3891)
!3906 = !DILocation(line: 1283, column: 15, scope: !3888)
!3907 = !DILocation(line: 1283, column: 12, scope: !3888)
!3908 = !DILocation(line: 1284, column: 7, scope: !3888)
!3909 = !DILocation(line: 1285, column: 5, scope: !3888)
!3910 = !DILocation(line: 1287, column: 10, scope: !3840)
!3911 = !DILocation(line: 1287, column: 3, scope: !3840)
!3912 = distinct !DISubprogram(name: "init_vars_expansion", scope: !3, file: !3, line: 1222, type: !3913, scopeLine: 1223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3913 = !DISubroutineType(types: !3914)
!3914 = !{null}
!3915 = !DILocalVariable(name: "t", scope: !3912, file: !3, line: 1224, type: !2326)
!3916 = !DILocation(line: 1224, column: 8, scope: !3912)
!3917 = !DILocation(line: 1226, column: 12, scope: !3918)
!3918 = distinct !DILexicalBlock(scope: !3912, file: !3, line: 1226, column: 3)
!3919 = !DILocation(line: 1226, column: 18, scope: !3918)
!3920 = !DILocation(line: 1226, column: 10, scope: !3918)
!3921 = !DILocation(line: 1226, column: 8, scope: !3918)
!3922 = !DILocation(line: 1226, column: 31, scope: !3923)
!3923 = distinct !DILexicalBlock(scope: !3918, file: !3, line: 1226, column: 3)
!3924 = !DILocation(line: 1226, column: 3, scope: !3918)
!3925 = !DILocation(line: 1227, column: 5, scope: !3923)
!3926 = !DILocation(line: 1227, column: 32, scope: !3923)
!3927 = !DILocation(line: 1226, column: 38, scope: !3923)
!3928 = !DILocation(line: 1226, column: 36, scope: !3923)
!3929 = !DILocation(line: 1226, column: 3, scope: !3923)
!3930 = distinct !{!3930, !3924, !3931}
!3931 = !DILocation(line: 1227, column: 34, scope: !3918)
!3932 = !DILocation(line: 1230, column: 20, scope: !3912)
!3933 = !DILocation(line: 1230, column: 3, scope: !3912)
!3934 = !DILocation(line: 1233, column: 23, scope: !3912)
!3935 = !DILocation(line: 1234, column: 20, scope: !3912)
!3936 = !DILocation(line: 1235, column: 1, scope: !3912)
!3937 = distinct !DISubprogram(name: "expand_one_var", scope: !3, file: !3, line: 917, type: !3938, scopeLine: 918, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!3938 = !DISubroutineType(types: !3939)
!3939 = !{!2295, !2326, !2439, !2439}
!3940 = !DILocalVariable(name: "var", arg: 1, scope: !3937, file: !3, line: 917, type: !2326)
!3941 = !DILocation(line: 917, column: 22, scope: !3937)
!3942 = !DILocalVariable(name: "toplevel", arg: 2, scope: !3937, file: !3, line: 917, type: !2439)
!3943 = !DILocation(line: 917, column: 32, scope: !3937)
!3944 = !DILocalVariable(name: "really_expand", arg: 3, scope: !3937, file: !3, line: 917, type: !2439)
!3945 = !DILocation(line: 917, column: 47, scope: !3937)
!3946 = !DILocalVariable(name: "origvar", scope: !3937, file: !3, line: 919, type: !2326)
!3947 = !DILocation(line: 919, column: 8, scope: !3937)
!3948 = !DILocation(line: 919, column: 18, scope: !3937)
!3949 = !DILocation(line: 920, column: 9, scope: !3937)
!3950 = !DILocation(line: 920, column: 7, scope: !3937)
!3951 = !DILocation(line: 923, column: 10, scope: !3952)
!3952 = distinct !DILexicalBlock(scope: !3937, file: !3, line: 922, column: 7)
!3953 = !DILocation(line: 923, column: 29, scope: !3952)
!3954 = !DILocation(line: 923, column: 26, scope: !3952)
!3955 = !DILocation(line: 924, column: 7, scope: !3952)
!3956 = !DILocation(line: 924, column: 10, scope: !3952)
!3957 = !DILocation(line: 924, column: 26, scope: !3952)
!3958 = !DILocation(line: 922, column: 7, scope: !3937)
!3959 = !DILocalVariable(name: "align", scope: !3960, file: !3, line: 926, type: !7)
!3960 = distinct !DILexicalBlock(scope: !3952, file: !3, line: 925, column: 5)
!3961 = !DILocation(line: 926, column: 20, scope: !3960)
!3962 = !DILocation(line: 933, column: 11, scope: !3963)
!3963 = distinct !DILexicalBlock(scope: !3960, file: !3, line: 933, column: 11)
!3964 = !DILocation(line: 933, column: 29, scope: !3963)
!3965 = !DILocation(line: 933, column: 32, scope: !3963)
!3966 = !DILocation(line: 933, column: 11, scope: !3960)
!3967 = !DILocation(line: 934, column: 10, scope: !3963)
!3968 = !DILocation(line: 934, column: 8, scope: !3963)
!3969 = !DILocation(line: 934, column: 2, scope: !3963)
!3970 = !DILocation(line: 938, column: 10, scope: !3963)
!3971 = !DILocation(line: 938, column: 8, scope: !3963)
!3972 = !DILocation(line: 940, column: 17, scope: !3973)
!3973 = distinct !DILexicalBlock(scope: !3960, file: !3, line: 940, column: 11)
!3974 = !DILocation(line: 940, column: 45, scope: !3973)
!3975 = !DILocation(line: 940, column: 43, scope: !3973)
!3976 = !DILocation(line: 940, column: 11, scope: !3960)
!3977 = !DILocation(line: 944, column: 11, scope: !3978)
!3978 = distinct !DILexicalBlock(scope: !3973, file: !3, line: 941, column: 9)
!3979 = !DILocation(line: 945, column: 38, scope: !3978)
!3980 = !DILocation(line: 945, column: 36, scope: !3978)
!3981 = !DILocation(line: 946, column: 2, scope: !3978)
!3982 = !DILocation(line: 947, column: 5, scope: !3960)
!3983 = !DILocation(line: 949, column: 7, scope: !3984)
!3984 = distinct !DILexicalBlock(scope: !3937, file: !3, line: 949, column: 7)
!3985 = !DILocation(line: 949, column: 27, scope: !3984)
!3986 = !DILocation(line: 949, column: 7, scope: !3937)
!3987 = !DILocation(line: 951, column: 7, scope: !3988)
!3988 = distinct !DILexicalBlock(scope: !3984, file: !3, line: 950, column: 5)
!3989 = !DILocation(line: 958, column: 5, scope: !3988)
!3990 = !DILocation(line: 959, column: 7, scope: !3991)
!3991 = distinct !DILexicalBlock(scope: !3937, file: !3, line: 959, column: 7)
!3992 = !DILocation(line: 959, column: 23, scope: !3991)
!3993 = !DILocation(line: 959, column: 35, scope: !3991)
!3994 = !DILocation(line: 959, column: 38, scope: !3991)
!3995 = !DILocation(line: 959, column: 58, scope: !3991)
!3996 = !DILocation(line: 959, column: 7, scope: !3937)
!3997 = !DILocation(line: 961, column: 12, scope: !3998)
!3998 = distinct !DILexicalBlock(scope: !3991, file: !3, line: 961, column: 12)
!3999 = !DILocation(line: 961, column: 12, scope: !3991)
!4000 = !DILocation(line: 963, column: 12, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3998, file: !3, line: 963, column: 12)
!4002 = !DILocation(line: 963, column: 12, scope: !3998)
!4003 = !DILocation(line: 965, column: 12, scope: !4004)
!4004 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 965, column: 12)
!4005 = !DILocation(line: 965, column: 12, scope: !4001)
!4006 = !DILocation(line: 967, column: 12, scope: !4007)
!4007 = distinct !DILexicalBlock(scope: !4004, file: !3, line: 967, column: 12)
!4008 = !DILocation(line: 967, column: 32, scope: !4007)
!4009 = !DILocation(line: 967, column: 44, scope: !4007)
!4010 = !DILocation(line: 967, column: 47, scope: !4007)
!4011 = !DILocation(line: 967, column: 12, scope: !4004)
!4012 = !DILocation(line: 969, column: 12, scope: !4013)
!4013 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 969, column: 12)
!4014 = !DILocation(line: 969, column: 31, scope: !4013)
!4015 = !DILocation(line: 969, column: 28, scope: !4013)
!4016 = !DILocation(line: 969, column: 12, scope: !4007)
!4017 = !DILocation(line: 971, column: 11, scope: !4018)
!4018 = distinct !DILexicalBlock(scope: !4019, file: !3, line: 971, column: 11)
!4019 = distinct !DILexicalBlock(scope: !4013, file: !3, line: 970, column: 5)
!4020 = !DILocation(line: 971, column: 11, scope: !4019)
!4021 = !DILocation(line: 972, column: 31, scope: !4018)
!4022 = !DILocation(line: 972, column: 9, scope: !4018)
!4023 = !DILocation(line: 973, column: 5, scope: !4019)
!4024 = !DILocation(line: 974, column: 12, scope: !4025)
!4025 = distinct !DILexicalBlock(scope: !4013, file: !3, line: 974, column: 12)
!4026 = !DILocation(line: 974, column: 28, scope: !4025)
!4027 = !DILocation(line: 974, column: 40, scope: !4025)
!4028 = !DILocation(line: 974, column: 43, scope: !4025)
!4029 = !DILocation(line: 974, column: 12, scope: !4013)
!4030 = !DILocation(line: 976, column: 11, scope: !4031)
!4031 = distinct !DILexicalBlock(scope: !4032, file: !3, line: 976, column: 11)
!4032 = distinct !DILexicalBlock(scope: !4025, file: !3, line: 975, column: 5)
!4033 = !DILocation(line: 976, column: 11, scope: !4032)
!4034 = !DILocation(line: 977, column: 34, scope: !4031)
!4035 = !DILocation(line: 977, column: 9, scope: !4031)
!4036 = !DILocation(line: 978, column: 5, scope: !4032)
!4037 = !DILocation(line: 979, column: 35, scope: !4038)
!4038 = distinct !DILexicalBlock(scope: !4025, file: !3, line: 979, column: 12)
!4039 = !DILocation(line: 979, column: 12, scope: !4038)
!4040 = !DILocation(line: 979, column: 12, scope: !4025)
!4041 = !DILocation(line: 981, column: 11, scope: !4042)
!4042 = distinct !DILexicalBlock(scope: !4043, file: !3, line: 981, column: 11)
!4043 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 980, column: 5)
!4044 = !DILocation(line: 981, column: 11, scope: !4043)
!4045 = !DILocation(line: 982, column: 34, scope: !4042)
!4046 = !DILocation(line: 982, column: 9, scope: !4042)
!4047 = !DILocation(line: 983, column: 5, scope: !4043)
!4048 = !DILocation(line: 984, column: 28, scope: !4049)
!4049 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 984, column: 12)
!4050 = !DILocation(line: 984, column: 13, scope: !4049)
!4051 = !DILocation(line: 984, column: 12, scope: !4038)
!4052 = !DILocation(line: 986, column: 11, scope: !4053)
!4053 = distinct !DILexicalBlock(scope: !4054, file: !3, line: 986, column: 11)
!4054 = distinct !DILexicalBlock(scope: !4049, file: !3, line: 985, column: 5)
!4055 = !DILocation(line: 986, column: 11, scope: !4054)
!4056 = !DILocation(line: 988, column: 49, scope: !4057)
!4057 = distinct !DILexicalBlock(scope: !4053, file: !3, line: 987, column: 2)
!4058 = !DILocation(line: 988, column: 4, scope: !4057)
!4059 = !DILocation(line: 989, column: 26, scope: !4057)
!4060 = !DILocation(line: 989, column: 4, scope: !4057)
!4061 = !DILocation(line: 990, column: 2, scope: !4057)
!4062 = !DILocation(line: 991, column: 5, scope: !4054)
!4063 = !DILocation(line: 992, column: 36, scope: !4064)
!4064 = distinct !DILexicalBlock(scope: !4049, file: !3, line: 992, column: 12)
!4065 = !DILocation(line: 992, column: 41, scope: !4064)
!4066 = !DILocation(line: 992, column: 12, scope: !4064)
!4067 = !DILocation(line: 992, column: 12, scope: !4049)
!4068 = !DILocation(line: 993, column: 20, scope: !4064)
!4069 = !DILocation(line: 993, column: 5, scope: !4064)
!4070 = !DILocation(line: 996, column: 11, scope: !4071)
!4071 = distinct !DILexicalBlock(scope: !4072, file: !3, line: 996, column: 11)
!4072 = distinct !DILexicalBlock(scope: !4064, file: !3, line: 995, column: 5)
!4073 = !DILocation(line: 996, column: 11, scope: !4072)
!4074 = !DILocation(line: 997, column: 31, scope: !4071)
!4075 = !DILocation(line: 997, column: 9, scope: !4071)
!4076 = !DILocation(line: 998, column: 28, scope: !4072)
!4077 = !DILocation(line: 998, column: 14, scope: !4072)
!4078 = !DILocation(line: 998, column: 7, scope: !4072)
!4079 = !DILocation(line: 1000, column: 3, scope: !3937)
!4080 = !DILocation(line: 1001, column: 1, scope: !3937)
!4081 = distinct !DISubprogram(name: "account_used_vars_for_block", scope: !3, file: !3, line: 1203, type: !4082, scopeLine: 1204, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4082 = !DISubroutineType(types: !4083)
!4083 = !{!2295, !2326, !2439}
!4084 = !DILocalVariable(name: "block", arg: 1, scope: !4081, file: !3, line: 1203, type: !2326)
!4085 = !DILocation(line: 1203, column: 35, scope: !4081)
!4086 = !DILocalVariable(name: "toplevel", arg: 2, scope: !4081, file: !3, line: 1203, type: !2439)
!4087 = !DILocation(line: 1203, column: 47, scope: !4081)
!4088 = !DILocalVariable(name: "t", scope: !4081, file: !3, line: 1205, type: !2326)
!4089 = !DILocation(line: 1205, column: 8, scope: !4081)
!4090 = !DILocalVariable(name: "size", scope: !4081, file: !3, line: 1206, type: !2295)
!4091 = !DILocation(line: 1206, column: 17, scope: !4081)
!4092 = !DILocation(line: 1209, column: 12, scope: !4093)
!4093 = distinct !DILexicalBlock(scope: !4081, file: !3, line: 1209, column: 3)
!4094 = !DILocation(line: 1209, column: 10, scope: !4093)
!4095 = !DILocation(line: 1209, column: 8, scope: !4093)
!4096 = !DILocation(line: 1209, column: 32, scope: !4097)
!4097 = distinct !DILexicalBlock(scope: !4093, file: !3, line: 1209, column: 3)
!4098 = !DILocation(line: 1209, column: 3, scope: !4093)
!4099 = !DILocation(line: 1210, column: 9, scope: !4100)
!4100 = distinct !DILexicalBlock(scope: !4097, file: !3, line: 1210, column: 9)
!4101 = !DILocation(line: 1210, column: 9, scope: !4097)
!4102 = !DILocation(line: 1211, column: 31, scope: !4100)
!4103 = !DILocation(line: 1211, column: 34, scope: !4100)
!4104 = !DILocation(line: 1211, column: 15, scope: !4100)
!4105 = !DILocation(line: 1211, column: 12, scope: !4100)
!4106 = !DILocation(line: 1211, column: 7, scope: !4100)
!4107 = !DILocation(line: 1209, column: 40, scope: !4097)
!4108 = !DILocation(line: 1209, column: 38, scope: !4097)
!4109 = !DILocation(line: 1209, column: 3, scope: !4097)
!4110 = distinct !{!4110, !4098, !4111}
!4111 = !DILocation(line: 1211, column: 49, scope: !4093)
!4112 = !DILocation(line: 1214, column: 12, scope: !4113)
!4113 = distinct !DILexicalBlock(scope: !4081, file: !3, line: 1214, column: 3)
!4114 = !DILocation(line: 1214, column: 10, scope: !4113)
!4115 = !DILocation(line: 1214, column: 8, scope: !4113)
!4116 = !DILocation(line: 1214, column: 37, scope: !4117)
!4117 = distinct !DILexicalBlock(scope: !4113, file: !3, line: 1214, column: 3)
!4118 = !DILocation(line: 1214, column: 3, scope: !4113)
!4119 = !DILocation(line: 1215, column: 42, scope: !4117)
!4120 = !DILocation(line: 1215, column: 13, scope: !4117)
!4121 = !DILocation(line: 1215, column: 10, scope: !4117)
!4122 = !DILocation(line: 1215, column: 5, scope: !4117)
!4123 = !DILocation(line: 1214, column: 45, scope: !4117)
!4124 = !DILocation(line: 1214, column: 43, scope: !4117)
!4125 = !DILocation(line: 1214, column: 3, scope: !4117)
!4126 = distinct !{!4126, !4118, !4127}
!4127 = !DILocation(line: 1215, column: 50, scope: !4113)
!4128 = !DILocation(line: 1217, column: 10, scope: !4081)
!4129 = !DILocation(line: 1217, column: 3, scope: !4081)
!4130 = distinct !DISubprogram(name: "account_stack_vars", scope: !3, file: !3, line: 789, type: !3841, scopeLine: 790, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4131 = !DILocalVariable(name: "si", scope: !4130, file: !3, line: 791, type: !2140)
!4132 = !DILocation(line: 791, column: 10, scope: !4130)
!4133 = !DILocalVariable(name: "j", scope: !4130, file: !3, line: 791, type: !2140)
!4134 = !DILocation(line: 791, column: 14, scope: !4130)
!4135 = !DILocalVariable(name: "i", scope: !4130, file: !3, line: 791, type: !2140)
!4136 = !DILocation(line: 791, column: 17, scope: !4130)
!4137 = !DILocalVariable(name: "n", scope: !4130, file: !3, line: 791, type: !2140)
!4138 = !DILocation(line: 791, column: 20, scope: !4130)
!4139 = !DILocation(line: 791, column: 24, scope: !4130)
!4140 = !DILocalVariable(name: "size", scope: !4130, file: !3, line: 792, type: !2295)
!4141 = !DILocation(line: 792, column: 17, scope: !4130)
!4142 = !DILocation(line: 794, column: 11, scope: !4143)
!4143 = distinct !DILexicalBlock(scope: !4130, file: !3, line: 794, column: 3)
!4144 = !DILocation(line: 794, column: 8, scope: !4143)
!4145 = !DILocation(line: 794, column: 16, scope: !4146)
!4146 = distinct !DILexicalBlock(scope: !4143, file: !3, line: 794, column: 3)
!4147 = !DILocation(line: 794, column: 21, scope: !4146)
!4148 = !DILocation(line: 794, column: 19, scope: !4146)
!4149 = !DILocation(line: 794, column: 3, scope: !4143)
!4150 = !DILocation(line: 796, column: 11, scope: !4151)
!4151 = distinct !DILexicalBlock(scope: !4146, file: !3, line: 795, column: 5)
!4152 = !DILocation(line: 796, column: 29, scope: !4151)
!4153 = !DILocation(line: 796, column: 9, scope: !4151)
!4154 = !DILocation(line: 799, column: 11, scope: !4155)
!4155 = distinct !DILexicalBlock(scope: !4151, file: !3, line: 799, column: 11)
!4156 = !DILocation(line: 799, column: 22, scope: !4155)
!4157 = !DILocation(line: 799, column: 25, scope: !4155)
!4158 = !DILocation(line: 799, column: 43, scope: !4155)
!4159 = !DILocation(line: 799, column: 40, scope: !4155)
!4160 = !DILocation(line: 799, column: 11, scope: !4151)
!4161 = !DILocation(line: 800, column: 2, scope: !4155)
!4162 = !DILocation(line: 802, column: 15, scope: !4151)
!4163 = !DILocation(line: 802, column: 26, scope: !4151)
!4164 = !DILocation(line: 802, column: 29, scope: !4151)
!4165 = !DILocation(line: 802, column: 12, scope: !4151)
!4166 = !DILocation(line: 803, column: 16, scope: !4167)
!4167 = distinct !DILexicalBlock(scope: !4151, file: !3, line: 803, column: 7)
!4168 = !DILocation(line: 803, column: 14, scope: !4167)
!4169 = !DILocation(line: 803, column: 12, scope: !4167)
!4170 = !DILocation(line: 803, column: 19, scope: !4171)
!4171 = distinct !DILexicalBlock(scope: !4167, file: !3, line: 803, column: 7)
!4172 = !DILocation(line: 803, column: 21, scope: !4171)
!4173 = !DILocation(line: 803, column: 7, scope: !4167)
!4174 = !DILocation(line: 804, column: 11, scope: !4171)
!4175 = !DILocation(line: 804, column: 22, scope: !4171)
!4176 = !DILocation(line: 804, column: 25, scope: !4171)
!4177 = !DILocation(line: 804, column: 2, scope: !4171)
!4178 = !DILocation(line: 803, column: 33, scope: !4171)
!4179 = !DILocation(line: 803, column: 44, scope: !4171)
!4180 = !DILocation(line: 803, column: 47, scope: !4171)
!4181 = !DILocation(line: 803, column: 31, scope: !4171)
!4182 = !DILocation(line: 803, column: 7, scope: !4171)
!4183 = distinct !{!4183, !4173, !4184}
!4184 = !DILocation(line: 804, column: 35, scope: !4167)
!4185 = !DILocation(line: 805, column: 5, scope: !4151)
!4186 = !DILocation(line: 794, column: 24, scope: !4146)
!4187 = !DILocation(line: 794, column: 3, scope: !4146)
!4188 = distinct !{!4188, !4149, !4189}
!4189 = !DILocation(line: 805, column: 5, scope: !4143)
!4190 = !DILocation(line: 806, column: 10, scope: !4130)
!4191 = !DILocation(line: 806, column: 3, scope: !4130)
!4192 = distinct !DISubprogram(name: "fini_vars_expansion", scope: !3, file: !3, line: 1239, type: !3913, scopeLine: 1240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4193 = !DILocalVariable(name: "i", scope: !4192, file: !3, line: 1241, type: !2140)
!4194 = !DILocation(line: 1241, column: 10, scope: !4192)
!4195 = !DILocalVariable(name: "n", scope: !4192, file: !3, line: 1241, type: !2140)
!4196 = !DILocation(line: 1241, column: 13, scope: !4192)
!4197 = !DILocation(line: 1241, column: 17, scope: !4192)
!4198 = !DILocation(line: 1242, column: 10, scope: !4199)
!4199 = distinct !DILexicalBlock(scope: !4192, file: !3, line: 1242, column: 3)
!4200 = !DILocation(line: 1242, column: 8, scope: !4199)
!4201 = !DILocation(line: 1242, column: 15, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 1242, column: 3)
!4203 = !DILocation(line: 1242, column: 19, scope: !4202)
!4204 = !DILocation(line: 1242, column: 17, scope: !4202)
!4205 = !DILocation(line: 1242, column: 3, scope: !4199)
!4206 = !DILocation(line: 1243, column: 5, scope: !4202)
!4207 = !DILocation(line: 1242, column: 23, scope: !4202)
!4208 = !DILocation(line: 1242, column: 3, scope: !4202)
!4209 = distinct !{!4209, !4205, !4210}
!4210 = !DILocation(line: 1243, column: 5, scope: !4199)
!4211 = !DILocation(line: 1244, column: 3, scope: !4192)
!4212 = !DILocation(line: 1245, column: 3, scope: !4192)
!4213 = !DILocation(line: 1246, column: 14, scope: !4192)
!4214 = !DILocation(line: 1247, column: 37, scope: !4192)
!4215 = !DILocation(line: 1247, column: 20, scope: !4192)
!4216 = !DILocation(line: 1248, column: 1, scope: !4192)
!4217 = distinct !DISubprogram(name: "gimple_expand_cfg", scope: !3, file: !3, line: 3719, type: !3572, scopeLine: 3720, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4218 = !DILocalVariable(name: "bb", scope: !4217, file: !3, line: 3721, type: !2748)
!4219 = !DILocation(line: 3721, column: 15, scope: !4217)
!4220 = !DILocalVariable(name: "init_block", scope: !4217, file: !3, line: 3721, type: !2748)
!4221 = !DILocation(line: 3721, column: 19, scope: !4217)
!4222 = !DILocalVariable(name: "blocks", scope: !4217, file: !3, line: 3722, type: !4223)
!4223 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !4224, line: 45, baseType: !4225)
!4224 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4226, size: 64)
!4226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !4224, line: 39, size: 192, elements: !4227)
!4227 = !{!4228, !4229, !4230, !4231}
!4228 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !4226, file: !4224, line: 41, baseType: !3547, size: 64)
!4229 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !4226, file: !4224, line: 42, baseType: !7, size: 32, offset: 64)
!4230 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4226, file: !4224, line: 43, baseType: !7, size: 32, offset: 96)
!4231 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !4226, file: !4224, line: 44, baseType: !4232, size: 64, offset: 128)
!4232 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2142, size: 64, elements: !2244)
!4233 = !DILocation(line: 3722, column: 11, scope: !4217)
!4234 = !DILocalVariable(name: "ei", scope: !4217, file: !3, line: 3723, type: !4235)
!4235 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !337, line: 682, baseType: !4236)
!4236 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !337, line: 679, size: 128, elements: !4237)
!4237 = !{!4238, !4239}
!4238 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4236, file: !337, line: 680, baseType: !7, size: 32)
!4239 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !4236, file: !337, line: 681, baseType: !4240, size: 64, offset: 64)
!4240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2168, size: 64)
!4241 = !DILocation(line: 3723, column: 17, scope: !4217)
!4242 = !DILocalVariable(name: "e", scope: !4217, file: !3, line: 3724, type: !2180)
!4243 = !DILocation(line: 3724, column: 8, scope: !4217)
!4244 = !DILocalVariable(name: "i", scope: !4217, file: !3, line: 3725, type: !7)
!4245 = !DILocation(line: 3725, column: 12, scope: !4217)
!4246 = !DILocation(line: 3727, column: 3, scope: !4217)
!4247 = !DILocation(line: 3728, column: 47, scope: !4217)
!4248 = !DILocation(line: 3728, column: 52, scope: !4217)
!4249 = !DILocation(line: 3728, column: 44, scope: !4217)
!4250 = !DILocation(line: 3728, column: 35, scope: !4217)
!4251 = !DILocation(line: 3728, column: 28, scope: !4217)
!4252 = !DILocation(line: 3728, column: 26, scope: !4217)
!4253 = !DILocation(line: 3732, column: 30, scope: !4217)
!4254 = !DILocation(line: 3734, column: 23, scope: !4217)
!4255 = !DILocation(line: 3734, column: 3, scope: !4217)
!4256 = !DILocation(line: 3736, column: 3, scope: !4217)
!4257 = !DILocation(line: 3737, column: 8, scope: !4258)
!4258 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3737, column: 7)
!4259 = !DILocation(line: 3737, column: 7, scope: !4217)
!4260 = !DILocation(line: 3740, column: 11, scope: !4261)
!4261 = distinct !DILexicalBlock(scope: !4262, file: !3, line: 3740, column: 11)
!4262 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 3738, column: 5)
!4263 = !DILocation(line: 3740, column: 17, scope: !4261)
!4264 = !DILocation(line: 3740, column: 38, scope: !4261)
!4265 = !DILocation(line: 3740, column: 11, scope: !4262)
!4266 = !DILocation(line: 3742, column: 11, scope: !4261)
!4267 = !DILocation(line: 3741, column: 8, scope: !4261)
!4268 = !DILocation(line: 3744, column: 39, scope: !4261)
!4269 = !DILocation(line: 3744, column: 45, scope: !4261)
!4270 = !DILocation(line: 3744, column: 8, scope: !4261)
!4271 = !DILocation(line: 3745, column: 5, scope: !4262)
!4272 = !DILocation(line: 3746, column: 24, scope: !4217)
!4273 = !DILocation(line: 3746, column: 3, scope: !4217)
!4274 = !DILocation(line: 3747, column: 22, scope: !4217)
!4275 = !DILocation(line: 3747, column: 20, scope: !4217)
!4276 = !DILocation(line: 3752, column: 3, scope: !4217)
!4277 = !DILocation(line: 3755, column: 3, scope: !4217)
!4278 = !DILocation(line: 3757, column: 11, scope: !4217)
!4279 = !DILocation(line: 3757, column: 3, scope: !4217)
!4280 = !DILocation(line: 3758, column: 32, scope: !4217)
!4281 = !DILocation(line: 3759, column: 39, scope: !4217)
!4282 = !DILocation(line: 3760, column: 35, scope: !4217)
!4283 = !DILocation(line: 3761, column: 34, scope: !4217)
!4284 = !DILocation(line: 3762, column: 3, scope: !4217)
!4285 = !DILocation(line: 3762, column: 9, scope: !4217)
!4286 = !DILocation(line: 3762, column: 14, scope: !4217)
!4287 = !DILocation(line: 3762, column: 33, scope: !4217)
!4288 = !DILocation(line: 3766, column: 3, scope: !4217)
!4289 = !DILocation(line: 3769, column: 7, scope: !4290)
!4290 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3769, column: 7)
!4291 = !DILocation(line: 3769, column: 7, scope: !4217)
!4292 = !DILocation(line: 3771, column: 11, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4294, file: !3, line: 3771, column: 11)
!4294 = distinct !DILexicalBlock(scope: !4290, file: !3, line: 3770, column: 5)
!4295 = !DILocation(line: 3771, column: 17, scope: !4293)
!4296 = !DILocation(line: 3771, column: 11, scope: !4294)
!4297 = !DILocation(line: 3772, column: 2, scope: !4293)
!4298 = !DILocation(line: 3774, column: 11, scope: !4299)
!4299 = distinct !DILexicalBlock(scope: !4294, file: !3, line: 3774, column: 11)
!4300 = !DILocation(line: 3774, column: 28, scope: !4299)
!4301 = !DILocation(line: 3774, column: 38, scope: !4299)
!4302 = !DILocation(line: 3774, column: 32, scope: !4299)
!4303 = !DILocation(line: 3774, column: 11, scope: !4294)
!4304 = !DILocation(line: 3777, column: 10, scope: !4299)
!4305 = !DILocation(line: 3775, column: 2, scope: !4299)
!4306 = !DILocation(line: 3778, column: 5, scope: !4294)
!4307 = !DILocation(line: 3781, column: 26, scope: !4217)
!4308 = !DILocation(line: 3781, column: 3, scope: !4217)
!4309 = !DILocation(line: 3785, column: 10, scope: !4310)
!4310 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3785, column: 3)
!4311 = !DILocation(line: 3785, column: 8, scope: !4310)
!4312 = !DILocation(line: 3785, column: 15, scope: !4313)
!4313 = distinct !DILexicalBlock(scope: !4310, file: !3, line: 3785, column: 3)
!4314 = !DILocation(line: 3785, column: 22, scope: !4313)
!4315 = !DILocation(line: 3785, column: 27, scope: !4313)
!4316 = !DILocation(line: 3785, column: 17, scope: !4313)
!4317 = !DILocation(line: 3785, column: 3, scope: !4310)
!4318 = !DILocalVariable(name: "var", scope: !4319, file: !3, line: 3787, type: !2326)
!4319 = distinct !DILexicalBlock(scope: !4313, file: !3, line: 3786, column: 5)
!4320 = !DILocation(line: 3787, column: 12, scope: !4319)
!4321 = !DILocation(line: 3787, column: 18, scope: !4319)
!4322 = !DILocation(line: 3789, column: 11, scope: !4323)
!4323 = distinct !DILexicalBlock(scope: !4319, file: !3, line: 3789, column: 11)
!4324 = !DILocation(line: 3789, column: 27, scope: !4323)
!4325 = !DILocation(line: 3790, column: 4, scope: !4323)
!4326 = !DILocation(line: 3790, column: 11, scope: !4323)
!4327 = !DILocation(line: 3790, column: 31, scope: !4323)
!4328 = !DILocation(line: 3790, column: 8, scope: !4323)
!4329 = !DILocation(line: 3789, column: 11, scope: !4319)
!4330 = !DILocation(line: 3791, column: 30, scope: !4323)
!4331 = !DILocation(line: 3791, column: 5, scope: !4323)
!4332 = !DILocation(line: 3791, column: 25, scope: !4323)
!4333 = !DILocation(line: 3791, column: 2, scope: !4323)
!4334 = !DILocation(line: 3791, column: 28, scope: !4323)
!4335 = !DILocation(line: 3792, column: 7, scope: !4319)
!4336 = !DILocation(line: 3796, column: 11, scope: !4337)
!4337 = distinct !DILexicalBlock(scope: !4319, file: !3, line: 3796, column: 11)
!4338 = !DILocation(line: 3796, column: 36, scope: !4337)
!4339 = !DILocation(line: 3796, column: 33, scope: !4337)
!4340 = !DILocation(line: 3796, column: 11, scope: !4319)
!4341 = !DILocation(line: 3797, column: 2, scope: !4337)
!4342 = !DILocation(line: 3805, column: 12, scope: !4343)
!4343 = distinct !DILexicalBlock(scope: !4319, file: !3, line: 3805, column: 11)
!4344 = !DILocation(line: 3805, column: 11, scope: !4319)
!4345 = !DILocation(line: 3807, column: 8, scope: !4346)
!4346 = distinct !DILexicalBlock(scope: !4347, file: !3, line: 3807, column: 8)
!4347 = distinct !DILexicalBlock(scope: !4343, file: !3, line: 3806, column: 2)
!4348 = !DILocation(line: 3807, column: 8, scope: !4347)
!4349 = !DILocation(line: 3808, column: 23, scope: !4346)
!4350 = !DILocation(line: 3808, column: 43, scope: !4346)
!4351 = !DILocation(line: 3808, column: 20, scope: !4346)
!4352 = !DILocation(line: 3808, column: 6, scope: !4346)
!4353 = !DILocation(line: 3809, column: 2, scope: !4347)
!4354 = !DILocation(line: 3810, column: 5, scope: !4319)
!4355 = !DILocation(line: 3785, column: 44, scope: !4313)
!4356 = !DILocation(line: 3785, column: 3, scope: !4313)
!4357 = distinct !{!4357, !4317, !4358}
!4358 = !DILocation(line: 3810, column: 5, scope: !4310)
!4359 = !DILocation(line: 3814, column: 7, scope: !4360)
!4360 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3814, column: 7)
!4361 = !DILocation(line: 3815, column: 7, scope: !4360)
!4362 = !DILocation(line: 3815, column: 10, scope: !4360)
!4363 = !DILocation(line: 3816, column: 7, scope: !4360)
!4364 = !DILocation(line: 3816, column: 10, scope: !4360)
!4365 = !DILocation(line: 3814, column: 7, scope: !4217)
!4366 = !DILocation(line: 3817, column: 5, scope: !4360)
!4367 = !DILocation(line: 3821, column: 13, scope: !4368)
!4368 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3821, column: 7)
!4369 = !DILocation(line: 3821, column: 7, scope: !4368)
!4370 = !DILocation(line: 3821, column: 7, scope: !4217)
!4371 = !DILocation(line: 3822, column: 5, scope: !4368)
!4372 = !DILocation(line: 3824, column: 3, scope: !4217)
!4373 = !DILocation(line: 3827, column: 3, scope: !4217)
!4374 = !DILocation(line: 3829, column: 16, scope: !4217)
!4375 = !DILocation(line: 3829, column: 14, scope: !4217)
!4376 = !DILocation(line: 3833, column: 3, scope: !4377)
!4377 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3833, column: 3)
!4378 = !DILocation(line: 3833, column: 3, scope: !4379)
!4379 = distinct !DILexicalBlock(scope: !4377, file: !3, line: 3833, column: 3)
!4380 = !DILocation(line: 3834, column: 5, scope: !4379)
!4381 = !DILocation(line: 3834, column: 8, scope: !4379)
!4382 = !DILocation(line: 3834, column: 14, scope: !4379)
!4383 = distinct !{!4383, !4376, !4384}
!4384 = !DILocation(line: 3834, column: 18, scope: !4377)
!4385 = !DILocation(line: 3836, column: 20, scope: !4217)
!4386 = !DILocation(line: 3836, column: 18, scope: !4217)
!4387 = !DILocation(line: 3837, column: 3, scope: !4388)
!4388 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3837, column: 3)
!4389 = !DILocation(line: 3837, column: 3, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !4388, file: !3, line: 3837, column: 3)
!4391 = !DILocation(line: 3838, column: 37, scope: !4390)
!4392 = !DILocation(line: 3838, column: 10, scope: !4390)
!4393 = !DILocation(line: 3838, column: 8, scope: !4390)
!4394 = !DILocation(line: 3838, column: 5, scope: !4390)
!4395 = distinct !{!4395, !4387, !4396}
!4396 = !DILocation(line: 3838, column: 39, scope: !4388)
!4397 = !DILocation(line: 3840, column: 7, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3840, column: 7)
!4399 = !DILocation(line: 3840, column: 7, scope: !4217)
!4400 = !DILocation(line: 3841, column: 5, scope: !4398)
!4401 = !DILocation(line: 3843, column: 3, scope: !4217)
!4402 = !DILocation(line: 3844, column: 3, scope: !4217)
!4403 = !DILocation(line: 3847, column: 3, scope: !4217)
!4404 = !DILocation(line: 3847, column: 9, scope: !4217)
!4405 = !DILocation(line: 3847, column: 20, scope: !4217)
!4406 = !DILocation(line: 3847, column: 29, scope: !4217)
!4407 = !DILocation(line: 3851, column: 24, scope: !4217)
!4408 = !DILocation(line: 3851, column: 3, scope: !4217)
!4409 = !DILocation(line: 3852, column: 3, scope: !4217)
!4410 = !DILocation(line: 3854, column: 3, scope: !4217)
!4411 = !DILocation(line: 3855, column: 24, scope: !4217)
!4412 = !DILocation(line: 3855, column: 3, scope: !4217)
!4413 = !DILocation(line: 3856, column: 3, scope: !4217)
!4414 = !DILocation(line: 3859, column: 28, scope: !4217)
!4415 = !DILocation(line: 3859, column: 3, scope: !4217)
!4416 = !DILocation(line: 3861, column: 24, scope: !4217)
!4417 = !DILocation(line: 3861, column: 3, scope: !4217)
!4418 = !DILocation(line: 3863, column: 3, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3863, column: 3)
!4420 = !DILocation(line: 3863, column: 3, scope: !4421)
!4421 = distinct !DILexicalBlock(scope: !4419, file: !3, line: 3863, column: 3)
!4422 = !DILocalVariable(name: "e", scope: !4423, file: !3, line: 3865, type: !2180)
!4423 = distinct !DILexicalBlock(scope: !4421, file: !3, line: 3864, column: 5)
!4424 = !DILocation(line: 3865, column: 12, scope: !4423)
!4425 = !DILocalVariable(name: "ei", scope: !4423, file: !3, line: 3866, type: !4235)
!4426 = !DILocation(line: 3866, column: 21, scope: !4423)
!4427 = !DILocation(line: 3867, column: 17, scope: !4428)
!4428 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 3867, column: 7)
!4429 = !DILocation(line: 3867, column: 12, scope: !4428)
!4430 = !DILocation(line: 3867, column: 44, scope: !4431)
!4431 = distinct !DILexicalBlock(scope: !4428, file: !3, line: 3867, column: 7)
!4432 = !DILocation(line: 3867, column: 42, scope: !4431)
!4433 = !DILocation(line: 3867, column: 7, scope: !4428)
!4434 = !DILocation(line: 3869, column: 8, scope: !4435)
!4435 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 3869, column: 8)
!4436 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3868, column: 2)
!4437 = !DILocation(line: 3869, column: 11, scope: !4435)
!4438 = !DILocation(line: 3869, column: 17, scope: !4435)
!4439 = !DILocation(line: 3869, column: 8, scope: !4436)
!4440 = !DILocation(line: 3870, column: 33, scope: !4435)
!4441 = !DILocation(line: 3870, column: 6, scope: !4435)
!4442 = !DILocation(line: 3872, column: 6, scope: !4435)
!4443 = !DILocation(line: 3867, column: 7, scope: !4431)
!4444 = distinct !{!4444, !4433, !4445}
!4445 = !DILocation(line: 3873, column: 2, scope: !4428)
!4446 = !DILocation(line: 3874, column: 5, scope: !4423)
!4447 = distinct !{!4447, !4418, !4448}
!4448 = !DILocation(line: 3874, column: 5, scope: !4419)
!4449 = !DILocation(line: 3877, column: 30, scope: !4217)
!4450 = !DILocation(line: 3879, column: 3, scope: !4451)
!4451 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3879, column: 3)
!4452 = !DILocation(line: 3879, column: 3, scope: !4453)
!4453 = distinct !DILexicalBlock(scope: !4451, file: !3, line: 3879, column: 3)
!4454 = !DILocalVariable(name: "e", scope: !4455, file: !3, line: 3881, type: !2180)
!4455 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 3880, column: 5)
!4456 = !DILocation(line: 3881, column: 12, scope: !4455)
!4457 = !DILocalVariable(name: "ei", scope: !4455, file: !3, line: 3882, type: !4235)
!4458 = !DILocation(line: 3882, column: 21, scope: !4455)
!4459 = !DILocation(line: 3883, column: 17, scope: !4460)
!4460 = distinct !DILexicalBlock(scope: !4455, file: !3, line: 3883, column: 7)
!4461 = !DILocation(line: 3883, column: 12, scope: !4460)
!4462 = !DILocation(line: 3883, column: 44, scope: !4463)
!4463 = distinct !DILexicalBlock(scope: !4460, file: !3, line: 3883, column: 7)
!4464 = !DILocation(line: 3883, column: 42, scope: !4463)
!4465 = !DILocation(line: 3883, column: 7, scope: !4460)
!4466 = !DILocation(line: 3886, column: 4, scope: !4467)
!4467 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 3884, column: 2)
!4468 = !DILocation(line: 3886, column: 7, scope: !4467)
!4469 = !DILocation(line: 3886, column: 13, scope: !4467)
!4470 = !DILocation(line: 3892, column: 9, scope: !4471)
!4471 = distinct !DILexicalBlock(scope: !4467, file: !3, line: 3892, column: 8)
!4472 = !DILocation(line: 3892, column: 12, scope: !4471)
!4473 = !DILocation(line: 3892, column: 18, scope: !4471)
!4474 = !DILocation(line: 3893, column: 8, scope: !4471)
!4475 = !DILocation(line: 3893, column: 13, scope: !4471)
!4476 = !DILocation(line: 3893, column: 16, scope: !4471)
!4477 = !DILocation(line: 3893, column: 22, scope: !4471)
!4478 = !DILocation(line: 3892, column: 8, scope: !4467)
!4479 = !DILocation(line: 3894, column: 19, scope: !4471)
!4480 = !DILocation(line: 3894, column: 6, scope: !4471)
!4481 = !DILocation(line: 3896, column: 6, scope: !4471)
!4482 = !DILocation(line: 3883, column: 7, scope: !4463)
!4483 = distinct !{!4483, !4465, !4484}
!4484 = !DILocation(line: 3897, column: 2, scope: !4460)
!4485 = !DILocation(line: 3898, column: 5, scope: !4455)
!4486 = distinct !{!4486, !4450, !4487}
!4487 = !DILocation(line: 3898, column: 5, scope: !4451)
!4488 = !DILocation(line: 3900, column: 27, scope: !4217)
!4489 = !DILocation(line: 3900, column: 12, scope: !4217)
!4490 = !DILocation(line: 3900, column: 10, scope: !4217)
!4491 = !DILocation(line: 3901, column: 17, scope: !4217)
!4492 = !DILocation(line: 3901, column: 3, scope: !4217)
!4493 = !DILocation(line: 3902, column: 31, scope: !4217)
!4494 = !DILocation(line: 3902, column: 3, scope: !4217)
!4495 = !DILocation(line: 3903, column: 3, scope: !4217)
!4496 = !DILocation(line: 3904, column: 3, scope: !4217)
!4497 = !DILocation(line: 3906, column: 3, scope: !4217)
!4498 = !DILocation(line: 3908, column: 3, scope: !4217)
!4499 = !DILocation(line: 3916, column: 3, scope: !4217)
!4500 = !DILocation(line: 3916, column: 45, scope: !4217)
!4501 = !DILocation(line: 3920, column: 23, scope: !4217)
!4502 = !DILocation(line: 3922, column: 7, scope: !4503)
!4503 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3922, column: 7)
!4504 = !DILocation(line: 3922, column: 7, scope: !4217)
!4505 = !DILocation(line: 3924, column: 16, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4503, file: !3, line: 3923, column: 5)
!4507 = !DILocation(line: 3924, column: 7, scope: !4506)
!4508 = !DILocation(line: 3927, column: 5, scope: !4506)
!4509 = !DILocalVariable(name: "parent", scope: !4510, file: !3, line: 3932, type: !2326)
!4510 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3931, column: 3)
!4511 = !DILocation(line: 3932, column: 10, scope: !4510)
!4512 = !DILocation(line: 3933, column: 19, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 3933, column: 5)
!4514 = !DILocation(line: 3933, column: 17, scope: !4513)
!4515 = !DILocation(line: 3933, column: 10, scope: !4513)
!4516 = !DILocation(line: 3934, column: 3, scope: !4517)
!4517 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 3933, column: 5)
!4518 = !DILocation(line: 3934, column: 10, scope: !4517)
!4519 = !DILocation(line: 3933, column: 5, scope: !4513)
!4520 = !DILocation(line: 3936, column: 11, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4517, file: !3, line: 3936, column: 11)
!4522 = !DILocation(line: 3936, column: 30, scope: !4521)
!4523 = !DILocation(line: 3936, column: 11, scope: !4517)
!4524 = !DILocation(line: 3937, column: 2, scope: !4521)
!4525 = !DILocation(line: 3937, column: 56, scope: !4521)
!4526 = !DILocation(line: 3936, column: 33, scope: !4521)
!4527 = !DILocation(line: 3935, column: 34, scope: !4517)
!4528 = !DILocation(line: 3935, column: 12, scope: !4517)
!4529 = !DILocation(line: 3935, column: 10, scope: !4517)
!4530 = !DILocation(line: 3933, column: 5, scope: !4517)
!4531 = distinct !{!4531, !4519, !4532}
!4532 = !DILocation(line: 3937, column: 58, scope: !4513)
!4533 = !DILocation(line: 3943, column: 43, scope: !4534)
!4534 = distinct !DILexicalBlock(scope: !4217, file: !3, line: 3943, column: 7)
!4535 = !DILocation(line: 3943, column: 7, scope: !4534)
!4536 = !DILocation(line: 3943, column: 7, scope: !4217)
!4537 = !DILocation(line: 3944, column: 7, scope: !4534)
!4538 = !DILocation(line: 3944, column: 20, scope: !4534)
!4539 = !DILocation(line: 3944, column: 48, scope: !4534)
!4540 = !DILocation(line: 3944, column: 5, scope: !4534)
!4541 = !DILocation(line: 3946, column: 3, scope: !4217)
!4542 = !DILocation(line: 3946, column: 44, scope: !4217)
!4543 = !DILocation(line: 3949, column: 16, scope: !4217)
!4544 = !DILocation(line: 3950, column: 22, scope: !4217)
!4545 = !DILocation(line: 3953, column: 21, scope: !4217)
!4546 = !DILocation(line: 3953, column: 3, scope: !4217)
!4547 = !DILocation(line: 3954, column: 3, scope: !4217)
!4548 = !DILocation(line: 3955, column: 3, scope: !4217)
!4549 = distinct !DISubprogram(name: "gimple_code", scope: !385, file: !385, line: 1052, type: !4550, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4550 = !DISubroutineType(types: !4551)
!4551 = !{!587, !3744}
!4552 = !DILocalVariable(name: "g", arg: 1, scope: !4549, file: !385, line: 1052, type: !3744)
!4553 = !DILocation(line: 1052, column: 27, scope: !4549)
!4554 = !DILocation(line: 1054, column: 10, scope: !4549)
!4555 = !DILocation(line: 1054, column: 13, scope: !4549)
!4556 = !DILocation(line: 1054, column: 20, scope: !4549)
!4557 = !DILocation(line: 1054, column: 3, scope: !4549)
!4558 = distinct !DISubprogram(name: "gimple_op", scope: !385, file: !385, line: 1631, type: !4559, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4559 = !DISubroutineType(types: !4560)
!4560 = !{!2326, !3744, !7}
!4561 = !DILocalVariable(name: "gs", arg: 1, scope: !4558, file: !385, line: 1631, type: !3744)
!4562 = !DILocation(line: 1631, column: 25, scope: !4558)
!4563 = !DILocalVariable(name: "i", arg: 2, scope: !4558, file: !385, line: 1631, type: !7)
!4564 = !DILocation(line: 1631, column: 38, scope: !4558)
!4565 = !DILocation(line: 1633, column: 23, scope: !4566)
!4566 = distinct !DILexicalBlock(scope: !4558, file: !385, line: 1633, column: 7)
!4567 = !DILocation(line: 1633, column: 7, scope: !4566)
!4568 = !DILocation(line: 1633, column: 7, scope: !4558)
!4569 = !DILocation(line: 1638, column: 26, scope: !4570)
!4570 = distinct !DILexicalBlock(scope: !4566, file: !385, line: 1634, column: 5)
!4571 = !DILocation(line: 1638, column: 14, scope: !4570)
!4572 = !DILocation(line: 1638, column: 50, scope: !4570)
!4573 = !DILocation(line: 1638, column: 7, scope: !4570)
!4574 = !DILocation(line: 1641, column: 5, scope: !4566)
!4575 = !DILocation(line: 1642, column: 1, scope: !4558)
!4576 = distinct !DISubprogram(name: "gimple_has_ops", scope: !385, file: !385, line: 1274, type: !3816, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4577 = !DILocalVariable(name: "g", arg: 1, scope: !4576, file: !385, line: 1274, type: !3744)
!4578 = !DILocation(line: 1274, column: 30, scope: !4576)
!4579 = !DILocation(line: 1276, column: 23, scope: !4576)
!4580 = !DILocation(line: 1276, column: 10, scope: !4576)
!4581 = !DILocation(line: 1276, column: 26, scope: !4576)
!4582 = !DILocation(line: 1276, column: 41, scope: !4576)
!4583 = !DILocation(line: 1276, column: 57, scope: !4576)
!4584 = !DILocation(line: 1276, column: 44, scope: !4576)
!4585 = !DILocation(line: 1276, column: 60, scope: !4576)
!4586 = !DILocation(line: 0, scope: !4576)
!4587 = !DILocation(line: 1276, column: 3, scope: !4576)
!4588 = distinct !DISubprogram(name: "gimple_ops", scope: !385, file: !385, line: 1614, type: !4589, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4589 = !DISubroutineType(types: !4590)
!4590 = !{!2834, !2201}
!4591 = !DILocalVariable(name: "gs", arg: 1, scope: !4588, file: !385, line: 1614, type: !2201)
!4592 = !DILocation(line: 1614, column: 20, scope: !4588)
!4593 = !DILocalVariable(name: "off", scope: !4588, file: !385, line: 1616, type: !2140)
!4594 = !DILocation(line: 1616, column: 10, scope: !4588)
!4595 = !DILocation(line: 1621, column: 56, scope: !4588)
!4596 = !DILocation(line: 1621, column: 28, scope: !4588)
!4597 = !DILocation(line: 1621, column: 9, scope: !4588)
!4598 = !DILocation(line: 1621, column: 7, scope: !4588)
!4599 = !DILocation(line: 1622, column: 3, scope: !4588)
!4600 = !DILocation(line: 1624, column: 29, scope: !4588)
!4601 = !DILocation(line: 1624, column: 20, scope: !4588)
!4602 = !DILocation(line: 1624, column: 34, scope: !4588)
!4603 = !DILocation(line: 1624, column: 32, scope: !4588)
!4604 = !DILocation(line: 1624, column: 10, scope: !4588)
!4605 = !DILocation(line: 1624, column: 3, scope: !4588)
!4606 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !385, file: !385, line: 1073, type: !4607, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4607 = !DISubroutineType(types: !4608)
!4608 = !{!625, !2201}
!4609 = !DILocalVariable(name: "gs", arg: 1, scope: !4606, file: !385, line: 1073, type: !2201)
!4610 = !DILocation(line: 1073, column: 36, scope: !4606)
!4611 = !DILocation(line: 1075, column: 37, scope: !4606)
!4612 = !DILocation(line: 1075, column: 24, scope: !4606)
!4613 = !DILocation(line: 1075, column: 10, scope: !4606)
!4614 = !DILocation(line: 1075, column: 3, scope: !4606)
!4615 = distinct !DISubprogram(name: "gss_for_code", scope: !385, file: !385, line: 1061, type: !4616, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4616 = !DISubroutineType(types: !4617)
!4617 = !{!625, !587}
!4618 = !DILocalVariable(name: "code", arg: 1, scope: !4615, file: !385, line: 1061, type: !587)
!4619 = !DILocation(line: 1061, column: 32, scope: !4615)
!4620 = !DILocation(line: 1066, column: 24, scope: !4615)
!4621 = !DILocation(line: 1066, column: 10, scope: !4615)
!4622 = !DILocation(line: 1066, column: 3, scope: !4615)
!4623 = distinct !DISubprogram(name: "gimple_num_ops", scope: !385, file: !385, line: 1596, type: !4624, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4624 = !DISubroutineType(types: !4625)
!4625 = !{!7, !3744}
!4626 = !DILocalVariable(name: "gs", arg: 1, scope: !4623, file: !385, line: 1596, type: !3744)
!4627 = !DILocation(line: 1596, column: 30, scope: !4623)
!4628 = !DILocation(line: 1598, column: 10, scope: !4623)
!4629 = !DILocation(line: 1598, column: 14, scope: !4623)
!4630 = !DILocation(line: 1598, column: 21, scope: !4623)
!4631 = !DILocation(line: 1598, column: 3, scope: !4623)
!4632 = distinct !DISubprogram(name: "clear_tree_used", scope: !3, file: !3, line: 1046, type: !4633, scopeLine: 1047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4633 = !DISubroutineType(types: !4634)
!4634 = !{null, !2326}
!4635 = !DILocalVariable(name: "block", arg: 1, scope: !4632, file: !3, line: 1046, type: !2326)
!4636 = !DILocation(line: 1046, column: 23, scope: !4632)
!4637 = !DILocalVariable(name: "t", scope: !4632, file: !3, line: 1048, type: !2326)
!4638 = !DILocation(line: 1048, column: 8, scope: !4632)
!4639 = !DILocation(line: 1050, column: 12, scope: !4640)
!4640 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 1050, column: 3)
!4641 = !DILocation(line: 1050, column: 10, scope: !4640)
!4642 = !DILocation(line: 1050, column: 8, scope: !4640)
!4643 = !DILocation(line: 1050, column: 32, scope: !4644)
!4644 = distinct !DILexicalBlock(scope: !4640, file: !3, line: 1050, column: 3)
!4645 = !DILocation(line: 1050, column: 3, scope: !4640)
!4646 = !DILocation(line: 1052, column: 7, scope: !4644)
!4647 = !DILocation(line: 1052, column: 21, scope: !4644)
!4648 = !DILocation(line: 1050, column: 40, scope: !4644)
!4649 = !DILocation(line: 1050, column: 38, scope: !4644)
!4650 = !DILocation(line: 1050, column: 3, scope: !4644)
!4651 = distinct !{!4651, !4645, !4652}
!4652 = !DILocation(line: 1052, column: 23, scope: !4640)
!4653 = !DILocation(line: 1054, column: 12, scope: !4654)
!4654 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 1054, column: 3)
!4655 = !DILocation(line: 1054, column: 10, scope: !4654)
!4656 = !DILocation(line: 1054, column: 8, scope: !4654)
!4657 = !DILocation(line: 1054, column: 37, scope: !4658)
!4658 = distinct !DILexicalBlock(scope: !4654, file: !3, line: 1054, column: 3)
!4659 = !DILocation(line: 1054, column: 3, scope: !4654)
!4660 = !DILocation(line: 1055, column: 22, scope: !4658)
!4661 = !DILocation(line: 1055, column: 5, scope: !4658)
!4662 = !DILocation(line: 1054, column: 45, scope: !4658)
!4663 = !DILocation(line: 1054, column: 43, scope: !4658)
!4664 = !DILocation(line: 1054, column: 3, scope: !4658)
!4665 = distinct !{!4665, !4659, !4666}
!4666 = !DILocation(line: 1055, column: 23, scope: !4654)
!4667 = !DILocation(line: 1056, column: 1, scope: !4632)
!4668 = distinct !DISubprogram(name: "expand_one_error_var", scope: !3, file: !3, line: 859, type: !4633, scopeLine: 860, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4669 = !DILocalVariable(name: "var", arg: 1, scope: !4668, file: !3, line: 859, type: !2326)
!4670 = !DILocation(line: 859, column: 28, scope: !4668)
!4671 = !DILocalVariable(name: "mode", scope: !4668, file: !3, line: 861, type: !5)
!4672 = !DILocation(line: 861, column: 21, scope: !4668)
!4673 = !DILocation(line: 861, column: 28, scope: !4668)
!4674 = !DILocalVariable(name: "x", scope: !4668, file: !3, line: 862, type: !2207)
!4675 = !DILocation(line: 862, column: 7, scope: !4668)
!4676 = !DILocation(line: 864, column: 7, scope: !4677)
!4677 = distinct !DILexicalBlock(scope: !4668, file: !3, line: 864, column: 7)
!4678 = !DILocation(line: 864, column: 12, scope: !4677)
!4679 = !DILocation(line: 864, column: 7, scope: !4668)
!4680 = !DILocation(line: 865, column: 31, scope: !4677)
!4681 = !DILocation(line: 865, column: 9, scope: !4677)
!4682 = !DILocation(line: 865, column: 7, scope: !4677)
!4683 = !DILocation(line: 865, column: 5, scope: !4677)
!4684 = !DILocation(line: 866, column: 12, scope: !4685)
!4685 = distinct !DILexicalBlock(scope: !4677, file: !3, line: 866, column: 12)
!4686 = !DILocation(line: 866, column: 17, scope: !4685)
!4687 = !DILocation(line: 866, column: 12, scope: !4677)
!4688 = !DILocation(line: 867, column: 9, scope: !4685)
!4689 = !DILocation(line: 867, column: 7, scope: !4685)
!4690 = !DILocation(line: 867, column: 5, scope: !4685)
!4691 = !DILocation(line: 869, column: 22, scope: !4685)
!4692 = !DILocation(line: 869, column: 9, scope: !4685)
!4693 = !DILocation(line: 869, column: 7, scope: !4685)
!4694 = !DILocation(line: 871, column: 3, scope: !4668)
!4695 = !DILocation(line: 872, column: 1, scope: !4668)
!4696 = distinct !DISubprogram(name: "expand_one_hard_reg_var", scope: !3, file: !3, line: 828, type: !4633, scopeLine: 829, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4697 = !DILocalVariable(name: "var", arg: 1, scope: !4696, file: !3, line: 828, type: !2326)
!4698 = !DILocation(line: 828, column: 31, scope: !4696)
!4699 = !DILocation(line: 830, column: 29, scope: !4696)
!4700 = !DILocation(line: 830, column: 3, scope: !4696)
!4701 = !DILocation(line: 831, column: 1, scope: !4696)
!4702 = distinct !DISubprogram(name: "expand_one_register_var", scope: !3, file: !3, line: 837, type: !4633, scopeLine: 838, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4703 = !DILocalVariable(name: "var", arg: 1, scope: !4702, file: !3, line: 837, type: !2326)
!4704 = !DILocation(line: 837, column: 31, scope: !4702)
!4705 = !DILocalVariable(name: "decl", scope: !4702, file: !3, line: 839, type: !2326)
!4706 = !DILocation(line: 839, column: 8, scope: !4702)
!4707 = !DILocation(line: 839, column: 15, scope: !4702)
!4708 = !DILocalVariable(name: "type", scope: !4702, file: !3, line: 840, type: !2326)
!4709 = !DILocation(line: 840, column: 8, scope: !4702)
!4710 = !DILocation(line: 840, column: 15, scope: !4702)
!4711 = !DILocalVariable(name: "reg_mode", scope: !4702, file: !3, line: 841, type: !5)
!4712 = !DILocation(line: 841, column: 21, scope: !4702)
!4713 = !DILocation(line: 841, column: 51, scope: !4702)
!4714 = !DILocation(line: 841, column: 32, scope: !4702)
!4715 = !DILocalVariable(name: "x", scope: !4702, file: !3, line: 842, type: !2207)
!4716 = !DILocation(line: 842, column: 7, scope: !4702)
!4717 = !DILocation(line: 842, column: 24, scope: !4702)
!4718 = !DILocation(line: 842, column: 11, scope: !4702)
!4719 = !DILocation(line: 844, column: 12, scope: !4702)
!4720 = !DILocation(line: 844, column: 17, scope: !4702)
!4721 = !DILocation(line: 844, column: 3, scope: !4702)
!4722 = !DILocation(line: 847, column: 8, scope: !4723)
!4723 = distinct !DILexicalBlock(scope: !4702, file: !3, line: 847, column: 7)
!4724 = !DILocation(line: 847, column: 7, scope: !4702)
!4725 = !DILocation(line: 848, column: 20, scope: !4723)
!4726 = !DILocation(line: 848, column: 5, scope: !4723)
!4727 = !DILocation(line: 850, column: 7, scope: !4728)
!4728 = distinct !DILexicalBlock(scope: !4702, file: !3, line: 850, column: 7)
!4729 = !DILocation(line: 850, column: 7, scope: !4702)
!4730 = !DILocation(line: 851, column: 23, scope: !4728)
!4731 = !DILocation(line: 851, column: 26, scope: !4728)
!4732 = !DILocation(line: 851, column: 5, scope: !4728)
!4733 = !DILocation(line: 852, column: 1, scope: !4702)
!4734 = distinct !DISubprogram(name: "defer_stack_allocation", scope: !3, file: !3, line: 883, type: !4735, scopeLine: 884, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4735 = !DISubroutineType(types: !4736)
!4736 = !{!2439, !2326, !2439}
!4737 = !DILocalVariable(name: "var", arg: 1, scope: !4734, file: !3, line: 883, type: !2326)
!4738 = !DILocation(line: 883, column: 30, scope: !4734)
!4739 = !DILocalVariable(name: "toplevel", arg: 2, scope: !4734, file: !3, line: 883, type: !2439)
!4740 = !DILocation(line: 883, column: 40, scope: !4734)
!4741 = !DILocation(line: 887, column: 7, scope: !4742)
!4742 = distinct !DILexicalBlock(scope: !4734, file: !3, line: 887, column: 7)
!4743 = !DILocation(line: 887, column: 7, scope: !4734)
!4744 = !DILocation(line: 888, column: 5, scope: !4742)
!4745 = !DILocation(line: 894, column: 7, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4734, file: !3, line: 894, column: 7)
!4747 = !DILocation(line: 894, column: 16, scope: !4746)
!4748 = !DILocation(line: 894, column: 19, scope: !4746)
!4749 = !DILocation(line: 894, column: 28, scope: !4746)
!4750 = !DILocation(line: 894, column: 7, scope: !4734)
!4751 = !DILocation(line: 895, column: 5, scope: !4746)
!4752 = !DILocation(line: 903, column: 7, scope: !4753)
!4753 = distinct !DILexicalBlock(scope: !4734, file: !3, line: 903, column: 7)
!4754 = !DILocation(line: 903, column: 16, scope: !4753)
!4755 = !DILocation(line: 903, column: 21, scope: !4753)
!4756 = !DILocation(line: 903, column: 38, scope: !4753)
!4757 = !DILocation(line: 903, column: 24, scope: !4753)
!4758 = !DILocation(line: 903, column: 63, scope: !4753)
!4759 = !DILocation(line: 903, column: 7, scope: !4734)
!4760 = !DILocation(line: 904, column: 5, scope: !4753)
!4761 = !DILocation(line: 906, column: 3, scope: !4734)
!4762 = !DILocation(line: 907, column: 1, scope: !4734)
!4763 = distinct !DISubprogram(name: "add_stack_var", scope: !3, file: !3, line: 266, type: !4633, scopeLine: 267, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4764 = !DILocalVariable(name: "decl", arg: 1, scope: !4763, file: !3, line: 266, type: !2326)
!4765 = !DILocation(line: 266, column: 21, scope: !4763)
!4766 = !DILocation(line: 268, column: 7, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4763, file: !3, line: 268, column: 7)
!4768 = !DILocation(line: 268, column: 25, scope: !4767)
!4769 = !DILocation(line: 268, column: 22, scope: !4767)
!4770 = !DILocation(line: 268, column: 7, scope: !4763)
!4771 = !DILocation(line: 270, column: 11, scope: !4772)
!4772 = distinct !DILexicalBlock(scope: !4773, file: !3, line: 270, column: 11)
!4773 = distinct !DILexicalBlock(scope: !4767, file: !3, line: 269, column: 5)
!4774 = !DILocation(line: 270, column: 11, scope: !4773)
!4775 = !DILocation(line: 271, column: 21, scope: !4772)
!4776 = !DILocation(line: 271, column: 38, scope: !4772)
!4777 = !DILocation(line: 271, column: 42, scope: !4772)
!4778 = !DILocation(line: 271, column: 19, scope: !4772)
!4779 = !DILocation(line: 271, column: 2, scope: !4772)
!4780 = !DILocation(line: 273, column: 19, scope: !4772)
!4781 = !DILocation(line: 275, column: 4, scope: !4773)
!4782 = !DILocation(line: 275, column: 2, scope: !4773)
!4783 = !DILocation(line: 276, column: 5, scope: !4773)
!4784 = !DILocation(line: 277, column: 37, scope: !4763)
!4785 = !DILocation(line: 277, column: 3, scope: !4763)
!4786 = !DILocation(line: 277, column: 14, scope: !4763)
!4787 = !DILocation(line: 277, column: 30, scope: !4763)
!4788 = !DILocation(line: 277, column: 35, scope: !4763)
!4789 = !DILocation(line: 278, column: 3, scope: !4763)
!4790 = !DILocation(line: 278, column: 14, scope: !4763)
!4791 = !DILocation(line: 278, column: 30, scope: !4763)
!4792 = !DILocation(line: 278, column: 37, scope: !4763)
!4793 = !DILocation(line: 279, column: 51, scope: !4763)
!4794 = !DILocation(line: 279, column: 37, scope: !4763)
!4795 = !DILocation(line: 279, column: 3, scope: !4763)
!4796 = !DILocation(line: 279, column: 14, scope: !4763)
!4797 = !DILocation(line: 279, column: 30, scope: !4763)
!4798 = !DILocation(line: 279, column: 35, scope: !4763)
!4799 = !DILocation(line: 280, column: 60, scope: !4763)
!4800 = !DILocation(line: 280, column: 39, scope: !4763)
!4801 = !DILocation(line: 280, column: 3, scope: !4763)
!4802 = !DILocation(line: 280, column: 14, scope: !4763)
!4803 = !DILocation(line: 280, column: 30, scope: !4763)
!4804 = !DILocation(line: 280, column: 37, scope: !4763)
!4805 = !DILocation(line: 283, column: 47, scope: !4763)
!4806 = !DILocation(line: 283, column: 3, scope: !4763)
!4807 = !DILocation(line: 283, column: 14, scope: !4763)
!4808 = !DILocation(line: 283, column: 30, scope: !4763)
!4809 = !DILocation(line: 283, column: 45, scope: !4763)
!4810 = !DILocation(line: 284, column: 3, scope: !4763)
!4811 = !DILocation(line: 284, column: 14, scope: !4763)
!4812 = !DILocation(line: 284, column: 30, scope: !4763)
!4813 = !DILocation(line: 284, column: 35, scope: !4763)
!4814 = !DILocation(line: 287, column: 3, scope: !4763)
!4815 = !DILocation(line: 287, column: 14, scope: !4763)
!4816 = !DILocation(line: 287, column: 30, scope: !4763)
!4817 = !DILocation(line: 287, column: 40, scope: !4763)
!4818 = !DILocation(line: 290, column: 12, scope: !4763)
!4819 = !DILocation(line: 290, column: 18, scope: !4763)
!4820 = !DILocation(line: 290, column: 3, scope: !4763)
!4821 = !DILocation(line: 292, column: 17, scope: !4763)
!4822 = !DILocation(line: 293, column: 1, scope: !4763)
!4823 = distinct !DISubprogram(name: "expand_one_stack_var", scope: !3, file: !3, line: 813, type: !4633, scopeLine: 814, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4824 = !DILocalVariable(name: "var", arg: 1, scope: !4823, file: !3, line: 813, type: !2326)
!4825 = !DILocation(line: 813, column: 28, scope: !4823)
!4826 = !DILocalVariable(name: "size", scope: !4823, file: !3, line: 815, type: !2295)
!4827 = !DILocation(line: 815, column: 17, scope: !4823)
!4828 = !DILocalVariable(name: "offset", scope: !4823, file: !3, line: 815, type: !2295)
!4829 = !DILocation(line: 815, column: 23, scope: !4823)
!4830 = !DILocalVariable(name: "align", scope: !4823, file: !3, line: 815, type: !2295)
!4831 = !DILocation(line: 815, column: 31, scope: !4823)
!4832 = !DILocation(line: 817, column: 24, scope: !4823)
!4833 = !DILocation(line: 817, column: 10, scope: !4823)
!4834 = !DILocation(line: 817, column: 8, scope: !4823)
!4835 = !DILocation(line: 818, column: 32, scope: !4823)
!4836 = !DILocation(line: 818, column: 11, scope: !4823)
!4837 = !DILocation(line: 818, column: 9, scope: !4823)
!4838 = !DILocation(line: 819, column: 37, scope: !4823)
!4839 = !DILocation(line: 819, column: 43, scope: !4823)
!4840 = !DILocation(line: 819, column: 12, scope: !4823)
!4841 = !DILocation(line: 819, column: 10, scope: !4823)
!4842 = !DILocation(line: 821, column: 28, scope: !4823)
!4843 = !DILocation(line: 821, column: 33, scope: !4823)
!4844 = !DILocation(line: 821, column: 3, scope: !4823)
!4845 = !DILocation(line: 822, column: 1, scope: !4823)
!4846 = distinct !DISubprogram(name: "set_rtl", scope: !3, file: !3, line: 110, type: !4847, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4847 = !DISubroutineType(types: !4848)
!4848 = !{null, !2326, !2207}
!4849 = !DILocalVariable(name: "t", arg: 1, scope: !4846, file: !3, line: 110, type: !2326)
!4850 = !DILocation(line: 110, column: 15, scope: !4846)
!4851 = !DILocalVariable(name: "x", arg: 2, scope: !4846, file: !3, line: 110, type: !2207)
!4852 = !DILocation(line: 110, column: 22, scope: !4846)
!4853 = !DILocation(line: 112, column: 7, scope: !4854)
!4854 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 112, column: 7)
!4855 = !DILocation(line: 112, column: 21, scope: !4854)
!4856 = !DILocation(line: 112, column: 7, scope: !4846)
!4857 = !DILocation(line: 114, column: 62, scope: !4858)
!4858 = distinct !DILexicalBlock(scope: !4854, file: !3, line: 113, column: 5)
!4859 = !DILocation(line: 114, column: 10, scope: !4858)
!4860 = !DILocation(line: 114, column: 51, scope: !4858)
!4861 = !DILocation(line: 114, column: 56, scope: !4858)
!4862 = !DILocation(line: 114, column: 30, scope: !4858)
!4863 = !DILocation(line: 114, column: 7, scope: !4858)
!4864 = !DILocation(line: 114, column: 60, scope: !4858)
!4865 = !DILocation(line: 115, column: 11, scope: !4866)
!4866 = distinct !DILexicalBlock(scope: !4858, file: !3, line: 115, column: 11)
!4867 = !DILocation(line: 115, column: 13, scope: !4866)
!4868 = !DILocation(line: 115, column: 17, scope: !4866)
!4869 = !DILocation(line: 115, column: 11, scope: !4858)
!4870 = !DILocation(line: 116, column: 30, scope: !4866)
!4871 = !DILocation(line: 116, column: 48, scope: !4866)
!4872 = !DILocation(line: 116, column: 2, scope: !4866)
!4873 = !DILocation(line: 120, column: 11, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4858, file: !3, line: 120, column: 11)
!4875 = !DILocation(line: 120, column: 13, scope: !4874)
!4876 = !DILocation(line: 120, column: 16, scope: !4874)
!4877 = !DILocation(line: 120, column: 21, scope: !4874)
!4878 = !DILocation(line: 120, column: 18, scope: !4874)
!4879 = !DILocation(line: 120, column: 28, scope: !4874)
!4880 = !DILocation(line: 120, column: 31, scope: !4874)
!4881 = !DILocation(line: 120, column: 60, scope: !4874)
!4882 = !DILocation(line: 120, column: 11, scope: !4858)
!4883 = !DILocalVariable(name: "var", scope: !4884, file: !3, line: 122, type: !2326)
!4884 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 121, column: 2)
!4885 = !DILocation(line: 122, column: 9, scope: !4884)
!4886 = !DILocation(line: 122, column: 15, scope: !4884)
!4887 = !DILocation(line: 124, column: 9, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4884, file: !3, line: 124, column: 8)
!4889 = !DILocation(line: 124, column: 8, scope: !4884)
!4890 = !DILocation(line: 125, column: 6, scope: !4888)
!4891 = !DILocation(line: 128, column: 13, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 128, column: 13)
!4893 = !DILocation(line: 128, column: 31, scope: !4892)
!4894 = !DILocation(line: 128, column: 28, scope: !4892)
!4895 = !DILocation(line: 128, column: 13, scope: !4888)
!4896 = !DILocation(line: 136, column: 13, scope: !4897)
!4897 = distinct !DILexicalBlock(scope: !4892, file: !3, line: 136, column: 13)
!4898 = !DILocation(line: 136, column: 31, scope: !4897)
!4899 = !DILocation(line: 136, column: 28, scope: !4897)
!4900 = !DILocation(line: 136, column: 13, scope: !4892)
!4901 = !DILocation(line: 137, column: 6, scope: !4897)
!4902 = !DILocation(line: 138, column: 2, scope: !4884)
!4903 = !DILocation(line: 139, column: 5, scope: !4858)
!4904 = !DILocation(line: 141, column: 5, scope: !4854)
!4905 = !DILocation(line: 142, column: 1, scope: !4846)
!4906 = distinct !DISubprogram(name: "var_to_partition", scope: !3592, file: !3592, line: 143, type: !4907, scopeLine: 144, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4907 = !DISubroutineType(types: !4908)
!4908 = !{!2136, !3591, !2326}
!4909 = !DILocalVariable(name: "map", arg: 1, scope: !4906, file: !3592, line: 143, type: !3591)
!4910 = !DILocation(line: 143, column: 27, scope: !4906)
!4911 = !DILocalVariable(name: "var", arg: 2, scope: !4906, file: !3592, line: 143, type: !2326)
!4912 = !DILocation(line: 143, column: 37, scope: !4906)
!4913 = !DILocalVariable(name: "part", scope: !4906, file: !3592, line: 145, type: !2136)
!4914 = !DILocation(line: 145, column: 7, scope: !4906)
!4915 = !DILocation(line: 147, column: 3, scope: !4906)
!4916 = !DILocation(line: 148, column: 10, scope: !4906)
!4917 = !DILocation(line: 148, column: 8, scope: !4906)
!4918 = !DILocation(line: 149, column: 7, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4906, file: !3592, line: 149, column: 7)
!4920 = !DILocation(line: 149, column: 12, scope: !4919)
!4921 = !DILocation(line: 149, column: 7, scope: !4906)
!4922 = !DILocation(line: 150, column: 12, scope: !4919)
!4923 = !DILocation(line: 150, column: 17, scope: !4919)
!4924 = !DILocation(line: 150, column: 35, scope: !4919)
!4925 = !DILocation(line: 150, column: 10, scope: !4919)
!4926 = !DILocation(line: 150, column: 5, scope: !4919)
!4927 = !DILocation(line: 151, column: 10, scope: !4906)
!4928 = !DILocation(line: 151, column: 3, scope: !4906)
!4929 = distinct !DISubprogram(name: "get_decl_align_unit", scope: !3, file: !3, line: 202, type: !4930, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4930 = !DISubroutineType(types: !4931)
!4931 = !{!7, !2326}
!4932 = !DILocalVariable(name: "decl", arg: 1, scope: !4929, file: !3, line: 202, type: !2326)
!4933 = !DILocation(line: 202, column: 27, scope: !4929)
!4934 = !DILocalVariable(name: "align", scope: !4929, file: !3, line: 204, type: !7)
!4935 = !DILocation(line: 204, column: 16, scope: !4929)
!4936 = !DILocation(line: 206, column: 11, scope: !4929)
!4937 = !DILocation(line: 206, column: 9, scope: !4929)
!4938 = !DILocation(line: 208, column: 7, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4929, file: !3, line: 208, column: 7)
!4940 = !DILocation(line: 208, column: 13, scope: !4939)
!4941 = !DILocation(line: 208, column: 7, scope: !4929)
!4942 = !DILocation(line: 209, column: 11, scope: !4939)
!4943 = !DILocation(line: 209, column: 5, scope: !4939)
!4944 = !DILocation(line: 213, column: 17, scope: !4945)
!4945 = distinct !DILexicalBlock(scope: !4946, file: !3, line: 213, column: 11)
!4946 = distinct !DILexicalBlock(scope: !4947, file: !3, line: 212, column: 5)
!4947 = distinct !DILexicalBlock(scope: !4929, file: !3, line: 211, column: 7)
!4948 = !DILocation(line: 213, column: 45, scope: !4945)
!4949 = !DILocation(line: 213, column: 43, scope: !4945)
!4950 = !DILocation(line: 213, column: 11, scope: !4946)
!4951 = !DILocation(line: 215, column: 4, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4945, file: !3, line: 214, column: 2)
!4953 = !DILocation(line: 216, column: 45, scope: !4952)
!4954 = !DILocation(line: 216, column: 43, scope: !4952)
!4955 = !DILocation(line: 217, column: 2, scope: !4952)
!4956 = !DILocation(line: 222, column: 13, scope: !4957)
!4957 = distinct !DILexicalBlock(scope: !4929, file: !3, line: 222, column: 7)
!4958 = !DILocation(line: 222, column: 38, scope: !4957)
!4959 = !DILocation(line: 222, column: 36, scope: !4957)
!4960 = !DILocation(line: 222, column: 7, scope: !4929)
!4961 = !DILocation(line: 223, column: 36, scope: !4957)
!4962 = !DILocation(line: 223, column: 34, scope: !4957)
!4963 = !DILocation(line: 223, column: 5, scope: !4957)
!4964 = !DILocation(line: 224, column: 13, scope: !4965)
!4965 = distinct !DILexicalBlock(scope: !4929, file: !3, line: 224, column: 7)
!4966 = !DILocation(line: 224, column: 45, scope: !4965)
!4967 = !DILocation(line: 224, column: 43, scope: !4965)
!4968 = !DILocation(line: 224, column: 7, scope: !4929)
!4969 = !DILocation(line: 225, column: 43, scope: !4965)
!4970 = !DILocation(line: 225, column: 41, scope: !4965)
!4971 = !DILocation(line: 225, column: 5, scope: !4965)
!4972 = !DILocation(line: 227, column: 10, scope: !4929)
!4973 = !DILocation(line: 227, column: 16, scope: !4929)
!4974 = !DILocation(line: 227, column: 3, scope: !4929)
!4975 = distinct !DISubprogram(name: "alloc_stack_frame_space", scope: !3, file: !3, line: 234, type: !4976, scopeLine: 235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!4976 = !DISubroutineType(types: !4977)
!4977 = !{!2295, !2295, !2295}
!4978 = !DILocalVariable(name: "size", arg: 1, scope: !4975, file: !3, line: 234, type: !2295)
!4979 = !DILocation(line: 234, column: 40, scope: !4975)
!4980 = !DILocalVariable(name: "align", arg: 2, scope: !4975, file: !3, line: 234, type: !2295)
!4981 = !DILocation(line: 234, column: 60, scope: !4975)
!4982 = !DILocalVariable(name: "offset", scope: !4975, file: !3, line: 236, type: !2295)
!4983 = !DILocation(line: 236, column: 17, scope: !4975)
!4984 = !DILocalVariable(name: "new_frame_offset", scope: !4975, file: !3, line: 236, type: !2295)
!4985 = !DILocation(line: 236, column: 25, scope: !4975)
!4986 = !DILocation(line: 238, column: 22, scope: !4975)
!4987 = !DILocation(line: 238, column: 20, scope: !4975)
!4988 = !DILocation(line: 241, column: 27, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 240, column: 5)
!4990 = distinct !DILexicalBlock(scope: !4975, file: !3, line: 239, column: 7)
!4991 = !DILocation(line: 241, column: 34, scope: !4989)
!4992 = !DILocation(line: 241, column: 32, scope: !4989)
!4993 = !DILocation(line: 241, column: 24, scope: !4989)
!4994 = !DILocation(line: 242, column: 28, scope: !4989)
!4995 = !DILocation(line: 242, column: 27, scope: !4989)
!4996 = !DILocation(line: 242, column: 24, scope: !4989)
!4997 = !DILocation(line: 243, column: 27, scope: !4989)
!4998 = !DILocation(line: 243, column: 24, scope: !4989)
!4999 = !DILocation(line: 244, column: 16, scope: !4989)
!5000 = !DILocation(line: 244, column: 14, scope: !4989)
!5001 = !DILocation(line: 255, column: 18, scope: !4975)
!5002 = !DILocation(line: 255, column: 16, scope: !4975)
!5003 = !DILocation(line: 257, column: 30, scope: !5004)
!5004 = distinct !DILexicalBlock(scope: !4975, file: !3, line: 257, column: 7)
!5005 = !DILocation(line: 257, column: 44, scope: !5004)
!5006 = !DILocation(line: 257, column: 50, scope: !5004)
!5007 = !DILocation(line: 257, column: 7, scope: !5004)
!5008 = !DILocation(line: 257, column: 7, scope: !4975)
!5009 = !DILocation(line: 258, column: 27, scope: !5004)
!5010 = !DILocation(line: 258, column: 18, scope: !5004)
!5011 = !DILocation(line: 258, column: 5, scope: !5004)
!5012 = !DILocation(line: 260, column: 10, scope: !4975)
!5013 = !DILocation(line: 260, column: 3, scope: !4975)
!5014 = distinct !DISubprogram(name: "expand_one_stack_var_at", scope: !3, file: !3, line: 709, type: !5015, scopeLine: 710, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!5015 = !DISubroutineType(types: !5016)
!5016 = !{null, !2326, !2295}
!5017 = !DILocalVariable(name: "decl", arg: 1, scope: !5014, file: !3, line: 709, type: !2326)
!5018 = !DILocation(line: 709, column: 31, scope: !5014)
!5019 = !DILocalVariable(name: "offset", arg: 2, scope: !5014, file: !3, line: 709, type: !2295)
!5020 = !DILocation(line: 709, column: 51, scope: !5014)
!5021 = !DILocalVariable(name: "align", scope: !5014, file: !3, line: 712, type: !2142)
!5022 = !DILocation(line: 712, column: 26, scope: !5014)
!5023 = !DILocalVariable(name: "x", scope: !5014, file: !3, line: 713, type: !2207)
!5024 = !DILocation(line: 713, column: 7, scope: !5014)
!5025 = !DILocation(line: 716, column: 3, scope: !5014)
!5026 = !DILocation(line: 718, column: 22, scope: !5014)
!5027 = !DILocation(line: 718, column: 46, scope: !5014)
!5028 = !DILocation(line: 718, column: 7, scope: !5014)
!5029 = !DILocation(line: 718, column: 5, scope: !5014)
!5030 = !DILocation(line: 719, column: 20, scope: !5014)
!5031 = !DILocation(line: 719, column: 47, scope: !5014)
!5032 = !DILocation(line: 719, column: 7, scope: !5014)
!5033 = !DILocation(line: 719, column: 5, scope: !5014)
!5034 = !DILocation(line: 721, column: 7, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 721, column: 7)
!5036 = !DILocation(line: 721, column: 24, scope: !5035)
!5037 = !DILocation(line: 721, column: 7, scope: !5014)
!5038 = !DILocation(line: 726, column: 17, scope: !5039)
!5039 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 722, column: 5)
!5040 = !DILocation(line: 726, column: 14, scope: !5039)
!5041 = !DILocation(line: 727, column: 15, scope: !5039)
!5042 = !DILocation(line: 727, column: 25, scope: !5039)
!5043 = !DILocation(line: 727, column: 24, scope: !5039)
!5044 = !DILocation(line: 727, column: 22, scope: !5039)
!5045 = !DILocation(line: 727, column: 13, scope: !5039)
!5046 = !DILocation(line: 728, column: 13, scope: !5039)
!5047 = !DILocation(line: 729, column: 11, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 729, column: 11)
!5049 = !DILocation(line: 729, column: 17, scope: !5048)
!5050 = !DILocation(line: 729, column: 11, scope: !5039)
!5051 = !DILocation(line: 730, column: 8, scope: !5048)
!5052 = !DILocation(line: 730, column: 2, scope: !5048)
!5053 = !DILocation(line: 731, column: 16, scope: !5054)
!5054 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 731, column: 16)
!5055 = !DILocation(line: 731, column: 22, scope: !5054)
!5056 = !DILocation(line: 731, column: 16, scope: !5048)
!5057 = !DILocation(line: 732, column: 8, scope: !5054)
!5058 = !DILocation(line: 732, column: 2, scope: !5054)
!5059 = !DILocation(line: 734, column: 27, scope: !5039)
!5060 = !DILocation(line: 734, column: 7, scope: !5039)
!5061 = !DILocation(line: 734, column: 25, scope: !5039)
!5062 = !DILocation(line: 735, column: 7, scope: !5039)
!5063 = !DILocation(line: 735, column: 30, scope: !5039)
!5064 = !DILocation(line: 736, column: 5, scope: !5039)
!5065 = !DILocation(line: 738, column: 23, scope: !5014)
!5066 = !DILocation(line: 738, column: 26, scope: !5014)
!5067 = !DILocation(line: 738, column: 3, scope: !5014)
!5068 = !DILocation(line: 739, column: 12, scope: !5014)
!5069 = !DILocation(line: 739, column: 18, scope: !5014)
!5070 = !DILocation(line: 739, column: 3, scope: !5014)
!5071 = !DILocation(line: 740, column: 1, scope: !5014)
!5072 = distinct !DISubprogram(name: "discover_nonconstant_array_refs", scope: !3, file: !3, line: 3622, type: !3913, scopeLine: 3623, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!5073 = !DILocalVariable(name: "bb", scope: !5072, file: !3, line: 3624, type: !2748)
!5074 = !DILocation(line: 3624, column: 15, scope: !5072)
!5075 = !DILocalVariable(name: "gsi", scope: !5072, file: !3, line: 3625, type: !5076)
!5076 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !385, line: 265, baseType: !5077)
!5077 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !385, line: 254, size: 192, elements: !5078)
!5078 = !{!5079, !5080, !5081}
!5079 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !5077, file: !385, line: 257, baseType: !2196, size: 64)
!5080 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !5077, file: !385, line: 263, baseType: !2191, size: 64, offset: 64)
!5081 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !5077, file: !385, line: 264, baseType: !2748, size: 64, offset: 128)
!5082 = !DILocation(line: 3625, column: 24, scope: !5072)
!5083 = !DILocation(line: 3627, column: 3, scope: !5084)
!5084 = distinct !DILexicalBlock(scope: !5072, file: !3, line: 3627, column: 3)
!5085 = !DILocation(line: 3627, column: 3, scope: !5086)
!5086 = distinct !DILexicalBlock(scope: !5084, file: !3, line: 3627, column: 3)
!5087 = !DILocation(line: 3628, column: 30, scope: !5088)
!5088 = distinct !DILexicalBlock(scope: !5086, file: !3, line: 3628, column: 5)
!5089 = !DILocation(line: 3628, column: 16, scope: !5088)
!5090 = !DILocation(line: 3628, column: 10, scope: !5088)
!5091 = !DILocation(line: 3628, column: 36, scope: !5092)
!5092 = distinct !DILexicalBlock(scope: !5088, file: !3, line: 3628, column: 5)
!5093 = !DILocation(line: 3628, column: 35, scope: !5092)
!5094 = !DILocation(line: 3628, column: 5, scope: !5088)
!5095 = !DILocalVariable(name: "stmt", scope: !5096, file: !3, line: 3630, type: !2201)
!5096 = distinct !DILexicalBlock(scope: !5092, file: !3, line: 3629, column: 7)
!5097 = !DILocation(line: 3630, column: 9, scope: !5096)
!5098 = !DILocation(line: 3630, column: 16, scope: !5096)
!5099 = !DILocation(line: 3631, column: 24, scope: !5100)
!5100 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 3631, column: 6)
!5101 = !DILocation(line: 3631, column: 7, scope: !5100)
!5102 = !DILocation(line: 3631, column: 6, scope: !5096)
!5103 = !DILocation(line: 3632, column: 20, scope: !5100)
!5104 = !DILocation(line: 3632, column: 4, scope: !5100)
!5105 = !DILocation(line: 3633, column: 7, scope: !5096)
!5106 = !DILocation(line: 3628, column: 53, scope: !5092)
!5107 = !DILocation(line: 3628, column: 5, scope: !5092)
!5108 = distinct !{!5108, !5094, !5109}
!5109 = !DILocation(line: 3633, column: 7, scope: !5088)
!5110 = distinct !{!5110, !5083, !5111}
!5111 = !DILocation(line: 3633, column: 7, scope: !5084)
!5112 = !DILocation(line: 3634, column: 1, scope: !5072)
!5113 = distinct !DISubprogram(name: "expand_used_vars", scope: !3, file: !3, line: 1293, type: !3913, scopeLine: 1294, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!5114 = !DILocalVariable(name: "t", scope: !5113, file: !3, line: 1295, type: !2326)
!5115 = !DILocation(line: 1295, column: 8, scope: !5113)
!5116 = !DILocalVariable(name: "next", scope: !5113, file: !3, line: 1295, type: !2326)
!5117 = !DILocation(line: 1295, column: 11, scope: !5113)
!5118 = !DILocalVariable(name: "outer_block", scope: !5113, file: !3, line: 1295, type: !2326)
!5119 = !DILocation(line: 1295, column: 17, scope: !5113)
!5120 = !DILocation(line: 1295, column: 31, scope: !5113)
!5121 = !DILocalVariable(name: "maybe_local_decls", scope: !5113, file: !3, line: 1296, type: !2326)
!5122 = !DILocation(line: 1296, column: 8, scope: !5113)
!5123 = !DILocalVariable(name: "i", scope: !5113, file: !3, line: 1297, type: !7)
!5124 = !DILocation(line: 1297, column: 12, scope: !5113)
!5125 = !DILocalVariable(name: "align", scope: !5126, file: !3, line: 1301, type: !2136)
!5126 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 1300, column: 3)
!5127 = !DILocation(line: 1301, column: 9, scope: !5126)
!5128 = !DILocation(line: 1301, column: 17, scope: !5126)
!5129 = !DILocation(line: 1301, column: 42, scope: !5126)
!5130 = !DILocalVariable(name: "off", scope: !5126, file: !3, line: 1302, type: !2136)
!5131 = !DILocation(line: 1302, column: 9, scope: !5126)
!5132 = !DILocation(line: 1302, column: 39, scope: !5126)
!5133 = !DILocation(line: 1302, column: 37, scope: !5126)
!5134 = !DILocation(line: 1303, column: 19, scope: !5126)
!5135 = !DILocation(line: 1303, column: 25, scope: !5126)
!5136 = !DILocation(line: 1303, column: 33, scope: !5126)
!5137 = !DILocation(line: 1303, column: 31, scope: !5126)
!5138 = !DILocation(line: 1303, column: 17, scope: !5126)
!5139 = !DILocation(line: 1306, column: 3, scope: !5113)
!5140 = !DILocation(line: 1308, column: 10, scope: !5141)
!5141 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 1308, column: 3)
!5142 = !DILocation(line: 1308, column: 8, scope: !5141)
!5143 = !DILocation(line: 1308, column: 15, scope: !5144)
!5144 = distinct !DILexicalBlock(scope: !5141, file: !3, line: 1308, column: 3)
!5145 = !DILocation(line: 1308, column: 22, scope: !5144)
!5146 = !DILocation(line: 1308, column: 27, scope: !5144)
!5147 = !DILocation(line: 1308, column: 17, scope: !5144)
!5148 = !DILocation(line: 1308, column: 3, scope: !5141)
!5149 = !DILocalVariable(name: "var", scope: !5150, file: !3, line: 1310, type: !2326)
!5150 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 1309, column: 5)
!5151 = !DILocation(line: 1310, column: 12, scope: !5150)
!5152 = !DILocation(line: 1310, column: 39, scope: !5150)
!5153 = !DILocation(line: 1310, column: 44, scope: !5150)
!5154 = !DILocation(line: 1310, column: 18, scope: !5150)
!5155 = !DILocation(line: 1312, column: 7, scope: !5150)
!5156 = !DILocation(line: 1313, column: 11, scope: !5157)
!5157 = distinct !DILexicalBlock(scope: !5150, file: !3, line: 1313, column: 11)
!5158 = !DILocation(line: 1313, column: 42, scope: !5157)
!5159 = !DILocation(line: 1313, column: 11, scope: !5150)
!5160 = !DILocation(line: 1314, column: 18, scope: !5157)
!5161 = !DILocation(line: 1314, column: 2, scope: !5157)
!5162 = !DILocation(line: 1322, column: 26, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5164, file: !3, line: 1322, column: 8)
!5164 = distinct !DILexicalBlock(scope: !5157, file: !3, line: 1316, column: 2)
!5165 = !DILocation(line: 1322, column: 53, scope: !5163)
!5166 = !DILocation(line: 1322, column: 9, scope: !5163)
!5167 = !DILocation(line: 1322, column: 8, scope: !5164)
!5168 = !DILocation(line: 1324, column: 24, scope: !5169)
!5169 = distinct !DILexicalBlock(scope: !5163, file: !3, line: 1323, column: 6)
!5170 = !DILocation(line: 1324, column: 8, scope: !5169)
!5171 = !DILocation(line: 1325, column: 8, scope: !5169)
!5172 = !DILocation(line: 1326, column: 6, scope: !5169)
!5173 = !DILocation(line: 1328, column: 5, scope: !5150)
!5174 = !DILocation(line: 1308, column: 44, scope: !5144)
!5175 = !DILocation(line: 1308, column: 3, scope: !5144)
!5176 = distinct !{!5176, !5148, !5177}
!5177 = !DILocation(line: 1328, column: 5, scope: !5141)
!5178 = !DILocation(line: 1332, column: 7, scope: !5113)
!5179 = !DILocation(line: 1332, column: 13, scope: !5113)
!5180 = !DILocation(line: 1332, column: 5, scope: !5113)
!5181 = !DILocation(line: 1333, column: 3, scope: !5113)
!5182 = !DILocation(line: 1333, column: 9, scope: !5113)
!5183 = !DILocation(line: 1333, column: 21, scope: !5113)
!5184 = !DILocation(line: 1334, column: 3, scope: !5113)
!5185 = !DILocation(line: 1334, column: 10, scope: !5186)
!5186 = distinct !DILexicalBlock(scope: !5187, file: !3, line: 1334, column: 3)
!5187 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 1334, column: 3)
!5188 = !DILocation(line: 1334, column: 3, scope: !5187)
!5189 = !DILocalVariable(name: "var", scope: !5190, file: !3, line: 1336, type: !2326)
!5190 = distinct !DILexicalBlock(scope: !5186, file: !3, line: 1335, column: 5)
!5191 = !DILocation(line: 1336, column: 12, scope: !5190)
!5192 = !DILocation(line: 1336, column: 18, scope: !5190)
!5193 = !DILocalVariable(name: "expand_now", scope: !5190, file: !3, line: 1337, type: !2439)
!5194 = !DILocation(line: 1337, column: 12, scope: !5190)
!5195 = !DILocation(line: 1339, column: 14, scope: !5190)
!5196 = !DILocation(line: 1339, column: 12, scope: !5190)
!5197 = !DILocation(line: 1342, column: 26, scope: !5198)
!5198 = distinct !DILexicalBlock(scope: !5190, file: !3, line: 1342, column: 11)
!5199 = !DILocation(line: 1342, column: 11, scope: !5198)
!5200 = !DILocation(line: 1342, column: 11, scope: !5190)
!5201 = !DILocation(line: 1344, column: 4, scope: !5202)
!5202 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 1343, column: 2)
!5203 = !DILocation(line: 1344, column: 20, scope: !5202)
!5204 = !DILocation(line: 1345, column: 4, scope: !5202)
!5205 = !DILocation(line: 1352, column: 16, scope: !5206)
!5206 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 1352, column: 16)
!5207 = !DILocation(line: 1352, column: 34, scope: !5206)
!5208 = !DILocation(line: 1352, column: 37, scope: !5206)
!5209 = !DILocation(line: 1352, column: 16, scope: !5198)
!5210 = !DILocation(line: 1353, column: 13, scope: !5206)
!5211 = !DILocation(line: 1353, column: 2, scope: !5206)
!5212 = !DILocation(line: 1358, column: 16, scope: !5213)
!5213 = distinct !DILexicalBlock(scope: !5206, file: !3, line: 1358, column: 16)
!5214 = !DILocation(line: 1358, column: 16, scope: !5206)
!5215 = !DILocation(line: 1359, column: 13, scope: !5213)
!5216 = !DILocation(line: 1359, column: 2, scope: !5213)
!5217 = !DILocation(line: 1363, column: 7, scope: !5190)
!5218 = !DILocation(line: 1363, column: 23, scope: !5190)
!5219 = !DILocation(line: 1365, column: 11, scope: !5220)
!5220 = distinct !DILexicalBlock(scope: !5190, file: !3, line: 1365, column: 11)
!5221 = !DILocation(line: 1365, column: 11, scope: !5190)
!5222 = !DILocation(line: 1366, column: 18, scope: !5220)
!5223 = !DILocation(line: 1366, column: 2, scope: !5220)
!5224 = !DILabel(scope: !5190, name: "next", file: !3, line: 1368)
!5225 = !DILocation(line: 1368, column: 5, scope: !5190)
!5226 = !DILocation(line: 1369, column: 11, scope: !5227)
!5227 = distinct !DILexicalBlock(scope: !5190, file: !3, line: 1369, column: 11)
!5228 = !DILocation(line: 1369, column: 33, scope: !5227)
!5229 = !DILocation(line: 1369, column: 37, scope: !5227)
!5230 = !DILocation(line: 1369, column: 11, scope: !5190)
!5231 = !DILocalVariable(name: "rtl", scope: !5232, file: !3, line: 1371, type: !2207)
!5232 = distinct !DILexicalBlock(scope: !5227, file: !3, line: 1370, column: 2)
!5233 = !DILocation(line: 1371, column: 8, scope: !5232)
!5234 = !DILocation(line: 1371, column: 14, scope: !5232)
!5235 = !DILocation(line: 1375, column: 8, scope: !5236)
!5236 = distinct !DILexicalBlock(scope: !5232, file: !3, line: 1375, column: 8)
!5237 = !DILocation(line: 1375, column: 12, scope: !5236)
!5238 = !DILocation(line: 1375, column: 16, scope: !5236)
!5239 = !DILocation(line: 1375, column: 28, scope: !5236)
!5240 = !DILocation(line: 1375, column: 31, scope: !5236)
!5241 = !DILocation(line: 1375, column: 46, scope: !5236)
!5242 = !DILocation(line: 1375, column: 8, scope: !5232)
!5243 = !DILocation(line: 1377, column: 25, scope: !5244)
!5244 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 1376, column: 6)
!5245 = !DILocation(line: 1377, column: 31, scope: !5244)
!5246 = !DILocation(line: 1377, column: 8, scope: !5244)
!5247 = !DILocation(line: 1377, column: 23, scope: !5244)
!5248 = !DILocation(line: 1378, column: 28, scope: !5244)
!5249 = !DILocation(line: 1378, column: 8, scope: !5244)
!5250 = !DILocation(line: 1378, column: 14, scope: !5244)
!5251 = !DILocation(line: 1378, column: 26, scope: !5244)
!5252 = !DILocation(line: 1379, column: 8, scope: !5244)
!5253 = !DILocation(line: 1381, column: 13, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 1381, column: 13)
!5255 = !DILocation(line: 1381, column: 17, scope: !5254)
!5256 = !DILocation(line: 1381, column: 13, scope: !5236)
!5257 = !DILocation(line: 1386, column: 25, scope: !5258)
!5258 = distinct !DILexicalBlock(scope: !5254, file: !3, line: 1382, column: 6)
!5259 = !DILocation(line: 1386, column: 8, scope: !5258)
!5260 = !DILocation(line: 1386, column: 23, scope: !5258)
!5261 = !DILocation(line: 1387, column: 28, scope: !5258)
!5262 = !DILocation(line: 1387, column: 26, scope: !5258)
!5263 = !DILocation(line: 1388, column: 8, scope: !5258)
!5264 = !DILocation(line: 1390, column: 2, scope: !5232)
!5265 = !DILocation(line: 1392, column: 17, scope: !5190)
!5266 = !DILocation(line: 1392, column: 7, scope: !5190)
!5267 = !DILocation(line: 1393, column: 5, scope: !5190)
!5268 = !DILocation(line: 1334, column: 17, scope: !5186)
!5269 = !DILocation(line: 1334, column: 15, scope: !5186)
!5270 = !DILocation(line: 1334, column: 3, scope: !5186)
!5271 = distinct !{!5271, !5188, !5272}
!5272 = !DILocation(line: 1393, column: 5, scope: !5187)
!5273 = !DILocation(line: 1397, column: 31, scope: !5113)
!5274 = !DILocation(line: 1397, column: 3, scope: !5113)
!5275 = !DILocation(line: 1399, column: 7, scope: !5276)
!5276 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 1399, column: 7)
!5277 = !DILocation(line: 1399, column: 22, scope: !5276)
!5278 = !DILocation(line: 1399, column: 7, scope: !5113)
!5279 = !DILocation(line: 1404, column: 7, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5276, file: !3, line: 1400, column: 5)
!5281 = !DILocation(line: 1408, column: 11, scope: !5282)
!5282 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 1408, column: 11)
!5283 = !DILocation(line: 1408, column: 11, scope: !5280)
!5284 = !DILocation(line: 1409, column: 2, scope: !5282)
!5285 = !DILocation(line: 1413, column: 7, scope: !5280)
!5286 = !DILocation(line: 1414, column: 11, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 1414, column: 11)
!5288 = !DILocation(line: 1414, column: 11, scope: !5280)
!5289 = !DILocation(line: 1415, column: 2, scope: !5287)
!5290 = !DILocation(line: 1416, column: 5, scope: !5280)
!5291 = !DILocation(line: 1420, column: 7, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 1420, column: 7)
!5293 = !DILocation(line: 1420, column: 26, scope: !5292)
!5294 = !DILocation(line: 1421, column: 7, scope: !5292)
!5295 = !DILocation(line: 1421, column: 11, scope: !5292)
!5296 = !DILocation(line: 1422, column: 4, scope: !5292)
!5297 = !DILocation(line: 1422, column: 8, scope: !5292)
!5298 = !DILocation(line: 1422, column: 14, scope: !5292)
!5299 = !DILocation(line: 1422, column: 27, scope: !5292)
!5300 = !DILocation(line: 1422, column: 30, scope: !5292)
!5301 = !DILocation(line: 1420, column: 7, scope: !5113)
!5302 = !DILocation(line: 1423, column: 5, scope: !5292)
!5303 = !DILocation(line: 1426, column: 7, scope: !5304)
!5304 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 1426, column: 7)
!5305 = !DILocation(line: 1426, column: 22, scope: !5304)
!5306 = !DILocation(line: 1426, column: 7, scope: !5113)
!5307 = !DILocation(line: 1433, column: 11, scope: !5308)
!5308 = distinct !DILexicalBlock(scope: !5309, file: !3, line: 1433, column: 11)
!5309 = distinct !DILexicalBlock(scope: !5304, file: !3, line: 1427, column: 5)
!5310 = !DILocation(line: 1433, column: 11, scope: !5309)
!5311 = !DILocation(line: 1436, column: 4, scope: !5312)
!5312 = distinct !DILexicalBlock(scope: !5308, file: !3, line: 1434, column: 2)
!5313 = !DILocation(line: 1439, column: 8, scope: !5314)
!5314 = distinct !DILexicalBlock(scope: !5312, file: !3, line: 1439, column: 8)
!5315 = !DILocation(line: 1439, column: 27, scope: !5314)
!5316 = !DILocation(line: 1439, column: 8, scope: !5312)
!5317 = !DILocation(line: 1440, column: 6, scope: !5314)
!5318 = !DILocation(line: 1441, column: 2, scope: !5312)
!5319 = !DILocation(line: 1443, column: 7, scope: !5309)
!5320 = !DILocation(line: 1445, column: 7, scope: !5309)
!5321 = !DILocation(line: 1446, column: 5, scope: !5309)
!5322 = !DILocation(line: 1451, column: 12, scope: !5323)
!5323 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 1451, column: 3)
!5324 = !DILocation(line: 1451, column: 10, scope: !5323)
!5325 = !DILocation(line: 1451, column: 8, scope: !5323)
!5326 = !DILocation(line: 1451, column: 31, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5323, file: !3, line: 1451, column: 3)
!5328 = !DILocation(line: 1451, column: 3, scope: !5323)
!5329 = !DILocalVariable(name: "var", scope: !5330, file: !3, line: 1453, type: !2326)
!5330 = distinct !DILexicalBlock(scope: !5327, file: !3, line: 1452, column: 5)
!5331 = !DILocation(line: 1453, column: 12, scope: !5330)
!5332 = !DILocation(line: 1453, column: 18, scope: !5330)
!5333 = !DILocalVariable(name: "rtl", scope: !5330, file: !3, line: 1454, type: !2207)
!5334 = !DILocation(line: 1454, column: 11, scope: !5330)
!5335 = !DILocation(line: 1454, column: 17, scope: !5330)
!5336 = !DILocation(line: 1456, column: 14, scope: !5330)
!5337 = !DILocation(line: 1456, column: 12, scope: !5330)
!5338 = !DILocation(line: 1460, column: 11, scope: !5339)
!5339 = distinct !DILexicalBlock(scope: !5330, file: !3, line: 1460, column: 11)
!5340 = !DILocation(line: 1460, column: 15, scope: !5339)
!5341 = !DILocation(line: 1460, column: 19, scope: !5339)
!5342 = !DILocation(line: 1460, column: 31, scope: !5339)
!5343 = !DILocation(line: 1460, column: 34, scope: !5339)
!5344 = !DILocation(line: 1460, column: 49, scope: !5339)
!5345 = !DILocation(line: 1460, column: 11, scope: !5330)
!5346 = !DILocation(line: 1462, column: 21, scope: !5347)
!5347 = distinct !DILexicalBlock(scope: !5339, file: !3, line: 1461, column: 2)
!5348 = !DILocation(line: 1462, column: 27, scope: !5347)
!5349 = !DILocation(line: 1462, column: 4, scope: !5347)
!5350 = !DILocation(line: 1462, column: 19, scope: !5347)
!5351 = !DILocation(line: 1463, column: 24, scope: !5347)
!5352 = !DILocation(line: 1463, column: 4, scope: !5347)
!5353 = !DILocation(line: 1463, column: 10, scope: !5347)
!5354 = !DILocation(line: 1463, column: 22, scope: !5347)
!5355 = !DILocation(line: 1464, column: 4, scope: !5347)
!5356 = !DILocation(line: 1467, column: 17, scope: !5330)
!5357 = !DILocation(line: 1467, column: 7, scope: !5330)
!5358 = !DILocation(line: 1468, column: 5, scope: !5330)
!5359 = !DILocation(line: 1451, column: 38, scope: !5327)
!5360 = !DILocation(line: 1451, column: 36, scope: !5327)
!5361 = !DILocation(line: 1451, column: 3, scope: !5327)
!5362 = distinct !{!5362, !5328, !5363}
!5363 = !DILocation(line: 1468, column: 5, scope: !5323)
!5364 = !DILocalVariable(name: "align", scope: !5365, file: !3, line: 1473, type: !2295)
!5365 = distinct !DILexicalBlock(scope: !5366, file: !3, line: 1472, column: 5)
!5366 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 1471, column: 7)
!5367 = !DILocation(line: 1473, column: 21, scope: !5365)
!5368 = !DILocation(line: 1473, column: 29, scope: !5365)
!5369 = !DILocation(line: 1473, column: 54, scope: !5365)
!5370 = !DILocation(line: 1476, column: 24, scope: !5365)
!5371 = !DILocation(line: 1476, column: 23, scope: !5365)
!5372 = !DILocation(line: 1476, column: 20, scope: !5365)
!5373 = !DILocation(line: 1478, column: 1, scope: !5113)
!5374 = distinct !DISubprogram(name: "partition_to_var", scope: !3592, file: !3592, line: 111, type: !5375, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!5375 = !DISubroutineType(types: !5376)
!5376 = !{!2326, !3591, !2136}
!5377 = !DILocalVariable(name: "map", arg: 1, scope: !5374, file: !3592, line: 111, type: !3591)
!5378 = !DILocation(line: 111, column: 27, scope: !5374)
!5379 = !DILocalVariable(name: "i", arg: 2, scope: !5374, file: !3592, line: 111, type: !2136)
!5380 = !DILocation(line: 111, column: 36, scope: !5374)
!5381 = !DILocalVariable(name: "name", scope: !5374, file: !3592, line: 113, type: !2326)
!5382 = !DILocation(line: 113, column: 8, scope: !5374)
!5383 = !DILocation(line: 114, column: 7, scope: !5384)
!5384 = distinct !DILexicalBlock(scope: !5374, file: !3592, line: 114, column: 7)
!5385 = !DILocation(line: 114, column: 12, scope: !5384)
!5386 = !DILocation(line: 114, column: 7, scope: !5374)
!5387 = !DILocation(line: 115, column: 9, scope: !5384)
!5388 = !DILocation(line: 115, column: 14, scope: !5384)
!5389 = !DILocation(line: 115, column: 32, scope: !5384)
!5390 = !DILocation(line: 115, column: 7, scope: !5384)
!5391 = !DILocation(line: 115, column: 5, scope: !5384)
!5392 = !DILocation(line: 116, column: 7, scope: !5374)
!5393 = !DILocation(line: 116, column: 5, scope: !5374)
!5394 = !DILocation(line: 117, column: 10, scope: !5374)
!5395 = !DILocation(line: 117, column: 8, scope: !5374)
!5396 = !DILocation(line: 118, column: 10, scope: !5374)
!5397 = !DILocation(line: 118, column: 3, scope: !5374)
!5398 = distinct !DISubprogram(name: "construct_init_block", scope: !3, file: !3, line: 3445, type: !5399, scopeLine: 3446, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!5399 = !DISubroutineType(types: !5400)
!5400 = !{!2748}
!5401 = !DILocalVariable(name: "init_block", scope: !5398, file: !3, line: 3447, type: !2748)
!5402 = !DILocation(line: 3447, column: 15, scope: !5398)
!5403 = !DILocalVariable(name: "first_block", scope: !5398, file: !3, line: 3447, type: !2748)
!5404 = !DILocation(line: 3447, column: 27, scope: !5398)
!5405 = !DILocalVariable(name: "e", scope: !5398, file: !3, line: 3448, type: !2180)
!5406 = !DILocation(line: 3448, column: 8, scope: !5398)
!5407 = !DILocalVariable(name: "flags", scope: !5398, file: !3, line: 3449, type: !2136)
!5408 = !DILocation(line: 3449, column: 7, scope: !5398)
!5409 = !DILocation(line: 3452, column: 3, scope: !5398)
!5410 = !DILocation(line: 3453, column: 21, scope: !5398)
!5411 = !DILocation(line: 3453, column: 3, scope: !5398)
!5412 = !DILocation(line: 3454, column: 21, scope: !5398)
!5413 = !DILocation(line: 3454, column: 3, scope: !5398)
!5414 = !DILocation(line: 3455, column: 3, scope: !5398)
!5415 = !DILocation(line: 3455, column: 20, scope: !5398)
!5416 = !DILocation(line: 3455, column: 26, scope: !5398)
!5417 = !DILocation(line: 3456, column: 3, scope: !5398)
!5418 = !DILocation(line: 3456, column: 19, scope: !5398)
!5419 = !DILocation(line: 3456, column: 25, scope: !5398)
!5420 = !DILocation(line: 3458, column: 7, scope: !5398)
!5421 = !DILocation(line: 3458, column: 5, scope: !5398)
!5422 = !DILocation(line: 3462, column: 7, scope: !5423)
!5423 = distinct !DILexicalBlock(scope: !5398, file: !3, line: 3462, column: 7)
!5424 = !DILocation(line: 3462, column: 9, scope: !5423)
!5425 = !DILocation(line: 3462, column: 12, scope: !5423)
!5426 = !DILocation(line: 3462, column: 15, scope: !5423)
!5427 = !DILocation(line: 3462, column: 23, scope: !5423)
!5428 = !DILocation(line: 3462, column: 40, scope: !5423)
!5429 = !DILocation(line: 3462, column: 20, scope: !5423)
!5430 = !DILocation(line: 3462, column: 7, scope: !5398)
!5431 = !DILocalVariable(name: "label", scope: !5432, file: !3, line: 3464, type: !2326)
!5432 = distinct !DILexicalBlock(scope: !5423, file: !3, line: 3463, column: 5)
!5433 = !DILocation(line: 3464, column: 12, scope: !5432)
!5434 = !DILocation(line: 3464, column: 40, scope: !5432)
!5435 = !DILocation(line: 3464, column: 43, scope: !5432)
!5436 = !DILocation(line: 3464, column: 20, scope: !5432)
!5437 = !DILocation(line: 3466, column: 29, scope: !5432)
!5438 = !DILocation(line: 3466, column: 18, scope: !5432)
!5439 = !DILocation(line: 3466, column: 7, scope: !5432)
!5440 = !DILocation(line: 3467, column: 13, scope: !5432)
!5441 = !DILocation(line: 3468, column: 5, scope: !5432)
!5442 = !DILocation(line: 3470, column: 11, scope: !5423)
!5443 = !DILocation(line: 3472, column: 36, scope: !5398)
!5444 = !DILocation(line: 3473, column: 8, scope: !5398)
!5445 = !DILocation(line: 3474, column: 8, scope: !5398)
!5446 = !DILocation(line: 3472, column: 16, scope: !5398)
!5447 = !DILocation(line: 3472, column: 14, scope: !5398)
!5448 = !DILocation(line: 3475, column: 27, scope: !5398)
!5449 = !DILocation(line: 3475, column: 44, scope: !5398)
!5450 = !DILocation(line: 3475, column: 3, scope: !5398)
!5451 = !DILocation(line: 3475, column: 15, scope: !5398)
!5452 = !DILocation(line: 3475, column: 25, scope: !5398)
!5453 = !DILocation(line: 3476, column: 23, scope: !5398)
!5454 = !DILocation(line: 3476, column: 40, scope: !5398)
!5455 = !DILocation(line: 3476, column: 3, scope: !5398)
!5456 = !DILocation(line: 3476, column: 15, scope: !5398)
!5457 = !DILocation(line: 3476, column: 21, scope: !5398)
!5458 = !DILocation(line: 3477, column: 7, scope: !5459)
!5459 = distinct !DILexicalBlock(scope: !5398, file: !3, line: 3477, column: 7)
!5460 = !DILocation(line: 3477, column: 7, scope: !5398)
!5461 = !DILocation(line: 3479, column: 21, scope: !5462)
!5462 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 3478, column: 5)
!5463 = !DILocation(line: 3479, column: 24, scope: !5462)
!5464 = !DILocation(line: 3479, column: 19, scope: !5462)
!5465 = !DILocation(line: 3480, column: 27, scope: !5462)
!5466 = !DILocation(line: 3480, column: 30, scope: !5462)
!5467 = !DILocation(line: 3480, column: 7, scope: !5462)
!5468 = !DILocation(line: 3481, column: 22, scope: !5462)
!5469 = !DILocation(line: 3481, column: 34, scope: !5462)
!5470 = !DILocation(line: 3481, column: 47, scope: !5462)
!5471 = !DILocation(line: 3481, column: 11, scope: !5462)
!5472 = !DILocation(line: 3481, column: 9, scope: !5462)
!5473 = !DILocation(line: 3482, column: 5, scope: !5462)
!5474 = !DILocation(line: 3484, column: 20, scope: !5459)
!5475 = !DILocation(line: 3484, column: 32, scope: !5459)
!5476 = !DILocation(line: 3484, column: 9, scope: !5459)
!5477 = !DILocation(line: 3484, column: 7, scope: !5459)
!5478 = !DILocation(line: 3485, column: 3, scope: !5398)
!5479 = !DILocation(line: 3485, column: 6, scope: !5398)
!5480 = !DILocation(line: 3485, column: 18, scope: !5398)
!5481 = !DILocation(line: 3486, column: 14, scope: !5398)
!5482 = !DILocation(line: 3486, column: 31, scope: !5398)
!5483 = !DILocation(line: 3486, column: 3, scope: !5398)
!5484 = !DILocation(line: 3486, column: 6, scope: !5398)
!5485 = !DILocation(line: 3486, column: 12, scope: !5398)
!5486 = !DILocation(line: 3488, column: 23, scope: !5398)
!5487 = !DILocation(line: 3488, column: 3, scope: !5398)
!5488 = !DILocation(line: 3489, column: 10, scope: !5398)
!5489 = !DILocation(line: 3489, column: 3, scope: !5398)
!5490 = distinct !DISubprogram(name: "ei_start_1", scope: !337, file: !337, line: 696, type: !5491, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!5491 = !DISubroutineType(types: !5492)
!5492 = !{!4235, !4240}
!5493 = !DILocalVariable(name: "ev", arg: 1, scope: !5490, file: !337, line: 696, type: !4240)
!5494 = !DILocation(line: 696, column: 28, scope: !5490)
!5495 = !DILocalVariable(name: "i", scope: !5490, file: !337, line: 698, type: !4235)
!5496 = !DILocation(line: 698, column: 17, scope: !5490)
!5497 = !DILocation(line: 700, column: 5, scope: !5490)
!5498 = !DILocation(line: 700, column: 11, scope: !5490)
!5499 = !DILocation(line: 701, column: 17, scope: !5490)
!5500 = !DILocation(line: 701, column: 5, scope: !5490)
!5501 = !DILocation(line: 701, column: 15, scope: !5490)
!5502 = !DILocation(line: 703, column: 3, scope: !5490)
!5503 = distinct !DISubprogram(name: "ei_cond", scope: !337, file: !337, line: 771, type: !5504, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!5504 = !DISubroutineType(types: !5505)
!5505 = !{!2439, !4235, !5506}
!5506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2180, size: 64)
!5507 = !DILocalVariable(name: "ei", arg: 1, scope: !5503, file: !337, line: 771, type: !4235)
!5508 = !DILocation(line: 771, column: 24, scope: !5503)
!5509 = !DILocalVariable(name: "p", arg: 2, scope: !5503, file: !337, line: 771, type: !5506)
!5510 = !DILocation(line: 771, column: 34, scope: !5503)
!5511 = !DILocation(line: 773, column: 8, scope: !5512)
!5512 = distinct !DILexicalBlock(scope: !5503, file: !337, line: 773, column: 7)
!5513 = !DILocation(line: 773, column: 7, scope: !5503)
!5514 = !DILocation(line: 775, column: 12, scope: !5515)
!5515 = distinct !DILexicalBlock(scope: !5512, file: !337, line: 774, column: 5)
!5516 = !DILocation(line: 775, column: 8, scope: !5515)
!5517 = !DILocation(line: 775, column: 10, scope: !5515)
!5518 = !DILocation(line: 776, column: 7, scope: !5515)
!5519 = !DILocation(line: 780, column: 8, scope: !5520)
!5520 = distinct !DILexicalBlock(scope: !5512, file: !337, line: 779, column: 5)
!5521 = !DILocation(line: 780, column: 10, scope: !5520)
!5522 = !DILocation(line: 781, column: 7, scope: !5520)
!5523 = !DILocation(line: 783, column: 1, scope: !5503)
!5524 = distinct !DISubprogram(name: "ei_next", scope: !337, file: !337, line: 736, type: !5525, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!5525 = !DISubroutineType(types: !5526)
!5526 = !{null, !5527}
!5527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4235, size: 64)
!5528 = !DILocalVariable(name: "i", arg: 1, scope: !5524, file: !337, line: 736, type: !5527)
!5529 = !DILocation(line: 736, column: 25, scope: !5524)
!5530 = !DILocation(line: 738, column: 3, scope: !5524)
!5531 = !DILocation(line: 739, column: 3, scope: !5524)
!5532 = !DILocation(line: 739, column: 6, scope: !5524)
!5533 = !DILocation(line: 739, column: 11, scope: !5524)
!5534 = !DILocation(line: 740, column: 1, scope: !5524)
!5535 = distinct !DISubprogram(name: "expand_gimple_basic_block", scope: !3, file: !3, line: 3105, type: !5536, scopeLine: 3106, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!5536 = !DISubroutineType(types: !5537)
!5537 = !{!2748, !2748}
!5538 = !DILocalVariable(name: "bb", arg: 1, scope: !5535, file: !3, line: 3105, type: !2748)
!5539 = !DILocation(line: 3105, column: 40, scope: !5535)
!5540 = !DILocalVariable(name: "gsi", scope: !5535, file: !3, line: 3107, type: !5076)
!5541 = !DILocation(line: 3107, column: 24, scope: !5535)
!5542 = !DILocalVariable(name: "stmts", scope: !5535, file: !3, line: 3108, type: !2191)
!5543 = !DILocation(line: 3108, column: 14, scope: !5535)
!5544 = !DILocalVariable(name: "stmt", scope: !5535, file: !3, line: 3109, type: !2201)
!5545 = !DILocation(line: 3109, column: 10, scope: !5535)
!5546 = !DILocalVariable(name: "note", scope: !5535, file: !3, line: 3110, type: !2207)
!5547 = !DILocation(line: 3110, column: 7, scope: !5535)
!5548 = !DILocalVariable(name: "last", scope: !5535, file: !3, line: 3110, type: !2207)
!5549 = !DILocation(line: 3110, column: 13, scope: !5535)
!5550 = !DILocalVariable(name: "e", scope: !5535, file: !3, line: 3111, type: !2180)
!5551 = !DILocation(line: 3111, column: 8, scope: !5535)
!5552 = !DILocalVariable(name: "ei", scope: !5535, file: !3, line: 3112, type: !4235)
!5553 = !DILocation(line: 3112, column: 17, scope: !5535)
!5554 = !DILocalVariable(name: "elt", scope: !5535, file: !3, line: 3113, type: !2686)
!5555 = !DILocation(line: 3113, column: 10, scope: !5535)
!5556 = !DILocation(line: 3115, column: 7, scope: !5557)
!5557 = distinct !DILexicalBlock(scope: !5535, file: !3, line: 3115, column: 7)
!5558 = !DILocation(line: 3115, column: 7, scope: !5535)
!5559 = !DILocation(line: 3116, column: 14, scope: !5557)
!5560 = !DILocation(line: 3117, column: 7, scope: !5557)
!5561 = !DILocation(line: 3117, column: 11, scope: !5557)
!5562 = !DILocation(line: 3116, column: 5, scope: !5557)
!5563 = !DILocation(line: 3123, column: 19, scope: !5535)
!5564 = !DILocation(line: 3123, column: 11, scope: !5535)
!5565 = !DILocation(line: 3123, column: 9, scope: !5535)
!5566 = !DILocation(line: 3124, column: 3, scope: !5535)
!5567 = !DILocation(line: 3124, column: 7, scope: !5535)
!5568 = !DILocation(line: 3124, column: 10, scope: !5535)
!5569 = !DILocation(line: 3124, column: 17, scope: !5535)
!5570 = !DILocation(line: 3125, column: 23, scope: !5535)
!5571 = !DILocation(line: 3125, column: 3, scope: !5535)
!5572 = !DILocation(line: 3126, column: 21, scope: !5535)
!5573 = !DILocation(line: 3126, column: 3, scope: !5535)
!5574 = !DILocation(line: 3127, column: 3, scope: !5535)
!5575 = !DILocation(line: 3127, column: 7, scope: !5535)
!5576 = !DILocation(line: 3127, column: 13, scope: !5535)
!5577 = !DILocation(line: 3131, column: 19, scope: !5535)
!5578 = !DILocation(line: 3131, column: 9, scope: !5535)
!5579 = !DILocation(line: 3132, column: 8, scope: !5580)
!5580 = distinct !DILexicalBlock(scope: !5535, file: !3, line: 3132, column: 7)
!5581 = !DILocation(line: 3133, column: 7, scope: !5580)
!5582 = !DILocation(line: 3133, column: 23, scope: !5580)
!5583 = !DILocation(line: 3133, column: 10, scope: !5580)
!5584 = !DILocation(line: 3133, column: 39, scope: !5580)
!5585 = !DILocation(line: 3132, column: 7, scope: !5535)
!5586 = !DILocalVariable(name: "ret_stmt", scope: !5587, file: !3, line: 3135, type: !2201)
!5587 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 3134, column: 5)
!5588 = !DILocation(line: 3135, column: 14, scope: !5587)
!5589 = !DILocation(line: 3135, column: 25, scope: !5587)
!5590 = !DILocation(line: 3137, column: 7, scope: !5587)
!5591 = !DILocation(line: 3138, column: 7, scope: !5587)
!5592 = !DILocation(line: 3140, column: 11, scope: !5593)
!5593 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 3140, column: 11)
!5594 = !DILocation(line: 3140, column: 15, scope: !5593)
!5595 = !DILocation(line: 3140, column: 26, scope: !5593)
!5596 = !DILocation(line: 3140, column: 23, scope: !5593)
!5597 = !DILocation(line: 3141, column: 4, scope: !5593)
!5598 = !DILocation(line: 3141, column: 30, scope: !5593)
!5599 = !DILocation(line: 3141, column: 8, scope: !5593)
!5600 = !DILocation(line: 3140, column: 11, scope: !5587)
!5601 = !DILocation(line: 3143, column: 4, scope: !5602)
!5602 = distinct !DILexicalBlock(scope: !5593, file: !3, line: 3142, column: 2)
!5603 = !DILocation(line: 3144, column: 22, scope: !5602)
!5604 = !DILocation(line: 3144, column: 4, scope: !5602)
!5605 = !DILocation(line: 3144, column: 27, scope: !5602)
!5606 = !DILocation(line: 3144, column: 33, scope: !5602)
!5607 = !DILocation(line: 3145, column: 2, scope: !5602)
!5608 = !DILocation(line: 3146, column: 5, scope: !5587)
!5609 = !DILocation(line: 3148, column: 20, scope: !5535)
!5610 = !DILocation(line: 3148, column: 9, scope: !5535)
!5611 = !DILocation(line: 3149, column: 8, scope: !5612)
!5612 = distinct !DILexicalBlock(scope: !5535, file: !3, line: 3149, column: 7)
!5613 = !DILocation(line: 3149, column: 7, scope: !5535)
!5614 = !DILocation(line: 3151, column: 14, scope: !5615)
!5615 = distinct !DILexicalBlock(scope: !5612, file: !3, line: 3150, column: 5)
!5616 = !DILocation(line: 3151, column: 12, scope: !5615)
!5617 = !DILocation(line: 3152, column: 24, scope: !5618)
!5618 = distinct !DILexicalBlock(scope: !5615, file: !3, line: 3152, column: 11)
!5619 = !DILocation(line: 3152, column: 11, scope: !5618)
!5620 = !DILocation(line: 3152, column: 30, scope: !5618)
!5621 = !DILocation(line: 3152, column: 11, scope: !5615)
!5622 = !DILocation(line: 3153, column: 7, scope: !5618)
!5623 = !DILocation(line: 3153, column: 2, scope: !5618)
!5624 = !DILocation(line: 3154, column: 5, scope: !5615)
!5625 = !DILocation(line: 3156, column: 31, scope: !5535)
!5626 = !DILocation(line: 3156, column: 47, scope: !5535)
!5627 = !DILocation(line: 3156, column: 9, scope: !5535)
!5628 = !DILocation(line: 3156, column: 7, scope: !5535)
!5629 = !DILocation(line: 3158, column: 7, scope: !5630)
!5630 = distinct !DILexicalBlock(scope: !5535, file: !3, line: 3158, column: 7)
!5631 = !DILocation(line: 3158, column: 12, scope: !5630)
!5632 = !DILocation(line: 3158, column: 15, scope: !5630)
!5633 = !DILocation(line: 3158, column: 7, scope: !5535)
!5634 = !DILocation(line: 3160, column: 14, scope: !5635)
!5635 = distinct !DILexicalBlock(scope: !5630, file: !3, line: 3159, column: 5)
!5636 = !DILocation(line: 3160, column: 12, scope: !5635)
!5637 = !DILocation(line: 3162, column: 11, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5635, file: !3, line: 3162, column: 11)
!5639 = !DILocation(line: 3162, column: 11, scope: !5635)
!5640 = !DILocation(line: 3164, column: 24, scope: !5641)
!5641 = distinct !DILexicalBlock(scope: !5638, file: !3, line: 3163, column: 2)
!5642 = !DILocation(line: 3164, column: 4, scope: !5641)
!5643 = !DILocation(line: 3165, column: 4, scope: !5641)
!5644 = !DILocation(line: 3166, column: 2, scope: !5641)
!5645 = !DILocation(line: 3168, column: 11, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5635, file: !3, line: 3168, column: 11)
!5647 = !DILocation(line: 3168, column: 11, scope: !5635)
!5648 = !DILocation(line: 3169, column: 21, scope: !5646)
!5649 = !DILocation(line: 3169, column: 20, scope: !5646)
!5650 = !DILocation(line: 3169, column: 14, scope: !5646)
!5651 = !DILocation(line: 3169, column: 2, scope: !5646)
!5652 = !DILocation(line: 3173, column: 22, scope: !5635)
!5653 = !DILocation(line: 3173, column: 7, scope: !5635)
!5654 = !DILocation(line: 3173, column: 20, scope: !5635)
!5655 = !DILocation(line: 3174, column: 11, scope: !5656)
!5656 = distinct !DILexicalBlock(scope: !5635, file: !3, line: 3174, column: 11)
!5657 = !DILocation(line: 3174, column: 11, scope: !5635)
!5658 = !DILocation(line: 3175, column: 17, scope: !5656)
!5659 = !DILocation(line: 3175, column: 2, scope: !5656)
!5660 = !DILocation(line: 3175, column: 15, scope: !5656)
!5661 = !DILocation(line: 3176, column: 54, scope: !5635)
!5662 = !DILocation(line: 3176, column: 14, scope: !5635)
!5663 = !DILocation(line: 3176, column: 12, scope: !5635)
!5664 = !DILocation(line: 3178, column: 39, scope: !5635)
!5665 = !DILocation(line: 3178, column: 45, scope: !5635)
!5666 = !DILocation(line: 3178, column: 7, scope: !5635)
!5667 = !DILocation(line: 3179, column: 5, scope: !5635)
!5668 = !DILocation(line: 3181, column: 27, scope: !5630)
!5669 = !DILocation(line: 3181, column: 12, scope: !5630)
!5670 = !DILocation(line: 3181, column: 25, scope: !5630)
!5671 = !DILocation(line: 3181, column: 10, scope: !5630)
!5672 = !DILocation(line: 3183, column: 29, scope: !5535)
!5673 = !DILocation(line: 3183, column: 3, scope: !5535)
!5674 = !DILocation(line: 3183, column: 27, scope: !5535)
!5675 = !DILocation(line: 3185, column: 3, scope: !5535)
!5676 = !DILocation(line: 3185, column: 11, scope: !5677)
!5677 = distinct !DILexicalBlock(scope: !5678, file: !3, line: 3185, column: 3)
!5678 = distinct !DILexicalBlock(scope: !5535, file: !3, line: 3185, column: 3)
!5679 = !DILocation(line: 3185, column: 10, scope: !5677)
!5680 = !DILocation(line: 3185, column: 3, scope: !5678)
!5681 = !DILocalVariable(name: "new_bb", scope: !5682, file: !3, line: 3187, type: !2748)
!5682 = distinct !DILexicalBlock(scope: !5677, file: !3, line: 3186, column: 5)
!5683 = !DILocation(line: 3187, column: 19, scope: !5682)
!5684 = !DILocation(line: 3189, column: 14, scope: !5682)
!5685 = !DILocation(line: 3189, column: 12, scope: !5682)
!5686 = !DILocation(line: 3215, column: 11, scope: !5687)
!5687 = distinct !DILexicalBlock(scope: !5682, file: !3, line: 3215, column: 11)
!5688 = !DILocation(line: 3216, column: 4, scope: !5687)
!5689 = !DILocation(line: 3216, column: 10, scope: !5687)
!5690 = !DILocation(line: 3216, column: 7, scope: !5687)
!5691 = !DILocation(line: 3217, column: 4, scope: !5687)
!5692 = !DILocation(line: 3217, column: 25, scope: !5687)
!5693 = !DILocation(line: 3217, column: 8, scope: !5687)
!5694 = !DILocation(line: 3215, column: 11, scope: !5682)
!5695 = !DILocalVariable(name: "iter", scope: !5696, file: !3, line: 3219, type: !5697)
!5696 = distinct !DILexicalBlock(scope: !5687, file: !3, line: 3218, column: 2)
!5697 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !2021, line: 140, baseType: !5698)
!5698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !2021, line: 131, size: 320, elements: !5699)
!5699 = !{!5700, !5701, !5702, !5704, !5706, !5707, !5708}
!5700 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !5698, file: !2021, line: 133, baseType: !2439, size: 8)
!5701 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !5698, file: !2021, line: 134, baseType: !2020, size: 32, offset: 32)
!5702 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !5698, file: !2021, line: 135, baseType: !5703, size: 64, offset: 64)
!5703 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !2021, line: 42, baseType: !2829)
!5704 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !5698, file: !2021, line: 136, baseType: !5705, size: 64, offset: 128)
!5705 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !2021, line: 50, baseType: !2836)
!5706 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !5698, file: !2021, line: 137, baseType: !2136, size: 32, offset: 192)
!5707 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !5698, file: !2021, line: 138, baseType: !2136, size: 32, offset: 224)
!5708 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !5698, file: !2021, line: 139, baseType: !2201, size: 64, offset: 256)
!5709 = !DILocation(line: 3219, column: 16, scope: !5696)
!5710 = !DILocalVariable(name: "op", scope: !5696, file: !3, line: 3220, type: !2326)
!5711 = !DILocation(line: 3220, column: 9, scope: !5696)
!5712 = !DILocalVariable(name: "def", scope: !5696, file: !3, line: 3221, type: !2201)
!5713 = !DILocation(line: 3221, column: 11, scope: !5696)
!5714 = !DILocalVariable(name: "sloc", scope: !5696, file: !3, line: 3223, type: !2160)
!5715 = !DILocation(line: 3223, column: 15, scope: !5696)
!5716 = !DILocation(line: 3223, column: 22, scope: !5696)
!5717 = !DILocalVariable(name: "sblock", scope: !5696, file: !3, line: 3224, type: !2326)
!5718 = !DILocation(line: 3224, column: 9, scope: !5696)
!5719 = !DILocation(line: 3224, column: 18, scope: !5696)
!5720 = !DILocation(line: 3228, column: 4, scope: !5721)
!5721 = distinct !DILexicalBlock(scope: !5696, file: !3, line: 3228, column: 4)
!5722 = !DILocation(line: 3228, column: 4, scope: !5723)
!5723 = distinct !DILexicalBlock(scope: !5721, file: !3, line: 3228, column: 4)
!5724 = !DILocation(line: 3229, column: 42, scope: !5725)
!5725 = distinct !DILexicalBlock(scope: !5723, file: !3, line: 3229, column: 10)
!5726 = !DILocation(line: 3229, column: 17, scope: !5725)
!5727 = !DILocation(line: 3229, column: 15, scope: !5725)
!5728 = !DILocation(line: 3229, column: 10, scope: !5723)
!5729 = !DILocalVariable(name: "imm_iter", scope: !5730, file: !3, line: 3231, type: !5731)
!5730 = distinct !DILexicalBlock(scope: !5725, file: !3, line: 3230, column: 8)
!5731 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !2529, line: 249, baseType: !5732)
!5732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !2529, line: 238, size: 448, elements: !5733)
!5733 = !{!5734, !5735, !5736, !5737}
!5734 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !5732, file: !2529, line: 241, baseType: !3552, size: 64)
!5735 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !5732, file: !2529, line: 243, baseType: !3552, size: 64, offset: 64)
!5736 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !5732, file: !2529, line: 245, baseType: !3553, size: 256, offset: 128)
!5737 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !5732, file: !2529, line: 248, baseType: !3552, size: 64, offset: 384)
!5738 = !DILocation(line: 3231, column: 20, scope: !5730)
!5739 = !DILocalVariable(name: "use_p", scope: !5730, file: !3, line: 3232, type: !3551)
!5740 = !DILocation(line: 3232, column: 17, scope: !5730)
!5741 = !DILocalVariable(name: "have_debug_uses", scope: !5730, file: !3, line: 3233, type: !2439)
!5742 = !DILocation(line: 3233, column: 8, scope: !5730)
!5743 = !DILocation(line: 3235, column: 3, scope: !5744)
!5744 = distinct !DILexicalBlock(scope: !5730, file: !3, line: 3235, column: 3)
!5745 = !DILocation(line: 3235, column: 3, scope: !5746)
!5746 = distinct !DILexicalBlock(scope: !5744, file: !3, line: 3235, column: 3)
!5747 = !DILocation(line: 3237, column: 32, scope: !5748)
!5748 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 3237, column: 11)
!5749 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 3236, column: 5)
!5750 = !DILocation(line: 3237, column: 11, scope: !5748)
!5751 = !DILocation(line: 3237, column: 11, scope: !5749)
!5752 = !DILocation(line: 3239, column: 20, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5748, file: !3, line: 3238, column: 9)
!5754 = !DILocation(line: 3240, column: 4, scope: !5753)
!5755 = !DILocation(line: 3242, column: 5, scope: !5749)
!5756 = distinct !{!5756, !5743, !5757}
!5757 = !DILocation(line: 3242, column: 5, scope: !5744)
!5758 = !DILocation(line: 3244, column: 7, scope: !5759)
!5759 = distinct !DILexicalBlock(scope: !5730, file: !3, line: 3244, column: 7)
!5760 = !DILocation(line: 3244, column: 7, scope: !5730)
!5761 = !DILocalVariable(name: "debugstmt", scope: !5762, file: !3, line: 3251, type: !2201)
!5762 = distinct !DILexicalBlock(scope: !5759, file: !3, line: 3245, column: 5)
!5763 = !DILocation(line: 3251, column: 14, scope: !5762)
!5764 = !DILocalVariable(name: "value", scope: !5762, file: !3, line: 3252, type: !2326)
!5765 = !DILocation(line: 3252, column: 12, scope: !5762)
!5766 = !DILocation(line: 3252, column: 47, scope: !5762)
!5767 = !DILocation(line: 3252, column: 20, scope: !5762)
!5768 = !DILocalVariable(name: "vexpr", scope: !5762, file: !3, line: 3253, type: !2326)
!5769 = !DILocation(line: 3253, column: 12, scope: !5762)
!5770 = !DILocation(line: 3253, column: 20, scope: !5762)
!5771 = !DILocalVariable(name: "val", scope: !5762, file: !3, line: 3254, type: !2207)
!5772 = !DILocation(line: 3254, column: 11, scope: !5762)
!5773 = !DILocalVariable(name: "mode", scope: !5762, file: !3, line: 3255, type: !5)
!5774 = !DILocation(line: 3255, column: 25, scope: !5762)
!5775 = !DILocation(line: 3257, column: 55, scope: !5762)
!5776 = !DILocation(line: 3257, column: 38, scope: !5762)
!5777 = !DILocation(line: 3257, column: 7, scope: !5762)
!5778 = !DILocation(line: 3258, column: 42, scope: !5762)
!5779 = !DILocation(line: 3258, column: 28, scope: !5762)
!5780 = !DILocation(line: 3258, column: 7, scope: !5762)
!5781 = !DILocation(line: 3260, column: 7, scope: !5762)
!5782 = !DILocation(line: 3260, column: 31, scope: !5762)
!5783 = !DILocation(line: 3261, column: 27, scope: !5762)
!5784 = !DILocation(line: 3261, column: 7, scope: !5762)
!5785 = !DILocation(line: 3261, column: 25, scope: !5762)
!5786 = !DILocation(line: 3262, column: 11, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5762, file: !3, line: 3262, column: 11)
!5788 = !DILocation(line: 3262, column: 11, scope: !5762)
!5789 = !DILocation(line: 3263, column: 16, scope: !5787)
!5790 = !DILocation(line: 3263, column: 14, scope: !5787)
!5791 = !DILocation(line: 3263, column: 9, scope: !5787)
!5792 = !DILocation(line: 3265, column: 16, scope: !5787)
!5793 = !DILocation(line: 3265, column: 14, scope: !5787)
!5794 = !DILocation(line: 3266, column: 27, scope: !5762)
!5795 = !DILocation(line: 3266, column: 7, scope: !5762)
!5796 = !DILocation(line: 3266, column: 25, scope: !5762)
!5797 = !DILocation(line: 3268, column: 13, scope: !5762)
!5798 = !DILocation(line: 3268, column: 11, scope: !5762)
!5799 = !DILocation(line: 3271, column: 30, scope: !5762)
!5800 = !DILocation(line: 3271, column: 13, scope: !5762)
!5801 = !DILocation(line: 3271, column: 11, scope: !5762)
!5802 = !DILocation(line: 3273, column: 7, scope: !5803)
!5803 = distinct !DILexicalBlock(scope: !5762, file: !3, line: 3273, column: 7)
!5804 = !DILocation(line: 3273, column: 7, scope: !5805)
!5805 = distinct !DILexicalBlock(scope: !5803, file: !3, line: 3273, column: 7)
!5806 = !DILocation(line: 3275, column: 30, scope: !5807)
!5807 = distinct !DILexicalBlock(scope: !5808, file: !3, line: 3275, column: 8)
!5808 = distinct !DILexicalBlock(scope: !5805, file: !3, line: 3274, column: 9)
!5809 = !DILocation(line: 3275, column: 9, scope: !5807)
!5810 = !DILocation(line: 3275, column: 8, scope: !5808)
!5811 = !DILocation(line: 3276, column: 6, scope: !5807)
!5812 = !DILocation(line: 3278, column: 4, scope: !5813)
!5813 = distinct !DILexicalBlock(scope: !5808, file: !3, line: 3278, column: 4)
!5814 = !DILocation(line: 3278, column: 4, scope: !5815)
!5815 = distinct !DILexicalBlock(scope: !5813, file: !3, line: 3278, column: 4)
!5816 = !DILocation(line: 3279, column: 6, scope: !5815)
!5817 = distinct !{!5817, !5812, !5818}
!5818 = !DILocation(line: 3279, column: 6, scope: !5813)
!5819 = !DILocation(line: 3281, column: 17, scope: !5808)
!5820 = !DILocation(line: 3281, column: 4, scope: !5808)
!5821 = !DILocation(line: 3282, column: 9, scope: !5808)
!5822 = distinct !{!5822, !5802, !5823}
!5823 = !DILocation(line: 3282, column: 9, scope: !5803)
!5824 = !DILocation(line: 3283, column: 5, scope: !5762)
!5825 = !DILocation(line: 3284, column: 8, scope: !5730)
!5826 = !DILocation(line: 3229, column: 45, scope: !5725)
!5827 = distinct !{!5827, !5720, !5828}
!5828 = !DILocation(line: 3284, column: 8, scope: !5721)
!5829 = !DILocation(line: 3285, column: 35, scope: !5696)
!5830 = !DILocation(line: 3285, column: 4, scope: !5696)
!5831 = !DILocation(line: 3286, column: 25, scope: !5696)
!5832 = !DILocation(line: 3286, column: 4, scope: !5696)
!5833 = !DILocation(line: 3287, column: 2, scope: !5696)
!5834 = !DILocation(line: 3289, column: 41, scope: !5682)
!5835 = !DILocation(line: 3289, column: 39, scope: !5682)
!5836 = !DILocation(line: 3293, column: 24, scope: !5837)
!5837 = distinct !DILexicalBlock(scope: !5682, file: !3, line: 3293, column: 11)
!5838 = !DILocation(line: 3293, column: 11, scope: !5837)
!5839 = !DILocation(line: 3293, column: 30, scope: !5837)
!5840 = !DILocation(line: 3293, column: 11, scope: !5682)
!5841 = !DILocation(line: 3295, column: 33, scope: !5842)
!5842 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 3294, column: 2)
!5843 = !DILocation(line: 3295, column: 37, scope: !5842)
!5844 = !DILocation(line: 3295, column: 13, scope: !5842)
!5845 = !DILocation(line: 3295, column: 11, scope: !5842)
!5846 = !DILocation(line: 3296, column: 8, scope: !5847)
!5847 = distinct !DILexicalBlock(scope: !5842, file: !3, line: 3296, column: 8)
!5848 = !DILocation(line: 3296, column: 8, scope: !5842)
!5849 = !DILocation(line: 3297, column: 13, scope: !5847)
!5850 = !DILocation(line: 3297, column: 6, scope: !5847)
!5851 = !DILocation(line: 3298, column: 2, scope: !5842)
!5852 = !DILocation(line: 3299, column: 37, scope: !5853)
!5853 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 3299, column: 16)
!5854 = !DILocation(line: 3299, column: 16, scope: !5853)
!5855 = !DILocation(line: 3299, column: 16, scope: !5837)
!5856 = !DILocalVariable(name: "sloc", scope: !5857, file: !3, line: 3301, type: !2160)
!5857 = distinct !DILexicalBlock(scope: !5853, file: !3, line: 3300, column: 2)
!5858 = !DILocation(line: 3301, column: 15, scope: !5857)
!5859 = !DILocation(line: 3301, column: 22, scope: !5857)
!5860 = !DILocalVariable(name: "sblock", scope: !5857, file: !3, line: 3302, type: !2326)
!5861 = !DILocation(line: 3302, column: 9, scope: !5857)
!5862 = !DILocation(line: 3302, column: 18, scope: !5857)
!5863 = !DILocalVariable(name: "nsi", scope: !5857, file: !3, line: 3303, type: !5076)
!5864 = !DILocation(line: 3303, column: 25, scope: !5857)
!5865 = !DILocation(line: 3303, column: 31, scope: !5857)
!5866 = !DILocation(line: 3305, column: 4, scope: !5857)
!5867 = !DILocalVariable(name: "var", scope: !5868, file: !3, line: 3307, type: !2326)
!5868 = distinct !DILexicalBlock(scope: !5869, file: !3, line: 3306, column: 6)
!5869 = distinct !DILexicalBlock(scope: !5870, file: !3, line: 3305, column: 4)
!5870 = distinct !DILexicalBlock(scope: !5857, file: !3, line: 3305, column: 4)
!5871 = !DILocation(line: 3307, column: 13, scope: !5868)
!5872 = !DILocation(line: 3307, column: 46, scope: !5868)
!5873 = !DILocation(line: 3307, column: 19, scope: !5868)
!5874 = !DILocalVariable(name: "value", scope: !5868, file: !3, line: 3308, type: !2326)
!5875 = !DILocation(line: 3308, column: 13, scope: !5868)
!5876 = !DILocalVariable(name: "val", scope: !5868, file: !3, line: 3309, type: !2207)
!5877 = !DILocation(line: 3309, column: 12, scope: !5868)
!5878 = !DILocalVariable(name: "mode", scope: !5868, file: !3, line: 3310, type: !5)
!5879 = !DILocation(line: 3310, column: 26, scope: !5868)
!5880 = !DILocation(line: 3312, column: 43, scope: !5881)
!5881 = distinct !DILexicalBlock(scope: !5868, file: !3, line: 3312, column: 12)
!5882 = !DILocation(line: 3312, column: 12, scope: !5881)
!5883 = !DILocation(line: 3312, column: 12, scope: !5868)
!5884 = !DILocation(line: 3313, column: 40, scope: !5881)
!5885 = !DILocation(line: 3313, column: 11, scope: !5881)
!5886 = !DILocation(line: 3313, column: 9, scope: !5881)
!5887 = !DILocation(line: 3313, column: 3, scope: !5881)
!5888 = !DILocation(line: 3315, column: 9, scope: !5881)
!5889 = !DILocation(line: 3317, column: 15, scope: !5868)
!5890 = !DILocation(line: 3317, column: 13, scope: !5868)
!5891 = !DILocation(line: 3319, column: 56, scope: !5868)
!5892 = !DILocation(line: 3319, column: 39, scope: !5868)
!5893 = !DILocation(line: 3319, column: 8, scope: !5868)
!5894 = !DILocation(line: 3320, column: 43, scope: !5868)
!5895 = !DILocation(line: 3320, column: 29, scope: !5868)
!5896 = !DILocation(line: 3320, column: 8, scope: !5868)
!5897 = !DILocation(line: 3322, column: 12, scope: !5898)
!5898 = distinct !DILexicalBlock(scope: !5868, file: !3, line: 3322, column: 12)
!5899 = !DILocation(line: 3322, column: 12, scope: !5868)
!5900 = !DILocation(line: 3323, column: 10, scope: !5898)
!5901 = !DILocation(line: 3323, column: 8, scope: !5898)
!5902 = !DILocation(line: 3323, column: 3, scope: !5898)
!5903 = !DILocation(line: 3325, column: 10, scope: !5898)
!5904 = !DILocation(line: 3325, column: 8, scope: !5898)
!5905 = !DILocation(line: 3327, column: 14, scope: !5868)
!5906 = !DILocation(line: 3327, column: 12, scope: !5868)
!5907 = !DILocation(line: 3330, column: 31, scope: !5868)
!5908 = !DILocation(line: 3330, column: 14, scope: !5868)
!5909 = !DILocation(line: 3330, column: 12, scope: !5868)
!5910 = !DILocation(line: 3332, column: 12, scope: !5911)
!5911 = distinct !DILexicalBlock(scope: !5868, file: !3, line: 3332, column: 12)
!5912 = !DILocation(line: 3332, column: 22, scope: !5911)
!5913 = !DILocation(line: 3332, column: 26, scope: !5911)
!5914 = !DILocation(line: 3332, column: 37, scope: !5911)
!5915 = !DILocation(line: 3332, column: 12, scope: !5868)
!5916 = !DILocation(line: 3336, column: 35, scope: !5917)
!5917 = distinct !DILexicalBlock(scope: !5911, file: !3, line: 3333, column: 3)
!5918 = !DILocation(line: 3336, column: 5, scope: !5917)
!5919 = !DILocation(line: 3336, column: 33, scope: !5917)
!5920 = !DILocation(line: 3337, column: 37, scope: !5917)
!5921 = !DILocation(line: 3337, column: 43, scope: !5917)
!5922 = !DILocation(line: 3337, column: 5, scope: !5917)
!5923 = !DILocation(line: 3338, column: 40, scope: !5917)
!5924 = !DILocation(line: 3338, column: 35, scope: !5917)
!5925 = !DILocation(line: 3338, column: 5, scope: !5917)
!5926 = !DILocation(line: 3338, column: 33, scope: !5917)
!5927 = !DILocation(line: 3339, column: 3, scope: !5917)
!5928 = !DILocation(line: 3346, column: 29, scope: !5868)
!5929 = !DILocation(line: 3346, column: 8, scope: !5868)
!5930 = !DILocation(line: 3348, column: 14, scope: !5868)
!5931 = !DILocation(line: 3349, column: 8, scope: !5868)
!5932 = !DILocation(line: 3350, column: 12, scope: !5933)
!5933 = distinct !DILexicalBlock(scope: !5868, file: !3, line: 3350, column: 12)
!5934 = !DILocation(line: 3350, column: 12, scope: !5868)
!5935 = !DILocation(line: 3351, column: 3, scope: !5933)
!5936 = !DILocation(line: 3352, column: 15, scope: !5868)
!5937 = !DILocation(line: 3352, column: 13, scope: !5868)
!5938 = !DILocation(line: 3353, column: 34, scope: !5939)
!5939 = distinct !DILexicalBlock(scope: !5868, file: !3, line: 3353, column: 12)
!5940 = !DILocation(line: 3353, column: 13, scope: !5939)
!5941 = !DILocation(line: 3353, column: 12, scope: !5868)
!5942 = !DILocation(line: 3354, column: 3, scope: !5939)
!5943 = !DILocation(line: 3305, column: 4, scope: !5869)
!5944 = distinct !{!5944, !5945, !5946}
!5945 = !DILocation(line: 3305, column: 4, scope: !5870)
!5946 = !DILocation(line: 3355, column: 6, scope: !5870)
!5947 = !DILocation(line: 3357, column: 35, scope: !5857)
!5948 = !DILocation(line: 3357, column: 4, scope: !5857)
!5949 = !DILocation(line: 3358, column: 25, scope: !5857)
!5950 = !DILocation(line: 3358, column: 4, scope: !5857)
!5951 = !DILocation(line: 3359, column: 2, scope: !5857)
!5952 = !DILocation(line: 3362, column: 24, scope: !5953)
!5953 = distinct !DILexicalBlock(scope: !5954, file: !3, line: 3362, column: 8)
!5954 = distinct !DILexicalBlock(scope: !5853, file: !3, line: 3361, column: 2)
!5955 = !DILocation(line: 3362, column: 8, scope: !5953)
!5956 = !DILocation(line: 3362, column: 30, scope: !5953)
!5957 = !DILocation(line: 3362, column: 53, scope: !5953)
!5958 = !DILocation(line: 3362, column: 33, scope: !5953)
!5959 = !DILocation(line: 3362, column: 8, scope: !5954)
!5960 = !DILocalVariable(name: "can_fallthru", scope: !5961, file: !3, line: 3364, type: !2439)
!5961 = distinct !DILexicalBlock(scope: !5953, file: !3, line: 3363, column: 6)
!5962 = !DILocation(line: 3364, column: 13, scope: !5961)
!5963 = !DILocation(line: 3365, column: 41, scope: !5961)
!5964 = !DILocation(line: 3365, column: 45, scope: !5961)
!5965 = !DILocation(line: 3365, column: 17, scope: !5961)
!5966 = !DILocation(line: 3365, column: 15, scope: !5961)
!5967 = !DILocation(line: 3366, column: 12, scope: !5968)
!5968 = distinct !DILexicalBlock(scope: !5961, file: !3, line: 3366, column: 12)
!5969 = !DILocation(line: 3366, column: 12, scope: !5961)
!5970 = !DILocation(line: 3368, column: 9, scope: !5971)
!5971 = distinct !DILexicalBlock(scope: !5972, file: !3, line: 3368, column: 9)
!5972 = distinct !DILexicalBlock(scope: !5968, file: !3, line: 3367, column: 3)
!5973 = !DILocation(line: 3368, column: 9, scope: !5972)
!5974 = !DILocation(line: 3369, column: 12, scope: !5971)
!5975 = !DILocation(line: 3369, column: 10, scope: !5971)
!5976 = !DILocation(line: 3369, column: 7, scope: !5971)
!5977 = !DILocation(line: 3371, column: 14, scope: !5971)
!5978 = !DILocation(line: 3371, column: 7, scope: !5971)
!5979 = !DILocation(line: 3372, column: 3, scope: !5972)
!5980 = !DILocation(line: 3373, column: 6, scope: !5961)
!5981 = !DILocalVariable(name: "def_p", scope: !5982, file: !3, line: 3376, type: !3554)
!5982 = distinct !DILexicalBlock(scope: !5953, file: !3, line: 3375, column: 6)
!5983 = !DILocation(line: 3376, column: 22, scope: !5982)
!5984 = !DILocation(line: 3377, column: 16, scope: !5982)
!5985 = !DILocation(line: 3377, column: 14, scope: !5982)
!5986 = !DILocation(line: 3379, column: 12, scope: !5987)
!5987 = distinct !DILexicalBlock(scope: !5982, file: !3, line: 3379, column: 12)
!5988 = !DILocation(line: 3379, column: 18, scope: !5987)
!5989 = !DILocation(line: 3379, column: 12, scope: !5982)
!5990 = !DILocation(line: 3383, column: 12, scope: !5991)
!5991 = distinct !DILexicalBlock(scope: !5992, file: !3, line: 3383, column: 9)
!5992 = distinct !DILexicalBlock(scope: !5987, file: !3, line: 3380, column: 3)
!5993 = !DILocation(line: 3383, column: 9, scope: !5991)
!5994 = !DILocation(line: 3384, column: 9, scope: !5991)
!5995 = !DILocation(line: 3384, column: 29, scope: !5991)
!5996 = !DILocation(line: 3385, column: 12, scope: !5991)
!5997 = !DILocation(line: 3384, column: 12, scope: !5991)
!5998 = !DILocation(line: 3383, column: 9, scope: !5992)
!5999 = !DILocation(line: 3386, column: 7, scope: !5991)
!6000 = !DILocation(line: 3387, column: 3, scope: !5992)
!6001 = !DILocation(line: 3388, column: 35, scope: !5982)
!6002 = !DILocation(line: 3388, column: 15, scope: !5982)
!6003 = !DILocation(line: 3388, column: 13, scope: !5982)
!6004 = !DILocation(line: 3389, column: 40, scope: !5982)
!6005 = !DILocation(line: 3389, column: 46, scope: !5982)
!6006 = !DILocation(line: 3389, column: 8, scope: !5982)
!6007 = !DILocation(line: 3392, column: 5, scope: !5682)
!6008 = !DILocation(line: 3185, column: 28, scope: !5677)
!6009 = !DILocation(line: 3185, column: 3, scope: !5677)
!6010 = distinct !{!6010, !5680, !6011}
!6011 = !DILocation(line: 3392, column: 5, scope: !5678)
!6012 = !DILocation(line: 3394, column: 35, scope: !5535)
!6013 = !DILocation(line: 3397, column: 3, scope: !6014)
!6014 = distinct !DILexicalBlock(scope: !5535, file: !3, line: 3397, column: 3)
!6015 = !DILocation(line: 3397, column: 3, scope: !6016)
!6016 = distinct !DILexicalBlock(scope: !6014, file: !3, line: 3397, column: 3)
!6017 = !DILocation(line: 3399, column: 11, scope: !6018)
!6018 = distinct !DILexicalBlock(scope: !6019, file: !3, line: 3399, column: 11)
!6019 = distinct !DILexicalBlock(scope: !6016, file: !3, line: 3398, column: 5)
!6020 = !DILocation(line: 3399, column: 14, scope: !6018)
!6021 = !DILocation(line: 3399, column: 25, scope: !6018)
!6022 = !DILocation(line: 3399, column: 28, scope: !6018)
!6023 = !DILocation(line: 3399, column: 31, scope: !6018)
!6024 = !DILocation(line: 3399, column: 11, scope: !6019)
!6025 = !DILocation(line: 3401, column: 35, scope: !6026)
!6026 = distinct !DILexicalBlock(scope: !6018, file: !3, line: 3400, column: 2)
!6027 = !DILocation(line: 3401, column: 38, scope: !6026)
!6028 = !DILocation(line: 3401, column: 4, scope: !6026)
!6029 = !DILocation(line: 3402, column: 25, scope: !6026)
!6030 = !DILocation(line: 3402, column: 28, scope: !6026)
!6031 = !DILocation(line: 3402, column: 4, scope: !6026)
!6032 = !DILocation(line: 3403, column: 20, scope: !6026)
!6033 = !DILocation(line: 3403, column: 4, scope: !6026)
!6034 = !DILocation(line: 3403, column: 7, scope: !6026)
!6035 = !DILocation(line: 3403, column: 18, scope: !6026)
!6036 = !DILocation(line: 3404, column: 2, scope: !6026)
!6037 = !DILocation(line: 3405, column: 7, scope: !6019)
!6038 = !DILocation(line: 3405, column: 10, scope: !6019)
!6039 = !DILocation(line: 3405, column: 21, scope: !6019)
!6040 = !DILocation(line: 3406, column: 12, scope: !6041)
!6041 = distinct !DILexicalBlock(scope: !6019, file: !3, line: 3406, column: 11)
!6042 = !DILocation(line: 3406, column: 15, scope: !6041)
!6043 = !DILocation(line: 3406, column: 21, scope: !6041)
!6044 = !DILocation(line: 3406, column: 38, scope: !6041)
!6045 = !DILocation(line: 3406, column: 41, scope: !6041)
!6046 = !DILocation(line: 3406, column: 44, scope: !6041)
!6047 = !DILocation(line: 3406, column: 52, scope: !6041)
!6048 = !DILocation(line: 3406, column: 56, scope: !6041)
!6049 = !DILocation(line: 3406, column: 49, scope: !6041)
!6050 = !DILocation(line: 3406, column: 11, scope: !6019)
!6051 = !DILocation(line: 3408, column: 33, scope: !6052)
!6052 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 3407, column: 2)
!6053 = !DILocation(line: 3408, column: 36, scope: !6052)
!6054 = !DILocation(line: 3408, column: 15, scope: !6052)
!6055 = !DILocation(line: 3408, column: 4, scope: !6052)
!6056 = !DILocation(line: 3409, column: 4, scope: !6052)
!6057 = !DILocation(line: 3409, column: 7, scope: !6052)
!6058 = !DILocation(line: 3409, column: 13, scope: !6052)
!6059 = !DILocation(line: 3410, column: 2, scope: !6052)
!6060 = !DILocation(line: 3411, column: 5, scope: !6019)
!6061 = distinct !{!6061, !6013, !6062}
!6062 = !DILocation(line: 3411, column: 5, scope: !6014)
!6063 = !DILocation(line: 3416, column: 22, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !5535, file: !3, line: 3416, column: 7)
!6065 = !DILocation(line: 3416, column: 7, scope: !6064)
!6066 = !DILocation(line: 3417, column: 7, scope: !6064)
!6067 = !DILocation(line: 3417, column: 29, scope: !6064)
!6068 = !DILocation(line: 3417, column: 11, scope: !6064)
!6069 = !DILocation(line: 3417, column: 34, scope: !6064)
!6070 = !DILocation(line: 3417, column: 40, scope: !6064)
!6071 = !DILocation(line: 3418, column: 7, scope: !6064)
!6072 = !DILocation(line: 3418, column: 18, scope: !6064)
!6073 = !DILocation(line: 3418, column: 16, scope: !6064)
!6074 = !DILocation(line: 3419, column: 7, scope: !6064)
!6075 = !DILocation(line: 3419, column: 10, scope: !6064)
!6076 = !DILocation(line: 3416, column: 7, scope: !5535)
!6077 = !DILocalVariable(name: "dummy", scope: !6078, file: !3, line: 3421, type: !2207)
!6078 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 3420, column: 5)
!6079 = !DILocation(line: 3421, column: 11, scope: !6078)
!6080 = !DILocation(line: 3421, column: 19, scope: !6078)
!6081 = !DILocation(line: 3422, column: 45, scope: !6078)
!6082 = !DILocation(line: 3422, column: 52, scope: !6078)
!6083 = !DILocation(line: 3422, column: 30, scope: !6078)
!6084 = !DILocation(line: 3422, column: 60, scope: !6078)
!6085 = !DILocation(line: 3422, column: 7, scope: !6078)
!6086 = !DILocation(line: 3423, column: 5, scope: !6078)
!6087 = !DILocation(line: 3425, column: 3, scope: !5535)
!6088 = !DILocation(line: 3429, column: 10, scope: !5535)
!6089 = !DILocation(line: 3429, column: 8, scope: !5535)
!6090 = !DILocation(line: 3430, column: 7, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !5535, file: !3, line: 3430, column: 7)
!6092 = !DILocation(line: 3430, column: 7, scope: !5535)
!6093 = !DILocation(line: 3431, column: 12, scope: !6091)
!6094 = !DILocation(line: 3431, column: 10, scope: !6091)
!6095 = !DILocation(line: 3431, column: 5, scope: !6091)
!6096 = !DILocation(line: 3432, column: 7, scope: !6097)
!6097 = distinct !DILexicalBlock(scope: !5535, file: !3, line: 3432, column: 7)
!6098 = !DILocation(line: 3432, column: 7, scope: !5535)
!6099 = !DILocation(line: 3433, column: 12, scope: !6097)
!6100 = !DILocation(line: 3433, column: 10, scope: !6097)
!6101 = !DILocation(line: 3433, column: 5, scope: !6097)
!6102 = !DILocation(line: 3434, column: 17, scope: !5535)
!6103 = !DILocation(line: 3434, column: 3, scope: !5535)
!6104 = !DILocation(line: 3434, column: 15, scope: !5535)
!6105 = !DILocation(line: 3436, column: 23, scope: !5535)
!6106 = !DILocation(line: 3436, column: 3, scope: !5535)
!6107 = !DILocation(line: 3438, column: 10, scope: !5535)
!6108 = !DILocation(line: 3438, column: 3, scope: !5535)
!6109 = !DILocation(line: 3439, column: 1, scope: !5535)
!6110 = distinct !DISubprogram(name: "expand_debug_locations", scope: !3, file: !3, line: 3056, type: !3913, scopeLine: 3057, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6111 = !DILocalVariable(name: "insn", scope: !6110, file: !3, line: 3058, type: !2207)
!6112 = !DILocation(line: 3058, column: 7, scope: !6110)
!6113 = !DILocalVariable(name: "last", scope: !6110, file: !3, line: 3059, type: !2207)
!6114 = !DILocation(line: 3059, column: 7, scope: !6110)
!6115 = !DILocation(line: 3059, column: 14, scope: !6110)
!6116 = !DILocalVariable(name: "save_strict_alias", scope: !6110, file: !3, line: 3060, type: !2136)
!6117 = !DILocation(line: 3060, column: 7, scope: !6110)
!6118 = !DILocation(line: 3060, column: 27, scope: !6110)
!6119 = !DILocation(line: 3065, column: 24, scope: !6110)
!6120 = !DILocation(line: 3067, column: 15, scope: !6121)
!6121 = distinct !DILexicalBlock(scope: !6110, file: !3, line: 3067, column: 3)
!6122 = !DILocation(line: 3067, column: 13, scope: !6121)
!6123 = !DILocation(line: 3067, column: 8, scope: !6121)
!6124 = !DILocation(line: 3067, column: 29, scope: !6125)
!6125 = distinct !DILexicalBlock(scope: !6121, file: !3, line: 3067, column: 3)
!6126 = !DILocation(line: 3067, column: 3, scope: !6121)
!6127 = !DILocation(line: 3068, column: 9, scope: !6128)
!6128 = distinct !DILexicalBlock(scope: !6125, file: !3, line: 3068, column: 9)
!6129 = !DILocation(line: 3068, column: 9, scope: !6125)
!6130 = !DILocalVariable(name: "value", scope: !6131, file: !3, line: 3070, type: !2326)
!6131 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 3069, column: 7)
!6132 = !DILocation(line: 3070, column: 7, scope: !6131)
!6133 = !DILocation(line: 3070, column: 21, scope: !6131)
!6134 = !DILocation(line: 3070, column: 15, scope: !6131)
!6135 = !DILocalVariable(name: "val", scope: !6131, file: !3, line: 3071, type: !2207)
!6136 = !DILocation(line: 3071, column: 6, scope: !6131)
!6137 = !DILocalVariable(name: "mode", scope: !6131, file: !3, line: 3072, type: !5)
!6138 = !DILocation(line: 3072, column: 20, scope: !6131)
!6139 = !DILocation(line: 3074, column: 6, scope: !6140)
!6140 = distinct !DILexicalBlock(scope: !6131, file: !3, line: 3074, column: 6)
!6141 = !DILocation(line: 3074, column: 12, scope: !6140)
!6142 = !DILocation(line: 3074, column: 6, scope: !6131)
!6143 = !DILocation(line: 3075, column: 8, scope: !6140)
!6144 = !DILocation(line: 3075, column: 4, scope: !6140)
!6145 = !DILocation(line: 3078, column: 31, scope: !6146)
!6146 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 3077, column: 4)
!6147 = !DILocation(line: 3078, column: 12, scope: !6146)
!6148 = !DILocation(line: 3078, column: 10, scope: !6146)
!6149 = !DILocation(line: 3079, column: 6, scope: !6146)
!6150 = !DILocation(line: 3082, column: 7, scope: !6151)
!6151 = distinct !DILexicalBlock(scope: !6131, file: !3, line: 3082, column: 6)
!6152 = !DILocation(line: 3082, column: 6, scope: !6131)
!6153 = !DILocation(line: 3083, column: 10, scope: !6151)
!6154 = !DILocation(line: 3083, column: 8, scope: !6151)
!6155 = !DILocation(line: 3083, column: 4, scope: !6151)
!6156 = !DILocation(line: 3086, column: 13, scope: !6157)
!6157 = distinct !DILexicalBlock(scope: !6151, file: !3, line: 3085, column: 4)
!6158 = !DILocation(line: 3086, column: 11, scope: !6157)
!6159 = !DILocation(line: 3088, column: 6, scope: !6157)
!6160 = !DILocation(line: 3096, column: 33, scope: !6131)
!6161 = !DILocation(line: 3096, column: 2, scope: !6131)
!6162 = !DILocation(line: 3096, column: 31, scope: !6131)
!6163 = !DILocation(line: 3097, column: 7, scope: !6131)
!6164 = !DILocation(line: 3067, column: 42, scope: !6125)
!6165 = !DILocation(line: 3067, column: 40, scope: !6125)
!6166 = !DILocation(line: 3067, column: 3, scope: !6125)
!6167 = distinct !{!6167, !6126, !6168}
!6168 = !DILocation(line: 3097, column: 7, scope: !6121)
!6169 = !DILocation(line: 3099, column: 26, scope: !6110)
!6170 = !DILocation(line: 3099, column: 24, scope: !6110)
!6171 = !DILocation(line: 3100, column: 1, scope: !6110)
!6172 = distinct !DISubprogram(name: "construct_exit_block", scope: !3, file: !3, line: 3509, type: !3913, scopeLine: 3510, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6173 = !DILocalVariable(name: "head", scope: !6172, file: !3, line: 3511, type: !2207)
!6174 = !DILocation(line: 3511, column: 7, scope: !6172)
!6175 = !DILocation(line: 3511, column: 14, scope: !6172)
!6176 = !DILocalVariable(name: "end", scope: !6172, file: !3, line: 3512, type: !2207)
!6177 = !DILocation(line: 3512, column: 7, scope: !6172)
!6178 = !DILocalVariable(name: "exit_block", scope: !6172, file: !3, line: 3513, type: !2748)
!6179 = !DILocation(line: 3513, column: 15, scope: !6172)
!6180 = !DILocalVariable(name: "e", scope: !6172, file: !3, line: 3514, type: !2180)
!6181 = !DILocation(line: 3514, column: 8, scope: !6172)
!6182 = !DILocalVariable(name: "e2", scope: !6172, file: !3, line: 3514, type: !2180)
!6183 = !DILocation(line: 3514, column: 11, scope: !6172)
!6184 = !DILocalVariable(name: "ix", scope: !6172, file: !3, line: 3515, type: !7)
!6185 = !DILocation(line: 3515, column: 12, scope: !6172)
!6186 = !DILocalVariable(name: "ei", scope: !6172, file: !3, line: 3516, type: !4235)
!6187 = !DILocation(line: 3516, column: 17, scope: !6172)
!6188 = !DILocalVariable(name: "orig_end", scope: !6172, file: !3, line: 3517, type: !2207)
!6189 = !DILocation(line: 3517, column: 7, scope: !6172)
!6190 = !DILocation(line: 3517, column: 18, scope: !6172)
!6191 = !DILocation(line: 3519, column: 23, scope: !6172)
!6192 = !DILocation(line: 3519, column: 3, scope: !6172)
!6193 = !DILocation(line: 3523, column: 7, scope: !6194)
!6194 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 3523, column: 7)
!6195 = !DILocation(line: 3523, column: 13, scope: !6194)
!6196 = !DILocation(line: 3523, column: 32, scope: !6194)
!6197 = !DILocation(line: 3523, column: 7, scope: !6172)
!6198 = !DILocation(line: 3524, column: 22, scope: !6194)
!6199 = !DILocation(line: 3524, column: 28, scope: !6194)
!6200 = !DILocation(line: 3524, column: 20, scope: !6194)
!6201 = !DILocation(line: 3524, column: 5, scope: !6194)
!6202 = !DILocation(line: 3527, column: 24, scope: !6172)
!6203 = !DILocation(line: 3527, column: 3, scope: !6172)
!6204 = !DILocation(line: 3530, column: 3, scope: !6172)
!6205 = !DILocation(line: 3532, column: 9, scope: !6172)
!6206 = !DILocation(line: 3532, column: 7, scope: !6172)
!6207 = !DILocation(line: 3533, column: 7, scope: !6208)
!6208 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 3533, column: 7)
!6209 = !DILocation(line: 3533, column: 15, scope: !6208)
!6210 = !DILocation(line: 3533, column: 12, scope: !6208)
!6211 = !DILocation(line: 3533, column: 7, scope: !6172)
!6212 = !DILocation(line: 3534, column: 5, scope: !6208)
!6213 = !DILocation(line: 3537, column: 38, scope: !6172)
!6214 = !DILocation(line: 3537, column: 3, scope: !6172)
!6215 = !DILocation(line: 3537, column: 36, scope: !6172)
!6216 = !DILocation(line: 3538, column: 3, scope: !6172)
!6217 = !DILocation(line: 3538, column: 10, scope: !6172)
!6218 = !DILocation(line: 3538, column: 27, scope: !6172)
!6219 = !DILocation(line: 3538, column: 30, scope: !6172)
!6220 = !DILocation(line: 0, scope: !6172)
!6221 = !DILocation(line: 3539, column: 12, scope: !6172)
!6222 = !DILocation(line: 3539, column: 10, scope: !6172)
!6223 = distinct !{!6223, !6216, !6221}
!6224 = !DILocation(line: 3540, column: 36, scope: !6172)
!6225 = !DILocation(line: 3540, column: 54, scope: !6172)
!6226 = !DILocation(line: 3541, column: 8, scope: !6172)
!6227 = !DILocation(line: 3541, column: 24, scope: !6172)
!6228 = !DILocation(line: 3540, column: 16, scope: !6172)
!6229 = !DILocation(line: 3540, column: 14, scope: !6172)
!6230 = !DILocation(line: 3542, column: 27, scope: !6172)
!6231 = !DILocation(line: 3542, column: 43, scope: !6172)
!6232 = !DILocation(line: 3542, column: 3, scope: !6172)
!6233 = !DILocation(line: 3542, column: 15, scope: !6172)
!6234 = !DILocation(line: 3542, column: 25, scope: !6172)
!6235 = !DILocation(line: 3543, column: 23, scope: !6172)
!6236 = !DILocation(line: 3543, column: 39, scope: !6172)
!6237 = !DILocation(line: 3543, column: 3, scope: !6172)
!6238 = !DILocation(line: 3543, column: 15, scope: !6172)
!6239 = !DILocation(line: 3543, column: 21, scope: !6172)
!6240 = !DILocation(line: 3545, column: 6, scope: !6172)
!6241 = !DILocation(line: 3546, column: 3, scope: !6172)
!6242 = !DILocation(line: 3546, column: 10, scope: !6172)
!6243 = !DILocation(line: 3546, column: 15, scope: !6172)
!6244 = !DILocation(line: 3546, column: 13, scope: !6172)
!6245 = !DILocation(line: 3548, column: 11, scope: !6246)
!6246 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 3547, column: 5)
!6247 = !DILocation(line: 3548, column: 9, scope: !6246)
!6248 = !DILocation(line: 3549, column: 13, scope: !6249)
!6249 = distinct !DILexicalBlock(scope: !6246, file: !3, line: 3549, column: 11)
!6250 = !DILocation(line: 3549, column: 16, scope: !6249)
!6251 = !DILocation(line: 3549, column: 22, scope: !6249)
!6252 = !DILocation(line: 3549, column: 11, scope: !6246)
!6253 = !DILocation(line: 3550, column: 22, scope: !6249)
!6254 = !DILocation(line: 3550, column: 25, scope: !6249)
!6255 = !DILocation(line: 3550, column: 2, scope: !6249)
!6256 = !DILocation(line: 3552, column: 4, scope: !6249)
!6257 = distinct !{!6257, !6241, !6258}
!6258 = !DILocation(line: 3553, column: 5, scope: !6172)
!6259 = !DILocation(line: 3555, column: 18, scope: !6172)
!6260 = !DILocation(line: 3555, column: 30, scope: !6172)
!6261 = !DILocation(line: 3555, column: 7, scope: !6172)
!6262 = !DILocation(line: 3555, column: 5, scope: !6172)
!6263 = !DILocation(line: 3556, column: 3, scope: !6172)
!6264 = !DILocation(line: 3556, column: 6, scope: !6172)
!6265 = !DILocation(line: 3556, column: 18, scope: !6172)
!6266 = !DILocation(line: 3557, column: 14, scope: !6172)
!6267 = !DILocation(line: 3557, column: 30, scope: !6172)
!6268 = !DILocation(line: 3557, column: 3, scope: !6172)
!6269 = !DILocation(line: 3557, column: 6, scope: !6172)
!6270 = !DILocation(line: 3557, column: 12, scope: !6172)
!6271 = !DILocation(line: 3558, column: 3, scope: !6272)
!6272 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 3558, column: 3)
!6273 = !DILocation(line: 3558, column: 3, scope: !6274)
!6274 = distinct !DILexicalBlock(scope: !6272, file: !3, line: 3558, column: 3)
!6275 = !DILocation(line: 3559, column: 9, scope: !6276)
!6276 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 3559, column: 9)
!6277 = !DILocation(line: 3559, column: 15, scope: !6276)
!6278 = !DILocation(line: 3559, column: 12, scope: !6276)
!6279 = !DILocation(line: 3559, column: 9, scope: !6274)
!6280 = !DILocation(line: 3561, column: 14, scope: !6281)
!6281 = distinct !DILexicalBlock(scope: !6276, file: !3, line: 3560, column: 7)
!6282 = !DILocation(line: 3561, column: 18, scope: !6281)
!6283 = !DILocation(line: 3561, column: 2, scope: !6281)
!6284 = !DILocation(line: 3561, column: 5, scope: !6281)
!6285 = !DILocation(line: 3561, column: 11, scope: !6281)
!6286 = !DILocation(line: 3562, column: 23, scope: !6281)
!6287 = !DILocation(line: 3562, column: 27, scope: !6281)
!6288 = !DILocation(line: 3562, column: 2, scope: !6281)
!6289 = !DILocation(line: 3562, column: 14, scope: !6281)
!6290 = !DILocation(line: 3562, column: 20, scope: !6281)
!6291 = !DILocation(line: 3563, column: 27, scope: !6281)
!6292 = !DILocation(line: 3563, column: 2, scope: !6281)
!6293 = !DILocation(line: 3563, column: 14, scope: !6281)
!6294 = !DILocation(line: 3563, column: 24, scope: !6281)
!6295 = !DILocation(line: 3564, column: 7, scope: !6281)
!6296 = distinct !{!6296, !6271, !6297}
!6297 = !DILocation(line: 3564, column: 7, scope: !6272)
!6298 = !DILocation(line: 3565, column: 7, scope: !6299)
!6299 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 3565, column: 7)
!6300 = !DILocation(line: 3565, column: 10, scope: !6299)
!6301 = !DILocation(line: 3565, column: 16, scope: !6299)
!6302 = !DILocation(line: 3565, column: 7, scope: !6172)
!6303 = !DILocation(line: 3566, column: 5, scope: !6299)
!6304 = !DILocation(line: 3566, column: 8, scope: !6299)
!6305 = !DILocation(line: 3566, column: 14, scope: !6299)
!6306 = !DILocation(line: 3567, column: 7, scope: !6307)
!6307 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 3567, column: 7)
!6308 = !DILocation(line: 3567, column: 19, scope: !6307)
!6309 = !DILocation(line: 3567, column: 25, scope: !6307)
!6310 = !DILocation(line: 3567, column: 7, scope: !6172)
!6311 = !DILocation(line: 3568, column: 5, scope: !6307)
!6312 = !DILocation(line: 3568, column: 17, scope: !6307)
!6313 = !DILocation(line: 3568, column: 23, scope: !6307)
!6314 = !DILocation(line: 3569, column: 7, scope: !6315)
!6315 = distinct !DILexicalBlock(scope: !6172, file: !3, line: 3569, column: 7)
!6316 = !DILocation(line: 3569, column: 19, scope: !6315)
!6317 = !DILocation(line: 3569, column: 29, scope: !6315)
!6318 = !DILocation(line: 3569, column: 7, scope: !6172)
!6319 = !DILocation(line: 3570, column: 5, scope: !6315)
!6320 = !DILocation(line: 3570, column: 17, scope: !6315)
!6321 = !DILocation(line: 3570, column: 27, scope: !6315)
!6322 = !DILocation(line: 3571, column: 23, scope: !6172)
!6323 = !DILocation(line: 3571, column: 3, scope: !6172)
!6324 = !DILocation(line: 3572, column: 1, scope: !6172)
!6325 = distinct !DISubprogram(name: "ei_safe_edge", scope: !337, file: !337, line: 761, type: !6326, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6326 = !DISubroutineType(types: !6327)
!6327 = !{!2180, !4235}
!6328 = !DILocalVariable(name: "i", arg: 1, scope: !6325, file: !337, line: 761, type: !4235)
!6329 = !DILocation(line: 761, column: 29, scope: !6325)
!6330 = !DILocation(line: 763, column: 11, scope: !6325)
!6331 = !DILocation(line: 763, column: 10, scope: !6325)
!6332 = !DILocation(line: 763, column: 26, scope: !6325)
!6333 = !DILocation(line: 763, column: 3, scope: !6325)
!6334 = distinct !DISubprogram(name: "expand_stack_alignment", scope: !3, file: !3, line: 3641, type: !3913, scopeLine: 3642, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6335 = !DILocalVariable(name: "drap_rtx", scope: !6334, file: !3, line: 3643, type: !2207)
!6336 = !DILocation(line: 3643, column: 7, scope: !6334)
!6337 = !DILocalVariable(name: "preferred_stack_boundary", scope: !6334, file: !3, line: 3644, type: !7)
!6338 = !DILocation(line: 3644, column: 16, scope: !6334)
!6339 = !DILocation(line: 3649, column: 7, scope: !6340)
!6340 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 3649, column: 7)
!6341 = !DILocation(line: 3649, column: 13, scope: !6340)
!6342 = !DILocation(line: 3650, column: 7, scope: !6340)
!6343 = !DILocation(line: 3650, column: 10, scope: !6340)
!6344 = !DILocation(line: 3650, column: 16, scope: !6340)
!6345 = !DILocation(line: 3651, column: 7, scope: !6340)
!6346 = !DILocation(line: 3651, column: 16, scope: !6340)
!6347 = !DILocation(line: 3651, column: 10, scope: !6340)
!6348 = !DILocation(line: 3649, column: 7, scope: !6334)
!6349 = !DILocation(line: 3652, column: 21, scope: !6340)
!6350 = !DILocation(line: 3652, column: 5, scope: !6340)
!6351 = !DILocation(line: 3660, column: 21, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 3660, column: 7)
!6353 = !DILocation(line: 3660, column: 7, scope: !6352)
!6354 = !DILocation(line: 3660, column: 7, scope: !6334)
!6355 = !DILocation(line: 3661, column: 19, scope: !6352)
!6356 = !DILocation(line: 3661, column: 5, scope: !6352)
!6357 = !DILocation(line: 3665, column: 3, scope: !6334)
!6358 = !DILocation(line: 3671, column: 7, scope: !6359)
!6359 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 3671, column: 7)
!6360 = !DILocation(line: 3672, column: 7, scope: !6359)
!6361 = !DILocation(line: 3672, column: 10, scope: !6359)
!6362 = !DILocation(line: 3672, column: 43, scope: !6359)
!6363 = !DILocation(line: 3672, column: 35, scope: !6359)
!6364 = !DILocation(line: 3671, column: 7, scope: !6334)
!6365 = !DILocation(line: 3673, column: 32, scope: !6359)
!6366 = !DILocation(line: 3673, column: 30, scope: !6359)
!6367 = !DILocation(line: 3673, column: 5, scope: !6359)
!6368 = !DILocation(line: 3675, column: 38, scope: !6359)
!6369 = !DILocation(line: 3675, column: 30, scope: !6359)
!6370 = !DILocation(line: 3676, column: 7, scope: !6371)
!6371 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 3676, column: 7)
!6372 = !DILocation(line: 3676, column: 40, scope: !6371)
!6373 = !DILocation(line: 3676, column: 32, scope: !6371)
!6374 = !DILocation(line: 3676, column: 7, scope: !6334)
!6375 = !DILocation(line: 3677, column: 39, scope: !6371)
!6376 = !DILocation(line: 3677, column: 37, scope: !6371)
!6377 = !DILocation(line: 3677, column: 5, scope: !6371)
!6378 = !DILocation(line: 3678, column: 7, scope: !6379)
!6379 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 3678, column: 7)
!6380 = !DILocation(line: 3678, column: 40, scope: !6379)
!6381 = !DILocation(line: 3678, column: 32, scope: !6379)
!6382 = !DILocation(line: 3678, column: 7, scope: !6334)
!6383 = !DILocation(line: 3679, column: 36, scope: !6379)
!6384 = !DILocation(line: 3679, column: 34, scope: !6379)
!6385 = !DILocation(line: 3679, column: 5, scope: !6379)
!6386 = !DILocation(line: 3681, column: 3, scope: !6334)
!6387 = !DILocation(line: 3685, column: 7, scope: !6334)
!6388 = !DILocation(line: 3685, column: 39, scope: !6334)
!6389 = !DILocation(line: 3685, column: 31, scope: !6334)
!6390 = !DILocation(line: 3685, column: 5, scope: !6334)
!6391 = !DILocation(line: 3686, column: 37, scope: !6334)
!6392 = !DILocation(line: 3686, column: 29, scope: !6334)
!6393 = !DILocation(line: 3688, column: 33, scope: !6334)
!6394 = !DILocation(line: 3692, column: 3, scope: !6334)
!6395 = !DILocation(line: 3693, column: 28, scope: !6334)
!6396 = !DILocation(line: 3693, column: 14, scope: !6334)
!6397 = !DILocation(line: 3693, column: 12, scope: !6334)
!6398 = !DILocation(line: 3696, column: 3, scope: !6334)
!6399 = !DILocation(line: 0, scope: !6334)
!6400 = !DILocation(line: 3699, column: 15, scope: !6401)
!6401 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 3699, column: 7)
!6402 = !DILocation(line: 3699, column: 12, scope: !6401)
!6403 = !DILocation(line: 3699, column: 7, scope: !6334)
!6404 = !DILocation(line: 3701, column: 41, scope: !6405)
!6405 = distinct !DILexicalBlock(scope: !6401, file: !3, line: 3700, column: 5)
!6406 = !DILocation(line: 3701, column: 39, scope: !6405)
!6407 = !DILocation(line: 3705, column: 7, scope: !6405)
!6408 = !DILocation(line: 3706, column: 5, scope: !6405)
!6409 = !DILocation(line: 3707, column: 1, scope: !6334)
!6410 = distinct !DISubprogram(name: "set_block_levels", scope: !3, file: !3, line: 3496, type: !6411, scopeLine: 3497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6411 = !DISubroutineType(types: !6412)
!6412 = !{null, !2326, !2136}
!6413 = !DILocalVariable(name: "block", arg: 1, scope: !6410, file: !3, line: 3496, type: !2326)
!6414 = !DILocation(line: 3496, column: 24, scope: !6410)
!6415 = !DILocalVariable(name: "level", arg: 2, scope: !6410, file: !3, line: 3496, type: !2136)
!6416 = !DILocation(line: 3496, column: 35, scope: !6410)
!6417 = !DILocation(line: 3498, column: 3, scope: !6410)
!6418 = !DILocation(line: 3498, column: 10, scope: !6410)
!6419 = !DILocation(line: 3500, column: 30, scope: !6420)
!6420 = distinct !DILexicalBlock(scope: !6410, file: !3, line: 3499, column: 5)
!6421 = !DILocation(line: 3500, column: 7, scope: !6420)
!6422 = !DILocation(line: 3500, column: 28, scope: !6420)
!6423 = !DILocation(line: 3501, column: 25, scope: !6420)
!6424 = !DILocation(line: 3501, column: 50, scope: !6420)
!6425 = !DILocation(line: 3501, column: 56, scope: !6420)
!6426 = !DILocation(line: 3501, column: 7, scope: !6420)
!6427 = !DILocation(line: 3502, column: 15, scope: !6420)
!6428 = !DILocation(line: 3502, column: 13, scope: !6420)
!6429 = distinct !{!6429, !6417, !6430}
!6430 = !DILocation(line: 3503, column: 5, scope: !6410)
!6431 = !DILocation(line: 3504, column: 1, scope: !6410)
!6432 = distinct !DISubprogram(name: "gsi_start_bb", scope: !385, file: !385, line: 4418, type: !6433, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6433 = !DISubroutineType(types: !6434)
!6434 = !{!5076, !2748}
!6435 = !DILocalVariable(name: "bb", arg: 1, scope: !6432, file: !385, line: 4418, type: !2748)
!6436 = !DILocation(line: 4418, column: 27, scope: !6432)
!6437 = !DILocalVariable(name: "i", scope: !6432, file: !385, line: 4420, type: !5076)
!6438 = !DILocation(line: 4420, column: 24, scope: !6432)
!6439 = !DILocalVariable(name: "seq", scope: !6432, file: !385, line: 4421, type: !2191)
!6440 = !DILocation(line: 4421, column: 14, scope: !6432)
!6441 = !DILocation(line: 4423, column: 17, scope: !6432)
!6442 = !DILocation(line: 4423, column: 9, scope: !6432)
!6443 = !DILocation(line: 4423, column: 7, scope: !6432)
!6444 = !DILocation(line: 4424, column: 29, scope: !6432)
!6445 = !DILocation(line: 4424, column: 11, scope: !6432)
!6446 = !DILocation(line: 4424, column: 5, scope: !6432)
!6447 = !DILocation(line: 4424, column: 9, scope: !6432)
!6448 = !DILocation(line: 4425, column: 11, scope: !6432)
!6449 = !DILocation(line: 4425, column: 5, scope: !6432)
!6450 = !DILocation(line: 4425, column: 9, scope: !6432)
!6451 = !DILocation(line: 4426, column: 10, scope: !6432)
!6452 = !DILocation(line: 4426, column: 5, scope: !6432)
!6453 = !DILocation(line: 4426, column: 8, scope: !6432)
!6454 = !DILocation(line: 4428, column: 3, scope: !6432)
!6455 = distinct !DISubprogram(name: "gsi_end_p", scope: !385, file: !385, line: 4467, type: !6456, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6456 = !DISubroutineType(types: !6457)
!6457 = !{!2439, !5076}
!6458 = !DILocalVariable(name: "i", arg: 1, scope: !6455, file: !385, line: 4467, type: !5076)
!6459 = !DILocation(line: 4467, column: 33, scope: !6455)
!6460 = !DILocation(line: 4469, column: 12, scope: !6455)
!6461 = !DILocation(line: 4469, column: 16, scope: !6455)
!6462 = !DILocation(line: 4469, column: 10, scope: !6455)
!6463 = !DILocation(line: 4469, column: 3, scope: !6455)
!6464 = distinct !DISubprogram(name: "gsi_stmt", scope: !385, file: !385, line: 4501, type: !6465, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6465 = !DISubroutineType(types: !6466)
!6466 = !{!2201, !5076}
!6467 = !DILocalVariable(name: "i", arg: 1, scope: !6464, file: !385, line: 4501, type: !5076)
!6468 = !DILocation(line: 4501, column: 32, scope: !6464)
!6469 = !DILocation(line: 4503, column: 12, scope: !6464)
!6470 = !DILocation(line: 4503, column: 17, scope: !6464)
!6471 = !DILocation(line: 4503, column: 3, scope: !6464)
!6472 = distinct !DISubprogram(name: "is_gimple_debug", scope: !385, file: !385, line: 3249, type: !3816, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6473 = !DILocalVariable(name: "gs", arg: 1, scope: !6472, file: !385, line: 3249, type: !3744)
!6474 = !DILocation(line: 3249, column: 31, scope: !6472)
!6475 = !DILocation(line: 3251, column: 23, scope: !6472)
!6476 = !DILocation(line: 3251, column: 10, scope: !6472)
!6477 = !DILocation(line: 3251, column: 27, scope: !6472)
!6478 = !DILocation(line: 3251, column: 3, scope: !6472)
!6479 = distinct !DISubprogram(name: "discover_nonconstant_array_refs_r", scope: !3, file: !3, line: 3579, type: !6480, scopeLine: 3581, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6480 = !DISubroutineType(types: !6481)
!6481 = !{!2326, !2834, !3612, !2316}
!6482 = !DILocalVariable(name: "tp", arg: 1, scope: !6479, file: !3, line: 3579, type: !2834)
!6483 = !DILocation(line: 3579, column: 43, scope: !6479)
!6484 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !6479, file: !3, line: 3579, type: !3612)
!6485 = !DILocation(line: 3579, column: 52, scope: !6479)
!6486 = !DILocalVariable(name: "data", arg: 3, scope: !6479, file: !3, line: 3580, type: !2316)
!6487 = !DILocation(line: 3580, column: 14, scope: !6479)
!6488 = !DILocalVariable(name: "t", scope: !6479, file: !3, line: 3582, type: !2326)
!6489 = !DILocation(line: 3582, column: 8, scope: !6479)
!6490 = !DILocation(line: 3582, column: 13, scope: !6479)
!6491 = !DILocation(line: 3582, column: 12, scope: !6479)
!6492 = !DILocation(line: 3584, column: 7, scope: !6493)
!6493 = distinct !DILexicalBlock(scope: !6479, file: !3, line: 3584, column: 7)
!6494 = !DILocation(line: 3584, column: 7, scope: !6479)
!6495 = !DILocation(line: 3585, column: 6, scope: !6493)
!6496 = !DILocation(line: 3585, column: 20, scope: !6493)
!6497 = !DILocation(line: 3585, column: 5, scope: !6493)
!6498 = !DILocation(line: 3586, column: 12, scope: !6499)
!6499 = distinct !DILexicalBlock(scope: !6493, file: !3, line: 3586, column: 12)
!6500 = !DILocation(line: 3586, column: 26, scope: !6499)
!6501 = !DILocation(line: 3586, column: 39, scope: !6499)
!6502 = !DILocation(line: 3586, column: 42, scope: !6499)
!6503 = !DILocation(line: 3586, column: 56, scope: !6499)
!6504 = !DILocation(line: 3586, column: 12, scope: !6493)
!6505 = !DILocation(line: 3588, column: 7, scope: !6506)
!6506 = distinct !DILexicalBlock(scope: !6499, file: !3, line: 3587, column: 5)
!6507 = !DILocation(line: 3588, column: 16, scope: !6506)
!6508 = !DILocation(line: 3588, column: 30, scope: !6506)
!6509 = !DILocation(line: 3588, column: 43, scope: !6506)
!6510 = !DILocation(line: 3588, column: 46, scope: !6506)
!6511 = !DILocation(line: 3588, column: 60, scope: !6506)
!6512 = !DILocation(line: 3589, column: 8, scope: !6506)
!6513 = !DILocation(line: 3589, column: 36, scope: !6506)
!6514 = !DILocation(line: 3589, column: 11, scope: !6506)
!6515 = !DILocation(line: 3590, column: 8, scope: !6506)
!6516 = !DILocation(line: 3590, column: 13, scope: !6506)
!6517 = !DILocation(line: 3591, column: 5, scope: !6506)
!6518 = !DILocation(line: 3591, column: 33, scope: !6506)
!6519 = !DILocation(line: 3591, column: 8, scope: !6506)
!6520 = !DILocation(line: 3592, column: 7, scope: !6506)
!6521 = !DILocation(line: 3592, column: 11, scope: !6506)
!6522 = !DILocation(line: 3592, column: 25, scope: !6506)
!6523 = !DILocation(line: 3593, column: 4, scope: !6506)
!6524 = !DILocation(line: 3593, column: 9, scope: !6506)
!6525 = !DILocation(line: 3594, column: 8, scope: !6506)
!6526 = !DILocation(line: 3594, column: 36, scope: !6506)
!6527 = !DILocation(line: 3594, column: 11, scope: !6506)
!6528 = !DILocation(line: 3595, column: 7, scope: !6506)
!6529 = !DILocation(line: 3595, column: 10, scope: !6506)
!6530 = !DILocation(line: 3595, column: 24, scope: !6506)
!6531 = !DILocation(line: 3596, column: 7, scope: !6506)
!6532 = !DILocation(line: 3596, column: 10, scope: !6506)
!6533 = !DILocation(line: 3596, column: 24, scope: !6506)
!6534 = !DILocation(line: 3597, column: 7, scope: !6506)
!6535 = !DILocation(line: 3597, column: 10, scope: !6506)
!6536 = !DILocation(line: 3597, column: 24, scope: !6506)
!6537 = !DILocation(line: 3598, column: 7, scope: !6506)
!6538 = !DILocation(line: 3598, column: 10, scope: !6506)
!6539 = !DILocation(line: 3598, column: 24, scope: !6506)
!6540 = !DILocation(line: 3599, column: 7, scope: !6506)
!6541 = !DILocation(line: 3599, column: 10, scope: !6506)
!6542 = !DILocation(line: 3600, column: 6, scope: !6506)
!6543 = !DILocation(line: 3600, column: 4, scope: !6506)
!6544 = distinct !{!6544, !6505, !6542}
!6545 = !DILocation(line: 3602, column: 11, scope: !6546)
!6546 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 3602, column: 11)
!6547 = !DILocation(line: 3602, column: 25, scope: !6546)
!6548 = !DILocation(line: 3602, column: 38, scope: !6546)
!6549 = !DILocation(line: 3602, column: 41, scope: !6546)
!6550 = !DILocation(line: 3602, column: 55, scope: !6546)
!6551 = !DILocation(line: 3602, column: 11, scope: !6506)
!6552 = !DILocation(line: 3604, column: 26, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6546, file: !3, line: 3603, column: 2)
!6554 = !DILocation(line: 3604, column: 8, scope: !6553)
!6555 = !DILocation(line: 3604, column: 6, scope: !6553)
!6556 = !DILocation(line: 3605, column: 8, scope: !6557)
!6557 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 3605, column: 8)
!6558 = !DILocation(line: 3605, column: 10, scope: !6557)
!6559 = !DILocation(line: 3605, column: 13, scope: !6557)
!6560 = !DILocation(line: 3606, column: 15, scope: !6557)
!6561 = !DILocation(line: 3606, column: 18, scope: !6557)
!6562 = !DILocation(line: 3606, column: 32, scope: !6557)
!6563 = !DILocation(line: 3605, column: 8, scope: !6553)
!6564 = !DILocation(line: 3607, column: 6, scope: !6557)
!6565 = !DILocation(line: 3607, column: 27, scope: !6557)
!6566 = !DILocation(line: 3608, column: 2, scope: !6553)
!6567 = !DILocation(line: 3610, column: 8, scope: !6506)
!6568 = !DILocation(line: 3610, column: 22, scope: !6506)
!6569 = !DILocation(line: 3611, column: 5, scope: !6506)
!6570 = !DILocation(line: 3613, column: 3, scope: !6479)
!6571 = distinct !DISubprogram(name: "gsi_next", scope: !385, file: !385, line: 4485, type: !6572, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6572 = !DISubroutineType(types: !6573)
!6573 = !{null, !6574}
!6574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5076, size: 64)
!6575 = !DILocalVariable(name: "i", arg: 1, scope: !6571, file: !385, line: 4485, type: !6574)
!6576 = !DILocation(line: 4485, column: 33, scope: !6571)
!6577 = !DILocation(line: 4487, column: 12, scope: !6571)
!6578 = !DILocation(line: 4487, column: 15, scope: !6571)
!6579 = !DILocation(line: 4487, column: 20, scope: !6571)
!6580 = !DILocation(line: 4487, column: 3, scope: !6571)
!6581 = !DILocation(line: 4487, column: 6, scope: !6571)
!6582 = !DILocation(line: 4487, column: 10, scope: !6571)
!6583 = !DILocation(line: 4488, column: 1, scope: !6571)
!6584 = distinct !DISubprogram(name: "bb_seq", scope: !385, file: !385, line: 237, type: !6585, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6585 = !DISubroutineType(types: !6586)
!6586 = !{!2191, !6587}
!6587 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !2181, line: 112, baseType: !6588)
!6588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6589, size: 64)
!6589 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2165)
!6590 = !DILocalVariable(name: "bb", arg: 1, scope: !6584, file: !385, line: 237, type: !6587)
!6591 = !DILocation(line: 237, column: 27, scope: !6584)
!6592 = !DILocation(line: 239, column: 13, scope: !6584)
!6593 = !DILocation(line: 239, column: 17, scope: !6584)
!6594 = !DILocation(line: 239, column: 23, scope: !6584)
!6595 = !DILocation(line: 239, column: 33, scope: !6584)
!6596 = !DILocation(line: 239, column: 36, scope: !6584)
!6597 = !DILocation(line: 239, column: 40, scope: !6584)
!6598 = !DILocation(line: 239, column: 43, scope: !6584)
!6599 = !DILocation(line: 239, column: 10, scope: !6584)
!6600 = !DILocation(line: 239, column: 53, scope: !6584)
!6601 = !DILocation(line: 239, column: 57, scope: !6584)
!6602 = !DILocation(line: 239, column: 60, scope: !6584)
!6603 = !DILocation(line: 239, column: 68, scope: !6584)
!6604 = !DILocation(line: 239, column: 3, scope: !6584)
!6605 = distinct !DISubprogram(name: "gimple_seq_first", scope: !385, file: !385, line: 159, type: !6606, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6606 = !DISubroutineType(types: !6607)
!6607 = !{!2196, !6608}
!6608 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !2181, line: 67, baseType: !6609)
!6609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6610, size: 64)
!6610 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2193)
!6611 = !DILocalVariable(name: "s", arg: 1, scope: !6605, file: !385, line: 159, type: !6608)
!6612 = !DILocation(line: 159, column: 36, scope: !6605)
!6613 = !DILocation(line: 161, column: 10, scope: !6605)
!6614 = !DILocation(line: 161, column: 14, scope: !6605)
!6615 = !DILocation(line: 161, column: 17, scope: !6605)
!6616 = !DILocation(line: 161, column: 3, scope: !6605)
!6617 = distinct !DISubprogram(name: "expand_used_vars_for_block", scope: !3, file: !3, line: 1010, type: !6618, scopeLine: 1011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6618 = !DISubroutineType(types: !6619)
!6619 = !{null, !2326, !2439}
!6620 = !DILocalVariable(name: "block", arg: 1, scope: !6617, file: !3, line: 1010, type: !2326)
!6621 = !DILocation(line: 1010, column: 34, scope: !6617)
!6622 = !DILocalVariable(name: "toplevel", arg: 2, scope: !6617, file: !3, line: 1010, type: !2439)
!6623 = !DILocation(line: 1010, column: 46, scope: !6617)
!6624 = !DILocalVariable(name: "i", scope: !6617, file: !3, line: 1012, type: !2140)
!6625 = !DILocation(line: 1012, column: 10, scope: !6617)
!6626 = !DILocalVariable(name: "j", scope: !6617, file: !3, line: 1012, type: !2140)
!6627 = !DILocation(line: 1012, column: 13, scope: !6617)
!6628 = !DILocalVariable(name: "old_sv_num", scope: !6617, file: !3, line: 1012, type: !2140)
!6629 = !DILocation(line: 1012, column: 16, scope: !6617)
!6630 = !DILocalVariable(name: "this_sv_num", scope: !6617, file: !3, line: 1012, type: !2140)
!6631 = !DILocation(line: 1012, column: 28, scope: !6617)
!6632 = !DILocalVariable(name: "new_sv_num", scope: !6617, file: !3, line: 1012, type: !2140)
!6633 = !DILocation(line: 1012, column: 41, scope: !6617)
!6634 = !DILocalVariable(name: "t", scope: !6617, file: !3, line: 1013, type: !2326)
!6635 = !DILocation(line: 1013, column: 8, scope: !6617)
!6636 = !DILocation(line: 1015, column: 16, scope: !6617)
!6637 = !DILocation(line: 1015, column: 31, scope: !6617)
!6638 = !DILocation(line: 1015, column: 14, scope: !6617)
!6639 = !DILocation(line: 1018, column: 12, scope: !6640)
!6640 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 1018, column: 3)
!6641 = !DILocation(line: 1018, column: 10, scope: !6640)
!6642 = !DILocation(line: 1018, column: 8, scope: !6640)
!6643 = !DILocation(line: 1018, column: 32, scope: !6644)
!6644 = distinct !DILexicalBlock(scope: !6640, file: !3, line: 1018, column: 3)
!6645 = !DILocation(line: 1018, column: 3, scope: !6640)
!6646 = !DILocation(line: 1019, column: 9, scope: !6647)
!6647 = distinct !DILexicalBlock(scope: !6644, file: !3, line: 1019, column: 9)
!6648 = !DILocation(line: 1019, column: 9, scope: !6644)
!6649 = !DILocation(line: 1020, column: 23, scope: !6647)
!6650 = !DILocation(line: 1020, column: 26, scope: !6647)
!6651 = !DILocation(line: 1020, column: 7, scope: !6647)
!6652 = !DILocation(line: 1018, column: 40, scope: !6644)
!6653 = !DILocation(line: 1018, column: 38, scope: !6644)
!6654 = !DILocation(line: 1018, column: 3, scope: !6644)
!6655 = distinct !{!6655, !6645, !6656}
!6656 = !DILocation(line: 1020, column: 40, scope: !6640)
!6657 = !DILocation(line: 1022, column: 17, scope: !6617)
!6658 = !DILocation(line: 1022, column: 15, scope: !6617)
!6659 = !DILocation(line: 1025, column: 12, scope: !6660)
!6660 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 1025, column: 3)
!6661 = !DILocation(line: 1025, column: 10, scope: !6660)
!6662 = !DILocation(line: 1025, column: 8, scope: !6660)
!6663 = !DILocation(line: 1025, column: 37, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6660, file: !3, line: 1025, column: 3)
!6665 = !DILocation(line: 1025, column: 3, scope: !6660)
!6666 = !DILocation(line: 1026, column: 33, scope: !6664)
!6667 = !DILocation(line: 1026, column: 5, scope: !6664)
!6668 = !DILocation(line: 1025, column: 45, scope: !6664)
!6669 = !DILocation(line: 1025, column: 43, scope: !6664)
!6670 = !DILocation(line: 1025, column: 3, scope: !6664)
!6671 = distinct !{!6671, !6665, !6672}
!6672 = !DILocation(line: 1026, column: 41, scope: !6660)
!6673 = !DILocation(line: 1032, column: 7, scope: !6674)
!6674 = distinct !DILexicalBlock(scope: !6617, file: !3, line: 1032, column: 7)
!6675 = !DILocation(line: 1032, column: 20, scope: !6674)
!6676 = !DILocation(line: 1032, column: 18, scope: !6674)
!6677 = !DILocation(line: 1032, column: 7, scope: !6617)
!6678 = !DILocation(line: 1034, column: 20, scope: !6679)
!6679 = distinct !DILexicalBlock(scope: !6674, file: !3, line: 1033, column: 5)
!6680 = !DILocation(line: 1034, column: 18, scope: !6679)
!6681 = !DILocation(line: 1036, column: 16, scope: !6682)
!6682 = distinct !DILexicalBlock(scope: !6679, file: !3, line: 1036, column: 7)
!6683 = !DILocation(line: 1036, column: 14, scope: !6682)
!6684 = !DILocation(line: 1036, column: 12, scope: !6682)
!6685 = !DILocation(line: 1036, column: 28, scope: !6686)
!6686 = distinct !DILexicalBlock(scope: !6682, file: !3, line: 1036, column: 7)
!6687 = !DILocation(line: 1036, column: 32, scope: !6686)
!6688 = !DILocation(line: 1036, column: 30, scope: !6686)
!6689 = !DILocation(line: 1036, column: 7, scope: !6682)
!6690 = !DILocation(line: 1037, column: 11, scope: !6691)
!6691 = distinct !DILexicalBlock(scope: !6686, file: !3, line: 1037, column: 2)
!6692 = !DILocation(line: 1037, column: 15, scope: !6691)
!6693 = !DILocation(line: 1037, column: 13, scope: !6691)
!6694 = !DILocation(line: 1037, column: 29, scope: !6691)
!6695 = !DILocation(line: 1037, column: 33, scope: !6691)
!6696 = !DILocation(line: 1037, column: 9, scope: !6691)
!6697 = !DILocation(line: 1037, column: 7, scope: !6691)
!6698 = !DILocation(line: 1037, column: 47, scope: !6699)
!6699 = distinct !DILexicalBlock(scope: !6691, file: !3, line: 1037, column: 2)
!6700 = !DILocation(line: 1037, column: 52, scope: !6699)
!6701 = !DILocation(line: 1037, column: 50, scope: !6699)
!6702 = !DILocation(line: 1037, column: 2, scope: !6691)
!6703 = !DILocation(line: 1038, column: 28, scope: !6699)
!6704 = !DILocation(line: 1038, column: 31, scope: !6699)
!6705 = !DILocation(line: 1038, column: 4, scope: !6699)
!6706 = !DILocation(line: 1037, column: 2, scope: !6699)
!6707 = distinct !{!6707, !6702, !6708}
!6708 = !DILocation(line: 1038, column: 32, scope: !6691)
!6709 = !DILocation(line: 1036, column: 44, scope: !6686)
!6710 = !DILocation(line: 1036, column: 7, scope: !6686)
!6711 = distinct !{!6711, !6689, !6712}
!6712 = !DILocation(line: 1038, column: 32, scope: !6682)
!6713 = !DILocation(line: 1039, column: 5, scope: !6679)
!6714 = !DILocation(line: 1040, column: 1, scope: !6617)
!6715 = distinct !DISubprogram(name: "add_alias_set_conflicts", scope: !3, file: !3, line: 356, type: !3913, scopeLine: 357, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6716 = !DILocalVariable(name: "i", scope: !6715, file: !3, line: 358, type: !2140)
!6717 = !DILocation(line: 358, column: 10, scope: !6715)
!6718 = !DILocalVariable(name: "j", scope: !6715, file: !3, line: 358, type: !2140)
!6719 = !DILocation(line: 358, column: 13, scope: !6715)
!6720 = !DILocalVariable(name: "n", scope: !6715, file: !3, line: 358, type: !2140)
!6721 = !DILocation(line: 358, column: 16, scope: !6715)
!6722 = !DILocation(line: 358, column: 20, scope: !6715)
!6723 = !DILocation(line: 360, column: 10, scope: !6724)
!6724 = distinct !DILexicalBlock(scope: !6715, file: !3, line: 360, column: 3)
!6725 = !DILocation(line: 360, column: 8, scope: !6724)
!6726 = !DILocation(line: 360, column: 15, scope: !6727)
!6727 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 360, column: 3)
!6728 = !DILocation(line: 360, column: 19, scope: !6727)
!6729 = !DILocation(line: 360, column: 17, scope: !6727)
!6730 = !DILocation(line: 360, column: 3, scope: !6724)
!6731 = !DILocalVariable(name: "type_i", scope: !6732, file: !3, line: 362, type: !2326)
!6732 = distinct !DILexicalBlock(scope: !6727, file: !3, line: 361, column: 5)
!6733 = !DILocation(line: 362, column: 12, scope: !6732)
!6734 = !DILocation(line: 362, column: 21, scope: !6732)
!6735 = !DILocalVariable(name: "aggr_i", scope: !6732, file: !3, line: 363, type: !2439)
!6736 = !DILocation(line: 363, column: 12, scope: !6732)
!6737 = !DILocation(line: 363, column: 21, scope: !6732)
!6738 = !DILocalVariable(name: "contains_union", scope: !6732, file: !3, line: 364, type: !2439)
!6739 = !DILocation(line: 364, column: 12, scope: !6732)
!6740 = !DILocation(line: 366, column: 55, scope: !6732)
!6741 = !DILocation(line: 366, column: 24, scope: !6732)
!6742 = !DILocation(line: 366, column: 22, scope: !6732)
!6743 = !DILocation(line: 367, column: 14, scope: !6744)
!6744 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 367, column: 7)
!6745 = !DILocation(line: 367, column: 12, scope: !6744)
!6746 = !DILocation(line: 367, column: 19, scope: !6747)
!6747 = distinct !DILexicalBlock(scope: !6744, file: !3, line: 367, column: 7)
!6748 = !DILocation(line: 367, column: 23, scope: !6747)
!6749 = !DILocation(line: 367, column: 21, scope: !6747)
!6750 = !DILocation(line: 367, column: 7, scope: !6744)
!6751 = !DILocalVariable(name: "type_j", scope: !6752, file: !3, line: 369, type: !2326)
!6752 = distinct !DILexicalBlock(scope: !6747, file: !3, line: 368, column: 2)
!6753 = !DILocation(line: 369, column: 9, scope: !6752)
!6754 = !DILocation(line: 369, column: 18, scope: !6752)
!6755 = !DILocalVariable(name: "aggr_j", scope: !6752, file: !3, line: 370, type: !2439)
!6756 = !DILocation(line: 370, column: 9, scope: !6752)
!6757 = !DILocation(line: 370, column: 18, scope: !6752)
!6758 = !DILocation(line: 371, column: 8, scope: !6759)
!6759 = distinct !DILexicalBlock(scope: !6752, file: !3, line: 371, column: 8)
!6760 = !DILocation(line: 371, column: 18, scope: !6759)
!6761 = !DILocation(line: 371, column: 15, scope: !6759)
!6762 = !DILocation(line: 374, column: 8, scope: !6759)
!6763 = !DILocation(line: 374, column: 37, scope: !6759)
!6764 = !DILocation(line: 374, column: 45, scope: !6759)
!6765 = !DILocation(line: 374, column: 12, scope: !6759)
!6766 = !DILocation(line: 380, column: 8, scope: !6759)
!6767 = !DILocation(line: 380, column: 11, scope: !6759)
!6768 = !DILocation(line: 371, column: 8, scope: !6752)
!6769 = !DILocation(line: 381, column: 30, scope: !6759)
!6770 = !DILocation(line: 381, column: 33, scope: !6759)
!6771 = !DILocation(line: 381, column: 6, scope: !6759)
!6772 = !DILocation(line: 382, column: 2, scope: !6752)
!6773 = !DILocation(line: 367, column: 26, scope: !6747)
!6774 = !DILocation(line: 367, column: 7, scope: !6747)
!6775 = distinct !{!6775, !6750, !6776}
!6776 = !DILocation(line: 382, column: 2, scope: !6744)
!6777 = !DILocation(line: 383, column: 5, scope: !6732)
!6778 = !DILocation(line: 360, column: 22, scope: !6727)
!6779 = !DILocation(line: 360, column: 3, scope: !6727)
!6780 = distinct !{!6780, !6730, !6781}
!6781 = !DILocation(line: 383, column: 5, scope: !6724)
!6782 = !DILocation(line: 384, column: 1, scope: !6715)
!6783 = distinct !DISubprogram(name: "add_stack_protection_conflicts", scope: !3, file: !3, line: 1163, type: !3913, scopeLine: 1164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6784 = !DILocalVariable(name: "i", scope: !6783, file: !3, line: 1165, type: !2140)
!6785 = !DILocation(line: 1165, column: 10, scope: !6783)
!6786 = !DILocalVariable(name: "j", scope: !6783, file: !3, line: 1165, type: !2140)
!6787 = !DILocation(line: 1165, column: 13, scope: !6783)
!6788 = !DILocalVariable(name: "n", scope: !6783, file: !3, line: 1165, type: !2140)
!6789 = !DILocation(line: 1165, column: 16, scope: !6783)
!6790 = !DILocation(line: 1165, column: 20, scope: !6783)
!6791 = !DILocalVariable(name: "phase", scope: !6783, file: !3, line: 1166, type: !3547)
!6792 = !DILocation(line: 1166, column: 18, scope: !6783)
!6793 = !DILocation(line: 1168, column: 11, scope: !6783)
!6794 = !DILocation(line: 1168, column: 9, scope: !6783)
!6795 = !DILocation(line: 1169, column: 10, scope: !6796)
!6796 = distinct !DILexicalBlock(scope: !6783, file: !3, line: 1169, column: 3)
!6797 = !DILocation(line: 1169, column: 8, scope: !6796)
!6798 = !DILocation(line: 1169, column: 15, scope: !6799)
!6799 = distinct !DILexicalBlock(scope: !6796, file: !3, line: 1169, column: 3)
!6800 = !DILocation(line: 1169, column: 19, scope: !6799)
!6801 = !DILocation(line: 1169, column: 17, scope: !6799)
!6802 = !DILocation(line: 1169, column: 3, scope: !6796)
!6803 = !DILocation(line: 1170, column: 42, scope: !6799)
!6804 = !DILocation(line: 1170, column: 53, scope: !6799)
!6805 = !DILocation(line: 1170, column: 56, scope: !6799)
!6806 = !DILocation(line: 1170, column: 16, scope: !6799)
!6807 = !DILocation(line: 1170, column: 5, scope: !6799)
!6808 = !DILocation(line: 1170, column: 11, scope: !6799)
!6809 = !DILocation(line: 1170, column: 14, scope: !6799)
!6810 = !DILocation(line: 1169, column: 22, scope: !6799)
!6811 = !DILocation(line: 1169, column: 3, scope: !6799)
!6812 = distinct !{!6812, !6802, !6813}
!6813 = !DILocation(line: 1170, column: 60, scope: !6796)
!6814 = !DILocation(line: 1172, column: 10, scope: !6815)
!6815 = distinct !DILexicalBlock(scope: !6783, file: !3, line: 1172, column: 3)
!6816 = !DILocation(line: 1172, column: 8, scope: !6815)
!6817 = !DILocation(line: 1172, column: 15, scope: !6818)
!6818 = distinct !DILexicalBlock(scope: !6815, file: !3, line: 1172, column: 3)
!6819 = !DILocation(line: 1172, column: 19, scope: !6818)
!6820 = !DILocation(line: 1172, column: 17, scope: !6818)
!6821 = !DILocation(line: 1172, column: 3, scope: !6815)
!6822 = !DILocalVariable(name: "ph_i", scope: !6823, file: !3, line: 1174, type: !2439)
!6823 = distinct !DILexicalBlock(scope: !6818, file: !3, line: 1173, column: 5)
!6824 = !DILocation(line: 1174, column: 21, scope: !6823)
!6825 = !DILocation(line: 1174, column: 28, scope: !6823)
!6826 = !DILocation(line: 1174, column: 34, scope: !6823)
!6827 = !DILocation(line: 1175, column: 14, scope: !6828)
!6828 = distinct !DILexicalBlock(scope: !6823, file: !3, line: 1175, column: 7)
!6829 = !DILocation(line: 1175, column: 12, scope: !6828)
!6830 = !DILocation(line: 1175, column: 19, scope: !6831)
!6831 = distinct !DILexicalBlock(scope: !6828, file: !3, line: 1175, column: 7)
!6832 = !DILocation(line: 1175, column: 23, scope: !6831)
!6833 = !DILocation(line: 1175, column: 21, scope: !6831)
!6834 = !DILocation(line: 1175, column: 7, scope: !6828)
!6835 = !DILocation(line: 1176, column: 6, scope: !6836)
!6836 = distinct !DILexicalBlock(scope: !6831, file: !3, line: 1176, column: 6)
!6837 = !DILocation(line: 1176, column: 14, scope: !6836)
!6838 = !DILocation(line: 1176, column: 20, scope: !6836)
!6839 = !DILocation(line: 1176, column: 11, scope: !6836)
!6840 = !DILocation(line: 1176, column: 6, scope: !6831)
!6841 = !DILocation(line: 1177, column: 28, scope: !6836)
!6842 = !DILocation(line: 1177, column: 31, scope: !6836)
!6843 = !DILocation(line: 1177, column: 4, scope: !6836)
!6844 = !DILocation(line: 1176, column: 21, scope: !6836)
!6845 = !DILocation(line: 1175, column: 26, scope: !6831)
!6846 = !DILocation(line: 1175, column: 7, scope: !6831)
!6847 = distinct !{!6847, !6834, !6848}
!6848 = !DILocation(line: 1177, column: 32, scope: !6828)
!6849 = !DILocation(line: 1178, column: 5, scope: !6823)
!6850 = !DILocation(line: 1172, column: 22, scope: !6818)
!6851 = !DILocation(line: 1172, column: 3, scope: !6818)
!6852 = distinct !{!6852, !6821, !6853}
!6853 = !DILocation(line: 1178, column: 5, scope: !6815)
!6854 = !DILocation(line: 1180, column: 3, scope: !6783)
!6855 = !DILocation(line: 1181, column: 1, scope: !6783)
!6856 = distinct !DISubprogram(name: "partition_stack_vars", scope: !3, file: !3, line: 610, type: !3913, scopeLine: 611, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!6857 = !DILocalVariable(name: "si", scope: !6856, file: !3, line: 612, type: !2140)
!6858 = !DILocation(line: 612, column: 10, scope: !6856)
!6859 = !DILocalVariable(name: "sj", scope: !6856, file: !3, line: 612, type: !2140)
!6860 = !DILocation(line: 612, column: 14, scope: !6856)
!6861 = !DILocalVariable(name: "n", scope: !6856, file: !3, line: 612, type: !2140)
!6862 = !DILocation(line: 612, column: 18, scope: !6856)
!6863 = !DILocation(line: 612, column: 22, scope: !6856)
!6864 = !DILocation(line: 614, column: 23, scope: !6856)
!6865 = !DILocation(line: 614, column: 21, scope: !6856)
!6866 = !DILocation(line: 615, column: 11, scope: !6867)
!6867 = distinct !DILexicalBlock(scope: !6856, file: !3, line: 615, column: 3)
!6868 = !DILocation(line: 615, column: 8, scope: !6867)
!6869 = !DILocation(line: 615, column: 16, scope: !6870)
!6870 = distinct !DILexicalBlock(scope: !6867, file: !3, line: 615, column: 3)
!6871 = !DILocation(line: 615, column: 21, scope: !6870)
!6872 = !DILocation(line: 615, column: 19, scope: !6870)
!6873 = !DILocation(line: 615, column: 3, scope: !6867)
!6874 = !DILocation(line: 616, column: 29, scope: !6870)
!6875 = !DILocation(line: 616, column: 5, scope: !6870)
!6876 = !DILocation(line: 616, column: 23, scope: !6870)
!6877 = !DILocation(line: 616, column: 27, scope: !6870)
!6878 = !DILocation(line: 615, column: 24, scope: !6870)
!6879 = !DILocation(line: 615, column: 3, scope: !6870)
!6880 = distinct !{!6880, !6873, !6881}
!6881 = !DILocation(line: 616, column: 29, scope: !6867)
!6882 = !DILocation(line: 618, column: 7, scope: !6883)
!6883 = distinct !DILexicalBlock(scope: !6856, file: !3, line: 618, column: 7)
!6884 = !DILocation(line: 618, column: 9, scope: !6883)
!6885 = !DILocation(line: 618, column: 7, scope: !6856)
!6886 = !DILocation(line: 619, column: 5, scope: !6883)
!6887 = !DILocation(line: 622, column: 15, scope: !6856)
!6888 = !DILocation(line: 622, column: 34, scope: !6856)
!6889 = !DILocation(line: 622, column: 3, scope: !6856)
!6890 = !DILocation(line: 627, column: 11, scope: !6891)
!6891 = distinct !DILexicalBlock(scope: !6856, file: !3, line: 627, column: 3)
!6892 = !DILocation(line: 627, column: 8, scope: !6891)
!6893 = !DILocation(line: 627, column: 16, scope: !6894)
!6894 = distinct !DILexicalBlock(scope: !6891, file: !3, line: 627, column: 3)
!6895 = !DILocation(line: 627, column: 21, scope: !6894)
!6896 = !DILocation(line: 627, column: 19, scope: !6894)
!6897 = !DILocation(line: 627, column: 3, scope: !6891)
!6898 = !DILocalVariable(name: "i", scope: !6899, file: !3, line: 629, type: !2140)
!6899 = distinct !DILexicalBlock(scope: !6894, file: !3, line: 628, column: 5)
!6900 = !DILocation(line: 629, column: 14, scope: !6899)
!6901 = !DILocation(line: 629, column: 18, scope: !6899)
!6902 = !DILocation(line: 629, column: 36, scope: !6899)
!6903 = !DILocalVariable(name: "isize", scope: !6899, file: !3, line: 630, type: !2295)
!6904 = !DILocation(line: 630, column: 21, scope: !6899)
!6905 = !DILocation(line: 630, column: 29, scope: !6899)
!6906 = !DILocation(line: 630, column: 40, scope: !6899)
!6907 = !DILocation(line: 630, column: 43, scope: !6899)
!6908 = !DILocalVariable(name: "offset", scope: !6899, file: !3, line: 631, type: !2295)
!6909 = !DILocation(line: 631, column: 21, scope: !6899)
!6910 = !DILocation(line: 633, column: 17, scope: !6911)
!6911 = distinct !DILexicalBlock(scope: !6899, file: !3, line: 633, column: 7)
!6912 = !DILocation(line: 633, column: 15, scope: !6911)
!6913 = !DILocation(line: 633, column: 12, scope: !6911)
!6914 = !DILocation(line: 633, column: 23, scope: !6915)
!6915 = distinct !DILexicalBlock(scope: !6911, file: !3, line: 633, column: 7)
!6916 = !DILocation(line: 633, column: 26, scope: !6915)
!6917 = !DILocation(line: 633, column: 7, scope: !6911)
!6918 = !DILocalVariable(name: "j", scope: !6919, file: !3, line: 635, type: !2140)
!6919 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 634, column: 2)
!6920 = !DILocation(line: 635, column: 11, scope: !6919)
!6921 = !DILocation(line: 635, column: 15, scope: !6919)
!6922 = !DILocation(line: 635, column: 33, scope: !6919)
!6923 = !DILocalVariable(name: "jsize", scope: !6919, file: !3, line: 636, type: !2295)
!6924 = !DILocation(line: 636, column: 18, scope: !6919)
!6925 = !DILocation(line: 636, column: 26, scope: !6919)
!6926 = !DILocation(line: 636, column: 37, scope: !6919)
!6927 = !DILocation(line: 636, column: 40, scope: !6919)
!6928 = !DILocalVariable(name: "jalign", scope: !6919, file: !3, line: 637, type: !7)
!6929 = !DILocation(line: 637, column: 17, scope: !6919)
!6930 = !DILocation(line: 637, column: 26, scope: !6919)
!6931 = !DILocation(line: 637, column: 37, scope: !6919)
!6932 = !DILocation(line: 637, column: 40, scope: !6919)
!6933 = !DILocation(line: 640, column: 8, scope: !6934)
!6934 = distinct !DILexicalBlock(scope: !6919, file: !3, line: 640, column: 8)
!6935 = !DILocation(line: 640, column: 19, scope: !6934)
!6936 = !DILocation(line: 640, column: 22, scope: !6934)
!6937 = !DILocation(line: 640, column: 40, scope: !6934)
!6938 = !DILocation(line: 640, column: 37, scope: !6934)
!6939 = !DILocation(line: 640, column: 8, scope: !6919)
!6940 = !DILocation(line: 641, column: 6, scope: !6934)
!6941 = distinct !{!6941, !6917, !6942}
!6942 = !DILocation(line: 670, column: 2, scope: !6911)
!6943 = !DILocation(line: 644, column: 8, scope: !6944)
!6944 = distinct !DILexicalBlock(scope: !6919, file: !3, line: 644, column: 8)
!6945 = !DILocation(line: 644, column: 16, scope: !6944)
!6946 = !DILocation(line: 644, column: 14, scope: !6944)
!6947 = !DILocation(line: 644, column: 8, scope: !6919)
!6948 = !DILocation(line: 645, column: 6, scope: !6944)
!6949 = !DILocation(line: 648, column: 30, scope: !6950)
!6950 = distinct !DILexicalBlock(scope: !6919, file: !3, line: 648, column: 8)
!6951 = !DILocation(line: 648, column: 33, scope: !6950)
!6952 = !DILocation(line: 648, column: 8, scope: !6950)
!6953 = !DILocation(line: 648, column: 8, scope: !6919)
!6954 = !DILocation(line: 649, column: 6, scope: !6950)
!6955 = !DILocation(line: 652, column: 8, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !6919, file: !3, line: 652, column: 8)
!6957 = !DILocation(line: 652, column: 18, scope: !6956)
!6958 = !DILocation(line: 652, column: 25, scope: !6956)
!6959 = !DILocation(line: 652, column: 17, scope: !6956)
!6960 = !DILocation(line: 652, column: 15, scope: !6956)
!6961 = !DILocation(line: 652, column: 8, scope: !6919)
!6962 = !DILocalVariable(name: "toff", scope: !6963, file: !3, line: 654, type: !2295)
!6963 = distinct !DILexicalBlock(scope: !6956, file: !3, line: 653, column: 6)
!6964 = !DILocation(line: 654, column: 22, scope: !6963)
!6965 = !DILocation(line: 654, column: 29, scope: !6963)
!6966 = !DILocation(line: 655, column: 16, scope: !6963)
!6967 = !DILocation(line: 655, column: 23, scope: !6963)
!6968 = !DILocation(line: 655, column: 13, scope: !6963)
!6969 = !DILocation(line: 656, column: 32, scope: !6963)
!6970 = !DILocation(line: 656, column: 17, scope: !6963)
!6971 = !DILocation(line: 656, column: 16, scope: !6963)
!6972 = !DILocation(line: 656, column: 13, scope: !6963)
!6973 = !DILocation(line: 657, column: 12, scope: !6974)
!6974 = distinct !DILexicalBlock(scope: !6963, file: !3, line: 657, column: 12)
!6975 = !DILocation(line: 657, column: 21, scope: !6974)
!6976 = !DILocation(line: 657, column: 28, scope: !6974)
!6977 = !DILocation(line: 657, column: 26, scope: !6974)
!6978 = !DILocation(line: 657, column: 18, scope: !6974)
!6979 = !DILocation(line: 657, column: 38, scope: !6974)
!6980 = !DILocation(line: 657, column: 36, scope: !6974)
!6981 = !DILocation(line: 657, column: 12, scope: !6963)
!6982 = !DILocation(line: 658, column: 3, scope: !6974)
!6983 = !DILocation(line: 660, column: 17, scope: !6963)
!6984 = !DILocation(line: 660, column: 24, scope: !6963)
!6985 = !DILocation(line: 660, column: 22, scope: !6963)
!6986 = !DILocation(line: 660, column: 14, scope: !6963)
!6987 = !DILocation(line: 661, column: 17, scope: !6963)
!6988 = !DILocation(line: 661, column: 15, scope: !6963)
!6989 = !DILocation(line: 662, column: 6, scope: !6963)
!6990 = !DILocation(line: 665, column: 22, scope: !6919)
!6991 = !DILocation(line: 665, column: 25, scope: !6919)
!6992 = !DILocation(line: 665, column: 28, scope: !6919)
!6993 = !DILocation(line: 665, column: 4, scope: !6919)
!6994 = !DILocation(line: 667, column: 13, scope: !6919)
!6995 = !DILocation(line: 667, column: 10, scope: !6919)
!6996 = !DILocation(line: 668, column: 8, scope: !6997)
!6997 = distinct !DILexicalBlock(scope: !6919, file: !3, line: 668, column: 8)
!6998 = !DILocation(line: 668, column: 14, scope: !6997)
!6999 = !DILocation(line: 668, column: 8, scope: !6919)
!7000 = !DILocation(line: 669, column: 6, scope: !6997)
!7001 = !DILocation(line: 633, column: 7, scope: !6915)
!7002 = !DILocation(line: 671, column: 5, scope: !6899)
!7003 = !DILocation(line: 627, column: 24, scope: !6894)
!7004 = !DILocation(line: 627, column: 3, scope: !6894)
!7005 = distinct !{!7005, !6897, !7006}
!7006 = !DILocation(line: 671, column: 5, scope: !6891)
!7007 = !DILocation(line: 673, column: 7, scope: !7008)
!7008 = distinct !DILexicalBlock(scope: !6856, file: !3, line: 673, column: 7)
!7009 = !DILocation(line: 673, column: 7, scope: !6856)
!7010 = !DILocation(line: 674, column: 5, scope: !7008)
!7011 = !DILocation(line: 675, column: 1, scope: !6856)
!7012 = distinct !DISubprogram(name: "dump_stack_var_partition", scope: !3, file: !3, line: 680, type: !3913, scopeLine: 681, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7013 = !DILocalVariable(name: "si", scope: !7012, file: !3, line: 682, type: !2140)
!7014 = !DILocation(line: 682, column: 10, scope: !7012)
!7015 = !DILocalVariable(name: "i", scope: !7012, file: !3, line: 682, type: !2140)
!7016 = !DILocation(line: 682, column: 14, scope: !7012)
!7017 = !DILocalVariable(name: "j", scope: !7012, file: !3, line: 682, type: !2140)
!7018 = !DILocation(line: 682, column: 17, scope: !7012)
!7019 = !DILocalVariable(name: "n", scope: !7012, file: !3, line: 682, type: !2140)
!7020 = !DILocation(line: 682, column: 20, scope: !7012)
!7021 = !DILocation(line: 682, column: 24, scope: !7012)
!7022 = !DILocation(line: 684, column: 11, scope: !7023)
!7023 = distinct !DILexicalBlock(scope: !7012, file: !3, line: 684, column: 3)
!7024 = !DILocation(line: 684, column: 8, scope: !7023)
!7025 = !DILocation(line: 684, column: 16, scope: !7026)
!7026 = distinct !DILexicalBlock(scope: !7023, file: !3, line: 684, column: 3)
!7027 = !DILocation(line: 684, column: 21, scope: !7026)
!7028 = !DILocation(line: 684, column: 19, scope: !7026)
!7029 = !DILocation(line: 684, column: 3, scope: !7023)
!7030 = !DILocation(line: 686, column: 11, scope: !7031)
!7031 = distinct !DILexicalBlock(scope: !7026, file: !3, line: 685, column: 5)
!7032 = !DILocation(line: 686, column: 29, scope: !7031)
!7033 = !DILocation(line: 686, column: 9, scope: !7031)
!7034 = !DILocation(line: 689, column: 11, scope: !7035)
!7035 = distinct !DILexicalBlock(scope: !7031, file: !3, line: 689, column: 11)
!7036 = !DILocation(line: 689, column: 22, scope: !7035)
!7037 = !DILocation(line: 689, column: 25, scope: !7035)
!7038 = !DILocation(line: 689, column: 43, scope: !7035)
!7039 = !DILocation(line: 689, column: 40, scope: !7035)
!7040 = !DILocation(line: 689, column: 11, scope: !7031)
!7041 = !DILocation(line: 690, column: 2, scope: !7035)
!7042 = !DILocation(line: 692, column: 16, scope: !7031)
!7043 = !DILocation(line: 693, column: 40, scope: !7031)
!7044 = !DILocation(line: 693, column: 43, scope: !7031)
!7045 = !DILocation(line: 693, column: 54, scope: !7031)
!7046 = !DILocation(line: 693, column: 57, scope: !7031)
!7047 = !DILocation(line: 694, column: 9, scope: !7031)
!7048 = !DILocation(line: 694, column: 20, scope: !7031)
!7049 = !DILocation(line: 694, column: 23, scope: !7031)
!7050 = !DILocation(line: 692, column: 7, scope: !7031)
!7051 = !DILocation(line: 696, column: 16, scope: !7052)
!7052 = distinct !DILexicalBlock(scope: !7031, file: !3, line: 696, column: 7)
!7053 = !DILocation(line: 696, column: 14, scope: !7052)
!7054 = !DILocation(line: 696, column: 12, scope: !7052)
!7055 = !DILocation(line: 696, column: 19, scope: !7056)
!7056 = distinct !DILexicalBlock(scope: !7052, file: !3, line: 696, column: 7)
!7057 = !DILocation(line: 696, column: 21, scope: !7056)
!7058 = !DILocation(line: 696, column: 7, scope: !7052)
!7059 = !DILocation(line: 698, column: 17, scope: !7060)
!7060 = distinct !DILexicalBlock(scope: !7056, file: !3, line: 697, column: 2)
!7061 = !DILocation(line: 698, column: 4, scope: !7060)
!7062 = !DILocation(line: 699, column: 24, scope: !7060)
!7063 = !DILocation(line: 699, column: 35, scope: !7060)
!7064 = !DILocation(line: 699, column: 46, scope: !7060)
!7065 = !DILocation(line: 699, column: 49, scope: !7060)
!7066 = !DILocation(line: 699, column: 55, scope: !7060)
!7067 = !DILocation(line: 699, column: 4, scope: !7060)
!7068 = !DILocation(line: 700, column: 13, scope: !7060)
!7069 = !DILocation(line: 701, column: 6, scope: !7060)
!7070 = !DILocation(line: 701, column: 17, scope: !7060)
!7071 = !DILocation(line: 701, column: 20, scope: !7060)
!7072 = !DILocation(line: 700, column: 4, scope: !7060)
!7073 = !DILocation(line: 702, column: 2, scope: !7060)
!7074 = !DILocation(line: 696, column: 33, scope: !7056)
!7075 = !DILocation(line: 696, column: 44, scope: !7056)
!7076 = !DILocation(line: 696, column: 47, scope: !7056)
!7077 = !DILocation(line: 696, column: 31, scope: !7056)
!7078 = !DILocation(line: 696, column: 7, scope: !7056)
!7079 = distinct !{!7079, !7058, !7080}
!7080 = !DILocation(line: 702, column: 2, scope: !7052)
!7081 = !DILocation(line: 703, column: 5, scope: !7031)
!7082 = !DILocation(line: 684, column: 24, scope: !7026)
!7083 = !DILocation(line: 684, column: 3, scope: !7026)
!7084 = distinct !{!7084, !7029, !7085}
!7085 = !DILocation(line: 703, column: 5, scope: !7023)
!7086 = !DILocation(line: 704, column: 1, scope: !7012)
!7087 = distinct !DISubprogram(name: "create_stack_guard", scope: !3, file: !3, line: 1186, type: !3913, scopeLine: 1187, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7088 = !DILocalVariable(name: "guard", scope: !7087, file: !3, line: 1188, type: !2326)
!7089 = !DILocation(line: 1188, column: 8, scope: !7087)
!7090 = !DILocation(line: 1188, column: 16, scope: !7087)
!7091 = !DILocation(line: 1190, column: 3, scope: !7087)
!7092 = !DILocation(line: 1190, column: 30, scope: !7087)
!7093 = !DILocation(line: 1191, column: 3, scope: !7087)
!7094 = !DILocation(line: 1191, column: 21, scope: !7087)
!7095 = !DILocation(line: 1192, column: 25, scope: !7087)
!7096 = !DILocation(line: 1192, column: 3, scope: !7087)
!7097 = !DILocation(line: 1193, column: 31, scope: !7087)
!7098 = !DILocation(line: 1193, column: 29, scope: !7087)
!7099 = !DILocation(line: 1194, column: 1, scope: !7087)
!7100 = distinct !DISubprogram(name: "expand_stack_vars", scope: !3, file: !3, line: 747, type: !7101, scopeLine: 748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7101 = !DISubroutineType(types: !7102)
!7102 = !{null, !7103}
!7103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7104, size: 64)
!7104 = !DISubroutineType(types: !7105)
!7105 = !{!2439, !2326}
!7106 = !DILocalVariable(name: "pred", arg: 1, scope: !7100, file: !3, line: 747, type: !7103)
!7107 = !DILocation(line: 747, column: 27, scope: !7100)
!7108 = !DILocalVariable(name: "si", scope: !7100, file: !3, line: 749, type: !2140)
!7109 = !DILocation(line: 749, column: 10, scope: !7100)
!7110 = !DILocalVariable(name: "i", scope: !7100, file: !3, line: 749, type: !2140)
!7111 = !DILocation(line: 749, column: 14, scope: !7100)
!7112 = !DILocalVariable(name: "j", scope: !7100, file: !3, line: 749, type: !2140)
!7113 = !DILocation(line: 749, column: 17, scope: !7100)
!7114 = !DILocalVariable(name: "n", scope: !7100, file: !3, line: 749, type: !2140)
!7115 = !DILocation(line: 749, column: 20, scope: !7100)
!7116 = !DILocation(line: 749, column: 24, scope: !7100)
!7117 = !DILocation(line: 751, column: 11, scope: !7118)
!7118 = distinct !DILexicalBlock(scope: !7100, file: !3, line: 751, column: 3)
!7119 = !DILocation(line: 751, column: 8, scope: !7118)
!7120 = !DILocation(line: 751, column: 16, scope: !7121)
!7121 = distinct !DILexicalBlock(scope: !7118, file: !3, line: 751, column: 3)
!7122 = !DILocation(line: 751, column: 21, scope: !7121)
!7123 = !DILocation(line: 751, column: 19, scope: !7121)
!7124 = !DILocation(line: 751, column: 3, scope: !7118)
!7125 = !DILocalVariable(name: "offset", scope: !7126, file: !3, line: 753, type: !2295)
!7126 = distinct !DILexicalBlock(scope: !7121, file: !3, line: 752, column: 5)
!7127 = !DILocation(line: 753, column: 21, scope: !7126)
!7128 = !DILocation(line: 755, column: 11, scope: !7126)
!7129 = !DILocation(line: 755, column: 29, scope: !7126)
!7130 = !DILocation(line: 755, column: 9, scope: !7126)
!7131 = !DILocation(line: 758, column: 11, scope: !7132)
!7132 = distinct !DILexicalBlock(scope: !7126, file: !3, line: 758, column: 11)
!7133 = !DILocation(line: 758, column: 22, scope: !7132)
!7134 = !DILocation(line: 758, column: 25, scope: !7132)
!7135 = !DILocation(line: 758, column: 43, scope: !7132)
!7136 = !DILocation(line: 758, column: 40, scope: !7132)
!7137 = !DILocation(line: 758, column: 11, scope: !7126)
!7138 = !DILocation(line: 759, column: 2, scope: !7132)
!7139 = !DILocation(line: 763, column: 12, scope: !7140)
!7140 = distinct !DILexicalBlock(scope: !7126, file: !3, line: 763, column: 11)
!7141 = !DILocation(line: 763, column: 43, scope: !7140)
!7142 = !DILocation(line: 764, column: 10, scope: !7140)
!7143 = !DILocation(line: 764, column: 51, scope: !7140)
!7144 = !DILocation(line: 764, column: 56, scope: !7140)
!7145 = !DILocation(line: 764, column: 67, scope: !7140)
!7146 = !DILocation(line: 764, column: 70, scope: !7140)
!7147 = !DILocation(line: 764, column: 30, scope: !7140)
!7148 = !DILocation(line: 764, column: 7, scope: !7140)
!7149 = !DILocation(line: 765, column: 7, scope: !7140)
!7150 = !DILocation(line: 765, column: 41, scope: !7140)
!7151 = !DILocation(line: 765, column: 38, scope: !7140)
!7152 = !DILocation(line: 763, column: 11, scope: !7126)
!7153 = !DILocation(line: 766, column: 2, scope: !7140)
!7154 = !DILocation(line: 770, column: 11, scope: !7155)
!7155 = distinct !DILexicalBlock(scope: !7126, file: !3, line: 770, column: 11)
!7156 = !DILocation(line: 770, column: 16, scope: !7155)
!7157 = !DILocation(line: 770, column: 20, scope: !7155)
!7158 = !DILocation(line: 770, column: 26, scope: !7155)
!7159 = !DILocation(line: 770, column: 37, scope: !7155)
!7160 = !DILocation(line: 770, column: 40, scope: !7155)
!7161 = !DILocation(line: 770, column: 11, scope: !7126)
!7162 = !DILocation(line: 771, column: 2, scope: !7155)
!7163 = !DILocation(line: 773, column: 41, scope: !7126)
!7164 = !DILocation(line: 773, column: 52, scope: !7126)
!7165 = !DILocation(line: 773, column: 55, scope: !7126)
!7166 = !DILocation(line: 774, column: 6, scope: !7126)
!7167 = !DILocation(line: 774, column: 17, scope: !7126)
!7168 = !DILocation(line: 774, column: 20, scope: !7126)
!7169 = !DILocation(line: 773, column: 16, scope: !7126)
!7170 = !DILocation(line: 773, column: 14, scope: !7126)
!7171 = !DILocation(line: 778, column: 16, scope: !7172)
!7172 = distinct !DILexicalBlock(scope: !7126, file: !3, line: 778, column: 7)
!7173 = !DILocation(line: 778, column: 14, scope: !7172)
!7174 = !DILocation(line: 778, column: 12, scope: !7172)
!7175 = !DILocation(line: 778, column: 19, scope: !7176)
!7176 = distinct !DILexicalBlock(scope: !7172, file: !3, line: 778, column: 7)
!7177 = !DILocation(line: 778, column: 21, scope: !7176)
!7178 = !DILocation(line: 778, column: 7, scope: !7172)
!7179 = !DILocation(line: 780, column: 4, scope: !7180)
!7180 = distinct !DILexicalBlock(scope: !7176, file: !3, line: 779, column: 2)
!7181 = !DILocation(line: 781, column: 29, scope: !7180)
!7182 = !DILocation(line: 781, column: 40, scope: !7180)
!7183 = !DILocation(line: 781, column: 43, scope: !7180)
!7184 = !DILocation(line: 782, column: 8, scope: !7180)
!7185 = !DILocation(line: 782, column: 19, scope: !7180)
!7186 = !DILocation(line: 782, column: 22, scope: !7180)
!7187 = !DILocation(line: 782, column: 31, scope: !7180)
!7188 = !DILocation(line: 782, column: 29, scope: !7180)
!7189 = !DILocation(line: 781, column: 4, scope: !7180)
!7190 = !DILocation(line: 783, column: 2, scope: !7180)
!7191 = !DILocation(line: 778, column: 33, scope: !7176)
!7192 = !DILocation(line: 778, column: 44, scope: !7176)
!7193 = !DILocation(line: 778, column: 47, scope: !7176)
!7194 = !DILocation(line: 778, column: 31, scope: !7176)
!7195 = !DILocation(line: 778, column: 7, scope: !7176)
!7196 = distinct !{!7196, !7178, !7197}
!7197 = !DILocation(line: 783, column: 2, scope: !7172)
!7198 = !DILocation(line: 784, column: 5, scope: !7126)
!7199 = !DILocation(line: 751, column: 24, scope: !7121)
!7200 = !DILocation(line: 751, column: 3, scope: !7121)
!7201 = distinct !{!7201, !7124, !7202}
!7202 = !DILocation(line: 784, column: 5, scope: !7118)
!7203 = !DILocation(line: 785, column: 1, scope: !7100)
!7204 = distinct !DISubprogram(name: "stack_protect_decl_phase_1", scope: !3, file: !3, line: 1148, type: !7104, scopeLine: 1149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7205 = !DILocalVariable(name: "decl", arg: 1, scope: !7204, file: !3, line: 1148, type: !2326)
!7206 = !DILocation(line: 1148, column: 34, scope: !7204)
!7207 = !DILocation(line: 1150, column: 36, scope: !7204)
!7208 = !DILocation(line: 1150, column: 10, scope: !7204)
!7209 = !DILocation(line: 1150, column: 42, scope: !7204)
!7210 = !DILocation(line: 1150, column: 3, scope: !7204)
!7211 = distinct !DISubprogram(name: "stack_protect_decl_phase_2", scope: !3, file: !3, line: 1154, type: !7104, scopeLine: 1155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7212 = !DILocalVariable(name: "decl", arg: 1, scope: !7211, file: !3, line: 1154, type: !2326)
!7213 = !DILocation(line: 1154, column: 34, scope: !7211)
!7214 = !DILocation(line: 1156, column: 36, scope: !7211)
!7215 = !DILocation(line: 1156, column: 10, scope: !7211)
!7216 = !DILocation(line: 1156, column: 42, scope: !7211)
!7217 = !DILocation(line: 1156, column: 3, scope: !7211)
!7218 = distinct !DISubprogram(name: "add_stack_var_conflict", scope: !3, file: !3, line: 298, type: !7219, scopeLine: 299, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7219 = !DISubroutineType(types: !7220)
!7220 = !{null, !2140, !2140}
!7221 = !DILocalVariable(name: "x", arg: 1, scope: !7218, file: !3, line: 298, type: !2140)
!7222 = !DILocation(line: 298, column: 32, scope: !7218)
!7223 = !DILocalVariable(name: "y", arg: 2, scope: !7218, file: !3, line: 298, type: !2140)
!7224 = !DILocation(line: 298, column: 42, scope: !7218)
!7225 = !DILocalVariable(name: "a", scope: !7218, file: !3, line: 300, type: !3536)
!7226 = !DILocation(line: 300, column: 21, scope: !7218)
!7227 = !DILocation(line: 300, column: 26, scope: !7218)
!7228 = !DILocation(line: 300, column: 37, scope: !7218)
!7229 = !DILocalVariable(name: "b", scope: !7218, file: !3, line: 301, type: !3536)
!7230 = !DILocation(line: 301, column: 21, scope: !7218)
!7231 = !DILocation(line: 301, column: 26, scope: !7218)
!7232 = !DILocation(line: 301, column: 37, scope: !7218)
!7233 = !DILocation(line: 302, column: 8, scope: !7234)
!7234 = distinct !DILexicalBlock(scope: !7218, file: !3, line: 302, column: 7)
!7235 = !DILocation(line: 302, column: 11, scope: !7234)
!7236 = !DILocation(line: 302, column: 7, scope: !7218)
!7237 = !DILocation(line: 303, column: 20, scope: !7234)
!7238 = !DILocation(line: 303, column: 5, scope: !7234)
!7239 = !DILocation(line: 303, column: 8, scope: !7234)
!7240 = !DILocation(line: 303, column: 18, scope: !7234)
!7241 = !DILocation(line: 304, column: 8, scope: !7242)
!7242 = distinct !DILexicalBlock(scope: !7218, file: !3, line: 304, column: 7)
!7243 = !DILocation(line: 304, column: 11, scope: !7242)
!7244 = !DILocation(line: 304, column: 7, scope: !7218)
!7245 = !DILocation(line: 305, column: 20, scope: !7242)
!7246 = !DILocation(line: 305, column: 5, scope: !7242)
!7247 = !DILocation(line: 305, column: 8, scope: !7242)
!7248 = !DILocation(line: 305, column: 18, scope: !7242)
!7249 = !DILocation(line: 306, column: 19, scope: !7218)
!7250 = !DILocation(line: 306, column: 22, scope: !7218)
!7251 = !DILocation(line: 306, column: 33, scope: !7218)
!7252 = !DILocation(line: 306, column: 3, scope: !7218)
!7253 = !DILocation(line: 307, column: 19, scope: !7218)
!7254 = !DILocation(line: 307, column: 22, scope: !7218)
!7255 = !DILocation(line: 307, column: 33, scope: !7218)
!7256 = !DILocation(line: 307, column: 3, scope: !7218)
!7257 = !DILocation(line: 308, column: 1, scope: !7218)
!7258 = distinct !DISubprogram(name: "aggregate_contains_union_type", scope: !3, file: !3, line: 325, type: !7104, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7259 = !DILocalVariable(name: "type", arg: 1, scope: !7258, file: !3, line: 325, type: !2326)
!7260 = !DILocation(line: 325, column: 37, scope: !7258)
!7261 = !DILocalVariable(name: "field", scope: !7258, file: !3, line: 327, type: !2326)
!7262 = !DILocation(line: 327, column: 8, scope: !7258)
!7263 = !DILocation(line: 329, column: 7, scope: !7264)
!7264 = distinct !DILexicalBlock(scope: !7258, file: !3, line: 329, column: 7)
!7265 = !DILocation(line: 329, column: 24, scope: !7264)
!7266 = !DILocation(line: 330, column: 7, scope: !7264)
!7267 = !DILocation(line: 330, column: 10, scope: !7264)
!7268 = !DILocation(line: 330, column: 27, scope: !7264)
!7269 = !DILocation(line: 329, column: 7, scope: !7258)
!7270 = !DILocation(line: 331, column: 5, scope: !7264)
!7271 = !DILocation(line: 332, column: 7, scope: !7272)
!7272 = distinct !DILexicalBlock(scope: !7258, file: !3, line: 332, column: 7)
!7273 = !DILocation(line: 332, column: 24, scope: !7272)
!7274 = !DILocation(line: 332, column: 7, scope: !7258)
!7275 = !DILocation(line: 333, column: 43, scope: !7272)
!7276 = !DILocation(line: 333, column: 12, scope: !7272)
!7277 = !DILocation(line: 333, column: 5, scope: !7272)
!7278 = !DILocation(line: 334, column: 7, scope: !7279)
!7279 = distinct !DILexicalBlock(scope: !7258, file: !3, line: 334, column: 7)
!7280 = !DILocation(line: 334, column: 24, scope: !7279)
!7281 = !DILocation(line: 334, column: 7, scope: !7258)
!7282 = !DILocation(line: 335, column: 5, scope: !7279)
!7283 = !DILocation(line: 337, column: 16, scope: !7284)
!7284 = distinct !DILexicalBlock(scope: !7258, file: !3, line: 337, column: 3)
!7285 = !DILocation(line: 337, column: 14, scope: !7284)
!7286 = !DILocation(line: 337, column: 8, scope: !7284)
!7287 = !DILocation(line: 337, column: 36, scope: !7288)
!7288 = distinct !DILexicalBlock(scope: !7284, file: !3, line: 337, column: 3)
!7289 = !DILocation(line: 337, column: 3, scope: !7284)
!7290 = !DILocation(line: 338, column: 9, scope: !7291)
!7291 = distinct !DILexicalBlock(scope: !7288, file: !3, line: 338, column: 9)
!7292 = !DILocation(line: 338, column: 27, scope: !7291)
!7293 = !DILocation(line: 338, column: 9, scope: !7288)
!7294 = !DILocation(line: 339, column: 42, scope: !7295)
!7295 = distinct !DILexicalBlock(scope: !7291, file: !3, line: 339, column: 11)
!7296 = !DILocation(line: 339, column: 11, scope: !7295)
!7297 = !DILocation(line: 339, column: 11, scope: !7291)
!7298 = !DILocation(line: 340, column: 2, scope: !7295)
!7299 = !DILocation(line: 339, column: 59, scope: !7295)
!7300 = !DILocation(line: 338, column: 30, scope: !7291)
!7301 = !DILocation(line: 337, column: 51, scope: !7288)
!7302 = !DILocation(line: 337, column: 49, scope: !7288)
!7303 = !DILocation(line: 337, column: 3, scope: !7288)
!7304 = distinct !{!7304, !7289, !7305}
!7305 = !DILocation(line: 340, column: 9, scope: !7284)
!7306 = !DILocation(line: 342, column: 3, scope: !7258)
!7307 = !DILocation(line: 343, column: 1, scope: !7258)
!7308 = distinct !DISubprogram(name: "stack_protect_decl_phase", scope: !3, file: !3, line: 1119, type: !7309, scopeLine: 1120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7309 = !DISubroutineType(types: !7310)
!7310 = !{!2136, !2326}
!7311 = !DILocalVariable(name: "decl", arg: 1, scope: !7308, file: !3, line: 1119, type: !2326)
!7312 = !DILocation(line: 1119, column: 32, scope: !7308)
!7313 = !DILocalVariable(name: "bits", scope: !7308, file: !3, line: 1121, type: !7)
!7314 = !DILocation(line: 1121, column: 16, scope: !7308)
!7315 = !DILocation(line: 1121, column: 52, scope: !7308)
!7316 = !DILocation(line: 1121, column: 23, scope: !7308)
!7317 = !DILocalVariable(name: "ret", scope: !7308, file: !3, line: 1122, type: !2136)
!7318 = !DILocation(line: 1122, column: 7, scope: !7308)
!7319 = !DILocation(line: 1124, column: 7, scope: !7320)
!7320 = distinct !DILexicalBlock(scope: !7308, file: !3, line: 1124, column: 7)
!7321 = !DILocation(line: 1124, column: 12, scope: !7320)
!7322 = !DILocation(line: 1124, column: 7, scope: !7308)
!7323 = !DILocation(line: 1125, column: 22, scope: !7320)
!7324 = !DILocation(line: 1125, column: 5, scope: !7320)
!7325 = !DILocation(line: 1127, column: 7, scope: !7326)
!7326 = distinct !DILexicalBlock(scope: !7308, file: !3, line: 1127, column: 7)
!7327 = !DILocation(line: 1127, column: 26, scope: !7326)
!7328 = !DILocation(line: 1127, column: 7, scope: !7308)
!7329 = !DILocation(line: 1129, column: 12, scope: !7330)
!7330 = distinct !DILexicalBlock(scope: !7331, file: !3, line: 1129, column: 11)
!7331 = distinct !DILexicalBlock(scope: !7326, file: !3, line: 1128, column: 5)
!7332 = !DILocation(line: 1129, column: 17, scope: !7330)
!7333 = !DILocation(line: 1130, column: 4, scope: !7330)
!7334 = !DILocation(line: 1130, column: 9, scope: !7330)
!7335 = !DILocation(line: 1130, column: 14, scope: !7330)
!7336 = !DILocation(line: 1129, column: 11, scope: !7331)
!7337 = !DILocation(line: 1131, column: 6, scope: !7330)
!7338 = !DILocation(line: 1131, column: 2, scope: !7330)
!7339 = !DILocation(line: 1132, column: 16, scope: !7340)
!7340 = distinct !DILexicalBlock(scope: !7330, file: !3, line: 1132, column: 16)
!7341 = !DILocation(line: 1132, column: 21, scope: !7340)
!7342 = !DILocation(line: 1132, column: 16, scope: !7330)
!7343 = !DILocation(line: 1133, column: 6, scope: !7340)
!7344 = !DILocation(line: 1133, column: 2, scope: !7340)
!7345 = !DILocation(line: 1134, column: 5, scope: !7331)
!7346 = !DILocation(line: 1136, column: 12, scope: !7326)
!7347 = !DILocation(line: 1136, column: 17, scope: !7326)
!7348 = !DILocation(line: 1136, column: 46, scope: !7326)
!7349 = !DILocation(line: 1136, column: 9, scope: !7326)
!7350 = !DILocation(line: 1138, column: 7, scope: !7351)
!7351 = distinct !DILexicalBlock(scope: !7308, file: !3, line: 1138, column: 7)
!7352 = !DILocation(line: 1138, column: 7, scope: !7308)
!7353 = !DILocation(line: 1139, column: 25, scope: !7351)
!7354 = !DILocation(line: 1139, column: 5, scope: !7351)
!7355 = !DILocation(line: 1141, column: 10, scope: !7308)
!7356 = !DILocation(line: 1141, column: 3, scope: !7308)
!7357 = distinct !DISubprogram(name: "stack_protect_classify_type", scope: !3, file: !3, line: 1066, type: !4930, scopeLine: 1067, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7358 = !DILocalVariable(name: "type", arg: 1, scope: !7357, file: !3, line: 1066, type: !2326)
!7359 = !DILocation(line: 1066, column: 35, scope: !7357)
!7360 = !DILocalVariable(name: "ret", scope: !7357, file: !3, line: 1068, type: !7)
!7361 = !DILocation(line: 1068, column: 16, scope: !7357)
!7362 = !DILocalVariable(name: "t", scope: !7357, file: !3, line: 1069, type: !2326)
!7363 = !DILocation(line: 1069, column: 8, scope: !7357)
!7364 = !DILocation(line: 1071, column: 11, scope: !7357)
!7365 = !DILocation(line: 1071, column: 3, scope: !7357)
!7366 = !DILocation(line: 1074, column: 11, scope: !7367)
!7367 = distinct !DILexicalBlock(scope: !7357, file: !3, line: 1072, column: 5)
!7368 = !DILocation(line: 1074, column: 9, scope: !7367)
!7369 = !DILocation(line: 1075, column: 11, scope: !7370)
!7370 = distinct !DILexicalBlock(scope: !7367, file: !3, line: 1075, column: 11)
!7371 = !DILocation(line: 1075, column: 16, scope: !7370)
!7372 = !DILocation(line: 1075, column: 13, scope: !7370)
!7373 = !DILocation(line: 1076, column: 4, scope: !7370)
!7374 = !DILocation(line: 1076, column: 7, scope: !7370)
!7375 = !DILocation(line: 1076, column: 12, scope: !7370)
!7376 = !DILocation(line: 1076, column: 9, scope: !7370)
!7377 = !DILocation(line: 1077, column: 4, scope: !7370)
!7378 = !DILocation(line: 1077, column: 7, scope: !7370)
!7379 = !DILocation(line: 1077, column: 12, scope: !7370)
!7380 = !DILocation(line: 1077, column: 9, scope: !7370)
!7381 = !DILocation(line: 1075, column: 11, scope: !7367)
!7382 = !DILocalVariable(name: "max", scope: !7383, file: !3, line: 1079, type: !2142)
!7383 = distinct !DILexicalBlock(scope: !7370, file: !3, line: 1078, column: 2)
!7384 = !DILocation(line: 1079, column: 27, scope: !7383)
!7385 = !DILocation(line: 1079, column: 33, scope: !7383)
!7386 = !DILocalVariable(name: "len", scope: !7383, file: !3, line: 1080, type: !2142)
!7387 = !DILocation(line: 1080, column: 27, scope: !7383)
!7388 = !DILocation(line: 1082, column: 9, scope: !7389)
!7389 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 1082, column: 8)
!7390 = !DILocation(line: 1083, column: 8, scope: !7389)
!7391 = !DILocation(line: 1083, column: 27, scope: !7389)
!7392 = !DILocation(line: 1083, column: 12, scope: !7389)
!7393 = !DILocation(line: 1082, column: 8, scope: !7383)
!7394 = !DILocation(line: 1084, column: 12, scope: !7389)
!7395 = !DILocation(line: 1084, column: 10, scope: !7389)
!7396 = !DILocation(line: 1084, column: 6, scope: !7389)
!7397 = !DILocation(line: 1086, column: 26, scope: !7389)
!7398 = !DILocation(line: 1086, column: 12, scope: !7389)
!7399 = !DILocation(line: 1086, column: 10, scope: !7389)
!7400 = !DILocation(line: 1088, column: 8, scope: !7401)
!7401 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 1088, column: 8)
!7402 = !DILocation(line: 1088, column: 14, scope: !7401)
!7403 = !DILocation(line: 1088, column: 12, scope: !7401)
!7404 = !DILocation(line: 1088, column: 8, scope: !7383)
!7405 = !DILocation(line: 1089, column: 10, scope: !7401)
!7406 = !DILocation(line: 1089, column: 6, scope: !7401)
!7407 = !DILocation(line: 1091, column: 10, scope: !7401)
!7408 = !DILocation(line: 1092, column: 2, scope: !7383)
!7409 = !DILocation(line: 1094, column: 6, scope: !7370)
!7410 = !DILocation(line: 1095, column: 7, scope: !7367)
!7411 = !DILocation(line: 1100, column: 11, scope: !7367)
!7412 = !DILocation(line: 1101, column: 16, scope: !7413)
!7413 = distinct !DILexicalBlock(scope: !7367, file: !3, line: 1101, column: 7)
!7414 = !DILocation(line: 1101, column: 14, scope: !7413)
!7415 = !DILocation(line: 1101, column: 12, scope: !7413)
!7416 = !DILocation(line: 1101, column: 36, scope: !7417)
!7417 = distinct !DILexicalBlock(scope: !7413, file: !3, line: 1101, column: 7)
!7418 = !DILocation(line: 1101, column: 7, scope: !7413)
!7419 = !DILocation(line: 1102, column: 6, scope: !7420)
!7420 = distinct !DILexicalBlock(scope: !7417, file: !3, line: 1102, column: 6)
!7421 = !DILocation(line: 1102, column: 20, scope: !7420)
!7422 = !DILocation(line: 1102, column: 6, scope: !7417)
!7423 = !DILocation(line: 1103, column: 40, scope: !7420)
!7424 = !DILocation(line: 1103, column: 11, scope: !7420)
!7425 = !DILocation(line: 1103, column: 8, scope: !7420)
!7426 = !DILocation(line: 1103, column: 4, scope: !7420)
!7427 = !DILocation(line: 1102, column: 23, scope: !7420)
!7428 = !DILocation(line: 1101, column: 44, scope: !7417)
!7429 = !DILocation(line: 1101, column: 42, scope: !7417)
!7430 = !DILocation(line: 1101, column: 7, scope: !7417)
!7431 = distinct !{!7431, !7418, !7432}
!7432 = !DILocation(line: 1103, column: 53, scope: !7413)
!7433 = !DILocation(line: 1104, column: 7, scope: !7367)
!7434 = !DILocation(line: 1107, column: 7, scope: !7367)
!7435 = !DILocation(line: 1110, column: 10, scope: !7357)
!7436 = !DILocation(line: 1110, column: 3, scope: !7357)
!7437 = distinct !DISubprogram(name: "stack_var_size_cmp", scope: !3, file: !3, line: 390, type: !2678, scopeLine: 391, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7438 = !DILocalVariable(name: "a", arg: 1, scope: !7437, file: !3, line: 390, type: !2673)
!7439 = !DILocation(line: 390, column: 33, scope: !7437)
!7440 = !DILocalVariable(name: "b", arg: 2, scope: !7437, file: !3, line: 390, type: !2673)
!7441 = !DILocation(line: 390, column: 48, scope: !7437)
!7442 = !DILocalVariable(name: "sa", scope: !7437, file: !3, line: 392, type: !2295)
!7443 = !DILocation(line: 392, column: 17, scope: !7437)
!7444 = !DILocation(line: 392, column: 22, scope: !7437)
!7445 = !DILocation(line: 392, column: 50, scope: !7437)
!7446 = !DILocation(line: 392, column: 34, scope: !7437)
!7447 = !DILocation(line: 392, column: 33, scope: !7437)
!7448 = !DILocation(line: 392, column: 53, scope: !7437)
!7449 = !DILocalVariable(name: "sb", scope: !7437, file: !3, line: 393, type: !2295)
!7450 = !DILocation(line: 393, column: 17, scope: !7437)
!7451 = !DILocation(line: 393, column: 22, scope: !7437)
!7452 = !DILocation(line: 393, column: 50, scope: !7437)
!7453 = !DILocation(line: 393, column: 34, scope: !7437)
!7454 = !DILocation(line: 393, column: 33, scope: !7437)
!7455 = !DILocation(line: 393, column: 53, scope: !7437)
!7456 = !DILocalVariable(name: "decla", scope: !7437, file: !3, line: 394, type: !2326)
!7457 = !DILocation(line: 394, column: 8, scope: !7437)
!7458 = !DILocalVariable(name: "declb", scope: !7437, file: !3, line: 394, type: !2326)
!7459 = !DILocation(line: 394, column: 15, scope: !7437)
!7460 = !DILocalVariable(name: "uida", scope: !7437, file: !3, line: 395, type: !7)
!7461 = !DILocation(line: 395, column: 16, scope: !7437)
!7462 = !DILocalVariable(name: "uidb", scope: !7437, file: !3, line: 395, type: !7)
!7463 = !DILocation(line: 395, column: 22, scope: !7437)
!7464 = !DILocation(line: 397, column: 7, scope: !7465)
!7465 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 397, column: 7)
!7466 = !DILocation(line: 397, column: 12, scope: !7465)
!7467 = !DILocation(line: 397, column: 10, scope: !7465)
!7468 = !DILocation(line: 397, column: 7, scope: !7437)
!7469 = !DILocation(line: 398, column: 5, scope: !7465)
!7470 = !DILocation(line: 399, column: 7, scope: !7471)
!7471 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 399, column: 7)
!7472 = !DILocation(line: 399, column: 12, scope: !7471)
!7473 = !DILocation(line: 399, column: 10, scope: !7471)
!7474 = !DILocation(line: 399, column: 7, scope: !7437)
!7475 = !DILocation(line: 400, column: 5, scope: !7471)
!7476 = !DILocation(line: 401, column: 11, scope: !7437)
!7477 = !DILocation(line: 401, column: 39, scope: !7437)
!7478 = !DILocation(line: 401, column: 23, scope: !7437)
!7479 = !DILocation(line: 401, column: 22, scope: !7437)
!7480 = !DILocation(line: 401, column: 42, scope: !7437)
!7481 = !DILocation(line: 401, column: 9, scope: !7437)
!7482 = !DILocation(line: 402, column: 11, scope: !7437)
!7483 = !DILocation(line: 402, column: 39, scope: !7437)
!7484 = !DILocation(line: 402, column: 23, scope: !7437)
!7485 = !DILocation(line: 402, column: 22, scope: !7437)
!7486 = !DILocation(line: 402, column: 42, scope: !7437)
!7487 = !DILocation(line: 402, column: 9, scope: !7437)
!7488 = !DILocation(line: 407, column: 7, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 407, column: 7)
!7490 = !DILocation(line: 407, column: 25, scope: !7489)
!7491 = !DILocation(line: 407, column: 7, scope: !7437)
!7492 = !DILocation(line: 409, column: 11, scope: !7493)
!7493 = distinct !DILexicalBlock(scope: !7494, file: !3, line: 409, column: 11)
!7494 = distinct !DILexicalBlock(scope: !7489, file: !3, line: 408, column: 5)
!7495 = !DILocation(line: 409, column: 29, scope: !7493)
!7496 = !DILocation(line: 409, column: 11, scope: !7494)
!7497 = !DILocation(line: 410, column: 9, scope: !7493)
!7498 = !DILocation(line: 410, column: 7, scope: !7493)
!7499 = !DILocation(line: 410, column: 42, scope: !7493)
!7500 = !DILocation(line: 410, column: 40, scope: !7493)
!7501 = !DILocation(line: 410, column: 2, scope: !7493)
!7502 = !DILocation(line: 412, column: 2, scope: !7493)
!7503 = !DILocation(line: 413, column: 5, scope: !7494)
!7504 = !DILocation(line: 414, column: 12, scope: !7505)
!7505 = distinct !DILexicalBlock(scope: !7489, file: !3, line: 414, column: 12)
!7506 = !DILocation(line: 414, column: 30, scope: !7505)
!7507 = !DILocation(line: 414, column: 12, scope: !7489)
!7508 = !DILocation(line: 415, column: 5, scope: !7505)
!7509 = !DILocation(line: 417, column: 12, scope: !7505)
!7510 = !DILocation(line: 417, column: 10, scope: !7505)
!7511 = !DILocation(line: 417, column: 37, scope: !7505)
!7512 = !DILocation(line: 417, column: 35, scope: !7505)
!7513 = !DILocation(line: 418, column: 7, scope: !7514)
!7514 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 418, column: 7)
!7515 = !DILocation(line: 418, column: 14, scope: !7514)
!7516 = !DILocation(line: 418, column: 12, scope: !7514)
!7517 = !DILocation(line: 418, column: 7, scope: !7437)
!7518 = !DILocation(line: 419, column: 5, scope: !7514)
!7519 = !DILocation(line: 420, column: 7, scope: !7520)
!7520 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 420, column: 7)
!7521 = !DILocation(line: 420, column: 14, scope: !7520)
!7522 = !DILocation(line: 420, column: 12, scope: !7520)
!7523 = !DILocation(line: 420, column: 7, scope: !7437)
!7524 = !DILocation(line: 421, column: 5, scope: !7520)
!7525 = !DILocation(line: 422, column: 3, scope: !7437)
!7526 = !DILocation(line: 423, column: 1, scope: !7437)
!7527 = distinct !DISubprogram(name: "stack_var_conflict_p", scope: !3, file: !3, line: 313, type: !7528, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7528 = !DISubroutineType(types: !7529)
!7529 = !{!2439, !2140, !2140}
!7530 = !DILocalVariable(name: "x", arg: 1, scope: !7527, file: !3, line: 313, type: !2140)
!7531 = !DILocation(line: 313, column: 30, scope: !7527)
!7532 = !DILocalVariable(name: "y", arg: 2, scope: !7527, file: !3, line: 313, type: !2140)
!7533 = !DILocation(line: 313, column: 40, scope: !7527)
!7534 = !DILocalVariable(name: "a", scope: !7527, file: !3, line: 315, type: !3536)
!7535 = !DILocation(line: 315, column: 21, scope: !7527)
!7536 = !DILocation(line: 315, column: 26, scope: !7527)
!7537 = !DILocation(line: 315, column: 37, scope: !7527)
!7538 = !DILocalVariable(name: "b", scope: !7527, file: !3, line: 316, type: !3536)
!7539 = !DILocation(line: 316, column: 21, scope: !7527)
!7540 = !DILocation(line: 316, column: 26, scope: !7527)
!7541 = !DILocation(line: 316, column: 37, scope: !7527)
!7542 = !DILocation(line: 317, column: 8, scope: !7543)
!7543 = distinct !DILexicalBlock(scope: !7527, file: !3, line: 317, column: 7)
!7544 = !DILocation(line: 317, column: 11, scope: !7543)
!7545 = !DILocation(line: 317, column: 21, scope: !7543)
!7546 = !DILocation(line: 317, column: 25, scope: !7543)
!7547 = !DILocation(line: 317, column: 28, scope: !7543)
!7548 = !DILocation(line: 317, column: 7, scope: !7527)
!7549 = !DILocation(line: 318, column: 5, scope: !7543)
!7550 = !DILocation(line: 319, column: 24, scope: !7527)
!7551 = !DILocation(line: 319, column: 27, scope: !7527)
!7552 = !DILocation(line: 319, column: 38, scope: !7527)
!7553 = !DILocation(line: 319, column: 10, scope: !7527)
!7554 = !DILocation(line: 319, column: 3, scope: !7527)
!7555 = !DILocation(line: 320, column: 1, scope: !7527)
!7556 = distinct !DISubprogram(name: "union_stack_vars", scope: !3, file: !3, line: 561, type: !7557, scopeLine: 562, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7557 = !DISubroutineType(types: !7558)
!7558 = !{null, !2140, !2140, !2295}
!7559 = !DILocalVariable(name: "a", arg: 1, scope: !7556, file: !3, line: 561, type: !2140)
!7560 = !DILocation(line: 561, column: 26, scope: !7556)
!7561 = !DILocalVariable(name: "b", arg: 2, scope: !7556, file: !3, line: 561, type: !2140)
!7562 = !DILocation(line: 561, column: 36, scope: !7556)
!7563 = !DILocalVariable(name: "offset", arg: 3, scope: !7556, file: !3, line: 561, type: !2295)
!7564 = !DILocation(line: 561, column: 53, scope: !7556)
!7565 = !DILocalVariable(name: "i", scope: !7556, file: !3, line: 563, type: !2140)
!7566 = !DILocation(line: 563, column: 10, scope: !7556)
!7567 = !DILocalVariable(name: "last", scope: !7556, file: !3, line: 563, type: !2140)
!7568 = !DILocation(line: 563, column: 13, scope: !7556)
!7569 = !DILocalVariable(name: "vb", scope: !7556, file: !3, line: 564, type: !3536)
!7570 = !DILocation(line: 564, column: 21, scope: !7556)
!7571 = !DILocation(line: 564, column: 27, scope: !7556)
!7572 = !DILocation(line: 564, column: 38, scope: !7556)
!7573 = !DILocalVariable(name: "bi", scope: !7556, file: !3, line: 565, type: !7574)
!7574 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !2265, line: 218, baseType: !7575)
!7575 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2265, line: 203, size: 256, elements: !7576)
!7576 = !{!7577, !7578, !7579, !7580}
!7577 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !7575, file: !2265, line: 206, baseType: !2268, size: 64)
!7578 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !7575, file: !2265, line: 209, baseType: !2268, size: 64, offset: 64)
!7579 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !7575, file: !2265, line: 212, baseType: !7, size: 32, offset: 128)
!7580 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !7575, file: !2265, line: 217, baseType: !2278, size: 64, offset: 192)
!7581 = !DILocation(line: 565, column: 19, scope: !7556)
!7582 = !DILocalVariable(name: "u", scope: !7556, file: !3, line: 566, type: !7)
!7583 = !DILocation(line: 566, column: 12, scope: !7556)
!7584 = !DILocation(line: 570, column: 19, scope: !7585)
!7585 = distinct !DILexicalBlock(scope: !7556, file: !3, line: 570, column: 3)
!7586 = !DILocation(line: 570, column: 17, scope: !7585)
!7587 = !DILocation(line: 570, column: 13, scope: !7585)
!7588 = !DILocation(line: 570, column: 8, scope: !7585)
!7589 = !DILocation(line: 570, column: 22, scope: !7590)
!7590 = distinct !DILexicalBlock(scope: !7585, file: !3, line: 570, column: 3)
!7591 = !DILocation(line: 570, column: 24, scope: !7590)
!7592 = !DILocation(line: 570, column: 3, scope: !7585)
!7593 = !DILocation(line: 572, column: 31, scope: !7594)
!7594 = distinct !DILexicalBlock(scope: !7590, file: !3, line: 571, column: 5)
!7595 = !DILocation(line: 572, column: 7, scope: !7594)
!7596 = !DILocation(line: 572, column: 18, scope: !7594)
!7597 = !DILocation(line: 572, column: 21, scope: !7594)
!7598 = !DILocation(line: 572, column: 28, scope: !7594)
!7599 = !DILocation(line: 573, column: 38, scope: !7594)
!7600 = !DILocation(line: 573, column: 7, scope: !7594)
!7601 = !DILocation(line: 573, column: 18, scope: !7594)
!7602 = !DILocation(line: 573, column: 21, scope: !7594)
!7603 = !DILocation(line: 573, column: 36, scope: !7594)
!7604 = !DILocation(line: 574, column: 5, scope: !7594)
!7605 = !DILocation(line: 570, column: 39, scope: !7590)
!7606 = !DILocation(line: 570, column: 37, scope: !7590)
!7607 = !DILocation(line: 570, column: 46, scope: !7590)
!7608 = !DILocation(line: 570, column: 57, scope: !7590)
!7609 = !DILocation(line: 570, column: 60, scope: !7590)
!7610 = !DILocation(line: 570, column: 44, scope: !7590)
!7611 = !DILocation(line: 570, column: 3, scope: !7590)
!7612 = distinct !{!7612, !7592, !7613}
!7613 = !DILocation(line: 574, column: 5, scope: !7585)
!7614 = !DILocation(line: 575, column: 27, scope: !7556)
!7615 = !DILocation(line: 575, column: 38, scope: !7556)
!7616 = !DILocation(line: 575, column: 41, scope: !7556)
!7617 = !DILocation(line: 575, column: 3, scope: !7556)
!7618 = !DILocation(line: 575, column: 14, scope: !7556)
!7619 = !DILocation(line: 575, column: 20, scope: !7556)
!7620 = !DILocation(line: 575, column: 25, scope: !7556)
!7621 = !DILocation(line: 576, column: 24, scope: !7556)
!7622 = !DILocation(line: 576, column: 3, scope: !7556)
!7623 = !DILocation(line: 576, column: 14, scope: !7556)
!7624 = !DILocation(line: 576, column: 17, scope: !7556)
!7625 = !DILocation(line: 576, column: 22, scope: !7556)
!7626 = !DILocation(line: 579, column: 7, scope: !7627)
!7627 = distinct !DILexicalBlock(scope: !7556, file: !3, line: 579, column: 7)
!7628 = !DILocation(line: 579, column: 18, scope: !7627)
!7629 = !DILocation(line: 579, column: 21, scope: !7627)
!7630 = !DILocation(line: 579, column: 30, scope: !7627)
!7631 = !DILocation(line: 579, column: 41, scope: !7627)
!7632 = !DILocation(line: 579, column: 44, scope: !7627)
!7633 = !DILocation(line: 579, column: 28, scope: !7627)
!7634 = !DILocation(line: 579, column: 7, scope: !7556)
!7635 = !DILocation(line: 580, column: 28, scope: !7627)
!7636 = !DILocation(line: 580, column: 39, scope: !7627)
!7637 = !DILocation(line: 580, column: 42, scope: !7627)
!7638 = !DILocation(line: 580, column: 5, scope: !7627)
!7639 = !DILocation(line: 580, column: 16, scope: !7627)
!7640 = !DILocation(line: 580, column: 19, scope: !7627)
!7641 = !DILocation(line: 580, column: 26, scope: !7627)
!7642 = !DILocation(line: 583, column: 7, scope: !7643)
!7643 = distinct !DILexicalBlock(scope: !7556, file: !3, line: 583, column: 7)
!7644 = !DILocation(line: 583, column: 11, scope: !7643)
!7645 = !DILocation(line: 583, column: 7, scope: !7556)
!7646 = !DILocation(line: 585, column: 7, scope: !7647)
!7647 = distinct !DILexicalBlock(scope: !7648, file: !3, line: 585, column: 7)
!7648 = distinct !DILexicalBlock(scope: !7643, file: !3, line: 584, column: 5)
!7649 = !DILocation(line: 585, column: 7, scope: !7650)
!7650 = distinct !DILexicalBlock(scope: !7647, file: !3, line: 585, column: 7)
!7651 = !DILocation(line: 586, column: 26, scope: !7650)
!7652 = !DILocation(line: 586, column: 29, scope: !7650)
!7653 = !DILocation(line: 586, column: 40, scope: !7650)
!7654 = !DILocation(line: 586, column: 43, scope: !7650)
!7655 = !DILocation(line: 586, column: 2, scope: !7650)
!7656 = distinct !{!7656, !7646, !7657}
!7657 = !DILocation(line: 586, column: 57, scope: !7647)
!7658 = !DILocation(line: 587, column: 7, scope: !7648)
!7659 = !DILocation(line: 588, column: 5, scope: !7648)
!7660 = !DILocation(line: 589, column: 1, scope: !7556)
!7661 = distinct !DISubprogram(name: "update_alias_info_with_stack_vars", scope: !3, file: !3, line: 467, type: !3913, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7662 = !DILocalVariable(name: "decls_to_partitions", scope: !7661, file: !3, line: 469, type: !2809)
!7663 = !DILocation(line: 469, column: 25, scope: !7661)
!7664 = !DILocalVariable(name: "i", scope: !7661, file: !3, line: 470, type: !2140)
!7665 = !DILocation(line: 470, column: 10, scope: !7661)
!7666 = !DILocalVariable(name: "j", scope: !7661, file: !3, line: 470, type: !2140)
!7667 = !DILocation(line: 470, column: 13, scope: !7661)
!7668 = !DILocalVariable(name: "var", scope: !7661, file: !3, line: 471, type: !2326)
!7669 = !DILocation(line: 471, column: 8, scope: !7661)
!7670 = !DILocation(line: 473, column: 10, scope: !7671)
!7671 = distinct !DILexicalBlock(scope: !7661, file: !3, line: 473, column: 3)
!7672 = !DILocation(line: 473, column: 8, scope: !7671)
!7673 = !DILocation(line: 473, column: 15, scope: !7674)
!7674 = distinct !DILexicalBlock(scope: !7671, file: !3, line: 473, column: 3)
!7675 = !DILocation(line: 473, column: 19, scope: !7674)
!7676 = !DILocation(line: 473, column: 17, scope: !7674)
!7677 = !DILocation(line: 473, column: 3, scope: !7671)
!7678 = !DILocalVariable(name: "part", scope: !7679, file: !3, line: 475, type: !2806)
!7679 = distinct !DILexicalBlock(scope: !7674, file: !3, line: 474, column: 5)
!7680 = !DILocation(line: 475, column: 14, scope: !7679)
!7681 = !DILocalVariable(name: "name", scope: !7679, file: !3, line: 476, type: !2326)
!7682 = !DILocation(line: 476, column: 12, scope: !7679)
!7683 = !DILocalVariable(name: "pi", scope: !7679, file: !3, line: 477, type: !3008)
!7684 = !DILocation(line: 477, column: 28, scope: !7679)
!7685 = !DILocation(line: 480, column: 11, scope: !7686)
!7686 = distinct !DILexicalBlock(scope: !7679, file: !3, line: 480, column: 11)
!7687 = !DILocation(line: 480, column: 22, scope: !7686)
!7688 = !DILocation(line: 480, column: 25, scope: !7686)
!7689 = !DILocation(line: 480, column: 43, scope: !7686)
!7690 = !DILocation(line: 480, column: 40, scope: !7686)
!7691 = !DILocation(line: 481, column: 11, scope: !7686)
!7692 = !DILocation(line: 481, column: 14, scope: !7686)
!7693 = !DILocation(line: 481, column: 25, scope: !7686)
!7694 = !DILocation(line: 481, column: 28, scope: !7686)
!7695 = !DILocation(line: 481, column: 33, scope: !7686)
!7696 = !DILocation(line: 480, column: 11, scope: !7679)
!7697 = !DILocation(line: 482, column: 9, scope: !7686)
!7698 = !DILocation(line: 484, column: 12, scope: !7699)
!7699 = distinct !DILexicalBlock(scope: !7679, file: !3, line: 484, column: 11)
!7700 = !DILocation(line: 484, column: 11, scope: !7679)
!7701 = !DILocation(line: 486, column: 26, scope: !7702)
!7702 = distinct !DILexicalBlock(scope: !7699, file: !3, line: 485, column: 2)
!7703 = !DILocation(line: 486, column: 24, scope: !7702)
!7704 = !DILocation(line: 487, column: 41, scope: !7702)
!7705 = !DILocation(line: 487, column: 4, scope: !7702)
!7706 = !DILocation(line: 487, column: 10, scope: !7702)
!7707 = !DILocation(line: 487, column: 21, scope: !7702)
!7708 = !DILocation(line: 487, column: 39, scope: !7702)
!7709 = !DILocation(line: 488, column: 2, scope: !7702)
!7710 = !DILocation(line: 493, column: 11, scope: !7711)
!7711 = distinct !DILexicalBlock(scope: !7679, file: !3, line: 493, column: 11)
!7712 = !DILocation(line: 493, column: 15, scope: !7711)
!7713 = !DILocation(line: 493, column: 11, scope: !7679)
!7714 = !DILocation(line: 494, column: 24, scope: !7711)
!7715 = !DILocation(line: 494, column: 8, scope: !7711)
!7716 = !DILocation(line: 494, column: 6, scope: !7711)
!7717 = !DILocation(line: 494, column: 2, scope: !7711)
!7718 = !DILocation(line: 495, column: 29, scope: !7679)
!7719 = !DILocation(line: 495, column: 14, scope: !7679)
!7720 = !DILocation(line: 495, column: 12, scope: !7679)
!7721 = !DILocation(line: 499, column: 14, scope: !7679)
!7722 = !DILocation(line: 499, column: 12, scope: !7679)
!7723 = !DILocation(line: 500, column: 16, scope: !7724)
!7724 = distinct !DILexicalBlock(scope: !7679, file: !3, line: 500, column: 7)
!7725 = !DILocation(line: 500, column: 14, scope: !7724)
!7726 = !DILocation(line: 500, column: 12, scope: !7724)
!7727 = !DILocation(line: 500, column: 19, scope: !7728)
!7728 = distinct !DILexicalBlock(scope: !7724, file: !3, line: 500, column: 7)
!7729 = !DILocation(line: 500, column: 21, scope: !7728)
!7730 = !DILocation(line: 500, column: 7, scope: !7724)
!7731 = !DILocalVariable(name: "decl", scope: !7732, file: !3, line: 502, type: !2326)
!7732 = distinct !DILexicalBlock(scope: !7728, file: !3, line: 501, column: 2)
!7733 = !DILocation(line: 502, column: 9, scope: !7732)
!7734 = !DILocation(line: 502, column: 16, scope: !7732)
!7735 = !DILocation(line: 502, column: 27, scope: !7732)
!7736 = !DILocation(line: 502, column: 30, scope: !7732)
!7737 = !DILocalVariable(name: "uid", scope: !7732, file: !3, line: 503, type: !7)
!7738 = !DILocation(line: 503, column: 17, scope: !7732)
!7739 = !DILocation(line: 503, column: 23, scope: !7732)
!7740 = !DILocation(line: 507, column: 4, scope: !7732)
!7741 = !DILocation(line: 509, column: 20, scope: !7732)
!7742 = !DILocation(line: 509, column: 26, scope: !7732)
!7743 = !DILocation(line: 509, column: 4, scope: !7732)
!7744 = !DILocation(line: 511, column: 34, scope: !7732)
!7745 = !DILocation(line: 510, column: 37, scope: !7732)
!7746 = !DILocation(line: 511, column: 26, scope: !7732)
!7747 = !DILocation(line: 511, column: 17, scope: !7732)
!7748 = !DILocation(line: 511, column: 9, scope: !7732)
!7749 = !DILocation(line: 510, column: 17, scope: !7732)
!7750 = !DILocation(line: 510, column: 4, scope: !7732)
!7751 = !DILocation(line: 511, column: 32, scope: !7732)
!7752 = !DILocation(line: 513, column: 16, scope: !7732)
!7753 = !DILocation(line: 512, column: 35, scope: !7732)
!7754 = !DILocation(line: 512, column: 41, scope: !7732)
!7755 = !DILocation(line: 512, column: 52, scope: !7732)
!7756 = !DILocation(line: 513, column: 7, scope: !7732)
!7757 = !DILocation(line: 512, column: 15, scope: !7732)
!7758 = !DILocation(line: 512, column: 4, scope: !7732)
!7759 = !DILocation(line: 513, column: 14, scope: !7732)
!7760 = !DILocation(line: 514, column: 2, scope: !7732)
!7761 = !DILocation(line: 500, column: 33, scope: !7728)
!7762 = !DILocation(line: 500, column: 44, scope: !7728)
!7763 = !DILocation(line: 500, column: 47, scope: !7728)
!7764 = !DILocation(line: 500, column: 31, scope: !7728)
!7765 = !DILocation(line: 500, column: 7, scope: !7728)
!7766 = distinct !{!7766, !7730, !7767}
!7767 = !DILocation(line: 514, column: 2, scope: !7724)
!7768 = !DILocation(line: 517, column: 26, scope: !7679)
!7769 = !DILocation(line: 517, column: 12, scope: !7679)
!7770 = !DILocation(line: 517, column: 10, scope: !7679)
!7771 = !DILocation(line: 518, column: 25, scope: !7679)
!7772 = !DILocation(line: 518, column: 29, scope: !7679)
!7773 = !DILocation(line: 518, column: 33, scope: !7679)
!7774 = !DILocation(line: 518, column: 7, scope: !7679)
!7775 = !DILocation(line: 519, column: 5, scope: !7679)
!7776 = !DILocation(line: 473, column: 36, scope: !7674)
!7777 = !DILocation(line: 473, column: 3, scope: !7674)
!7778 = distinct !{!7778, !7677, !7779}
!7779 = !DILocation(line: 519, column: 5, scope: !7671)
!7780 = !DILocation(line: 523, column: 7, scope: !7781)
!7781 = distinct !DILexicalBlock(scope: !7661, file: !3, line: 523, column: 7)
!7782 = !DILocation(line: 523, column: 7, scope: !7661)
!7783 = !DILocalVariable(name: "i", scope: !7784, file: !3, line: 525, type: !7)
!7784 = distinct !DILexicalBlock(scope: !7781, file: !3, line: 524, column: 5)
!7785 = !DILocation(line: 525, column: 16, scope: !7784)
!7786 = !DILocalVariable(name: "visited", scope: !7784, file: !3, line: 526, type: !7787)
!7787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7788, size: 64)
!7788 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !135, line: 5199, flags: DIFlagFwdDecl)
!7789 = !DILocation(line: 526, column: 29, scope: !7784)
!7790 = !DILocation(line: 526, column: 39, scope: !7784)
!7791 = !DILocalVariable(name: "temp", scope: !7784, file: !3, line: 527, type: !2806)
!7792 = !DILocation(line: 527, column: 14, scope: !7784)
!7793 = !DILocation(line: 527, column: 21, scope: !7784)
!7794 = !DILocation(line: 529, column: 14, scope: !7795)
!7795 = distinct !DILexicalBlock(scope: !7784, file: !3, line: 529, column: 7)
!7796 = !DILocation(line: 529, column: 12, scope: !7795)
!7797 = !DILocation(line: 529, column: 19, scope: !7798)
!7798 = distinct !DILexicalBlock(scope: !7795, file: !3, line: 529, column: 7)
!7799 = !DILocation(line: 529, column: 23, scope: !7798)
!7800 = !DILocation(line: 529, column: 21, scope: !7798)
!7801 = !DILocation(line: 529, column: 7, scope: !7795)
!7802 = !DILocalVariable(name: "name", scope: !7803, file: !3, line: 531, type: !2326)
!7803 = distinct !DILexicalBlock(scope: !7798, file: !3, line: 530, column: 2)
!7804 = !DILocation(line: 531, column: 9, scope: !7803)
!7805 = !DILocation(line: 531, column: 16, scope: !7803)
!7806 = !DILocalVariable(name: "pi", scope: !7803, file: !3, line: 532, type: !3008)
!7807 = !DILocation(line: 532, column: 25, scope: !7803)
!7808 = !DILocation(line: 534, column: 8, scope: !7809)
!7809 = distinct !DILexicalBlock(scope: !7803, file: !3, line: 534, column: 8)
!7810 = !DILocation(line: 535, column: 8, scope: !7809)
!7811 = !DILocation(line: 535, column: 11, scope: !7809)
!7812 = !DILocation(line: 536, column: 8, scope: !7809)
!7813 = !DILocation(line: 536, column: 18, scope: !7809)
!7814 = !DILocation(line: 536, column: 16, scope: !7809)
!7815 = !DILocation(line: 536, column: 44, scope: !7809)
!7816 = !DILocation(line: 534, column: 8, scope: !7803)
!7817 = !DILocation(line: 537, column: 38, scope: !7809)
!7818 = !DILocation(line: 537, column: 42, scope: !7809)
!7819 = !DILocation(line: 537, column: 46, scope: !7809)
!7820 = !DILocation(line: 538, column: 9, scope: !7809)
!7821 = !DILocation(line: 538, column: 18, scope: !7809)
!7822 = !DILocation(line: 537, column: 6, scope: !7809)
!7823 = !DILocation(line: 539, column: 2, scope: !7803)
!7824 = !DILocation(line: 529, column: 39, scope: !7798)
!7825 = !DILocation(line: 529, column: 7, scope: !7798)
!7826 = distinct !{!7826, !7801, !7827}
!7827 = !DILocation(line: 539, column: 2, scope: !7795)
!7828 = !DILocation(line: 541, column: 39, scope: !7784)
!7829 = !DILocation(line: 541, column: 45, scope: !7784)
!7830 = !DILocation(line: 541, column: 56, scope: !7784)
!7831 = !DILocation(line: 542, column: 10, scope: !7784)
!7832 = !DILocation(line: 542, column: 31, scope: !7784)
!7833 = !DILocation(line: 542, column: 40, scope: !7784)
!7834 = !DILocation(line: 541, column: 7, scope: !7784)
!7835 = !DILocation(line: 543, column: 39, scope: !7784)
!7836 = !DILocation(line: 543, column: 45, scope: !7784)
!7837 = !DILocation(line: 543, column: 56, scope: !7784)
!7838 = !DILocation(line: 544, column: 10, scope: !7784)
!7839 = !DILocation(line: 544, column: 31, scope: !7784)
!7840 = !DILocation(line: 544, column: 40, scope: !7784)
!7841 = !DILocation(line: 543, column: 7, scope: !7784)
!7842 = !DILocation(line: 546, column: 28, scope: !7784)
!7843 = !DILocation(line: 546, column: 7, scope: !7784)
!7844 = !DILocation(line: 547, column: 28, scope: !7784)
!7845 = !DILocation(line: 547, column: 7, scope: !7784)
!7846 = !DILocation(line: 548, column: 7, scope: !7784)
!7847 = !DILocation(line: 549, column: 5, scope: !7784)
!7848 = !DILocation(line: 550, column: 1, scope: !7661)
!7849 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !2265, file: !2265, line: 224, type: !7850, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7850 = !DISubroutineType(types: !7851)
!7851 = !{null, !7852, !7853, !7, !7856}
!7852 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7574, size: 64)
!7853 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !2181, line: 48, baseType: !7854)
!7854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7855, size: 64)
!7855 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2264)
!7856 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7857 = !DILocalVariable(name: "bi", arg: 1, scope: !7849, file: !2265, line: 224, type: !7852)
!7858 = !DILocation(line: 224, column: 37, scope: !7849)
!7859 = !DILocalVariable(name: "map", arg: 2, scope: !7849, file: !2265, line: 224, type: !7853)
!7860 = !DILocation(line: 224, column: 54, scope: !7849)
!7861 = !DILocalVariable(name: "start_bit", arg: 3, scope: !7849, file: !2265, line: 225, type: !7)
!7862 = !DILocation(line: 225, column: 15, scope: !7849)
!7863 = !DILocalVariable(name: "bit_no", arg: 4, scope: !7849, file: !2265, line: 225, type: !7856)
!7864 = !DILocation(line: 225, column: 36, scope: !7849)
!7865 = !DILocation(line: 227, column: 14, scope: !7849)
!7866 = !DILocation(line: 227, column: 19, scope: !7849)
!7867 = !DILocation(line: 227, column: 3, scope: !7849)
!7868 = !DILocation(line: 227, column: 7, scope: !7849)
!7869 = !DILocation(line: 227, column: 12, scope: !7849)
!7870 = !DILocation(line: 228, column: 3, scope: !7849)
!7871 = !DILocation(line: 228, column: 7, scope: !7849)
!7872 = !DILocation(line: 228, column: 12, scope: !7849)
!7873 = !DILocation(line: 231, column: 3, scope: !7849)
!7874 = !DILocation(line: 233, column: 12, scope: !7875)
!7875 = distinct !DILexicalBlock(scope: !7876, file: !2265, line: 233, column: 11)
!7876 = distinct !DILexicalBlock(scope: !7849, file: !2265, line: 232, column: 5)
!7877 = !DILocation(line: 233, column: 16, scope: !7875)
!7878 = !DILocation(line: 233, column: 11, scope: !7876)
!7879 = !DILocation(line: 235, column: 4, scope: !7880)
!7880 = distinct !DILexicalBlock(scope: !7875, file: !2265, line: 234, column: 2)
!7881 = !DILocation(line: 235, column: 8, scope: !7880)
!7882 = !DILocation(line: 235, column: 13, scope: !7880)
!7883 = !DILocation(line: 236, column: 4, scope: !7880)
!7884 = !DILocation(line: 239, column: 11, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7876, file: !2265, line: 239, column: 11)
!7886 = !DILocation(line: 239, column: 15, scope: !7885)
!7887 = !DILocation(line: 239, column: 21, scope: !7885)
!7888 = !DILocation(line: 239, column: 29, scope: !7885)
!7889 = !DILocation(line: 239, column: 39, scope: !7885)
!7890 = !DILocation(line: 239, column: 26, scope: !7885)
!7891 = !DILocation(line: 239, column: 11, scope: !7876)
!7892 = !DILocation(line: 240, column: 2, scope: !7885)
!7893 = !DILocation(line: 241, column: 18, scope: !7876)
!7894 = !DILocation(line: 241, column: 22, scope: !7876)
!7895 = !DILocation(line: 241, column: 28, scope: !7876)
!7896 = !DILocation(line: 241, column: 7, scope: !7876)
!7897 = !DILocation(line: 241, column: 11, scope: !7876)
!7898 = !DILocation(line: 241, column: 16, scope: !7876)
!7899 = distinct !{!7899, !7873, !7900}
!7900 = !DILocation(line: 242, column: 5, scope: !7849)
!7901 = !DILocation(line: 245, column: 7, scope: !7902)
!7902 = distinct !DILexicalBlock(scope: !7849, file: !2265, line: 245, column: 7)
!7903 = !DILocation(line: 245, column: 11, scope: !7902)
!7904 = !DILocation(line: 245, column: 17, scope: !7902)
!7905 = !DILocation(line: 245, column: 25, scope: !7902)
!7906 = !DILocation(line: 245, column: 35, scope: !7902)
!7907 = !DILocation(line: 245, column: 22, scope: !7902)
!7908 = !DILocation(line: 245, column: 7, scope: !7849)
!7909 = !DILocation(line: 246, column: 17, scope: !7902)
!7910 = !DILocation(line: 246, column: 21, scope: !7902)
!7911 = !DILocation(line: 246, column: 27, scope: !7902)
!7912 = !DILocation(line: 246, column: 32, scope: !7902)
!7913 = !DILocation(line: 246, column: 15, scope: !7902)
!7914 = !DILocation(line: 246, column: 5, scope: !7902)
!7915 = !DILocation(line: 249, column: 17, scope: !7849)
!7916 = !DILocation(line: 249, column: 27, scope: !7849)
!7917 = !DILocation(line: 249, column: 46, scope: !7849)
!7918 = !DILocation(line: 249, column: 3, scope: !7849)
!7919 = !DILocation(line: 249, column: 7, scope: !7849)
!7920 = !DILocation(line: 249, column: 15, scope: !7849)
!7921 = !DILocation(line: 250, column: 14, scope: !7849)
!7922 = !DILocation(line: 250, column: 18, scope: !7849)
!7923 = !DILocation(line: 250, column: 24, scope: !7849)
!7924 = !DILocation(line: 250, column: 29, scope: !7849)
!7925 = !DILocation(line: 250, column: 33, scope: !7849)
!7926 = !DILocation(line: 250, column: 3, scope: !7849)
!7927 = !DILocation(line: 250, column: 7, scope: !7849)
!7928 = !DILocation(line: 250, column: 12, scope: !7849)
!7929 = !DILocation(line: 251, column: 16, scope: !7849)
!7930 = !DILocation(line: 251, column: 26, scope: !7849)
!7931 = !DILocation(line: 251, column: 3, scope: !7849)
!7932 = !DILocation(line: 251, column: 7, scope: !7849)
!7933 = !DILocation(line: 251, column: 12, scope: !7849)
!7934 = !DILocation(line: 257, column: 17, scope: !7849)
!7935 = !DILocation(line: 257, column: 21, scope: !7849)
!7936 = !DILocation(line: 257, column: 16, scope: !7849)
!7937 = !DILocation(line: 257, column: 13, scope: !7849)
!7938 = !DILocation(line: 259, column: 13, scope: !7849)
!7939 = !DILocation(line: 259, column: 4, scope: !7849)
!7940 = !DILocation(line: 259, column: 11, scope: !7849)
!7941 = !DILocation(line: 260, column: 1, scope: !7849)
!7942 = distinct !DISubprogram(name: "bmp_iter_set", scope: !2265, file: !2265, line: 393, type: !7943, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!7943 = !DISubroutineType(types: !7944)
!7944 = !{!2439, !7852, !7856}
!7945 = !DILocalVariable(name: "bi", arg: 1, scope: !7942, file: !2265, line: 393, type: !7852)
!7946 = !DILocation(line: 393, column: 32, scope: !7942)
!7947 = !DILocalVariable(name: "bit_no", arg: 2, scope: !7942, file: !2265, line: 393, type: !7856)
!7948 = !DILocation(line: 393, column: 46, scope: !7942)
!7949 = !DILocation(line: 396, column: 7, scope: !7950)
!7950 = distinct !DILexicalBlock(scope: !7942, file: !2265, line: 396, column: 7)
!7951 = !DILocation(line: 396, column: 11, scope: !7950)
!7952 = !DILocation(line: 396, column: 7, scope: !7942)
!7953 = !DILocation(line: 397, column: 5, scope: !7950)
!7954 = !DILabel(scope: !7955, name: "next_bit", file: !2265, line: 398)
!7955 = distinct !DILexicalBlock(scope: !7950, file: !2265, line: 397, column: 5)
!7956 = !DILocation(line: 398, column: 5, scope: !7955)
!7957 = !DILocation(line: 399, column: 7, scope: !7955)
!7958 = !DILocation(line: 399, column: 16, scope: !7955)
!7959 = !DILocation(line: 399, column: 20, scope: !7955)
!7960 = !DILocation(line: 399, column: 25, scope: !7955)
!7961 = !DILocation(line: 399, column: 14, scope: !7955)
!7962 = !DILocation(line: 401, column: 4, scope: !7963)
!7963 = distinct !DILexicalBlock(scope: !7955, file: !2265, line: 400, column: 2)
!7964 = !DILocation(line: 401, column: 8, scope: !7963)
!7965 = !DILocation(line: 401, column: 13, scope: !7963)
!7966 = !DILocation(line: 402, column: 5, scope: !7963)
!7967 = !DILocation(line: 402, column: 12, scope: !7963)
!7968 = distinct !{!7968, !7957, !7969}
!7969 = !DILocation(line: 403, column: 2, scope: !7955)
!7970 = !DILocation(line: 404, column: 7, scope: !7955)
!7971 = !DILocation(line: 410, column: 16, scope: !7942)
!7972 = !DILocation(line: 410, column: 15, scope: !7942)
!7973 = !DILocation(line: 410, column: 23, scope: !7942)
!7974 = !DILocation(line: 410, column: 42, scope: !7942)
!7975 = !DILocation(line: 411, column: 7, scope: !7942)
!7976 = !DILocation(line: 411, column: 26, scope: !7942)
!7977 = !DILocation(line: 410, column: 4, scope: !7942)
!7978 = !DILocation(line: 410, column: 11, scope: !7942)
!7979 = !DILocation(line: 412, column: 3, scope: !7942)
!7980 = !DILocation(line: 412, column: 7, scope: !7942)
!7981 = !DILocation(line: 412, column: 14, scope: !7942)
!7982 = !DILocation(line: 414, column: 3, scope: !7942)
!7983 = !DILocation(line: 417, column: 7, scope: !7984)
!7984 = distinct !DILexicalBlock(scope: !7942, file: !2265, line: 415, column: 5)
!7985 = !DILocation(line: 417, column: 14, scope: !7984)
!7986 = !DILocation(line: 417, column: 18, scope: !7984)
!7987 = !DILocation(line: 417, column: 26, scope: !7984)
!7988 = !DILocation(line: 419, column: 15, scope: !7989)
!7989 = distinct !DILexicalBlock(scope: !7984, file: !2265, line: 418, column: 2)
!7990 = !DILocation(line: 419, column: 19, scope: !7989)
!7991 = !DILocation(line: 419, column: 25, scope: !7989)
!7992 = !DILocation(line: 419, column: 30, scope: !7989)
!7993 = !DILocation(line: 419, column: 34, scope: !7989)
!7994 = !DILocation(line: 419, column: 4, scope: !7989)
!7995 = !DILocation(line: 419, column: 8, scope: !7989)
!7996 = !DILocation(line: 419, column: 13, scope: !7989)
!7997 = !DILocation(line: 420, column: 8, scope: !7998)
!7998 = distinct !DILexicalBlock(scope: !7989, file: !2265, line: 420, column: 8)
!7999 = !DILocation(line: 420, column: 12, scope: !7998)
!8000 = !DILocation(line: 420, column: 8, scope: !7989)
!8001 = !DILocation(line: 421, column: 6, scope: !7998)
!8002 = !DILocation(line: 422, column: 5, scope: !7989)
!8003 = !DILocation(line: 422, column: 12, scope: !7989)
!8004 = !DILocation(line: 423, column: 4, scope: !7989)
!8005 = !DILocation(line: 423, column: 8, scope: !7989)
!8006 = !DILocation(line: 423, column: 15, scope: !7989)
!8007 = distinct !{!8007, !7983, !8008}
!8008 = !DILocation(line: 424, column: 2, scope: !7984)
!8009 = !DILocation(line: 427, column: 18, scope: !7984)
!8010 = !DILocation(line: 427, column: 22, scope: !7984)
!8011 = !DILocation(line: 427, column: 28, scope: !7984)
!8012 = !DILocation(line: 427, column: 7, scope: !7984)
!8013 = !DILocation(line: 427, column: 11, scope: !7984)
!8014 = !DILocation(line: 427, column: 16, scope: !7984)
!8015 = !DILocation(line: 428, column: 12, scope: !8016)
!8016 = distinct !DILexicalBlock(scope: !7984, file: !2265, line: 428, column: 11)
!8017 = !DILocation(line: 428, column: 16, scope: !8016)
!8018 = !DILocation(line: 428, column: 11, scope: !7984)
!8019 = !DILocation(line: 429, column: 2, scope: !8016)
!8020 = !DILocation(line: 430, column: 17, scope: !7984)
!8021 = !DILocation(line: 430, column: 21, scope: !7984)
!8022 = !DILocation(line: 430, column: 27, scope: !7984)
!8023 = !DILocation(line: 430, column: 32, scope: !7984)
!8024 = !DILocation(line: 430, column: 8, scope: !7984)
!8025 = !DILocation(line: 430, column: 15, scope: !7984)
!8026 = !DILocation(line: 431, column: 7, scope: !7984)
!8027 = !DILocation(line: 431, column: 11, scope: !7984)
!8028 = !DILocation(line: 431, column: 19, scope: !7984)
!8029 = distinct !{!8029, !7982, !8030}
!8030 = !DILocation(line: 432, column: 5, scope: !7942)
!8031 = !DILocation(line: 433, column: 1, scope: !7942)
!8032 = distinct !DISubprogram(name: "bmp_iter_next", scope: !2265, file: !2265, line: 382, type: !8033, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8033 = !DISubroutineType(types: !8034)
!8034 = !{null, !7852, !7856}
!8035 = !DILocalVariable(name: "bi", arg: 1, scope: !8032, file: !2265, line: 382, type: !7852)
!8036 = !DILocation(line: 382, column: 33, scope: !8032)
!8037 = !DILocalVariable(name: "bit_no", arg: 2, scope: !8032, file: !2265, line: 382, type: !7856)
!8038 = !DILocation(line: 382, column: 47, scope: !8032)
!8039 = !DILocation(line: 384, column: 3, scope: !8032)
!8040 = !DILocation(line: 384, column: 7, scope: !8032)
!8041 = !DILocation(line: 384, column: 12, scope: !8032)
!8042 = !DILocation(line: 385, column: 4, scope: !8032)
!8043 = !DILocation(line: 385, column: 11, scope: !8032)
!8044 = !DILocation(line: 386, column: 1, scope: !8032)
!8045 = distinct !DISubprogram(name: "make_ssa_name", scope: !8046, file: !8046, line: 1245, type: !8047, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8046 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!8047 = !DISubroutineType(types: !8048)
!8048 = !{!2326, !2326, !2201}
!8049 = !DILocalVariable(name: "var", arg: 1, scope: !8045, file: !8046, line: 1245, type: !2326)
!8050 = !DILocation(line: 1245, column: 21, scope: !8045)
!8051 = !DILocalVariable(name: "stmt", arg: 2, scope: !8045, file: !8046, line: 1245, type: !2201)
!8052 = !DILocation(line: 1245, column: 33, scope: !8045)
!8053 = !DILocation(line: 1247, column: 28, scope: !8045)
!8054 = !DILocation(line: 1247, column: 34, scope: !8045)
!8055 = !DILocation(line: 1247, column: 39, scope: !8045)
!8056 = !DILocation(line: 1247, column: 10, scope: !8045)
!8057 = !DILocation(line: 1247, column: 3, scope: !8045)
!8058 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !8059, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8059 = !DISubroutineType(types: !8060)
!8060 = !{!7, !8061}
!8061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8062, size: 64)
!8062 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2717)
!8063 = !DILocalVariable(name: "vec_", arg: 1, scope: !8058, file: !135, line: 182, type: !8061)
!8064 = !DILocation(line: 182, column: 1, scope: !8058)
!8065 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !135, file: !135, line: 182, type: !8066, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8066 = !DISubroutineType(types: !8067)
!8067 = !{!2326, !8061, !7}
!8068 = !DILocalVariable(name: "vec_", arg: 1, scope: !8065, file: !135, line: 182, type: !8061)
!8069 = !DILocation(line: 182, column: 1, scope: !8065)
!8070 = !DILocalVariable(name: "ix_", arg: 2, scope: !8065, file: !135, line: 182, type: !7)
!8071 = !DILocation(line: 0, scope: !8065)
!8072 = distinct !DISubprogram(name: "add_partitioned_vars_to_ptset", scope: !3, file: !3, line: 431, type: !8073, scopeLine: 434, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8073 = !DISubroutineType(types: !8074)
!8074 = !{null, !8075, !2809, !7787, !2806}
!8075 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2796, size: 64)
!8076 = !DILocalVariable(name: "pt", arg: 1, scope: !8072, file: !3, line: 431, type: !8075)
!8077 = !DILocation(line: 431, column: 52, scope: !8072)
!8078 = !DILocalVariable(name: "decls_to_partitions", arg: 2, scope: !8072, file: !3, line: 432, type: !2809)
!8079 = !DILocation(line: 432, column: 33, scope: !8072)
!8080 = !DILocalVariable(name: "visited", arg: 3, scope: !8072, file: !3, line: 433, type: !7787)
!8081 = !DILocation(line: 433, column: 33, scope: !8072)
!8082 = !DILocalVariable(name: "temp", arg: 4, scope: !8072, file: !3, line: 433, type: !2806)
!8083 = !DILocation(line: 433, column: 49, scope: !8072)
!8084 = !DILocalVariable(name: "bi", scope: !8072, file: !3, line: 435, type: !7574)
!8085 = !DILocation(line: 435, column: 19, scope: !8072)
!8086 = !DILocalVariable(name: "i", scope: !8072, file: !3, line: 436, type: !7)
!8087 = !DILocation(line: 436, column: 12, scope: !8072)
!8088 = !DILocalVariable(name: "part", scope: !8072, file: !3, line: 437, type: !3550)
!8089 = !DILocation(line: 437, column: 11, scope: !8072)
!8090 = !DILocation(line: 439, column: 7, scope: !8091)
!8091 = distinct !DILexicalBlock(scope: !8072, file: !3, line: 439, column: 7)
!8092 = !DILocation(line: 439, column: 11, scope: !8091)
!8093 = !DILocation(line: 440, column: 7, scope: !8091)
!8094 = !DILocation(line: 440, column: 10, scope: !8091)
!8095 = !DILocation(line: 440, column: 14, scope: !8091)
!8096 = !DILocation(line: 440, column: 19, scope: !8091)
!8097 = !DILocation(line: 443, column: 7, scope: !8091)
!8098 = !DILocation(line: 443, column: 29, scope: !8091)
!8099 = !DILocation(line: 443, column: 38, scope: !8091)
!8100 = !DILocation(line: 443, column: 42, scope: !8091)
!8101 = !DILocation(line: 443, column: 10, scope: !8091)
!8102 = !DILocation(line: 439, column: 7, scope: !8072)
!8103 = !DILocation(line: 444, column: 5, scope: !8091)
!8104 = !DILocation(line: 446, column: 17, scope: !8072)
!8105 = !DILocation(line: 446, column: 3, scope: !8072)
!8106 = !DILocation(line: 451, column: 3, scope: !8107)
!8107 = distinct !DILexicalBlock(scope: !8072, file: !3, line: 451, column: 3)
!8108 = !DILocation(line: 451, column: 3, scope: !8109)
!8109 = distinct !DILexicalBlock(scope: !8107, file: !3, line: 451, column: 3)
!8110 = !DILocation(line: 452, column: 11, scope: !8111)
!8111 = distinct !DILexicalBlock(scope: !8109, file: !3, line: 452, column: 9)
!8112 = !DILocation(line: 453, column: 3, scope: !8111)
!8113 = !DILocation(line: 453, column: 21, scope: !8111)
!8114 = !DILocation(line: 453, column: 27, scope: !8111)
!8115 = !DILocation(line: 453, column: 7, scope: !8111)
!8116 = !DILocation(line: 454, column: 2, scope: !8111)
!8117 = !DILocation(line: 454, column: 46, scope: !8111)
!8118 = !DILocation(line: 455, column: 28, scope: !8111)
!8119 = !DILocation(line: 455, column: 19, scope: !8111)
!8120 = !DILocation(line: 455, column: 11, scope: !8111)
!8121 = !DILocation(line: 454, column: 24, scope: !8111)
!8122 = !DILocation(line: 454, column: 13, scope: !8111)
!8123 = !DILocation(line: 454, column: 11, scope: !8111)
!8124 = !DILocation(line: 452, column: 9, scope: !8109)
!8125 = !DILocation(line: 456, column: 24, scope: !8111)
!8126 = !DILocation(line: 456, column: 31, scope: !8111)
!8127 = !DILocation(line: 456, column: 30, scope: !8111)
!8128 = !DILocation(line: 456, column: 7, scope: !8111)
!8129 = !DILocation(line: 455, column: 30, scope: !8111)
!8130 = distinct !{!8130, !8106, !8131}
!8131 = !DILocation(line: 456, column: 35, scope: !8107)
!8132 = !DILocation(line: 457, column: 8, scope: !8133)
!8133 = distinct !DILexicalBlock(scope: !8072, file: !3, line: 457, column: 7)
!8134 = !DILocation(line: 457, column: 7, scope: !8072)
!8135 = !DILocation(line: 458, column: 22, scope: !8133)
!8136 = !DILocation(line: 458, column: 26, scope: !8133)
!8137 = !DILocation(line: 458, column: 32, scope: !8133)
!8138 = !DILocation(line: 458, column: 5, scope: !8133)
!8139 = !DILocation(line: 459, column: 1, scope: !8072)
!8140 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !337, file: !337, line: 150, type: !8141, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8141 = !DISubroutineType(types: !8142)
!8142 = !{!7, !8143}
!8143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8144, size: 64)
!8144 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2173)
!8145 = !DILocalVariable(name: "vec_", arg: 1, scope: !8140, file: !337, line: 150, type: !8143)
!8146 = !DILocation(line: 150, column: 1, scope: !8140)
!8147 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !337, file: !337, line: 150, type: !8148, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8148 = !DISubroutineType(types: !8149)
!8149 = !{!2180, !8143, !7}
!8150 = !DILocalVariable(name: "vec_", arg: 1, scope: !8147, file: !337, line: 150, type: !8143)
!8151 = !DILocation(line: 150, column: 1, scope: !8147)
!8152 = !DILocalVariable(name: "ix_", arg: 2, scope: !8147, file: !337, line: 150, type: !7)
!8153 = !DILocation(line: 0, scope: !8147)
!8154 = distinct !DISubprogram(name: "ei_end_p", scope: !337, file: !337, line: 721, type: !8155, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8155 = !DISubroutineType(types: !8156)
!8156 = !{!2439, !4235}
!8157 = !DILocalVariable(name: "i", arg: 1, scope: !8154, file: !337, line: 721, type: !4235)
!8158 = !DILocation(line: 721, column: 25, scope: !8154)
!8159 = !DILocation(line: 723, column: 13, scope: !8154)
!8160 = !DILocation(line: 723, column: 22, scope: !8154)
!8161 = !DILocation(line: 723, column: 19, scope: !8154)
!8162 = !DILocation(line: 723, column: 10, scope: !8154)
!8163 = !DILocation(line: 723, column: 3, scope: !8154)
!8164 = distinct !DISubprogram(name: "ei_edge", scope: !337, file: !337, line: 752, type: !6326, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8165 = !DILocalVariable(name: "i", arg: 1, scope: !8164, file: !337, line: 752, type: !4235)
!8166 = !DILocation(line: 752, column: 24, scope: !8164)
!8167 = !DILocation(line: 754, column: 10, scope: !8164)
!8168 = !DILocation(line: 754, column: 3, scope: !8164)
!8169 = distinct !DISubprogram(name: "ei_container", scope: !337, file: !337, line: 685, type: !8170, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8170 = !DISubroutineType(types: !8171)
!8171 = !{!2168, !4235}
!8172 = !DILocalVariable(name: "i", arg: 1, scope: !8169, file: !337, line: 685, type: !4235)
!8173 = !DILocation(line: 685, column: 29, scope: !8169)
!8174 = !DILocation(line: 687, column: 3, scope: !8169)
!8175 = !DILocation(line: 688, column: 13, scope: !8169)
!8176 = !DILocation(line: 688, column: 10, scope: !8169)
!8177 = !DILocation(line: 688, column: 3, scope: !8169)
!8178 = distinct !DISubprogram(name: "gsi_last", scope: !385, file: !385, line: 4435, type: !8179, scopeLine: 4436, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8179 = !DISubroutineType(types: !8180)
!8180 = !{!5076, !2191}
!8181 = !DILocalVariable(name: "seq", arg: 1, scope: !8178, file: !385, line: 4435, type: !2191)
!8182 = !DILocation(line: 4435, column: 22, scope: !8178)
!8183 = !DILocalVariable(name: "i", scope: !8178, file: !385, line: 4437, type: !5076)
!8184 = !DILocation(line: 4437, column: 24, scope: !8178)
!8185 = !DILocation(line: 4439, column: 28, scope: !8178)
!8186 = !DILocation(line: 4439, column: 11, scope: !8178)
!8187 = !DILocation(line: 4439, column: 5, scope: !8178)
!8188 = !DILocation(line: 4439, column: 9, scope: !8178)
!8189 = !DILocation(line: 4440, column: 11, scope: !8178)
!8190 = !DILocation(line: 4440, column: 5, scope: !8178)
!8191 = !DILocation(line: 4440, column: 9, scope: !8178)
!8192 = !DILocation(line: 4441, column: 13, scope: !8178)
!8193 = !DILocation(line: 4441, column: 11, scope: !8178)
!8194 = !DILocation(line: 4441, column: 17, scope: !8178)
!8195 = !DILocation(line: 4441, column: 22, scope: !8178)
!8196 = !DILocation(line: 4441, column: 27, scope: !8178)
!8197 = !DILocation(line: 4441, column: 20, scope: !8178)
!8198 = !DILocation(line: 4441, column: 10, scope: !8178)
!8199 = !DILocation(line: 4441, column: 48, scope: !8178)
!8200 = !DILocation(line: 4441, column: 53, scope: !8178)
!8201 = !DILocation(line: 4441, column: 35, scope: !8178)
!8202 = !DILocation(line: 4441, column: 5, scope: !8178)
!8203 = !DILocation(line: 4441, column: 8, scope: !8178)
!8204 = !DILocation(line: 4443, column: 3, scope: !8178)
!8205 = distinct !DISubprogram(name: "single_succ_p", scope: !337, file: !337, line: 626, type: !8206, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8206 = !DISubroutineType(types: !8207)
!8207 = !{!2439, !6587}
!8208 = !DILocalVariable(name: "bb", arg: 1, scope: !8205, file: !337, line: 626, type: !6587)
!8209 = !DILocation(line: 626, column: 34, scope: !8205)
!8210 = !DILocation(line: 628, column: 10, scope: !8205)
!8211 = !DILocation(line: 628, column: 33, scope: !8205)
!8212 = !DILocation(line: 628, column: 3, scope: !8205)
!8213 = distinct !DISubprogram(name: "single_succ", scope: !337, file: !337, line: 663, type: !8214, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8214 = !DISubroutineType(types: !8215)
!8215 = !{!2748, !6587}
!8216 = !DILocalVariable(name: "bb", arg: 1, scope: !8213, file: !337, line: 663, type: !6587)
!8217 = !DILocation(line: 663, column: 32, scope: !8213)
!8218 = !DILocation(line: 665, column: 28, scope: !8213)
!8219 = !DILocation(line: 665, column: 10, scope: !8213)
!8220 = !DILocation(line: 665, column: 33, scope: !8213)
!8221 = !DILocation(line: 665, column: 3, scope: !8213)
!8222 = distinct !DISubprogram(name: "gimple_return_retval", scope: !385, file: !385, line: 4253, type: !3789, scopeLine: 4254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8223 = !DILocalVariable(name: "gs", arg: 1, scope: !8222, file: !385, line: 4253, type: !3744)
!8224 = !DILocation(line: 4253, column: 36, scope: !8222)
!8225 = !DILocation(line: 4256, column: 21, scope: !8222)
!8226 = !DILocation(line: 4256, column: 10, scope: !8222)
!8227 = !DILocation(line: 4256, column: 3, scope: !8222)
!8228 = distinct !DISubprogram(name: "single_succ_edge", scope: !337, file: !337, line: 643, type: !8229, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8229 = !DISubroutineType(types: !8230)
!8230 = !{!2180, !6587}
!8231 = !DILocalVariable(name: "bb", arg: 1, scope: !8228, file: !337, line: 643, type: !6587)
!8232 = !DILocation(line: 643, column: 37, scope: !8228)
!8233 = !DILocation(line: 645, column: 3, scope: !8228)
!8234 = !DILocation(line: 646, column: 10, scope: !8228)
!8235 = !DILocation(line: 646, column: 3, scope: !8228)
!8236 = distinct !DISubprogram(name: "gsi_start", scope: !385, file: !385, line: 4403, type: !8179, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8237 = !DILocalVariable(name: "seq", arg: 1, scope: !8236, file: !385, line: 4403, type: !2191)
!8238 = !DILocation(line: 4403, column: 23, scope: !8236)
!8239 = !DILocalVariable(name: "i", scope: !8236, file: !385, line: 4405, type: !5076)
!8240 = !DILocation(line: 4405, column: 24, scope: !8236)
!8241 = !DILocation(line: 4407, column: 29, scope: !8236)
!8242 = !DILocation(line: 4407, column: 11, scope: !8236)
!8243 = !DILocation(line: 4407, column: 5, scope: !8236)
!8244 = !DILocation(line: 4407, column: 9, scope: !8236)
!8245 = !DILocation(line: 4408, column: 11, scope: !8236)
!8246 = !DILocation(line: 4408, column: 5, scope: !8236)
!8247 = !DILocation(line: 4408, column: 9, scope: !8236)
!8248 = !DILocation(line: 4409, column: 13, scope: !8236)
!8249 = !DILocation(line: 4409, column: 11, scope: !8236)
!8250 = !DILocation(line: 4409, column: 17, scope: !8236)
!8251 = !DILocation(line: 4409, column: 22, scope: !8236)
!8252 = !DILocation(line: 4409, column: 27, scope: !8236)
!8253 = !DILocation(line: 4409, column: 20, scope: !8236)
!8254 = !DILocation(line: 4409, column: 10, scope: !8236)
!8255 = !DILocation(line: 4409, column: 48, scope: !8236)
!8256 = !DILocation(line: 4409, column: 53, scope: !8236)
!8257 = !DILocation(line: 4409, column: 35, scope: !8236)
!8258 = !DILocation(line: 4409, column: 5, scope: !8236)
!8259 = !DILocation(line: 4409, column: 8, scope: !8236)
!8260 = !DILocation(line: 4411, column: 3, scope: !8236)
!8261 = distinct !DISubprogram(name: "expand_gimple_stmt", scope: !3, file: !3, line: 1955, type: !8262, scopeLine: 1956, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8262 = !DISubroutineType(types: !8263)
!8263 = !{!2207, !2201}
!8264 = !DILocalVariable(name: "stmt", arg: 1, scope: !8261, file: !3, line: 1955, type: !2201)
!8265 = !DILocation(line: 1955, column: 28, scope: !8261)
!8266 = !DILocalVariable(name: "lp_nr", scope: !8261, file: !3, line: 1957, type: !2136)
!8267 = !DILocation(line: 1957, column: 7, scope: !8261)
!8268 = !DILocalVariable(name: "last", scope: !8261, file: !3, line: 1958, type: !2207)
!8269 = !DILocation(line: 1958, column: 7, scope: !8261)
!8270 = !DILocalVariable(name: "saved_location", scope: !8261, file: !3, line: 1959, type: !2160)
!8271 = !DILocation(line: 1959, column: 14, scope: !8261)
!8272 = !DILocation(line: 1959, column: 31, scope: !8261)
!8273 = !DILocation(line: 1961, column: 10, scope: !8261)
!8274 = !DILocation(line: 1961, column: 8, scope: !8261)
!8275 = !DILocation(line: 1971, column: 3, scope: !8261)
!8276 = !DILocation(line: 1973, column: 28, scope: !8277)
!8277 = distinct !DILexicalBlock(scope: !8261, file: !3, line: 1973, column: 7)
!8278 = !DILocation(line: 1973, column: 7, scope: !8277)
!8279 = !DILocation(line: 1973, column: 7, scope: !8261)
!8280 = !DILocation(line: 1975, column: 41, scope: !8281)
!8281 = distinct !DILexicalBlock(scope: !8277, file: !3, line: 1974, column: 5)
!8282 = !DILocation(line: 1975, column: 24, scope: !8281)
!8283 = !DILocation(line: 1975, column: 22, scope: !8281)
!8284 = !DILocation(line: 1976, column: 38, scope: !8281)
!8285 = !DILocation(line: 1976, column: 7, scope: !8281)
!8286 = !DILocation(line: 1979, column: 42, scope: !8281)
!8287 = !DILocation(line: 1979, column: 28, scope: !8281)
!8288 = !DILocation(line: 1979, column: 7, scope: !8281)
!8289 = !DILocation(line: 1980, column: 5, scope: !8281)
!8290 = !DILocation(line: 1982, column: 25, scope: !8261)
!8291 = !DILocation(line: 1982, column: 3, scope: !8261)
!8292 = !DILocation(line: 1984, column: 3, scope: !8261)
!8293 = !DILocation(line: 1986, column: 20, scope: !8261)
!8294 = !DILocation(line: 1986, column: 18, scope: !8261)
!8295 = !DILocation(line: 1989, column: 30, scope: !8261)
!8296 = !DILocation(line: 1989, column: 11, scope: !8261)
!8297 = !DILocation(line: 1989, column: 9, scope: !8261)
!8298 = !DILocation(line: 1990, column: 7, scope: !8299)
!8299 = distinct !DILexicalBlock(scope: !8261, file: !3, line: 1990, column: 7)
!8300 = !DILocation(line: 1990, column: 7, scope: !8261)
!8301 = !DILocalVariable(name: "insn", scope: !8302, file: !3, line: 1992, type: !2207)
!8302 = distinct !DILexicalBlock(scope: !8299, file: !3, line: 1991, column: 5)
!8303 = !DILocation(line: 1992, column: 11, scope: !8302)
!8304 = !DILocation(line: 1993, column: 35, scope: !8305)
!8305 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 1993, column: 7)
!8306 = !DILocation(line: 1993, column: 19, scope: !8305)
!8307 = !DILocation(line: 1993, column: 17, scope: !8305)
!8308 = !DILocation(line: 1993, column: 12, scope: !8305)
!8309 = !DILocation(line: 1993, column: 42, scope: !8310)
!8310 = distinct !DILexicalBlock(scope: !8305, file: !3, line: 1993, column: 7)
!8311 = !DILocation(line: 1993, column: 7, scope: !8305)
!8312 = !DILocation(line: 1996, column: 25, scope: !8313)
!8313 = distinct !DILexicalBlock(scope: !8314, file: !3, line: 1996, column: 8)
!8314 = distinct !DILexicalBlock(scope: !8310, file: !3, line: 1995, column: 2)
!8315 = !DILocation(line: 1996, column: 10, scope: !8313)
!8316 = !DILocation(line: 1999, column: 8, scope: !8313)
!8317 = !DILocation(line: 1999, column: 11, scope: !8313)
!8318 = !DILocation(line: 1999, column: 37, scope: !8313)
!8319 = !DILocation(line: 2000, column: 8, scope: !8313)
!8320 = !DILocation(line: 2000, column: 11, scope: !8313)
!8321 = !DILocation(line: 2000, column: 37, scope: !8313)
!8322 = !DILocation(line: 2001, column: 8, scope: !8313)
!8323 = !DILocation(line: 2001, column: 31, scope: !8313)
!8324 = !DILocation(line: 2001, column: 11, scope: !8313)
!8325 = !DILocation(line: 1996, column: 8, scope: !8314)
!8326 = !DILocation(line: 2002, column: 31, scope: !8313)
!8327 = !DILocation(line: 2002, column: 40, scope: !8313)
!8328 = !DILocation(line: 2002, column: 6, scope: !8313)
!8329 = !DILocation(line: 2003, column: 2, scope: !8314)
!8330 = !DILocation(line: 1994, column: 28, scope: !8310)
!8331 = !DILocation(line: 1994, column: 12, scope: !8310)
!8332 = !DILocation(line: 1994, column: 10, scope: !8310)
!8333 = !DILocation(line: 1993, column: 7, scope: !8310)
!8334 = distinct !{!8334, !8311, !8335}
!8335 = !DILocation(line: 2003, column: 2, scope: !8305)
!8336 = !DILocation(line: 2004, column: 5, scope: !8302)
!8337 = !DILocation(line: 2006, column: 10, scope: !8261)
!8338 = !DILocation(line: 2006, column: 3, scope: !8261)
!8339 = distinct !DISubprogram(name: "maybe_dump_rtl_for_gimple_stmt", scope: !3, file: !3, line: 1486, type: !8340, scopeLine: 1487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8340 = !DISubroutineType(types: !8341)
!8341 = !{null, !2201, !2207}
!8342 = !DILocalVariable(name: "stmt", arg: 1, scope: !8339, file: !3, line: 1486, type: !2201)
!8343 = !DILocation(line: 1486, column: 40, scope: !8339)
!8344 = !DILocalVariable(name: "since", arg: 2, scope: !8339, file: !3, line: 1486, type: !2207)
!8345 = !DILocation(line: 1486, column: 50, scope: !8339)
!8346 = !DILocation(line: 1488, column: 7, scope: !8347)
!8347 = distinct !DILexicalBlock(scope: !8339, file: !3, line: 1488, column: 7)
!8348 = !DILocation(line: 1488, column: 17, scope: !8347)
!8349 = !DILocation(line: 1488, column: 21, scope: !8347)
!8350 = !DILocation(line: 1488, column: 32, scope: !8347)
!8351 = !DILocation(line: 1488, column: 7, scope: !8339)
!8352 = !DILocation(line: 1490, column: 16, scope: !8353)
!8353 = distinct !DILexicalBlock(scope: !8347, file: !3, line: 1489, column: 5)
!8354 = !DILocation(line: 1490, column: 7, scope: !8353)
!8355 = !DILocation(line: 1491, column: 26, scope: !8353)
!8356 = !DILocation(line: 1491, column: 37, scope: !8353)
!8357 = !DILocation(line: 1492, column: 17, scope: !8353)
!8358 = !DILocation(line: 1492, column: 28, scope: !8353)
!8359 = !DILocation(line: 1492, column: 14, scope: !8353)
!8360 = !DILocation(line: 1491, column: 7, scope: !8353)
!8361 = !DILocation(line: 1493, column: 16, scope: !8353)
!8362 = !DILocation(line: 1493, column: 7, scope: !8353)
!8363 = !DILocation(line: 1495, column: 18, scope: !8353)
!8364 = !DILocation(line: 1495, column: 29, scope: !8353)
!8365 = !DILocation(line: 1495, column: 37, scope: !8353)
!8366 = !DILocation(line: 1495, column: 57, scope: !8353)
!8367 = !DILocation(line: 1495, column: 7, scope: !8353)
!8368 = !DILocation(line: 1496, column: 5, scope: !8353)
!8369 = !DILocation(line: 1497, column: 1, scope: !8339)
!8370 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !8046, file: !8046, line: 792, type: !8371, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8371 = !DISubroutineType(types: !8372)
!8372 = !{!2326, !8373, !2201, !2136}
!8373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5697, size: 64)
!8374 = !DILocalVariable(name: "ptr", arg: 1, scope: !8370, file: !8046, line: 792, type: !8373)
!8375 = !DILocation(line: 792, column: 33, scope: !8370)
!8376 = !DILocalVariable(name: "stmt", arg: 2, scope: !8370, file: !8046, line: 792, type: !2201)
!8377 = !DILocation(line: 792, column: 45, scope: !8370)
!8378 = !DILocalVariable(name: "flags", arg: 3, scope: !8370, file: !8046, line: 792, type: !2136)
!8379 = !DILocation(line: 792, column: 55, scope: !8370)
!8380 = !DILocation(line: 794, column: 17, scope: !8370)
!8381 = !DILocation(line: 794, column: 22, scope: !8370)
!8382 = !DILocation(line: 794, column: 28, scope: !8370)
!8383 = !DILocation(line: 794, column: 3, scope: !8370)
!8384 = !DILocation(line: 795, column: 3, scope: !8370)
!8385 = !DILocation(line: 795, column: 8, scope: !8370)
!8386 = !DILocation(line: 795, column: 18, scope: !8370)
!8387 = !DILocation(line: 796, column: 29, scope: !8370)
!8388 = !DILocation(line: 796, column: 10, scope: !8370)
!8389 = !DILocation(line: 796, column: 3, scope: !8370)
!8390 = distinct !DISubprogram(name: "op_iter_done", scope: !8046, file: !8046, line: 652, type: !8391, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8391 = !DISubroutineType(types: !8392)
!8392 = !{!2439, !8393}
!8393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8394, size: 64)
!8394 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5697)
!8395 = !DILocalVariable(name: "ptr", arg: 1, scope: !8390, file: !8046, line: 652, type: !8393)
!8396 = !DILocation(line: 652, column: 34, scope: !8390)
!8397 = !DILocation(line: 654, column: 10, scope: !8390)
!8398 = !DILocation(line: 654, column: 15, scope: !8390)
!8399 = !DILocation(line: 654, column: 3, scope: !8390)
!8400 = distinct !DISubprogram(name: "get_gimple_for_ssa_name", scope: !3588, file: !3588, line: 66, type: !8401, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8401 = !DISubroutineType(types: !8402)
!8402 = !{!2201, !2326}
!8403 = !DILocalVariable(name: "exp", arg: 1, scope: !8400, file: !3588, line: 66, type: !2326)
!8404 = !DILocation(line: 66, column: 31, scope: !8400)
!8405 = !DILocalVariable(name: "v", scope: !8400, file: !3588, line: 68, type: !2136)
!8406 = !DILocation(line: 68, column: 7, scope: !8400)
!8407 = !DILocation(line: 68, column: 11, scope: !8400)
!8408 = !DILocation(line: 69, column: 10, scope: !8409)
!8409 = distinct !DILexicalBlock(scope: !8400, file: !3588, line: 69, column: 7)
!8410 = !DILocation(line: 69, column: 7, scope: !8409)
!8411 = !DILocation(line: 69, column: 17, scope: !8409)
!8412 = !DILocation(line: 69, column: 37, scope: !8409)
!8413 = !DILocation(line: 69, column: 45, scope: !8409)
!8414 = !DILocation(line: 69, column: 20, scope: !8409)
!8415 = !DILocation(line: 69, column: 7, scope: !8400)
!8416 = !DILocation(line: 70, column: 12, scope: !8409)
!8417 = !DILocation(line: 70, column: 5, scope: !8409)
!8418 = !DILocation(line: 71, column: 3, scope: !8400)
!8419 = !DILocation(line: 72, column: 1, scope: !8400)
!8420 = distinct !DISubprogram(name: "first_readonly_imm_use", scope: !8046, file: !8046, line: 292, type: !8421, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8421 = !DISubroutineType(types: !8422)
!8422 = !{!3551, !8423, !2326}
!8423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5731, size: 64)
!8424 = !DILocalVariable(name: "imm", arg: 1, scope: !8420, file: !8046, line: 292, type: !8423)
!8425 = !DILocation(line: 292, column: 43, scope: !8420)
!8426 = !DILocalVariable(name: "var", arg: 2, scope: !8420, file: !8046, line: 292, type: !2326)
!8427 = !DILocation(line: 292, column: 53, scope: !8420)
!8428 = !DILocation(line: 294, column: 18, scope: !8420)
!8429 = !DILocation(line: 294, column: 3, scope: !8420)
!8430 = !DILocation(line: 294, column: 8, scope: !8420)
!8431 = !DILocation(line: 294, column: 14, scope: !8420)
!8432 = !DILocation(line: 295, column: 18, scope: !8420)
!8433 = !DILocation(line: 295, column: 23, scope: !8420)
!8434 = !DILocation(line: 295, column: 30, scope: !8420)
!8435 = !DILocation(line: 295, column: 3, scope: !8420)
!8436 = !DILocation(line: 295, column: 8, scope: !8420)
!8437 = !DILocation(line: 295, column: 16, scope: !8420)
!8438 = !DILocation(line: 299, column: 31, scope: !8439)
!8439 = distinct !DILexicalBlock(scope: !8420, file: !8046, line: 299, column: 7)
!8440 = !DILocation(line: 299, column: 7, scope: !8439)
!8441 = !DILocation(line: 299, column: 7, scope: !8420)
!8442 = !DILocation(line: 300, column: 5, scope: !8439)
!8443 = !DILocation(line: 301, column: 10, scope: !8420)
!8444 = !DILocation(line: 301, column: 15, scope: !8420)
!8445 = !DILocation(line: 301, column: 3, scope: !8420)
!8446 = !DILocation(line: 302, column: 1, scope: !8420)
!8447 = distinct !DISubprogram(name: "end_readonly_imm_use_p", scope: !8046, file: !8046, line: 285, type: !8448, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8448 = !DISubroutineType(types: !8449)
!8449 = !{!2439, !8450}
!8450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8451, size: 64)
!8451 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5731)
!8452 = !DILocalVariable(name: "imm", arg: 1, scope: !8447, file: !8046, line: 285, type: !8450)
!8453 = !DILocation(line: 285, column: 49, scope: !8447)
!8454 = !DILocation(line: 287, column: 11, scope: !8447)
!8455 = !DILocation(line: 287, column: 16, scope: !8447)
!8456 = !DILocation(line: 287, column: 27, scope: !8447)
!8457 = !DILocation(line: 287, column: 32, scope: !8447)
!8458 = !DILocation(line: 287, column: 24, scope: !8447)
!8459 = !DILocation(line: 287, column: 10, scope: !8447)
!8460 = !DILocation(line: 287, column: 3, scope: !8447)
!8461 = distinct !DISubprogram(name: "gimple_debug_bind_p", scope: !385, file: !385, line: 3257, type: !3816, scopeLine: 3258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8462 = !DILocalVariable(name: "s", arg: 1, scope: !8461, file: !385, line: 3257, type: !3744)
!8463 = !DILocation(line: 3257, column: 35, scope: !8461)
!8464 = !DILocation(line: 3259, column: 24, scope: !8465)
!8465 = distinct !DILexicalBlock(scope: !8461, file: !385, line: 3259, column: 7)
!8466 = !DILocation(line: 3259, column: 7, scope: !8465)
!8467 = !DILocation(line: 3259, column: 7, scope: !8461)
!8468 = !DILocation(line: 3260, column: 12, scope: !8465)
!8469 = !DILocation(line: 3260, column: 15, scope: !8465)
!8470 = !DILocation(line: 3260, column: 22, scope: !8465)
!8471 = !DILocation(line: 3260, column: 30, scope: !8465)
!8472 = !DILocation(line: 3260, column: 5, scope: !8465)
!8473 = !DILocation(line: 3262, column: 3, scope: !8461)
!8474 = !DILocation(line: 3263, column: 1, scope: !8461)
!8475 = distinct !DISubprogram(name: "next_readonly_imm_use", scope: !8046, file: !8046, line: 306, type: !8476, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8476 = !DISubroutineType(types: !8477)
!8477 = !{!3551, !8423}
!8478 = !DILocalVariable(name: "imm", arg: 1, scope: !8475, file: !8046, line: 306, type: !8423)
!8479 = !DILocation(line: 306, column: 42, scope: !8475)
!8480 = !DILocalVariable(name: "old", scope: !8475, file: !8046, line: 308, type: !3551)
!8481 = !DILocation(line: 308, column: 17, scope: !8475)
!8482 = !DILocation(line: 308, column: 23, scope: !8475)
!8483 = !DILocation(line: 308, column: 28, scope: !8475)
!8484 = !DILocation(line: 319, column: 18, scope: !8475)
!8485 = !DILocation(line: 319, column: 23, scope: !8475)
!8486 = !DILocation(line: 319, column: 3, scope: !8475)
!8487 = !DILocation(line: 319, column: 8, scope: !8475)
!8488 = !DILocation(line: 319, column: 16, scope: !8475)
!8489 = !DILocation(line: 320, column: 31, scope: !8490)
!8490 = distinct !DILexicalBlock(scope: !8475, file: !8046, line: 320, column: 7)
!8491 = !DILocation(line: 320, column: 7, scope: !8490)
!8492 = !DILocation(line: 320, column: 7, scope: !8475)
!8493 = !DILocation(line: 321, column: 5, scope: !8490)
!8494 = !DILocation(line: 322, column: 10, scope: !8475)
!8495 = !DILocation(line: 322, column: 15, scope: !8475)
!8496 = !DILocation(line: 322, column: 3, scope: !8475)
!8497 = !DILocation(line: 323, column: 1, scope: !8475)
!8498 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !8046, file: !8046, line: 1058, type: !8499, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8499 = !DISubroutineType(types: !8500)
!8500 = !{!2201, !8423, !2326}
!8501 = !DILocalVariable(name: "imm", arg: 1, scope: !8498, file: !8046, line: 1058, type: !8423)
!8502 = !DILocation(line: 1058, column: 39, scope: !8498)
!8503 = !DILocalVariable(name: "var", arg: 2, scope: !8498, file: !8046, line: 1058, type: !2326)
!8504 = !DILocation(line: 1058, column: 49, scope: !8498)
!8505 = !DILocation(line: 1060, column: 18, scope: !8498)
!8506 = !DILocation(line: 1060, column: 3, scope: !8498)
!8507 = !DILocation(line: 1060, column: 8, scope: !8498)
!8508 = !DILocation(line: 1060, column: 14, scope: !8498)
!8509 = !DILocation(line: 1061, column: 18, scope: !8498)
!8510 = !DILocation(line: 1061, column: 23, scope: !8498)
!8511 = !DILocation(line: 1061, column: 30, scope: !8498)
!8512 = !DILocation(line: 1061, column: 3, scope: !8498)
!8513 = !DILocation(line: 1061, column: 8, scope: !8498)
!8514 = !DILocation(line: 1061, column: 16, scope: !8498)
!8515 = !DILocation(line: 1062, column: 3, scope: !8498)
!8516 = !DILocation(line: 1062, column: 8, scope: !8498)
!8517 = !DILocation(line: 1062, column: 22, scope: !8498)
!8518 = !DILocation(line: 1067, column: 3, scope: !8498)
!8519 = !DILocation(line: 1067, column: 8, scope: !8498)
!8520 = !DILocation(line: 1067, column: 18, scope: !8498)
!8521 = !DILocation(line: 1067, column: 23, scope: !8498)
!8522 = !DILocation(line: 1068, column: 3, scope: !8498)
!8523 = !DILocation(line: 1068, column: 8, scope: !8498)
!8524 = !DILocation(line: 1068, column: 18, scope: !8498)
!8525 = !DILocation(line: 1068, column: 23, scope: !8498)
!8526 = !DILocation(line: 1069, column: 3, scope: !8498)
!8527 = !DILocation(line: 1069, column: 8, scope: !8498)
!8528 = !DILocation(line: 1069, column: 18, scope: !8498)
!8529 = !DILocation(line: 1069, column: 22, scope: !8498)
!8530 = !DILocation(line: 1069, column: 27, scope: !8498)
!8531 = !DILocation(line: 1070, column: 3, scope: !8498)
!8532 = !DILocation(line: 1070, column: 8, scope: !8498)
!8533 = !DILocation(line: 1070, column: 18, scope: !8498)
!8534 = !DILocation(line: 1070, column: 22, scope: !8498)
!8535 = !DILocation(line: 1072, column: 27, scope: !8536)
!8536 = distinct !DILexicalBlock(scope: !8498, file: !8046, line: 1072, column: 7)
!8537 = !DILocation(line: 1072, column: 7, scope: !8536)
!8538 = !DILocation(line: 1072, column: 7, scope: !8498)
!8539 = !DILocation(line: 1073, column: 5, scope: !8536)
!8540 = !DILocation(line: 1075, column: 25, scope: !8498)
!8541 = !DILocation(line: 1075, column: 30, scope: !8498)
!8542 = !DILocation(line: 1075, column: 39, scope: !8498)
!8543 = !DILocation(line: 1075, column: 3, scope: !8498)
!8544 = !DILocation(line: 1077, column: 10, scope: !8498)
!8545 = !DILocation(line: 1077, column: 3, scope: !8498)
!8546 = !DILocation(line: 1078, column: 1, scope: !8498)
!8547 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !8046, file: !8046, line: 969, type: !8448, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8548 = !DILocalVariable(name: "imm", arg: 1, scope: !8547, file: !8046, line: 969, type: !8450)
!8549 = !DILocation(line: 969, column: 45, scope: !8547)
!8550 = !DILocation(line: 971, column: 11, scope: !8547)
!8551 = !DILocation(line: 971, column: 16, scope: !8547)
!8552 = !DILocation(line: 971, column: 27, scope: !8547)
!8553 = !DILocation(line: 971, column: 32, scope: !8547)
!8554 = !DILocation(line: 971, column: 24, scope: !8547)
!8555 = !DILocation(line: 971, column: 10, scope: !8547)
!8556 = !DILocation(line: 971, column: 3, scope: !8547)
!8557 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !8046, file: !8046, line: 1101, type: !8476, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8558 = !DILocalVariable(name: "imm", arg: 1, scope: !8557, file: !8046, line: 1101, type: !8423)
!8559 = !DILocation(line: 1101, column: 42, scope: !8557)
!8560 = !DILocation(line: 1103, column: 24, scope: !8557)
!8561 = !DILocation(line: 1103, column: 29, scope: !8557)
!8562 = !DILocation(line: 1103, column: 38, scope: !8557)
!8563 = !DILocation(line: 1103, column: 3, scope: !8557)
!8564 = !DILocation(line: 1103, column: 8, scope: !8557)
!8565 = !DILocation(line: 1103, column: 22, scope: !8557)
!8566 = !DILocation(line: 1104, column: 10, scope: !8557)
!8567 = !DILocation(line: 1104, column: 15, scope: !8557)
!8568 = !DILocation(line: 1104, column: 3, scope: !8557)
!8569 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !8046, file: !8046, line: 1110, type: !8448, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8570 = !DILocalVariable(name: "imm", arg: 1, scope: !8569, file: !8046, line: 1110, type: !8450)
!8571 = !DILocation(line: 1110, column: 48, scope: !8569)
!8572 = !DILocation(line: 1112, column: 11, scope: !8569)
!8573 = !DILocation(line: 1112, column: 16, scope: !8569)
!8574 = !DILocation(line: 1112, column: 29, scope: !8569)
!8575 = !DILocation(line: 1112, column: 34, scope: !8569)
!8576 = !DILocation(line: 1112, column: 24, scope: !8569)
!8577 = !DILocation(line: 1112, column: 10, scope: !8569)
!8578 = !DILocation(line: 1112, column: 3, scope: !8569)
!8579 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !8046, file: !8046, line: 233, type: !8580, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8580 = !DISubroutineType(types: !8581)
!8581 = !{null, !3551, !2326}
!8582 = !DILocalVariable(name: "use", arg: 1, scope: !8579, file: !8046, line: 233, type: !3551)
!8583 = !DILocation(line: 233, column: 37, scope: !8579)
!8584 = !DILocalVariable(name: "val", arg: 2, scope: !8579, file: !8046, line: 233, type: !2326)
!8585 = !DILocation(line: 233, column: 47, scope: !8579)
!8586 = !DILocation(line: 235, column: 19, scope: !8579)
!8587 = !DILocation(line: 235, column: 3, scope: !8579)
!8588 = !DILocation(line: 236, column: 17, scope: !8579)
!8589 = !DILocation(line: 236, column: 5, scope: !8579)
!8590 = !DILocation(line: 236, column: 10, scope: !8579)
!8591 = !DILocation(line: 236, column: 15, scope: !8579)
!8592 = !DILocation(line: 237, column: 17, scope: !8579)
!8593 = !DILocation(line: 237, column: 22, scope: !8579)
!8594 = !DILocation(line: 237, column: 3, scope: !8579)
!8595 = !DILocation(line: 238, column: 1, scope: !8579)
!8596 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !8046, file: !8046, line: 1118, type: !8476, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8597 = !DILocalVariable(name: "imm", arg: 1, scope: !8596, file: !8046, line: 1118, type: !8423)
!8598 = !DILocation(line: 1118, column: 41, scope: !8596)
!8599 = !DILocation(line: 1120, column: 18, scope: !8596)
!8600 = !DILocation(line: 1120, column: 23, scope: !8596)
!8601 = !DILocation(line: 1120, column: 3, scope: !8596)
!8602 = !DILocation(line: 1120, column: 8, scope: !8596)
!8603 = !DILocation(line: 1120, column: 16, scope: !8596)
!8604 = !DILocation(line: 1121, column: 30, scope: !8605)
!8605 = distinct !DILexicalBlock(scope: !8596, file: !8046, line: 1121, column: 7)
!8606 = !DILocation(line: 1121, column: 7, scope: !8605)
!8607 = !DILocation(line: 1121, column: 7, scope: !8596)
!8608 = !DILocation(line: 1122, column: 5, scope: !8605)
!8609 = !DILocation(line: 1125, column: 28, scope: !8610)
!8610 = distinct !DILexicalBlock(scope: !8605, file: !8046, line: 1124, column: 5)
!8611 = !DILocation(line: 1125, column: 33, scope: !8610)
!8612 = !DILocation(line: 1125, column: 42, scope: !8610)
!8613 = !DILocation(line: 1125, column: 7, scope: !8610)
!8614 = !DILocation(line: 1125, column: 12, scope: !8610)
!8615 = !DILocation(line: 1125, column: 26, scope: !8610)
!8616 = !DILocation(line: 1126, column: 14, scope: !8610)
!8617 = !DILocation(line: 1126, column: 19, scope: !8610)
!8618 = !DILocation(line: 1126, column: 7, scope: !8610)
!8619 = !DILocation(line: 1128, column: 1, scope: !8596)
!8620 = distinct !DISubprogram(name: "update_stmt", scope: !385, file: !385, line: 1456, type: !8621, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8621 = !DISubroutineType(types: !8622)
!8622 = !{null, !2201}
!8623 = !DILocalVariable(name: "s", arg: 1, scope: !8620, file: !385, line: 1456, type: !2201)
!8624 = !DILocation(line: 1456, column: 21, scope: !8620)
!8625 = !DILocation(line: 1458, column: 23, scope: !8626)
!8626 = distinct !DILexicalBlock(scope: !8620, file: !385, line: 1458, column: 7)
!8627 = !DILocation(line: 1458, column: 7, scope: !8626)
!8628 = !DILocation(line: 1458, column: 7, scope: !8620)
!8629 = !DILocation(line: 1460, column: 28, scope: !8630)
!8630 = distinct !DILexicalBlock(scope: !8626, file: !385, line: 1459, column: 5)
!8631 = !DILocation(line: 1460, column: 7, scope: !8630)
!8632 = !DILocation(line: 1461, column: 29, scope: !8630)
!8633 = !DILocation(line: 1461, column: 7, scope: !8630)
!8634 = !DILocation(line: 1462, column: 5, scope: !8630)
!8635 = !DILocation(line: 1463, column: 1, scope: !8620)
!8636 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !8046, file: !8046, line: 1083, type: !8637, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8637 = !DISubroutineType(types: !8638)
!8638 = !{!2201, !8423}
!8639 = !DILocalVariable(name: "imm", arg: 1, scope: !8636, file: !8046, line: 1083, type: !8423)
!8640 = !DILocation(line: 1083, column: 38, scope: !8636)
!8641 = !DILocation(line: 1085, column: 18, scope: !8636)
!8642 = !DILocation(line: 1085, column: 23, scope: !8636)
!8643 = !DILocation(line: 1085, column: 33, scope: !8636)
!8644 = !DILocation(line: 1085, column: 3, scope: !8636)
!8645 = !DILocation(line: 1085, column: 8, scope: !8636)
!8646 = !DILocation(line: 1085, column: 16, scope: !8636)
!8647 = !DILocation(line: 1086, column: 27, scope: !8648)
!8648 = distinct !DILexicalBlock(scope: !8636, file: !8046, line: 1086, column: 7)
!8649 = !DILocation(line: 1086, column: 7, scope: !8648)
!8650 = !DILocation(line: 1086, column: 7, scope: !8636)
!8651 = !DILocation(line: 1088, column: 11, scope: !8652)
!8652 = distinct !DILexicalBlock(scope: !8653, file: !8046, line: 1088, column: 11)
!8653 = distinct !DILexicalBlock(scope: !8648, file: !8046, line: 1087, column: 5)
!8654 = !DILocation(line: 1088, column: 16, scope: !8652)
!8655 = !DILocation(line: 1088, column: 26, scope: !8652)
!8656 = !DILocation(line: 1088, column: 31, scope: !8652)
!8657 = !DILocation(line: 1088, column: 11, scope: !8653)
!8658 = !DILocation(line: 1089, column: 19, scope: !8652)
!8659 = !DILocation(line: 1089, column: 24, scope: !8652)
!8660 = !DILocation(line: 1089, column: 2, scope: !8652)
!8661 = !DILocation(line: 1090, column: 7, scope: !8653)
!8662 = !DILocation(line: 1093, column: 25, scope: !8636)
!8663 = !DILocation(line: 1093, column: 30, scope: !8636)
!8664 = !DILocation(line: 1093, column: 39, scope: !8636)
!8665 = !DILocation(line: 1093, column: 3, scope: !8636)
!8666 = !DILocation(line: 1094, column: 10, scope: !8636)
!8667 = !DILocation(line: 1094, column: 3, scope: !8636)
!8668 = !DILocation(line: 1095, column: 1, scope: !8636)
!8669 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !8046, file: !8046, line: 699, type: !8670, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8670 = !DISubroutineType(types: !8671)
!8671 = !{!2326, !8373}
!8672 = !DILocalVariable(name: "ptr", arg: 1, scope: !8669, file: !8046, line: 699, type: !8373)
!8673 = !DILocation(line: 699, column: 33, scope: !8669)
!8674 = !DILocalVariable(name: "val", scope: !8669, file: !8046, line: 701, type: !2326)
!8675 = !DILocation(line: 701, column: 8, scope: !8669)
!8676 = !DILocation(line: 705, column: 7, scope: !8677)
!8677 = distinct !DILexicalBlock(scope: !8669, file: !8046, line: 705, column: 7)
!8678 = !DILocation(line: 705, column: 12, scope: !8677)
!8679 = !DILocation(line: 705, column: 7, scope: !8669)
!8680 = !DILocation(line: 707, column: 13, scope: !8681)
!8681 = distinct !DILexicalBlock(scope: !8677, file: !8046, line: 706, column: 5)
!8682 = !DILocation(line: 707, column: 11, scope: !8681)
!8683 = !DILocation(line: 708, column: 19, scope: !8681)
!8684 = !DILocation(line: 708, column: 24, scope: !8681)
!8685 = !DILocation(line: 708, column: 30, scope: !8681)
!8686 = !DILocation(line: 708, column: 7, scope: !8681)
!8687 = !DILocation(line: 708, column: 12, scope: !8681)
!8688 = !DILocation(line: 708, column: 17, scope: !8681)
!8689 = !DILocation(line: 709, column: 14, scope: !8681)
!8690 = !DILocation(line: 709, column: 7, scope: !8681)
!8691 = !DILocation(line: 711, column: 7, scope: !8692)
!8692 = distinct !DILexicalBlock(scope: !8669, file: !8046, line: 711, column: 7)
!8693 = !DILocation(line: 711, column: 12, scope: !8692)
!8694 = !DILocation(line: 711, column: 7, scope: !8669)
!8695 = !DILocation(line: 713, column: 13, scope: !8696)
!8696 = distinct !DILexicalBlock(scope: !8692, file: !8046, line: 712, column: 5)
!8697 = !DILocation(line: 713, column: 11, scope: !8696)
!8698 = !DILocation(line: 714, column: 19, scope: !8696)
!8699 = !DILocation(line: 714, column: 24, scope: !8696)
!8700 = !DILocation(line: 714, column: 30, scope: !8696)
!8701 = !DILocation(line: 714, column: 7, scope: !8696)
!8702 = !DILocation(line: 714, column: 12, scope: !8696)
!8703 = !DILocation(line: 714, column: 17, scope: !8696)
!8704 = !DILocation(line: 715, column: 14, scope: !8696)
!8705 = !DILocation(line: 715, column: 7, scope: !8696)
!8706 = !DILocation(line: 718, column: 3, scope: !8669)
!8707 = !DILocation(line: 718, column: 8, scope: !8669)
!8708 = !DILocation(line: 718, column: 13, scope: !8669)
!8709 = !DILocation(line: 719, column: 3, scope: !8669)
!8710 = !DILocation(line: 721, column: 1, scope: !8669)
!8711 = distinct !DISubprogram(name: "expand_gimple_cond", scope: !3, file: !3, line: 1591, type: !8712, scopeLine: 1592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!8712 = !DISubroutineType(types: !8713)
!8713 = !{!2748, !2748, !2201}
!8714 = !DILocalVariable(name: "bb", arg: 1, scope: !8711, file: !3, line: 1591, type: !2748)
!8715 = !DILocation(line: 1591, column: 33, scope: !8711)
!8716 = !DILocalVariable(name: "stmt", arg: 2, scope: !8711, file: !3, line: 1591, type: !2201)
!8717 = !DILocation(line: 1591, column: 44, scope: !8711)
!8718 = !DILocalVariable(name: "new_bb", scope: !8711, file: !3, line: 1593, type: !2748)
!8719 = !DILocation(line: 1593, column: 15, scope: !8711)
!8720 = !DILocalVariable(name: "dest", scope: !8711, file: !3, line: 1593, type: !2748)
!8721 = !DILocation(line: 1593, column: 23, scope: !8711)
!8722 = !DILocalVariable(name: "new_edge", scope: !8711, file: !3, line: 1594, type: !2180)
!8723 = !DILocation(line: 1594, column: 8, scope: !8711)
!8724 = !DILocalVariable(name: "true_edge", scope: !8711, file: !3, line: 1595, type: !2180)
!8725 = !DILocation(line: 1595, column: 8, scope: !8711)
!8726 = !DILocalVariable(name: "false_edge", scope: !8711, file: !3, line: 1596, type: !2180)
!8727 = !DILocation(line: 1596, column: 8, scope: !8711)
!8728 = !DILocalVariable(name: "last2", scope: !8711, file: !3, line: 1597, type: !2207)
!8729 = !DILocation(line: 1597, column: 7, scope: !8711)
!8730 = !DILocalVariable(name: "last", scope: !8711, file: !3, line: 1597, type: !2207)
!8731 = !DILocation(line: 1597, column: 14, scope: !8711)
!8732 = !DILocalVariable(name: "code", scope: !8711, file: !3, line: 1598, type: !134)
!8733 = !DILocation(line: 1598, column: 18, scope: !8711)
!8734 = !DILocalVariable(name: "op0", scope: !8711, file: !3, line: 1599, type: !2326)
!8735 = !DILocation(line: 1599, column: 8, scope: !8711)
!8736 = !DILocalVariable(name: "op1", scope: !8711, file: !3, line: 1599, type: !2326)
!8737 = !DILocation(line: 1599, column: 13, scope: !8711)
!8738 = !DILocation(line: 1601, column: 28, scope: !8711)
!8739 = !DILocation(line: 1601, column: 10, scope: !8711)
!8740 = !DILocation(line: 1601, column: 8, scope: !8711)
!8741 = !DILocation(line: 1602, column: 26, scope: !8711)
!8742 = !DILocation(line: 1602, column: 9, scope: !8711)
!8743 = !DILocation(line: 1602, column: 7, scope: !8711)
!8744 = !DILocation(line: 1603, column: 26, scope: !8711)
!8745 = !DILocation(line: 1603, column: 9, scope: !8711)
!8746 = !DILocation(line: 1603, column: 7, scope: !8711)
!8747 = !DILocation(line: 1612, column: 33, scope: !8748)
!8748 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 1612, column: 7)
!8749 = !DILocation(line: 1612, column: 7, scope: !8748)
!8750 = !DILocation(line: 1613, column: 7, scope: !8748)
!8751 = !DILocation(line: 1613, column: 13, scope: !8748)
!8752 = !DILocation(line: 1613, column: 10, scope: !8748)
!8753 = !DILocation(line: 1614, column: 7, scope: !8748)
!8754 = !DILocation(line: 1614, column: 10, scope: !8748)
!8755 = !DILocation(line: 1614, column: 26, scope: !8748)
!8756 = !DILocation(line: 1615, column: 7, scope: !8748)
!8757 = !DILocation(line: 1615, column: 27, scope: !8748)
!8758 = !DILocation(line: 1615, column: 35, scope: !8748)
!8759 = !DILocation(line: 1615, column: 10, scope: !8748)
!8760 = !DILocation(line: 1612, column: 7, scope: !8711)
!8761 = !DILocalVariable(name: "second", scope: !8762, file: !3, line: 1617, type: !2201)
!8762 = distinct !DILexicalBlock(scope: !8748, file: !3, line: 1616, column: 5)
!8763 = !DILocation(line: 1617, column: 14, scope: !8762)
!8764 = !DILocation(line: 1617, column: 23, scope: !8762)
!8765 = !DILocation(line: 1618, column: 24, scope: !8766)
!8766 = distinct !DILexicalBlock(scope: !8762, file: !3, line: 1618, column: 11)
!8767 = !DILocation(line: 1618, column: 11, scope: !8766)
!8768 = !DILocation(line: 1618, column: 32, scope: !8766)
!8769 = !DILocation(line: 1618, column: 11, scope: !8762)
!8770 = !DILocalVariable(name: "code2", scope: !8771, file: !3, line: 1620, type: !134)
!8771 = distinct !DILexicalBlock(scope: !8766, file: !3, line: 1619, column: 2)
!8772 = !DILocation(line: 1620, column: 19, scope: !8771)
!8773 = !DILocation(line: 1620, column: 51, scope: !8771)
!8774 = !DILocation(line: 1620, column: 27, scope: !8771)
!8775 = !DILocation(line: 1621, column: 8, scope: !8776)
!8776 = distinct !DILexicalBlock(scope: !8771, file: !3, line: 1621, column: 8)
!8777 = !DILocation(line: 1621, column: 32, scope: !8776)
!8778 = !DILocation(line: 1621, column: 8, scope: !8771)
!8779 = !DILocation(line: 1623, column: 15, scope: !8780)
!8780 = distinct !DILexicalBlock(scope: !8776, file: !3, line: 1622, column: 6)
!8781 = !DILocation(line: 1623, column: 13, scope: !8780)
!8782 = !DILocation(line: 1624, column: 34, scope: !8780)
!8783 = !DILocation(line: 1624, column: 14, scope: !8780)
!8784 = !DILocation(line: 1624, column: 12, scope: !8780)
!8785 = !DILocation(line: 1625, column: 34, scope: !8780)
!8786 = !DILocation(line: 1625, column: 14, scope: !8780)
!8787 = !DILocation(line: 1625, column: 12, scope: !8780)
!8788 = !DILocation(line: 1626, column: 6, scope: !8780)
!8789 = !DILocation(line: 1629, column: 13, scope: !8790)
!8790 = distinct !DILexicalBlock(scope: !8776, file: !3, line: 1629, column: 13)
!8791 = !DILocation(line: 1629, column: 63, scope: !8790)
!8792 = !DILocation(line: 1629, column: 13, scope: !8776)
!8793 = !DILocation(line: 1631, column: 13, scope: !8794)
!8794 = distinct !DILexicalBlock(scope: !8795, file: !3, line: 1631, column: 12)
!8795 = distinct !DILexicalBlock(scope: !8790, file: !3, line: 1630, column: 6)
!8796 = !DILocation(line: 1631, column: 19, scope: !8794)
!8797 = !DILocation(line: 1632, column: 6, scope: !8794)
!8798 = !DILocation(line: 1632, column: 9, scope: !8794)
!8799 = !DILocation(line: 1632, column: 42, scope: !8794)
!8800 = !DILocation(line: 1633, column: 6, scope: !8794)
!8801 = !DILocation(line: 1633, column: 9, scope: !8794)
!8802 = !DILocation(line: 1633, column: 49, scope: !8794)
!8803 = !DILocation(line: 1634, column: 5, scope: !8794)
!8804 = !DILocation(line: 1634, column: 8, scope: !8794)
!8805 = !DILocation(line: 1634, column: 14, scope: !8794)
!8806 = !DILocation(line: 1631, column: 12, scope: !8795)
!8807 = !DILocation(line: 1636, column: 10, scope: !8808)
!8808 = distinct !DILexicalBlock(scope: !8794, file: !3, line: 1635, column: 3)
!8809 = !DILocation(line: 1637, column: 31, scope: !8808)
!8810 = !DILocation(line: 1637, column: 11, scope: !8808)
!8811 = !DILocation(line: 1637, column: 9, scope: !8808)
!8812 = !DILocation(line: 1638, column: 31, scope: !8808)
!8813 = !DILocation(line: 1638, column: 11, scope: !8808)
!8814 = !DILocation(line: 1638, column: 9, scope: !8808)
!8815 = !DILocation(line: 1639, column: 3, scope: !8808)
!8816 = !DILocation(line: 1640, column: 17, scope: !8817)
!8817 = distinct !DILexicalBlock(scope: !8794, file: !3, line: 1640, column: 17)
!8818 = !DILocation(line: 1640, column: 23, scope: !8817)
!8819 = !DILocation(line: 1640, column: 39, scope: !8817)
!8820 = !DILocation(line: 1640, column: 42, scope: !8817)
!8821 = !DILocation(line: 1640, column: 48, scope: !8817)
!8822 = !DILocation(line: 1640, column: 17, scope: !8794)
!8823 = !DILocation(line: 1642, column: 10, scope: !8824)
!8824 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 1641, column: 3)
!8825 = !DILocation(line: 1643, column: 31, scope: !8824)
!8826 = !DILocation(line: 1643, column: 11, scope: !8824)
!8827 = !DILocation(line: 1643, column: 9, scope: !8824)
!8828 = !DILocation(line: 1644, column: 31, scope: !8824)
!8829 = !DILocation(line: 1644, column: 11, scope: !8824)
!8830 = !DILocation(line: 1644, column: 9, scope: !8824)
!8831 = !DILocation(line: 1645, column: 3, scope: !8824)
!8832 = !DILocation(line: 1646, column: 6, scope: !8795)
!8833 = !DILocation(line: 1647, column: 2, scope: !8771)
!8834 = !DILocation(line: 1648, column: 5, scope: !8762)
!8835 = !DILocation(line: 1650, column: 18, scope: !8711)
!8836 = !DILocation(line: 1650, column: 16, scope: !8711)
!8837 = !DILocation(line: 1650, column: 9, scope: !8711)
!8838 = !DILocation(line: 1652, column: 40, scope: !8711)
!8839 = !DILocation(line: 1652, column: 3, scope: !8711)
!8840 = !DILocation(line: 1653, column: 28, scope: !8841)
!8841 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 1653, column: 7)
!8842 = !DILocation(line: 1653, column: 7, scope: !8841)
!8843 = !DILocation(line: 1653, column: 7, scope: !8711)
!8844 = !DILocation(line: 1655, column: 55, scope: !8845)
!8845 = distinct !DILexicalBlock(scope: !8841, file: !3, line: 1654, column: 5)
!8846 = !DILocation(line: 1655, column: 38, scope: !8845)
!8847 = !DILocation(line: 1655, column: 7, scope: !8845)
!8848 = !DILocation(line: 1656, column: 42, scope: !8845)
!8849 = !DILocation(line: 1656, column: 28, scope: !8845)
!8850 = !DILocation(line: 1656, column: 7, scope: !8845)
!8851 = !DILocation(line: 1657, column: 5, scope: !8845)
!8852 = !DILocation(line: 1660, column: 3, scope: !8711)
!8853 = !DILocation(line: 1660, column: 14, scope: !8711)
!8854 = !DILocation(line: 1660, column: 20, scope: !8711)
!8855 = !DILocation(line: 1661, column: 3, scope: !8711)
!8856 = !DILocation(line: 1661, column: 15, scope: !8711)
!8857 = !DILocation(line: 1661, column: 21, scope: !8711)
!8858 = !DILocation(line: 1665, column: 7, scope: !8859)
!8859 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 1665, column: 7)
!8860 = !DILocation(line: 1665, column: 19, scope: !8859)
!8861 = !DILocation(line: 1665, column: 27, scope: !8859)
!8862 = !DILocation(line: 1665, column: 31, scope: !8859)
!8863 = !DILocation(line: 1665, column: 24, scope: !8859)
!8864 = !DILocation(line: 1665, column: 7, scope: !8711)
!8865 = !DILocation(line: 1667, column: 17, scope: !8866)
!8866 = distinct !DILexicalBlock(scope: !8859, file: !3, line: 1666, column: 5)
!8867 = !DILocation(line: 1667, column: 23, scope: !8866)
!8868 = !DILocation(line: 1667, column: 28, scope: !8866)
!8869 = !DILocation(line: 1667, column: 51, scope: !8866)
!8870 = !DILocation(line: 1667, column: 62, scope: !8866)
!8871 = !DILocation(line: 1667, column: 33, scope: !8866)
!8872 = !DILocation(line: 1668, column: 3, scope: !8866)
!8873 = !DILocation(line: 1668, column: 14, scope: !8866)
!8874 = !DILocation(line: 1667, column: 7, scope: !8866)
!8875 = !DILocation(line: 1669, column: 39, scope: !8866)
!8876 = !DILocation(line: 1669, column: 45, scope: !8866)
!8877 = !DILocation(line: 1669, column: 7, scope: !8866)
!8878 = !DILocation(line: 1670, column: 11, scope: !8879)
!8879 = distinct !DILexicalBlock(scope: !8866, file: !3, line: 1670, column: 11)
!8880 = !DILocation(line: 1670, column: 22, scope: !8879)
!8881 = !DILocation(line: 1670, column: 11, scope: !8866)
!8882 = !DILocation(line: 1672, column: 35, scope: !8883)
!8883 = distinct !DILexicalBlock(scope: !8879, file: !3, line: 1671, column: 2)
!8884 = !DILocation(line: 1672, column: 46, scope: !8883)
!8885 = !DILocation(line: 1672, column: 4, scope: !8883)
!8886 = !DILocation(line: 1673, column: 25, scope: !8883)
!8887 = !DILocation(line: 1673, column: 36, scope: !8883)
!8888 = !DILocation(line: 1673, column: 4, scope: !8883)
!8889 = !DILocation(line: 1674, column: 28, scope: !8883)
!8890 = !DILocation(line: 1674, column: 4, scope: !8883)
!8891 = !DILocation(line: 1674, column: 15, scope: !8883)
!8892 = !DILocation(line: 1674, column: 26, scope: !8883)
!8893 = !DILocation(line: 1675, column: 2, scope: !8883)
!8894 = !DILocation(line: 1676, column: 7, scope: !8866)
!8895 = !DILocation(line: 1676, column: 18, scope: !8866)
!8896 = !DILocation(line: 1676, column: 29, scope: !8866)
!8897 = !DILocation(line: 1677, column: 7, scope: !8866)
!8898 = !DILocation(line: 1677, column: 19, scope: !8866)
!8899 = !DILocation(line: 1677, column: 25, scope: !8866)
!8900 = !DILocation(line: 1678, column: 35, scope: !8866)
!8901 = !DILocation(line: 1678, column: 47, scope: !8866)
!8902 = !DILocation(line: 1678, column: 7, scope: !8866)
!8903 = !DILocation(line: 1679, column: 7, scope: !8866)
!8904 = !DILocation(line: 1681, column: 7, scope: !8905)
!8905 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 1681, column: 7)
!8906 = !DILocation(line: 1681, column: 18, scope: !8905)
!8907 = !DILocation(line: 1681, column: 26, scope: !8905)
!8908 = !DILocation(line: 1681, column: 30, scope: !8905)
!8909 = !DILocation(line: 1681, column: 23, scope: !8905)
!8910 = !DILocation(line: 1681, column: 7, scope: !8711)
!8911 = !DILocation(line: 1683, column: 20, scope: !8912)
!8912 = distinct !DILexicalBlock(scope: !8905, file: !3, line: 1682, column: 5)
!8913 = !DILocation(line: 1683, column: 26, scope: !8912)
!8914 = !DILocation(line: 1683, column: 31, scope: !8912)
!8915 = !DILocation(line: 1683, column: 54, scope: !8912)
!8916 = !DILocation(line: 1683, column: 66, scope: !8912)
!8917 = !DILocation(line: 1683, column: 36, scope: !8912)
!8918 = !DILocation(line: 1684, column: 6, scope: !8912)
!8919 = !DILocation(line: 1684, column: 18, scope: !8912)
!8920 = !DILocation(line: 1683, column: 7, scope: !8912)
!8921 = !DILocation(line: 1685, column: 39, scope: !8912)
!8922 = !DILocation(line: 1685, column: 45, scope: !8912)
!8923 = !DILocation(line: 1685, column: 7, scope: !8912)
!8924 = !DILocation(line: 1686, column: 11, scope: !8925)
!8925 = distinct !DILexicalBlock(scope: !8912, file: !3, line: 1686, column: 11)
!8926 = !DILocation(line: 1686, column: 23, scope: !8925)
!8927 = !DILocation(line: 1686, column: 11, scope: !8912)
!8928 = !DILocation(line: 1688, column: 35, scope: !8929)
!8929 = distinct !DILexicalBlock(scope: !8925, file: !3, line: 1687, column: 2)
!8930 = !DILocation(line: 1688, column: 47, scope: !8929)
!8931 = !DILocation(line: 1688, column: 4, scope: !8929)
!8932 = !DILocation(line: 1689, column: 25, scope: !8929)
!8933 = !DILocation(line: 1689, column: 37, scope: !8929)
!8934 = !DILocation(line: 1689, column: 4, scope: !8929)
!8935 = !DILocation(line: 1690, column: 29, scope: !8929)
!8936 = !DILocation(line: 1690, column: 4, scope: !8929)
!8937 = !DILocation(line: 1690, column: 16, scope: !8929)
!8938 = !DILocation(line: 1690, column: 27, scope: !8929)
!8939 = !DILocation(line: 1691, column: 2, scope: !8929)
!8940 = !DILocation(line: 1692, column: 7, scope: !8912)
!8941 = !DILocation(line: 1692, column: 19, scope: !8912)
!8942 = !DILocation(line: 1692, column: 30, scope: !8912)
!8943 = !DILocation(line: 1693, column: 7, scope: !8912)
!8944 = !DILocation(line: 1693, column: 18, scope: !8912)
!8945 = !DILocation(line: 1693, column: 24, scope: !8912)
!8946 = !DILocation(line: 1694, column: 35, scope: !8912)
!8947 = !DILocation(line: 1694, column: 46, scope: !8912)
!8948 = !DILocation(line: 1694, column: 7, scope: !8912)
!8949 = !DILocation(line: 1695, column: 7, scope: !8912)
!8950 = !DILocation(line: 1698, column: 13, scope: !8711)
!8951 = !DILocation(line: 1698, column: 19, scope: !8711)
!8952 = !DILocation(line: 1698, column: 24, scope: !8711)
!8953 = !DILocation(line: 1698, column: 47, scope: !8711)
!8954 = !DILocation(line: 1698, column: 58, scope: !8711)
!8955 = !DILocation(line: 1698, column: 29, scope: !8711)
!8956 = !DILocation(line: 1699, column: 6, scope: !8711)
!8957 = !DILocation(line: 1699, column: 17, scope: !8711)
!8958 = !DILocation(line: 1698, column: 3, scope: !8711)
!8959 = !DILocation(line: 1700, column: 10, scope: !8711)
!8960 = !DILocation(line: 1700, column: 8, scope: !8711)
!8961 = !DILocation(line: 1701, column: 7, scope: !8962)
!8962 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 1701, column: 7)
!8963 = !DILocation(line: 1701, column: 19, scope: !8962)
!8964 = !DILocation(line: 1701, column: 7, scope: !8711)
!8965 = !DILocation(line: 1703, column: 38, scope: !8966)
!8966 = distinct !DILexicalBlock(scope: !8962, file: !3, line: 1702, column: 5)
!8967 = !DILocation(line: 1703, column: 50, scope: !8966)
!8968 = !DILocation(line: 1703, column: 7, scope: !8966)
!8969 = !DILocation(line: 1704, column: 28, scope: !8966)
!8970 = !DILocation(line: 1704, column: 40, scope: !8966)
!8971 = !DILocation(line: 1704, column: 7, scope: !8966)
!8972 = !DILocation(line: 1705, column: 32, scope: !8966)
!8973 = !DILocation(line: 1705, column: 7, scope: !8966)
!8974 = !DILocation(line: 1705, column: 19, scope: !8966)
!8975 = !DILocation(line: 1705, column: 30, scope: !8966)
!8976 = !DILocation(line: 1706, column: 5, scope: !8966)
!8977 = !DILocation(line: 1707, column: 3, scope: !8711)
!8978 = !DILocation(line: 1707, column: 15, scope: !8711)
!8979 = !DILocation(line: 1707, column: 26, scope: !8711)
!8980 = !DILocation(line: 1708, column: 32, scope: !8711)
!8981 = !DILocation(line: 1708, column: 44, scope: !8711)
!8982 = !DILocation(line: 1708, column: 14, scope: !8711)
!8983 = !DILocation(line: 1708, column: 3, scope: !8711)
!8984 = !DILocation(line: 1710, column: 17, scope: !8711)
!8985 = !DILocation(line: 1710, column: 3, scope: !8711)
!8986 = !DILocation(line: 1710, column: 15, scope: !8711)
!8987 = !DILocation(line: 1711, column: 7, scope: !8988)
!8988 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 1711, column: 7)
!8989 = !DILocation(line: 1711, column: 7, scope: !8711)
!8990 = !DILocation(line: 1712, column: 19, scope: !8988)
!8991 = !DILocation(line: 1712, column: 5, scope: !8988)
!8992 = !DILocation(line: 1712, column: 17, scope: !8988)
!8993 = !DILocation(line: 1713, column: 23, scope: !8711)
!8994 = !DILocation(line: 1713, column: 3, scope: !8711)
!8995 = !DILocation(line: 1715, column: 32, scope: !8711)
!8996 = !DILocation(line: 1715, column: 50, scope: !8711)
!8997 = !DILocation(line: 1715, column: 68, scope: !8711)
!8998 = !DILocation(line: 1715, column: 12, scope: !8711)
!8999 = !DILocation(line: 1715, column: 10, scope: !8711)
!9000 = !DILocation(line: 1716, column: 10, scope: !8711)
!9001 = !DILocation(line: 1716, column: 22, scope: !8711)
!9002 = !DILocation(line: 1716, column: 8, scope: !8711)
!9003 = !DILocation(line: 1717, column: 23, scope: !8711)
!9004 = !DILocation(line: 1717, column: 35, scope: !8711)
!9005 = !DILocation(line: 1717, column: 3, scope: !8711)
!9006 = !DILocation(line: 1718, column: 3, scope: !8711)
!9007 = !DILocation(line: 1718, column: 15, scope: !8711)
!9008 = !DILocation(line: 1718, column: 21, scope: !8711)
!9009 = !DILocation(line: 1719, column: 19, scope: !8711)
!9010 = !DILocation(line: 1719, column: 31, scope: !8711)
!9011 = !DILocation(line: 1719, column: 3, scope: !8711)
!9012 = !DILocation(line: 1719, column: 11, scope: !8711)
!9013 = !DILocation(line: 1719, column: 17, scope: !8711)
!9014 = !DILocation(line: 1720, column: 23, scope: !8711)
!9015 = !DILocation(line: 1720, column: 3, scope: !8711)
!9016 = !DILocation(line: 1720, column: 11, scope: !8711)
!9017 = !DILocation(line: 1720, column: 21, scope: !8711)
!9018 = !DILocation(line: 1721, column: 25, scope: !8711)
!9019 = !DILocation(line: 1721, column: 33, scope: !8711)
!9020 = !DILocation(line: 1721, column: 14, scope: !8711)
!9021 = !DILocation(line: 1721, column: 12, scope: !8711)
!9022 = !DILocation(line: 1722, column: 3, scope: !8711)
!9023 = !DILocation(line: 1722, column: 13, scope: !8711)
!9024 = !DILocation(line: 1722, column: 25, scope: !8711)
!9025 = !DILocation(line: 1723, column: 21, scope: !8711)
!9026 = !DILocation(line: 1723, column: 29, scope: !8711)
!9027 = !DILocation(line: 1723, column: 3, scope: !8711)
!9028 = !DILocation(line: 1723, column: 13, scope: !8711)
!9029 = !DILocation(line: 1723, column: 19, scope: !8711)
!9030 = !DILocation(line: 1724, column: 7, scope: !9031)
!9031 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 1724, column: 7)
!9032 = !DILocation(line: 1724, column: 7, scope: !8711)
!9033 = !DILocation(line: 1725, column: 23, scope: !9031)
!9034 = !DILocation(line: 1725, column: 5, scope: !9031)
!9035 = !DILocation(line: 1725, column: 21, scope: !9031)
!9036 = !DILocation(line: 1726, column: 23, scope: !8711)
!9037 = !DILocation(line: 1726, column: 3, scope: !8711)
!9038 = !DILocation(line: 1728, column: 35, scope: !8711)
!9039 = !DILocation(line: 1728, column: 41, scope: !8711)
!9040 = !DILocation(line: 1728, column: 3, scope: !8711)
!9041 = !DILocation(line: 1730, column: 7, scope: !9042)
!9042 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 1730, column: 7)
!9043 = !DILocation(line: 1730, column: 18, scope: !9042)
!9044 = !DILocation(line: 1730, column: 7, scope: !8711)
!9045 = !DILocation(line: 1732, column: 38, scope: !9046)
!9046 = distinct !DILexicalBlock(scope: !9042, file: !3, line: 1731, column: 5)
!9047 = !DILocation(line: 1732, column: 49, scope: !9046)
!9048 = !DILocation(line: 1732, column: 7, scope: !9046)
!9049 = !DILocation(line: 1733, column: 28, scope: !9046)
!9050 = !DILocation(line: 1733, column: 39, scope: !9046)
!9051 = !DILocation(line: 1733, column: 7, scope: !9046)
!9052 = !DILocation(line: 1734, column: 31, scope: !9046)
!9053 = !DILocation(line: 1734, column: 7, scope: !9046)
!9054 = !DILocation(line: 1734, column: 18, scope: !9046)
!9055 = !DILocation(line: 1734, column: 29, scope: !9046)
!9056 = !DILocation(line: 1735, column: 5, scope: !9046)
!9057 = !DILocation(line: 1736, column: 3, scope: !8711)
!9058 = !DILocation(line: 1736, column: 14, scope: !8711)
!9059 = !DILocation(line: 1736, column: 25, scope: !8711)
!9060 = !DILocation(line: 1738, column: 10, scope: !8711)
!9061 = !DILocation(line: 1738, column: 3, scope: !8711)
!9062 = !DILocation(line: 1739, column: 1, scope: !8711)
!9063 = distinct !DISubprogram(name: "gimple_debug_bind_get_var", scope: !385, file: !385, line: 3268, type: !3648, scopeLine: 3269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9064 = !DILocalVariable(name: "dbg", arg: 1, scope: !9063, file: !385, line: 3268, type: !2201)
!9065 = !DILocation(line: 3268, column: 35, scope: !9063)
!9066 = !DILocation(line: 3274, column: 21, scope: !9063)
!9067 = !DILocation(line: 3274, column: 10, scope: !9063)
!9068 = !DILocation(line: 3274, column: 3, scope: !9063)
!9069 = distinct !DISubprogram(name: "gimple_debug_bind_has_value_p", scope: !385, file: !385, line: 3349, type: !9070, scopeLine: 3350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9070 = !DISubroutineType(types: !9071)
!9071 = !{!2439, !2201}
!9072 = !DILocalVariable(name: "dbg", arg: 1, scope: !9069, file: !385, line: 3349, type: !2201)
!9073 = !DILocation(line: 3349, column: 39, scope: !9069)
!9074 = !DILocation(line: 3355, column: 21, scope: !9069)
!9075 = !DILocation(line: 3355, column: 10, scope: !9069)
!9076 = !DILocation(line: 3355, column: 29, scope: !9069)
!9077 = !DILocation(line: 3355, column: 3, scope: !9069)
!9078 = distinct !DISubprogram(name: "gimple_debug_bind_get_value", scope: !385, file: !385, line: 3281, type: !3648, scopeLine: 3282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9079 = !DILocalVariable(name: "dbg", arg: 1, scope: !9078, file: !385, line: 3281, type: !2201)
!9080 = !DILocation(line: 3281, column: 37, scope: !9078)
!9081 = !DILocation(line: 3287, column: 21, scope: !9078)
!9082 = !DILocation(line: 3287, column: 10, scope: !9078)
!9083 = !DILocation(line: 3287, column: 3, scope: !9078)
!9084 = distinct !DISubprogram(name: "delink_stmt_imm_use", scope: !8046, file: !8046, line: 883, type: !8621, scopeLine: 884, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9085 = !DILocalVariable(name: "stmt", arg: 1, scope: !9084, file: !8046, line: 883, type: !2201)
!9086 = !DILocation(line: 883, column: 29, scope: !9084)
!9087 = !DILocalVariable(name: "iter", scope: !9084, file: !8046, line: 885, type: !5697)
!9088 = !DILocation(line: 885, column: 16, scope: !9084)
!9089 = !DILocalVariable(name: "use_p", scope: !9084, file: !8046, line: 886, type: !3551)
!9090 = !DILocation(line: 886, column: 18, scope: !9084)
!9091 = !DILocation(line: 888, column: 8, scope: !9092)
!9092 = distinct !DILexicalBlock(scope: !9084, file: !8046, line: 888, column: 8)
!9093 = !DILocation(line: 888, column: 8, scope: !9084)
!9094 = !DILocation(line: 889, column: 6, scope: !9095)
!9095 = distinct !DILexicalBlock(scope: !9092, file: !8046, line: 889, column: 6)
!9096 = !DILocation(line: 889, column: 6, scope: !9097)
!9097 = distinct !DILexicalBlock(scope: !9095, file: !8046, line: 889, column: 6)
!9098 = !DILocation(line: 890, column: 24, scope: !9097)
!9099 = !DILocation(line: 890, column: 8, scope: !9097)
!9100 = distinct !{!9100, !9094, !9101}
!9101 = !DILocation(line: 890, column: 29, scope: !9095)
!9102 = !DILocation(line: 891, column: 1, scope: !9084)
!9103 = distinct !DISubprogram(name: "is_gimple_call", scope: !385, file: !385, line: 1870, type: !3816, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9104 = !DILocalVariable(name: "gs", arg: 1, scope: !9103, file: !385, line: 1870, type: !3744)
!9105 = !DILocation(line: 1870, column: 30, scope: !9103)
!9106 = !DILocation(line: 1872, column: 23, scope: !9103)
!9107 = !DILocation(line: 1872, column: 10, scope: !9103)
!9108 = !DILocation(line: 1872, column: 27, scope: !9103)
!9109 = !DILocation(line: 1872, column: 3, scope: !9103)
!9110 = distinct !DISubprogram(name: "gimple_call_tail_p", scope: !385, file: !385, line: 2071, type: !9070, scopeLine: 2072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9111 = !DILocalVariable(name: "s", arg: 1, scope: !9110, file: !385, line: 2071, type: !2201)
!9112 = !DILocation(line: 2071, column: 28, scope: !9110)
!9113 = !DILocation(line: 2074, column: 11, scope: !9110)
!9114 = !DILocation(line: 2074, column: 14, scope: !9110)
!9115 = !DILocation(line: 2074, column: 21, scope: !9110)
!9116 = !DILocation(line: 2074, column: 29, scope: !9110)
!9117 = !DILocation(line: 2074, column: 49, scope: !9110)
!9118 = !DILocation(line: 2074, column: 10, scope: !9110)
!9119 = !DILocation(line: 2074, column: 3, scope: !9110)
!9120 = distinct !DISubprogram(name: "expand_gimple_tailcall", scope: !3, file: !3, line: 2020, type: !9121, scopeLine: 2021, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9121 = !DISubroutineType(types: !9122)
!9122 = !{!2748, !2748, !2201, !3547}
!9123 = !DILocalVariable(name: "bb", arg: 1, scope: !9120, file: !3, line: 2020, type: !2748)
!9124 = !DILocation(line: 2020, column: 37, scope: !9120)
!9125 = !DILocalVariable(name: "stmt", arg: 2, scope: !9120, file: !3, line: 2020, type: !2201)
!9126 = !DILocation(line: 2020, column: 48, scope: !9120)
!9127 = !DILocalVariable(name: "can_fallthru", arg: 3, scope: !9120, file: !3, line: 2020, type: !3547)
!9128 = !DILocation(line: 2020, column: 60, scope: !9120)
!9129 = !DILocalVariable(name: "last2", scope: !9120, file: !3, line: 2022, type: !2207)
!9130 = !DILocation(line: 2022, column: 7, scope: !9120)
!9131 = !DILocalVariable(name: "last", scope: !9120, file: !3, line: 2022, type: !2207)
!9132 = !DILocation(line: 2022, column: 14, scope: !9120)
!9133 = !DILocalVariable(name: "e", scope: !9120, file: !3, line: 2023, type: !2180)
!9134 = !DILocation(line: 2023, column: 8, scope: !9120)
!9135 = !DILocalVariable(name: "ei", scope: !9120, file: !3, line: 2024, type: !4235)
!9136 = !DILocation(line: 2024, column: 17, scope: !9120)
!9137 = !DILocalVariable(name: "probability", scope: !9120, file: !3, line: 2025, type: !2136)
!9138 = !DILocation(line: 2025, column: 7, scope: !9120)
!9139 = !DILocalVariable(name: "count", scope: !9120, file: !3, line: 2026, type: !3344)
!9140 = !DILocation(line: 2026, column: 13, scope: !9120)
!9141 = !DILocation(line: 2028, column: 38, scope: !9120)
!9142 = !DILocation(line: 2028, column: 18, scope: !9120)
!9143 = !DILocation(line: 2028, column: 16, scope: !9120)
!9144 = !DILocation(line: 2028, column: 9, scope: !9120)
!9145 = !DILocation(line: 2030, column: 15, scope: !9146)
!9146 = distinct !DILexicalBlock(scope: !9120, file: !3, line: 2030, column: 3)
!9147 = !DILocation(line: 2030, column: 13, scope: !9146)
!9148 = !DILocation(line: 2030, column: 8, scope: !9146)
!9149 = !DILocation(line: 2030, column: 33, scope: !9150)
!9150 = distinct !DILexicalBlock(scope: !9146, file: !3, line: 2030, column: 3)
!9151 = !DILocation(line: 2030, column: 3, scope: !9146)
!9152 = !DILocation(line: 2031, column: 9, scope: !9153)
!9153 = distinct !DILexicalBlock(scope: !9150, file: !3, line: 2031, column: 9)
!9154 = !DILocation(line: 2031, column: 23, scope: !9153)
!9155 = !DILocation(line: 2031, column: 26, scope: !9153)
!9156 = !DILocation(line: 2031, column: 9, scope: !9150)
!9157 = !DILocation(line: 2032, column: 7, scope: !9153)
!9158 = !DILocation(line: 2030, column: 46, scope: !9150)
!9159 = !DILocation(line: 2030, column: 44, scope: !9150)
!9160 = !DILocation(line: 2030, column: 3, scope: !9150)
!9161 = distinct !{!9161, !9151, !9162}
!9162 = !DILocation(line: 2032, column: 12, scope: !9146)
!9163 = !DILocation(line: 2034, column: 35, scope: !9120)
!9164 = !DILocation(line: 2034, column: 41, scope: !9120)
!9165 = !DILocation(line: 2034, column: 3, scope: !9120)
!9166 = !DILocation(line: 2036, column: 4, scope: !9120)
!9167 = !DILocation(line: 2036, column: 17, scope: !9120)
!9168 = !DILocation(line: 2037, column: 3, scope: !9120)
!9169 = !DILabel(scope: !9120, name: "found", file: !3, line: 2039)
!9170 = !DILocation(line: 2039, column: 2, scope: !9120)
!9171 = !DILocation(line: 2042, column: 3, scope: !9120)
!9172 = !DILocation(line: 2051, column: 15, scope: !9120)
!9173 = !DILocation(line: 2052, column: 9, scope: !9120)
!9174 = !DILocation(line: 2054, column: 13, scope: !9175)
!9175 = distinct !DILexicalBlock(scope: !9120, file: !3, line: 2054, column: 3)
!9176 = !DILocation(line: 2054, column: 8, scope: !9175)
!9177 = !DILocation(line: 2054, column: 40, scope: !9178)
!9178 = distinct !DILexicalBlock(scope: !9175, file: !3, line: 2054, column: 3)
!9179 = !DILocation(line: 2054, column: 38, scope: !9178)
!9180 = !DILocation(line: 2054, column: 3, scope: !9175)
!9181 = !DILocation(line: 2056, column: 13, scope: !9182)
!9182 = distinct !DILexicalBlock(scope: !9183, file: !3, line: 2056, column: 11)
!9183 = distinct !DILexicalBlock(scope: !9178, file: !3, line: 2055, column: 5)
!9184 = !DILocation(line: 2056, column: 16, scope: !9182)
!9185 = !DILocation(line: 2056, column: 22, scope: !9182)
!9186 = !DILocation(line: 2056, column: 11, scope: !9183)
!9187 = !DILocation(line: 2058, column: 8, scope: !9188)
!9188 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 2058, column: 8)
!9189 = distinct !DILexicalBlock(scope: !9182, file: !3, line: 2057, column: 2)
!9190 = !DILocation(line: 2058, column: 11, scope: !9188)
!9191 = !DILocation(line: 2058, column: 19, scope: !9188)
!9192 = !DILocation(line: 2058, column: 16, scope: !9188)
!9193 = !DILocation(line: 2058, column: 8, scope: !9189)
!9194 = !DILocation(line: 2060, column: 26, scope: !9195)
!9195 = distinct !DILexicalBlock(scope: !9188, file: !3, line: 2059, column: 6)
!9196 = !DILocation(line: 2060, column: 29, scope: !9195)
!9197 = !DILocation(line: 2060, column: 8, scope: !9195)
!9198 = !DILocation(line: 2060, column: 11, scope: !9195)
!9199 = !DILocation(line: 2060, column: 17, scope: !9195)
!9200 = !DILocation(line: 2060, column: 23, scope: !9195)
!9201 = !DILocation(line: 2061, column: 30, scope: !9195)
!9202 = !DILocation(line: 2061, column: 8, scope: !9195)
!9203 = !DILocation(line: 2061, column: 11, scope: !9195)
!9204 = !DILocation(line: 2061, column: 17, scope: !9195)
!9205 = !DILocation(line: 2061, column: 27, scope: !9195)
!9206 = !DILocation(line: 2062, column: 12, scope: !9207)
!9207 = distinct !DILexicalBlock(scope: !9195, file: !3, line: 2062, column: 12)
!9208 = !DILocation(line: 2062, column: 15, scope: !9207)
!9209 = !DILocation(line: 2062, column: 21, scope: !9207)
!9210 = !DILocation(line: 2062, column: 27, scope: !9207)
!9211 = !DILocation(line: 2062, column: 12, scope: !9195)
!9212 = !DILocation(line: 2063, column: 3, scope: !9207)
!9213 = !DILocation(line: 2063, column: 6, scope: !9207)
!9214 = !DILocation(line: 2063, column: 12, scope: !9207)
!9215 = !DILocation(line: 2063, column: 18, scope: !9207)
!9216 = !DILocation(line: 2064, column: 12, scope: !9217)
!9217 = distinct !DILexicalBlock(scope: !9195, file: !3, line: 2064, column: 12)
!9218 = !DILocation(line: 2064, column: 15, scope: !9217)
!9219 = !DILocation(line: 2064, column: 21, scope: !9217)
!9220 = !DILocation(line: 2064, column: 31, scope: !9217)
!9221 = !DILocation(line: 2064, column: 12, scope: !9195)
!9222 = !DILocation(line: 2065, column: 3, scope: !9217)
!9223 = !DILocation(line: 2065, column: 6, scope: !9217)
!9224 = !DILocation(line: 2065, column: 12, scope: !9217)
!9225 = !DILocation(line: 2065, column: 22, scope: !9217)
!9226 = !DILocation(line: 2066, column: 6, scope: !9195)
!9227 = !DILocation(line: 2067, column: 13, scope: !9189)
!9228 = !DILocation(line: 2067, column: 16, scope: !9189)
!9229 = !DILocation(line: 2067, column: 10, scope: !9189)
!9230 = !DILocation(line: 2068, column: 19, scope: !9189)
!9231 = !DILocation(line: 2068, column: 22, scope: !9189)
!9232 = !DILocation(line: 2068, column: 16, scope: !9189)
!9233 = !DILocation(line: 2069, column: 17, scope: !9189)
!9234 = !DILocation(line: 2069, column: 4, scope: !9189)
!9235 = !DILocation(line: 2070, column: 2, scope: !9189)
!9236 = !DILocation(line: 2072, column: 2, scope: !9182)
!9237 = !DILocation(line: 2054, column: 3, scope: !9178)
!9238 = distinct !{!9238, !9180, !9239}
!9239 = !DILocation(line: 2073, column: 5, scope: !9175)
!9240 = !DILocation(line: 2078, column: 10, scope: !9120)
!9241 = !DILocation(line: 2078, column: 8, scope: !9120)
!9242 = !DILocation(line: 2079, column: 3, scope: !9120)
!9243 = !DILocation(line: 2081, column: 4, scope: !9120)
!9244 = !DILocation(line: 2081, column: 17, scope: !9120)
!9245 = !DILocation(line: 2082, column: 3, scope: !9120)
!9246 = !DILocation(line: 2082, column: 10, scope: !9120)
!9247 = !DILocation(line: 2086, column: 11, scope: !9248)
!9248 = distinct !DILexicalBlock(scope: !9249, file: !3, line: 2086, column: 11)
!9249 = distinct !DILexicalBlock(scope: !9120, file: !3, line: 2083, column: 5)
!9250 = !DILocation(line: 2086, column: 11, scope: !9249)
!9251 = !DILocation(line: 2088, column: 5, scope: !9252)
!9252 = distinct !DILexicalBlock(scope: !9248, file: !3, line: 2087, column: 2)
!9253 = !DILocation(line: 2088, column: 18, scope: !9252)
!9254 = !DILocation(line: 2089, column: 4, scope: !9252)
!9255 = !DILocation(line: 2091, column: 20, scope: !9249)
!9256 = !DILocation(line: 2091, column: 7, scope: !9249)
!9257 = distinct !{!9257, !9245, !9258}
!9258 = !DILocation(line: 2092, column: 5, scope: !9120)
!9259 = !DILocation(line: 2094, column: 18, scope: !9120)
!9260 = !DILocation(line: 2094, column: 22, scope: !9120)
!9261 = !DILocation(line: 2094, column: 7, scope: !9120)
!9262 = !DILocation(line: 2094, column: 5, scope: !9120)
!9263 = !DILocation(line: 2095, column: 21, scope: !9120)
!9264 = !DILocation(line: 2095, column: 3, scope: !9120)
!9265 = !DILocation(line: 2095, column: 6, scope: !9120)
!9266 = !DILocation(line: 2095, column: 18, scope: !9120)
!9267 = !DILocation(line: 2096, column: 15, scope: !9120)
!9268 = !DILocation(line: 2096, column: 3, scope: !9120)
!9269 = !DILocation(line: 2096, column: 6, scope: !9120)
!9270 = !DILocation(line: 2096, column: 12, scope: !9120)
!9271 = !DILocation(line: 2097, column: 17, scope: !9120)
!9272 = !DILocation(line: 2097, column: 3, scope: !9120)
!9273 = !DILocation(line: 2097, column: 15, scope: !9120)
!9274 = !DILocation(line: 2098, column: 23, scope: !9120)
!9275 = !DILocation(line: 2098, column: 3, scope: !9120)
!9276 = !DILocation(line: 2100, column: 7, scope: !9277)
!9277 = distinct !DILexicalBlock(scope: !9120, file: !3, line: 2100, column: 7)
!9278 = !DILocation(line: 2100, column: 7, scope: !9120)
!9279 = !DILocation(line: 2102, column: 32, scope: !9280)
!9280 = distinct !DILexicalBlock(scope: !9277, file: !3, line: 2101, column: 5)
!9281 = !DILocation(line: 2102, column: 50, scope: !9280)
!9282 = !DILocation(line: 2102, column: 68, scope: !9280)
!9283 = !DILocation(line: 2102, column: 12, scope: !9280)
!9284 = !DILocation(line: 2102, column: 10, scope: !9280)
!9285 = !DILocation(line: 2104, column: 14, scope: !9280)
!9286 = !DILocation(line: 2104, column: 12, scope: !9280)
!9287 = !DILocation(line: 2105, column: 11, scope: !9288)
!9288 = distinct !DILexicalBlock(scope: !9280, file: !3, line: 2105, column: 11)
!9289 = !DILocation(line: 2105, column: 11, scope: !9280)
!9290 = !DILocation(line: 2106, column: 16, scope: !9288)
!9291 = !DILocation(line: 2106, column: 2, scope: !9288)
!9292 = !DILocation(line: 2106, column: 14, scope: !9288)
!9293 = !DILocation(line: 2107, column: 5, scope: !9280)
!9294 = !DILocation(line: 2109, column: 35, scope: !9120)
!9295 = !DILocation(line: 2109, column: 41, scope: !9120)
!9296 = !DILocation(line: 2109, column: 3, scope: !9120)
!9297 = !DILocation(line: 2111, column: 10, scope: !9120)
!9298 = !DILocation(line: 2111, column: 3, scope: !9120)
!9299 = !DILocation(line: 2112, column: 1, scope: !9120)
!9300 = distinct !DISubprogram(name: "single_ssa_def_operand", scope: !8046, file: !8046, line: 840, type: !9301, scopeLine: 841, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9301 = !DISubroutineType(types: !9302)
!9302 = !{!3554, !2201, !2136}
!9303 = !DILocalVariable(name: "stmt", arg: 1, scope: !9300, file: !8046, line: 840, type: !2201)
!9304 = !DILocation(line: 840, column: 32, scope: !9300)
!9305 = !DILocalVariable(name: "flags", arg: 2, scope: !9300, file: !8046, line: 840, type: !2136)
!9306 = !DILocation(line: 840, column: 42, scope: !9300)
!9307 = !DILocalVariable(name: "var", scope: !9300, file: !8046, line: 842, type: !3554)
!9308 = !DILocation(line: 842, column: 17, scope: !9300)
!9309 = !DILocalVariable(name: "iter", scope: !9300, file: !8046, line: 843, type: !5697)
!9310 = !DILocation(line: 843, column: 15, scope: !9300)
!9311 = !DILocation(line: 845, column: 34, scope: !9300)
!9312 = !DILocation(line: 845, column: 40, scope: !9300)
!9313 = !DILocation(line: 845, column: 9, scope: !9300)
!9314 = !DILocation(line: 845, column: 7, scope: !9300)
!9315 = !DILocation(line: 846, column: 7, scope: !9316)
!9316 = distinct !DILexicalBlock(scope: !9300, file: !8046, line: 846, column: 7)
!9317 = !DILocation(line: 846, column: 7, scope: !9300)
!9318 = !DILocation(line: 847, column: 5, scope: !9316)
!9319 = !DILocation(line: 848, column: 3, scope: !9300)
!9320 = !DILocation(line: 849, column: 7, scope: !9321)
!9321 = distinct !DILexicalBlock(scope: !9300, file: !8046, line: 849, column: 7)
!9322 = !DILocation(line: 849, column: 7, scope: !9300)
!9323 = !DILocation(line: 850, column: 12, scope: !9321)
!9324 = !DILocation(line: 850, column: 5, scope: !9321)
!9325 = !DILocation(line: 851, column: 3, scope: !9300)
!9326 = !DILocation(line: 852, column: 1, scope: !9300)
!9327 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !8046, file: !8046, line: 434, type: !9328, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9328 = !DISubroutineType(types: !9329)
!9329 = !{!2326, !3554}
!9330 = !DILocalVariable(name: "def", arg: 1, scope: !9327, file: !8046, line: 434, type: !3554)
!9331 = !DILocation(line: 434, column: 33, scope: !9327)
!9332 = !DILocation(line: 436, column: 11, scope: !9327)
!9333 = !DILocation(line: 436, column: 10, scope: !9327)
!9334 = !DILocation(line: 436, column: 3, scope: !9327)
!9335 = distinct !DISubprogram(name: "label_rtx_for_bb", scope: !3, file: !3, line: 1506, type: !9336, scopeLine: 1507, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9336 = !DISubroutineType(types: !9337)
!9337 = !{!2207, !2748}
!9338 = !DILocalVariable(name: "bb", arg: 1, scope: !9335, file: !3, line: 1506, type: !2748)
!9339 = !DILocation(line: 1506, column: 31, scope: !9335)
!9340 = !DILocalVariable(name: "gsi", scope: !9335, file: !3, line: 1508, type: !5076)
!9341 = !DILocation(line: 1508, column: 24, scope: !9335)
!9342 = !DILocalVariable(name: "lab", scope: !9335, file: !3, line: 1509, type: !2326)
!9343 = !DILocation(line: 1509, column: 8, scope: !9335)
!9344 = !DILocalVariable(name: "lab_stmt", scope: !9335, file: !3, line: 1510, type: !2201)
!9345 = !DILocation(line: 1510, column: 10, scope: !9335)
!9346 = !DILocalVariable(name: "elt", scope: !9335, file: !3, line: 1511, type: !2686)
!9347 = !DILocation(line: 1511, column: 10, scope: !9335)
!9348 = !DILocation(line: 1513, column: 7, scope: !9349)
!9349 = distinct !DILexicalBlock(scope: !9335, file: !3, line: 1513, column: 7)
!9350 = !DILocation(line: 1513, column: 11, scope: !9349)
!9351 = !DILocation(line: 1513, column: 17, scope: !9349)
!9352 = !DILocation(line: 1513, column: 7, scope: !9335)
!9353 = !DILocation(line: 1514, column: 25, scope: !9349)
!9354 = !DILocation(line: 1514, column: 12, scope: !9349)
!9355 = !DILocation(line: 1514, column: 5, scope: !9349)
!9356 = !DILocation(line: 1516, column: 31, scope: !9335)
!9357 = !DILocation(line: 1516, column: 47, scope: !9335)
!9358 = !DILocation(line: 1516, column: 9, scope: !9335)
!9359 = !DILocation(line: 1516, column: 7, scope: !9335)
!9360 = !DILocation(line: 1517, column: 7, scope: !9361)
!9361 = distinct !DILexicalBlock(scope: !9335, file: !3, line: 1517, column: 7)
!9362 = !DILocation(line: 1517, column: 7, scope: !9335)
!9363 = !DILocation(line: 1518, column: 19, scope: !9361)
!9364 = !DILocation(line: 1518, column: 18, scope: !9361)
!9365 = !DILocation(line: 1518, column: 12, scope: !9361)
!9366 = !DILocation(line: 1518, column: 5, scope: !9361)
!9367 = !DILocation(line: 1522, column: 28, scope: !9368)
!9368 = distinct !DILexicalBlock(scope: !9335, file: !3, line: 1522, column: 3)
!9369 = !DILocation(line: 1522, column: 14, scope: !9368)
!9370 = !DILocation(line: 1522, column: 8, scope: !9368)
!9371 = !DILocation(line: 1522, column: 34, scope: !9372)
!9372 = distinct !DILexicalBlock(scope: !9368, file: !3, line: 1522, column: 3)
!9373 = !DILocation(line: 1522, column: 33, scope: !9372)
!9374 = !DILocation(line: 1522, column: 3, scope: !9368)
!9375 = !DILocation(line: 1524, column: 18, scope: !9376)
!9376 = distinct !DILexicalBlock(scope: !9372, file: !3, line: 1523, column: 5)
!9377 = !DILocation(line: 1524, column: 16, scope: !9376)
!9378 = !DILocation(line: 1525, column: 24, scope: !9379)
!9379 = distinct !DILexicalBlock(scope: !9376, file: !3, line: 1525, column: 11)
!9380 = !DILocation(line: 1525, column: 11, scope: !9379)
!9381 = !DILocation(line: 1525, column: 34, scope: !9379)
!9382 = !DILocation(line: 1525, column: 11, scope: !9376)
!9383 = !DILocation(line: 1526, column: 2, scope: !9379)
!9384 = !DILocation(line: 1528, column: 33, scope: !9376)
!9385 = !DILocation(line: 1528, column: 13, scope: !9376)
!9386 = !DILocation(line: 1528, column: 11, scope: !9376)
!9387 = !DILocation(line: 1529, column: 11, scope: !9388)
!9388 = distinct !DILexicalBlock(scope: !9376, file: !3, line: 1529, column: 11)
!9389 = !DILocation(line: 1529, column: 11, scope: !9376)
!9390 = !DILocation(line: 1530, column: 2, scope: !9388)
!9391 = !DILocation(line: 1532, column: 25, scope: !9376)
!9392 = !DILocation(line: 1532, column: 14, scope: !9376)
!9393 = !DILocation(line: 1532, column: 7, scope: !9376)
!9394 = !DILocation(line: 1522, column: 51, scope: !9372)
!9395 = !DILocation(line: 1522, column: 3, scope: !9372)
!9396 = distinct !{!9396, !9374, !9397}
!9397 = !DILocation(line: 1533, column: 5, scope: !9368)
!9398 = !DILocation(line: 1535, column: 29, scope: !9335)
!9399 = !DILocation(line: 1535, column: 45, scope: !9335)
!9400 = !DILocation(line: 1535, column: 9, scope: !9335)
!9401 = !DILocation(line: 1535, column: 7, scope: !9335)
!9402 = !DILocation(line: 1536, column: 10, scope: !9335)
!9403 = !DILocation(line: 1536, column: 4, scope: !9335)
!9404 = !DILocation(line: 1536, column: 8, scope: !9335)
!9405 = !DILocation(line: 1537, column: 17, scope: !9335)
!9406 = !DILocation(line: 1537, column: 16, scope: !9335)
!9407 = !DILocation(line: 1537, column: 10, scope: !9335)
!9408 = !DILocation(line: 1537, column: 3, scope: !9335)
!9409 = !DILocation(line: 1538, column: 1, scope: !9335)
!9410 = distinct !DISubprogram(name: "gimple_seq_last", scope: !385, file: !385, line: 178, type: !6606, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9411 = !DILocalVariable(name: "s", arg: 1, scope: !9410, file: !385, line: 178, type: !6608)
!9412 = !DILocation(line: 178, column: 35, scope: !9410)
!9413 = !DILocation(line: 180, column: 10, scope: !9410)
!9414 = !DILocation(line: 180, column: 14, scope: !9410)
!9415 = !DILocation(line: 180, column: 17, scope: !9410)
!9416 = !DILocation(line: 180, column: 3, scope: !9410)
!9417 = distinct !DISubprogram(name: "gimple_bb", scope: !385, file: !385, line: 1112, type: !9418, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9418 = !DISubroutineType(types: !9419)
!9419 = !{!2164, !3744}
!9420 = !DILocalVariable(name: "g", arg: 1, scope: !9417, file: !385, line: 1112, type: !3744)
!9421 = !DILocation(line: 1112, column: 25, scope: !9417)
!9422 = !DILocation(line: 1114, column: 10, scope: !9417)
!9423 = !DILocation(line: 1114, column: 13, scope: !9417)
!9424 = !DILocation(line: 1114, column: 20, scope: !9417)
!9425 = !DILocation(line: 1114, column: 3, scope: !9417)
!9426 = distinct !DISubprogram(name: "expand_gimple_stmt_1", scope: !3, file: !3, line: 1801, type: !8621, scopeLine: 1802, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9427 = !DILocalVariable(name: "stmt", arg: 1, scope: !9426, file: !3, line: 1801, type: !2201)
!9428 = !DILocation(line: 1801, column: 30, scope: !9426)
!9429 = !DILocalVariable(name: "op0", scope: !9426, file: !3, line: 1803, type: !2326)
!9430 = !DILocation(line: 1803, column: 8, scope: !9426)
!9431 = !DILocation(line: 1804, column: 24, scope: !9426)
!9432 = !DILocation(line: 1804, column: 11, scope: !9426)
!9433 = !DILocation(line: 1804, column: 3, scope: !9426)
!9434 = !DILocation(line: 1807, column: 31, scope: !9435)
!9435 = distinct !DILexicalBlock(scope: !9426, file: !3, line: 1805, column: 5)
!9436 = !DILocation(line: 1807, column: 13, scope: !9435)
!9437 = !DILocation(line: 1807, column: 11, scope: !9435)
!9438 = !DILocation(line: 1808, column: 11, scope: !9439)
!9439 = distinct !DILexicalBlock(scope: !9435, file: !3, line: 1808, column: 11)
!9440 = !DILocation(line: 1808, column: 27, scope: !9439)
!9441 = !DILocation(line: 1808, column: 11, scope: !9435)
!9442 = !DILocation(line: 1809, column: 15, scope: !9439)
!9443 = !DILocation(line: 1809, column: 2, scope: !9439)
!9444 = !DILocation(line: 1811, column: 24, scope: !9439)
!9445 = !DILocation(line: 1811, column: 2, scope: !9439)
!9446 = !DILocation(line: 1812, column: 7, scope: !9435)
!9447 = !DILocation(line: 1814, column: 41, scope: !9435)
!9448 = !DILocation(line: 1814, column: 21, scope: !9435)
!9449 = !DILocation(line: 1814, column: 7, scope: !9435)
!9450 = !DILocation(line: 1815, column: 7, scope: !9435)
!9451 = !DILocation(line: 1818, column: 7, scope: !9435)
!9452 = !DILocation(line: 1820, column: 20, scope: !9435)
!9453 = !DILocation(line: 1820, column: 7, scope: !9435)
!9454 = !DILocation(line: 1821, column: 7, scope: !9435)
!9455 = !DILocation(line: 1823, column: 24, scope: !9435)
!9456 = !DILocation(line: 1823, column: 7, scope: !9435)
!9457 = !DILocation(line: 1824, column: 7, scope: !9435)
!9458 = !DILocation(line: 1826, column: 25, scope: !9435)
!9459 = !DILocation(line: 1826, column: 7, scope: !9435)
!9460 = !DILocation(line: 1827, column: 7, scope: !9435)
!9461 = !DILocation(line: 1830, column: 35, scope: !9435)
!9462 = !DILocation(line: 1830, column: 13, scope: !9435)
!9463 = !DILocation(line: 1830, column: 11, scope: !9435)
!9464 = !DILocation(line: 1832, column: 11, scope: !9465)
!9465 = distinct !DILexicalBlock(scope: !9435, file: !3, line: 1832, column: 11)
!9466 = !DILocation(line: 1832, column: 15, scope: !9465)
!9467 = !DILocation(line: 1832, column: 18, scope: !9465)
!9468 = !DILocation(line: 1832, column: 25, scope: !9465)
!9469 = !DILocation(line: 1832, column: 22, scope: !9465)
!9470 = !DILocation(line: 1832, column: 11, scope: !9435)
!9471 = !DILocalVariable(name: "result", scope: !9472, file: !3, line: 1834, type: !2326)
!9472 = distinct !DILexicalBlock(scope: !9465, file: !3, line: 1833, column: 2)
!9473 = !DILocation(line: 1834, column: 9, scope: !9472)
!9474 = !DILocation(line: 1834, column: 18, scope: !9472)
!9475 = !DILocation(line: 1838, column: 8, scope: !9476)
!9476 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 1838, column: 8)
!9477 = !DILocation(line: 1838, column: 15, scope: !9476)
!9478 = !DILocation(line: 1838, column: 12, scope: !9476)
!9479 = !DILocation(line: 1838, column: 8, scope: !9472)
!9480 = !DILocation(line: 1841, column: 8, scope: !9481)
!9481 = distinct !DILexicalBlock(scope: !9476, file: !3, line: 1839, column: 6)
!9482 = !DILocation(line: 1849, column: 14, scope: !9481)
!9483 = !DILocation(line: 1849, column: 12, scope: !9481)
!9484 = !DILocation(line: 1851, column: 6, scope: !9481)
!9485 = !DILocation(line: 1852, column: 2, scope: !9472)
!9486 = !DILocation(line: 1853, column: 12, scope: !9487)
!9487 = distinct !DILexicalBlock(scope: !9435, file: !3, line: 1853, column: 11)
!9488 = !DILocation(line: 1853, column: 11, scope: !9435)
!9489 = !DILocation(line: 1854, column: 2, scope: !9487)
!9490 = !DILocation(line: 1856, column: 17, scope: !9487)
!9491 = !DILocation(line: 1856, column: 2, scope: !9487)
!9492 = !DILocation(line: 1857, column: 7, scope: !9435)
!9493 = !DILocalVariable(name: "lhs", scope: !9494, file: !3, line: 1861, type: !2326)
!9494 = distinct !DILexicalBlock(scope: !9435, file: !3, line: 1860, column: 7)
!9495 = !DILocation(line: 1861, column: 7, scope: !9494)
!9496 = !DILocation(line: 1861, column: 32, scope: !9494)
!9497 = !DILocation(line: 1861, column: 13, scope: !9494)
!9498 = !DILocation(line: 1867, column: 6, scope: !9499)
!9499 = distinct !DILexicalBlock(scope: !9494, file: !3, line: 1867, column: 6)
!9500 = !DILocation(line: 1867, column: 22, scope: !9499)
!9501 = !DILocation(line: 1868, column: 6, scope: !9499)
!9502 = !DILocation(line: 1868, column: 49, scope: !9499)
!9503 = !DILocation(line: 1868, column: 31, scope: !9499)
!9504 = !DILocation(line: 1868, column: 9, scope: !9499)
!9505 = !DILocation(line: 1869, column: 9, scope: !9499)
!9506 = !DILocation(line: 1867, column: 6, scope: !9494)
!9507 = !DILocalVariable(name: "rhs", scope: !9508, file: !3, line: 1871, type: !2326)
!9508 = distinct !DILexicalBlock(scope: !9499, file: !3, line: 1870, column: 4)
!9509 = !DILocation(line: 1871, column: 11, scope: !9508)
!9510 = !DILocation(line: 1871, column: 37, scope: !9508)
!9511 = !DILocation(line: 1871, column: 17, scope: !9508)
!9512 = !DILocation(line: 1872, column: 6, scope: !9508)
!9513 = !DILocation(line: 1874, column: 31, scope: !9514)
!9514 = distinct !DILexicalBlock(scope: !9508, file: !3, line: 1874, column: 10)
!9515 = !DILocation(line: 1874, column: 10, scope: !9514)
!9516 = !DILocation(line: 1874, column: 37, scope: !9514)
!9517 = !DILocation(line: 1874, column: 40, scope: !9514)
!9518 = !DILocation(line: 1874, column: 10, scope: !9508)
!9519 = !DILocation(line: 1875, column: 8, scope: !9514)
!9520 = !DILocation(line: 1876, column: 25, scope: !9508)
!9521 = !DILocation(line: 1876, column: 30, scope: !9508)
!9522 = !DILocation(line: 1877, column: 45, scope: !9508)
!9523 = !DILocation(line: 1877, column: 11, scope: !9508)
!9524 = !DILocation(line: 1876, column: 6, scope: !9508)
!9525 = !DILocation(line: 1878, column: 4, scope: !9508)
!9526 = !DILocalVariable(name: "target", scope: !9527, file: !3, line: 1881, type: !2207)
!9527 = distinct !DILexicalBlock(scope: !9499, file: !3, line: 1880, column: 4)
!9528 = !DILocation(line: 1881, column: 10, scope: !9527)
!9529 = !DILocalVariable(name: "temp", scope: !9527, file: !3, line: 1881, type: !2207)
!9530 = !DILocation(line: 1881, column: 18, scope: !9527)
!9531 = !DILocalVariable(name: "nontemporal", scope: !9527, file: !3, line: 1882, type: !2439)
!9532 = !DILocation(line: 1882, column: 11, scope: !9527)
!9533 = !DILocation(line: 1882, column: 59, scope: !9527)
!9534 = !DILocation(line: 1882, column: 25, scope: !9527)
!9535 = !DILocalVariable(name: "ops", scope: !9527, file: !3, line: 1883, type: !9536)
!9536 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "separate_ops", file: !2067, line: 273, size: 384, elements: !9537)
!9537 = !{!9538, !9539, !9540, !9541, !9542, !9543}
!9538 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !9536, file: !2067, line: 275, baseType: !134, size: 32)
!9539 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !9536, file: !2067, line: 276, baseType: !2326, size: 64, offset: 64)
!9540 = !DIDerivedType(tag: DW_TAG_member, name: "op0", scope: !9536, file: !2067, line: 277, baseType: !2326, size: 64, offset: 128)
!9541 = !DIDerivedType(tag: DW_TAG_member, name: "op1", scope: !9536, file: !2067, line: 277, baseType: !2326, size: 64, offset: 192)
!9542 = !DIDerivedType(tag: DW_TAG_member, name: "op2", scope: !9536, file: !2067, line: 277, baseType: !2326, size: 64, offset: 256)
!9543 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !9536, file: !2067, line: 278, baseType: !2160, size: 32, offset: 320)
!9544 = !DILocation(line: 1883, column: 26, scope: !9527)
!9545 = !DILocalVariable(name: "promoted", scope: !9527, file: !3, line: 1884, type: !2439)
!9546 = !DILocation(line: 1884, column: 11, scope: !9527)
!9547 = !DILocation(line: 1886, column: 28, scope: !9527)
!9548 = !DILocation(line: 1886, column: 15, scope: !9527)
!9549 = !DILocation(line: 1886, column: 13, scope: !9527)
!9550 = !DILocation(line: 1887, column: 10, scope: !9551)
!9551 = distinct !DILexicalBlock(scope: !9527, file: !3, line: 1887, column: 10)
!9552 = !DILocation(line: 1887, column: 28, scope: !9551)
!9553 = !DILocation(line: 1887, column: 38, scope: !9551)
!9554 = !DILocation(line: 1887, column: 41, scope: !9551)
!9555 = !DILocation(line: 1887, column: 10, scope: !9527)
!9556 = !DILocation(line: 1888, column: 17, scope: !9551)
!9557 = !DILocation(line: 1888, column: 8, scope: !9551)
!9558 = !DILocation(line: 1890, column: 41, scope: !9527)
!9559 = !DILocation(line: 1890, column: 17, scope: !9527)
!9560 = !DILocation(line: 1890, column: 10, scope: !9527)
!9561 = !DILocation(line: 1890, column: 15, scope: !9527)
!9562 = !DILocation(line: 1891, column: 17, scope: !9527)
!9563 = !DILocation(line: 1891, column: 10, scope: !9527)
!9564 = !DILocation(line: 1891, column: 15, scope: !9527)
!9565 = !DILocation(line: 1892, column: 54, scope: !9527)
!9566 = !DILocation(line: 1892, column: 36, scope: !9527)
!9567 = !DILocation(line: 1892, column: 14, scope: !9527)
!9568 = !DILocation(line: 1892, column: 6, scope: !9527)
!9569 = !DILocation(line: 1895, column: 35, scope: !9570)
!9570 = distinct !DILexicalBlock(scope: !9527, file: !3, line: 1893, column: 8)
!9571 = !DILocation(line: 1895, column: 15, scope: !9570)
!9572 = !DILocation(line: 1895, column: 9, scope: !9570)
!9573 = !DILocation(line: 1895, column: 13, scope: !9570)
!9574 = !DILocation(line: 1895, column: 5, scope: !9570)
!9575 = !DILocation(line: 1898, column: 35, scope: !9570)
!9576 = !DILocation(line: 1898, column: 15, scope: !9570)
!9577 = !DILocation(line: 1898, column: 9, scope: !9570)
!9578 = !DILocation(line: 1898, column: 13, scope: !9570)
!9579 = !DILocation(line: 1899, column: 5, scope: !9570)
!9580 = !DILocation(line: 1901, column: 5, scope: !9570)
!9581 = !DILocation(line: 1902, column: 8, scope: !9570)
!9582 = !DILocation(line: 1903, column: 38, scope: !9527)
!9583 = !DILocation(line: 1903, column: 21, scope: !9527)
!9584 = !DILocation(line: 1903, column: 10, scope: !9527)
!9585 = !DILocation(line: 1903, column: 19, scope: !9527)
!9586 = !DILocation(line: 1908, column: 13, scope: !9527)
!9587 = !DILocation(line: 1908, column: 25, scope: !9527)
!9588 = !DILocation(line: 1908, column: 28, scope: !9527)
!9589 = !DILocation(line: 1908, column: 50, scope: !9527)
!9590 = !DILocation(line: 1908, column: 11, scope: !9527)
!9591 = !DILocation(line: 1909, column: 39, scope: !9527)
!9592 = !DILocation(line: 1909, column: 45, scope: !9527)
!9593 = !DILocation(line: 1909, column: 13, scope: !9527)
!9594 = !DILocation(line: 1909, column: 11, scope: !9527)
!9595 = !DILocation(line: 1912, column: 10, scope: !9596)
!9596 = distinct !DILexicalBlock(scope: !9527, file: !3, line: 1912, column: 10)
!9597 = !DILocation(line: 1912, column: 18, scope: !9596)
!9598 = !DILocation(line: 1912, column: 15, scope: !9596)
!9599 = !DILocation(line: 1912, column: 10, scope: !9527)
!9600 = !DILocation(line: 1914, column: 15, scope: !9601)
!9601 = distinct !DILexicalBlock(scope: !9596, file: !3, line: 1914, column: 15)
!9602 = !DILocation(line: 1914, column: 15, scope: !9596)
!9603 = !DILocalVariable(name: "unsignedp", scope: !9604, file: !3, line: 1916, type: !2136)
!9604 = distinct !DILexicalBlock(scope: !9601, file: !3, line: 1915, column: 8)
!9605 = !DILocation(line: 1916, column: 7, scope: !9604)
!9606 = !DILocation(line: 1916, column: 19, scope: !9604)
!9607 = !DILocation(line: 1919, column: 7, scope: !9608)
!9608 = distinct !DILexicalBlock(scope: !9604, file: !3, line: 1919, column: 7)
!9609 = !DILocation(line: 1919, column: 25, scope: !9608)
!9610 = !DILocation(line: 1919, column: 28, scope: !9608)
!9611 = !DILocation(line: 1919, column: 44, scope: !9608)
!9612 = !DILocation(line: 1919, column: 7, scope: !9604)
!9613 = !DILocation(line: 1921, column: 29, scope: !9614)
!9614 = distinct !DILexicalBlock(scope: !9608, file: !3, line: 1920, column: 5)
!9615 = !DILocation(line: 1922, column: 8, scope: !9614)
!9616 = !DILocation(line: 1923, column: 8, scope: !9614)
!9617 = !DILocation(line: 1923, column: 14, scope: !9614)
!9618 = !DILocation(line: 1921, column: 14, scope: !9614)
!9619 = !DILocation(line: 1921, column: 12, scope: !9614)
!9620 = !DILocation(line: 1924, column: 29, scope: !9614)
!9621 = !DILocation(line: 1925, column: 8, scope: !9614)
!9622 = !DILocation(line: 1925, column: 27, scope: !9614)
!9623 = !DILocation(line: 1925, column: 33, scope: !9614)
!9624 = !DILocation(line: 1924, column: 14, scope: !9614)
!9625 = !DILocation(line: 1924, column: 12, scope: !9614)
!9626 = !DILocation(line: 1926, column: 5, scope: !9614)
!9627 = !DILocation(line: 1928, column: 17, scope: !9604)
!9628 = !DILocation(line: 1928, column: 38, scope: !9604)
!9629 = !DILocation(line: 1928, column: 44, scope: !9604)
!9630 = !DILocation(line: 1928, column: 3, scope: !9604)
!9631 = !DILocation(line: 1929, column: 8, scope: !9604)
!9632 = !DILocation(line: 1930, column: 15, scope: !9633)
!9633 = distinct !DILexicalBlock(scope: !9601, file: !3, line: 1930, column: 15)
!9634 = !DILocation(line: 1930, column: 27, scope: !9633)
!9635 = !DILocation(line: 1930, column: 49, scope: !9633)
!9636 = !DILocation(line: 1930, column: 57, scope: !9633)
!9637 = !DILocation(line: 1930, column: 30, scope: !9633)
!9638 = !DILocation(line: 1930, column: 15, scope: !9601)
!9639 = !DILocation(line: 1934, column: 25, scope: !9640)
!9640 = distinct !DILexicalBlock(scope: !9633, file: !3, line: 1933, column: 8)
!9641 = !DILocation(line: 1934, column: 31, scope: !9640)
!9642 = !DILocation(line: 1934, column: 10, scope: !9640)
!9643 = !DILocation(line: 1934, column: 8, scope: !9640)
!9644 = !DILocation(line: 1935, column: 7, scope: !9645)
!9645 = distinct !DILexicalBlock(scope: !9640, file: !3, line: 1935, column: 7)
!9646 = !DILocation(line: 1935, column: 15, scope: !9645)
!9647 = !DILocation(line: 1935, column: 12, scope: !9645)
!9648 = !DILocation(line: 1935, column: 7, scope: !9640)
!9649 = !DILocation(line: 1936, column: 21, scope: !9645)
!9650 = !DILocation(line: 1936, column: 29, scope: !9645)
!9651 = !DILocation(line: 1936, column: 5, scope: !9645)
!9652 = !DILocation(line: 1940, column: 7, scope: !9435)
!9653 = !DILocation(line: 1943, column: 7, scope: !9435)
!9654 = !DILocation(line: 1944, column: 5, scope: !9435)
!9655 = !DILocation(line: 1945, column: 1, scope: !9426)
!9656 = distinct !DISubprogram(name: "gimple_goto_dest", scope: !385, file: !385, line: 2465, type: !3789, scopeLine: 2466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9657 = !DILocalVariable(name: "gs", arg: 1, scope: !9656, file: !385, line: 2465, type: !3744)
!9658 = !DILocation(line: 2465, column: 32, scope: !9656)
!9659 = !DILocation(line: 2468, column: 21, scope: !9656)
!9660 = !DILocation(line: 2468, column: 10, scope: !9656)
!9661 = !DILocation(line: 2468, column: 3, scope: !9656)
!9662 = distinct !DISubprogram(name: "gimple_label_label", scope: !385, file: !385, line: 2444, type: !3789, scopeLine: 2445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9663 = !DILocalVariable(name: "gs", arg: 1, scope: !9662, file: !385, line: 2444, type: !3744)
!9664 = !DILocation(line: 2444, column: 34, scope: !9662)
!9665 = !DILocation(line: 2447, column: 21, scope: !9662)
!9666 = !DILocation(line: 2447, column: 10, scope: !9662)
!9667 = !DILocation(line: 2447, column: 3, scope: !9662)
!9668 = distinct !DISubprogram(name: "expand_call_stmt", scope: !3, file: !3, line: 1745, type: !8621, scopeLine: 1746, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9669 = !DILocalVariable(name: "stmt", arg: 1, scope: !9668, file: !3, line: 1745, type: !2201)
!9670 = !DILocation(line: 1745, column: 26, scope: !9668)
!9671 = !DILocalVariable(name: "exp", scope: !9668, file: !3, line: 1747, type: !2326)
!9672 = !DILocation(line: 1747, column: 8, scope: !9668)
!9673 = !DILocalVariable(name: "lhs", scope: !9668, file: !3, line: 1748, type: !2326)
!9674 = !DILocation(line: 1748, column: 8, scope: !9668)
!9675 = !DILocation(line: 1748, column: 31, scope: !9668)
!9676 = !DILocation(line: 1748, column: 14, scope: !9668)
!9677 = !DILocalVariable(name: "i", scope: !9668, file: !3, line: 1749, type: !2140)
!9678 = !DILocation(line: 1749, column: 10, scope: !9668)
!9679 = !DILocalVariable(name: "builtin_p", scope: !9668, file: !3, line: 1750, type: !2439)
!9680 = !DILocation(line: 1750, column: 8, scope: !9668)
!9681 = !DILocalVariable(name: "decl", scope: !9668, file: !3, line: 1751, type: !2326)
!9682 = !DILocation(line: 1751, column: 8, scope: !9668)
!9683 = !DILocation(line: 1753, column: 9, scope: !9668)
!9684 = !DILocation(line: 1753, column: 7, scope: !9668)
!9685 = !DILocation(line: 1755, column: 40, scope: !9668)
!9686 = !DILocation(line: 1755, column: 24, scope: !9668)
!9687 = !DILocation(line: 1755, column: 3, scope: !9668)
!9688 = !DILocation(line: 1755, column: 22, scope: !9668)
!9689 = !DILocation(line: 1756, column: 30, scope: !9668)
!9690 = !DILocation(line: 1756, column: 10, scope: !9668)
!9691 = !DILocation(line: 1756, column: 8, scope: !9668)
!9692 = !DILocation(line: 1757, column: 15, scope: !9668)
!9693 = !DILocation(line: 1757, column: 20, scope: !9668)
!9694 = !DILocation(line: 1757, column: 23, scope: !9668)
!9695 = !DILocation(line: 0, scope: !9668)
!9696 = !DILocation(line: 1757, column: 13, scope: !9668)
!9697 = !DILocation(line: 1759, column: 46, scope: !9668)
!9698 = !DILocation(line: 1759, column: 21, scope: !9668)
!9699 = !DILocation(line: 1759, column: 3, scope: !9668)
!9700 = !DILocation(line: 1759, column: 19, scope: !9668)
!9701 = !DILocation(line: 1760, column: 53, scope: !9668)
!9702 = !DILocation(line: 1760, column: 34, scope: !9668)
!9703 = !DILocation(line: 1760, column: 3, scope: !9668)
!9704 = !DILocation(line: 1760, column: 32, scope: !9668)
!9705 = !DILocation(line: 1762, column: 10, scope: !9706)
!9706 = distinct !DILexicalBlock(scope: !9668, file: !3, line: 1762, column: 3)
!9707 = !DILocation(line: 1762, column: 8, scope: !9706)
!9708 = !DILocation(line: 1762, column: 15, scope: !9709)
!9709 = distinct !DILexicalBlock(scope: !9706, file: !3, line: 1762, column: 3)
!9710 = !DILocation(line: 1762, column: 41, scope: !9709)
!9711 = !DILocation(line: 1762, column: 19, scope: !9709)
!9712 = !DILocation(line: 1762, column: 17, scope: !9709)
!9713 = !DILocation(line: 1762, column: 3, scope: !9706)
!9714 = !DILocalVariable(name: "arg", scope: !9715, file: !3, line: 1764, type: !2326)
!9715 = distinct !DILexicalBlock(scope: !9709, file: !3, line: 1763, column: 5)
!9716 = !DILocation(line: 1764, column: 12, scope: !9715)
!9717 = !DILocation(line: 1764, column: 35, scope: !9715)
!9718 = !DILocation(line: 1764, column: 41, scope: !9715)
!9719 = !DILocation(line: 1764, column: 18, scope: !9715)
!9720 = !DILocalVariable(name: "def", scope: !9715, file: !3, line: 1765, type: !2201)
!9721 = !DILocation(line: 1765, column: 14, scope: !9715)
!9722 = !DILocation(line: 1768, column: 11, scope: !9723)
!9723 = distinct !DILexicalBlock(scope: !9715, file: !3, line: 1768, column: 11)
!9724 = !DILocation(line: 1769, column: 4, scope: !9723)
!9725 = !DILocation(line: 1769, column: 7, scope: !9723)
!9726 = !DILocation(line: 1769, column: 23, scope: !9723)
!9727 = !DILocation(line: 1770, column: 4, scope: !9723)
!9728 = !DILocation(line: 1770, column: 39, scope: !9723)
!9729 = !DILocation(line: 1770, column: 14, scope: !9723)
!9730 = !DILocation(line: 1770, column: 12, scope: !9723)
!9731 = !DILocation(line: 1771, column: 4, scope: !9723)
!9732 = !DILocation(line: 1771, column: 31, scope: !9723)
!9733 = !DILocation(line: 1771, column: 7, scope: !9723)
!9734 = !DILocation(line: 1771, column: 36, scope: !9723)
!9735 = !DILocation(line: 1768, column: 11, scope: !9715)
!9736 = !DILocation(line: 1772, column: 28, scope: !9723)
!9737 = !DILocation(line: 1772, column: 8, scope: !9723)
!9738 = !DILocation(line: 1772, column: 6, scope: !9723)
!9739 = !DILocation(line: 1772, column: 2, scope: !9723)
!9740 = !DILocation(line: 1773, column: 32, scope: !9715)
!9741 = !DILocation(line: 1773, column: 7, scope: !9715)
!9742 = !DILocation(line: 1773, column: 30, scope: !9715)
!9743 = !DILocation(line: 1774, column: 5, scope: !9715)
!9744 = !DILocation(line: 1762, column: 49, scope: !9709)
!9745 = !DILocation(line: 1762, column: 3, scope: !9709)
!9746 = distinct !{!9746, !9713, !9747}
!9747 = !DILocation(line: 1774, column: 5, scope: !9706)
!9748 = !DILocation(line: 1776, column: 32, scope: !9749)
!9749 = distinct !DILexicalBlock(scope: !9668, file: !3, line: 1776, column: 7)
!9750 = !DILocation(line: 1776, column: 7, scope: !9749)
!9751 = !DILocation(line: 1776, column: 7, scope: !9668)
!9752 = !DILocation(line: 1777, column: 5, scope: !9749)
!9753 = !DILocation(line: 1777, column: 29, scope: !9749)
!9754 = !DILocation(line: 1779, column: 30, scope: !9755)
!9755 = distinct !DILexicalBlock(scope: !9668, file: !3, line: 1779, column: 7)
!9756 = !DILocation(line: 1779, column: 7, scope: !9755)
!9757 = !DILocation(line: 1779, column: 7, scope: !9668)
!9758 = !DILocation(line: 1780, column: 5, scope: !9755)
!9759 = !DILocation(line: 1780, column: 24, scope: !9755)
!9760 = !DILocation(line: 1782, column: 50, scope: !9668)
!9761 = !DILocation(line: 1782, column: 30, scope: !9668)
!9762 = !DILocation(line: 1782, column: 3, scope: !9668)
!9763 = !DILocation(line: 1782, column: 28, scope: !9668)
!9764 = !DILocation(line: 1783, column: 68, scope: !9668)
!9765 = !DILocation(line: 1783, column: 37, scope: !9668)
!9766 = !DILocation(line: 1783, column: 3, scope: !9668)
!9767 = !DILocation(line: 1783, column: 35, scope: !9668)
!9768 = !DILocation(line: 1784, column: 55, scope: !9668)
!9769 = !DILocation(line: 1784, column: 29, scope: !9668)
!9770 = !DILocation(line: 1784, column: 3, scope: !9668)
!9771 = !DILocation(line: 1784, column: 27, scope: !9668)
!9772 = !DILocation(line: 1785, column: 61, scope: !9668)
!9773 = !DILocation(line: 1785, column: 32, scope: !9668)
!9774 = !DILocation(line: 1785, column: 3, scope: !9668)
!9775 = !DILocation(line: 1785, column: 30, scope: !9668)
!9776 = !DILocation(line: 1786, column: 60, scope: !9668)
!9777 = !DILocation(line: 1786, column: 33, scope: !9668)
!9778 = !DILocation(line: 1786, column: 3, scope: !9668)
!9779 = !DILocation(line: 1786, column: 31, scope: !9668)
!9780 = !DILocation(line: 1787, column: 3, scope: !9668)
!9781 = !DILocation(line: 1788, column: 36, scope: !9668)
!9782 = !DILocation(line: 1788, column: 22, scope: !9668)
!9783 = !DILocation(line: 1788, column: 3, scope: !9668)
!9784 = !DILocation(line: 1788, column: 20, scope: !9668)
!9785 = !DILocation(line: 1790, column: 7, scope: !9786)
!9786 = distinct !DILexicalBlock(scope: !9668, file: !3, line: 1790, column: 7)
!9787 = !DILocation(line: 1790, column: 7, scope: !9668)
!9788 = !DILocation(line: 1791, column: 24, scope: !9786)
!9789 = !DILocation(line: 1791, column: 29, scope: !9786)
!9790 = !DILocation(line: 1791, column: 5, scope: !9786)
!9791 = !DILocation(line: 1793, column: 25, scope: !9786)
!9792 = !DILocation(line: 1793, column: 30, scope: !9786)
!9793 = !DILocation(line: 1793, column: 5, scope: !9786)
!9794 = !DILocation(line: 1794, column: 1, scope: !9668)
!9795 = distinct !DISubprogram(name: "gimple_assign_nontemporal_move_p", scope: !385, file: !385, line: 1794, type: !3816, scopeLine: 1795, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9796 = !DILocalVariable(name: "gs", arg: 1, scope: !9795, file: !385, line: 1794, type: !3744)
!9797 = !DILocation(line: 1794, column: 48, scope: !9795)
!9798 = !DILocation(line: 1797, column: 10, scope: !9795)
!9799 = !DILocation(line: 1797, column: 14, scope: !9795)
!9800 = !DILocation(line: 1797, column: 21, scope: !9795)
!9801 = !DILocation(line: 1797, column: 3, scope: !9795)
!9802 = distinct !DISubprogram(name: "expand_expr", scope: !2067, file: !2067, line: 555, type: !9803, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9803 = !DISubroutineType(types: !9804)
!9804 = !{!2207, !2326, !2207, !5, !2066}
!9805 = !DILocalVariable(name: "exp", arg: 1, scope: !9802, file: !2067, line: 555, type: !2326)
!9806 = !DILocation(line: 555, column: 19, scope: !9802)
!9807 = !DILocalVariable(name: "target", arg: 2, scope: !9802, file: !2067, line: 555, type: !2207)
!9808 = !DILocation(line: 555, column: 28, scope: !9802)
!9809 = !DILocalVariable(name: "mode", arg: 3, scope: !9802, file: !2067, line: 555, type: !5)
!9810 = !DILocation(line: 555, column: 54, scope: !9802)
!9811 = !DILocalVariable(name: "modifier", arg: 4, scope: !9802, file: !2067, line: 556, type: !2066)
!9812 = !DILocation(line: 556, column: 28, scope: !9802)
!9813 = !DILocation(line: 558, column: 28, scope: !9802)
!9814 = !DILocation(line: 558, column: 33, scope: !9802)
!9815 = !DILocation(line: 558, column: 41, scope: !9802)
!9816 = !DILocation(line: 558, column: 47, scope: !9802)
!9817 = !DILocation(line: 558, column: 10, scope: !9802)
!9818 = !DILocation(line: 558, column: 3, scope: !9802)
!9819 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !385, file: !385, line: 1878, type: !3789, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9820 = !DILocalVariable(name: "gs", arg: 1, scope: !9819, file: !385, line: 1878, type: !3744)
!9821 = !DILocation(line: 1878, column: 31, scope: !9819)
!9822 = !DILocation(line: 1881, column: 21, scope: !9819)
!9823 = !DILocation(line: 1881, column: 10, scope: !9819)
!9824 = !DILocation(line: 1881, column: 3, scope: !9819)
!9825 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !385, file: !385, line: 2013, type: !4624, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9826 = !DILocalVariable(name: "gs", arg: 1, scope: !9825, file: !385, line: 2013, type: !3744)
!9827 = !DILocation(line: 2013, column: 36, scope: !9825)
!9828 = !DILocalVariable(name: "num_ops", scope: !9825, file: !385, line: 2015, type: !7)
!9829 = !DILocation(line: 2015, column: 12, scope: !9825)
!9830 = !DILocation(line: 2017, column: 29, scope: !9825)
!9831 = !DILocation(line: 2017, column: 13, scope: !9825)
!9832 = !DILocation(line: 2017, column: 11, scope: !9825)
!9833 = !DILocation(line: 2018, column: 10, scope: !9825)
!9834 = !DILocation(line: 2018, column: 18, scope: !9825)
!9835 = !DILocation(line: 2018, column: 3, scope: !9825)
!9836 = distinct !DISubprogram(name: "gimple_call_fn", scope: !385, file: !385, line: 1911, type: !3789, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9837 = !DILocalVariable(name: "gs", arg: 1, scope: !9836, file: !385, line: 1911, type: !3744)
!9838 = !DILocation(line: 1911, column: 30, scope: !9836)
!9839 = !DILocation(line: 1914, column: 21, scope: !9836)
!9840 = !DILocation(line: 1914, column: 10, scope: !9836)
!9841 = !DILocation(line: 1914, column: 3, scope: !9836)
!9842 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !385, file: !385, line: 1954, type: !3789, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9843 = !DILocalVariable(name: "gs", arg: 1, scope: !9842, file: !385, line: 1954, type: !3744)
!9844 = !DILocation(line: 1954, column: 34, scope: !9842)
!9845 = !DILocalVariable(name: "addr", scope: !9842, file: !385, line: 1956, type: !2326)
!9846 = !DILocation(line: 1956, column: 8, scope: !9842)
!9847 = !DILocation(line: 1956, column: 31, scope: !9842)
!9848 = !DILocation(line: 1956, column: 15, scope: !9842)
!9849 = !DILocation(line: 1957, column: 7, scope: !9850)
!9850 = distinct !DILexicalBlock(scope: !9842, file: !385, line: 1957, column: 7)
!9851 = !DILocation(line: 1957, column: 24, scope: !9850)
!9852 = !DILocation(line: 1957, column: 7, scope: !9842)
!9853 = !DILocation(line: 1958, column: 12, scope: !9850)
!9854 = !DILocation(line: 1958, column: 5, scope: !9850)
!9855 = !DILocation(line: 1959, column: 3, scope: !9842)
!9856 = !DILocation(line: 1960, column: 1, scope: !9842)
!9857 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !385, file: !385, line: 1966, type: !3789, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9858 = !DILocalVariable(name: "gs", arg: 1, scope: !9857, file: !385, line: 1966, type: !3744)
!9859 = !DILocation(line: 1966, column: 39, scope: !9857)
!9860 = !DILocalVariable(name: "fn", scope: !9857, file: !385, line: 1968, type: !2326)
!9861 = !DILocation(line: 1968, column: 8, scope: !9857)
!9862 = !DILocation(line: 1968, column: 29, scope: !9857)
!9863 = !DILocation(line: 1968, column: 13, scope: !9857)
!9864 = !DILocalVariable(name: "type", scope: !9857, file: !385, line: 1969, type: !2326)
!9865 = !DILocation(line: 1969, column: 8, scope: !9857)
!9866 = !DILocation(line: 1969, column: 15, scope: !9857)
!9867 = !DILocation(line: 1972, column: 10, scope: !9857)
!9868 = !DILocation(line: 1972, column: 8, scope: !9857)
!9869 = !DILocation(line: 1976, column: 10, scope: !9857)
!9870 = !DILocation(line: 1976, column: 3, scope: !9857)
!9871 = distinct !DISubprogram(name: "gimple_call_chain", scope: !385, file: !385, line: 1983, type: !3789, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9872 = !DILocalVariable(name: "gs", arg: 1, scope: !9871, file: !385, line: 1983, type: !3744)
!9873 = !DILocation(line: 1983, column: 33, scope: !9871)
!9874 = !DILocation(line: 1986, column: 21, scope: !9871)
!9875 = !DILocation(line: 1986, column: 10, scope: !9871)
!9876 = !DILocation(line: 1986, column: 3, scope: !9871)
!9877 = distinct !DISubprogram(name: "gimple_call_arg", scope: !385, file: !385, line: 2025, type: !4559, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9878 = !DILocalVariable(name: "gs", arg: 1, scope: !9877, file: !385, line: 2025, type: !3744)
!9879 = !DILocation(line: 2025, column: 31, scope: !9877)
!9880 = !DILocalVariable(name: "index", arg: 2, scope: !9877, file: !385, line: 2025, type: !7)
!9881 = !DILocation(line: 2025, column: 44, scope: !9877)
!9882 = !DILocation(line: 2028, column: 21, scope: !9877)
!9883 = !DILocation(line: 2028, column: 25, scope: !9877)
!9884 = !DILocation(line: 2028, column: 31, scope: !9877)
!9885 = !DILocation(line: 2028, column: 10, scope: !9877)
!9886 = !DILocation(line: 2028, column: 3, scope: !9877)
!9887 = distinct !DISubprogram(name: "gimple_call_nothrow_p", scope: !385, file: !385, line: 2188, type: !9070, scopeLine: 2189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9888 = !DILocalVariable(name: "s", arg: 1, scope: !9887, file: !385, line: 2188, type: !2201)
!9889 = !DILocation(line: 2188, column: 31, scope: !9887)
!9890 = !DILocation(line: 2191, column: 30, scope: !9887)
!9891 = !DILocation(line: 2191, column: 11, scope: !9887)
!9892 = !DILocation(line: 2191, column: 33, scope: !9887)
!9893 = !DILocation(line: 2191, column: 48, scope: !9887)
!9894 = !DILocation(line: 2191, column: 10, scope: !9887)
!9895 = !DILocation(line: 2191, column: 3, scope: !9887)
!9896 = distinct !DISubprogram(name: "gimple_call_return_slot_opt_p", scope: !385, file: !385, line: 2119, type: !9070, scopeLine: 2120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9897 = !DILocalVariable(name: "s", arg: 1, scope: !9896, file: !385, line: 2119, type: !2201)
!9898 = !DILocation(line: 2119, column: 39, scope: !9896)
!9899 = !DILocation(line: 2122, column: 11, scope: !9896)
!9900 = !DILocation(line: 2122, column: 14, scope: !9896)
!9901 = !DILocation(line: 2122, column: 21, scope: !9896)
!9902 = !DILocation(line: 2122, column: 29, scope: !9896)
!9903 = !DILocation(line: 2122, column: 56, scope: !9896)
!9904 = !DILocation(line: 2122, column: 10, scope: !9896)
!9905 = !DILocation(line: 2122, column: 3, scope: !9896)
!9906 = distinct !DISubprogram(name: "gimple_call_from_thunk_p", scope: !385, file: !385, line: 2143, type: !9070, scopeLine: 2144, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9907 = !DILocalVariable(name: "s", arg: 1, scope: !9906, file: !385, line: 2143, type: !2201)
!9908 = !DILocation(line: 2143, column: 34, scope: !9906)
!9909 = !DILocation(line: 2146, column: 11, scope: !9906)
!9910 = !DILocation(line: 2146, column: 14, scope: !9906)
!9911 = !DILocation(line: 2146, column: 21, scope: !9906)
!9912 = !DILocation(line: 2146, column: 29, scope: !9906)
!9913 = !DILocation(line: 2146, column: 51, scope: !9906)
!9914 = !DILocation(line: 2146, column: 10, scope: !9906)
!9915 = !DILocation(line: 2146, column: 3, scope: !9906)
!9916 = distinct !DISubprogram(name: "gimple_call_cannot_inline_p", scope: !385, file: !385, line: 2094, type: !9070, scopeLine: 2095, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9917 = !DILocalVariable(name: "s", arg: 1, scope: !9916, file: !385, line: 2094, type: !2201)
!9918 = !DILocation(line: 2094, column: 37, scope: !9916)
!9919 = !DILocation(line: 2097, column: 11, scope: !9916)
!9920 = !DILocation(line: 2097, column: 14, scope: !9916)
!9921 = !DILocation(line: 2097, column: 21, scope: !9916)
!9922 = !DILocation(line: 2097, column: 29, scope: !9916)
!9923 = !DILocation(line: 2097, column: 54, scope: !9916)
!9924 = !DILocation(line: 2097, column: 10, scope: !9916)
!9925 = !DILocation(line: 2097, column: 3, scope: !9916)
!9926 = distinct !DISubprogram(name: "gimple_call_va_arg_pack_p", scope: !385, file: !385, line: 2168, type: !9070, scopeLine: 2169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9927 = !DILocalVariable(name: "s", arg: 1, scope: !9926, file: !385, line: 2168, type: !2201)
!9928 = !DILocation(line: 2168, column: 35, scope: !9926)
!9929 = !DILocation(line: 2171, column: 11, scope: !9926)
!9930 = !DILocation(line: 2171, column: 14, scope: !9926)
!9931 = !DILocation(line: 2171, column: 21, scope: !9926)
!9932 = !DILocation(line: 2171, column: 29, scope: !9926)
!9933 = !DILocation(line: 2171, column: 52, scope: !9926)
!9934 = !DILocation(line: 2171, column: 10, scope: !9926)
!9935 = !DILocation(line: 2171, column: 3, scope: !9926)
!9936 = distinct !DISubprogram(name: "op_iter_init", scope: !8046, file: !8046, line: 742, type: !9937, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!9937 = !DISubroutineType(types: !9938)
!9938 = !{null, !8373, !2201, !2136}
!9939 = !DILocalVariable(name: "ptr", arg: 1, scope: !9936, file: !8046, line: 742, type: !8373)
!9940 = !DILocation(line: 742, column: 28, scope: !9936)
!9941 = !DILocalVariable(name: "stmt", arg: 2, scope: !9936, file: !8046, line: 742, type: !2201)
!9942 = !DILocation(line: 742, column: 40, scope: !9936)
!9943 = !DILocalVariable(name: "flags", arg: 3, scope: !9936, file: !8046, line: 742, type: !2136)
!9944 = !DILocation(line: 742, column: 50, scope: !9936)
!9945 = !DILocation(line: 746, column: 3, scope: !9936)
!9946 = !DILocation(line: 748, column: 16, scope: !9936)
!9947 = !DILocation(line: 748, column: 22, scope: !9936)
!9948 = !DILocation(line: 748, column: 15, scope: !9936)
!9949 = !DILocation(line: 748, column: 68, scope: !9936)
!9950 = !DILocation(line: 748, column: 52, scope: !9936)
!9951 = !DILocation(line: 748, column: 3, scope: !9936)
!9952 = !DILocation(line: 748, column: 8, scope: !9936)
!9953 = !DILocation(line: 748, column: 13, scope: !9936)
!9954 = !DILocation(line: 749, column: 9, scope: !9955)
!9955 = distinct !DILexicalBlock(scope: !9936, file: !8046, line: 749, column: 7)
!9956 = !DILocation(line: 749, column: 15, scope: !9955)
!9957 = !DILocation(line: 750, column: 7, scope: !9955)
!9958 = !DILocation(line: 750, column: 10, scope: !9955)
!9959 = !DILocation(line: 750, column: 15, scope: !9955)
!9960 = !DILocation(line: 751, column: 7, scope: !9955)
!9961 = !DILocation(line: 751, column: 23, scope: !9955)
!9962 = !DILocation(line: 751, column: 10, scope: !9955)
!9963 = !DILocation(line: 751, column: 29, scope: !9955)
!9964 = !DILocation(line: 749, column: 7, scope: !9936)
!9965 = !DILocation(line: 752, column: 17, scope: !9955)
!9966 = !DILocation(line: 752, column: 22, scope: !9955)
!9967 = !DILocation(line: 752, column: 28, scope: !9955)
!9968 = !DILocation(line: 752, column: 5, scope: !9955)
!9969 = !DILocation(line: 752, column: 10, scope: !9955)
!9970 = !DILocation(line: 752, column: 15, scope: !9955)
!9971 = !DILocation(line: 753, column: 16, scope: !9936)
!9972 = !DILocation(line: 753, column: 22, scope: !9936)
!9973 = !DILocation(line: 753, column: 15, scope: !9936)
!9974 = !DILocation(line: 753, column: 68, scope: !9936)
!9975 = !DILocation(line: 753, column: 52, scope: !9936)
!9976 = !DILocation(line: 753, column: 3, scope: !9936)
!9977 = !DILocation(line: 753, column: 8, scope: !9936)
!9978 = !DILocation(line: 753, column: 13, scope: !9936)
!9979 = !DILocation(line: 754, column: 9, scope: !9980)
!9980 = distinct !DILexicalBlock(scope: !9936, file: !8046, line: 754, column: 7)
!9981 = !DILocation(line: 754, column: 15, scope: !9980)
!9982 = !DILocation(line: 755, column: 7, scope: !9980)
!9983 = !DILocation(line: 755, column: 10, scope: !9980)
!9984 = !DILocation(line: 755, column: 15, scope: !9980)
!9985 = !DILocation(line: 756, column: 7, scope: !9980)
!9986 = !DILocation(line: 756, column: 23, scope: !9980)
!9987 = !DILocation(line: 756, column: 10, scope: !9980)
!9988 = !DILocation(line: 756, column: 29, scope: !9980)
!9989 = !DILocation(line: 754, column: 7, scope: !9936)
!9990 = !DILocation(line: 757, column: 17, scope: !9980)
!9991 = !DILocation(line: 757, column: 22, scope: !9980)
!9992 = !DILocation(line: 757, column: 28, scope: !9980)
!9993 = !DILocation(line: 757, column: 5, scope: !9980)
!9994 = !DILocation(line: 757, column: 10, scope: !9980)
!9995 = !DILocation(line: 757, column: 15, scope: !9980)
!9996 = !DILocation(line: 758, column: 3, scope: !9936)
!9997 = !DILocation(line: 758, column: 8, scope: !9936)
!9998 = !DILocation(line: 758, column: 13, scope: !9936)
!9999 = !DILocation(line: 760, column: 3, scope: !9936)
!10000 = !DILocation(line: 760, column: 8, scope: !9936)
!10001 = !DILocation(line: 760, column: 14, scope: !9936)
!10002 = !DILocation(line: 761, column: 3, scope: !9936)
!10003 = !DILocation(line: 761, column: 8, scope: !9936)
!10004 = !DILocation(line: 761, column: 16, scope: !9936)
!10005 = !DILocation(line: 762, column: 3, scope: !9936)
!10006 = !DILocation(line: 762, column: 8, scope: !9936)
!10007 = !DILocation(line: 762, column: 17, scope: !9936)
!10008 = !DILocation(line: 763, column: 1, scope: !9936)
!10009 = distinct !DISubprogram(name: "gimple_def_ops", scope: !385, file: !385, line: 1292, type: !10010, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10010 = !DISubroutineType(types: !10011)
!10011 = !{!2829, !3744}
!10012 = !DILocalVariable(name: "g", arg: 1, scope: !10009, file: !385, line: 1292, type: !3744)
!10013 = !DILocation(line: 1292, column: 30, scope: !10009)
!10014 = !DILocation(line: 1294, column: 24, scope: !10015)
!10015 = distinct !DILexicalBlock(scope: !10009, file: !385, line: 1294, column: 7)
!10016 = !DILocation(line: 1294, column: 8, scope: !10015)
!10017 = !DILocation(line: 1294, column: 7, scope: !10009)
!10018 = !DILocation(line: 1295, column: 5, scope: !10015)
!10019 = !DILocation(line: 1296, column: 10, scope: !10009)
!10020 = !DILocation(line: 1296, column: 13, scope: !10009)
!10021 = !DILocation(line: 1296, column: 19, scope: !10009)
!10022 = !DILocation(line: 1296, column: 26, scope: !10009)
!10023 = !DILocation(line: 1296, column: 3, scope: !10009)
!10024 = !DILocation(line: 1297, column: 1, scope: !10009)
!10025 = distinct !DISubprogram(name: "gimple_vdef", scope: !385, file: !385, line: 1375, type: !3789, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10026 = !DILocalVariable(name: "g", arg: 1, scope: !10025, file: !385, line: 1375, type: !3744)
!10027 = !DILocation(line: 1375, column: 27, scope: !10025)
!10028 = !DILocation(line: 1377, column: 28, scope: !10029)
!10029 = distinct !DILexicalBlock(scope: !10025, file: !385, line: 1377, column: 7)
!10030 = !DILocation(line: 1377, column: 8, scope: !10029)
!10031 = !DILocation(line: 1377, column: 7, scope: !10025)
!10032 = !DILocation(line: 1378, column: 5, scope: !10029)
!10033 = !DILocation(line: 1379, column: 10, scope: !10025)
!10034 = !DILocation(line: 1379, column: 13, scope: !10025)
!10035 = !DILocation(line: 1379, column: 23, scope: !10025)
!10036 = !DILocation(line: 1379, column: 3, scope: !10025)
!10037 = !DILocation(line: 1380, column: 1, scope: !10025)
!10038 = distinct !DISubprogram(name: "gimple_use_ops", scope: !385, file: !385, line: 1313, type: !10039, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10039 = !DISubroutineType(types: !10040)
!10040 = !{!2836, !3744}
!10041 = !DILocalVariable(name: "g", arg: 1, scope: !10038, file: !385, line: 1313, type: !3744)
!10042 = !DILocation(line: 1313, column: 30, scope: !10038)
!10043 = !DILocation(line: 1315, column: 24, scope: !10044)
!10044 = distinct !DILexicalBlock(scope: !10038, file: !385, line: 1315, column: 7)
!10045 = !DILocation(line: 1315, column: 8, scope: !10044)
!10046 = !DILocation(line: 1315, column: 7, scope: !10038)
!10047 = !DILocation(line: 1316, column: 5, scope: !10044)
!10048 = !DILocation(line: 1317, column: 10, scope: !10038)
!10049 = !DILocation(line: 1317, column: 13, scope: !10038)
!10050 = !DILocation(line: 1317, column: 19, scope: !10038)
!10051 = !DILocation(line: 1317, column: 26, scope: !10038)
!10052 = !DILocation(line: 1317, column: 3, scope: !10038)
!10053 = !DILocation(line: 1318, column: 1, scope: !10038)
!10054 = distinct !DISubprogram(name: "gimple_vuse", scope: !385, file: !385, line: 1365, type: !3789, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10055 = !DILocalVariable(name: "g", arg: 1, scope: !10054, file: !385, line: 1365, type: !3744)
!10056 = !DILocation(line: 1365, column: 27, scope: !10054)
!10057 = !DILocation(line: 1367, column: 28, scope: !10058)
!10058 = distinct !DILexicalBlock(scope: !10054, file: !385, line: 1367, column: 7)
!10059 = !DILocation(line: 1367, column: 8, scope: !10058)
!10060 = !DILocation(line: 1367, column: 7, scope: !10054)
!10061 = !DILocation(line: 1368, column: 5, scope: !10058)
!10062 = !DILocation(line: 1369, column: 10, scope: !10054)
!10063 = !DILocation(line: 1369, column: 13, scope: !10054)
!10064 = !DILocation(line: 1369, column: 23, scope: !10054)
!10065 = !DILocation(line: 1369, column: 3, scope: !10054)
!10066 = !DILocation(line: 1370, column: 1, scope: !10054)
!10067 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !385, file: !385, line: 1283, type: !3816, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10068 = !DILocalVariable(name: "g", arg: 1, scope: !10067, file: !385, line: 1283, type: !3744)
!10069 = !DILocation(line: 1283, column: 34, scope: !10067)
!10070 = !DILocation(line: 1285, column: 23, scope: !10067)
!10071 = !DILocation(line: 1285, column: 10, scope: !10067)
!10072 = !DILocation(line: 1285, column: 26, scope: !10067)
!10073 = !DILocation(line: 1285, column: 43, scope: !10067)
!10074 = !DILocation(line: 1285, column: 59, scope: !10067)
!10075 = !DILocation(line: 1285, column: 46, scope: !10067)
!10076 = !DILocation(line: 1285, column: 62, scope: !10067)
!10077 = !DILocation(line: 0, scope: !10067)
!10078 = !DILocation(line: 1285, column: 3, scope: !10067)
!10079 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !8046, file: !8046, line: 1018, type: !10080, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10080 = !DISubroutineType(types: !10081)
!10081 = !{null, !3551, !8423}
!10082 = !DILocalVariable(name: "head", arg: 1, scope: !10079, file: !8046, line: 1018, type: !3551)
!10083 = !DILocation(line: 1018, column: 37, scope: !10079)
!10084 = !DILocalVariable(name: "imm", arg: 2, scope: !10079, file: !8046, line: 1018, type: !8423)
!10085 = !DILocation(line: 1018, column: 61, scope: !10079)
!10086 = !DILocalVariable(name: "use_p", scope: !10079, file: !8046, line: 1020, type: !3551)
!10087 = !DILocation(line: 1020, column: 17, scope: !10079)
!10088 = !DILocalVariable(name: "last_p", scope: !10079, file: !8046, line: 1021, type: !3551)
!10089 = !DILocation(line: 1021, column: 17, scope: !10079)
!10090 = !DILocation(line: 1021, column: 26, scope: !10079)
!10091 = !DILocalVariable(name: "head_stmt", scope: !10079, file: !8046, line: 1022, type: !2201)
!10092 = !DILocation(line: 1022, column: 10, scope: !10079)
!10093 = !DILocation(line: 1022, column: 22, scope: !10079)
!10094 = !DILocalVariable(name: "use", scope: !10079, file: !8046, line: 1023, type: !2326)
!10095 = !DILocation(line: 1023, column: 8, scope: !10079)
!10096 = !DILocation(line: 1023, column: 14, scope: !10079)
!10097 = !DILocalVariable(name: "op_iter", scope: !10079, file: !8046, line: 1024, type: !5697)
!10098 = !DILocation(line: 1024, column: 15, scope: !10079)
!10099 = !DILocalVariable(name: "flag", scope: !10079, file: !8046, line: 1025, type: !2136)
!10100 = !DILocation(line: 1025, column: 7, scope: !10079)
!10101 = !DILocation(line: 1028, column: 26, scope: !10079)
!10102 = !DILocation(line: 1028, column: 11, scope: !10079)
!10103 = !DILocation(line: 1028, column: 8, scope: !10079)
!10104 = !DILocation(line: 1030, column: 20, scope: !10105)
!10105 = distinct !DILexicalBlock(scope: !10079, file: !8046, line: 1030, column: 7)
!10106 = !DILocation(line: 1030, column: 7, scope: !10105)
!10107 = !DILocation(line: 1030, column: 31, scope: !10105)
!10108 = !DILocation(line: 1030, column: 7, scope: !10079)
!10109 = !DILocation(line: 1032, column: 7, scope: !10110)
!10110 = distinct !DILexicalBlock(scope: !10111, file: !8046, line: 1032, column: 7)
!10111 = distinct !DILexicalBlock(scope: !10105, file: !8046, line: 1031, column: 5)
!10112 = !DILocation(line: 1032, column: 7, scope: !10113)
!10113 = distinct !DILexicalBlock(scope: !10110, file: !8046, line: 1032, column: 7)
!10114 = !DILocation(line: 1033, column: 6, scope: !10115)
!10115 = distinct !DILexicalBlock(scope: !10113, file: !8046, line: 1033, column: 6)
!10116 = !DILocation(line: 1033, column: 30, scope: !10115)
!10117 = !DILocation(line: 1033, column: 27, scope: !10115)
!10118 = !DILocation(line: 1033, column: 6, scope: !10113)
!10119 = !DILocation(line: 1034, column: 34, scope: !10115)
!10120 = !DILocation(line: 1034, column: 41, scope: !10115)
!10121 = !DILocation(line: 1034, column: 47, scope: !10115)
!10122 = !DILocation(line: 1034, column: 13, scope: !10115)
!10123 = !DILocation(line: 1034, column: 11, scope: !10115)
!10124 = !DILocation(line: 1034, column: 4, scope: !10115)
!10125 = distinct !{!10125, !10109, !10126}
!10126 = !DILocation(line: 1034, column: 53, scope: !10110)
!10127 = !DILocation(line: 1035, column: 5, scope: !10111)
!10128 = !DILocation(line: 1038, column: 11, scope: !10129)
!10129 = distinct !DILexicalBlock(scope: !10130, file: !8046, line: 1038, column: 11)
!10130 = distinct !DILexicalBlock(scope: !10105, file: !8046, line: 1037, column: 5)
!10131 = !DILocation(line: 1038, column: 16, scope: !10129)
!10132 = !DILocation(line: 1038, column: 11, scope: !10130)
!10133 = !DILocation(line: 1040, column: 4, scope: !10134)
!10134 = distinct !DILexicalBlock(scope: !10135, file: !8046, line: 1040, column: 4)
!10135 = distinct !DILexicalBlock(scope: !10129, file: !8046, line: 1039, column: 2)
!10136 = !DILocation(line: 1040, column: 4, scope: !10137)
!10137 = distinct !DILexicalBlock(scope: !10134, file: !8046, line: 1040, column: 4)
!10138 = !DILocation(line: 1041, column: 10, scope: !10139)
!10139 = distinct !DILexicalBlock(scope: !10137, file: !8046, line: 1041, column: 10)
!10140 = !DILocation(line: 1041, column: 34, scope: !10139)
!10141 = !DILocation(line: 1041, column: 31, scope: !10139)
!10142 = !DILocation(line: 1041, column: 10, scope: !10137)
!10143 = !DILocation(line: 1042, column: 38, scope: !10139)
!10144 = !DILocation(line: 1042, column: 45, scope: !10139)
!10145 = !DILocation(line: 1042, column: 51, scope: !10139)
!10146 = !DILocation(line: 1042, column: 17, scope: !10139)
!10147 = !DILocation(line: 1042, column: 15, scope: !10139)
!10148 = !DILocation(line: 1042, column: 8, scope: !10139)
!10149 = distinct !{!10149, !10133, !10150}
!10150 = !DILocation(line: 1042, column: 57, scope: !10134)
!10151 = !DILocation(line: 1043, column: 2, scope: !10135)
!10152 = !DILocation(line: 1044, column: 41, scope: !10153)
!10153 = distinct !DILexicalBlock(scope: !10129, file: !8046, line: 1044, column: 16)
!10154 = !DILocation(line: 1044, column: 25, scope: !10153)
!10155 = !DILocation(line: 1044, column: 23, scope: !10153)
!10156 = !DILocation(line: 1044, column: 53, scope: !10153)
!10157 = !DILocation(line: 1044, column: 16, scope: !10129)
!10158 = !DILocation(line: 1046, column: 8, scope: !10159)
!10159 = distinct !DILexicalBlock(scope: !10160, file: !8046, line: 1046, column: 8)
!10160 = distinct !DILexicalBlock(scope: !10153, file: !8046, line: 1045, column: 2)
!10161 = !DILocation(line: 1046, column: 32, scope: !10159)
!10162 = !DILocation(line: 1046, column: 29, scope: !10159)
!10163 = !DILocation(line: 1046, column: 8, scope: !10160)
!10164 = !DILocation(line: 1047, column: 36, scope: !10159)
!10165 = !DILocation(line: 1047, column: 43, scope: !10159)
!10166 = !DILocation(line: 1047, column: 49, scope: !10159)
!10167 = !DILocation(line: 1047, column: 15, scope: !10159)
!10168 = !DILocation(line: 1047, column: 13, scope: !10159)
!10169 = !DILocation(line: 1047, column: 6, scope: !10159)
!10170 = !DILocation(line: 1048, column: 2, scope: !10160)
!10171 = !DILocation(line: 1051, column: 7, scope: !10172)
!10172 = distinct !DILexicalBlock(scope: !10079, file: !8046, line: 1051, column: 7)
!10173 = !DILocation(line: 1051, column: 12, scope: !10172)
!10174 = !DILocation(line: 1051, column: 22, scope: !10172)
!10175 = !DILocation(line: 1051, column: 27, scope: !10172)
!10176 = !DILocation(line: 1051, column: 7, scope: !10079)
!10177 = !DILocation(line: 1052, column: 22, scope: !10172)
!10178 = !DILocation(line: 1052, column: 27, scope: !10172)
!10179 = !DILocation(line: 1052, column: 5, scope: !10172)
!10180 = !DILocation(line: 1053, column: 27, scope: !10079)
!10181 = !DILocation(line: 1053, column: 32, scope: !10079)
!10182 = !DILocation(line: 1053, column: 44, scope: !10079)
!10183 = !DILocation(line: 1053, column: 3, scope: !10079)
!10184 = !DILocation(line: 1054, column: 1, scope: !10079)
!10185 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !8046, file: !8046, line: 427, type: !10186, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10186 = !DISubroutineType(types: !10187)
!10187 = !{!2326, !3551}
!10188 = !DILocalVariable(name: "use", arg: 1, scope: !10185, file: !8046, line: 427, type: !3551)
!10189 = !DILocation(line: 427, column: 33, scope: !10185)
!10190 = !DILocation(line: 429, column: 12, scope: !10185)
!10191 = !DILocation(line: 429, column: 17, scope: !10185)
!10192 = !DILocation(line: 429, column: 10, scope: !10185)
!10193 = !DILocation(line: 429, column: 3, scope: !10185)
!10194 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !8046, file: !8046, line: 910, type: !10195, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10195 = !DISubroutineType(types: !10196)
!10196 = !{!3551, !8373, !2201, !2136}
!10197 = !DILocalVariable(name: "ptr", arg: 1, scope: !10194, file: !8046, line: 910, type: !8373)
!10198 = !DILocation(line: 910, column: 35, scope: !10194)
!10199 = !DILocalVariable(name: "phi", arg: 2, scope: !10194, file: !8046, line: 910, type: !2201)
!10200 = !DILocation(line: 910, column: 47, scope: !10194)
!10201 = !DILocalVariable(name: "flags", arg: 3, scope: !10194, file: !8046, line: 910, type: !2136)
!10202 = !DILocation(line: 910, column: 56, scope: !10194)
!10203 = !DILocalVariable(name: "phi_def", scope: !10194, file: !8046, line: 912, type: !2326)
!10204 = !DILocation(line: 912, column: 8, scope: !10194)
!10205 = !DILocation(line: 912, column: 37, scope: !10194)
!10206 = !DILocation(line: 912, column: 18, scope: !10194)
!10207 = !DILocalVariable(name: "comp", scope: !10194, file: !8046, line: 913, type: !2136)
!10208 = !DILocation(line: 913, column: 7, scope: !10194)
!10209 = !DILocation(line: 915, column: 28, scope: !10194)
!10210 = !DILocation(line: 915, column: 3, scope: !10194)
!10211 = !DILocation(line: 916, column: 3, scope: !10194)
!10212 = !DILocation(line: 916, column: 8, scope: !10194)
!10213 = !DILocation(line: 916, column: 13, scope: !10194)
!10214 = !DILocation(line: 918, column: 3, scope: !10194)
!10215 = !DILocation(line: 920, column: 26, scope: !10194)
!10216 = !DILocation(line: 920, column: 11, scope: !10194)
!10217 = !DILocation(line: 920, column: 8, scope: !10194)
!10218 = !DILocation(line: 923, column: 8, scope: !10219)
!10219 = distinct !DILexicalBlock(scope: !10194, file: !8046, line: 923, column: 7)
!10220 = !DILocation(line: 923, column: 16, scope: !10219)
!10221 = !DILocation(line: 923, column: 14, scope: !10219)
!10222 = !DILocation(line: 923, column: 22, scope: !10219)
!10223 = !DILocation(line: 923, column: 7, scope: !10194)
!10224 = !DILocation(line: 925, column: 7, scope: !10225)
!10225 = distinct !DILexicalBlock(scope: !10219, file: !8046, line: 924, column: 5)
!10226 = !DILocation(line: 925, column: 12, scope: !10225)
!10227 = !DILocation(line: 925, column: 17, scope: !10225)
!10228 = !DILocation(line: 926, column: 7, scope: !10225)
!10229 = !DILocation(line: 929, column: 19, scope: !10194)
!10230 = !DILocation(line: 929, column: 3, scope: !10194)
!10231 = !DILocation(line: 929, column: 8, scope: !10194)
!10232 = !DILocation(line: 929, column: 17, scope: !10194)
!10233 = !DILocation(line: 930, column: 39, scope: !10194)
!10234 = !DILocation(line: 930, column: 18, scope: !10194)
!10235 = !DILocation(line: 930, column: 3, scope: !10194)
!10236 = !DILocation(line: 930, column: 8, scope: !10194)
!10237 = !DILocation(line: 930, column: 16, scope: !10194)
!10238 = !DILocation(line: 931, column: 3, scope: !10194)
!10239 = !DILocation(line: 931, column: 8, scope: !10194)
!10240 = !DILocation(line: 931, column: 18, scope: !10194)
!10241 = !DILocation(line: 932, column: 28, scope: !10194)
!10242 = !DILocation(line: 932, column: 10, scope: !10194)
!10243 = !DILocation(line: 932, column: 3, scope: !10194)
!10244 = !DILocation(line: 933, column: 1, scope: !10194)
!10245 = distinct !DISubprogram(name: "move_use_after_head", scope: !8046, file: !8046, line: 990, type: !10246, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10246 = !DISubroutineType(types: !10247)
!10247 = !{!3551, !3551, !3551, !3551}
!10248 = !DILocalVariable(name: "use_p", arg: 1, scope: !10245, file: !8046, line: 990, type: !3551)
!10249 = !DILocation(line: 990, column: 36, scope: !10245)
!10250 = !DILocalVariable(name: "head", arg: 2, scope: !10245, file: !8046, line: 990, type: !3551)
!10251 = !DILocation(line: 990, column: 57, scope: !10245)
!10252 = !DILocalVariable(name: "last_p", arg: 3, scope: !10245, file: !8046, line: 991, type: !3551)
!10253 = !DILocation(line: 991, column: 23, scope: !10245)
!10254 = !DILocation(line: 997, column: 7, scope: !10255)
!10255 = distinct !DILexicalBlock(scope: !10245, file: !8046, line: 997, column: 7)
!10256 = !DILocation(line: 997, column: 16, scope: !10255)
!10257 = !DILocation(line: 997, column: 13, scope: !10255)
!10258 = !DILocation(line: 997, column: 7, scope: !10245)
!10259 = !DILocation(line: 1000, column: 11, scope: !10260)
!10260 = distinct !DILexicalBlock(scope: !10261, file: !8046, line: 1000, column: 11)
!10261 = distinct !DILexicalBlock(scope: !10255, file: !8046, line: 998, column: 5)
!10262 = !DILocation(line: 1000, column: 19, scope: !10260)
!10263 = !DILocation(line: 1000, column: 27, scope: !10260)
!10264 = !DILocation(line: 1000, column: 24, scope: !10260)
!10265 = !DILocation(line: 1000, column: 11, scope: !10261)
!10266 = !DILocation(line: 1001, column: 11, scope: !10260)
!10267 = !DILocation(line: 1001, column: 9, scope: !10260)
!10268 = !DILocation(line: 1001, column: 2, scope: !10260)
!10269 = !DILocation(line: 1005, column: 20, scope: !10270)
!10270 = distinct !DILexicalBlock(scope: !10260, file: !8046, line: 1003, column: 2)
!10271 = !DILocation(line: 1005, column: 4, scope: !10270)
!10272 = !DILocation(line: 1006, column: 26, scope: !10270)
!10273 = !DILocation(line: 1006, column: 33, scope: !10270)
!10274 = !DILocation(line: 1006, column: 4, scope: !10270)
!10275 = !DILocation(line: 1007, column: 13, scope: !10270)
!10276 = !DILocation(line: 1007, column: 11, scope: !10270)
!10277 = !DILocation(line: 1009, column: 5, scope: !10261)
!10278 = !DILocation(line: 1010, column: 10, scope: !10245)
!10279 = !DILocation(line: 1010, column: 3, scope: !10245)
!10280 = distinct !DISubprogram(name: "op_iter_next_use", scope: !8046, file: !8046, line: 659, type: !10281, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10281 = !DISubroutineType(types: !10282)
!10282 = !{!3551, !8373}
!10283 = !DILocalVariable(name: "ptr", arg: 1, scope: !10280, file: !8046, line: 659, type: !8373)
!10284 = !DILocation(line: 659, column: 32, scope: !10280)
!10285 = !DILocalVariable(name: "use_p", scope: !10280, file: !8046, line: 661, type: !3551)
!10286 = !DILocation(line: 661, column: 17, scope: !10280)
!10287 = !DILocation(line: 665, column: 7, scope: !10288)
!10288 = distinct !DILexicalBlock(scope: !10280, file: !8046, line: 665, column: 7)
!10289 = !DILocation(line: 665, column: 12, scope: !10288)
!10290 = !DILocation(line: 665, column: 7, scope: !10280)
!10291 = !DILocation(line: 667, column: 15, scope: !10292)
!10292 = distinct !DILexicalBlock(scope: !10288, file: !8046, line: 666, column: 5)
!10293 = !DILocation(line: 667, column: 13, scope: !10292)
!10294 = !DILocation(line: 668, column: 19, scope: !10292)
!10295 = !DILocation(line: 668, column: 24, scope: !10292)
!10296 = !DILocation(line: 668, column: 30, scope: !10292)
!10297 = !DILocation(line: 668, column: 7, scope: !10292)
!10298 = !DILocation(line: 668, column: 12, scope: !10292)
!10299 = !DILocation(line: 668, column: 17, scope: !10292)
!10300 = !DILocation(line: 669, column: 14, scope: !10292)
!10301 = !DILocation(line: 669, column: 7, scope: !10292)
!10302 = !DILocation(line: 671, column: 7, scope: !10303)
!10303 = distinct !DILexicalBlock(scope: !10280, file: !8046, line: 671, column: 7)
!10304 = !DILocation(line: 671, column: 12, scope: !10303)
!10305 = !DILocation(line: 671, column: 20, scope: !10303)
!10306 = !DILocation(line: 671, column: 25, scope: !10303)
!10307 = !DILocation(line: 671, column: 18, scope: !10303)
!10308 = !DILocation(line: 671, column: 7, scope: !10280)
!10309 = !DILocation(line: 673, column: 14, scope: !10310)
!10310 = distinct !DILexicalBlock(scope: !10303, file: !8046, line: 672, column: 5)
!10311 = !DILocation(line: 673, column: 7, scope: !10310)
!10312 = !DILocation(line: 675, column: 3, scope: !10280)
!10313 = !DILocation(line: 675, column: 8, scope: !10280)
!10314 = !DILocation(line: 675, column: 13, scope: !10280)
!10315 = !DILocation(line: 676, column: 3, scope: !10280)
!10316 = !DILocation(line: 677, column: 1, scope: !10280)
!10317 = distinct !DISubprogram(name: "op_iter_init_use", scope: !8046, file: !8046, line: 768, type: !10195, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10318 = !DILocalVariable(name: "ptr", arg: 1, scope: !10317, file: !8046, line: 768, type: !8373)
!10319 = !DILocation(line: 768, column: 32, scope: !10317)
!10320 = !DILocalVariable(name: "stmt", arg: 2, scope: !10317, file: !8046, line: 768, type: !2201)
!10321 = !DILocation(line: 768, column: 44, scope: !10317)
!10322 = !DILocalVariable(name: "flags", arg: 3, scope: !10317, file: !8046, line: 768, type: !2136)
!10323 = !DILocation(line: 768, column: 54, scope: !10317)
!10324 = !DILocation(line: 770, column: 3, scope: !10317)
!10325 = !DILocation(line: 772, column: 17, scope: !10317)
!10326 = !DILocation(line: 772, column: 22, scope: !10317)
!10327 = !DILocation(line: 772, column: 28, scope: !10317)
!10328 = !DILocation(line: 772, column: 3, scope: !10317)
!10329 = !DILocation(line: 773, column: 3, scope: !10317)
!10330 = !DILocation(line: 773, column: 8, scope: !10317)
!10331 = !DILocation(line: 773, column: 18, scope: !10317)
!10332 = !DILocation(line: 774, column: 28, scope: !10317)
!10333 = !DILocation(line: 774, column: 10, scope: !10317)
!10334 = !DILocation(line: 774, column: 3, scope: !10317)
!10335 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !385, file: !385, line: 1334, type: !10336, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10336 = !DISubroutineType(types: !10337)
!10337 = !{!3551, !3744}
!10338 = !DILocalVariable(name: "g", arg: 1, scope: !10335, file: !385, line: 1334, type: !3744)
!10339 = !DILocation(line: 1334, column: 30, scope: !10335)
!10340 = !DILocalVariable(name: "ops", scope: !10335, file: !385, line: 1336, type: !2836)
!10341 = !DILocation(line: 1336, column: 24, scope: !10335)
!10342 = !DILocation(line: 1337, column: 28, scope: !10343)
!10343 = distinct !DILexicalBlock(scope: !10335, file: !385, line: 1337, column: 7)
!10344 = !DILocation(line: 1337, column: 8, scope: !10343)
!10345 = !DILocation(line: 1337, column: 7, scope: !10335)
!10346 = !DILocation(line: 1338, column: 5, scope: !10343)
!10347 = !DILocation(line: 1339, column: 9, scope: !10335)
!10348 = !DILocation(line: 1339, column: 12, scope: !10335)
!10349 = !DILocation(line: 1339, column: 18, scope: !10335)
!10350 = !DILocation(line: 1339, column: 25, scope: !10335)
!10351 = !DILocation(line: 1339, column: 7, scope: !10335)
!10352 = !DILocation(line: 1340, column: 7, scope: !10353)
!10353 = distinct !DILexicalBlock(scope: !10335, file: !385, line: 1340, column: 7)
!10354 = !DILocation(line: 1341, column: 7, scope: !10353)
!10355 = !DILocation(line: 1341, column: 10, scope: !10353)
!10356 = !DILocation(line: 1341, column: 28, scope: !10353)
!10357 = !DILocation(line: 1341, column: 36, scope: !10353)
!10358 = !DILocation(line: 1341, column: 39, scope: !10353)
!10359 = !DILocation(line: 1341, column: 49, scope: !10353)
!10360 = !DILocation(line: 1341, column: 32, scope: !10353)
!10361 = !DILocation(line: 1340, column: 7, scope: !10335)
!10362 = !DILocation(line: 1342, column: 12, scope: !10353)
!10363 = !DILocation(line: 1342, column: 5, scope: !10353)
!10364 = !DILocation(line: 1343, column: 3, scope: !10335)
!10365 = !DILocation(line: 1344, column: 1, scope: !10335)
!10366 = distinct !DISubprogram(name: "delink_imm_use", scope: !8046, file: !8046, line: 188, type: !10367, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10367 = !DISubroutineType(types: !10368)
!10368 = !{null, !3552}
!10369 = !DILocalVariable(name: "linknode", arg: 1, scope: !10366, file: !8046, line: 188, type: !3552)
!10370 = !DILocation(line: 188, column: 36, scope: !10366)
!10371 = !DILocation(line: 191, column: 7, scope: !10372)
!10372 = distinct !DILexicalBlock(scope: !10366, file: !8046, line: 191, column: 7)
!10373 = !DILocation(line: 191, column: 17, scope: !10372)
!10374 = !DILocation(line: 191, column: 22, scope: !10372)
!10375 = !DILocation(line: 191, column: 7, scope: !10366)
!10376 = !DILocation(line: 192, column: 5, scope: !10372)
!10377 = !DILocation(line: 194, column: 26, scope: !10366)
!10378 = !DILocation(line: 194, column: 36, scope: !10366)
!10379 = !DILocation(line: 194, column: 3, scope: !10366)
!10380 = !DILocation(line: 194, column: 13, scope: !10366)
!10381 = !DILocation(line: 194, column: 19, scope: !10366)
!10382 = !DILocation(line: 194, column: 24, scope: !10366)
!10383 = !DILocation(line: 195, column: 26, scope: !10366)
!10384 = !DILocation(line: 195, column: 36, scope: !10366)
!10385 = !DILocation(line: 195, column: 3, scope: !10366)
!10386 = !DILocation(line: 195, column: 13, scope: !10366)
!10387 = !DILocation(line: 195, column: 19, scope: !10366)
!10388 = !DILocation(line: 195, column: 24, scope: !10366)
!10389 = !DILocation(line: 196, column: 3, scope: !10366)
!10390 = !DILocation(line: 196, column: 13, scope: !10366)
!10391 = !DILocation(line: 196, column: 18, scope: !10366)
!10392 = !DILocation(line: 197, column: 3, scope: !10366)
!10393 = !DILocation(line: 197, column: 13, scope: !10366)
!10394 = !DILocation(line: 197, column: 18, scope: !10366)
!10395 = !DILocation(line: 198, column: 1, scope: !10366)
!10396 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !8046, file: !8046, line: 202, type: !10397, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10397 = !DISubroutineType(types: !10398)
!10398 = !{null, !3552, !3552}
!10399 = !DILocalVariable(name: "linknode", arg: 1, scope: !10396, file: !8046, line: 202, type: !3552)
!10400 = !DILocation(line: 202, column: 42, scope: !10396)
!10401 = !DILocalVariable(name: "list", arg: 2, scope: !10396, file: !8046, line: 202, type: !3552)
!10402 = !DILocation(line: 202, column: 71, scope: !10396)
!10403 = !DILocation(line: 206, column: 20, scope: !10396)
!10404 = !DILocation(line: 206, column: 3, scope: !10396)
!10405 = !DILocation(line: 206, column: 13, scope: !10396)
!10406 = !DILocation(line: 206, column: 18, scope: !10396)
!10407 = !DILocation(line: 207, column: 20, scope: !10396)
!10408 = !DILocation(line: 207, column: 26, scope: !10396)
!10409 = !DILocation(line: 207, column: 3, scope: !10396)
!10410 = !DILocation(line: 207, column: 13, scope: !10396)
!10411 = !DILocation(line: 207, column: 18, scope: !10396)
!10412 = !DILocation(line: 208, column: 22, scope: !10396)
!10413 = !DILocation(line: 208, column: 3, scope: !10396)
!10414 = !DILocation(line: 208, column: 9, scope: !10396)
!10415 = !DILocation(line: 208, column: 15, scope: !10396)
!10416 = !DILocation(line: 208, column: 20, scope: !10396)
!10417 = !DILocation(line: 209, column: 16, scope: !10396)
!10418 = !DILocation(line: 209, column: 3, scope: !10396)
!10419 = !DILocation(line: 209, column: 9, scope: !10396)
!10420 = !DILocation(line: 209, column: 14, scope: !10396)
!10421 = !DILocation(line: 210, column: 1, scope: !10396)
!10422 = distinct !DISubprogram(name: "gimple_phi_result", scope: !385, file: !385, line: 3071, type: !3789, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10423 = !DILocalVariable(name: "gs", arg: 1, scope: !10422, file: !385, line: 3071, type: !3744)
!10424 = !DILocation(line: 3071, column: 33, scope: !10422)
!10425 = !DILocation(line: 3074, column: 10, scope: !10422)
!10426 = !DILocation(line: 3074, column: 14, scope: !10422)
!10427 = !DILocation(line: 3074, column: 25, scope: !10422)
!10428 = !DILocation(line: 3074, column: 3, scope: !10422)
!10429 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !8046, file: !8046, line: 729, type: !10430, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10430 = !DISubroutineType(types: !10431)
!10431 = !{null, !8373}
!10432 = !DILocalVariable(name: "ptr", arg: 1, scope: !10429, file: !8046, line: 729, type: !8373)
!10433 = !DILocation(line: 729, column: 39, scope: !10429)
!10434 = !DILocation(line: 731, column: 3, scope: !10429)
!10435 = !DILocation(line: 731, column: 8, scope: !10429)
!10436 = !DILocation(line: 731, column: 13, scope: !10429)
!10437 = !DILocation(line: 732, column: 3, scope: !10429)
!10438 = !DILocation(line: 732, column: 8, scope: !10429)
!10439 = !DILocation(line: 732, column: 13, scope: !10429)
!10440 = !DILocation(line: 733, column: 3, scope: !10429)
!10441 = !DILocation(line: 733, column: 8, scope: !10429)
!10442 = !DILocation(line: 733, column: 18, scope: !10429)
!10443 = !DILocation(line: 734, column: 3, scope: !10429)
!10444 = !DILocation(line: 734, column: 8, scope: !10429)
!10445 = !DILocation(line: 734, column: 14, scope: !10429)
!10446 = !DILocation(line: 735, column: 3, scope: !10429)
!10447 = !DILocation(line: 735, column: 8, scope: !10429)
!10448 = !DILocation(line: 735, column: 16, scope: !10429)
!10449 = !DILocation(line: 736, column: 3, scope: !10429)
!10450 = !DILocation(line: 736, column: 8, scope: !10429)
!10451 = !DILocation(line: 736, column: 17, scope: !10429)
!10452 = !DILocation(line: 737, column: 3, scope: !10429)
!10453 = !DILocation(line: 737, column: 8, scope: !10429)
!10454 = !DILocation(line: 737, column: 13, scope: !10429)
!10455 = !DILocation(line: 738, column: 1, scope: !10429)
!10456 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !385, file: !385, line: 3061, type: !4624, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10457 = !DILocalVariable(name: "gs", arg: 1, scope: !10456, file: !385, line: 3061, type: !3744)
!10458 = !DILocation(line: 3061, column: 35, scope: !10456)
!10459 = !DILocation(line: 3064, column: 10, scope: !10456)
!10460 = !DILocation(line: 3064, column: 14, scope: !10456)
!10461 = !DILocation(line: 3064, column: 25, scope: !10456)
!10462 = !DILocation(line: 3064, column: 3, scope: !10456)
!10463 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !8046, file: !8046, line: 442, type: !10464, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10464 = !DISubroutineType(types: !10465)
!10465 = !{!3551, !2201, !2136}
!10466 = !DILocalVariable(name: "gs", arg: 1, scope: !10463, file: !8046, line: 442, type: !2201)
!10467 = !DILocation(line: 442, column: 36, scope: !10463)
!10468 = !DILocalVariable(name: "i", arg: 2, scope: !10463, file: !8046, line: 442, type: !2136)
!10469 = !DILocation(line: 442, column: 44, scope: !10463)
!10470 = !DILocation(line: 444, column: 27, scope: !10463)
!10471 = !DILocation(line: 444, column: 31, scope: !10463)
!10472 = !DILocation(line: 444, column: 11, scope: !10463)
!10473 = !DILocation(line: 444, column: 35, scope: !10463)
!10474 = !DILocation(line: 444, column: 3, scope: !10463)
!10475 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !385, file: !385, line: 3100, type: !10476, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10476 = !DISubroutineType(types: !10477)
!10477 = !{!10478, !2201, !7}
!10478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3440, size: 64)
!10479 = !DILocalVariable(name: "gs", arg: 1, scope: !10475, file: !385, line: 3100, type: !2201)
!10480 = !DILocation(line: 3100, column: 24, scope: !10475)
!10481 = !DILocalVariable(name: "index", arg: 2, scope: !10475, file: !385, line: 3100, type: !7)
!10482 = !DILocation(line: 3100, column: 37, scope: !10475)
!10483 = !DILocation(line: 3103, column: 3, scope: !10475)
!10484 = !DILocation(line: 3104, column: 12, scope: !10475)
!10485 = !DILocation(line: 3104, column: 16, scope: !10475)
!10486 = !DILocation(line: 3104, column: 27, scope: !10475)
!10487 = !DILocation(line: 3104, column: 32, scope: !10475)
!10488 = !DILocation(line: 3104, column: 3, scope: !10475)
!10489 = distinct !DISubprogram(name: "link_imm_use", scope: !8046, file: !8046, line: 214, type: !10490, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10490 = !DISubroutineType(types: !10491)
!10491 = !{null, !3552, !2326}
!10492 = !DILocalVariable(name: "linknode", arg: 1, scope: !10489, file: !8046, line: 214, type: !3552)
!10493 = !DILocation(line: 214, column: 34, scope: !10489)
!10494 = !DILocalVariable(name: "def", arg: 2, scope: !10489, file: !8046, line: 214, type: !2326)
!10495 = !DILocation(line: 214, column: 49, scope: !10489)
!10496 = !DILocalVariable(name: "root", scope: !10489, file: !8046, line: 216, type: !3552)
!10497 = !DILocation(line: 216, column: 22, scope: !10489)
!10498 = !DILocation(line: 218, column: 8, scope: !10499)
!10499 = distinct !DILexicalBlock(scope: !10489, file: !8046, line: 218, column: 7)
!10500 = !DILocation(line: 218, column: 12, scope: !10499)
!10501 = !DILocation(line: 218, column: 15, scope: !10499)
!10502 = !DILocation(line: 218, column: 31, scope: !10499)
!10503 = !DILocation(line: 218, column: 7, scope: !10489)
!10504 = !DILocation(line: 219, column: 5, scope: !10499)
!10505 = !DILocation(line: 219, column: 15, scope: !10499)
!10506 = !DILocation(line: 219, column: 20, scope: !10499)
!10507 = !DILocation(line: 222, column: 16, scope: !10508)
!10508 = distinct !DILexicalBlock(scope: !10499, file: !8046, line: 221, column: 5)
!10509 = !DILocation(line: 222, column: 12, scope: !10508)
!10510 = !DILocation(line: 227, column: 29, scope: !10508)
!10511 = !DILocation(line: 227, column: 39, scope: !10508)
!10512 = !DILocation(line: 227, column: 7, scope: !10508)
!10513 = !DILocation(line: 229, column: 1, scope: !10489)
!10514 = distinct !DISubprogram(name: "gimple_cond_code", scope: !385, file: !385, line: 2221, type: !3742, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10515 = !DILocalVariable(name: "gs", arg: 1, scope: !10514, file: !385, line: 2221, type: !3744)
!10516 = !DILocation(line: 2221, column: 32, scope: !10514)
!10517 = !DILocation(line: 2224, column: 27, scope: !10514)
!10518 = !DILocation(line: 2224, column: 31, scope: !10514)
!10519 = !DILocation(line: 2224, column: 38, scope: !10514)
!10520 = !DILocation(line: 2224, column: 3, scope: !10514)
!10521 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !385, file: !385, line: 2241, type: !3789, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10522 = !DILocalVariable(name: "gs", arg: 1, scope: !10521, file: !385, line: 2241, type: !3744)
!10523 = !DILocation(line: 2241, column: 31, scope: !10521)
!10524 = !DILocation(line: 2244, column: 21, scope: !10521)
!10525 = !DILocation(line: 2244, column: 10, scope: !10521)
!10526 = !DILocation(line: 2244, column: 3, scope: !10521)
!10527 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !385, file: !385, line: 2271, type: !3789, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10528 = !DILocalVariable(name: "gs", arg: 1, scope: !10527, file: !385, line: 2271, type: !3744)
!10529 = !DILocation(line: 2271, column: 31, scope: !10527)
!10530 = !DILocation(line: 2274, column: 21, scope: !10527)
!10531 = !DILocation(line: 2274, column: 10, scope: !10527)
!10532 = !DILocation(line: 2274, column: 3, scope: !10527)
!10533 = distinct !DISubprogram(name: "gimple_cond_single_var_p", scope: !385, file: !385, line: 2418, type: !9070, scopeLine: 2419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10534 = !DILocalVariable(name: "gs", arg: 1, scope: !10533, file: !385, line: 2418, type: !2201)
!10535 = !DILocation(line: 2418, column: 34, scope: !10533)
!10536 = !DILocation(line: 2420, column: 25, scope: !10537)
!10537 = distinct !DILexicalBlock(scope: !10533, file: !385, line: 2420, column: 7)
!10538 = !DILocation(line: 2420, column: 7, scope: !10537)
!10539 = !DILocation(line: 2420, column: 29, scope: !10537)
!10540 = !DILocation(line: 2421, column: 7, scope: !10537)
!10541 = !DILocation(line: 2421, column: 27, scope: !10537)
!10542 = !DILocation(line: 2421, column: 10, scope: !10537)
!10543 = !DILocation(line: 2421, column: 34, scope: !10537)
!10544 = !DILocation(line: 2421, column: 31, scope: !10537)
!10545 = !DILocation(line: 2420, column: 7, scope: !10533)
!10546 = !DILocation(line: 2422, column: 5, scope: !10537)
!10547 = !DILocation(line: 2424, column: 25, scope: !10548)
!10548 = distinct !DILexicalBlock(scope: !10533, file: !385, line: 2424, column: 7)
!10549 = !DILocation(line: 2424, column: 7, scope: !10548)
!10550 = !DILocation(line: 2424, column: 29, scope: !10548)
!10551 = !DILocation(line: 2425, column: 7, scope: !10548)
!10552 = !DILocation(line: 2425, column: 27, scope: !10548)
!10553 = !DILocation(line: 2425, column: 10, scope: !10548)
!10554 = !DILocation(line: 2425, column: 34, scope: !10548)
!10555 = !DILocation(line: 2425, column: 31, scope: !10548)
!10556 = !DILocation(line: 2424, column: 7, scope: !10533)
!10557 = !DILocation(line: 2426, column: 5, scope: !10548)
!10558 = !DILocation(line: 2428, column: 3, scope: !10533)
!10559 = !DILocation(line: 2429, column: 1, scope: !10533)
!10560 = distinct !DISubprogram(name: "maybe_cleanup_end_of_block", scope: !3, file: !3, line: 1547, type: !10561, scopeLine: 1548, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10561 = !DISubroutineType(types: !10562)
!10562 = !{null, !2180, !2207}
!10563 = !DILocalVariable(name: "e", arg: 1, scope: !10560, file: !3, line: 1547, type: !2180)
!10564 = !DILocation(line: 1547, column: 34, scope: !10560)
!10565 = !DILocalVariable(name: "last", arg: 2, scope: !10560, file: !3, line: 1547, type: !2207)
!10566 = !DILocation(line: 1547, column: 41, scope: !10560)
!10567 = !DILocation(line: 1560, column: 7, scope: !10568)
!10568 = distinct !DILexicalBlock(scope: !10560, file: !3, line: 1560, column: 7)
!10569 = !DILocation(line: 1560, column: 7, scope: !10560)
!10570 = !DILocalVariable(name: "insn", scope: !10571, file: !3, line: 1562, type: !2207)
!10571 = distinct !DILexicalBlock(scope: !10568, file: !3, line: 1561, column: 5)
!10572 = !DILocation(line: 1562, column: 11, scope: !10571)
!10573 = !DILocation(line: 1563, column: 20, scope: !10571)
!10574 = !DILocation(line: 1563, column: 7, scope: !10571)
!10575 = !DILocation(line: 1573, column: 14, scope: !10571)
!10576 = !DILocation(line: 1573, column: 12, scope: !10571)
!10577 = !DILocation(line: 1576, column: 7, scope: !10571)
!10578 = !DILocation(line: 1577, column: 19, scope: !10579)
!10579 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 1577, column: 7)
!10580 = !DILocation(line: 1577, column: 17, scope: !10579)
!10581 = !DILocation(line: 1577, column: 12, scope: !10579)
!10582 = !DILocation(line: 1577, column: 37, scope: !10583)
!10583 = distinct !DILexicalBlock(scope: !10579, file: !3, line: 1577, column: 7)
!10584 = !DILocation(line: 1577, column: 45, scope: !10583)
!10585 = !DILocation(line: 1577, column: 42, scope: !10583)
!10586 = !DILocation(line: 1577, column: 7, scope: !10579)
!10587 = !DILocation(line: 1579, column: 11, scope: !10588)
!10588 = distinct !DILexicalBlock(scope: !10583, file: !3, line: 1578, column: 2)
!10589 = !DILocation(line: 1579, column: 9, scope: !10588)
!10590 = !DILocation(line: 1580, column: 8, scope: !10591)
!10591 = distinct !DILexicalBlock(scope: !10588, file: !3, line: 1580, column: 8)
!10592 = !DILocation(line: 1580, column: 8, scope: !10588)
!10593 = !DILocation(line: 1581, column: 19, scope: !10591)
!10594 = !DILocation(line: 1581, column: 6, scope: !10591)
!10595 = !DILocation(line: 1577, column: 7, scope: !10583)
!10596 = distinct !{!10596, !10586, !10597}
!10597 = !DILocation(line: 1582, column: 2, scope: !10579)
!10598 = !DILocation(line: 1583, column: 5, scope: !10571)
!10599 = !DILocation(line: 1584, column: 1, scope: !10560)
!10600 = distinct !DISubprogram(name: "op_iter_init_def", scope: !8046, file: !8046, line: 780, type: !10601, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10601 = !DISubroutineType(types: !10602)
!10602 = !{!3554, !8373, !2201, !2136}
!10603 = !DILocalVariable(name: "ptr", arg: 1, scope: !10600, file: !8046, line: 780, type: !8373)
!10604 = !DILocation(line: 780, column: 32, scope: !10600)
!10605 = !DILocalVariable(name: "stmt", arg: 2, scope: !10600, file: !8046, line: 780, type: !2201)
!10606 = !DILocation(line: 780, column: 44, scope: !10600)
!10607 = !DILocalVariable(name: "flags", arg: 3, scope: !10600, file: !8046, line: 780, type: !2136)
!10608 = !DILocation(line: 780, column: 54, scope: !10600)
!10609 = !DILocation(line: 782, column: 3, scope: !10600)
!10610 = !DILocation(line: 784, column: 17, scope: !10600)
!10611 = !DILocation(line: 784, column: 22, scope: !10600)
!10612 = !DILocation(line: 784, column: 28, scope: !10600)
!10613 = !DILocation(line: 784, column: 3, scope: !10600)
!10614 = !DILocation(line: 785, column: 3, scope: !10600)
!10615 = !DILocation(line: 785, column: 8, scope: !10600)
!10616 = !DILocation(line: 785, column: 18, scope: !10600)
!10617 = !DILocation(line: 786, column: 28, scope: !10600)
!10618 = !DILocation(line: 786, column: 10, scope: !10600)
!10619 = !DILocation(line: 786, column: 3, scope: !10600)
!10620 = distinct !DISubprogram(name: "op_iter_next_def", scope: !8046, file: !8046, line: 681, type: !10621, scopeLine: 682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10621 = !DISubroutineType(types: !10622)
!10622 = !{!3554, !8373}
!10623 = !DILocalVariable(name: "ptr", arg: 1, scope: !10620, file: !8046, line: 681, type: !8373)
!10624 = !DILocation(line: 681, column: 32, scope: !10620)
!10625 = !DILocalVariable(name: "def_p", scope: !10620, file: !8046, line: 683, type: !3554)
!10626 = !DILocation(line: 683, column: 17, scope: !10620)
!10627 = !DILocation(line: 687, column: 7, scope: !10628)
!10628 = distinct !DILexicalBlock(scope: !10620, file: !8046, line: 687, column: 7)
!10629 = !DILocation(line: 687, column: 12, scope: !10628)
!10630 = !DILocation(line: 687, column: 7, scope: !10620)
!10631 = !DILocation(line: 689, column: 15, scope: !10632)
!10632 = distinct !DILexicalBlock(scope: !10628, file: !8046, line: 688, column: 5)
!10633 = !DILocation(line: 689, column: 13, scope: !10632)
!10634 = !DILocation(line: 690, column: 19, scope: !10632)
!10635 = !DILocation(line: 690, column: 24, scope: !10632)
!10636 = !DILocation(line: 690, column: 30, scope: !10632)
!10637 = !DILocation(line: 690, column: 7, scope: !10632)
!10638 = !DILocation(line: 690, column: 12, scope: !10632)
!10639 = !DILocation(line: 690, column: 17, scope: !10632)
!10640 = !DILocation(line: 691, column: 14, scope: !10632)
!10641 = !DILocation(line: 691, column: 7, scope: !10632)
!10642 = !DILocation(line: 693, column: 3, scope: !10620)
!10643 = !DILocation(line: 693, column: 8, scope: !10620)
!10644 = !DILocation(line: 693, column: 13, scope: !10620)
!10645 = !DILocation(line: 694, column: 3, scope: !10620)
!10646 = !DILocation(line: 695, column: 1, scope: !10620)
!10647 = distinct !DISubprogram(name: "expand_debug_expr", scope: !3, file: !3, line: 2229, type: !10648, scopeLine: 2230, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!10648 = !DISubroutineType(types: !10649)
!10649 = !{!2207, !2326}
!10650 = !DILocalVariable(name: "exp", arg: 1, scope: !10647, file: !3, line: 2229, type: !2326)
!10651 = !DILocation(line: 2229, column: 25, scope: !10647)
!10652 = !DILocalVariable(name: "op0", scope: !10647, file: !3, line: 2231, type: !2207)
!10653 = !DILocation(line: 2231, column: 7, scope: !10647)
!10654 = !DILocalVariable(name: "op1", scope: !10647, file: !3, line: 2231, type: !2207)
!10655 = !DILocation(line: 2231, column: 23, scope: !10647)
!10656 = !DILocalVariable(name: "op2", scope: !10647, file: !3, line: 2231, type: !2207)
!10657 = !DILocation(line: 2231, column: 39, scope: !10647)
!10658 = !DILocalVariable(name: "mode", scope: !10647, file: !3, line: 2232, type: !5)
!10659 = !DILocation(line: 2232, column: 21, scope: !10647)
!10660 = !DILocation(line: 2232, column: 28, scope: !10647)
!10661 = !DILocalVariable(name: "unsignedp", scope: !10647, file: !3, line: 2233, type: !2136)
!10662 = !DILocation(line: 2233, column: 7, scope: !10647)
!10663 = !DILocation(line: 2233, column: 19, scope: !10647)
!10664 = !DILocalVariable(name: "as", scope: !10647, file: !3, line: 2234, type: !10665)
!10665 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_space_t", file: !2181, line: 73, baseType: !2439)
!10666 = !DILocation(line: 2234, column: 16, scope: !10647)
!10667 = !DILocalVariable(name: "address_mode", scope: !10647, file: !3, line: 2235, type: !5)
!10668 = !DILocation(line: 2235, column: 21, scope: !10647)
!10669 = !DILocation(line: 2237, column: 11, scope: !10647)
!10670 = !DILocation(line: 2237, column: 3, scope: !10647)
!10671 = !DILocation(line: 2240, column: 15, scope: !10672)
!10672 = distinct !DILexicalBlock(scope: !10647, file: !3, line: 2238, column: 5)
!10673 = !DILocation(line: 2240, column: 7, scope: !10672)
!10674 = !DILocation(line: 2244, column: 4, scope: !10675)
!10675 = distinct !DILexicalBlock(scope: !10672, file: !3, line: 2241, column: 2)
!10676 = !DILocation(line: 2251, column: 4, scope: !10675)
!10677 = !DILocation(line: 2254, column: 4, scope: !10675)
!10678 = !DILocation(line: 2257, column: 4, scope: !10675)
!10679 = !DILocation(line: 2259, column: 7, scope: !10672)
!10680 = !DILabel(scope: !10672, name: "ternary", file: !3, line: 2261)
!10681 = !DILocation(line: 2261, column: 5, scope: !10672)
!10682 = !DILocation(line: 2262, column: 32, scope: !10672)
!10683 = !DILocation(line: 2262, column: 13, scope: !10672)
!10684 = !DILocation(line: 2262, column: 11, scope: !10672)
!10685 = !DILocation(line: 2263, column: 12, scope: !10686)
!10686 = distinct !DILexicalBlock(scope: !10672, file: !3, line: 2263, column: 11)
!10687 = !DILocation(line: 2263, column: 11, scope: !10672)
!10688 = !DILocation(line: 2264, column: 2, scope: !10686)
!10689 = !DILabel(scope: !10672, name: "binary", file: !3, line: 2267)
!10690 = !DILocation(line: 2267, column: 5, scope: !10672)
!10691 = !DILocation(line: 2270, column: 32, scope: !10672)
!10692 = !DILocation(line: 2270, column: 13, scope: !10672)
!10693 = !DILocation(line: 2270, column: 11, scope: !10672)
!10694 = !DILocation(line: 2271, column: 12, scope: !10695)
!10695 = distinct !DILexicalBlock(scope: !10672, file: !3, line: 2271, column: 11)
!10696 = !DILocation(line: 2271, column: 11, scope: !10672)
!10697 = !DILocation(line: 2272, column: 2, scope: !10695)
!10698 = !DILabel(scope: !10672, name: "unary", file: !3, line: 2275)
!10699 = !DILocation(line: 2275, column: 5, scope: !10672)
!10700 = !DILocation(line: 2277, column: 32, scope: !10672)
!10701 = !DILocation(line: 2277, column: 13, scope: !10672)
!10702 = !DILocation(line: 2277, column: 11, scope: !10672)
!10703 = !DILocation(line: 2278, column: 12, scope: !10704)
!10704 = distinct !DILexicalBlock(scope: !10672, file: !3, line: 2278, column: 11)
!10705 = !DILocation(line: 2278, column: 11, scope: !10672)
!10706 = !DILocation(line: 2279, column: 2, scope: !10704)
!10707 = !DILocation(line: 2280, column: 7, scope: !10672)
!10708 = !DILocation(line: 2284, column: 7, scope: !10672)
!10709 = !DILocation(line: 2291, column: 7, scope: !10672)
!10710 = !DILocation(line: 2294, column: 11, scope: !10647)
!10711 = !DILocation(line: 2294, column: 3, scope: !10647)
!10712 = !DILocation(line: 2297, column: 33, scope: !10713)
!10713 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2297, column: 11)
!10714 = distinct !DILexicalBlock(scope: !10647, file: !3, line: 2295, column: 5)
!10715 = !DILocation(line: 2297, column: 12, scope: !10713)
!10716 = !DILocation(line: 2297, column: 11, scope: !10714)
!10717 = !DILocation(line: 2299, column: 16, scope: !10718)
!10718 = distinct !DILexicalBlock(scope: !10719, file: !3, line: 2299, column: 8)
!10719 = distinct !DILexicalBlock(scope: !10713, file: !3, line: 2298, column: 2)
!10720 = !DILocation(line: 2299, column: 8, scope: !10718)
!10721 = !DILocation(line: 2299, column: 43, scope: !10718)
!10722 = !DILocation(line: 2300, column: 20, scope: !10718)
!10723 = !DILocation(line: 2300, column: 11, scope: !10718)
!10724 = !DILocation(line: 2300, column: 8, scope: !10718)
!10725 = !DILocation(line: 2299, column: 8, scope: !10719)
!10726 = !DILocation(line: 2301, column: 6, scope: !10718)
!10727 = !DILocation(line: 2302, column: 10, scope: !10719)
!10728 = !DILocation(line: 2302, column: 8, scope: !10719)
!10729 = !DILocation(line: 2303, column: 32, scope: !10719)
!10730 = !DILocation(line: 2303, column: 10, scope: !10719)
!10731 = !DILocation(line: 2303, column: 8, scope: !10719)
!10732 = !DILocation(line: 2304, column: 24, scope: !10719)
!10733 = !DILocation(line: 2304, column: 29, scope: !10719)
!10734 = !DILocation(line: 2304, column: 4, scope: !10719)
!10735 = !DILocation(line: 2305, column: 11, scope: !10719)
!10736 = !DILocation(line: 2305, column: 4, scope: !10719)
!10737 = !DILocation(line: 2297, column: 36, scope: !10713)
!10738 = !DILocation(line: 2312, column: 26, scope: !10714)
!10739 = !DILocation(line: 2312, column: 41, scope: !10714)
!10740 = !DILocation(line: 2312, column: 13, scope: !10714)
!10741 = !DILocation(line: 2312, column: 11, scope: !10714)
!10742 = !DILocation(line: 2313, column: 14, scope: !10714)
!10743 = !DILocation(line: 2313, column: 7, scope: !10714)
!10744 = !DILocation(line: 2316, column: 7, scope: !10714)
!10745 = !DILocation(line: 2317, column: 32, scope: !10714)
!10746 = !DILocation(line: 2317, column: 13, scope: !10714)
!10747 = !DILocation(line: 2317, column: 11, scope: !10714)
!10748 = !DILocation(line: 2318, column: 32, scope: !10714)
!10749 = !DILocation(line: 2318, column: 13, scope: !10714)
!10750 = !DILocation(line: 2318, column: 11, scope: !10714)
!10751 = !DILocation(line: 2319, column: 14, scope: !10714)
!10752 = !DILocation(line: 2319, column: 7, scope: !10714)
!10753 = !DILocation(line: 2322, column: 13, scope: !10714)
!10754 = !DILocation(line: 2322, column: 11, scope: !10714)
!10755 = !DILocation(line: 2324, column: 11, scope: !10756)
!10756 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2324, column: 11)
!10757 = !DILocation(line: 2324, column: 11, scope: !10714)
!10758 = !DILocation(line: 2325, column: 9, scope: !10756)
!10759 = !DILocation(line: 2325, column: 2, scope: !10756)
!10760 = !DILocation(line: 2327, column: 13, scope: !10714)
!10761 = !DILocation(line: 2327, column: 11, scope: !10714)
!10762 = !DILocation(line: 2328, column: 36, scope: !10714)
!10763 = !DILocation(line: 2328, column: 7, scope: !10714)
!10764 = !DILocation(line: 2328, column: 34, scope: !10714)
!10765 = !DILocation(line: 2329, column: 7, scope: !10714)
!10766 = !DILocation(line: 2331, column: 14, scope: !10714)
!10767 = !DILocation(line: 2331, column: 7, scope: !10714)
!10768 = !DILocation(line: 2339, column: 13, scope: !10714)
!10769 = !DILocation(line: 2339, column: 11, scope: !10714)
!10770 = !DILocation(line: 2342, column: 12, scope: !10771)
!10771 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2342, column: 11)
!10772 = !DILocation(line: 2342, column: 11, scope: !10714)
!10773 = !DILocation(line: 2344, column: 8, scope: !10774)
!10774 = distinct !DILexicalBlock(scope: !10775, file: !3, line: 2344, column: 8)
!10775 = distinct !DILexicalBlock(scope: !10771, file: !3, line: 2343, column: 2)
!10776 = !DILocation(line: 2344, column: 24, scope: !10774)
!10777 = !DILocation(line: 2345, column: 8, scope: !10774)
!10778 = !DILocation(line: 2345, column: 11, scope: !10774)
!10779 = !DILocation(line: 2346, column: 8, scope: !10774)
!10780 = !DILocation(line: 2346, column: 12, scope: !10774)
!10781 = !DILocation(line: 2347, column: 8, scope: !10774)
!10782 = !DILocation(line: 2347, column: 12, scope: !10774)
!10783 = !DILocation(line: 2348, column: 8, scope: !10774)
!10784 = !DILocation(line: 2348, column: 11, scope: !10774)
!10785 = !DILocation(line: 2349, column: 8, scope: !10774)
!10786 = !DILocation(line: 2349, column: 11, scope: !10774)
!10787 = !DILocation(line: 2349, column: 16, scope: !10774)
!10788 = !DILocation(line: 2344, column: 8, scope: !10775)
!10789 = !DILocation(line: 2350, column: 6, scope: !10774)
!10790 = !DILocation(line: 2352, column: 35, scope: !10775)
!10791 = !DILocation(line: 2352, column: 10, scope: !10775)
!10792 = !DILocation(line: 2352, column: 8, scope: !10775)
!10793 = !DILocation(line: 2353, column: 9, scope: !10794)
!10794 = distinct !DILexicalBlock(scope: !10775, file: !3, line: 2353, column: 8)
!10795 = !DILocation(line: 2354, column: 8, scope: !10794)
!10796 = !DILocation(line: 2354, column: 11, scope: !10794)
!10797 = !DILocation(line: 2354, column: 36, scope: !10794)
!10798 = !DILocation(line: 2355, column: 8, scope: !10794)
!10799 = !DILocation(line: 2355, column: 11, scope: !10794)
!10800 = !DILocation(line: 2355, column: 46, scope: !10794)
!10801 = !DILocation(line: 2355, column: 43, scope: !10794)
!10802 = !DILocation(line: 2353, column: 8, scope: !10775)
!10803 = !DILocation(line: 2356, column: 6, scope: !10794)
!10804 = !DILocation(line: 2357, column: 2, scope: !10775)
!10805 = !DILocation(line: 2359, column: 18, scope: !10771)
!10806 = !DILocation(line: 2359, column: 8, scope: !10771)
!10807 = !DILocation(line: 2359, column: 6, scope: !10771)
!10808 = !DILocation(line: 2361, column: 11, scope: !10809)
!10809 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2361, column: 11)
!10810 = !DILocation(line: 2361, column: 26, scope: !10809)
!10811 = !DILocation(line: 2365, column: 4, scope: !10809)
!10812 = !DILocation(line: 2365, column: 7, scope: !10809)
!10813 = !DILocation(line: 2365, column: 12, scope: !10809)
!10814 = !DILocation(line: 2366, column: 4, scope: !10809)
!10815 = !DILocation(line: 2366, column: 8, scope: !10809)
!10816 = !DILocation(line: 2366, column: 13, scope: !10809)
!10817 = !DILocation(line: 2366, column: 25, scope: !10809)
!10818 = !DILocation(line: 2366, column: 28, scope: !10809)
!10819 = !DILocation(line: 2366, column: 43, scope: !10809)
!10820 = !DILocation(line: 2361, column: 11, scope: !10714)
!10821 = !DILocation(line: 2368, column: 4, scope: !10822)
!10822 = distinct !DILexicalBlock(scope: !10809, file: !3, line: 2367, column: 2)
!10823 = !DILocation(line: 2369, column: 10, scope: !10822)
!10824 = !DILocation(line: 2369, column: 8, scope: !10822)
!10825 = !DILocation(line: 2370, column: 11, scope: !10822)
!10826 = !DILocation(line: 2370, column: 4, scope: !10822)
!10827 = !DILocation(line: 2366, column: 54, scope: !10809)
!10828 = !DILabel(scope: !10714, name: "adjust_mode", file: !3, line: 2375)
!10829 = !DILocation(line: 2375, column: 5, scope: !10714)
!10830 = !DILocalVariable(name: "inner_mode", scope: !10831, file: !3, line: 2380, type: !5)
!10831 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2379, column: 7)
!10832 = !DILocation(line: 2380, column: 20, scope: !10831)
!10833 = !DILocation(line: 2380, column: 33, scope: !10831)
!10834 = !DILocation(line: 2382, column: 6, scope: !10835)
!10835 = distinct !DILexicalBlock(scope: !10831, file: !3, line: 2382, column: 6)
!10836 = !DILocation(line: 2382, column: 14, scope: !10835)
!10837 = !DILocation(line: 2382, column: 11, scope: !10835)
!10838 = !DILocation(line: 2382, column: 6, scope: !10831)
!10839 = !DILocation(line: 2383, column: 11, scope: !10835)
!10840 = !DILocation(line: 2383, column: 4, scope: !10835)
!10841 = !DILocation(line: 2385, column: 6, scope: !10842)
!10842 = distinct !DILexicalBlock(scope: !10831, file: !3, line: 2385, column: 6)
!10843 = !DILocation(line: 2385, column: 17, scope: !10842)
!10844 = !DILocation(line: 2385, column: 6, scope: !10831)
!10845 = !DILocation(line: 2387, column: 10, scope: !10846)
!10846 = distinct !DILexicalBlock(scope: !10847, file: !3, line: 2387, column: 10)
!10847 = distinct !DILexicalBlock(scope: !10842, file: !3, line: 2386, column: 4)
!10848 = !DILocation(line: 2387, column: 26, scope: !10846)
!10849 = !DILocation(line: 2387, column: 10, scope: !10847)
!10850 = !DILocation(line: 2388, column: 21, scope: !10846)
!10851 = !DILocation(line: 2388, column: 19, scope: !10846)
!10852 = !DILocation(line: 2388, column: 8, scope: !10846)
!10853 = !DILocation(line: 2390, column: 21, scope: !10846)
!10854 = !DILocation(line: 2390, column: 19, scope: !10846)
!10855 = !DILocation(line: 2391, column: 10, scope: !10856)
!10856 = distinct !DILexicalBlock(scope: !10847, file: !3, line: 2391, column: 10)
!10857 = !DILocation(line: 2391, column: 18, scope: !10856)
!10858 = !DILocation(line: 2391, column: 15, scope: !10856)
!10859 = !DILocation(line: 2391, column: 10, scope: !10847)
!10860 = !DILocation(line: 2392, column: 15, scope: !10856)
!10861 = !DILocation(line: 2392, column: 8, scope: !10856)
!10862 = !DILocation(line: 2393, column: 4, scope: !10847)
!10863 = !DILocation(line: 2395, column: 6, scope: !10864)
!10864 = distinct !DILexicalBlock(scope: !10831, file: !3, line: 2395, column: 6)
!10865 = !DILocation(line: 2395, column: 26, scope: !10864)
!10866 = !DILocation(line: 2395, column: 29, scope: !10864)
!10867 = !DILocation(line: 2395, column: 6, scope: !10831)
!10868 = !DILocation(line: 2397, column: 10, scope: !10869)
!10869 = distinct !DILexicalBlock(scope: !10870, file: !3, line: 2397, column: 10)
!10870 = distinct !DILexicalBlock(scope: !10864, file: !3, line: 2396, column: 4)
!10871 = !DILocation(line: 2397, column: 37, scope: !10869)
!10872 = !DILocation(line: 2397, column: 34, scope: !10869)
!10873 = !DILocation(line: 2397, column: 10, scope: !10870)
!10874 = !DILocation(line: 2398, column: 35, scope: !10869)
!10875 = !DILocation(line: 2398, column: 41, scope: !10869)
!10876 = !DILocation(line: 2398, column: 46, scope: !10869)
!10877 = !DILocation(line: 2398, column: 14, scope: !10869)
!10878 = !DILocation(line: 2398, column: 12, scope: !10869)
!10879 = !DILocation(line: 2398, column: 8, scope: !10869)
!10880 = !DILocation(line: 2399, column: 15, scope: !10881)
!10881 = distinct !DILexicalBlock(scope: !10869, file: !3, line: 2399, column: 15)
!10882 = !DILocation(line: 2399, column: 41, scope: !10881)
!10883 = !DILocation(line: 2399, column: 39, scope: !10881)
!10884 = !DILocation(line: 2399, column: 15, scope: !10869)
!10885 = !DILocation(line: 2400, column: 50, scope: !10881)
!10886 = !DILocation(line: 2400, column: 56, scope: !10881)
!10887 = !DILocation(line: 2400, column: 61, scope: !10881)
!10888 = !DILocation(line: 2400, column: 14, scope: !10881)
!10889 = !DILocation(line: 2400, column: 12, scope: !10881)
!10890 = !DILocation(line: 2400, column: 8, scope: !10881)
!10891 = !DILocation(line: 2402, column: 48, scope: !10881)
!10892 = !DILocation(line: 2402, column: 54, scope: !10881)
!10893 = !DILocation(line: 2402, column: 59, scope: !10881)
!10894 = !DILocation(line: 2402, column: 14, scope: !10881)
!10895 = !DILocation(line: 2402, column: 12, scope: !10881)
!10896 = !DILocation(line: 2403, column: 4, scope: !10870)
!10897 = !DILocation(line: 2404, column: 11, scope: !10898)
!10898 = distinct !DILexicalBlock(scope: !10864, file: !3, line: 2404, column: 11)
!10899 = !DILocation(line: 2404, column: 11, scope: !10864)
!10900 = !DILocation(line: 2406, column: 6, scope: !10901)
!10901 = distinct !DILexicalBlock(scope: !10898, file: !3, line: 2405, column: 4)
!10902 = !DILocation(line: 2407, column: 10, scope: !10903)
!10903 = distinct !DILexicalBlock(scope: !10901, file: !3, line: 2407, column: 10)
!10904 = !DILocation(line: 2407, column: 10, scope: !10901)
!10905 = !DILocation(line: 2408, column: 50, scope: !10903)
!10906 = !DILocation(line: 2408, column: 56, scope: !10903)
!10907 = !DILocation(line: 2408, column: 61, scope: !10903)
!10908 = !DILocation(line: 2408, column: 14, scope: !10903)
!10909 = !DILocation(line: 2408, column: 12, scope: !10903)
!10910 = !DILocation(line: 2408, column: 8, scope: !10903)
!10911 = !DILocation(line: 2410, column: 41, scope: !10903)
!10912 = !DILocation(line: 2410, column: 47, scope: !10903)
!10913 = !DILocation(line: 2410, column: 52, scope: !10903)
!10914 = !DILocation(line: 2410, column: 14, scope: !10903)
!10915 = !DILocation(line: 2410, column: 12, scope: !10903)
!10916 = !DILocation(line: 2411, column: 4, scope: !10901)
!10917 = !DILocation(line: 2412, column: 11, scope: !10918)
!10918 = distinct !DILexicalBlock(scope: !10898, file: !3, line: 2412, column: 11)
!10919 = !DILocation(line: 2412, column: 11, scope: !10898)
!10920 = !DILocation(line: 2414, column: 10, scope: !10921)
!10921 = distinct !DILexicalBlock(scope: !10922, file: !3, line: 2414, column: 10)
!10922 = distinct !DILexicalBlock(scope: !10918, file: !3, line: 2413, column: 4)
!10923 = !DILocation(line: 2414, column: 10, scope: !10922)
!10924 = !DILocation(line: 2415, column: 48, scope: !10921)
!10925 = !DILocation(line: 2415, column: 54, scope: !10921)
!10926 = !DILocation(line: 2415, column: 59, scope: !10921)
!10927 = !DILocation(line: 2415, column: 14, scope: !10921)
!10928 = !DILocation(line: 2415, column: 12, scope: !10921)
!10929 = !DILocation(line: 2415, column: 8, scope: !10921)
!10930 = !DILocation(line: 2417, column: 39, scope: !10921)
!10931 = !DILocation(line: 2417, column: 45, scope: !10921)
!10932 = !DILocation(line: 2417, column: 50, scope: !10921)
!10933 = !DILocation(line: 2417, column: 14, scope: !10921)
!10934 = !DILocation(line: 2417, column: 12, scope: !10921)
!10935 = !DILocation(line: 2418, column: 4, scope: !10922)
!10936 = !DILocation(line: 2419, column: 11, scope: !10937)
!10937 = distinct !DILexicalBlock(scope: !10918, file: !3, line: 2419, column: 11)
!10938 = !DILocation(line: 2420, column: 4, scope: !10937)
!10939 = !DILocation(line: 2420, column: 7, scope: !10937)
!10940 = !DILocation(line: 2420, column: 34, scope: !10937)
!10941 = !DILocation(line: 2420, column: 31, scope: !10937)
!10942 = !DILocation(line: 2419, column: 11, scope: !10918)
!10943 = !DILocation(line: 2421, column: 31, scope: !10937)
!10944 = !DILocation(line: 2421, column: 37, scope: !10937)
!10945 = !DILocation(line: 2421, column: 42, scope: !10937)
!10946 = !DILocation(line: 2422, column: 33, scope: !10937)
!10947 = !DILocation(line: 2423, column: 12, scope: !10937)
!10948 = !DILocation(line: 2422, column: 10, scope: !10937)
!10949 = !DILocation(line: 2421, column: 10, scope: !10937)
!10950 = !DILocation(line: 2421, column: 8, scope: !10937)
!10951 = !DILocation(line: 2421, column: 4, scope: !10937)
!10952 = !DILocation(line: 2424, column: 11, scope: !10953)
!10953 = distinct !DILexicalBlock(scope: !10937, file: !3, line: 2424, column: 11)
!10954 = !DILocation(line: 2424, column: 11, scope: !10937)
!10955 = !DILocation(line: 2425, column: 10, scope: !10953)
!10956 = !DILocation(line: 2425, column: 8, scope: !10953)
!10957 = !DILocation(line: 2425, column: 4, scope: !10953)
!10958 = !DILocation(line: 2427, column: 10, scope: !10953)
!10959 = !DILocation(line: 2427, column: 8, scope: !10953)
!10960 = !DILocation(line: 2429, column: 9, scope: !10831)
!10961 = !DILocation(line: 2429, column: 2, scope: !10831)
!10962 = !DILocation(line: 2435, column: 32, scope: !10714)
!10963 = !DILocation(line: 2435, column: 13, scope: !10714)
!10964 = !DILocation(line: 2435, column: 11, scope: !10714)
!10965 = !DILocation(line: 2436, column: 12, scope: !10966)
!10966 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2436, column: 11)
!10967 = !DILocation(line: 2436, column: 11, scope: !10714)
!10968 = !DILocation(line: 2437, column: 2, scope: !10966)
!10969 = !DILocation(line: 2439, column: 11, scope: !10970)
!10970 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2439, column: 11)
!10971 = !DILocation(line: 2439, column: 11, scope: !10714)
!10972 = !DILocation(line: 2441, column: 9, scope: !10973)
!10973 = distinct !DILexicalBlock(scope: !10970, file: !3, line: 2440, column: 2)
!10974 = !DILocation(line: 2441, column: 7, scope: !10973)
!10975 = !DILocation(line: 2442, column: 38, scope: !10973)
!10976 = !DILocation(line: 2442, column: 52, scope: !10973)
!10977 = !DILocation(line: 2442, column: 19, scope: !10973)
!10978 = !DILocation(line: 2442, column: 17, scope: !10973)
!10979 = !DILocation(line: 2443, column: 2, scope: !10973)
!10980 = !DILocation(line: 2446, column: 7, scope: !10981)
!10981 = distinct !DILexicalBlock(scope: !10970, file: !3, line: 2445, column: 2)
!10982 = !DILocation(line: 2447, column: 17, scope: !10981)
!10983 = !DILocation(line: 2450, column: 11, scope: !10984)
!10984 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2450, column: 11)
!10985 = !DILocation(line: 2450, column: 27, scope: !10984)
!10986 = !DILocation(line: 2450, column: 11, scope: !10714)
!10987 = !DILocalVariable(name: "align", scope: !10988, file: !3, line: 2452, type: !2136)
!10988 = distinct !DILexicalBlock(scope: !10984, file: !3, line: 2451, column: 2)
!10989 = !DILocation(line: 2452, column: 8, scope: !10988)
!10990 = !DILocation(line: 2452, column: 16, scope: !10988)
!10991 = !DILocation(line: 2453, column: 10, scope: !10988)
!10992 = !DILocation(line: 2453, column: 8, scope: !10988)
!10993 = !DILocation(line: 2454, column: 2, scope: !10988)
!10994 = !DILocation(line: 2456, column: 26, scope: !10714)
!10995 = !DILocation(line: 2456, column: 32, scope: !10714)
!10996 = !DILocation(line: 2456, column: 13, scope: !10714)
!10997 = !DILocation(line: 2456, column: 11, scope: !10714)
!10998 = !DILocation(line: 2458, column: 27, scope: !10714)
!10999 = !DILocation(line: 2458, column: 32, scope: !10714)
!11000 = !DILocation(line: 2458, column: 7, scope: !10714)
!11001 = !DILocation(line: 2459, column: 27, scope: !10714)
!11002 = !DILocation(line: 2459, column: 32, scope: !10714)
!11003 = !DILocation(line: 2459, column: 7, scope: !10714)
!11004 = !DILocation(line: 2461, column: 14, scope: !10714)
!11005 = !DILocation(line: 2461, column: 7, scope: !10714)
!11006 = !DILocation(line: 2464, column: 11, scope: !11007)
!11007 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2464, column: 11)
!11008 = !DILocation(line: 2464, column: 28, scope: !11007)
!11009 = !DILocation(line: 2464, column: 32, scope: !11007)
!11010 = !DILocation(line: 2464, column: 11, scope: !10714)
!11011 = !DILocation(line: 2465, column: 2, scope: !11007)
!11012 = !DILocation(line: 2468, column: 46, scope: !10714)
!11013 = !DILocation(line: 2468, column: 26, scope: !10714)
!11014 = !DILocation(line: 2468, column: 64, scope: !10714)
!11015 = !DILocation(line: 2468, column: 7, scope: !10714)
!11016 = !DILocation(line: 2467, column: 13, scope: !10714)
!11017 = !DILocation(line: 2467, column: 11, scope: !10714)
!11018 = !DILocation(line: 2469, column: 12, scope: !11019)
!11019 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2469, column: 11)
!11020 = !DILocation(line: 2469, column: 11, scope: !10714)
!11021 = !DILocation(line: 2470, column: 2, scope: !11019)
!11022 = !DILocation(line: 2472, column: 12, scope: !10714)
!11023 = !DILocation(line: 2472, column: 10, scope: !10714)
!11024 = !DILocation(line: 2474, column: 26, scope: !10714)
!11025 = !DILocation(line: 2474, column: 32, scope: !10714)
!11026 = !DILocation(line: 2474, column: 13, scope: !10714)
!11027 = !DILocation(line: 2474, column: 11, scope: !10714)
!11028 = !DILocation(line: 2476, column: 27, scope: !10714)
!11029 = !DILocation(line: 2476, column: 32, scope: !10714)
!11030 = !DILocation(line: 2476, column: 7, scope: !10714)
!11031 = !DILocation(line: 2477, column: 27, scope: !10714)
!11032 = !DILocation(line: 2477, column: 32, scope: !10714)
!11033 = !DILocation(line: 2477, column: 7, scope: !10714)
!11034 = !DILocation(line: 2479, column: 14, scope: !10714)
!11035 = !DILocation(line: 2479, column: 7, scope: !10714)
!11036 = !DILocalVariable(name: "mode1", scope: !11037, file: !3, line: 2489, type: !5)
!11037 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2488, column: 7)
!11038 = !DILocation(line: 2489, column: 20, scope: !11037)
!11039 = !DILocalVariable(name: "bitsize", scope: !11037, file: !3, line: 2490, type: !2295)
!11040 = !DILocation(line: 2490, column: 16, scope: !11037)
!11041 = !DILocalVariable(name: "bitpos", scope: !11037, file: !3, line: 2490, type: !2295)
!11042 = !DILocation(line: 2490, column: 25, scope: !11037)
!11043 = !DILocalVariable(name: "offset", scope: !11037, file: !3, line: 2491, type: !2326)
!11044 = !DILocation(line: 2491, column: 7, scope: !11037)
!11045 = !DILocalVariable(name: "volatilep", scope: !11037, file: !3, line: 2492, type: !2136)
!11046 = !DILocation(line: 2492, column: 6, scope: !11037)
!11047 = !DILocalVariable(name: "tem", scope: !11037, file: !3, line: 2493, type: !2326)
!11048 = !DILocation(line: 2493, column: 7, scope: !11037)
!11049 = !DILocation(line: 2493, column: 34, scope: !11037)
!11050 = !DILocation(line: 2493, column: 13, scope: !11037)
!11051 = !DILocalVariable(name: "orig_op0", scope: !11037, file: !3, line: 2495, type: !2207)
!11052 = !DILocation(line: 2495, column: 6, scope: !11037)
!11053 = !DILocation(line: 2497, column: 6, scope: !11054)
!11054 = distinct !DILexicalBlock(scope: !11037, file: !3, line: 2497, column: 6)
!11055 = !DILocation(line: 2497, column: 14, scope: !11054)
!11056 = !DILocation(line: 2497, column: 6, scope: !11037)
!11057 = !DILocation(line: 2498, column: 4, scope: !11054)
!11058 = !DILocation(line: 2500, column: 38, scope: !11037)
!11059 = !DILocation(line: 2500, column: 19, scope: !11037)
!11060 = !DILocation(line: 2500, column: 17, scope: !11037)
!11061 = !DILocation(line: 2500, column: 11, scope: !11037)
!11062 = !DILocation(line: 2502, column: 7, scope: !11063)
!11063 = distinct !DILexicalBlock(scope: !11037, file: !3, line: 2502, column: 6)
!11064 = !DILocation(line: 2502, column: 6, scope: !11037)
!11065 = !DILocation(line: 2503, column: 4, scope: !11063)
!11066 = !DILocation(line: 2505, column: 6, scope: !11067)
!11067 = distinct !DILexicalBlock(scope: !11037, file: !3, line: 2505, column: 6)
!11068 = !DILocation(line: 2505, column: 6, scope: !11037)
!11069 = !DILocalVariable(name: "addrmode", scope: !11070, file: !3, line: 2507, type: !5)
!11070 = distinct !DILexicalBlock(scope: !11067, file: !3, line: 2506, column: 4)
!11071 = !DILocation(line: 2507, column: 24, scope: !11070)
!11072 = !DILocalVariable(name: "offmode", scope: !11070, file: !3, line: 2507, type: !5)
!11073 = !DILocation(line: 2507, column: 34, scope: !11070)
!11074 = !DILocation(line: 2509, column: 11, scope: !11075)
!11075 = distinct !DILexicalBlock(scope: !11070, file: !3, line: 2509, column: 10)
!11076 = !DILocation(line: 2509, column: 10, scope: !11070)
!11077 = !DILocation(line: 2510, column: 8, scope: !11075)
!11078 = !DILocation(line: 2512, column: 12, scope: !11070)
!11079 = !DILocation(line: 2512, column: 10, scope: !11070)
!11080 = !DILocation(line: 2513, column: 17, scope: !11070)
!11081 = !DILocation(line: 2513, column: 15, scope: !11070)
!11082 = !DILocation(line: 2514, column: 10, scope: !11083)
!11083 = distinct !DILexicalBlock(scope: !11070, file: !3, line: 2514, column: 10)
!11084 = !DILocation(line: 2514, column: 19, scope: !11083)
!11085 = !DILocation(line: 2514, column: 10, scope: !11070)
!11086 = !DILocation(line: 2515, column: 17, scope: !11083)
!11087 = !DILocation(line: 2515, column: 8, scope: !11083)
!11088 = !DILocation(line: 2517, column: 31, scope: !11070)
!11089 = !DILocation(line: 2517, column: 12, scope: !11070)
!11090 = !DILocation(line: 2517, column: 10, scope: !11070)
!11091 = !DILocation(line: 2518, column: 11, scope: !11092)
!11092 = distinct !DILexicalBlock(scope: !11070, file: !3, line: 2518, column: 10)
!11093 = !DILocation(line: 2518, column: 10, scope: !11070)
!11094 = !DILocation(line: 2519, column: 8, scope: !11092)
!11095 = !DILocation(line: 2521, column: 16, scope: !11070)
!11096 = !DILocation(line: 2521, column: 14, scope: !11070)
!11097 = !DILocation(line: 2522, column: 10, scope: !11098)
!11098 = distinct !DILexicalBlock(scope: !11070, file: !3, line: 2522, column: 10)
!11099 = !DILocation(line: 2522, column: 18, scope: !11098)
!11100 = !DILocation(line: 2522, column: 10, scope: !11070)
!11101 = !DILocation(line: 2523, column: 18, scope: !11098)
!11102 = !DILocation(line: 2523, column: 16, scope: !11098)
!11103 = !DILocation(line: 2523, column: 8, scope: !11098)
!11104 = !DILocation(line: 2525, column: 10, scope: !11105)
!11105 = distinct !DILexicalBlock(scope: !11070, file: !3, line: 2525, column: 10)
!11106 = !DILocation(line: 2525, column: 22, scope: !11105)
!11107 = !DILocation(line: 2525, column: 19, scope: !11105)
!11108 = !DILocation(line: 2525, column: 10, scope: !11070)
!11109 = !DILocation(line: 2526, column: 35, scope: !11105)
!11110 = !DILocation(line: 2526, column: 45, scope: !11105)
!11111 = !DILocation(line: 2526, column: 50, scope: !11105)
!11112 = !DILocation(line: 2527, column: 30, scope: !11105)
!11113 = !DILocation(line: 2528, column: 9, scope: !11105)
!11114 = !DILocation(line: 2527, column: 7, scope: !11105)
!11115 = !DILocation(line: 2526, column: 14, scope: !11105)
!11116 = !DILocation(line: 2526, column: 12, scope: !11105)
!11117 = !DILocation(line: 2526, column: 8, scope: !11105)
!11118 = !DILocation(line: 2533, column: 25, scope: !11070)
!11119 = !DILocation(line: 2533, column: 31, scope: !11070)
!11120 = !DILocation(line: 2533, column: 12, scope: !11070)
!11121 = !DILocation(line: 2533, column: 10, scope: !11070)
!11122 = !DILocation(line: 2534, column: 4, scope: !11070)
!11123 = !DILocation(line: 2536, column: 6, scope: !11124)
!11124 = distinct !DILexicalBlock(scope: !11037, file: !3, line: 2536, column: 6)
!11125 = !DILocation(line: 2536, column: 6, scope: !11037)
!11126 = !DILocation(line: 2538, column: 10, scope: !11127)
!11127 = distinct !DILexicalBlock(scope: !11128, file: !3, line: 2538, column: 10)
!11128 = distinct !DILexicalBlock(scope: !11124, file: !3, line: 2537, column: 4)
!11129 = !DILocation(line: 2538, column: 16, scope: !11127)
!11130 = !DILocation(line: 2538, column: 10, scope: !11128)
!11131 = !DILocation(line: 2540, column: 40, scope: !11127)
!11132 = !DILocation(line: 2540, column: 16, scope: !11127)
!11133 = !DILocation(line: 2540, column: 14, scope: !11127)
!11134 = !DILocation(line: 2540, column: 8, scope: !11127)
!11135 = !DILocation(line: 2541, column: 10, scope: !11136)
!11136 = distinct !DILexicalBlock(scope: !11128, file: !3, line: 2541, column: 10)
!11137 = !DILocation(line: 2541, column: 17, scope: !11136)
!11138 = !DILocation(line: 2541, column: 10, scope: !11128)
!11139 = !DILocation(line: 2543, column: 9, scope: !11140)
!11140 = distinct !DILexicalBlock(scope: !11136, file: !3, line: 2542, column: 8)
!11141 = !DILocation(line: 2543, column: 7, scope: !11140)
!11142 = !DILocation(line: 2544, column: 10, scope: !11140)
!11143 = !DILocation(line: 2545, column: 8, scope: !11140)
!11144 = !DILocation(line: 2546, column: 15, scope: !11145)
!11145 = distinct !DILexicalBlock(scope: !11136, file: !3, line: 2546, column: 15)
!11146 = !DILocation(line: 2546, column: 22, scope: !11145)
!11147 = !DILocation(line: 2546, column: 15, scope: !11136)
!11148 = !DILocalVariable(name: "units", scope: !11149, file: !3, line: 2548, type: !2295)
!11149 = distinct !DILexicalBlock(scope: !11145, file: !3, line: 2547, column: 8)
!11150 = !DILocation(line: 2548, column: 17, scope: !11149)
!11151 = !DILocation(line: 2549, column: 9, scope: !11149)
!11152 = !DILocation(line: 2549, column: 8, scope: !11149)
!11153 = !DILocation(line: 2549, column: 16, scope: !11149)
!11154 = !DILocation(line: 2549, column: 32, scope: !11149)
!11155 = !DILocation(line: 2549, column: 37, scope: !11149)
!11156 = !DILocation(line: 2550, column: 9, scope: !11149)
!11157 = !DILocation(line: 2550, column: 7, scope: !11149)
!11158 = !DILocation(line: 2551, column: 13, scope: !11149)
!11159 = !DILocation(line: 2551, column: 19, scope: !11149)
!11160 = !DILocation(line: 2551, column: 10, scope: !11149)
!11161 = !DILocation(line: 2552, column: 8, scope: !11149)
!11162 = !DILocation(line: 2553, column: 15, scope: !11163)
!11163 = distinct !DILexicalBlock(scope: !11145, file: !3, line: 2553, column: 15)
!11164 = !DILocation(line: 2553, column: 22, scope: !11163)
!11165 = !DILocation(line: 2553, column: 27, scope: !11163)
!11166 = !DILocation(line: 2553, column: 30, scope: !11163)
!11167 = !DILocation(line: 2553, column: 41, scope: !11163)
!11168 = !DILocation(line: 2553, column: 38, scope: !11163)
!11169 = !DILocation(line: 2553, column: 15, scope: !11145)
!11170 = !DILocation(line: 2554, column: 14, scope: !11163)
!11171 = !DILocation(line: 2554, column: 12, scope: !11163)
!11172 = !DILocation(line: 2554, column: 8, scope: !11163)
!11173 = !DILocation(line: 2555, column: 15, scope: !11174)
!11174 = distinct !DILexicalBlock(scope: !11163, file: !3, line: 2555, column: 15)
!11175 = !DILocation(line: 2555, column: 33, scope: !11174)
!11176 = !DILocation(line: 2555, column: 30, scope: !11174)
!11177 = !DILocation(line: 2555, column: 15, scope: !11163)
!11178 = !DILocation(line: 2556, column: 14, scope: !11174)
!11179 = !DILocation(line: 2556, column: 12, scope: !11174)
!11180 = !DILocation(line: 2556, column: 8, scope: !11174)
!11181 = !DILocation(line: 2558, column: 24, scope: !11174)
!11182 = !DILocation(line: 2558, column: 14, scope: !11174)
!11183 = !DILocation(line: 2558, column: 12, scope: !11174)
!11184 = !DILocation(line: 2559, column: 10, scope: !11185)
!11185 = distinct !DILexicalBlock(scope: !11128, file: !3, line: 2559, column: 10)
!11186 = !DILocation(line: 2559, column: 17, scope: !11185)
!11187 = !DILocation(line: 2559, column: 14, scope: !11185)
!11188 = !DILocation(line: 2559, column: 10, scope: !11128)
!11189 = !DILocation(line: 2560, column: 14, scope: !11185)
!11190 = !DILocation(line: 2560, column: 12, scope: !11185)
!11191 = !DILocation(line: 2560, column: 8, scope: !11185)
!11192 = !DILocation(line: 2561, column: 26, scope: !11128)
!11193 = !DILocation(line: 2561, column: 31, scope: !11128)
!11194 = !DILocation(line: 2561, column: 6, scope: !11128)
!11195 = !DILocation(line: 2562, column: 4, scope: !11128)
!11196 = !DILocation(line: 2564, column: 6, scope: !11197)
!11197 = distinct !DILexicalBlock(scope: !11037, file: !3, line: 2564, column: 6)
!11198 = !DILocation(line: 2564, column: 13, scope: !11197)
!11199 = !DILocation(line: 2564, column: 18, scope: !11197)
!11200 = !DILocation(line: 2564, column: 21, scope: !11197)
!11201 = !DILocation(line: 2564, column: 29, scope: !11197)
!11202 = !DILocation(line: 2564, column: 26, scope: !11197)
!11203 = !DILocation(line: 2564, column: 6, scope: !11037)
!11204 = !DILocation(line: 2565, column: 11, scope: !11197)
!11205 = !DILocation(line: 2565, column: 4, scope: !11197)
!11206 = !DILocation(line: 2567, column: 13, scope: !11207)
!11207 = distinct !DILexicalBlock(scope: !11037, file: !3, line: 2567, column: 13)
!11208 = !DILocation(line: 2567, column: 20, scope: !11207)
!11209 = !DILocation(line: 2567, column: 13, scope: !11037)
!11210 = !DILocation(line: 2568, column: 11, scope: !11207)
!11211 = !DILocation(line: 2570, column: 7, scope: !11212)
!11212 = distinct !DILexicalBlock(scope: !11037, file: !3, line: 2570, column: 6)
!11213 = !DILocation(line: 2570, column: 14, scope: !11212)
!11214 = !DILocation(line: 2570, column: 31, scope: !11212)
!11215 = !DILocation(line: 2571, column: 6, scope: !11212)
!11216 = !DILocation(line: 2571, column: 9, scope: !11212)
!11217 = !DILocation(line: 2571, column: 20, scope: !11212)
!11218 = !DILocation(line: 2571, column: 17, scope: !11212)
!11219 = !DILocation(line: 2570, column: 6, scope: !11037)
!11220 = !DILocalVariable(name: "opmode", scope: !11221, file: !3, line: 2573, type: !5)
!11221 = distinct !DILexicalBlock(scope: !11212, file: !3, line: 2572, column: 4)
!11222 = !DILocation(line: 2573, column: 24, scope: !11221)
!11223 = !DILocation(line: 2573, column: 33, scope: !11221)
!11224 = !DILocation(line: 2575, column: 6, scope: !11221)
!11225 = !DILocation(line: 2577, column: 10, scope: !11226)
!11226 = distinct !DILexicalBlock(scope: !11221, file: !3, line: 2577, column: 10)
!11227 = !DILocation(line: 2577, column: 17, scope: !11226)
!11228 = !DILocation(line: 2577, column: 10, scope: !11221)
!11229 = !DILocation(line: 2578, column: 17, scope: !11226)
!11230 = !DILocation(line: 2578, column: 15, scope: !11226)
!11231 = !DILocation(line: 2578, column: 8, scope: !11226)
!11232 = !DILocation(line: 2586, column: 10, scope: !11233)
!11233 = distinct !DILexicalBlock(scope: !11221, file: !3, line: 2586, column: 10)
!11234 = !DILocation(line: 2586, column: 20, scope: !11233)
!11235 = !DILocation(line: 2586, column: 17, scope: !11233)
!11236 = !DILocation(line: 2586, column: 10, scope: !11221)
!11237 = !DILocation(line: 2587, column: 8, scope: !11233)
!11238 = !DILocation(line: 2589, column: 11, scope: !11239)
!11239 = distinct !DILexicalBlock(scope: !11221, file: !3, line: 2589, column: 10)
!11240 = !DILocation(line: 2589, column: 20, scope: !11239)
!11241 = !DILocation(line: 2589, column: 18, scope: !11239)
!11242 = !DILocation(line: 2589, column: 45, scope: !11239)
!11243 = !DILocation(line: 2589, column: 10, scope: !11221)
!11244 = !DILocation(line: 2590, column: 36, scope: !11239)
!11245 = !DILocation(line: 2590, column: 42, scope: !11239)
!11246 = !DILocation(line: 2590, column: 47, scope: !11239)
!11247 = !DILocation(line: 2591, column: 8, scope: !11239)
!11248 = !DILocation(line: 2591, column: 15, scope: !11239)
!11249 = !DILocation(line: 2590, column: 15, scope: !11239)
!11250 = !DILocation(line: 2590, column: 8, scope: !11239)
!11251 = !DILocation(line: 2592, column: 4, scope: !11221)
!11252 = !DILocation(line: 2594, column: 31, scope: !11037)
!11253 = !DILocation(line: 2595, column: 10, scope: !11037)
!11254 = !DILocation(line: 2595, column: 13, scope: !11037)
!11255 = !DILocation(line: 0, scope: !11037)
!11256 = !DILocation(line: 2597, column: 26, scope: !11037)
!11257 = !DILocation(line: 2598, column: 10, scope: !11037)
!11258 = !DILocation(line: 2598, column: 25, scope: !11037)
!11259 = !DILocation(line: 2599, column: 12, scope: !11037)
!11260 = !DILocation(line: 2599, column: 29, scope: !11037)
!11261 = !DILocation(line: 2600, column: 10, scope: !11037)
!11262 = !DILocation(line: 2600, column: 15, scope: !11037)
!11263 = !DILocation(line: 2600, column: 34, scope: !11037)
!11264 = !DILocation(line: 2594, column: 9, scope: !11037)
!11265 = !DILocation(line: 2594, column: 2, scope: !11037)
!11266 = !DILocation(line: 2604, column: 14, scope: !10714)
!11267 = !DILocation(line: 2604, column: 7, scope: !10714)
!11268 = !DILocation(line: 2607, column: 14, scope: !10714)
!11269 = !DILocation(line: 2607, column: 7, scope: !10714)
!11270 = !DILocation(line: 2610, column: 14, scope: !10714)
!11271 = !DILocation(line: 2610, column: 7, scope: !10714)
!11272 = !DILocation(line: 2613, column: 11, scope: !11273)
!11273 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2613, column: 11)
!11274 = !DILocation(line: 2613, column: 11, scope: !10714)
!11275 = !DILocation(line: 2614, column: 9, scope: !11273)
!11276 = !DILocation(line: 2614, column: 2, scope: !11273)
!11277 = !DILocation(line: 2616, column: 9, scope: !11273)
!11278 = !DILocation(line: 2616, column: 2, scope: !11273)
!11279 = !DILocation(line: 2619, column: 11, scope: !11280)
!11280 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2619, column: 11)
!11281 = !DILocation(line: 2619, column: 11, scope: !10714)
!11282 = !DILocation(line: 2620, column: 9, scope: !11280)
!11283 = !DILocation(line: 2620, column: 2, scope: !11280)
!11284 = !DILocation(line: 2622, column: 9, scope: !11280)
!11285 = !DILocation(line: 2622, column: 2, scope: !11280)
!11286 = !DILocation(line: 2626, column: 14, scope: !10714)
!11287 = !DILocation(line: 2626, column: 7, scope: !10714)
!11288 = !DILocation(line: 2629, column: 14, scope: !10714)
!11289 = !DILocation(line: 2629, column: 7, scope: !10714)
!11290 = !DILocation(line: 2632, column: 14, scope: !10714)
!11291 = !DILocation(line: 2632, column: 7, scope: !10714)
!11292 = !DILocation(line: 2637, column: 11, scope: !11293)
!11293 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2637, column: 11)
!11294 = !DILocation(line: 2637, column: 11, scope: !10714)
!11295 = !DILocation(line: 2638, column: 9, scope: !11293)
!11296 = !DILocation(line: 2638, column: 2, scope: !11293)
!11297 = !DILocation(line: 2640, column: 9, scope: !11293)
!11298 = !DILocation(line: 2640, column: 2, scope: !11293)
!11299 = !DILocation(line: 2643, column: 11, scope: !11300)
!11300 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2643, column: 11)
!11301 = !DILocation(line: 2643, column: 11, scope: !10714)
!11302 = !DILocation(line: 2644, column: 9, scope: !11300)
!11303 = !DILocation(line: 2644, column: 2, scope: !11300)
!11304 = !DILocation(line: 2646, column: 9, scope: !11300)
!11305 = !DILocation(line: 2646, column: 2, scope: !11300)
!11306 = !DILocation(line: 2649, column: 11, scope: !11307)
!11307 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2649, column: 11)
!11308 = !DILocation(line: 2649, column: 11, scope: !10714)
!11309 = !DILocation(line: 2650, column: 9, scope: !11307)
!11310 = !DILocation(line: 2650, column: 2, scope: !11307)
!11311 = !DILocalVariable(name: "div", scope: !11312, file: !3, line: 2653, type: !2207)
!11312 = distinct !DILexicalBlock(scope: !11307, file: !3, line: 2652, column: 2)
!11313 = !DILocation(line: 2653, column: 8, scope: !11312)
!11314 = !DILocation(line: 2653, column: 14, scope: !11312)
!11315 = !DILocalVariable(name: "mod", scope: !11312, file: !3, line: 2654, type: !2207)
!11316 = !DILocation(line: 2654, column: 8, scope: !11312)
!11317 = !DILocation(line: 2654, column: 14, scope: !11312)
!11318 = !DILocalVariable(name: "adj", scope: !11312, file: !3, line: 2655, type: !2207)
!11319 = !DILocation(line: 2655, column: 8, scope: !11312)
!11320 = !DILocation(line: 2655, column: 33, scope: !11312)
!11321 = !DILocation(line: 2655, column: 39, scope: !11312)
!11322 = !DILocation(line: 2655, column: 44, scope: !11312)
!11323 = !DILocation(line: 2655, column: 14, scope: !11312)
!11324 = !DILocation(line: 2656, column: 11, scope: !11312)
!11325 = !DILocation(line: 2656, column: 4, scope: !11312)
!11326 = !DILocation(line: 2660, column: 11, scope: !11327)
!11327 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2660, column: 11)
!11328 = !DILocation(line: 2660, column: 11, scope: !10714)
!11329 = !DILocation(line: 2661, column: 9, scope: !11327)
!11330 = !DILocation(line: 2661, column: 2, scope: !11327)
!11331 = !DILocalVariable(name: "mod", scope: !11332, file: !3, line: 2664, type: !2207)
!11332 = distinct !DILexicalBlock(scope: !11327, file: !3, line: 2663, column: 2)
!11333 = !DILocation(line: 2664, column: 8, scope: !11332)
!11334 = !DILocation(line: 2664, column: 14, scope: !11332)
!11335 = !DILocalVariable(name: "adj", scope: !11332, file: !3, line: 2665, type: !2207)
!11336 = !DILocation(line: 2665, column: 8, scope: !11332)
!11337 = !DILocation(line: 2665, column: 33, scope: !11332)
!11338 = !DILocation(line: 2665, column: 39, scope: !11332)
!11339 = !DILocation(line: 2665, column: 44, scope: !11332)
!11340 = !DILocation(line: 2665, column: 14, scope: !11332)
!11341 = !DILocation(line: 2666, column: 10, scope: !11332)
!11342 = !DILocation(line: 2666, column: 8, scope: !11332)
!11343 = !DILocation(line: 2667, column: 11, scope: !11332)
!11344 = !DILocation(line: 2667, column: 4, scope: !11332)
!11345 = !DILocation(line: 2671, column: 11, scope: !11346)
!11346 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2671, column: 11)
!11347 = !DILocation(line: 2671, column: 11, scope: !10714)
!11348 = !DILocalVariable(name: "div", scope: !11349, file: !3, line: 2673, type: !2207)
!11349 = distinct !DILexicalBlock(scope: !11346, file: !3, line: 2672, column: 2)
!11350 = !DILocation(line: 2673, column: 8, scope: !11349)
!11351 = !DILocation(line: 2673, column: 14, scope: !11349)
!11352 = !DILocalVariable(name: "mod", scope: !11349, file: !3, line: 2674, type: !2207)
!11353 = !DILocation(line: 2674, column: 8, scope: !11349)
!11354 = !DILocation(line: 2674, column: 14, scope: !11349)
!11355 = !DILocalVariable(name: "adj", scope: !11349, file: !3, line: 2675, type: !2207)
!11356 = !DILocation(line: 2675, column: 8, scope: !11349)
!11357 = !DILocation(line: 2675, column: 32, scope: !11349)
!11358 = !DILocation(line: 2675, column: 38, scope: !11349)
!11359 = !DILocation(line: 2675, column: 43, scope: !11349)
!11360 = !DILocation(line: 2675, column: 14, scope: !11349)
!11361 = !DILocation(line: 2676, column: 11, scope: !11349)
!11362 = !DILocation(line: 2676, column: 4, scope: !11349)
!11363 = !DILocalVariable(name: "div", scope: !11364, file: !3, line: 2680, type: !2207)
!11364 = distinct !DILexicalBlock(scope: !11346, file: !3, line: 2679, column: 2)
!11365 = !DILocation(line: 2680, column: 8, scope: !11364)
!11366 = !DILocation(line: 2680, column: 14, scope: !11364)
!11367 = !DILocalVariable(name: "mod", scope: !11364, file: !3, line: 2681, type: !2207)
!11368 = !DILocation(line: 2681, column: 8, scope: !11364)
!11369 = !DILocation(line: 2681, column: 14, scope: !11364)
!11370 = !DILocalVariable(name: "adj", scope: !11364, file: !3, line: 2682, type: !2207)
!11371 = !DILocation(line: 2682, column: 8, scope: !11364)
!11372 = !DILocation(line: 2682, column: 32, scope: !11364)
!11373 = !DILocation(line: 2682, column: 38, scope: !11364)
!11374 = !DILocation(line: 2682, column: 43, scope: !11364)
!11375 = !DILocation(line: 2682, column: 14, scope: !11364)
!11376 = !DILocation(line: 2683, column: 11, scope: !11364)
!11377 = !DILocation(line: 2683, column: 4, scope: !11364)
!11378 = !DILocation(line: 2687, column: 11, scope: !11379)
!11379 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2687, column: 11)
!11380 = !DILocation(line: 2687, column: 11, scope: !10714)
!11381 = !DILocalVariable(name: "mod", scope: !11382, file: !3, line: 2689, type: !2207)
!11382 = distinct !DILexicalBlock(scope: !11379, file: !3, line: 2688, column: 2)
!11383 = !DILocation(line: 2689, column: 8, scope: !11382)
!11384 = !DILocation(line: 2689, column: 14, scope: !11382)
!11385 = !DILocalVariable(name: "adj", scope: !11382, file: !3, line: 2690, type: !2207)
!11386 = !DILocation(line: 2690, column: 8, scope: !11382)
!11387 = !DILocation(line: 2690, column: 32, scope: !11382)
!11388 = !DILocation(line: 2690, column: 38, scope: !11382)
!11389 = !DILocation(line: 2690, column: 43, scope: !11382)
!11390 = !DILocation(line: 2690, column: 14, scope: !11382)
!11391 = !DILocation(line: 2691, column: 10, scope: !11382)
!11392 = !DILocation(line: 2691, column: 8, scope: !11382)
!11393 = !DILocation(line: 2692, column: 11, scope: !11382)
!11394 = !DILocation(line: 2692, column: 4, scope: !11382)
!11395 = !DILocalVariable(name: "mod", scope: !11396, file: !3, line: 2696, type: !2207)
!11396 = distinct !DILexicalBlock(scope: !11379, file: !3, line: 2695, column: 2)
!11397 = !DILocation(line: 2696, column: 8, scope: !11396)
!11398 = !DILocation(line: 2696, column: 14, scope: !11396)
!11399 = !DILocalVariable(name: "adj", scope: !11396, file: !3, line: 2697, type: !2207)
!11400 = !DILocation(line: 2697, column: 8, scope: !11396)
!11401 = !DILocation(line: 2697, column: 32, scope: !11396)
!11402 = !DILocation(line: 2697, column: 38, scope: !11396)
!11403 = !DILocation(line: 2697, column: 43, scope: !11396)
!11404 = !DILocation(line: 2697, column: 14, scope: !11396)
!11405 = !DILocation(line: 2698, column: 10, scope: !11396)
!11406 = !DILocation(line: 2698, column: 8, scope: !11396)
!11407 = !DILocation(line: 2699, column: 11, scope: !11396)
!11408 = !DILocation(line: 2699, column: 4, scope: !11396)
!11409 = !DILocation(line: 2703, column: 11, scope: !11410)
!11410 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2703, column: 11)
!11411 = !DILocation(line: 2703, column: 11, scope: !10714)
!11412 = !DILocalVariable(name: "div", scope: !11413, file: !3, line: 2705, type: !2207)
!11413 = distinct !DILexicalBlock(scope: !11410, file: !3, line: 2704, column: 2)
!11414 = !DILocation(line: 2705, column: 8, scope: !11413)
!11415 = !DILocation(line: 2705, column: 14, scope: !11413)
!11416 = !DILocalVariable(name: "mod", scope: !11413, file: !3, line: 2706, type: !2207)
!11417 = !DILocation(line: 2706, column: 8, scope: !11413)
!11418 = !DILocation(line: 2706, column: 14, scope: !11413)
!11419 = !DILocalVariable(name: "adj", scope: !11413, file: !3, line: 2707, type: !2207)
!11420 = !DILocation(line: 2707, column: 8, scope: !11413)
!11421 = !DILocation(line: 2707, column: 33, scope: !11413)
!11422 = !DILocation(line: 2707, column: 39, scope: !11413)
!11423 = !DILocation(line: 2707, column: 44, scope: !11413)
!11424 = !DILocation(line: 2707, column: 14, scope: !11413)
!11425 = !DILocation(line: 2708, column: 11, scope: !11413)
!11426 = !DILocation(line: 2708, column: 4, scope: !11413)
!11427 = !DILocalVariable(name: "div", scope: !11428, file: !3, line: 2712, type: !2207)
!11428 = distinct !DILexicalBlock(scope: !11410, file: !3, line: 2711, column: 2)
!11429 = !DILocation(line: 2712, column: 8, scope: !11428)
!11430 = !DILocation(line: 2712, column: 14, scope: !11428)
!11431 = !DILocalVariable(name: "mod", scope: !11428, file: !3, line: 2713, type: !2207)
!11432 = !DILocation(line: 2713, column: 8, scope: !11428)
!11433 = !DILocation(line: 2713, column: 14, scope: !11428)
!11434 = !DILocalVariable(name: "adj", scope: !11428, file: !3, line: 2714, type: !2207)
!11435 = !DILocation(line: 2714, column: 8, scope: !11428)
!11436 = !DILocation(line: 2714, column: 33, scope: !11428)
!11437 = !DILocation(line: 2714, column: 39, scope: !11428)
!11438 = !DILocation(line: 2714, column: 44, scope: !11428)
!11439 = !DILocation(line: 2714, column: 14, scope: !11428)
!11440 = !DILocation(line: 2715, column: 11, scope: !11428)
!11441 = !DILocation(line: 2715, column: 4, scope: !11428)
!11442 = !DILocation(line: 2719, column: 11, scope: !11443)
!11443 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2719, column: 11)
!11444 = !DILocation(line: 2719, column: 11, scope: !10714)
!11445 = !DILocalVariable(name: "mod", scope: !11446, file: !3, line: 2721, type: !2207)
!11446 = distinct !DILexicalBlock(scope: !11443, file: !3, line: 2720, column: 2)
!11447 = !DILocation(line: 2721, column: 8, scope: !11446)
!11448 = !DILocation(line: 2721, column: 14, scope: !11446)
!11449 = !DILocalVariable(name: "adj", scope: !11446, file: !3, line: 2722, type: !2207)
!11450 = !DILocation(line: 2722, column: 8, scope: !11446)
!11451 = !DILocation(line: 2722, column: 33, scope: !11446)
!11452 = !DILocation(line: 2722, column: 39, scope: !11446)
!11453 = !DILocation(line: 2722, column: 44, scope: !11446)
!11454 = !DILocation(line: 2722, column: 14, scope: !11446)
!11455 = !DILocation(line: 2723, column: 10, scope: !11446)
!11456 = !DILocation(line: 2723, column: 8, scope: !11446)
!11457 = !DILocation(line: 2724, column: 11, scope: !11446)
!11458 = !DILocation(line: 2724, column: 4, scope: !11446)
!11459 = !DILocalVariable(name: "mod", scope: !11460, file: !3, line: 2728, type: !2207)
!11460 = distinct !DILexicalBlock(scope: !11443, file: !3, line: 2727, column: 2)
!11461 = !DILocation(line: 2728, column: 8, scope: !11460)
!11462 = !DILocation(line: 2728, column: 14, scope: !11460)
!11463 = !DILocalVariable(name: "adj", scope: !11460, file: !3, line: 2729, type: !2207)
!11464 = !DILocation(line: 2729, column: 8, scope: !11460)
!11465 = !DILocation(line: 2729, column: 33, scope: !11460)
!11466 = !DILocation(line: 2729, column: 39, scope: !11460)
!11467 = !DILocation(line: 2729, column: 44, scope: !11460)
!11468 = !DILocation(line: 2729, column: 14, scope: !11460)
!11469 = !DILocation(line: 2730, column: 10, scope: !11460)
!11470 = !DILocation(line: 2730, column: 8, scope: !11460)
!11471 = !DILocation(line: 2731, column: 11, scope: !11460)
!11472 = !DILocation(line: 2731, column: 4, scope: !11460)
!11473 = !DILocation(line: 2735, column: 14, scope: !10714)
!11474 = !DILocation(line: 2735, column: 7, scope: !10714)
!11475 = !DILocation(line: 2738, column: 11, scope: !11476)
!11476 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2738, column: 11)
!11477 = !DILocation(line: 2738, column: 11, scope: !10714)
!11478 = !DILocation(line: 2739, column: 9, scope: !11476)
!11479 = !DILocation(line: 2739, column: 2, scope: !11476)
!11480 = !DILocation(line: 2741, column: 9, scope: !11476)
!11481 = !DILocation(line: 2741, column: 2, scope: !11476)
!11482 = !DILocation(line: 2744, column: 14, scope: !10714)
!11483 = !DILocation(line: 2744, column: 7, scope: !10714)
!11484 = !DILocation(line: 2747, column: 14, scope: !10714)
!11485 = !DILocation(line: 2747, column: 7, scope: !10714)
!11486 = !DILocation(line: 2750, column: 11, scope: !11487)
!11487 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2750, column: 11)
!11488 = !DILocation(line: 2750, column: 11, scope: !10714)
!11489 = !DILocation(line: 2751, column: 9, scope: !11487)
!11490 = !DILocation(line: 2751, column: 2, scope: !11487)
!11491 = !DILocation(line: 2753, column: 9, scope: !11487)
!11492 = !DILocation(line: 2753, column: 2, scope: !11487)
!11493 = !DILocation(line: 2756, column: 11, scope: !11494)
!11494 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2756, column: 11)
!11495 = !DILocation(line: 2756, column: 11, scope: !10714)
!11496 = !DILocation(line: 2757, column: 9, scope: !11494)
!11497 = !DILocation(line: 2757, column: 2, scope: !11494)
!11498 = !DILocation(line: 2759, column: 9, scope: !11494)
!11499 = !DILocation(line: 2759, column: 2, scope: !11494)
!11500 = !DILocation(line: 2763, column: 14, scope: !10714)
!11501 = !DILocation(line: 2763, column: 7, scope: !10714)
!11502 = !DILocation(line: 2767, column: 14, scope: !10714)
!11503 = !DILocation(line: 2767, column: 7, scope: !10714)
!11504 = !DILocation(line: 2771, column: 14, scope: !10714)
!11505 = !DILocation(line: 2771, column: 7, scope: !10714)
!11506 = !DILocation(line: 2774, column: 14, scope: !10714)
!11507 = !DILocation(line: 2774, column: 7, scope: !10714)
!11508 = !DILocation(line: 2777, column: 14, scope: !10714)
!11509 = !DILocation(line: 2777, column: 7, scope: !10714)
!11510 = !DILocation(line: 2780, column: 14, scope: !10714)
!11511 = !DILocation(line: 2780, column: 7, scope: !10714)
!11512 = !DILocation(line: 2783, column: 11, scope: !11513)
!11513 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2783, column: 11)
!11514 = !DILocation(line: 2783, column: 11, scope: !10714)
!11515 = !DILocation(line: 2784, column: 9, scope: !11513)
!11516 = !DILocation(line: 2784, column: 2, scope: !11513)
!11517 = !DILocation(line: 2786, column: 9, scope: !11513)
!11518 = !DILocation(line: 2786, column: 2, scope: !11513)
!11519 = !DILocation(line: 2789, column: 11, scope: !11520)
!11520 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2789, column: 11)
!11521 = !DILocation(line: 2789, column: 11, scope: !10714)
!11522 = !DILocation(line: 2790, column: 9, scope: !11520)
!11523 = !DILocation(line: 2790, column: 2, scope: !11520)
!11524 = !DILocation(line: 2792, column: 9, scope: !11520)
!11525 = !DILocation(line: 2792, column: 2, scope: !11520)
!11526 = !DILocation(line: 2795, column: 11, scope: !11527)
!11527 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2795, column: 11)
!11528 = !DILocation(line: 2795, column: 11, scope: !10714)
!11529 = !DILocation(line: 2796, column: 9, scope: !11527)
!11530 = !DILocation(line: 2796, column: 2, scope: !11527)
!11531 = !DILocation(line: 2798, column: 9, scope: !11527)
!11532 = !DILocation(line: 2798, column: 2, scope: !11527)
!11533 = !DILocation(line: 2801, column: 11, scope: !11534)
!11534 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2801, column: 11)
!11535 = !DILocation(line: 2801, column: 11, scope: !10714)
!11536 = !DILocation(line: 2802, column: 9, scope: !11534)
!11537 = !DILocation(line: 2802, column: 2, scope: !11534)
!11538 = !DILocation(line: 2804, column: 9, scope: !11534)
!11539 = !DILocation(line: 2804, column: 2, scope: !11534)
!11540 = !DILocation(line: 2807, column: 14, scope: !10714)
!11541 = !DILocation(line: 2807, column: 7, scope: !10714)
!11542 = !DILocation(line: 2810, column: 14, scope: !10714)
!11543 = !DILocation(line: 2810, column: 7, scope: !10714)
!11544 = !DILocation(line: 2813, column: 14, scope: !10714)
!11545 = !DILocation(line: 2813, column: 7, scope: !10714)
!11546 = !DILocation(line: 2816, column: 14, scope: !10714)
!11547 = !DILocation(line: 2816, column: 7, scope: !10714)
!11548 = !DILocation(line: 2819, column: 14, scope: !10714)
!11549 = !DILocation(line: 2819, column: 7, scope: !10714)
!11550 = !DILocation(line: 2822, column: 14, scope: !10714)
!11551 = !DILocation(line: 2822, column: 7, scope: !10714)
!11552 = !DILocation(line: 2825, column: 14, scope: !10714)
!11553 = !DILocation(line: 2825, column: 7, scope: !10714)
!11554 = !DILocation(line: 2828, column: 14, scope: !10714)
!11555 = !DILocation(line: 2828, column: 7, scope: !10714)
!11556 = !DILocation(line: 2831, column: 14, scope: !10714)
!11557 = !DILocation(line: 2831, column: 7, scope: !10714)
!11558 = !DILocation(line: 2834, column: 14, scope: !10714)
!11559 = !DILocation(line: 2834, column: 7, scope: !10714)
!11560 = !DILocation(line: 2837, column: 14, scope: !10714)
!11561 = !DILocation(line: 2837, column: 7, scope: !10714)
!11562 = !DILocation(line: 2840, column: 7, scope: !10714)
!11563 = !DILocation(line: 2841, column: 11, scope: !11564)
!11564 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2841, column: 11)
!11565 = !DILocation(line: 2841, column: 26, scope: !11564)
!11566 = !DILocation(line: 2841, column: 11, scope: !10714)
!11567 = !DILocation(line: 2842, column: 8, scope: !11564)
!11568 = !DILocation(line: 2842, column: 6, scope: !11564)
!11569 = !DILocation(line: 2842, column: 2, scope: !11564)
!11570 = !DILocation(line: 2843, column: 11, scope: !11571)
!11571 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2843, column: 11)
!11572 = !DILocation(line: 2843, column: 26, scope: !11571)
!11573 = !DILocation(line: 2843, column: 11, scope: !10714)
!11574 = !DILocation(line: 2844, column: 8, scope: !11571)
!11575 = !DILocation(line: 2844, column: 6, scope: !11571)
!11576 = !DILocation(line: 2844, column: 2, scope: !11571)
!11577 = !DILocation(line: 2845, column: 14, scope: !10714)
!11578 = !DILocation(line: 2845, column: 7, scope: !10714)
!11579 = !DILocation(line: 2848, column: 11, scope: !11580)
!11580 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2848, column: 11)
!11581 = !DILocation(line: 2848, column: 26, scope: !11580)
!11582 = !DILocation(line: 2848, column: 11, scope: !10714)
!11583 = !DILocation(line: 2849, column: 9, scope: !11580)
!11584 = !DILocation(line: 2849, column: 2, scope: !11580)
!11585 = !DILocalVariable(name: "imode", scope: !11586, file: !3, line: 2854, type: !5)
!11586 = distinct !DILexicalBlock(scope: !11580, file: !3, line: 2853, column: 2)
!11587 = !DILocation(line: 2854, column: 22, scope: !11586)
!11588 = !DILocation(line: 2854, column: 30, scope: !11586)
!11589 = !DILocalVariable(name: "re", scope: !11586, file: !3, line: 2855, type: !2207)
!11590 = !DILocation(line: 2855, column: 8, scope: !11586)
!11591 = !DILocalVariable(name: "im", scope: !11586, file: !3, line: 2855, type: !2207)
!11592 = !DILocation(line: 2855, column: 12, scope: !11586)
!11593 = !DILocation(line: 2857, column: 8, scope: !11594)
!11594 = distinct !DILexicalBlock(scope: !11586, file: !3, line: 2857, column: 8)
!11595 = !DILocation(line: 2857, column: 8, scope: !11586)
!11596 = !DILocation(line: 2859, column: 13, scope: !11597)
!11597 = distinct !DILexicalBlock(scope: !11594, file: !3, line: 2858, column: 6)
!11598 = !DILocation(line: 2859, column: 11, scope: !11597)
!11599 = !DILocation(line: 2860, column: 13, scope: !11597)
!11600 = !DILocation(line: 2860, column: 11, scope: !11597)
!11601 = !DILocation(line: 2861, column: 6, scope: !11597)
!11602 = !DILocalVariable(name: "ifmode", scope: !11603, file: !3, line: 2864, type: !5)
!11603 = distinct !DILexicalBlock(scope: !11594, file: !3, line: 2863, column: 6)
!11604 = !DILocation(line: 2864, column: 26, scope: !11603)
!11605 = !DILocation(line: 2864, column: 54, scope: !11603)
!11606 = !DILocation(line: 2864, column: 35, scope: !11603)
!11607 = !DILocalVariable(name: "ihmode", scope: !11603, file: !3, line: 2865, type: !5)
!11608 = !DILocation(line: 2865, column: 26, scope: !11603)
!11609 = !DILocation(line: 2865, column: 54, scope: !11603)
!11610 = !DILocation(line: 2865, column: 35, scope: !11603)
!11611 = !DILocalVariable(name: "halfsize", scope: !11603, file: !3, line: 2866, type: !2207)
!11612 = !DILocation(line: 2866, column: 12, scope: !11603)
!11613 = !DILocation(line: 2867, column: 12, scope: !11614)
!11614 = distinct !DILexicalBlock(scope: !11603, file: !3, line: 2867, column: 12)
!11615 = !DILocation(line: 2867, column: 19, scope: !11614)
!11616 = !DILocation(line: 2867, column: 30, scope: !11614)
!11617 = !DILocation(line: 2867, column: 33, scope: !11614)
!11618 = !DILocation(line: 2867, column: 40, scope: !11614)
!11619 = !DILocation(line: 2867, column: 12, scope: !11603)
!11620 = !DILocation(line: 2868, column: 3, scope: !11614)
!11621 = !DILocation(line: 2869, column: 19, scope: !11603)
!11622 = !DILocation(line: 2869, column: 17, scope: !11603)
!11623 = !DILocation(line: 2870, column: 13, scope: !11603)
!11624 = !DILocation(line: 2870, column: 11, scope: !11603)
!11625 = !DILocation(line: 2871, column: 12, scope: !11626)
!11626 = distinct !DILexicalBlock(scope: !11603, file: !3, line: 2871, column: 12)
!11627 = !DILocation(line: 2871, column: 20, scope: !11626)
!11628 = !DILocation(line: 2871, column: 17, scope: !11626)
!11629 = !DILocation(line: 2871, column: 12, scope: !11603)
!11630 = !DILocation(line: 2872, column: 24, scope: !11626)
!11631 = !DILocation(line: 2872, column: 32, scope: !11626)
!11632 = !DILocation(line: 2872, column: 8, scope: !11626)
!11633 = !DILocation(line: 2872, column: 6, scope: !11626)
!11634 = !DILocation(line: 2872, column: 3, scope: !11626)
!11635 = !DILocation(line: 2873, column: 13, scope: !11603)
!11636 = !DILocation(line: 2873, column: 11, scope: !11603)
!11637 = !DILocation(line: 2874, column: 12, scope: !11638)
!11638 = distinct !DILexicalBlock(scope: !11603, file: !3, line: 2874, column: 12)
!11639 = !DILocation(line: 2874, column: 21, scope: !11638)
!11640 = !DILocation(line: 2874, column: 18, scope: !11638)
!11641 = !DILocation(line: 2874, column: 12, scope: !11603)
!11642 = !DILocation(line: 2875, column: 24, scope: !11638)
!11643 = !DILocation(line: 2875, column: 31, scope: !11638)
!11644 = !DILocation(line: 2875, column: 8, scope: !11638)
!11645 = !DILocation(line: 2875, column: 6, scope: !11638)
!11646 = !DILocation(line: 2875, column: 3, scope: !11638)
!11647 = !DILocation(line: 2876, column: 23, scope: !11603)
!11648 = !DILocation(line: 2876, column: 13, scope: !11603)
!11649 = !DILocation(line: 2876, column: 11, scope: !11603)
!11650 = !DILocation(line: 2877, column: 12, scope: !11651)
!11651 = distinct !DILexicalBlock(scope: !11603, file: !3, line: 2877, column: 12)
!11652 = !DILocation(line: 2877, column: 20, scope: !11651)
!11653 = !DILocation(line: 2877, column: 17, scope: !11651)
!11654 = !DILocation(line: 2877, column: 12, scope: !11603)
!11655 = !DILocation(line: 2878, column: 24, scope: !11651)
!11656 = !DILocation(line: 2878, column: 32, scope: !11651)
!11657 = !DILocation(line: 2878, column: 8, scope: !11651)
!11658 = !DILocation(line: 2878, column: 6, scope: !11651)
!11659 = !DILocation(line: 2878, column: 3, scope: !11651)
!11660 = !DILocation(line: 2879, column: 13, scope: !11603)
!11661 = !DILocation(line: 2879, column: 11, scope: !11603)
!11662 = !DILocation(line: 2880, column: 12, scope: !11663)
!11663 = distinct !DILexicalBlock(scope: !11603, file: !3, line: 2880, column: 12)
!11664 = !DILocation(line: 2880, column: 21, scope: !11663)
!11665 = !DILocation(line: 2880, column: 18, scope: !11663)
!11666 = !DILocation(line: 2880, column: 12, scope: !11603)
!11667 = !DILocation(line: 2881, column: 24, scope: !11663)
!11668 = !DILocation(line: 2881, column: 31, scope: !11663)
!11669 = !DILocation(line: 2881, column: 8, scope: !11663)
!11670 = !DILocation(line: 2881, column: 6, scope: !11663)
!11671 = !DILocation(line: 2881, column: 3, scope: !11663)
!11672 = !DILocation(line: 2883, column: 9, scope: !11586)
!11673 = !DILocation(line: 2883, column: 7, scope: !11586)
!11674 = !DILocation(line: 2884, column: 11, scope: !11586)
!11675 = !DILocation(line: 2884, column: 4, scope: !11586)
!11676 = !DILocation(line: 2888, column: 32, scope: !10714)
!11677 = !DILocation(line: 2888, column: 13, scope: !10714)
!11678 = !DILocation(line: 2888, column: 11, scope: !10714)
!11679 = !DILocation(line: 2889, column: 12, scope: !11680)
!11680 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2889, column: 11)
!11681 = !DILocation(line: 2889, column: 16, scope: !11680)
!11682 = !DILocation(line: 2889, column: 20, scope: !11680)
!11683 = !DILocation(line: 2889, column: 11, scope: !10714)
!11684 = !DILocation(line: 2890, column: 2, scope: !11680)
!11685 = !DILocation(line: 2892, column: 43, scope: !10714)
!11686 = !DILocation(line: 2892, column: 49, scope: !10714)
!11687 = !DILocation(line: 2892, column: 13, scope: !10714)
!11688 = !DILocation(line: 2892, column: 11, scope: !10714)
!11689 = !DILocation(line: 2894, column: 14, scope: !10714)
!11690 = !DILocation(line: 2894, column: 7, scope: !10714)
!11691 = !DILocation(line: 2897, column: 42, scope: !10714)
!11692 = !DILocation(line: 2898, column: 7, scope: !10714)
!11693 = !DILocation(line: 2897, column: 13, scope: !10714)
!11694 = !DILocation(line: 2897, column: 11, scope: !10714)
!11695 = !DILocation(line: 2897, column: 7, scope: !10714)
!11696 = !DILocation(line: 2902, column: 11, scope: !11697)
!11697 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2902, column: 11)
!11698 = !DILocation(line: 2902, column: 39, scope: !11697)
!11699 = !DILocation(line: 2902, column: 11, scope: !10714)
!11700 = !DILocalVariable(name: "i", scope: !11701, file: !3, line: 2904, type: !7)
!11701 = distinct !DILexicalBlock(scope: !11697, file: !3, line: 2903, column: 2)
!11702 = !DILocation(line: 2904, column: 13, scope: !11701)
!11703 = !DILocalVariable(name: "val", scope: !11701, file: !3, line: 2905, type: !2326)
!11704 = !DILocation(line: 2905, column: 9, scope: !11701)
!11705 = !DILocation(line: 2907, column: 10, scope: !11701)
!11706 = !DILocation(line: 2907, column: 8, scope: !11701)
!11707 = !DILocation(line: 2910, column: 4, scope: !11708)
!11708 = distinct !DILexicalBlock(scope: !11701, file: !3, line: 2910, column: 4)
!11709 = !DILocation(line: 2910, column: 4, scope: !11710)
!11710 = distinct !DILexicalBlock(scope: !11708, file: !3, line: 2910, column: 4)
!11711 = !DILocation(line: 2912, column: 33, scope: !11712)
!11712 = distinct !DILexicalBlock(scope: !11710, file: !3, line: 2911, column: 6)
!11713 = !DILocation(line: 2912, column: 14, scope: !11712)
!11714 = !DILocation(line: 2912, column: 12, scope: !11712)
!11715 = !DILocation(line: 2913, column: 13, scope: !11716)
!11716 = distinct !DILexicalBlock(scope: !11712, file: !3, line: 2913, column: 12)
!11717 = !DILocation(line: 2913, column: 12, scope: !11712)
!11718 = !DILocation(line: 2914, column: 3, scope: !11716)
!11719 = !DILocation(line: 2915, column: 30, scope: !11712)
!11720 = !DILocation(line: 2915, column: 8, scope: !11712)
!11721 = !DILocation(line: 2915, column: 28, scope: !11712)
!11722 = !DILocation(line: 2916, column: 6, scope: !11712)
!11723 = distinct !{!11723, !11707, !11724}
!11724 = !DILocation(line: 2916, column: 6, scope: !11708)
!11725 = !DILocation(line: 2918, column: 8, scope: !11726)
!11726 = distinct !DILexicalBlock(scope: !11701, file: !3, line: 2918, column: 8)
!11727 = !DILocation(line: 2918, column: 12, scope: !11726)
!11728 = !DILocation(line: 2918, column: 10, scope: !11726)
!11729 = !DILocation(line: 2918, column: 8, scope: !11701)
!11730 = !DILocation(line: 2921, column: 4, scope: !11731)
!11731 = distinct !DILexicalBlock(scope: !11726, file: !3, line: 2919, column: 6)
!11732 = !DILocation(line: 2920, column: 14, scope: !11731)
!11733 = !DILocation(line: 2920, column: 12, scope: !11731)
!11734 = !DILocation(line: 2923, column: 13, scope: !11735)
!11735 = distinct !DILexicalBlock(scope: !11731, file: !3, line: 2923, column: 12)
!11736 = !DILocation(line: 2923, column: 12, scope: !11731)
!11737 = !DILocation(line: 2924, column: 3, scope: !11735)
!11738 = !DILocation(line: 2926, column: 8, scope: !11731)
!11739 = !DILocation(line: 2926, column: 15, scope: !11740)
!11740 = distinct !DILexicalBlock(scope: !11741, file: !3, line: 2926, column: 8)
!11741 = distinct !DILexicalBlock(scope: !11731, file: !3, line: 2926, column: 8)
!11742 = !DILocation(line: 2926, column: 19, scope: !11740)
!11743 = !DILocation(line: 2926, column: 17, scope: !11740)
!11744 = !DILocation(line: 2926, column: 8, scope: !11741)
!11745 = !DILocation(line: 2927, column: 25, scope: !11740)
!11746 = !DILocation(line: 2927, column: 3, scope: !11740)
!11747 = !DILocation(line: 2927, column: 23, scope: !11740)
!11748 = !DILocation(line: 2926, column: 60, scope: !11740)
!11749 = !DILocation(line: 2926, column: 8, scope: !11740)
!11750 = distinct !{!11750, !11744, !11751}
!11751 = !DILocation(line: 2927, column: 25, scope: !11741)
!11752 = !DILocation(line: 2928, column: 6, scope: !11731)
!11753 = !DILocation(line: 2930, column: 11, scope: !11701)
!11754 = !DILocation(line: 2930, column: 4, scope: !11701)
!11755 = !DILocation(line: 2933, column: 2, scope: !11697)
!11756 = !DILocation(line: 2937, column: 7, scope: !10714)
!11757 = !DILocalVariable(name: "g", scope: !11758, file: !3, line: 2941, type: !2201)
!11758 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2940, column: 7)
!11759 = !DILocation(line: 2941, column: 9, scope: !11758)
!11760 = !DILocation(line: 2941, column: 38, scope: !11758)
!11761 = !DILocation(line: 2941, column: 13, scope: !11758)
!11762 = !DILocation(line: 2942, column: 6, scope: !11763)
!11763 = distinct !DILexicalBlock(scope: !11758, file: !3, line: 2942, column: 6)
!11764 = !DILocation(line: 2942, column: 6, scope: !11758)
!11765 = !DILocation(line: 2944, column: 58, scope: !11766)
!11766 = distinct !DILexicalBlock(scope: !11763, file: !3, line: 2943, column: 4)
!11767 = !DILocation(line: 2944, column: 31, scope: !11766)
!11768 = !DILocation(line: 2944, column: 12, scope: !11766)
!11769 = !DILocation(line: 2944, column: 10, scope: !11766)
!11770 = !DILocation(line: 2945, column: 11, scope: !11771)
!11771 = distinct !DILexicalBlock(scope: !11766, file: !3, line: 2945, column: 10)
!11772 = !DILocation(line: 2945, column: 10, scope: !11766)
!11773 = !DILocation(line: 2946, column: 8, scope: !11771)
!11774 = !DILocation(line: 2947, column: 4, scope: !11766)
!11775 = !DILocalVariable(name: "part", scope: !11776, file: !3, line: 2950, type: !2136)
!11776 = distinct !DILexicalBlock(scope: !11763, file: !3, line: 2949, column: 4)
!11777 = !DILocation(line: 2950, column: 10, scope: !11776)
!11778 = !DILocation(line: 2950, column: 38, scope: !11776)
!11779 = !DILocation(line: 2950, column: 43, scope: !11776)
!11780 = !DILocation(line: 2950, column: 17, scope: !11776)
!11781 = !DILocation(line: 2952, column: 10, scope: !11782)
!11782 = distinct !DILexicalBlock(scope: !11776, file: !3, line: 2952, column: 10)
!11783 = !DILocation(line: 2952, column: 15, scope: !11782)
!11784 = !DILocation(line: 2952, column: 10, scope: !11776)
!11785 = !DILocation(line: 2953, column: 8, scope: !11782)
!11786 = !DILocation(line: 2955, column: 6, scope: !11776)
!11787 = !DILocation(line: 2957, column: 15, scope: !11776)
!11788 = !DILocation(line: 2957, column: 35, scope: !11776)
!11789 = !DILocation(line: 2957, column: 12, scope: !11776)
!11790 = !DILocation(line: 2957, column: 10, scope: !11776)
!11791 = !DILocation(line: 2959, column: 2, scope: !11758)
!11792 = !DILocation(line: 2963, column: 7, scope: !10714)
!11793 = !DILocation(line: 2986, column: 7, scope: !10714)
!11794 = !DILocation(line: 2993, column: 7, scope: !10714)
!11795 = !DILocation(line: 2996, column: 11, scope: !11796)
!11796 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 2996, column: 11)
!11797 = !DILocation(line: 2997, column: 4, scope: !11796)
!11798 = !DILocation(line: 2997, column: 7, scope: !11796)
!11799 = !DILocation(line: 2996, column: 11, scope: !10714)
!11800 = !DILocation(line: 2999, column: 8, scope: !11801)
!11801 = distinct !DILexicalBlock(scope: !11802, file: !3, line: 2999, column: 8)
!11802 = distinct !DILexicalBlock(scope: !11796, file: !3, line: 2998, column: 2)
!11803 = !DILocation(line: 2999, column: 8, scope: !11802)
!11804 = !DILocation(line: 3000, column: 12, scope: !11801)
!11805 = !DILocation(line: 3000, column: 10, scope: !11801)
!11806 = !DILocation(line: 3000, column: 6, scope: !11801)
!11807 = !DILocation(line: 3002, column: 12, scope: !11801)
!11808 = !DILocation(line: 3002, column: 10, scope: !11801)
!11809 = !DILocation(line: 3003, column: 8, scope: !11810)
!11810 = distinct !DILexicalBlock(scope: !11802, file: !3, line: 3003, column: 8)
!11811 = !DILocation(line: 3003, column: 8, scope: !11802)
!11812 = !DILocation(line: 3004, column: 12, scope: !11810)
!11813 = !DILocation(line: 3004, column: 10, scope: !11810)
!11814 = !DILocation(line: 3004, column: 6, scope: !11810)
!11815 = !DILocation(line: 3006, column: 12, scope: !11810)
!11816 = !DILocation(line: 3006, column: 10, scope: !11810)
!11817 = !DILocation(line: 3007, column: 10, scope: !11802)
!11818 = !DILocation(line: 3007, column: 8, scope: !11802)
!11819 = !DILocation(line: 3008, column: 11, scope: !11802)
!11820 = !DILocation(line: 3008, column: 4, scope: !11802)
!11821 = !DILocation(line: 3010, column: 7, scope: !10714)
!11822 = !DILocation(line: 3013, column: 11, scope: !11823)
!11823 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 3013, column: 11)
!11824 = !DILocation(line: 3014, column: 4, scope: !11823)
!11825 = !DILocation(line: 3014, column: 7, scope: !11823)
!11826 = !DILocation(line: 3013, column: 11, scope: !10714)
!11827 = !DILocation(line: 3016, column: 8, scope: !11828)
!11828 = distinct !DILexicalBlock(scope: !11829, file: !3, line: 3016, column: 8)
!11829 = distinct !DILexicalBlock(scope: !11823, file: !3, line: 3015, column: 2)
!11830 = !DILocation(line: 3016, column: 8, scope: !11829)
!11831 = !DILocation(line: 3017, column: 12, scope: !11828)
!11832 = !DILocation(line: 3017, column: 10, scope: !11828)
!11833 = !DILocation(line: 3017, column: 6, scope: !11828)
!11834 = !DILocation(line: 3019, column: 12, scope: !11828)
!11835 = !DILocation(line: 3019, column: 10, scope: !11828)
!11836 = !DILocation(line: 3020, column: 8, scope: !11837)
!11837 = distinct !DILexicalBlock(scope: !11829, file: !3, line: 3020, column: 8)
!11838 = !DILocation(line: 3020, column: 8, scope: !11829)
!11839 = !DILocation(line: 3021, column: 12, scope: !11837)
!11840 = !DILocation(line: 3021, column: 10, scope: !11837)
!11841 = !DILocation(line: 3021, column: 6, scope: !11837)
!11842 = !DILocation(line: 3023, column: 12, scope: !11837)
!11843 = !DILocation(line: 3023, column: 10, scope: !11837)
!11844 = !DILocation(line: 3024, column: 11, scope: !11829)
!11845 = !DILocation(line: 3024, column: 4, scope: !11829)
!11846 = !DILocation(line: 3026, column: 7, scope: !10714)
!11847 = !DILocation(line: 3029, column: 11, scope: !11848)
!11848 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 3029, column: 11)
!11849 = !DILocation(line: 3030, column: 4, scope: !11848)
!11850 = !DILocation(line: 3030, column: 7, scope: !11848)
!11851 = !DILocation(line: 3029, column: 11, scope: !10714)
!11852 = !DILocation(line: 3032, column: 8, scope: !11853)
!11853 = distinct !DILexicalBlock(scope: !11854, file: !3, line: 3032, column: 8)
!11854 = distinct !DILexicalBlock(scope: !11848, file: !3, line: 3031, column: 2)
!11855 = !DILocation(line: 3032, column: 8, scope: !11854)
!11856 = !DILocation(line: 3033, column: 12, scope: !11853)
!11857 = !DILocation(line: 3033, column: 10, scope: !11853)
!11858 = !DILocation(line: 3033, column: 6, scope: !11853)
!11859 = !DILocation(line: 3035, column: 12, scope: !11853)
!11860 = !DILocation(line: 3035, column: 10, scope: !11853)
!11861 = !DILocation(line: 3036, column: 11, scope: !11854)
!11862 = !DILocation(line: 3036, column: 4, scope: !11854)
!11863 = !DILocation(line: 3038, column: 7, scope: !10714)
!11864 = !DILabel(scope: !10714, name: "flag_unsupported", file: !3, line: 3041)
!11865 = !DILocation(line: 3041, column: 5, scope: !10714)
!11866 = !DILocation(line: 3046, column: 7, scope: !10714)
!11867 = !DILocation(line: 3049, column: 1, scope: !10647)
!11868 = distinct !DISubprogram(name: "floor_sdiv_adjust", scope: !3, file: !3, line: 2117, type: !11869, scopeLine: 2118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!11869 = !DISubroutineType(types: !11870)
!11870 = !{!2207, !5, !2207, !2207}
!11871 = !DILocalVariable(name: "mode", arg: 1, scope: !11868, file: !3, line: 2117, type: !5)
!11872 = !DILocation(line: 2117, column: 38, scope: !11868)
!11873 = !DILocalVariable(name: "mod", arg: 2, scope: !11868, file: !3, line: 2117, type: !2207)
!11874 = !DILocation(line: 2117, column: 48, scope: !11868)
!11875 = !DILocalVariable(name: "op1", arg: 3, scope: !11868, file: !3, line: 2117, type: !2207)
!11876 = !DILocation(line: 2117, column: 57, scope: !11868)
!11877 = !DILocation(line: 2120, column: 10, scope: !11868)
!11878 = !DILocation(line: 2120, column: 3, scope: !11868)
!11879 = distinct !DISubprogram(name: "ceil_udiv_adjust", scope: !3, file: !3, line: 2149, type: !11869, scopeLine: 2150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!11880 = !DILocalVariable(name: "mode", arg: 1, scope: !11879, file: !3, line: 2149, type: !5)
!11881 = !DILocation(line: 2149, column: 37, scope: !11879)
!11882 = !DILocalVariable(name: "mod", arg: 2, scope: !11879, file: !3, line: 2149, type: !2207)
!11883 = !DILocation(line: 2149, column: 47, scope: !11879)
!11884 = !DILocalVariable(name: "op1", arg: 3, scope: !11879, file: !3, line: 2149, type: !2207)
!11885 = !DILocation(line: 2149, column: 56, scope: !11879)
!11886 = !DILocation(line: 2152, column: 10, scope: !11879)
!11887 = !DILocation(line: 2152, column: 3, scope: !11879)
!11888 = distinct !DISubprogram(name: "ceil_sdiv_adjust", scope: !3, file: !3, line: 2133, type: !11869, scopeLine: 2134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!11889 = !DILocalVariable(name: "mode", arg: 1, scope: !11888, file: !3, line: 2133, type: !5)
!11890 = !DILocation(line: 2133, column: 37, scope: !11888)
!11891 = !DILocalVariable(name: "mod", arg: 2, scope: !11888, file: !3, line: 2133, type: !2207)
!11892 = !DILocation(line: 2133, column: 47, scope: !11888)
!11893 = !DILocalVariable(name: "op1", arg: 3, scope: !11888, file: !3, line: 2133, type: !2207)
!11894 = !DILocation(line: 2133, column: 56, scope: !11888)
!11895 = !DILocation(line: 2136, column: 10, scope: !11888)
!11896 = !DILocation(line: 2136, column: 3, scope: !11888)
!11897 = distinct !DISubprogram(name: "round_udiv_adjust", scope: !3, file: !3, line: 2184, type: !11869, scopeLine: 2185, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!11898 = !DILocalVariable(name: "mode", arg: 1, scope: !11897, file: !3, line: 2184, type: !5)
!11899 = !DILocation(line: 2184, column: 38, scope: !11897)
!11900 = !DILocalVariable(name: "mod", arg: 2, scope: !11897, file: !3, line: 2184, type: !2207)
!11901 = !DILocation(line: 2184, column: 48, scope: !11897)
!11902 = !DILocalVariable(name: "op1", arg: 3, scope: !11897, file: !3, line: 2184, type: !2207)
!11903 = !DILocation(line: 2184, column: 57, scope: !11897)
!11904 = !DILocation(line: 2187, column: 10, scope: !11897)
!11905 = !DILocation(line: 2187, column: 3, scope: !11897)
!11906 = distinct !DISubprogram(name: "round_sdiv_adjust", scope: !3, file: !3, line: 2161, type: !11869, scopeLine: 2162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!11907 = !DILocalVariable(name: "mode", arg: 1, scope: !11906, file: !3, line: 2161, type: !5)
!11908 = !DILocation(line: 2161, column: 38, scope: !11906)
!11909 = !DILocalVariable(name: "mod", arg: 2, scope: !11906, file: !3, line: 2161, type: !2207)
!11910 = !DILocation(line: 2161, column: 48, scope: !11906)
!11911 = !DILocalVariable(name: "op1", arg: 3, scope: !11906, file: !3, line: 2161, type: !2207)
!11912 = !DILocation(line: 2161, column: 57, scope: !11906)
!11913 = !DILocation(line: 2166, column: 10, scope: !11906)
!11914 = !DILocation(line: 2166, column: 3, scope: !11906)
!11915 = distinct !DISubprogram(name: "convert_debug_memory_address", scope: !3, file: !3, line: 2197, type: !11916, scopeLine: 2198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!11916 = !DISubroutineType(types: !11917)
!11917 = !{!2207, !5, !2207}
!11918 = !DILocalVariable(name: "mode", arg: 1, scope: !11915, file: !3, line: 2197, type: !5)
!11919 = !DILocation(line: 2197, column: 49, scope: !11915)
!11920 = !DILocalVariable(name: "x", arg: 2, scope: !11915, file: !3, line: 2197, type: !2207)
!11921 = !DILocation(line: 2197, column: 59, scope: !11915)
!11922 = !DILocalVariable(name: "xmode", scope: !11915, file: !3, line: 2199, type: !5)
!11923 = !DILocation(line: 2199, column: 21, scope: !11915)
!11924 = !DILocation(line: 2199, column: 29, scope: !11915)
!11925 = !DILocation(line: 2202, column: 3, scope: !11915)
!11926 = !DILocation(line: 2203, column: 3, scope: !11915)
!11927 = !DILocation(line: 2222, column: 10, scope: !11915)
!11928 = !DILocation(line: 2222, column: 3, scope: !11915)
!11929 = distinct !DISubprogram(name: "VEC_constructor_elt_base_length", scope: !135, file: !135, line: 1537, type: !11930, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!11930 = !DISubroutineType(types: !11931)
!11931 = !{!7, !11932}
!11932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11933, size: 64)
!11933 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3066)
!11934 = !DILocalVariable(name: "vec_", arg: 1, scope: !11929, file: !135, line: 1537, type: !11932)
!11935 = !DILocation(line: 1537, column: 1, scope: !11929)
!11936 = distinct !DISubprogram(name: "VEC_constructor_elt_base_index", scope: !135, file: !135, line: 1537, type: !11937, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3650)
!11937 = !DISubroutineType(types: !11938)
!11938 = !{!11939, !11940, !7}
!11939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3073, size: 64)
!11940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3066, size: 64)
!11941 = !DILocalVariable(name: "vec_", arg: 1, scope: !11936, file: !135, line: 1537, type: !11940)
!11942 = !DILocation(line: 1537, column: 1, scope: !11936)
!11943 = !DILocalVariable(name: "ix_", arg: 2, scope: !11936, file: !135, line: 1537, type: !7)
!11944 = !DILocation(line: 0, scope: !11936)
