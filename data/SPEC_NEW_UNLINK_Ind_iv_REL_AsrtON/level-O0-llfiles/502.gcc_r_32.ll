; ModuleID = 'cfgcleanup.c'
source_filename = "cfgcleanup.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type opaque
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.replace_label_data = type { %struct.rtx_def*, %struct.rtx_def*, i8 }
%struct.mem_attrs = type { %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i8 }

@flag_var_tracking_assignments = external dso_local global i32, align 4
@cfun = external dso_local global %struct.function*, align 8
@.str = private unnamed_addr constant [13 x i8] c"cfgcleanup.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [27 x i8] c"Dead jumptable %i removed\0A\00", align 1
@timevar_enable = external dso_local global i8, align 1
@reload_completed = external dso_local global i32, align 4
@crossjumps_occured = internal global i8 0, align 1, !dbg !0
@.str.3 = private unnamed_addr constant [8 x i8] c"sibling\00", align 1
@pass_jump = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i32 0, i32 0), i8 ()* null, i32 ()* @rest_of_handle_jump, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 119, i32 0, i32 0, i32 0, i32 2, i32 8 } }, align 8, !dbg !2132
@.str.4 = private unnamed_addr constant [5 x i8] c"jump\00", align 1
@pass_jump2 = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i8 ()* null, i32 ()* @rest_of_handle_jump2, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 119, i32 0, i32 0, i32 0, i32 2, i32 1025 } }, align 8, !dbg !2160
@targetm = external dso_local global %struct.gcc_target, align 8
@first_pass = internal global i8 0, align 1, !dbg !2162
@.str.5 = private unnamed_addr constant [34 x i8] c"\0A\0Atry_optimize_cfg iteration %i\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"Deleted label in block %i.\0A\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"Deleting fallthru block %i.\0A\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.9 = private unnamed_addr constant [34 x i8] c"Merged %d and %d without moving.\0A\00", align 1
@.str.10 = private unnamed_addr constant [37 x i8] c"Moved block %d after %d and merged.\0A\00", align 1
@.str.11 = private unnamed_addr constant [38 x i8] c"Moved block %d before %d and merged.\0A\00", align 1
@.str.12 = private unnamed_addr constant [40 x i8] c"Simplifying condjump %i around jump %i\0A\00", align 1
@optimize = external dso_local global i32, align 4
@.str.13 = private unnamed_addr constant [25 x i8] c"Infinite loop in BB %i.\0A\00", align 1
@.str.14 = private unnamed_addr constant [24 x i8] c"Conditionals threaded.\0A\00", align 1
@.str.15 = private unnamed_addr constant [38 x i8] c"Forwarding edge %i->%i to %i failed.\0A\00", align 1
@global_rtl = external dso_local global [11 x %struct.rtx_def*], align 16
@hard_regno_nregs = external dso_local global [53 x [87 x i8]], align 16
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@compiler_params = external dso_local global %struct.param_info*, align 8
@flag_reorder_blocks_and_partition = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [33 x i8] c"Splitting bb %i before %i insns\0A\00", align 1
@.str.17 = private unnamed_addr constant [52 x i8] c"Cross jumping from bb %i to bb %i; %i common insns\0A\00", align 1
@.str.18 = private unnamed_addr constant [60 x i8] c"Outcomes of branch in bb %i and %i differ too much (%i %i)\0A\00", align 1
@.str.19 = private unnamed_addr constant [37 x i8] c"Conditionals in bb %i and %i match.\0A\00", align 1
@.str.20 = private unnamed_addr constant [35 x i8] c"Tablejumps in bb %i and %i match.\0A\00", align 1
@mode_size = external dso_local global [87 x i8], align 16
@rtx_format = external dso_local constant [139 x i8*], align 16
@rtx_length = external dso_local constant [139 x i8], align 16
@x_rtl = external dso_local global %struct.rtl_data, align 8
@dump_flags = external dso_local global i32, align 4
@flag_thread_jumps = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @delete_unreachable_blocks() #0 !dbg !2168 {
entry:
  %changed = alloca i8, align 1
  %b = alloca %struct.basic_block_def*, align 8
  %prev_bb = alloca %struct.basic_block_def*, align 8
  %h = alloca %struct.VEC_basic_block_heap*, align 8
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !2170, metadata !DIExpression()), !dbg !2171
  store i8 0, i8* %changed, align 1, !dbg !2171
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b, metadata !2172, metadata !DIExpression()), !dbg !2173
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %prev_bb, metadata !2174, metadata !DIExpression()), !dbg !2175
  call void @find_unreachable_blocks(), !dbg !2176
  %0 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !2177
  %tobool = icmp ne i32 %0, 0, !dbg !2177
  br i1 %tobool, label %land.lhs.true, label %if.else35, !dbg !2179

land.lhs.true:                                    ; preds = %entry
  %call = call i32 @current_ir_type(), !dbg !2180
  %cmp = icmp eq i32 %call, 0, !dbg !2181
  br i1 %cmp, label %land.lhs.true1, label %if.else35, !dbg !2182

land.lhs.true1:                                   ; preds = %land.lhs.true
  %call2 = call zeroext i8 @dom_info_available_p(i32 1), !dbg !2183
  %conv = zext i8 %call2 to i32, !dbg !2183
  %tobool3 = icmp ne i32 %conv, 0, !dbg !2183
  br i1 %tobool3, label %if.then, label %if.else35, !dbg !2184

if.then:                                          ; preds = %land.lhs.true1
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2185
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2185
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2185
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2185
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 1, !dbg !2185
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2185
  %prev_bb4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 5, !dbg !2188
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb4, align 8, !dbg !2188
  store %struct.basic_block_def* %4, %struct.basic_block_def** %b, align 8, !dbg !2189
  br label %for.cond, !dbg !2190

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2191
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2193
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !2193
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !2193
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !2193
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 0, !dbg !2193
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2193
  %cmp7 = icmp ne %struct.basic_block_def* %5, %8, !dbg !2194
  br i1 %cmp7, label %for.body, label %for.end, !dbg !2195

for.body:                                         ; preds = %for.cond
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2196
  %prev_bb9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 5, !dbg !2198
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb9, align 8, !dbg !2198
  store %struct.basic_block_def* %10, %struct.basic_block_def** %prev_bb, align 8, !dbg !2199
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2200
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 13, !dbg !2202
  %12 = load i32, i32* %flags, align 8, !dbg !2202
  %and = and i32 %12, 2, !dbg !2203
  %tobool10 = icmp ne i32 %and, 0, !dbg !2203
  br i1 %tobool10, label %if.end34, label %if.then11, !dbg !2204

if.then11:                                        ; preds = %for.body
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2205
  %call12 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %13), !dbg !2208
  %tobool13 = icmp ne %struct.basic_block_def* %call12, null, !dbg !2208
  br i1 %tobool13, label %if.else, label %if.then14, !dbg !2209

if.then14:                                        ; preds = %if.then11
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2210
  call void @delete_basic_block(%struct.basic_block_def* %14), !dbg !2211
  br label %if.end, !dbg !2211

if.else:                                          ; preds = %if.then11
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %h, metadata !2212, metadata !DIExpression()), !dbg !2219
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2220
  %call15 = call %struct.VEC_basic_block_heap* @get_all_dominated_blocks(i32 1, %struct.basic_block_def* %15), !dbg !2221
  store %struct.VEC_basic_block_heap* %call15, %struct.VEC_basic_block_heap** %h, align 8, !dbg !2219
  br label %while.cond, !dbg !2222

while.cond:                                       ; preds = %cond.end32, %if.else
  %16 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !2223
  %tobool16 = icmp ne %struct.VEC_basic_block_heap* %16, null, !dbg !2223
  br i1 %tobool16, label %cond.true, label %cond.false, !dbg !2223

cond.true:                                        ; preds = %while.cond
  %17 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !2223
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %17, i32 0, i32 0, !dbg !2223
  br label %cond.end, !dbg !2223

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !2223

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2223
  %call17 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !2223
  %tobool18 = icmp ne i32 %call17, 0, !dbg !2222
  br i1 %tobool18, label %while.body, label %while.end, !dbg !2222

while.body:                                       ; preds = %cond.end
  %18 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !2224
  %tobool19 = icmp ne %struct.VEC_basic_block_heap* %18, null, !dbg !2224
  br i1 %tobool19, label %cond.true20, label %cond.false22, !dbg !2224

cond.true20:                                      ; preds = %while.body
  %19 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %h, align 8, !dbg !2224
  %base21 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %19, i32 0, i32 0, !dbg !2224
  br label %cond.end23, !dbg !2224

cond.false22:                                     ; preds = %while.body
  br label %cond.end23, !dbg !2224

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi %struct.VEC_basic_block_base* [ %base21, %cond.true20 ], [ null, %cond.false22 ], !dbg !2224
  %call25 = call %struct.basic_block_def* @VEC_basic_block_base_pop(%struct.VEC_basic_block_base* %cond24), !dbg !2224
  store %struct.basic_block_def* %call25, %struct.basic_block_def** %b, align 8, !dbg !2226
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2227
  %prev_bb26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 5, !dbg !2228
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb26, align 8, !dbg !2228
  store %struct.basic_block_def* %21, %struct.basic_block_def** %prev_bb, align 8, !dbg !2229
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2230
  %flags27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 13, !dbg !2230
  %23 = load i32, i32* %flags27, align 8, !dbg !2230
  %and28 = and i32 %23, 2, !dbg !2230
  %tobool29 = icmp ne i32 %and28, 0, !dbg !2230
  br i1 %tobool29, label %cond.true30, label %cond.false31, !dbg !2230

cond.true30:                                      ; preds = %cond.end23
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 2095, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2230
  br label %cond.end32, !dbg !2230

cond.false31:                                     ; preds = %cond.end23
  br label %cond.end32, !dbg !2230

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !2230
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2231
  call void @delete_basic_block(%struct.basic_block_def* %24), !dbg !2232
  br label %while.cond, !dbg !2222, !llvm.loop !2233

while.end:                                        ; preds = %cond.end
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %h), !dbg !2235
  br label %if.end

if.end:                                           ; preds = %while.end, %if.then14
  store i8 1, i8* %changed, align 1, !dbg !2236
  br label %if.end34, !dbg !2237

if.end34:                                         ; preds = %if.end, %for.body
  br label %for.inc, !dbg !2238

for.inc:                                          ; preds = %if.end34
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !2239
  store %struct.basic_block_def* %25, %struct.basic_block_def** %b, align 8, !dbg !2240
  br label %for.cond, !dbg !2241, !llvm.loop !2242

for.end:                                          ; preds = %for.cond
  br label %if.end55, !dbg !2244

if.else35:                                        ; preds = %land.lhs.true1, %land.lhs.true, %entry
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2245
  %add.ptr36 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !2245
  %cfg37 = getelementptr inbounds %struct.function, %struct.function* %add.ptr36, i32 0, i32 1, !dbg !2245
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg37, align 8, !dbg !2245
  %x_exit_block_ptr38 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i32 0, i32 1, !dbg !2245
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr38, align 8, !dbg !2245
  %prev_bb39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 5, !dbg !2248
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb39, align 8, !dbg !2248
  store %struct.basic_block_def* %29, %struct.basic_block_def** %b, align 8, !dbg !2249
  br label %for.cond40, !dbg !2250

for.cond40:                                       ; preds = %for.inc53, %if.else35
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2251
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2253
  %add.ptr41 = getelementptr inbounds %struct.function, %struct.function* %31, i64 0, !dbg !2253
  %cfg42 = getelementptr inbounds %struct.function, %struct.function* %add.ptr41, i32 0, i32 1, !dbg !2253
  %32 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg42, align 8, !dbg !2253
  %x_entry_block_ptr43 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %32, i32 0, i32 0, !dbg !2253
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr43, align 8, !dbg !2253
  %cmp44 = icmp ne %struct.basic_block_def* %30, %33, !dbg !2254
  br i1 %cmp44, label %for.body46, label %for.end54, !dbg !2255

for.body46:                                       ; preds = %for.cond40
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2256
  %prev_bb47 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 5, !dbg !2258
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb47, align 8, !dbg !2258
  store %struct.basic_block_def* %35, %struct.basic_block_def** %prev_bb, align 8, !dbg !2259
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2260
  %flags48 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 13, !dbg !2262
  %37 = load i32, i32* %flags48, align 8, !dbg !2262
  %and49 = and i32 %37, 2, !dbg !2263
  %tobool50 = icmp ne i32 %and49, 0, !dbg !2263
  br i1 %tobool50, label %if.end52, label %if.then51, !dbg !2264

if.then51:                                        ; preds = %for.body46
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2265
  call void @delete_basic_block(%struct.basic_block_def* %38), !dbg !2267
  store i8 1, i8* %changed, align 1, !dbg !2268
  br label %if.end52, !dbg !2269

if.end52:                                         ; preds = %if.then51, %for.body46
  br label %for.inc53, !dbg !2270

for.inc53:                                        ; preds = %if.end52
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !2271
  store %struct.basic_block_def* %39, %struct.basic_block_def** %b, align 8, !dbg !2272
  br label %for.cond40, !dbg !2273, !llvm.loop !2274

for.end54:                                        ; preds = %for.cond40
  br label %if.end55

if.end55:                                         ; preds = %for.end54, %for.end
  %40 = load i8, i8* %changed, align 1, !dbg !2276
  %tobool56 = icmp ne i8 %40, 0, !dbg !2276
  br i1 %tobool56, label %if.then57, label %if.end58, !dbg !2278

if.then57:                                        ; preds = %if.end55
  call void @tidy_fallthru_edges(), !dbg !2279
  br label %if.end58, !dbg !2279

if.end58:                                         ; preds = %if.then57, %if.end55
  %41 = load i8, i8* %changed, align 1, !dbg !2280
  ret i8 %41, !dbg !2281
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local void @find_unreachable_blocks() #2

declare dso_local i32 @current_ir_type() #2

declare dso_local zeroext i8 @dom_info_available_p(i32) #2

declare dso_local %struct.basic_block_def* @first_dom_son(i32, %struct.basic_block_def*) #2

declare dso_local void @delete_basic_block(%struct.basic_block_def*) #2

declare dso_local %struct.VEC_basic_block_heap* @get_all_dominated_blocks(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %vec_) #0 !dbg !2282 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !2287, metadata !DIExpression()), !dbg !2288
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2288
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !2288
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2288

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2288
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !2288
  %2 = load i32, i32* %num, align 8, !dbg !2288
  br label %cond.end, !dbg !2288

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2288

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2288
  ret i32 %cond, !dbg !2288
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_pop(%struct.VEC_basic_block_base* %vec_) #0 !dbg !2289 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_ = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !2293, metadata !DIExpression()), !dbg !2294
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_, metadata !2295, metadata !DIExpression()), !dbg !2294
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2294
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !2294
  %1 = load i32, i32* %num, align 8, !dbg !2294
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2294
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 2, !dbg !2294
  %3 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !2294
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %3, i32 0, i32 0, !dbg !2294
  %4 = load i32, i32* %num1, align 8, !dbg !2294
  %dec = add i32 %4, -1, !dbg !2294
  store i32 %dec, i32* %num1, align 8, !dbg !2294
  %idxprom = zext i32 %dec to i64, !dbg !2294
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !2294
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2294
  store %struct.basic_block_def* %5, %struct.basic_block_def** %obj_, align 8, !dbg !2294
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_, align 8, !dbg !2294
  ret %struct.basic_block_def* %6, !dbg !2294
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !2296 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !2300, metadata !DIExpression()), !dbg !2301
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2302
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !2302
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !2302
  br i1 %tobool, label %if.then, label %if.end, !dbg !2301

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2302
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !2302
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !2302
  call void @free(i8* %4), !dbg !2302
  br label %if.end, !dbg !2302

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2301
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !2301
  ret void, !dbg !2301
}

declare dso_local void @tidy_fallthru_edges() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @delete_dead_jumptables() #0 !dbg !2304 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2307, metadata !DIExpression()), !dbg !2308
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2309
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2309
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2309
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2309
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !2309
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2309
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !2309
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2309
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !2309
  br label %for.cond, !dbg !2309

for.cond:                                         ; preds = %for.inc58, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2311
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2311
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !2311
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2311
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2311
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !2311
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2311
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !2311
  br i1 %cmp, label %for.body, label %for.end60, !dbg !2309

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !2313, metadata !DIExpression()), !dbg !2315
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !2316, metadata !DIExpression()), !dbg !2317
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2318
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 7, !dbg !2318
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !2318
  %9 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !2318
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %9, i32 0, i32 1, !dbg !2318
  %10 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !2318
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !2318
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2318
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !2318
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !2318
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2318
  store %struct.rtx_def* %11, %struct.rtx_def** %insn, align 8, !dbg !2320
  br label %for.cond3, !dbg !2321

for.cond3:                                        ; preds = %for.inc, %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2322
  %tobool = icmp ne %struct.rtx_def* %12, null, !dbg !2322
  br i1 %tobool, label %land.rhs, label %land.end10, !dbg !2324

land.rhs:                                         ; preds = %for.cond3
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2325
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !2325
  %bf.load = load i32, i32* %14, align 8, !dbg !2325
  %bf.clear = and i32 %bf.load, 65535, !dbg !2325
  %cmp4 = icmp eq i32 %bf.clear, 13, !dbg !2325
  br i1 %cmp4, label %land.rhs5, label %land.end, !dbg !2325

land.rhs5:                                        ; preds = %land.rhs
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2325
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !2325
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !2325
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 5, !dbg !2325
  %rt_int = bitcast %union.rtunion_def* %arrayidx8 to i32*, !dbg !2325
  %16 = load i32, i32* %rt_int, align 8, !dbg !2325
  %cmp9 = icmp eq i32 %16, 10, !dbg !2325
  br label %land.end

land.end:                                         ; preds = %land.rhs5, %land.rhs
  %17 = phi i1 [ false, %land.rhs ], [ %cmp9, %land.rhs5 ], !dbg !2326
  %lnot = xor i1 %17, true, !dbg !2327
  br label %land.end10

land.end10:                                       ; preds = %land.end, %for.cond3
  %18 = phi i1 [ false, %for.cond3 ], [ %lnot, %land.end ], !dbg !2326
  br i1 %18, label %for.body11, label %for.end, !dbg !2328

for.body11:                                       ; preds = %land.end10
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2329
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !2329
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !2329
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 2, !dbg !2329
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !2329
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !2329
  store %struct.rtx_def* %20, %struct.rtx_def** %next, align 8, !dbg !2331
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2332
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !2332
  %bf.load16 = load i32, i32* %22, align 8, !dbg !2332
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !2332
  %cmp18 = icmp eq i32 %bf.clear17, 12, !dbg !2332
  br i1 %cmp18, label %land.lhs.true, label %if.end57, !dbg !2334

land.lhs.true:                                    ; preds = %for.body11
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2335
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !2335
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !2335
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 4, !dbg !2335
  %rt_int22 = bitcast %union.rtunion_def* %arrayidx21 to i32*, !dbg !2335
  %24 = load i32, i32* %rt_int22, align 8, !dbg !2335
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2336
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !2336
  %bf.load23 = load i32, i32* %26, align 8, !dbg !2336
  %bf.lshr = lshr i32 %bf.load23, 28, !dbg !2336
  %bf.clear24 = and i32 %bf.lshr, 1, !dbg !2336
  %cmp25 = icmp eq i32 %24, %bf.clear24, !dbg !2337
  br i1 %cmp25, label %land.lhs.true26, label %if.end57, !dbg !2338

land.lhs.true26:                                  ; preds = %land.lhs.true
  %27 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !2339
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !2339
  %bf.load27 = load i32, i32* %28, align 8, !dbg !2339
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !2339
  %cmp29 = icmp eq i32 %bf.clear28, 9, !dbg !2339
  br i1 %cmp29, label %land.lhs.true30, label %if.end57, !dbg !2339

land.lhs.true30:                                  ; preds = %land.lhs.true26
  %29 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !2339
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !2339
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !2339
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 5, !dbg !2339
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !2339
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !2339
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !2339
  %bf.load35 = load i32, i32* %31, align 8, !dbg !2339
  %bf.clear36 = and i32 %bf.load35, 65535, !dbg !2339
  %cmp37 = icmp eq i32 %bf.clear36, 20, !dbg !2339
  br i1 %cmp37, label %if.then, label %lor.lhs.false, !dbg !2339

lor.lhs.false:                                    ; preds = %land.lhs.true30
  %32 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !2339
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !2339
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !2339
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 5, !dbg !2339
  %rt_rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**, !dbg !2339
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx41, align 8, !dbg !2339
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !2339
  %bf.load42 = load i32, i32* %34, align 8, !dbg !2339
  %bf.clear43 = and i32 %bf.load42, 65535, !dbg !2339
  %cmp44 = icmp eq i32 %bf.clear43, 21, !dbg !2339
  br i1 %cmp44, label %if.then, label %if.end57, !dbg !2340

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true30
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !2341, metadata !DIExpression()), !dbg !2343
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2344
  store %struct.rtx_def* %35, %struct.rtx_def** %label, align 8, !dbg !2343
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !2345, metadata !DIExpression()), !dbg !2346
  %36 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !2347
  store %struct.rtx_def* %36, %struct.rtx_def** %jump, align 8, !dbg !2346
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2348
  %tobool45 = icmp ne %struct._IO_FILE* %37, null, !dbg !2348
  br i1 %tobool45, label %if.then46, label %if.end, !dbg !2350

if.then46:                                        ; preds = %if.then
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2351
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2352
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !2352
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !2352
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 0, !dbg !2352
  %rt_int50 = bitcast %union.rtunion_def* %arrayidx49 to i32*, !dbg !2352
  %40 = load i32, i32* %rt_int50, align 8, !dbg !2352
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i32 %40), !dbg !2353
  br label %if.end, !dbg !2353

if.end:                                           ; preds = %if.then46, %if.then
  %41 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !2354
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !2354
  %fld52 = bitcast %union.u* %u51 to [1 x %union.rtunion_def]*, !dbg !2354
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i64 0, i64 2, !dbg !2354
  %rt_rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**, !dbg !2354
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx54, align 8, !dbg !2354
  store %struct.rtx_def* %42, %struct.rtx_def** %next, align 8, !dbg !2355
  %43 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !2356
  %call55 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %43), !dbg !2357
  %44 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !2358
  %call56 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %44), !dbg !2359
  br label %if.end57, !dbg !2360

if.end57:                                         ; preds = %if.end, %lor.lhs.false, %land.lhs.true26, %land.lhs.true, %for.body11
  br label %for.inc, !dbg !2361

for.inc:                                          ; preds = %if.end57
  %45 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !2362
  store %struct.rtx_def* %45, %struct.rtx_def** %insn, align 8, !dbg !2363
  br label %for.cond3, !dbg !2364, !llvm.loop !2365

for.end:                                          ; preds = %land.end10
  br label %for.inc58, !dbg !2367

for.inc58:                                        ; preds = %for.end
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2311
  %next_bb59 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 6, !dbg !2311
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb59, align 8, !dbg !2311
  store %struct.basic_block_def* %47, %struct.basic_block_def** %bb, align 8, !dbg !2311
  br label %for.cond, !dbg !2311, !llvm.loop !2368

for.end60:                                        ; preds = %for.cond
  ret void, !dbg !2370
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local %struct.rtx_def* @delete_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @cleanup_cfg(i32 %mode) #0 !dbg !2371 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %changed = alloca i8, align 1
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2374, metadata !DIExpression()), !dbg !2375
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !2376, metadata !DIExpression()), !dbg !2377
  store i8 0, i8* %changed, align 1, !dbg !2377
  %call = call i32 @current_ir_type(), !dbg !2378
  %cmp = icmp eq i32 %call, 2, !dbg !2380
  br i1 %cmp, label %if.then, label %if.end, !dbg !2381

if.then:                                          ; preds = %entry
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2382
  %or = or i32 %0, 32, !dbg !2382
  store i32 %or, i32* %mode.addr, align 4, !dbg !2382
  br label %if.end, !dbg !2383

if.end:                                           ; preds = %if.then, %entry
  br label %do.body, !dbg !2384

do.body:                                          ; preds = %if.end
  %1 = load i8, i8* @timevar_enable, align 1, !dbg !2385
  %tobool = icmp ne i8 %1, 0, !dbg !2385
  br i1 %tobool, label %if.then1, label %if.end2, !dbg !2388

if.then1:                                         ; preds = %do.body
  call void @timevar_push_1(i32 23), !dbg !2385
  br label %if.end2, !dbg !2385

if.end2:                                          ; preds = %if.then1, %do.body
  br label %do.end, !dbg !2388

do.end:                                           ; preds = %if.end2
  %call3 = call zeroext i8 @delete_unreachable_blocks(), !dbg !2389
  %tobool4 = icmp ne i8 %call3, 0, !dbg !2389
  br i1 %tobool4, label %if.then5, label %if.end13, !dbg !2391

if.then5:                                         ; preds = %do.end
  store i8 1, i8* %changed, align 1, !dbg !2392
  %2 = load i32, i32* %mode.addr, align 4, !dbg !2394
  %and = and i32 %2, 16, !dbg !2396
  %tobool6 = icmp ne i32 %and, 0, !dbg !2396
  br i1 %tobool6, label %if.end12, label %land.lhs.true, !dbg !2397

land.lhs.true:                                    ; preds = %if.then5
  %3 = load i32, i32* @reload_completed, align 4, !dbg !2398
  %tobool7 = icmp ne i32 %3, 0, !dbg !2398
  br i1 %tobool7, label %if.end12, label %if.then8, !dbg !2399

if.then8:                                         ; preds = %land.lhs.true
  %call9 = call %struct.rtx_def* @get_insns(), !dbg !2400
  %call10 = call i32 @max_reg_num(), !dbg !2401
  %call11 = call i32 @delete_trivially_dead_insns(%struct.rtx_def* %call9, i32 %call10), !dbg !2402
  br label %if.end12, !dbg !2402

if.end12:                                         ; preds = %if.then8, %land.lhs.true, %if.then5
  br label %if.end13, !dbg !2403

if.end13:                                         ; preds = %if.end12, %do.end
  call void @compact_blocks(), !dbg !2404
  %4 = load i32, i32* %mode.addr, align 4, !dbg !2405
  %and14 = and i32 %4, 2, !dbg !2407
  %tobool15 = icmp ne i32 %and14, 0, !dbg !2407
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !2408

if.then16:                                        ; preds = %if.end13
  call void @add_noreturn_fake_exit_edges(), !dbg !2409
  br label %if.end17, !dbg !2409

if.end17:                                         ; preds = %if.then16, %if.end13
  %call18 = call zeroext i8 @dbg_cnt(i32 2), !dbg !2410
  %tobool19 = icmp ne i8 %call18, 0, !dbg !2410
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !2412

if.then20:                                        ; preds = %if.end17
  %5 = load i8, i8* %changed, align 1, !dbg !2413
  store i8 %5, i8* %retval, align 1, !dbg !2414
  br label %return, !dbg !2414

if.end21:                                         ; preds = %if.end17
  br label %while.cond, !dbg !2415

while.cond:                                       ; preds = %if.end46, %if.end21
  %6 = load i32, i32* %mode.addr, align 4, !dbg !2416
  %call22 = call zeroext i8 @try_optimize_cfg(i32 %6), !dbg !2417
  %tobool23 = icmp ne i8 %call22, 0, !dbg !2415
  br i1 %tobool23, label %while.body, label %while.end, !dbg !2415

while.body:                                       ; preds = %while.cond
  %call24 = call zeroext i8 @delete_unreachable_blocks(), !dbg !2418
  store i8 1, i8* %changed, align 1, !dbg !2420
  %7 = load i32, i32* %mode.addr, align 4, !dbg !2421
  %and25 = and i32 %7, 16, !dbg !2423
  %tobool26 = icmp ne i32 %and25, 0, !dbg !2423
  br i1 %tobool26, label %if.else45, label %if.then27, !dbg !2424

if.then27:                                        ; preds = %while.body
  %8 = load i32, i32* %mode.addr, align 4, !dbg !2425
  %and28 = and i32 %8, 1, !dbg !2428
  %tobool29 = icmp ne i32 %and28, 0, !dbg !2428
  br i1 %tobool29, label %land.lhs.true30, label %if.else, !dbg !2429

land.lhs.true30:                                  ; preds = %if.then27
  %9 = load i32, i32* @reload_completed, align 4, !dbg !2430
  %tobool31 = icmp ne i32 %9, 0, !dbg !2430
  br i1 %tobool31, label %if.else, label %land.lhs.true32, !dbg !2431

land.lhs.true32:                                  ; preds = %land.lhs.true30
  %call33 = call %struct.rtx_def* @get_insns(), !dbg !2432
  %call34 = call i32 @max_reg_num(), !dbg !2433
  %call35 = call i32 @delete_trivially_dead_insns(%struct.rtx_def* %call33, i32 %call34), !dbg !2434
  %tobool36 = icmp ne i32 %call35, 0, !dbg !2434
  br i1 %tobool36, label %if.else, label %if.then37, !dbg !2435

if.then37:                                        ; preds = %land.lhs.true32
  br label %while.end, !dbg !2436

if.else:                                          ; preds = %land.lhs.true32, %land.lhs.true30, %if.then27
  %10 = load i32, i32* %mode.addr, align 4, !dbg !2437
  %and38 = and i32 %10, 2, !dbg !2439
  %tobool39 = icmp ne i32 %and38, 0, !dbg !2439
  br i1 %tobool39, label %land.lhs.true40, label %if.end43, !dbg !2440

land.lhs.true40:                                  ; preds = %if.else
  %11 = load i8, i8* @crossjumps_occured, align 1, !dbg !2441
  %conv = zext i8 %11 to i32, !dbg !2441
  %tobool41 = icmp ne i32 %conv, 0, !dbg !2441
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !2442

if.then42:                                        ; preds = %land.lhs.true40
  call void @run_fast_dce(), !dbg !2443
  br label %if.end43, !dbg !2443

if.end43:                                         ; preds = %if.then42, %land.lhs.true40, %if.else
  br label %if.end44

if.end44:                                         ; preds = %if.end43
  br label %if.end46, !dbg !2444

if.else45:                                        ; preds = %while.body
  br label %while.end, !dbg !2445

if.end46:                                         ; preds = %if.end44
  br label %while.cond, !dbg !2415, !llvm.loop !2446

while.end:                                        ; preds = %if.else45, %if.then37, %while.cond
  %12 = load i32, i32* %mode.addr, align 4, !dbg !2448
  %and47 = and i32 %12, 2, !dbg !2450
  %tobool48 = icmp ne i32 %and47, 0, !dbg !2450
  br i1 %tobool48, label %if.then49, label %if.end50, !dbg !2451

if.then49:                                        ; preds = %while.end
  call void @remove_fake_exit_edges(), !dbg !2452
  br label %if.end50, !dbg !2452

if.end50:                                         ; preds = %if.then49, %while.end
  %13 = load i32, i32* %mode.addr, align 4, !dbg !2453
  %and51 = and i32 %13, 32, !dbg !2455
  %tobool52 = icmp ne i32 %and51, 0, !dbg !2455
  br i1 %tobool52, label %if.end54, label %if.then53, !dbg !2456

if.then53:                                        ; preds = %if.end50
  call void @delete_dead_jumptables(), !dbg !2457
  br label %if.end54, !dbg !2457

if.end54:                                         ; preds = %if.then53, %if.end50
  br label %do.body55, !dbg !2458

do.body55:                                        ; preds = %if.end54
  %14 = load i8, i8* @timevar_enable, align 1, !dbg !2459
  %tobool56 = icmp ne i8 %14, 0, !dbg !2459
  br i1 %tobool56, label %if.then57, label %if.end58, !dbg !2462

if.then57:                                        ; preds = %do.body55
  call void @timevar_pop_1(i32 23), !dbg !2459
  br label %if.end58, !dbg !2459

if.end58:                                         ; preds = %if.then57, %do.body55
  br label %do.end59, !dbg !2462

do.end59:                                         ; preds = %if.end58
  %15 = load i8, i8* %changed, align 1, !dbg !2463
  store i8 %15, i8* %retval, align 1, !dbg !2464
  br label %return, !dbg !2464

return:                                           ; preds = %do.end59, %if.then20
  %16 = load i8, i8* %retval, align 1, !dbg !2465
  ret i8 %16, !dbg !2465
}

declare dso_local void @timevar_push_1(i32) #2

declare dso_local i32 @delete_trivially_dead_insns(%struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local i32 @max_reg_num() #2

declare dso_local void @compact_blocks() #2

declare dso_local void @add_noreturn_fake_exit_edges() #2

declare dso_local zeroext i8 @dbg_cnt(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @try_optimize_cfg(i32 %mode) #0 !dbg !2466 {
entry:
  %mode.addr = alloca i32, align 4
  %changed_overall = alloca i8, align 1
  %changed = alloca i8, align 1
  %iterations = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %b = alloca %struct.basic_block_def*, align 8
  %next = alloca %struct.basic_block_def*, align 8
  %c = alloca %struct.basic_block_def*, align 8
  %s = alloca %struct.edge_def*, align 8
  %changed_here = alloca i8, align 1
  %label = alloca %struct.rtx_def*, align 8
  %bb_note = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2467, metadata !DIExpression()), !dbg !2468
  call void @llvm.dbg.declare(metadata i8* %changed_overall, metadata !2469, metadata !DIExpression()), !dbg !2470
  store i8 0, i8* %changed_overall, align 1, !dbg !2470
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !2471, metadata !DIExpression()), !dbg !2472
  call void @llvm.dbg.declare(metadata i32* %iterations, metadata !2473, metadata !DIExpression()), !dbg !2474
  store i32 0, i32* %iterations, align 4, !dbg !2474
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2475, metadata !DIExpression()), !dbg !2476
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b, metadata !2477, metadata !DIExpression()), !dbg !2478
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %next, metadata !2479, metadata !DIExpression()), !dbg !2480
  %0 = load i32, i32* %mode.addr, align 4, !dbg !2481
  %and = and i32 %0, 10, !dbg !2483
  %tobool = icmp ne i32 %and, 0, !dbg !2483
  br i1 %tobool, label %if.then, label %if.end, !dbg !2484

if.then:                                          ; preds = %entry
  call void @clear_bb_flags(), !dbg !2485
  br label %if.end, !dbg !2485

if.end:                                           ; preds = %if.then, %entry
  store i8 0, i8* @crossjumps_occured, align 1, !dbg !2486
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2487
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2487
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2487
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2487
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !2487
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2487
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 6, !dbg !2487
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2487
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !2487
  br label %for.cond, !dbg !2487

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2489
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2489
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !2489
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2489
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2489
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !2489
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2489
  %cmp = icmp ne %struct.basic_block_def* %5, %8, !dbg !2489
  br i1 %cmp, label %for.body, label %for.end, !dbg !2487

for.body:                                         ; preds = %for.cond
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2491
  call void @update_forwarder_flag(%struct.basic_block_def* %9), !dbg !2492
  br label %for.inc, !dbg !2492

for.inc:                                          ; preds = %for.body
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2489
  %next_bb3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 6, !dbg !2489
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb3, align 8, !dbg !2489
  store %struct.basic_block_def* %11, %struct.basic_block_def** %bb, align 8, !dbg !2489
  br label %for.cond, !dbg !2489, !llvm.loop !2493

for.end:                                          ; preds = %for.cond
  %12 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 32), align 8, !dbg !2495
  %call = call zeroext i8 %12(), !dbg !2497
  %tobool4 = icmp ne i8 %call, 0, !dbg !2497
  br i1 %tobool4, label %if.end334, label %if.then5, !dbg !2498

if.then5:                                         ; preds = %for.end
  store i8 1, i8* @first_pass, align 1, !dbg !2499
  br label %do.body, !dbg !2501

do.body:                                          ; preds = %do.cond, %if.then5
  store i8 0, i8* %changed, align 1, !dbg !2502
  %13 = load i32, i32* %iterations, align 4, !dbg !2504
  %inc = add nsw i32 %13, 1, !dbg !2504
  store i32 %inc, i32* %iterations, align 4, !dbg !2504
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2505
  %tobool6 = icmp ne %struct._IO_FILE* %14, null, !dbg !2505
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !2507

if.then7:                                         ; preds = %do.body
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2508
  %16 = load i32, i32* %iterations, align 4, !dbg !2509
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0), i32 %16), !dbg !2510
  br label %if.end9, !dbg !2510

if.end9:                                          ; preds = %if.then7, %do.body
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2511
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !2511
  %cfg11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 1, !dbg !2511
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg11, align 8, !dbg !2511
  %x_entry_block_ptr12 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 0, !dbg !2511
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr12, align 8, !dbg !2511
  %next_bb13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 6, !dbg !2513
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb13, align 8, !dbg !2513
  store %struct.basic_block_def* %20, %struct.basic_block_def** %b, align 8, !dbg !2514
  br label %for.cond14, !dbg !2515

for.cond14:                                       ; preds = %if.end317, %cond.end182, %cond.end55, %if.end9
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2516
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2518
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !2518
  %cfg16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 1, !dbg !2518
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg16, align 8, !dbg !2518
  %x_exit_block_ptr17 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 1, !dbg !2518
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr17, align 8, !dbg !2518
  %cmp18 = icmp ne %struct.basic_block_def* %21, %24, !dbg !2519
  br i1 %cmp18, label %for.body19, label %for.end318, !dbg !2520

for.body19:                                       ; preds = %for.cond14
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %c, metadata !2521, metadata !DIExpression()), !dbg !2523
  call void @llvm.dbg.declare(metadata %struct.edge_def** %s, metadata !2524, metadata !DIExpression()), !dbg !2525
  call void @llvm.dbg.declare(metadata i8* %changed_here, metadata !2526, metadata !DIExpression()), !dbg !2527
  store i8 0, i8* %changed_here, align 1, !dbg !2527
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2528
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 0, !dbg !2528
  %26 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !2528
  %tobool20 = icmp ne %struct.VEC_edge_gc* %26, null, !dbg !2528
  br i1 %tobool20, label %cond.true, label %cond.false, !dbg !2528

cond.true:                                        ; preds = %for.body19
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2528
  %preds21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 0, !dbg !2528
  %28 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds21, align 8, !dbg !2528
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %28, i32 0, i32 0, !dbg !2528
  br label %cond.end, !dbg !2528

cond.false:                                       ; preds = %for.body19
  br label %cond.end, !dbg !2528

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2528
  %call22 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2528
  %cmp23 = icmp eq i32 %call22, 0, !dbg !2530
  br i1 %cmp23, label %if.then42, label %lor.lhs.false, !dbg !2531

lor.lhs.false:                                    ; preds = %cond.end
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2532
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 1, !dbg !2532
  %30 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !2532
  %tobool24 = icmp ne %struct.VEC_edge_gc* %30, null, !dbg !2532
  br i1 %tobool24, label %cond.true25, label %cond.false28, !dbg !2532

cond.true25:                                      ; preds = %lor.lhs.false
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2532
  %succs26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 1, !dbg !2532
  %32 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs26, align 8, !dbg !2532
  %base27 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %32, i32 0, i32 0, !dbg !2532
  br label %cond.end29, !dbg !2532

cond.false28:                                     ; preds = %lor.lhs.false
  br label %cond.end29, !dbg !2532

cond.end29:                                       ; preds = %cond.false28, %cond.true25
  %cond30 = phi %struct.VEC_edge_base* [ %base27, %cond.true25 ], [ null, %cond.false28 ], !dbg !2532
  %call31 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond30), !dbg !2532
  %cmp32 = icmp eq i32 %call31, 0, !dbg !2533
  br i1 %cmp32, label %land.lhs.true, label %if.end57, !dbg !2534

land.lhs.true:                                    ; preds = %cond.end29
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2535
  %call33 = call zeroext i8 @trivially_empty_bb_p(%struct.basic_block_def* %33), !dbg !2536
  %conv = zext i8 %call33 to i32, !dbg !2536
  %tobool34 = icmp ne i32 %conv, 0, !dbg !2536
  br i1 %tobool34, label %land.lhs.true35, label %if.end57, !dbg !2537

land.lhs.true35:                                  ; preds = %land.lhs.true
  %34 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2538
  %add.ptr36 = getelementptr inbounds %struct.function, %struct.function* %34, i64 0, !dbg !2538
  %cfg37 = getelementptr inbounds %struct.function, %struct.function* %add.ptr36, i32 0, i32 1, !dbg !2538
  %35 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg37, align 8, !dbg !2538
  %x_entry_block_ptr38 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %35, i32 0, i32 0, !dbg !2538
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr38, align 8, !dbg !2538
  %call39 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %36), !dbg !2539
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call39, i32 0, i32 1, !dbg !2540
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2540
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2541
  %cmp40 = icmp ne %struct.basic_block_def* %37, %38, !dbg !2542
  br i1 %cmp40, label %if.then42, label %if.end57, !dbg !2543

if.then42:                                        ; preds = %land.lhs.true35, %cond.end
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2544
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 5, !dbg !2546
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !2546
  store %struct.basic_block_def* %40, %struct.basic_block_def** %c, align 8, !dbg !2547
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2548
  call void @delete_basic_block(%struct.basic_block_def* %41), !dbg !2549
  %42 = load i32, i32* %mode.addr, align 4, !dbg !2550
  %and43 = and i32 %42, 32, !dbg !2552
  %tobool44 = icmp ne i32 %and43, 0, !dbg !2552
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !2553

if.then45:                                        ; preds = %if.then42
  store i8 1, i8* %changed, align 1, !dbg !2554
  br label %if.end46, !dbg !2555

if.end46:                                         ; preds = %if.then45, %if.then42
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !2556
  %44 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2557
  %add.ptr47 = getelementptr inbounds %struct.function, %struct.function* %44, i64 0, !dbg !2557
  %cfg48 = getelementptr inbounds %struct.function, %struct.function* %add.ptr47, i32 0, i32 1, !dbg !2557
  %45 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg48, align 8, !dbg !2557
  %x_entry_block_ptr49 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %45, i32 0, i32 0, !dbg !2557
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr49, align 8, !dbg !2557
  %cmp50 = icmp eq %struct.basic_block_def* %43, %46, !dbg !2558
  br i1 %cmp50, label %cond.true52, label %cond.false54, !dbg !2556

cond.true52:                                      ; preds = %if.end46
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !2559
  %next_bb53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 6, !dbg !2560
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb53, align 8, !dbg !2560
  br label %cond.end55, !dbg !2556

cond.false54:                                     ; preds = %if.end46
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !2561
  br label %cond.end55, !dbg !2556

cond.end55:                                       ; preds = %cond.false54, %cond.true52
  %cond56 = phi %struct.basic_block_def* [ %48, %cond.true52 ], [ %49, %cond.false54 ], !dbg !2556
  store %struct.basic_block_def* %cond56, %struct.basic_block_def** %b, align 8, !dbg !2562
  br label %for.cond14, !dbg !2563, !llvm.loop !2564

if.end57:                                         ; preds = %land.lhs.true35, %land.lhs.true, %cond.end29
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2566
  %call58 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %50), !dbg !2568
  %conv59 = zext i8 %call58 to i32, !dbg !2568
  %tobool60 = icmp ne i32 %conv59, 0, !dbg !2568
  br i1 %tobool60, label %land.lhs.true61, label %if.end132, !dbg !2569

land.lhs.true61:                                  ; preds = %if.end57
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2570
  %call62 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %51), !dbg !2571
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call62, i32 0, i32 7, !dbg !2572
  %52 = load i32, i32* %flags, align 8, !dbg !2572
  %and63 = and i32 %52, 1, !dbg !2573
  %tobool64 = icmp ne i32 %and63, 0, !dbg !2573
  br i1 %tobool64, label %land.lhs.true65, label %if.end132, !dbg !2574

land.lhs.true65:                                  ; preds = %land.lhs.true61
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2575
  %call66 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %53), !dbg !2576
  %flags67 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call66, i32 0, i32 7, !dbg !2577
  %54 = load i32, i32* %flags67, align 8, !dbg !2577
  %and68 = and i32 %54, 14, !dbg !2578
  %tobool69 = icmp ne i32 %and68, 0, !dbg !2578
  br i1 %tobool69, label %if.end132, label %land.lhs.true70, !dbg !2579

land.lhs.true70:                                  ; preds = %land.lhs.true65
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2580
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 7, !dbg !2580
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !2580
  %56 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !2580
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %56, i32 0, i32 0, !dbg !2580
  %57 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !2580
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !2580
  %bf.load = load i32, i32* %58, align 8, !dbg !2580
  %bf.clear = and i32 %bf.load, 65535, !dbg !2580
  %cmp71 = icmp eq i32 %bf.clear, 12, !dbg !2580
  br i1 %cmp71, label %land.lhs.true73, label %if.end132, !dbg !2581

land.lhs.true73:                                  ; preds = %land.lhs.true70
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2582
  %call74 = call %struct.basic_block_def* @single_pred(%struct.basic_block_def* %59), !dbg !2583
  %60 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2584
  %add.ptr75 = getelementptr inbounds %struct.function, %struct.function* %60, i64 0, !dbg !2584
  %cfg76 = getelementptr inbounds %struct.function, %struct.function* %add.ptr75, i32 0, i32 1, !dbg !2584
  %61 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg76, align 8, !dbg !2584
  %x_entry_block_ptr77 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %61, i32 0, i32 0, !dbg !2584
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr77, align 8, !dbg !2584
  %cmp78 = icmp eq %struct.basic_block_def* %call74, %62, !dbg !2585
  br i1 %cmp78, label %if.then98, label %lor.lhs.false80, !dbg !2586

lor.lhs.false80:                                  ; preds = %land.lhs.true73
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2587
  %call81 = call %struct.basic_block_def* @single_pred(%struct.basic_block_def* %63), !dbg !2587
  %il82 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call81, i32 0, i32 7, !dbg !2587
  %rtl83 = bitcast %union.basic_block_il_dependent* %il82 to %struct.rtl_bb_info**, !dbg !2587
  %64 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl83, align 8, !dbg !2587
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %64, i32 0, i32 1, !dbg !2587
  %65 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !2587
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !2587
  %bf.load84 = load i32, i32* %66, align 8, !dbg !2587
  %bf.clear85 = and i32 %bf.load84, 65535, !dbg !2587
  %cmp86 = icmp eq i32 %bf.clear85, 9, !dbg !2587
  br i1 %cmp86, label %lor.lhs.false88, label %if.then98, !dbg !2588

lor.lhs.false88:                                  ; preds = %lor.lhs.false80
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2589
  %il89 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 7, !dbg !2589
  %rtl90 = bitcast %union.basic_block_il_dependent* %il89 to %struct.rtl_bb_info**, !dbg !2589
  %68 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl90, align 8, !dbg !2589
  %head_91 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %68, i32 0, i32 0, !dbg !2589
  %69 = load %struct.rtx_def*, %struct.rtx_def** %head_91, align 8, !dbg !2589
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2590
  %call92 = call %struct.basic_block_def* @single_pred(%struct.basic_block_def* %70), !dbg !2590
  %il93 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call92, i32 0, i32 7, !dbg !2590
  %rtl94 = bitcast %union.basic_block_il_dependent* %il93 to %struct.rtl_bb_info**, !dbg !2590
  %71 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl94, align 8, !dbg !2590
  %end_95 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %71, i32 0, i32 1, !dbg !2590
  %72 = load %struct.rtx_def*, %struct.rtx_def** %end_95, align 8, !dbg !2590
  %call96 = call zeroext i8 @label_is_jump_target_p(%struct.rtx_def* %69, %struct.rtx_def* %72), !dbg !2591
  %tobool97 = icmp ne i8 %call96, 0, !dbg !2591
  br i1 %tobool97, label %if.end132, label %if.then98, !dbg !2592

if.then98:                                        ; preds = %lor.lhs.false88, %lor.lhs.false80, %land.lhs.true73
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !2593, metadata !DIExpression()), !dbg !2595
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2596
  %il99 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %73, i32 0, i32 7, !dbg !2596
  %rtl100 = bitcast %union.basic_block_il_dependent* %il99 to %struct.rtl_bb_info**, !dbg !2596
  %74 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl100, align 8, !dbg !2596
  %head_101 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %74, i32 0, i32 0, !dbg !2596
  %75 = load %struct.rtx_def*, %struct.rtx_def** %head_101, align 8, !dbg !2596
  store %struct.rtx_def* %75, %struct.rtx_def** %label, align 8, !dbg !2595
  %76 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !2597
  %77 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !2598
  call void @delete_insn_chain(%struct.rtx_def* %76, %struct.rtx_def* %77, i8 zeroext 0), !dbg !2599
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2600
  %il102 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 7, !dbg !2600
  %rtl103 = bitcast %union.basic_block_il_dependent* %il102 to %struct.rtl_bb_info**, !dbg !2600
  %79 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl103, align 8, !dbg !2600
  %head_104 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %79, i32 0, i32 0, !dbg !2600
  %80 = load %struct.rtx_def*, %struct.rtx_def** %head_104, align 8, !dbg !2600
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !2600
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2600
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !2600
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !2600
  %81 = load i32, i32* %rt_int, align 8, !dbg !2600
  %cmp105 = icmp eq i32 %81, 1, !dbg !2602
  br i1 %cmp105, label %if.then107, label %if.end127, !dbg !2603

if.then107:                                       ; preds = %if.then98
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %bb_note, metadata !2604, metadata !DIExpression()), !dbg !2606
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2607
  %il108 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %82, i32 0, i32 7, !dbg !2607
  %rtl109 = bitcast %union.basic_block_il_dependent* %il108 to %struct.rtl_bb_info**, !dbg !2607
  %83 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl109, align 8, !dbg !2607
  %head_110 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %83, i32 0, i32 0, !dbg !2607
  %84 = load %struct.rtx_def*, %struct.rtx_def** %head_110, align 8, !dbg !2607
  %u111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !2607
  %fld112 = bitcast %union.u* %u111 to [1 x %union.rtunion_def]*, !dbg !2607
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i64 0, i64 2, !dbg !2607
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**, !dbg !2607
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2607
  store %struct.rtx_def* %85, %struct.rtx_def** %bb_note, align 8, !dbg !2606
  %86 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !2608
  %87 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !2609
  %88 = load %struct.rtx_def*, %struct.rtx_def** %bb_note, align 8, !dbg !2610
  call void @reorder_insns_nobb(%struct.rtx_def* %86, %struct.rtx_def* %87, %struct.rtx_def* %88), !dbg !2611
  %89 = load %struct.rtx_def*, %struct.rtx_def** %bb_note, align 8, !dbg !2612
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2613
  %il114 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 7, !dbg !2613
  %rtl115 = bitcast %union.basic_block_il_dependent* %il114 to %struct.rtl_bb_info**, !dbg !2613
  %91 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl115, align 8, !dbg !2613
  %head_116 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %91, i32 0, i32 0, !dbg !2613
  store %struct.rtx_def* %89, %struct.rtx_def** %head_116, align 8, !dbg !2614
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2615
  %il117 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 7, !dbg !2615
  %rtl118 = bitcast %union.basic_block_il_dependent* %il117 to %struct.rtl_bb_info**, !dbg !2615
  %93 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl118, align 8, !dbg !2615
  %end_119 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %93, i32 0, i32 1, !dbg !2615
  %94 = load %struct.rtx_def*, %struct.rtx_def** %end_119, align 8, !dbg !2615
  %95 = load %struct.rtx_def*, %struct.rtx_def** %bb_note, align 8, !dbg !2617
  %cmp120 = icmp eq %struct.rtx_def* %94, %95, !dbg !2618
  br i1 %cmp120, label %if.then122, label %if.end126, !dbg !2619

if.then122:                                       ; preds = %if.then107
  %96 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !2620
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2621
  %il123 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %97, i32 0, i32 7, !dbg !2621
  %rtl124 = bitcast %union.basic_block_il_dependent* %il123 to %struct.rtl_bb_info**, !dbg !2621
  %98 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl124, align 8, !dbg !2621
  %end_125 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %98, i32 0, i32 1, !dbg !2621
  store %struct.rtx_def* %96, %struct.rtx_def** %end_125, align 8, !dbg !2622
  br label %if.end126, !dbg !2621

if.end126:                                        ; preds = %if.then122, %if.then107
  br label %if.end127, !dbg !2623

if.end127:                                        ; preds = %if.end126, %if.then98
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2624
  %tobool128 = icmp ne %struct._IO_FILE* %99, null, !dbg !2624
  br i1 %tobool128, label %if.then129, label %if.end131, !dbg !2626

if.then129:                                       ; preds = %if.end127
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2627
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2628
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i32 0, i32 9, !dbg !2629
  %102 = load i32, i32* %index, align 8, !dbg !2629
  %call130 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %100, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i32 %102), !dbg !2630
  br label %if.end131, !dbg !2630

if.end131:                                        ; preds = %if.then129, %if.end127
  br label %if.end132, !dbg !2631

if.end132:                                        ; preds = %if.end131, %lor.lhs.false88, %land.lhs.true70, %land.lhs.true65, %land.lhs.true61, %if.end57
  %103 = load i32, i32* %mode.addr, align 4, !dbg !2632
  %and133 = and i32 %103, 32, !dbg !2634
  %tobool134 = icmp ne i32 %and133, 0, !dbg !2634
  br i1 %tobool134, label %if.end187, label %land.lhs.true135, !dbg !2635

land.lhs.true135:                                 ; preds = %if.end132
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2636
  %call136 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %104), !dbg !2637
  %conv137 = zext i8 %call136 to i32, !dbg !2637
  %tobool138 = icmp ne i32 %conv137, 0, !dbg !2637
  br i1 %tobool138, label %land.lhs.true139, label %if.end187, !dbg !2638

land.lhs.true139:                                 ; preds = %land.lhs.true135
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2639
  %call140 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %105), !dbg !2640
  %flags141 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call140, i32 0, i32 7, !dbg !2641
  %106 = load i32, i32* %flags141, align 8, !dbg !2641
  %and142 = and i32 %106, 1, !dbg !2642
  %tobool143 = icmp ne i32 %and142, 0, !dbg !2642
  br i1 %tobool143, label %land.lhs.true144, label %if.end187, !dbg !2643

land.lhs.true144:                                 ; preds = %land.lhs.true139
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2644
  %il145 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %107, i32 0, i32 7, !dbg !2644
  %rtl146 = bitcast %union.basic_block_il_dependent* %il145 to %struct.rtl_bb_info**, !dbg !2644
  %108 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl146, align 8, !dbg !2644
  %head_147 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %108, i32 0, i32 0, !dbg !2644
  %109 = load %struct.rtx_def*, %struct.rtx_def** %head_147, align 8, !dbg !2644
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !2644
  %bf.load148 = load i32, i32* %110, align 8, !dbg !2644
  %bf.clear149 = and i32 %bf.load148, 65535, !dbg !2644
  %cmp150 = icmp eq i32 %bf.clear149, 12, !dbg !2644
  br i1 %cmp150, label %if.end187, label %land.lhs.true152, !dbg !2645

land.lhs.true152:                                 ; preds = %land.lhs.true144
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2646
  %flags153 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %111, i32 0, i32 13, !dbg !2646
  %112 = load i32, i32* %flags153, align 8, !dbg !2646
  %and154 = and i32 %112, 1024, !dbg !2646
  %tobool155 = icmp ne i32 %and154, 0, !dbg !2646
  br i1 %tobool155, label %land.lhs.true156, label %if.end187, !dbg !2647

land.lhs.true156:                                 ; preds = %land.lhs.true152
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2648
  %call157 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %113), !dbg !2649
  %flags158 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call157, i32 0, i32 7, !dbg !2650
  %114 = load i32, i32* %flags158, align 8, !dbg !2650
  %and159 = and i32 %114, 1, !dbg !2651
  %tobool160 = icmp ne i32 %and159, 0, !dbg !2651
  br i1 %tobool160, label %land.lhs.true161, label %if.end187, !dbg !2652

land.lhs.true161:                                 ; preds = %land.lhs.true156
  %115 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2653
  %add.ptr162 = getelementptr inbounds %struct.function, %struct.function* %115, i64 0, !dbg !2653
  %cfg163 = getelementptr inbounds %struct.function, %struct.function* %add.ptr162, i32 0, i32 1, !dbg !2653
  %116 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg163, align 8, !dbg !2653
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %116, i32 0, i32 3, !dbg !2653
  %117 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !2653
  %cmp164 = icmp sgt i32 %117, 3, !dbg !2654
  br i1 %cmp164, label %if.then166, label %if.end187, !dbg !2655

if.then166:                                       ; preds = %land.lhs.true161
  %118 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2656
  %tobool167 = icmp ne %struct._IO_FILE* %118, null, !dbg !2656
  br i1 %tobool167, label %if.then168, label %if.end171, !dbg !2659

if.then168:                                       ; preds = %if.then166
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2660
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2661
  %index169 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %120, i32 0, i32 9, !dbg !2662
  %121 = load i32, i32* %index169, align 8, !dbg !2662
  %call170 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %119, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i32 %121), !dbg !2663
  br label %if.end171, !dbg !2663

if.end171:                                        ; preds = %if.then168, %if.then166
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2664
  %prev_bb172 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %122, i32 0, i32 5, !dbg !2665
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb172, align 8, !dbg !2665
  %124 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2666
  %add.ptr173 = getelementptr inbounds %struct.function, %struct.function* %124, i64 0, !dbg !2666
  %cfg174 = getelementptr inbounds %struct.function, %struct.function* %add.ptr173, i32 0, i32 1, !dbg !2666
  %125 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg174, align 8, !dbg !2666
  %x_entry_block_ptr175 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %125, i32 0, i32 0, !dbg !2666
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr175, align 8, !dbg !2666
  %cmp176 = icmp eq %struct.basic_block_def* %123, %126, !dbg !2667
  br i1 %cmp176, label %cond.true178, label %cond.false180, !dbg !2664

cond.true178:                                     ; preds = %if.end171
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2668
  %next_bb179 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %127, i32 0, i32 6, !dbg !2669
  %128 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb179, align 8, !dbg !2669
  br label %cond.end182, !dbg !2664

cond.false180:                                    ; preds = %if.end171
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2670
  %prev_bb181 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %129, i32 0, i32 5, !dbg !2671
  %130 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb181, align 8, !dbg !2671
  br label %cond.end182, !dbg !2664

cond.end182:                                      ; preds = %cond.false180, %cond.true178
  %cond183 = phi %struct.basic_block_def* [ %128, %cond.true178 ], [ %130, %cond.false180 ], !dbg !2664
  store %struct.basic_block_def* %cond183, %struct.basic_block_def** %c, align 8, !dbg !2672
  %131 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2673
  %call184 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %131), !dbg !2674
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2675
  %call185 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %132), !dbg !2676
  %call186 = call %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %call184, %struct.basic_block_def* %call185), !dbg !2677
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2678
  call void @delete_basic_block(%struct.basic_block_def* %133), !dbg !2679
  store i8 1, i8* %changed, align 1, !dbg !2680
  %134 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !2681
  store %struct.basic_block_def* %134, %struct.basic_block_def** %b, align 8, !dbg !2682
  br label %for.cond14, !dbg !2683, !llvm.loop !2564

if.end187:                                        ; preds = %land.lhs.true161, %land.lhs.true156, %land.lhs.true152, %land.lhs.true144, %land.lhs.true139, %land.lhs.true135, %if.end132
  %135 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2684
  %call188 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %135), !dbg !2686
  %conv189 = zext i8 %call188 to i32, !dbg !2686
  %tobool190 = icmp ne i32 %conv189, 0, !dbg !2686
  br i1 %tobool190, label %land.lhs.true191, label %if.end256, !dbg !2687

land.lhs.true191:                                 ; preds = %if.end187
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2688
  %call192 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %136), !dbg !2689
  store %struct.edge_def* %call192, %struct.edge_def** %s, align 8, !dbg !2690
  %tobool193 = icmp ne %struct.edge_def* %call192, null, !dbg !2690
  br i1 %tobool193, label %land.lhs.true194, label %if.end256, !dbg !2691

land.lhs.true194:                                 ; preds = %land.lhs.true191
  %137 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !2692
  %flags195 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %137, i32 0, i32 7, !dbg !2693
  %138 = load i32, i32* %flags195, align 8, !dbg !2693
  %and196 = and i32 %138, 14, !dbg !2694
  %tobool197 = icmp ne i32 %and196, 0, !dbg !2694
  br i1 %tobool197, label %if.end256, label %land.lhs.true198, !dbg !2695

land.lhs.true198:                                 ; preds = %land.lhs.true194
  %139 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !2696
  %dest199 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %139, i32 0, i32 1, !dbg !2697
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %dest199, align 8, !dbg !2697
  store %struct.basic_block_def* %140, %struct.basic_block_def** %c, align 8, !dbg !2698
  %141 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2699
  %add.ptr200 = getelementptr inbounds %struct.function, %struct.function* %141, i64 0, !dbg !2699
  %cfg201 = getelementptr inbounds %struct.function, %struct.function* %add.ptr200, i32 0, i32 1, !dbg !2699
  %142 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg201, align 8, !dbg !2699
  %x_exit_block_ptr202 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %142, i32 0, i32 1, !dbg !2699
  %143 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr202, align 8, !dbg !2699
  %cmp203 = icmp ne %struct.basic_block_def* %140, %143, !dbg !2700
  br i1 %cmp203, label %land.lhs.true205, label %if.end256, !dbg !2701

land.lhs.true205:                                 ; preds = %land.lhs.true198
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !2702
  %call206 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %144), !dbg !2703
  %conv207 = zext i8 %call206 to i32, !dbg !2703
  %tobool208 = icmp ne i32 %conv207, 0, !dbg !2703
  br i1 %tobool208, label %land.lhs.true209, label %if.end256, !dbg !2704

land.lhs.true209:                                 ; preds = %land.lhs.true205
  %145 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2705
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !2706
  %cmp210 = icmp ne %struct.basic_block_def* %145, %146, !dbg !2707
  br i1 %cmp210, label %if.then212, label %if.end256, !dbg !2708

if.then212:                                       ; preds = %land.lhs.true209
  %147 = load i32, i32* %mode.addr, align 4, !dbg !2709
  %and213 = and i32 %147, 32, !dbg !2712
  %tobool214 = icmp ne i32 %and213, 0, !dbg !2712
  br i1 %tobool214, label %land.lhs.true215, label %if.else, !dbg !2713

land.lhs.true215:                                 ; preds = %if.then212
  %148 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2714
  %149 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !2715
  %call216 = call zeroext i8 @can_merge_blocks_p(%struct.basic_block_def* %148, %struct.basic_block_def* %149), !dbg !2716
  %conv217 = zext i8 %call216 to i32, !dbg !2716
  %tobool218 = icmp ne i32 %conv217, 0, !dbg !2716
  br i1 %tobool218, label %if.then219, label %if.else, !dbg !2717

if.then219:                                       ; preds = %land.lhs.true215
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2718
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !2720
  call void @merge_blocks(%struct.basic_block_def* %150, %struct.basic_block_def* %151), !dbg !2721
  %152 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2722
  call void @update_forwarder_flag(%struct.basic_block_def* %152), !dbg !2723
  store i8 1, i8* %changed_here, align 1, !dbg !2724
  br label %if.end255, !dbg !2725

if.else:                                          ; preds = %land.lhs.true215, %if.then212
  %153 = load i32, i32* %mode.addr, align 4, !dbg !2726
  %and220 = and i32 %153, 32, !dbg !2728
  %tobool221 = icmp ne i32 %and220, 0, !dbg !2728
  br i1 %tobool221, label %if.end254, label %land.lhs.true222, !dbg !2729

land.lhs.true222:                                 ; preds = %if.else
  %154 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2730
  %il223 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %154, i32 0, i32 7, !dbg !2730
  %rtl224 = bitcast %union.basic_block_il_dependent* %il223 to %struct.rtl_bb_info**, !dbg !2730
  %155 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl224, align 8, !dbg !2730
  %end_225 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %155, i32 0, i32 1, !dbg !2730
  %156 = load %struct.rtx_def*, %struct.rtx_def** %end_225, align 8, !dbg !2730
  %157 = bitcast %struct.rtx_def* %156 to i32*, !dbg !2730
  %bf.load226 = load i32, i32* %157, align 8, !dbg !2730
  %bf.clear227 = and i32 %bf.load226, 65535, !dbg !2730
  %cmp228 = icmp eq i32 %bf.clear227, 9, !dbg !2730
  br i1 %cmp228, label %lor.lhs.false230, label %land.lhs.true250, !dbg !2731

lor.lhs.false230:                                 ; preds = %land.lhs.true222
  %158 = load i32, i32* @reload_completed, align 4, !dbg !2732
  %tobool231 = icmp ne i32 %158, 0, !dbg !2732
  br i1 %tobool231, label %cond.true232, label %cond.false238, !dbg !2733

cond.true232:                                     ; preds = %lor.lhs.false230
  %159 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2734
  %il233 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %159, i32 0, i32 7, !dbg !2734
  %rtl234 = bitcast %union.basic_block_il_dependent* %il233 to %struct.rtl_bb_info**, !dbg !2734
  %160 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl234, align 8, !dbg !2734
  %end_235 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %160, i32 0, i32 1, !dbg !2734
  %161 = load %struct.rtx_def*, %struct.rtx_def** %end_235, align 8, !dbg !2734
  %call236 = call i32 @simplejump_p(%struct.rtx_def* %161), !dbg !2735
  %tobool237 = icmp ne i32 %call236, 0, !dbg !2735
  br i1 %tobool237, label %land.lhs.true250, label %if.end254, !dbg !2732

cond.false238:                                    ; preds = %lor.lhs.false230
  %162 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2736
  %il239 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %162, i32 0, i32 7, !dbg !2736
  %rtl240 = bitcast %union.basic_block_il_dependent* %il239 to %struct.rtl_bb_info**, !dbg !2736
  %163 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl240, align 8, !dbg !2736
  %end_241 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %163, i32 0, i32 1, !dbg !2736
  %164 = load %struct.rtx_def*, %struct.rtx_def** %end_241, align 8, !dbg !2736
  %call242 = call i32 @onlyjump_p(%struct.rtx_def* %164), !dbg !2737
  %tobool243 = icmp ne i32 %call242, 0, !dbg !2737
  br i1 %tobool243, label %land.lhs.true244, label %if.end254, !dbg !2738

land.lhs.true244:                                 ; preds = %cond.false238
  %165 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2739
  %il245 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %165, i32 0, i32 7, !dbg !2739
  %rtl246 = bitcast %union.basic_block_il_dependent* %il245 to %struct.rtl_bb_info**, !dbg !2739
  %166 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl246, align 8, !dbg !2739
  %end_247 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %166, i32 0, i32 1, !dbg !2739
  %167 = load %struct.rtx_def*, %struct.rtx_def** %end_247, align 8, !dbg !2739
  %call248 = call zeroext i8 @tablejump_p(%struct.rtx_def* %167, %struct.rtx_def** null, %struct.rtx_def** null), !dbg !2740
  %tobool249 = icmp ne i8 %call248, 0, !dbg !2740
  br i1 %tobool249, label %if.end254, label %land.lhs.true250, !dbg !2733

land.lhs.true250:                                 ; preds = %land.lhs.true244, %cond.true232, %land.lhs.true222
  %168 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !2741
  %169 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2742
  %170 = load %struct.basic_block_def*, %struct.basic_block_def** %c, align 8, !dbg !2743
  %171 = load i32, i32* %mode.addr, align 4, !dbg !2744
  %call251 = call %struct.basic_block_def* @merge_blocks_move(%struct.edge_def* %168, %struct.basic_block_def* %169, %struct.basic_block_def* %170, i32 %171), !dbg !2745
  store %struct.basic_block_def* %call251, %struct.basic_block_def** %next, align 8, !dbg !2746
  %tobool252 = icmp ne %struct.basic_block_def* %call251, null, !dbg !2746
  br i1 %tobool252, label %if.then253, label %if.end254, !dbg !2747

if.then253:                                       ; preds = %land.lhs.true250
  %172 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !2748
  store %struct.basic_block_def* %172, %struct.basic_block_def** %b, align 8, !dbg !2750
  store i8 1, i8* %changed_here, align 1, !dbg !2751
  br label %if.end254, !dbg !2752

if.end254:                                        ; preds = %if.then253, %land.lhs.true250, %land.lhs.true244, %cond.false238, %cond.true232, %if.else
  br label %if.end255

if.end255:                                        ; preds = %if.end254, %if.then219
  br label %if.end256, !dbg !2753

if.end256:                                        ; preds = %if.end255, %land.lhs.true209, %land.lhs.true205, %land.lhs.true198, %land.lhs.true194, %land.lhs.true191, %if.end187
  %173 = load i32, i32* %mode.addr, align 4, !dbg !2754
  %and257 = and i32 %173, 1, !dbg !2756
  %tobool258 = icmp ne i32 %and257, 0, !dbg !2756
  br i1 %tobool258, label %land.lhs.true259, label %if.end267, !dbg !2757

land.lhs.true259:                                 ; preds = %if.end256
  %174 = load i32, i32* %mode.addr, align 4, !dbg !2758
  %and260 = and i32 %174, 32, !dbg !2759
  %tobool261 = icmp ne i32 %and260, 0, !dbg !2759
  br i1 %tobool261, label %if.end267, label %land.lhs.true262, !dbg !2760

land.lhs.true262:                                 ; preds = %land.lhs.true259
  %175 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2761
  %call263 = call zeroext i8 @try_simplify_condjump(%struct.basic_block_def* %175), !dbg !2762
  %conv264 = zext i8 %call263 to i32, !dbg !2762
  %tobool265 = icmp ne i32 %conv264, 0, !dbg !2762
  br i1 %tobool265, label %if.then266, label %if.end267, !dbg !2763

if.then266:                                       ; preds = %land.lhs.true262
  store i8 1, i8* %changed_here, align 1, !dbg !2764
  br label %if.end267, !dbg !2765

if.end267:                                        ; preds = %if.then266, %land.lhs.true262, %land.lhs.true259, %if.end256
  %176 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2766
  %call268 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %176), !dbg !2768
  %conv269 = zext i8 %call268 to i32, !dbg !2768
  %tobool270 = icmp ne i32 %conv269, 0, !dbg !2768
  br i1 %tobool270, label %land.lhs.true271, label %if.end300, !dbg !2769

land.lhs.true271:                                 ; preds = %if.end267
  %177 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2770
  %call272 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %177), !dbg !2771
  %178 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2772
  %add.ptr273 = getelementptr inbounds %struct.function, %struct.function* %178, i64 0, !dbg !2772
  %cfg274 = getelementptr inbounds %struct.function, %struct.function* %add.ptr273, i32 0, i32 1, !dbg !2772
  %179 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg274, align 8, !dbg !2772
  %x_exit_block_ptr275 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %179, i32 0, i32 1, !dbg !2772
  %180 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr275, align 8, !dbg !2772
  %cmp276 = icmp ne %struct.basic_block_def* %call272, %180, !dbg !2773
  br i1 %cmp276, label %land.lhs.true278, label %if.end300, !dbg !2774

land.lhs.true278:                                 ; preds = %land.lhs.true271
  %181 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2775
  %il279 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %181, i32 0, i32 7, !dbg !2775
  %rtl280 = bitcast %union.basic_block_il_dependent* %il279 to %struct.rtl_bb_info**, !dbg !2775
  %182 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl280, align 8, !dbg !2775
  %end_281 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %182, i32 0, i32 1, !dbg !2775
  %183 = load %struct.rtx_def*, %struct.rtx_def** %end_281, align 8, !dbg !2775
  %call282 = call i32 @onlyjump_p(%struct.rtx_def* %183), !dbg !2776
  %tobool283 = icmp ne i32 %call282, 0, !dbg !2776
  br i1 %tobool283, label %land.lhs.true284, label %if.end300, !dbg !2777

land.lhs.true284:                                 ; preds = %land.lhs.true278
  %184 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2778
  %il285 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %184, i32 0, i32 7, !dbg !2778
  %rtl286 = bitcast %union.basic_block_il_dependent* %il285 to %struct.rtl_bb_info**, !dbg !2778
  %185 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl286, align 8, !dbg !2778
  %end_287 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %185, i32 0, i32 1, !dbg !2778
  %186 = load %struct.rtx_def*, %struct.rtx_def** %end_287, align 8, !dbg !2778
  %call288 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %186, i32 29, %struct.rtx_def* null), !dbg !2779
  %tobool289 = icmp ne %struct.rtx_def* %call288, null, !dbg !2779
  br i1 %tobool289, label %if.end300, label %land.lhs.true290, !dbg !2780

land.lhs.true290:                                 ; preds = %land.lhs.true284
  %187 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2781
  %call291 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %187), !dbg !2782
  %188 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2783
  %call292 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %188), !dbg !2784
  %189 = load i32, i32* %mode.addr, align 4, !dbg !2785
  %and293 = and i32 %189, 32, !dbg !2786
  %cmp294 = icmp ne i32 %and293, 0, !dbg !2787
  %conv295 = zext i1 %cmp294 to i32, !dbg !2787
  %conv296 = trunc i32 %conv295 to i8, !dbg !2788
  %call297 = call %struct.edge_def* @try_redirect_by_replacing_jump(%struct.edge_def* %call291, %struct.basic_block_def* %call292, i8 zeroext %conv296), !dbg !2789
  %tobool298 = icmp ne %struct.edge_def* %call297, null, !dbg !2789
  br i1 %tobool298, label %if.then299, label %if.end300, !dbg !2790

if.then299:                                       ; preds = %land.lhs.true290
  %190 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2791
  call void @update_forwarder_flag(%struct.basic_block_def* %190), !dbg !2793
  store i8 1, i8* %changed_here, align 1, !dbg !2794
  br label %if.end300, !dbg !2795

if.end300:                                        ; preds = %if.then299, %land.lhs.true290, %land.lhs.true284, %land.lhs.true278, %land.lhs.true271, %if.end267
  %191 = load i32, i32* %mode.addr, align 4, !dbg !2796
  %192 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2798
  %call301 = call zeroext i8 @try_forward_edges(i32 %191, %struct.basic_block_def* %192), !dbg !2799
  %tobool302 = icmp ne i8 %call301, 0, !dbg !2799
  br i1 %tobool302, label %if.then303, label %if.end304, !dbg !2800

if.then303:                                       ; preds = %if.end300
  store i8 1, i8* %changed_here, align 1, !dbg !2801
  br label %if.end304, !dbg !2802

if.end304:                                        ; preds = %if.then303, %if.end300
  %193 = load i32, i32* %mode.addr, align 4, !dbg !2803
  %and305 = and i32 %193, 2, !dbg !2805
  %tobool306 = icmp ne i32 %and305, 0, !dbg !2805
  br i1 %tobool306, label %land.lhs.true307, label %if.end312, !dbg !2806

land.lhs.true307:                                 ; preds = %if.end304
  %194 = load i32, i32* %mode.addr, align 4, !dbg !2807
  %195 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2808
  %call308 = call zeroext i8 @try_crossjump_bb(i32 %194, %struct.basic_block_def* %195), !dbg !2809
  %conv309 = zext i8 %call308 to i32, !dbg !2809
  %tobool310 = icmp ne i32 %conv309, 0, !dbg !2809
  br i1 %tobool310, label %if.then311, label %if.end312, !dbg !2810

if.then311:                                       ; preds = %land.lhs.true307
  store i8 1, i8* %changed_here, align 1, !dbg !2811
  br label %if.end312, !dbg !2812

if.end312:                                        ; preds = %if.then311, %land.lhs.true307, %if.end304
  %196 = load i8, i8* %changed_here, align 1, !dbg !2813
  %tobool313 = icmp ne i8 %196, 0, !dbg !2813
  br i1 %tobool313, label %if.else316, label %if.then314, !dbg !2815

if.then314:                                       ; preds = %if.end312
  %197 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2816
  %next_bb315 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %197, i32 0, i32 6, !dbg !2817
  %198 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb315, align 8, !dbg !2817
  store %struct.basic_block_def* %198, %struct.basic_block_def** %b, align 8, !dbg !2818
  br label %if.end317, !dbg !2819

if.else316:                                       ; preds = %if.end312
  store i8 1, i8* %changed, align 1, !dbg !2820
  br label %if.end317

if.end317:                                        ; preds = %if.else316, %if.then314
  br label %for.cond14, !dbg !2821, !llvm.loop !2564

for.end318:                                       ; preds = %for.cond14
  %199 = load i32, i32* %mode.addr, align 4, !dbg !2822
  %and319 = and i32 %199, 2, !dbg !2824
  %tobool320 = icmp ne i32 %and319, 0, !dbg !2824
  br i1 %tobool320, label %land.lhs.true321, label %if.end329, !dbg !2825

land.lhs.true321:                                 ; preds = %for.end318
  %200 = load i32, i32* %mode.addr, align 4, !dbg !2826
  %201 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2827
  %add.ptr322 = getelementptr inbounds %struct.function, %struct.function* %201, i64 0, !dbg !2827
  %cfg323 = getelementptr inbounds %struct.function, %struct.function* %add.ptr322, i32 0, i32 1, !dbg !2827
  %202 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg323, align 8, !dbg !2827
  %x_exit_block_ptr324 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %202, i32 0, i32 1, !dbg !2827
  %203 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr324, align 8, !dbg !2827
  %call325 = call zeroext i8 @try_crossjump_bb(i32 %200, %struct.basic_block_def* %203), !dbg !2828
  %conv326 = zext i8 %call325 to i32, !dbg !2828
  %tobool327 = icmp ne i32 %conv326, 0, !dbg !2828
  br i1 %tobool327, label %if.then328, label %if.end329, !dbg !2829

if.then328:                                       ; preds = %land.lhs.true321
  store i8 1, i8* %changed, align 1, !dbg !2830
  br label %if.end329, !dbg !2831

if.end329:                                        ; preds = %if.then328, %land.lhs.true321, %for.end318
  %204 = load i8, i8* %changed, align 1, !dbg !2832
  %conv330 = zext i8 %204 to i32, !dbg !2832
  %205 = load i8, i8* %changed_overall, align 1, !dbg !2833
  %conv331 = zext i8 %205 to i32, !dbg !2833
  %or = or i32 %conv331, %conv330, !dbg !2833
  %conv332 = trunc i32 %or to i8, !dbg !2833
  store i8 %conv332, i8* %changed_overall, align 1, !dbg !2833
  store i8 0, i8* @first_pass, align 1, !dbg !2834
  br label %do.cond, !dbg !2835

do.cond:                                          ; preds = %if.end329
  %206 = load i8, i8* %changed, align 1, !dbg !2836
  %tobool333 = icmp ne i8 %206, 0, !dbg !2835
  br i1 %tobool333, label %do.body, label %do.end, !dbg !2835, !llvm.loop !2837

do.end:                                           ; preds = %do.cond
  br label %if.end334, !dbg !2839

if.end334:                                        ; preds = %do.end, %for.end
  %207 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2840
  %add.ptr335 = getelementptr inbounds %struct.function, %struct.function* %207, i64 0, !dbg !2840
  %cfg336 = getelementptr inbounds %struct.function, %struct.function* %add.ptr335, i32 0, i32 1, !dbg !2840
  %208 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg336, align 8, !dbg !2840
  %x_entry_block_ptr337 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %208, i32 0, i32 0, !dbg !2840
  %209 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr337, align 8, !dbg !2840
  store %struct.basic_block_def* %209, %struct.basic_block_def** %b, align 8, !dbg !2840
  br label %for.cond338, !dbg !2840

for.cond338:                                      ; preds = %for.inc343, %if.end334
  %210 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2842
  %tobool339 = icmp ne %struct.basic_block_def* %210, null, !dbg !2840
  br i1 %tobool339, label %for.body340, label %for.end345, !dbg !2840

for.body340:                                      ; preds = %for.cond338
  %211 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2844
  %flags341 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %211, i32 0, i32 13, !dbg !2845
  %212 = load i32, i32* %flags341, align 8, !dbg !2846
  %and342 = and i32 %212, -3073, !dbg !2846
  store i32 %and342, i32* %flags341, align 8, !dbg !2846
  br label %for.inc343, !dbg !2844

for.inc343:                                       ; preds = %for.body340
  %213 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2842
  %next_bb344 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %213, i32 0, i32 6, !dbg !2842
  %214 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb344, align 8, !dbg !2842
  store %struct.basic_block_def* %214, %struct.basic_block_def** %b, align 8, !dbg !2842
  br label %for.cond338, !dbg !2842, !llvm.loop !2847

for.end345:                                       ; preds = %for.cond338
  %215 = load i8, i8* %changed_overall, align 1, !dbg !2849
  ret i8 %215, !dbg !2850
}

declare dso_local void @run_fast_dce() #2

declare dso_local void @remove_fake_exit_edges() #2

declare dso_local void @timevar_pop_1(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_jump() #0 !dbg !2851 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 39), align 1, !dbg !2852
  %tobool = icmp ne i8 %0, 0, !dbg !2854
  br i1 %tobool, label %if.then, label %if.end, !dbg !2855

if.then:                                          ; preds = %entry
  call void @fixup_tail_calls(), !dbg !2856
  br label %if.end, !dbg !2856

if.end:                                           ; preds = %if.then, %entry
  ret i32 0, !dbg !2857
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_jump2() #0 !dbg !2858 {
entry:
  %call = call %struct.rtx_def* @get_insns(), !dbg !2859
  %call1 = call i32 @max_reg_num(), !dbg !2860
  %call2 = call i32 @delete_trivially_dead_insns(%struct.rtx_def* %call, i32 %call1), !dbg !2861
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2862
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !2862
  br i1 %tobool, label %if.then, label %if.end, !dbg !2864

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2865
  %2 = load i32, i32* @dump_flags, align 4, !dbg !2866
  call void @dump_flow_info(%struct._IO_FILE* %1, i32 %2), !dbg !2867
  br label %if.end, !dbg !2867

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* @optimize, align 4, !dbg !2868
  %tobool3 = icmp ne i32 %3, 0, !dbg !2868
  %4 = zext i1 %tobool3 to i64, !dbg !2868
  %cond = select i1 %tobool3, i32 1, i32 0, !dbg !2868
  %5 = load i32, i32* @flag_thread_jumps, align 4, !dbg !2869
  %tobool4 = icmp ne i32 %5, 0, !dbg !2869
  %6 = zext i1 %tobool4 to i64, !dbg !2869
  %cond5 = select i1 %tobool4, i32 8, i32 0, !dbg !2869
  %or = or i32 %cond, %cond5, !dbg !2870
  %call6 = call zeroext i8 @cleanup_cfg(i32 %or), !dbg !2871
  ret i32 0, !dbg !2872
}

declare dso_local void @free(i8*) #2

declare dso_local void @clear_bb_flags() #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_forwarder_flag(%struct.basic_block_def* %bb) #0 !dbg !2873 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2876, metadata !DIExpression()), !dbg !2877
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2878
  %call = call zeroext i8 @forwarder_block_p(%struct.basic_block_def* %0), !dbg !2880
  %tobool = icmp ne i8 %call, 0, !dbg !2880
  br i1 %tobool, label %if.then, label %if.else, !dbg !2881

if.then:                                          ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2882
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 13, !dbg !2883
  %2 = load i32, i32* %flags, align 8, !dbg !2884
  %or = or i32 %2, 1024, !dbg !2884
  store i32 %or, i32* %flags, align 8, !dbg !2884
  br label %if.end, !dbg !2882

if.else:                                          ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2885
  %flags1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 13, !dbg !2886
  %4 = load i32, i32* %flags1, align 8, !dbg !2887
  %and = and i32 %4, -1025, !dbg !2887
  store i32 %and, i32* %flags1, align 8, !dbg !2887
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2888
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !2889 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !2894, metadata !DIExpression()), !dbg !2895
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2895
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !2895
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2895

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2895
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !2895
  %2 = load i32, i32* %num, align 8, !dbg !2895
  br label %cond.end, !dbg !2895

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2895

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2895
  ret i32 %cond, !dbg !2895
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @trivially_empty_bb_p(%struct.basic_block_def* %bb) #0 !dbg !2896 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2899, metadata !DIExpression()), !dbg !2900
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !2901, metadata !DIExpression()), !dbg !2902
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2903
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !2903
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !2903
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !2903
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !2903
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !2903
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !2902
  br label %while.body, !dbg !2904

while.body:                                       ; preds = %entry, %if.end5
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2905
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2908
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !2908
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !2908
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !2908
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 0, !dbg !2908
  %6 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !2908
  %cmp = icmp eq %struct.rtx_def* %3, %6, !dbg !2909
  br i1 %cmp, label %if.then, label %if.end, !dbg !2910

if.then:                                          ; preds = %while.body
  store i8 1, i8* %retval, align 1, !dbg !2911
  br label %return, !dbg !2911

if.end:                                           ; preds = %while.body
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2912
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !2912
  %bf.load = load i32, i32* %8, align 8, !dbg !2912
  %bf.clear = and i32 %bf.load, 65535, !dbg !2912
  %cmp3 = icmp eq i32 %bf.clear, 7, !dbg !2912
  br i1 %cmp3, label %if.end5, label %if.then4, !dbg !2914

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !2915
  br label %return, !dbg !2915

if.end5:                                          ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2916
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !2916
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2916
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !2916
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !2916
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2916
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !2917
  br label %while.body, !dbg !2904, !llvm.loop !2918

return:                                           ; preds = %if.then4, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !2920
  ret i8 %11, !dbg !2920
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !2921 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2927, metadata !DIExpression()), !dbg !2928
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2929
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !2929
  %tobool = icmp ne i8 %call, 0, !dbg !2929
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2929

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2929
  br label %cond.end, !dbg !2929

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2929

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2929
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2930
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !2930
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !2930
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !2930
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !2930

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2930
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !2930
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !2930
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !2930
  br label %cond.end5, !dbg !2930

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2930

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !2930
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !2930
  ret %struct.edge_def* %call7, !dbg !2931
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !2932 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2935, metadata !DIExpression()), !dbg !2936
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2937
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !2937
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !2937
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !2937
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2937

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2937
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !2937
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !2937
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !2937
  br label %cond.end, !dbg !2937

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2937

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2937
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2937
  %cmp = icmp eq i32 %call, 1, !dbg !2938
  %conv = zext i1 %cmp to i32, !dbg !2938
  %conv2 = trunc i32 %conv to i8, !dbg !2937
  ret i8 %conv2, !dbg !2939
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !2940 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2941, metadata !DIExpression()), !dbg !2942
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2943
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !2943
  %tobool = icmp ne i8 %call, 0, !dbg !2943
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2943

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2943
  br label %cond.end, !dbg !2943

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2943

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2943
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2944
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !2944
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !2944
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !2944
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !2944

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2944
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !2944
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !2944
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !2944
  br label %cond.end5, !dbg !2944

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2944

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !2944
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !2944
  ret %struct.edge_def* %call7, !dbg !2945
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_pred(%struct.basic_block_def* %bb) #0 !dbg !2946 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2949, metadata !DIExpression()), !dbg !2950
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2951
  %call = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %0), !dbg !2952
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 0, !dbg !2953
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2953
  ret %struct.basic_block_def* %1, !dbg !2954
}

declare dso_local zeroext i8 @label_is_jump_target_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @delete_insn_chain(%struct.rtx_def*, %struct.rtx_def*, i8 zeroext) #2

declare dso_local void @reorder_insns_nobb(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !2955 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2956, metadata !DIExpression()), !dbg !2957
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2958
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !2959
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !2960
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2960
  ret %struct.basic_block_def* %1, !dbg !2961
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !2962 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2963, metadata !DIExpression()), !dbg !2964
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2965
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !2965
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !2965
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !2965
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2965

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2965
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !2965
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !2965
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !2965
  br label %cond.end, !dbg !2965

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2965

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2965
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2965
  %cmp = icmp eq i32 %call, 1, !dbg !2966
  %conv = zext i1 %cmp to i32, !dbg !2966
  %conv2 = trunc i32 %conv to i8, !dbg !2965
  ret i8 %conv2, !dbg !2967
}

declare dso_local zeroext i8 @can_merge_blocks_p(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local void @merge_blocks(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local i32 @simplejump_p(%struct.rtx_def*) #2

declare dso_local i32 @onlyjump_p(%struct.rtx_def*) #2

declare dso_local zeroext i8 @tablejump_p(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @merge_blocks_move(%struct.edge_def* %e, %struct.basic_block_def* %b, %struct.basic_block_def* %c, i32 %mode) #0 !dbg !2968 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %b.addr = alloca %struct.basic_block_def*, align 8
  %c.addr = alloca %struct.basic_block_def*, align 8
  %mode.addr = alloca i32, align 4
  %next = alloca %struct.basic_block_def*, align 8
  %b_index = alloca i32, align 4
  %c_index = alloca i32, align 4
  %tmp_edge = alloca %struct.edge_def*, align 8
  %b_fallthru_edge = alloca %struct.edge_def*, align 8
  %c_has_outgoing_fallthru = alloca i8, align 1
  %b_has_incoming_fallthru = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp33 = alloca %struct.edge_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !2971, metadata !DIExpression()), !dbg !2972
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !2973, metadata !DIExpression()), !dbg !2974
  store %struct.basic_block_def* %c, %struct.basic_block_def** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %c.addr, metadata !2975, metadata !DIExpression()), !dbg !2976
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2977, metadata !DIExpression()), !dbg !2978
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %next, metadata !2979, metadata !DIExpression()), !dbg !2980
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !2981
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !2981
  %1 = load i32, i32* %flags, align 8, !dbg !2981
  %and = and i32 %1, 96, !dbg !2981
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %c.addr, align 8, !dbg !2983
  %flags1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 13, !dbg !2983
  %3 = load i32, i32* %flags1, align 8, !dbg !2983
  %and2 = and i32 %3, 96, !dbg !2983
  %cmp = icmp ne i32 %and, %and2, !dbg !2984
  br i1 %cmp, label %if.then, label %if.end, !dbg !2985

if.then:                                          ; preds = %entry
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !2986
  br label %return, !dbg !2986

if.end:                                           ; preds = %entry
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2987
  %flags3 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 7, !dbg !2989
  %5 = load i32, i32* %flags3, align 8, !dbg !2989
  %and4 = and i32 %5, 1, !dbg !2990
  %tobool = icmp ne i32 %and4, 0, !dbg !2990
  br i1 %tobool, label %if.then5, label %if.else, !dbg !2991

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %b_index, metadata !2992, metadata !DIExpression()), !dbg !2994
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !2995
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 9, !dbg !2996
  %7 = load i32, i32* %index, align 8, !dbg !2996
  store i32 %7, i32* %b_index, align 4, !dbg !2994
  call void @llvm.dbg.declare(metadata i32* %c_index, metadata !2997, metadata !DIExpression()), !dbg !2998
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %c.addr, align 8, !dbg !2999
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 9, !dbg !3000
  %9 = load i32, i32* %index6, align 8, !dbg !3000
  store i32 %9, i32* %c_index, align 4, !dbg !2998
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3001
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %c.addr, align 8, !dbg !3002
  call void @merge_blocks(%struct.basic_block_def* %10, %struct.basic_block_def* %11), !dbg !3003
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3004
  call void @update_forwarder_flag(%struct.basic_block_def* %12), !dbg !3005
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3006
  %tobool7 = icmp ne %struct._IO_FILE* %13, null, !dbg !3006
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !3008

if.then8:                                         ; preds = %if.then5
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3009
  %15 = load i32, i32* %b_index, align 4, !dbg !3010
  %16 = load i32, i32* %c_index, align 4, !dbg !3011
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.9, i64 0, i64 0), i32 %15, i32 %16), !dbg !3012
  br label %if.end9, !dbg !3012

if.end9:                                          ; preds = %if.then8, %if.then5
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3013
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 5, !dbg !3014
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !3014
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3015
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !3015
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3015
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3015
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 0, !dbg !3015
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3015
  %cmp10 = icmp eq %struct.basic_block_def* %18, %21, !dbg !3016
  br i1 %cmp10, label %cond.true, label %cond.false, !dbg !3013

cond.true:                                        ; preds = %if.end9
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3017
  br label %cond.end, !dbg !3013

cond.false:                                       ; preds = %if.end9
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3018
  %prev_bb11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 5, !dbg !3019
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb11, align 8, !dbg !3019
  br label %cond.end, !dbg !3013

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %22, %cond.true ], [ %24, %cond.false ], !dbg !3013
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %retval, align 8, !dbg !3020
  br label %return, !dbg !3020

if.else:                                          ; preds = %if.end
  %25 = load i32, i32* %mode.addr, align 4, !dbg !3021
  %and12 = and i32 %25, 1, !dbg !3023
  %tobool13 = icmp ne i32 %and12, 0, !dbg !3023
  br i1 %tobool13, label %if.then14, label %if.end91, !dbg !3024

if.then14:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.edge_def** %tmp_edge, metadata !3025, metadata !DIExpression()), !dbg !3027
  call void @llvm.dbg.declare(metadata %struct.edge_def** %b_fallthru_edge, metadata !3028, metadata !DIExpression()), !dbg !3029
  call void @llvm.dbg.declare(metadata i8* %c_has_outgoing_fallthru, metadata !3030, metadata !DIExpression()), !dbg !3031
  call void @llvm.dbg.declare(metadata i8* %b_has_incoming_fallthru, metadata !3032, metadata !DIExpression()), !dbg !3033
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3034, metadata !DIExpression()), !dbg !3041
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3042
  %flags15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 13, !dbg !3042
  %27 = load i32, i32* %flags15, align 8, !dbg !3042
  %and16 = and i32 %27, 1024, !dbg !3042
  %tobool17 = icmp ne i32 %and16, 0, !dbg !3042
  br i1 %tobool17, label %if.then21, label %lor.lhs.false, !dbg !3044

lor.lhs.false:                                    ; preds = %if.then14
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %c.addr, align 8, !dbg !3045
  %flags18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 13, !dbg !3045
  %29 = load i32, i32* %flags18, align 8, !dbg !3045
  %and19 = and i32 %29, 1024, !dbg !3045
  %tobool20 = icmp ne i32 %and19, 0, !dbg !3045
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !3046

if.then21:                                        ; preds = %lor.lhs.false, %if.then14
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !3047
  br label %return, !dbg !3047

if.end22:                                         ; preds = %lor.lhs.false
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %c.addr, align 8, !dbg !3048
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 1, !dbg !3048
  %call23 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3048
  %31 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3048
  %32 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 0, !dbg !3048
  %33 = extractvalue { i32, %struct.VEC_edge_gc** } %call23, 0, !dbg !3048
  store i32 %33, i32* %32, align 8, !dbg !3048
  %34 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %31, i32 0, i32 1, !dbg !3048
  %35 = extractvalue { i32, %struct.VEC_edge_gc** } %call23, 1, !dbg !3048
  store %struct.VEC_edge_gc** %35, %struct.VEC_edge_gc*** %34, align 8, !dbg !3048
  %36 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3048
  %37 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3048
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 16, i1 false), !dbg !3048
  br label %for.cond, !dbg !3048

for.cond:                                         ; preds = %for.inc, %if.end22
  %38 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3050
  %39 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 0, !dbg !3050
  %40 = load i32, i32* %39, align 8, !dbg !3050
  %41 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %38, i32 0, i32 1, !dbg !3050
  %42 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %41, align 8, !dbg !3050
  %call24 = call zeroext i8 @ei_cond(i32 %40, %struct.VEC_edge_gc** %42, %struct.edge_def** %tmp_edge), !dbg !3050
  %tobool25 = icmp ne i8 %call24, 0, !dbg !3048
  br i1 %tobool25, label %for.body, label %for.end, !dbg !3048

for.body:                                         ; preds = %for.cond
  %43 = load %struct.edge_def*, %struct.edge_def** %tmp_edge, align 8, !dbg !3052
  %flags26 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 7, !dbg !3054
  %44 = load i32, i32* %flags26, align 8, !dbg !3054
  %and27 = and i32 %44, 1, !dbg !3055
  %tobool28 = icmp ne i32 %and27, 0, !dbg !3055
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !3056

if.then29:                                        ; preds = %for.body
  br label %for.end, !dbg !3057

if.end30:                                         ; preds = %for.body
  br label %for.inc, !dbg !3058

for.inc:                                          ; preds = %if.end30
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3050
  br label %for.cond, !dbg !3050, !llvm.loop !3059

for.end:                                          ; preds = %if.then29, %for.cond
  %45 = load %struct.edge_def*, %struct.edge_def** %tmp_edge, align 8, !dbg !3061
  %cmp31 = icmp ne %struct.edge_def* %45, null, !dbg !3062
  %conv = zext i1 %cmp31 to i32, !dbg !3062
  %conv32 = trunc i32 %conv to i8, !dbg !3063
  store i8 %conv32, i8* %c_has_outgoing_fallthru, align 1, !dbg !3064
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3065
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 0, !dbg !3065
  %call34 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !3065
  %47 = bitcast %struct.edge_iterator* %tmp33 to { i32, %struct.VEC_edge_gc** }*, !dbg !3065
  %48 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %47, i32 0, i32 0, !dbg !3065
  %49 = extractvalue { i32, %struct.VEC_edge_gc** } %call34, 0, !dbg !3065
  store i32 %49, i32* %48, align 8, !dbg !3065
  %50 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %47, i32 0, i32 1, !dbg !3065
  %51 = extractvalue { i32, %struct.VEC_edge_gc** } %call34, 1, !dbg !3065
  store %struct.VEC_edge_gc** %51, %struct.VEC_edge_gc*** %50, align 8, !dbg !3065
  %52 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3065
  %53 = bitcast %struct.edge_iterator* %tmp33 to i8*, !dbg !3065
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false), !dbg !3065
  br label %for.cond35, !dbg !3065

for.cond35:                                       ; preds = %for.inc44, %for.end
  %54 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3067
  %55 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %54, i32 0, i32 0, !dbg !3067
  %56 = load i32, i32* %55, align 8, !dbg !3067
  %57 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %54, i32 0, i32 1, !dbg !3067
  %58 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %57, align 8, !dbg !3067
  %call36 = call zeroext i8 @ei_cond(i32 %56, %struct.VEC_edge_gc** %58, %struct.edge_def** %tmp_edge), !dbg !3067
  %tobool37 = icmp ne i8 %call36, 0, !dbg !3065
  br i1 %tobool37, label %for.body38, label %for.end45, !dbg !3065

for.body38:                                       ; preds = %for.cond35
  %59 = load %struct.edge_def*, %struct.edge_def** %tmp_edge, align 8, !dbg !3069
  %flags39 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %59, i32 0, i32 7, !dbg !3071
  %60 = load i32, i32* %flags39, align 8, !dbg !3071
  %and40 = and i32 %60, 1, !dbg !3072
  %tobool41 = icmp ne i32 %and40, 0, !dbg !3072
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !3073

if.then42:                                        ; preds = %for.body38
  br label %for.end45, !dbg !3074

if.end43:                                         ; preds = %for.body38
  br label %for.inc44, !dbg !3075

for.inc44:                                        ; preds = %if.end43
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3067
  br label %for.cond35, !dbg !3067, !llvm.loop !3076

for.end45:                                        ; preds = %if.then42, %for.cond35
  %61 = load %struct.edge_def*, %struct.edge_def** %tmp_edge, align 8, !dbg !3078
  %cmp46 = icmp ne %struct.edge_def* %61, null, !dbg !3079
  %conv47 = zext i1 %cmp46 to i32, !dbg !3079
  %conv48 = trunc i32 %conv47 to i8, !dbg !3080
  store i8 %conv48, i8* %b_has_incoming_fallthru, align 1, !dbg !3081
  %62 = load %struct.edge_def*, %struct.edge_def** %tmp_edge, align 8, !dbg !3082
  store %struct.edge_def* %62, %struct.edge_def** %b_fallthru_edge, align 8, !dbg !3083
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3084
  %prev_bb49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 5, !dbg !3085
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb49, align 8, !dbg !3085
  store %struct.basic_block_def* %64, %struct.basic_block_def** %next, align 8, !dbg !3086
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !3087
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %c.addr, align 8, !dbg !3089
  %cmp50 = icmp eq %struct.basic_block_def* %65, %66, !dbg !3090
  br i1 %cmp50, label %if.then52, label %if.end54, !dbg !3091

if.then52:                                        ; preds = %for.end45
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !3092
  %prev_bb53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 5, !dbg !3093
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb53, align 8, !dbg !3093
  store %struct.basic_block_def* %68, %struct.basic_block_def** %next, align 8, !dbg !3094
  br label %if.end54, !dbg !3095

if.end54:                                         ; preds = %if.then52, %for.end45
  %69 = load i8, i8* %c_has_outgoing_fallthru, align 1, !dbg !3096
  %tobool55 = icmp ne i8 %69, 0, !dbg !3096
  br i1 %tobool55, label %if.end66, label %if.then56, !dbg !3098

if.then56:                                        ; preds = %if.end54
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3099
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %c.addr, align 8, !dbg !3101
  call void @merge_blocks_move_successor_nojumps(%struct.basic_block_def* %70, %struct.basic_block_def* %71), !dbg !3102
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !3103
  %73 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3104
  %add.ptr57 = getelementptr inbounds %struct.function, %struct.function* %73, i64 0, !dbg !3104
  %cfg58 = getelementptr inbounds %struct.function, %struct.function* %add.ptr57, i32 0, i32 1, !dbg !3104
  %74 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg58, align 8, !dbg !3104
  %x_entry_block_ptr59 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %74, i32 0, i32 0, !dbg !3104
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr59, align 8, !dbg !3104
  %cmp60 = icmp eq %struct.basic_block_def* %72, %75, !dbg !3105
  br i1 %cmp60, label %cond.true62, label %cond.false63, !dbg !3103

cond.true62:                                      ; preds = %if.then56
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !3106
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %76, i32 0, i32 6, !dbg !3107
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3107
  br label %cond.end64, !dbg !3103

cond.false63:                                     ; preds = %if.then56
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !3108
  br label %cond.end64, !dbg !3103

cond.end64:                                       ; preds = %cond.false63, %cond.true62
  %cond65 = phi %struct.basic_block_def* [ %77, %cond.true62 ], [ %78, %cond.false63 ], !dbg !3103
  store %struct.basic_block_def* %cond65, %struct.basic_block_def** %retval, align 8, !dbg !3109
  br label %return, !dbg !3109

if.end66:                                         ; preds = %if.end54
  %79 = load i8, i8* %b_has_incoming_fallthru, align 1, !dbg !3110
  %tobool67 = icmp ne i8 %79, 0, !dbg !3110
  br i1 %tobool67, label %if.then68, label %if.end80, !dbg !3112

if.then68:                                        ; preds = %if.end66
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3113, metadata !DIExpression()), !dbg !3115
  %80 = load %struct.edge_def*, %struct.edge_def** %b_fallthru_edge, align 8, !dbg !3116
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %80, i32 0, i32 0, !dbg !3118
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3118
  %82 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3119
  %add.ptr69 = getelementptr inbounds %struct.function, %struct.function* %82, i64 0, !dbg !3119
  %cfg70 = getelementptr inbounds %struct.function, %struct.function* %add.ptr69, i32 0, i32 1, !dbg !3119
  %83 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg70, align 8, !dbg !3119
  %x_entry_block_ptr71 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %83, i32 0, i32 0, !dbg !3119
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr71, align 8, !dbg !3119
  %cmp72 = icmp eq %struct.basic_block_def* %81, %84, !dbg !3120
  br i1 %cmp72, label %if.then74, label %if.end75, !dbg !3121

if.then74:                                        ; preds = %if.then68
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !3122
  br label %return, !dbg !3122

if.end75:                                         ; preds = %if.then68
  %85 = load %struct.edge_def*, %struct.edge_def** %b_fallthru_edge, align 8, !dbg !3123
  %call76 = call %struct.basic_block_def* @force_nonfallthru(%struct.edge_def* %85), !dbg !3124
  store %struct.basic_block_def* %call76, %struct.basic_block_def** %bb, align 8, !dbg !3125
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3126
  %tobool77 = icmp ne %struct.basic_block_def* %86, null, !dbg !3126
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !3128

if.then78:                                        ; preds = %if.end75
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3129
  call void @notice_new_block(%struct.basic_block_def* %87), !dbg !3130
  br label %if.end79, !dbg !3130

if.end79:                                         ; preds = %if.then78, %if.end75
  br label %if.end80, !dbg !3131

if.end80:                                         ; preds = %if.end79, %if.end66
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3132
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %c.addr, align 8, !dbg !3133
  call void @merge_blocks_move_predecessor_nojumps(%struct.basic_block_def* %88, %struct.basic_block_def* %89), !dbg !3134
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !3135
  %91 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3136
  %add.ptr81 = getelementptr inbounds %struct.function, %struct.function* %91, i64 0, !dbg !3136
  %cfg82 = getelementptr inbounds %struct.function, %struct.function* %add.ptr81, i32 0, i32 1, !dbg !3136
  %92 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg82, align 8, !dbg !3136
  %x_entry_block_ptr83 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %92, i32 0, i32 0, !dbg !3136
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr83, align 8, !dbg !3136
  %cmp84 = icmp eq %struct.basic_block_def* %90, %93, !dbg !3137
  br i1 %cmp84, label %cond.true86, label %cond.false88, !dbg !3135

cond.true86:                                      ; preds = %if.end80
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !3138
  %next_bb87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 6, !dbg !3139
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb87, align 8, !dbg !3139
  br label %cond.end89, !dbg !3135

cond.false88:                                     ; preds = %if.end80
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !3140
  br label %cond.end89, !dbg !3135

cond.end89:                                       ; preds = %cond.false88, %cond.true86
  %cond90 = phi %struct.basic_block_def* [ %95, %cond.true86 ], [ %96, %cond.false88 ], !dbg !3135
  store %struct.basic_block_def* %cond90, %struct.basic_block_def** %retval, align 8, !dbg !3141
  br label %return, !dbg !3141

if.end91:                                         ; preds = %if.else
  br label %if.end92

if.end92:                                         ; preds = %if.end91
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !3142
  br label %return, !dbg !3142

return:                                           ; preds = %if.end92, %cond.end89, %if.then74, %cond.end64, %if.then21, %cond.end, %if.then
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !3143
  ret %struct.basic_block_def* %97, !dbg !3143
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @try_simplify_condjump(%struct.basic_block_def* %cbranch_block) #0 !dbg !3144 {
entry:
  %retval = alloca i8, align 1
  %cbranch_block.addr = alloca %struct.basic_block_def*, align 8
  %jump_block = alloca %struct.basic_block_def*, align 8
  %jump_dest_block = alloca %struct.basic_block_def*, align 8
  %cbranch_dest_block = alloca %struct.basic_block_def*, align 8
  %cbranch_jump_edge = alloca %struct.edge_def*, align 8
  %cbranch_fallthru_edge = alloca %struct.edge_def*, align 8
  %cbranch_insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %cbranch_block, %struct.basic_block_def** %cbranch_block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cbranch_block.addr, metadata !3145, metadata !DIExpression()), !dbg !3146
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %jump_block, metadata !3147, metadata !DIExpression()), !dbg !3148
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %jump_dest_block, metadata !3149, metadata !DIExpression()), !dbg !3150
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cbranch_dest_block, metadata !3151, metadata !DIExpression()), !dbg !3152
  call void @llvm.dbg.declare(metadata %struct.edge_def** %cbranch_jump_edge, metadata !3153, metadata !DIExpression()), !dbg !3154
  call void @llvm.dbg.declare(metadata %struct.edge_def** %cbranch_fallthru_edge, metadata !3155, metadata !DIExpression()), !dbg !3156
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cbranch_insn, metadata !3157, metadata !DIExpression()), !dbg !3158
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3159
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !3159
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3159
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !3159
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3159

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3159
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !3159
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !3159
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !3159
  br label %cond.end, !dbg !3159

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3159

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3159
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !3159
  %cmp = icmp ne i32 %call, 2, !dbg !3161
  br i1 %cmp, label %if.then, label %if.end, !dbg !3162

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !3163
  br label %return, !dbg !3163

if.end:                                           ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3164
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !3164
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3164
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3164
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 1, !dbg !3164
  %6 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3164
  store %struct.rtx_def* %6, %struct.rtx_def** %cbranch_insn, align 8, !dbg !3165
  %7 = load %struct.rtx_def*, %struct.rtx_def** %cbranch_insn, align 8, !dbg !3166
  %call2 = call i32 @any_condjump_p(%struct.rtx_def* %7), !dbg !3168
  %tobool3 = icmp ne i32 %call2, 0, !dbg !3168
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !3169

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3170
  br label %return, !dbg !3170

if.end5:                                          ; preds = %if.end
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3171
  %succs6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !3171
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs6, align 8, !dbg !3171
  %tobool7 = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !3171
  br i1 %tobool7, label %cond.true8, label %cond.false11, !dbg !3171

cond.true8:                                       ; preds = %if.end5
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3171
  %succs9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !3171
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs9, align 8, !dbg !3171
  %base10 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !3171
  br label %cond.end12, !dbg !3171

cond.false11:                                     ; preds = %if.end5
  br label %cond.end12, !dbg !3171

cond.end12:                                       ; preds = %cond.false11, %cond.true8
  %cond13 = phi %struct.VEC_edge_base* [ %base10, %cond.true8 ], [ null, %cond.false11 ], !dbg !3171
  %call14 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond13, i32 0), !dbg !3171
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call14, i32 0, i32 7, !dbg !3171
  %12 = load i32, i32* %flags, align 8, !dbg !3171
  %and = and i32 %12, 1, !dbg !3171
  %tobool15 = icmp ne i32 %and, 0, !dbg !3171
  br i1 %tobool15, label %cond.true16, label %cond.false26, !dbg !3171

cond.true16:                                      ; preds = %cond.end12
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3171
  %succs17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 1, !dbg !3171
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs17, align 8, !dbg !3171
  %tobool18 = icmp ne %struct.VEC_edge_gc* %14, null, !dbg !3171
  br i1 %tobool18, label %cond.true19, label %cond.false22, !dbg !3171

cond.true19:                                      ; preds = %cond.true16
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3171
  %succs20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !3171
  %16 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs20, align 8, !dbg !3171
  %base21 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %16, i32 0, i32 0, !dbg !3171
  br label %cond.end23, !dbg !3171

cond.false22:                                     ; preds = %cond.true16
  br label %cond.end23, !dbg !3171

cond.end23:                                       ; preds = %cond.false22, %cond.true19
  %cond24 = phi %struct.VEC_edge_base* [ %base21, %cond.true19 ], [ null, %cond.false22 ], !dbg !3171
  %call25 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond24, i32 0), !dbg !3171
  br label %cond.end36, !dbg !3171

cond.false26:                                     ; preds = %cond.end12
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3171
  %succs27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !3171
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs27, align 8, !dbg !3171
  %tobool28 = icmp ne %struct.VEC_edge_gc* %18, null, !dbg !3171
  br i1 %tobool28, label %cond.true29, label %cond.false32, !dbg !3171

cond.true29:                                      ; preds = %cond.false26
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3171
  %succs30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 1, !dbg !3171
  %20 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs30, align 8, !dbg !3171
  %base31 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %20, i32 0, i32 0, !dbg !3171
  br label %cond.end33, !dbg !3171

cond.false32:                                     ; preds = %cond.false26
  br label %cond.end33, !dbg !3171

cond.end33:                                       ; preds = %cond.false32, %cond.true29
  %cond34 = phi %struct.VEC_edge_base* [ %base31, %cond.true29 ], [ null, %cond.false32 ], !dbg !3171
  %call35 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond34, i32 1), !dbg !3171
  br label %cond.end36, !dbg !3171

cond.end36:                                       ; preds = %cond.end33, %cond.end23
  %cond37 = phi %struct.edge_def* [ %call25, %cond.end23 ], [ %call35, %cond.end33 ], !dbg !3171
  store %struct.edge_def* %cond37, %struct.edge_def** %cbranch_fallthru_edge, align 8, !dbg !3172
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3173
  %succs38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 1, !dbg !3173
  %22 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs38, align 8, !dbg !3173
  %tobool39 = icmp ne %struct.VEC_edge_gc* %22, null, !dbg !3173
  br i1 %tobool39, label %cond.true40, label %cond.false43, !dbg !3173

cond.true40:                                      ; preds = %cond.end36
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3173
  %succs41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 1, !dbg !3173
  %24 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs41, align 8, !dbg !3173
  %base42 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %24, i32 0, i32 0, !dbg !3173
  br label %cond.end44, !dbg !3173

cond.false43:                                     ; preds = %cond.end36
  br label %cond.end44, !dbg !3173

cond.end44:                                       ; preds = %cond.false43, %cond.true40
  %cond45 = phi %struct.VEC_edge_base* [ %base42, %cond.true40 ], [ null, %cond.false43 ], !dbg !3173
  %call46 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond45, i32 0), !dbg !3173
  %flags47 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call46, i32 0, i32 7, !dbg !3173
  %25 = load i32, i32* %flags47, align 8, !dbg !3173
  %and48 = and i32 %25, 1, !dbg !3173
  %tobool49 = icmp ne i32 %and48, 0, !dbg !3173
  br i1 %tobool49, label %cond.true50, label %cond.false60, !dbg !3173

cond.true50:                                      ; preds = %cond.end44
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3173
  %succs51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 1, !dbg !3173
  %27 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs51, align 8, !dbg !3173
  %tobool52 = icmp ne %struct.VEC_edge_gc* %27, null, !dbg !3173
  br i1 %tobool52, label %cond.true53, label %cond.false56, !dbg !3173

cond.true53:                                      ; preds = %cond.true50
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3173
  %succs54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 1, !dbg !3173
  %29 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs54, align 8, !dbg !3173
  %base55 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %29, i32 0, i32 0, !dbg !3173
  br label %cond.end57, !dbg !3173

cond.false56:                                     ; preds = %cond.true50
  br label %cond.end57, !dbg !3173

cond.end57:                                       ; preds = %cond.false56, %cond.true53
  %cond58 = phi %struct.VEC_edge_base* [ %base55, %cond.true53 ], [ null, %cond.false56 ], !dbg !3173
  %call59 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond58, i32 1), !dbg !3173
  br label %cond.end70, !dbg !3173

cond.false60:                                     ; preds = %cond.end44
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3173
  %succs61 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 1, !dbg !3173
  %31 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs61, align 8, !dbg !3173
  %tobool62 = icmp ne %struct.VEC_edge_gc* %31, null, !dbg !3173
  br i1 %tobool62, label %cond.true63, label %cond.false66, !dbg !3173

cond.true63:                                      ; preds = %cond.false60
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3173
  %succs64 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 1, !dbg !3173
  %33 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs64, align 8, !dbg !3173
  %base65 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %33, i32 0, i32 0, !dbg !3173
  br label %cond.end67, !dbg !3173

cond.false66:                                     ; preds = %cond.false60
  br label %cond.end67, !dbg !3173

cond.end67:                                       ; preds = %cond.false66, %cond.true63
  %cond68 = phi %struct.VEC_edge_base* [ %base65, %cond.true63 ], [ null, %cond.false66 ], !dbg !3173
  %call69 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond68, i32 0), !dbg !3173
  br label %cond.end70, !dbg !3173

cond.end70:                                       ; preds = %cond.end67, %cond.end57
  %cond71 = phi %struct.edge_def* [ %call59, %cond.end57 ], [ %call69, %cond.end67 ], !dbg !3173
  store %struct.edge_def* %cond71, %struct.edge_def** %cbranch_jump_edge, align 8, !dbg !3174
  %34 = load %struct.edge_def*, %struct.edge_def** %cbranch_fallthru_edge, align 8, !dbg !3175
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 1, !dbg !3176
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3176
  store %struct.basic_block_def* %35, %struct.basic_block_def** %jump_block, align 8, !dbg !3177
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3178
  %call72 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %36), !dbg !3180
  %tobool73 = icmp ne i8 %call72, 0, !dbg !3180
  br i1 %tobool73, label %lor.lhs.false, label %if.then79, !dbg !3181

lor.lhs.false:                                    ; preds = %cond.end70
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3182
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 6, !dbg !3183
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3183
  %39 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3184
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %39, i64 0, !dbg !3184
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3184
  %40 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3184
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %40, i32 0, i32 1, !dbg !3184
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3184
  %cmp74 = icmp eq %struct.basic_block_def* %38, %41, !dbg !3185
  br i1 %cmp74, label %if.then79, label %lor.lhs.false75, !dbg !3186

lor.lhs.false75:                                  ; preds = %lor.lhs.false
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3187
  %flags76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 13, !dbg !3187
  %43 = load i32, i32* %flags76, align 8, !dbg !3187
  %and77 = and i32 %43, 1024, !dbg !3187
  %tobool78 = icmp ne i32 %and77, 0, !dbg !3187
  br i1 %tobool78, label %if.end80, label %if.then79, !dbg !3188

if.then79:                                        ; preds = %lor.lhs.false75, %lor.lhs.false, %cond.end70
  store i8 0, i8* %retval, align 1, !dbg !3189
  br label %return, !dbg !3189

if.end80:                                         ; preds = %lor.lhs.false75
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3190
  %call81 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %44), !dbg !3191
  store %struct.basic_block_def* %call81, %struct.basic_block_def** %jump_dest_block, align 8, !dbg !3192
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3193
  %flags82 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 13, !dbg !3193
  %46 = load i32, i32* %flags82, align 8, !dbg !3193
  %and83 = and i32 %46, 96, !dbg !3193
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_dest_block, align 8, !dbg !3195
  %flags84 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 13, !dbg !3195
  %48 = load i32, i32* %flags84, align 8, !dbg !3195
  %and85 = and i32 %48, 96, !dbg !3195
  %cmp86 = icmp ne i32 %and83, %and85, !dbg !3196
  br i1 %cmp86, label %if.then91, label %lor.lhs.false87, !dbg !3197

lor.lhs.false87:                                  ; preds = %if.end80
  %49 = load %struct.edge_def*, %struct.edge_def** %cbranch_jump_edge, align 8, !dbg !3198
  %flags88 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 7, !dbg !3199
  %50 = load i32, i32* %flags88, align 8, !dbg !3199
  %and89 = and i32 %50, 8192, !dbg !3200
  %tobool90 = icmp ne i32 %and89, 0, !dbg !3200
  br i1 %tobool90, label %if.then91, label %if.end92, !dbg !3201

if.then91:                                        ; preds = %lor.lhs.false87, %if.end80
  store i8 0, i8* %retval, align 1, !dbg !3202
  br label %return, !dbg !3202

if.end92:                                         ; preds = %lor.lhs.false87
  %51 = load %struct.edge_def*, %struct.edge_def** %cbranch_jump_edge, align 8, !dbg !3203
  %dest93 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 1, !dbg !3204
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %dest93, align 8, !dbg !3204
  store %struct.basic_block_def* %52, %struct.basic_block_def** %cbranch_dest_block, align 8, !dbg !3205
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_dest_block, align 8, !dbg !3206
  %54 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3208
  %add.ptr94 = getelementptr inbounds %struct.function, %struct.function* %54, i64 0, !dbg !3208
  %cfg95 = getelementptr inbounds %struct.function, %struct.function* %add.ptr94, i32 0, i32 1, !dbg !3208
  %55 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg95, align 8, !dbg !3208
  %x_exit_block_ptr96 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %55, i32 0, i32 1, !dbg !3208
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr96, align 8, !dbg !3208
  %cmp97 = icmp eq %struct.basic_block_def* %53, %56, !dbg !3209
  br i1 %cmp97, label %if.then101, label %lor.lhs.false98, !dbg !3210

lor.lhs.false98:                                  ; preds = %if.end92
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3211
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_dest_block, align 8, !dbg !3212
  %call99 = call zeroext i8 @can_fallthru(%struct.basic_block_def* %57, %struct.basic_block_def* %58), !dbg !3213
  %tobool100 = icmp ne i8 %call99, 0, !dbg !3213
  br i1 %tobool100, label %if.end102, label %if.then101, !dbg !3214

if.then101:                                       ; preds = %lor.lhs.false98, %if.end92
  store i8 0, i8* %retval, align 1, !dbg !3215
  br label %return, !dbg !3215

if.end102:                                        ; preds = %lor.lhs.false98
  %59 = load %struct.rtx_def*, %struct.rtx_def** %cbranch_insn, align 8, !dbg !3216
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_dest_block, align 8, !dbg !3218
  %call103 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %60), !dbg !3219
  %call104 = call i32 @invert_jump(%struct.rtx_def* %59, %struct.rtx_def* %call103, i32 0), !dbg !3220
  %tobool105 = icmp ne i32 %call104, 0, !dbg !3220
  br i1 %tobool105, label %if.end107, label %if.then106, !dbg !3221

if.then106:                                       ; preds = %if.end102
  store i8 0, i8* %retval, align 1, !dbg !3222
  br label %return, !dbg !3222

if.end107:                                        ; preds = %if.end102
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3223
  %tobool108 = icmp ne %struct._IO_FILE* %61, null, !dbg !3223
  br i1 %tobool108, label %if.then109, label %if.end118, !dbg !3225

if.then109:                                       ; preds = %if.end107
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3226
  %63 = load %struct.rtx_def*, %struct.rtx_def** %cbranch_insn, align 8, !dbg !3227
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !3227
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3227
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3227
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !3227
  %64 = load i32, i32* %rt_int, align 8, !dbg !3227
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3228
  %il110 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 7, !dbg !3228
  %rtl111 = bitcast %union.basic_block_il_dependent* %il110 to %struct.rtl_bb_info**, !dbg !3228
  %66 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl111, align 8, !dbg !3228
  %end_112 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %66, i32 0, i32 1, !dbg !3228
  %67 = load %struct.rtx_def*, %struct.rtx_def** %end_112, align 8, !dbg !3228
  %u113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !3228
  %fld114 = bitcast %union.u* %u113 to [1 x %union.rtunion_def]*, !dbg !3228
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i64 0, i64 0, !dbg !3228
  %rt_int116 = bitcast %union.rtunion_def* %arrayidx115 to i32*, !dbg !3228
  %68 = load i32, i32* %rt_int116, align 8, !dbg !3228
  %call117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.12, i64 0, i64 0), i32 %64, i32 %68), !dbg !3229
  br label %if.end118, !dbg !3229

if.end118:                                        ; preds = %if.then109, %if.end107
  %69 = load %struct.edge_def*, %struct.edge_def** %cbranch_jump_edge, align 8, !dbg !3230
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_dest_block, align 8, !dbg !3231
  %call119 = call %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %69, %struct.basic_block_def* %70), !dbg !3232
  store %struct.edge_def* %call119, %struct.edge_def** %cbranch_jump_edge, align 8, !dbg !3233
  %71 = load %struct.edge_def*, %struct.edge_def** %cbranch_fallthru_edge, align 8, !dbg !3234
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_dest_block, align 8, !dbg !3235
  %call120 = call %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %71, %struct.basic_block_def* %72), !dbg !3236
  store %struct.edge_def* %call120, %struct.edge_def** %cbranch_fallthru_edge, align 8, !dbg !3237
  %73 = load %struct.edge_def*, %struct.edge_def** %cbranch_jump_edge, align 8, !dbg !3238
  %flags121 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 7, !dbg !3239
  %74 = load i32, i32* %flags121, align 8, !dbg !3240
  %or = or i32 %74, 1, !dbg !3240
  store i32 %or, i32* %flags121, align 8, !dbg !3240
  %75 = load %struct.edge_def*, %struct.edge_def** %cbranch_fallthru_edge, align 8, !dbg !3241
  %flags122 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %75, i32 0, i32 7, !dbg !3242
  %76 = load i32, i32* %flags122, align 8, !dbg !3243
  %and123 = and i32 %76, -2, !dbg !3243
  store i32 %and123, i32* %flags122, align 8, !dbg !3243
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3244
  call void @update_br_prob_note(%struct.basic_block_def* %77), !dbg !3245
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_block, align 8, !dbg !3246
  call void @delete_basic_block(%struct.basic_block_def* %78), !dbg !3247
  %79 = load %struct.edge_def*, %struct.edge_def** %cbranch_jump_edge, align 8, !dbg !3248
  call void @tidy_fallthru_edge(%struct.edge_def* %79), !dbg !3249
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %cbranch_block.addr, align 8, !dbg !3250
  call void @update_forwarder_flag(%struct.basic_block_def* %80), !dbg !3251
  store i8 1, i8* %retval, align 1, !dbg !3252
  br label %return, !dbg !3252

return:                                           ; preds = %if.end118, %if.then106, %if.then101, %if.then91, %if.then79, %if.then4, %if.then
  %81 = load i8, i8* %retval, align 1, !dbg !3253
  ret i8 %81, !dbg !3253
}

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.edge_def* @try_redirect_by_replacing_jump(%struct.edge_def*, %struct.basic_block_def*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @try_forward_edges(i32 %mode, %struct.basic_block_def* %b) #0 !dbg !3254 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %b.addr = alloca %struct.basic_block_def*, align 8
  %changed = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %threaded_edges = alloca %struct.edge_def**, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %target = alloca %struct.basic_block_def*, align 8
  %first = alloca %struct.basic_block_def*, align 8
  %counter = alloca i32, align 4
  %goto_locus = alloca i32, align 4
  %threaded = alloca i8, align 1
  %nthreaded_edges = alloca i32, align 4
  %may_thread = alloca i8, align 1
  %new_target = alloca %struct.basic_block_def*, align 8
  %new_target_threaded = alloca i8, align 1
  %locus = alloca i32, align 4
  %t = alloca %struct.edge_def*, align 8
  %i = alloca i32, align 4
  %edge_count = alloca i64, align 8
  %edge_probability = alloca i32, align 4
  %edge_frequency = alloca i32, align 4
  %n = alloca i32, align 4
  %t236 = alloca %struct.edge_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3257, metadata !DIExpression()), !dbg !3258
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !3259, metadata !DIExpression()), !dbg !3260
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !3261, metadata !DIExpression()), !dbg !3262
  store i8 0, i8* %changed, align 1, !dbg !3262
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3263, metadata !DIExpression()), !dbg !3264
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3265, metadata !DIExpression()), !dbg !3266
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %threaded_edges, metadata !3267, metadata !DIExpression()), !dbg !3268
  store %struct.edge_def** null, %struct.edge_def*** %threaded_edges, align 8, !dbg !3268
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3269
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !3269
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3269
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3269
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !3269
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3269
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %2, i32 29, %struct.rtx_def* null), !dbg !3271
  %tobool = icmp ne %struct.rtx_def* %call, null, !dbg !3271
  br i1 %tobool, label %if.then, label %if.end, !dbg !3272

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3273
  br label %return, !dbg !3273

if.end:                                           ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3274
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !3274
  %call1 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3274
  %4 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3274
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !3274
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call1, 0, !dbg !3274
  store i32 %6, i32* %5, align 8, !dbg !3274
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !3274
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call1, 1, !dbg !3274
  store %struct.VEC_edge_gc** %8, %struct.VEC_edge_gc*** %7, align 8, !dbg !3274
  %9 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3274
  %10 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3274
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false), !dbg !3274
  br label %for.cond, !dbg !3276

for.cond:                                         ; preds = %if.end297, %do.end, %if.end221, %if.then8, %if.end
  %11 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3277
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 0, !dbg !3277
  %13 = load i32, i32* %12, align 8, !dbg !3277
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 1, !dbg !3277
  %15 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %14, align 8, !dbg !3277
  %call2 = call %struct.edge_def* @ei_safe_edge(i32 %13, %struct.VEC_edge_gc** %15), !dbg !3277
  store %struct.edge_def* %call2, %struct.edge_def** %e, align 8, !dbg !3279
  %tobool3 = icmp ne %struct.edge_def* %call2, null, !dbg !3280
  br i1 %tobool3, label %for.body, label %for.end298, !dbg !3280

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target, metadata !3281, metadata !DIExpression()), !dbg !3283
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first, metadata !3284, metadata !DIExpression()), !dbg !3285
  call void @llvm.dbg.declare(metadata i32* %counter, metadata !3286, metadata !DIExpression()), !dbg !3287
  call void @llvm.dbg.declare(metadata i32* %goto_locus, metadata !3288, metadata !DIExpression()), !dbg !3289
  call void @llvm.dbg.declare(metadata i8* %threaded, metadata !3290, metadata !DIExpression()), !dbg !3291
  store i8 0, i8* %threaded, align 1, !dbg !3291
  call void @llvm.dbg.declare(metadata i32* %nthreaded_edges, metadata !3292, metadata !DIExpression()), !dbg !3293
  store i32 0, i32* %nthreaded_edges, align 4, !dbg !3293
  call void @llvm.dbg.declare(metadata i8* %may_thread, metadata !3294, metadata !DIExpression()), !dbg !3295
  %16 = load i8, i8* @first_pass, align 1, !dbg !3296
  %conv = zext i8 %16 to i32, !dbg !3296
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3297
  %call4 = call zeroext i8 @df_get_bb_dirty(%struct.basic_block_def* %17), !dbg !3298
  %conv5 = zext i8 %call4 to i32, !dbg !3298
  %or = or i32 %conv, %conv5, !dbg !3299
  %conv6 = trunc i32 %or to i8, !dbg !3296
  store i8 %conv6, i8* %may_thread, align 1, !dbg !3295
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3300
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 7, !dbg !3302
  %19 = load i32, i32* %flags, align 8, !dbg !3302
  %and = and i32 %19, 14, !dbg !3303
  %tobool7 = icmp ne i32 %and, 0, !dbg !3303
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !3304

if.then8:                                         ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3305
  br label %for.cond, !dbg !3307, !llvm.loop !3308

if.end9:                                          ; preds = %for.body
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3310
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 1, !dbg !3311
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3311
  store %struct.basic_block_def* %21, %struct.basic_block_def** %first, align 8, !dbg !3312
  store %struct.basic_block_def* %21, %struct.basic_block_def** %target, align 8, !dbg !3313
  store i32 2, i32* %counter, align 4, !dbg !3314
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3315
  %goto_locus10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 5, !dbg !3316
  %23 = load i32, i32* %goto_locus10, align 8, !dbg !3316
  store i32 %23, i32* %goto_locus, align 4, !dbg !3317
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3318
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3320
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !3320
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3320
  %26 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3320
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %26, i32 0, i32 1, !dbg !3320
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3320
  %cmp = icmp ne %struct.basic_block_def* %24, %27, !dbg !3321
  br i1 %cmp, label %land.lhs.true, label %if.end18, !dbg !3322

land.lhs.true:                                    ; preds = %if.end9
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3323
  %il12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 7, !dbg !3323
  %rtl13 = bitcast %union.basic_block_il_dependent* %il12 to %struct.rtl_bb_info**, !dbg !3323
  %29 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl13, align 8, !dbg !3323
  %end_14 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %29, i32 0, i32 1, !dbg !3323
  %30 = load %struct.rtx_def*, %struct.rtx_def** %end_14, align 8, !dbg !3323
  %call15 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %30, i32 29, %struct.rtx_def* null), !dbg !3324
  %tobool16 = icmp ne %struct.rtx_def* %call15, null, !dbg !3324
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !3325

if.then17:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !3326
  br label %return, !dbg !3326

if.end18:                                         ; preds = %land.lhs.true, %if.end9
  br label %while.cond, !dbg !3327

while.cond:                                       ; preds = %if.end174, %if.end18
  %31 = load i32, i32* %counter, align 4, !dbg !3328
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3329
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %32, i64 0, !dbg !3329
  %cfg20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 1, !dbg !3329
  %33 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg20, align 8, !dbg !3329
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %33, i32 0, i32 3, !dbg !3329
  %34 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !3329
  %cmp21 = icmp slt i32 %31, %34, !dbg !3330
  br i1 %cmp21, label %while.body, label %while.end, !dbg !3327

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_target, metadata !3331, metadata !DIExpression()), !dbg !3333
  store %struct.basic_block_def* null, %struct.basic_block_def** %new_target, align 8, !dbg !3333
  call void @llvm.dbg.declare(metadata i8* %new_target_threaded, metadata !3334, metadata !DIExpression()), !dbg !3335
  store i8 0, i8* %new_target_threaded, align 1, !dbg !3335
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3336
  %call23 = call zeroext i8 @df_get_bb_dirty(%struct.basic_block_def* %35), !dbg !3337
  %conv24 = zext i8 %call23 to i32, !dbg !3337
  %36 = load i8, i8* %may_thread, align 1, !dbg !3338
  %conv25 = zext i8 %36 to i32, !dbg !3338
  %or26 = or i32 %conv25, %conv24, !dbg !3338
  %conv27 = trunc i32 %or26 to i8, !dbg !3338
  store i8 %conv27, i8* %may_thread, align 1, !dbg !3338
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3339
  %flags28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 13, !dbg !3339
  %38 = load i32, i32* %flags28, align 8, !dbg !3339
  %and29 = and i32 %38, 1024, !dbg !3339
  %tobool30 = icmp ne i32 %and29, 0, !dbg !3339
  br i1 %tobool30, label %land.lhs.true31, label %if.else120, !dbg !3341

land.lhs.true31:                                  ; preds = %while.body
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3342
  %call32 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %39), !dbg !3343
  %flags33 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call32, i32 0, i32 7, !dbg !3344
  %40 = load i32, i32* %flags33, align 8, !dbg !3344
  %and34 = and i32 %40, 8192, !dbg !3345
  %tobool35 = icmp ne i32 %and34, 0, !dbg !3345
  br i1 %tobool35, label %if.else120, label %land.lhs.true36, !dbg !3346

land.lhs.true36:                                  ; preds = %land.lhs.true31
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3347
  %call37 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %41), !dbg !3348
  %42 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3349
  %add.ptr38 = getelementptr inbounds %struct.function, %struct.function* %42, i64 0, !dbg !3349
  %cfg39 = getelementptr inbounds %struct.function, %struct.function* %add.ptr38, i32 0, i32 1, !dbg !3349
  %43 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg39, align 8, !dbg !3349
  %x_exit_block_ptr40 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %43, i32 0, i32 1, !dbg !3349
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr40, align 8, !dbg !3349
  %cmp41 = icmp ne %struct.basic_block_def* %call37, %44, !dbg !3350
  br i1 %cmp41, label %if.then43, label %if.else120, !dbg !3351

if.then43:                                        ; preds = %land.lhs.true36
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3352
  %call44 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %45), !dbg !3354
  store %struct.basic_block_def* %call44, %struct.basic_block_def** %new_target, align 8, !dbg !3355
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3356
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %new_target, align 8, !dbg !3358
  %cmp45 = icmp eq %struct.basic_block_def* %46, %47, !dbg !3359
  br i1 %cmp45, label %if.then47, label %if.else, !dbg !3360

if.then47:                                        ; preds = %if.then43
  %48 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3361
  %add.ptr48 = getelementptr inbounds %struct.function, %struct.function* %48, i64 0, !dbg !3361
  %cfg49 = getelementptr inbounds %struct.function, %struct.function* %add.ptr48, i32 0, i32 1, !dbg !3361
  %49 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg49, align 8, !dbg !3361
  %x_n_basic_blocks50 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %49, i32 0, i32 3, !dbg !3361
  %50 = load i32, i32* %x_n_basic_blocks50, align 8, !dbg !3361
  store i32 %50, i32* %counter, align 4, !dbg !3362
  br label %if.end119, !dbg !3363

if.else:                                          ; preds = %if.then43
  %51 = load i32, i32* @optimize, align 4, !dbg !3364
  %tobool51 = icmp ne i32 %51, 0, !dbg !3364
  br i1 %tobool51, label %if.end118, label %if.then52, !dbg !3366

if.then52:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !3367, metadata !DIExpression()), !dbg !3369
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3370
  %call53 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %52), !dbg !3371
  %goto_locus54 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call53, i32 0, i32 5, !dbg !3372
  %53 = load i32, i32* %goto_locus54, align 8, !dbg !3372
  store i32 %53, i32* %locus, align 4, !dbg !3369
  %54 = load i32, i32* %locus, align 4, !dbg !3373
  %tobool55 = icmp ne i32 %54, 0, !dbg !3373
  br i1 %tobool55, label %land.lhs.true56, label %if.else65, !dbg !3375

land.lhs.true56:                                  ; preds = %if.then52
  %55 = load i32, i32* %goto_locus, align 4, !dbg !3376
  %tobool57 = icmp ne i32 %55, 0, !dbg !3376
  br i1 %tobool57, label %land.lhs.true58, label %if.else65, !dbg !3377

land.lhs.true58:                                  ; preds = %land.lhs.true56
  %56 = load i32, i32* %locus, align 4, !dbg !3378
  %57 = load i32, i32* %goto_locus, align 4, !dbg !3379
  %call59 = call zeroext i8 @locator_eq(i32 %56, i32 %57), !dbg !3380
  %tobool60 = icmp ne i8 %call59, 0, !dbg !3380
  br i1 %tobool60, label %if.else65, label %if.then61, !dbg !3381

if.then61:                                        ; preds = %land.lhs.true58
  %58 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3382
  %add.ptr62 = getelementptr inbounds %struct.function, %struct.function* %58, i64 0, !dbg !3382
  %cfg63 = getelementptr inbounds %struct.function, %struct.function* %add.ptr62, i32 0, i32 1, !dbg !3382
  %59 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg63, align 8, !dbg !3382
  %x_n_basic_blocks64 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %59, i32 0, i32 3, !dbg !3382
  %60 = load i32, i32* %x_n_basic_blocks64, align 8, !dbg !3382
  store i32 %60, i32* %counter, align 4, !dbg !3383
  br label %if.end69, !dbg !3384

if.else65:                                        ; preds = %land.lhs.true58, %land.lhs.true56, %if.then52
  %61 = load i32, i32* %locus, align 4, !dbg !3385
  %tobool66 = icmp ne i32 %61, 0, !dbg !3385
  br i1 %tobool66, label %if.then67, label %if.end68, !dbg !3387

if.then67:                                        ; preds = %if.else65
  %62 = load i32, i32* %locus, align 4, !dbg !3388
  store i32 %62, i32* %goto_locus, align 4, !dbg !3389
  br label %if.end68, !dbg !3390

if.end68:                                         ; preds = %if.then67, %if.else65
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then61
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3391
  %il70 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 7, !dbg !3391
  %rtl71 = bitcast %union.basic_block_il_dependent* %il70 to %struct.rtl_bb_info**, !dbg !3391
  %64 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl71, align 8, !dbg !3391
  %end_72 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %64, i32 0, i32 1, !dbg !3391
  %65 = load %struct.rtx_def*, %struct.rtx_def** %end_72, align 8, !dbg !3391
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !3391
  %bf.load = load i32, i32* %66, align 8, !dbg !3391
  %bf.clear = and i32 %bf.load, 65535, !dbg !3391
  %cmp73 = icmp eq i32 %bf.clear, 8, !dbg !3391
  br i1 %cmp73, label %if.then98, label %lor.lhs.false, !dbg !3391

lor.lhs.false:                                    ; preds = %if.end69
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3391
  %il75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 7, !dbg !3391
  %rtl76 = bitcast %union.basic_block_il_dependent* %il75 to %struct.rtl_bb_info**, !dbg !3391
  %68 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl76, align 8, !dbg !3391
  %end_77 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %68, i32 0, i32 1, !dbg !3391
  %69 = load %struct.rtx_def*, %struct.rtx_def** %end_77, align 8, !dbg !3391
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !3391
  %bf.load78 = load i32, i32* %70, align 8, !dbg !3391
  %bf.clear79 = and i32 %bf.load78, 65535, !dbg !3391
  %cmp80 = icmp eq i32 %bf.clear79, 7, !dbg !3391
  br i1 %cmp80, label %if.then98, label %lor.lhs.false82, !dbg !3391

lor.lhs.false82:                                  ; preds = %lor.lhs.false
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3391
  %il83 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 7, !dbg !3391
  %rtl84 = bitcast %union.basic_block_il_dependent* %il83 to %struct.rtl_bb_info**, !dbg !3391
  %72 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl84, align 8, !dbg !3391
  %end_85 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %72, i32 0, i32 1, !dbg !3391
  %73 = load %struct.rtx_def*, %struct.rtx_def** %end_85, align 8, !dbg !3391
  %74 = bitcast %struct.rtx_def* %73 to i32*, !dbg !3391
  %bf.load86 = load i32, i32* %74, align 8, !dbg !3391
  %bf.clear87 = and i32 %bf.load86, 65535, !dbg !3391
  %cmp88 = icmp eq i32 %bf.clear87, 9, !dbg !3391
  br i1 %cmp88, label %if.then98, label %lor.lhs.false90, !dbg !3391

lor.lhs.false90:                                  ; preds = %lor.lhs.false82
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3391
  %il91 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 7, !dbg !3391
  %rtl92 = bitcast %union.basic_block_il_dependent* %il91 to %struct.rtl_bb_info**, !dbg !3391
  %76 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl92, align 8, !dbg !3391
  %end_93 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %76, i32 0, i32 1, !dbg !3391
  %77 = load %struct.rtx_def*, %struct.rtx_def** %end_93, align 8, !dbg !3391
  %78 = bitcast %struct.rtx_def* %77 to i32*, !dbg !3391
  %bf.load94 = load i32, i32* %78, align 8, !dbg !3391
  %bf.clear95 = and i32 %bf.load94, 65535, !dbg !3391
  %cmp96 = icmp eq i32 %bf.clear95, 10, !dbg !3391
  br i1 %cmp96, label %if.then98, label %if.end117, !dbg !3393

if.then98:                                        ; preds = %lor.lhs.false90, %lor.lhs.false82, %lor.lhs.false, %if.end69
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3394
  %il99 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 7, !dbg !3394
  %rtl100 = bitcast %union.basic_block_il_dependent* %il99 to %struct.rtl_bb_info**, !dbg !3394
  %80 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl100, align 8, !dbg !3394
  %end_101 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %80, i32 0, i32 1, !dbg !3394
  %81 = load %struct.rtx_def*, %struct.rtx_def** %end_101, align 8, !dbg !3394
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !3394
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3394
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 4, !dbg !3394
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !3394
  %82 = load i32, i32* %rt_int, align 8, !dbg !3394
  store i32 %82, i32* %locus, align 4, !dbg !3396
  %83 = load i32, i32* %locus, align 4, !dbg !3397
  %tobool102 = icmp ne i32 %83, 0, !dbg !3397
  br i1 %tobool102, label %land.lhs.true103, label %if.else112, !dbg !3399

land.lhs.true103:                                 ; preds = %if.then98
  %84 = load i32, i32* %goto_locus, align 4, !dbg !3400
  %tobool104 = icmp ne i32 %84, 0, !dbg !3400
  br i1 %tobool104, label %land.lhs.true105, label %if.else112, !dbg !3401

land.lhs.true105:                                 ; preds = %land.lhs.true103
  %85 = load i32, i32* %locus, align 4, !dbg !3402
  %86 = load i32, i32* %goto_locus, align 4, !dbg !3403
  %call106 = call zeroext i8 @locator_eq(i32 %85, i32 %86), !dbg !3404
  %tobool107 = icmp ne i8 %call106, 0, !dbg !3404
  br i1 %tobool107, label %if.else112, label %if.then108, !dbg !3405

if.then108:                                       ; preds = %land.lhs.true105
  %87 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3406
  %add.ptr109 = getelementptr inbounds %struct.function, %struct.function* %87, i64 0, !dbg !3406
  %cfg110 = getelementptr inbounds %struct.function, %struct.function* %add.ptr109, i32 0, i32 1, !dbg !3406
  %88 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg110, align 8, !dbg !3406
  %x_n_basic_blocks111 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %88, i32 0, i32 3, !dbg !3406
  %89 = load i32, i32* %x_n_basic_blocks111, align 8, !dbg !3406
  store i32 %89, i32* %counter, align 4, !dbg !3407
  br label %if.end116, !dbg !3408

if.else112:                                       ; preds = %land.lhs.true105, %land.lhs.true103, %if.then98
  %90 = load i32, i32* %locus, align 4, !dbg !3409
  %tobool113 = icmp ne i32 %90, 0, !dbg !3409
  br i1 %tobool113, label %if.then114, label %if.end115, !dbg !3411

if.then114:                                       ; preds = %if.else112
  %91 = load i32, i32* %locus, align 4, !dbg !3412
  store i32 %91, i32* %goto_locus, align 4, !dbg !3413
  br label %if.end115, !dbg !3414

if.end115:                                        ; preds = %if.then114, %if.else112
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %if.then108
  br label %if.end117, !dbg !3415

if.end117:                                        ; preds = %if.end116, %lor.lhs.false90
  br label %if.end118, !dbg !3416

if.end118:                                        ; preds = %if.end117, %if.else
  br label %if.end119

if.end119:                                        ; preds = %if.end118, %if.then47
  br label %if.end171, !dbg !3417

if.else120:                                       ; preds = %land.lhs.true36, %land.lhs.true31, %while.body
  %92 = load i32, i32* %mode.addr, align 4, !dbg !3418
  %and121 = and i32 %92, 8, !dbg !3420
  %tobool122 = icmp ne i32 %and121, 0, !dbg !3420
  br i1 %tobool122, label %land.lhs.true123, label %if.end170, !dbg !3421

land.lhs.true123:                                 ; preds = %if.else120
  %93 = load i8, i8* %may_thread, align 1, !dbg !3422
  %conv124 = zext i8 %93 to i32, !dbg !3422
  %tobool125 = icmp ne i32 %conv124, 0, !dbg !3422
  br i1 %tobool125, label %if.then126, label %if.end170, !dbg !3423

if.then126:                                       ; preds = %land.lhs.true123
  call void @llvm.dbg.declare(metadata %struct.edge_def** %t, metadata !3424, metadata !DIExpression()), !dbg !3426
  %94 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3427
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3428
  %call127 = call %struct.edge_def* @thread_jump(%struct.edge_def* %94, %struct.basic_block_def* %95), !dbg !3429
  store %struct.edge_def* %call127, %struct.edge_def** %t, align 8, !dbg !3426
  %96 = load %struct.edge_def*, %struct.edge_def** %t, align 8, !dbg !3430
  %tobool128 = icmp ne %struct.edge_def* %96, null, !dbg !3430
  br i1 %tobool128, label %if.then129, label %if.end169, !dbg !3432

if.then129:                                       ; preds = %if.then126
  %97 = load %struct.edge_def**, %struct.edge_def*** %threaded_edges, align 8, !dbg !3433
  %tobool130 = icmp ne %struct.edge_def** %97, null, !dbg !3433
  br i1 %tobool130, label %if.else137, label %if.then131, !dbg !3436

if.then131:                                       ; preds = %if.then129
  %98 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3437
  %add.ptr132 = getelementptr inbounds %struct.function, %struct.function* %98, i64 0, !dbg !3437
  %cfg133 = getelementptr inbounds %struct.function, %struct.function* %add.ptr132, i32 0, i32 1, !dbg !3437
  %99 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg133, align 8, !dbg !3437
  %x_n_basic_blocks134 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %99, i32 0, i32 3, !dbg !3437
  %100 = load i32, i32* %x_n_basic_blocks134, align 8, !dbg !3437
  %conv135 = sext i32 %100 to i64, !dbg !3437
  %mul = mul i64 8, %conv135, !dbg !3437
  %call136 = call i8* @xmalloc(i64 %mul), !dbg !3437
  %101 = bitcast i8* %call136 to %struct.edge_def**, !dbg !3437
  store %struct.edge_def** %101, %struct.edge_def*** %threaded_edges, align 8, !dbg !3438
  br label %if.end154, !dbg !3439

if.else137:                                       ; preds = %if.then129
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3440, metadata !DIExpression()), !dbg !3442
  store i32 0, i32* %i, align 4, !dbg !3443
  br label %for.cond138, !dbg !3445

for.cond138:                                      ; preds = %for.inc, %if.else137
  %102 = load i32, i32* %i, align 4, !dbg !3446
  %103 = load i32, i32* %nthreaded_edges, align 4, !dbg !3448
  %cmp139 = icmp slt i32 %102, %103, !dbg !3449
  br i1 %cmp139, label %for.body141, label %for.end, !dbg !3450

for.body141:                                      ; preds = %for.cond138
  %104 = load %struct.edge_def**, %struct.edge_def*** %threaded_edges, align 8, !dbg !3451
  %105 = load i32, i32* %i, align 4, !dbg !3453
  %idxprom = sext i32 %105 to i64, !dbg !3451
  %arrayidx142 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %104, i64 %idxprom, !dbg !3451
  %106 = load %struct.edge_def*, %struct.edge_def** %arrayidx142, align 8, !dbg !3451
  %107 = load %struct.edge_def*, %struct.edge_def** %t, align 8, !dbg !3454
  %cmp143 = icmp eq %struct.edge_def* %106, %107, !dbg !3455
  br i1 %cmp143, label %if.then145, label %if.end146, !dbg !3456

if.then145:                                       ; preds = %for.body141
  br label %for.end, !dbg !3457

if.end146:                                        ; preds = %for.body141
  br label %for.inc, !dbg !3454

for.inc:                                          ; preds = %if.end146
  %108 = load i32, i32* %i, align 4, !dbg !3458
  %inc = add nsw i32 %108, 1, !dbg !3458
  store i32 %inc, i32* %i, align 4, !dbg !3458
  br label %for.cond138, !dbg !3459, !llvm.loop !3460

for.end:                                          ; preds = %if.then145, %for.cond138
  %109 = load i32, i32* %i, align 4, !dbg !3462
  %110 = load i32, i32* %nthreaded_edges, align 4, !dbg !3464
  %cmp147 = icmp slt i32 %109, %110, !dbg !3465
  br i1 %cmp147, label %if.then149, label %if.end153, !dbg !3466

if.then149:                                       ; preds = %for.end
  %111 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3467
  %add.ptr150 = getelementptr inbounds %struct.function, %struct.function* %111, i64 0, !dbg !3467
  %cfg151 = getelementptr inbounds %struct.function, %struct.function* %add.ptr150, i32 0, i32 1, !dbg !3467
  %112 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg151, align 8, !dbg !3467
  %x_n_basic_blocks152 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %112, i32 0, i32 3, !dbg !3467
  %113 = load i32, i32* %x_n_basic_blocks152, align 8, !dbg !3467
  store i32 %113, i32* %counter, align 4, !dbg !3469
  br label %while.end, !dbg !3470

if.end153:                                        ; preds = %for.end
  br label %if.end154

if.end154:                                        ; preds = %if.end153, %if.then131
  %114 = load %struct.edge_def*, %struct.edge_def** %t, align 8, !dbg !3471
  %dest155 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %114, i32 0, i32 1, !dbg !3473
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %dest155, align 8, !dbg !3473
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3474
  %cmp156 = icmp eq %struct.basic_block_def* %115, %116, !dbg !3475
  br i1 %cmp156, label %if.then158, label %if.end159, !dbg !3476

if.then158:                                       ; preds = %if.end154
  br label %while.end, !dbg !3477

if.end159:                                        ; preds = %if.end154
  %117 = load i32, i32* %nthreaded_edges, align 4, !dbg !3478
  %118 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3478
  %add.ptr160 = getelementptr inbounds %struct.function, %struct.function* %118, i64 0, !dbg !3478
  %cfg161 = getelementptr inbounds %struct.function, %struct.function* %add.ptr160, i32 0, i32 1, !dbg !3478
  %119 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg161, align 8, !dbg !3478
  %x_n_basic_blocks162 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %119, i32 0, i32 3, !dbg !3478
  %120 = load i32, i32* %x_n_basic_blocks162, align 8, !dbg !3478
  %sub = sub nsw i32 %120, 2, !dbg !3478
  %cmp163 = icmp slt i32 %117, %sub, !dbg !3478
  br i1 %cmp163, label %cond.false, label %cond.true, !dbg !3478

cond.true:                                        ; preds = %if.end159
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 533, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3478
  br label %cond.end, !dbg !3478

cond.false:                                       ; preds = %if.end159
  br label %cond.end, !dbg !3478

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3478
  %121 = load %struct.edge_def*, %struct.edge_def** %t, align 8, !dbg !3479
  %122 = load %struct.edge_def**, %struct.edge_def*** %threaded_edges, align 8, !dbg !3480
  %123 = load i32, i32* %nthreaded_edges, align 4, !dbg !3481
  %inc165 = add nsw i32 %123, 1, !dbg !3481
  store i32 %inc165, i32* %nthreaded_edges, align 4, !dbg !3481
  %idxprom166 = sext i32 %123 to i64, !dbg !3480
  %arrayidx167 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %122, i64 %idxprom166, !dbg !3480
  store %struct.edge_def* %121, %struct.edge_def** %arrayidx167, align 8, !dbg !3482
  %124 = load %struct.edge_def*, %struct.edge_def** %t, align 8, !dbg !3483
  %dest168 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %124, i32 0, i32 1, !dbg !3484
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %dest168, align 8, !dbg !3484
  store %struct.basic_block_def* %125, %struct.basic_block_def** %new_target, align 8, !dbg !3485
  store i8 1, i8* %new_target_threaded, align 1, !dbg !3486
  br label %if.end169, !dbg !3487

if.end169:                                        ; preds = %cond.end, %if.then126
  br label %if.end170, !dbg !3488

if.end170:                                        ; preds = %if.end169, %land.lhs.true123, %if.else120
  br label %if.end171

if.end171:                                        ; preds = %if.end170, %if.end119
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %new_target, align 8, !dbg !3489
  %tobool172 = icmp ne %struct.basic_block_def* %126, null, !dbg !3489
  br i1 %tobool172, label %if.end174, label %if.then173, !dbg !3491

if.then173:                                       ; preds = %if.end171
  br label %while.end, !dbg !3492

if.end174:                                        ; preds = %if.end171
  %127 = load i32, i32* %counter, align 4, !dbg !3493
  %inc175 = add nsw i32 %127, 1, !dbg !3493
  store i32 %inc175, i32* %counter, align 4, !dbg !3493
  %128 = load %struct.basic_block_def*, %struct.basic_block_def** %new_target, align 8, !dbg !3494
  store %struct.basic_block_def* %128, %struct.basic_block_def** %target, align 8, !dbg !3495
  %129 = load i8, i8* %new_target_threaded, align 1, !dbg !3496
  %conv176 = zext i8 %129 to i32, !dbg !3496
  %130 = load i8, i8* %threaded, align 1, !dbg !3497
  %conv177 = zext i8 %130 to i32, !dbg !3497
  %or178 = or i32 %conv177, %conv176, !dbg !3497
  %conv179 = trunc i32 %or178 to i8, !dbg !3497
  store i8 %conv179, i8* %threaded, align 1, !dbg !3497
  br label %while.cond, !dbg !3327, !llvm.loop !3498

while.end:                                        ; preds = %if.then173, %if.then158, %if.then149, %while.cond
  %131 = load i32, i32* %counter, align 4, !dbg !3500
  %132 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3502
  %add.ptr180 = getelementptr inbounds %struct.function, %struct.function* %132, i64 0, !dbg !3502
  %cfg181 = getelementptr inbounds %struct.function, %struct.function* %add.ptr180, i32 0, i32 1, !dbg !3502
  %133 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg181, align 8, !dbg !3502
  %x_n_basic_blocks182 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %133, i32 0, i32 3, !dbg !3502
  %134 = load i32, i32* %x_n_basic_blocks182, align 8, !dbg !3502
  %cmp183 = icmp sge i32 %131, %134, !dbg !3503
  br i1 %cmp183, label %if.then185, label %if.else190, !dbg !3504

if.then185:                                       ; preds = %while.end
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3505
  %tobool186 = icmp ne %struct._IO_FILE* %135, null, !dbg !3505
  br i1 %tobool186, label %if.then187, label %if.end189, !dbg !3508

if.then187:                                       ; preds = %if.then185
  %136 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3509
  %137 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3510
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %137, i32 0, i32 9, !dbg !3511
  %138 = load i32, i32* %index, align 8, !dbg !3511
  %call188 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %136, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.13, i64 0, i64 0), i32 %138), !dbg !3512
  br label %if.end189, !dbg !3512

if.end189:                                        ; preds = %if.then187, %if.then185
  br label %if.end297, !dbg !3513

if.else190:                                       ; preds = %while.end
  %139 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3514
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3516
  %cmp191 = icmp eq %struct.basic_block_def* %139, %140, !dbg !3517
  br i1 %cmp191, label %if.then193, label %if.else194, !dbg !3518

if.then193:                                       ; preds = %if.else190
  br label %if.end296, !dbg !3518

if.else194:                                       ; preds = %if.else190
  call void @llvm.dbg.declare(metadata i64* %edge_count, metadata !3519, metadata !DIExpression()), !dbg !3521
  %141 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3522
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %141, i32 0, i32 9, !dbg !3523
  %142 = load i64, i64* %count, align 8, !dbg !3523
  store i64 %142, i64* %edge_count, align 8, !dbg !3521
  call void @llvm.dbg.declare(metadata i32* %edge_probability, metadata !3524, metadata !DIExpression()), !dbg !3525
  %143 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3526
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %143, i32 0, i32 8, !dbg !3527
  %144 = load i32, i32* %probability, align 4, !dbg !3527
  store i32 %144, i32* %edge_probability, align 4, !dbg !3525
  call void @llvm.dbg.declare(metadata i32* %edge_frequency, metadata !3528, metadata !DIExpression()), !dbg !3529
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3530, metadata !DIExpression()), !dbg !3531
  store i32 0, i32* %n, align 4, !dbg !3531
  %145 = load i32, i32* %goto_locus, align 4, !dbg !3532
  %146 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3533
  %goto_locus195 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %146, i32 0, i32 5, !dbg !3534
  store i32 %145, i32* %goto_locus195, align 8, !dbg !3535
  %147 = load i8, i8* %threaded, align 1, !dbg !3536
  %conv196 = zext i8 %147 to i32, !dbg !3536
  %tobool197 = icmp ne i32 %conv196, 0, !dbg !3536
  br i1 %tobool197, label %land.lhs.true198, label %if.else210, !dbg !3538

land.lhs.true198:                                 ; preds = %if.else194
  %148 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3539
  %149 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3540
  %add.ptr199 = getelementptr inbounds %struct.function, %struct.function* %149, i64 0, !dbg !3540
  %cfg200 = getelementptr inbounds %struct.function, %struct.function* %add.ptr199, i32 0, i32 1, !dbg !3540
  %150 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg200, align 8, !dbg !3540
  %x_exit_block_ptr201 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %150, i32 0, i32 1, !dbg !3540
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr201, align 8, !dbg !3540
  %cmp202 = icmp ne %struct.basic_block_def* %148, %151, !dbg !3541
  br i1 %cmp202, label %if.then204, label %if.else210, !dbg !3542

if.then204:                                       ; preds = %land.lhs.true198
  %152 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3543
  %153 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3545
  %call205 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %152, %struct.basic_block_def* %153), !dbg !3546
  call void @notice_new_block(%struct.basic_block_def* %call205), !dbg !3547
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3548
  %tobool206 = icmp ne %struct._IO_FILE* %154, null, !dbg !3548
  br i1 %tobool206, label %if.then207, label %if.end209, !dbg !3550

if.then207:                                       ; preds = %if.then204
  %155 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3551
  %call208 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %155, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14, i64 0, i64 0)), !dbg !3552
  br label %if.end209, !dbg !3552

if.end209:                                        ; preds = %if.then207, %if.then204
  br label %if.end223, !dbg !3553

if.else210:                                       ; preds = %land.lhs.true198, %if.else194
  %156 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3554
  %157 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3556
  %call211 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %156, %struct.basic_block_def* %157), !dbg !3557
  %tobool212 = icmp ne %struct.edge_def* %call211, null, !dbg !3557
  br i1 %tobool212, label %if.end222, label %if.then213, !dbg !3558

if.then213:                                       ; preds = %if.else210
  %158 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3559
  %tobool214 = icmp ne %struct._IO_FILE* %158, null, !dbg !3559
  br i1 %tobool214, label %if.then215, label %if.end221, !dbg !3562

if.then215:                                       ; preds = %if.then213
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3563
  %160 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3564
  %index216 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %160, i32 0, i32 9, !dbg !3565
  %161 = load i32, i32* %index216, align 8, !dbg !3565
  %162 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3566
  %dest217 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %162, i32 0, i32 1, !dbg !3567
  %163 = load %struct.basic_block_def*, %struct.basic_block_def** %dest217, align 8, !dbg !3567
  %index218 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %163, i32 0, i32 9, !dbg !3568
  %164 = load i32, i32* %index218, align 8, !dbg !3568
  %165 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3569
  %index219 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %165, i32 0, i32 9, !dbg !3570
  %166 = load i32, i32* %index219, align 8, !dbg !3570
  %call220 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %159, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.15, i64 0, i64 0), i32 %161, i32 %164, i32 %166), !dbg !3571
  br label %if.end221, !dbg !3571

if.end221:                                        ; preds = %if.then215, %if.then213
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3572
  br label %for.cond, !dbg !3573, !llvm.loop !3308

if.end222:                                        ; preds = %if.else210
  br label %if.end223

if.end223:                                        ; preds = %if.end222, %if.end209
  %167 = load i32, i32* %edge_probability, align 4, !dbg !3574
  %168 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3575
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %168, i32 0, i32 11, !dbg !3576
  %169 = load i32, i32* %frequency, align 8, !dbg !3576
  %mul224 = mul nsw i32 %167, %169, !dbg !3577
  %add = add nsw i32 %mul224, 5000, !dbg !3578
  %div = sdiv i32 %add, 10000, !dbg !3579
  store i32 %div, i32* %edge_frequency, align 4, !dbg !3580
  %170 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3581
  %flags225 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %170, i32 0, i32 13, !dbg !3581
  %171 = load i32, i32* %flags225, align 8, !dbg !3581
  %and226 = and i32 %171, 1024, !dbg !3581
  %tobool227 = icmp ne i32 %and226, 0, !dbg !3581
  br i1 %tobool227, label %if.end235, label %land.lhs.true228, !dbg !3583

land.lhs.true228:                                 ; preds = %if.end223
  %172 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3584
  %call229 = call zeroext i8 @forwarder_block_p(%struct.basic_block_def* %172), !dbg !3585
  %conv230 = zext i8 %call229 to i32, !dbg !3585
  %tobool231 = icmp ne i32 %conv230, 0, !dbg !3585
  br i1 %tobool231, label %if.then232, label %if.end235, !dbg !3586

if.then232:                                       ; preds = %land.lhs.true228
  %173 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3587
  %flags233 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %173, i32 0, i32 13, !dbg !3588
  %174 = load i32, i32* %flags233, align 8, !dbg !3589
  %or234 = or i32 %174, 1024, !dbg !3589
  store i32 %or234, i32* %flags233, align 8, !dbg !3589
  br label %if.end235, !dbg !3587

if.end235:                                        ; preds = %if.then232, %land.lhs.true228, %if.end223
  br label %do.body, !dbg !3590

do.body:                                          ; preds = %do.cond, %if.end235
  call void @llvm.dbg.declare(metadata %struct.edge_def** %t236, metadata !3591, metadata !DIExpression()), !dbg !3593
  %175 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3594
  %call237 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %175), !dbg !3596
  %tobool238 = icmp ne i8 %call237, 0, !dbg !3596
  br i1 %tobool238, label %if.else255, label %if.then239, !dbg !3597

if.then239:                                       ; preds = %do.body
  %176 = load i32, i32* %n, align 4, !dbg !3598
  %177 = load i32, i32* %nthreaded_edges, align 4, !dbg !3598
  %cmp240 = icmp slt i32 %176, %177, !dbg !3598
  br i1 %cmp240, label %cond.false243, label %cond.true242, !dbg !3598

cond.true242:                                     ; preds = %if.then239
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 600, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3598
  br label %cond.end244, !dbg !3598

cond.false243:                                    ; preds = %if.then239
  br label %cond.end244, !dbg !3598

cond.end244:                                      ; preds = %cond.false243, %cond.true242
  %cond245 = phi i32 [ 0, %cond.true242 ], [ 0, %cond.false243 ], !dbg !3598
  %178 = load %struct.edge_def**, %struct.edge_def*** %threaded_edges, align 8, !dbg !3600
  %179 = load i32, i32* %n, align 4, !dbg !3601
  %inc246 = add nsw i32 %179, 1, !dbg !3601
  store i32 %inc246, i32* %n, align 4, !dbg !3601
  %idxprom247 = sext i32 %179 to i64, !dbg !3600
  %arrayidx248 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %178, i64 %idxprom247, !dbg !3600
  %180 = load %struct.edge_def*, %struct.edge_def** %arrayidx248, align 8, !dbg !3600
  store %struct.edge_def* %180, %struct.edge_def** %t236, align 8, !dbg !3602
  %181 = load %struct.edge_def*, %struct.edge_def** %t236, align 8, !dbg !3603
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %181, i32 0, i32 0, !dbg !3603
  %182 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3603
  %183 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3603
  %cmp249 = icmp eq %struct.basic_block_def* %182, %183, !dbg !3603
  br i1 %cmp249, label %cond.false252, label %cond.true251, !dbg !3603

cond.true251:                                     ; preds = %cond.end244
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 602, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3603
  br label %cond.end253, !dbg !3603

cond.false252:                                    ; preds = %cond.end244
  br label %cond.end253, !dbg !3603

cond.end253:                                      ; preds = %cond.false252, %cond.true251
  %cond254 = phi i32 [ 0, %cond.true251 ], [ 0, %cond.false252 ], !dbg !3603
  %184 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3604
  %185 = load i32, i32* %edge_frequency, align 4, !dbg !3605
  %186 = load i64, i64* %edge_count, align 8, !dbg !3606
  %187 = load %struct.edge_def*, %struct.edge_def** %t236, align 8, !dbg !3607
  call void @update_bb_profile_for_threading(%struct.basic_block_def* %184, i32 %185, i64 %186, %struct.edge_def* %187), !dbg !3608
  %188 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3609
  call void @update_br_prob_note(%struct.basic_block_def* %188), !dbg !3610
  br label %if.end284, !dbg !3611

if.else255:                                       ; preds = %do.body
  %189 = load i64, i64* %edge_count, align 8, !dbg !3612
  %190 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3614
  %count256 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %190, i32 0, i32 8, !dbg !3615
  %191 = load i64, i64* %count256, align 8, !dbg !3616
  %sub257 = sub nsw i64 %191, %189, !dbg !3616
  store i64 %sub257, i64* %count256, align 8, !dbg !3616
  %192 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3617
  %count258 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %192, i32 0, i32 8, !dbg !3619
  %193 = load i64, i64* %count258, align 8, !dbg !3619
  %cmp259 = icmp slt i64 %193, 0, !dbg !3620
  br i1 %cmp259, label %if.then261, label %if.end263, !dbg !3621

if.then261:                                       ; preds = %if.else255
  %194 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3622
  %count262 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %194, i32 0, i32 8, !dbg !3623
  store i64 0, i64* %count262, align 8, !dbg !3624
  br label %if.end263, !dbg !3622

if.end263:                                        ; preds = %if.then261, %if.else255
  %195 = load i32, i32* %edge_frequency, align 4, !dbg !3625
  %196 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3626
  %frequency264 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %196, i32 0, i32 11, !dbg !3627
  %197 = load i32, i32* %frequency264, align 8, !dbg !3628
  %sub265 = sub nsw i32 %197, %195, !dbg !3628
  store i32 %sub265, i32* %frequency264, align 8, !dbg !3628
  %198 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3629
  %frequency266 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %198, i32 0, i32 11, !dbg !3631
  %199 = load i32, i32* %frequency266, align 8, !dbg !3631
  %cmp267 = icmp slt i32 %199, 0, !dbg !3632
  br i1 %cmp267, label %if.then269, label %if.end271, !dbg !3633

if.then269:                                       ; preds = %if.end263
  %200 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3634
  %frequency270 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %200, i32 0, i32 11, !dbg !3635
  store i32 0, i32* %frequency270, align 8, !dbg !3636
  br label %if.end271, !dbg !3634

if.end271:                                        ; preds = %if.then269, %if.end263
  %201 = load i32, i32* %n, align 4, !dbg !3637
  %202 = load i32, i32* %nthreaded_edges, align 4, !dbg !3639
  %cmp272 = icmp slt i32 %201, %202, !dbg !3640
  br i1 %cmp272, label %land.lhs.true274, label %if.end282, !dbg !3641

land.lhs.true274:                                 ; preds = %if.end271
  %203 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3642
  %204 = load %struct.edge_def**, %struct.edge_def*** %threaded_edges, align 8, !dbg !3643
  %205 = load i32, i32* %n, align 4, !dbg !3644
  %idxprom275 = sext i32 %205 to i64, !dbg !3643
  %arrayidx276 = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %204, i64 %idxprom275, !dbg !3643
  %206 = load %struct.edge_def*, %struct.edge_def** %arrayidx276, align 8, !dbg !3643
  %src277 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %206, i32 0, i32 0, !dbg !3645
  %207 = load %struct.basic_block_def*, %struct.basic_block_def** %src277, align 8, !dbg !3645
  %cmp278 = icmp eq %struct.basic_block_def* %203, %207, !dbg !3646
  br i1 %cmp278, label %if.then280, label %if.end282, !dbg !3647

if.then280:                                       ; preds = %land.lhs.true274
  %208 = load i32, i32* %n, align 4, !dbg !3648
  %inc281 = add nsw i32 %208, 1, !dbg !3648
  store i32 %inc281, i32* %n, align 4, !dbg !3648
  br label %if.end282, !dbg !3649

if.end282:                                        ; preds = %if.then280, %land.lhs.true274, %if.end271
  %209 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3650
  %call283 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %209), !dbg !3651
  store %struct.edge_def* %call283, %struct.edge_def** %t236, align 8, !dbg !3652
  br label %if.end284

if.end284:                                        ; preds = %if.end282, %cond.end253
  %210 = load i64, i64* %edge_count, align 8, !dbg !3653
  %211 = load %struct.edge_def*, %struct.edge_def** %t236, align 8, !dbg !3654
  %count285 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %211, i32 0, i32 9, !dbg !3655
  %212 = load i64, i64* %count285, align 8, !dbg !3656
  %sub286 = sub nsw i64 %212, %210, !dbg !3656
  store i64 %sub286, i64* %count285, align 8, !dbg !3656
  %213 = load %struct.edge_def*, %struct.edge_def** %t236, align 8, !dbg !3657
  %count287 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %213, i32 0, i32 9, !dbg !3659
  %214 = load i64, i64* %count287, align 8, !dbg !3659
  %cmp288 = icmp slt i64 %214, 0, !dbg !3660
  br i1 %cmp288, label %if.then290, label %if.end292, !dbg !3661

if.then290:                                       ; preds = %if.end284
  %215 = load %struct.edge_def*, %struct.edge_def** %t236, align 8, !dbg !3662
  %count291 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %215, i32 0, i32 9, !dbg !3663
  store i64 0, i64* %count291, align 8, !dbg !3664
  br label %if.end292, !dbg !3662

if.end292:                                        ; preds = %if.then290, %if.end284
  %216 = load %struct.edge_def*, %struct.edge_def** %t236, align 8, !dbg !3665
  %dest293 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %216, i32 0, i32 1, !dbg !3666
  %217 = load %struct.basic_block_def*, %struct.basic_block_def** %dest293, align 8, !dbg !3666
  store %struct.basic_block_def* %217, %struct.basic_block_def** %first, align 8, !dbg !3667
  br label %do.cond, !dbg !3668

do.cond:                                          ; preds = %if.end292
  %218 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !3669
  %219 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !3670
  %cmp294 = icmp ne %struct.basic_block_def* %218, %219, !dbg !3671
  br i1 %cmp294, label %do.body, label %do.end, !dbg !3668, !llvm.loop !3672

do.end:                                           ; preds = %do.cond
  store i8 1, i8* %changed, align 1, !dbg !3674
  br label %for.cond, !dbg !3675, !llvm.loop !3308

if.end296:                                        ; preds = %if.then193
  br label %if.end297

if.end297:                                        ; preds = %if.end296, %if.end189
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3676
  br label %for.cond, !dbg !3677, !llvm.loop !3308

for.end298:                                       ; preds = %for.cond
  %220 = load %struct.edge_def**, %struct.edge_def*** %threaded_edges, align 8, !dbg !3678
  %tobool299 = icmp ne %struct.edge_def** %220, null, !dbg !3678
  br i1 %tobool299, label %if.then300, label %if.end301, !dbg !3680

if.then300:                                       ; preds = %for.end298
  %221 = load %struct.edge_def**, %struct.edge_def*** %threaded_edges, align 8, !dbg !3681
  %222 = bitcast %struct.edge_def** %221 to i8*, !dbg !3681
  call void @free(i8* %222), !dbg !3682
  br label %if.end301, !dbg !3682

if.end301:                                        ; preds = %if.then300, %for.end298
  %223 = load i8, i8* %changed, align 1, !dbg !3683
  store i8 %223, i8* %retval, align 1, !dbg !3684
  br label %return, !dbg !3684

return:                                           ; preds = %if.end301, %if.then17, %if.then
  %224 = load i8, i8* %retval, align 1, !dbg !3685
  ret i8 %224, !dbg !3685
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @try_crossjump_bb(i32 %mode, %struct.basic_block_def* %bb) #0 !dbg !3686 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %e2 = alloca %struct.edge_def*, align 8
  %fallthru = alloca %struct.edge_def*, align 8
  %changed = alloca i8, align 1
  %max = alloca i32, align 4
  %ix = alloca i32, align 4
  %ix2 = alloca i32, align 4
  %ev = alloca %struct.basic_block_def*, align 8
  %ev2 = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3687, metadata !DIExpression()), !dbg !3688
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3689, metadata !DIExpression()), !dbg !3690
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3691, metadata !DIExpression()), !dbg !3692
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e2, metadata !3693, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.declare(metadata %struct.edge_def** %fallthru, metadata !3695, metadata !DIExpression()), !dbg !3696
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !3697, metadata !DIExpression()), !dbg !3698
  call void @llvm.dbg.declare(metadata i32* %max, metadata !3699, metadata !DIExpression()), !dbg !3700
  call void @llvm.dbg.declare(metadata i32* %ix, metadata !3701, metadata !DIExpression()), !dbg !3702
  call void @llvm.dbg.declare(metadata i32* %ix2, metadata !3703, metadata !DIExpression()), !dbg !3704
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ev, metadata !3705, metadata !DIExpression()), !dbg !3706
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ev2, metadata !3707, metadata !DIExpression()), !dbg !3708
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3709, metadata !DIExpression()), !dbg !3710
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3711
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !3711
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !3711
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !3711
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3711

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3711
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !3711
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !3711
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !3711
  br label %cond.end, !dbg !3711

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3711

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3711
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !3711
  %cmp = icmp ult i32 %call, 2, !dbg !3713
  br i1 %cmp, label %if.then, label %if.end, !dbg !3714

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !3715
  br label %return, !dbg !3715

if.end:                                           ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3716
  %call2 = call zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def* %4), !dbg !3718
  %conv = zext i8 %call2 to i32, !dbg !3718
  %tobool3 = icmp ne i32 %conv, 0, !dbg !3718
  br i1 %tobool3, label %land.lhs.true, label %if.end10, !dbg !3719

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3720
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3721
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3721
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3721
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3721
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !3721
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3721
  %cmp4 = icmp ne %struct.basic_block_def* %5, %8, !dbg !3722
  br i1 %cmp4, label %land.lhs.true6, label %if.end10, !dbg !3723

land.lhs.true6:                                   ; preds = %land.lhs.true
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3724
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 7, !dbg !3724
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3724
  %10 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3724
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %10, i32 0, i32 1, !dbg !3724
  %11 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3724
  %call7 = call i32 @computed_jump_p(%struct.rtx_def* %11), !dbg !3725
  %tobool8 = icmp ne i32 %call7, 0, !dbg !3725
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !3726

if.then9:                                         ; preds = %land.lhs.true6
  store i8 0, i8* %retval, align 1, !dbg !3727
  br label %return, !dbg !3727

if.end10:                                         ; preds = %land.lhs.true6, %land.lhs.true, %if.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3728
  %preds11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 0, !dbg !3728
  %13 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds11, align 8, !dbg !3728
  %tobool12 = icmp ne %struct.VEC_edge_gc* %13, null, !dbg !3728
  br i1 %tobool12, label %cond.true13, label %cond.false16, !dbg !3728

cond.true13:                                      ; preds = %if.end10
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3728
  %preds14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 0, !dbg !3728
  %15 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds14, align 8, !dbg !3728
  %base15 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %15, i32 0, i32 0, !dbg !3728
  br label %cond.end17, !dbg !3728

cond.false16:                                     ; preds = %if.end10
  br label %cond.end17, !dbg !3728

cond.end17:                                       ; preds = %cond.false16, %cond.true13
  %cond18 = phi %struct.VEC_edge_base* [ %base15, %cond.true13 ], [ null, %cond.false16 ], !dbg !3728
  %call19 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond18, i32 0), !dbg !3728
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call19, i32 0, i32 0, !dbg !3728
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3728
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 13, !dbg !3728
  %17 = load i32, i32* %flags, align 8, !dbg !3728
  %and = and i32 %17, 96, !dbg !3728
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3730
  %preds20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 0, !dbg !3730
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds20, align 8, !dbg !3730
  %tobool21 = icmp ne %struct.VEC_edge_gc* %19, null, !dbg !3730
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !3730

cond.true22:                                      ; preds = %cond.end17
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3730
  %preds23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 0, !dbg !3730
  %21 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds23, align 8, !dbg !3730
  %base24 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %21, i32 0, i32 0, !dbg !3730
  br label %cond.end26, !dbg !3730

cond.false25:                                     ; preds = %cond.end17
  br label %cond.end26, !dbg !3730

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_edge_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !3730
  %call28 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond27, i32 1), !dbg !3730
  %src29 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call28, i32 0, i32 0, !dbg !3730
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %src29, align 8, !dbg !3730
  %flags30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 13, !dbg !3730
  %23 = load i32, i32* %flags30, align 8, !dbg !3730
  %and31 = and i32 %23, 96, !dbg !3730
  %cmp32 = icmp ne i32 %and, %and31, !dbg !3731
  br i1 %cmp32, label %if.then46, label %lor.lhs.false, !dbg !3732

lor.lhs.false:                                    ; preds = %cond.end26
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3733
  %preds34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 0, !dbg !3733
  %25 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds34, align 8, !dbg !3733
  %tobool35 = icmp ne %struct.VEC_edge_gc* %25, null, !dbg !3733
  br i1 %tobool35, label %cond.true36, label %cond.false39, !dbg !3733

cond.true36:                                      ; preds = %lor.lhs.false
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3733
  %preds37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 0, !dbg !3733
  %27 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds37, align 8, !dbg !3733
  %base38 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %27, i32 0, i32 0, !dbg !3733
  br label %cond.end40, !dbg !3733

cond.false39:                                     ; preds = %lor.lhs.false
  br label %cond.end40, !dbg !3733

cond.end40:                                       ; preds = %cond.false39, %cond.true36
  %cond41 = phi %struct.VEC_edge_base* [ %base38, %cond.true36 ], [ null, %cond.false39 ], !dbg !3733
  %call42 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond41, i32 0), !dbg !3733
  %flags43 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call42, i32 0, i32 7, !dbg !3734
  %28 = load i32, i32* %flags43, align 8, !dbg !3734
  %and44 = and i32 %28, 8192, !dbg !3735
  %tobool45 = icmp ne i32 %and44, 0, !dbg !3735
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !3736

if.then46:                                        ; preds = %cond.end40, %cond.end26
  store i8 0, i8* %retval, align 1, !dbg !3737
  br label %return, !dbg !3737

if.end47:                                         ; preds = %cond.end40
  store %struct.edge_def* null, %struct.edge_def** %fallthru, align 8, !dbg !3738
  %29 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3739
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %29, i64 53, !dbg !3739
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3739
  %30 = load i32, i32* %value, align 8, !dbg !3739
  store i32 %30, i32* %max, align 4, !dbg !3740
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3741
  %preds48 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 0, !dbg !3741
  %32 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds48, align 8, !dbg !3741
  %tobool49 = icmp ne %struct.VEC_edge_gc* %32, null, !dbg !3741
  br i1 %tobool49, label %cond.true50, label %cond.false53, !dbg !3741

cond.true50:                                      ; preds = %if.end47
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3741
  %preds51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 0, !dbg !3741
  %34 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds51, align 8, !dbg !3741
  %base52 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %34, i32 0, i32 0, !dbg !3741
  br label %cond.end54, !dbg !3741

cond.false53:                                     ; preds = %if.end47
  br label %cond.end54, !dbg !3741

cond.end54:                                       ; preds = %cond.false53, %cond.true50
  %cond55 = phi %struct.VEC_edge_base* [ %base52, %cond.true50 ], [ null, %cond.false53 ], !dbg !3741
  %call56 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond55), !dbg !3741
  %35 = load i32, i32* %max, align 4, !dbg !3743
  %cmp57 = icmp ugt i32 %call56, %35, !dbg !3744
  br i1 %cmp57, label %if.then59, label %if.end60, !dbg !3745

if.then59:                                        ; preds = %cond.end54
  store i8 0, i8* %retval, align 1, !dbg !3746
  br label %return, !dbg !3746

if.end60:                                         ; preds = %cond.end54
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3747
  %preds61 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 0, !dbg !3747
  %call62 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds61), !dbg !3747
  %37 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3747
  %38 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %37, i32 0, i32 0, !dbg !3747
  %39 = extractvalue { i32, %struct.VEC_edge_gc** } %call62, 0, !dbg !3747
  store i32 %39, i32* %38, align 8, !dbg !3747
  %40 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %37, i32 0, i32 1, !dbg !3747
  %41 = extractvalue { i32, %struct.VEC_edge_gc** } %call62, 1, !dbg !3747
  store %struct.VEC_edge_gc** %41, %struct.VEC_edge_gc*** %40, align 8, !dbg !3747
  %42 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3747
  %43 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3747
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 16, i1 false), !dbg !3747
  br label %for.cond, !dbg !3747

for.cond:                                         ; preds = %for.inc, %if.end60
  %44 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3749
  %45 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %44, i32 0, i32 0, !dbg !3749
  %46 = load i32, i32* %45, align 8, !dbg !3749
  %47 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %44, i32 0, i32 1, !dbg !3749
  %48 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %47, align 8, !dbg !3749
  %call63 = call zeroext i8 @ei_cond(i32 %46, %struct.VEC_edge_gc** %48, %struct.edge_def** %e), !dbg !3749
  %tobool64 = icmp ne i8 %call63, 0, !dbg !3747
  br i1 %tobool64, label %for.body, label %for.end, !dbg !3747

for.body:                                         ; preds = %for.cond
  %49 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3751
  %flags65 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 7, !dbg !3754
  %50 = load i32, i32* %flags65, align 8, !dbg !3754
  %and66 = and i32 %50, 1, !dbg !3755
  %tobool67 = icmp ne i32 %and66, 0, !dbg !3755
  br i1 %tobool67, label %if.then68, label %if.end69, !dbg !3756

if.then68:                                        ; preds = %for.body
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3757
  store %struct.edge_def* %51, %struct.edge_def** %fallthru, align 8, !dbg !3759
  br label %for.end, !dbg !3760

if.end69:                                         ; preds = %for.body
  br label %for.inc, !dbg !3761

for.inc:                                          ; preds = %if.end69
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3749
  br label %for.cond, !dbg !3749, !llvm.loop !3762

for.end:                                          ; preds = %if.then68, %for.cond
  store i8 0, i8* %changed, align 1, !dbg !3764
  store i32 0, i32* %ix, align 4, !dbg !3765
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3767
  store %struct.basic_block_def* %52, %struct.basic_block_def** %ev, align 8, !dbg !3768
  br label %for.cond70, !dbg !3769

for.cond70:                                       ; preds = %for.end181, %if.then126, %if.then111, %if.then107, %if.then96, %for.end
  %53 = load i32, i32* %ix, align 4, !dbg !3770
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %ev, align 8, !dbg !3772
  %preds71 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 0, !dbg !3772
  %55 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds71, align 8, !dbg !3772
  %tobool72 = icmp ne %struct.VEC_edge_gc* %55, null, !dbg !3772
  br i1 %tobool72, label %cond.true73, label %cond.false76, !dbg !3772

cond.true73:                                      ; preds = %for.cond70
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %ev, align 8, !dbg !3772
  %preds74 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 0, !dbg !3772
  %57 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds74, align 8, !dbg !3772
  %base75 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %57, i32 0, i32 0, !dbg !3772
  br label %cond.end77, !dbg !3772

cond.false76:                                     ; preds = %for.cond70
  br label %cond.end77, !dbg !3772

cond.end77:                                       ; preds = %cond.false76, %cond.true73
  %cond78 = phi %struct.VEC_edge_base* [ %base75, %cond.true73 ], [ null, %cond.false76 ], !dbg !3772
  %call79 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond78), !dbg !3772
  %cmp80 = icmp ult i32 %53, %call79, !dbg !3773
  br i1 %cmp80, label %for.body82, label %for.end182, !dbg !3774

for.body82:                                       ; preds = %cond.end77
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %ev, align 8, !dbg !3775
  %preds83 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 0, !dbg !3775
  %59 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds83, align 8, !dbg !3775
  %tobool84 = icmp ne %struct.VEC_edge_gc* %59, null, !dbg !3775
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !3775

cond.true85:                                      ; preds = %for.body82
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %ev, align 8, !dbg !3775
  %preds86 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 0, !dbg !3775
  %61 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds86, align 8, !dbg !3775
  %base87 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %61, i32 0, i32 0, !dbg !3775
  br label %cond.end89, !dbg !3775

cond.false88:                                     ; preds = %for.body82
  br label %cond.end89, !dbg !3775

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_edge_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !3775
  %62 = load i32, i32* %ix, align 4, !dbg !3775
  %call91 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond90, i32 %62), !dbg !3775
  store %struct.edge_def* %call91, %struct.edge_def** %e, align 8, !dbg !3777
  %63 = load i32, i32* %ix, align 4, !dbg !3778
  %inc = add i32 %63, 1, !dbg !3778
  store i32 %inc, i32* %ix, align 4, !dbg !3778
  %64 = load %struct.edge_def*, %struct.edge_def** %fallthru, align 8, !dbg !3779
  %tobool92 = icmp ne %struct.edge_def* %64, null, !dbg !3779
  br i1 %tobool92, label %if.then93, label %if.end113, !dbg !3781

if.then93:                                        ; preds = %cond.end89
  %65 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3782
  %66 = load %struct.edge_def*, %struct.edge_def** %fallthru, align 8, !dbg !3785
  %cmp94 = icmp eq %struct.edge_def* %65, %66, !dbg !3786
  br i1 %cmp94, label %if.then96, label %if.end97, !dbg !3787

if.then96:                                        ; preds = %if.then93
  br label %for.cond70, !dbg !3788, !llvm.loop !3789

if.end97:                                         ; preds = %if.then93
  %67 = load i8, i8* @first_pass, align 1, !dbg !3791
  %tobool98 = icmp ne i8 %67, 0, !dbg !3791
  br i1 %tobool98, label %if.end108, label %land.lhs.true99, !dbg !3793

land.lhs.true99:                                  ; preds = %if.end97
  %68 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3794
  %src100 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 0, !dbg !3795
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %src100, align 8, !dbg !3795
  %call101 = call zeroext i8 @df_get_bb_dirty(%struct.basic_block_def* %69), !dbg !3796
  %tobool102 = icmp ne i8 %call101, 0, !dbg !3796
  br i1 %tobool102, label %if.end108, label %land.lhs.true103, !dbg !3797

land.lhs.true103:                                 ; preds = %land.lhs.true99
  %70 = load %struct.edge_def*, %struct.edge_def** %fallthru, align 8, !dbg !3798
  %src104 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %70, i32 0, i32 0, !dbg !3799
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %src104, align 8, !dbg !3799
  %call105 = call zeroext i8 @df_get_bb_dirty(%struct.basic_block_def* %71), !dbg !3800
  %tobool106 = icmp ne i8 %call105, 0, !dbg !3800
  br i1 %tobool106, label %if.end108, label %if.then107, !dbg !3801

if.then107:                                       ; preds = %land.lhs.true103
  br label %for.cond70, !dbg !3802, !llvm.loop !3789

if.end108:                                        ; preds = %land.lhs.true103, %land.lhs.true99, %if.end97
  %72 = load i32, i32* %mode.addr, align 4, !dbg !3803
  %73 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3805
  %74 = load %struct.edge_def*, %struct.edge_def** %fallthru, align 8, !dbg !3806
  %call109 = call zeroext i8 @try_crossjump_to_edge(i32 %72, %struct.edge_def* %73, %struct.edge_def* %74), !dbg !3807
  %tobool110 = icmp ne i8 %call109, 0, !dbg !3807
  br i1 %tobool110, label %if.then111, label %if.end112, !dbg !3808

if.then111:                                       ; preds = %if.end108
  store i8 1, i8* %changed, align 1, !dbg !3809
  store i32 0, i32* %ix, align 4, !dbg !3811
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3812
  store %struct.basic_block_def* %75, %struct.basic_block_def** %ev, align 8, !dbg !3813
  br label %for.cond70, !dbg !3814, !llvm.loop !3789

if.end112:                                        ; preds = %if.end108
  br label %if.end113, !dbg !3815

if.end113:                                        ; preds = %if.end112, %cond.end89
  %76 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3816
  %src114 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %76, i32 0, i32 0, !dbg !3816
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %src114, align 8, !dbg !3816
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 1, !dbg !3816
  %78 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3816
  %tobool115 = icmp ne %struct.VEC_edge_gc* %78, null, !dbg !3816
  br i1 %tobool115, label %cond.true116, label %cond.false120, !dbg !3816

cond.true116:                                     ; preds = %if.end113
  %79 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3816
  %src117 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %79, i32 0, i32 0, !dbg !3816
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %src117, align 8, !dbg !3816
  %succs118 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %80, i32 0, i32 1, !dbg !3816
  %81 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs118, align 8, !dbg !3816
  %base119 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %81, i32 0, i32 0, !dbg !3816
  br label %cond.end121, !dbg !3816

cond.false120:                                    ; preds = %if.end113
  br label %cond.end121, !dbg !3816

cond.end121:                                      ; preds = %cond.false120, %cond.true116
  %cond122 = phi %struct.VEC_edge_base* [ %base119, %cond.true116 ], [ null, %cond.false120 ], !dbg !3816
  %call123 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond122, i32 0), !dbg !3816
  %82 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3818
  %cmp124 = icmp ne %struct.edge_def* %call123, %82, !dbg !3819
  br i1 %cmp124, label %if.then126, label %if.end127, !dbg !3820

if.then126:                                       ; preds = %cond.end121
  br label %for.cond70, !dbg !3821, !llvm.loop !3789

if.end127:                                        ; preds = %cond.end121
  store i32 0, i32* %ix2, align 4, !dbg !3822
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3824
  store %struct.basic_block_def* %83, %struct.basic_block_def** %ev2, align 8, !dbg !3825
  br label %for.cond128, !dbg !3826

for.cond128:                                      ; preds = %if.end180, %if.then175, %if.then164, %if.then157, %if.then153, %if.end127
  %84 = load i32, i32* %ix2, align 4, !dbg !3827
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %ev2, align 8, !dbg !3829
  %preds129 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 0, !dbg !3829
  %86 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds129, align 8, !dbg !3829
  %tobool130 = icmp ne %struct.VEC_edge_gc* %86, null, !dbg !3829
  br i1 %tobool130, label %cond.true131, label %cond.false134, !dbg !3829

cond.true131:                                     ; preds = %for.cond128
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %ev2, align 8, !dbg !3829
  %preds132 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 0, !dbg !3829
  %88 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds132, align 8, !dbg !3829
  %base133 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %88, i32 0, i32 0, !dbg !3829
  br label %cond.end135, !dbg !3829

cond.false134:                                    ; preds = %for.cond128
  br label %cond.end135, !dbg !3829

cond.end135:                                      ; preds = %cond.false134, %cond.true131
  %cond136 = phi %struct.VEC_edge_base* [ %base133, %cond.true131 ], [ null, %cond.false134 ], !dbg !3829
  %call137 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond136), !dbg !3829
  %cmp138 = icmp ult i32 %84, %call137, !dbg !3830
  br i1 %cmp138, label %for.body140, label %for.end181, !dbg !3831

for.body140:                                      ; preds = %cond.end135
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %ev2, align 8, !dbg !3832
  %preds141 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 0, !dbg !3832
  %90 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds141, align 8, !dbg !3832
  %tobool142 = icmp ne %struct.VEC_edge_gc* %90, null, !dbg !3832
  br i1 %tobool142, label %cond.true143, label %cond.false146, !dbg !3832

cond.true143:                                     ; preds = %for.body140
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %ev2, align 8, !dbg !3832
  %preds144 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 0, !dbg !3832
  %92 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds144, align 8, !dbg !3832
  %base145 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %92, i32 0, i32 0, !dbg !3832
  br label %cond.end147, !dbg !3832

cond.false146:                                    ; preds = %for.body140
  br label %cond.end147, !dbg !3832

cond.end147:                                      ; preds = %cond.false146, %cond.true143
  %cond148 = phi %struct.VEC_edge_base* [ %base145, %cond.true143 ], [ null, %cond.false146 ], !dbg !3832
  %93 = load i32, i32* %ix2, align 4, !dbg !3832
  %call149 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond148, i32 %93), !dbg !3832
  store %struct.edge_def* %call149, %struct.edge_def** %e2, align 8, !dbg !3834
  %94 = load i32, i32* %ix2, align 4, !dbg !3835
  %inc150 = add i32 %94, 1, !dbg !3835
  store i32 %inc150, i32* %ix2, align 4, !dbg !3835
  %95 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !3836
  %96 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3838
  %cmp151 = icmp eq %struct.edge_def* %95, %96, !dbg !3839
  br i1 %cmp151, label %if.then153, label %if.end154, !dbg !3840

if.then153:                                       ; preds = %cond.end147
  br label %for.cond128, !dbg !3841, !llvm.loop !3842

if.end154:                                        ; preds = %cond.end147
  %97 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !3844
  %98 = load %struct.edge_def*, %struct.edge_def** %fallthru, align 8, !dbg !3846
  %cmp155 = icmp eq %struct.edge_def* %97, %98, !dbg !3847
  br i1 %cmp155, label %if.then157, label %if.end158, !dbg !3848

if.then157:                                       ; preds = %if.end154
  br label %for.cond128, !dbg !3849, !llvm.loop !3842

if.end158:                                        ; preds = %if.end154
  %99 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3850
  %src159 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %99, i32 0, i32 0, !dbg !3852
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %src159, align 8, !dbg !3852
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %100, i32 0, i32 9, !dbg !3853
  %101 = load i32, i32* %index, align 8, !dbg !3853
  %102 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !3854
  %src160 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %102, i32 0, i32 0, !dbg !3855
  %103 = load %struct.basic_block_def*, %struct.basic_block_def** %src160, align 8, !dbg !3855
  %index161 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %103, i32 0, i32 9, !dbg !3856
  %104 = load i32, i32* %index161, align 8, !dbg !3856
  %cmp162 = icmp sgt i32 %101, %104, !dbg !3857
  br i1 %cmp162, label %if.then164, label %if.end165, !dbg !3858

if.then164:                                       ; preds = %if.end158
  br label %for.cond128, !dbg !3859, !llvm.loop !3842

if.end165:                                        ; preds = %if.end158
  %105 = load i8, i8* @first_pass, align 1, !dbg !3860
  %tobool166 = icmp ne i8 %105, 0, !dbg !3860
  br i1 %tobool166, label %if.end176, label %land.lhs.true167, !dbg !3862

land.lhs.true167:                                 ; preds = %if.end165
  %106 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3863
  %src168 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %106, i32 0, i32 0, !dbg !3864
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %src168, align 8, !dbg !3864
  %call169 = call zeroext i8 @df_get_bb_dirty(%struct.basic_block_def* %107), !dbg !3865
  %tobool170 = icmp ne i8 %call169, 0, !dbg !3865
  br i1 %tobool170, label %if.end176, label %land.lhs.true171, !dbg !3866

land.lhs.true171:                                 ; preds = %land.lhs.true167
  %108 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !3867
  %src172 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %108, i32 0, i32 0, !dbg !3868
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %src172, align 8, !dbg !3868
  %call173 = call zeroext i8 @df_get_bb_dirty(%struct.basic_block_def* %109), !dbg !3869
  %tobool174 = icmp ne i8 %call173, 0, !dbg !3869
  br i1 %tobool174, label %if.end176, label %if.then175, !dbg !3870

if.then175:                                       ; preds = %land.lhs.true171
  br label %for.cond128, !dbg !3871, !llvm.loop !3842

if.end176:                                        ; preds = %land.lhs.true171, %land.lhs.true167, %if.end165
  %110 = load i32, i32* %mode.addr, align 4, !dbg !3872
  %111 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3874
  %112 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !3875
  %call177 = call zeroext i8 @try_crossjump_to_edge(i32 %110, %struct.edge_def* %111, %struct.edge_def* %112), !dbg !3876
  %tobool178 = icmp ne i8 %call177, 0, !dbg !3876
  br i1 %tobool178, label %if.then179, label %if.end180, !dbg !3877

if.then179:                                       ; preds = %if.end176
  store i8 1, i8* %changed, align 1, !dbg !3878
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3880
  store %struct.basic_block_def* %113, %struct.basic_block_def** %ev2, align 8, !dbg !3881
  store i32 0, i32* %ix, align 4, !dbg !3882
  br label %for.end181, !dbg !3883

if.end180:                                        ; preds = %if.end176
  br label %for.cond128, !dbg !3884, !llvm.loop !3842

for.end181:                                       ; preds = %if.then179, %cond.end135
  br label %for.cond70, !dbg !3885, !llvm.loop !3789

for.end182:                                       ; preds = %cond.end77
  %114 = load i8, i8* %changed, align 1, !dbg !3886
  %tobool183 = icmp ne i8 %114, 0, !dbg !3886
  br i1 %tobool183, label %if.then184, label %if.end185, !dbg !3888

if.then184:                                       ; preds = %for.end182
  store i8 1, i8* @crossjumps_occured, align 1, !dbg !3889
  br label %if.end185, !dbg !3890

if.end185:                                        ; preds = %if.then184, %for.end182
  %115 = load i8, i8* %changed, align 1, !dbg !3891
  store i8 %115, i8* %retval, align 1, !dbg !3892
  br label %return, !dbg !3892

return:                                           ; preds = %if.end185, %if.then59, %if.then46, %if.then9, %if.then
  %116 = load i8, i8* %retval, align 1, !dbg !3893
  ret i8 %116, !dbg !3893
}

declare dso_local zeroext i8 @forwarder_block_p(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !3894 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !3897, metadata !DIExpression()), !dbg !3898
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3899, metadata !DIExpression()), !dbg !3898
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !3898
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !3898
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3898

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3898
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !3898
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !3898
  %3 = load i32, i32* %num, align 8, !dbg !3898
  %cmp = icmp ult i32 %1, %3, !dbg !3898
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3900
  %land.ext = zext i1 %4 to i32, !dbg !3898
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !3898
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !3898
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3898
  %idxprom = zext i32 %6 to i64, !dbg !3898
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !3898
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !3898
  ret %struct.edge_def* %7, !dbg !3898
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !3901 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !3904, metadata !DIExpression()), !dbg !3905
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !3906, metadata !DIExpression()), !dbg !3907
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !3908
  store i32 0, i32* %index, align 8, !dbg !3909
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !3910
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !3911
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !3912
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !3913
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !3913
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !3913
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !3914 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3917, metadata !DIExpression()), !dbg !3918
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !3919, metadata !DIExpression()), !dbg !3920
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3921
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !3921
  %5 = load i32, i32* %4, align 8, !dbg !3921
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !3921
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !3921
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !3921
  %tobool = icmp ne i8 %call, 0, !dbg !3921
  br i1 %tobool, label %if.else, label %if.then, !dbg !3923

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3924
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !3924
  %10 = load i32, i32* %9, align 8, !dbg !3924
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !3924
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !3924
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !3924
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !3926
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !3927
  store i8 1, i8* %retval, align 1, !dbg !3928
  br label %return, !dbg !3928

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !3929
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !3931
  store i8 0, i8* %retval, align 1, !dbg !3932
  br label %return, !dbg !3932

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !3933
  ret i8 %15, !dbg !3933
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !3934 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !3938, metadata !DIExpression()), !dbg !3939
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !3940
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !3940
  %1 = load i32, i32* %index, align 8, !dbg !3940
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !3940
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !3940
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !3940
  %5 = load i32, i32* %4, align 8, !dbg !3940
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !3940
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !3940
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !3940
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !3940
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3940

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !3940
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !3940
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !3940
  %11 = load i32, i32* %10, align 8, !dbg !3940
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !3940
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !3940
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !3940
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !3940
  br label %cond.end, !dbg !3940

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3940

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3940
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !3940
  %cmp = icmp ult i32 %1, %call2, !dbg !3940
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !3940

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3940
  br label %cond.end5, !dbg !3940

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3940

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !3940
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !3941
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !3942
  %15 = load i32, i32* %index7, align 8, !dbg !3943
  %inc = add i32 %15, 1, !dbg !3943
  store i32 %inc, i32* %index7, align 8, !dbg !3943
  ret void, !dbg !3944
}

; Function Attrs: noinline nounwind uwtable
define internal void @merge_blocks_move_successor_nojumps(%struct.basic_block_def* %a, %struct.basic_block_def* %b) #0 !dbg !3945 {
entry:
  %a.addr = alloca %struct.basic_block_def*, align 8
  %b.addr = alloca %struct.basic_block_def*, align 8
  %barrier = alloca %struct.rtx_def*, align 8
  %real_b_end = alloca %struct.rtx_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %table = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %a, %struct.basic_block_def** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %a.addr, metadata !3948, metadata !DIExpression()), !dbg !3949
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !3950, metadata !DIExpression()), !dbg !3951
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %barrier, metadata !3952, metadata !DIExpression()), !dbg !3953
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %real_b_end, metadata !3954, metadata !DIExpression()), !dbg !3955
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !3956, metadata !DIExpression()), !dbg !3957
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %table, metadata !3958, metadata !DIExpression()), !dbg !3959
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !3960
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !3960
  %1 = load i32, i32* %flags, align 8, !dbg !3960
  %and = and i32 %1, 96, !dbg !3960
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3962
  %flags1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 13, !dbg !3962
  %3 = load i32, i32* %flags1, align 8, !dbg !3962
  %and2 = and i32 %3, 96, !dbg !3962
  %cmp = icmp ne i32 %and, %and2, !dbg !3963
  br i1 %cmp, label %if.then, label %if.end, !dbg !3964

if.then:                                          ; preds = %entry
  br label %return, !dbg !3965

if.end:                                           ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3966
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !3966
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3966
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3966
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 1, !dbg !3966
  %6 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3966
  store %struct.rtx_def* %6, %struct.rtx_def** %real_b_end, align 8, !dbg !3967
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3968
  %il3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 7, !dbg !3968
  %rtl4 = bitcast %union.basic_block_il_dependent* %il3 to %struct.rtl_bb_info**, !dbg !3968
  %8 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl4, align 8, !dbg !3968
  %end_5 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %8, i32 0, i32 1, !dbg !3968
  %9 = load %struct.rtx_def*, %struct.rtx_def** %end_5, align 8, !dbg !3968
  %call = call zeroext i8 @tablejump_p(%struct.rtx_def* %9, %struct.rtx_def** %label, %struct.rtx_def** %table), !dbg !3970
  %conv = zext i8 %call to i32, !dbg !3970
  %tobool = icmp ne i32 %conv, 0, !dbg !3970
  br i1 %tobool, label %land.lhs.true, label %if.end16, !dbg !3971

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !3972
  %call6 = call %struct.rtx_def* @prev_active_insn(%struct.rtx_def* %10), !dbg !3973
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3974
  %il7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 7, !dbg !3974
  %rtl8 = bitcast %union.basic_block_il_dependent* %il7 to %struct.rtl_bb_info**, !dbg !3974
  %12 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl8, align 8, !dbg !3974
  %end_9 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %12, i32 0, i32 1, !dbg !3974
  %13 = load %struct.rtx_def*, %struct.rtx_def** %end_9, align 8, !dbg !3974
  %cmp10 = icmp eq %struct.rtx_def* %call6, %13, !dbg !3975
  br i1 %cmp10, label %if.then12, label %if.end16, !dbg !3976

if.then12:                                        ; preds = %land.lhs.true
  %14 = load %struct.rtx_def*, %struct.rtx_def** %table, align 8, !dbg !3977
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3979
  %il13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 7, !dbg !3979
  %rtl14 = bitcast %union.basic_block_il_dependent* %il13 to %struct.rtl_bb_info**, !dbg !3979
  %16 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl14, align 8, !dbg !3979
  %end_15 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %16, i32 0, i32 1, !dbg !3979
  store %struct.rtx_def* %14, %struct.rtx_def** %end_15, align 8, !dbg !3980
  br label %if.end16, !dbg !3981

if.end16:                                         ; preds = %if.then12, %land.lhs.true, %if.end
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3982
  %il17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 7, !dbg !3982
  %rtl18 = bitcast %union.basic_block_il_dependent* %il17 to %struct.rtl_bb_info**, !dbg !3982
  %18 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl18, align 8, !dbg !3982
  %end_19 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %18, i32 0, i32 1, !dbg !3982
  %19 = load %struct.rtx_def*, %struct.rtx_def** %end_19, align 8, !dbg !3982
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !3982
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3982
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3982
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3982
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3982
  store %struct.rtx_def* %20, %struct.rtx_def** %barrier, align 8, !dbg !3983
  %21 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !3984
  %tobool20 = icmp ne %struct.rtx_def* %21, null, !dbg !3984
  br i1 %tobool20, label %land.lhs.true21, label %if.end26, !dbg !3986

land.lhs.true21:                                  ; preds = %if.end16
  %22 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !3987
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !3987
  %bf.load = load i32, i32* %23, align 8, !dbg !3987
  %bf.clear = and i32 %bf.load, 65535, !dbg !3987
  %cmp22 = icmp eq i32 %bf.clear, 11, !dbg !3987
  br i1 %cmp22, label %if.then24, label %if.end26, !dbg !3988

if.then24:                                        ; preds = %land.lhs.true21
  %24 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !3989
  %call25 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %24), !dbg !3990
  br label %if.end26, !dbg !3990

if.end26:                                         ; preds = %if.then24, %land.lhs.true21, %if.end16
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3991
  %il27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 7, !dbg !3991
  %rtl28 = bitcast %union.basic_block_il_dependent* %il27 to %struct.rtl_bb_info**, !dbg !3991
  %26 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl28, align 8, !dbg !3991
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %26, i32 0, i32 0, !dbg !3991
  %27 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !3991
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3992
  %il29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 7, !dbg !3992
  %rtl30 = bitcast %union.basic_block_il_dependent* %il29 to %struct.rtl_bb_info**, !dbg !3992
  %29 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl30, align 8, !dbg !3992
  %end_31 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %29, i32 0, i32 1, !dbg !3992
  %30 = load %struct.rtx_def*, %struct.rtx_def** %end_31, align 8, !dbg !3992
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !3993
  %il32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 7, !dbg !3993
  %rtl33 = bitcast %union.basic_block_il_dependent* %il32 to %struct.rtl_bb_info**, !dbg !3993
  %32 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl33, align 8, !dbg !3993
  %end_34 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %32, i32 0, i32 1, !dbg !3993
  %33 = load %struct.rtx_def*, %struct.rtx_def** %end_34, align 8, !dbg !3993
  call void @reorder_insns_nobb(%struct.rtx_def* %27, %struct.rtx_def* %30, %struct.rtx_def* %33), !dbg !3994
  %34 = load %struct.rtx_def*, %struct.rtx_def** %real_b_end, align 8, !dbg !3995
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !3996
  %il35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 7, !dbg !3996
  %rtl36 = bitcast %union.basic_block_il_dependent* %il35 to %struct.rtl_bb_info**, !dbg !3996
  %36 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl36, align 8, !dbg !3996
  %end_37 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %36, i32 0, i32 1, !dbg !3996
  store %struct.rtx_def* %34, %struct.rtx_def** %end_37, align 8, !dbg !3997
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3998
  %tobool38 = icmp ne %struct._IO_FILE* %37, null, !dbg !3998
  br i1 %tobool38, label %if.then39, label %if.end42, !dbg !4000

if.then39:                                        ; preds = %if.end26
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4001
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4002
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 9, !dbg !4003
  %40 = load i32, i32* %index, align 8, !dbg !4003
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4004
  %index40 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 9, !dbg !4005
  %42 = load i32, i32* %index40, align 8, !dbg !4005
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10, i64 0, i64 0), i32 %40, i32 %42), !dbg !4006
  br label %if.end42, !dbg !4006

if.end42:                                         ; preds = %if.then39, %if.end26
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4007
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4008
  call void @merge_blocks(%struct.basic_block_def* %43, %struct.basic_block_def* %44), !dbg !4009
  br label %return, !dbg !4010

return:                                           ; preds = %if.end42, %if.then
  ret void, !dbg !4010
}

declare dso_local %struct.basic_block_def* @force_nonfallthru(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @notice_new_block(%struct.basic_block_def* %bb) #0 !dbg !4011 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4012, metadata !DIExpression()), !dbg !4013
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4014
  %tobool = icmp ne %struct.basic_block_def* %0, null, !dbg !4014
  br i1 %tobool, label %if.end, label %if.then, !dbg !4016

if.then:                                          ; preds = %entry
  br label %if.end3, !dbg !4017

if.end:                                           ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4018
  %call = call zeroext i8 @forwarder_block_p(%struct.basic_block_def* %1), !dbg !4020
  %tobool1 = icmp ne i8 %call, 0, !dbg !4020
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !4021

if.then2:                                         ; preds = %if.end
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4022
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 13, !dbg !4023
  %3 = load i32, i32* %flags, align 8, !dbg !4024
  %or = or i32 %3, 1024, !dbg !4024
  store i32 %or, i32* %flags, align 8, !dbg !4024
  br label %if.end3, !dbg !4022

if.end3:                                          ; preds = %if.then, %if.then2, %if.end
  ret void, !dbg !4025
}

; Function Attrs: noinline nounwind uwtable
define internal void @merge_blocks_move_predecessor_nojumps(%struct.basic_block_def* %a, %struct.basic_block_def* %b) #0 !dbg !4026 {
entry:
  %a.addr = alloca %struct.basic_block_def*, align 8
  %b.addr = alloca %struct.basic_block_def*, align 8
  %barrier = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %a, %struct.basic_block_def** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %a.addr, metadata !4027, metadata !DIExpression()), !dbg !4028
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !4029, metadata !DIExpression()), !dbg !4030
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %barrier, metadata !4031, metadata !DIExpression()), !dbg !4032
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4033
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !4033
  %1 = load i32, i32* %flags, align 8, !dbg !4033
  %and = and i32 %1, 96, !dbg !4033
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4035
  %flags1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 13, !dbg !4035
  %3 = load i32, i32* %flags1, align 8, !dbg !4035
  %and2 = and i32 %3, 96, !dbg !4035
  %cmp = icmp ne i32 %and, %and2, !dbg !4036
  br i1 %cmp, label %if.then, label %if.end, !dbg !4037

if.then:                                          ; preds = %entry
  br label %return, !dbg !4038

if.end:                                           ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4039
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !4039
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4039
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4039
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 1, !dbg !4039
  %6 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4039
  %call = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %6), !dbg !4040
  store %struct.rtx_def* %call, %struct.rtx_def** %barrier, align 8, !dbg !4041
  %7 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !4042
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !4042
  %bf.load = load i32, i32* %8, align 8, !dbg !4042
  %bf.clear = and i32 %bf.load, 65535, !dbg !4042
  %cmp3 = icmp eq i32 %bf.clear, 11, !dbg !4042
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !4042

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 667, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4042
  br label %cond.end, !dbg !4042

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4042

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4042
  %9 = load %struct.rtx_def*, %struct.rtx_def** %barrier, align 8, !dbg !4043
  %call4 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %9), !dbg !4044
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4045
  %il5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 7, !dbg !4045
  %rtl6 = bitcast %union.basic_block_il_dependent* %il5 to %struct.rtl_bb_info**, !dbg !4045
  %11 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl6, align 8, !dbg !4045
  %end_7 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %11, i32 0, i32 1, !dbg !4045
  %12 = load %struct.rtx_def*, %struct.rtx_def** %end_7, align 8, !dbg !4045
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4047
  %il8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !4047
  %rtl9 = bitcast %union.basic_block_il_dependent* %il8 to %struct.rtl_bb_info**, !dbg !4047
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl9, align 8, !dbg !4047
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 0, !dbg !4047
  %15 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4047
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4047
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4047
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !4047
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4047
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4047
  %cmp10 = icmp ne %struct.rtx_def* %12, %16, !dbg !4048
  br i1 %cmp10, label %if.then11, label %if.end25, !dbg !4049

if.then11:                                        ; preds = %cond.end
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4050
  %il12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 7, !dbg !4050
  %rtl13 = bitcast %union.basic_block_il_dependent* %il12 to %struct.rtl_bb_info**, !dbg !4050
  %18 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl13, align 8, !dbg !4050
  %head_14 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %18, i32 0, i32 0, !dbg !4050
  %19 = load %struct.rtx_def*, %struct.rtx_def** %head_14, align 8, !dbg !4050
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4051
  %il15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 7, !dbg !4051
  %rtl16 = bitcast %union.basic_block_il_dependent* %il15 to %struct.rtl_bb_info**, !dbg !4051
  %21 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl16, align 8, !dbg !4051
  %end_17 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %21, i32 0, i32 1, !dbg !4051
  %22 = load %struct.rtx_def*, %struct.rtx_def** %end_17, align 8, !dbg !4051
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4052
  %il18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 7, !dbg !4052
  %rtl19 = bitcast %union.basic_block_il_dependent* %il18 to %struct.rtl_bb_info**, !dbg !4052
  %24 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl19, align 8, !dbg !4052
  %head_20 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %24, i32 0, i32 0, !dbg !4052
  %25 = load %struct.rtx_def*, %struct.rtx_def** %head_20, align 8, !dbg !4052
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !4052
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !4052
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 1, !dbg !4052
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !4052
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !4052
  call void @reorder_insns_nobb(%struct.rtx_def* %19, %struct.rtx_def* %22, %struct.rtx_def* %26), !dbg !4053
  br label %if.end25, !dbg !4053

if.end25:                                         ; preds = %if.then11, %cond.end
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4054
  call void @df_set_bb_dirty(%struct.basic_block_def* %27), !dbg !4055
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4056
  %tobool = icmp ne %struct._IO_FILE* %28, null, !dbg !4056
  br i1 %tobool, label %if.then26, label %if.end29, !dbg !4058

if.then26:                                        ; preds = %if.end25
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4059
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4060
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !4061
  %31 = load i32, i32* %index, align 8, !dbg !4061
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4062
  %index27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 9, !dbg !4063
  %33 = load i32, i32* %index27, align 8, !dbg !4063
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.11, i64 0, i64 0), i32 %31, i32 %33), !dbg !4064
  br label %if.end29, !dbg !4064

if.end29:                                         ; preds = %if.then26, %if.end25
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4065
  call void @unlink_block(%struct.basic_block_def* %34), !dbg !4066
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4067
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4068
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 5, !dbg !4069
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !4069
  call void @link_block(%struct.basic_block_def* %35, %struct.basic_block_def* %37), !dbg !4070
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !4071
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4072
  call void @merge_blocks(%struct.basic_block_def* %38, %struct.basic_block_def* %39), !dbg !4073
  br label %return, !dbg !4074

return:                                           ; preds = %if.end29, %if.then
  ret void, !dbg !4074
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !4075 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !4078, metadata !DIExpression()), !dbg !4079
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !4080
  %3 = load i32, i32* %index, align 8, !dbg !4080
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4081
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !4081
  %6 = load i32, i32* %5, align 8, !dbg !4081
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !4081
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !4081
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !4081
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !4081
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4081

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4081
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !4081
  %11 = load i32, i32* %10, align 8, !dbg !4081
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !4081
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !4081
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !4081
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !4081
  br label %cond.end, !dbg !4081

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4081

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4081
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4081
  %cmp = icmp eq i32 %3, %call2, !dbg !4082
  %conv = zext i1 %cmp to i32, !dbg !4082
  %conv3 = trunc i32 %conv to i8, !dbg !4083
  ret i8 %conv3, !dbg !4084
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !4085 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !4088, metadata !DIExpression()), !dbg !4089
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4090
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4090
  %5 = load i32, i32* %4, align 8, !dbg !4090
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4090
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4090
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4090
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !4090
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4090

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4090
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !4090
  %10 = load i32, i32* %9, align 8, !dbg !4090
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !4090
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !4090
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !4090
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !4090
  br label %cond.end, !dbg !4090

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4090

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4090
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !4090
  %13 = load i32, i32* %index, align 8, !dbg !4090
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !4090
  ret %struct.edge_def* %call2, !dbg !4091
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !4092 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !4095, metadata !DIExpression()), !dbg !4096
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !4097
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !4097
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !4097
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4097

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4097
  br label %cond.end, !dbg !4097

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4097

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4097
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !4098
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !4098
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !4099
  ret %struct.VEC_edge_gc* %5, !dbg !4100
}

declare dso_local %struct.rtx_def* @prev_active_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def*) #2

declare dso_local void @df_set_bb_dirty(%struct.basic_block_def*) #2

declare dso_local void @unlink_block(%struct.basic_block_def*) #2

declare dso_local void @link_block(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local i32 @any_condjump_p(%struct.rtx_def*) #2

declare dso_local zeroext i8 @can_fallthru(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local i32 @invert_jump(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @block_label(%struct.basic_block_def*) #2

declare dso_local void @update_br_prob_note(%struct.basic_block_def*) #2

declare dso_local void @tidy_fallthru_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_safe_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !4101 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !4102, metadata !DIExpression()), !dbg !4103
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4104
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4104
  %5 = load i32, i32* %4, align 8, !dbg !4104
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4104
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !4104
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !4104
  %tobool = icmp ne i8 %call, 0, !dbg !4104
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4105

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !4106
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !4106
  %10 = load i32, i32* %9, align 8, !dbg !4106
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !4106
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !4106
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !4106
  br label %cond.end, !dbg !4105

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4105

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !4105
  ret %struct.edge_def* %cond, !dbg !4107
}

declare dso_local zeroext i8 @df_get_bb_dirty(%struct.basic_block_def*) #2

declare dso_local zeroext i8 @locator_eq(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @thread_jump(%struct.edge_def* %e, %struct.basic_block_def* %b) #0 !dbg !4108 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %b.addr = alloca %struct.basic_block_def*, align 8
  %set1 = alloca %struct.rtx_def*, align 8
  %set2 = alloca %struct.rtx_def*, align 8
  %cond1 = alloca %struct.rtx_def*, align 8
  %cond2 = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %code1 = alloca i32, align 4
  %code2 = alloca i32, align 4
  %reversed_code2 = alloca i32, align 4
  %reverse1 = alloca i8, align 1
  %i = alloca i32, align 4
  %nonequal = alloca %struct.bitmap_head_def*, align 8
  %failed = alloca i8, align 1
  %rsi = alloca %struct.bitmap_iterator, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !4111, metadata !DIExpression()), !dbg !4112
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !4113, metadata !DIExpression()), !dbg !4114
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set1, metadata !4115, metadata !DIExpression()), !dbg !4116
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set2, metadata !4117, metadata !DIExpression()), !dbg !4118
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond1, metadata !4119, metadata !DIExpression()), !dbg !4120
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond2, metadata !4121, metadata !DIExpression()), !dbg !4122
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4123, metadata !DIExpression()), !dbg !4124
  call void @llvm.dbg.declare(metadata i32* %code1, metadata !4125, metadata !DIExpression()), !dbg !4126
  call void @llvm.dbg.declare(metadata i32* %code2, metadata !4127, metadata !DIExpression()), !dbg !4128
  call void @llvm.dbg.declare(metadata i32* %reversed_code2, metadata !4129, metadata !DIExpression()), !dbg !4130
  call void @llvm.dbg.declare(metadata i8* %reverse1, metadata !4131, metadata !DIExpression()), !dbg !4132
  store i8 0, i8* %reverse1, align 1, !dbg !4132
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4133, metadata !DIExpression()), !dbg !4134
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %nonequal, metadata !4135, metadata !DIExpression()), !dbg !4136
  call void @llvm.dbg.declare(metadata i8* %failed, metadata !4137, metadata !DIExpression()), !dbg !4138
  store i8 0, i8* %failed, align 1, !dbg !4138
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %rsi, metadata !4139, metadata !DIExpression()), !dbg !4148
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4149
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !4151
  %1 = load i32, i32* %flags, align 8, !dbg !4151
  %and = and i32 %1, 2048, !dbg !4152
  %tobool = icmp ne i32 %and, 0, !dbg !4152
  br i1 %tobool, label %if.then, label %if.end, !dbg !4153

if.then:                                          ; preds = %entry
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !4154
  br label %return, !dbg !4154

if.end:                                           ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4155
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !4155
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4155
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !4155
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4155
  %tobool1 = icmp ne %struct.VEC_edge_gc* %4, null, !dbg !4155
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !4155

cond.true:                                        ; preds = %if.end
  %5 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4155
  %src2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 0, !dbg !4155
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4155
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 1, !dbg !4155
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !4155
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %7, i32 0, i32 0, !dbg !4155
  br label %cond.end, !dbg !4155

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4155

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4155
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4155
  %cmp = icmp ne i32 %call, 2, !dbg !4157
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !4158

if.then4:                                         ; preds = %cond.end
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !4159
  br label %return, !dbg !4159

if.end5:                                          ; preds = %cond.end
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4160
  %succs6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !4160
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs6, align 8, !dbg !4160
  %tobool7 = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !4160
  br i1 %tobool7, label %cond.true8, label %cond.false11, !dbg !4160

cond.true8:                                       ; preds = %if.end5
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4160
  %succs9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !4160
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs9, align 8, !dbg !4160
  %base10 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !4160
  br label %cond.end12, !dbg !4160

cond.false11:                                     ; preds = %if.end5
  br label %cond.end12, !dbg !4160

cond.end12:                                       ; preds = %cond.false11, %cond.true8
  %cond13 = phi %struct.VEC_edge_base* [ %base10, %cond.true8 ], [ null, %cond.false11 ], !dbg !4160
  %call14 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond13), !dbg !4160
  %cmp15 = icmp ne i32 %call14, 2, !dbg !4162
  br i1 %cmp15, label %if.then16, label %if.end18, !dbg !4163

if.then16:                                        ; preds = %cond.end12
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4164
  %flags17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 13, !dbg !4166
  %13 = load i32, i32* %flags17, align 8, !dbg !4167
  %or = or i32 %13, 2048, !dbg !4167
  store i32 %or, i32* %flags17, align 8, !dbg !4167
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !4168
  br label %return, !dbg !4168

if.end18:                                         ; preds = %cond.end12
  %14 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4169
  %src19 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 0, !dbg !4169
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src19, align 8, !dbg !4169
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 7, !dbg !4169
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4169
  %16 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4169
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %16, i32 0, i32 1, !dbg !4169
  %17 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4169
  %call20 = call i32 @any_condjump_p(%struct.rtx_def* %17), !dbg !4171
  %tobool21 = icmp ne i32 %call20, 0, !dbg !4171
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !4172

if.then22:                                        ; preds = %if.end18
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !4173
  br label %return, !dbg !4173

if.end23:                                         ; preds = %if.end18
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4174
  %il24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 7, !dbg !4174
  %rtl25 = bitcast %union.basic_block_il_dependent* %il24 to %struct.rtl_bb_info**, !dbg !4174
  %19 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl25, align 8, !dbg !4174
  %end_26 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %19, i32 0, i32 1, !dbg !4174
  %20 = load %struct.rtx_def*, %struct.rtx_def** %end_26, align 8, !dbg !4174
  %call27 = call i32 @any_condjump_p(%struct.rtx_def* %20), !dbg !4176
  %tobool28 = icmp ne i32 %call27, 0, !dbg !4176
  br i1 %tobool28, label %lor.lhs.false, label %if.then34, !dbg !4177

lor.lhs.false:                                    ; preds = %if.end23
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4178
  %il29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 7, !dbg !4178
  %rtl30 = bitcast %union.basic_block_il_dependent* %il29 to %struct.rtl_bb_info**, !dbg !4178
  %22 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl30, align 8, !dbg !4178
  %end_31 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %22, i32 0, i32 1, !dbg !4178
  %23 = load %struct.rtx_def*, %struct.rtx_def** %end_31, align 8, !dbg !4178
  %call32 = call i32 @onlyjump_p(%struct.rtx_def* %23), !dbg !4179
  %tobool33 = icmp ne i32 %call32, 0, !dbg !4179
  br i1 %tobool33, label %if.end37, label %if.then34, !dbg !4180

if.then34:                                        ; preds = %lor.lhs.false, %if.end23
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4181
  %flags35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 13, !dbg !4183
  %25 = load i32, i32* %flags35, align 8, !dbg !4184
  %or36 = or i32 %25, 2048, !dbg !4184
  store i32 %or36, i32* %flags35, align 8, !dbg !4184
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !4185
  br label %return, !dbg !4185

if.end37:                                         ; preds = %lor.lhs.false
  %26 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4186
  %src38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 0, !dbg !4186
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %src38, align 8, !dbg !4186
  %il39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 7, !dbg !4186
  %rtl40 = bitcast %union.basic_block_il_dependent* %il39 to %struct.rtl_bb_info**, !dbg !4186
  %28 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl40, align 8, !dbg !4186
  %end_41 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %28, i32 0, i32 1, !dbg !4186
  %29 = load %struct.rtx_def*, %struct.rtx_def** %end_41, align 8, !dbg !4186
  %call42 = call %struct.rtx_def* @pc_set(%struct.rtx_def* %29), !dbg !4187
  store %struct.rtx_def* %call42, %struct.rtx_def** %set1, align 8, !dbg !4188
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4189
  %il43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 7, !dbg !4189
  %rtl44 = bitcast %union.basic_block_il_dependent* %il43 to %struct.rtl_bb_info**, !dbg !4189
  %31 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl44, align 8, !dbg !4189
  %end_45 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %31, i32 0, i32 1, !dbg !4189
  %32 = load %struct.rtx_def*, %struct.rtx_def** %end_45, align 8, !dbg !4189
  %call46 = call %struct.rtx_def* @pc_set(%struct.rtx_def* %32), !dbg !4190
  store %struct.rtx_def* %call46, %struct.rtx_def** %set2, align 8, !dbg !4191
  %33 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4192
  %flags47 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 7, !dbg !4194
  %34 = load i32, i32* %flags47, align 8, !dbg !4194
  %and48 = and i32 %34, 1, !dbg !4195
  %cmp49 = icmp ne i32 %and48, 0, !dbg !4196
  %conv = zext i1 %cmp49 to i32, !dbg !4196
  %35 = load %struct.rtx_def*, %struct.rtx_def** %set1, align 8, !dbg !4197
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !4197
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4197
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !4197
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4197
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4197
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !4197
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !4197
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 1, !dbg !4197
  %rt_rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**, !dbg !4197
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx53, align 8, !dbg !4197
  %38 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !4198
  %cmp54 = icmp eq %struct.rtx_def* %37, %38, !dbg !4199
  %conv55 = zext i1 %cmp54 to i32, !dbg !4199
  %cmp56 = icmp ne i32 %conv, %conv55, !dbg !4200
  br i1 %cmp56, label %if.then58, label %if.end59, !dbg !4201

if.then58:                                        ; preds = %if.end37
  store i8 1, i8* %reverse1, align 1, !dbg !4202
  br label %if.end59, !dbg !4203

if.end59:                                         ; preds = %if.then58, %if.end37
  %39 = load %struct.rtx_def*, %struct.rtx_def** %set1, align 8, !dbg !4204
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !4204
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !4204
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 1, !dbg !4204
  %rt_rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**, !dbg !4204
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx63, align 8, !dbg !4204
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !4204
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !4204
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 0, !dbg !4204
  %rt_rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**, !dbg !4204
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx67, align 8, !dbg !4204
  store %struct.rtx_def* %41, %struct.rtx_def** %cond1, align 8, !dbg !4205
  %42 = load %struct.rtx_def*, %struct.rtx_def** %set2, align 8, !dbg !4206
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !4206
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !4206
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 1, !dbg !4206
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !4206
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx71, align 8, !dbg !4206
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !4206
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !4206
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 0, !dbg !4206
  %rt_rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**, !dbg !4206
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx75, align 8, !dbg !4206
  store %struct.rtx_def* %44, %struct.rtx_def** %cond2, align 8, !dbg !4207
  %45 = load i8, i8* %reverse1, align 1, !dbg !4208
  %tobool76 = icmp ne i8 %45, 0, !dbg !4208
  br i1 %tobool76, label %if.then77, label %if.else, !dbg !4210

if.then77:                                        ; preds = %if.end59
  %46 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !4211
  %47 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4212
  %src78 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 0, !dbg !4212
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %src78, align 8, !dbg !4212
  %il79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 7, !dbg !4212
  %rtl80 = bitcast %union.basic_block_il_dependent* %il79 to %struct.rtl_bb_info**, !dbg !4212
  %49 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl80, align 8, !dbg !4212
  %end_81 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %49, i32 0, i32 1, !dbg !4212
  %50 = load %struct.rtx_def*, %struct.rtx_def** %end_81, align 8, !dbg !4212
  %call82 = call i32 @reversed_comparison_code(%struct.rtx_def* %46, %struct.rtx_def* %50), !dbg !4213
  store i32 %call82, i32* %code1, align 4, !dbg !4214
  br label %if.end83, !dbg !4215

if.else:                                          ; preds = %if.end59
  %51 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !4216
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !4216
  %bf.load = load i32, i32* %52, align 8, !dbg !4216
  %bf.clear = and i32 %bf.load, 65535, !dbg !4216
  store i32 %bf.clear, i32* %code1, align 4, !dbg !4217
  br label %if.end83

if.end83:                                         ; preds = %if.else, %if.then77
  %53 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !4218
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !4218
  %bf.load84 = load i32, i32* %54, align 8, !dbg !4218
  %bf.clear85 = and i32 %bf.load84, 65535, !dbg !4218
  store i32 %bf.clear85, i32* %code2, align 4, !dbg !4219
  %55 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !4220
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4221
  %il86 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 7, !dbg !4221
  %rtl87 = bitcast %union.basic_block_il_dependent* %il86 to %struct.rtl_bb_info**, !dbg !4221
  %57 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl87, align 8, !dbg !4221
  %end_88 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %57, i32 0, i32 1, !dbg !4221
  %58 = load %struct.rtx_def*, %struct.rtx_def** %end_88, align 8, !dbg !4221
  %call89 = call i32 @reversed_comparison_code(%struct.rtx_def* %55, %struct.rtx_def* %58), !dbg !4222
  store i32 %call89, i32* %reversed_code2, align 4, !dbg !4223
  %59 = load i32, i32* %code1, align 4, !dbg !4224
  %60 = load i32, i32* %code2, align 4, !dbg !4226
  %call90 = call i32 @comparison_dominates_p(i32 %59, i32 %60), !dbg !4227
  %tobool91 = icmp ne i32 %call90, 0, !dbg !4227
  br i1 %tobool91, label %if.end95, label %land.lhs.true, !dbg !4228

land.lhs.true:                                    ; preds = %if.end83
  %61 = load i32, i32* %code1, align 4, !dbg !4229
  %62 = load i32, i32* %reversed_code2, align 4, !dbg !4230
  %call92 = call i32 @comparison_dominates_p(i32 %61, i32 %62), !dbg !4231
  %tobool93 = icmp ne i32 %call92, 0, !dbg !4231
  br i1 %tobool93, label %if.end95, label %if.then94, !dbg !4232

if.then94:                                        ; preds = %land.lhs.true
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !4233
  br label %return, !dbg !4233

if.end95:                                         ; preds = %land.lhs.true, %if.end83
  %63 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !4234
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !4234
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !4234
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 0, !dbg !4234
  %rt_rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**, !dbg !4234
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx99, align 8, !dbg !4234
  %65 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !4236
  %u100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !4236
  %fld101 = bitcast %union.u* %u100 to [1 x %union.rtunion_def]*, !dbg !4236
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i64 0, i64 0, !dbg !4236
  %rt_rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**, !dbg !4236
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx103, align 8, !dbg !4236
  %call104 = call i32 @rtx_equal_p(%struct.rtx_def* %64, %struct.rtx_def* %66), !dbg !4237
  %tobool105 = icmp ne i32 %call104, 0, !dbg !4237
  br i1 %tobool105, label %lor.lhs.false106, label %if.then117, !dbg !4238

lor.lhs.false106:                                 ; preds = %if.end95
  %67 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !4239
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !4239
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !4239
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 1, !dbg !4239
  %rt_rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**, !dbg !4239
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx110, align 8, !dbg !4239
  %69 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !4240
  %u111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !4240
  %fld112 = bitcast %union.u* %u111 to [1 x %union.rtunion_def]*, !dbg !4240
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i64 0, i64 1, !dbg !4240
  %rt_rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**, !dbg !4240
  %70 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx114, align 8, !dbg !4240
  %call115 = call i32 @rtx_equal_p(%struct.rtx_def* %68, %struct.rtx_def* %70), !dbg !4241
  %tobool116 = icmp ne i32 %call115, 0, !dbg !4241
  br i1 %tobool116, label %if.end118, label %if.then117, !dbg !4242

if.then117:                                       ; preds = %lor.lhs.false106, %if.end95
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !4243
  br label %return, !dbg !4243

if.end118:                                        ; preds = %lor.lhs.false106
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4244
  %il119 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 7, !dbg !4244
  %rtl120 = bitcast %union.basic_block_il_dependent* %il119 to %struct.rtl_bb_info**, !dbg !4244
  %72 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl120, align 8, !dbg !4244
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %72, i32 0, i32 0, !dbg !4244
  %73 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4244
  %u121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !4244
  %fld122 = bitcast %union.u* %u121 to [1 x %union.rtunion_def]*, !dbg !4244
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i64 0, i64 2, !dbg !4244
  %rt_rtx124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.rtx_def**, !dbg !4244
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx124, align 8, !dbg !4244
  store %struct.rtx_def* %74, %struct.rtx_def** %insn, align 8, !dbg !4246
  br label %for.cond, !dbg !4247

for.cond:                                         ; preds = %for.inc, %if.end118
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4248
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4250
  %il125 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %76, i32 0, i32 7, !dbg !4250
  %rtl126 = bitcast %union.basic_block_il_dependent* %il125 to %struct.rtl_bb_info**, !dbg !4250
  %77 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl126, align 8, !dbg !4250
  %end_127 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %77, i32 0, i32 1, !dbg !4250
  %78 = load %struct.rtx_def*, %struct.rtx_def** %end_127, align 8, !dbg !4250
  %u128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1, !dbg !4250
  %fld129 = bitcast %union.u* %u128 to [1 x %union.rtunion_def]*, !dbg !4250
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i64 0, i64 2, !dbg !4250
  %rt_rtx131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**, !dbg !4250
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx131, align 8, !dbg !4250
  %cmp132 = icmp ne %struct.rtx_def* %75, %79, !dbg !4251
  br i1 %cmp132, label %for.body, label %for.end, !dbg !4252

for.body:                                         ; preds = %for.cond
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4253
  %81 = bitcast %struct.rtx_def* %80 to i32*, !dbg !4253
  %bf.load134 = load i32, i32* %81, align 8, !dbg !4253
  %bf.clear135 = and i32 %bf.load134, 65535, !dbg !4253
  %cmp136 = icmp eq i32 %bf.clear135, 8, !dbg !4253
  br i1 %cmp136, label %land.lhs.true153, label %lor.lhs.false138, !dbg !4253

lor.lhs.false138:                                 ; preds = %for.body
  %82 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4253
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !4253
  %bf.load139 = load i32, i32* %83, align 8, !dbg !4253
  %bf.clear140 = and i32 %bf.load139, 65535, !dbg !4253
  %cmp141 = icmp eq i32 %bf.clear140, 7, !dbg !4253
  br i1 %cmp141, label %land.lhs.true153, label %lor.lhs.false143, !dbg !4253

lor.lhs.false143:                                 ; preds = %lor.lhs.false138
  %84 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4253
  %85 = bitcast %struct.rtx_def* %84 to i32*, !dbg !4253
  %bf.load144 = load i32, i32* %85, align 8, !dbg !4253
  %bf.clear145 = and i32 %bf.load144, 65535, !dbg !4253
  %cmp146 = icmp eq i32 %bf.clear145, 9, !dbg !4253
  br i1 %cmp146, label %land.lhs.true153, label %lor.lhs.false148, !dbg !4253

lor.lhs.false148:                                 ; preds = %lor.lhs.false143
  %86 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4253
  %87 = bitcast %struct.rtx_def* %86 to i32*, !dbg !4253
  %bf.load149 = load i32, i32* %87, align 8, !dbg !4253
  %bf.clear150 = and i32 %bf.load149, 65535, !dbg !4253
  %cmp151 = icmp eq i32 %bf.clear150, 10, !dbg !4253
  br i1 %cmp151, label %land.lhs.true153, label %if.end163, !dbg !4255

land.lhs.true153:                                 ; preds = %lor.lhs.false148, %lor.lhs.false143, %lor.lhs.false138, %for.body
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4256
  %u154 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !4256
  %fld155 = bitcast %union.u* %u154 to [1 x %union.rtunion_def]*, !dbg !4256
  %arrayidx156 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld155, i64 0, i64 5, !dbg !4256
  %rt_rtx157 = bitcast %union.rtunion_def* %arrayidx156 to %struct.rtx_def**, !dbg !4256
  %89 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx157, align 8, !dbg !4256
  %call158 = call i32 @side_effects_p(%struct.rtx_def* %89), !dbg !4257
  %tobool159 = icmp ne i32 %call158, 0, !dbg !4257
  br i1 %tobool159, label %if.then160, label %if.end163, !dbg !4258

if.then160:                                       ; preds = %land.lhs.true153
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4259
  %flags161 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 13, !dbg !4261
  %91 = load i32, i32* %flags161, align 8, !dbg !4262
  %or162 = or i32 %91, 2048, !dbg !4262
  store i32 %or162, i32* %flags161, align 8, !dbg !4262
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !4263
  br label %return, !dbg !4263

if.end163:                                        ; preds = %land.lhs.true153, %lor.lhs.false148
  br label %for.inc, !dbg !4264

for.inc:                                          ; preds = %if.end163
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4265
  %u164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1, !dbg !4265
  %fld165 = bitcast %union.u* %u164 to [1 x %union.rtunion_def]*, !dbg !4265
  %arrayidx166 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld165, i64 0, i64 2, !dbg !4265
  %rt_rtx167 = bitcast %union.rtunion_def* %arrayidx166 to %struct.rtx_def**, !dbg !4265
  %93 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx167, align 8, !dbg !4265
  store %struct.rtx_def* %93, %struct.rtx_def** %insn, align 8, !dbg !4266
  br label %for.cond, !dbg !4267, !llvm.loop !4268

for.end:                                          ; preds = %for.cond
  call void @cselib_init(i32 0), !dbg !4270
  %94 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4271
  %src168 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %94, i32 0, i32 0, !dbg !4271
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %src168, align 8, !dbg !4271
  %il169 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 7, !dbg !4271
  %rtl170 = bitcast %union.basic_block_il_dependent* %il169 to %struct.rtl_bb_info**, !dbg !4271
  %96 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl170, align 8, !dbg !4271
  %head_171 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %96, i32 0, i32 0, !dbg !4271
  %97 = load %struct.rtx_def*, %struct.rtx_def** %head_171, align 8, !dbg !4271
  %u172 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1, !dbg !4271
  %fld173 = bitcast %union.u* %u172 to [1 x %union.rtunion_def]*, !dbg !4271
  %arrayidx174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld173, i64 0, i64 2, !dbg !4271
  %rt_rtx175 = bitcast %union.rtunion_def* %arrayidx174 to %struct.rtx_def**, !dbg !4271
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx175, align 8, !dbg !4271
  store %struct.rtx_def* %98, %struct.rtx_def** %insn, align 8, !dbg !4273
  br label %for.cond176, !dbg !4274

for.cond176:                                      ; preds = %for.inc209, %for.end
  %99 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4275
  %100 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4277
  %src177 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %100, i32 0, i32 0, !dbg !4277
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %src177, align 8, !dbg !4277
  %il178 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i32 0, i32 7, !dbg !4277
  %rtl179 = bitcast %union.basic_block_il_dependent* %il178 to %struct.rtl_bb_info**, !dbg !4277
  %102 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl179, align 8, !dbg !4277
  %end_180 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %102, i32 0, i32 1, !dbg !4277
  %103 = load %struct.rtx_def*, %struct.rtx_def** %end_180, align 8, !dbg !4277
  %u181 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !4277
  %fld182 = bitcast %union.u* %u181 to [1 x %union.rtunion_def]*, !dbg !4277
  %arrayidx183 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld182, i64 0, i64 2, !dbg !4277
  %rt_rtx184 = bitcast %union.rtunion_def* %arrayidx183 to %struct.rtx_def**, !dbg !4277
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx184, align 8, !dbg !4277
  %cmp185 = icmp ne %struct.rtx_def* %99, %104, !dbg !4278
  br i1 %cmp185, label %for.body187, label %for.end214, !dbg !4279

for.body187:                                      ; preds = %for.cond176
  %105 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4280
  %106 = bitcast %struct.rtx_def* %105 to i32*, !dbg !4280
  %bf.load188 = load i32, i32* %106, align 8, !dbg !4280
  %bf.clear189 = and i32 %bf.load188, 65535, !dbg !4280
  %cmp190 = icmp eq i32 %bf.clear189, 8, !dbg !4280
  br i1 %cmp190, label %if.then207, label %lor.lhs.false192, !dbg !4280

lor.lhs.false192:                                 ; preds = %for.body187
  %107 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4280
  %108 = bitcast %struct.rtx_def* %107 to i32*, !dbg !4280
  %bf.load193 = load i32, i32* %108, align 8, !dbg !4280
  %bf.clear194 = and i32 %bf.load193, 65535, !dbg !4280
  %cmp195 = icmp eq i32 %bf.clear194, 7, !dbg !4280
  br i1 %cmp195, label %if.then207, label %lor.lhs.false197, !dbg !4280

lor.lhs.false197:                                 ; preds = %lor.lhs.false192
  %109 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4280
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !4280
  %bf.load198 = load i32, i32* %110, align 8, !dbg !4280
  %bf.clear199 = and i32 %bf.load198, 65535, !dbg !4280
  %cmp200 = icmp eq i32 %bf.clear199, 9, !dbg !4280
  br i1 %cmp200, label %if.then207, label %lor.lhs.false202, !dbg !4280

lor.lhs.false202:                                 ; preds = %lor.lhs.false197
  %111 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4280
  %112 = bitcast %struct.rtx_def* %111 to i32*, !dbg !4280
  %bf.load203 = load i32, i32* %112, align 8, !dbg !4280
  %bf.clear204 = and i32 %bf.load203, 65535, !dbg !4280
  %cmp205 = icmp eq i32 %bf.clear204, 10, !dbg !4280
  br i1 %cmp205, label %if.then207, label %if.end208, !dbg !4282

if.then207:                                       ; preds = %lor.lhs.false202, %lor.lhs.false197, %lor.lhs.false192, %for.body187
  %113 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4283
  call void @cselib_process_insn(%struct.rtx_def* %113), !dbg !4284
  br label %if.end208, !dbg !4284

if.end208:                                        ; preds = %if.then207, %lor.lhs.false202
  br label %for.inc209, !dbg !4280

for.inc209:                                       ; preds = %if.end208
  %114 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4285
  %u210 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1, !dbg !4285
  %fld211 = bitcast %union.u* %u210 to [1 x %union.rtunion_def]*, !dbg !4285
  %arrayidx212 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld211, i64 0, i64 2, !dbg !4285
  %rt_rtx213 = bitcast %union.rtunion_def* %arrayidx212 to %struct.rtx_def**, !dbg !4285
  %115 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx213, align 8, !dbg !4285
  store %struct.rtx_def* %115, %struct.rtx_def** %insn, align 8, !dbg !4286
  br label %for.cond176, !dbg !4287, !llvm.loop !4288

for.end214:                                       ; preds = %for.cond176
  %call215 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !4290
  store %struct.bitmap_head_def* %call215, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4291
  %116 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4292
  call void @bitmap_clear(%struct.bitmap_head_def* %116), !dbg !4292
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4293
  %il216 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %117, i32 0, i32 7, !dbg !4293
  %rtl217 = bitcast %union.basic_block_il_dependent* %il216 to %struct.rtl_bb_info**, !dbg !4293
  %118 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl217, align 8, !dbg !4293
  %head_218 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %118, i32 0, i32 0, !dbg !4293
  %119 = load %struct.rtx_def*, %struct.rtx_def** %head_218, align 8, !dbg !4293
  %u219 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1, !dbg !4293
  %fld220 = bitcast %union.u* %u219 to [1 x %union.rtunion_def]*, !dbg !4293
  %arrayidx221 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld220, i64 0, i64 2, !dbg !4293
  %rt_rtx222 = bitcast %union.rtunion_def* %arrayidx221 to %struct.rtx_def**, !dbg !4293
  %120 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx222, align 8, !dbg !4293
  store %struct.rtx_def* %120, %struct.rtx_def** %insn, align 8, !dbg !4295
  br label %for.cond223, !dbg !4296

for.cond223:                                      ; preds = %for.inc291, %for.end214
  %121 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4297
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4299
  %il224 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %122, i32 0, i32 7, !dbg !4299
  %rtl225 = bitcast %union.basic_block_il_dependent* %il224 to %struct.rtl_bb_info**, !dbg !4299
  %123 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl225, align 8, !dbg !4299
  %end_226 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %123, i32 0, i32 1, !dbg !4299
  %124 = load %struct.rtx_def*, %struct.rtx_def** %end_226, align 8, !dbg !4299
  %u227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1, !dbg !4299
  %fld228 = bitcast %union.u* %u227 to [1 x %union.rtunion_def]*, !dbg !4299
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i64 0, i64 2, !dbg !4299
  %rt_rtx230 = bitcast %union.rtunion_def* %arrayidx229 to %struct.rtx_def**, !dbg !4299
  %125 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx230, align 8, !dbg !4299
  %cmp231 = icmp ne %struct.rtx_def* %121, %125, !dbg !4300
  br i1 %cmp231, label %land.rhs, label %land.end, !dbg !4301

land.rhs:                                         ; preds = %for.cond223
  %126 = load i8, i8* %failed, align 1, !dbg !4302
  %tobool233 = icmp ne i8 %126, 0, !dbg !4303
  %lnot = xor i1 %tobool233, true, !dbg !4303
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond223
  %127 = phi i1 [ false, %for.cond223 ], [ %lnot, %land.rhs ], !dbg !4304
  br i1 %127, label %for.body234, label %for.end296, !dbg !4305

for.body234:                                      ; preds = %land.end
  %128 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4306
  %129 = bitcast %struct.rtx_def* %128 to i32*, !dbg !4306
  %bf.load235 = load i32, i32* %129, align 8, !dbg !4306
  %bf.clear236 = and i32 %bf.load235, 65535, !dbg !4306
  %cmp237 = icmp eq i32 %bf.clear236, 8, !dbg !4306
  br i1 %cmp237, label %if.then254, label %lor.lhs.false239, !dbg !4306

lor.lhs.false239:                                 ; preds = %for.body234
  %130 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4306
  %131 = bitcast %struct.rtx_def* %130 to i32*, !dbg !4306
  %bf.load240 = load i32, i32* %131, align 8, !dbg !4306
  %bf.clear241 = and i32 %bf.load240, 65535, !dbg !4306
  %cmp242 = icmp eq i32 %bf.clear241, 7, !dbg !4306
  br i1 %cmp242, label %if.then254, label %lor.lhs.false244, !dbg !4306

lor.lhs.false244:                                 ; preds = %lor.lhs.false239
  %132 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4306
  %133 = bitcast %struct.rtx_def* %132 to i32*, !dbg !4306
  %bf.load245 = load i32, i32* %133, align 8, !dbg !4306
  %bf.clear246 = and i32 %bf.load245, 65535, !dbg !4306
  %cmp247 = icmp eq i32 %bf.clear246, 9, !dbg !4306
  br i1 %cmp247, label %if.then254, label %lor.lhs.false249, !dbg !4306

lor.lhs.false249:                                 ; preds = %lor.lhs.false244
  %134 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4306
  %135 = bitcast %struct.rtx_def* %134 to i32*, !dbg !4306
  %bf.load250 = load i32, i32* %135, align 8, !dbg !4306
  %bf.clear251 = and i32 %bf.load250, 65535, !dbg !4306
  %cmp252 = icmp eq i32 %bf.clear251, 10, !dbg !4306
  br i1 %cmp252, label %if.then254, label %if.end290, !dbg !4309

if.then254:                                       ; preds = %lor.lhs.false249, %lor.lhs.false244, %lor.lhs.false239, %for.body234
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !4310, metadata !DIExpression()), !dbg !4312
  %136 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4313
  %u255 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1, !dbg !4313
  %fld256 = bitcast %union.u* %u255 to [1 x %union.rtunion_def]*, !dbg !4313
  %arrayidx257 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld256, i64 0, i64 5, !dbg !4313
  %rt_rtx258 = bitcast %union.rtunion_def* %arrayidx257 to %struct.rtx_def**, !dbg !4313
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx258, align 8, !dbg !4313
  store %struct.rtx_def* %137, %struct.rtx_def** %pat, align 8, !dbg !4312
  %138 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4314
  %139 = bitcast %struct.rtx_def* %138 to i32*, !dbg !4314
  %bf.load259 = load i32, i32* %139, align 8, !dbg !4314
  %bf.clear260 = and i32 %bf.load259, 65535, !dbg !4314
  %cmp261 = icmp eq i32 %bf.clear260, 15, !dbg !4316
  br i1 %cmp261, label %if.then263, label %if.else283, !dbg !4317

if.then263:                                       ; preds = %if.then254
  store i32 0, i32* %i, align 4, !dbg !4318
  br label %for.cond264, !dbg !4321

for.cond264:                                      ; preds = %for.inc281, %if.then263
  %140 = load i32, i32* %i, align 4, !dbg !4322
  %141 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4324
  %u265 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1, !dbg !4324
  %fld266 = bitcast %union.u* %u265 to [1 x %union.rtunion_def]*, !dbg !4324
  %arrayidx267 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld266, i64 0, i64 0, !dbg !4324
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx267 to %struct.rtvec_def**, !dbg !4324
  %142 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !4324
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %142, i32 0, i32 0, !dbg !4324
  %143 = load i32, i32* %num_elem, align 8, !dbg !4324
  %cmp268 = icmp ult i32 %140, %143, !dbg !4325
  br i1 %cmp268, label %for.body270, label %for.end282, !dbg !4326

for.body270:                                      ; preds = %for.cond264
  %144 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4327
  %u271 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1, !dbg !4327
  %fld272 = bitcast %union.u* %u271 to [1 x %union.rtunion_def]*, !dbg !4327
  %arrayidx273 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld272, i64 0, i64 0, !dbg !4327
  %rt_rtvec274 = bitcast %union.rtunion_def* %arrayidx273 to %struct.rtvec_def**, !dbg !4327
  %145 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec274, align 8, !dbg !4327
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %145, i32 0, i32 1, !dbg !4327
  %146 = load i32, i32* %i, align 4, !dbg !4327
  %idxprom = zext i32 %146 to i64, !dbg !4327
  %arrayidx275 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !4327
  %147 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx275, align 8, !dbg !4327
  %148 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4328
  %call276 = call zeroext i8 @mark_effect(%struct.rtx_def* %147, %struct.bitmap_head_def* %148), !dbg !4329
  %conv277 = zext i8 %call276 to i32, !dbg !4329
  %149 = load i8, i8* %failed, align 1, !dbg !4330
  %conv278 = zext i8 %149 to i32, !dbg !4330
  %or279 = or i32 %conv278, %conv277, !dbg !4330
  %conv280 = trunc i32 %or279 to i8, !dbg !4330
  store i8 %conv280, i8* %failed, align 1, !dbg !4330
  br label %for.inc281, !dbg !4331

for.inc281:                                       ; preds = %for.body270
  %150 = load i32, i32* %i, align 4, !dbg !4332
  %inc = add i32 %150, 1, !dbg !4332
  store i32 %inc, i32* %i, align 4, !dbg !4332
  br label %for.cond264, !dbg !4333, !llvm.loop !4334

for.end282:                                       ; preds = %for.cond264
  br label %if.end289, !dbg !4336

if.else283:                                       ; preds = %if.then254
  %151 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !4337
  %152 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4338
  %call284 = call zeroext i8 @mark_effect(%struct.rtx_def* %151, %struct.bitmap_head_def* %152), !dbg !4339
  %conv285 = zext i8 %call284 to i32, !dbg !4339
  %153 = load i8, i8* %failed, align 1, !dbg !4340
  %conv286 = zext i8 %153 to i32, !dbg !4340
  %or287 = or i32 %conv286, %conv285, !dbg !4340
  %conv288 = trunc i32 %or287 to i8, !dbg !4340
  store i8 %conv288, i8* %failed, align 1, !dbg !4340
  br label %if.end289

if.end289:                                        ; preds = %if.else283, %for.end282
  br label %if.end290, !dbg !4341

if.end290:                                        ; preds = %if.end289, %lor.lhs.false249
  %154 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4342
  call void @cselib_process_insn(%struct.rtx_def* %154), !dbg !4343
  br label %for.inc291, !dbg !4344

for.inc291:                                       ; preds = %if.end290
  %155 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4345
  %u292 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %155, i32 0, i32 1, !dbg !4345
  %fld293 = bitcast %union.u* %u292 to [1 x %union.rtunion_def]*, !dbg !4345
  %arrayidx294 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld293, i64 0, i64 2, !dbg !4345
  %rt_rtx295 = bitcast %union.rtunion_def* %arrayidx294 to %struct.rtx_def**, !dbg !4345
  %156 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx295, align 8, !dbg !4345
  store %struct.rtx_def* %156, %struct.rtx_def** %insn, align 8, !dbg !4346
  br label %for.cond223, !dbg !4347, !llvm.loop !4348

for.end296:                                       ; preds = %land.end
  %157 = load i8, i8* %failed, align 1, !dbg !4350
  %tobool297 = icmp ne i8 %157, 0, !dbg !4350
  br i1 %tobool297, label %if.then298, label %if.end301, !dbg !4352

if.then298:                                       ; preds = %for.end296
  %158 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4353
  %flags299 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %158, i32 0, i32 13, !dbg !4355
  %159 = load i32, i32* %flags299, align 8, !dbg !4356
  %or300 = or i32 %159, 2048, !dbg !4356
  store i32 %or300, i32* %flags299, align 8, !dbg !4356
  br label %failed_exit, !dbg !4357

if.end301:                                        ; preds = %for.end296
  %160 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4358
  %161 = bitcast %struct.bitmap_head_def* %160 to i8*, !dbg !4358
  %call302 = call i32 @for_each_rtx(%struct.rtx_def** %cond2, i32 (%struct.rtx_def**, i8*)* @mentions_nonequal_regs, i8* %161), !dbg !4360
  %tobool303 = icmp ne i32 %call302, 0, !dbg !4360
  br i1 %tobool303, label %if.then304, label %if.end305, !dbg !4361

if.then304:                                       ; preds = %if.end301
  br label %failed_exit, !dbg !4362

if.end305:                                        ; preds = %if.end301
  %162 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4363
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %rsi, %struct.bitmap_head_def* %162, i32 0, i32* %i), !dbg !4363
  br label %for.cond306, !dbg !4363

for.cond306:                                      ; preds = %for.inc310, %if.end305
  %call307 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %rsi, i32* %i), !dbg !4365
  %tobool308 = icmp ne i8 %call307, 0, !dbg !4363
  br i1 %tobool308, label %for.body309, label %for.end311, !dbg !4363

for.body309:                                      ; preds = %for.cond306
  br label %failed_exit, !dbg !4367

for.inc310:                                       ; No predecessors!
  call void @bmp_iter_next(%struct.bitmap_iterator* %rsi, i32* %i), !dbg !4365
  br label %for.cond306, !dbg !4365, !llvm.loop !4368

for.end311:                                       ; preds = %for.cond306
  %163 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4370
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %163), !dbg !4370
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4370
  call void @cselib_finish(), !dbg !4371
  %164 = load i32, i32* %code1, align 4, !dbg !4372
  %165 = load i32, i32* %code2, align 4, !dbg !4374
  %call312 = call i32 @comparison_dominates_p(i32 %164, i32 %165), !dbg !4375
  %cmp313 = icmp ne i32 %call312, 0, !dbg !4376
  %conv314 = zext i1 %cmp313 to i32, !dbg !4376
  %166 = load %struct.rtx_def*, %struct.rtx_def** %set2, align 8, !dbg !4377
  %u315 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %166, i32 0, i32 1, !dbg !4377
  %fld316 = bitcast %union.u* %u315 to [1 x %union.rtunion_def]*, !dbg !4377
  %arrayidx317 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld316, i64 0, i64 1, !dbg !4377
  %rt_rtx318 = bitcast %union.rtunion_def* %arrayidx317 to %struct.rtx_def**, !dbg !4377
  %167 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx318, align 8, !dbg !4377
  %u319 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1, !dbg !4377
  %fld320 = bitcast %union.u* %u319 to [1 x %union.rtunion_def]*, !dbg !4377
  %arrayidx321 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld320, i64 0, i64 1, !dbg !4377
  %rt_rtx322 = bitcast %union.rtunion_def* %arrayidx321 to %struct.rtx_def**, !dbg !4377
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx322, align 8, !dbg !4377
  %169 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !4378
  %cmp323 = icmp eq %struct.rtx_def* %168, %169, !dbg !4379
  %conv324 = zext i1 %cmp323 to i32, !dbg !4379
  %cmp325 = icmp ne i32 %conv314, %conv324, !dbg !4380
  br i1 %cmp325, label %if.then327, label %if.else362, !dbg !4381

if.then327:                                       ; preds = %for.end311
  %170 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4382
  %succs328 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %170, i32 0, i32 1, !dbg !4382
  %171 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs328, align 8, !dbg !4382
  %tobool329 = icmp ne %struct.VEC_edge_gc* %171, null, !dbg !4382
  br i1 %tobool329, label %cond.true330, label %cond.false333, !dbg !4382

cond.true330:                                     ; preds = %if.then327
  %172 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4382
  %succs331 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %172, i32 0, i32 1, !dbg !4382
  %173 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs331, align 8, !dbg !4382
  %base332 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %173, i32 0, i32 0, !dbg !4382
  br label %cond.end334, !dbg !4382

cond.false333:                                    ; preds = %if.then327
  br label %cond.end334, !dbg !4382

cond.end334:                                      ; preds = %cond.false333, %cond.true330
  %cond335 = phi %struct.VEC_edge_base* [ %base332, %cond.true330 ], [ null, %cond.false333 ], !dbg !4382
  %call336 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond335, i32 0), !dbg !4382
  %flags337 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call336, i32 0, i32 7, !dbg !4382
  %174 = load i32, i32* %flags337, align 8, !dbg !4382
  %and338 = and i32 %174, 1, !dbg !4382
  %tobool339 = icmp ne i32 %and338, 0, !dbg !4382
  br i1 %tobool339, label %cond.true340, label %cond.false350, !dbg !4382

cond.true340:                                     ; preds = %cond.end334
  %175 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4382
  %succs341 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %175, i32 0, i32 1, !dbg !4382
  %176 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs341, align 8, !dbg !4382
  %tobool342 = icmp ne %struct.VEC_edge_gc* %176, null, !dbg !4382
  br i1 %tobool342, label %cond.true343, label %cond.false346, !dbg !4382

cond.true343:                                     ; preds = %cond.true340
  %177 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4382
  %succs344 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %177, i32 0, i32 1, !dbg !4382
  %178 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs344, align 8, !dbg !4382
  %base345 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %178, i32 0, i32 0, !dbg !4382
  br label %cond.end347, !dbg !4382

cond.false346:                                    ; preds = %cond.true340
  br label %cond.end347, !dbg !4382

cond.end347:                                      ; preds = %cond.false346, %cond.true343
  %cond348 = phi %struct.VEC_edge_base* [ %base345, %cond.true343 ], [ null, %cond.false346 ], !dbg !4382
  %call349 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond348, i32 1), !dbg !4382
  br label %cond.end360, !dbg !4382

cond.false350:                                    ; preds = %cond.end334
  %179 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4382
  %succs351 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %179, i32 0, i32 1, !dbg !4382
  %180 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs351, align 8, !dbg !4382
  %tobool352 = icmp ne %struct.VEC_edge_gc* %180, null, !dbg !4382
  br i1 %tobool352, label %cond.true353, label %cond.false356, !dbg !4382

cond.true353:                                     ; preds = %cond.false350
  %181 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4382
  %succs354 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %181, i32 0, i32 1, !dbg !4382
  %182 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs354, align 8, !dbg !4382
  %base355 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %182, i32 0, i32 0, !dbg !4382
  br label %cond.end357, !dbg !4382

cond.false356:                                    ; preds = %cond.false350
  br label %cond.end357, !dbg !4382

cond.end357:                                      ; preds = %cond.false356, %cond.true353
  %cond358 = phi %struct.VEC_edge_base* [ %base355, %cond.true353 ], [ null, %cond.false356 ], !dbg !4382
  %call359 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond358, i32 0), !dbg !4382
  br label %cond.end360, !dbg !4382

cond.end360:                                      ; preds = %cond.end357, %cond.end347
  %cond361 = phi %struct.edge_def* [ %call349, %cond.end347 ], [ %call359, %cond.end357 ], !dbg !4382
  store %struct.edge_def* %cond361, %struct.edge_def** %retval, align 8, !dbg !4383
  br label %return, !dbg !4383

if.else362:                                       ; preds = %for.end311
  %183 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4384
  %succs363 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %183, i32 0, i32 1, !dbg !4384
  %184 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs363, align 8, !dbg !4384
  %tobool364 = icmp ne %struct.VEC_edge_gc* %184, null, !dbg !4384
  br i1 %tobool364, label %cond.true365, label %cond.false368, !dbg !4384

cond.true365:                                     ; preds = %if.else362
  %185 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4384
  %succs366 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %185, i32 0, i32 1, !dbg !4384
  %186 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs366, align 8, !dbg !4384
  %base367 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %186, i32 0, i32 0, !dbg !4384
  br label %cond.end369, !dbg !4384

cond.false368:                                    ; preds = %if.else362
  br label %cond.end369, !dbg !4384

cond.end369:                                      ; preds = %cond.false368, %cond.true365
  %cond370 = phi %struct.VEC_edge_base* [ %base367, %cond.true365 ], [ null, %cond.false368 ], !dbg !4384
  %call371 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond370, i32 0), !dbg !4384
  %flags372 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call371, i32 0, i32 7, !dbg !4384
  %187 = load i32, i32* %flags372, align 8, !dbg !4384
  %and373 = and i32 %187, 1, !dbg !4384
  %tobool374 = icmp ne i32 %and373, 0, !dbg !4384
  br i1 %tobool374, label %cond.true375, label %cond.false385, !dbg !4384

cond.true375:                                     ; preds = %cond.end369
  %188 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4384
  %succs376 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %188, i32 0, i32 1, !dbg !4384
  %189 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs376, align 8, !dbg !4384
  %tobool377 = icmp ne %struct.VEC_edge_gc* %189, null, !dbg !4384
  br i1 %tobool377, label %cond.true378, label %cond.false381, !dbg !4384

cond.true378:                                     ; preds = %cond.true375
  %190 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4384
  %succs379 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %190, i32 0, i32 1, !dbg !4384
  %191 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs379, align 8, !dbg !4384
  %base380 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %191, i32 0, i32 0, !dbg !4384
  br label %cond.end382, !dbg !4384

cond.false381:                                    ; preds = %cond.true375
  br label %cond.end382, !dbg !4384

cond.end382:                                      ; preds = %cond.false381, %cond.true378
  %cond383 = phi %struct.VEC_edge_base* [ %base380, %cond.true378 ], [ null, %cond.false381 ], !dbg !4384
  %call384 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond383, i32 0), !dbg !4384
  br label %cond.end395, !dbg !4384

cond.false385:                                    ; preds = %cond.end369
  %192 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4384
  %succs386 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %192, i32 0, i32 1, !dbg !4384
  %193 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs386, align 8, !dbg !4384
  %tobool387 = icmp ne %struct.VEC_edge_gc* %193, null, !dbg !4384
  br i1 %tobool387, label %cond.true388, label %cond.false391, !dbg !4384

cond.true388:                                     ; preds = %cond.false385
  %194 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !4384
  %succs389 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %194, i32 0, i32 1, !dbg !4384
  %195 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs389, align 8, !dbg !4384
  %base390 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %195, i32 0, i32 0, !dbg !4384
  br label %cond.end392, !dbg !4384

cond.false391:                                    ; preds = %cond.false385
  br label %cond.end392, !dbg !4384

cond.end392:                                      ; preds = %cond.false391, %cond.true388
  %cond393 = phi %struct.VEC_edge_base* [ %base390, %cond.true388 ], [ null, %cond.false391 ], !dbg !4384
  %call394 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond393, i32 1), !dbg !4384
  br label %cond.end395, !dbg !4384

cond.end395:                                      ; preds = %cond.end392, %cond.end382
  %cond396 = phi %struct.edge_def* [ %call384, %cond.end382 ], [ %call394, %cond.end392 ], !dbg !4384
  store %struct.edge_def* %cond396, %struct.edge_def** %retval, align 8, !dbg !4385
  br label %return, !dbg !4385

failed_exit:                                      ; preds = %for.body309, %if.then304, %if.then298
  call void @llvm.dbg.label(metadata !4386), !dbg !4387
  %196 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4388
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %196), !dbg !4388
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4388
  call void @cselib_finish(), !dbg !4389
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !4390
  br label %return, !dbg !4390

return:                                           ; preds = %failed_exit, %cond.end395, %cond.end360, %if.then160, %if.then117, %if.then94, %if.then34, %if.then22, %if.then16, %if.then4, %if.then
  %197 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !4391
  ret %struct.edge_def* %197, !dbg !4391
}

declare dso_local i8* @xmalloc(i64) #2

declare dso_local %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local void @update_bb_profile_for_threading(%struct.basic_block_def*, i32, i64, %struct.edge_def*) #2

declare dso_local %struct.rtx_def* @pc_set(%struct.rtx_def*) #2

declare dso_local i32 @reversed_comparison_code(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @comparison_dominates_p(i32, i32) #2

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @side_effects_p(%struct.rtx_def*) #2

declare dso_local void @cselib_init(i32) #2

declare dso_local void @cselib_process_insn(%struct.rtx_def*) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @mark_effect(%struct.rtx_def* %exp, %struct.bitmap_head_def* %nonequal) #0 !dbg !4392 {
entry:
  %retval = alloca i8, align 1
  %exp.addr = alloca %struct.rtx_def*, align 8
  %nonequal.addr = alloca %struct.bitmap_head_def*, align 8
  %regno = alloca i32, align 4
  %dest = alloca %struct.rtx_def*, align 8
  %n = alloca i32, align 4
  %n50 = alloca i32, align 4
  store %struct.rtx_def* %exp, %struct.rtx_def** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %exp.addr, metadata !4395, metadata !DIExpression()), !dbg !4396
  store %struct.bitmap_head_def* %nonequal, %struct.bitmap_head_def** %nonequal.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %nonequal.addr, metadata !4397, metadata !DIExpression()), !dbg !4398
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !4399, metadata !DIExpression()), !dbg !4400
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !4401, metadata !DIExpression()), !dbg !4402
  %0 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8, !dbg !4403
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4403
  %bf.load = load i32, i32* %1, align 8, !dbg !4403
  %bf.clear = and i32 %bf.load, 65535, !dbg !4403
  switch i32 %bf.clear, label %sw.default [
    i32 25, label %sw.bb
    i32 23, label %sw.bb19
  ], !dbg !4404

sw.bb:                                            ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8, !dbg !4405
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4405
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4405
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4405
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4405
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4405
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4405
  %bf.load1 = load i32, i32* %4, align 8, !dbg !4405
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4405
  %cmp = icmp eq i32 %bf.clear2, 37, !dbg !4405
  br i1 %cmp, label %if.then, label %if.end18, !dbg !4408

if.then:                                          ; preds = %sw.bb
  %5 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8, !dbg !4409
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !4409
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !4409
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 0, !dbg !4409
  %rt_rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !4409
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx6, align 8, !dbg !4409
  store %struct.rtx_def* %6, %struct.rtx_def** %dest, align 8, !dbg !4411
  %7 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4412
  %call = call i32 @rhs_regno(%struct.rtx_def* %7), !dbg !4412
  store i32 %call, i32* %regno, align 4, !dbg !4413
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal.addr, align 8, !dbg !4414
  %9 = load i32, i32* %regno, align 4, !dbg !4414
  %call7 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %8, i32 %9), !dbg !4414
  %10 = load i32, i32* %regno, align 4, !dbg !4415
  %cmp8 = icmp slt i32 %10, 53, !dbg !4417
  br i1 %cmp8, label %if.then9, label %if.end, !dbg !4418

if.then9:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4419, metadata !DIExpression()), !dbg !4421
  %11 = load i32, i32* %regno, align 4, !dbg !4422
  %idxprom = sext i32 %11 to i64, !dbg !4423
  %arrayidx10 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom, !dbg !4423
  %12 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4424
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !4424
  %bf.load11 = load i32, i32* %13, align 8, !dbg !4424
  %bf.lshr = lshr i32 %bf.load11, 16, !dbg !4424
  %bf.clear12 = and i32 %bf.lshr, 255, !dbg !4424
  %idxprom13 = zext i32 %bf.clear12 to i64, !dbg !4423
  %arrayidx14 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx10, i64 0, i64 %idxprom13, !dbg !4423
  %14 = load i8, i8* %arrayidx14, align 1, !dbg !4423
  %conv = zext i8 %14 to i32, !dbg !4423
  store i32 %conv, i32* %n, align 4, !dbg !4421
  br label %while.cond, !dbg !4425

while.cond:                                       ; preds = %while.body, %if.then9
  %15 = load i32, i32* %n, align 4, !dbg !4426
  %dec = add nsw i32 %15, -1, !dbg !4426
  store i32 %dec, i32* %n, align 4, !dbg !4426
  %cmp15 = icmp sgt i32 %dec, 0, !dbg !4427
  br i1 %cmp15, label %while.body, label %while.end, !dbg !4425

while.body:                                       ; preds = %while.cond
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal.addr, align 8, !dbg !4428
  %17 = load i32, i32* %regno, align 4, !dbg !4428
  %18 = load i32, i32* %n, align 4, !dbg !4428
  %add = add nsw i32 %17, %18, !dbg !4428
  %call17 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %16, i32 %add), !dbg !4428
  br label %while.cond, !dbg !4425, !llvm.loop !4429

while.end:                                        ; preds = %while.cond
  br label %if.end, !dbg !4430

if.end:                                           ; preds = %while.end, %if.then
  br label %if.end18, !dbg !4431

if.end18:                                         ; preds = %if.end, %sw.bb
  store i8 0, i8* %retval, align 1, !dbg !4432
  br label %return, !dbg !4432

sw.bb19:                                          ; preds = %entry
  %19 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8, !dbg !4433
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !4433
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4433
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 0, !dbg !4433
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !4433
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !4433
  %21 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8, !dbg !4435
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !4435
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !4435
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 1, !dbg !4435
  %rt_rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !4435
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx27, align 8, !dbg !4435
  %call28 = call i32 @rtx_equal_for_cselib_p(%struct.rtx_def* %20, %struct.rtx_def* %22), !dbg !4436
  %tobool = icmp ne i32 %call28, 0, !dbg !4436
  br i1 %tobool, label %if.then29, label %if.end30, !dbg !4437

if.then29:                                        ; preds = %sw.bb19
  store i8 0, i8* %retval, align 1, !dbg !4438
  br label %return, !dbg !4438

if.end30:                                         ; preds = %sw.bb19
  %23 = load %struct.rtx_def*, %struct.rtx_def** %exp.addr, align 8, !dbg !4439
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !4439
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !4439
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 0, !dbg !4439
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !4439
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !4439
  store %struct.rtx_def* %24, %struct.rtx_def** %dest, align 8, !dbg !4440
  %25 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4441
  %26 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !4443
  %cmp35 = icmp eq %struct.rtx_def* %25, %26, !dbg !4444
  br i1 %cmp35, label %if.then37, label %if.end38, !dbg !4445

if.then37:                                        ; preds = %if.end30
  store i8 0, i8* %retval, align 1, !dbg !4446
  br label %return, !dbg !4446

if.end38:                                         ; preds = %if.end30
  %27 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4447
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !4447
  %bf.load39 = load i32, i32* %28, align 8, !dbg !4447
  %bf.clear40 = and i32 %bf.load39, 65535, !dbg !4447
  %cmp41 = icmp eq i32 %bf.clear40, 37, !dbg !4447
  br i1 %cmp41, label %if.end44, label %if.then43, !dbg !4449

if.then43:                                        ; preds = %if.end38
  store i8 1, i8* %retval, align 1, !dbg !4450
  br label %return, !dbg !4450

if.end44:                                         ; preds = %if.end38
  %29 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4451
  %call45 = call i32 @rhs_regno(%struct.rtx_def* %29), !dbg !4451
  store i32 %call45, i32* %regno, align 4, !dbg !4452
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal.addr, align 8, !dbg !4453
  %31 = load i32, i32* %regno, align 4, !dbg !4453
  %call46 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %30, i32 %31), !dbg !4453
  %32 = load i32, i32* %regno, align 4, !dbg !4454
  %cmp47 = icmp slt i32 %32, 53, !dbg !4456
  br i1 %cmp47, label %if.then49, label %if.end67, !dbg !4457

if.then49:                                        ; preds = %if.end44
  call void @llvm.dbg.declare(metadata i32* %n50, metadata !4458, metadata !DIExpression()), !dbg !4460
  %33 = load i32, i32* %regno, align 4, !dbg !4461
  %idxprom51 = sext i32 %33 to i64, !dbg !4462
  %arrayidx52 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom51, !dbg !4462
  %34 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !4463
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !4463
  %bf.load53 = load i32, i32* %35, align 8, !dbg !4463
  %bf.lshr54 = lshr i32 %bf.load53, 16, !dbg !4463
  %bf.clear55 = and i32 %bf.lshr54, 255, !dbg !4463
  %idxprom56 = zext i32 %bf.clear55 to i64, !dbg !4462
  %arrayidx57 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx52, i64 0, i64 %idxprom56, !dbg !4462
  %36 = load i8, i8* %arrayidx57, align 1, !dbg !4462
  %conv58 = zext i8 %36 to i32, !dbg !4462
  store i32 %conv58, i32* %n50, align 4, !dbg !4460
  br label %while.cond59, !dbg !4464

while.cond59:                                     ; preds = %while.body63, %if.then49
  %37 = load i32, i32* %n50, align 4, !dbg !4465
  %dec60 = add nsw i32 %37, -1, !dbg !4465
  store i32 %dec60, i32* %n50, align 4, !dbg !4465
  %cmp61 = icmp sgt i32 %dec60, 0, !dbg !4466
  br i1 %cmp61, label %while.body63, label %while.end66, !dbg !4464

while.body63:                                     ; preds = %while.cond59
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal.addr, align 8, !dbg !4467
  %39 = load i32, i32* %regno, align 4, !dbg !4467
  %40 = load i32, i32* %n50, align 4, !dbg !4467
  %add64 = add nsw i32 %39, %40, !dbg !4467
  %call65 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %38, i32 %add64), !dbg !4467
  br label %while.cond59, !dbg !4464, !llvm.loop !4468

while.end66:                                      ; preds = %while.cond59
  br label %if.end67, !dbg !4469

if.end67:                                         ; preds = %while.end66, %if.end44
  store i8 0, i8* %retval, align 1, !dbg !4470
  br label %return, !dbg !4470

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4471
  br label %return, !dbg !4471

return:                                           ; preds = %sw.default, %if.end67, %if.then43, %if.then37, %if.then29, %if.end18
  %41 = load i8, i8* %retval, align 1, !dbg !4472
  ret i8 %41, !dbg !4472
}

declare dso_local i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @mentions_nonequal_regs(%struct.rtx_def** %x, i8* %data) #0 !dbg !4473 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %nonequal = alloca %struct.bitmap_head_def*, align 8
  %regno = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.rtx_def** %x, %struct.rtx_def*** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %x.addr, metadata !4477, metadata !DIExpression()), !dbg !4478
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4479, metadata !DIExpression()), !dbg !4480
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %nonequal, metadata !4481, metadata !DIExpression()), !dbg !4482
  %0 = load i8*, i8** %data.addr, align 8, !dbg !4483
  %1 = bitcast i8* %0 to %struct.bitmap_head_def*, !dbg !4484
  store %struct.bitmap_head_def* %1, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4482
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8, !dbg !4485
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8, !dbg !4485
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4485
  %bf.load = load i32, i32* %4, align 8, !dbg !4485
  %bf.clear = and i32 %bf.load, 65535, !dbg !4485
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !4485
  br i1 %cmp, label %if.then, label %if.end16, !dbg !4487

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !4488, metadata !DIExpression()), !dbg !4490
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8, !dbg !4491
  %6 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8, !dbg !4491
  %call = call i32 @rhs_regno(%struct.rtx_def* %6), !dbg !4491
  store i32 %call, i32* %regno, align 4, !dbg !4492
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4493
  %8 = load i32, i32* %regno, align 4, !dbg !4493
  %call1 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %7, i32 %8), !dbg !4493
  %tobool = icmp ne i32 %call1, 0, !dbg !4493
  br i1 %tobool, label %if.then2, label %if.end, !dbg !4495

if.then2:                                         ; preds = %if.then
  store i32 1, i32* %retval, align 4, !dbg !4496
  br label %return, !dbg !4496

if.end:                                           ; preds = %if.then
  %9 = load i32, i32* %regno, align 4, !dbg !4497
  %cmp3 = icmp slt i32 %9, 53, !dbg !4499
  br i1 %cmp3, label %if.then4, label %if.end15, !dbg !4500

if.then4:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4501, metadata !DIExpression()), !dbg !4503
  %10 = load i32, i32* %regno, align 4, !dbg !4504
  %idxprom = sext i32 %10 to i64, !dbg !4505
  %arrayidx = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom, !dbg !4505
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %x.addr, align 8, !dbg !4506
  %12 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8, !dbg !4506
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !4506
  %bf.load5 = load i32, i32* %13, align 8, !dbg !4506
  %bf.lshr = lshr i32 %bf.load5, 16, !dbg !4506
  %bf.clear6 = and i32 %bf.lshr, 255, !dbg !4506
  %idxprom7 = zext i32 %bf.clear6 to i64, !dbg !4505
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx, i64 0, i64 %idxprom7, !dbg !4505
  %14 = load i8, i8* %arrayidx8, align 1, !dbg !4505
  %conv = zext i8 %14 to i32, !dbg !4505
  store i32 %conv, i32* %n, align 4, !dbg !4503
  br label %while.cond, !dbg !4507

while.cond:                                       ; preds = %if.end14, %if.then4
  %15 = load i32, i32* %n, align 4, !dbg !4508
  %dec = add nsw i32 %15, -1, !dbg !4508
  store i32 %dec, i32* %n, align 4, !dbg !4508
  %cmp9 = icmp sgt i32 %dec, 0, !dbg !4509
  br i1 %cmp9, label %while.body, label %while.end, !dbg !4507

while.body:                                       ; preds = %while.cond
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %nonequal, align 8, !dbg !4510
  %17 = load i32, i32* %regno, align 4, !dbg !4510
  %18 = load i32, i32* %n, align 4, !dbg !4510
  %add = add nsw i32 %17, %18, !dbg !4510
  %call11 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %16, i32 %add), !dbg !4510
  %tobool12 = icmp ne i32 %call11, 0, !dbg !4510
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !4512

if.then13:                                        ; preds = %while.body
  store i32 1, i32* %retval, align 4, !dbg !4513
  br label %return, !dbg !4513

if.end14:                                         ; preds = %while.body
  br label %while.cond, !dbg !4507, !llvm.loop !4514

while.end:                                        ; preds = %while.cond
  br label %if.end15, !dbg !4516

if.end15:                                         ; preds = %while.end, %if.end
  br label %if.end16, !dbg !4517

if.end16:                                         ; preds = %if.end15, %entry
  store i32 0, i32* %retval, align 4, !dbg !4518
  br label %return, !dbg !4518

return:                                           ; preds = %if.end16, %if.then13, %if.then2
  %19 = load i32, i32* %retval, align 4, !dbg !4519
  ret i32 %19, !dbg !4519
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !4520 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4528, metadata !DIExpression()), !dbg !4529
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !4530, metadata !DIExpression()), !dbg !4531
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !4532, metadata !DIExpression()), !dbg !4533
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4534, metadata !DIExpression()), !dbg !4535
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !4536
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !4537
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !4537
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4538
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !4539
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !4540
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4541
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !4542
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !4543
  br label %while.body, !dbg !4544

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4545
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !4548
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !4548
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !4545
  br i1 %tobool, label %if.end, label %if.then, !dbg !4549

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4550
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !4552
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !4553
  br label %while.end, !dbg !4554

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4555
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !4557
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !4557
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !4558
  %9 = load i32, i32* %indx, align 8, !dbg !4558
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !4559
  %div = udiv i32 %10, 128, !dbg !4560
  %cmp = icmp uge i32 %9, %div, !dbg !4561
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !4562

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !4563

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4564
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !4565
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !4565
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !4566
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4566
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4567
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !4568
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !4569
  br label %while.body, !dbg !4544, !llvm.loop !4570

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4572
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4574
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !4574
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !4575
  %17 = load i32, i32* %indx9, align 8, !dbg !4575
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !4576
  %div10 = udiv i32 %18, 128, !dbg !4577
  %cmp11 = icmp ne i32 %17, %div10, !dbg !4578
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !4579

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4580
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !4581
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !4581
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !4582
  %21 = load i32, i32* %indx14, align 8, !dbg !4582
  %mul = mul i32 %21, 128, !dbg !4583
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !4584
  br label %if.end15, !dbg !4585

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !4586
  %div16 = udiv i32 %22, 64, !dbg !4587
  %rem = urem i32 %div16, 2, !dbg !4588
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4589
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !4590
  store i32 %rem, i32* %word_no, align 8, !dbg !4591
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4592
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !4593
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !4593
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !4594
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4595
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !4596
  %27 = load i32, i32* %word_no18, align 8, !dbg !4596
  %idxprom = zext i32 %27 to i64, !dbg !4592
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !4592
  %28 = load i64, i64* %arrayidx, align 8, !dbg !4592
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4597
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !4598
  store i64 %28, i64* %bits19, align 8, !dbg !4599
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !4600
  %rem20 = urem i32 %30, 64, !dbg !4601
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4602
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !4603
  %32 = load i64, i64* %bits21, align 8, !dbg !4604
  %sh_prom = zext i32 %rem20 to i64, !dbg !4604
  %shr = lshr i64 %32, %sh_prom, !dbg !4604
  store i64 %shr, i64* %bits21, align 8, !dbg !4604
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4605
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !4606
  %34 = load i64, i64* %bits22, align 8, !dbg !4606
  %tobool23 = icmp ne i64 %34, 0, !dbg !4607
  %lnot = xor i1 %tobool23, true, !dbg !4607
  %lnot.ext = zext i1 %lnot to i32, !dbg !4607
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !4608
  %add = add i32 %35, %lnot.ext, !dbg !4608
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !4608
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !4609
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !4610
  store i32 %36, i32* %37, align 4, !dbg !4611
  ret void, !dbg !4612
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4613 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4616, metadata !DIExpression()), !dbg !4617
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4618, metadata !DIExpression()), !dbg !4619
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4620
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4622
  %1 = load i64, i64* %bits, align 8, !dbg !4622
  %tobool = icmp ne i64 %1, 0, !dbg !4620
  br i1 %tobool, label %if.then, label %if.end, !dbg !4623

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !4624

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !4625), !dbg !4627
  br label %while.cond, !dbg !4628

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4629
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !4630
  %3 = load i64, i64* %bits1, align 8, !dbg !4630
  %and = and i64 %3, 1, !dbg !4631
  %tobool2 = icmp ne i64 %and, 0, !dbg !4632
  %lnot = xor i1 %tobool2, true, !dbg !4632
  br i1 %lnot, label %while.body, label %while.end, !dbg !4628

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4633
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !4635
  %5 = load i64, i64* %bits3, align 8, !dbg !4636
  %shr = lshr i64 %5, 1, !dbg !4636
  store i64 %shr, i64* %bits3, align 8, !dbg !4636
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !4637
  %7 = load i32, i32* %6, align 4, !dbg !4638
  %add = add i32 %7, 1, !dbg !4638
  store i32 %add, i32* %6, align 4, !dbg !4638
  br label %while.cond, !dbg !4628, !llvm.loop !4639

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !4641
  br label %return, !dbg !4641

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !4642
  %9 = load i32, i32* %8, align 4, !dbg !4643
  %add4 = add i32 %9, 64, !dbg !4644
  %sub = sub i32 %add4, 1, !dbg !4645
  %div = udiv i32 %sub, 64, !dbg !4646
  %mul = mul i32 %div, 64, !dbg !4647
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !4648
  store i32 %mul, i32* %10, align 4, !dbg !4649
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4650
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !4651
  %12 = load i32, i32* %word_no, align 8, !dbg !4652
  %inc = add i32 %12, 1, !dbg !4652
  store i32 %inc, i32* %word_no, align 8, !dbg !4652
  br label %while.body6, !dbg !4653

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !4654

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4656
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !4657
  %14 = load i32, i32* %word_no8, align 8, !dbg !4657
  %cmp = icmp ne i32 %14, 2, !dbg !4658
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !4654

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4659
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4661
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !4661
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !4662
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4663
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !4664
  %18 = load i32, i32* %word_no11, align 8, !dbg !4664
  %idxprom = zext i32 %18 to i64, !dbg !4659
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !4659
  %19 = load i64, i64* %arrayidx, align 8, !dbg !4659
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4665
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !4666
  store i64 %19, i64* %bits12, align 8, !dbg !4667
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4668
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !4670
  %22 = load i64, i64* %bits13, align 8, !dbg !4670
  %tobool14 = icmp ne i64 %22, 0, !dbg !4668
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !4671

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !4672

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !4673
  %24 = load i32, i32* %23, align 4, !dbg !4674
  %add17 = add i32 %24, 64, !dbg !4674
  store i32 %add17, i32* %23, align 4, !dbg !4674
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4675
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !4676
  %26 = load i32, i32* %word_no18, align 8, !dbg !4677
  %inc19 = add i32 %26, 1, !dbg !4677
  store i32 %inc19, i32* %word_no18, align 8, !dbg !4677
  br label %while.cond7, !dbg !4654, !llvm.loop !4678

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4680
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !4681
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !4681
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !4682
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4682
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4683
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !4684
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !4685
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4686
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !4688
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !4688
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !4686
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !4689

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !4690
  br label %return, !dbg !4690

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4691
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !4692
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !4692
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !4693
  %35 = load i32, i32* %indx, align 8, !dbg !4693
  %mul28 = mul i32 %35, 128, !dbg !4694
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !4695
  store i32 %mul28, i32* %36, align 4, !dbg !4696
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4697
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !4698
  store i32 0, i32* %word_no29, align 8, !dbg !4699
  br label %while.body6, !dbg !4653, !llvm.loop !4700

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !4702
  ret i8 %38, !dbg !4702
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4703 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4706, metadata !DIExpression()), !dbg !4707
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4708, metadata !DIExpression()), !dbg !4709
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4710
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4711
  %1 = load i64, i64* %bits, align 8, !dbg !4712
  %shr = lshr i64 %1, 1, !dbg !4712
  store i64 %shr, i64* %bits, align 8, !dbg !4712
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !4713
  %3 = load i32, i32* %2, align 4, !dbg !4714
  %add = add i32 %3, 1, !dbg !4714
  store i32 %add, i32* %2, align 4, !dbg !4714
  ret void, !dbg !4715
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local void @cselib_finish() #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !4716 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !4722, metadata !DIExpression()), !dbg !4723
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !4724
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4724
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4724
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4724
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4724
  %1 = load i32, i32* %rt_uint, align 8, !dbg !4724
  ret i32 %1, !dbg !4725
}

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local i32 @rtx_equal_for_cselib_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def*) #2

declare dso_local i32 @computed_jump_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @try_crossjump_to_edge(i32 %mode, %struct.edge_def* %e1, %struct.edge_def* %e2) #0 !dbg !4726 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %e1.addr = alloca %struct.edge_def*, align 8
  %e2.addr = alloca %struct.edge_def*, align 8
  %nmatch = alloca i32, align 4
  %src1 = alloca %struct.basic_block_def*, align 8
  %src2 = alloca %struct.basic_block_def*, align 8
  %redirect_to = alloca %struct.basic_block_def*, align 8
  %redirect_from = alloca %struct.basic_block_def*, align 8
  %to_remove = alloca %struct.basic_block_def*, align 8
  %newpos1 = alloca %struct.rtx_def*, align 8
  %newpos2 = alloca %struct.rtx_def*, align 8
  %s = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %label1 = alloca %struct.rtx_def*, align 8
  %label2 = alloca %struct.rtx_def*, align 8
  %table1 = alloca %struct.rtx_def*, align 8
  %table2 = alloca %struct.rtx_def*, align 8
  %rr = alloca %struct.replace_label_data, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %s2 = alloca %struct.edge_def*, align 8
  %ei212 = alloca %struct.edge_iterator, align 8
  %d = alloca %struct.basic_block_def*, align 8
  %tmp220 = alloca %struct.edge_iterator, align 8
  %d2 = alloca %struct.basic_block_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4729, metadata !DIExpression()), !dbg !4730
  store %struct.edge_def* %e1, %struct.edge_def** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e1.addr, metadata !4731, metadata !DIExpression()), !dbg !4732
  store %struct.edge_def* %e2, %struct.edge_def** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e2.addr, metadata !4733, metadata !DIExpression()), !dbg !4734
  call void @llvm.dbg.declare(metadata i32* %nmatch, metadata !4735, metadata !DIExpression()), !dbg !4736
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src1, metadata !4737, metadata !DIExpression()), !dbg !4738
  %0 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !4739
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !4740
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4740
  store %struct.basic_block_def* %1, %struct.basic_block_def** %src1, align 8, !dbg !4738
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src2, metadata !4741, metadata !DIExpression()), !dbg !4742
  %2 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !4743
  %src3 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !4744
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src3, align 8, !dbg !4744
  store %struct.basic_block_def* %3, %struct.basic_block_def** %src2, align 8, !dbg !4742
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %redirect_to, metadata !4745, metadata !DIExpression()), !dbg !4746
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %redirect_from, metadata !4747, metadata !DIExpression()), !dbg !4748
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %to_remove, metadata !4749, metadata !DIExpression()), !dbg !4750
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %newpos1, metadata !4751, metadata !DIExpression()), !dbg !4752
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %newpos2, metadata !4753, metadata !DIExpression()), !dbg !4754
  call void @llvm.dbg.declare(metadata %struct.edge_def** %s, metadata !4755, metadata !DIExpression()), !dbg !4756
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4757, metadata !DIExpression()), !dbg !4758
  store %struct.rtx_def* null, %struct.rtx_def** %newpos2, align 8, !dbg !4759
  store %struct.rtx_def* null, %struct.rtx_def** %newpos1, align 8, !dbg !4760
  %4 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !4761
  %tobool = icmp ne i32 %4, 0, !dbg !4761
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4763

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* @reload_completed, align 4, !dbg !4764
  %tobool4 = icmp ne i32 %5, 0, !dbg !4764
  br i1 %tobool4, label %if.then, label %if.end, !dbg !4765

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !4766
  br label %return, !dbg !4766

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4767
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %6), !dbg !4769
  %conv = zext i8 %call to i32, !dbg !4769
  %tobool5 = icmp ne i32 %conv, 0, !dbg !4769
  br i1 %tobool5, label %land.lhs.true6, label %if.end11, !dbg !4770

land.lhs.true6:                                   ; preds = %if.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4771
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 13, !dbg !4771
  %8 = load i32, i32* %flags, align 8, !dbg !4771
  %and = and i32 %8, 1024, !dbg !4771
  %tobool7 = icmp ne i32 %and, 0, !dbg !4771
  br i1 %tobool7, label %if.then8, label %if.end11, !dbg !4772

if.then8:                                         ; preds = %land.lhs.true6
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4773
  %call9 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %9), !dbg !4774
  store %struct.edge_def* %call9, %struct.edge_def** %e1.addr, align 8, !dbg !4775
  %10 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !4776
  %src10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %10, i32 0, i32 0, !dbg !4777
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %src10, align 8, !dbg !4777
  store %struct.basic_block_def* %11, %struct.basic_block_def** %src1, align 8, !dbg !4778
  br label %if.end11, !dbg !4779

if.end11:                                         ; preds = %if.then8, %land.lhs.true6, %if.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4780
  %call12 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %12), !dbg !4782
  %conv13 = zext i8 %call12 to i32, !dbg !4782
  %tobool14 = icmp ne i32 %conv13, 0, !dbg !4782
  br i1 %tobool14, label %land.lhs.true15, label %if.end22, !dbg !4783

land.lhs.true15:                                  ; preds = %if.end11
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4784
  %flags16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 13, !dbg !4784
  %14 = load i32, i32* %flags16, align 8, !dbg !4784
  %and17 = and i32 %14, 1024, !dbg !4784
  %tobool18 = icmp ne i32 %and17, 0, !dbg !4784
  br i1 %tobool18, label %if.then19, label %if.end22, !dbg !4785

if.then19:                                        ; preds = %land.lhs.true15
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4786
  %call20 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %15), !dbg !4787
  store %struct.edge_def* %call20, %struct.edge_def** %e2.addr, align 8, !dbg !4788
  %16 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !4789
  %src21 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 0, !dbg !4790
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %src21, align 8, !dbg !4790
  store %struct.basic_block_def* %17, %struct.basic_block_def** %src2, align 8, !dbg !4791
  br label %if.end22, !dbg !4792

if.end22:                                         ; preds = %if.then19, %land.lhs.true15, %if.end11
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4793
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4795
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !4795
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4795
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4795
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 0, !dbg !4795
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4795
  %cmp = icmp eq %struct.basic_block_def* %18, %21, !dbg !4796
  br i1 %cmp, label %if.then29, label %lor.lhs.false, !dbg !4797

lor.lhs.false:                                    ; preds = %if.end22
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4798
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4799
  %add.ptr24 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !4799
  %cfg25 = getelementptr inbounds %struct.function, %struct.function* %add.ptr24, i32 0, i32 1, !dbg !4799
  %24 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg25, align 8, !dbg !4799
  %x_entry_block_ptr26 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %24, i32 0, i32 0, !dbg !4799
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr26, align 8, !dbg !4799
  %cmp27 = icmp eq %struct.basic_block_def* %22, %25, !dbg !4800
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !4801

if.then29:                                        ; preds = %lor.lhs.false, %if.end22
  store i8 0, i8* %retval, align 1, !dbg !4802
  br label %return, !dbg !4802

if.end30:                                         ; preds = %lor.lhs.false
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4803
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4805
  %cmp31 = icmp eq %struct.basic_block_def* %26, %27, !dbg !4806
  br i1 %cmp31, label %if.then33, label %if.end34, !dbg !4807

if.then33:                                        ; preds = %if.end30
  store i8 0, i8* %retval, align 1, !dbg !4808
  br label %return, !dbg !4808

if.end34:                                         ; preds = %if.end30
  %28 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !4809
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 1, !dbg !4809
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4809
  %flags35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 13, !dbg !4809
  %30 = load i32, i32* %flags35, align 8, !dbg !4809
  %and36 = and i32 %30, 1024, !dbg !4809
  %tobool37 = icmp ne i32 %and36, 0, !dbg !4809
  br i1 %tobool37, label %land.lhs.true38, label %if.end45, !dbg !4811

land.lhs.true38:                                  ; preds = %if.end34
  %31 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !4812
  %dest39 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 1, !dbg !4812
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %dest39, align 8, !dbg !4812
  %call40 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %32), !dbg !4812
  %flags41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call40, i32 0, i32 13, !dbg !4812
  %33 = load i32, i32* %flags41, align 8, !dbg !4812
  %and42 = and i32 %33, 1024, !dbg !4812
  %tobool43 = icmp ne i32 %and42, 0, !dbg !4812
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !4813

if.then44:                                        ; preds = %land.lhs.true38
  store i8 0, i8* %retval, align 1, !dbg !4814
  br label %return, !dbg !4814

if.end45:                                         ; preds = %land.lhs.true38, %if.end34
  %34 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !4815
  %dest46 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 1, !dbg !4815
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest46, align 8, !dbg !4815
  %flags47 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 13, !dbg !4815
  %36 = load i32, i32* %flags47, align 8, !dbg !4815
  %and48 = and i32 %36, 1024, !dbg !4815
  %tobool49 = icmp ne i32 %and48, 0, !dbg !4815
  br i1 %tobool49, label %land.lhs.true50, label %if.end57, !dbg !4817

land.lhs.true50:                                  ; preds = %if.end45
  %37 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !4818
  %dest51 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %37, i32 0, i32 1, !dbg !4818
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %dest51, align 8, !dbg !4818
  %call52 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %38), !dbg !4818
  %flags53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call52, i32 0, i32 13, !dbg !4818
  %39 = load i32, i32* %flags53, align 8, !dbg !4818
  %and54 = and i32 %39, 1024, !dbg !4818
  %tobool55 = icmp ne i32 %and54, 0, !dbg !4818
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !4819

if.then56:                                        ; preds = %land.lhs.true50
  store i8 0, i8* %retval, align 1, !dbg !4820
  br label %return, !dbg !4820

if.end57:                                         ; preds = %land.lhs.true50, %if.end45
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4821
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 0, !dbg !4821
  %41 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !4821
  %tobool58 = icmp ne %struct.VEC_edge_gc* %41, null, !dbg !4821
  br i1 %tobool58, label %cond.true, label %cond.false, !dbg !4821

cond.true:                                        ; preds = %if.end57
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4821
  %preds59 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 0, !dbg !4821
  %43 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds59, align 8, !dbg !4821
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %43, i32 0, i32 0, !dbg !4821
  br label %cond.end, !dbg !4821

cond.false:                                       ; preds = %if.end57
  br label %cond.end, !dbg !4821

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4821
  %call60 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4821
  %cmp61 = icmp eq i32 %call60, 0, !dbg !4823
  br i1 %cmp61, label %if.then75, label %lor.lhs.false63, !dbg !4824

lor.lhs.false63:                                  ; preds = %cond.end
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4825
  %preds64 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 0, !dbg !4825
  %45 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds64, align 8, !dbg !4825
  %tobool65 = icmp ne %struct.VEC_edge_gc* %45, null, !dbg !4825
  br i1 %tobool65, label %cond.true66, label %cond.false69, !dbg !4825

cond.true66:                                      ; preds = %lor.lhs.false63
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4825
  %preds67 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 0, !dbg !4825
  %47 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds67, align 8, !dbg !4825
  %base68 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %47, i32 0, i32 0, !dbg !4825
  br label %cond.end70, !dbg !4825

cond.false69:                                     ; preds = %lor.lhs.false63
  br label %cond.end70, !dbg !4825

cond.end70:                                       ; preds = %cond.false69, %cond.true66
  %cond71 = phi %struct.VEC_edge_base* [ %base68, %cond.true66 ], [ null, %cond.false69 ], !dbg !4825
  %call72 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond71), !dbg !4825
  %cmp73 = icmp eq i32 %call72, 0, !dbg !4826
  br i1 %cmp73, label %if.then75, label %if.end76, !dbg !4827

if.then75:                                        ; preds = %cond.end70, %cond.end
  store i8 0, i8* %retval, align 1, !dbg !4828
  br label %return, !dbg !4828

if.end76:                                         ; preds = %cond.end70
  %48 = load i32, i32* %mode.addr, align 4, !dbg !4829
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4831
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4832
  %call77 = call zeroext i8 @outgoing_edges_match(i32 %48, %struct.basic_block_def* %49, %struct.basic_block_def* %50), !dbg !4833
  %tobool78 = icmp ne i8 %call77, 0, !dbg !4833
  br i1 %tobool78, label %if.end80, label %if.then79, !dbg !4834

if.then79:                                        ; preds = %if.end76
  store i8 0, i8* %retval, align 1, !dbg !4835
  br label %return, !dbg !4835

if.end80:                                         ; preds = %if.end76
  %51 = load i32, i32* %mode.addr, align 4, !dbg !4836
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4837
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4838
  %call81 = call i32 @flow_find_cross_jump(i32 %51, %struct.basic_block_def* %52, %struct.basic_block_def* %53, %struct.rtx_def** %newpos1, %struct.rtx_def** %newpos2), !dbg !4839
  store i32 %call81, i32* %nmatch, align 4, !dbg !4840
  %54 = load i32, i32* %nmatch, align 4, !dbg !4841
  %55 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4843
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %55, i64 54, !dbg !4843
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !4843
  %56 = load i32, i32* %value, align 8, !dbg !4843
  %cmp82 = icmp slt i32 %54, %56, !dbg !4844
  br i1 %cmp82, label %land.lhs.true84, label %if.end88, !dbg !4845

land.lhs.true84:                                  ; preds = %if.end80
  %57 = load %struct.rtx_def*, %struct.rtx_def** %newpos1, align 8, !dbg !4846
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4847
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 7, !dbg !4847
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4847
  %59 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4847
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %59, i32 0, i32 0, !dbg !4847
  %60 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4847
  %cmp85 = icmp ne %struct.rtx_def* %57, %60, !dbg !4848
  br i1 %cmp85, label %if.then87, label %if.end88, !dbg !4849

if.then87:                                        ; preds = %land.lhs.true84
  store i8 0, i8* %retval, align 1, !dbg !4850
  br label %return, !dbg !4850

if.end88:                                         ; preds = %land.lhs.true84, %if.end80
  %61 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !4851
  %dest89 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 1, !dbg !4853
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %dest89, align 8, !dbg !4853
  %call90 = call zeroext i8 @block_has_preserve_label(%struct.basic_block_def* %62), !dbg !4854
  %conv91 = zext i8 %call90 to i32, !dbg !4854
  %tobool92 = icmp ne i32 %conv91, 0, !dbg !4854
  br i1 %tobool92, label %land.lhs.true93, label %if.end98, !dbg !4855

land.lhs.true93:                                  ; preds = %if.end88
  %63 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !4856
  %flags94 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %63, i32 0, i32 7, !dbg !4857
  %64 = load i32, i32* %flags94, align 8, !dbg !4857
  %and95 = and i32 %64, 2, !dbg !4858
  %tobool96 = icmp ne i32 %and95, 0, !dbg !4858
  br i1 %tobool96, label %if.then97, label %if.end98, !dbg !4859

if.then97:                                        ; preds = %land.lhs.true93
  store i8 0, i8* %retval, align 1, !dbg !4860
  br label %return, !dbg !4860

if.end98:                                         ; preds = %land.lhs.true93, %if.end88
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label1, metadata !4861, metadata !DIExpression()), !dbg !4863
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label2, metadata !4864, metadata !DIExpression()), !dbg !4865
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %table1, metadata !4866, metadata !DIExpression()), !dbg !4867
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %table2, metadata !4868, metadata !DIExpression()), !dbg !4869
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4870
  %il99 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 7, !dbg !4870
  %rtl100 = bitcast %union.basic_block_il_dependent* %il99 to %struct.rtl_bb_info**, !dbg !4870
  %66 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl100, align 8, !dbg !4870
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %66, i32 0, i32 1, !dbg !4870
  %67 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4870
  %call101 = call zeroext i8 @tablejump_p(%struct.rtx_def* %67, %struct.rtx_def** %label1, %struct.rtx_def** %table1), !dbg !4872
  %conv102 = zext i8 %call101 to i32, !dbg !4872
  %tobool103 = icmp ne i32 %conv102, 0, !dbg !4872
  br i1 %tobool103, label %land.lhs.true104, label %if.end126, !dbg !4873

land.lhs.true104:                                 ; preds = %if.end98
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4874
  %il105 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %68, i32 0, i32 7, !dbg !4874
  %rtl106 = bitcast %union.basic_block_il_dependent* %il105 to %struct.rtl_bb_info**, !dbg !4874
  %69 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl106, align 8, !dbg !4874
  %end_107 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %69, i32 0, i32 1, !dbg !4874
  %70 = load %struct.rtx_def*, %struct.rtx_def** %end_107, align 8, !dbg !4874
  %call108 = call zeroext i8 @tablejump_p(%struct.rtx_def* %70, %struct.rtx_def** %label2, %struct.rtx_def** %table2), !dbg !4875
  %conv109 = zext i8 %call108 to i32, !dbg !4875
  %tobool110 = icmp ne i32 %conv109, 0, !dbg !4875
  br i1 %tobool110, label %land.lhs.true111, label %if.end126, !dbg !4876

land.lhs.true111:                                 ; preds = %land.lhs.true104
  %71 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8, !dbg !4877
  %72 = load %struct.rtx_def*, %struct.rtx_def** %label2, align 8, !dbg !4878
  %cmp112 = icmp ne %struct.rtx_def* %71, %72, !dbg !4879
  br i1 %cmp112, label %if.then114, label %if.end126, !dbg !4880

if.then114:                                       ; preds = %land.lhs.true111
  call void @llvm.dbg.declare(metadata %struct.replace_label_data* %rr, metadata !4881, metadata !DIExpression()), !dbg !4889
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4890, metadata !DIExpression()), !dbg !4891
  %73 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8, !dbg !4892
  %r1 = getelementptr inbounds %struct.replace_label_data, %struct.replace_label_data* %rr, i32 0, i32 0, !dbg !4893
  store %struct.rtx_def* %73, %struct.rtx_def** %r1, align 8, !dbg !4894
  %74 = load %struct.rtx_def*, %struct.rtx_def** %label2, align 8, !dbg !4895
  %r2 = getelementptr inbounds %struct.replace_label_data, %struct.replace_label_data* %rr, i32 0, i32 1, !dbg !4896
  store %struct.rtx_def* %74, %struct.rtx_def** %r2, align 8, !dbg !4897
  %update_label_nuses = getelementptr inbounds %struct.replace_label_data, %struct.replace_label_data* %rr, i32 0, i32 2, !dbg !4898
  store i8 1, i8* %update_label_nuses, align 8, !dbg !4899
  %call115 = call %struct.rtx_def* @get_insns(), !dbg !4900
  store %struct.rtx_def* %call115, %struct.rtx_def** %insn, align 8, !dbg !4902
  br label %for.cond, !dbg !4903

for.cond:                                         ; preds = %for.inc, %if.then114
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4904
  %tobool116 = icmp ne %struct.rtx_def* %75, null, !dbg !4906
  br i1 %tobool116, label %for.body, label %for.end, !dbg !4906

for.body:                                         ; preds = %for.cond
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4907
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4910
  %il117 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 7, !dbg !4910
  %rtl118 = bitcast %union.basic_block_il_dependent* %il117 to %struct.rtl_bb_info**, !dbg !4910
  %78 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl118, align 8, !dbg !4910
  %end_119 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %78, i32 0, i32 1, !dbg !4910
  %79 = load %struct.rtx_def*, %struct.rtx_def** %end_119, align 8, !dbg !4910
  %cmp120 = icmp ne %struct.rtx_def* %76, %79, !dbg !4911
  br i1 %cmp120, label %if.then122, label %if.end124, !dbg !4912

if.then122:                                       ; preds = %for.body
  %80 = bitcast %struct.replace_label_data* %rr to i8*, !dbg !4913
  %call123 = call i32 @for_each_rtx(%struct.rtx_def** %insn, i32 (%struct.rtx_def**, i8*)* @replace_label, i8* %80), !dbg !4914
  br label %if.end124, !dbg !4914

if.end124:                                        ; preds = %if.then122, %for.body
  br label %for.inc, !dbg !4915

for.inc:                                          ; preds = %if.end124
  %81 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4916
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !4916
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4916
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !4916
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx125 to %struct.rtx_def**, !dbg !4916
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4916
  store %struct.rtx_def* %82, %struct.rtx_def** %insn, align 8, !dbg !4917
  br label %for.cond, !dbg !4918, !llvm.loop !4919

for.end:                                          ; preds = %for.cond
  br label %if.end126, !dbg !4921

if.end126:                                        ; preds = %for.end, %land.lhs.true111, %land.lhs.true104, %if.end98
  %83 = load %struct.rtx_def*, %struct.rtx_def** %newpos2, align 8, !dbg !4922
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4924
  %il127 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 7, !dbg !4924
  %rtl128 = bitcast %union.basic_block_il_dependent* %il127 to %struct.rtl_bb_info**, !dbg !4924
  %85 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl128, align 8, !dbg !4924
  %head_129 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %85, i32 0, i32 0, !dbg !4924
  %86 = load %struct.rtx_def*, %struct.rtx_def** %head_129, align 8, !dbg !4924
  %cmp130 = icmp eq %struct.rtx_def* %83, %86, !dbg !4925
  br i1 %cmp130, label %land.lhs.true132, label %if.else, !dbg !4926

land.lhs.true132:                                 ; preds = %if.end126
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4927
  %preds133 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 0, !dbg !4927
  %88 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds133, align 8, !dbg !4927
  %tobool134 = icmp ne %struct.VEC_edge_gc* %88, null, !dbg !4927
  br i1 %tobool134, label %cond.true135, label %cond.false138, !dbg !4927

cond.true135:                                     ; preds = %land.lhs.true132
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4927
  %preds136 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 0, !dbg !4927
  %90 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds136, align 8, !dbg !4927
  %base137 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %90, i32 0, i32 0, !dbg !4927
  br label %cond.end139, !dbg !4927

cond.false138:                                    ; preds = %land.lhs.true132
  br label %cond.end139, !dbg !4927

cond.end139:                                      ; preds = %cond.false138, %cond.true135
  %cond140 = phi %struct.VEC_edge_base* [ %base137, %cond.true135 ], [ null, %cond.false138 ], !dbg !4927
  %call141 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond140, i32 0), !dbg !4927
  %flags142 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call141, i32 0, i32 7, !dbg !4928
  %91 = load i32, i32* %flags142, align 8, !dbg !4928
  %and143 = and i32 %91, 8, !dbg !4929
  %tobool144 = icmp ne i32 %and143, 0, !dbg !4929
  br i1 %tobool144, label %if.else, label %if.then145, !dbg !4930

if.then145:                                       ; preds = %cond.end139
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4931
  store %struct.basic_block_def* %92, %struct.basic_block_def** %redirect_to, align 8, !dbg !4932
  br label %if.end200, !dbg !4933

if.else:                                          ; preds = %cond.end139, %if.end126
  %93 = load %struct.rtx_def*, %struct.rtx_def** %newpos2, align 8, !dbg !4934
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4937
  %il146 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 7, !dbg !4937
  %rtl147 = bitcast %union.basic_block_il_dependent* %il146 to %struct.rtl_bb_info**, !dbg !4937
  %95 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl147, align 8, !dbg !4937
  %head_148 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %95, i32 0, i32 0, !dbg !4937
  %96 = load %struct.rtx_def*, %struct.rtx_def** %head_148, align 8, !dbg !4937
  %cmp149 = icmp eq %struct.rtx_def* %93, %96, !dbg !4938
  br i1 %cmp149, label %if.then151, label %if.end189, !dbg !4939

if.then151:                                       ; preds = %if.else
  %97 = load %struct.rtx_def*, %struct.rtx_def** %newpos2, align 8, !dbg !4940
  %98 = bitcast %struct.rtx_def* %97 to i32*, !dbg !4940
  %bf.load = load i32, i32* %98, align 8, !dbg !4940
  %bf.clear = and i32 %bf.load, 65535, !dbg !4940
  %cmp152 = icmp eq i32 %bf.clear, 12, !dbg !4940
  br i1 %cmp152, label %if.then154, label %if.end159, !dbg !4943

if.then154:                                       ; preds = %if.then151
  %99 = load %struct.rtx_def*, %struct.rtx_def** %newpos2, align 8, !dbg !4944
  %u155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !4944
  %fld156 = bitcast %union.u* %u155 to [1 x %union.rtunion_def]*, !dbg !4944
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i64 0, i64 2, !dbg !4944
  %rt_rtx158 = bitcast %union.rtunion_def* %arrayidx157 to %struct.rtx_def**, !dbg !4944
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx158, align 8, !dbg !4944
  store %struct.rtx_def* %100, %struct.rtx_def** %newpos2, align 8, !dbg !4945
  br label %if.end159, !dbg !4946

if.end159:                                        ; preds = %if.then154, %if.then151
  br label %while.cond, !dbg !4947

while.cond:                                       ; preds = %while.body, %if.end159
  %101 = load %struct.rtx_def*, %struct.rtx_def** %newpos2, align 8, !dbg !4948
  %102 = bitcast %struct.rtx_def* %101 to i32*, !dbg !4948
  %bf.load160 = load i32, i32* %102, align 8, !dbg !4948
  %bf.clear161 = and i32 %bf.load160, 65535, !dbg !4948
  %cmp162 = icmp eq i32 %bf.clear161, 7, !dbg !4948
  br i1 %cmp162, label %while.body, label %while.end, !dbg !4947

while.body:                                       ; preds = %while.cond
  %103 = load %struct.rtx_def*, %struct.rtx_def** %newpos2, align 8, !dbg !4949
  %u164 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !4949
  %fld165 = bitcast %union.u* %u164 to [1 x %union.rtunion_def]*, !dbg !4949
  %arrayidx166 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld165, i64 0, i64 2, !dbg !4949
  %rt_rtx167 = bitcast %union.rtunion_def* %arrayidx166 to %struct.rtx_def**, !dbg !4949
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx167, align 8, !dbg !4949
  store %struct.rtx_def* %104, %struct.rtx_def** %newpos2, align 8, !dbg !4950
  br label %while.cond, !dbg !4947, !llvm.loop !4951

while.end:                                        ; preds = %while.cond
  %105 = load %struct.rtx_def*, %struct.rtx_def** %newpos2, align 8, !dbg !4952
  %106 = bitcast %struct.rtx_def* %105 to i32*, !dbg !4952
  %bf.load168 = load i32, i32* %106, align 8, !dbg !4952
  %bf.clear169 = and i32 %bf.load168, 65535, !dbg !4952
  %cmp170 = icmp eq i32 %bf.clear169, 13, !dbg !4952
  br i1 %cmp170, label %if.then172, label %if.end177, !dbg !4954

if.then172:                                       ; preds = %while.end
  %107 = load %struct.rtx_def*, %struct.rtx_def** %newpos2, align 8, !dbg !4955
  %u173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1, !dbg !4955
  %fld174 = bitcast %union.u* %u173 to [1 x %union.rtunion_def]*, !dbg !4955
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i64 0, i64 2, !dbg !4955
  %rt_rtx176 = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**, !dbg !4955
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx176, align 8, !dbg !4955
  store %struct.rtx_def* %108, %struct.rtx_def** %newpos2, align 8, !dbg !4956
  br label %if.end177, !dbg !4957

if.end177:                                        ; preds = %if.then172, %while.end
  br label %while.cond178, !dbg !4958

while.cond178:                                    ; preds = %while.body183, %if.end177
  %109 = load %struct.rtx_def*, %struct.rtx_def** %newpos2, align 8, !dbg !4959
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !4959
  %bf.load179 = load i32, i32* %110, align 8, !dbg !4959
  %bf.clear180 = and i32 %bf.load179, 65535, !dbg !4959
  %cmp181 = icmp eq i32 %bf.clear180, 7, !dbg !4959
  br i1 %cmp181, label %while.body183, label %while.end188, !dbg !4958

while.body183:                                    ; preds = %while.cond178
  %111 = load %struct.rtx_def*, %struct.rtx_def** %newpos2, align 8, !dbg !4960
  %u184 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %111, i32 0, i32 1, !dbg !4960
  %fld185 = bitcast %union.u* %u184 to [1 x %union.rtunion_def]*, !dbg !4960
  %arrayidx186 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld185, i64 0, i64 2, !dbg !4960
  %rt_rtx187 = bitcast %union.rtunion_def* %arrayidx186 to %struct.rtx_def**, !dbg !4960
  %112 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx187, align 8, !dbg !4960
  store %struct.rtx_def* %112, %struct.rtx_def** %newpos2, align 8, !dbg !4961
  br label %while.cond178, !dbg !4958, !llvm.loop !4962

while.end188:                                     ; preds = %while.cond178
  br label %if.end189, !dbg !4963

if.end189:                                        ; preds = %while.end188, %if.else
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4964
  %tobool190 = icmp ne %struct._IO_FILE* %113, null, !dbg !4964
  br i1 %tobool190, label %if.then191, label %if.end193, !dbg !4966

if.then191:                                       ; preds = %if.end189
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4967
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4968
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %115, i32 0, i32 9, !dbg !4969
  %116 = load i32, i32* %index, align 8, !dbg !4969
  %117 = load i32, i32* %nmatch, align 4, !dbg !4970
  %call192 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %114, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.16, i64 0, i64 0), i32 %116, i32 %117), !dbg !4971
  br label %if.end193, !dbg !4971

if.end193:                                        ; preds = %if.then191, %if.end189
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4972
  %119 = load %struct.rtx_def*, %struct.rtx_def** %newpos2, align 8, !dbg !4973
  %u194 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1, !dbg !4973
  %fld195 = bitcast %union.u* %u194 to [1 x %union.rtunion_def]*, !dbg !4973
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i64 0, i64 1, !dbg !4973
  %rt_rtx197 = bitcast %union.rtunion_def* %arrayidx196 to %struct.rtx_def**, !dbg !4973
  %120 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx197, align 8, !dbg !4973
  %121 = bitcast %struct.rtx_def* %120 to i8*, !dbg !4973
  %call198 = call %struct.edge_def* @split_block(%struct.basic_block_def* %118, i8* %121), !dbg !4974
  %dest199 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call198, i32 0, i32 1, !dbg !4975
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %dest199, align 8, !dbg !4975
  store %struct.basic_block_def* %122, %struct.basic_block_def** %redirect_to, align 8, !dbg !4976
  br label %if.end200

if.end200:                                        ; preds = %if.end193, %if.then145
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4977
  %tobool201 = icmp ne %struct._IO_FILE* %123, null, !dbg !4977
  br i1 %tobool201, label %if.then202, label %if.end206, !dbg !4979

if.then202:                                       ; preds = %if.end200
  %124 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4980
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !4981
  %index203 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %125, i32 0, i32 9, !dbg !4982
  %126 = load i32, i32* %index203, align 8, !dbg !4982
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !4983
  %index204 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %127, i32 0, i32 9, !dbg !4984
  %128 = load i32, i32* %index204, align 8, !dbg !4984
  %129 = load i32, i32* %nmatch, align 4, !dbg !4985
  %call205 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %124, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.17, i64 0, i64 0), i32 %126, i32 %128, i32 %129), !dbg !4986
  br label %if.end206, !dbg !4986

if.end206:                                        ; preds = %if.then202, %if.end200
  %130 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !4987
  call void @df_set_bb_dirty(%struct.basic_block_def* %130), !dbg !4988
  %131 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !4989
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %131, i32 0, i32 1, !dbg !4989
  %call207 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4989
  %132 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4989
  %133 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %132, i32 0, i32 0, !dbg !4989
  %134 = extractvalue { i32, %struct.VEC_edge_gc** } %call207, 0, !dbg !4989
  store i32 %134, i32* %133, align 8, !dbg !4989
  %135 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %132, i32 0, i32 1, !dbg !4989
  %136 = extractvalue { i32, %struct.VEC_edge_gc** } %call207, 1, !dbg !4989
  store %struct.VEC_edge_gc** %136, %struct.VEC_edge_gc*** %135, align 8, !dbg !4989
  %137 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4989
  %138 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4989
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %137, i8* align 8 %138, i64 16, i1 false), !dbg !4989
  br label %for.cond208, !dbg !4989

for.cond208:                                      ; preds = %for.inc335, %if.end206
  %139 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4991
  %140 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %139, i32 0, i32 0, !dbg !4991
  %141 = load i32, i32* %140, align 8, !dbg !4991
  %142 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %139, i32 0, i32 1, !dbg !4991
  %143 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %142, align 8, !dbg !4991
  %call209 = call zeroext i8 @ei_cond(i32 %141, %struct.VEC_edge_gc** %143, %struct.edge_def** %s), !dbg !4991
  %tobool210 = icmp ne i8 %call209, 0, !dbg !4989
  br i1 %tobool210, label %for.body211, label %for.end336, !dbg !4989

for.body211:                                      ; preds = %for.cond208
  call void @llvm.dbg.declare(metadata %struct.edge_def** %s2, metadata !4993, metadata !DIExpression()), !dbg !4995
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei212, metadata !4996, metadata !DIExpression()), !dbg !4997
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %d, metadata !4998, metadata !DIExpression()), !dbg !4999
  %144 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5000
  %dest213 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %144, i32 0, i32 1, !dbg !5001
  %145 = load %struct.basic_block_def*, %struct.basic_block_def** %dest213, align 8, !dbg !5001
  store %struct.basic_block_def* %145, %struct.basic_block_def** %d, align 8, !dbg !4999
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %d, align 8, !dbg !5002
  %flags214 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %146, i32 0, i32 13, !dbg !5002
  %147 = load i32, i32* %flags214, align 8, !dbg !5002
  %and215 = and i32 %147, 1024, !dbg !5002
  %tobool216 = icmp ne i32 %and215, 0, !dbg !5002
  br i1 %tobool216, label %if.then217, label %if.end219, !dbg !5004

if.then217:                                       ; preds = %for.body211
  %148 = load %struct.basic_block_def*, %struct.basic_block_def** %d, align 8, !dbg !5005
  %call218 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %148), !dbg !5006
  store %struct.basic_block_def* %call218, %struct.basic_block_def** %d, align 8, !dbg !5007
  br label %if.end219, !dbg !5008

if.end219:                                        ; preds = %if.then217, %for.body211
  %149 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !5009
  %succs221 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %149, i32 0, i32 1, !dbg !5009
  %call222 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs221), !dbg !5009
  %150 = bitcast %struct.edge_iterator* %tmp220 to { i32, %struct.VEC_edge_gc** }*, !dbg !5009
  %151 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %150, i32 0, i32 0, !dbg !5009
  %152 = extractvalue { i32, %struct.VEC_edge_gc** } %call222, 0, !dbg !5009
  store i32 %152, i32* %151, align 8, !dbg !5009
  %153 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %150, i32 0, i32 1, !dbg !5009
  %154 = extractvalue { i32, %struct.VEC_edge_gc** } %call222, 1, !dbg !5009
  store %struct.VEC_edge_gc** %154, %struct.VEC_edge_gc*** %153, align 8, !dbg !5009
  %155 = bitcast %struct.edge_iterator* %ei212 to i8*, !dbg !5009
  %156 = bitcast %struct.edge_iterator* %tmp220 to i8*, !dbg !5009
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %155, i8* align 8 %156, i64 16, i1 false), !dbg !5009
  br label %for.cond223, !dbg !5009

for.cond223:                                      ; preds = %for.inc238, %if.end219
  %157 = bitcast %struct.edge_iterator* %ei212 to { i32, %struct.VEC_edge_gc** }*, !dbg !5011
  %158 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %157, i32 0, i32 0, !dbg !5011
  %159 = load i32, i32* %158, align 8, !dbg !5011
  %160 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %157, i32 0, i32 1, !dbg !5011
  %161 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %160, align 8, !dbg !5011
  %call224 = call zeroext i8 @ei_cond(i32 %159, %struct.VEC_edge_gc** %161, %struct.edge_def** %s2), !dbg !5011
  %tobool225 = icmp ne i8 %call224, 0, !dbg !5009
  br i1 %tobool225, label %for.body226, label %for.end239, !dbg !5009

for.body226:                                      ; preds = %for.cond223
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %d2, metadata !5013, metadata !DIExpression()), !dbg !5015
  %162 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5016
  %dest227 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %162, i32 0, i32 1, !dbg !5017
  %163 = load %struct.basic_block_def*, %struct.basic_block_def** %dest227, align 8, !dbg !5017
  store %struct.basic_block_def* %163, %struct.basic_block_def** %d2, align 8, !dbg !5015
  %164 = load %struct.basic_block_def*, %struct.basic_block_def** %d2, align 8, !dbg !5018
  %flags228 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %164, i32 0, i32 13, !dbg !5018
  %165 = load i32, i32* %flags228, align 8, !dbg !5018
  %and229 = and i32 %165, 1024, !dbg !5018
  %tobool230 = icmp ne i32 %and229, 0, !dbg !5018
  br i1 %tobool230, label %if.then231, label %if.end233, !dbg !5020

if.then231:                                       ; preds = %for.body226
  %166 = load %struct.basic_block_def*, %struct.basic_block_def** %d2, align 8, !dbg !5021
  %call232 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %166), !dbg !5022
  store %struct.basic_block_def* %call232, %struct.basic_block_def** %d2, align 8, !dbg !5023
  br label %if.end233, !dbg !5024

if.end233:                                        ; preds = %if.then231, %for.body226
  %167 = load %struct.basic_block_def*, %struct.basic_block_def** %d, align 8, !dbg !5025
  %168 = load %struct.basic_block_def*, %struct.basic_block_def** %d2, align 8, !dbg !5027
  %cmp234 = icmp eq %struct.basic_block_def* %167, %168, !dbg !5028
  br i1 %cmp234, label %if.then236, label %if.end237, !dbg !5029

if.then236:                                       ; preds = %if.end233
  br label %for.end239, !dbg !5030

if.end237:                                        ; preds = %if.end233
  br label %for.inc238, !dbg !5031

for.inc238:                                       ; preds = %if.end237
  call void @ei_next(%struct.edge_iterator* %ei212), !dbg !5011
  br label %for.cond223, !dbg !5011, !llvm.loop !5032

for.end239:                                       ; preds = %if.then236, %for.cond223
  %169 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5034
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %169, i32 0, i32 9, !dbg !5035
  %170 = load i64, i64* %count, align 8, !dbg !5035
  %171 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5036
  %count240 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %171, i32 0, i32 9, !dbg !5037
  %172 = load i64, i64* %count240, align 8, !dbg !5038
  %add = add nsw i64 %172, %170, !dbg !5038
  store i64 %add, i64* %count240, align 8, !dbg !5038
  %173 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5039
  %dest241 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %173, i32 0, i32 1, !dbg !5039
  %174 = load %struct.basic_block_def*, %struct.basic_block_def** %dest241, align 8, !dbg !5039
  %flags242 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %174, i32 0, i32 13, !dbg !5039
  %175 = load i32, i32* %flags242, align 8, !dbg !5039
  %and243 = and i32 %175, 1024, !dbg !5039
  %tobool244 = icmp ne i32 %and243, 0, !dbg !5039
  br i1 %tobool244, label %if.then245, label %if.end260, !dbg !5041

if.then245:                                       ; preds = %for.end239
  %176 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5042
  %count246 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %176, i32 0, i32 9, !dbg !5044
  %177 = load i64, i64* %count246, align 8, !dbg !5044
  %178 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5045
  %dest247 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %178, i32 0, i32 1, !dbg !5046
  %179 = load %struct.basic_block_def*, %struct.basic_block_def** %dest247, align 8, !dbg !5046
  %call248 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %179), !dbg !5047
  %count249 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call248, i32 0, i32 9, !dbg !5048
  %180 = load i64, i64* %count249, align 8, !dbg !5049
  %add250 = add nsw i64 %180, %177, !dbg !5049
  store i64 %add250, i64* %count249, align 8, !dbg !5049
  %181 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5050
  %count251 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %181, i32 0, i32 9, !dbg !5051
  %182 = load i64, i64* %count251, align 8, !dbg !5051
  %183 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5052
  %dest252 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %183, i32 0, i32 1, !dbg !5053
  %184 = load %struct.basic_block_def*, %struct.basic_block_def** %dest252, align 8, !dbg !5053
  %count253 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %184, i32 0, i32 8, !dbg !5054
  %185 = load i64, i64* %count253, align 8, !dbg !5055
  %add254 = add nsw i64 %185, %182, !dbg !5055
  store i64 %add254, i64* %count253, align 8, !dbg !5055
  %186 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5056
  %src255 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %186, i32 0, i32 0, !dbg !5056
  %187 = load %struct.basic_block_def*, %struct.basic_block_def** %src255, align 8, !dbg !5056
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %187, i32 0, i32 11, !dbg !5056
  %188 = load i32, i32* %frequency, align 8, !dbg !5056
  %189 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5056
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %189, i32 0, i32 8, !dbg !5056
  %190 = load i32, i32* %probability, align 4, !dbg !5056
  %mul = mul nsw i32 %188, %190, !dbg !5056
  %add256 = add nsw i32 %mul, 5000, !dbg !5056
  %div = sdiv i32 %add256, 10000, !dbg !5056
  %191 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5057
  %dest257 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %191, i32 0, i32 1, !dbg !5058
  %192 = load %struct.basic_block_def*, %struct.basic_block_def** %dest257, align 8, !dbg !5058
  %frequency258 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %192, i32 0, i32 11, !dbg !5059
  %193 = load i32, i32* %frequency258, align 8, !dbg !5060
  %add259 = add nsw i32 %193, %div, !dbg !5060
  store i32 %add259, i32* %frequency258, align 8, !dbg !5060
  br label %if.end260, !dbg !5061

if.end260:                                        ; preds = %if.then245, %for.end239
  %194 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5062
  %dest261 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %194, i32 0, i32 1, !dbg !5062
  %195 = load %struct.basic_block_def*, %struct.basic_block_def** %dest261, align 8, !dbg !5062
  %flags262 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %195, i32 0, i32 13, !dbg !5062
  %196 = load i32, i32* %flags262, align 8, !dbg !5062
  %and263 = and i32 %196, 1024, !dbg !5062
  %tobool264 = icmp ne i32 %and263, 0, !dbg !5062
  br i1 %tobool264, label %if.then265, label %if.end309, !dbg !5064

if.then265:                                       ; preds = %if.end260
  %197 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5065
  %count266 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %197, i32 0, i32 9, !dbg !5067
  %198 = load i64, i64* %count266, align 8, !dbg !5067
  %199 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5068
  %dest267 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %199, i32 0, i32 1, !dbg !5069
  %200 = load %struct.basic_block_def*, %struct.basic_block_def** %dest267, align 8, !dbg !5069
  %call268 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %200), !dbg !5070
  %count269 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call268, i32 0, i32 9, !dbg !5071
  %201 = load i64, i64* %count269, align 8, !dbg !5072
  %sub = sub nsw i64 %201, %198, !dbg !5072
  store i64 %sub, i64* %count269, align 8, !dbg !5072
  %202 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5073
  %dest270 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %202, i32 0, i32 1, !dbg !5075
  %203 = load %struct.basic_block_def*, %struct.basic_block_def** %dest270, align 8, !dbg !5075
  %call271 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %203), !dbg !5076
  %count272 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call271, i32 0, i32 9, !dbg !5077
  %204 = load i64, i64* %count272, align 8, !dbg !5077
  %cmp273 = icmp slt i64 %204, 0, !dbg !5078
  br i1 %cmp273, label %if.then275, label %if.end279, !dbg !5079

if.then275:                                       ; preds = %if.then265
  %205 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5080
  %dest276 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %205, i32 0, i32 1, !dbg !5081
  %206 = load %struct.basic_block_def*, %struct.basic_block_def** %dest276, align 8, !dbg !5081
  %call277 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %206), !dbg !5082
  %count278 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call277, i32 0, i32 9, !dbg !5083
  store i64 0, i64* %count278, align 8, !dbg !5084
  br label %if.end279, !dbg !5082

if.end279:                                        ; preds = %if.then275, %if.then265
  %207 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5085
  %count280 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %207, i32 0, i32 9, !dbg !5086
  %208 = load i64, i64* %count280, align 8, !dbg !5086
  %209 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5087
  %dest281 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %209, i32 0, i32 1, !dbg !5088
  %210 = load %struct.basic_block_def*, %struct.basic_block_def** %dest281, align 8, !dbg !5088
  %count282 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %210, i32 0, i32 8, !dbg !5089
  %211 = load i64, i64* %count282, align 8, !dbg !5090
  %sub283 = sub nsw i64 %211, %208, !dbg !5090
  store i64 %sub283, i64* %count282, align 8, !dbg !5090
  %212 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5091
  %src284 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %212, i32 0, i32 0, !dbg !5091
  %213 = load %struct.basic_block_def*, %struct.basic_block_def** %src284, align 8, !dbg !5091
  %frequency285 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %213, i32 0, i32 11, !dbg !5091
  %214 = load i32, i32* %frequency285, align 8, !dbg !5091
  %215 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5091
  %probability286 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %215, i32 0, i32 8, !dbg !5091
  %216 = load i32, i32* %probability286, align 4, !dbg !5091
  %mul287 = mul nsw i32 %214, %216, !dbg !5091
  %add288 = add nsw i32 %mul287, 5000, !dbg !5091
  %div289 = sdiv i32 %add288, 10000, !dbg !5091
  %217 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5092
  %dest290 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %217, i32 0, i32 1, !dbg !5093
  %218 = load %struct.basic_block_def*, %struct.basic_block_def** %dest290, align 8, !dbg !5093
  %frequency291 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %218, i32 0, i32 11, !dbg !5094
  %219 = load i32, i32* %frequency291, align 8, !dbg !5095
  %sub292 = sub nsw i32 %219, %div289, !dbg !5095
  store i32 %sub292, i32* %frequency291, align 8, !dbg !5095
  %220 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5096
  %dest293 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %220, i32 0, i32 1, !dbg !5098
  %221 = load %struct.basic_block_def*, %struct.basic_block_def** %dest293, align 8, !dbg !5098
  %frequency294 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %221, i32 0, i32 11, !dbg !5099
  %222 = load i32, i32* %frequency294, align 8, !dbg !5099
  %cmp295 = icmp slt i32 %222, 0, !dbg !5100
  br i1 %cmp295, label %if.then297, label %if.end300, !dbg !5101

if.then297:                                       ; preds = %if.end279
  %223 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5102
  %dest298 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %223, i32 0, i32 1, !dbg !5103
  %224 = load %struct.basic_block_def*, %struct.basic_block_def** %dest298, align 8, !dbg !5103
  %frequency299 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %224, i32 0, i32 11, !dbg !5104
  store i32 0, i32* %frequency299, align 8, !dbg !5105
  br label %if.end300, !dbg !5102

if.end300:                                        ; preds = %if.then297, %if.end279
  %225 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5106
  %dest301 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %225, i32 0, i32 1, !dbg !5108
  %226 = load %struct.basic_block_def*, %struct.basic_block_def** %dest301, align 8, !dbg !5108
  %count302 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %226, i32 0, i32 8, !dbg !5109
  %227 = load i64, i64* %count302, align 8, !dbg !5109
  %cmp303 = icmp slt i64 %227, 0, !dbg !5110
  br i1 %cmp303, label %if.then305, label %if.end308, !dbg !5111

if.then305:                                       ; preds = %if.end300
  %228 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5112
  %dest306 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %228, i32 0, i32 1, !dbg !5113
  %229 = load %struct.basic_block_def*, %struct.basic_block_def** %dest306, align 8, !dbg !5113
  %count307 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %229, i32 0, i32 8, !dbg !5114
  store i64 0, i64* %count307, align 8, !dbg !5115
  br label %if.end308, !dbg !5112

if.end308:                                        ; preds = %if.then305, %if.end300
  br label %if.end309, !dbg !5116

if.end309:                                        ; preds = %if.end308, %if.end260
  %230 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !5117
  %frequency310 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %230, i32 0, i32 11, !dbg !5119
  %231 = load i32, i32* %frequency310, align 8, !dbg !5119
  %tobool311 = icmp ne i32 %231, 0, !dbg !5117
  br i1 %tobool311, label %if.else321, label %land.lhs.true312, !dbg !5120

land.lhs.true312:                                 ; preds = %if.end309
  %232 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !5121
  %frequency313 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %232, i32 0, i32 11, !dbg !5122
  %233 = load i32, i32* %frequency313, align 8, !dbg !5122
  %tobool314 = icmp ne i32 %233, 0, !dbg !5121
  br i1 %tobool314, label %if.else321, label %if.then315, !dbg !5123

if.then315:                                       ; preds = %land.lhs.true312
  %234 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5124
  %probability316 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %234, i32 0, i32 8, !dbg !5125
  %235 = load i32, i32* %probability316, align 4, !dbg !5125
  %236 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5126
  %probability317 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %236, i32 0, i32 8, !dbg !5127
  %237 = load i32, i32* %probability317, align 4, !dbg !5127
  %add318 = add nsw i32 %235, %237, !dbg !5128
  %div319 = sdiv i32 %add318, 2, !dbg !5129
  %238 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5130
  %probability320 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %238, i32 0, i32 8, !dbg !5131
  store i32 %div319, i32* %probability320, align 4, !dbg !5132
  br label %if.end334, !dbg !5130

if.else321:                                       ; preds = %land.lhs.true312, %if.end309
  %239 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5133
  %probability322 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %239, i32 0, i32 8, !dbg !5134
  %240 = load i32, i32* %probability322, align 4, !dbg !5134
  %241 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !5135
  %frequency323 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %241, i32 0, i32 11, !dbg !5136
  %242 = load i32, i32* %frequency323, align 8, !dbg !5136
  %mul324 = mul nsw i32 %240, %242, !dbg !5137
  %243 = load %struct.edge_def*, %struct.edge_def** %s2, align 8, !dbg !5138
  %probability325 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %243, i32 0, i32 8, !dbg !5139
  %244 = load i32, i32* %probability325, align 4, !dbg !5139
  %245 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !5140
  %frequency326 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %245, i32 0, i32 11, !dbg !5141
  %246 = load i32, i32* %frequency326, align 8, !dbg !5141
  %mul327 = mul nsw i32 %244, %246, !dbg !5142
  %add328 = add nsw i32 %mul324, %mul327, !dbg !5143
  %247 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !5144
  %frequency329 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %247, i32 0, i32 11, !dbg !5145
  %248 = load i32, i32* %frequency329, align 8, !dbg !5145
  %249 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !5146
  %frequency330 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %249, i32 0, i32 11, !dbg !5147
  %250 = load i32, i32* %frequency330, align 8, !dbg !5147
  %add331 = add nsw i32 %248, %250, !dbg !5148
  %div332 = sdiv i32 %add328, %add331, !dbg !5149
  %251 = load %struct.edge_def*, %struct.edge_def** %s, align 8, !dbg !5150
  %probability333 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %251, i32 0, i32 8, !dbg !5151
  store i32 %div332, i32* %probability333, align 4, !dbg !5152
  br label %if.end334

if.end334:                                        ; preds = %if.else321, %if.then315
  br label %for.inc335, !dbg !5153

for.inc335:                                       ; preds = %if.end334
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4991
  br label %for.cond208, !dbg !4991, !llvm.loop !5154

for.end336:                                       ; preds = %for.cond208
  %252 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !5156
  %count337 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %252, i32 0, i32 8, !dbg !5157
  %253 = load i64, i64* %count337, align 8, !dbg !5157
  %254 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !5158
  %count338 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %254, i32 0, i32 8, !dbg !5159
  %255 = load i64, i64* %count338, align 8, !dbg !5160
  %add339 = add nsw i64 %255, %253, !dbg !5160
  store i64 %add339, i64* %count338, align 8, !dbg !5160
  %256 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !5161
  %frequency340 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %256, i32 0, i32 11, !dbg !5162
  %257 = load i32, i32* %frequency340, align 8, !dbg !5162
  %258 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !5163
  %frequency341 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %258, i32 0, i32 11, !dbg !5164
  %259 = load i32, i32* %frequency341, align 8, !dbg !5165
  %add342 = add nsw i32 %259, %257, !dbg !5165
  store i32 %add342, i32* %frequency341, align 8, !dbg !5165
  %260 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !5166
  %frequency343 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %260, i32 0, i32 11, !dbg !5168
  %261 = load i32, i32* %frequency343, align 8, !dbg !5168
  %cmp344 = icmp sgt i32 %261, 10000, !dbg !5169
  br i1 %cmp344, label %if.then346, label %if.end348, !dbg !5170

if.then346:                                       ; preds = %for.end336
  %262 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !5171
  %frequency347 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %262, i32 0, i32 11, !dbg !5172
  store i32 10000, i32* %frequency347, align 8, !dbg !5173
  br label %if.end348, !dbg !5171

if.end348:                                        ; preds = %if.then346, %for.end336
  %263 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !5174
  call void @update_br_prob_note(%struct.basic_block_def* %263), !dbg !5175
  %264 = load %struct.rtx_def*, %struct.rtx_def** %newpos1, align 8, !dbg !5176
  %265 = bitcast %struct.rtx_def* %264 to i32*, !dbg !5176
  %bf.load349 = load i32, i32* %265, align 8, !dbg !5176
  %bf.clear350 = and i32 %bf.load349, 65535, !dbg !5176
  %cmp351 = icmp eq i32 %bf.clear350, 12, !dbg !5176
  br i1 %cmp351, label %if.then353, label %if.end358, !dbg !5178

if.then353:                                       ; preds = %if.end348
  %266 = load %struct.rtx_def*, %struct.rtx_def** %newpos1, align 8, !dbg !5179
  %u354 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %266, i32 0, i32 1, !dbg !5179
  %fld355 = bitcast %union.u* %u354 to [1 x %union.rtunion_def]*, !dbg !5179
  %arrayidx356 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld355, i64 0, i64 2, !dbg !5179
  %rt_rtx357 = bitcast %union.rtunion_def* %arrayidx356 to %struct.rtx_def**, !dbg !5179
  %267 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx357, align 8, !dbg !5179
  store %struct.rtx_def* %267, %struct.rtx_def** %newpos1, align 8, !dbg !5180
  br label %if.end358, !dbg !5181

if.end358:                                        ; preds = %if.then353, %if.end348
  br label %while.cond359, !dbg !5182

while.cond359:                                    ; preds = %while.body364, %if.end358
  %268 = load %struct.rtx_def*, %struct.rtx_def** %newpos1, align 8, !dbg !5183
  %269 = bitcast %struct.rtx_def* %268 to i32*, !dbg !5183
  %bf.load360 = load i32, i32* %269, align 8, !dbg !5183
  %bf.clear361 = and i32 %bf.load360, 65535, !dbg !5183
  %cmp362 = icmp eq i32 %bf.clear361, 7, !dbg !5183
  br i1 %cmp362, label %while.body364, label %while.end369, !dbg !5182

while.body364:                                    ; preds = %while.cond359
  %270 = load %struct.rtx_def*, %struct.rtx_def** %newpos1, align 8, !dbg !5184
  %u365 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %270, i32 0, i32 1, !dbg !5184
  %fld366 = bitcast %union.u* %u365 to [1 x %union.rtunion_def]*, !dbg !5184
  %arrayidx367 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld366, i64 0, i64 2, !dbg !5184
  %rt_rtx368 = bitcast %union.rtunion_def* %arrayidx367 to %struct.rtx_def**, !dbg !5184
  %271 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx368, align 8, !dbg !5184
  store %struct.rtx_def* %271, %struct.rtx_def** %newpos1, align 8, !dbg !5185
  br label %while.cond359, !dbg !5182, !llvm.loop !5186

while.end369:                                     ; preds = %while.cond359
  %272 = load %struct.rtx_def*, %struct.rtx_def** %newpos1, align 8, !dbg !5187
  %273 = bitcast %struct.rtx_def* %272 to i32*, !dbg !5187
  %bf.load370 = load i32, i32* %273, align 8, !dbg !5187
  %bf.clear371 = and i32 %bf.load370, 65535, !dbg !5187
  %cmp372 = icmp eq i32 %bf.clear371, 13, !dbg !5187
  br i1 %cmp372, label %land.lhs.true374, label %if.end385, !dbg !5187

land.lhs.true374:                                 ; preds = %while.end369
  %274 = load %struct.rtx_def*, %struct.rtx_def** %newpos1, align 8, !dbg !5187
  %u375 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %274, i32 0, i32 1, !dbg !5187
  %fld376 = bitcast %union.u* %u375 to [1 x %union.rtunion_def]*, !dbg !5187
  %arrayidx377 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld376, i64 0, i64 5, !dbg !5187
  %rt_int = bitcast %union.rtunion_def* %arrayidx377 to i32*, !dbg !5187
  %275 = load i32, i32* %rt_int, align 8, !dbg !5187
  %cmp378 = icmp eq i32 %275, 10, !dbg !5187
  br i1 %cmp378, label %if.then380, label %if.end385, !dbg !5189

if.then380:                                       ; preds = %land.lhs.true374
  %276 = load %struct.rtx_def*, %struct.rtx_def** %newpos1, align 8, !dbg !5190
  %u381 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %276, i32 0, i32 1, !dbg !5190
  %fld382 = bitcast %union.u* %u381 to [1 x %union.rtunion_def]*, !dbg !5190
  %arrayidx383 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld382, i64 0, i64 2, !dbg !5190
  %rt_rtx384 = bitcast %union.rtunion_def* %arrayidx383 to %struct.rtx_def**, !dbg !5190
  %277 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx384, align 8, !dbg !5190
  store %struct.rtx_def* %277, %struct.rtx_def** %newpos1, align 8, !dbg !5191
  br label %if.end385, !dbg !5192

if.end385:                                        ; preds = %if.then380, %land.lhs.true374, %while.end369
  br label %while.cond386, !dbg !5193

while.cond386:                                    ; preds = %while.body391, %if.end385
  %278 = load %struct.rtx_def*, %struct.rtx_def** %newpos1, align 8, !dbg !5194
  %279 = bitcast %struct.rtx_def* %278 to i32*, !dbg !5194
  %bf.load387 = load i32, i32* %279, align 8, !dbg !5194
  %bf.clear388 = and i32 %bf.load387, 65535, !dbg !5194
  %cmp389 = icmp eq i32 %bf.clear388, 7, !dbg !5194
  br i1 %cmp389, label %while.body391, label %while.end396, !dbg !5193

while.body391:                                    ; preds = %while.cond386
  %280 = load %struct.rtx_def*, %struct.rtx_def** %newpos1, align 8, !dbg !5195
  %u392 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %280, i32 0, i32 1, !dbg !5195
  %fld393 = bitcast %union.u* %u392 to [1 x %union.rtunion_def]*, !dbg !5195
  %arrayidx394 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld393, i64 0, i64 2, !dbg !5195
  %rt_rtx395 = bitcast %union.rtunion_def* %arrayidx394 to %struct.rtx_def**, !dbg !5195
  %281 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx395, align 8, !dbg !5195
  store %struct.rtx_def* %281, %struct.rtx_def** %newpos1, align 8, !dbg !5196
  br label %while.cond386, !dbg !5193, !llvm.loop !5197

while.end396:                                     ; preds = %while.cond386
  %282 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !5198
  %283 = load %struct.rtx_def*, %struct.rtx_def** %newpos1, align 8, !dbg !5199
  %u397 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %283, i32 0, i32 1, !dbg !5199
  %fld398 = bitcast %union.u* %u397 to [1 x %union.rtunion_def]*, !dbg !5199
  %arrayidx399 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld398, i64 0, i64 1, !dbg !5199
  %rt_rtx400 = bitcast %union.rtunion_def* %arrayidx399 to %struct.rtx_def**, !dbg !5199
  %284 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx400, align 8, !dbg !5199
  %285 = bitcast %struct.rtx_def* %284 to i8*, !dbg !5199
  %call401 = call %struct.edge_def* @split_block(%struct.basic_block_def* %282, i8* %285), !dbg !5200
  %src402 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call401, i32 0, i32 0, !dbg !5201
  %286 = load %struct.basic_block_def*, %struct.basic_block_def** %src402, align 8, !dbg !5201
  store %struct.basic_block_def* %286, %struct.basic_block_def** %redirect_from, align 8, !dbg !5202
  %287 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_from, align 8, !dbg !5203
  %call403 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %287), !dbg !5204
  store %struct.basic_block_def* %call403, %struct.basic_block_def** %to_remove, align 8, !dbg !5205
  %288 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_from, align 8, !dbg !5206
  %call404 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %288), !dbg !5207
  %289 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !5208
  %call405 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %call404, %struct.basic_block_def* %289), !dbg !5209
  %290 = load %struct.basic_block_def*, %struct.basic_block_def** %to_remove, align 8, !dbg !5210
  call void @delete_basic_block(%struct.basic_block_def* %290), !dbg !5211
  %291 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_from, align 8, !dbg !5212
  call void @update_forwarder_flag(%struct.basic_block_def* %291), !dbg !5213
  %292 = load %struct.basic_block_def*, %struct.basic_block_def** %redirect_to, align 8, !dbg !5214
  %293 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !5216
  %cmp406 = icmp ne %struct.basic_block_def* %292, %293, !dbg !5217
  br i1 %cmp406, label %if.then408, label %if.end409, !dbg !5218

if.then408:                                       ; preds = %while.end396
  %294 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !5219
  call void @update_forwarder_flag(%struct.basic_block_def* %294), !dbg !5220
  br label %if.end409, !dbg !5220

if.end409:                                        ; preds = %if.then408, %while.end396
  store i8 1, i8* %retval, align 1, !dbg !5221
  br label %return, !dbg !5221

return:                                           ; preds = %if.end409, %if.then97, %if.then87, %if.then79, %if.then75, %if.then56, %if.then44, %if.then33, %if.then29, %if.then
  %295 = load i8, i8* %retval, align 1, !dbg !5222
  ret i8 %295, !dbg !5222
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @outgoing_edges_match(i32 %mode, %struct.basic_block_def* %bb1, %struct.basic_block_def* %bb2) #0 !dbg !5223 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %bb1.addr = alloca %struct.basic_block_def*, align 8
  %bb2.addr = alloca %struct.basic_block_def*, align 8
  %nehedges1 = alloca i32, align 4
  %nehedges2 = alloca i32, align 4
  %fallthru1 = alloca %struct.edge_def*, align 8
  %fallthru2 = alloca %struct.edge_def*, align 8
  %e1 = alloca %struct.edge_def*, align 8
  %e2 = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %b1 = alloca %struct.edge_def*, align 8
  %f1 = alloca %struct.edge_def*, align 8
  %b2 = alloca %struct.edge_def*, align 8
  %f2 = alloca %struct.edge_def*, align 8
  %reverse = alloca i8, align 1
  %match = alloca i8, align 1
  %set1 = alloca %struct.rtx_def*, align 8
  %set2 = alloca %struct.rtx_def*, align 8
  %cond1 = alloca %struct.rtx_def*, align 8
  %cond2 = alloca %struct.rtx_def*, align 8
  %code1 = alloca i32, align 4
  %code2 = alloca i32, align 4
  %prob2 = alloca i32, align 4
  %label1 = alloca %struct.rtx_def*, align 8
  %label2 = alloca %struct.rtx_def*, align 8
  %table1 = alloca %struct.rtx_def*, align 8
  %table2 = alloca %struct.rtx_def*, align 8
  %identical = alloca i8, align 1
  %p1 = alloca %struct.rtx_def*, align 8
  %p2 = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %rr = alloca %struct.replace_label_data, align 8
  %match556 = alloca i8, align 1
  %tmp = alloca %struct.edge_iterator, align 8
  %d1 = alloca %struct.basic_block_def*, align 8
  %d2 = alloca %struct.basic_block_def*, align 8
  %n1 = alloca %struct.rtx_def*, align 8
  %n2 = alloca %struct.rtx_def*, align 8
  %tmp726 = alloca %struct.edge_iterator, align 8
  %e2733 = alloca %struct.edge_def*, align 8
  %ei734 = alloca %struct.edge_iterator, align 8
  %d1735 = alloca %struct.basic_block_def*, align 8
  %tmp752 = alloca %struct.edge_iterator, align 8
  %d2759 = alloca %struct.basic_block_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5226, metadata !DIExpression()), !dbg !5227
  store %struct.basic_block_def* %bb1, %struct.basic_block_def** %bb1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb1.addr, metadata !5228, metadata !DIExpression()), !dbg !5229
  store %struct.basic_block_def* %bb2, %struct.basic_block_def** %bb2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb2.addr, metadata !5230, metadata !DIExpression()), !dbg !5231
  call void @llvm.dbg.declare(metadata i32* %nehedges1, metadata !5232, metadata !DIExpression()), !dbg !5233
  store i32 0, i32* %nehedges1, align 4, !dbg !5233
  call void @llvm.dbg.declare(metadata i32* %nehedges2, metadata !5234, metadata !DIExpression()), !dbg !5235
  store i32 0, i32* %nehedges2, align 4, !dbg !5235
  call void @llvm.dbg.declare(metadata %struct.edge_def** %fallthru1, metadata !5236, metadata !DIExpression()), !dbg !5237
  store %struct.edge_def* null, %struct.edge_def** %fallthru1, align 8, !dbg !5237
  call void @llvm.dbg.declare(metadata %struct.edge_def** %fallthru2, metadata !5238, metadata !DIExpression()), !dbg !5239
  store %struct.edge_def* null, %struct.edge_def** %fallthru2, align 8, !dbg !5239
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e1, metadata !5240, metadata !DIExpression()), !dbg !5241
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e2, metadata !5242, metadata !DIExpression()), !dbg !5243
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5244, metadata !DIExpression()), !dbg !5245
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5246
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !5248
  %conv = zext i8 %call to i32, !dbg !5248
  %tobool = icmp ne i32 %conv, 0, !dbg !5248
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5249

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5250
  %call1 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %1), !dbg !5251
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call1, i32 0, i32 7, !dbg !5252
  %2 = load i32, i32* %flags, align 8, !dbg !5252
  %and = and i32 %2, 30, !dbg !5253
  %cmp = icmp eq i32 %and, 0, !dbg !5254
  br i1 %cmp, label %land.lhs.true3, label %if.end, !dbg !5255

land.lhs.true3:                                   ; preds = %land.lhs.true
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5256
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !5256
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5256
  %4 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5256
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %4, i32 0, i32 1, !dbg !5256
  %5 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5256
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !5256
  %bf.load = load i32, i32* %6, align 8, !dbg !5256
  %bf.clear = and i32 %bf.load, 65535, !dbg !5256
  %cmp4 = icmp eq i32 %bf.clear, 9, !dbg !5256
  br i1 %cmp4, label %lor.lhs.false, label %if.then, !dbg !5257

lor.lhs.false:                                    ; preds = %land.lhs.true3
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5258
  %il6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 7, !dbg !5258
  %rtl7 = bitcast %union.basic_block_il_dependent* %il6 to %struct.rtl_bb_info**, !dbg !5258
  %8 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl7, align 8, !dbg !5258
  %end_8 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %8, i32 0, i32 1, !dbg !5258
  %9 = load %struct.rtx_def*, %struct.rtx_def** %end_8, align 8, !dbg !5258
  %call9 = call i32 @simplejump_p(%struct.rtx_def* %9), !dbg !5259
  %tobool10 = icmp ne i32 %call9, 0, !dbg !5259
  br i1 %tobool10, label %if.then, label %if.end, !dbg !5260

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true3
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5261
  %call11 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %10), !dbg !5262
  %conv12 = zext i8 %call11 to i32, !dbg !5262
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !5262
  br i1 %tobool13, label %land.lhs.true14, label %land.end, !dbg !5263

land.lhs.true14:                                  ; preds = %if.then
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5264
  %call15 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %11), !dbg !5265
  %flags16 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call15, i32 0, i32 7, !dbg !5266
  %12 = load i32, i32* %flags16, align 8, !dbg !5266
  %and17 = and i32 %12, 30, !dbg !5267
  %cmp18 = icmp eq i32 %and17, 0, !dbg !5268
  br i1 %cmp18, label %land.rhs, label %land.end, !dbg !5269

land.rhs:                                         ; preds = %land.lhs.true14
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5270
  %il20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !5270
  %rtl21 = bitcast %union.basic_block_il_dependent* %il20 to %struct.rtl_bb_info**, !dbg !5270
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl21, align 8, !dbg !5270
  %end_22 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 1, !dbg !5270
  %15 = load %struct.rtx_def*, %struct.rtx_def** %end_22, align 8, !dbg !5270
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !5270
  %bf.load23 = load i32, i32* %16, align 8, !dbg !5270
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !5270
  %cmp25 = icmp eq i32 %bf.clear24, 9, !dbg !5270
  br i1 %cmp25, label %lor.rhs, label %lor.end, !dbg !5271

lor.rhs:                                          ; preds = %land.rhs
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5272
  %il27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 7, !dbg !5272
  %rtl28 = bitcast %union.basic_block_il_dependent* %il27 to %struct.rtl_bb_info**, !dbg !5272
  %18 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl28, align 8, !dbg !5272
  %end_29 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %18, i32 0, i32 1, !dbg !5272
  %19 = load %struct.rtx_def*, %struct.rtx_def** %end_29, align 8, !dbg !5272
  %call30 = call i32 @simplejump_p(%struct.rtx_def* %19), !dbg !5273
  %tobool31 = icmp ne i32 %call30, 0, !dbg !5271
  br label %lor.end, !dbg !5271

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %20 = phi i1 [ true, %land.rhs ], [ %tobool31, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.lhs.true14, %if.then
  %21 = phi i1 [ false, %land.lhs.true14 ], [ false, %if.then ], [ %20, %lor.end ], !dbg !5274
  %land.ext = zext i1 %21 to i32, !dbg !5269
  %conv32 = trunc i32 %land.ext to i8, !dbg !5275
  store i8 %conv32, i8* %retval, align 1, !dbg !5276
  br label %return, !dbg !5276

if.end:                                           ; preds = %lor.lhs.false, %land.lhs.true, %entry
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5277
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 1, !dbg !5277
  %23 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5277
  %tobool33 = icmp ne %struct.VEC_edge_gc* %23, null, !dbg !5277
  br i1 %tobool33, label %cond.true, label %cond.false, !dbg !5277

cond.true:                                        ; preds = %if.end
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5277
  %succs34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 1, !dbg !5277
  %25 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs34, align 8, !dbg !5277
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %25, i32 0, i32 0, !dbg !5277
  br label %cond.end, !dbg !5277

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5277

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5277
  %call35 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5277
  %cmp36 = icmp eq i32 %call35, 2, !dbg !5279
  br i1 %cmp36, label %land.lhs.true38, label %if.end429, !dbg !5280

land.lhs.true38:                                  ; preds = %cond.end
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5281
  %il39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 7, !dbg !5281
  %rtl40 = bitcast %union.basic_block_il_dependent* %il39 to %struct.rtl_bb_info**, !dbg !5281
  %27 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl40, align 8, !dbg !5281
  %end_41 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %27, i32 0, i32 1, !dbg !5281
  %28 = load %struct.rtx_def*, %struct.rtx_def** %end_41, align 8, !dbg !5281
  %call42 = call i32 @any_condjump_p(%struct.rtx_def* %28), !dbg !5282
  %tobool43 = icmp ne i32 %call42, 0, !dbg !5282
  br i1 %tobool43, label %land.lhs.true44, label %if.end429, !dbg !5283

land.lhs.true44:                                  ; preds = %land.lhs.true38
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5284
  %il45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 7, !dbg !5284
  %rtl46 = bitcast %union.basic_block_il_dependent* %il45 to %struct.rtl_bb_info**, !dbg !5284
  %30 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl46, align 8, !dbg !5284
  %end_47 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %30, i32 0, i32 1, !dbg !5284
  %31 = load %struct.rtx_def*, %struct.rtx_def** %end_47, align 8, !dbg !5284
  %call48 = call i32 @onlyjump_p(%struct.rtx_def* %31), !dbg !5285
  %tobool49 = icmp ne i32 %call48, 0, !dbg !5285
  br i1 %tobool49, label %if.then50, label %if.end429, !dbg !5286

if.then50:                                        ; preds = %land.lhs.true44
  call void @llvm.dbg.declare(metadata %struct.edge_def** %b1, metadata !5287, metadata !DIExpression()), !dbg !5289
  call void @llvm.dbg.declare(metadata %struct.edge_def** %f1, metadata !5290, metadata !DIExpression()), !dbg !5291
  call void @llvm.dbg.declare(metadata %struct.edge_def** %b2, metadata !5292, metadata !DIExpression()), !dbg !5293
  call void @llvm.dbg.declare(metadata %struct.edge_def** %f2, metadata !5294, metadata !DIExpression()), !dbg !5295
  call void @llvm.dbg.declare(metadata i8* %reverse, metadata !5296, metadata !DIExpression()), !dbg !5297
  call void @llvm.dbg.declare(metadata i8* %match, metadata !5298, metadata !DIExpression()), !dbg !5299
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set1, metadata !5300, metadata !DIExpression()), !dbg !5301
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set2, metadata !5302, metadata !DIExpression()), !dbg !5303
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond1, metadata !5304, metadata !DIExpression()), !dbg !5305
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond2, metadata !5306, metadata !DIExpression()), !dbg !5307
  call void @llvm.dbg.declare(metadata i32* %code1, metadata !5308, metadata !DIExpression()), !dbg !5309
  call void @llvm.dbg.declare(metadata i32* %code2, metadata !5310, metadata !DIExpression()), !dbg !5311
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5312
  %succs51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 1, !dbg !5312
  %33 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs51, align 8, !dbg !5312
  %tobool52 = icmp ne %struct.VEC_edge_gc* %33, null, !dbg !5312
  br i1 %tobool52, label %cond.true53, label %cond.false56, !dbg !5312

cond.true53:                                      ; preds = %if.then50
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5312
  %succs54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 1, !dbg !5312
  %35 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs54, align 8, !dbg !5312
  %base55 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %35, i32 0, i32 0, !dbg !5312
  br label %cond.end57, !dbg !5312

cond.false56:                                     ; preds = %if.then50
  br label %cond.end57, !dbg !5312

cond.end57:                                       ; preds = %cond.false56, %cond.true53
  %cond58 = phi %struct.VEC_edge_base* [ %base55, %cond.true53 ], [ null, %cond.false56 ], !dbg !5312
  %call59 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond58), !dbg !5312
  %cmp60 = icmp ne i32 %call59, 2, !dbg !5314
  br i1 %cmp60, label %if.then74, label %lor.lhs.false62, !dbg !5315

lor.lhs.false62:                                  ; preds = %cond.end57
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5316
  %il63 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 7, !dbg !5316
  %rtl64 = bitcast %union.basic_block_il_dependent* %il63 to %struct.rtl_bb_info**, !dbg !5316
  %37 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl64, align 8, !dbg !5316
  %end_65 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %37, i32 0, i32 1, !dbg !5316
  %38 = load %struct.rtx_def*, %struct.rtx_def** %end_65, align 8, !dbg !5316
  %call66 = call i32 @any_condjump_p(%struct.rtx_def* %38), !dbg !5317
  %tobool67 = icmp ne i32 %call66, 0, !dbg !5317
  br i1 %tobool67, label %lor.lhs.false68, label %if.then74, !dbg !5318

lor.lhs.false68:                                  ; preds = %lor.lhs.false62
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5319
  %il69 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 7, !dbg !5319
  %rtl70 = bitcast %union.basic_block_il_dependent* %il69 to %struct.rtl_bb_info**, !dbg !5319
  %40 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl70, align 8, !dbg !5319
  %end_71 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %40, i32 0, i32 1, !dbg !5319
  %41 = load %struct.rtx_def*, %struct.rtx_def** %end_71, align 8, !dbg !5319
  %call72 = call i32 @onlyjump_p(%struct.rtx_def* %41), !dbg !5320
  %tobool73 = icmp ne i32 %call72, 0, !dbg !5320
  br i1 %tobool73, label %if.end75, label %if.then74, !dbg !5321

if.then74:                                        ; preds = %lor.lhs.false68, %lor.lhs.false62, %cond.end57
  store i8 0, i8* %retval, align 1, !dbg !5322
  br label %return, !dbg !5322

if.end75:                                         ; preds = %lor.lhs.false68
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5323
  %succs76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 1, !dbg !5323
  %43 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs76, align 8, !dbg !5323
  %tobool77 = icmp ne %struct.VEC_edge_gc* %43, null, !dbg !5323
  br i1 %tobool77, label %cond.true78, label %cond.false81, !dbg !5323

cond.true78:                                      ; preds = %if.end75
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5323
  %succs79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 1, !dbg !5323
  %45 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs79, align 8, !dbg !5323
  %base80 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %45, i32 0, i32 0, !dbg !5323
  br label %cond.end82, !dbg !5323

cond.false81:                                     ; preds = %if.end75
  br label %cond.end82, !dbg !5323

cond.end82:                                       ; preds = %cond.false81, %cond.true78
  %cond83 = phi %struct.VEC_edge_base* [ %base80, %cond.true78 ], [ null, %cond.false81 ], !dbg !5323
  %call84 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond83, i32 0), !dbg !5323
  %flags85 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call84, i32 0, i32 7, !dbg !5323
  %46 = load i32, i32* %flags85, align 8, !dbg !5323
  %and86 = and i32 %46, 1, !dbg !5323
  %tobool87 = icmp ne i32 %and86, 0, !dbg !5323
  br i1 %tobool87, label %cond.true88, label %cond.false98, !dbg !5323

cond.true88:                                      ; preds = %cond.end82
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5323
  %succs89 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 1, !dbg !5323
  %48 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs89, align 8, !dbg !5323
  %tobool90 = icmp ne %struct.VEC_edge_gc* %48, null, !dbg !5323
  br i1 %tobool90, label %cond.true91, label %cond.false94, !dbg !5323

cond.true91:                                      ; preds = %cond.true88
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5323
  %succs92 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 1, !dbg !5323
  %50 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs92, align 8, !dbg !5323
  %base93 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %50, i32 0, i32 0, !dbg !5323
  br label %cond.end95, !dbg !5323

cond.false94:                                     ; preds = %cond.true88
  br label %cond.end95, !dbg !5323

cond.end95:                                       ; preds = %cond.false94, %cond.true91
  %cond96 = phi %struct.VEC_edge_base* [ %base93, %cond.true91 ], [ null, %cond.false94 ], !dbg !5323
  %call97 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond96, i32 1), !dbg !5323
  br label %cond.end108, !dbg !5323

cond.false98:                                     ; preds = %cond.end82
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5323
  %succs99 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 1, !dbg !5323
  %52 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs99, align 8, !dbg !5323
  %tobool100 = icmp ne %struct.VEC_edge_gc* %52, null, !dbg !5323
  br i1 %tobool100, label %cond.true101, label %cond.false104, !dbg !5323

cond.true101:                                     ; preds = %cond.false98
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5323
  %succs102 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 1, !dbg !5323
  %54 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs102, align 8, !dbg !5323
  %base103 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %54, i32 0, i32 0, !dbg !5323
  br label %cond.end105, !dbg !5323

cond.false104:                                    ; preds = %cond.false98
  br label %cond.end105, !dbg !5323

cond.end105:                                      ; preds = %cond.false104, %cond.true101
  %cond106 = phi %struct.VEC_edge_base* [ %base103, %cond.true101 ], [ null, %cond.false104 ], !dbg !5323
  %call107 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond106, i32 0), !dbg !5323
  br label %cond.end108, !dbg !5323

cond.end108:                                      ; preds = %cond.end105, %cond.end95
  %cond109 = phi %struct.edge_def* [ %call97, %cond.end95 ], [ %call107, %cond.end105 ], !dbg !5323
  store %struct.edge_def* %cond109, %struct.edge_def** %b1, align 8, !dbg !5324
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5325
  %succs110 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 1, !dbg !5325
  %56 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs110, align 8, !dbg !5325
  %tobool111 = icmp ne %struct.VEC_edge_gc* %56, null, !dbg !5325
  br i1 %tobool111, label %cond.true112, label %cond.false115, !dbg !5325

cond.true112:                                     ; preds = %cond.end108
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5325
  %succs113 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 1, !dbg !5325
  %58 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs113, align 8, !dbg !5325
  %base114 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %58, i32 0, i32 0, !dbg !5325
  br label %cond.end116, !dbg !5325

cond.false115:                                    ; preds = %cond.end108
  br label %cond.end116, !dbg !5325

cond.end116:                                      ; preds = %cond.false115, %cond.true112
  %cond117 = phi %struct.VEC_edge_base* [ %base114, %cond.true112 ], [ null, %cond.false115 ], !dbg !5325
  %call118 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond117, i32 0), !dbg !5325
  %flags119 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call118, i32 0, i32 7, !dbg !5325
  %59 = load i32, i32* %flags119, align 8, !dbg !5325
  %and120 = and i32 %59, 1, !dbg !5325
  %tobool121 = icmp ne i32 %and120, 0, !dbg !5325
  br i1 %tobool121, label %cond.true122, label %cond.false132, !dbg !5325

cond.true122:                                     ; preds = %cond.end116
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5325
  %succs123 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 1, !dbg !5325
  %61 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs123, align 8, !dbg !5325
  %tobool124 = icmp ne %struct.VEC_edge_gc* %61, null, !dbg !5325
  br i1 %tobool124, label %cond.true125, label %cond.false128, !dbg !5325

cond.true125:                                     ; preds = %cond.true122
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5325
  %succs126 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 1, !dbg !5325
  %63 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs126, align 8, !dbg !5325
  %base127 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %63, i32 0, i32 0, !dbg !5325
  br label %cond.end129, !dbg !5325

cond.false128:                                    ; preds = %cond.true122
  br label %cond.end129, !dbg !5325

cond.end129:                                      ; preds = %cond.false128, %cond.true125
  %cond130 = phi %struct.VEC_edge_base* [ %base127, %cond.true125 ], [ null, %cond.false128 ], !dbg !5325
  %call131 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond130, i32 1), !dbg !5325
  br label %cond.end142, !dbg !5325

cond.false132:                                    ; preds = %cond.end116
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5325
  %succs133 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %64, i32 0, i32 1, !dbg !5325
  %65 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs133, align 8, !dbg !5325
  %tobool134 = icmp ne %struct.VEC_edge_gc* %65, null, !dbg !5325
  br i1 %tobool134, label %cond.true135, label %cond.false138, !dbg !5325

cond.true135:                                     ; preds = %cond.false132
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5325
  %succs136 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 1, !dbg !5325
  %67 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs136, align 8, !dbg !5325
  %base137 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %67, i32 0, i32 0, !dbg !5325
  br label %cond.end139, !dbg !5325

cond.false138:                                    ; preds = %cond.false132
  br label %cond.end139, !dbg !5325

cond.end139:                                      ; preds = %cond.false138, %cond.true135
  %cond140 = phi %struct.VEC_edge_base* [ %base137, %cond.true135 ], [ null, %cond.false138 ], !dbg !5325
  %call141 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond140, i32 0), !dbg !5325
  br label %cond.end142, !dbg !5325

cond.end142:                                      ; preds = %cond.end139, %cond.end129
  %cond143 = phi %struct.edge_def* [ %call131, %cond.end129 ], [ %call141, %cond.end139 ], !dbg !5325
  store %struct.edge_def* %cond143, %struct.edge_def** %b2, align 8, !dbg !5326
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5327
  %succs144 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %68, i32 0, i32 1, !dbg !5327
  %69 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs144, align 8, !dbg !5327
  %tobool145 = icmp ne %struct.VEC_edge_gc* %69, null, !dbg !5327
  br i1 %tobool145, label %cond.true146, label %cond.false149, !dbg !5327

cond.true146:                                     ; preds = %cond.end142
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5327
  %succs147 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %70, i32 0, i32 1, !dbg !5327
  %71 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs147, align 8, !dbg !5327
  %base148 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %71, i32 0, i32 0, !dbg !5327
  br label %cond.end150, !dbg !5327

cond.false149:                                    ; preds = %cond.end142
  br label %cond.end150, !dbg !5327

cond.end150:                                      ; preds = %cond.false149, %cond.true146
  %cond151 = phi %struct.VEC_edge_base* [ %base148, %cond.true146 ], [ null, %cond.false149 ], !dbg !5327
  %call152 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond151, i32 0), !dbg !5327
  %flags153 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call152, i32 0, i32 7, !dbg !5327
  %72 = load i32, i32* %flags153, align 8, !dbg !5327
  %and154 = and i32 %72, 1, !dbg !5327
  %tobool155 = icmp ne i32 %and154, 0, !dbg !5327
  br i1 %tobool155, label %cond.true156, label %cond.false166, !dbg !5327

cond.true156:                                     ; preds = %cond.end150
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5327
  %succs157 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %73, i32 0, i32 1, !dbg !5327
  %74 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs157, align 8, !dbg !5327
  %tobool158 = icmp ne %struct.VEC_edge_gc* %74, null, !dbg !5327
  br i1 %tobool158, label %cond.true159, label %cond.false162, !dbg !5327

cond.true159:                                     ; preds = %cond.true156
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5327
  %succs160 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 1, !dbg !5327
  %76 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs160, align 8, !dbg !5327
  %base161 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %76, i32 0, i32 0, !dbg !5327
  br label %cond.end163, !dbg !5327

cond.false162:                                    ; preds = %cond.true156
  br label %cond.end163, !dbg !5327

cond.end163:                                      ; preds = %cond.false162, %cond.true159
  %cond164 = phi %struct.VEC_edge_base* [ %base161, %cond.true159 ], [ null, %cond.false162 ], !dbg !5327
  %call165 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond164, i32 0), !dbg !5327
  br label %cond.end176, !dbg !5327

cond.false166:                                    ; preds = %cond.end150
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5327
  %succs167 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 1, !dbg !5327
  %78 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs167, align 8, !dbg !5327
  %tobool168 = icmp ne %struct.VEC_edge_gc* %78, null, !dbg !5327
  br i1 %tobool168, label %cond.true169, label %cond.false172, !dbg !5327

cond.true169:                                     ; preds = %cond.false166
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5327
  %succs170 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 1, !dbg !5327
  %80 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs170, align 8, !dbg !5327
  %base171 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %80, i32 0, i32 0, !dbg !5327
  br label %cond.end173, !dbg !5327

cond.false172:                                    ; preds = %cond.false166
  br label %cond.end173, !dbg !5327

cond.end173:                                      ; preds = %cond.false172, %cond.true169
  %cond174 = phi %struct.VEC_edge_base* [ %base171, %cond.true169 ], [ null, %cond.false172 ], !dbg !5327
  %call175 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond174, i32 1), !dbg !5327
  br label %cond.end176, !dbg !5327

cond.end176:                                      ; preds = %cond.end173, %cond.end163
  %cond177 = phi %struct.edge_def* [ %call165, %cond.end163 ], [ %call175, %cond.end173 ], !dbg !5327
  store %struct.edge_def* %cond177, %struct.edge_def** %f1, align 8, !dbg !5328
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5329
  %succs178 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 1, !dbg !5329
  %82 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs178, align 8, !dbg !5329
  %tobool179 = icmp ne %struct.VEC_edge_gc* %82, null, !dbg !5329
  br i1 %tobool179, label %cond.true180, label %cond.false183, !dbg !5329

cond.true180:                                     ; preds = %cond.end176
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5329
  %succs181 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %83, i32 0, i32 1, !dbg !5329
  %84 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs181, align 8, !dbg !5329
  %base182 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %84, i32 0, i32 0, !dbg !5329
  br label %cond.end184, !dbg !5329

cond.false183:                                    ; preds = %cond.end176
  br label %cond.end184, !dbg !5329

cond.end184:                                      ; preds = %cond.false183, %cond.true180
  %cond185 = phi %struct.VEC_edge_base* [ %base182, %cond.true180 ], [ null, %cond.false183 ], !dbg !5329
  %call186 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond185, i32 0), !dbg !5329
  %flags187 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call186, i32 0, i32 7, !dbg !5329
  %85 = load i32, i32* %flags187, align 8, !dbg !5329
  %and188 = and i32 %85, 1, !dbg !5329
  %tobool189 = icmp ne i32 %and188, 0, !dbg !5329
  br i1 %tobool189, label %cond.true190, label %cond.false200, !dbg !5329

cond.true190:                                     ; preds = %cond.end184
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5329
  %succs191 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %86, i32 0, i32 1, !dbg !5329
  %87 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs191, align 8, !dbg !5329
  %tobool192 = icmp ne %struct.VEC_edge_gc* %87, null, !dbg !5329
  br i1 %tobool192, label %cond.true193, label %cond.false196, !dbg !5329

cond.true193:                                     ; preds = %cond.true190
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5329
  %succs194 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %88, i32 0, i32 1, !dbg !5329
  %89 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs194, align 8, !dbg !5329
  %base195 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %89, i32 0, i32 0, !dbg !5329
  br label %cond.end197, !dbg !5329

cond.false196:                                    ; preds = %cond.true190
  br label %cond.end197, !dbg !5329

cond.end197:                                      ; preds = %cond.false196, %cond.true193
  %cond198 = phi %struct.VEC_edge_base* [ %base195, %cond.true193 ], [ null, %cond.false196 ], !dbg !5329
  %call199 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond198, i32 0), !dbg !5329
  br label %cond.end210, !dbg !5329

cond.false200:                                    ; preds = %cond.end184
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5329
  %succs201 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 1, !dbg !5329
  %91 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs201, align 8, !dbg !5329
  %tobool202 = icmp ne %struct.VEC_edge_gc* %91, null, !dbg !5329
  br i1 %tobool202, label %cond.true203, label %cond.false206, !dbg !5329

cond.true203:                                     ; preds = %cond.false200
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5329
  %succs204 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 1, !dbg !5329
  %93 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs204, align 8, !dbg !5329
  %base205 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %93, i32 0, i32 0, !dbg !5329
  br label %cond.end207, !dbg !5329

cond.false206:                                    ; preds = %cond.false200
  br label %cond.end207, !dbg !5329

cond.end207:                                      ; preds = %cond.false206, %cond.true203
  %cond208 = phi %struct.VEC_edge_base* [ %base205, %cond.true203 ], [ null, %cond.false206 ], !dbg !5329
  %call209 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond208, i32 1), !dbg !5329
  br label %cond.end210, !dbg !5329

cond.end210:                                      ; preds = %cond.end207, %cond.end197
  %cond211 = phi %struct.edge_def* [ %call199, %cond.end197 ], [ %call209, %cond.end207 ], !dbg !5329
  store %struct.edge_def* %cond211, %struct.edge_def** %f2, align 8, !dbg !5330
  %94 = load %struct.edge_def*, %struct.edge_def** %f1, align 8, !dbg !5331
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %94, i32 0, i32 1, !dbg !5331
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5331
  %flags212 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 13, !dbg !5331
  %96 = load i32, i32* %flags212, align 8, !dbg !5331
  %and213 = and i32 %96, 1024, !dbg !5331
  %tobool214 = icmp ne i32 %and213, 0, !dbg !5331
  br i1 %tobool214, label %if.then215, label %if.end218, !dbg !5333

if.then215:                                       ; preds = %cond.end210
  %97 = load %struct.edge_def*, %struct.edge_def** %f1, align 8, !dbg !5334
  %dest216 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %97, i32 0, i32 1, !dbg !5335
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %dest216, align 8, !dbg !5335
  %call217 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %98), !dbg !5336
  store %struct.edge_def* %call217, %struct.edge_def** %f1, align 8, !dbg !5337
  br label %if.end218, !dbg !5338

if.end218:                                        ; preds = %if.then215, %cond.end210
  %99 = load %struct.edge_def*, %struct.edge_def** %f2, align 8, !dbg !5339
  %dest219 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %99, i32 0, i32 1, !dbg !5339
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %dest219, align 8, !dbg !5339
  %flags220 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %100, i32 0, i32 13, !dbg !5339
  %101 = load i32, i32* %flags220, align 8, !dbg !5339
  %and221 = and i32 %101, 1024, !dbg !5339
  %tobool222 = icmp ne i32 %and221, 0, !dbg !5339
  br i1 %tobool222, label %if.then223, label %if.end226, !dbg !5341

if.then223:                                       ; preds = %if.end218
  %102 = load %struct.edge_def*, %struct.edge_def** %f2, align 8, !dbg !5342
  %dest224 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %102, i32 0, i32 1, !dbg !5343
  %103 = load %struct.basic_block_def*, %struct.basic_block_def** %dest224, align 8, !dbg !5343
  %call225 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %103), !dbg !5344
  store %struct.edge_def* %call225, %struct.edge_def** %f2, align 8, !dbg !5345
  br label %if.end226, !dbg !5346

if.end226:                                        ; preds = %if.then223, %if.end218
  %104 = load %struct.edge_def*, %struct.edge_def** %f1, align 8, !dbg !5347
  %dest227 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %104, i32 0, i32 1, !dbg !5347
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %dest227, align 8, !dbg !5347
  %flags228 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %105, i32 0, i32 13, !dbg !5347
  %106 = load i32, i32* %flags228, align 8, !dbg !5347
  %and229 = and i32 %106, 1024, !dbg !5347
  %tobool230 = icmp ne i32 %and229, 0, !dbg !5347
  br i1 %tobool230, label %if.then246, label %lor.lhs.false231, !dbg !5349

lor.lhs.false231:                                 ; preds = %if.end226
  %107 = load %struct.edge_def*, %struct.edge_def** %f2, align 8, !dbg !5350
  %dest232 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %107, i32 0, i32 1, !dbg !5350
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %dest232, align 8, !dbg !5350
  %flags233 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %108, i32 0, i32 13, !dbg !5350
  %109 = load i32, i32* %flags233, align 8, !dbg !5350
  %and234 = and i32 %109, 1024, !dbg !5350
  %tobool235 = icmp ne i32 %and234, 0, !dbg !5350
  br i1 %tobool235, label %if.then246, label %lor.lhs.false236, !dbg !5351

lor.lhs.false236:                                 ; preds = %lor.lhs.false231
  %110 = load %struct.edge_def*, %struct.edge_def** %b1, align 8, !dbg !5352
  %dest237 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %110, i32 0, i32 1, !dbg !5352
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %dest237, align 8, !dbg !5352
  %flags238 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %111, i32 0, i32 13, !dbg !5352
  %112 = load i32, i32* %flags238, align 8, !dbg !5352
  %and239 = and i32 %112, 1024, !dbg !5352
  %tobool240 = icmp ne i32 %and239, 0, !dbg !5352
  br i1 %tobool240, label %if.then246, label %lor.lhs.false241, !dbg !5353

lor.lhs.false241:                                 ; preds = %lor.lhs.false236
  %113 = load %struct.edge_def*, %struct.edge_def** %b2, align 8, !dbg !5354
  %dest242 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %113, i32 0, i32 1, !dbg !5354
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %dest242, align 8, !dbg !5354
  %flags243 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %114, i32 0, i32 13, !dbg !5354
  %115 = load i32, i32* %flags243, align 8, !dbg !5354
  %and244 = and i32 %115, 1024, !dbg !5354
  %tobool245 = icmp ne i32 %and244, 0, !dbg !5354
  br i1 %tobool245, label %if.then246, label %if.end247, !dbg !5355

if.then246:                                       ; preds = %lor.lhs.false241, %lor.lhs.false236, %lor.lhs.false231, %if.end226
  store i8 0, i8* %retval, align 1, !dbg !5356
  br label %return, !dbg !5356

if.end247:                                        ; preds = %lor.lhs.false241
  %116 = load %struct.edge_def*, %struct.edge_def** %f1, align 8, !dbg !5357
  %dest248 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %116, i32 0, i32 1, !dbg !5359
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %dest248, align 8, !dbg !5359
  %118 = load %struct.edge_def*, %struct.edge_def** %f2, align 8, !dbg !5360
  %dest249 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %118, i32 0, i32 1, !dbg !5361
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %dest249, align 8, !dbg !5361
  %cmp250 = icmp eq %struct.basic_block_def* %117, %119, !dbg !5362
  br i1 %cmp250, label %land.lhs.true252, label %if.else, !dbg !5363

land.lhs.true252:                                 ; preds = %if.end247
  %120 = load %struct.edge_def*, %struct.edge_def** %b1, align 8, !dbg !5364
  %dest253 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %120, i32 0, i32 1, !dbg !5365
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %dest253, align 8, !dbg !5365
  %122 = load %struct.edge_def*, %struct.edge_def** %b2, align 8, !dbg !5366
  %dest254 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %122, i32 0, i32 1, !dbg !5367
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %dest254, align 8, !dbg !5367
  %cmp255 = icmp eq %struct.basic_block_def* %121, %123, !dbg !5368
  br i1 %cmp255, label %if.then257, label %if.else, !dbg !5369

if.then257:                                       ; preds = %land.lhs.true252
  store i8 0, i8* %reverse, align 1, !dbg !5370
  br label %if.end270, !dbg !5371

if.else:                                          ; preds = %land.lhs.true252, %if.end247
  %124 = load %struct.edge_def*, %struct.edge_def** %f1, align 8, !dbg !5372
  %dest258 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %124, i32 0, i32 1, !dbg !5374
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %dest258, align 8, !dbg !5374
  %126 = load %struct.edge_def*, %struct.edge_def** %b2, align 8, !dbg !5375
  %dest259 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %126, i32 0, i32 1, !dbg !5376
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %dest259, align 8, !dbg !5376
  %cmp260 = icmp eq %struct.basic_block_def* %125, %127, !dbg !5377
  br i1 %cmp260, label %land.lhs.true262, label %if.else268, !dbg !5378

land.lhs.true262:                                 ; preds = %if.else
  %128 = load %struct.edge_def*, %struct.edge_def** %b1, align 8, !dbg !5379
  %dest263 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %128, i32 0, i32 1, !dbg !5380
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %dest263, align 8, !dbg !5380
  %130 = load %struct.edge_def*, %struct.edge_def** %f2, align 8, !dbg !5381
  %dest264 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %130, i32 0, i32 1, !dbg !5382
  %131 = load %struct.basic_block_def*, %struct.basic_block_def** %dest264, align 8, !dbg !5382
  %cmp265 = icmp eq %struct.basic_block_def* %129, %131, !dbg !5383
  br i1 %cmp265, label %if.then267, label %if.else268, !dbg !5384

if.then267:                                       ; preds = %land.lhs.true262
  store i8 1, i8* %reverse, align 1, !dbg !5385
  br label %if.end269, !dbg !5386

if.else268:                                       ; preds = %land.lhs.true262, %if.else
  store i8 0, i8* %retval, align 1, !dbg !5387
  br label %return, !dbg !5387

if.end269:                                        ; preds = %if.then267
  br label %if.end270

if.end270:                                        ; preds = %if.end269, %if.then257
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5388
  %il271 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %132, i32 0, i32 7, !dbg !5388
  %rtl272 = bitcast %union.basic_block_il_dependent* %il271 to %struct.rtl_bb_info**, !dbg !5388
  %133 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl272, align 8, !dbg !5388
  %end_273 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %133, i32 0, i32 1, !dbg !5388
  %134 = load %struct.rtx_def*, %struct.rtx_def** %end_273, align 8, !dbg !5388
  %call274 = call %struct.rtx_def* @pc_set(%struct.rtx_def* %134), !dbg !5389
  store %struct.rtx_def* %call274, %struct.rtx_def** %set1, align 8, !dbg !5390
  %135 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5391
  %il275 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %135, i32 0, i32 7, !dbg !5391
  %rtl276 = bitcast %union.basic_block_il_dependent* %il275 to %struct.rtl_bb_info**, !dbg !5391
  %136 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl276, align 8, !dbg !5391
  %end_277 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %136, i32 0, i32 1, !dbg !5391
  %137 = load %struct.rtx_def*, %struct.rtx_def** %end_277, align 8, !dbg !5391
  %call278 = call %struct.rtx_def* @pc_set(%struct.rtx_def* %137), !dbg !5392
  store %struct.rtx_def* %call278, %struct.rtx_def** %set2, align 8, !dbg !5393
  %138 = load %struct.rtx_def*, %struct.rtx_def** %set1, align 8, !dbg !5394
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1, !dbg !5394
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5394
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5394
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5394
  %139 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5394
  %u279 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1, !dbg !5394
  %fld280 = bitcast %union.u* %u279 to [1 x %union.rtunion_def]*, !dbg !5394
  %arrayidx281 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld280, i64 0, i64 1, !dbg !5394
  %rt_rtx282 = bitcast %union.rtunion_def* %arrayidx281 to %struct.rtx_def**, !dbg !5394
  %140 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx282, align 8, !dbg !5394
  %141 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !5396
  %cmp283 = icmp eq %struct.rtx_def* %140, %141, !dbg !5397
  %conv284 = zext i1 %cmp283 to i32, !dbg !5397
  %142 = load %struct.rtx_def*, %struct.rtx_def** %set2, align 8, !dbg !5398
  %u285 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %142, i32 0, i32 1, !dbg !5398
  %fld286 = bitcast %union.u* %u285 to [1 x %union.rtunion_def]*, !dbg !5398
  %arrayidx287 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld286, i64 0, i64 1, !dbg !5398
  %rt_rtx288 = bitcast %union.rtunion_def* %arrayidx287 to %struct.rtx_def**, !dbg !5398
  %143 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx288, align 8, !dbg !5398
  %u289 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %143, i32 0, i32 1, !dbg !5398
  %fld290 = bitcast %union.u* %u289 to [1 x %union.rtunion_def]*, !dbg !5398
  %arrayidx291 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld290, i64 0, i64 1, !dbg !5398
  %rt_rtx292 = bitcast %union.rtunion_def* %arrayidx291 to %struct.rtx_def**, !dbg !5398
  %144 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx292, align 8, !dbg !5398
  %145 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 16, !dbg !5399
  %cmp293 = icmp eq %struct.rtx_def* %144, %145, !dbg !5400
  %conv294 = zext i1 %cmp293 to i32, !dbg !5400
  %cmp295 = icmp ne i32 %conv284, %conv294, !dbg !5401
  br i1 %cmp295, label %if.then297, label %if.end300, !dbg !5402

if.then297:                                       ; preds = %if.end270
  %146 = load i8, i8* %reverse, align 1, !dbg !5403
  %tobool298 = icmp ne i8 %146, 0, !dbg !5404
  %lnot = xor i1 %tobool298, true, !dbg !5404
  %lnot.ext = zext i1 %lnot to i32, !dbg !5404
  %conv299 = trunc i32 %lnot.ext to i8, !dbg !5404
  store i8 %conv299, i8* %reverse, align 1, !dbg !5405
  br label %if.end300, !dbg !5406

if.end300:                                        ; preds = %if.then297, %if.end270
  %147 = load %struct.rtx_def*, %struct.rtx_def** %set1, align 8, !dbg !5407
  %u301 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1, !dbg !5407
  %fld302 = bitcast %union.u* %u301 to [1 x %union.rtunion_def]*, !dbg !5407
  %arrayidx303 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld302, i64 0, i64 1, !dbg !5407
  %rt_rtx304 = bitcast %union.rtunion_def* %arrayidx303 to %struct.rtx_def**, !dbg !5407
  %148 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx304, align 8, !dbg !5407
  %u305 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %148, i32 0, i32 1, !dbg !5407
  %fld306 = bitcast %union.u* %u305 to [1 x %union.rtunion_def]*, !dbg !5407
  %arrayidx307 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld306, i64 0, i64 0, !dbg !5407
  %rt_rtx308 = bitcast %union.rtunion_def* %arrayidx307 to %struct.rtx_def**, !dbg !5407
  %149 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx308, align 8, !dbg !5407
  store %struct.rtx_def* %149, %struct.rtx_def** %cond1, align 8, !dbg !5408
  %150 = load %struct.rtx_def*, %struct.rtx_def** %set2, align 8, !dbg !5409
  %u309 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %150, i32 0, i32 1, !dbg !5409
  %fld310 = bitcast %union.u* %u309 to [1 x %union.rtunion_def]*, !dbg !5409
  %arrayidx311 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld310, i64 0, i64 1, !dbg !5409
  %rt_rtx312 = bitcast %union.rtunion_def* %arrayidx311 to %struct.rtx_def**, !dbg !5409
  %151 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx312, align 8, !dbg !5409
  %u313 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1, !dbg !5409
  %fld314 = bitcast %union.u* %u313 to [1 x %union.rtunion_def]*, !dbg !5409
  %arrayidx315 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld314, i64 0, i64 0, !dbg !5409
  %rt_rtx316 = bitcast %union.rtunion_def* %arrayidx315 to %struct.rtx_def**, !dbg !5409
  %152 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx316, align 8, !dbg !5409
  store %struct.rtx_def* %152, %struct.rtx_def** %cond2, align 8, !dbg !5410
  %153 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !5411
  %154 = bitcast %struct.rtx_def* %153 to i32*, !dbg !5411
  %bf.load317 = load i32, i32* %154, align 8, !dbg !5411
  %bf.clear318 = and i32 %bf.load317, 65535, !dbg !5411
  store i32 %bf.clear318, i32* %code1, align 4, !dbg !5412
  %155 = load i8, i8* %reverse, align 1, !dbg !5413
  %tobool319 = icmp ne i8 %155, 0, !dbg !5413
  br i1 %tobool319, label %if.then320, label %if.else325, !dbg !5415

if.then320:                                       ; preds = %if.end300
  %156 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !5416
  %157 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5417
  %il321 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %157, i32 0, i32 7, !dbg !5417
  %rtl322 = bitcast %union.basic_block_il_dependent* %il321 to %struct.rtl_bb_info**, !dbg !5417
  %158 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl322, align 8, !dbg !5417
  %end_323 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %158, i32 0, i32 1, !dbg !5417
  %159 = load %struct.rtx_def*, %struct.rtx_def** %end_323, align 8, !dbg !5417
  %call324 = call i32 @reversed_comparison_code(%struct.rtx_def* %156, %struct.rtx_def* %159), !dbg !5418
  store i32 %call324, i32* %code2, align 4, !dbg !5419
  br label %if.end328, !dbg !5420

if.else325:                                       ; preds = %if.end300
  %160 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !5421
  %161 = bitcast %struct.rtx_def* %160 to i32*, !dbg !5421
  %bf.load326 = load i32, i32* %161, align 8, !dbg !5421
  %bf.clear327 = and i32 %bf.load326, 65535, !dbg !5421
  store i32 %bf.clear327, i32* %code2, align 4, !dbg !5422
  br label %if.end328

if.end328:                                        ; preds = %if.else325, %if.then320
  %162 = load i32, i32* %code2, align 4, !dbg !5423
  %cmp329 = icmp eq i32 %162, 0, !dbg !5425
  br i1 %cmp329, label %if.then331, label %if.end332, !dbg !5426

if.then331:                                       ; preds = %if.end328
  store i8 0, i8* %retval, align 1, !dbg !5427
  br label %return, !dbg !5427

if.end332:                                        ; preds = %if.end328
  %163 = load i32, i32* %code1, align 4, !dbg !5428
  %164 = load i32, i32* %code2, align 4, !dbg !5429
  %cmp333 = icmp eq i32 %163, %164, !dbg !5430
  br i1 %cmp333, label %land.lhs.true335, label %lor.rhs357, !dbg !5431

land.lhs.true335:                                 ; preds = %if.end332
  %165 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !5432
  %u336 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %165, i32 0, i32 1, !dbg !5432
  %fld337 = bitcast %union.u* %u336 to [1 x %union.rtunion_def]*, !dbg !5432
  %arrayidx338 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld337, i64 0, i64 0, !dbg !5432
  %rt_rtx339 = bitcast %union.rtunion_def* %arrayidx338 to %struct.rtx_def**, !dbg !5432
  %166 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx339, align 8, !dbg !5432
  %167 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !5433
  %u340 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1, !dbg !5433
  %fld341 = bitcast %union.u* %u340 to [1 x %union.rtunion_def]*, !dbg !5433
  %arrayidx342 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld341, i64 0, i64 0, !dbg !5433
  %rt_rtx343 = bitcast %union.rtunion_def* %arrayidx342 to %struct.rtx_def**, !dbg !5433
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx343, align 8, !dbg !5433
  %call344 = call i32 @rtx_renumbered_equal_p(%struct.rtx_def* %166, %struct.rtx_def* %168), !dbg !5434
  %tobool345 = icmp ne i32 %call344, 0, !dbg !5434
  br i1 %tobool345, label %land.lhs.true346, label %lor.rhs357, !dbg !5435

land.lhs.true346:                                 ; preds = %land.lhs.true335
  %169 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !5436
  %u347 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %169, i32 0, i32 1, !dbg !5436
  %fld348 = bitcast %union.u* %u347 to [1 x %union.rtunion_def]*, !dbg !5436
  %arrayidx349 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld348, i64 0, i64 1, !dbg !5436
  %rt_rtx350 = bitcast %union.rtunion_def* %arrayidx349 to %struct.rtx_def**, !dbg !5436
  %170 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx350, align 8, !dbg !5436
  %171 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !5437
  %u351 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1, !dbg !5437
  %fld352 = bitcast %union.u* %u351 to [1 x %union.rtunion_def]*, !dbg !5437
  %arrayidx353 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld352, i64 0, i64 1, !dbg !5437
  %rt_rtx354 = bitcast %union.rtunion_def* %arrayidx353 to %struct.rtx_def**, !dbg !5437
  %172 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx354, align 8, !dbg !5437
  %call355 = call i32 @rtx_renumbered_equal_p(%struct.rtx_def* %170, %struct.rtx_def* %172), !dbg !5438
  %tobool356 = icmp ne i32 %call355, 0, !dbg !5438
  br i1 %tobool356, label %lor.end385, label %lor.rhs357, !dbg !5439

lor.rhs357:                                       ; preds = %land.lhs.true346, %land.lhs.true335, %if.end332
  %173 = load i32, i32* %code1, align 4, !dbg !5440
  %174 = load i32, i32* %code2, align 4, !dbg !5441
  %call358 = call i32 @swap_condition(i32 %174), !dbg !5442
  %cmp359 = icmp eq i32 %173, %call358, !dbg !5443
  br i1 %cmp359, label %land.lhs.true361, label %land.end383, !dbg !5444

land.lhs.true361:                                 ; preds = %lor.rhs357
  %175 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !5445
  %u362 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %175, i32 0, i32 1, !dbg !5445
  %fld363 = bitcast %union.u* %u362 to [1 x %union.rtunion_def]*, !dbg !5445
  %arrayidx364 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld363, i64 0, i64 1, !dbg !5445
  %rt_rtx365 = bitcast %union.rtunion_def* %arrayidx364 to %struct.rtx_def**, !dbg !5445
  %176 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx365, align 8, !dbg !5445
  %177 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !5446
  %u366 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %177, i32 0, i32 1, !dbg !5446
  %fld367 = bitcast %union.u* %u366 to [1 x %union.rtunion_def]*, !dbg !5446
  %arrayidx368 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld367, i64 0, i64 0, !dbg !5446
  %rt_rtx369 = bitcast %union.rtunion_def* %arrayidx368 to %struct.rtx_def**, !dbg !5446
  %178 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx369, align 8, !dbg !5446
  %call370 = call i32 @rtx_renumbered_equal_p(%struct.rtx_def* %176, %struct.rtx_def* %178), !dbg !5447
  %tobool371 = icmp ne i32 %call370, 0, !dbg !5447
  br i1 %tobool371, label %land.rhs372, label %land.end383, !dbg !5448

land.rhs372:                                      ; preds = %land.lhs.true361
  %179 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !5449
  %u373 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %179, i32 0, i32 1, !dbg !5449
  %fld374 = bitcast %union.u* %u373 to [1 x %union.rtunion_def]*, !dbg !5449
  %arrayidx375 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld374, i64 0, i64 0, !dbg !5449
  %rt_rtx376 = bitcast %union.rtunion_def* %arrayidx375 to %struct.rtx_def**, !dbg !5449
  %180 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx376, align 8, !dbg !5449
  %181 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !5450
  %u377 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1, !dbg !5450
  %fld378 = bitcast %union.u* %u377 to [1 x %union.rtunion_def]*, !dbg !5450
  %arrayidx379 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld378, i64 0, i64 1, !dbg !5450
  %rt_rtx380 = bitcast %union.rtunion_def* %arrayidx379 to %struct.rtx_def**, !dbg !5450
  %182 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx380, align 8, !dbg !5450
  %call381 = call i32 @rtx_renumbered_equal_p(%struct.rtx_def* %180, %struct.rtx_def* %182), !dbg !5451
  %tobool382 = icmp ne i32 %call381, 0, !dbg !5448
  br label %land.end383

land.end383:                                      ; preds = %land.rhs372, %land.lhs.true361, %lor.rhs357
  %183 = phi i1 [ false, %land.lhs.true361 ], [ false, %lor.rhs357 ], [ %tobool382, %land.rhs372 ], !dbg !5452
  br label %lor.end385, !dbg !5439

lor.end385:                                       ; preds = %land.end383, %land.lhs.true346
  %184 = phi i1 [ true, %land.lhs.true346 ], [ %183, %land.end383 ]
  %lor.ext = zext i1 %184 to i32, !dbg !5439
  %conv386 = trunc i32 %lor.ext to i8, !dbg !5453
  store i8 %conv386, i8* %match, align 1, !dbg !5454
  %185 = load i8, i8* %match, align 1, !dbg !5455
  %conv387 = zext i8 %185 to i32, !dbg !5455
  %tobool388 = icmp ne i32 %conv387, 0, !dbg !5455
  br i1 %tobool388, label %land.lhs.true389, label %if.end419, !dbg !5457

land.lhs.true389:                                 ; preds = %lor.end385
  %186 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5458
  %call390 = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %186), !dbg !5459
  %conv391 = zext i8 %call390 to i32, !dbg !5459
  %tobool392 = icmp ne i32 %conv391, 0, !dbg !5459
  br i1 %tobool392, label %land.lhs.true393, label %if.end419, !dbg !5460

land.lhs.true393:                                 ; preds = %land.lhs.true389
  %187 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5461
  %call394 = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %187), !dbg !5462
  %conv395 = zext i8 %call394 to i32, !dbg !5462
  %tobool396 = icmp ne i32 %conv395, 0, !dbg !5462
  br i1 %tobool396, label %if.then397, label %if.end419, !dbg !5463

if.then397:                                       ; preds = %land.lhs.true393
  call void @llvm.dbg.declare(metadata i32* %prob2, metadata !5464, metadata !DIExpression()), !dbg !5466
  %188 = load %struct.edge_def*, %struct.edge_def** %b1, align 8, !dbg !5467
  %dest398 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %188, i32 0, i32 1, !dbg !5469
  %189 = load %struct.basic_block_def*, %struct.basic_block_def** %dest398, align 8, !dbg !5469
  %190 = load %struct.edge_def*, %struct.edge_def** %b2, align 8, !dbg !5470
  %dest399 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %190, i32 0, i32 1, !dbg !5471
  %191 = load %struct.basic_block_def*, %struct.basic_block_def** %dest399, align 8, !dbg !5471
  %cmp400 = icmp eq %struct.basic_block_def* %189, %191, !dbg !5472
  br i1 %cmp400, label %if.then402, label %if.else403, !dbg !5473

if.then402:                                       ; preds = %if.then397
  %192 = load %struct.edge_def*, %struct.edge_def** %b2, align 8, !dbg !5474
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %192, i32 0, i32 8, !dbg !5475
  %193 = load i32, i32* %probability, align 4, !dbg !5475
  store i32 %193, i32* %prob2, align 4, !dbg !5476
  br label %if.end405, !dbg !5477

if.else403:                                       ; preds = %if.then397
  %194 = load %struct.edge_def*, %struct.edge_def** %b2, align 8, !dbg !5478
  %probability404 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %194, i32 0, i32 8, !dbg !5479
  %195 = load i32, i32* %probability404, align 4, !dbg !5479
  %sub = sub nsw i32 10000, %195, !dbg !5480
  store i32 %sub, i32* %prob2, align 4, !dbg !5481
  br label %if.end405

if.end405:                                        ; preds = %if.else403, %if.then402
  %196 = load %struct.edge_def*, %struct.edge_def** %b1, align 8, !dbg !5482
  %probability406 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %196, i32 0, i32 8, !dbg !5484
  %197 = load i32, i32* %probability406, align 4, !dbg !5484
  %198 = load i32, i32* %prob2, align 4, !dbg !5485
  %sub407 = sub nsw i32 %197, %198, !dbg !5486
  %call408 = call i32 @abs(i32 %sub407) #5, !dbg !5487
  %cmp409 = icmp sgt i32 %call408, 5000, !dbg !5488
  br i1 %cmp409, label %if.then411, label %if.end418, !dbg !5489

if.then411:                                       ; preds = %if.end405
  %199 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5490
  %tobool412 = icmp ne %struct._IO_FILE* %199, null, !dbg !5490
  br i1 %tobool412, label %if.then413, label %if.end417, !dbg !5493

if.then413:                                       ; preds = %if.then411
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5494
  %201 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5495
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %201, i32 0, i32 9, !dbg !5496
  %202 = load i32, i32* %index, align 8, !dbg !5496
  %203 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5497
  %index414 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %203, i32 0, i32 9, !dbg !5498
  %204 = load i32, i32* %index414, align 8, !dbg !5498
  %205 = load %struct.edge_def*, %struct.edge_def** %b1, align 8, !dbg !5499
  %probability415 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %205, i32 0, i32 8, !dbg !5500
  %206 = load i32, i32* %probability415, align 4, !dbg !5500
  %207 = load i32, i32* %prob2, align 4, !dbg !5501
  %call416 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %200, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.18, i64 0, i64 0), i32 %202, i32 %204, i32 %206, i32 %207), !dbg !5502
  br label %if.end417, !dbg !5502

if.end417:                                        ; preds = %if.then413, %if.then411
  store i8 0, i8* %retval, align 1, !dbg !5503
  br label %return, !dbg !5503

if.end418:                                        ; preds = %if.end405
  br label %if.end419, !dbg !5504

if.end419:                                        ; preds = %if.end418, %land.lhs.true393, %land.lhs.true389, %lor.end385
  %208 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5505
  %tobool420 = icmp ne %struct._IO_FILE* %208, null, !dbg !5505
  br i1 %tobool420, label %land.lhs.true421, label %if.end428, !dbg !5507

land.lhs.true421:                                 ; preds = %if.end419
  %209 = load i8, i8* %match, align 1, !dbg !5508
  %conv422 = zext i8 %209 to i32, !dbg !5508
  %tobool423 = icmp ne i32 %conv422, 0, !dbg !5508
  br i1 %tobool423, label %if.then424, label %if.end428, !dbg !5509

if.then424:                                       ; preds = %land.lhs.true421
  %210 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5510
  %211 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5511
  %index425 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %211, i32 0, i32 9, !dbg !5512
  %212 = load i32, i32* %index425, align 8, !dbg !5512
  %213 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5513
  %index426 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %213, i32 0, i32 9, !dbg !5514
  %214 = load i32, i32* %index426, align 8, !dbg !5514
  %call427 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %210, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.19, i64 0, i64 0), i32 %212, i32 %214), !dbg !5515
  br label %if.end428, !dbg !5515

if.end428:                                        ; preds = %if.then424, %land.lhs.true421, %if.end419
  %215 = load i8, i8* %match, align 1, !dbg !5516
  store i8 %215, i8* %retval, align 1, !dbg !5517
  br label %return, !dbg !5517

if.end429:                                        ; preds = %land.lhs.true44, %land.lhs.true38, %cond.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label1, metadata !5518, metadata !DIExpression()), !dbg !5520
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label2, metadata !5521, metadata !DIExpression()), !dbg !5522
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %table1, metadata !5523, metadata !DIExpression()), !dbg !5524
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %table2, metadata !5525, metadata !DIExpression()), !dbg !5526
  %216 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5527
  %il430 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %216, i32 0, i32 7, !dbg !5527
  %rtl431 = bitcast %union.basic_block_il_dependent* %il430 to %struct.rtl_bb_info**, !dbg !5527
  %217 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl431, align 8, !dbg !5527
  %end_432 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %217, i32 0, i32 1, !dbg !5527
  %218 = load %struct.rtx_def*, %struct.rtx_def** %end_432, align 8, !dbg !5527
  %call433 = call zeroext i8 @tablejump_p(%struct.rtx_def* %218, %struct.rtx_def** %label1, %struct.rtx_def** %table1), !dbg !5529
  %conv434 = zext i8 %call433 to i32, !dbg !5529
  %tobool435 = icmp ne i32 %conv434, 0, !dbg !5529
  br i1 %tobool435, label %land.lhs.true436, label %if.end585, !dbg !5530

land.lhs.true436:                                 ; preds = %if.end429
  %219 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5531
  %il437 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %219, i32 0, i32 7, !dbg !5531
  %rtl438 = bitcast %union.basic_block_il_dependent* %il437 to %struct.rtl_bb_info**, !dbg !5531
  %220 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl438, align 8, !dbg !5531
  %end_439 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %220, i32 0, i32 1, !dbg !5531
  %221 = load %struct.rtx_def*, %struct.rtx_def** %end_439, align 8, !dbg !5531
  %call440 = call zeroext i8 @tablejump_p(%struct.rtx_def* %221, %struct.rtx_def** %label2, %struct.rtx_def** %table2), !dbg !5532
  %conv441 = zext i8 %call440 to i32, !dbg !5532
  %tobool442 = icmp ne i32 %conv441, 0, !dbg !5532
  br i1 %tobool442, label %land.lhs.true443, label %if.end585, !dbg !5533

land.lhs.true443:                                 ; preds = %land.lhs.true436
  %222 = load %struct.rtx_def*, %struct.rtx_def** %table1, align 8, !dbg !5534
  %u444 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %222, i32 0, i32 1, !dbg !5534
  %fld445 = bitcast %union.u* %u444 to [1 x %union.rtunion_def]*, !dbg !5534
  %arrayidx446 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld445, i64 0, i64 5, !dbg !5534
  %rt_rtx447 = bitcast %union.rtunion_def* %arrayidx446 to %struct.rtx_def**, !dbg !5534
  %223 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx447, align 8, !dbg !5534
  %224 = bitcast %struct.rtx_def* %223 to i32*, !dbg !5534
  %bf.load448 = load i32, i32* %224, align 8, !dbg !5534
  %bf.clear449 = and i32 %bf.load448, 65535, !dbg !5534
  %225 = load %struct.rtx_def*, %struct.rtx_def** %table2, align 8, !dbg !5535
  %u450 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %225, i32 0, i32 1, !dbg !5535
  %fld451 = bitcast %union.u* %u450 to [1 x %union.rtunion_def]*, !dbg !5535
  %arrayidx452 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld451, i64 0, i64 5, !dbg !5535
  %rt_rtx453 = bitcast %union.rtunion_def* %arrayidx452 to %struct.rtx_def**, !dbg !5535
  %226 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx453, align 8, !dbg !5535
  %227 = bitcast %struct.rtx_def* %226 to i32*, !dbg !5535
  %bf.load454 = load i32, i32* %227, align 8, !dbg !5535
  %bf.clear455 = and i32 %bf.load454, 65535, !dbg !5535
  %cmp456 = icmp eq i32 %bf.clear449, %bf.clear455, !dbg !5536
  br i1 %cmp456, label %if.then458, label %if.end585, !dbg !5537

if.then458:                                       ; preds = %land.lhs.true443
  %228 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8, !dbg !5538
  %229 = load %struct.rtx_def*, %struct.rtx_def** %label2, align 8, !dbg !5541
  %cmp459 = icmp ne %struct.rtx_def* %228, %229, !dbg !5542
  br i1 %cmp459, label %land.lhs.true461, label %if.end584, !dbg !5543

land.lhs.true461:                                 ; preds = %if.then458
  %230 = load %struct.rtx_def*, %struct.rtx_def** %label2, align 8, !dbg !5544
  %231 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5545
  %il462 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %231, i32 0, i32 7, !dbg !5545
  %rtl463 = bitcast %union.basic_block_il_dependent* %il462 to %struct.rtl_bb_info**, !dbg !5545
  %232 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl463, align 8, !dbg !5545
  %end_464 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %232, i32 0, i32 1, !dbg !5545
  %233 = load %struct.rtx_def*, %struct.rtx_def** %end_464, align 8, !dbg !5545
  %call465 = call i32 @rtx_referenced_p(%struct.rtx_def* %230, %struct.rtx_def* %233), !dbg !5546
  %tobool466 = icmp ne i32 %call465, 0, !dbg !5546
  br i1 %tobool466, label %if.end584, label %if.then467, !dbg !5547

if.then467:                                       ; preds = %land.lhs.true461
  call void @llvm.dbg.declare(metadata i8* %identical, metadata !5548, metadata !DIExpression()), !dbg !5550
  store i8 0, i8* %identical, align 1, !dbg !5550
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %p1, metadata !5551, metadata !DIExpression()), !dbg !5552
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %p2, metadata !5553, metadata !DIExpression()), !dbg !5554
  %234 = load %struct.rtx_def*, %struct.rtx_def** %table1, align 8, !dbg !5555
  %u468 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %234, i32 0, i32 1, !dbg !5555
  %fld469 = bitcast %union.u* %u468 to [1 x %union.rtunion_def]*, !dbg !5555
  %arrayidx470 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld469, i64 0, i64 5, !dbg !5555
  %rt_rtx471 = bitcast %union.rtunion_def* %arrayidx470 to %struct.rtx_def**, !dbg !5555
  %235 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx471, align 8, !dbg !5555
  store %struct.rtx_def* %235, %struct.rtx_def** %p1, align 8, !dbg !5556
  %236 = load %struct.rtx_def*, %struct.rtx_def** %table2, align 8, !dbg !5557
  %u472 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %236, i32 0, i32 1, !dbg !5557
  %fld473 = bitcast %union.u* %u472 to [1 x %union.rtunion_def]*, !dbg !5557
  %arrayidx474 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld473, i64 0, i64 5, !dbg !5557
  %rt_rtx475 = bitcast %union.rtunion_def* %arrayidx474 to %struct.rtx_def**, !dbg !5557
  %237 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx475, align 8, !dbg !5557
  store %struct.rtx_def* %237, %struct.rtx_def** %p2, align 8, !dbg !5558
  %238 = load %struct.rtx_def*, %struct.rtx_def** %p1, align 8, !dbg !5559
  %239 = bitcast %struct.rtx_def* %238 to i32*, !dbg !5559
  %bf.load476 = load i32, i32* %239, align 8, !dbg !5559
  %bf.clear477 = and i32 %bf.load476, 65535, !dbg !5559
  %cmp478 = icmp eq i32 %bf.clear477, 20, !dbg !5561
  br i1 %cmp478, label %land.lhs.true480, label %if.else484, !dbg !5562

land.lhs.true480:                                 ; preds = %if.then467
  %240 = load %struct.rtx_def*, %struct.rtx_def** %p1, align 8, !dbg !5563
  %241 = load %struct.rtx_def*, %struct.rtx_def** %p2, align 8, !dbg !5564
  %call481 = call i32 @rtx_equal_p(%struct.rtx_def* %240, %struct.rtx_def* %241), !dbg !5565
  %tobool482 = icmp ne i32 %call481, 0, !dbg !5565
  br i1 %tobool482, label %if.then483, label %if.else484, !dbg !5566

if.then483:                                       ; preds = %land.lhs.true480
  store i8 1, i8* %identical, align 1, !dbg !5567
  br label %if.end553, !dbg !5569

if.else484:                                       ; preds = %land.lhs.true480, %if.then467
  %242 = load %struct.rtx_def*, %struct.rtx_def** %p1, align 8, !dbg !5570
  %243 = bitcast %struct.rtx_def* %242 to i32*, !dbg !5570
  %bf.load485 = load i32, i32* %243, align 8, !dbg !5570
  %bf.clear486 = and i32 %bf.load485, 65535, !dbg !5570
  %cmp487 = icmp eq i32 %bf.clear486, 21, !dbg !5572
  br i1 %cmp487, label %land.lhs.true489, label %if.end552, !dbg !5573

land.lhs.true489:                                 ; preds = %if.else484
  %244 = load %struct.rtx_def*, %struct.rtx_def** %p1, align 8, !dbg !5574
  %u490 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %244, i32 0, i32 1, !dbg !5574
  %fld491 = bitcast %union.u* %u490 to [1 x %union.rtunion_def]*, !dbg !5574
  %arrayidx492 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld491, i64 0, i64 1, !dbg !5574
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx492 to %struct.rtvec_def**, !dbg !5574
  %245 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !5574
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %245, i32 0, i32 0, !dbg !5574
  %246 = load i32, i32* %num_elem, align 8, !dbg !5574
  %247 = load %struct.rtx_def*, %struct.rtx_def** %p2, align 8, !dbg !5575
  %u493 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %247, i32 0, i32 1, !dbg !5575
  %fld494 = bitcast %union.u* %u493 to [1 x %union.rtunion_def]*, !dbg !5575
  %arrayidx495 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld494, i64 0, i64 1, !dbg !5575
  %rt_rtvec496 = bitcast %union.rtunion_def* %arrayidx495 to %struct.rtvec_def**, !dbg !5575
  %248 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec496, align 8, !dbg !5575
  %num_elem497 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %248, i32 0, i32 0, !dbg !5575
  %249 = load i32, i32* %num_elem497, align 8, !dbg !5575
  %cmp498 = icmp eq i32 %246, %249, !dbg !5576
  br i1 %cmp498, label %land.lhs.true500, label %if.end552, !dbg !5577

land.lhs.true500:                                 ; preds = %land.lhs.true489
  %250 = load %struct.rtx_def*, %struct.rtx_def** %p1, align 8, !dbg !5578
  %u501 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %250, i32 0, i32 1, !dbg !5578
  %fld502 = bitcast %union.u* %u501 to [1 x %union.rtunion_def]*, !dbg !5578
  %arrayidx503 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld502, i64 0, i64 2, !dbg !5578
  %rt_rtx504 = bitcast %union.rtunion_def* %arrayidx503 to %struct.rtx_def**, !dbg !5578
  %251 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx504, align 8, !dbg !5578
  %252 = load %struct.rtx_def*, %struct.rtx_def** %p2, align 8, !dbg !5579
  %u505 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %252, i32 0, i32 1, !dbg !5579
  %fld506 = bitcast %union.u* %u505 to [1 x %union.rtunion_def]*, !dbg !5579
  %arrayidx507 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld506, i64 0, i64 2, !dbg !5579
  %rt_rtx508 = bitcast %union.rtunion_def* %arrayidx507 to %struct.rtx_def**, !dbg !5579
  %253 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx508, align 8, !dbg !5579
  %call509 = call i32 @rtx_equal_p(%struct.rtx_def* %251, %struct.rtx_def* %253), !dbg !5580
  %tobool510 = icmp ne i32 %call509, 0, !dbg !5580
  br i1 %tobool510, label %land.lhs.true511, label %if.end552, !dbg !5581

land.lhs.true511:                                 ; preds = %land.lhs.true500
  %254 = load %struct.rtx_def*, %struct.rtx_def** %p1, align 8, !dbg !5582
  %u512 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %254, i32 0, i32 1, !dbg !5582
  %fld513 = bitcast %union.u* %u512 to [1 x %union.rtunion_def]*, !dbg !5582
  %arrayidx514 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld513, i64 0, i64 3, !dbg !5582
  %rt_rtx515 = bitcast %union.rtunion_def* %arrayidx514 to %struct.rtx_def**, !dbg !5582
  %255 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx515, align 8, !dbg !5582
  %256 = load %struct.rtx_def*, %struct.rtx_def** %p2, align 8, !dbg !5583
  %u516 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %256, i32 0, i32 1, !dbg !5583
  %fld517 = bitcast %union.u* %u516 to [1 x %union.rtunion_def]*, !dbg !5583
  %arrayidx518 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld517, i64 0, i64 3, !dbg !5583
  %rt_rtx519 = bitcast %union.rtunion_def* %arrayidx518 to %struct.rtx_def**, !dbg !5583
  %257 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx519, align 8, !dbg !5583
  %call520 = call i32 @rtx_equal_p(%struct.rtx_def* %255, %struct.rtx_def* %257), !dbg !5584
  %tobool521 = icmp ne i32 %call520, 0, !dbg !5584
  br i1 %tobool521, label %if.then522, label %if.end552, !dbg !5585

if.then522:                                       ; preds = %land.lhs.true511
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5586, metadata !DIExpression()), !dbg !5588
  store i8 1, i8* %identical, align 1, !dbg !5589
  %258 = load %struct.rtx_def*, %struct.rtx_def** %p1, align 8, !dbg !5590
  %u523 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %258, i32 0, i32 1, !dbg !5590
  %fld524 = bitcast %union.u* %u523 to [1 x %union.rtunion_def]*, !dbg !5590
  %arrayidx525 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld524, i64 0, i64 1, !dbg !5590
  %rt_rtvec526 = bitcast %union.rtunion_def* %arrayidx525 to %struct.rtvec_def**, !dbg !5590
  %259 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec526, align 8, !dbg !5590
  %num_elem527 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %259, i32 0, i32 0, !dbg !5590
  %260 = load i32, i32* %num_elem527, align 8, !dbg !5590
  %sub528 = sub nsw i32 %260, 1, !dbg !5592
  store i32 %sub528, i32* %i, align 4, !dbg !5593
  br label %for.cond, !dbg !5594

for.cond:                                         ; preds = %for.inc, %if.then522
  %261 = load i32, i32* %i, align 4, !dbg !5595
  %cmp529 = icmp sge i32 %261, 0, !dbg !5597
  br i1 %cmp529, label %land.rhs531, label %land.end534, !dbg !5598

land.rhs531:                                      ; preds = %for.cond
  %262 = load i8, i8* %identical, align 1, !dbg !5599
  %conv532 = zext i8 %262 to i32, !dbg !5599
  %tobool533 = icmp ne i32 %conv532, 0, !dbg !5598
  br label %land.end534

land.end534:                                      ; preds = %land.rhs531, %for.cond
  %263 = phi i1 [ false, %for.cond ], [ %tobool533, %land.rhs531 ], !dbg !5600
  br i1 %263, label %for.body, label %for.end, !dbg !5601

for.body:                                         ; preds = %land.end534
  %264 = load %struct.rtx_def*, %struct.rtx_def** %p1, align 8, !dbg !5602
  %u536 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %264, i32 0, i32 1, !dbg !5602
  %fld537 = bitcast %union.u* %u536 to [1 x %union.rtunion_def]*, !dbg !5602
  %arrayidx538 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld537, i64 0, i64 1, !dbg !5602
  %rt_rtvec539 = bitcast %union.rtunion_def* %arrayidx538 to %struct.rtvec_def**, !dbg !5602
  %265 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec539, align 8, !dbg !5602
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %265, i32 0, i32 1, !dbg !5602
  %266 = load i32, i32* %i, align 4, !dbg !5602
  %idxprom = sext i32 %266 to i64, !dbg !5602
  %arrayidx540 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !5602
  %267 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx540, align 8, !dbg !5602
  %268 = load %struct.rtx_def*, %struct.rtx_def** %p2, align 8, !dbg !5604
  %u541 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %268, i32 0, i32 1, !dbg !5604
  %fld542 = bitcast %union.u* %u541 to [1 x %union.rtunion_def]*, !dbg !5604
  %arrayidx543 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld542, i64 0, i64 1, !dbg !5604
  %rt_rtvec544 = bitcast %union.rtunion_def* %arrayidx543 to %struct.rtvec_def**, !dbg !5604
  %269 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec544, align 8, !dbg !5604
  %elem545 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %269, i32 0, i32 1, !dbg !5604
  %270 = load i32, i32* %i, align 4, !dbg !5604
  %idxprom546 = sext i32 %270 to i64, !dbg !5604
  %arrayidx547 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem545, i64 0, i64 %idxprom546, !dbg !5604
  %271 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx547, align 8, !dbg !5604
  %call548 = call i32 @rtx_equal_p(%struct.rtx_def* %267, %struct.rtx_def* %271), !dbg !5605
  %tobool549 = icmp ne i32 %call548, 0, !dbg !5605
  br i1 %tobool549, label %if.end551, label %if.then550, !dbg !5606

if.then550:                                       ; preds = %for.body
  store i8 0, i8* %identical, align 1, !dbg !5607
  br label %if.end551, !dbg !5608

if.end551:                                        ; preds = %if.then550, %for.body
  br label %for.inc, !dbg !5609

for.inc:                                          ; preds = %if.end551
  %272 = load i32, i32* %i, align 4, !dbg !5610
  %dec = add nsw i32 %272, -1, !dbg !5610
  store i32 %dec, i32* %i, align 4, !dbg !5610
  br label %for.cond, !dbg !5611, !llvm.loop !5612

for.end:                                          ; preds = %land.end534
  br label %if.end552, !dbg !5614

if.end552:                                        ; preds = %for.end, %land.lhs.true511, %land.lhs.true500, %land.lhs.true489, %if.else484
  br label %if.end553

if.end553:                                        ; preds = %if.end552, %if.then483
  %273 = load i8, i8* %identical, align 1, !dbg !5615
  %tobool554 = icmp ne i8 %273, 0, !dbg !5615
  br i1 %tobool554, label %if.then555, label %if.end583, !dbg !5617

if.then555:                                       ; preds = %if.end553
  call void @llvm.dbg.declare(metadata %struct.replace_label_data* %rr, metadata !5618, metadata !DIExpression()), !dbg !5620
  call void @llvm.dbg.declare(metadata i8* %match556, metadata !5621, metadata !DIExpression()), !dbg !5622
  %274 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8, !dbg !5623
  %r1 = getelementptr inbounds %struct.replace_label_data, %struct.replace_label_data* %rr, i32 0, i32 0, !dbg !5624
  store %struct.rtx_def* %274, %struct.rtx_def** %r1, align 8, !dbg !5625
  %275 = load %struct.rtx_def*, %struct.rtx_def** %label2, align 8, !dbg !5626
  %r2 = getelementptr inbounds %struct.replace_label_data, %struct.replace_label_data* %rr, i32 0, i32 1, !dbg !5627
  store %struct.rtx_def* %275, %struct.rtx_def** %r2, align 8, !dbg !5628
  %update_label_nuses = getelementptr inbounds %struct.replace_label_data, %struct.replace_label_data* %rr, i32 0, i32 2, !dbg !5629
  store i8 0, i8* %update_label_nuses, align 8, !dbg !5630
  %276 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5631
  %il557 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %276, i32 0, i32 7, !dbg !5631
  %rtl558 = bitcast %union.basic_block_il_dependent* %il557 to %struct.rtl_bb_info**, !dbg !5631
  %277 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl558, align 8, !dbg !5631
  %end_559 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %277, i32 0, i32 1, !dbg !5631
  %278 = bitcast %struct.replace_label_data* %rr to i8*, !dbg !5632
  %call560 = call i32 @for_each_rtx(%struct.rtx_def** %end_559, i32 (%struct.rtx_def**, i8*)* @replace_label, i8* %278), !dbg !5633
  %279 = load i32, i32* %mode.addr, align 4, !dbg !5634
  %280 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5635
  %il561 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %280, i32 0, i32 7, !dbg !5635
  %rtl562 = bitcast %union.basic_block_il_dependent* %il561 to %struct.rtl_bb_info**, !dbg !5635
  %281 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl562, align 8, !dbg !5635
  %end_563 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %281, i32 0, i32 1, !dbg !5635
  %282 = load %struct.rtx_def*, %struct.rtx_def** %end_563, align 8, !dbg !5635
  %283 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5636
  %il564 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %283, i32 0, i32 7, !dbg !5636
  %rtl565 = bitcast %union.basic_block_il_dependent* %il564 to %struct.rtl_bb_info**, !dbg !5636
  %284 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl565, align 8, !dbg !5636
  %end_566 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %284, i32 0, i32 1, !dbg !5636
  %285 = load %struct.rtx_def*, %struct.rtx_def** %end_566, align 8, !dbg !5636
  %call567 = call zeroext i8 @old_insns_match_p(i32 %279, %struct.rtx_def* %282, %struct.rtx_def* %285), !dbg !5637
  store i8 %call567, i8* %match556, align 1, !dbg !5638
  %286 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5639
  %tobool568 = icmp ne %struct._IO_FILE* %286, null, !dbg !5639
  br i1 %tobool568, label %land.lhs.true569, label %if.end576, !dbg !5641

land.lhs.true569:                                 ; preds = %if.then555
  %287 = load i8, i8* %match556, align 1, !dbg !5642
  %conv570 = zext i8 %287 to i32, !dbg !5642
  %tobool571 = icmp ne i32 %conv570, 0, !dbg !5642
  br i1 %tobool571, label %if.then572, label %if.end576, !dbg !5643

if.then572:                                       ; preds = %land.lhs.true569
  %288 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5644
  %289 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5645
  %index573 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %289, i32 0, i32 9, !dbg !5646
  %290 = load i32, i32* %index573, align 8, !dbg !5646
  %291 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5647
  %index574 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %291, i32 0, i32 9, !dbg !5648
  %292 = load i32, i32* %index574, align 8, !dbg !5648
  %call575 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %288, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.20, i64 0, i64 0), i32 %290, i32 %292), !dbg !5649
  br label %if.end576, !dbg !5649

if.end576:                                        ; preds = %if.then572, %land.lhs.true569, %if.then555
  %293 = load %struct.rtx_def*, %struct.rtx_def** %label2, align 8, !dbg !5650
  %r1577 = getelementptr inbounds %struct.replace_label_data, %struct.replace_label_data* %rr, i32 0, i32 0, !dbg !5651
  store %struct.rtx_def* %293, %struct.rtx_def** %r1577, align 8, !dbg !5652
  %294 = load %struct.rtx_def*, %struct.rtx_def** %label1, align 8, !dbg !5653
  %r2578 = getelementptr inbounds %struct.replace_label_data, %struct.replace_label_data* %rr, i32 0, i32 1, !dbg !5654
  store %struct.rtx_def* %294, %struct.rtx_def** %r2578, align 8, !dbg !5655
  %295 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5656
  %il579 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %295, i32 0, i32 7, !dbg !5656
  %rtl580 = bitcast %union.basic_block_il_dependent* %il579 to %struct.rtl_bb_info**, !dbg !5656
  %296 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl580, align 8, !dbg !5656
  %end_581 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %296, i32 0, i32 1, !dbg !5656
  %297 = bitcast %struct.replace_label_data* %rr to i8*, !dbg !5657
  %call582 = call i32 @for_each_rtx(%struct.rtx_def** %end_581, i32 (%struct.rtx_def**, i8*)* @replace_label, i8* %297), !dbg !5658
  %298 = load i8, i8* %match556, align 1, !dbg !5659
  store i8 %298, i8* %retval, align 1, !dbg !5660
  br label %return, !dbg !5660

if.end583:                                        ; preds = %if.end553
  br label %if.end584, !dbg !5661

if.end584:                                        ; preds = %if.end583, %land.lhs.true461, %if.then458
  store i8 0, i8* %retval, align 1, !dbg !5662
  br label %return, !dbg !5662

if.end585:                                        ; preds = %land.lhs.true443, %land.lhs.true436, %if.end429
  %299 = load i32, i32* %mode.addr, align 4, !dbg !5663
  %300 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5665
  %il586 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %300, i32 0, i32 7, !dbg !5665
  %rtl587 = bitcast %union.basic_block_il_dependent* %il586 to %struct.rtl_bb_info**, !dbg !5665
  %301 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl587, align 8, !dbg !5665
  %end_588 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %301, i32 0, i32 1, !dbg !5665
  %302 = load %struct.rtx_def*, %struct.rtx_def** %end_588, align 8, !dbg !5665
  %303 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5666
  %il589 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %303, i32 0, i32 7, !dbg !5666
  %rtl590 = bitcast %union.basic_block_il_dependent* %il589 to %struct.rtl_bb_info**, !dbg !5666
  %304 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl590, align 8, !dbg !5666
  %end_591 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %304, i32 0, i32 1, !dbg !5666
  %305 = load %struct.rtx_def*, %struct.rtx_def** %end_591, align 8, !dbg !5666
  %call592 = call zeroext i8 @old_insns_match_p(i32 %299, %struct.rtx_def* %302, %struct.rtx_def* %305), !dbg !5667
  %tobool593 = icmp ne i8 %call592, 0, !dbg !5667
  br i1 %tobool593, label %if.end595, label %if.then594, !dbg !5668

if.then594:                                       ; preds = %if.end585
  store i8 0, i8* %retval, align 1, !dbg !5669
  br label %return, !dbg !5669

if.end595:                                        ; preds = %if.end585
  %306 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5670
  %succs596 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %306, i32 0, i32 1, !dbg !5670
  %307 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs596, align 8, !dbg !5670
  %tobool597 = icmp ne %struct.VEC_edge_gc* %307, null, !dbg !5670
  br i1 %tobool597, label %cond.true598, label %cond.false601, !dbg !5670

cond.true598:                                     ; preds = %if.end595
  %308 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5670
  %succs599 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %308, i32 0, i32 1, !dbg !5670
  %309 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs599, align 8, !dbg !5670
  %base600 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %309, i32 0, i32 0, !dbg !5670
  br label %cond.end602, !dbg !5670

cond.false601:                                    ; preds = %if.end595
  br label %cond.end602, !dbg !5670

cond.end602:                                      ; preds = %cond.false601, %cond.true598
  %cond603 = phi %struct.VEC_edge_base* [ %base600, %cond.true598 ], [ null, %cond.false601 ], !dbg !5670
  %call604 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond603), !dbg !5670
  %310 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5672
  %succs605 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %310, i32 0, i32 1, !dbg !5672
  %311 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs605, align 8, !dbg !5672
  %tobool606 = icmp ne %struct.VEC_edge_gc* %311, null, !dbg !5672
  br i1 %tobool606, label %cond.true607, label %cond.false610, !dbg !5672

cond.true607:                                     ; preds = %cond.end602
  %312 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5672
  %succs608 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %312, i32 0, i32 1, !dbg !5672
  %313 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs608, align 8, !dbg !5672
  %base609 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %313, i32 0, i32 0, !dbg !5672
  br label %cond.end611, !dbg !5672

cond.false610:                                    ; preds = %cond.end602
  br label %cond.end611, !dbg !5672

cond.end611:                                      ; preds = %cond.false610, %cond.true607
  %cond612 = phi %struct.VEC_edge_base* [ %base609, %cond.true607 ], [ null, %cond.false610 ], !dbg !5672
  %call613 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond612), !dbg !5672
  %cmp614 = icmp ne i32 %call604, %call613, !dbg !5673
  br i1 %cmp614, label %if.then616, label %if.end617, !dbg !5674

if.then616:                                       ; preds = %cond.end611
  store i8 0, i8* %retval, align 1, !dbg !5675
  br label %return, !dbg !5675

if.end617:                                        ; preds = %cond.end611
  %314 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5676
  %succs618 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %314, i32 0, i32 1, !dbg !5676
  %call619 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs618), !dbg !5676
  %315 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5676
  %316 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %315, i32 0, i32 0, !dbg !5676
  %317 = extractvalue { i32, %struct.VEC_edge_gc** } %call619, 0, !dbg !5676
  store i32 %317, i32* %316, align 8, !dbg !5676
  %318 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %315, i32 0, i32 1, !dbg !5676
  %319 = extractvalue { i32, %struct.VEC_edge_gc** } %call619, 1, !dbg !5676
  store %struct.VEC_edge_gc** %319, %struct.VEC_edge_gc*** %318, align 8, !dbg !5676
  %320 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5676
  %321 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5676
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %320, i8* align 8 %321, i64 16, i1 false), !dbg !5676
  br label %for.cond620, !dbg !5676

for.cond620:                                      ; preds = %for.inc655, %if.end617
  %322 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5678
  %323 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %322, i32 0, i32 0, !dbg !5678
  %324 = load i32, i32* %323, align 8, !dbg !5678
  %325 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %322, i32 0, i32 1, !dbg !5678
  %326 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %325, align 8, !dbg !5678
  %call621 = call zeroext i8 @ei_cond(i32 %324, %struct.VEC_edge_gc** %326, %struct.edge_def** %e1), !dbg !5678
  %tobool622 = icmp ne i8 %call621, 0, !dbg !5676
  br i1 %tobool622, label %for.body623, label %for.end656, !dbg !5676

for.body623:                                      ; preds = %for.cond620
  %327 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5680
  %succs624 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %327, i32 0, i32 1, !dbg !5680
  %328 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs624, align 8, !dbg !5680
  %tobool625 = icmp ne %struct.VEC_edge_gc* %328, null, !dbg !5680
  br i1 %tobool625, label %cond.true626, label %cond.false629, !dbg !5680

cond.true626:                                     ; preds = %for.body623
  %329 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5680
  %succs627 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %329, i32 0, i32 1, !dbg !5680
  %330 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs627, align 8, !dbg !5680
  %base628 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %330, i32 0, i32 0, !dbg !5680
  br label %cond.end630, !dbg !5680

cond.false629:                                    ; preds = %for.body623
  br label %cond.end630, !dbg !5680

cond.end630:                                      ; preds = %cond.false629, %cond.true626
  %cond631 = phi %struct.VEC_edge_base* [ %base628, %cond.true626 ], [ null, %cond.false629 ], !dbg !5680
  %index632 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i32 0, i32 0, !dbg !5680
  %331 = load i32, i32* %index632, align 8, !dbg !5680
  %call633 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond631, i32 %331), !dbg !5680
  store %struct.edge_def* %call633, %struct.edge_def** %e2, align 8, !dbg !5682
  %332 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5683
  %flags634 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %332, i32 0, i32 7, !dbg !5685
  %333 = load i32, i32* %flags634, align 8, !dbg !5685
  %and635 = and i32 %333, 8, !dbg !5686
  %tobool636 = icmp ne i32 %and635, 0, !dbg !5686
  br i1 %tobool636, label %if.then637, label %if.end638, !dbg !5687

if.then637:                                       ; preds = %cond.end630
  %334 = load i32, i32* %nehedges1, align 4, !dbg !5688
  %inc = add nsw i32 %334, 1, !dbg !5688
  store i32 %inc, i32* %nehedges1, align 4, !dbg !5688
  br label %if.end638, !dbg !5689

if.end638:                                        ; preds = %if.then637, %cond.end630
  %335 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !5690
  %flags639 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %335, i32 0, i32 7, !dbg !5692
  %336 = load i32, i32* %flags639, align 8, !dbg !5692
  %and640 = and i32 %336, 8, !dbg !5693
  %tobool641 = icmp ne i32 %and640, 0, !dbg !5693
  br i1 %tobool641, label %if.then642, label %if.end644, !dbg !5694

if.then642:                                       ; preds = %if.end638
  %337 = load i32, i32* %nehedges2, align 4, !dbg !5695
  %inc643 = add nsw i32 %337, 1, !dbg !5695
  store i32 %inc643, i32* %nehedges2, align 4, !dbg !5695
  br label %if.end644, !dbg !5696

if.end644:                                        ; preds = %if.then642, %if.end638
  %338 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5697
  %flags645 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %338, i32 0, i32 7, !dbg !5699
  %339 = load i32, i32* %flags645, align 8, !dbg !5699
  %and646 = and i32 %339, 1, !dbg !5700
  %tobool647 = icmp ne i32 %and646, 0, !dbg !5700
  br i1 %tobool647, label %if.then648, label %if.end649, !dbg !5701

if.then648:                                       ; preds = %if.end644
  %340 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5702
  store %struct.edge_def* %340, %struct.edge_def** %fallthru1, align 8, !dbg !5703
  br label %if.end649, !dbg !5704

if.end649:                                        ; preds = %if.then648, %if.end644
  %341 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !5705
  %flags650 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %341, i32 0, i32 7, !dbg !5707
  %342 = load i32, i32* %flags650, align 8, !dbg !5707
  %and651 = and i32 %342, 1, !dbg !5708
  %tobool652 = icmp ne i32 %and651, 0, !dbg !5708
  br i1 %tobool652, label %if.then653, label %if.end654, !dbg !5709

if.then653:                                       ; preds = %if.end649
  %343 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !5710
  store %struct.edge_def* %343, %struct.edge_def** %fallthru2, align 8, !dbg !5711
  br label %if.end654, !dbg !5712

if.end654:                                        ; preds = %if.then653, %if.end649
  br label %for.inc655, !dbg !5713

for.inc655:                                       ; preds = %if.end654
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5678
  br label %for.cond620, !dbg !5678, !llvm.loop !5714

for.end656:                                       ; preds = %for.cond620
  %344 = load i32, i32* %nehedges1, align 4, !dbg !5716
  %345 = load i32, i32* %nehedges2, align 4, !dbg !5718
  %cmp657 = icmp ne i32 %344, %345, !dbg !5719
  br i1 %cmp657, label %if.then666, label %lor.lhs.false659, !dbg !5720

lor.lhs.false659:                                 ; preds = %for.end656
  %346 = load %struct.edge_def*, %struct.edge_def** %fallthru1, align 8, !dbg !5721
  %cmp660 = icmp ne %struct.edge_def* %346, null, !dbg !5722
  %conv661 = zext i1 %cmp660 to i32, !dbg !5722
  %347 = load %struct.edge_def*, %struct.edge_def** %fallthru2, align 8, !dbg !5723
  %cmp662 = icmp ne %struct.edge_def* %347, null, !dbg !5724
  %conv663 = zext i1 %cmp662 to i32, !dbg !5724
  %cmp664 = icmp ne i32 %conv661, %conv663, !dbg !5725
  br i1 %cmp664, label %if.then666, label %if.end667, !dbg !5726

if.then666:                                       ; preds = %lor.lhs.false659, %for.end656
  store i8 0, i8* %retval, align 1, !dbg !5727
  br label %return, !dbg !5727

if.end667:                                        ; preds = %lor.lhs.false659
  %348 = load %struct.edge_def*, %struct.edge_def** %fallthru1, align 8, !dbg !5728
  %tobool668 = icmp ne %struct.edge_def* %348, null, !dbg !5728
  br i1 %tobool668, label %if.then669, label %if.end696, !dbg !5730

if.then669:                                       ; preds = %if.end667
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %d1, metadata !5731, metadata !DIExpression()), !dbg !5733
  %349 = load %struct.edge_def*, %struct.edge_def** %fallthru1, align 8, !dbg !5734
  %dest670 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %349, i32 0, i32 1, !dbg !5735
  %350 = load %struct.basic_block_def*, %struct.basic_block_def** %dest670, align 8, !dbg !5735
  %call671 = call zeroext i8 @forwarder_block_p(%struct.basic_block_def* %350), !dbg !5736
  %conv672 = zext i8 %call671 to i32, !dbg !5736
  %tobool673 = icmp ne i32 %conv672, 0, !dbg !5736
  br i1 %tobool673, label %cond.true674, label %cond.false677, !dbg !5736

cond.true674:                                     ; preds = %if.then669
  %351 = load %struct.edge_def*, %struct.edge_def** %fallthru1, align 8, !dbg !5737
  %dest675 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %351, i32 0, i32 1, !dbg !5738
  %352 = load %struct.basic_block_def*, %struct.basic_block_def** %dest675, align 8, !dbg !5738
  %call676 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %352), !dbg !5739
  br label %cond.end679, !dbg !5736

cond.false677:                                    ; preds = %if.then669
  %353 = load %struct.edge_def*, %struct.edge_def** %fallthru1, align 8, !dbg !5740
  %dest678 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %353, i32 0, i32 1, !dbg !5741
  %354 = load %struct.basic_block_def*, %struct.basic_block_def** %dest678, align 8, !dbg !5741
  br label %cond.end679, !dbg !5736

cond.end679:                                      ; preds = %cond.false677, %cond.true674
  %cond680 = phi %struct.basic_block_def* [ %call676, %cond.true674 ], [ %354, %cond.false677 ], !dbg !5736
  store %struct.basic_block_def* %cond680, %struct.basic_block_def** %d1, align 8, !dbg !5733
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %d2, metadata !5742, metadata !DIExpression()), !dbg !5743
  %355 = load %struct.edge_def*, %struct.edge_def** %fallthru2, align 8, !dbg !5744
  %dest681 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %355, i32 0, i32 1, !dbg !5745
  %356 = load %struct.basic_block_def*, %struct.basic_block_def** %dest681, align 8, !dbg !5745
  %call682 = call zeroext i8 @forwarder_block_p(%struct.basic_block_def* %356), !dbg !5746
  %conv683 = zext i8 %call682 to i32, !dbg !5746
  %tobool684 = icmp ne i32 %conv683, 0, !dbg !5746
  br i1 %tobool684, label %cond.true685, label %cond.false688, !dbg !5746

cond.true685:                                     ; preds = %cond.end679
  %357 = load %struct.edge_def*, %struct.edge_def** %fallthru2, align 8, !dbg !5747
  %dest686 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %357, i32 0, i32 1, !dbg !5748
  %358 = load %struct.basic_block_def*, %struct.basic_block_def** %dest686, align 8, !dbg !5748
  %call687 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %358), !dbg !5749
  br label %cond.end690, !dbg !5746

cond.false688:                                    ; preds = %cond.end679
  %359 = load %struct.edge_def*, %struct.edge_def** %fallthru2, align 8, !dbg !5750
  %dest689 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %359, i32 0, i32 1, !dbg !5751
  %360 = load %struct.basic_block_def*, %struct.basic_block_def** %dest689, align 8, !dbg !5751
  br label %cond.end690, !dbg !5746

cond.end690:                                      ; preds = %cond.false688, %cond.true685
  %cond691 = phi %struct.basic_block_def* [ %call687, %cond.true685 ], [ %360, %cond.false688 ], !dbg !5746
  store %struct.basic_block_def* %cond691, %struct.basic_block_def** %d2, align 8, !dbg !5743
  %361 = load %struct.basic_block_def*, %struct.basic_block_def** %d1, align 8, !dbg !5752
  %362 = load %struct.basic_block_def*, %struct.basic_block_def** %d2, align 8, !dbg !5754
  %cmp692 = icmp ne %struct.basic_block_def* %361, %362, !dbg !5755
  br i1 %cmp692, label %if.then694, label %if.end695, !dbg !5756

if.then694:                                       ; preds = %cond.end690
  store i8 0, i8* %retval, align 1, !dbg !5757
  br label %return, !dbg !5757

if.end695:                                        ; preds = %cond.end690
  br label %if.end696, !dbg !5758

if.end696:                                        ; preds = %if.end695, %if.end667
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %n1, metadata !5759, metadata !DIExpression()), !dbg !5761
  %363 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5762
  %il697 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %363, i32 0, i32 7, !dbg !5762
  %rtl698 = bitcast %union.basic_block_il_dependent* %il697 to %struct.rtl_bb_info**, !dbg !5762
  %364 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl698, align 8, !dbg !5762
  %end_699 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %364, i32 0, i32 1, !dbg !5762
  %365 = load %struct.rtx_def*, %struct.rtx_def** %end_699, align 8, !dbg !5762
  %call700 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %365, i32 25, %struct.rtx_def* null), !dbg !5763
  store %struct.rtx_def* %call700, %struct.rtx_def** %n1, align 8, !dbg !5761
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %n2, metadata !5764, metadata !DIExpression()), !dbg !5765
  %366 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5766
  %il701 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %366, i32 0, i32 7, !dbg !5766
  %rtl702 = bitcast %union.basic_block_il_dependent* %il701 to %struct.rtl_bb_info**, !dbg !5766
  %367 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl702, align 8, !dbg !5766
  %end_703 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %367, i32 0, i32 1, !dbg !5766
  %368 = load %struct.rtx_def*, %struct.rtx_def** %end_703, align 8, !dbg !5766
  %call704 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %368, i32 25, %struct.rtx_def* null), !dbg !5767
  store %struct.rtx_def* %call704, %struct.rtx_def** %n2, align 8, !dbg !5765
  %369 = load %struct.rtx_def*, %struct.rtx_def** %n1, align 8, !dbg !5768
  %tobool705 = icmp ne %struct.rtx_def* %369, null, !dbg !5768
  br i1 %tobool705, label %if.end709, label %land.lhs.true706, !dbg !5770

land.lhs.true706:                                 ; preds = %if.end696
  %370 = load %struct.rtx_def*, %struct.rtx_def** %n2, align 8, !dbg !5771
  %tobool707 = icmp ne %struct.rtx_def* %370, null, !dbg !5771
  br i1 %tobool707, label %if.then708, label %if.end709, !dbg !5772

if.then708:                                       ; preds = %land.lhs.true706
  store i8 0, i8* %retval, align 1, !dbg !5773
  br label %return, !dbg !5773

if.end709:                                        ; preds = %land.lhs.true706, %if.end696
  %371 = load %struct.rtx_def*, %struct.rtx_def** %n1, align 8, !dbg !5774
  %tobool710 = icmp ne %struct.rtx_def* %371, null, !dbg !5774
  br i1 %tobool710, label %land.lhs.true711, label %if.end725, !dbg !5776

land.lhs.true711:                                 ; preds = %if.end709
  %372 = load %struct.rtx_def*, %struct.rtx_def** %n2, align 8, !dbg !5777
  %tobool712 = icmp ne %struct.rtx_def* %372, null, !dbg !5777
  br i1 %tobool712, label %lor.lhs.false713, label %if.then724, !dbg !5778

lor.lhs.false713:                                 ; preds = %land.lhs.true711
  %373 = load %struct.rtx_def*, %struct.rtx_def** %n1, align 8, !dbg !5779
  %u714 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %373, i32 0, i32 1, !dbg !5779
  %fld715 = bitcast %union.u* %u714 to [1 x %union.rtunion_def]*, !dbg !5779
  %arrayidx716 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld715, i64 0, i64 0, !dbg !5779
  %rt_rtx717 = bitcast %union.rtunion_def* %arrayidx716 to %struct.rtx_def**, !dbg !5779
  %374 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx717, align 8, !dbg !5779
  %375 = load %struct.rtx_def*, %struct.rtx_def** %n2, align 8, !dbg !5780
  %u718 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %375, i32 0, i32 1, !dbg !5780
  %fld719 = bitcast %union.u* %u718 to [1 x %union.rtunion_def]*, !dbg !5780
  %arrayidx720 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld719, i64 0, i64 0, !dbg !5780
  %rt_rtx721 = bitcast %union.rtunion_def* %arrayidx720 to %struct.rtx_def**, !dbg !5780
  %376 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx721, align 8, !dbg !5780
  %cmp722 = icmp ne %struct.rtx_def* %374, %376, !dbg !5781
  br i1 %cmp722, label %if.then724, label %if.end725, !dbg !5782

if.then724:                                       ; preds = %lor.lhs.false713, %land.lhs.true711
  store i8 0, i8* %retval, align 1, !dbg !5783
  br label %return, !dbg !5783

if.end725:                                        ; preds = %lor.lhs.false713, %if.end709
  %377 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5784
  %succs727 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %377, i32 0, i32 1, !dbg !5784
  %call728 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs727), !dbg !5784
  %378 = bitcast %struct.edge_iterator* %tmp726 to { i32, %struct.VEC_edge_gc** }*, !dbg !5784
  %379 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %378, i32 0, i32 0, !dbg !5784
  %380 = extractvalue { i32, %struct.VEC_edge_gc** } %call728, 0, !dbg !5784
  store i32 %380, i32* %379, align 8, !dbg !5784
  %381 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %378, i32 0, i32 1, !dbg !5784
  %382 = extractvalue { i32, %struct.VEC_edge_gc** } %call728, 1, !dbg !5784
  store %struct.VEC_edge_gc** %382, %struct.VEC_edge_gc*** %381, align 8, !dbg !5784
  %383 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5784
  %384 = bitcast %struct.edge_iterator* %tmp726 to i8*, !dbg !5784
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %383, i8* align 8 %384, i64 16, i1 false), !dbg !5784
  br label %for.cond729, !dbg !5784

for.cond729:                                      ; preds = %for.inc785, %if.end725
  %385 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5786
  %386 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %385, i32 0, i32 0, !dbg !5786
  %387 = load i32, i32* %386, align 8, !dbg !5786
  %388 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %385, i32 0, i32 1, !dbg !5786
  %389 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %388, align 8, !dbg !5786
  %call730 = call zeroext i8 @ei_cond(i32 %387, %struct.VEC_edge_gc** %389, %struct.edge_def** %e1), !dbg !5786
  %tobool731 = icmp ne i8 %call730, 0, !dbg !5784
  br i1 %tobool731, label %for.body732, label %for.end786, !dbg !5784

for.body732:                                      ; preds = %for.cond729
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e2733, metadata !5788, metadata !DIExpression()), !dbg !5790
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei734, metadata !5791, metadata !DIExpression()), !dbg !5792
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %d1735, metadata !5793, metadata !DIExpression()), !dbg !5794
  %390 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5795
  %dest736 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %390, i32 0, i32 1, !dbg !5796
  %391 = load %struct.basic_block_def*, %struct.basic_block_def** %dest736, align 8, !dbg !5796
  store %struct.basic_block_def* %391, %struct.basic_block_def** %d1735, align 8, !dbg !5794
  %392 = load %struct.basic_block_def*, %struct.basic_block_def** %d1735, align 8, !dbg !5797
  %flags737 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %392, i32 0, i32 13, !dbg !5797
  %393 = load i32, i32* %flags737, align 8, !dbg !5797
  %and738 = and i32 %393, 1024, !dbg !5797
  %tobool739 = icmp ne i32 %and738, 0, !dbg !5797
  br i1 %tobool739, label %if.then740, label %if.end751, !dbg !5799

if.then740:                                       ; preds = %for.body732
  %394 = load %struct.basic_block_def*, %struct.basic_block_def** %d1735, align 8, !dbg !5800
  %succs741 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %394, i32 0, i32 1, !dbg !5800
  %395 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs741, align 8, !dbg !5800
  %tobool742 = icmp ne %struct.VEC_edge_gc* %395, null, !dbg !5800
  br i1 %tobool742, label %cond.true743, label %cond.false746, !dbg !5800

cond.true743:                                     ; preds = %if.then740
  %396 = load %struct.basic_block_def*, %struct.basic_block_def** %d1735, align 8, !dbg !5800
  %succs744 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %396, i32 0, i32 1, !dbg !5800
  %397 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs744, align 8, !dbg !5800
  %base745 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %397, i32 0, i32 0, !dbg !5800
  br label %cond.end747, !dbg !5800

cond.false746:                                    ; preds = %if.then740
  br label %cond.end747, !dbg !5800

cond.end747:                                      ; preds = %cond.false746, %cond.true743
  %cond748 = phi %struct.VEC_edge_base* [ %base745, %cond.true743 ], [ null, %cond.false746 ], !dbg !5800
  %call749 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond748, i32 0), !dbg !5800
  %dest750 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call749, i32 0, i32 1, !dbg !5801
  %398 = load %struct.basic_block_def*, %struct.basic_block_def** %dest750, align 8, !dbg !5801
  store %struct.basic_block_def* %398, %struct.basic_block_def** %d1735, align 8, !dbg !5802
  br label %if.end751, !dbg !5803

if.end751:                                        ; preds = %cond.end747, %for.body732
  %399 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5804
  %succs753 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %399, i32 0, i32 1, !dbg !5804
  %call754 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs753), !dbg !5804
  %400 = bitcast %struct.edge_iterator* %tmp752 to { i32, %struct.VEC_edge_gc** }*, !dbg !5804
  %401 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %400, i32 0, i32 0, !dbg !5804
  %402 = extractvalue { i32, %struct.VEC_edge_gc** } %call754, 0, !dbg !5804
  store i32 %402, i32* %401, align 8, !dbg !5804
  %403 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %400, i32 0, i32 1, !dbg !5804
  %404 = extractvalue { i32, %struct.VEC_edge_gc** } %call754, 1, !dbg !5804
  store %struct.VEC_edge_gc** %404, %struct.VEC_edge_gc*** %403, align 8, !dbg !5804
  %405 = bitcast %struct.edge_iterator* %ei734 to i8*, !dbg !5804
  %406 = bitcast %struct.edge_iterator* %tmp752 to i8*, !dbg !5804
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %405, i8* align 8 %406, i64 16, i1 false), !dbg !5804
  br label %for.cond755, !dbg !5804

for.cond755:                                      ; preds = %for.inc780, %if.end751
  %407 = bitcast %struct.edge_iterator* %ei734 to { i32, %struct.VEC_edge_gc** }*, !dbg !5806
  %408 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %407, i32 0, i32 0, !dbg !5806
  %409 = load i32, i32* %408, align 8, !dbg !5806
  %410 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %407, i32 0, i32 1, !dbg !5806
  %411 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %410, align 8, !dbg !5806
  %call756 = call zeroext i8 @ei_cond(i32 %409, %struct.VEC_edge_gc** %411, %struct.edge_def** %e2733), !dbg !5806
  %tobool757 = icmp ne i8 %call756, 0, !dbg !5804
  br i1 %tobool757, label %for.body758, label %for.end781, !dbg !5804

for.body758:                                      ; preds = %for.cond755
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %d2759, metadata !5808, metadata !DIExpression()), !dbg !5810
  %412 = load %struct.edge_def*, %struct.edge_def** %e2733, align 8, !dbg !5811
  %dest760 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %412, i32 0, i32 1, !dbg !5812
  %413 = load %struct.basic_block_def*, %struct.basic_block_def** %dest760, align 8, !dbg !5812
  store %struct.basic_block_def* %413, %struct.basic_block_def** %d2759, align 8, !dbg !5810
  %414 = load %struct.basic_block_def*, %struct.basic_block_def** %d2759, align 8, !dbg !5813
  %flags761 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %414, i32 0, i32 13, !dbg !5813
  %415 = load i32, i32* %flags761, align 8, !dbg !5813
  %and762 = and i32 %415, 1024, !dbg !5813
  %tobool763 = icmp ne i32 %and762, 0, !dbg !5813
  br i1 %tobool763, label %if.then764, label %if.end775, !dbg !5815

if.then764:                                       ; preds = %for.body758
  %416 = load %struct.basic_block_def*, %struct.basic_block_def** %d2759, align 8, !dbg !5816
  %succs765 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %416, i32 0, i32 1, !dbg !5816
  %417 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs765, align 8, !dbg !5816
  %tobool766 = icmp ne %struct.VEC_edge_gc* %417, null, !dbg !5816
  br i1 %tobool766, label %cond.true767, label %cond.false770, !dbg !5816

cond.true767:                                     ; preds = %if.then764
  %418 = load %struct.basic_block_def*, %struct.basic_block_def** %d2759, align 8, !dbg !5816
  %succs768 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %418, i32 0, i32 1, !dbg !5816
  %419 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs768, align 8, !dbg !5816
  %base769 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %419, i32 0, i32 0, !dbg !5816
  br label %cond.end771, !dbg !5816

cond.false770:                                    ; preds = %if.then764
  br label %cond.end771, !dbg !5816

cond.end771:                                      ; preds = %cond.false770, %cond.true767
  %cond772 = phi %struct.VEC_edge_base* [ %base769, %cond.true767 ], [ null, %cond.false770 ], !dbg !5816
  %call773 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond772, i32 0), !dbg !5816
  %dest774 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call773, i32 0, i32 1, !dbg !5817
  %420 = load %struct.basic_block_def*, %struct.basic_block_def** %dest774, align 8, !dbg !5817
  store %struct.basic_block_def* %420, %struct.basic_block_def** %d2759, align 8, !dbg !5818
  br label %if.end775, !dbg !5819

if.end775:                                        ; preds = %cond.end771, %for.body758
  %421 = load %struct.basic_block_def*, %struct.basic_block_def** %d1735, align 8, !dbg !5820
  %422 = load %struct.basic_block_def*, %struct.basic_block_def** %d2759, align 8, !dbg !5822
  %cmp776 = icmp eq %struct.basic_block_def* %421, %422, !dbg !5823
  br i1 %cmp776, label %if.then778, label %if.end779, !dbg !5824

if.then778:                                       ; preds = %if.end775
  br label %for.end781, !dbg !5825

if.end779:                                        ; preds = %if.end775
  br label %for.inc780, !dbg !5826

for.inc780:                                       ; preds = %if.end779
  call void @ei_next(%struct.edge_iterator* %ei734), !dbg !5806
  br label %for.cond755, !dbg !5806, !llvm.loop !5827

for.end781:                                       ; preds = %if.then778, %for.cond755
  %423 = load %struct.edge_def*, %struct.edge_def** %e2733, align 8, !dbg !5829
  %tobool782 = icmp ne %struct.edge_def* %423, null, !dbg !5829
  br i1 %tobool782, label %if.end784, label %if.then783, !dbg !5831

if.then783:                                       ; preds = %for.end781
  store i8 0, i8* %retval, align 1, !dbg !5832
  br label %return, !dbg !5832

if.end784:                                        ; preds = %for.end781
  br label %for.inc785, !dbg !5833

for.inc785:                                       ; preds = %if.end784
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5786
  br label %for.cond729, !dbg !5786, !llvm.loop !5834

for.end786:                                       ; preds = %for.cond729
  store i8 1, i8* %retval, align 1, !dbg !5836
  br label %return, !dbg !5836

return:                                           ; preds = %for.end786, %if.then783, %if.then724, %if.then708, %if.then694, %if.then666, %if.then616, %if.then594, %if.end584, %if.end576, %if.end428, %if.end417, %if.then331, %if.else268, %if.then246, %if.then74, %land.end
  %424 = load i8, i8* %retval, align 1, !dbg !5837
  ret i8 %424, !dbg !5837
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @flow_find_cross_jump(i32 %mode, %struct.basic_block_def* %bb1, %struct.basic_block_def* %bb2, %struct.rtx_def** %f1, %struct.rtx_def** %f2) #0 !dbg !5838 {
entry:
  %mode.addr = alloca i32, align 4
  %bb1.addr = alloca %struct.basic_block_def*, align 8
  %bb2.addr = alloca %struct.basic_block_def*, align 8
  %f1.addr = alloca %struct.rtx_def**, align 8
  %f2.addr = alloca %struct.rtx_def**, align 8
  %i1 = alloca %struct.rtx_def*, align 8
  %i2 = alloca %struct.rtx_def*, align 8
  %last1 = alloca %struct.rtx_def*, align 8
  %last2 = alloca %struct.rtx_def*, align 8
  %afterlast1 = alloca %struct.rtx_def*, align 8
  %afterlast2 = alloca %struct.rtx_def*, align 8
  %ninsns = alloca i32, align 4
  %equiv1 = alloca %struct.rtx_def*, align 8
  %equiv2 = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5841, metadata !DIExpression()), !dbg !5842
  store %struct.basic_block_def* %bb1, %struct.basic_block_def** %bb1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb1.addr, metadata !5843, metadata !DIExpression()), !dbg !5844
  store %struct.basic_block_def* %bb2, %struct.basic_block_def** %bb2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb2.addr, metadata !5845, metadata !DIExpression()), !dbg !5846
  store %struct.rtx_def** %f1, %struct.rtx_def*** %f1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %f1.addr, metadata !5847, metadata !DIExpression()), !dbg !5848
  store %struct.rtx_def** %f2, %struct.rtx_def*** %f2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %f2.addr, metadata !5849, metadata !DIExpression()), !dbg !5850
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %i1, metadata !5851, metadata !DIExpression()), !dbg !5852
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %i2, metadata !5853, metadata !DIExpression()), !dbg !5854
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last1, metadata !5855, metadata !DIExpression()), !dbg !5856
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last2, metadata !5857, metadata !DIExpression()), !dbg !5858
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %afterlast1, metadata !5859, metadata !DIExpression()), !dbg !5860
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %afterlast2, metadata !5861, metadata !DIExpression()), !dbg !5862
  call void @llvm.dbg.declare(metadata i32* %ninsns, metadata !5863, metadata !DIExpression()), !dbg !5864
  store i32 0, i32* %ninsns, align 4, !dbg !5864
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5865
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !5865
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5865
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5865
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !5865
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5865
  store %struct.rtx_def* %2, %struct.rtx_def** %i1, align 8, !dbg !5866
  store %struct.rtx_def* null, %struct.rtx_def** %afterlast2, align 8, !dbg !5867
  store %struct.rtx_def* null, %struct.rtx_def** %last2, align 8, !dbg !5868
  store %struct.rtx_def* null, %struct.rtx_def** %afterlast1, align 8, !dbg !5869
  store %struct.rtx_def* null, %struct.rtx_def** %last1, align 8, !dbg !5870
  %3 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5871
  %call = call i32 @onlyjump_p(%struct.rtx_def* %3), !dbg !5873
  %tobool = icmp ne i32 %call, 0, !dbg !5873
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5874

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5875
  %call1 = call i32 @returnjump_p(%struct.rtx_def* %4), !dbg !5876
  %tobool2 = icmp ne i32 %call1, 0, !dbg !5876
  br i1 %tobool2, label %land.lhs.true, label %if.end, !dbg !5877

land.lhs.true:                                    ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5878
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !5878
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5878
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5878
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5878
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5878
  %call3 = call i32 @side_effects_p(%struct.rtx_def* %6), !dbg !5879
  %tobool4 = icmp ne i32 %call3, 0, !dbg !5879
  br i1 %tobool4, label %if.end, label %if.then, !dbg !5880

if.then:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5881
  store %struct.rtx_def* %7, %struct.rtx_def** %last1, align 8, !dbg !5883
  %8 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5884
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !5884
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !5884
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !5884
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !5884
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !5884
  store %struct.rtx_def* %9, %struct.rtx_def** %i1, align 8, !dbg !5885
  br label %if.end, !dbg !5886

if.end:                                           ; preds = %if.then, %land.lhs.true, %lor.lhs.false
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5887
  %il9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 7, !dbg !5887
  %rtl10 = bitcast %union.basic_block_il_dependent* %il9 to %struct.rtl_bb_info**, !dbg !5887
  %11 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl10, align 8, !dbg !5887
  %end_11 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %11, i32 0, i32 1, !dbg !5887
  %12 = load %struct.rtx_def*, %struct.rtx_def** %end_11, align 8, !dbg !5887
  store %struct.rtx_def* %12, %struct.rtx_def** %i2, align 8, !dbg !5888
  %13 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5889
  %call12 = call i32 @onlyjump_p(%struct.rtx_def* %13), !dbg !5891
  %tobool13 = icmp ne i32 %call12, 0, !dbg !5891
  br i1 %tobool13, label %if.then24, label %lor.lhs.false14, !dbg !5892

lor.lhs.false14:                                  ; preds = %if.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5893
  %call15 = call i32 @returnjump_p(%struct.rtx_def* %14), !dbg !5894
  %tobool16 = icmp ne i32 %call15, 0, !dbg !5894
  br i1 %tobool16, label %land.lhs.true17, label %if.end38, !dbg !5895

land.lhs.true17:                                  ; preds = %lor.lhs.false14
  %15 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5896
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !5896
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !5896
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 5, !dbg !5896
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !5896
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !5896
  %call22 = call i32 @side_effects_p(%struct.rtx_def* %16), !dbg !5897
  %tobool23 = icmp ne i32 %call22, 0, !dbg !5897
  br i1 %tobool23, label %if.end38, label %if.then24, !dbg !5898

if.then24:                                        ; preds = %land.lhs.true17, %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5899
  store %struct.rtx_def* %17, %struct.rtx_def** %last2, align 8, !dbg !5901
  %18 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5902
  %call25 = call i32 @simplejump_p(%struct.rtx_def* %18), !dbg !5904
  %tobool26 = icmp ne i32 %call25, 0, !dbg !5904
  br i1 %tobool26, label %if.end33, label %land.lhs.true27, !dbg !5905

land.lhs.true27:                                  ; preds = %if.then24
  %19 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5906
  %call28 = call i32 @returnjump_p(%struct.rtx_def* %19), !dbg !5907
  %tobool29 = icmp ne i32 %call28, 0, !dbg !5907
  br i1 %tobool29, label %if.end33, label %land.lhs.true30, !dbg !5908

land.lhs.true30:                                  ; preds = %land.lhs.true27
  %20 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !5909
  %tobool31 = icmp ne %struct.rtx_def* %20, null, !dbg !5909
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !5910

if.then32:                                        ; preds = %land.lhs.true30
  %21 = load i32, i32* %ninsns, align 4, !dbg !5911
  %inc = add nsw i32 %21, 1, !dbg !5911
  store i32 %inc, i32* %ninsns, align 4, !dbg !5911
  br label %if.end33, !dbg !5912

if.end33:                                         ; preds = %if.then32, %land.lhs.true30, %land.lhs.true27, %if.then24
  %22 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5913
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !5913
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !5913
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 1, !dbg !5913
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !5913
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx37, align 8, !dbg !5913
  store %struct.rtx_def* %23, %struct.rtx_def** %i2, align 8, !dbg !5914
  br label %if.end38, !dbg !5915

if.end38:                                         ; preds = %if.end33, %land.lhs.true17, %lor.lhs.false14
  br label %while.body, !dbg !5916

while.body:                                       ; preds = %if.end38, %if.end157
  br label %while.cond39, !dbg !5917

while.cond39:                                     ; preds = %while.body59, %while.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5919
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !5919
  %bf.load = load i32, i32* %25, align 8, !dbg !5919
  %bf.clear = and i32 %bf.load, 65535, !dbg !5919
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !5919
  br i1 %cmp, label %land.lhs.true52, label %lor.lhs.false40, !dbg !5919

lor.lhs.false40:                                  ; preds = %while.cond39
  %26 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5919
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !5919
  %bf.load41 = load i32, i32* %27, align 8, !dbg !5919
  %bf.clear42 = and i32 %bf.load41, 65535, !dbg !5919
  %cmp43 = icmp eq i32 %bf.clear42, 7, !dbg !5919
  br i1 %cmp43, label %land.lhs.true52, label %lor.lhs.false44, !dbg !5919

lor.lhs.false44:                                  ; preds = %lor.lhs.false40
  %28 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5919
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !5919
  %bf.load45 = load i32, i32* %29, align 8, !dbg !5919
  %bf.clear46 = and i32 %bf.load45, 65535, !dbg !5919
  %cmp47 = icmp eq i32 %bf.clear46, 9, !dbg !5919
  br i1 %cmp47, label %land.lhs.true52, label %lor.lhs.false48, !dbg !5919

lor.lhs.false48:                                  ; preds = %lor.lhs.false44
  %30 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5919
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !5919
  %bf.load49 = load i32, i32* %31, align 8, !dbg !5919
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !5919
  %cmp51 = icmp eq i32 %bf.clear50, 10, !dbg !5919
  br i1 %cmp51, label %land.lhs.true52, label %land.rhs, !dbg !5919

land.lhs.true52:                                  ; preds = %lor.lhs.false48, %lor.lhs.false44, %lor.lhs.false40, %while.cond39
  %32 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5919
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !5919
  %bf.load53 = load i32, i32* %33, align 8, !dbg !5919
  %bf.clear54 = and i32 %bf.load53, 65535, !dbg !5919
  %cmp55 = icmp eq i32 %bf.clear54, 7, !dbg !5919
  br i1 %cmp55, label %land.rhs, label %land.end, !dbg !5920

land.rhs:                                         ; preds = %land.lhs.true52, %lor.lhs.false48
  %34 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5921
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5922
  %il56 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 7, !dbg !5922
  %rtl57 = bitcast %union.basic_block_il_dependent* %il56 to %struct.rtl_bb_info**, !dbg !5922
  %36 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl57, align 8, !dbg !5922
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %36, i32 0, i32 0, !dbg !5922
  %37 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5922
  %cmp58 = icmp ne %struct.rtx_def* %34, %37, !dbg !5923
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true52
  %38 = phi i1 [ false, %land.lhs.true52 ], [ %cmp58, %land.rhs ], !dbg !5924
  br i1 %38, label %while.body59, label %while.end, !dbg !5917

while.body59:                                     ; preds = %land.end
  %39 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5925
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !5925
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !5925
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 1, !dbg !5925
  %rt_rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**, !dbg !5925
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx63, align 8, !dbg !5925
  store %struct.rtx_def* %40, %struct.rtx_def** %i1, align 8, !dbg !5926
  br label %while.cond39, !dbg !5917, !llvm.loop !5927

while.end:                                        ; preds = %land.end
  br label %while.cond64, !dbg !5928

while.cond64:                                     ; preds = %while.body90, %while.end
  %41 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5929
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !5929
  %bf.load65 = load i32, i32* %42, align 8, !dbg !5929
  %bf.clear66 = and i32 %bf.load65, 65535, !dbg !5929
  %cmp67 = icmp eq i32 %bf.clear66, 8, !dbg !5929
  br i1 %cmp67, label %land.lhs.true80, label %lor.lhs.false68, !dbg !5929

lor.lhs.false68:                                  ; preds = %while.cond64
  %43 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5929
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !5929
  %bf.load69 = load i32, i32* %44, align 8, !dbg !5929
  %bf.clear70 = and i32 %bf.load69, 65535, !dbg !5929
  %cmp71 = icmp eq i32 %bf.clear70, 7, !dbg !5929
  br i1 %cmp71, label %land.lhs.true80, label %lor.lhs.false72, !dbg !5929

lor.lhs.false72:                                  ; preds = %lor.lhs.false68
  %45 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5929
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !5929
  %bf.load73 = load i32, i32* %46, align 8, !dbg !5929
  %bf.clear74 = and i32 %bf.load73, 65535, !dbg !5929
  %cmp75 = icmp eq i32 %bf.clear74, 9, !dbg !5929
  br i1 %cmp75, label %land.lhs.true80, label %lor.lhs.false76, !dbg !5929

lor.lhs.false76:                                  ; preds = %lor.lhs.false72
  %47 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5929
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !5929
  %bf.load77 = load i32, i32* %48, align 8, !dbg !5929
  %bf.clear78 = and i32 %bf.load77, 65535, !dbg !5929
  %cmp79 = icmp eq i32 %bf.clear78, 10, !dbg !5929
  br i1 %cmp79, label %land.lhs.true80, label %land.rhs84, !dbg !5929

land.lhs.true80:                                  ; preds = %lor.lhs.false76, %lor.lhs.false72, %lor.lhs.false68, %while.cond64
  %49 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5929
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !5929
  %bf.load81 = load i32, i32* %50, align 8, !dbg !5929
  %bf.clear82 = and i32 %bf.load81, 65535, !dbg !5929
  %cmp83 = icmp eq i32 %bf.clear82, 7, !dbg !5929
  br i1 %cmp83, label %land.rhs84, label %land.end89, !dbg !5930

land.rhs84:                                       ; preds = %land.lhs.true80, %lor.lhs.false76
  %51 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5931
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5932
  %il85 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 7, !dbg !5932
  %rtl86 = bitcast %union.basic_block_il_dependent* %il85 to %struct.rtl_bb_info**, !dbg !5932
  %53 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl86, align 8, !dbg !5932
  %head_87 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %53, i32 0, i32 0, !dbg !5932
  %54 = load %struct.rtx_def*, %struct.rtx_def** %head_87, align 8, !dbg !5932
  %cmp88 = icmp ne %struct.rtx_def* %51, %54, !dbg !5933
  br label %land.end89

land.end89:                                       ; preds = %land.rhs84, %land.lhs.true80
  %55 = phi i1 [ false, %land.lhs.true80 ], [ %cmp88, %land.rhs84 ], !dbg !5924
  br i1 %55, label %while.body90, label %while.end95, !dbg !5928

while.body90:                                     ; preds = %land.end89
  %56 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5934
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !5934
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !5934
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 1, !dbg !5934
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !5934
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx94, align 8, !dbg !5934
  store %struct.rtx_def* %57, %struct.rtx_def** %i2, align 8, !dbg !5935
  br label %while.cond64, !dbg !5928, !llvm.loop !5936

while.end95:                                      ; preds = %land.end89
  %58 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5937
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !5939
  %il96 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 7, !dbg !5939
  %rtl97 = bitcast %union.basic_block_il_dependent* %il96 to %struct.rtl_bb_info**, !dbg !5939
  %60 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl97, align 8, !dbg !5939
  %head_98 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %60, i32 0, i32 0, !dbg !5939
  %61 = load %struct.rtx_def*, %struct.rtx_def** %head_98, align 8, !dbg !5939
  %cmp99 = icmp eq %struct.rtx_def* %58, %61, !dbg !5940
  br i1 %cmp99, label %if.then105, label %lor.lhs.false100, !dbg !5941

lor.lhs.false100:                                 ; preds = %while.end95
  %62 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5942
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !5943
  %il101 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 7, !dbg !5943
  %rtl102 = bitcast %union.basic_block_il_dependent* %il101 to %struct.rtl_bb_info**, !dbg !5943
  %64 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl102, align 8, !dbg !5943
  %head_103 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %64, i32 0, i32 0, !dbg !5943
  %65 = load %struct.rtx_def*, %struct.rtx_def** %head_103, align 8, !dbg !5943
  %cmp104 = icmp eq %struct.rtx_def* %62, %65, !dbg !5944
  br i1 %cmp104, label %if.then105, label %if.end106, !dbg !5945

if.then105:                                       ; preds = %lor.lhs.false100, %while.end95
  br label %while.end166, !dbg !5946

if.end106:                                        ; preds = %lor.lhs.false100
  %66 = load i32, i32* %mode.addr, align 4, !dbg !5947
  %67 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5949
  %68 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5950
  %call107 = call zeroext i8 @old_insns_match_p(i32 %66, %struct.rtx_def* %67, %struct.rtx_def* %68), !dbg !5951
  %tobool108 = icmp ne i8 %call107, 0, !dbg !5951
  br i1 %tobool108, label %if.end110, label %if.then109, !dbg !5952

if.then109:                                       ; preds = %if.end106
  br label %while.end166, !dbg !5953

if.end110:                                        ; preds = %if.end106
  %69 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5954
  %70 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5955
  call void @merge_memattrs(%struct.rtx_def* %69, %struct.rtx_def* %70), !dbg !5956
  %71 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5957
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !5957
  %bf.load111 = load i32, i32* %72, align 8, !dbg !5957
  %bf.clear112 = and i32 %bf.load111, 65535, !dbg !5957
  %cmp113 = icmp eq i32 %bf.clear112, 8, !dbg !5957
  br i1 %cmp113, label %if.then126, label %lor.lhs.false114, !dbg !5957

lor.lhs.false114:                                 ; preds = %if.end110
  %73 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5957
  %74 = bitcast %struct.rtx_def* %73 to i32*, !dbg !5957
  %bf.load115 = load i32, i32* %74, align 8, !dbg !5957
  %bf.clear116 = and i32 %bf.load115, 65535, !dbg !5957
  %cmp117 = icmp eq i32 %bf.clear116, 7, !dbg !5957
  br i1 %cmp117, label %if.then126, label %lor.lhs.false118, !dbg !5957

lor.lhs.false118:                                 ; preds = %lor.lhs.false114
  %75 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5957
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !5957
  %bf.load119 = load i32, i32* %76, align 8, !dbg !5957
  %bf.clear120 = and i32 %bf.load119, 65535, !dbg !5957
  %cmp121 = icmp eq i32 %bf.clear120, 9, !dbg !5957
  br i1 %cmp121, label %if.then126, label %lor.lhs.false122, !dbg !5957

lor.lhs.false122:                                 ; preds = %lor.lhs.false118
  %77 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5957
  %78 = bitcast %struct.rtx_def* %77 to i32*, !dbg !5957
  %bf.load123 = load i32, i32* %78, align 8, !dbg !5957
  %bf.clear124 = and i32 %bf.load123, 65535, !dbg !5957
  %cmp125 = icmp eq i32 %bf.clear124, 10, !dbg !5957
  br i1 %cmp125, label %if.then126, label %if.end157, !dbg !5959

if.then126:                                       ; preds = %lor.lhs.false122, %lor.lhs.false118, %lor.lhs.false114, %if.end110
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %equiv1, metadata !5960, metadata !DIExpression()), !dbg !5962
  %79 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5963
  %call127 = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %79), !dbg !5964
  store %struct.rtx_def* %call127, %struct.rtx_def** %equiv1, align 8, !dbg !5962
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %equiv2, metadata !5965, metadata !DIExpression()), !dbg !5966
  %80 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5967
  %call128 = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %80), !dbg !5968
  store %struct.rtx_def* %call128, %struct.rtx_def** %equiv2, align 8, !dbg !5966
  %81 = load %struct.rtx_def*, %struct.rtx_def** %equiv1, align 8, !dbg !5969
  %tobool129 = icmp ne %struct.rtx_def* %81, null, !dbg !5969
  br i1 %tobool129, label %land.lhs.true130, label %if.else, !dbg !5971

land.lhs.true130:                                 ; preds = %if.then126
  %82 = load %struct.rtx_def*, %struct.rtx_def** %equiv2, align 8, !dbg !5972
  %tobool131 = icmp ne %struct.rtx_def* %82, null, !dbg !5972
  br i1 %tobool131, label %if.else, label %if.then132, !dbg !5973

if.then132:                                       ; preds = %land.lhs.true130
  %83 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5974
  %84 = load %struct.rtx_def*, %struct.rtx_def** %equiv1, align 8, !dbg !5975
  call void @remove_note(%struct.rtx_def* %83, %struct.rtx_def* %84), !dbg !5976
  br label %if.end155, !dbg !5976

if.else:                                          ; preds = %land.lhs.true130, %if.then126
  %85 = load %struct.rtx_def*, %struct.rtx_def** %equiv1, align 8, !dbg !5977
  %tobool133 = icmp ne %struct.rtx_def* %85, null, !dbg !5977
  br i1 %tobool133, label %if.else137, label %land.lhs.true134, !dbg !5979

land.lhs.true134:                                 ; preds = %if.else
  %86 = load %struct.rtx_def*, %struct.rtx_def** %equiv2, align 8, !dbg !5980
  %tobool135 = icmp ne %struct.rtx_def* %86, null, !dbg !5980
  br i1 %tobool135, label %if.then136, label %if.else137, !dbg !5981

if.then136:                                       ; preds = %land.lhs.true134
  %87 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5982
  %88 = load %struct.rtx_def*, %struct.rtx_def** %equiv2, align 8, !dbg !5983
  call void @remove_note(%struct.rtx_def* %87, %struct.rtx_def* %88), !dbg !5984
  br label %if.end154, !dbg !5984

if.else137:                                       ; preds = %land.lhs.true134, %if.else
  %89 = load %struct.rtx_def*, %struct.rtx_def** %equiv1, align 8, !dbg !5985
  %tobool138 = icmp ne %struct.rtx_def* %89, null, !dbg !5985
  br i1 %tobool138, label %land.lhs.true139, label %if.end153, !dbg !5987

land.lhs.true139:                                 ; preds = %if.else137
  %90 = load %struct.rtx_def*, %struct.rtx_def** %equiv2, align 8, !dbg !5988
  %tobool140 = icmp ne %struct.rtx_def* %90, null, !dbg !5988
  br i1 %tobool140, label %land.lhs.true141, label %if.end153, !dbg !5989

land.lhs.true141:                                 ; preds = %land.lhs.true139
  %91 = load %struct.rtx_def*, %struct.rtx_def** %equiv1, align 8, !dbg !5990
  %u142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !5990
  %fld143 = bitcast %union.u* %u142 to [1 x %union.rtunion_def]*, !dbg !5990
  %arrayidx144 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld143, i64 0, i64 0, !dbg !5990
  %rt_rtx145 = bitcast %union.rtunion_def* %arrayidx144 to %struct.rtx_def**, !dbg !5990
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx145, align 8, !dbg !5990
  %93 = load %struct.rtx_def*, %struct.rtx_def** %equiv2, align 8, !dbg !5991
  %u146 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1, !dbg !5991
  %fld147 = bitcast %union.u* %u146 to [1 x %union.rtunion_def]*, !dbg !5991
  %arrayidx148 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld147, i64 0, i64 0, !dbg !5991
  %rt_rtx149 = bitcast %union.rtunion_def* %arrayidx148 to %struct.rtx_def**, !dbg !5991
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx149, align 8, !dbg !5991
  %call150 = call i32 @rtx_equal_p(%struct.rtx_def* %92, %struct.rtx_def* %94), !dbg !5992
  %tobool151 = icmp ne i32 %call150, 0, !dbg !5992
  br i1 %tobool151, label %if.end153, label %if.then152, !dbg !5993

if.then152:                                       ; preds = %land.lhs.true141
  %95 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5994
  %96 = load %struct.rtx_def*, %struct.rtx_def** %equiv1, align 8, !dbg !5996
  call void @remove_note(%struct.rtx_def* %95, %struct.rtx_def* %96), !dbg !5997
  %97 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !5998
  %98 = load %struct.rtx_def*, %struct.rtx_def** %equiv2, align 8, !dbg !5999
  call void @remove_note(%struct.rtx_def* %97, %struct.rtx_def* %98), !dbg !6000
  br label %if.end153, !dbg !6001

if.end153:                                        ; preds = %if.then152, %land.lhs.true141, %land.lhs.true139, %if.else137
  br label %if.end154

if.end154:                                        ; preds = %if.end153, %if.then136
  br label %if.end155

if.end155:                                        ; preds = %if.end154, %if.then132
  %99 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6002
  store %struct.rtx_def* %99, %struct.rtx_def** %afterlast1, align 8, !dbg !6003
  %100 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6004
  store %struct.rtx_def* %100, %struct.rtx_def** %afterlast2, align 8, !dbg !6005
  %101 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !6006
  store %struct.rtx_def* %101, %struct.rtx_def** %last1, align 8, !dbg !6007
  %102 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !6008
  store %struct.rtx_def* %102, %struct.rtx_def** %last2, align 8, !dbg !6009
  %103 = load i32, i32* %ninsns, align 4, !dbg !6010
  %inc156 = add nsw i32 %103, 1, !dbg !6010
  store i32 %inc156, i32* %ninsns, align 4, !dbg !6010
  br label %if.end157, !dbg !6011

if.end157:                                        ; preds = %if.end155, %lor.lhs.false122
  %104 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !6012
  %u158 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1, !dbg !6012
  %fld159 = bitcast %union.u* %u158 to [1 x %union.rtunion_def]*, !dbg !6012
  %arrayidx160 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld159, i64 0, i64 1, !dbg !6012
  %rt_rtx161 = bitcast %union.rtunion_def* %arrayidx160 to %struct.rtx_def**, !dbg !6012
  %105 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx161, align 8, !dbg !6012
  store %struct.rtx_def* %105, %struct.rtx_def** %i1, align 8, !dbg !6013
  %106 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !6014
  %u162 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !6014
  %fld163 = bitcast %union.u* %u162 to [1 x %union.rtunion_def]*, !dbg !6014
  %arrayidx164 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld163, i64 0, i64 1, !dbg !6014
  %rt_rtx165 = bitcast %union.rtunion_def* %arrayidx164 to %struct.rtx_def**, !dbg !6014
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx165, align 8, !dbg !6014
  store %struct.rtx_def* %107, %struct.rtx_def** %i2, align 8, !dbg !6015
  br label %while.body, !dbg !5916, !llvm.loop !6016

while.end166:                                     ; preds = %if.then109, %if.then105
  %108 = load i32, i32* %ninsns, align 4, !dbg !6018
  %tobool167 = icmp ne i32 %108, 0, !dbg !6018
  br i1 %tobool167, label %if.then168, label %if.end313, !dbg !6020

if.then168:                                       ; preds = %while.end166
  br label %while.cond, !dbg !6021

while.cond:                                       ; preds = %while.body216, %if.then168
  %109 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6023
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !6024
  %il169 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %110, i32 0, i32 7, !dbg !6024
  %rtl170 = bitcast %union.basic_block_il_dependent* %il169 to %struct.rtl_bb_info**, !dbg !6024
  %111 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl170, align 8, !dbg !6024
  %head_171 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %111, i32 0, i32 0, !dbg !6024
  %112 = load %struct.rtx_def*, %struct.rtx_def** %head_171, align 8, !dbg !6024
  %cmp172 = icmp ne %struct.rtx_def* %109, %112, !dbg !6025
  br i1 %cmp172, label %land.rhs173, label %land.end215, !dbg !6026

land.rhs173:                                      ; preds = %while.cond
  %113 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6027
  %u174 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1, !dbg !6027
  %fld175 = bitcast %union.u* %u174 to [1 x %union.rtunion_def]*, !dbg !6027
  %arrayidx176 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld175, i64 0, i64 1, !dbg !6027
  %rt_rtx177 = bitcast %union.rtunion_def* %arrayidx176 to %struct.rtx_def**, !dbg !6027
  %114 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx177, align 8, !dbg !6027
  %115 = bitcast %struct.rtx_def* %114 to i32*, !dbg !6027
  %bf.load178 = load i32, i32* %115, align 8, !dbg !6027
  %bf.clear179 = and i32 %bf.load178, 65535, !dbg !6027
  %cmp180 = icmp eq i32 %bf.clear179, 8, !dbg !6027
  br i1 %cmp180, label %land.rhs205, label %lor.lhs.false181, !dbg !6027

lor.lhs.false181:                                 ; preds = %land.rhs173
  %116 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6027
  %u182 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1, !dbg !6027
  %fld183 = bitcast %union.u* %u182 to [1 x %union.rtunion_def]*, !dbg !6027
  %arrayidx184 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld183, i64 0, i64 1, !dbg !6027
  %rt_rtx185 = bitcast %union.rtunion_def* %arrayidx184 to %struct.rtx_def**, !dbg !6027
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx185, align 8, !dbg !6027
  %118 = bitcast %struct.rtx_def* %117 to i32*, !dbg !6027
  %bf.load186 = load i32, i32* %118, align 8, !dbg !6027
  %bf.clear187 = and i32 %bf.load186, 65535, !dbg !6027
  %cmp188 = icmp eq i32 %bf.clear187, 7, !dbg !6027
  br i1 %cmp188, label %land.rhs205, label %lor.lhs.false189, !dbg !6027

lor.lhs.false189:                                 ; preds = %lor.lhs.false181
  %119 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6027
  %u190 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1, !dbg !6027
  %fld191 = bitcast %union.u* %u190 to [1 x %union.rtunion_def]*, !dbg !6027
  %arrayidx192 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld191, i64 0, i64 1, !dbg !6027
  %rt_rtx193 = bitcast %union.rtunion_def* %arrayidx192 to %struct.rtx_def**, !dbg !6027
  %120 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx193, align 8, !dbg !6027
  %121 = bitcast %struct.rtx_def* %120 to i32*, !dbg !6027
  %bf.load194 = load i32, i32* %121, align 8, !dbg !6027
  %bf.clear195 = and i32 %bf.load194, 65535, !dbg !6027
  %cmp196 = icmp eq i32 %bf.clear195, 9, !dbg !6027
  br i1 %cmp196, label %land.rhs205, label %lor.lhs.false197, !dbg !6027

lor.lhs.false197:                                 ; preds = %lor.lhs.false189
  %122 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6027
  %u198 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %122, i32 0, i32 1, !dbg !6027
  %fld199 = bitcast %union.u* %u198 to [1 x %union.rtunion_def]*, !dbg !6027
  %arrayidx200 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld199, i64 0, i64 1, !dbg !6027
  %rt_rtx201 = bitcast %union.rtunion_def* %arrayidx200 to %struct.rtx_def**, !dbg !6027
  %123 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx201, align 8, !dbg !6027
  %124 = bitcast %struct.rtx_def* %123 to i32*, !dbg !6027
  %bf.load202 = load i32, i32* %124, align 8, !dbg !6027
  %bf.clear203 = and i32 %bf.load202, 65535, !dbg !6027
  %cmp204 = icmp eq i32 %bf.clear203, 10, !dbg !6027
  br i1 %cmp204, label %land.rhs205, label %land.end213, !dbg !6027

land.rhs205:                                      ; preds = %lor.lhs.false197, %lor.lhs.false189, %lor.lhs.false181, %land.rhs173
  %125 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6027
  %u206 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1, !dbg !6027
  %fld207 = bitcast %union.u* %u206 to [1 x %union.rtunion_def]*, !dbg !6027
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i64 0, i64 1, !dbg !6027
  %rt_rtx209 = bitcast %union.rtunion_def* %arrayidx208 to %struct.rtx_def**, !dbg !6027
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx209, align 8, !dbg !6027
  %127 = bitcast %struct.rtx_def* %126 to i32*, !dbg !6027
  %bf.load210 = load i32, i32* %127, align 8, !dbg !6027
  %bf.clear211 = and i32 %bf.load210, 65535, !dbg !6027
  %cmp212 = icmp eq i32 %bf.clear211, 7, !dbg !6027
  %lnot = xor i1 %cmp212, true, !dbg !6027
  br label %land.end213

land.end213:                                      ; preds = %land.rhs205, %lor.lhs.false197
  %128 = phi i1 [ false, %lor.lhs.false197 ], [ %lnot, %land.rhs205 ], !dbg !6028
  %lnot214 = xor i1 %128, true, !dbg !6029
  br label %land.end215

land.end215:                                      ; preds = %land.end213, %while.cond
  %129 = phi i1 [ false, %while.cond ], [ %lnot214, %land.end213 ], !dbg !6028
  br i1 %129, label %while.body216, label %while.end221, !dbg !6021

while.body216:                                    ; preds = %land.end215
  %130 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6030
  %u217 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %130, i32 0, i32 1, !dbg !6030
  %fld218 = bitcast %union.u* %u217 to [1 x %union.rtunion_def]*, !dbg !6030
  %arrayidx219 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld218, i64 0, i64 1, !dbg !6030
  %rt_rtx220 = bitcast %union.rtunion_def* %arrayidx219 to %struct.rtx_def**, !dbg !6030
  %131 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx220, align 8, !dbg !6030
  store %struct.rtx_def* %131, %struct.rtx_def** %last1, align 8, !dbg !6031
  br label %while.cond, !dbg !6021, !llvm.loop !6032

while.end221:                                     ; preds = %land.end215
  %132 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6033
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1.addr, align 8, !dbg !6035
  %il222 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %133, i32 0, i32 7, !dbg !6035
  %rtl223 = bitcast %union.basic_block_il_dependent* %il222 to %struct.rtl_bb_info**, !dbg !6035
  %134 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl223, align 8, !dbg !6035
  %head_224 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %134, i32 0, i32 0, !dbg !6035
  %135 = load %struct.rtx_def*, %struct.rtx_def** %head_224, align 8, !dbg !6035
  %cmp225 = icmp ne %struct.rtx_def* %132, %135, !dbg !6036
  br i1 %cmp225, label %land.lhs.true226, label %if.end239, !dbg !6037

land.lhs.true226:                                 ; preds = %while.end221
  %136 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6038
  %u227 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1, !dbg !6038
  %fld228 = bitcast %union.u* %u227 to [1 x %union.rtunion_def]*, !dbg !6038
  %arrayidx229 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld228, i64 0, i64 1, !dbg !6038
  %rt_rtx230 = bitcast %union.rtunion_def* %arrayidx229 to %struct.rtx_def**, !dbg !6038
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx230, align 8, !dbg !6038
  %138 = bitcast %struct.rtx_def* %137 to i32*, !dbg !6038
  %bf.load231 = load i32, i32* %138, align 8, !dbg !6038
  %bf.clear232 = and i32 %bf.load231, 65535, !dbg !6038
  %cmp233 = icmp eq i32 %bf.clear232, 12, !dbg !6038
  br i1 %cmp233, label %if.then234, label %if.end239, !dbg !6039

if.then234:                                       ; preds = %land.lhs.true226
  %139 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6040
  %u235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %139, i32 0, i32 1, !dbg !6040
  %fld236 = bitcast %union.u* %u235 to [1 x %union.rtunion_def]*, !dbg !6040
  %arrayidx237 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld236, i64 0, i64 1, !dbg !6040
  %rt_rtx238 = bitcast %union.rtunion_def* %arrayidx237 to %struct.rtx_def**, !dbg !6040
  %140 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx238, align 8, !dbg !6040
  store %struct.rtx_def* %140, %struct.rtx_def** %last1, align 8, !dbg !6041
  br label %if.end239, !dbg !6042

if.end239:                                        ; preds = %if.then234, %land.lhs.true226, %while.end221
  br label %while.cond240, !dbg !6043

while.cond240:                                    ; preds = %while.body289, %if.end239
  %141 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6044
  %142 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !6045
  %il241 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %142, i32 0, i32 7, !dbg !6045
  %rtl242 = bitcast %union.basic_block_il_dependent* %il241 to %struct.rtl_bb_info**, !dbg !6045
  %143 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl242, align 8, !dbg !6045
  %head_243 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %143, i32 0, i32 0, !dbg !6045
  %144 = load %struct.rtx_def*, %struct.rtx_def** %head_243, align 8, !dbg !6045
  %cmp244 = icmp ne %struct.rtx_def* %141, %144, !dbg !6046
  br i1 %cmp244, label %land.rhs245, label %land.end288, !dbg !6047

land.rhs245:                                      ; preds = %while.cond240
  %145 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6048
  %u246 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %145, i32 0, i32 1, !dbg !6048
  %fld247 = bitcast %union.u* %u246 to [1 x %union.rtunion_def]*, !dbg !6048
  %arrayidx248 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld247, i64 0, i64 1, !dbg !6048
  %rt_rtx249 = bitcast %union.rtunion_def* %arrayidx248 to %struct.rtx_def**, !dbg !6048
  %146 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx249, align 8, !dbg !6048
  %147 = bitcast %struct.rtx_def* %146 to i32*, !dbg !6048
  %bf.load250 = load i32, i32* %147, align 8, !dbg !6048
  %bf.clear251 = and i32 %bf.load250, 65535, !dbg !6048
  %cmp252 = icmp eq i32 %bf.clear251, 8, !dbg !6048
  br i1 %cmp252, label %land.rhs277, label %lor.lhs.false253, !dbg !6048

lor.lhs.false253:                                 ; preds = %land.rhs245
  %148 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6048
  %u254 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %148, i32 0, i32 1, !dbg !6048
  %fld255 = bitcast %union.u* %u254 to [1 x %union.rtunion_def]*, !dbg !6048
  %arrayidx256 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld255, i64 0, i64 1, !dbg !6048
  %rt_rtx257 = bitcast %union.rtunion_def* %arrayidx256 to %struct.rtx_def**, !dbg !6048
  %149 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx257, align 8, !dbg !6048
  %150 = bitcast %struct.rtx_def* %149 to i32*, !dbg !6048
  %bf.load258 = load i32, i32* %150, align 8, !dbg !6048
  %bf.clear259 = and i32 %bf.load258, 65535, !dbg !6048
  %cmp260 = icmp eq i32 %bf.clear259, 7, !dbg !6048
  br i1 %cmp260, label %land.rhs277, label %lor.lhs.false261, !dbg !6048

lor.lhs.false261:                                 ; preds = %lor.lhs.false253
  %151 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6048
  %u262 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1, !dbg !6048
  %fld263 = bitcast %union.u* %u262 to [1 x %union.rtunion_def]*, !dbg !6048
  %arrayidx264 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld263, i64 0, i64 1, !dbg !6048
  %rt_rtx265 = bitcast %union.rtunion_def* %arrayidx264 to %struct.rtx_def**, !dbg !6048
  %152 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx265, align 8, !dbg !6048
  %153 = bitcast %struct.rtx_def* %152 to i32*, !dbg !6048
  %bf.load266 = load i32, i32* %153, align 8, !dbg !6048
  %bf.clear267 = and i32 %bf.load266, 65535, !dbg !6048
  %cmp268 = icmp eq i32 %bf.clear267, 9, !dbg !6048
  br i1 %cmp268, label %land.rhs277, label %lor.lhs.false269, !dbg !6048

lor.lhs.false269:                                 ; preds = %lor.lhs.false261
  %154 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6048
  %u270 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1, !dbg !6048
  %fld271 = bitcast %union.u* %u270 to [1 x %union.rtunion_def]*, !dbg !6048
  %arrayidx272 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld271, i64 0, i64 1, !dbg !6048
  %rt_rtx273 = bitcast %union.rtunion_def* %arrayidx272 to %struct.rtx_def**, !dbg !6048
  %155 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx273, align 8, !dbg !6048
  %156 = bitcast %struct.rtx_def* %155 to i32*, !dbg !6048
  %bf.load274 = load i32, i32* %156, align 8, !dbg !6048
  %bf.clear275 = and i32 %bf.load274, 65535, !dbg !6048
  %cmp276 = icmp eq i32 %bf.clear275, 10, !dbg !6048
  br i1 %cmp276, label %land.rhs277, label %land.end286, !dbg !6048

land.rhs277:                                      ; preds = %lor.lhs.false269, %lor.lhs.false261, %lor.lhs.false253, %land.rhs245
  %157 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6048
  %u278 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %157, i32 0, i32 1, !dbg !6048
  %fld279 = bitcast %union.u* %u278 to [1 x %union.rtunion_def]*, !dbg !6048
  %arrayidx280 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld279, i64 0, i64 1, !dbg !6048
  %rt_rtx281 = bitcast %union.rtunion_def* %arrayidx280 to %struct.rtx_def**, !dbg !6048
  %158 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx281, align 8, !dbg !6048
  %159 = bitcast %struct.rtx_def* %158 to i32*, !dbg !6048
  %bf.load282 = load i32, i32* %159, align 8, !dbg !6048
  %bf.clear283 = and i32 %bf.load282, 65535, !dbg !6048
  %cmp284 = icmp eq i32 %bf.clear283, 7, !dbg !6048
  %lnot285 = xor i1 %cmp284, true, !dbg !6048
  br label %land.end286

land.end286:                                      ; preds = %land.rhs277, %lor.lhs.false269
  %160 = phi i1 [ false, %lor.lhs.false269 ], [ %lnot285, %land.rhs277 ], !dbg !6028
  %lnot287 = xor i1 %160, true, !dbg !6049
  br label %land.end288

land.end288:                                      ; preds = %land.end286, %while.cond240
  %161 = phi i1 [ false, %while.cond240 ], [ %lnot287, %land.end286 ], !dbg !6028
  br i1 %161, label %while.body289, label %while.end294, !dbg !6043

while.body289:                                    ; preds = %land.end288
  %162 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6050
  %u290 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %162, i32 0, i32 1, !dbg !6050
  %fld291 = bitcast %union.u* %u290 to [1 x %union.rtunion_def]*, !dbg !6050
  %arrayidx292 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld291, i64 0, i64 1, !dbg !6050
  %rt_rtx293 = bitcast %union.rtunion_def* %arrayidx292 to %struct.rtx_def**, !dbg !6050
  %163 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx293, align 8, !dbg !6050
  store %struct.rtx_def* %163, %struct.rtx_def** %last2, align 8, !dbg !6051
  br label %while.cond240, !dbg !6043, !llvm.loop !6052

while.end294:                                     ; preds = %land.end288
  %164 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6053
  %165 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2.addr, align 8, !dbg !6055
  %il295 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %165, i32 0, i32 7, !dbg !6055
  %rtl296 = bitcast %union.basic_block_il_dependent* %il295 to %struct.rtl_bb_info**, !dbg !6055
  %166 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl296, align 8, !dbg !6055
  %head_297 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %166, i32 0, i32 0, !dbg !6055
  %167 = load %struct.rtx_def*, %struct.rtx_def** %head_297, align 8, !dbg !6055
  %cmp298 = icmp ne %struct.rtx_def* %164, %167, !dbg !6056
  br i1 %cmp298, label %land.lhs.true299, label %if.end312, !dbg !6057

land.lhs.true299:                                 ; preds = %while.end294
  %168 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6058
  %u300 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1, !dbg !6058
  %fld301 = bitcast %union.u* %u300 to [1 x %union.rtunion_def]*, !dbg !6058
  %arrayidx302 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld301, i64 0, i64 1, !dbg !6058
  %rt_rtx303 = bitcast %union.rtunion_def* %arrayidx302 to %struct.rtx_def**, !dbg !6058
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx303, align 8, !dbg !6058
  %170 = bitcast %struct.rtx_def* %169 to i32*, !dbg !6058
  %bf.load304 = load i32, i32* %170, align 8, !dbg !6058
  %bf.clear305 = and i32 %bf.load304, 65535, !dbg !6058
  %cmp306 = icmp eq i32 %bf.clear305, 12, !dbg !6058
  br i1 %cmp306, label %if.then307, label %if.end312, !dbg !6059

if.then307:                                       ; preds = %land.lhs.true299
  %171 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6060
  %u308 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1, !dbg !6060
  %fld309 = bitcast %union.u* %u308 to [1 x %union.rtunion_def]*, !dbg !6060
  %arrayidx310 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld309, i64 0, i64 1, !dbg !6060
  %rt_rtx311 = bitcast %union.rtunion_def* %arrayidx310 to %struct.rtx_def**, !dbg !6060
  %172 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx311, align 8, !dbg !6060
  store %struct.rtx_def* %172, %struct.rtx_def** %last2, align 8, !dbg !6061
  br label %if.end312, !dbg !6062

if.end312:                                        ; preds = %if.then307, %land.lhs.true299, %while.end294
  %173 = load %struct.rtx_def*, %struct.rtx_def** %last1, align 8, !dbg !6063
  %174 = load %struct.rtx_def**, %struct.rtx_def*** %f1.addr, align 8, !dbg !6064
  store %struct.rtx_def* %173, %struct.rtx_def** %174, align 8, !dbg !6065
  %175 = load %struct.rtx_def*, %struct.rtx_def** %last2, align 8, !dbg !6066
  %176 = load %struct.rtx_def**, %struct.rtx_def*** %f2.addr, align 8, !dbg !6067
  store %struct.rtx_def* %175, %struct.rtx_def** %176, align 8, !dbg !6068
  br label %if.end313, !dbg !6069

if.end313:                                        ; preds = %if.end312, %while.end166
  %177 = load i32, i32* %ninsns, align 4, !dbg !6070
  ret i32 %177, !dbg !6071
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @block_has_preserve_label(%struct.basic_block_def* %bb) #0 !dbg !6072 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6073, metadata !DIExpression()), !dbg !6074
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6075
  %tobool = icmp ne %struct.basic_block_def* %0, null, !dbg !6075
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !6076

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6077
  %call = call %struct.rtx_def* @block_label(%struct.basic_block_def* %1), !dbg !6078
  %tobool1 = icmp ne %struct.rtx_def* %call, null, !dbg !6078
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !6079

land.rhs:                                         ; preds = %land.lhs.true
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6080
  %call2 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %2), !dbg !6080
  %3 = bitcast %struct.rtx_def* %call2 to i32*, !dbg !6080
  %bf.load = load i32, i32* %3, align 8, !dbg !6080
  %bf.lshr = lshr i32 %bf.load, 28, !dbg !6080
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6080
  %tobool3 = icmp ne i32 %bf.clear, 0, !dbg !6079
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %4 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !6081
  %land.ext = zext i1 %4 to i32, !dbg !6079
  %conv = trunc i32 %land.ext to i8, !dbg !6082
  ret i8 %conv, !dbg !6083
}

declare dso_local i32 @replace_label(%struct.rtx_def**, i8*) #2

declare dso_local %struct.edge_def* @split_block(%struct.basic_block_def*, i8*) #2

declare dso_local i32 @rtx_renumbered_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @swap_condition(i32) #2

declare dso_local zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def*) #2

; Function Attrs: nounwind readnone
declare dso_local i32 @abs(i32) #4

declare dso_local i32 @rtx_referenced_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @old_insns_match_p(i32 %mode, %struct.rtx_def* %i1, %struct.rtx_def* %i2) #0 !dbg !6084 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %i1.addr = alloca %struct.rtx_def*, align 8
  %i2.addr = alloca %struct.rtx_def*, align 8
  %p1 = alloca %struct.rtx_def*, align 8
  %p2 = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %i1_regset = alloca i64, align 8
  %i2_regset = alloca i64, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6087, metadata !DIExpression()), !dbg !6088
  store %struct.rtx_def* %i1, %struct.rtx_def** %i1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %i1.addr, metadata !6089, metadata !DIExpression()), !dbg !6090
  store %struct.rtx_def* %i2, %struct.rtx_def** %i2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %i2.addr, metadata !6091, metadata !DIExpression()), !dbg !6092
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %p1, metadata !6093, metadata !DIExpression()), !dbg !6094
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %p2, metadata !6095, metadata !DIExpression()), !dbg !6096
  %0 = load %struct.rtx_def*, %struct.rtx_def** %i1.addr, align 8, !dbg !6097
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6097
  %bf.load = load i32, i32* %1, align 8, !dbg !6097
  %bf.clear = and i32 %bf.load, 65535, !dbg !6097
  %2 = load %struct.rtx_def*, %struct.rtx_def** %i2.addr, align 8, !dbg !6099
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6099
  %bf.load1 = load i32, i32* %3, align 8, !dbg !6099
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !6099
  %cmp = icmp ne i32 %bf.clear, %bf.clear2, !dbg !6100
  br i1 %cmp, label %if.then, label %if.end, !dbg !6101

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6102
  br label %return, !dbg !6102

if.end:                                           ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %i1.addr, align 8, !dbg !6103
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6103
  %bf.load3 = load i32, i32* %5, align 8, !dbg !6103
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !6103
  %cmp5 = icmp eq i32 %bf.clear4, 13, !dbg !6103
  br i1 %cmp5, label %land.lhs.true, label %if.end18, !dbg !6103

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %i1.addr, align 8, !dbg !6103
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !6103
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6103
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6103
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !6103
  %7 = load i32, i32* %rt_int, align 8, !dbg !6103
  %cmp6 = icmp eq i32 %7, 10, !dbg !6103
  br i1 %cmp6, label %land.lhs.true7, label %if.end18, !dbg !6105

land.lhs.true7:                                   ; preds = %land.lhs.true
  %8 = load %struct.rtx_def*, %struct.rtx_def** %i2.addr, align 8, !dbg !6106
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6106
  %bf.load8 = load i32, i32* %9, align 8, !dbg !6106
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !6106
  %cmp10 = icmp eq i32 %bf.clear9, 13, !dbg !6106
  br i1 %cmp10, label %land.lhs.true11, label %if.end18, !dbg !6106

land.lhs.true11:                                  ; preds = %land.lhs.true7
  %10 = load %struct.rtx_def*, %struct.rtx_def** %i2.addr, align 8, !dbg !6106
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !6106
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !6106
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 5, !dbg !6106
  %rt_int15 = bitcast %union.rtunion_def* %arrayidx14 to i32*, !dbg !6106
  %11 = load i32, i32* %rt_int15, align 8, !dbg !6106
  %cmp16 = icmp eq i32 %11, 10, !dbg !6106
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !6107

if.then17:                                        ; preds = %land.lhs.true11
  store i8 1, i8* %retval, align 1, !dbg !6108
  br label %return, !dbg !6108

if.end18:                                         ; preds = %land.lhs.true11, %land.lhs.true7, %land.lhs.true, %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %i1.addr, align 8, !dbg !6109
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !6109
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !6109
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 5, !dbg !6109
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !6109
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6109
  store %struct.rtx_def* %13, %struct.rtx_def** %p1, align 8, !dbg !6110
  %14 = load %struct.rtx_def*, %struct.rtx_def** %i2.addr, align 8, !dbg !6111
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !6111
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !6111
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 5, !dbg !6111
  %rt_rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !6111
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx25, align 8, !dbg !6111
  store %struct.rtx_def* %15, %struct.rtx_def** %p2, align 8, !dbg !6112
  %16 = load %struct.rtx_def*, %struct.rtx_def** %p1, align 8, !dbg !6113
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !6113
  %bf.load26 = load i32, i32* %17, align 8, !dbg !6113
  %bf.clear27 = and i32 %bf.load26, 65535, !dbg !6113
  %18 = load %struct.rtx_def*, %struct.rtx_def** %p2, align 8, !dbg !6115
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !6115
  %bf.load28 = load i32, i32* %19, align 8, !dbg !6115
  %bf.clear29 = and i32 %bf.load28, 65535, !dbg !6115
  %cmp30 = icmp ne i32 %bf.clear27, %bf.clear29, !dbg !6116
  br i1 %cmp30, label %if.then31, label %if.end32, !dbg !6117

if.then31:                                        ; preds = %if.end18
  store i8 0, i8* %retval, align 1, !dbg !6118
  br label %return, !dbg !6118

if.end32:                                         ; preds = %if.end18
  %20 = load %struct.rtx_def*, %struct.rtx_def** %i1.addr, align 8, !dbg !6119
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !6119
  %bf.load33 = load i32, i32* %21, align 8, !dbg !6119
  %bf.clear34 = and i32 %bf.load33, 65535, !dbg !6119
  %cmp35 = icmp eq i32 %bf.clear34, 10, !dbg !6119
  br i1 %cmp35, label %land.lhs.true36, label %if.end52, !dbg !6121

land.lhs.true36:                                  ; preds = %if.end32
  %22 = load %struct.rtx_def*, %struct.rtx_def** %i1.addr, align 8, !dbg !6122
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !6122
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !6122
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 8, !dbg !6122
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !6122
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !6122
  %24 = load %struct.rtx_def*, %struct.rtx_def** %i2.addr, align 8, !dbg !6123
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !6123
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !6123
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 8, !dbg !6123
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !6123
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx44, align 8, !dbg !6123
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %23, %struct.rtx_def* %25), !dbg !6124
  %tobool = icmp ne i32 %call, 0, !dbg !6124
  br i1 %tobool, label %lor.lhs.false, label %if.then51, !dbg !6125

lor.lhs.false:                                    ; preds = %land.lhs.true36
  %26 = load %struct.rtx_def*, %struct.rtx_def** %i1.addr, align 8, !dbg !6126
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !6126
  %bf.load45 = load i32, i32* %27, align 8, !dbg !6126
  %bf.lshr = lshr i32 %bf.load45, 24, !dbg !6126
  %bf.clear46 = and i32 %bf.lshr, 1, !dbg !6126
  %28 = load %struct.rtx_def*, %struct.rtx_def** %i2.addr, align 8, !dbg !6127
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !6127
  %bf.load47 = load i32, i32* %29, align 8, !dbg !6127
  %bf.lshr48 = lshr i32 %bf.load47, 24, !dbg !6127
  %bf.clear49 = and i32 %bf.lshr48, 1, !dbg !6127
  %cmp50 = icmp ne i32 %bf.clear46, %bf.clear49, !dbg !6128
  br i1 %cmp50, label %if.then51, label %if.end52, !dbg !6129

if.then51:                                        ; preds = %lor.lhs.false, %land.lhs.true36
  store i8 0, i8* %retval, align 1, !dbg !6130
  br label %return, !dbg !6130

if.end52:                                         ; preds = %lor.lhs.false, %if.end32
  %30 = load i32, i32* %mode.addr, align 4, !dbg !6131
  %and = and i32 %30, 4, !dbg !6133
  %tobool53 = icmp ne i32 %and, 0, !dbg !6133
  br i1 %tobool53, label %land.lhs.true54, label %if.end145, !dbg !6134

land.lhs.true54:                                  ; preds = %if.end52
  %31 = load %struct.rtx_def*, %struct.rtx_def** %i1.addr, align 8, !dbg !6135
  %call55 = call i32 @stack_regs_mentioned(%struct.rtx_def* %31), !dbg !6136
  %tobool56 = icmp ne i32 %call55, 0, !dbg !6136
  br i1 %tobool56, label %if.then57, label %if.end145, !dbg !6137

if.then57:                                        ; preds = %land.lhs.true54
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !6138, metadata !DIExpression()), !dbg !6140
  call void @llvm.dbg.declare(metadata i64* %i1_regset, metadata !6141, metadata !DIExpression()), !dbg !6142
  call void @llvm.dbg.declare(metadata i64* %i2_regset, metadata !6143, metadata !DIExpression()), !dbg !6144
  store i64 0, i64* %i1_regset, align 8, !dbg !6145
  store i64 0, i64* %i2_regset, align 8, !dbg !6146
  %32 = load %struct.rtx_def*, %struct.rtx_def** %i1.addr, align 8, !dbg !6147
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !6147
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !6147
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 7, !dbg !6147
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !6147
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !6147
  store %struct.rtx_def* %33, %struct.rtx_def** %note, align 8, !dbg !6149
  br label %for.cond, !dbg !6150

for.cond:                                         ; preds = %for.inc, %if.then57
  %34 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6151
  %tobool62 = icmp ne %struct.rtx_def* %34, null, !dbg !6153
  br i1 %tobool62, label %for.body, label %for.end, !dbg !6153

for.body:                                         ; preds = %for.cond
  %35 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6154
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !6154
  %bf.load63 = load i32, i32* %36, align 8, !dbg !6154
  %bf.lshr64 = lshr i32 %bf.load63, 16, !dbg !6154
  %bf.clear65 = and i32 %bf.lshr64, 255, !dbg !6154
  %cmp66 = icmp eq i32 %bf.clear65, 1, !dbg !6156
  br i1 %cmp66, label %land.lhs.true67, label %if.end89, !dbg !6157

land.lhs.true67:                                  ; preds = %for.body
  %37 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6158
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !6158
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !6158
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 0, !dbg !6158
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !6158
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx71, align 8, !dbg !6158
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !6158
  %bf.load72 = load i32, i32* %39, align 8, !dbg !6158
  %bf.clear73 = and i32 %bf.load72, 65535, !dbg !6158
  %cmp74 = icmp eq i32 %bf.clear73, 37, !dbg !6158
  br i1 %cmp74, label %land.lhs.true75, label %if.end89, !dbg !6158

land.lhs.true75:                                  ; preds = %land.lhs.true67
  %40 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6158
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !6158
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !6158
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 0, !dbg !6158
  %rt_rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**, !dbg !6158
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx79, align 8, !dbg !6158
  %call80 = call i32 @rhs_regno(%struct.rtx_def* %41), !dbg !6158
  %conv = zext i32 %call80 to i64, !dbg !6158
  %sub = sub i64 %conv, 8, !dbg !6158
  %cmp81 = icmp ule i64 %sub, 7, !dbg !6158
  br i1 %cmp81, label %if.then83, label %if.end89, !dbg !6159

if.then83:                                        ; preds = %land.lhs.true75
  %42 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6160
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !6160
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !6160
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 0, !dbg !6160
  %rt_rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**, !dbg !6160
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx87, align 8, !dbg !6160
  %call88 = call i32 @rhs_regno(%struct.rtx_def* %43), !dbg !6160
  %sh_prom = zext i32 %call88 to i64, !dbg !6160
  %shl = shl i64 1, %sh_prom, !dbg !6160
  %44 = load i64, i64* %i1_regset, align 8, !dbg !6160
  %or = or i64 %44, %shl, !dbg !6160
  store i64 %or, i64* %i1_regset, align 8, !dbg !6160
  br label %if.end89, !dbg !6160

if.end89:                                         ; preds = %if.then83, %land.lhs.true75, %land.lhs.true67, %for.body
  br label %for.inc, !dbg !6158

for.inc:                                          ; preds = %if.end89
  %45 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6161
  %u90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !6161
  %fld91 = bitcast %union.u* %u90 to [1 x %union.rtunion_def]*, !dbg !6161
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i64 0, i64 1, !dbg !6161
  %rt_rtx93 = bitcast %union.rtunion_def* %arrayidx92 to %struct.rtx_def**, !dbg !6161
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx93, align 8, !dbg !6161
  store %struct.rtx_def* %46, %struct.rtx_def** %note, align 8, !dbg !6162
  br label %for.cond, !dbg !6163, !llvm.loop !6164

for.end:                                          ; preds = %for.cond
  %47 = load %struct.rtx_def*, %struct.rtx_def** %i2.addr, align 8, !dbg !6166
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !6166
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !6166
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 7, !dbg !6166
  %rt_rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**, !dbg !6166
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx97, align 8, !dbg !6166
  store %struct.rtx_def* %48, %struct.rtx_def** %note, align 8, !dbg !6168
  br label %for.cond98, !dbg !6169

for.cond98:                                       ; preds = %for.inc135, %for.end
  %49 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6170
  %tobool99 = icmp ne %struct.rtx_def* %49, null, !dbg !6172
  br i1 %tobool99, label %for.body100, label %for.end140, !dbg !6172

for.body100:                                      ; preds = %for.cond98
  %50 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6173
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !6173
  %bf.load101 = load i32, i32* %51, align 8, !dbg !6173
  %bf.lshr102 = lshr i32 %bf.load101, 16, !dbg !6173
  %bf.clear103 = and i32 %bf.lshr102, 255, !dbg !6173
  %cmp104 = icmp eq i32 %bf.clear103, 1, !dbg !6175
  br i1 %cmp104, label %land.lhs.true106, label %if.end134, !dbg !6176

land.lhs.true106:                                 ; preds = %for.body100
  %52 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6177
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !6177
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !6177
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 0, !dbg !6177
  %rt_rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**, !dbg !6177
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx110, align 8, !dbg !6177
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !6177
  %bf.load111 = load i32, i32* %54, align 8, !dbg !6177
  %bf.clear112 = and i32 %bf.load111, 65535, !dbg !6177
  %cmp113 = icmp eq i32 %bf.clear112, 37, !dbg !6177
  br i1 %cmp113, label %land.lhs.true115, label %if.end134, !dbg !6177

land.lhs.true115:                                 ; preds = %land.lhs.true106
  %55 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6177
  %u116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !6177
  %fld117 = bitcast %union.u* %u116 to [1 x %union.rtunion_def]*, !dbg !6177
  %arrayidx118 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld117, i64 0, i64 0, !dbg !6177
  %rt_rtx119 = bitcast %union.rtunion_def* %arrayidx118 to %struct.rtx_def**, !dbg !6177
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx119, align 8, !dbg !6177
  %call120 = call i32 @rhs_regno(%struct.rtx_def* %56), !dbg !6177
  %conv121 = zext i32 %call120 to i64, !dbg !6177
  %sub122 = sub i64 %conv121, 8, !dbg !6177
  %cmp123 = icmp ule i64 %sub122, 7, !dbg !6177
  br i1 %cmp123, label %if.then125, label %if.end134, !dbg !6178

if.then125:                                       ; preds = %land.lhs.true115
  %57 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6179
  %u126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !6179
  %fld127 = bitcast %union.u* %u126 to [1 x %union.rtunion_def]*, !dbg !6179
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i64 0, i64 0, !dbg !6179
  %rt_rtx129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**, !dbg !6179
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx129, align 8, !dbg !6179
  %call130 = call i32 @rhs_regno(%struct.rtx_def* %58), !dbg !6179
  %sh_prom131 = zext i32 %call130 to i64, !dbg !6179
  %shl132 = shl i64 1, %sh_prom131, !dbg !6179
  %59 = load i64, i64* %i2_regset, align 8, !dbg !6179
  %or133 = or i64 %59, %shl132, !dbg !6179
  store i64 %or133, i64* %i2_regset, align 8, !dbg !6179
  br label %if.end134, !dbg !6179

if.end134:                                        ; preds = %if.then125, %land.lhs.true115, %land.lhs.true106, %for.body100
  br label %for.inc135, !dbg !6177

for.inc135:                                       ; preds = %if.end134
  %60 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6180
  %u136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !6180
  %fld137 = bitcast %union.u* %u136 to [1 x %union.rtunion_def]*, !dbg !6180
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i64 0, i64 1, !dbg !6180
  %rt_rtx139 = bitcast %union.rtunion_def* %arrayidx138 to %struct.rtx_def**, !dbg !6180
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx139, align 8, !dbg !6180
  store %struct.rtx_def* %61, %struct.rtx_def** %note, align 8, !dbg !6181
  br label %for.cond98, !dbg !6182, !llvm.loop !6183

for.end140:                                       ; preds = %for.cond98
  %62 = load i64, i64* %i1_regset, align 8, !dbg !6185
  %63 = load i64, i64* %i2_regset, align 8, !dbg !6187
  %call141 = call zeroext i8 @hard_reg_set_equal_p(i64 %62, i64 %63), !dbg !6188
  %tobool142 = icmp ne i8 %call141, 0, !dbg !6188
  br i1 %tobool142, label %if.end144, label %if.then143, !dbg !6189

if.then143:                                       ; preds = %for.end140
  store i8 0, i8* %retval, align 1, !dbg !6190
  br label %return, !dbg !6190

if.end144:                                        ; preds = %for.end140
  br label %if.end145, !dbg !6191

if.end145:                                        ; preds = %if.end144, %land.lhs.true54, %if.end52
  %64 = load i32, i32* @reload_completed, align 4, !dbg !6192
  %tobool146 = icmp ne i32 %64, 0, !dbg !6192
  br i1 %tobool146, label %cond.true, label %cond.false, !dbg !6194

cond.true:                                        ; preds = %if.end145
  %65 = load %struct.rtx_def*, %struct.rtx_def** %p1, align 8, !dbg !6195
  %66 = load %struct.rtx_def*, %struct.rtx_def** %p2, align 8, !dbg !6196
  %call147 = call i32 @rtx_renumbered_equal_p(%struct.rtx_def* %65, %struct.rtx_def* %66), !dbg !6197
  %tobool148 = icmp ne i32 %call147, 0, !dbg !6197
  br i1 %tobool148, label %if.then151, label %if.end152, !dbg !6192

cond.false:                                       ; preds = %if.end145
  %67 = load %struct.rtx_def*, %struct.rtx_def** %p1, align 8, !dbg !6198
  %68 = load %struct.rtx_def*, %struct.rtx_def** %p2, align 8, !dbg !6199
  %call149 = call i32 @rtx_equal_p(%struct.rtx_def* %67, %struct.rtx_def* %68), !dbg !6200
  %tobool150 = icmp ne i32 %call149, 0, !dbg !6200
  br i1 %tobool150, label %if.then151, label %if.end152, !dbg !6194

if.then151:                                       ; preds = %cond.false, %cond.true
  store i8 1, i8* %retval, align 1, !dbg !6201
  br label %return, !dbg !6201

if.end152:                                        ; preds = %cond.false, %cond.true
  store i8 0, i8* %retval, align 1, !dbg !6202
  br label %return, !dbg !6202

return:                                           ; preds = %if.end152, %if.then151, %if.then143, %if.then51, %if.then31, %if.then17, %if.then
  %69 = load i8, i8* %retval, align 1, !dbg !6203
  ret i8 %69, !dbg !6203
}

declare dso_local i32 @stack_regs_mentioned(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @hard_reg_set_equal_p(i64 %x, i64 %y) #0 !dbg !6204 {
entry:
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !6208, metadata !DIExpression()), !dbg !6209
  store i64 %y, i64* %y.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %y.addr, metadata !6210, metadata !DIExpression()), !dbg !6211
  %0 = load i64, i64* %x.addr, align 8, !dbg !6212
  %1 = load i64, i64* %y.addr, align 8, !dbg !6213
  %cmp = icmp eq i64 %0, %1, !dbg !6214
  %conv = zext i1 %cmp to i32, !dbg !6214
  %conv1 = trunc i32 %conv to i8, !dbg !6212
  ret i8 %conv1, !dbg !6215
}

declare dso_local i32 @returnjump_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @merge_memattrs(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 !dbg !6216 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %code = alloca i32, align 4
  %fmt = alloca i8*, align 8
  %mem_size = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6219, metadata !DIExpression()), !dbg !6220
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !6221, metadata !DIExpression()), !dbg !6222
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6223, metadata !DIExpression()), !dbg !6224
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6225, metadata !DIExpression()), !dbg !6226
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6227, metadata !DIExpression()), !dbg !6228
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !6229, metadata !DIExpression()), !dbg !6230
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6231
  %1 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6233
  %cmp = icmp eq %struct.rtx_def* %0, %1, !dbg !6234
  br i1 %cmp, label %if.then, label %if.end, !dbg !6235

if.then:                                          ; preds = %entry
  br label %return, !dbg !6236

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6237
  %cmp1 = icmp eq %struct.rtx_def* %2, null, !dbg !6239
  br i1 %cmp1, label %if.then3, label %lor.lhs.false, !dbg !6240

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6241
  %cmp2 = icmp eq %struct.rtx_def* %3, null, !dbg !6242
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !6243

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  br label %return, !dbg !6244

if.end4:                                          ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6245
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6245
  %bf.load = load i32, i32* %5, align 8, !dbg !6245
  %bf.clear = and i32 %bf.load, 65535, !dbg !6245
  store i32 %bf.clear, i32* %code, align 4, !dbg !6246
  %6 = load i32, i32* %code, align 4, !dbg !6247
  %7 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6249
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !6249
  %bf.load5 = load i32, i32* %8, align 8, !dbg !6249
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !6249
  %cmp7 = icmp ne i32 %6, %bf.clear6, !dbg !6250
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !6251

if.then8:                                         ; preds = %if.end4
  br label %return, !dbg !6252

if.end9:                                          ; preds = %if.end4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6253
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !6253
  %bf.load10 = load i32, i32* %10, align 8, !dbg !6253
  %bf.lshr = lshr i32 %bf.load10, 16, !dbg !6253
  %bf.clear11 = and i32 %bf.lshr, 255, !dbg !6253
  %11 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6255
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6255
  %bf.load12 = load i32, i32* %12, align 8, !dbg !6255
  %bf.lshr13 = lshr i32 %bf.load12, 16, !dbg !6255
  %bf.clear14 = and i32 %bf.lshr13, 255, !dbg !6255
  %cmp15 = icmp ne i32 %bf.clear11, %bf.clear14, !dbg !6256
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !6257

if.then16:                                        ; preds = %if.end9
  br label %return, !dbg !6258

if.end17:                                         ; preds = %if.end9
  %13 = load i32, i32* %code, align 4, !dbg !6259
  %cmp18 = icmp eq i32 %13, 43, !dbg !6261
  br i1 %cmp18, label %land.lhs.true, label %if.end421, !dbg !6262

land.lhs.true:                                    ; preds = %if.end17
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6263
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !6263
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6263
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6263
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !6263
  %15 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !6263
  %16 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6264
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6264
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !6264
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 1, !dbg !6264
  %rt_mem22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.mem_attrs**, !dbg !6264
  %17 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem22, align 8, !dbg !6264
  %cmp23 = icmp ne %struct.mem_attrs* %15, %17, !dbg !6265
  br i1 %cmp23, label %if.then24, label %if.end421, !dbg !6266

if.then24:                                        ; preds = %land.lhs.true
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6267
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !6267
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !6267
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 1, !dbg !6267
  %rt_mem28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.mem_attrs**, !dbg !6267
  %19 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem28, align 8, !dbg !6267
  %tobool = icmp ne %struct.mem_attrs* %19, null, !dbg !6267
  br i1 %tobool, label %if.else, label %if.then29, !dbg !6270

if.then29:                                        ; preds = %if.then24
  %20 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6271
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !6271
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !6271
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 1, !dbg !6271
  %rt_mem33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.mem_attrs**, !dbg !6271
  store %struct.mem_attrs* null, %struct.mem_attrs** %rt_mem33, align 8, !dbg !6272
  br label %if.end420, !dbg !6271

if.else:                                          ; preds = %if.then24
  %21 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6273
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !6273
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !6273
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 1, !dbg !6273
  %rt_mem37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.mem_attrs**, !dbg !6273
  %22 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem37, align 8, !dbg !6273
  %tobool38 = icmp ne %struct.mem_attrs* %22, null, !dbg !6273
  br i1 %tobool38, label %if.else44, label %if.then39, !dbg !6275

if.then39:                                        ; preds = %if.else
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6276
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !6276
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !6276
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 1, !dbg !6276
  %rt_mem43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.mem_attrs**, !dbg !6276
  store %struct.mem_attrs* null, %struct.mem_attrs** %rt_mem43, align 8, !dbg !6277
  br label %if.end419, !dbg !6276

if.else44:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem_size, metadata !6278, metadata !DIExpression()), !dbg !6280
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6281
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !6281
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !6281
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 1, !dbg !6281
  %rt_mem48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.mem_attrs**, !dbg !6281
  %25 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem48, align 8, !dbg !6281
  %cmp49 = icmp eq %struct.mem_attrs* %25, null, !dbg !6281
  br i1 %cmp49, label %cond.true, label %cond.false, !dbg !6281

cond.true:                                        ; preds = %if.else44
  br label %cond.end, !dbg !6281

cond.false:                                       ; preds = %if.else44
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6281
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !6281
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !6281
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 1, !dbg !6281
  %rt_mem53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.mem_attrs**, !dbg !6281
  %27 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem53, align 8, !dbg !6281
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %27, i32 0, i32 3, !dbg !6281
  %28 = load i32, i32* %alias, align 8, !dbg !6281
  br label %cond.end, !dbg !6281

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %28, %cond.false ], !dbg !6281
  %29 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6283
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !6283
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !6283
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 1, !dbg !6283
  %rt_mem57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.mem_attrs**, !dbg !6283
  %30 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem57, align 8, !dbg !6283
  %cmp58 = icmp eq %struct.mem_attrs* %30, null, !dbg !6283
  br i1 %cmp58, label %cond.true59, label %cond.false60, !dbg !6283

cond.true59:                                      ; preds = %cond.end
  br label %cond.end66, !dbg !6283

cond.false60:                                     ; preds = %cond.end
  %31 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6283
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !6283
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !6283
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 1, !dbg !6283
  %rt_mem64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.mem_attrs**, !dbg !6283
  %32 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem64, align 8, !dbg !6283
  %alias65 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %32, i32 0, i32 3, !dbg !6283
  %33 = load i32, i32* %alias65, align 8, !dbg !6283
  br label %cond.end66, !dbg !6283

cond.end66:                                       ; preds = %cond.false60, %cond.true59
  %cond67 = phi i32 [ 0, %cond.true59 ], [ %33, %cond.false60 ], !dbg !6283
  %cmp68 = icmp ne i32 %cond, %cond67, !dbg !6284
  br i1 %cmp68, label %if.then69, label %if.end70, !dbg !6285

if.then69:                                        ; preds = %cond.end66
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6286
  call void @set_mem_alias_set(%struct.rtx_def* %34, i32 0), !dbg !6288
  %35 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6289
  call void @set_mem_alias_set(%struct.rtx_def* %35, i32 0), !dbg !6290
  br label %if.end70, !dbg !6291

if.end70:                                         ; preds = %if.then69, %cond.end66
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6292
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !6292
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !6292
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 1, !dbg !6292
  %rt_mem74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.mem_attrs**, !dbg !6292
  %37 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem74, align 8, !dbg !6292
  %cmp75 = icmp eq %struct.mem_attrs* %37, null, !dbg !6292
  br i1 %cmp75, label %cond.true76, label %cond.false77, !dbg !6292

cond.true76:                                      ; preds = %if.end70
  br label %cond.end82, !dbg !6292

cond.false77:                                     ; preds = %if.end70
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6292
  %u78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !6292
  %fld79 = bitcast %union.u* %u78 to [1 x %union.rtunion_def]*, !dbg !6292
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i64 0, i64 1, !dbg !6292
  %rt_mem81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.mem_attrs**, !dbg !6292
  %39 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem81, align 8, !dbg !6292
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %39, i32 0, i32 0, !dbg !6292
  %40 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6292
  br label %cond.end82, !dbg !6292

cond.end82:                                       ; preds = %cond.false77, %cond.true76
  %cond83 = phi %union.tree_node* [ null, %cond.true76 ], [ %40, %cond.false77 ], !dbg !6292
  %41 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6294
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !6294
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !6294
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 1, !dbg !6294
  %rt_mem87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.mem_attrs**, !dbg !6294
  %42 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem87, align 8, !dbg !6294
  %cmp88 = icmp eq %struct.mem_attrs* %42, null, !dbg !6294
  br i1 %cmp88, label %cond.true89, label %cond.false90, !dbg !6294

cond.true89:                                      ; preds = %cond.end82
  br label %cond.end96, !dbg !6294

cond.false90:                                     ; preds = %cond.end82
  %43 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6294
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !6294
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !6294
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 1, !dbg !6294
  %rt_mem94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.mem_attrs**, !dbg !6294
  %44 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem94, align 8, !dbg !6294
  %expr95 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %44, i32 0, i32 0, !dbg !6294
  %45 = load %union.tree_node*, %union.tree_node** %expr95, align 8, !dbg !6294
  br label %cond.end96, !dbg !6294

cond.end96:                                       ; preds = %cond.false90, %cond.true89
  %cond97 = phi %union.tree_node* [ null, %cond.true89 ], [ %45, %cond.false90 ], !dbg !6294
  %call = call i32 @mem_expr_equal_p(%union.tree_node* %cond83, %union.tree_node* %cond97), !dbg !6295
  %tobool98 = icmp ne i32 %call, 0, !dbg !6295
  br i1 %tobool98, label %if.else100, label %if.then99, !dbg !6296

if.then99:                                        ; preds = %cond.end96
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6297
  call void @set_mem_expr(%struct.rtx_def* %46, %union.tree_node* null), !dbg !6299
  %47 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6300
  call void @set_mem_expr(%struct.rtx_def* %47, %union.tree_node* null), !dbg !6301
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6302
  call void @set_mem_offset(%struct.rtx_def* %48, %struct.rtx_def* null), !dbg !6303
  %49 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6304
  call void @set_mem_offset(%struct.rtx_def* %49, %struct.rtx_def* null), !dbg !6305
  br label %if.end131, !dbg !6306

if.else100:                                       ; preds = %cond.end96
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6307
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !6307
  %fld102 = bitcast %union.u* %u101 to [1 x %union.rtunion_def]*, !dbg !6307
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i64 0, i64 1, !dbg !6307
  %rt_mem104 = bitcast %union.rtunion_def* %arrayidx103 to %struct.mem_attrs**, !dbg !6307
  %51 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem104, align 8, !dbg !6307
  %cmp105 = icmp eq %struct.mem_attrs* %51, null, !dbg !6307
  br i1 %cmp105, label %cond.true106, label %cond.false107, !dbg !6307

cond.true106:                                     ; preds = %if.else100
  br label %cond.end112, !dbg !6307

cond.false107:                                    ; preds = %if.else100
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6307
  %u108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !6307
  %fld109 = bitcast %union.u* %u108 to [1 x %union.rtunion_def]*, !dbg !6307
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i64 0, i64 1, !dbg !6307
  %rt_mem111 = bitcast %union.rtunion_def* %arrayidx110 to %struct.mem_attrs**, !dbg !6307
  %53 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem111, align 8, !dbg !6307
  %offset = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %53, i32 0, i32 1, !dbg !6307
  %54 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !6307
  br label %cond.end112, !dbg !6307

cond.end112:                                      ; preds = %cond.false107, %cond.true106
  %cond113 = phi %struct.rtx_def* [ null, %cond.true106 ], [ %54, %cond.false107 ], !dbg !6307
  %55 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6309
  %u114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !6309
  %fld115 = bitcast %union.u* %u114 to [1 x %union.rtunion_def]*, !dbg !6309
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld115, i64 0, i64 1, !dbg !6309
  %rt_mem117 = bitcast %union.rtunion_def* %arrayidx116 to %struct.mem_attrs**, !dbg !6309
  %56 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem117, align 8, !dbg !6309
  %cmp118 = icmp eq %struct.mem_attrs* %56, null, !dbg !6309
  br i1 %cmp118, label %cond.true119, label %cond.false120, !dbg !6309

cond.true119:                                     ; preds = %cond.end112
  br label %cond.end126, !dbg !6309

cond.false120:                                    ; preds = %cond.end112
  %57 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6309
  %u121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !6309
  %fld122 = bitcast %union.u* %u121 to [1 x %union.rtunion_def]*, !dbg !6309
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i64 0, i64 1, !dbg !6309
  %rt_mem124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.mem_attrs**, !dbg !6309
  %58 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem124, align 8, !dbg !6309
  %offset125 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %58, i32 0, i32 1, !dbg !6309
  %59 = load %struct.rtx_def*, %struct.rtx_def** %offset125, align 8, !dbg !6309
  br label %cond.end126, !dbg !6309

cond.end126:                                      ; preds = %cond.false120, %cond.true119
  %cond127 = phi %struct.rtx_def* [ null, %cond.true119 ], [ %59, %cond.false120 ], !dbg !6309
  %cmp128 = icmp ne %struct.rtx_def* %cond113, %cond127, !dbg !6310
  br i1 %cmp128, label %if.then129, label %if.end130, !dbg !6311

if.then129:                                       ; preds = %cond.end126
  %60 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6312
  call void @set_mem_offset(%struct.rtx_def* %60, %struct.rtx_def* null), !dbg !6314
  %61 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6315
  call void @set_mem_offset(%struct.rtx_def* %61, %struct.rtx_def* null), !dbg !6316
  br label %if.end130, !dbg !6317

if.end130:                                        ; preds = %if.then129, %cond.end126
  br label %if.end131

if.end131:                                        ; preds = %if.end130, %if.then99
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6318
  %u132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !6318
  %fld133 = bitcast %union.u* %u132 to [1 x %union.rtunion_def]*, !dbg !6318
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i64 0, i64 1, !dbg !6318
  %rt_mem135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.mem_attrs**, !dbg !6318
  %63 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem135, align 8, !dbg !6318
  %cmp136 = icmp ne %struct.mem_attrs* %63, null, !dbg !6318
  br i1 %cmp136, label %cond.true137, label %cond.false143, !dbg !6320

cond.true137:                                     ; preds = %if.end131
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6318
  %u138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !6318
  %fld139 = bitcast %union.u* %u138 to [1 x %union.rtunion_def]*, !dbg !6318
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i64 0, i64 1, !dbg !6318
  %rt_mem141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.mem_attrs**, !dbg !6318
  %65 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem141, align 8, !dbg !6318
  %size = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %65, i32 0, i32 2, !dbg !6318
  %66 = load %struct.rtx_def*, %struct.rtx_def** %size, align 8, !dbg !6318
  %tobool142 = icmp ne %struct.rtx_def* %66, null, !dbg !6318
  br i1 %tobool142, label %if.else158, label %if.then157, !dbg !6318

cond.false143:                                    ; preds = %if.end131
  %67 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6318
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !6318
  %bf.load144 = load i32, i32* %68, align 8, !dbg !6318
  %bf.lshr145 = lshr i32 %bf.load144, 16, !dbg !6318
  %bf.clear146 = and i32 %bf.lshr145, 255, !dbg !6318
  %cmp147 = icmp ne i32 %bf.clear146, 1, !dbg !6318
  br i1 %cmp147, label %cond.true148, label %cond.false156, !dbg !6320

cond.true148:                                     ; preds = %cond.false143
  %69 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6318
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !6318
  %bf.load149 = load i32, i32* %70, align 8, !dbg !6318
  %bf.lshr150 = lshr i32 %bf.load149, 16, !dbg !6318
  %bf.clear151 = and i32 %bf.lshr150, 255, !dbg !6318
  %idxprom = zext i32 %bf.clear151 to i64, !dbg !6318
  %arrayidx152 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !6318
  %71 = load i8, i8* %arrayidx152, align 1, !dbg !6318
  %conv = zext i8 %71 to i16, !dbg !6318
  %conv153 = zext i16 %conv to i64, !dbg !6318
  %call154 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv153), !dbg !6318
  %tobool155 = icmp ne %struct.rtx_def* %call154, null, !dbg !6318
  br i1 %tobool155, label %if.else158, label %if.then157, !dbg !6318

cond.false156:                                    ; preds = %cond.false143
  br i1 false, label %if.else158, label %if.then157, !dbg !6320

if.then157:                                       ; preds = %cond.false156, %cond.true148, %cond.true137
  store %struct.rtx_def* null, %struct.rtx_def** %mem_size, align 8, !dbg !6321
  br label %if.end338, !dbg !6322

if.else158:                                       ; preds = %cond.false156, %cond.true148, %cond.true137
  %72 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6323
  %u159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !6323
  %fld160 = bitcast %union.u* %u159 to [1 x %union.rtunion_def]*, !dbg !6323
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i64 0, i64 1, !dbg !6323
  %rt_mem162 = bitcast %union.rtunion_def* %arrayidx161 to %struct.mem_attrs**, !dbg !6323
  %73 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem162, align 8, !dbg !6323
  %cmp163 = icmp ne %struct.mem_attrs* %73, null, !dbg !6323
  br i1 %cmp163, label %cond.true165, label %cond.false172, !dbg !6325

cond.true165:                                     ; preds = %if.else158
  %74 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6323
  %u166 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !6323
  %fld167 = bitcast %union.u* %u166 to [1 x %union.rtunion_def]*, !dbg !6323
  %arrayidx168 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld167, i64 0, i64 1, !dbg !6323
  %rt_mem169 = bitcast %union.rtunion_def* %arrayidx168 to %struct.mem_attrs**, !dbg !6323
  %75 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem169, align 8, !dbg !6323
  %size170 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %75, i32 0, i32 2, !dbg !6323
  %76 = load %struct.rtx_def*, %struct.rtx_def** %size170, align 8, !dbg !6323
  %tobool171 = icmp ne %struct.rtx_def* %76, null, !dbg !6323
  br i1 %tobool171, label %if.else190, label %if.then189, !dbg !6323

cond.false172:                                    ; preds = %if.else158
  %77 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6323
  %78 = bitcast %struct.rtx_def* %77 to i32*, !dbg !6323
  %bf.load173 = load i32, i32* %78, align 8, !dbg !6323
  %bf.lshr174 = lshr i32 %bf.load173, 16, !dbg !6323
  %bf.clear175 = and i32 %bf.lshr174, 255, !dbg !6323
  %cmp176 = icmp ne i32 %bf.clear175, 1, !dbg !6323
  br i1 %cmp176, label %cond.true178, label %cond.false188, !dbg !6325

cond.true178:                                     ; preds = %cond.false172
  %79 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6323
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !6323
  %bf.load179 = load i32, i32* %80, align 8, !dbg !6323
  %bf.lshr180 = lshr i32 %bf.load179, 16, !dbg !6323
  %bf.clear181 = and i32 %bf.lshr180, 255, !dbg !6323
  %idxprom182 = zext i32 %bf.clear181 to i64, !dbg !6323
  %arrayidx183 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom182, !dbg !6323
  %81 = load i8, i8* %arrayidx183, align 1, !dbg !6323
  %conv184 = zext i8 %81 to i16, !dbg !6323
  %conv185 = zext i16 %conv184 to i64, !dbg !6323
  %call186 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv185), !dbg !6323
  %tobool187 = icmp ne %struct.rtx_def* %call186, null, !dbg !6323
  br i1 %tobool187, label %if.else190, label %if.then189, !dbg !6323

cond.false188:                                    ; preds = %cond.false172
  br i1 false, label %if.else190, label %if.then189, !dbg !6325

if.then189:                                       ; preds = %cond.false188, %cond.true178, %cond.true165
  store %struct.rtx_def* null, %struct.rtx_def** %mem_size, align 8, !dbg !6326
  br label %if.end337, !dbg !6327

if.else190:                                       ; preds = %cond.false188, %cond.true178, %cond.true165
  %82 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6328
  %u191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1, !dbg !6328
  %fld192 = bitcast %union.u* %u191 to [1 x %union.rtunion_def]*, !dbg !6328
  %arrayidx193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld192, i64 0, i64 1, !dbg !6328
  %rt_mem194 = bitcast %union.rtunion_def* %arrayidx193 to %struct.mem_attrs**, !dbg !6328
  %83 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem194, align 8, !dbg !6328
  %cmp195 = icmp ne %struct.mem_attrs* %83, null, !dbg !6328
  br i1 %cmp195, label %cond.true197, label %cond.false203, !dbg !6328

cond.true197:                                     ; preds = %if.else190
  %84 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6328
  %u198 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !6328
  %fld199 = bitcast %union.u* %u198 to [1 x %union.rtunion_def]*, !dbg !6328
  %arrayidx200 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld199, i64 0, i64 1, !dbg !6328
  %rt_mem201 = bitcast %union.rtunion_def* %arrayidx200 to %struct.mem_attrs**, !dbg !6328
  %85 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem201, align 8, !dbg !6328
  %size202 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %85, i32 0, i32 2, !dbg !6328
  %86 = load %struct.rtx_def*, %struct.rtx_def** %size202, align 8, !dbg !6328
  br label %cond.end221, !dbg !6328

cond.false203:                                    ; preds = %if.else190
  %87 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6328
  %88 = bitcast %struct.rtx_def* %87 to i32*, !dbg !6328
  %bf.load204 = load i32, i32* %88, align 8, !dbg !6328
  %bf.lshr205 = lshr i32 %bf.load204, 16, !dbg !6328
  %bf.clear206 = and i32 %bf.lshr205, 255, !dbg !6328
  %cmp207 = icmp ne i32 %bf.clear206, 1, !dbg !6328
  br i1 %cmp207, label %cond.true209, label %cond.false218, !dbg !6328

cond.true209:                                     ; preds = %cond.false203
  %89 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6328
  %90 = bitcast %struct.rtx_def* %89 to i32*, !dbg !6328
  %bf.load210 = load i32, i32* %90, align 8, !dbg !6328
  %bf.lshr211 = lshr i32 %bf.load210, 16, !dbg !6328
  %bf.clear212 = and i32 %bf.lshr211, 255, !dbg !6328
  %idxprom213 = zext i32 %bf.clear212 to i64, !dbg !6328
  %arrayidx214 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom213, !dbg !6328
  %91 = load i8, i8* %arrayidx214, align 1, !dbg !6328
  %conv215 = zext i8 %91 to i16, !dbg !6328
  %conv216 = zext i16 %conv215 to i64, !dbg !6328
  %call217 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv216), !dbg !6328
  br label %cond.end219, !dbg !6328

cond.false218:                                    ; preds = %cond.false203
  br label %cond.end219, !dbg !6328

cond.end219:                                      ; preds = %cond.false218, %cond.true209
  %cond220 = phi %struct.rtx_def* [ %call217, %cond.true209 ], [ null, %cond.false218 ], !dbg !6328
  br label %cond.end221, !dbg !6328

cond.end221:                                      ; preds = %cond.end219, %cond.true197
  %cond222 = phi %struct.rtx_def* [ %86, %cond.true197 ], [ %cond220, %cond.end219 ], !dbg !6328
  %u223 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond222, i32 0, i32 1, !dbg !6328
  %hwint = bitcast %union.u* %u223 to [1 x i64]*, !dbg !6328
  %arrayidx224 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !6328
  %92 = load i64, i64* %arrayidx224, align 8, !dbg !6328
  %93 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6328
  %u225 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1, !dbg !6328
  %fld226 = bitcast %union.u* %u225 to [1 x %union.rtunion_def]*, !dbg !6328
  %arrayidx227 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld226, i64 0, i64 1, !dbg !6328
  %rt_mem228 = bitcast %union.rtunion_def* %arrayidx227 to %struct.mem_attrs**, !dbg !6328
  %94 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem228, align 8, !dbg !6328
  %cmp229 = icmp ne %struct.mem_attrs* %94, null, !dbg !6328
  br i1 %cmp229, label %cond.true231, label %cond.false237, !dbg !6328

cond.true231:                                     ; preds = %cond.end221
  %95 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6328
  %u232 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %95, i32 0, i32 1, !dbg !6328
  %fld233 = bitcast %union.u* %u232 to [1 x %union.rtunion_def]*, !dbg !6328
  %arrayidx234 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld233, i64 0, i64 1, !dbg !6328
  %rt_mem235 = bitcast %union.rtunion_def* %arrayidx234 to %struct.mem_attrs**, !dbg !6328
  %96 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem235, align 8, !dbg !6328
  %size236 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %96, i32 0, i32 2, !dbg !6328
  %97 = load %struct.rtx_def*, %struct.rtx_def** %size236, align 8, !dbg !6328
  br label %cond.end255, !dbg !6328

cond.false237:                                    ; preds = %cond.end221
  %98 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6328
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !6328
  %bf.load238 = load i32, i32* %99, align 8, !dbg !6328
  %bf.lshr239 = lshr i32 %bf.load238, 16, !dbg !6328
  %bf.clear240 = and i32 %bf.lshr239, 255, !dbg !6328
  %cmp241 = icmp ne i32 %bf.clear240, 1, !dbg !6328
  br i1 %cmp241, label %cond.true243, label %cond.false252, !dbg !6328

cond.true243:                                     ; preds = %cond.false237
  %100 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6328
  %101 = bitcast %struct.rtx_def* %100 to i32*, !dbg !6328
  %bf.load244 = load i32, i32* %101, align 8, !dbg !6328
  %bf.lshr245 = lshr i32 %bf.load244, 16, !dbg !6328
  %bf.clear246 = and i32 %bf.lshr245, 255, !dbg !6328
  %idxprom247 = zext i32 %bf.clear246 to i64, !dbg !6328
  %arrayidx248 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom247, !dbg !6328
  %102 = load i8, i8* %arrayidx248, align 1, !dbg !6328
  %conv249 = zext i8 %102 to i16, !dbg !6328
  %conv250 = zext i16 %conv249 to i64, !dbg !6328
  %call251 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv250), !dbg !6328
  br label %cond.end253, !dbg !6328

cond.false252:                                    ; preds = %cond.false237
  br label %cond.end253, !dbg !6328

cond.end253:                                      ; preds = %cond.false252, %cond.true243
  %cond254 = phi %struct.rtx_def* [ %call251, %cond.true243 ], [ null, %cond.false252 ], !dbg !6328
  br label %cond.end255, !dbg !6328

cond.end255:                                      ; preds = %cond.end253, %cond.true231
  %cond256 = phi %struct.rtx_def* [ %97, %cond.true231 ], [ %cond254, %cond.end253 ], !dbg !6328
  %u257 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond256, i32 0, i32 1, !dbg !6328
  %hwint258 = bitcast %union.u* %u257 to [1 x i64]*, !dbg !6328
  %arrayidx259 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint258, i64 0, i64 0, !dbg !6328
  %103 = load i64, i64* %arrayidx259, align 8, !dbg !6328
  %cmp260 = icmp sgt i64 %92, %103, !dbg !6328
  br i1 %cmp260, label %cond.true262, label %cond.false298, !dbg !6328

cond.true262:                                     ; preds = %cond.end255
  %104 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6328
  %u263 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1, !dbg !6328
  %fld264 = bitcast %union.u* %u263 to [1 x %union.rtunion_def]*, !dbg !6328
  %arrayidx265 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld264, i64 0, i64 1, !dbg !6328
  %rt_mem266 = bitcast %union.rtunion_def* %arrayidx265 to %struct.mem_attrs**, !dbg !6328
  %105 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem266, align 8, !dbg !6328
  %cmp267 = icmp ne %struct.mem_attrs* %105, null, !dbg !6328
  br i1 %cmp267, label %cond.true269, label %cond.false275, !dbg !6328

cond.true269:                                     ; preds = %cond.true262
  %106 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6328
  %u270 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !6328
  %fld271 = bitcast %union.u* %u270 to [1 x %union.rtunion_def]*, !dbg !6328
  %arrayidx272 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld271, i64 0, i64 1, !dbg !6328
  %rt_mem273 = bitcast %union.rtunion_def* %arrayidx272 to %struct.mem_attrs**, !dbg !6328
  %107 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem273, align 8, !dbg !6328
  %size274 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %107, i32 0, i32 2, !dbg !6328
  %108 = load %struct.rtx_def*, %struct.rtx_def** %size274, align 8, !dbg !6328
  br label %cond.end293, !dbg !6328

cond.false275:                                    ; preds = %cond.true262
  %109 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6328
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !6328
  %bf.load276 = load i32, i32* %110, align 8, !dbg !6328
  %bf.lshr277 = lshr i32 %bf.load276, 16, !dbg !6328
  %bf.clear278 = and i32 %bf.lshr277, 255, !dbg !6328
  %cmp279 = icmp ne i32 %bf.clear278, 1, !dbg !6328
  br i1 %cmp279, label %cond.true281, label %cond.false290, !dbg !6328

cond.true281:                                     ; preds = %cond.false275
  %111 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6328
  %112 = bitcast %struct.rtx_def* %111 to i32*, !dbg !6328
  %bf.load282 = load i32, i32* %112, align 8, !dbg !6328
  %bf.lshr283 = lshr i32 %bf.load282, 16, !dbg !6328
  %bf.clear284 = and i32 %bf.lshr283, 255, !dbg !6328
  %idxprom285 = zext i32 %bf.clear284 to i64, !dbg !6328
  %arrayidx286 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom285, !dbg !6328
  %113 = load i8, i8* %arrayidx286, align 1, !dbg !6328
  %conv287 = zext i8 %113 to i16, !dbg !6328
  %conv288 = zext i16 %conv287 to i64, !dbg !6328
  %call289 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv288), !dbg !6328
  br label %cond.end291, !dbg !6328

cond.false290:                                    ; preds = %cond.false275
  br label %cond.end291, !dbg !6328

cond.end291:                                      ; preds = %cond.false290, %cond.true281
  %cond292 = phi %struct.rtx_def* [ %call289, %cond.true281 ], [ null, %cond.false290 ], !dbg !6328
  br label %cond.end293, !dbg !6328

cond.end293:                                      ; preds = %cond.end291, %cond.true269
  %cond294 = phi %struct.rtx_def* [ %108, %cond.true269 ], [ %cond292, %cond.end291 ], !dbg !6328
  %u295 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond294, i32 0, i32 1, !dbg !6328
  %hwint296 = bitcast %union.u* %u295 to [1 x i64]*, !dbg !6328
  %arrayidx297 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint296, i64 0, i64 0, !dbg !6328
  %114 = load i64, i64* %arrayidx297, align 8, !dbg !6328
  br label %cond.end334, !dbg !6328

cond.false298:                                    ; preds = %cond.end255
  %115 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6328
  %u299 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1, !dbg !6328
  %fld300 = bitcast %union.u* %u299 to [1 x %union.rtunion_def]*, !dbg !6328
  %arrayidx301 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld300, i64 0, i64 1, !dbg !6328
  %rt_mem302 = bitcast %union.rtunion_def* %arrayidx301 to %struct.mem_attrs**, !dbg !6328
  %116 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem302, align 8, !dbg !6328
  %cmp303 = icmp ne %struct.mem_attrs* %116, null, !dbg !6328
  br i1 %cmp303, label %cond.true305, label %cond.false311, !dbg !6328

cond.true305:                                     ; preds = %cond.false298
  %117 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6328
  %u306 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %117, i32 0, i32 1, !dbg !6328
  %fld307 = bitcast %union.u* %u306 to [1 x %union.rtunion_def]*, !dbg !6328
  %arrayidx308 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld307, i64 0, i64 1, !dbg !6328
  %rt_mem309 = bitcast %union.rtunion_def* %arrayidx308 to %struct.mem_attrs**, !dbg !6328
  %118 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem309, align 8, !dbg !6328
  %size310 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %118, i32 0, i32 2, !dbg !6328
  %119 = load %struct.rtx_def*, %struct.rtx_def** %size310, align 8, !dbg !6328
  br label %cond.end329, !dbg !6328

cond.false311:                                    ; preds = %cond.false298
  %120 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6328
  %121 = bitcast %struct.rtx_def* %120 to i32*, !dbg !6328
  %bf.load312 = load i32, i32* %121, align 8, !dbg !6328
  %bf.lshr313 = lshr i32 %bf.load312, 16, !dbg !6328
  %bf.clear314 = and i32 %bf.lshr313, 255, !dbg !6328
  %cmp315 = icmp ne i32 %bf.clear314, 1, !dbg !6328
  br i1 %cmp315, label %cond.true317, label %cond.false326, !dbg !6328

cond.true317:                                     ; preds = %cond.false311
  %122 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6328
  %123 = bitcast %struct.rtx_def* %122 to i32*, !dbg !6328
  %bf.load318 = load i32, i32* %123, align 8, !dbg !6328
  %bf.lshr319 = lshr i32 %bf.load318, 16, !dbg !6328
  %bf.clear320 = and i32 %bf.lshr319, 255, !dbg !6328
  %idxprom321 = zext i32 %bf.clear320 to i64, !dbg !6328
  %arrayidx322 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom321, !dbg !6328
  %124 = load i8, i8* %arrayidx322, align 1, !dbg !6328
  %conv323 = zext i8 %124 to i16, !dbg !6328
  %conv324 = zext i16 %conv323 to i64, !dbg !6328
  %call325 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv324), !dbg !6328
  br label %cond.end327, !dbg !6328

cond.false326:                                    ; preds = %cond.false311
  br label %cond.end327, !dbg !6328

cond.end327:                                      ; preds = %cond.false326, %cond.true317
  %cond328 = phi %struct.rtx_def* [ %call325, %cond.true317 ], [ null, %cond.false326 ], !dbg !6328
  br label %cond.end329, !dbg !6328

cond.end329:                                      ; preds = %cond.end327, %cond.true305
  %cond330 = phi %struct.rtx_def* [ %119, %cond.true305 ], [ %cond328, %cond.end327 ], !dbg !6328
  %u331 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond330, i32 0, i32 1, !dbg !6328
  %hwint332 = bitcast %union.u* %u331 to [1 x i64]*, !dbg !6328
  %arrayidx333 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint332, i64 0, i64 0, !dbg !6328
  %125 = load i64, i64* %arrayidx333, align 8, !dbg !6328
  br label %cond.end334, !dbg !6328

cond.end334:                                      ; preds = %cond.end329, %cond.end293
  %cond335 = phi i64 [ %114, %cond.end293 ], [ %125, %cond.end329 ], !dbg !6328
  %call336 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %cond335), !dbg !6328
  store %struct.rtx_def* %call336, %struct.rtx_def** %mem_size, align 8, !dbg !6329
  br label %if.end337

if.end337:                                        ; preds = %cond.end334, %if.then189
  br label %if.end338

if.end338:                                        ; preds = %if.end337, %if.then157
  %126 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6330
  %127 = load %struct.rtx_def*, %struct.rtx_def** %mem_size, align 8, !dbg !6331
  call void @set_mem_size(%struct.rtx_def* %126, %struct.rtx_def* %127), !dbg !6332
  %128 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6333
  %129 = load %struct.rtx_def*, %struct.rtx_def** %mem_size, align 8, !dbg !6334
  call void @set_mem_size(%struct.rtx_def* %128, %struct.rtx_def* %129), !dbg !6335
  %130 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6336
  %131 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6337
  %u339 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1, !dbg !6337
  %fld340 = bitcast %union.u* %u339 to [1 x %union.rtunion_def]*, !dbg !6337
  %arrayidx341 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld340, i64 0, i64 1, !dbg !6337
  %rt_mem342 = bitcast %union.rtunion_def* %arrayidx341 to %struct.mem_attrs**, !dbg !6337
  %132 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem342, align 8, !dbg !6337
  %cmp343 = icmp ne %struct.mem_attrs* %132, null, !dbg !6337
  br i1 %cmp343, label %cond.true345, label %cond.false350, !dbg !6337

cond.true345:                                     ; preds = %if.end338
  %133 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6337
  %u346 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1, !dbg !6337
  %fld347 = bitcast %union.u* %u346 to [1 x %union.rtunion_def]*, !dbg !6337
  %arrayidx348 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld347, i64 0, i64 1, !dbg !6337
  %rt_mem349 = bitcast %union.rtunion_def* %arrayidx348 to %struct.mem_attrs**, !dbg !6337
  %134 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem349, align 8, !dbg !6337
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %134, i32 0, i32 4, !dbg !6337
  %135 = load i32, i32* %align, align 4, !dbg !6337
  br label %cond.end351, !dbg !6337

cond.false350:                                    ; preds = %if.end338
  br label %cond.end351, !dbg !6337

cond.end351:                                      ; preds = %cond.false350, %cond.true345
  %cond352 = phi i32 [ %135, %cond.true345 ], [ 8, %cond.false350 ], !dbg !6337
  %136 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6337
  %u353 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1, !dbg !6337
  %fld354 = bitcast %union.u* %u353 to [1 x %union.rtunion_def]*, !dbg !6337
  %arrayidx355 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld354, i64 0, i64 1, !dbg !6337
  %rt_mem356 = bitcast %union.rtunion_def* %arrayidx355 to %struct.mem_attrs**, !dbg !6337
  %137 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem356, align 8, !dbg !6337
  %cmp357 = icmp ne %struct.mem_attrs* %137, null, !dbg !6337
  br i1 %cmp357, label %cond.true359, label %cond.false365, !dbg !6337

cond.true359:                                     ; preds = %cond.end351
  %138 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6337
  %u360 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1, !dbg !6337
  %fld361 = bitcast %union.u* %u360 to [1 x %union.rtunion_def]*, !dbg !6337
  %arrayidx362 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld361, i64 0, i64 1, !dbg !6337
  %rt_mem363 = bitcast %union.rtunion_def* %arrayidx362 to %struct.mem_attrs**, !dbg !6337
  %139 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem363, align 8, !dbg !6337
  %align364 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %139, i32 0, i32 4, !dbg !6337
  %140 = load i32, i32* %align364, align 4, !dbg !6337
  br label %cond.end366, !dbg !6337

cond.false365:                                    ; preds = %cond.end351
  br label %cond.end366, !dbg !6337

cond.end366:                                      ; preds = %cond.false365, %cond.true359
  %cond367 = phi i32 [ %140, %cond.true359 ], [ 8, %cond.false365 ], !dbg !6337
  %cmp368 = icmp ult i32 %cond352, %cond367, !dbg !6337
  br i1 %cmp368, label %cond.true370, label %cond.false386, !dbg !6337

cond.true370:                                     ; preds = %cond.end366
  %141 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6337
  %u371 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1, !dbg !6337
  %fld372 = bitcast %union.u* %u371 to [1 x %union.rtunion_def]*, !dbg !6337
  %arrayidx373 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld372, i64 0, i64 1, !dbg !6337
  %rt_mem374 = bitcast %union.rtunion_def* %arrayidx373 to %struct.mem_attrs**, !dbg !6337
  %142 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem374, align 8, !dbg !6337
  %cmp375 = icmp ne %struct.mem_attrs* %142, null, !dbg !6337
  br i1 %cmp375, label %cond.true377, label %cond.false383, !dbg !6337

cond.true377:                                     ; preds = %cond.true370
  %143 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6337
  %u378 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %143, i32 0, i32 1, !dbg !6337
  %fld379 = bitcast %union.u* %u378 to [1 x %union.rtunion_def]*, !dbg !6337
  %arrayidx380 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld379, i64 0, i64 1, !dbg !6337
  %rt_mem381 = bitcast %union.rtunion_def* %arrayidx380 to %struct.mem_attrs**, !dbg !6337
  %144 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem381, align 8, !dbg !6337
  %align382 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %144, i32 0, i32 4, !dbg !6337
  %145 = load i32, i32* %align382, align 4, !dbg !6337
  br label %cond.end384, !dbg !6337

cond.false383:                                    ; preds = %cond.true370
  br label %cond.end384, !dbg !6337

cond.end384:                                      ; preds = %cond.false383, %cond.true377
  %cond385 = phi i32 [ %145, %cond.true377 ], [ 8, %cond.false383 ], !dbg !6337
  br label %cond.end402, !dbg !6337

cond.false386:                                    ; preds = %cond.end366
  %146 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6337
  %u387 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1, !dbg !6337
  %fld388 = bitcast %union.u* %u387 to [1 x %union.rtunion_def]*, !dbg !6337
  %arrayidx389 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld388, i64 0, i64 1, !dbg !6337
  %rt_mem390 = bitcast %union.rtunion_def* %arrayidx389 to %struct.mem_attrs**, !dbg !6337
  %147 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem390, align 8, !dbg !6337
  %cmp391 = icmp ne %struct.mem_attrs* %147, null, !dbg !6337
  br i1 %cmp391, label %cond.true393, label %cond.false399, !dbg !6337

cond.true393:                                     ; preds = %cond.false386
  %148 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6337
  %u394 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %148, i32 0, i32 1, !dbg !6337
  %fld395 = bitcast %union.u* %u394 to [1 x %union.rtunion_def]*, !dbg !6337
  %arrayidx396 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld395, i64 0, i64 1, !dbg !6337
  %rt_mem397 = bitcast %union.rtunion_def* %arrayidx396 to %struct.mem_attrs**, !dbg !6337
  %149 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem397, align 8, !dbg !6337
  %align398 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %149, i32 0, i32 4, !dbg !6337
  %150 = load i32, i32* %align398, align 4, !dbg !6337
  br label %cond.end400, !dbg !6337

cond.false399:                                    ; preds = %cond.false386
  br label %cond.end400, !dbg !6337

cond.end400:                                      ; preds = %cond.false399, %cond.true393
  %cond401 = phi i32 [ %150, %cond.true393 ], [ 8, %cond.false399 ], !dbg !6337
  br label %cond.end402, !dbg !6337

cond.end402:                                      ; preds = %cond.end400, %cond.end384
  %cond403 = phi i32 [ %cond385, %cond.end384 ], [ %cond401, %cond.end400 ], !dbg !6337
  call void @set_mem_align(%struct.rtx_def* %130, i32 %cond403), !dbg !6338
  %151 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6339
  %152 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6340
  %u404 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %152, i32 0, i32 1, !dbg !6340
  %fld405 = bitcast %union.u* %u404 to [1 x %union.rtunion_def]*, !dbg !6340
  %arrayidx406 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld405, i64 0, i64 1, !dbg !6340
  %rt_mem407 = bitcast %union.rtunion_def* %arrayidx406 to %struct.mem_attrs**, !dbg !6340
  %153 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem407, align 8, !dbg !6340
  %cmp408 = icmp ne %struct.mem_attrs* %153, null, !dbg !6340
  br i1 %cmp408, label %cond.true410, label %cond.false416, !dbg !6340

cond.true410:                                     ; preds = %cond.end402
  %154 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6340
  %u411 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %154, i32 0, i32 1, !dbg !6340
  %fld412 = bitcast %union.u* %u411 to [1 x %union.rtunion_def]*, !dbg !6340
  %arrayidx413 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld412, i64 0, i64 1, !dbg !6340
  %rt_mem414 = bitcast %union.rtunion_def* %arrayidx413 to %struct.mem_attrs**, !dbg !6340
  %155 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem414, align 8, !dbg !6340
  %align415 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %155, i32 0, i32 4, !dbg !6340
  %156 = load i32, i32* %align415, align 4, !dbg !6340
  br label %cond.end417, !dbg !6340

cond.false416:                                    ; preds = %cond.end402
  br label %cond.end417, !dbg !6340

cond.end417:                                      ; preds = %cond.false416, %cond.true410
  %cond418 = phi i32 [ %156, %cond.true410 ], [ 8, %cond.false416 ], !dbg !6340
  call void @set_mem_align(%struct.rtx_def* %151, i32 %cond418), !dbg !6341
  br label %if.end419

if.end419:                                        ; preds = %cond.end417, %if.then39
  br label %if.end420

if.end420:                                        ; preds = %if.end419, %if.then29
  br label %if.end421, !dbg !6342

if.end421:                                        ; preds = %if.end420, %land.lhs.true, %if.end17
  %157 = load i32, i32* %code, align 4, !dbg !6343
  %idxprom422 = sext i32 %157 to i64, !dbg !6343
  %arrayidx423 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom422, !dbg !6343
  %158 = load i8*, i8** %arrayidx423, align 8, !dbg !6343
  store i8* %158, i8** %fmt, align 8, !dbg !6344
  %159 = load i32, i32* %code, align 4, !dbg !6345
  %idxprom424 = sext i32 %159 to i64, !dbg !6345
  %arrayidx425 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom424, !dbg !6345
  %160 = load i8, i8* %arrayidx425, align 1, !dbg !6345
  %conv426 = zext i8 %160 to i32, !dbg !6345
  %sub = sub nsw i32 %conv426, 1, !dbg !6347
  store i32 %sub, i32* %i, align 4, !dbg !6348
  br label %for.cond, !dbg !6349

for.cond:                                         ; preds = %for.inc481, %if.end421
  %161 = load i32, i32* %i, align 4, !dbg !6350
  %cmp427 = icmp sge i32 %161, 0, !dbg !6352
  br i1 %cmp427, label %for.body, label %for.end482, !dbg !6353

for.body:                                         ; preds = %for.cond
  %162 = load i8*, i8** %fmt, align 8, !dbg !6354
  %163 = load i32, i32* %i, align 4, !dbg !6356
  %idxprom429 = sext i32 %163 to i64, !dbg !6354
  %arrayidx430 = getelementptr inbounds i8, i8* %162, i64 %idxprom429, !dbg !6354
  %164 = load i8, i8* %arrayidx430, align 1, !dbg !6354
  %conv431 = sext i8 %164 to i32, !dbg !6354
  switch i32 %conv431, label %sw.epilog [
    i32 69, label %sw.bb
    i32 101, label %sw.bb471
  ], !dbg !6357

sw.bb:                                            ; preds = %for.body
  %165 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6358
  %u432 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %165, i32 0, i32 1, !dbg !6358
  %fld433 = bitcast %union.u* %u432 to [1 x %union.rtunion_def]*, !dbg !6358
  %166 = load i32, i32* %i, align 4, !dbg !6358
  %idxprom434 = sext i32 %166 to i64, !dbg !6358
  %arrayidx435 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld433, i64 0, i64 %idxprom434, !dbg !6358
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx435 to %struct.rtvec_def**, !dbg !6358
  %167 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6358
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %167, i32 0, i32 0, !dbg !6358
  %168 = load i32, i32* %num_elem, align 8, !dbg !6358
  %169 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6361
  %u436 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %169, i32 0, i32 1, !dbg !6361
  %fld437 = bitcast %union.u* %u436 to [1 x %union.rtunion_def]*, !dbg !6361
  %170 = load i32, i32* %i, align 4, !dbg !6361
  %idxprom438 = sext i32 %170 to i64, !dbg !6361
  %arrayidx439 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld437, i64 0, i64 %idxprom438, !dbg !6361
  %rt_rtvec440 = bitcast %union.rtunion_def* %arrayidx439 to %struct.rtvec_def**, !dbg !6361
  %171 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec440, align 8, !dbg !6361
  %num_elem441 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %171, i32 0, i32 0, !dbg !6361
  %172 = load i32, i32* %num_elem441, align 8, !dbg !6361
  %cmp442 = icmp ne i32 %168, %172, !dbg !6362
  br i1 %cmp442, label %if.then444, label %if.end445, !dbg !6363

if.then444:                                       ; preds = %sw.bb
  br label %return, !dbg !6364

if.end445:                                        ; preds = %sw.bb
  store i32 0, i32* %j, align 4, !dbg !6365
  br label %for.cond446, !dbg !6367

for.cond446:                                      ; preds = %for.inc, %if.end445
  %173 = load i32, i32* %j, align 4, !dbg !6368
  %174 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6370
  %u447 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %174, i32 0, i32 1, !dbg !6370
  %fld448 = bitcast %union.u* %u447 to [1 x %union.rtunion_def]*, !dbg !6370
  %175 = load i32, i32* %i, align 4, !dbg !6370
  %idxprom449 = sext i32 %175 to i64, !dbg !6370
  %arrayidx450 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld448, i64 0, i64 %idxprom449, !dbg !6370
  %rt_rtvec451 = bitcast %union.rtunion_def* %arrayidx450 to %struct.rtvec_def**, !dbg !6370
  %176 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec451, align 8, !dbg !6370
  %num_elem452 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %176, i32 0, i32 0, !dbg !6370
  %177 = load i32, i32* %num_elem452, align 8, !dbg !6370
  %cmp453 = icmp slt i32 %173, %177, !dbg !6371
  br i1 %cmp453, label %for.body455, label %for.end, !dbg !6372

for.body455:                                      ; preds = %for.cond446
  %178 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6373
  %u456 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1, !dbg !6373
  %fld457 = bitcast %union.u* %u456 to [1 x %union.rtunion_def]*, !dbg !6373
  %179 = load i32, i32* %i, align 4, !dbg !6373
  %idxprom458 = sext i32 %179 to i64, !dbg !6373
  %arrayidx459 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld457, i64 0, i64 %idxprom458, !dbg !6373
  %rt_rtvec460 = bitcast %union.rtunion_def* %arrayidx459 to %struct.rtvec_def**, !dbg !6373
  %180 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec460, align 8, !dbg !6373
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %180, i32 0, i32 1, !dbg !6373
  %181 = load i32, i32* %j, align 4, !dbg !6373
  %idxprom461 = sext i32 %181 to i64, !dbg !6373
  %arrayidx462 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom461, !dbg !6373
  %182 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx462, align 8, !dbg !6373
  %183 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6374
  %u463 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %183, i32 0, i32 1, !dbg !6374
  %fld464 = bitcast %union.u* %u463 to [1 x %union.rtunion_def]*, !dbg !6374
  %184 = load i32, i32* %i, align 4, !dbg !6374
  %idxprom465 = sext i32 %184 to i64, !dbg !6374
  %arrayidx466 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld464, i64 0, i64 %idxprom465, !dbg !6374
  %rt_rtvec467 = bitcast %union.rtunion_def* %arrayidx466 to %struct.rtvec_def**, !dbg !6374
  %185 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec467, align 8, !dbg !6374
  %elem468 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %185, i32 0, i32 1, !dbg !6374
  %186 = load i32, i32* %j, align 4, !dbg !6374
  %idxprom469 = sext i32 %186 to i64, !dbg !6374
  %arrayidx470 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem468, i64 0, i64 %idxprom469, !dbg !6374
  %187 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx470, align 8, !dbg !6374
  call void @merge_memattrs(%struct.rtx_def* %182, %struct.rtx_def* %187), !dbg !6375
  br label %for.inc, !dbg !6375

for.inc:                                          ; preds = %for.body455
  %188 = load i32, i32* %j, align 4, !dbg !6376
  %inc = add nsw i32 %188, 1, !dbg !6376
  store i32 %inc, i32* %j, align 4, !dbg !6376
  br label %for.cond446, !dbg !6377, !llvm.loop !6378

for.end:                                          ; preds = %for.cond446
  br label %sw.epilog, !dbg !6380

sw.bb471:                                         ; preds = %for.body
  %189 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6381
  %u472 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %189, i32 0, i32 1, !dbg !6381
  %fld473 = bitcast %union.u* %u472 to [1 x %union.rtunion_def]*, !dbg !6381
  %190 = load i32, i32* %i, align 4, !dbg !6381
  %idxprom474 = sext i32 %190 to i64, !dbg !6381
  %arrayidx475 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld473, i64 0, i64 %idxprom474, !dbg !6381
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx475 to %struct.rtx_def**, !dbg !6381
  %191 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6381
  %192 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !6382
  %u476 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %192, i32 0, i32 1, !dbg !6382
  %fld477 = bitcast %union.u* %u476 to [1 x %union.rtunion_def]*, !dbg !6382
  %193 = load i32, i32* %i, align 4, !dbg !6382
  %idxprom478 = sext i32 %193 to i64, !dbg !6382
  %arrayidx479 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld477, i64 0, i64 %idxprom478, !dbg !6382
  %rt_rtx480 = bitcast %union.rtunion_def* %arrayidx479 to %struct.rtx_def**, !dbg !6382
  %194 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx480, align 8, !dbg !6382
  call void @merge_memattrs(%struct.rtx_def* %191, %struct.rtx_def* %194), !dbg !6383
  br label %sw.epilog, !dbg !6384

sw.epilog:                                        ; preds = %sw.bb471, %for.body, %for.end
  br label %for.inc481, !dbg !6385

for.inc481:                                       ; preds = %sw.epilog
  %195 = load i32, i32* %i, align 4, !dbg !6386
  %dec = add nsw i32 %195, -1, !dbg !6386
  store i32 %dec, i32* %i, align 4, !dbg !6386
  br label %for.cond, !dbg !6387, !llvm.loop !6388

for.end482:                                       ; preds = %for.cond
  br label %return, !dbg !6390

return:                                           ; preds = %for.end482, %if.then444, %if.then16, %if.then8, %if.then3, %if.then
  ret void, !dbg !6391
}

declare dso_local %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def*) #2

declare dso_local void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @set_mem_alias_set(%struct.rtx_def*, i32) #2

declare dso_local i32 @mem_expr_equal_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @set_mem_expr(%struct.rtx_def*, %union.tree_node*) #2

declare dso_local void @set_mem_offset(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

declare dso_local void @set_mem_size(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @set_mem_align(%struct.rtx_def*, i32) #2

declare dso_local void @fixup_tail_calls() #2

declare dso_local void @dump_flow_info(%struct._IO_FILE*, i32) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2164, !2165, !2166}
!llvm.ident = !{!2167}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "crossjumps_occured", scope: !2, file: !3, line: 66, type: !1225, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !969, globals: !2131, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "cfgcleanup.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !154, !158, !163, !182, !189, !196, !390, !396, !400, !414, !557, !573, !749, !791, !798, !832, !846}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !146, line: 31, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149, !150, !151, !152, !153}
!148 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!150 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!151 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!152 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!153 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !146, line: 91, baseType: !7, size: 32, elements: !155)
!155 = !{!156, !157}
!156 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!157 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!158 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !159, line: 474, baseType: !7, size: 32, elements: !160)
!159 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!160 = !{!161, !162}
!161 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!162 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!163 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !164, line: 280, baseType: !7, size: 32, elements: !165)
!164 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!165 = !{!166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181}
!166 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!182 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !164, line: 1817, baseType: !7, size: 32, elements: !183)
!183 = !{!184, !185, !186, !187, !188}
!184 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !164, line: 1805, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !164, line: 39, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389}
!198 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!203 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!204 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!205 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!206 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!207 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!208 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!209 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!210 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!213 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!214 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!215 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!216 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!217 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!218 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!219 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!220 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!221 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!222 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!223 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!224 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!225 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!226 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!227 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!228 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!229 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!230 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!231 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!232 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!233 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!234 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!235 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!236 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!237 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!238 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!239 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!240 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!241 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!242 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!243 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!244 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!245 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!246 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!247 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!248 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!249 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!250 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!251 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!252 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!253 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!254 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!255 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!256 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!257 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!258 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!259 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!260 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!261 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!262 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!263 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!264 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!265 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!266 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!267 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!268 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!269 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!270 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!271 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!272 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!273 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!274 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!275 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!276 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!277 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!278 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!280 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!281 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!282 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!283 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!284 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!285 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!286 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!287 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!288 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!289 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!290 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!291 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!292 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!293 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!294 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!295 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!296 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!297 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!298 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!299 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!300 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!301 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!302 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!303 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!304 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!305 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!306 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!307 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!308 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!309 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!310 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!311 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!312 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!313 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!314 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!315 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!316 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!317 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!318 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!320 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!321 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!322 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!323 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!324 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!325 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!326 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!327 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!328 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!329 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!330 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!331 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!332 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!333 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!334 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!335 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!336 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!337 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!338 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!339 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!340 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!341 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!342 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!343 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!344 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!345 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!346 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!347 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!348 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!349 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!350 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!362 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!363 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!364 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!365 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!366 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!367 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!383 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!384 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!385 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!386 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!387 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!388 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!389 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ir_type", file: !391, line: 80, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395}
!393 = !DIEnumerator(name: "IR_GIMPLE", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "IR_RTL_CFGRTL", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "IR_RTL_CFGLAYOUT", value: 2, isUnsigned: true)
!396 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !135, line: 912, baseType: !7, size: 32, elements: !397)
!397 = !{!398, !399}
!398 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!399 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!400 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !135, line: 295, baseType: !7, size: 32, elements: !401)
!401 = !{!402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413}
!402 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!403 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!404 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!405 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!406 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!407 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!408 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!409 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!410 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!411 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!412 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!413 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!414 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !415, line: 45, baseType: !7, size: 32, elements: !416)
!415 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!416 = !{!417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556}
!417 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!418 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!419 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!420 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!421 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!422 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!423 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!424 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!425 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!426 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!427 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!428 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!429 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!430 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!431 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!432 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!433 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!434 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!435 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!436 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!437 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!438 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!439 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!440 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!441 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!442 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!443 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!444 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!445 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!446 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!447 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!448 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!449 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!450 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!451 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!452 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!453 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!454 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!455 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!456 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!457 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!458 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!459 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!460 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!461 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!462 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!463 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!464 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!465 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!466 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!467 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!468 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!469 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!470 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!471 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!472 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!473 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!474 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!475 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!476 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!477 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!478 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!479 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!480 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!481 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!482 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!483 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!484 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!485 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!486 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!487 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!488 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!489 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!490 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!491 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!492 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!493 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!494 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!495 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!496 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!497 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!498 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!499 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!500 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!501 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!502 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!503 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!504 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!505 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!506 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!507 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!508 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!509 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!510 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!511 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!512 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!513 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!514 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!515 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!516 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!517 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!518 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!519 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!520 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!521 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!522 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!523 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!524 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!525 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!526 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!527 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!528 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!529 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!530 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!531 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!532 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!533 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!534 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!535 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!536 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!537 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!538 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!539 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!540 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!541 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!542 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!543 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!544 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!545 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!546 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!547 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!548 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!549 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!550 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!551 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!552 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!553 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!554 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!555 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!556 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!557 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !415, line: 956, baseType: !7, size: 32, elements: !558)
!558 = !{!559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572}
!559 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!560 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!561 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!562 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!563 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!564 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!565 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!566 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!567 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!568 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!569 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!570 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!571 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!572 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!573 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !574, line: 74, baseType: !7, size: 32, elements: !575)
!574 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!575 = !{!576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748}
!576 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!589 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!590 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!591 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!592 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!593 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!594 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!595 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!596 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!597 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!598 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!599 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!600 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!601 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!602 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!603 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!604 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!605 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!606 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!607 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!608 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!609 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!610 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!611 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!612 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!613 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!614 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!615 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!616 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!617 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!618 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!619 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!620 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!621 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!622 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!623 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!624 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!625 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!626 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!627 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!628 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!629 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!630 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!631 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!632 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!633 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!634 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!635 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!636 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!637 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!638 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!639 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!640 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!641 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!642 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!643 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!644 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!645 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!646 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!647 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!648 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!649 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!650 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!651 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!652 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!653 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!654 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!655 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!656 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!657 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!658 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!659 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!660 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!661 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!662 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!663 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!664 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!665 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!666 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!667 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!668 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!669 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!670 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!671 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!672 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!673 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!674 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!675 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!676 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!677 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!678 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!679 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!680 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!681 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!682 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!683 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!684 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!685 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!686 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!687 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!688 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!689 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!690 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!691 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!692 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!693 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!694 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!695 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!696 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!697 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!698 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!699 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!700 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!701 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!702 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!703 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!704 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!705 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!706 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!707 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!708 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!709 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!710 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!711 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!712 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!713 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!714 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!715 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!716 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!717 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!718 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!719 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!720 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!721 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!722 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!723 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!724 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!725 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!726 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!727 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!728 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!729 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!730 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!731 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!732 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!733 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!734 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!735 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!736 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!737 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!738 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!739 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!740 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!741 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!742 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!743 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!744 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!745 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!746 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!747 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!748 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!749 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_counter", file: !750, line: 27, baseType: !7, size: 32, elements: !751)
!750 = !DIFile(filename: "./dbgcnt.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!751 = !{!752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790}
!752 = !DIEnumerator(name: "auto_inc_dec", value: 0, isUnsigned: true)
!753 = !DIEnumerator(name: "ccp", value: 1, isUnsigned: true)
!754 = !DIEnumerator(name: "cfg_cleanup", value: 2, isUnsigned: true)
!755 = !DIEnumerator(name: "cse2_move2add", value: 3, isUnsigned: true)
!756 = !DIEnumerator(name: "cprop", value: 4, isUnsigned: true)
!757 = !DIEnumerator(name: "dce", value: 5, isUnsigned: true)
!758 = !DIEnumerator(name: "dce_fast", value: 6, isUnsigned: true)
!759 = !DIEnumerator(name: "dce_ud", value: 7, isUnsigned: true)
!760 = !DIEnumerator(name: "delete_trivial_dead", value: 8, isUnsigned: true)
!761 = !DIEnumerator(name: "df_byte_scan", value: 9, isUnsigned: true)
!762 = !DIEnumerator(name: "dse", value: 10, isUnsigned: true)
!763 = !DIEnumerator(name: "dse1", value: 11, isUnsigned: true)
!764 = !DIEnumerator(name: "dse2", value: 12, isUnsigned: true)
!765 = !DIEnumerator(name: "gcse2_delete", value: 13, isUnsigned: true)
!766 = !DIEnumerator(name: "global_alloc_at_func", value: 14, isUnsigned: true)
!767 = !DIEnumerator(name: "global_alloc_at_reg", value: 15, isUnsigned: true)
!768 = !DIEnumerator(name: "hoist", value: 16, isUnsigned: true)
!769 = !DIEnumerator(name: "ia64_sched2", value: 17, isUnsigned: true)
!770 = !DIEnumerator(name: "if_conversion", value: 18, isUnsigned: true)
!771 = !DIEnumerator(name: "if_after_combine", value: 19, isUnsigned: true)
!772 = !DIEnumerator(name: "if_after_reload", value: 20, isUnsigned: true)
!773 = !DIEnumerator(name: "local_alloc_for_sched", value: 21, isUnsigned: true)
!774 = !DIEnumerator(name: "postreload_cse", value: 22, isUnsigned: true)
!775 = !DIEnumerator(name: "pre", value: 23, isUnsigned: true)
!776 = !DIEnumerator(name: "pre_insn", value: 24, isUnsigned: true)
!777 = !DIEnumerator(name: "treepre_insert", value: 25, isUnsigned: true)
!778 = !DIEnumerator(name: "sched2_func", value: 26, isUnsigned: true)
!779 = !DIEnumerator(name: "sched_block", value: 27, isUnsigned: true)
!780 = !DIEnumerator(name: "sched_func", value: 28, isUnsigned: true)
!781 = !DIEnumerator(name: "sched_insn", value: 29, isUnsigned: true)
!782 = !DIEnumerator(name: "sched_region", value: 30, isUnsigned: true)
!783 = !DIEnumerator(name: "sel_sched_cnt", value: 31, isUnsigned: true)
!784 = !DIEnumerator(name: "sel_sched_region_cnt", value: 32, isUnsigned: true)
!785 = !DIEnumerator(name: "sel_sched_insn_cnt", value: 33, isUnsigned: true)
!786 = !DIEnumerator(name: "sms_sched_loop", value: 34, isUnsigned: true)
!787 = !DIEnumerator(name: "store_motion", value: 35, isUnsigned: true)
!788 = !DIEnumerator(name: "split_for_sched2", value: 36, isUnsigned: true)
!789 = !DIEnumerator(name: "tail_call", value: 37, isUnsigned: true)
!790 = !DIEnumerator(name: "debug_counter_number_of_counters", value: 38, isUnsigned: true)
!791 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !792, line: 104, baseType: !7, size: 32, elements: !793)
!792 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!793 = !{!794, !795, !796, !797}
!794 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!795 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!796 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!797 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!798 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !415, line: 836, baseType: !7, size: 32, elements: !799)
!799 = !{!800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831}
!800 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!801 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!802 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!803 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!804 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!805 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!806 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!807 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!808 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!809 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!810 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!811 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!812 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!813 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!814 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!815 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!816 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!817 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!818 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!819 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!820 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!821 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!822 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!823 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!824 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!825 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!826 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!827 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!828 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!829 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!830 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!831 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!832 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !415, line: 1994, baseType: !7, size: 32, elements: !833)
!833 = !{!834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845}
!834 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!835 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!836 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!837 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!838 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!839 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!840 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!841 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!842 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!843 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!844 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!845 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!846 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !847, line: 82, baseType: !7, size: 32, elements: !848)
!847 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!848 = !{!849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968}
!849 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!850 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!851 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!852 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!853 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!854 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!855 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!856 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!857 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!858 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!859 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!860 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!861 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!862 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!863 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!864 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!865 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!866 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!867 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!868 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!869 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!870 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!871 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!872 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!873 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!874 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!875 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!876 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!877 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!878 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!879 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!880 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!881 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!882 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!883 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!884 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!885 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!886 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!887 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!888 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!889 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!890 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!891 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!892 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!893 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!894 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!895 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!896 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!897 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!898 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!899 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!900 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!901 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!902 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!903 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!904 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!905 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!906 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!907 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!908 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!909 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!910 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!911 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!912 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!913 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!914 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!915 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!916 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!917 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!918 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!919 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!920 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!921 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!922 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!923 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!924 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!925 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!926 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!927 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!928 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!929 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!930 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!931 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!932 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!933 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!934 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!935 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!936 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!937 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!938 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!939 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!940 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!941 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!942 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!943 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!944 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!945 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!946 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!947 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!948 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!949 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!950 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!951 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!952 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!953 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!954 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!955 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!956 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!957 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!958 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!959 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!960 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!961 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!962 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!963 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!964 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!965 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!966 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!967 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!968 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!969 = !{!414, !970, !1102, !2125, !7, !2126, !5, !2127, !993, !2128, !798, !1064, !2130}
!970 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !391, line: 50, baseType: !971)
!971 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !972, size: 64)
!972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !415, line: 240, size: 384, elements: !973)
!973 = !{!974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984}
!974 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !972, file: !415, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !972, file: !415, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !972, file: !415, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !972, file: !415, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !972, file: !415, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !972, file: !415, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !972, file: !415, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !972, file: !415, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !972, file: !415, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !972, file: !415, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !972, file: !415, line: 321, baseType: !985, size: 320, offset: 64)
!985 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !415, line: 315, size: 320, elements: !986)
!986 = !{!987, !2060, !2062, !2123, !2124}
!987 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !985, file: !415, line: 316, baseType: !988, size: 64)
!988 = !DICompositeType(tag: DW_TAG_array_type, baseType: !989, size: 64, elements: !1008)
!989 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !415, line: 183, baseType: !990)
!990 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !415, line: 166, size: 64, elements: !991)
!991 = !{!992, !994, !995, !999, !1000, !1010, !1011, !1023, !1047, !1111, !2038, !2039, !2050, !2057}
!992 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !990, file: !415, line: 168, baseType: !993, size: 32)
!993 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !990, file: !415, line: 169, baseType: !7, size: 32)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !990, file: !415, line: 170, baseType: !996, size: 64)
!996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !997, size: 64)
!997 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !998)
!998 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !990, file: !415, line: 171, baseType: !970, size: 64)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !990, file: !415, line: 172, baseType: !1001, size: 64)
!1001 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !391, line: 53, baseType: !1002)
!1002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1003, size: 64)
!1003 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !415, line: 359, size: 128, elements: !1004)
!1004 = !{!1005, !1006}
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1003, file: !415, line: 360, baseType: !993, size: 32)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1003, file: !415, line: 361, baseType: !1007, size: 64, offset: 64)
!1007 = !DICompositeType(tag: DW_TAG_array_type, baseType: !970, size: 64, elements: !1008)
!1008 = !{!1009}
!1009 = !DISubrange(count: 1)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !990, file: !415, line: 173, baseType: !5, size: 32)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !990, file: !415, line: 174, baseType: !1012, size: 32)
!1012 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !415, line: 133, baseType: !1013)
!1013 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !415, line: 115, size: 32, elements: !1014)
!1014 = !{!1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022}
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1013, file: !415, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1013, file: !415, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1013, file: !415, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1013, file: !415, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1013, file: !415, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1013, file: !415, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1013, file: !415, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1013, file: !415, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !990, file: !415, line: 175, baseType: !1024, size: 64)
!1024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1025, size: 64)
!1025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1026, line: 23, size: 320, elements: !1027)
!1026 = !DIFile(filename: "./cselib.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1027 = !{!1028, !1029, !1030, !1031, !1038, !1046}
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !1025, file: !1026, line: 25, baseType: !7, size: 32)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1025, file: !1026, line: 28, baseType: !993, size: 32, offset: 32)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "val_rtx", scope: !1025, file: !1026, line: 31, baseType: !970, size: 64, offset: 64)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "locs", scope: !1025, file: !1026, line: 35, baseType: !1032, size: 64, offset: 128)
!1032 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1033, size: 64)
!1033 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "elt_loc_list", file: !1026, line: 45, size: 192, elements: !1034)
!1034 = !{!1035, !1036, !1037}
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1033, file: !1026, line: 47, baseType: !1032, size: 64)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1033, file: !1026, line: 49, baseType: !970, size: 64, offset: 64)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "setting_insn", scope: !1033, file: !1026, line: 51, baseType: !970, size: 64, offset: 128)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "addr_list", scope: !1025, file: !1026, line: 39, baseType: !1039, size: 64, offset: 192)
!1039 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1040, size: 64)
!1040 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "elt_list", file: !1026, line: 55, size: 128, elements: !1041)
!1041 = !{!1042, !1043}
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1040, file: !1026, line: 56, baseType: !1039, size: 64)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "elt", scope: !1040, file: !1026, line: 57, baseType: !1044, size: 64, offset: 64)
!1044 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1045, size: 64)
!1045 = !DIDerivedType(tag: DW_TAG_typedef, name: "cselib_val", file: !1026, line: 42, baseType: !1025)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "next_containing_mem", scope: !1025, file: !1026, line: 41, baseType: !1024, size: 64, offset: 256)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !990, file: !415, line: 176, baseType: !1048, size: 64)
!1048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1049, size: 64)
!1049 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1050, line: 75, size: 256, elements: !1051)
!1050 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1051 = !{!1052, !1067, !1068, !1069}
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1049, file: !1050, line: 76, baseType: !1053, size: 64)
!1053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1054, size: 64)
!1054 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1050, line: 68, baseType: !1055)
!1055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1050, line: 63, size: 320, elements: !1056)
!1056 = !{!1057, !1059, !1060, !1061}
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1055, file: !1050, line: 64, baseType: !1058, size: 64)
!1058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1055, size: 64)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1055, file: !1050, line: 65, baseType: !1058, size: 64, offset: 64)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1055, file: !1050, line: 66, baseType: !7, size: 32, offset: 128)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1055, file: !1050, line: 67, baseType: !1062, size: 128, offset: 192)
!1062 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1063, size: 128, elements: !1065)
!1063 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1050, line: 29, baseType: !1064)
!1064 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1065 = !{!1066}
!1066 = !DISubrange(count: 2)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1049, file: !1050, line: 77, baseType: !1053, size: 64, offset: 64)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1049, file: !1050, line: 78, baseType: !7, size: 32, offset: 128)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1049, file: !1050, line: 79, baseType: !1070, size: 64, offset: 192)
!1070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1071, size: 64)
!1071 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1050, line: 49, baseType: !1072)
!1072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1050, line: 45, size: 832, elements: !1073)
!1073 = !{!1074, !1075, !1076}
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1072, file: !1050, line: 46, baseType: !1058, size: 64)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1072, file: !1050, line: 47, baseType: !1048, size: 64, offset: 64)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1072, file: !1050, line: 48, baseType: !1077, size: 704, offset: 128)
!1077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1078, line: 164, size: 704, elements: !1079)
!1078 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1079 = !{!1080, !1082, !1093, !1094, !1095, !1096, !1097, !1098, !1103, !1107, !1108, !1109, !1110}
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1077, file: !1078, line: 166, baseType: !1081, size: 64)
!1081 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1077, file: !1078, line: 167, baseType: !1083, size: 64, offset: 64)
!1083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1084, size: 64)
!1084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1078, line: 157, size: 192, elements: !1085)
!1085 = !{!1086, !1088, !1089}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1084, file: !1078, line: 159, baseType: !1087, size: 64)
!1087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !998, size: 64)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1084, file: !1078, line: 160, baseType: !1083, size: 64, offset: 64)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1084, file: !1078, line: 161, baseType: !1090, size: 32, offset: 128)
!1090 = !DICompositeType(tag: DW_TAG_array_type, baseType: !998, size: 32, elements: !1091)
!1091 = !{!1092}
!1092 = !DISubrange(count: 4)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1077, file: !1078, line: 168, baseType: !1087, size: 64, offset: 128)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1077, file: !1078, line: 169, baseType: !1087, size: 64, offset: 192)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1077, file: !1078, line: 170, baseType: !1087, size: 64, offset: 256)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1077, file: !1078, line: 171, baseType: !1081, size: 64, offset: 320)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1077, file: !1078, line: 172, baseType: !993, size: 32, offset: 384)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1077, file: !1078, line: 176, baseType: !1099, size: 64, offset: 448)
!1099 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1100, size: 64)
!1100 = !DISubroutineType(types: !1101)
!1101 = !{!1083, !1102, !1081}
!1102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1077, file: !1078, line: 177, baseType: !1104, size: 64, offset: 512)
!1104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1105, size: 64)
!1105 = !DISubroutineType(types: !1106)
!1106 = !{null, !1102, !1083}
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1077, file: !1078, line: 178, baseType: !1102, size: 64, offset: 576)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1077, file: !1078, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1077, file: !1078, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1077, file: !1078, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !990, file: !415, line: 177, baseType: !1112, size: 64)
!1112 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !391, line: 56, baseType: !1113)
!1113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1114, size: 64)
!1114 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !164, line: 3371, size: 1792, elements: !1115)
!1115 = !{!1116, !1149, !1155, !1166, !1185, !1196, !1201, !1208, !1214, !1228, !1240, !1278, !1283, !1311, !1319, !1320, !1325, !1334, !1340, !1345, !1349, !1353, !1665, !1714, !1720, !1727, !1734, !1757, !1782, !1799, !1811, !1833, !1848, !2020}
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1114, file: !164, line: 3372, baseType: !1117, size: 64)
!1117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !164, line: 360, size: 64, elements: !1118)
!1118 = !{!1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148}
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1117, file: !164, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1117, file: !164, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1117, file: !164, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1117, file: !164, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1117, file: !164, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1117, file: !164, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1117, file: !164, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1117, file: !164, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1117, file: !164, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1117, file: !164, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1117, file: !164, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1117, file: !164, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1117, file: !164, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1117, file: !164, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1117, file: !164, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1117, file: !164, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1117, file: !164, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1117, file: !164, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1117, file: !164, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1117, file: !164, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1117, file: !164, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1117, file: !164, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1117, file: !164, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1117, file: !164, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1117, file: !164, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1117, file: !164, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1117, file: !164, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1117, file: !164, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1117, file: !164, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1117, file: !164, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1114, file: !164, line: 3373, baseType: !1150, size: 192)
!1150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !164, line: 402, size: 192, elements: !1151)
!1151 = !{!1152, !1153, !1154}
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1150, file: !164, line: 403, baseType: !1117, size: 64)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1150, file: !164, line: 404, baseType: !1112, size: 64, offset: 64)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1150, file: !164, line: 405, baseType: !1112, size: 64, offset: 128)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1114, file: !164, line: 3374, baseType: !1156, size: 320)
!1156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !164, line: 1384, size: 320, elements: !1157)
!1157 = !{!1158, !1159}
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1156, file: !164, line: 1385, baseType: !1150, size: 192)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1156, file: !164, line: 1386, baseType: !1160, size: 128, offset: 192)
!1160 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1161, line: 58, baseType: !1162)
!1161 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1162 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1161, line: 54, size: 128, elements: !1163)
!1163 = !{!1164, !1165}
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1162, file: !1161, line: 56, baseType: !1064, size: 64)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1162, file: !1161, line: 57, baseType: !1081, size: 64, offset: 64)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1114, file: !164, line: 3375, baseType: !1167, size: 256)
!1167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !164, line: 1397, size: 256, elements: !1168)
!1168 = !{!1169, !1170}
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1167, file: !164, line: 1398, baseType: !1150, size: 192)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1167, file: !164, line: 1399, baseType: !1171, size: 64, offset: 192)
!1171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1172, size: 64)
!1172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1173, line: 52, size: 256, elements: !1174)
!1173 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1174 = !{!1175, !1176, !1177, !1178, !1179, !1180, !1181}
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1172, file: !1173, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1172, file: !1173, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1172, file: !1173, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1172, file: !1173, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1172, file: !1173, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1172, file: !1173, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1172, file: !1173, line: 62, baseType: !1182, size: 192, offset: 64)
!1182 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1064, size: 192, elements: !1183)
!1183 = !{!1184}
!1184 = !DISubrange(count: 3)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1114, file: !164, line: 3376, baseType: !1186, size: 256)
!1186 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !164, line: 1408, size: 256, elements: !1187)
!1187 = !{!1188, !1189}
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1186, file: !164, line: 1409, baseType: !1150, size: 192)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1186, file: !164, line: 1410, baseType: !1190, size: 64, offset: 192)
!1190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1191, size: 64)
!1191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1192, line: 27, size: 192, elements: !1193)
!1192 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1193 = !{!1194, !1195}
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1191, file: !1192, line: 29, baseType: !1160, size: 128)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1191, file: !1192, line: 30, baseType: !5, size: 32, offset: 128)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1114, file: !164, line: 3377, baseType: !1197, size: 256)
!1197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !164, line: 1437, size: 256, elements: !1198)
!1198 = !{!1199, !1200}
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1197, file: !164, line: 1438, baseType: !1150, size: 192)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1197, file: !164, line: 1439, baseType: !1112, size: 64, offset: 192)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1114, file: !164, line: 3378, baseType: !1202, size: 256)
!1202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !164, line: 1418, size: 256, elements: !1203)
!1203 = !{!1204, !1205, !1206}
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1202, file: !164, line: 1419, baseType: !1150, size: 192)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1202, file: !164, line: 1420, baseType: !993, size: 32, offset: 192)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1202, file: !164, line: 1421, baseType: !1207, size: 8, offset: 224)
!1207 = !DICompositeType(tag: DW_TAG_array_type, baseType: !998, size: 8, elements: !1008)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1114, file: !164, line: 3379, baseType: !1209, size: 320)
!1209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !164, line: 1428, size: 320, elements: !1210)
!1210 = !{!1211, !1212, !1213}
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1209, file: !164, line: 1429, baseType: !1150, size: 192)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1209, file: !164, line: 1430, baseType: !1112, size: 64, offset: 192)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1209, file: !164, line: 1431, baseType: !1112, size: 64, offset: 256)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1114, file: !164, line: 3380, baseType: !1215, size: 320)
!1215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !164, line: 1460, size: 320, elements: !1216)
!1216 = !{!1217, !1218}
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1215, file: !164, line: 1461, baseType: !1150, size: 192)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1215, file: !164, line: 1462, baseType: !1219, size: 128, offset: 192)
!1219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1220, line: 31, size: 128, elements: !1221)
!1220 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1221 = !{!1222, !1226, !1227}
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1219, file: !1220, line: 32, baseType: !1223, size: 64)
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1225)
!1225 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1219, file: !1220, line: 33, baseType: !7, size: 32, offset: 64)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1219, file: !1220, line: 34, baseType: !7, size: 32, offset: 96)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1114, file: !164, line: 3381, baseType: !1229, size: 384)
!1229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !164, line: 2507, size: 384, elements: !1230)
!1230 = !{!1231, !1232, !1237, !1238, !1239}
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1229, file: !164, line: 2508, baseType: !1150, size: 192)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1229, file: !164, line: 2509, baseType: !1233, size: 32, offset: 192)
!1233 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1234, line: 58, baseType: !1235)
!1234 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1235 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1236, line: 44, baseType: !7)
!1236 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1229, file: !164, line: 2510, baseType: !7, size: 32, offset: 224)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1229, file: !164, line: 2511, baseType: !1112, size: 64, offset: 256)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1229, file: !164, line: 2512, baseType: !1112, size: 64, offset: 320)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1114, file: !164, line: 3382, baseType: !1241, size: 896)
!1241 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !164, line: 2652, size: 896, elements: !1242)
!1242 = !{!1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275}
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1241, file: !164, line: 2653, baseType: !1229, size: 384)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1241, file: !164, line: 2654, baseType: !1112, size: 64, offset: 384)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1241, file: !164, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1241, file: !164, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1241, file: !164, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1241, file: !164, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1241, file: !164, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1241, file: !164, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1241, file: !164, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1241, file: !164, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1241, file: !164, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1241, file: !164, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1241, file: !164, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1241, file: !164, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1241, file: !164, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1241, file: !164, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1241, file: !164, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1241, file: !164, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1241, file: !164, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1241, file: !164, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1241, file: !164, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1241, file: !164, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1241, file: !164, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1241, file: !164, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1241, file: !164, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1241, file: !164, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1241, file: !164, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1241, file: !164, line: 2703, baseType: !7, size: 32, offset: 512)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1241, file: !164, line: 2705, baseType: !1112, size: 64, offset: 576)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1241, file: !164, line: 2706, baseType: !1112, size: 64, offset: 640)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1241, file: !164, line: 2707, baseType: !1112, size: 64, offset: 704)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1241, file: !164, line: 2708, baseType: !1112, size: 64, offset: 768)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1241, file: !164, line: 2711, baseType: !1276, size: 64, offset: 832)
!1276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1277, size: 64)
!1277 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !164, line: 2711, flags: DIFlagFwdDecl)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1114, file: !164, line: 3383, baseType: !1279, size: 960)
!1279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !164, line: 2756, size: 960, elements: !1280)
!1280 = !{!1281, !1282}
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1279, file: !164, line: 2757, baseType: !1241, size: 896)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1279, file: !164, line: 2758, baseType: !970, size: 64, offset: 896)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1114, file: !164, line: 3384, baseType: !1284, size: 1472)
!1284 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !164, line: 3114, size: 1472, elements: !1285)
!1285 = !{!1286, !1307, !1308, !1309, !1310}
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1284, file: !164, line: 3115, baseType: !1287, size: 1216)
!1287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !164, line: 2984, size: 1216, elements: !1288)
!1288 = !{!1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1287, file: !164, line: 2985, baseType: !1279, size: 960)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1287, file: !164, line: 2986, baseType: !1112, size: 64, offset: 960)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1287, file: !164, line: 2987, baseType: !1112, size: 64, offset: 1024)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1287, file: !164, line: 2988, baseType: !1112, size: 64, offset: 1088)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1287, file: !164, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1287, file: !164, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1287, file: !164, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1287, file: !164, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1287, file: !164, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1287, file: !164, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1287, file: !164, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1287, file: !164, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1287, file: !164, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1287, file: !164, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1287, file: !164, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1287, file: !164, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1287, file: !164, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1287, file: !164, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1284, file: !164, line: 3117, baseType: !1112, size: 64, offset: 1216)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1284, file: !164, line: 3119, baseType: !1112, size: 64, offset: 1280)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1284, file: !164, line: 3121, baseType: !1112, size: 64, offset: 1344)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1284, file: !164, line: 3123, baseType: !1112, size: 64, offset: 1408)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1114, file: !164, line: 3385, baseType: !1312, size: 1088)
!1312 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !164, line: 2874, size: 1088, elements: !1313)
!1313 = !{!1314, !1315, !1316}
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1312, file: !164, line: 2875, baseType: !1279, size: 960)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1312, file: !164, line: 2876, baseType: !970, size: 64, offset: 960)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1312, file: !164, line: 2877, baseType: !1317, size: 64, offset: 1024)
!1317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1318, size: 64)
!1318 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !164, line: 2856, flags: DIFlagFwdDecl)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1114, file: !164, line: 3386, baseType: !1287, size: 1216)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1114, file: !164, line: 3387, baseType: !1321, size: 1280)
!1321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !164, line: 3093, size: 1280, elements: !1322)
!1322 = !{!1323, !1324}
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1321, file: !164, line: 3094, baseType: !1287, size: 1216)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1321, file: !164, line: 3095, baseType: !1317, size: 64, offset: 1216)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1114, file: !164, line: 3388, baseType: !1326, size: 1216)
!1326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !164, line: 2824, size: 1216, elements: !1327)
!1327 = !{!1328, !1329, !1330, !1331, !1332, !1333}
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1326, file: !164, line: 2825, baseType: !1241, size: 896)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1326, file: !164, line: 2827, baseType: !1112, size: 64, offset: 896)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1326, file: !164, line: 2828, baseType: !1112, size: 64, offset: 960)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1326, file: !164, line: 2829, baseType: !1112, size: 64, offset: 1024)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1326, file: !164, line: 2830, baseType: !1112, size: 64, offset: 1088)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1326, file: !164, line: 2831, baseType: !1112, size: 64, offset: 1152)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1114, file: !164, line: 3389, baseType: !1335, size: 1024)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !164, line: 2850, size: 1024, elements: !1336)
!1336 = !{!1337, !1338, !1339}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1335, file: !164, line: 2851, baseType: !1279, size: 960)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1335, file: !164, line: 2852, baseType: !993, size: 32, offset: 960)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1335, file: !164, line: 2853, baseType: !993, size: 32, offset: 992)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1114, file: !164, line: 3390, baseType: !1341, size: 1024)
!1341 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !164, line: 2857, size: 1024, elements: !1342)
!1342 = !{!1343, !1344}
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1341, file: !164, line: 2858, baseType: !1279, size: 960)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1341, file: !164, line: 2859, baseType: !1317, size: 64, offset: 960)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1114, file: !164, line: 3391, baseType: !1346, size: 960)
!1346 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !164, line: 2862, size: 960, elements: !1347)
!1347 = !{!1348}
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1346, file: !164, line: 2863, baseType: !1279, size: 960)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1114, file: !164, line: 3392, baseType: !1350, size: 1472)
!1350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !164, line: 3304, size: 1472, elements: !1351)
!1351 = !{!1352}
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1350, file: !164, line: 3305, baseType: !1284, size: 1472)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1114, file: !164, line: 3393, baseType: !1354, size: 1792)
!1354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !164, line: 3248, size: 1792, elements: !1355)
!1355 = !{!1356, !1357, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664}
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1354, file: !164, line: 3249, baseType: !1284, size: 1472)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1354, file: !164, line: 3251, baseType: !1358, size: 64, offset: 1472)
!1358 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1359, size: 64)
!1359 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1360, line: 463, size: 1152, elements: !1361)
!1360 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1361 = !{!1362, !1365, !1525, !1526, !1529, !1588, !1589, !1590, !1591, !1592, !1593, !1617, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643}
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1359, file: !1360, line: 464, baseType: !1363, size: 64)
!1363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1364, size: 64)
!1364 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1360, line: 464, flags: DIFlagFwdDecl)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1359, file: !1360, line: 467, baseType: !1366, size: 64, offset: 64)
!1366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1367, size: 64)
!1367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !1368)
!1368 = !{!1369, !1500, !1501, !1514, !1515, !1516, !1517, !1518, !1519, !1521, !1523, !1524}
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1367, file: !135, line: 377, baseType: !1370, size: 64)
!1370 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !391, line: 111, baseType: !1371)
!1371 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1372, size: 64)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !1373)
!1373 = !{!1374, !1409, !1410, !1411, !1470, !1474, !1475, !1476, !1494, !1495, !1496, !1497, !1498, !1499}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1372, file: !135, line: 219, baseType: !1375, size: 64)
!1375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1376, size: 64)
!1376 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !1377)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !1378)
!1378 = !{!1379}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1377, file: !135, line: 151, baseType: !1380, size: 128)
!1380 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !1381)
!1381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !1382)
!1382 = !{!1383, !1384, !1385}
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1381, file: !135, line: 150, baseType: !7, size: 32)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1381, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1381, file: !135, line: 150, baseType: !1386, size: 64, offset: 64)
!1386 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1387, size: 64, elements: !1008)
!1387 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !391, line: 108, baseType: !1388)
!1388 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1389, size: 64)
!1389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !1390)
!1390 = !{!1391, !1392, !1393, !1401, !1402, !1403, !1404, !1405, !1406, !1407}
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1389, file: !135, line: 124, baseType: !1371, size: 64)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1389, file: !135, line: 125, baseType: !1371, size: 64, offset: 64)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1389, file: !135, line: 131, baseType: !1394, size: 64, offset: 128)
!1394 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !1395)
!1395 = !{!1396, !1400}
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1394, file: !135, line: 129, baseType: !1397, size: 64)
!1397 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !391, line: 66, baseType: !1398)
!1398 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1399, size: 64)
!1399 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !391, line: 65, flags: DIFlagFwdDecl)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1394, file: !135, line: 130, baseType: !970, size: 64)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1389, file: !135, line: 134, baseType: !1102, size: 64, offset: 192)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1389, file: !135, line: 137, baseType: !1112, size: 64, offset: 256)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1389, file: !135, line: 138, baseType: !1233, size: 32, offset: 320)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1389, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1389, file: !135, line: 144, baseType: !993, size: 32, offset: 384)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1389, file: !135, line: 145, baseType: !993, size: 32, offset: 416)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1389, file: !135, line: 146, baseType: !1408, size: 64, offset: 448)
!1408 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !1081)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1372, file: !135, line: 220, baseType: !1375, size: 64, offset: 64)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1372, file: !135, line: 223, baseType: !1102, size: 64, offset: 128)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1372, file: !135, line: 226, baseType: !1412, size: 64, offset: 192)
!1412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1413, size: 64)
!1413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !146, line: 100, size: 1216, elements: !1414)
!1414 = !{!1415, !1416, !1417, !1418, !1419, !1424, !1425, !1426, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1460, !1468, !1469}
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1413, file: !146, line: 102, baseType: !993, size: 32)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1413, file: !146, line: 105, baseType: !7, size: 32, offset: 32)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1413, file: !146, line: 108, baseType: !1371, size: 64, offset: 64)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1413, file: !146, line: 111, baseType: !1371, size: 64, offset: 128)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1413, file: !146, line: 114, baseType: !1420, size: 64, offset: 192)
!1420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !146, line: 41, size: 64, elements: !1421)
!1421 = !{!1422, !1423}
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1420, file: !146, line: 42, baseType: !145, size: 32)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1420, file: !146, line: 43, baseType: !7, size: 32, offset: 32)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1413, file: !146, line: 117, baseType: !7, size: 32, offset: 256)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1413, file: !146, line: 120, baseType: !7, size: 32, offset: 288)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1413, file: !146, line: 123, baseType: !1427, size: 64, offset: 320)
!1427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1428, size: 64)
!1428 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !146, line: 87, baseType: !1429)
!1429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !146, line: 87, size: 128, elements: !1430)
!1430 = !{!1431}
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1429, file: !146, line: 87, baseType: !1432, size: 128)
!1432 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !146, line: 85, baseType: !1433)
!1433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !146, line: 85, size: 128, elements: !1434)
!1434 = !{!1435, !1436, !1437}
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1433, file: !146, line: 85, baseType: !7, size: 32)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1433, file: !146, line: 85, baseType: !7, size: 32, offset: 32)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1433, file: !146, line: 85, baseType: !1438, size: 64, offset: 64)
!1438 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1439, size: 64, elements: !1008)
!1439 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !146, line: 84, baseType: !1412)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1413, file: !146, line: 126, baseType: !1412, size: 64, offset: 384)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1413, file: !146, line: 129, baseType: !1412, size: 64, offset: 448)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1413, file: !146, line: 132, baseType: !1102, size: 64, offset: 512)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1413, file: !146, line: 139, baseType: !1112, size: 64, offset: 576)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1413, file: !146, line: 143, baseType: !1160, size: 128, offset: 640)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1413, file: !146, line: 146, baseType: !1160, size: 128, offset: 768)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1413, file: !146, line: 148, baseType: !1225, size: 8, offset: 896)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1413, file: !146, line: 149, baseType: !1225, size: 8, offset: 904)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1413, file: !146, line: 153, baseType: !154, size: 32, offset: 928)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1413, file: !146, line: 156, baseType: !1450, size: 64, offset: 960)
!1450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1451, size: 64)
!1451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !146, line: 48, size: 320, elements: !1452)
!1452 = !{!1453, !1457, !1458, !1459}
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1451, file: !146, line: 50, baseType: !1454, size: 64)
!1454 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !391, line: 58, baseType: !1455)
!1455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1456, size: 64)
!1456 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !391, line: 57, flags: DIFlagFwdDecl)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1451, file: !146, line: 59, baseType: !1160, size: 128, offset: 64)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1451, file: !146, line: 64, baseType: !1225, size: 8, offset: 192)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1451, file: !146, line: 67, baseType: !1450, size: 64, offset: 256)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1413, file: !146, line: 159, baseType: !1461, size: 64, offset: 1024)
!1461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1462, size: 64)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !146, line: 72, size: 256, elements: !1463)
!1463 = !{!1464, !1465, !1466, !1467}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1462, file: !146, line: 74, baseType: !1388, size: 64)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1462, file: !146, line: 77, baseType: !1461, size: 64, offset: 64)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1462, file: !146, line: 78, baseType: !1461, size: 64, offset: 128)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1462, file: !146, line: 81, baseType: !1461, size: 64, offset: 192)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1413, file: !146, line: 162, baseType: !1225, size: 8, offset: 1088)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1413, file: !146, line: 166, baseType: !1112, size: 64, offset: 1152)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1372, file: !135, line: 229, baseType: !1471, size: 128, offset: 256)
!1471 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1472, size: 128, elements: !1065)
!1472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1473, size: 64)
!1473 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1372, file: !135, line: 232, baseType: !1371, size: 64, offset: 384)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1372, file: !135, line: 233, baseType: !1371, size: 64, offset: 448)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1372, file: !135, line: 238, baseType: !1477, size: 64, offset: 512)
!1477 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !1478)
!1478 = !{!1479, !1485}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1477, file: !135, line: 236, baseType: !1480, size: 64)
!1480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1481, size: 64)
!1481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !1482)
!1482 = !{!1483, !1484}
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1481, file: !135, line: 275, baseType: !1397, size: 64)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1481, file: !135, line: 278, baseType: !1397, size: 64, offset: 64)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1477, file: !135, line: 237, baseType: !1486, size: 64)
!1486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1487, size: 64)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !1488)
!1488 = !{!1489, !1490, !1491, !1492, !1493}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1487, file: !135, line: 261, baseType: !970, size: 64)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1487, file: !135, line: 262, baseType: !970, size: 64, offset: 64)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1487, file: !135, line: 266, baseType: !970, size: 64, offset: 128)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1487, file: !135, line: 267, baseType: !970, size: 64, offset: 192)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1487, file: !135, line: 270, baseType: !993, size: 32, offset: 256)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1372, file: !135, line: 241, baseType: !1408, size: 64, offset: 576)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1372, file: !135, line: 244, baseType: !993, size: 32, offset: 640)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1372, file: !135, line: 247, baseType: !993, size: 32, offset: 672)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1372, file: !135, line: 250, baseType: !993, size: 32, offset: 704)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1372, file: !135, line: 253, baseType: !993, size: 32, offset: 736)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1372, file: !135, line: 256, baseType: !993, size: 32, offset: 768)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1367, file: !135, line: 378, baseType: !1370, size: 64, offset: 64)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1367, file: !135, line: 381, baseType: !1502, size: 64, offset: 128)
!1502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1503, size: 64)
!1503 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !1504)
!1504 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !1505)
!1505 = !{!1506}
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1504, file: !135, line: 282, baseType: !1507, size: 128)
!1507 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !1508)
!1508 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !1509)
!1509 = !{!1510, !1511, !1512}
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1508, file: !135, line: 281, baseType: !7, size: 32)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1508, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1508, file: !135, line: 281, baseType: !1513, size: 64, offset: 64)
!1513 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1370, size: 64, elements: !1008)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1367, file: !135, line: 384, baseType: !993, size: 32, offset: 192)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1367, file: !135, line: 387, baseType: !993, size: 32, offset: 224)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1367, file: !135, line: 390, baseType: !993, size: 32, offset: 256)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1367, file: !135, line: 394, baseType: !1502, size: 64, offset: 320)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1367, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1367, file: !135, line: 399, baseType: !1520, size: 64, offset: 416)
!1520 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !1065)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1367, file: !135, line: 402, baseType: !1522, size: 64, offset: 480)
!1522 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1065)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1367, file: !135, line: 406, baseType: !993, size: 32, offset: 544)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1367, file: !135, line: 409, baseType: !993, size: 32, offset: 576)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1359, file: !1360, line: 470, baseType: !1398, size: 64, offset: 128)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1359, file: !1360, line: 473, baseType: !1527, size: 64, offset: 192)
!1527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1528, size: 64)
!1528 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1360, line: 166, flags: DIFlagFwdDecl)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1359, file: !1360, line: 476, baseType: !1530, size: 64, offset: 256)
!1530 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1531, size: 64)
!1531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !146, line: 187, size: 256, elements: !1532)
!1532 = !{!1533, !1534, !1535, !1587}
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1531, file: !146, line: 189, baseType: !993, size: 32)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1531, file: !146, line: 192, baseType: !1427, size: 64, offset: 64)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1531, file: !146, line: 197, baseType: !1536, size: 64, offset: 128)
!1536 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1537, line: 144, baseType: !1538)
!1537 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1539, size: 64)
!1539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1537, line: 100, size: 896, elements: !1540)
!1540 = !{!1541, !1549, !1554, !1559, !1561, !1564, !1565, !1566, !1567, !1568, !1573, !1575, !1576, !1581, !1586}
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1539, file: !1537, line: 102, baseType: !1542, size: 64)
!1542 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1537, line: 52, baseType: !1543)
!1543 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1544, size: 64)
!1544 = !DISubroutineType(types: !1545)
!1545 = !{!1546, !1547}
!1546 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1537, line: 47, baseType: !7)
!1547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1548, size: 64)
!1548 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1539, file: !1537, line: 105, baseType: !1550, size: 64, offset: 64)
!1550 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1537, line: 59, baseType: !1551)
!1551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1552, size: 64)
!1552 = !DISubroutineType(types: !1553)
!1553 = !{!993, !1547, !1547}
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1539, file: !1537, line: 108, baseType: !1555, size: 64, offset: 128)
!1555 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1537, line: 63, baseType: !1556)
!1556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1557, size: 64)
!1557 = !DISubroutineType(types: !1558)
!1558 = !{null, !1102}
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1539, file: !1537, line: 111, baseType: !1560, size: 64, offset: 192)
!1560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1102, size: 64)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1539, file: !1537, line: 114, baseType: !1562, size: 64, offset: 256)
!1562 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1563, line: 46, baseType: !1064)
!1563 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1539, file: !1537, line: 117, baseType: !1562, size: 64, offset: 320)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1539, file: !1537, line: 120, baseType: !1562, size: 64, offset: 384)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1539, file: !1537, line: 124, baseType: !7, size: 32, offset: 448)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1539, file: !1537, line: 128, baseType: !7, size: 32, offset: 480)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1539, file: !1537, line: 131, baseType: !1569, size: 64, offset: 512)
!1569 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1537, line: 75, baseType: !1570)
!1570 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1571, size: 64)
!1571 = !DISubroutineType(types: !1572)
!1572 = !{!1102, !1562, !1562}
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1539, file: !1537, line: 132, baseType: !1574, size: 64, offset: 576)
!1574 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1537, line: 78, baseType: !1556)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1539, file: !1537, line: 135, baseType: !1102, size: 64, offset: 640)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1539, file: !1537, line: 136, baseType: !1577, size: 64, offset: 704)
!1577 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1537, line: 82, baseType: !1578)
!1578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1579, size: 64)
!1579 = !DISubroutineType(types: !1580)
!1580 = !{!1102, !1102, !1562, !1562}
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1539, file: !1537, line: 137, baseType: !1582, size: 64, offset: 768)
!1582 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1537, line: 83, baseType: !1583)
!1583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1584, size: 64)
!1584 = !DISubroutineType(types: !1585)
!1585 = !{null, !1102, !1102}
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1539, file: !1537, line: 141, baseType: !7, size: 32, offset: 832)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1531, file: !146, line: 200, baseType: !1412, size: 64, offset: 192)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1359, file: !1360, line: 479, baseType: !1536, size: 64, offset: 320)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1359, file: !1360, line: 484, baseType: !1112, size: 64, offset: 384)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1359, file: !1360, line: 488, baseType: !1112, size: 64, offset: 448)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1359, file: !1360, line: 493, baseType: !1112, size: 64, offset: 512)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1359, file: !1360, line: 496, baseType: !1112, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1359, file: !1360, line: 501, baseType: !1594, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1595, size: 64)
!1595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !159, line: 2355, size: 576, elements: !1596)
!1596 = !{!1597, !1600, !1601, !1602, !1603, !1605, !1606, !1611, !1612, !1613, !1614, !1615, !1616}
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1595, file: !159, line: 2356, baseType: !1598, size: 64)
!1598 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1599, size: 64)
!1599 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !159, line: 2356, flags: DIFlagFwdDecl)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1595, file: !159, line: 2357, baseType: !996, size: 64, offset: 64)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1595, file: !159, line: 2358, baseType: !993, size: 32, offset: 128)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1595, file: !159, line: 2359, baseType: !993, size: 32, offset: 160)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1595, file: !159, line: 2360, baseType: !1604, size: 128, offset: 192)
!1604 = !DICompositeType(tag: DW_TAG_array_type, baseType: !993, size: 128, elements: !1091)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1595, file: !159, line: 2364, baseType: !993, size: 32, offset: 320)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1595, file: !159, line: 2367, baseType: !1607, size: 128, offset: 384)
!1607 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !159, line: 2349, size: 128, elements: !1608)
!1608 = !{!1609, !1610}
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1607, file: !159, line: 2351, baseType: !970, size: 64)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1607, file: !159, line: 2352, baseType: !1081, size: 64, offset: 64)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1595, file: !159, line: 2371, baseType: !158, size: 32, offset: 512)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1595, file: !159, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1595, file: !159, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1595, file: !159, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1595, file: !159, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1595, file: !159, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1359, file: !1360, line: 504, baseType: !1618, size: 64, offset: 704)
!1618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1619, size: 64)
!1619 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1360, line: 504, flags: DIFlagFwdDecl)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1359, file: !1360, line: 507, baseType: !1536, size: 64, offset: 768)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1359, file: !1360, line: 510, baseType: !993, size: 32, offset: 832)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1359, file: !1360, line: 513, baseType: !993, size: 32, offset: 864)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1359, file: !1360, line: 516, baseType: !1233, size: 32, offset: 896)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1359, file: !1360, line: 519, baseType: !1233, size: 32, offset: 928)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1359, file: !1360, line: 522, baseType: !7, size: 32, offset: 960)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1359, file: !1360, line: 523, baseType: !7, size: 32, offset: 992)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1359, file: !1360, line: 528, baseType: !996, size: 64, offset: 1024)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1359, file: !1360, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1359, file: !1360, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1359, file: !1360, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1359, file: !1360, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1359, file: !1360, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1359, file: !1360, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1359, file: !1360, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1359, file: !1360, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1359, file: !1360, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1359, file: !1360, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1359, file: !1360, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1359, file: !1360, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1359, file: !1360, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1359, file: !1360, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1359, file: !1360, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1359, file: !1360, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1354, file: !164, line: 3254, baseType: !1112, size: 64, offset: 1536)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1354, file: !164, line: 3257, baseType: !1112, size: 64, offset: 1600)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1354, file: !164, line: 3258, baseType: !1112, size: 64, offset: 1664)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1354, file: !164, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1354, file: !164, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1354, file: !164, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1354, file: !164, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1354, file: !164, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1354, file: !164, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1354, file: !164, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1354, file: !164, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1354, file: !164, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1354, file: !164, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1354, file: !164, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1354, file: !164, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1354, file: !164, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1354, file: !164, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1354, file: !164, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1354, file: !164, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1354, file: !164, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1354, file: !164, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1114, file: !164, line: 3394, baseType: !1666, size: 1344)
!1666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !164, line: 2279, size: 1344, elements: !1667)
!1667 = !{!1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1693, !1694, !1695, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711}
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1666, file: !164, line: 2280, baseType: !1150, size: 192)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1666, file: !164, line: 2281, baseType: !1112, size: 64, offset: 192)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1666, file: !164, line: 2282, baseType: !1112, size: 64, offset: 256)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1666, file: !164, line: 2283, baseType: !1112, size: 64, offset: 320)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1666, file: !164, line: 2284, baseType: !1112, size: 64, offset: 384)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1666, file: !164, line: 2285, baseType: !7, size: 32, offset: 448)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1666, file: !164, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1666, file: !164, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1666, file: !164, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1666, file: !164, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1666, file: !164, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1666, file: !164, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1666, file: !164, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1666, file: !164, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1666, file: !164, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1666, file: !164, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1666, file: !164, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1666, file: !164, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1666, file: !164, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1666, file: !164, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1666, file: !164, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1666, file: !164, line: 2305, baseType: !7, size: 32, offset: 512)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1666, file: !164, line: 2306, baseType: !1691, size: 32, offset: 544)
!1691 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1692, line: 31, baseType: !993)
!1692 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1666, file: !164, line: 2307, baseType: !1112, size: 64, offset: 576)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1666, file: !164, line: 2308, baseType: !1112, size: 64, offset: 640)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1666, file: !164, line: 2314, baseType: !1696, size: 64, offset: 704)
!1696 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !164, line: 2309, size: 64, elements: !1697)
!1697 = !{!1698, !1699, !1700}
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1696, file: !164, line: 2310, baseType: !993, size: 32)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1696, file: !164, line: 2311, baseType: !996, size: 64)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1696, file: !164, line: 2312, baseType: !1701, size: 64)
!1701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1702, size: 64)
!1702 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !164, line: 2277, flags: DIFlagFwdDecl)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1666, file: !164, line: 2315, baseType: !1112, size: 64, offset: 768)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1666, file: !164, line: 2316, baseType: !1112, size: 64, offset: 832)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1666, file: !164, line: 2317, baseType: !1112, size: 64, offset: 896)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1666, file: !164, line: 2318, baseType: !1112, size: 64, offset: 960)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1666, file: !164, line: 2319, baseType: !1112, size: 64, offset: 1024)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1666, file: !164, line: 2320, baseType: !1112, size: 64, offset: 1088)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1666, file: !164, line: 2321, baseType: !1112, size: 64, offset: 1152)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1666, file: !164, line: 2322, baseType: !1112, size: 64, offset: 1216)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1666, file: !164, line: 2324, baseType: !1712, size: 64, offset: 1280)
!1712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1713, size: 64)
!1713 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !164, line: 2324, flags: DIFlagFwdDecl)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1114, file: !164, line: 3395, baseType: !1715, size: 320)
!1715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !164, line: 1469, size: 320, elements: !1716)
!1716 = !{!1717, !1718, !1719}
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1715, file: !164, line: 1470, baseType: !1150, size: 192)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1715, file: !164, line: 1471, baseType: !1112, size: 64, offset: 192)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1715, file: !164, line: 1472, baseType: !1112, size: 64, offset: 256)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1114, file: !164, line: 3396, baseType: !1721, size: 320)
!1721 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !164, line: 1482, size: 320, elements: !1722)
!1722 = !{!1723, !1724, !1725}
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1721, file: !164, line: 1483, baseType: !1150, size: 192)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1721, file: !164, line: 1484, baseType: !993, size: 32, offset: 192)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1721, file: !164, line: 1485, baseType: !1726, size: 64, offset: 256)
!1726 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1112, size: 64, elements: !1008)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1114, file: !164, line: 3397, baseType: !1728, size: 384)
!1728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !164, line: 1829, size: 384, elements: !1729)
!1729 = !{!1730, !1731, !1732, !1733}
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1728, file: !164, line: 1830, baseType: !1150, size: 192)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1728, file: !164, line: 1831, baseType: !1233, size: 32, offset: 192)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1728, file: !164, line: 1832, baseType: !1112, size: 64, offset: 256)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1728, file: !164, line: 1835, baseType: !1726, size: 64, offset: 320)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1114, file: !164, line: 3398, baseType: !1735, size: 704)
!1735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !164, line: 1898, size: 704, elements: !1736)
!1736 = !{!1737, !1738, !1739, !1740, !1741, !1744}
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1735, file: !164, line: 1899, baseType: !1150, size: 192)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1735, file: !164, line: 1902, baseType: !1112, size: 64, offset: 192)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1735, file: !164, line: 1905, baseType: !1454, size: 64, offset: 256)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1735, file: !164, line: 1908, baseType: !7, size: 32, offset: 320)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1735, file: !164, line: 1911, baseType: !1742, size: 64, offset: 384)
!1742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1743, size: 64)
!1743 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !164, line: 1876, flags: DIFlagFwdDecl)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1735, file: !164, line: 1914, baseType: !1745, size: 256, offset: 448)
!1745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !164, line: 1883, size: 256, elements: !1746)
!1746 = !{!1747, !1749, !1750, !1755}
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1745, file: !164, line: 1884, baseType: !1748, size: 64)
!1748 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1745, size: 64)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1745, file: !164, line: 1885, baseType: !1748, size: 64, offset: 64)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1745, file: !164, line: 1891, baseType: !1751, size: 64, offset: 128)
!1751 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1745, file: !164, line: 1891, size: 64, elements: !1752)
!1752 = !{!1753, !1754}
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1751, file: !164, line: 1891, baseType: !1454, size: 64)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1751, file: !164, line: 1891, baseType: !1112, size: 64)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1745, file: !164, line: 1892, baseType: !1756, size: 64, offset: 192)
!1756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1112, size: 64)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1114, file: !164, line: 3399, baseType: !1758, size: 704)
!1758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !164, line: 2008, size: 704, elements: !1759)
!1759 = !{!1760, !1761, !1762, !1763, !1764, !1765, !1777, !1778, !1779, !1780, !1781}
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1758, file: !164, line: 2009, baseType: !1150, size: 192)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1758, file: !164, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1758, file: !164, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1758, file: !164, line: 2014, baseType: !1233, size: 32, offset: 224)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1758, file: !164, line: 2016, baseType: !1112, size: 64, offset: 256)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1758, file: !164, line: 2017, baseType: !1766, size: 64, offset: 320)
!1766 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1767, size: 64)
!1767 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !164, line: 183, baseType: !1768)
!1768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !164, line: 183, size: 128, elements: !1769)
!1769 = !{!1770}
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1768, file: !164, line: 183, baseType: !1771, size: 128)
!1771 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !164, line: 182, baseType: !1772)
!1772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !164, line: 182, size: 128, elements: !1773)
!1773 = !{!1774, !1775, !1776}
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1772, file: !164, line: 182, baseType: !7, size: 32)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1772, file: !164, line: 182, baseType: !7, size: 32, offset: 32)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1772, file: !164, line: 182, baseType: !1726, size: 64, offset: 64)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1758, file: !164, line: 2019, baseType: !1112, size: 64, offset: 384)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1758, file: !164, line: 2020, baseType: !1112, size: 64, offset: 448)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1758, file: !164, line: 2021, baseType: !1112, size: 64, offset: 512)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1758, file: !164, line: 2022, baseType: !1112, size: 64, offset: 576)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1758, file: !164, line: 2023, baseType: !1112, size: 64, offset: 640)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1114, file: !164, line: 3400, baseType: !1783, size: 832)
!1783 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !164, line: 2430, size: 832, elements: !1784)
!1784 = !{!1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794}
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1783, file: !164, line: 2431, baseType: !1150, size: 192)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1783, file: !164, line: 2433, baseType: !1112, size: 64, offset: 192)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1783, file: !164, line: 2434, baseType: !1112, size: 64, offset: 256)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1783, file: !164, line: 2435, baseType: !1112, size: 64, offset: 320)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1783, file: !164, line: 2436, baseType: !1112, size: 64, offset: 384)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1783, file: !164, line: 2437, baseType: !1766, size: 64, offset: 448)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1783, file: !164, line: 2438, baseType: !1112, size: 64, offset: 512)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1783, file: !164, line: 2440, baseType: !1112, size: 64, offset: 576)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1783, file: !164, line: 2441, baseType: !1112, size: 64, offset: 640)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1783, file: !164, line: 2443, baseType: !1795, size: 128, offset: 704)
!1795 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !164, line: 182, baseType: !1796)
!1796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !164, line: 182, size: 128, elements: !1797)
!1797 = !{!1798}
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1796, file: !164, line: 182, baseType: !1771, size: 128)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1114, file: !164, line: 3401, baseType: !1800, size: 320)
!1800 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !164, line: 3327, size: 320, elements: !1801)
!1801 = !{!1802, !1803, !1810}
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1800, file: !164, line: 3329, baseType: !1150, size: 192)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1800, file: !164, line: 3330, baseType: !1804, size: 64, offset: 192)
!1804 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1805, size: 64)
!1805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !164, line: 3320, size: 192, elements: !1806)
!1806 = !{!1807, !1808, !1809}
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1805, file: !164, line: 3322, baseType: !1804, size: 64)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1805, file: !164, line: 3323, baseType: !1804, size: 64, offset: 64)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1805, file: !164, line: 3324, baseType: !1112, size: 64, offset: 128)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1800, file: !164, line: 3331, baseType: !1804, size: 64, offset: 256)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1114, file: !164, line: 3402, baseType: !1812, size: 256)
!1812 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !164, line: 1540, size: 256, elements: !1813)
!1813 = !{!1814, !1815}
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1812, file: !164, line: 1541, baseType: !1150, size: 192)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1812, file: !164, line: 1542, baseType: !1816, size: 64, offset: 192)
!1816 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1817, size: 64)
!1817 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !164, line: 1538, baseType: !1818)
!1818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !164, line: 1538, size: 192, elements: !1819)
!1819 = !{!1820}
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1818, file: !164, line: 1538, baseType: !1821, size: 192)
!1821 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !164, line: 1537, baseType: !1822)
!1822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !164, line: 1537, size: 192, elements: !1823)
!1823 = !{!1824, !1825, !1826}
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1822, file: !164, line: 1537, baseType: !7, size: 32)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1822, file: !164, line: 1537, baseType: !7, size: 32, offset: 32)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1822, file: !164, line: 1537, baseType: !1827, size: 128, offset: 64)
!1827 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1828, size: 128, elements: !1008)
!1828 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !164, line: 1535, baseType: !1829)
!1829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !164, line: 1532, size: 128, elements: !1830)
!1830 = !{!1831, !1832}
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1829, file: !164, line: 1533, baseType: !1112, size: 64)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1829, file: !164, line: 1534, baseType: !1112, size: 64, offset: 64)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1114, file: !164, line: 3403, baseType: !1834, size: 512)
!1834 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !164, line: 1938, size: 512, elements: !1835)
!1835 = !{!1836, !1837, !1838, !1839, !1845, !1846, !1847}
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1834, file: !164, line: 1939, baseType: !1150, size: 192)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1834, file: !164, line: 1940, baseType: !1233, size: 32, offset: 192)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1834, file: !164, line: 1941, baseType: !163, size: 32, offset: 224)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1834, file: !164, line: 1946, baseType: !1840, size: 32, offset: 256)
!1840 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !164, line: 1942, size: 32, elements: !1841)
!1841 = !{!1842, !1843, !1844}
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1840, file: !164, line: 1943, baseType: !182, size: 32)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1840, file: !164, line: 1944, baseType: !189, size: 32)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1840, file: !164, line: 1945, baseType: !196, size: 32)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1834, file: !164, line: 1950, baseType: !1397, size: 64, offset: 320)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1834, file: !164, line: 1951, baseType: !1397, size: 64, offset: 384)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1834, file: !164, line: 1953, baseType: !1726, size: 64, offset: 448)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1114, file: !164, line: 3404, baseType: !1849, size: 1664)
!1849 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !164, line: 3337, size: 1664, elements: !1850)
!1850 = !{!1851, !1852}
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1849, file: !164, line: 3338, baseType: !1150, size: 192)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1849, file: !164, line: 3341, baseType: !1853, size: 1472, offset: 192)
!1853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1854, line: 410, size: 1472, elements: !1855)
!1854 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1855 = !{!1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019}
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1853, file: !1854, line: 412, baseType: !993, size: 32)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1853, file: !1854, line: 413, baseType: !993, size: 32, offset: 32)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1853, file: !1854, line: 414, baseType: !993, size: 32, offset: 64)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1853, file: !1854, line: 415, baseType: !993, size: 32, offset: 96)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1853, file: !1854, line: 416, baseType: !993, size: 32, offset: 128)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1853, file: !1854, line: 417, baseType: !993, size: 32, offset: 160)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1853, file: !1854, line: 418, baseType: !1225, size: 8, offset: 192)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1853, file: !1854, line: 419, baseType: !1225, size: 8, offset: 200)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1853, file: !1854, line: 420, baseType: !1865, size: 8, offset: 208)
!1865 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1853, file: !1854, line: 421, baseType: !1865, size: 8, offset: 216)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1853, file: !1854, line: 422, baseType: !1865, size: 8, offset: 224)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1853, file: !1854, line: 423, baseType: !1865, size: 8, offset: 232)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1853, file: !1854, line: 424, baseType: !1865, size: 8, offset: 240)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1853, file: !1854, line: 425, baseType: !1865, size: 8, offset: 248)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1853, file: !1854, line: 426, baseType: !1865, size: 8, offset: 256)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1853, file: !1854, line: 427, baseType: !1865, size: 8, offset: 264)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1853, file: !1854, line: 428, baseType: !1865, size: 8, offset: 272)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1853, file: !1854, line: 429, baseType: !1865, size: 8, offset: 280)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1853, file: !1854, line: 430, baseType: !1865, size: 8, offset: 288)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1853, file: !1854, line: 431, baseType: !1865, size: 8, offset: 296)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1853, file: !1854, line: 432, baseType: !1865, size: 8, offset: 304)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1853, file: !1854, line: 433, baseType: !1865, size: 8, offset: 312)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1853, file: !1854, line: 434, baseType: !1865, size: 8, offset: 320)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1853, file: !1854, line: 435, baseType: !1865, size: 8, offset: 328)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1853, file: !1854, line: 436, baseType: !1865, size: 8, offset: 336)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1853, file: !1854, line: 437, baseType: !1865, size: 8, offset: 344)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1853, file: !1854, line: 438, baseType: !1865, size: 8, offset: 352)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1853, file: !1854, line: 439, baseType: !1865, size: 8, offset: 360)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1853, file: !1854, line: 440, baseType: !1865, size: 8, offset: 368)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1853, file: !1854, line: 441, baseType: !1865, size: 8, offset: 376)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1853, file: !1854, line: 442, baseType: !1865, size: 8, offset: 384)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1853, file: !1854, line: 443, baseType: !1865, size: 8, offset: 392)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1853, file: !1854, line: 444, baseType: !1865, size: 8, offset: 400)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1853, file: !1854, line: 445, baseType: !1865, size: 8, offset: 408)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1853, file: !1854, line: 446, baseType: !1865, size: 8, offset: 416)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1853, file: !1854, line: 447, baseType: !1865, size: 8, offset: 424)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1853, file: !1854, line: 448, baseType: !1865, size: 8, offset: 432)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1853, file: !1854, line: 449, baseType: !1865, size: 8, offset: 440)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1853, file: !1854, line: 450, baseType: !1865, size: 8, offset: 448)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1853, file: !1854, line: 451, baseType: !1865, size: 8, offset: 456)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1853, file: !1854, line: 452, baseType: !1865, size: 8, offset: 464)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1853, file: !1854, line: 453, baseType: !1865, size: 8, offset: 472)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1853, file: !1854, line: 454, baseType: !1865, size: 8, offset: 480)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1853, file: !1854, line: 455, baseType: !1865, size: 8, offset: 488)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1853, file: !1854, line: 456, baseType: !1865, size: 8, offset: 496)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1853, file: !1854, line: 457, baseType: !1865, size: 8, offset: 504)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1853, file: !1854, line: 458, baseType: !1865, size: 8, offset: 512)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1853, file: !1854, line: 459, baseType: !1865, size: 8, offset: 520)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1853, file: !1854, line: 460, baseType: !1865, size: 8, offset: 528)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1853, file: !1854, line: 461, baseType: !1865, size: 8, offset: 536)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1853, file: !1854, line: 462, baseType: !1865, size: 8, offset: 544)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1853, file: !1854, line: 463, baseType: !1865, size: 8, offset: 552)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1853, file: !1854, line: 464, baseType: !1865, size: 8, offset: 560)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1853, file: !1854, line: 465, baseType: !1865, size: 8, offset: 568)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1853, file: !1854, line: 466, baseType: !1865, size: 8, offset: 576)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1853, file: !1854, line: 467, baseType: !1865, size: 8, offset: 584)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1853, file: !1854, line: 468, baseType: !1865, size: 8, offset: 592)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1853, file: !1854, line: 469, baseType: !1865, size: 8, offset: 600)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1853, file: !1854, line: 470, baseType: !1865, size: 8, offset: 608)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1853, file: !1854, line: 471, baseType: !1865, size: 8, offset: 616)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1853, file: !1854, line: 472, baseType: !1865, size: 8, offset: 624)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1853, file: !1854, line: 473, baseType: !1865, size: 8, offset: 632)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1853, file: !1854, line: 474, baseType: !1865, size: 8, offset: 640)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1853, file: !1854, line: 475, baseType: !1865, size: 8, offset: 648)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1853, file: !1854, line: 476, baseType: !1865, size: 8, offset: 656)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1853, file: !1854, line: 477, baseType: !1865, size: 8, offset: 664)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1853, file: !1854, line: 478, baseType: !1865, size: 8, offset: 672)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1853, file: !1854, line: 479, baseType: !1865, size: 8, offset: 680)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1853, file: !1854, line: 480, baseType: !1865, size: 8, offset: 688)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1853, file: !1854, line: 481, baseType: !1865, size: 8, offset: 696)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1853, file: !1854, line: 482, baseType: !1865, size: 8, offset: 704)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1853, file: !1854, line: 483, baseType: !1865, size: 8, offset: 712)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1853, file: !1854, line: 484, baseType: !1865, size: 8, offset: 720)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1853, file: !1854, line: 485, baseType: !1865, size: 8, offset: 728)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1853, file: !1854, line: 486, baseType: !1865, size: 8, offset: 736)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1853, file: !1854, line: 487, baseType: !1865, size: 8, offset: 744)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1853, file: !1854, line: 488, baseType: !1865, size: 8, offset: 752)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1853, file: !1854, line: 489, baseType: !1865, size: 8, offset: 760)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1853, file: !1854, line: 490, baseType: !1865, size: 8, offset: 768)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1853, file: !1854, line: 491, baseType: !1865, size: 8, offset: 776)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1853, file: !1854, line: 492, baseType: !1865, size: 8, offset: 784)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1853, file: !1854, line: 493, baseType: !1865, size: 8, offset: 792)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1853, file: !1854, line: 494, baseType: !1865, size: 8, offset: 800)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1853, file: !1854, line: 495, baseType: !1865, size: 8, offset: 808)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1853, file: !1854, line: 496, baseType: !1865, size: 8, offset: 816)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1853, file: !1854, line: 497, baseType: !1865, size: 8, offset: 824)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1853, file: !1854, line: 498, baseType: !1865, size: 8, offset: 832)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1853, file: !1854, line: 499, baseType: !1865, size: 8, offset: 840)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1853, file: !1854, line: 500, baseType: !1865, size: 8, offset: 848)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1853, file: !1854, line: 501, baseType: !1865, size: 8, offset: 856)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1853, file: !1854, line: 502, baseType: !1865, size: 8, offset: 864)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1853, file: !1854, line: 503, baseType: !1865, size: 8, offset: 872)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1853, file: !1854, line: 504, baseType: !1865, size: 8, offset: 880)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1853, file: !1854, line: 505, baseType: !1865, size: 8, offset: 888)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1853, file: !1854, line: 506, baseType: !1865, size: 8, offset: 896)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1853, file: !1854, line: 507, baseType: !1865, size: 8, offset: 904)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1853, file: !1854, line: 508, baseType: !1865, size: 8, offset: 912)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1853, file: !1854, line: 509, baseType: !1865, size: 8, offset: 920)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1853, file: !1854, line: 510, baseType: !1865, size: 8, offset: 928)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1853, file: !1854, line: 511, baseType: !1865, size: 8, offset: 936)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1853, file: !1854, line: 512, baseType: !1865, size: 8, offset: 944)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1853, file: !1854, line: 513, baseType: !1865, size: 8, offset: 952)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1853, file: !1854, line: 514, baseType: !1865, size: 8, offset: 960)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1853, file: !1854, line: 515, baseType: !1865, size: 8, offset: 968)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1853, file: !1854, line: 516, baseType: !1865, size: 8, offset: 976)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1853, file: !1854, line: 517, baseType: !1865, size: 8, offset: 984)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1853, file: !1854, line: 518, baseType: !1865, size: 8, offset: 992)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1853, file: !1854, line: 519, baseType: !1865, size: 8, offset: 1000)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1853, file: !1854, line: 520, baseType: !1865, size: 8, offset: 1008)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1853, file: !1854, line: 521, baseType: !1865, size: 8, offset: 1016)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1853, file: !1854, line: 522, baseType: !1865, size: 8, offset: 1024)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1853, file: !1854, line: 523, baseType: !1865, size: 8, offset: 1032)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1853, file: !1854, line: 524, baseType: !1865, size: 8, offset: 1040)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1853, file: !1854, line: 525, baseType: !1865, size: 8, offset: 1048)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1853, file: !1854, line: 526, baseType: !1865, size: 8, offset: 1056)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1853, file: !1854, line: 527, baseType: !1865, size: 8, offset: 1064)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1853, file: !1854, line: 528, baseType: !1865, size: 8, offset: 1072)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1853, file: !1854, line: 529, baseType: !1865, size: 8, offset: 1080)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1853, file: !1854, line: 530, baseType: !1865, size: 8, offset: 1088)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1853, file: !1854, line: 531, baseType: !1865, size: 8, offset: 1096)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1853, file: !1854, line: 532, baseType: !1865, size: 8, offset: 1104)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1853, file: !1854, line: 533, baseType: !1865, size: 8, offset: 1112)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1853, file: !1854, line: 534, baseType: !1865, size: 8, offset: 1120)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1853, file: !1854, line: 535, baseType: !1865, size: 8, offset: 1128)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1853, file: !1854, line: 536, baseType: !1865, size: 8, offset: 1136)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1853, file: !1854, line: 537, baseType: !1865, size: 8, offset: 1144)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1853, file: !1854, line: 538, baseType: !1865, size: 8, offset: 1152)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1853, file: !1854, line: 539, baseType: !1865, size: 8, offset: 1160)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1853, file: !1854, line: 540, baseType: !1865, size: 8, offset: 1168)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1853, file: !1854, line: 541, baseType: !1865, size: 8, offset: 1176)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1853, file: !1854, line: 542, baseType: !1865, size: 8, offset: 1184)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1853, file: !1854, line: 543, baseType: !1865, size: 8, offset: 1192)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1853, file: !1854, line: 544, baseType: !1865, size: 8, offset: 1200)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1853, file: !1854, line: 545, baseType: !1865, size: 8, offset: 1208)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1853, file: !1854, line: 546, baseType: !1865, size: 8, offset: 1216)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1853, file: !1854, line: 547, baseType: !1865, size: 8, offset: 1224)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1853, file: !1854, line: 548, baseType: !1865, size: 8, offset: 1232)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1853, file: !1854, line: 549, baseType: !1865, size: 8, offset: 1240)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1853, file: !1854, line: 550, baseType: !1865, size: 8, offset: 1248)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1853, file: !1854, line: 551, baseType: !1865, size: 8, offset: 1256)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1853, file: !1854, line: 552, baseType: !1865, size: 8, offset: 1264)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1853, file: !1854, line: 553, baseType: !1865, size: 8, offset: 1272)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1853, file: !1854, line: 554, baseType: !1865, size: 8, offset: 1280)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1853, file: !1854, line: 555, baseType: !1865, size: 8, offset: 1288)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1853, file: !1854, line: 556, baseType: !1865, size: 8, offset: 1296)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1853, file: !1854, line: 557, baseType: !1865, size: 8, offset: 1304)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1853, file: !1854, line: 558, baseType: !1865, size: 8, offset: 1312)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1853, file: !1854, line: 559, baseType: !1865, size: 8, offset: 1320)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1853, file: !1854, line: 560, baseType: !1865, size: 8, offset: 1328)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1853, file: !1854, line: 561, baseType: !1865, size: 8, offset: 1336)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1853, file: !1854, line: 562, baseType: !1865, size: 8, offset: 1344)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1853, file: !1854, line: 563, baseType: !1865, size: 8, offset: 1352)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1853, file: !1854, line: 564, baseType: !1865, size: 8, offset: 1360)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1853, file: !1854, line: 565, baseType: !1865, size: 8, offset: 1368)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1853, file: !1854, line: 566, baseType: !1865, size: 8, offset: 1376)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1853, file: !1854, line: 567, baseType: !1865, size: 8, offset: 1384)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1853, file: !1854, line: 568, baseType: !1865, size: 8, offset: 1392)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1853, file: !1854, line: 569, baseType: !1865, size: 8, offset: 1400)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1853, file: !1854, line: 570, baseType: !1865, size: 8, offset: 1408)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1853, file: !1854, line: 571, baseType: !1865, size: 8, offset: 1416)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1853, file: !1854, line: 572, baseType: !1865, size: 8, offset: 1424)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1853, file: !1854, line: 573, baseType: !1865, size: 8, offset: 1432)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1853, file: !1854, line: 574, baseType: !1865, size: 8, offset: 1440)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1114, file: !164, line: 3405, baseType: !2021, size: 384)
!2021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !164, line: 3352, size: 384, elements: !2022)
!2022 = !{!2023, !2024}
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2021, file: !164, line: 3353, baseType: !1150, size: 192)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2021, file: !164, line: 3356, baseType: !2025, size: 192, offset: 192)
!2025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1854, line: 578, size: 192, elements: !2026)
!2026 = !{!2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037}
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2025, file: !1854, line: 580, baseType: !993, size: 32)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2025, file: !1854, line: 581, baseType: !993, size: 32, offset: 32)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2025, file: !1854, line: 582, baseType: !993, size: 32, offset: 64)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2025, file: !1854, line: 583, baseType: !993, size: 32, offset: 96)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2025, file: !1854, line: 584, baseType: !1225, size: 8, offset: 128)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2025, file: !1854, line: 585, baseType: !1225, size: 8, offset: 136)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2025, file: !1854, line: 586, baseType: !1225, size: 8, offset: 144)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2025, file: !1854, line: 587, baseType: !1225, size: 8, offset: 152)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2025, file: !1854, line: 588, baseType: !1225, size: 8, offset: 160)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2025, file: !1854, line: 589, baseType: !1225, size: 8, offset: 168)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2025, file: !1854, line: 590, baseType: !1225, size: 8, offset: 176)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !990, file: !415, line: 178, baseType: !1371, size: 64)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !990, file: !415, line: 179, baseType: !2040, size: 64)
!2040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2041, size: 64)
!2041 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !415, line: 150, baseType: !2042)
!2042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !415, line: 142, size: 320, elements: !2043)
!2043 = !{!2044, !2045, !2046, !2047, !2048, !2049}
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2042, file: !415, line: 144, baseType: !1112, size: 64)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2042, file: !415, line: 145, baseType: !970, size: 64, offset: 64)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2042, file: !415, line: 146, baseType: !970, size: 64, offset: 128)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2042, file: !415, line: 147, baseType: !1691, size: 32, offset: 192)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2042, file: !415, line: 148, baseType: !7, size: 32, offset: 224)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2042, file: !415, line: 149, baseType: !1225, size: 8, offset: 256)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !990, file: !415, line: 180, baseType: !2051, size: 64)
!2051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2052, size: 64)
!2052 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !415, line: 162, baseType: !2053)
!2053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !415, line: 159, size: 128, elements: !2054)
!2054 = !{!2055, !2056}
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2053, file: !415, line: 160, baseType: !1112, size: 64)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2053, file: !415, line: 161, baseType: !1081, size: 64, offset: 64)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !990, file: !415, line: 181, baseType: !2058, size: 64)
!2058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2059, size: 64)
!2059 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !415, line: 181, flags: DIFlagFwdDecl)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !985, file: !415, line: 317, baseType: !2061, size: 64)
!2061 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1081, size: 64, elements: !1008)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !985, file: !415, line: 318, baseType: !2063, size: 320)
!2063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !415, line: 188, size: 320, elements: !2064)
!2064 = !{!2065, !2067, !2122}
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2063, file: !415, line: 190, baseType: !2066, size: 192)
!2066 = !DICompositeType(tag: DW_TAG_array_type, baseType: !989, size: 192, elements: !1183)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2063, file: !415, line: 193, baseType: !2068, size: 64, offset: 192)
!2068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2069, size: 64)
!2069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !415, line: 206, size: 320, elements: !2070)
!2070 = !{!2071, !2107, !2108, !2109, !2121}
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2069, file: !415, line: 208, baseType: !2072, size: 64)
!2072 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2073, size: 64)
!2073 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !391, line: 62, baseType: !2074)
!2074 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2075, line: 538, size: 256, elements: !2076)
!2075 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2076 = !{!2077, !2081, !2087, !2098}
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2074, file: !2075, line: 539, baseType: !2078, size: 32)
!2078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2075, line: 482, size: 32, elements: !2079)
!2079 = !{!2080}
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2078, file: !2075, line: 484, baseType: !7, size: 32)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2074, file: !2075, line: 540, baseType: !2082, size: 192)
!2082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2075, line: 488, size: 192, elements: !2083)
!2083 = !{!2084, !2085, !2086}
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2082, file: !2075, line: 489, baseType: !2078, size: 32)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2082, file: !2075, line: 492, baseType: !996, size: 64, offset: 64)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2082, file: !2075, line: 496, baseType: !1112, size: 64, offset: 128)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2074, file: !2075, line: 541, baseType: !2088, size: 256)
!2088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2075, line: 504, size: 256, elements: !2089)
!2089 = !{!2090, !2091, !2096, !2097}
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2088, file: !2075, line: 505, baseType: !2078, size: 32)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2088, file: !2075, line: 509, baseType: !2092, size: 64, offset: 64)
!2092 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2075, line: 501, baseType: !2093)
!2093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2094, size: 64)
!2094 = !DISubroutineType(types: !2095)
!2095 = !{null, !1547}
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2088, file: !2075, line: 510, baseType: !1547, size: 64, offset: 128)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2088, file: !2075, line: 513, baseType: !2072, size: 64, offset: 192)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2074, file: !2075, line: 542, baseType: !2099, size: 128)
!2099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2075, line: 530, size: 128, elements: !2100)
!2100 = !{!2101, !2102}
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2099, file: !2075, line: 531, baseType: !2078, size: 32)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2099, file: !2075, line: 534, baseType: !2103, size: 64, offset: 64)
!2103 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2075, line: 525, baseType: !2104)
!2104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2105, size: 64)
!2105 = !DISubroutineType(types: !2106)
!2106 = !{!1225, !1112, !996, !1064, !1064}
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2069, file: !415, line: 211, baseType: !7, size: 32, offset: 64)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2069, file: !415, line: 214, baseType: !1081, size: 64, offset: 128)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2069, file: !415, line: 224, baseType: !2110, size: 64, offset: 192)
!2110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2111, size: 64)
!2111 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !415, line: 202, baseType: !2112)
!2112 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !415, line: 202, size: 128, elements: !2113)
!2113 = !{!2114}
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2112, file: !415, line: 202, baseType: !2115, size: 128)
!2115 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !415, line: 200, baseType: !2116)
!2116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !415, line: 200, size: 128, elements: !2117)
!2117 = !{!2118, !2119, !2120}
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2116, file: !415, line: 200, baseType: !7, size: 32)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2116, file: !415, line: 200, baseType: !7, size: 32, offset: 32)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2116, file: !415, line: 200, baseType: !1007, size: 64, offset: 64)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2069, file: !415, line: 234, baseType: !2110, size: 64, offset: 256)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2063, file: !415, line: 197, baseType: !1081, size: 64, offset: 256)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !985, file: !415, line: 319, baseType: !1172, size: 256)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !985, file: !415, line: 320, baseType: !1191, size: 192)
!2125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1387, size: 64)
!2126 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !391, line: 47, baseType: !1048)
!2127 = !DIDerivedType(tag: DW_TAG_typedef, name: "regset", file: !135, line: 37, baseType: !2126)
!2128 = !DIDerivedType(tag: DW_TAG_typedef, name: "HARD_REG_ELT_TYPE", file: !2129, line: 42, baseType: !1064)
!2129 = !DIFile(filename: "./hard-reg-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2130 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2131 = !{!2132, !2160, !0, !2162}
!2132 = !DIGlobalVariableExpression(var: !2133, expr: !DIExpression())
!2133 = distinct !DIGlobalVariable(name: "pass_jump", scope: !2, file: !3, line: 2254, type: !2134, isLocal: false, isDefinition: true)
!2134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !792, line: 162, size: 640, elements: !2135)
!2135 = !{!2136}
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2134, file: !792, line: 164, baseType: !2137, size: 640)
!2137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !792, line: 114, size: 640, elements: !2138)
!2138 = !{!2139, !2140, !2141, !2145, !2149, !2151, !2152, !2153, !2155, !2156, !2157, !2158, !2159}
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2137, file: !792, line: 117, baseType: !791, size: 32)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2137, file: !792, line: 121, baseType: !996, size: 64, offset: 64)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2137, file: !792, line: 125, baseType: !2142, size: 64, offset: 128)
!2142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2143, size: 64)
!2143 = !DISubroutineType(types: !2144)
!2144 = !{!1225}
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2137, file: !792, line: 130, baseType: !2146, size: 64, offset: 192)
!2146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2147, size: 64)
!2147 = !DISubroutineType(types: !2148)
!2148 = !{!7}
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2137, file: !792, line: 133, baseType: !2150, size: 64, offset: 256)
!2150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2137, size: 64)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2137, file: !792, line: 136, baseType: !2150, size: 64, offset: 320)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2137, file: !792, line: 139, baseType: !993, size: 32, offset: 384)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2137, file: !792, line: 143, baseType: !2154, size: 32, offset: 416)
!2154 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !574, line: 80, baseType: !573)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2137, file: !792, line: 146, baseType: !7, size: 32, offset: 448)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2137, file: !792, line: 147, baseType: !7, size: 32, offset: 480)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2137, file: !792, line: 148, baseType: !7, size: 32, offset: 512)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2137, file: !792, line: 151, baseType: !7, size: 32, offset: 544)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2137, file: !792, line: 152, baseType: !7, size: 32, offset: 576)
!2160 = !DIGlobalVariableExpression(var: !2161, expr: !DIExpression())
!2161 = distinct !DIGlobalVariable(name: "pass_jump2", scope: !2, file: !3, line: 2286, type: !2134, isLocal: false, isDefinition: true)
!2162 = !DIGlobalVariableExpression(var: !2163, expr: !DIExpression())
!2163 = distinct !DIGlobalVariable(name: "first_pass", scope: !2, file: !3, line: 63, type: !1225, isLocal: true, isDefinition: true)
!2164 = !{i32 7, !"Dwarf Version", i32 4}
!2165 = !{i32 2, !"Debug Info Version", i32 3}
!2166 = !{i32 1, !"wchar_size", i32 4}
!2167 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2168 = distinct !DISubprogram(name: "delete_unreachable_blocks", scope: !3, file: !3, line: 2057, type: !2143, scopeLine: 2058, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2169 = !{}
!2170 = !DILocalVariable(name: "changed", scope: !2168, file: !3, line: 2059, type: !1225)
!2171 = !DILocation(line: 2059, column: 8, scope: !2168)
!2172 = !DILocalVariable(name: "b", scope: !2168, file: !3, line: 2060, type: !1370)
!2173 = !DILocation(line: 2060, column: 15, scope: !2168)
!2174 = !DILocalVariable(name: "prev_bb", scope: !2168, file: !3, line: 2060, type: !1370)
!2175 = !DILocation(line: 2060, column: 18, scope: !2168)
!2176 = !DILocation(line: 2062, column: 3, scope: !2168)
!2177 = !DILocation(line: 2070, column: 7, scope: !2178)
!2178 = distinct !DILexicalBlock(scope: !2168, file: !3, line: 2070, column: 7)
!2179 = !DILocation(line: 2070, column: 28, scope: !2178)
!2180 = !DILocation(line: 2070, column: 31, scope: !2178)
!2181 = !DILocation(line: 2070, column: 50, scope: !2178)
!2182 = !DILocation(line: 2071, column: 7, scope: !2178)
!2183 = !DILocation(line: 2071, column: 10, scope: !2178)
!2184 = !DILocation(line: 2070, column: 7, scope: !2168)
!2185 = !DILocation(line: 2073, column: 16, scope: !2186)
!2186 = distinct !DILexicalBlock(scope: !2187, file: !3, line: 2073, column: 7)
!2187 = distinct !DILexicalBlock(scope: !2178, file: !3, line: 2072, column: 5)
!2188 = !DILocation(line: 2073, column: 32, scope: !2186)
!2189 = !DILocation(line: 2073, column: 14, scope: !2186)
!2190 = !DILocation(line: 2073, column: 12, scope: !2186)
!2191 = !DILocation(line: 2073, column: 41, scope: !2192)
!2192 = distinct !DILexicalBlock(scope: !2186, file: !3, line: 2073, column: 7)
!2193 = !DILocation(line: 2073, column: 46, scope: !2192)
!2194 = !DILocation(line: 2073, column: 43, scope: !2192)
!2195 = !DILocation(line: 2073, column: 7, scope: !2186)
!2196 = !DILocation(line: 2075, column: 14, scope: !2197)
!2197 = distinct !DILexicalBlock(scope: !2192, file: !3, line: 2074, column: 2)
!2198 = !DILocation(line: 2075, column: 17, scope: !2197)
!2199 = !DILocation(line: 2075, column: 12, scope: !2197)
!2200 = !DILocation(line: 2077, column: 10, scope: !2201)
!2201 = distinct !DILexicalBlock(scope: !2197, file: !3, line: 2077, column: 8)
!2202 = !DILocation(line: 2077, column: 13, scope: !2201)
!2203 = !DILocation(line: 2077, column: 19, scope: !2201)
!2204 = !DILocation(line: 2077, column: 8, scope: !2197)
!2205 = !DILocation(line: 2082, column: 44, scope: !2206)
!2206 = distinct !DILexicalBlock(scope: !2207, file: !3, line: 2082, column: 12)
!2207 = distinct !DILexicalBlock(scope: !2201, file: !3, line: 2078, column: 6)
!2208 = !DILocation(line: 2082, column: 13, scope: !2206)
!2209 = !DILocation(line: 2082, column: 12, scope: !2207)
!2210 = !DILocation(line: 2083, column: 23, scope: !2206)
!2211 = !DILocation(line: 2083, column: 3, scope: !2206)
!2212 = !DILocalVariable(name: "h", scope: !2213, file: !3, line: 2086, type: !2214)
!2213 = distinct !DILexicalBlock(scope: !2206, file: !3, line: 2085, column: 3)
!2214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2215, size: 64)
!2215 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !135, line: 283, baseType: !2216)
!2216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !135, line: 283, size: 128, elements: !2217)
!2217 = !{!2218}
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2216, file: !135, line: 283, baseType: !1507, size: 128)
!2219 = !DILocation(line: 2086, column: 30, scope: !2213)
!2220 = !DILocation(line: 2087, column: 51, scope: !2213)
!2221 = !DILocation(line: 2087, column: 9, scope: !2213)
!2222 = !DILocation(line: 2089, column: 5, scope: !2213)
!2223 = !DILocation(line: 2089, column: 12, scope: !2213)
!2224 = !DILocation(line: 2091, column: 13, scope: !2225)
!2225 = distinct !DILexicalBlock(scope: !2213, file: !3, line: 2090, column: 7)
!2226 = !DILocation(line: 2091, column: 11, scope: !2225)
!2227 = !DILocation(line: 2093, column: 19, scope: !2225)
!2228 = !DILocation(line: 2093, column: 22, scope: !2225)
!2229 = !DILocation(line: 2093, column: 17, scope: !2225)
!2230 = !DILocation(line: 2095, column: 9, scope: !2225)
!2231 = !DILocation(line: 2097, column: 29, scope: !2225)
!2232 = !DILocation(line: 2097, column: 9, scope: !2225)
!2233 = distinct !{!2233, !2222, !2234}
!2234 = !DILocation(line: 2098, column: 7, scope: !2213)
!2235 = !DILocation(line: 2100, column: 5, scope: !2213)
!2236 = !DILocation(line: 2103, column: 16, scope: !2207)
!2237 = !DILocation(line: 2104, column: 6, scope: !2207)
!2238 = !DILocation(line: 2105, column: 2, scope: !2197)
!2239 = !DILocation(line: 2073, column: 67, scope: !2192)
!2240 = !DILocation(line: 2073, column: 65, scope: !2192)
!2241 = !DILocation(line: 2073, column: 7, scope: !2192)
!2242 = distinct !{!2242, !2195, !2243}
!2243 = !DILocation(line: 2105, column: 2, scope: !2186)
!2244 = !DILocation(line: 2106, column: 5, scope: !2187)
!2245 = !DILocation(line: 2109, column: 16, scope: !2246)
!2246 = distinct !DILexicalBlock(scope: !2247, file: !3, line: 2109, column: 7)
!2247 = distinct !DILexicalBlock(scope: !2178, file: !3, line: 2108, column: 5)
!2248 = !DILocation(line: 2109, column: 32, scope: !2246)
!2249 = !DILocation(line: 2109, column: 14, scope: !2246)
!2250 = !DILocation(line: 2109, column: 12, scope: !2246)
!2251 = !DILocation(line: 2109, column: 41, scope: !2252)
!2252 = distinct !DILexicalBlock(scope: !2246, file: !3, line: 2109, column: 7)
!2253 = !DILocation(line: 2109, column: 46, scope: !2252)
!2254 = !DILocation(line: 2109, column: 43, scope: !2252)
!2255 = !DILocation(line: 2109, column: 7, scope: !2246)
!2256 = !DILocation(line: 2111, column: 14, scope: !2257)
!2257 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 2110, column: 2)
!2258 = !DILocation(line: 2111, column: 17, scope: !2257)
!2259 = !DILocation(line: 2111, column: 12, scope: !2257)
!2260 = !DILocation(line: 2113, column: 10, scope: !2261)
!2261 = distinct !DILexicalBlock(scope: !2257, file: !3, line: 2113, column: 8)
!2262 = !DILocation(line: 2113, column: 13, scope: !2261)
!2263 = !DILocation(line: 2113, column: 19, scope: !2261)
!2264 = !DILocation(line: 2113, column: 8, scope: !2257)
!2265 = !DILocation(line: 2115, column: 28, scope: !2266)
!2266 = distinct !DILexicalBlock(scope: !2261, file: !3, line: 2114, column: 6)
!2267 = !DILocation(line: 2115, column: 8, scope: !2266)
!2268 = !DILocation(line: 2116, column: 16, scope: !2266)
!2269 = !DILocation(line: 2117, column: 6, scope: !2266)
!2270 = !DILocation(line: 2118, column: 2, scope: !2257)
!2271 = !DILocation(line: 2109, column: 67, scope: !2252)
!2272 = !DILocation(line: 2109, column: 65, scope: !2252)
!2273 = !DILocation(line: 2109, column: 7, scope: !2252)
!2274 = distinct !{!2274, !2255, !2275}
!2275 = !DILocation(line: 2118, column: 2, scope: !2246)
!2276 = !DILocation(line: 2121, column: 7, scope: !2277)
!2277 = distinct !DILexicalBlock(scope: !2168, file: !3, line: 2121, column: 7)
!2278 = !DILocation(line: 2121, column: 7, scope: !2168)
!2279 = !DILocation(line: 2122, column: 5, scope: !2277)
!2280 = !DILocation(line: 2123, column: 10, scope: !2168)
!2281 = !DILocation(line: 2123, column: 3, scope: !2168)
!2282 = distinct !DISubprogram(name: "VEC_basic_block_base_length", scope: !135, file: !135, line: 281, type: !2283, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2283 = !DISubroutineType(types: !2284)
!2284 = !{!7, !2285}
!2285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2286, size: 64)
!2286 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1507)
!2287 = !DILocalVariable(name: "vec_", arg: 1, scope: !2282, file: !135, line: 281, type: !2285)
!2288 = !DILocation(line: 281, column: 1, scope: !2282)
!2289 = distinct !DISubprogram(name: "VEC_basic_block_base_pop", scope: !135, file: !135, line: 281, type: !2290, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2290 = !DISubroutineType(types: !2291)
!2291 = !{!1370, !2292}
!2292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1507, size: 64)
!2293 = !DILocalVariable(name: "vec_", arg: 1, scope: !2289, file: !135, line: 281, type: !2292)
!2294 = !DILocation(line: 281, column: 1, scope: !2289)
!2295 = !DILocalVariable(name: "obj_", scope: !2289, file: !135, line: 281, type: !1370)
!2296 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !135, file: !135, line: 283, type: !2297, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2297 = !DISubroutineType(types: !2298)
!2298 = !{null, !2299}
!2299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2214, size: 64)
!2300 = !DILocalVariable(name: "vec_", arg: 1, scope: !2296, file: !135, line: 283, type: !2299)
!2301 = !DILocation(line: 283, column: 1, scope: !2296)
!2302 = !DILocation(line: 283, column: 1, scope: !2303)
!2303 = distinct !DILexicalBlock(scope: !2296, file: !135, line: 283, column: 1)
!2304 = distinct !DISubprogram(name: "delete_dead_jumptables", scope: !3, file: !3, line: 2131, type: !2305, scopeLine: 2132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2305 = !DISubroutineType(types: !2306)
!2306 = !{null}
!2307 = !DILocalVariable(name: "bb", scope: !2304, file: !3, line: 2133, type: !1370)
!2308 = !DILocation(line: 2133, column: 15, scope: !2304)
!2309 = !DILocation(line: 2137, column: 3, scope: !2310)
!2310 = distinct !DILexicalBlock(scope: !2304, file: !3, line: 2137, column: 3)
!2311 = !DILocation(line: 2137, column: 3, scope: !2312)
!2312 = distinct !DILexicalBlock(scope: !2310, file: !3, line: 2137, column: 3)
!2313 = !DILocalVariable(name: "insn", scope: !2314, file: !3, line: 2139, type: !970)
!2314 = distinct !DILexicalBlock(scope: !2312, file: !3, line: 2138, column: 5)
!2315 = !DILocation(line: 2139, column: 11, scope: !2314)
!2316 = !DILocalVariable(name: "next", scope: !2314, file: !3, line: 2139, type: !970)
!2317 = !DILocation(line: 2139, column: 17, scope: !2314)
!2318 = !DILocation(line: 2141, column: 19, scope: !2319)
!2319 = distinct !DILexicalBlock(scope: !2314, file: !3, line: 2141, column: 7)
!2320 = !DILocation(line: 2141, column: 17, scope: !2319)
!2321 = !DILocation(line: 2141, column: 12, scope: !2319)
!2322 = !DILocation(line: 2142, column: 5, scope: !2323)
!2323 = distinct !DILexicalBlock(scope: !2319, file: !3, line: 2141, column: 7)
!2324 = !DILocation(line: 2142, column: 10, scope: !2323)
!2325 = !DILocation(line: 2142, column: 14, scope: !2323)
!2326 = !DILocation(line: 0, scope: !2323)
!2327 = !DILocation(line: 2142, column: 13, scope: !2323)
!2328 = !DILocation(line: 2141, column: 7, scope: !2319)
!2329 = !DILocation(line: 2145, column: 11, scope: !2330)
!2330 = distinct !DILexicalBlock(scope: !2323, file: !3, line: 2144, column: 2)
!2331 = !DILocation(line: 2145, column: 9, scope: !2330)
!2332 = !DILocation(line: 2146, column: 8, scope: !2333)
!2333 = distinct !DILexicalBlock(scope: !2330, file: !3, line: 2146, column: 8)
!2334 = !DILocation(line: 2147, column: 8, scope: !2333)
!2335 = !DILocation(line: 2147, column: 11, scope: !2333)
!2336 = !DILocation(line: 2147, column: 33, scope: !2333)
!2337 = !DILocation(line: 2147, column: 30, scope: !2333)
!2338 = !DILocation(line: 2148, column: 8, scope: !2333)
!2339 = !DILocation(line: 2148, column: 11, scope: !2333)
!2340 = !DILocation(line: 2146, column: 8, scope: !2330)
!2341 = !DILocalVariable(name: "label", scope: !2342, file: !3, line: 2150, type: !970)
!2342 = distinct !DILexicalBlock(scope: !2333, file: !3, line: 2149, column: 6)
!2343 = !DILocation(line: 2150, column: 12, scope: !2342)
!2344 = !DILocation(line: 2150, column: 20, scope: !2342)
!2345 = !DILocalVariable(name: "jump", scope: !2342, file: !3, line: 2150, type: !970)
!2346 = !DILocation(line: 2150, column: 26, scope: !2342)
!2347 = !DILocation(line: 2150, column: 33, scope: !2342)
!2348 = !DILocation(line: 2152, column: 12, scope: !2349)
!2349 = distinct !DILexicalBlock(scope: !2342, file: !3, line: 2152, column: 12)
!2350 = !DILocation(line: 2152, column: 12, scope: !2342)
!2351 = !DILocation(line: 2153, column: 12, scope: !2349)
!2352 = !DILocation(line: 2154, column: 5, scope: !2349)
!2353 = !DILocation(line: 2153, column: 3, scope: !2349)
!2354 = !DILocation(line: 2156, column: 15, scope: !2342)
!2355 = !DILocation(line: 2156, column: 13, scope: !2342)
!2356 = !DILocation(line: 2157, column: 21, scope: !2342)
!2357 = !DILocation(line: 2157, column: 8, scope: !2342)
!2358 = !DILocation(line: 2158, column: 21, scope: !2342)
!2359 = !DILocation(line: 2158, column: 8, scope: !2342)
!2360 = !DILocation(line: 2159, column: 6, scope: !2342)
!2361 = !DILocation(line: 2160, column: 2, scope: !2330)
!2362 = !DILocation(line: 2143, column: 12, scope: !2323)
!2363 = !DILocation(line: 2143, column: 10, scope: !2323)
!2364 = !DILocation(line: 2141, column: 7, scope: !2323)
!2365 = distinct !{!2365, !2328, !2366}
!2366 = !DILocation(line: 2160, column: 2, scope: !2319)
!2367 = !DILocation(line: 2161, column: 5, scope: !2314)
!2368 = distinct !{!2368, !2309, !2369}
!2369 = !DILocation(line: 2161, column: 5, scope: !2310)
!2370 = !DILocation(line: 2162, column: 1, scope: !2304)
!2371 = distinct !DISubprogram(name: "cleanup_cfg", scope: !3, file: !3, line: 2168, type: !2372, scopeLine: 2169, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2372 = !DISubroutineType(types: !2373)
!2373 = !{!1225, !993}
!2374 = !DILocalVariable(name: "mode", arg: 1, scope: !2371, file: !3, line: 2168, type: !993)
!2375 = !DILocation(line: 2168, column: 18, scope: !2371)
!2376 = !DILocalVariable(name: "changed", scope: !2371, file: !3, line: 2170, type: !1225)
!2377 = !DILocation(line: 2170, column: 8, scope: !2371)
!2378 = !DILocation(line: 2175, column: 7, scope: !2379)
!2379 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 2175, column: 7)
!2380 = !DILocation(line: 2175, column: 26, scope: !2379)
!2381 = !DILocation(line: 2175, column: 7, scope: !2371)
!2382 = !DILocation(line: 2176, column: 10, scope: !2379)
!2383 = !DILocation(line: 2176, column: 5, scope: !2379)
!2384 = !DILocation(line: 2178, column: 3, scope: !2371)
!2385 = !DILocation(line: 2178, column: 3, scope: !2386)
!2386 = distinct !DILexicalBlock(scope: !2387, file: !3, line: 2178, column: 3)
!2387 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 2178, column: 3)
!2388 = !DILocation(line: 2178, column: 3, scope: !2387)
!2389 = !DILocation(line: 2179, column: 7, scope: !2390)
!2390 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 2179, column: 7)
!2391 = !DILocation(line: 2179, column: 7, scope: !2371)
!2392 = !DILocation(line: 2181, column: 15, scope: !2393)
!2393 = distinct !DILexicalBlock(scope: !2390, file: !3, line: 2180, column: 5)
!2394 = !DILocation(line: 2184, column: 13, scope: !2395)
!2395 = distinct !DILexicalBlock(scope: !2393, file: !3, line: 2184, column: 11)
!2396 = !DILocation(line: 2184, column: 18, scope: !2395)
!2397 = !DILocation(line: 2185, column: 4, scope: !2395)
!2398 = !DILocation(line: 2185, column: 8, scope: !2395)
!2399 = !DILocation(line: 2184, column: 11, scope: !2393)
!2400 = !DILocation(line: 2186, column: 31, scope: !2395)
!2401 = !DILocation(line: 2186, column: 45, scope: !2395)
!2402 = !DILocation(line: 2186, column: 2, scope: !2395)
!2403 = !DILocation(line: 2187, column: 5, scope: !2393)
!2404 = !DILocation(line: 2189, column: 3, scope: !2371)
!2405 = !DILocation(line: 2195, column: 7, scope: !2406)
!2406 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 2195, column: 7)
!2407 = !DILocation(line: 2195, column: 12, scope: !2406)
!2408 = !DILocation(line: 2195, column: 7, scope: !2371)
!2409 = !DILocation(line: 2196, column: 5, scope: !2406)
!2410 = !DILocation(line: 2198, column: 8, scope: !2411)
!2411 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 2198, column: 7)
!2412 = !DILocation(line: 2198, column: 7, scope: !2371)
!2413 = !DILocation(line: 2199, column: 12, scope: !2411)
!2414 = !DILocation(line: 2199, column: 5, scope: !2411)
!2415 = !DILocation(line: 2201, column: 3, scope: !2371)
!2416 = !DILocation(line: 2201, column: 28, scope: !2371)
!2417 = !DILocation(line: 2201, column: 10, scope: !2371)
!2418 = !DILocation(line: 2203, column: 7, scope: !2419)
!2419 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 2202, column: 5)
!2420 = !DILocation(line: 2203, column: 45, scope: !2419)
!2421 = !DILocation(line: 2204, column: 13, scope: !2422)
!2422 = distinct !DILexicalBlock(scope: !2419, file: !3, line: 2204, column: 11)
!2423 = !DILocation(line: 2204, column: 18, scope: !2422)
!2424 = !DILocation(line: 2204, column: 11, scope: !2419)
!2425 = !DILocation(line: 2218, column: 9, scope: !2426)
!2426 = distinct !DILexicalBlock(scope: !2427, file: !3, line: 2218, column: 8)
!2427 = distinct !DILexicalBlock(scope: !2422, file: !3, line: 2205, column: 2)
!2428 = !DILocation(line: 2218, column: 14, scope: !2426)
!2429 = !DILocation(line: 2218, column: 35, scope: !2426)
!2430 = !DILocation(line: 2218, column: 39, scope: !2426)
!2431 = !DILocation(line: 2219, column: 8, scope: !2426)
!2432 = !DILocation(line: 2219, column: 41, scope: !2426)
!2433 = !DILocation(line: 2219, column: 55, scope: !2426)
!2434 = !DILocation(line: 2219, column: 12, scope: !2426)
!2435 = !DILocation(line: 2218, column: 8, scope: !2427)
!2436 = !DILocation(line: 2220, column: 6, scope: !2426)
!2437 = !DILocation(line: 2221, column: 14, scope: !2438)
!2438 = distinct !DILexicalBlock(scope: !2426, file: !3, line: 2221, column: 13)
!2439 = !DILocation(line: 2221, column: 19, scope: !2438)
!2440 = !DILocation(line: 2222, column: 6, scope: !2438)
!2441 = !DILocation(line: 2222, column: 9, scope: !2438)
!2442 = !DILocation(line: 2221, column: 13, scope: !2426)
!2443 = !DILocation(line: 2223, column: 6, scope: !2438)
!2444 = !DILocation(line: 2224, column: 2, scope: !2427)
!2445 = !DILocation(line: 2226, column: 2, scope: !2422)
!2446 = distinct !{!2446, !2415, !2447}
!2447 = !DILocation(line: 2227, column: 5, scope: !2371)
!2448 = !DILocation(line: 2229, column: 7, scope: !2449)
!2449 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 2229, column: 7)
!2450 = !DILocation(line: 2229, column: 12, scope: !2449)
!2451 = !DILocation(line: 2229, column: 7, scope: !2371)
!2452 = !DILocation(line: 2230, column: 5, scope: !2449)
!2453 = !DILocation(line: 2238, column: 9, scope: !2454)
!2454 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 2238, column: 7)
!2455 = !DILocation(line: 2238, column: 14, scope: !2454)
!2456 = !DILocation(line: 2238, column: 7, scope: !2371)
!2457 = !DILocation(line: 2239, column: 5, scope: !2454)
!2458 = !DILocation(line: 2241, column: 3, scope: !2371)
!2459 = !DILocation(line: 2241, column: 3, scope: !2460)
!2460 = distinct !DILexicalBlock(scope: !2461, file: !3, line: 2241, column: 3)
!2461 = distinct !DILexicalBlock(scope: !2371, file: !3, line: 2241, column: 3)
!2462 = !DILocation(line: 2241, column: 3, scope: !2461)
!2463 = !DILocation(line: 2243, column: 10, scope: !2371)
!2464 = !DILocation(line: 2243, column: 3, scope: !2371)
!2465 = !DILocation(line: 2244, column: 1, scope: !2371)
!2466 = distinct !DISubprogram(name: "try_optimize_cfg", scope: !3, file: !3, line: 1839, type: !2372, scopeLine: 1840, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2467 = !DILocalVariable(name: "mode", arg: 1, scope: !2466, file: !3, line: 1839, type: !993)
!2468 = !DILocation(line: 1839, column: 23, scope: !2466)
!2469 = !DILocalVariable(name: "changed_overall", scope: !2466, file: !3, line: 1841, type: !1225)
!2470 = !DILocation(line: 1841, column: 8, scope: !2466)
!2471 = !DILocalVariable(name: "changed", scope: !2466, file: !3, line: 1842, type: !1225)
!2472 = !DILocation(line: 1842, column: 8, scope: !2466)
!2473 = !DILocalVariable(name: "iterations", scope: !2466, file: !3, line: 1843, type: !993)
!2474 = !DILocation(line: 1843, column: 7, scope: !2466)
!2475 = !DILocalVariable(name: "bb", scope: !2466, file: !3, line: 1844, type: !1370)
!2476 = !DILocation(line: 1844, column: 15, scope: !2466)
!2477 = !DILocalVariable(name: "b", scope: !2466, file: !3, line: 1844, type: !1370)
!2478 = !DILocation(line: 1844, column: 19, scope: !2466)
!2479 = !DILocalVariable(name: "next", scope: !2466, file: !3, line: 1844, type: !1370)
!2480 = !DILocation(line: 1844, column: 22, scope: !2466)
!2481 = !DILocation(line: 1846, column: 7, scope: !2482)
!2482 = distinct !DILexicalBlock(scope: !2466, file: !3, line: 1846, column: 7)
!2483 = !DILocation(line: 1846, column: 12, scope: !2482)
!2484 = !DILocation(line: 1846, column: 7, scope: !2466)
!2485 = !DILocation(line: 1847, column: 5, scope: !2482)
!2486 = !DILocation(line: 1849, column: 22, scope: !2466)
!2487 = !DILocation(line: 1851, column: 3, scope: !2488)
!2488 = distinct !DILexicalBlock(scope: !2466, file: !3, line: 1851, column: 3)
!2489 = !DILocation(line: 1851, column: 3, scope: !2490)
!2490 = distinct !DILexicalBlock(scope: !2488, file: !3, line: 1851, column: 3)
!2491 = !DILocation(line: 1852, column: 28, scope: !2490)
!2492 = !DILocation(line: 1852, column: 5, scope: !2490)
!2493 = distinct !{!2493, !2487, !2494}
!2494 = !DILocation(line: 1852, column: 30, scope: !2488)
!2495 = !DILocation(line: 1854, column: 17, scope: !2496)
!2496 = distinct !DILexicalBlock(scope: !2466, file: !3, line: 1854, column: 7)
!2497 = !DILocation(line: 1854, column: 9, scope: !2496)
!2498 = !DILocation(line: 1854, column: 7, scope: !2466)
!2499 = !DILocation(line: 1856, column: 18, scope: !2500)
!2500 = distinct !DILexicalBlock(scope: !2496, file: !3, line: 1855, column: 5)
!2501 = !DILocation(line: 1860, column: 7, scope: !2500)
!2502 = !DILocation(line: 1862, column: 12, scope: !2503)
!2503 = distinct !DILexicalBlock(scope: !2500, file: !3, line: 1861, column: 2)
!2504 = !DILocation(line: 1863, column: 14, scope: !2503)
!2505 = !DILocation(line: 1865, column: 8, scope: !2506)
!2506 = distinct !DILexicalBlock(scope: !2503, file: !3, line: 1865, column: 8)
!2507 = !DILocation(line: 1865, column: 8, scope: !2503)
!2508 = !DILocation(line: 1866, column: 15, scope: !2506)
!2509 = !DILocation(line: 1868, column: 8, scope: !2506)
!2510 = !DILocation(line: 1866, column: 6, scope: !2506)
!2511 = !DILocation(line: 1870, column: 13, scope: !2512)
!2512 = distinct !DILexicalBlock(scope: !2503, file: !3, line: 1870, column: 4)
!2513 = !DILocation(line: 1870, column: 30, scope: !2512)
!2514 = !DILocation(line: 1870, column: 11, scope: !2512)
!2515 = !DILocation(line: 1870, column: 9, scope: !2512)
!2516 = !DILocation(line: 1870, column: 39, scope: !2517)
!2517 = distinct !DILexicalBlock(scope: !2512, file: !3, line: 1870, column: 4)
!2518 = !DILocation(line: 1870, column: 44, scope: !2517)
!2519 = !DILocation(line: 1870, column: 41, scope: !2517)
!2520 = !DILocation(line: 1870, column: 4, scope: !2512)
!2521 = !DILocalVariable(name: "c", scope: !2522, file: !3, line: 1872, type: !1370)
!2522 = distinct !DILexicalBlock(scope: !2517, file: !3, line: 1871, column: 6)
!2523 = !DILocation(line: 1872, column: 20, scope: !2522)
!2524 = !DILocalVariable(name: "s", scope: !2522, file: !3, line: 1873, type: !1387)
!2525 = !DILocation(line: 1873, column: 13, scope: !2522)
!2526 = !DILocalVariable(name: "changed_here", scope: !2522, file: !3, line: 1874, type: !1225)
!2527 = !DILocation(line: 1874, column: 13, scope: !2522)
!2528 = !DILocation(line: 1884, column: 12, scope: !2529)
!2529 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 1884, column: 12)
!2530 = !DILocation(line: 1884, column: 34, scope: !2529)
!2531 = !DILocation(line: 1885, column: 5, scope: !2529)
!2532 = !DILocation(line: 1885, column: 9, scope: !2529)
!2533 = !DILocation(line: 1885, column: 31, scope: !2529)
!2534 = !DILocation(line: 1886, column: 9, scope: !2529)
!2535 = !DILocation(line: 1886, column: 34, scope: !2529)
!2536 = !DILocation(line: 1886, column: 12, scope: !2529)
!2537 = !DILocation(line: 1887, column: 9, scope: !2529)
!2538 = !DILocation(line: 1887, column: 30, scope: !2529)
!2539 = !DILocation(line: 1887, column: 12, scope: !2529)
!2540 = !DILocation(line: 1887, column: 48, scope: !2529)
!2541 = !DILocation(line: 1887, column: 56, scope: !2529)
!2542 = !DILocation(line: 1887, column: 53, scope: !2529)
!2543 = !DILocation(line: 1884, column: 12, scope: !2522)
!2544 = !DILocation(line: 1889, column: 9, scope: !2545)
!2545 = distinct !DILexicalBlock(scope: !2529, file: !3, line: 1888, column: 3)
!2546 = !DILocation(line: 1889, column: 12, scope: !2545)
!2547 = !DILocation(line: 1889, column: 7, scope: !2545)
!2548 = !DILocation(line: 1890, column: 25, scope: !2545)
!2549 = !DILocation(line: 1890, column: 5, scope: !2545)
!2550 = !DILocation(line: 1891, column: 11, scope: !2551)
!2551 = distinct !DILexicalBlock(scope: !2545, file: !3, line: 1891, column: 9)
!2552 = !DILocation(line: 1891, column: 16, scope: !2551)
!2553 = !DILocation(line: 1891, column: 9, scope: !2545)
!2554 = !DILocation(line: 1892, column: 15, scope: !2551)
!2555 = !DILocation(line: 1892, column: 7, scope: !2551)
!2556 = !DILocation(line: 1894, column: 10, scope: !2545)
!2557 = !DILocation(line: 1894, column: 15, scope: !2545)
!2558 = !DILocation(line: 1894, column: 12, scope: !2545)
!2559 = !DILocation(line: 1894, column: 33, scope: !2545)
!2560 = !DILocation(line: 1894, column: 36, scope: !2545)
!2561 = !DILocation(line: 1894, column: 46, scope: !2545)
!2562 = !DILocation(line: 1894, column: 7, scope: !2545)
!2563 = !DILocation(line: 1895, column: 5, scope: !2545)
!2564 = distinct !{!2564, !2520, !2565}
!2565 = !DILocation(line: 2031, column: 6, scope: !2512)
!2566 = !DILocation(line: 1899, column: 27, scope: !2567)
!2567 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 1899, column: 12)
!2568 = !DILocation(line: 1899, column: 12, scope: !2567)
!2569 = !DILocation(line: 1900, column: 5, scope: !2567)
!2570 = !DILocation(line: 1900, column: 27, scope: !2567)
!2571 = !DILocation(line: 1900, column: 9, scope: !2567)
!2572 = !DILocation(line: 1900, column: 31, scope: !2567)
!2573 = !DILocation(line: 1900, column: 37, scope: !2567)
!2574 = !DILocation(line: 1901, column: 5, scope: !2567)
!2575 = !DILocation(line: 1901, column: 28, scope: !2567)
!2576 = !DILocation(line: 1901, column: 10, scope: !2567)
!2577 = !DILocation(line: 1901, column: 32, scope: !2567)
!2578 = !DILocation(line: 1901, column: 38, scope: !2567)
!2579 = !DILocation(line: 1902, column: 5, scope: !2567)
!2580 = !DILocation(line: 1902, column: 8, scope: !2567)
!2581 = !DILocation(line: 1909, column: 5, scope: !2567)
!2582 = !DILocation(line: 1909, column: 22, scope: !2567)
!2583 = !DILocation(line: 1909, column: 9, scope: !2567)
!2584 = !DILocation(line: 1909, column: 28, scope: !2567)
!2585 = !DILocation(line: 1909, column: 25, scope: !2567)
!2586 = !DILocation(line: 1910, column: 9, scope: !2567)
!2587 = !DILocation(line: 1910, column: 13, scope: !2567)
!2588 = !DILocation(line: 1911, column: 9, scope: !2567)
!2589 = !DILocation(line: 1911, column: 38, scope: !2567)
!2590 = !DILocation(line: 1912, column: 10, scope: !2567)
!2591 = !DILocation(line: 1911, column: 14, scope: !2567)
!2592 = !DILocation(line: 1899, column: 12, scope: !2522)
!2593 = !DILocalVariable(name: "label", scope: !2594, file: !3, line: 1914, type: !970)
!2594 = distinct !DILexicalBlock(scope: !2567, file: !3, line: 1913, column: 3)
!2595 = !DILocation(line: 1914, column: 9, scope: !2594)
!2596 = !DILocation(line: 1914, column: 17, scope: !2594)
!2597 = !DILocation(line: 1916, column: 24, scope: !2594)
!2598 = !DILocation(line: 1916, column: 31, scope: !2594)
!2599 = !DILocation(line: 1916, column: 5, scope: !2594)
!2600 = !DILocation(line: 1919, column: 9, scope: !2601)
!2601 = distinct !DILexicalBlock(scope: !2594, file: !3, line: 1919, column: 9)
!2602 = !DILocation(line: 1919, column: 33, scope: !2601)
!2603 = !DILocation(line: 1919, column: 9, scope: !2594)
!2604 = !DILocalVariable(name: "bb_note", scope: !2605, file: !3, line: 1921, type: !970)
!2605 = distinct !DILexicalBlock(scope: !2601, file: !3, line: 1920, column: 7)
!2606 = !DILocation(line: 1921, column: 13, scope: !2605)
!2607 = !DILocation(line: 1921, column: 23, scope: !2605)
!2608 = !DILocation(line: 1923, column: 29, scope: !2605)
!2609 = !DILocation(line: 1923, column: 36, scope: !2605)
!2610 = !DILocation(line: 1923, column: 43, scope: !2605)
!2611 = !DILocation(line: 1923, column: 9, scope: !2605)
!2612 = !DILocation(line: 1924, column: 23, scope: !2605)
!2613 = !DILocation(line: 1924, column: 9, scope: !2605)
!2614 = !DILocation(line: 1924, column: 21, scope: !2605)
!2615 = !DILocation(line: 1925, column: 13, scope: !2616)
!2616 = distinct !DILexicalBlock(scope: !2605, file: !3, line: 1925, column: 13)
!2617 = !DILocation(line: 1925, column: 27, scope: !2616)
!2618 = !DILocation(line: 1925, column: 24, scope: !2616)
!2619 = !DILocation(line: 1925, column: 13, scope: !2605)
!2620 = !DILocation(line: 1926, column: 17, scope: !2616)
!2621 = !DILocation(line: 1926, column: 4, scope: !2616)
!2622 = !DILocation(line: 1926, column: 15, scope: !2616)
!2623 = !DILocation(line: 1927, column: 7, scope: !2605)
!2624 = !DILocation(line: 1928, column: 9, scope: !2625)
!2625 = distinct !DILexicalBlock(scope: !2594, file: !3, line: 1928, column: 9)
!2626 = !DILocation(line: 1928, column: 9, scope: !2594)
!2627 = !DILocation(line: 1929, column: 16, scope: !2625)
!2628 = !DILocation(line: 1930, column: 9, scope: !2625)
!2629 = !DILocation(line: 1930, column: 12, scope: !2625)
!2630 = !DILocation(line: 1929, column: 7, scope: !2625)
!2631 = !DILocation(line: 1931, column: 3, scope: !2594)
!2632 = !DILocation(line: 1934, column: 14, scope: !2633)
!2633 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 1934, column: 12)
!2634 = !DILocation(line: 1934, column: 19, scope: !2633)
!2635 = !DILocation(line: 1935, column: 5, scope: !2633)
!2636 = !DILocation(line: 1935, column: 23, scope: !2633)
!2637 = !DILocation(line: 1935, column: 8, scope: !2633)
!2638 = !DILocation(line: 1936, column: 5, scope: !2633)
!2639 = !DILocation(line: 1936, column: 27, scope: !2633)
!2640 = !DILocation(line: 1936, column: 9, scope: !2633)
!2641 = !DILocation(line: 1936, column: 31, scope: !2633)
!2642 = !DILocation(line: 1936, column: 37, scope: !2633)
!2643 = !DILocation(line: 1937, column: 5, scope: !2633)
!2644 = !DILocation(line: 1937, column: 9, scope: !2633)
!2645 = !DILocation(line: 1938, column: 5, scope: !2633)
!2646 = !DILocation(line: 1938, column: 8, scope: !2633)
!2647 = !DILocation(line: 1941, column: 5, scope: !2633)
!2648 = !DILocation(line: 1941, column: 27, scope: !2633)
!2649 = !DILocation(line: 1941, column: 9, scope: !2633)
!2650 = !DILocation(line: 1941, column: 31, scope: !2633)
!2651 = !DILocation(line: 1941, column: 37, scope: !2633)
!2652 = !DILocation(line: 1942, column: 5, scope: !2633)
!2653 = !DILocation(line: 1942, column: 8, scope: !2633)
!2654 = !DILocation(line: 1942, column: 23, scope: !2633)
!2655 = !DILocation(line: 1934, column: 12, scope: !2522)
!2656 = !DILocation(line: 1944, column: 9, scope: !2657)
!2657 = distinct !DILexicalBlock(scope: !2658, file: !3, line: 1944, column: 9)
!2658 = distinct !DILexicalBlock(scope: !2633, file: !3, line: 1943, column: 3)
!2659 = !DILocation(line: 1944, column: 9, scope: !2658)
!2660 = !DILocation(line: 1945, column: 16, scope: !2657)
!2661 = !DILocation(line: 1947, column: 9, scope: !2657)
!2662 = !DILocation(line: 1947, column: 12, scope: !2657)
!2663 = !DILocation(line: 1945, column: 7, scope: !2657)
!2664 = !DILocation(line: 1949, column: 9, scope: !2658)
!2665 = !DILocation(line: 1949, column: 12, scope: !2658)
!2666 = !DILocation(line: 1949, column: 23, scope: !2658)
!2667 = !DILocation(line: 1949, column: 20, scope: !2658)
!2668 = !DILocation(line: 1949, column: 41, scope: !2658)
!2669 = !DILocation(line: 1949, column: 44, scope: !2658)
!2670 = !DILocation(line: 1949, column: 54, scope: !2658)
!2671 = !DILocation(line: 1949, column: 57, scope: !2658)
!2672 = !DILocation(line: 1949, column: 7, scope: !2658)
!2673 = !DILocation(line: 1950, column: 49, scope: !2658)
!2674 = !DILocation(line: 1950, column: 31, scope: !2658)
!2675 = !DILocation(line: 1951, column: 23, scope: !2658)
!2676 = !DILocation(line: 1951, column: 10, scope: !2658)
!2677 = !DILocation(line: 1950, column: 5, scope: !2658)
!2678 = !DILocation(line: 1952, column: 25, scope: !2658)
!2679 = !DILocation(line: 1952, column: 5, scope: !2658)
!2680 = !DILocation(line: 1953, column: 13, scope: !2658)
!2681 = !DILocation(line: 1954, column: 9, scope: !2658)
!2682 = !DILocation(line: 1954, column: 7, scope: !2658)
!2683 = !DILocation(line: 1955, column: 5, scope: !2658)
!2684 = !DILocation(line: 1958, column: 27, scope: !2685)
!2685 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 1958, column: 12)
!2686 = !DILocation(line: 1958, column: 12, scope: !2685)
!2687 = !DILocation(line: 1959, column: 5, scope: !2685)
!2688 = !DILocation(line: 1959, column: 31, scope: !2685)
!2689 = !DILocation(line: 1959, column: 13, scope: !2685)
!2690 = !DILocation(line: 1959, column: 11, scope: !2685)
!2691 = !DILocation(line: 1960, column: 5, scope: !2685)
!2692 = !DILocation(line: 1960, column: 10, scope: !2685)
!2693 = !DILocation(line: 1960, column: 13, scope: !2685)
!2694 = !DILocation(line: 1960, column: 19, scope: !2685)
!2695 = !DILocation(line: 1961, column: 5, scope: !2685)
!2696 = !DILocation(line: 1961, column: 13, scope: !2685)
!2697 = !DILocation(line: 1961, column: 16, scope: !2685)
!2698 = !DILocation(line: 1961, column: 11, scope: !2685)
!2699 = !DILocation(line: 1961, column: 25, scope: !2685)
!2700 = !DILocation(line: 1961, column: 22, scope: !2685)
!2701 = !DILocation(line: 1962, column: 5, scope: !2685)
!2702 = !DILocation(line: 1962, column: 23, scope: !2685)
!2703 = !DILocation(line: 1962, column: 8, scope: !2685)
!2704 = !DILocation(line: 1963, column: 5, scope: !2685)
!2705 = !DILocation(line: 1963, column: 8, scope: !2685)
!2706 = !DILocation(line: 1963, column: 13, scope: !2685)
!2707 = !DILocation(line: 1963, column: 10, scope: !2685)
!2708 = !DILocation(line: 1958, column: 12, scope: !2522)
!2709 = !DILocation(line: 1971, column: 10, scope: !2710)
!2710 = distinct !DILexicalBlock(scope: !2711, file: !3, line: 1971, column: 9)
!2711 = distinct !DILexicalBlock(scope: !2685, file: !3, line: 1964, column: 3)
!2712 = !DILocation(line: 1971, column: 15, scope: !2710)
!2713 = !DILocation(line: 1972, column: 9, scope: !2710)
!2714 = !DILocation(line: 1972, column: 32, scope: !2710)
!2715 = !DILocation(line: 1972, column: 35, scope: !2710)
!2716 = !DILocation(line: 1972, column: 12, scope: !2710)
!2717 = !DILocation(line: 1971, column: 9, scope: !2711)
!2718 = !DILocation(line: 1974, column: 23, scope: !2719)
!2719 = distinct !DILexicalBlock(scope: !2710, file: !3, line: 1973, column: 7)
!2720 = !DILocation(line: 1974, column: 26, scope: !2719)
!2721 = !DILocation(line: 1974, column: 9, scope: !2719)
!2722 = !DILocation(line: 1975, column: 32, scope: !2719)
!2723 = !DILocation(line: 1975, column: 9, scope: !2719)
!2724 = !DILocation(line: 1976, column: 22, scope: !2719)
!2725 = !DILocation(line: 1977, column: 7, scope: !2719)
!2726 = !DILocation(line: 1978, column: 16, scope: !2727)
!2727 = distinct !DILexicalBlock(scope: !2710, file: !3, line: 1978, column: 14)
!2728 = !DILocation(line: 1978, column: 21, scope: !2727)
!2729 = !DILocation(line: 1981, column: 7, scope: !2727)
!2730 = !DILocation(line: 1981, column: 12, scope: !2727)
!2731 = !DILocation(line: 1982, column: 11, scope: !2727)
!2732 = !DILocation(line: 1982, column: 15, scope: !2727)
!2733 = !DILocation(line: 1987, column: 7, scope: !2727)
!2734 = !DILocation(line: 1983, column: 24, scope: !2727)
!2735 = !DILocation(line: 1983, column: 10, scope: !2727)
!2736 = !DILocation(line: 1984, column: 23, scope: !2727)
!2737 = !DILocation(line: 1984, column: 11, scope: !2727)
!2738 = !DILocation(line: 1985, column: 11, scope: !2727)
!2739 = !DILocation(line: 1985, column: 28, scope: !2727)
!2740 = !DILocation(line: 1985, column: 15, scope: !2727)
!2741 = !DILocation(line: 1987, column: 37, scope: !2727)
!2742 = !DILocation(line: 1987, column: 40, scope: !2727)
!2743 = !DILocation(line: 1987, column: 43, scope: !2727)
!2744 = !DILocation(line: 1987, column: 46, scope: !2727)
!2745 = !DILocation(line: 1987, column: 18, scope: !2727)
!2746 = !DILocation(line: 1987, column: 16, scope: !2727)
!2747 = !DILocation(line: 1978, column: 14, scope: !2710)
!2748 = !DILocation(line: 1989, column: 8, scope: !2749)
!2749 = distinct !DILexicalBlock(scope: !2727, file: !3, line: 1988, column: 9)
!2750 = !DILocation(line: 1989, column: 6, scope: !2749)
!2751 = !DILocation(line: 1990, column: 17, scope: !2749)
!2752 = !DILocation(line: 1991, column: 9, scope: !2749)
!2753 = !DILocation(line: 1992, column: 3, scope: !2711)
!2754 = !DILocation(line: 1995, column: 13, scope: !2755)
!2755 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 1995, column: 12)
!2756 = !DILocation(line: 1995, column: 18, scope: !2755)
!2757 = !DILocation(line: 1996, column: 6, scope: !2755)
!2758 = !DILocation(line: 1996, column: 11, scope: !2755)
!2759 = !DILocation(line: 1996, column: 16, scope: !2755)
!2760 = !DILocation(line: 1997, column: 6, scope: !2755)
!2761 = !DILocation(line: 1997, column: 32, scope: !2755)
!2762 = !DILocation(line: 1997, column: 9, scope: !2755)
!2763 = !DILocation(line: 1995, column: 12, scope: !2522)
!2764 = !DILocation(line: 1998, column: 16, scope: !2755)
!2765 = !DILocation(line: 1998, column: 3, scope: !2755)
!2766 = !DILocation(line: 2004, column: 27, scope: !2767)
!2767 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 2004, column: 12)
!2768 = !DILocation(line: 2004, column: 12, scope: !2767)
!2769 = !DILocation(line: 2005, column: 5, scope: !2767)
!2770 = !DILocation(line: 2005, column: 21, scope: !2767)
!2771 = !DILocation(line: 2005, column: 8, scope: !2767)
!2772 = !DILocation(line: 2005, column: 27, scope: !2767)
!2773 = !DILocation(line: 2005, column: 24, scope: !2767)
!2774 = !DILocation(line: 2006, column: 5, scope: !2767)
!2775 = !DILocation(line: 2006, column: 20, scope: !2767)
!2776 = !DILocation(line: 2006, column: 8, scope: !2767)
!2777 = !DILocation(line: 2007, column: 5, scope: !2767)
!2778 = !DILocation(line: 2007, column: 24, scope: !2767)
!2779 = !DILocation(line: 2007, column: 9, scope: !2767)
!2780 = !DILocation(line: 2008, column: 5, scope: !2767)
!2781 = !DILocation(line: 2008, column: 58, scope: !2767)
!2782 = !DILocation(line: 2008, column: 40, scope: !2767)
!2783 = !DILocation(line: 2009, column: 25, scope: !2767)
!2784 = !DILocation(line: 2009, column: 12, scope: !2767)
!2785 = !DILocation(line: 2010, column: 13, scope: !2767)
!2786 = !DILocation(line: 2010, column: 18, scope: !2767)
!2787 = !DILocation(line: 2010, column: 39, scope: !2767)
!2788 = !DILocation(line: 2010, column: 12, scope: !2767)
!2789 = !DILocation(line: 2008, column: 8, scope: !2767)
!2790 = !DILocation(line: 2004, column: 12, scope: !2522)
!2791 = !DILocation(line: 2012, column: 28, scope: !2792)
!2792 = distinct !DILexicalBlock(scope: !2767, file: !3, line: 2011, column: 3)
!2793 = !DILocation(line: 2012, column: 5, scope: !2792)
!2794 = !DILocation(line: 2013, column: 18, scope: !2792)
!2795 = !DILocation(line: 2014, column: 3, scope: !2792)
!2796 = !DILocation(line: 2017, column: 31, scope: !2797)
!2797 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 2017, column: 12)
!2798 = !DILocation(line: 2017, column: 37, scope: !2797)
!2799 = !DILocation(line: 2017, column: 12, scope: !2797)
!2800 = !DILocation(line: 2017, column: 12, scope: !2522)
!2801 = !DILocation(line: 2018, column: 16, scope: !2797)
!2802 = !DILocation(line: 2018, column: 3, scope: !2797)
!2803 = !DILocation(line: 2021, column: 13, scope: !2804)
!2804 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 2021, column: 12)
!2805 = !DILocation(line: 2021, column: 18, scope: !2804)
!2806 = !DILocation(line: 2022, column: 5, scope: !2804)
!2807 = !DILocation(line: 2022, column: 26, scope: !2804)
!2808 = !DILocation(line: 2022, column: 32, scope: !2804)
!2809 = !DILocation(line: 2022, column: 8, scope: !2804)
!2810 = !DILocation(line: 2021, column: 12, scope: !2522)
!2811 = !DILocation(line: 2023, column: 16, scope: !2804)
!2812 = !DILocation(line: 2023, column: 3, scope: !2804)
!2813 = !DILocation(line: 2027, column: 13, scope: !2814)
!2814 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 2027, column: 12)
!2815 = !DILocation(line: 2027, column: 12, scope: !2522)
!2816 = !DILocation(line: 2028, column: 7, scope: !2814)
!2817 = !DILocation(line: 2028, column: 10, scope: !2814)
!2818 = !DILocation(line: 2028, column: 5, scope: !2814)
!2819 = !DILocation(line: 2028, column: 3, scope: !2814)
!2820 = !DILocation(line: 2030, column: 11, scope: !2814)
!2821 = !DILocation(line: 1870, column: 4, scope: !2517)
!2822 = !DILocation(line: 2033, column: 9, scope: !2823)
!2823 = distinct !DILexicalBlock(scope: !2503, file: !3, line: 2033, column: 8)
!2824 = !DILocation(line: 2033, column: 14, scope: !2823)
!2825 = !DILocation(line: 2034, column: 8, scope: !2823)
!2826 = !DILocation(line: 2034, column: 29, scope: !2823)
!2827 = !DILocation(line: 2034, column: 35, scope: !2823)
!2828 = !DILocation(line: 2034, column: 11, scope: !2823)
!2829 = !DILocation(line: 2033, column: 8, scope: !2503)
!2830 = !DILocation(line: 2035, column: 14, scope: !2823)
!2831 = !DILocation(line: 2035, column: 6, scope: !2823)
!2832 = !DILocation(line: 2042, column: 23, scope: !2503)
!2833 = !DILocation(line: 2042, column: 20, scope: !2503)
!2834 = !DILocation(line: 2043, column: 15, scope: !2503)
!2835 = !DILocation(line: 2044, column: 2, scope: !2503)
!2836 = !DILocation(line: 2045, column: 14, scope: !2500)
!2837 = distinct !{!2837, !2501, !2838}
!2838 = !DILocation(line: 2045, column: 21, scope: !2500)
!2839 = !DILocation(line: 2046, column: 5, scope: !2500)
!2840 = !DILocation(line: 2048, column: 3, scope: !2841)
!2841 = distinct !DILexicalBlock(scope: !2466, file: !3, line: 2048, column: 3)
!2842 = !DILocation(line: 2048, column: 3, scope: !2843)
!2843 = distinct !DILexicalBlock(scope: !2841, file: !3, line: 2048, column: 3)
!2844 = !DILocation(line: 2049, column: 5, scope: !2843)
!2845 = !DILocation(line: 2049, column: 8, scope: !2843)
!2846 = !DILocation(line: 2049, column: 14, scope: !2843)
!2847 = distinct !{!2847, !2840, !2848}
!2848 = !DILocation(line: 2049, column: 62, scope: !2841)
!2849 = !DILocation(line: 2051, column: 10, scope: !2466)
!2850 = !DILocation(line: 2051, column: 3, scope: !2466)
!2851 = distinct !DISubprogram(name: "rest_of_handle_jump", scope: !3, file: !3, line: 2247, type: !2147, scopeLine: 2248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2852 = !DILocation(line: 2249, column: 13, scope: !2853)
!2853 = distinct !DILexicalBlock(scope: !2851, file: !3, line: 2249, column: 7)
!2854 = !DILocation(line: 2249, column: 7, scope: !2853)
!2855 = !DILocation(line: 2249, column: 7, scope: !2851)
!2856 = !DILocation(line: 2250, column: 5, scope: !2853)
!2857 = !DILocation(line: 2251, column: 3, scope: !2851)
!2858 = distinct !DISubprogram(name: "rest_of_handle_jump2", scope: !3, file: !3, line: 2275, type: !2147, scopeLine: 2276, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2859 = !DILocation(line: 2277, column: 32, scope: !2858)
!2860 = !DILocation(line: 2277, column: 46, scope: !2858)
!2861 = !DILocation(line: 2277, column: 3, scope: !2858)
!2862 = !DILocation(line: 2278, column: 7, scope: !2863)
!2863 = distinct !DILexicalBlock(scope: !2858, file: !3, line: 2278, column: 7)
!2864 = !DILocation(line: 2278, column: 7, scope: !2858)
!2865 = !DILocation(line: 2279, column: 21, scope: !2863)
!2866 = !DILocation(line: 2279, column: 32, scope: !2863)
!2867 = !DILocation(line: 2279, column: 5, scope: !2863)
!2868 = !DILocation(line: 2280, column: 17, scope: !2858)
!2869 = !DILocation(line: 2281, column: 12, scope: !2858)
!2870 = !DILocation(line: 2281, column: 9, scope: !2858)
!2871 = !DILocation(line: 2280, column: 3, scope: !2858)
!2872 = !DILocation(line: 2282, column: 3, scope: !2858)
!2873 = distinct !DISubprogram(name: "update_forwarder_flag", scope: !3, file: !3, line: 101, type: !2874, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2874 = !DISubroutineType(types: !2875)
!2875 = !{null, !1370}
!2876 = !DILocalVariable(name: "bb", arg: 1, scope: !2873, file: !3, line: 101, type: !1370)
!2877 = !DILocation(line: 101, column: 36, scope: !2873)
!2878 = !DILocation(line: 103, column: 26, scope: !2879)
!2879 = distinct !DILexicalBlock(scope: !2873, file: !3, line: 103, column: 7)
!2880 = !DILocation(line: 103, column: 7, scope: !2879)
!2881 = !DILocation(line: 103, column: 7, scope: !2873)
!2882 = !DILocation(line: 104, column: 5, scope: !2879)
!2883 = !DILocation(line: 104, column: 9, scope: !2879)
!2884 = !DILocation(line: 104, column: 15, scope: !2879)
!2885 = !DILocation(line: 106, column: 5, scope: !2879)
!2886 = !DILocation(line: 106, column: 9, scope: !2879)
!2887 = !DILocation(line: 106, column: 15, scope: !2879)
!2888 = !DILocation(line: 107, column: 1, scope: !2873)
!2889 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !135, file: !135, line: 150, type: !2890, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2890 = !DISubroutineType(types: !2891)
!2891 = !{!7, !2892}
!2892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2893, size: 64)
!2893 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1380)
!2894 = !DILocalVariable(name: "vec_", arg: 1, scope: !2889, file: !135, line: 150, type: !2892)
!2895 = !DILocation(line: 150, column: 1, scope: !2889)
!2896 = distinct !DISubprogram(name: "trivially_empty_bb_p", scope: !3, file: !3, line: 1821, type: !2897, scopeLine: 1822, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2897 = !DISubroutineType(types: !2898)
!2898 = !{!1225, !1370}
!2899 = !DILocalVariable(name: "bb", arg: 1, scope: !2896, file: !3, line: 1821, type: !1370)
!2900 = !DILocation(line: 1821, column: 35, scope: !2896)
!2901 = !DILocalVariable(name: "insn", scope: !2896, file: !3, line: 1823, type: !970)
!2902 = !DILocation(line: 1823, column: 7, scope: !2896)
!2903 = !DILocation(line: 1823, column: 14, scope: !2896)
!2904 = !DILocation(line: 1825, column: 3, scope: !2896)
!2905 = !DILocation(line: 1827, column: 11, scope: !2906)
!2906 = distinct !DILexicalBlock(scope: !2907, file: !3, line: 1827, column: 11)
!2907 = distinct !DILexicalBlock(scope: !2896, file: !3, line: 1826, column: 5)
!2908 = !DILocation(line: 1827, column: 19, scope: !2906)
!2909 = !DILocation(line: 1827, column: 16, scope: !2906)
!2910 = !DILocation(line: 1827, column: 11, scope: !2907)
!2911 = !DILocation(line: 1828, column: 2, scope: !2906)
!2912 = !DILocation(line: 1829, column: 12, scope: !2913)
!2913 = distinct !DILexicalBlock(scope: !2907, file: !3, line: 1829, column: 11)
!2914 = !DILocation(line: 1829, column: 11, scope: !2907)
!2915 = !DILocation(line: 1830, column: 2, scope: !2913)
!2916 = !DILocation(line: 1831, column: 14, scope: !2907)
!2917 = !DILocation(line: 1831, column: 12, scope: !2907)
!2918 = distinct !{!2918, !2904, !2919}
!2919 = !DILocation(line: 1832, column: 5, scope: !2896)
!2920 = !DILocation(line: 1833, column: 1, scope: !2896)
!2921 = distinct !DISubprogram(name: "single_succ_edge", scope: !135, file: !135, line: 643, type: !2922, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2922 = !DISubroutineType(types: !2923)
!2923 = !{!1387, !2924}
!2924 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !391, line: 112, baseType: !2925)
!2925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2926, size: 64)
!2926 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1372)
!2927 = !DILocalVariable(name: "bb", arg: 1, scope: !2921, file: !135, line: 643, type: !2924)
!2928 = !DILocation(line: 643, column: 37, scope: !2921)
!2929 = !DILocation(line: 645, column: 3, scope: !2921)
!2930 = !DILocation(line: 646, column: 10, scope: !2921)
!2931 = !DILocation(line: 646, column: 3, scope: !2921)
!2932 = distinct !DISubprogram(name: "single_pred_p", scope: !135, file: !135, line: 634, type: !2933, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2933 = !DISubroutineType(types: !2934)
!2934 = !{!1225, !2924}
!2935 = !DILocalVariable(name: "bb", arg: 1, scope: !2932, file: !135, line: 634, type: !2924)
!2936 = !DILocation(line: 634, column: 34, scope: !2932)
!2937 = !DILocation(line: 636, column: 10, scope: !2932)
!2938 = !DILocation(line: 636, column: 33, scope: !2932)
!2939 = !DILocation(line: 636, column: 3, scope: !2932)
!2940 = distinct !DISubprogram(name: "single_pred_edge", scope: !135, file: !135, line: 653, type: !2922, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2941 = !DILocalVariable(name: "bb", arg: 1, scope: !2940, file: !135, line: 653, type: !2924)
!2942 = !DILocation(line: 653, column: 37, scope: !2940)
!2943 = !DILocation(line: 655, column: 3, scope: !2940)
!2944 = !DILocation(line: 656, column: 10, scope: !2940)
!2945 = !DILocation(line: 656, column: 3, scope: !2940)
!2946 = distinct !DISubprogram(name: "single_pred", scope: !135, file: !135, line: 672, type: !2947, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2947 = !DISubroutineType(types: !2948)
!2948 = !{!1370, !2924}
!2949 = !DILocalVariable(name: "bb", arg: 1, scope: !2946, file: !135, line: 672, type: !2924)
!2950 = !DILocation(line: 672, column: 32, scope: !2946)
!2951 = !DILocation(line: 674, column: 28, scope: !2946)
!2952 = !DILocation(line: 674, column: 10, scope: !2946)
!2953 = !DILocation(line: 674, column: 33, scope: !2946)
!2954 = !DILocation(line: 674, column: 3, scope: !2946)
!2955 = distinct !DISubprogram(name: "single_succ", scope: !135, file: !135, line: 663, type: !2947, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2956 = !DILocalVariable(name: "bb", arg: 1, scope: !2955, file: !135, line: 663, type: !2924)
!2957 = !DILocation(line: 663, column: 32, scope: !2955)
!2958 = !DILocation(line: 665, column: 28, scope: !2955)
!2959 = !DILocation(line: 665, column: 10, scope: !2955)
!2960 = !DILocation(line: 665, column: 33, scope: !2955)
!2961 = !DILocation(line: 665, column: 3, scope: !2955)
!2962 = distinct !DISubprogram(name: "single_succ_p", scope: !135, file: !135, line: 626, type: !2933, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2963 = !DILocalVariable(name: "bb", arg: 1, scope: !2962, file: !135, line: 626, type: !2924)
!2964 = !DILocation(line: 626, column: 34, scope: !2962)
!2965 = !DILocation(line: 628, column: 10, scope: !2962)
!2966 = !DILocation(line: 628, column: 33, scope: !2962)
!2967 = !DILocation(line: 628, column: 3, scope: !2962)
!2968 = distinct !DISubprogram(name: "merge_blocks_move", scope: !3, file: !3, line: 754, type: !2969, scopeLine: 755, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!2969 = !DISubroutineType(types: !2970)
!2970 = !{!1370, !1387, !1370, !1370, !993}
!2971 = !DILocalVariable(name: "e", arg: 1, scope: !2968, file: !3, line: 754, type: !1387)
!2972 = !DILocation(line: 754, column: 25, scope: !2968)
!2973 = !DILocalVariable(name: "b", arg: 2, scope: !2968, file: !3, line: 754, type: !1370)
!2974 = !DILocation(line: 754, column: 40, scope: !2968)
!2975 = !DILocalVariable(name: "c", arg: 3, scope: !2968, file: !3, line: 754, type: !1370)
!2976 = !DILocation(line: 754, column: 55, scope: !2968)
!2977 = !DILocalVariable(name: "mode", arg: 4, scope: !2968, file: !3, line: 754, type: !993)
!2978 = !DILocation(line: 754, column: 62, scope: !2968)
!2979 = !DILocalVariable(name: "next", scope: !2968, file: !3, line: 756, type: !1370)
!2980 = !DILocation(line: 756, column: 15, scope: !2968)
!2981 = !DILocation(line: 768, column: 7, scope: !2982)
!2982 = distinct !DILexicalBlock(scope: !2968, file: !3, line: 768, column: 7)
!2983 = !DILocation(line: 768, column: 27, scope: !2982)
!2984 = !DILocation(line: 768, column: 24, scope: !2982)
!2985 = !DILocation(line: 768, column: 7, scope: !2968)
!2986 = !DILocation(line: 769, column: 5, scope: !2982)
!2987 = !DILocation(line: 772, column: 7, scope: !2988)
!2988 = distinct !DILexicalBlock(scope: !2968, file: !3, line: 772, column: 7)
!2989 = !DILocation(line: 772, column: 10, scope: !2988)
!2990 = !DILocation(line: 772, column: 16, scope: !2988)
!2991 = !DILocation(line: 772, column: 7, scope: !2968)
!2992 = !DILocalVariable(name: "b_index", scope: !2993, file: !3, line: 774, type: !993)
!2993 = distinct !DILexicalBlock(scope: !2988, file: !3, line: 773, column: 5)
!2994 = !DILocation(line: 774, column: 11, scope: !2993)
!2995 = !DILocation(line: 774, column: 21, scope: !2993)
!2996 = !DILocation(line: 774, column: 24, scope: !2993)
!2997 = !DILocalVariable(name: "c_index", scope: !2993, file: !3, line: 774, type: !993)
!2998 = !DILocation(line: 774, column: 31, scope: !2993)
!2999 = !DILocation(line: 774, column: 41, scope: !2993)
!3000 = !DILocation(line: 774, column: 44, scope: !2993)
!3001 = !DILocation(line: 775, column: 21, scope: !2993)
!3002 = !DILocation(line: 775, column: 24, scope: !2993)
!3003 = !DILocation(line: 775, column: 7, scope: !2993)
!3004 = !DILocation(line: 776, column: 30, scope: !2993)
!3005 = !DILocation(line: 776, column: 7, scope: !2993)
!3006 = !DILocation(line: 778, column: 11, scope: !3007)
!3007 = distinct !DILexicalBlock(scope: !2993, file: !3, line: 778, column: 11)
!3008 = !DILocation(line: 778, column: 11, scope: !2993)
!3009 = !DILocation(line: 779, column: 11, scope: !3007)
!3010 = !DILocation(line: 780, column: 4, scope: !3007)
!3011 = !DILocation(line: 780, column: 13, scope: !3007)
!3012 = !DILocation(line: 779, column: 2, scope: !3007)
!3013 = !DILocation(line: 782, column: 14, scope: !2993)
!3014 = !DILocation(line: 782, column: 17, scope: !2993)
!3015 = !DILocation(line: 782, column: 28, scope: !2993)
!3016 = !DILocation(line: 782, column: 25, scope: !2993)
!3017 = !DILocation(line: 782, column: 46, scope: !2993)
!3018 = !DILocation(line: 782, column: 50, scope: !2993)
!3019 = !DILocation(line: 782, column: 53, scope: !2993)
!3020 = !DILocation(line: 782, column: 7, scope: !2993)
!3021 = !DILocation(line: 787, column: 12, scope: !3022)
!3022 = distinct !DILexicalBlock(scope: !2988, file: !3, line: 787, column: 12)
!3023 = !DILocation(line: 787, column: 17, scope: !3022)
!3024 = !DILocation(line: 787, column: 12, scope: !2988)
!3025 = !DILocalVariable(name: "tmp_edge", scope: !3026, file: !3, line: 789, type: !1387)
!3026 = distinct !DILexicalBlock(scope: !3022, file: !3, line: 788, column: 5)
!3027 = !DILocation(line: 789, column: 12, scope: !3026)
!3028 = !DILocalVariable(name: "b_fallthru_edge", scope: !3026, file: !3, line: 789, type: !1387)
!3029 = !DILocation(line: 789, column: 22, scope: !3026)
!3030 = !DILocalVariable(name: "c_has_outgoing_fallthru", scope: !3026, file: !3, line: 790, type: !1225)
!3031 = !DILocation(line: 790, column: 12, scope: !3026)
!3032 = !DILocalVariable(name: "b_has_incoming_fallthru", scope: !3026, file: !3, line: 791, type: !1225)
!3033 = !DILocation(line: 791, column: 12, scope: !3026)
!3034 = !DILocalVariable(name: "ei", scope: !3026, file: !3, line: 792, type: !3035)
!3035 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !135, line: 682, baseType: !3036)
!3036 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !135, line: 679, size: 128, elements: !3037)
!3037 = !{!3038, !3039}
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3036, file: !135, line: 680, baseType: !7, size: 32)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !3036, file: !135, line: 681, baseType: !3040, size: 64, offset: 64)
!3040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1375, size: 64)
!3041 = !DILocation(line: 792, column: 21, scope: !3026)
!3042 = !DILocation(line: 798, column: 11, scope: !3043)
!3043 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 798, column: 11)
!3044 = !DILocation(line: 798, column: 33, scope: !3043)
!3045 = !DILocation(line: 798, column: 36, scope: !3043)
!3046 = !DILocation(line: 798, column: 11, scope: !3026)
!3047 = !DILocation(line: 799, column: 2, scope: !3043)
!3048 = !DILocation(line: 805, column: 7, scope: !3049)
!3049 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 805, column: 7)
!3050 = !DILocation(line: 805, column: 7, scope: !3051)
!3051 = distinct !DILexicalBlock(scope: !3049, file: !3, line: 805, column: 7)
!3052 = !DILocation(line: 806, column: 6, scope: !3053)
!3053 = distinct !DILexicalBlock(scope: !3051, file: !3, line: 806, column: 6)
!3054 = !DILocation(line: 806, column: 16, scope: !3053)
!3055 = !DILocation(line: 806, column: 22, scope: !3053)
!3056 = !DILocation(line: 806, column: 6, scope: !3051)
!3057 = !DILocation(line: 807, column: 4, scope: !3053)
!3058 = !DILocation(line: 806, column: 24, scope: !3053)
!3059 = distinct !{!3059, !3048, !3060}
!3060 = !DILocation(line: 807, column: 4, scope: !3049)
!3061 = !DILocation(line: 809, column: 34, scope: !3026)
!3062 = !DILocation(line: 809, column: 43, scope: !3026)
!3063 = !DILocation(line: 809, column: 33, scope: !3026)
!3064 = !DILocation(line: 809, column: 31, scope: !3026)
!3065 = !DILocation(line: 811, column: 7, scope: !3066)
!3066 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 811, column: 7)
!3067 = !DILocation(line: 811, column: 7, scope: !3068)
!3068 = distinct !DILexicalBlock(scope: !3066, file: !3, line: 811, column: 7)
!3069 = !DILocation(line: 812, column: 6, scope: !3070)
!3070 = distinct !DILexicalBlock(scope: !3068, file: !3, line: 812, column: 6)
!3071 = !DILocation(line: 812, column: 16, scope: !3070)
!3072 = !DILocation(line: 812, column: 22, scope: !3070)
!3073 = !DILocation(line: 812, column: 6, scope: !3068)
!3074 = !DILocation(line: 813, column: 4, scope: !3070)
!3075 = !DILocation(line: 812, column: 24, scope: !3070)
!3076 = distinct !{!3076, !3065, !3077}
!3077 = !DILocation(line: 813, column: 4, scope: !3066)
!3078 = !DILocation(line: 815, column: 34, scope: !3026)
!3079 = !DILocation(line: 815, column: 43, scope: !3026)
!3080 = !DILocation(line: 815, column: 33, scope: !3026)
!3081 = !DILocation(line: 815, column: 31, scope: !3026)
!3082 = !DILocation(line: 816, column: 25, scope: !3026)
!3083 = !DILocation(line: 816, column: 23, scope: !3026)
!3084 = !DILocation(line: 817, column: 14, scope: !3026)
!3085 = !DILocation(line: 817, column: 17, scope: !3026)
!3086 = !DILocation(line: 817, column: 12, scope: !3026)
!3087 = !DILocation(line: 818, column: 11, scope: !3088)
!3088 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 818, column: 11)
!3089 = !DILocation(line: 818, column: 19, scope: !3088)
!3090 = !DILocation(line: 818, column: 16, scope: !3088)
!3091 = !DILocation(line: 818, column: 11, scope: !3026)
!3092 = !DILocation(line: 819, column: 9, scope: !3088)
!3093 = !DILocation(line: 819, column: 15, scope: !3088)
!3094 = !DILocation(line: 819, column: 7, scope: !3088)
!3095 = !DILocation(line: 819, column: 2, scope: !3088)
!3096 = !DILocation(line: 824, column: 13, scope: !3097)
!3097 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 824, column: 11)
!3098 = !DILocation(line: 824, column: 11, scope: !3026)
!3099 = !DILocation(line: 826, column: 41, scope: !3100)
!3100 = distinct !DILexicalBlock(scope: !3097, file: !3, line: 825, column: 2)
!3101 = !DILocation(line: 826, column: 44, scope: !3100)
!3102 = !DILocation(line: 826, column: 4, scope: !3100)
!3103 = !DILocation(line: 827, column: 11, scope: !3100)
!3104 = !DILocation(line: 827, column: 19, scope: !3100)
!3105 = !DILocation(line: 827, column: 16, scope: !3100)
!3106 = !DILocation(line: 827, column: 37, scope: !3100)
!3107 = !DILocation(line: 827, column: 43, scope: !3100)
!3108 = !DILocation(line: 827, column: 53, scope: !3100)
!3109 = !DILocation(line: 827, column: 4, scope: !3100)
!3110 = !DILocation(line: 835, column: 11, scope: !3111)
!3111 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 835, column: 11)
!3112 = !DILocation(line: 835, column: 11, scope: !3026)
!3113 = !DILocalVariable(name: "bb", scope: !3114, file: !3, line: 837, type: !1370)
!3114 = distinct !DILexicalBlock(scope: !3111, file: !3, line: 836, column: 2)
!3115 = !DILocation(line: 837, column: 16, scope: !3114)
!3116 = !DILocation(line: 839, column: 8, scope: !3117)
!3117 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 839, column: 8)
!3118 = !DILocation(line: 839, column: 25, scope: !3117)
!3119 = !DILocation(line: 839, column: 32, scope: !3117)
!3120 = !DILocation(line: 839, column: 29, scope: !3117)
!3121 = !DILocation(line: 839, column: 8, scope: !3114)
!3122 = !DILocation(line: 840, column: 6, scope: !3117)
!3123 = !DILocation(line: 841, column: 28, scope: !3114)
!3124 = !DILocation(line: 841, column: 9, scope: !3114)
!3125 = !DILocation(line: 841, column: 7, scope: !3114)
!3126 = !DILocation(line: 842, column: 8, scope: !3127)
!3127 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 842, column: 8)
!3128 = !DILocation(line: 842, column: 8, scope: !3114)
!3129 = !DILocation(line: 843, column: 24, scope: !3127)
!3130 = !DILocation(line: 843, column: 6, scope: !3127)
!3131 = !DILocation(line: 844, column: 2, scope: !3114)
!3132 = !DILocation(line: 846, column: 46, scope: !3026)
!3133 = !DILocation(line: 846, column: 49, scope: !3026)
!3134 = !DILocation(line: 846, column: 7, scope: !3026)
!3135 = !DILocation(line: 847, column: 14, scope: !3026)
!3136 = !DILocation(line: 847, column: 22, scope: !3026)
!3137 = !DILocation(line: 847, column: 19, scope: !3026)
!3138 = !DILocation(line: 847, column: 40, scope: !3026)
!3139 = !DILocation(line: 847, column: 46, scope: !3026)
!3140 = !DILocation(line: 847, column: 56, scope: !3026)
!3141 = !DILocation(line: 847, column: 7, scope: !3026)
!3142 = !DILocation(line: 850, column: 3, scope: !2968)
!3143 = !DILocation(line: 851, column: 1, scope: !2968)
!3144 = distinct !DISubprogram(name: "try_simplify_condjump", scope: !3, file: !3, line: 113, type: !2897, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!3145 = !DILocalVariable(name: "cbranch_block", arg: 1, scope: !3144, file: !3, line: 113, type: !1370)
!3146 = !DILocation(line: 113, column: 36, scope: !3144)
!3147 = !DILocalVariable(name: "jump_block", scope: !3144, file: !3, line: 115, type: !1370)
!3148 = !DILocation(line: 115, column: 15, scope: !3144)
!3149 = !DILocalVariable(name: "jump_dest_block", scope: !3144, file: !3, line: 115, type: !1370)
!3150 = !DILocation(line: 115, column: 27, scope: !3144)
!3151 = !DILocalVariable(name: "cbranch_dest_block", scope: !3144, file: !3, line: 115, type: !1370)
!3152 = !DILocation(line: 115, column: 44, scope: !3144)
!3153 = !DILocalVariable(name: "cbranch_jump_edge", scope: !3144, file: !3, line: 116, type: !1387)
!3154 = !DILocation(line: 116, column: 8, scope: !3144)
!3155 = !DILocalVariable(name: "cbranch_fallthru_edge", scope: !3144, file: !3, line: 116, type: !1387)
!3156 = !DILocation(line: 116, column: 27, scope: !3144)
!3157 = !DILocalVariable(name: "cbranch_insn", scope: !3144, file: !3, line: 117, type: !970)
!3158 = !DILocation(line: 117, column: 7, scope: !3144)
!3159 = !DILocation(line: 120, column: 7, scope: !3160)
!3160 = distinct !DILexicalBlock(scope: !3144, file: !3, line: 120, column: 7)
!3161 = !DILocation(line: 120, column: 41, scope: !3160)
!3162 = !DILocation(line: 120, column: 7, scope: !3144)
!3163 = !DILocation(line: 121, column: 5, scope: !3160)
!3164 = !DILocation(line: 125, column: 18, scope: !3144)
!3165 = !DILocation(line: 125, column: 16, scope: !3144)
!3166 = !DILocation(line: 126, column: 24, scope: !3167)
!3167 = distinct !DILexicalBlock(scope: !3144, file: !3, line: 126, column: 7)
!3168 = !DILocation(line: 126, column: 8, scope: !3167)
!3169 = !DILocation(line: 126, column: 7, scope: !3144)
!3170 = !DILocation(line: 127, column: 5, scope: !3167)
!3171 = !DILocation(line: 129, column: 27, scope: !3144)
!3172 = !DILocation(line: 129, column: 25, scope: !3144)
!3173 = !DILocation(line: 130, column: 23, scope: !3144)
!3174 = !DILocation(line: 130, column: 21, scope: !3144)
!3175 = !DILocation(line: 135, column: 16, scope: !3144)
!3176 = !DILocation(line: 135, column: 39, scope: !3144)
!3177 = !DILocation(line: 135, column: 14, scope: !3144)
!3178 = !DILocation(line: 136, column: 23, scope: !3179)
!3179 = distinct !DILexicalBlock(scope: !3144, file: !3, line: 136, column: 7)
!3180 = !DILocation(line: 136, column: 8, scope: !3179)
!3181 = !DILocation(line: 137, column: 7, scope: !3179)
!3182 = !DILocation(line: 137, column: 10, scope: !3179)
!3183 = !DILocation(line: 137, column: 22, scope: !3179)
!3184 = !DILocation(line: 137, column: 33, scope: !3179)
!3185 = !DILocation(line: 137, column: 30, scope: !3179)
!3186 = !DILocation(line: 138, column: 7, scope: !3179)
!3187 = !DILocation(line: 138, column: 11, scope: !3179)
!3188 = !DILocation(line: 136, column: 7, scope: !3144)
!3189 = !DILocation(line: 139, column: 5, scope: !3179)
!3190 = !DILocation(line: 140, column: 34, scope: !3144)
!3191 = !DILocation(line: 140, column: 21, scope: !3144)
!3192 = !DILocation(line: 140, column: 19, scope: !3144)
!3193 = !DILocation(line: 152, column: 7, scope: !3194)
!3194 = distinct !DILexicalBlock(scope: !3144, file: !3, line: 152, column: 7)
!3195 = !DILocation(line: 152, column: 36, scope: !3194)
!3196 = !DILocation(line: 152, column: 33, scope: !3194)
!3197 = !DILocation(line: 153, column: 7, scope: !3194)
!3198 = !DILocation(line: 153, column: 11, scope: !3194)
!3199 = !DILocation(line: 153, column: 30, scope: !3194)
!3200 = !DILocation(line: 153, column: 36, scope: !3194)
!3201 = !DILocation(line: 152, column: 7, scope: !3144)
!3202 = !DILocation(line: 154, column: 5, scope: !3194)
!3203 = !DILocation(line: 158, column: 24, scope: !3144)
!3204 = !DILocation(line: 158, column: 43, scope: !3144)
!3205 = !DILocation(line: 158, column: 22, scope: !3144)
!3206 = !DILocation(line: 160, column: 7, scope: !3207)
!3207 = distinct !DILexicalBlock(scope: !3144, file: !3, line: 160, column: 7)
!3208 = !DILocation(line: 160, column: 29, scope: !3207)
!3209 = !DILocation(line: 160, column: 26, scope: !3207)
!3210 = !DILocation(line: 161, column: 7, scope: !3207)
!3211 = !DILocation(line: 161, column: 25, scope: !3207)
!3212 = !DILocation(line: 161, column: 37, scope: !3207)
!3213 = !DILocation(line: 161, column: 11, scope: !3207)
!3214 = !DILocation(line: 160, column: 7, scope: !3144)
!3215 = !DILocation(line: 162, column: 5, scope: !3207)
!3216 = !DILocation(line: 165, column: 21, scope: !3217)
!3217 = distinct !DILexicalBlock(scope: !3144, file: !3, line: 165, column: 7)
!3218 = !DILocation(line: 165, column: 48, scope: !3217)
!3219 = !DILocation(line: 165, column: 35, scope: !3217)
!3220 = !DILocation(line: 165, column: 8, scope: !3217)
!3221 = !DILocation(line: 165, column: 7, scope: !3144)
!3222 = !DILocation(line: 166, column: 5, scope: !3217)
!3223 = !DILocation(line: 168, column: 7, scope: !3224)
!3224 = distinct !DILexicalBlock(scope: !3144, file: !3, line: 168, column: 7)
!3225 = !DILocation(line: 168, column: 7, scope: !3144)
!3226 = !DILocation(line: 169, column: 14, scope: !3224)
!3227 = !DILocation(line: 170, column: 7, scope: !3224)
!3228 = !DILocation(line: 170, column: 32, scope: !3224)
!3229 = !DILocation(line: 169, column: 5, scope: !3224)
!3230 = !DILocation(line: 175, column: 49, scope: !3144)
!3231 = !DILocation(line: 176, column: 7, scope: !3144)
!3232 = !DILocation(line: 175, column: 23, scope: !3144)
!3233 = !DILocation(line: 175, column: 21, scope: !3144)
!3234 = !DILocation(line: 177, column: 53, scope: !3144)
!3235 = !DILocation(line: 178, column: 11, scope: !3144)
!3236 = !DILocation(line: 177, column: 27, scope: !3144)
!3237 = !DILocation(line: 177, column: 25, scope: !3144)
!3238 = !DILocation(line: 179, column: 3, scope: !3144)
!3239 = !DILocation(line: 179, column: 22, scope: !3144)
!3240 = !DILocation(line: 179, column: 28, scope: !3144)
!3241 = !DILocation(line: 180, column: 3, scope: !3144)
!3242 = !DILocation(line: 180, column: 26, scope: !3144)
!3243 = !DILocation(line: 180, column: 32, scope: !3144)
!3244 = !DILocation(line: 181, column: 24, scope: !3144)
!3245 = !DILocation(line: 181, column: 3, scope: !3144)
!3246 = !DILocation(line: 184, column: 23, scope: !3144)
!3247 = !DILocation(line: 184, column: 3, scope: !3144)
!3248 = !DILocation(line: 185, column: 23, scope: !3144)
!3249 = !DILocation(line: 185, column: 3, scope: !3144)
!3250 = !DILocation(line: 186, column: 26, scope: !3144)
!3251 = !DILocation(line: 186, column: 3, scope: !3144)
!3252 = !DILocation(line: 188, column: 3, scope: !3144)
!3253 = !DILocation(line: 189, column: 1, scope: !3144)
!3254 = distinct !DISubprogram(name: "try_forward_edges", scope: !3, file: !3, line: 410, type: !3255, scopeLine: 411, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!3255 = !DISubroutineType(types: !3256)
!3256 = !{!1225, !993, !1370}
!3257 = !DILocalVariable(name: "mode", arg: 1, scope: !3254, file: !3, line: 410, type: !993)
!3258 = !DILocation(line: 410, column: 24, scope: !3254)
!3259 = !DILocalVariable(name: "b", arg: 2, scope: !3254, file: !3, line: 410, type: !1370)
!3260 = !DILocation(line: 410, column: 42, scope: !3254)
!3261 = !DILocalVariable(name: "changed", scope: !3254, file: !3, line: 412, type: !1225)
!3262 = !DILocation(line: 412, column: 8, scope: !3254)
!3263 = !DILocalVariable(name: "ei", scope: !3254, file: !3, line: 413, type: !3035)
!3264 = !DILocation(line: 413, column: 17, scope: !3254)
!3265 = !DILocalVariable(name: "e", scope: !3254, file: !3, line: 414, type: !1387)
!3266 = !DILocation(line: 414, column: 8, scope: !3254)
!3267 = !DILocalVariable(name: "threaded_edges", scope: !3254, file: !3, line: 414, type: !2125)
!3268 = !DILocation(line: 414, column: 12, scope: !3254)
!3269 = !DILocation(line: 426, column: 22, scope: !3270)
!3270 = distinct !DILexicalBlock(scope: !3254, file: !3, line: 426, column: 7)
!3271 = !DILocation(line: 426, column: 7, scope: !3270)
!3272 = !DILocation(line: 426, column: 7, scope: !3254)
!3273 = !DILocation(line: 427, column: 5, scope: !3270)
!3274 = !DILocation(line: 429, column: 13, scope: !3275)
!3275 = distinct !DILexicalBlock(scope: !3254, file: !3, line: 429, column: 3)
!3276 = !DILocation(line: 429, column: 8, scope: !3275)
!3277 = !DILocation(line: 429, column: 39, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3275, file: !3, line: 429, column: 3)
!3279 = !DILocation(line: 429, column: 37, scope: !3278)
!3280 = !DILocation(line: 429, column: 3, scope: !3275)
!3281 = !DILocalVariable(name: "target", scope: !3282, file: !3, line: 431, type: !1370)
!3282 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 430, column: 5)
!3283 = !DILocation(line: 431, column: 19, scope: !3282)
!3284 = !DILocalVariable(name: "first", scope: !3282, file: !3, line: 431, type: !1370)
!3285 = !DILocation(line: 431, column: 27, scope: !3282)
!3286 = !DILocalVariable(name: "counter", scope: !3282, file: !3, line: 432, type: !993)
!3287 = !DILocation(line: 432, column: 11, scope: !3282)
!3288 = !DILocalVariable(name: "goto_locus", scope: !3282, file: !3, line: 432, type: !993)
!3289 = !DILocation(line: 432, column: 20, scope: !3282)
!3290 = !DILocalVariable(name: "threaded", scope: !3282, file: !3, line: 433, type: !1225)
!3291 = !DILocation(line: 433, column: 12, scope: !3282)
!3292 = !DILocalVariable(name: "nthreaded_edges", scope: !3282, file: !3, line: 434, type: !993)
!3293 = !DILocation(line: 434, column: 11, scope: !3282)
!3294 = !DILocalVariable(name: "may_thread", scope: !3282, file: !3, line: 435, type: !1225)
!3295 = !DILocation(line: 435, column: 12, scope: !3282)
!3296 = !DILocation(line: 435, column: 25, scope: !3282)
!3297 = !DILocation(line: 435, column: 55, scope: !3282)
!3298 = !DILocation(line: 435, column: 38, scope: !3282)
!3299 = !DILocation(line: 435, column: 36, scope: !3282)
!3300 = !DILocation(line: 442, column: 11, scope: !3301)
!3301 = distinct !DILexicalBlock(scope: !3282, file: !3, line: 442, column: 11)
!3302 = !DILocation(line: 442, column: 14, scope: !3301)
!3303 = !DILocation(line: 442, column: 20, scope: !3301)
!3304 = !DILocation(line: 442, column: 11, scope: !3282)
!3305 = !DILocation(line: 444, column: 4, scope: !3306)
!3306 = distinct !DILexicalBlock(scope: !3301, file: !3, line: 443, column: 2)
!3307 = !DILocation(line: 445, column: 4, scope: !3306)
!3308 = distinct !{!3308, !3280, !3309}
!3309 = !DILocation(line: 636, column: 5, scope: !3275)
!3310 = !DILocation(line: 448, column: 24, scope: !3282)
!3311 = !DILocation(line: 448, column: 27, scope: !3282)
!3312 = !DILocation(line: 448, column: 22, scope: !3282)
!3313 = !DILocation(line: 448, column: 14, scope: !3282)
!3314 = !DILocation(line: 449, column: 15, scope: !3282)
!3315 = !DILocation(line: 450, column: 20, scope: !3282)
!3316 = !DILocation(line: 450, column: 23, scope: !3282)
!3317 = !DILocation(line: 450, column: 18, scope: !3282)
!3318 = !DILocation(line: 462, column: 11, scope: !3319)
!3319 = distinct !DILexicalBlock(scope: !3282, file: !3, line: 462, column: 11)
!3320 = !DILocation(line: 462, column: 20, scope: !3319)
!3321 = !DILocation(line: 462, column: 17, scope: !3319)
!3322 = !DILocation(line: 463, column: 4, scope: !3319)
!3323 = !DILocation(line: 463, column: 22, scope: !3319)
!3324 = !DILocation(line: 463, column: 7, scope: !3319)
!3325 = !DILocation(line: 462, column: 11, scope: !3282)
!3326 = !DILocation(line: 464, column: 2, scope: !3319)
!3327 = !DILocation(line: 466, column: 7, scope: !3282)
!3328 = !DILocation(line: 466, column: 14, scope: !3282)
!3329 = !DILocation(line: 466, column: 24, scope: !3282)
!3330 = !DILocation(line: 466, column: 22, scope: !3282)
!3331 = !DILocalVariable(name: "new_target", scope: !3332, file: !3, line: 468, type: !1370)
!3332 = distinct !DILexicalBlock(scope: !3282, file: !3, line: 467, column: 2)
!3333 = !DILocation(line: 468, column: 16, scope: !3332)
!3334 = !DILocalVariable(name: "new_target_threaded", scope: !3332, file: !3, line: 469, type: !1225)
!3335 = !DILocation(line: 469, column: 9, scope: !3332)
!3336 = !DILocation(line: 470, column: 35, scope: !3332)
!3337 = !DILocation(line: 470, column: 18, scope: !3332)
!3338 = !DILocation(line: 470, column: 15, scope: !3332)
!3339 = !DILocation(line: 472, column: 8, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !3332, file: !3, line: 472, column: 8)
!3341 = !DILocation(line: 473, column: 8, scope: !3340)
!3342 = !DILocation(line: 473, column: 31, scope: !3340)
!3343 = !DILocation(line: 473, column: 13, scope: !3340)
!3344 = !DILocation(line: 473, column: 40, scope: !3340)
!3345 = !DILocation(line: 473, column: 46, scope: !3340)
!3346 = !DILocation(line: 474, column: 8, scope: !3340)
!3347 = !DILocation(line: 474, column: 24, scope: !3340)
!3348 = !DILocation(line: 474, column: 11, scope: !3340)
!3349 = !DILocation(line: 474, column: 35, scope: !3340)
!3350 = !DILocation(line: 474, column: 32, scope: !3340)
!3351 = !DILocation(line: 472, column: 8, scope: !3332)
!3352 = !DILocation(line: 477, column: 34, scope: !3353)
!3353 = distinct !DILexicalBlock(scope: !3340, file: !3, line: 475, column: 6)
!3354 = !DILocation(line: 477, column: 21, scope: !3353)
!3355 = !DILocation(line: 477, column: 19, scope: !3353)
!3356 = !DILocation(line: 478, column: 12, scope: !3357)
!3357 = distinct !DILexicalBlock(scope: !3353, file: !3, line: 478, column: 12)
!3358 = !DILocation(line: 478, column: 22, scope: !3357)
!3359 = !DILocation(line: 478, column: 19, scope: !3357)
!3360 = !DILocation(line: 478, column: 12, scope: !3353)
!3361 = !DILocation(line: 479, column: 13, scope: !3357)
!3362 = !DILocation(line: 479, column: 11, scope: !3357)
!3363 = !DILocation(line: 479, column: 3, scope: !3357)
!3364 = !DILocation(line: 480, column: 18, scope: !3365)
!3365 = distinct !DILexicalBlock(scope: !3357, file: !3, line: 480, column: 17)
!3366 = !DILocation(line: 480, column: 17, scope: !3357)
!3367 = !DILocalVariable(name: "locus", scope: !3368, file: !3, line: 484, type: !993)
!3368 = distinct !DILexicalBlock(scope: !3365, file: !3, line: 481, column: 3)
!3369 = !DILocation(line: 484, column: 9, scope: !3368)
!3370 = !DILocation(line: 484, column: 35, scope: !3368)
!3371 = !DILocation(line: 484, column: 17, scope: !3368)
!3372 = !DILocation(line: 484, column: 44, scope: !3368)
!3373 = !DILocation(line: 486, column: 9, scope: !3374)
!3374 = distinct !DILexicalBlock(scope: !3368, file: !3, line: 486, column: 9)
!3375 = !DILocation(line: 486, column: 15, scope: !3374)
!3376 = !DILocation(line: 486, column: 18, scope: !3374)
!3377 = !DILocation(line: 486, column: 29, scope: !3374)
!3378 = !DILocation(line: 486, column: 45, scope: !3374)
!3379 = !DILocation(line: 486, column: 52, scope: !3374)
!3380 = !DILocation(line: 486, column: 33, scope: !3374)
!3381 = !DILocation(line: 486, column: 9, scope: !3368)
!3382 = !DILocation(line: 487, column: 17, scope: !3374)
!3383 = !DILocation(line: 487, column: 15, scope: !3374)
!3384 = !DILocation(line: 487, column: 7, scope: !3374)
!3385 = !DILocation(line: 488, column: 14, scope: !3386)
!3386 = distinct !DILexicalBlock(scope: !3374, file: !3, line: 488, column: 14)
!3387 = !DILocation(line: 488, column: 14, scope: !3374)
!3388 = !DILocation(line: 489, column: 20, scope: !3386)
!3389 = !DILocation(line: 489, column: 18, scope: !3386)
!3390 = !DILocation(line: 489, column: 7, scope: !3386)
!3391 = !DILocation(line: 491, column: 9, scope: !3392)
!3392 = distinct !DILexicalBlock(scope: !3368, file: !3, line: 491, column: 9)
!3393 = !DILocation(line: 491, column: 9, scope: !3368)
!3394 = !DILocation(line: 493, column: 17, scope: !3395)
!3395 = distinct !DILexicalBlock(scope: !3392, file: !3, line: 492, column: 7)
!3396 = !DILocation(line: 493, column: 15, scope: !3395)
!3397 = !DILocation(line: 495, column: 13, scope: !3398)
!3398 = distinct !DILexicalBlock(scope: !3395, file: !3, line: 495, column: 13)
!3399 = !DILocation(line: 495, column: 19, scope: !3398)
!3400 = !DILocation(line: 495, column: 22, scope: !3398)
!3401 = !DILocation(line: 496, column: 6, scope: !3398)
!3402 = !DILocation(line: 496, column: 22, scope: !3398)
!3403 = !DILocation(line: 496, column: 29, scope: !3398)
!3404 = !DILocation(line: 496, column: 10, scope: !3398)
!3405 = !DILocation(line: 495, column: 13, scope: !3395)
!3406 = !DILocation(line: 497, column: 14, scope: !3398)
!3407 = !DILocation(line: 497, column: 12, scope: !3398)
!3408 = !DILocation(line: 497, column: 4, scope: !3398)
!3409 = !DILocation(line: 498, column: 18, scope: !3410)
!3410 = distinct !DILexicalBlock(scope: !3398, file: !3, line: 498, column: 18)
!3411 = !DILocation(line: 498, column: 18, scope: !3398)
!3412 = !DILocation(line: 499, column: 17, scope: !3410)
!3413 = !DILocation(line: 499, column: 15, scope: !3410)
!3414 = !DILocation(line: 499, column: 4, scope: !3410)
!3415 = !DILocation(line: 500, column: 7, scope: !3395)
!3416 = !DILocation(line: 501, column: 3, scope: !3368)
!3417 = !DILocation(line: 502, column: 6, scope: !3353)
!3418 = !DILocation(line: 506, column: 14, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3340, file: !3, line: 506, column: 13)
!3420 = !DILocation(line: 506, column: 19, scope: !3419)
!3421 = !DILocation(line: 506, column: 40, scope: !3419)
!3422 = !DILocation(line: 506, column: 43, scope: !3419)
!3423 = !DILocation(line: 506, column: 13, scope: !3340)
!3424 = !DILocalVariable(name: "t", scope: !3425, file: !3, line: 508, type: !1387)
!3425 = distinct !DILexicalBlock(scope: !3419, file: !3, line: 507, column: 6)
!3426 = !DILocation(line: 508, column: 13, scope: !3425)
!3427 = !DILocation(line: 508, column: 30, scope: !3425)
!3428 = !DILocation(line: 508, column: 33, scope: !3425)
!3429 = !DILocation(line: 508, column: 17, scope: !3425)
!3430 = !DILocation(line: 509, column: 12, scope: !3431)
!3431 = distinct !DILexicalBlock(scope: !3425, file: !3, line: 509, column: 12)
!3432 = !DILocation(line: 509, column: 12, scope: !3425)
!3433 = !DILocation(line: 511, column: 10, scope: !3434)
!3434 = distinct !DILexicalBlock(scope: !3435, file: !3, line: 511, column: 9)
!3435 = distinct !DILexicalBlock(scope: !3431, file: !3, line: 510, column: 3)
!3436 = !DILocation(line: 511, column: 9, scope: !3435)
!3437 = !DILocation(line: 512, column: 24, scope: !3434)
!3438 = !DILocation(line: 512, column: 22, scope: !3434)
!3439 = !DILocation(line: 512, column: 7, scope: !3434)
!3440 = !DILocalVariable(name: "i", scope: !3441, file: !3, line: 515, type: !993)
!3441 = distinct !DILexicalBlock(scope: !3434, file: !3, line: 514, column: 7)
!3442 = !DILocation(line: 515, column: 13, scope: !3441)
!3443 = !DILocation(line: 519, column: 16, scope: !3444)
!3444 = distinct !DILexicalBlock(scope: !3441, file: !3, line: 519, column: 9)
!3445 = !DILocation(line: 519, column: 14, scope: !3444)
!3446 = !DILocation(line: 519, column: 21, scope: !3447)
!3447 = distinct !DILexicalBlock(scope: !3444, file: !3, line: 519, column: 9)
!3448 = !DILocation(line: 519, column: 25, scope: !3447)
!3449 = !DILocation(line: 519, column: 23, scope: !3447)
!3450 = !DILocation(line: 519, column: 9, scope: !3444)
!3451 = !DILocation(line: 520, column: 8, scope: !3452)
!3452 = distinct !DILexicalBlock(scope: !3447, file: !3, line: 520, column: 8)
!3453 = !DILocation(line: 520, column: 23, scope: !3452)
!3454 = !DILocation(line: 520, column: 29, scope: !3452)
!3455 = !DILocation(line: 520, column: 26, scope: !3452)
!3456 = !DILocation(line: 520, column: 8, scope: !3447)
!3457 = !DILocation(line: 521, column: 6, scope: !3452)
!3458 = !DILocation(line: 519, column: 42, scope: !3447)
!3459 = !DILocation(line: 519, column: 9, scope: !3447)
!3460 = distinct !{!3460, !3450, !3461}
!3461 = !DILocation(line: 521, column: 6, scope: !3444)
!3462 = !DILocation(line: 522, column: 13, scope: !3463)
!3463 = distinct !DILexicalBlock(scope: !3441, file: !3, line: 522, column: 13)
!3464 = !DILocation(line: 522, column: 17, scope: !3463)
!3465 = !DILocation(line: 522, column: 15, scope: !3463)
!3466 = !DILocation(line: 522, column: 13, scope: !3441)
!3467 = !DILocation(line: 524, column: 16, scope: !3468)
!3468 = distinct !DILexicalBlock(scope: !3463, file: !3, line: 523, column: 4)
!3469 = !DILocation(line: 524, column: 14, scope: !3468)
!3470 = !DILocation(line: 525, column: 6, scope: !3468)
!3471 = !DILocation(line: 530, column: 9, scope: !3472)
!3472 = distinct !DILexicalBlock(scope: !3435, file: !3, line: 530, column: 9)
!3473 = !DILocation(line: 530, column: 12, scope: !3472)
!3474 = !DILocation(line: 530, column: 20, scope: !3472)
!3475 = !DILocation(line: 530, column: 17, scope: !3472)
!3476 = !DILocation(line: 530, column: 9, scope: !3435)
!3477 = !DILocation(line: 531, column: 7, scope: !3472)
!3478 = !DILocation(line: 533, column: 5, scope: !3435)
!3479 = !DILocation(line: 534, column: 41, scope: !3435)
!3480 = !DILocation(line: 534, column: 5, scope: !3435)
!3481 = !DILocation(line: 534, column: 35, scope: !3435)
!3482 = !DILocation(line: 534, column: 39, scope: !3435)
!3483 = !DILocation(line: 536, column: 18, scope: !3435)
!3484 = !DILocation(line: 536, column: 21, scope: !3435)
!3485 = !DILocation(line: 536, column: 16, scope: !3435)
!3486 = !DILocation(line: 537, column: 25, scope: !3435)
!3487 = !DILocation(line: 538, column: 3, scope: !3435)
!3488 = !DILocation(line: 539, column: 6, scope: !3425)
!3489 = !DILocation(line: 541, column: 9, scope: !3490)
!3490 = distinct !DILexicalBlock(scope: !3332, file: !3, line: 541, column: 8)
!3491 = !DILocation(line: 541, column: 8, scope: !3332)
!3492 = !DILocation(line: 542, column: 6, scope: !3490)
!3493 = !DILocation(line: 544, column: 11, scope: !3332)
!3494 = !DILocation(line: 545, column: 13, scope: !3332)
!3495 = !DILocation(line: 545, column: 11, scope: !3332)
!3496 = !DILocation(line: 546, column: 16, scope: !3332)
!3497 = !DILocation(line: 546, column: 13, scope: !3332)
!3498 = distinct !{!3498, !3327, !3499}
!3499 = !DILocation(line: 547, column: 2, scope: !3282)
!3500 = !DILocation(line: 549, column: 11, scope: !3501)
!3501 = distinct !DILexicalBlock(scope: !3282, file: !3, line: 549, column: 11)
!3502 = !DILocation(line: 549, column: 22, scope: !3501)
!3503 = !DILocation(line: 549, column: 19, scope: !3501)
!3504 = !DILocation(line: 549, column: 11, scope: !3282)
!3505 = !DILocation(line: 551, column: 8, scope: !3506)
!3506 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 551, column: 8)
!3507 = distinct !DILexicalBlock(scope: !3501, file: !3, line: 550, column: 2)
!3508 = !DILocation(line: 551, column: 8, scope: !3507)
!3509 = !DILocation(line: 552, column: 15, scope: !3506)
!3510 = !DILocation(line: 553, column: 8, scope: !3506)
!3511 = !DILocation(line: 553, column: 16, scope: !3506)
!3512 = !DILocation(line: 552, column: 6, scope: !3506)
!3513 = !DILocation(line: 554, column: 2, scope: !3507)
!3514 = !DILocation(line: 555, column: 16, scope: !3515)
!3515 = distinct !DILexicalBlock(scope: !3501, file: !3, line: 555, column: 16)
!3516 = !DILocation(line: 555, column: 26, scope: !3515)
!3517 = !DILocation(line: 555, column: 23, scope: !3515)
!3518 = !DILocation(line: 555, column: 16, scope: !3501)
!3519 = !DILocalVariable(name: "edge_count", scope: !3520, file: !3, line: 560, type: !1408)
!3520 = distinct !DILexicalBlock(scope: !3515, file: !3, line: 558, column: 2)
!3521 = !DILocation(line: 560, column: 14, scope: !3520)
!3522 = !DILocation(line: 560, column: 27, scope: !3520)
!3523 = !DILocation(line: 560, column: 30, scope: !3520)
!3524 = !DILocalVariable(name: "edge_probability", scope: !3520, file: !3, line: 561, type: !993)
!3525 = !DILocation(line: 561, column: 8, scope: !3520)
!3526 = !DILocation(line: 561, column: 27, scope: !3520)
!3527 = !DILocation(line: 561, column: 30, scope: !3520)
!3528 = !DILocalVariable(name: "edge_frequency", scope: !3520, file: !3, line: 562, type: !993)
!3529 = !DILocation(line: 562, column: 8, scope: !3520)
!3530 = !DILocalVariable(name: "n", scope: !3520, file: !3, line: 563, type: !993)
!3531 = !DILocation(line: 563, column: 8, scope: !3520)
!3532 = !DILocation(line: 565, column: 20, scope: !3520)
!3533 = !DILocation(line: 565, column: 4, scope: !3520)
!3534 = !DILocation(line: 565, column: 7, scope: !3520)
!3535 = !DILocation(line: 565, column: 18, scope: !3520)
!3536 = !DILocation(line: 568, column: 8, scope: !3537)
!3537 = distinct !DILexicalBlock(scope: !3520, file: !3, line: 568, column: 8)
!3538 = !DILocation(line: 568, column: 17, scope: !3537)
!3539 = !DILocation(line: 568, column: 20, scope: !3537)
!3540 = !DILocation(line: 568, column: 30, scope: !3537)
!3541 = !DILocation(line: 568, column: 27, scope: !3537)
!3542 = !DILocation(line: 568, column: 8, scope: !3520)
!3543 = !DILocation(line: 570, column: 58, scope: !3544)
!3544 = distinct !DILexicalBlock(scope: !3537, file: !3, line: 569, column: 6)
!3545 = !DILocation(line: 570, column: 61, scope: !3544)
!3546 = !DILocation(line: 570, column: 26, scope: !3544)
!3547 = !DILocation(line: 570, column: 8, scope: !3544)
!3548 = !DILocation(line: 571, column: 12, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !3544, file: !3, line: 571, column: 12)
!3550 = !DILocation(line: 571, column: 12, scope: !3544)
!3551 = !DILocation(line: 572, column: 12, scope: !3549)
!3552 = !DILocation(line: 572, column: 3, scope: !3549)
!3553 = !DILocation(line: 573, column: 6, scope: !3544)
!3554 = !DILocation(line: 574, column: 40, scope: !3555)
!3555 = distinct !DILexicalBlock(scope: !3537, file: !3, line: 574, column: 13)
!3556 = !DILocation(line: 574, column: 43, scope: !3555)
!3557 = !DILocation(line: 574, column: 14, scope: !3555)
!3558 = !DILocation(line: 574, column: 13, scope: !3537)
!3559 = !DILocation(line: 576, column: 12, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 576, column: 12)
!3561 = distinct !DILexicalBlock(scope: !3555, file: !3, line: 575, column: 6)
!3562 = !DILocation(line: 576, column: 12, scope: !3561)
!3563 = !DILocation(line: 577, column: 12, scope: !3560)
!3564 = !DILocation(line: 579, column: 5, scope: !3560)
!3565 = !DILocation(line: 579, column: 8, scope: !3560)
!3566 = !DILocation(line: 579, column: 15, scope: !3560)
!3567 = !DILocation(line: 579, column: 18, scope: !3560)
!3568 = !DILocation(line: 579, column: 24, scope: !3560)
!3569 = !DILocation(line: 579, column: 31, scope: !3560)
!3570 = !DILocation(line: 579, column: 39, scope: !3560)
!3571 = !DILocation(line: 577, column: 3, scope: !3560)
!3572 = !DILocation(line: 580, column: 8, scope: !3561)
!3573 = !DILocation(line: 581, column: 8, scope: !3561)
!3574 = !DILocation(line: 587, column: 23, scope: !3520)
!3575 = !DILocation(line: 587, column: 42, scope: !3520)
!3576 = !DILocation(line: 587, column: 45, scope: !3520)
!3577 = !DILocation(line: 587, column: 40, scope: !3520)
!3578 = !DILocation(line: 588, column: 9, scope: !3520)
!3579 = !DILocation(line: 589, column: 8, scope: !3520)
!3580 = !DILocation(line: 587, column: 19, scope: !3520)
!3581 = !DILocation(line: 591, column: 9, scope: !3582)
!3582 = distinct !DILexicalBlock(scope: !3520, file: !3, line: 591, column: 8)
!3583 = !DILocation(line: 591, column: 31, scope: !3582)
!3584 = !DILocation(line: 591, column: 53, scope: !3582)
!3585 = !DILocation(line: 591, column: 34, scope: !3582)
!3586 = !DILocation(line: 591, column: 8, scope: !3520)
!3587 = !DILocation(line: 592, column: 6, scope: !3582)
!3588 = !DILocation(line: 592, column: 9, scope: !3582)
!3589 = !DILocation(line: 592, column: 15, scope: !3582)
!3590 = !DILocation(line: 594, column: 4, scope: !3520)
!3591 = !DILocalVariable(name: "t", scope: !3592, file: !3, line: 596, type: !1387)
!3592 = distinct !DILexicalBlock(scope: !3520, file: !3, line: 595, column: 6)
!3593 = !DILocation(line: 596, column: 13, scope: !3592)
!3594 = !DILocation(line: 598, column: 28, scope: !3595)
!3595 = distinct !DILexicalBlock(scope: !3592, file: !3, line: 598, column: 12)
!3596 = !DILocation(line: 598, column: 13, scope: !3595)
!3597 = !DILocation(line: 598, column: 12, scope: !3592)
!3598 = !DILocation(line: 600, column: 5, scope: !3599)
!3599 = distinct !DILexicalBlock(scope: !3595, file: !3, line: 599, column: 3)
!3600 = !DILocation(line: 601, column: 9, scope: !3599)
!3601 = !DILocation(line: 601, column: 26, scope: !3599)
!3602 = !DILocation(line: 601, column: 7, scope: !3599)
!3603 = !DILocation(line: 602, column: 5, scope: !3599)
!3604 = !DILocation(line: 603, column: 38, scope: !3599)
!3605 = !DILocation(line: 603, column: 45, scope: !3599)
!3606 = !DILocation(line: 604, column: 10, scope: !3599)
!3607 = !DILocation(line: 604, column: 22, scope: !3599)
!3608 = !DILocation(line: 603, column: 5, scope: !3599)
!3609 = !DILocation(line: 605, column: 26, scope: !3599)
!3610 = !DILocation(line: 605, column: 5, scope: !3599)
!3611 = !DILocation(line: 606, column: 3, scope: !3599)
!3612 = !DILocation(line: 609, column: 21, scope: !3613)
!3613 = distinct !DILexicalBlock(scope: !3595, file: !3, line: 608, column: 3)
!3614 = !DILocation(line: 609, column: 5, scope: !3613)
!3615 = !DILocation(line: 609, column: 12, scope: !3613)
!3616 = !DILocation(line: 609, column: 18, scope: !3613)
!3617 = !DILocation(line: 610, column: 9, scope: !3618)
!3618 = distinct !DILexicalBlock(scope: !3613, file: !3, line: 610, column: 9)
!3619 = !DILocation(line: 610, column: 16, scope: !3618)
!3620 = !DILocation(line: 610, column: 22, scope: !3618)
!3621 = !DILocation(line: 610, column: 9, scope: !3613)
!3622 = !DILocation(line: 611, column: 7, scope: !3618)
!3623 = !DILocation(line: 611, column: 14, scope: !3618)
!3624 = !DILocation(line: 611, column: 20, scope: !3618)
!3625 = !DILocation(line: 612, column: 25, scope: !3613)
!3626 = !DILocation(line: 612, column: 5, scope: !3613)
!3627 = !DILocation(line: 612, column: 12, scope: !3613)
!3628 = !DILocation(line: 612, column: 22, scope: !3613)
!3629 = !DILocation(line: 613, column: 9, scope: !3630)
!3630 = distinct !DILexicalBlock(scope: !3613, file: !3, line: 613, column: 9)
!3631 = !DILocation(line: 613, column: 16, scope: !3630)
!3632 = !DILocation(line: 613, column: 26, scope: !3630)
!3633 = !DILocation(line: 613, column: 9, scope: !3613)
!3634 = !DILocation(line: 614, column: 7, scope: !3630)
!3635 = !DILocation(line: 614, column: 14, scope: !3630)
!3636 = !DILocation(line: 614, column: 24, scope: !3630)
!3637 = !DILocation(line: 619, column: 9, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3613, file: !3, line: 619, column: 9)
!3639 = !DILocation(line: 619, column: 13, scope: !3638)
!3640 = !DILocation(line: 619, column: 11, scope: !3638)
!3641 = !DILocation(line: 620, column: 9, scope: !3638)
!3642 = !DILocation(line: 620, column: 12, scope: !3638)
!3643 = !DILocation(line: 620, column: 21, scope: !3638)
!3644 = !DILocation(line: 620, column: 37, scope: !3638)
!3645 = !DILocation(line: 620, column: 41, scope: !3638)
!3646 = !DILocation(line: 620, column: 18, scope: !3638)
!3647 = !DILocation(line: 619, column: 9, scope: !3613)
!3648 = !DILocation(line: 621, column: 8, scope: !3638)
!3649 = !DILocation(line: 621, column: 7, scope: !3638)
!3650 = !DILocation(line: 622, column: 27, scope: !3613)
!3651 = !DILocation(line: 622, column: 9, scope: !3613)
!3652 = !DILocation(line: 622, column: 7, scope: !3613)
!3653 = !DILocation(line: 625, column: 20, scope: !3592)
!3654 = !DILocation(line: 625, column: 8, scope: !3592)
!3655 = !DILocation(line: 625, column: 11, scope: !3592)
!3656 = !DILocation(line: 625, column: 17, scope: !3592)
!3657 = !DILocation(line: 626, column: 12, scope: !3658)
!3658 = distinct !DILexicalBlock(scope: !3592, file: !3, line: 626, column: 12)
!3659 = !DILocation(line: 626, column: 15, scope: !3658)
!3660 = !DILocation(line: 626, column: 21, scope: !3658)
!3661 = !DILocation(line: 626, column: 12, scope: !3592)
!3662 = !DILocation(line: 627, column: 3, scope: !3658)
!3663 = !DILocation(line: 627, column: 6, scope: !3658)
!3664 = !DILocation(line: 627, column: 12, scope: !3658)
!3665 = !DILocation(line: 628, column: 16, scope: !3592)
!3666 = !DILocation(line: 628, column: 19, scope: !3592)
!3667 = !DILocation(line: 628, column: 14, scope: !3592)
!3668 = !DILocation(line: 629, column: 6, scope: !3592)
!3669 = !DILocation(line: 630, column: 11, scope: !3520)
!3670 = !DILocation(line: 630, column: 20, scope: !3520)
!3671 = !DILocation(line: 630, column: 17, scope: !3520)
!3672 = distinct !{!3672, !3590, !3673}
!3673 = !DILocation(line: 630, column: 26, scope: !3520)
!3674 = !DILocation(line: 632, column: 12, scope: !3520)
!3675 = !DILocation(line: 633, column: 4, scope: !3520)
!3676 = !DILocation(line: 635, column: 7, scope: !3282)
!3677 = !DILocation(line: 429, column: 3, scope: !3278)
!3678 = !DILocation(line: 638, column: 7, scope: !3679)
!3679 = distinct !DILexicalBlock(scope: !3254, file: !3, line: 638, column: 7)
!3680 = !DILocation(line: 638, column: 7, scope: !3254)
!3681 = !DILocation(line: 639, column: 11, scope: !3679)
!3682 = !DILocation(line: 639, column: 5, scope: !3679)
!3683 = !DILocation(line: 640, column: 10, scope: !3254)
!3684 = !DILocation(line: 640, column: 3, scope: !3254)
!3685 = !DILocation(line: 641, column: 1, scope: !3254)
!3686 = distinct !DISubprogram(name: "try_crossjump_bb", scope: !3, file: !3, line: 1678, type: !3255, scopeLine: 1679, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!3687 = !DILocalVariable(name: "mode", arg: 1, scope: !3686, file: !3, line: 1678, type: !993)
!3688 = !DILocation(line: 1678, column: 23, scope: !3686)
!3689 = !DILocalVariable(name: "bb", arg: 2, scope: !3686, file: !3, line: 1678, type: !1370)
!3690 = !DILocation(line: 1678, column: 41, scope: !3686)
!3691 = !DILocalVariable(name: "e", scope: !3686, file: !3, line: 1680, type: !1387)
!3692 = !DILocation(line: 1680, column: 8, scope: !3686)
!3693 = !DILocalVariable(name: "e2", scope: !3686, file: !3, line: 1680, type: !1387)
!3694 = !DILocation(line: 1680, column: 11, scope: !3686)
!3695 = !DILocalVariable(name: "fallthru", scope: !3686, file: !3, line: 1680, type: !1387)
!3696 = !DILocation(line: 1680, column: 15, scope: !3686)
!3697 = !DILocalVariable(name: "changed", scope: !3686, file: !3, line: 1681, type: !1225)
!3698 = !DILocation(line: 1681, column: 8, scope: !3686)
!3699 = !DILocalVariable(name: "max", scope: !3686, file: !3, line: 1682, type: !7)
!3700 = !DILocation(line: 1682, column: 12, scope: !3686)
!3701 = !DILocalVariable(name: "ix", scope: !3686, file: !3, line: 1682, type: !7)
!3702 = !DILocation(line: 1682, column: 17, scope: !3686)
!3703 = !DILocalVariable(name: "ix2", scope: !3686, file: !3, line: 1682, type: !7)
!3704 = !DILocation(line: 1682, column: 21, scope: !3686)
!3705 = !DILocalVariable(name: "ev", scope: !3686, file: !3, line: 1683, type: !1370)
!3706 = !DILocation(line: 1683, column: 15, scope: !3686)
!3707 = !DILocalVariable(name: "ev2", scope: !3686, file: !3, line: 1683, type: !1370)
!3708 = !DILocation(line: 1683, column: 19, scope: !3686)
!3709 = !DILocalVariable(name: "ei", scope: !3686, file: !3, line: 1684, type: !3035)
!3710 = !DILocation(line: 1684, column: 17, scope: !3686)
!3711 = !DILocation(line: 1687, column: 7, scope: !3712)
!3712 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1687, column: 7)
!3713 = !DILocation(line: 1687, column: 30, scope: !3712)
!3714 = !DILocation(line: 1687, column: 7, scope: !3686)
!3715 = !DILocation(line: 1688, column: 5, scope: !3712)
!3716 = !DILocation(line: 1692, column: 31, scope: !3717)
!3717 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1692, column: 7)
!3718 = !DILocation(line: 1692, column: 7, scope: !3717)
!3719 = !DILocation(line: 1693, column: 7, scope: !3717)
!3720 = !DILocation(line: 1693, column: 10, scope: !3717)
!3721 = !DILocation(line: 1693, column: 16, scope: !3717)
!3722 = !DILocation(line: 1693, column: 13, scope: !3717)
!3723 = !DILocation(line: 1694, column: 7, scope: !3717)
!3724 = !DILocation(line: 1694, column: 27, scope: !3717)
!3725 = !DILocation(line: 1694, column: 10, scope: !3717)
!3726 = !DILocation(line: 1692, column: 7, scope: !3686)
!3727 = !DILocation(line: 1695, column: 5, scope: !3717)
!3728 = !DILocation(line: 1707, column: 7, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1707, column: 7)
!3730 = !DILocation(line: 1708, column: 6, scope: !3729)
!3731 = !DILocation(line: 1707, column: 45, scope: !3729)
!3732 = !DILocation(line: 1709, column: 7, scope: !3729)
!3733 = !DILocation(line: 1709, column: 11, scope: !3729)
!3734 = !DILocation(line: 1709, column: 30, scope: !3729)
!3735 = !DILocation(line: 1709, column: 36, scope: !3729)
!3736 = !DILocation(line: 1707, column: 7, scope: !3686)
!3737 = !DILocation(line: 1710, column: 5, scope: !3729)
!3738 = !DILocation(line: 1715, column: 12, scope: !3686)
!3739 = !DILocation(line: 1716, column: 9, scope: !3686)
!3740 = !DILocation(line: 1716, column: 7, scope: !3686)
!3741 = !DILocation(line: 1718, column: 7, scope: !3742)
!3742 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1718, column: 7)
!3743 = !DILocation(line: 1718, column: 32, scope: !3742)
!3744 = !DILocation(line: 1718, column: 30, scope: !3742)
!3745 = !DILocation(line: 1718, column: 7, scope: !3686)
!3746 = !DILocation(line: 1719, column: 5, scope: !3742)
!3747 = !DILocation(line: 1721, column: 3, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1721, column: 3)
!3749 = !DILocation(line: 1721, column: 3, scope: !3750)
!3750 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 1721, column: 3)
!3751 = !DILocation(line: 1723, column: 11, scope: !3752)
!3752 = distinct !DILexicalBlock(scope: !3753, file: !3, line: 1723, column: 11)
!3753 = distinct !DILexicalBlock(scope: !3750, file: !3, line: 1722, column: 5)
!3754 = !DILocation(line: 1723, column: 14, scope: !3752)
!3755 = !DILocation(line: 1723, column: 20, scope: !3752)
!3756 = !DILocation(line: 1723, column: 11, scope: !3753)
!3757 = !DILocation(line: 1725, column: 15, scope: !3758)
!3758 = distinct !DILexicalBlock(scope: !3752, file: !3, line: 1724, column: 2)
!3759 = !DILocation(line: 1725, column: 13, scope: !3758)
!3760 = !DILocation(line: 1726, column: 4, scope: !3758)
!3761 = !DILocation(line: 1728, column: 5, scope: !3753)
!3762 = distinct !{!3762, !3747, !3763}
!3763 = !DILocation(line: 1728, column: 5, scope: !3748)
!3764 = !DILocation(line: 1730, column: 11, scope: !3686)
!3765 = !DILocation(line: 1731, column: 11, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1731, column: 3)
!3767 = !DILocation(line: 1731, column: 21, scope: !3766)
!3768 = !DILocation(line: 1731, column: 19, scope: !3766)
!3769 = !DILocation(line: 1731, column: 8, scope: !3766)
!3770 = !DILocation(line: 1731, column: 25, scope: !3771)
!3771 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 1731, column: 3)
!3772 = !DILocation(line: 1731, column: 30, scope: !3771)
!3773 = !DILocation(line: 1731, column: 28, scope: !3771)
!3774 = !DILocation(line: 1731, column: 3, scope: !3766)
!3775 = !DILocation(line: 1733, column: 11, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !3771, file: !3, line: 1732, column: 5)
!3777 = !DILocation(line: 1733, column: 9, scope: !3776)
!3778 = !DILocation(line: 1734, column: 9, scope: !3776)
!3779 = !DILocation(line: 1738, column: 11, scope: !3780)
!3780 = distinct !DILexicalBlock(scope: !3776, file: !3, line: 1738, column: 11)
!3781 = !DILocation(line: 1738, column: 11, scope: !3776)
!3782 = !DILocation(line: 1742, column: 8, scope: !3783)
!3783 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 1742, column: 8)
!3784 = distinct !DILexicalBlock(scope: !3780, file: !3, line: 1739, column: 2)
!3785 = !DILocation(line: 1742, column: 13, scope: !3783)
!3786 = !DILocation(line: 1742, column: 10, scope: !3783)
!3787 = !DILocation(line: 1742, column: 8, scope: !3784)
!3788 = !DILocation(line: 1743, column: 6, scope: !3783)
!3789 = distinct !{!3789, !3774, !3790}
!3790 = !DILocation(line: 1809, column: 5, scope: !3766)
!3791 = !DILocation(line: 1746, column: 9, scope: !3792)
!3792 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 1746, column: 8)
!3793 = !DILocation(line: 1747, column: 8, scope: !3792)
!3794 = !DILocation(line: 1747, column: 31, scope: !3792)
!3795 = !DILocation(line: 1747, column: 34, scope: !3792)
!3796 = !DILocation(line: 1747, column: 14, scope: !3792)
!3797 = !DILocation(line: 1748, column: 5, scope: !3792)
!3798 = !DILocation(line: 1748, column: 27, scope: !3792)
!3799 = !DILocation(line: 1748, column: 37, scope: !3792)
!3800 = !DILocation(line: 1748, column: 10, scope: !3792)
!3801 = !DILocation(line: 1746, column: 8, scope: !3784)
!3802 = !DILocation(line: 1749, column: 6, scope: !3792)
!3803 = !DILocation(line: 1751, column: 31, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 1751, column: 8)
!3805 = !DILocation(line: 1751, column: 37, scope: !3804)
!3806 = !DILocation(line: 1751, column: 40, scope: !3804)
!3807 = !DILocation(line: 1751, column: 8, scope: !3804)
!3808 = !DILocation(line: 1751, column: 8, scope: !3784)
!3809 = !DILocation(line: 1753, column: 16, scope: !3810)
!3810 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 1752, column: 6)
!3811 = !DILocation(line: 1754, column: 11, scope: !3810)
!3812 = !DILocation(line: 1755, column: 13, scope: !3810)
!3813 = !DILocation(line: 1755, column: 11, scope: !3810)
!3814 = !DILocation(line: 1756, column: 8, scope: !3810)
!3815 = !DILocation(line: 1758, column: 2, scope: !3784)
!3816 = !DILocation(line: 1772, column: 11, scope: !3817)
!3817 = distinct !DILexicalBlock(scope: !3776, file: !3, line: 1772, column: 11)
!3818 = !DILocation(line: 1772, column: 36, scope: !3817)
!3819 = !DILocation(line: 1772, column: 33, scope: !3817)
!3820 = !DILocation(line: 1772, column: 11, scope: !3776)
!3821 = !DILocation(line: 1773, column: 2, scope: !3817)
!3822 = !DILocation(line: 1775, column: 16, scope: !3823)
!3823 = distinct !DILexicalBlock(scope: !3776, file: !3, line: 1775, column: 7)
!3824 = !DILocation(line: 1775, column: 27, scope: !3823)
!3825 = !DILocation(line: 1775, column: 25, scope: !3823)
!3826 = !DILocation(line: 1775, column: 12, scope: !3823)
!3827 = !DILocation(line: 1775, column: 31, scope: !3828)
!3828 = distinct !DILexicalBlock(scope: !3823, file: !3, line: 1775, column: 7)
!3829 = !DILocation(line: 1775, column: 37, scope: !3828)
!3830 = !DILocation(line: 1775, column: 35, scope: !3828)
!3831 = !DILocation(line: 1775, column: 7, scope: !3823)
!3832 = !DILocation(line: 1777, column: 9, scope: !3833)
!3833 = distinct !DILexicalBlock(scope: !3828, file: !3, line: 1776, column: 2)
!3834 = !DILocation(line: 1777, column: 7, scope: !3833)
!3835 = !DILocation(line: 1778, column: 7, scope: !3833)
!3836 = !DILocation(line: 1780, column: 8, scope: !3837)
!3837 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 1780, column: 8)
!3838 = !DILocation(line: 1780, column: 14, scope: !3837)
!3839 = !DILocation(line: 1780, column: 11, scope: !3837)
!3840 = !DILocation(line: 1780, column: 8, scope: !3833)
!3841 = !DILocation(line: 1781, column: 6, scope: !3837)
!3842 = distinct !{!3842, !3831, !3843}
!3843 = !DILocation(line: 1808, column: 2, scope: !3823)
!3844 = !DILocation(line: 1784, column: 8, scope: !3845)
!3845 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 1784, column: 8)
!3846 = !DILocation(line: 1784, column: 14, scope: !3845)
!3847 = !DILocation(line: 1784, column: 11, scope: !3845)
!3848 = !DILocation(line: 1784, column: 8, scope: !3833)
!3849 = !DILocation(line: 1785, column: 6, scope: !3845)
!3850 = !DILocation(line: 1791, column: 8, scope: !3851)
!3851 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 1791, column: 8)
!3852 = !DILocation(line: 1791, column: 11, scope: !3851)
!3853 = !DILocation(line: 1791, column: 16, scope: !3851)
!3854 = !DILocation(line: 1791, column: 24, scope: !3851)
!3855 = !DILocation(line: 1791, column: 28, scope: !3851)
!3856 = !DILocation(line: 1791, column: 33, scope: !3851)
!3857 = !DILocation(line: 1791, column: 22, scope: !3851)
!3858 = !DILocation(line: 1791, column: 8, scope: !3833)
!3859 = !DILocation(line: 1792, column: 6, scope: !3851)
!3860 = !DILocation(line: 1796, column: 9, scope: !3861)
!3861 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 1796, column: 8)
!3862 = !DILocation(line: 1797, column: 8, scope: !3861)
!3863 = !DILocation(line: 1797, column: 31, scope: !3861)
!3864 = !DILocation(line: 1797, column: 34, scope: !3861)
!3865 = !DILocation(line: 1797, column: 14, scope: !3861)
!3866 = !DILocation(line: 1798, column: 5, scope: !3861)
!3867 = !DILocation(line: 1798, column: 27, scope: !3861)
!3868 = !DILocation(line: 1798, column: 31, scope: !3861)
!3869 = !DILocation(line: 1798, column: 10, scope: !3861)
!3870 = !DILocation(line: 1796, column: 8, scope: !3833)
!3871 = !DILocation(line: 1799, column: 6, scope: !3861)
!3872 = !DILocation(line: 1801, column: 31, scope: !3873)
!3873 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 1801, column: 8)
!3874 = !DILocation(line: 1801, column: 37, scope: !3873)
!3875 = !DILocation(line: 1801, column: 40, scope: !3873)
!3876 = !DILocation(line: 1801, column: 8, scope: !3873)
!3877 = !DILocation(line: 1801, column: 8, scope: !3833)
!3878 = !DILocation(line: 1803, column: 16, scope: !3879)
!3879 = distinct !DILexicalBlock(scope: !3873, file: !3, line: 1802, column: 6)
!3880 = !DILocation(line: 1804, column: 14, scope: !3879)
!3881 = !DILocation(line: 1804, column: 12, scope: !3879)
!3882 = !DILocation(line: 1805, column: 11, scope: !3879)
!3883 = !DILocation(line: 1806, column: 8, scope: !3879)
!3884 = !DILocation(line: 1775, column: 7, scope: !3828)
!3885 = !DILocation(line: 1731, column: 3, scope: !3771)
!3886 = !DILocation(line: 1811, column: 7, scope: !3887)
!3887 = distinct !DILexicalBlock(scope: !3686, file: !3, line: 1811, column: 7)
!3888 = !DILocation(line: 1811, column: 7, scope: !3686)
!3889 = !DILocation(line: 1812, column: 24, scope: !3887)
!3890 = !DILocation(line: 1812, column: 5, scope: !3887)
!3891 = !DILocation(line: 1814, column: 10, scope: !3686)
!3892 = !DILocation(line: 1814, column: 3, scope: !3686)
!3893 = !DILocation(line: 1815, column: 1, scope: !3686)
!3894 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !135, file: !135, line: 150, type: !3895, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!3895 = !DISubroutineType(types: !3896)
!3896 = !{!1387, !2892, !7}
!3897 = !DILocalVariable(name: "vec_", arg: 1, scope: !3894, file: !135, line: 150, type: !2892)
!3898 = !DILocation(line: 150, column: 1, scope: !3894)
!3899 = !DILocalVariable(name: "ix_", arg: 2, scope: !3894, file: !135, line: 150, type: !7)
!3900 = !DILocation(line: 0, scope: !3894)
!3901 = distinct !DISubprogram(name: "ei_start_1", scope: !135, file: !135, line: 696, type: !3902, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!3902 = !DISubroutineType(types: !3903)
!3903 = !{!3035, !3040}
!3904 = !DILocalVariable(name: "ev", arg: 1, scope: !3901, file: !135, line: 696, type: !3040)
!3905 = !DILocation(line: 696, column: 28, scope: !3901)
!3906 = !DILocalVariable(name: "i", scope: !3901, file: !135, line: 698, type: !3035)
!3907 = !DILocation(line: 698, column: 17, scope: !3901)
!3908 = !DILocation(line: 700, column: 5, scope: !3901)
!3909 = !DILocation(line: 700, column: 11, scope: !3901)
!3910 = !DILocation(line: 701, column: 17, scope: !3901)
!3911 = !DILocation(line: 701, column: 5, scope: !3901)
!3912 = !DILocation(line: 701, column: 15, scope: !3901)
!3913 = !DILocation(line: 703, column: 3, scope: !3901)
!3914 = distinct !DISubprogram(name: "ei_cond", scope: !135, file: !135, line: 771, type: !3915, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!3915 = !DISubroutineType(types: !3916)
!3916 = !{!1225, !3035, !2125}
!3917 = !DILocalVariable(name: "ei", arg: 1, scope: !3914, file: !135, line: 771, type: !3035)
!3918 = !DILocation(line: 771, column: 24, scope: !3914)
!3919 = !DILocalVariable(name: "p", arg: 2, scope: !3914, file: !135, line: 771, type: !2125)
!3920 = !DILocation(line: 771, column: 34, scope: !3914)
!3921 = !DILocation(line: 773, column: 8, scope: !3922)
!3922 = distinct !DILexicalBlock(scope: !3914, file: !135, line: 773, column: 7)
!3923 = !DILocation(line: 773, column: 7, scope: !3914)
!3924 = !DILocation(line: 775, column: 12, scope: !3925)
!3925 = distinct !DILexicalBlock(scope: !3922, file: !135, line: 774, column: 5)
!3926 = !DILocation(line: 775, column: 8, scope: !3925)
!3927 = !DILocation(line: 775, column: 10, scope: !3925)
!3928 = !DILocation(line: 776, column: 7, scope: !3925)
!3929 = !DILocation(line: 780, column: 8, scope: !3930)
!3930 = distinct !DILexicalBlock(scope: !3922, file: !135, line: 779, column: 5)
!3931 = !DILocation(line: 780, column: 10, scope: !3930)
!3932 = !DILocation(line: 781, column: 7, scope: !3930)
!3933 = !DILocation(line: 783, column: 1, scope: !3914)
!3934 = distinct !DISubprogram(name: "ei_next", scope: !135, file: !135, line: 736, type: !3935, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!3935 = !DISubroutineType(types: !3936)
!3936 = !{null, !3937}
!3937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3035, size: 64)
!3938 = !DILocalVariable(name: "i", arg: 1, scope: !3934, file: !135, line: 736, type: !3937)
!3939 = !DILocation(line: 736, column: 25, scope: !3934)
!3940 = !DILocation(line: 738, column: 3, scope: !3934)
!3941 = !DILocation(line: 739, column: 3, scope: !3934)
!3942 = !DILocation(line: 739, column: 6, scope: !3934)
!3943 = !DILocation(line: 739, column: 11, scope: !3934)
!3944 = !DILocation(line: 740, column: 1, scope: !3934)
!3945 = distinct !DISubprogram(name: "merge_blocks_move_successor_nojumps", scope: !3, file: !3, line: 693, type: !3946, scopeLine: 694, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!3946 = !DISubroutineType(types: !3947)
!3947 = !{null, !1370, !1370}
!3948 = !DILocalVariable(name: "a", arg: 1, scope: !3945, file: !3, line: 693, type: !1370)
!3949 = !DILocation(line: 693, column: 50, scope: !3945)
!3950 = !DILocalVariable(name: "b", arg: 2, scope: !3945, file: !3, line: 693, type: !1370)
!3951 = !DILocation(line: 693, column: 65, scope: !3945)
!3952 = !DILocalVariable(name: "barrier", scope: !3945, file: !3, line: 695, type: !970)
!3953 = !DILocation(line: 695, column: 7, scope: !3945)
!3954 = !DILocalVariable(name: "real_b_end", scope: !3945, file: !3, line: 695, type: !970)
!3955 = !DILocation(line: 695, column: 16, scope: !3945)
!3956 = !DILocalVariable(name: "label", scope: !3945, file: !3, line: 696, type: !970)
!3957 = !DILocation(line: 696, column: 7, scope: !3945)
!3958 = !DILocalVariable(name: "table", scope: !3945, file: !3, line: 696, type: !970)
!3959 = !DILocation(line: 696, column: 14, scope: !3945)
!3960 = !DILocation(line: 708, column: 7, scope: !3961)
!3961 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 708, column: 7)
!3962 = !DILocation(line: 708, column: 27, scope: !3961)
!3963 = !DILocation(line: 708, column: 24, scope: !3961)
!3964 = !DILocation(line: 708, column: 7, scope: !3945)
!3965 = !DILocation(line: 709, column: 5, scope: !3961)
!3966 = !DILocation(line: 711, column: 16, scope: !3945)
!3967 = !DILocation(line: 711, column: 14, scope: !3945)
!3968 = !DILocation(line: 715, column: 20, scope: !3969)
!3969 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 715, column: 7)
!3970 = !DILocation(line: 715, column: 7, scope: !3969)
!3971 = !DILocation(line: 716, column: 7, scope: !3969)
!3972 = !DILocation(line: 716, column: 28, scope: !3969)
!3973 = !DILocation(line: 716, column: 10, scope: !3969)
!3974 = !DILocation(line: 716, column: 38, scope: !3969)
!3975 = !DILocation(line: 716, column: 35, scope: !3969)
!3976 = !DILocation(line: 715, column: 7, scope: !3945)
!3977 = !DILocation(line: 718, column: 20, scope: !3978)
!3978 = distinct !DILexicalBlock(scope: !3969, file: !3, line: 717, column: 5)
!3979 = !DILocation(line: 718, column: 7, scope: !3978)
!3980 = !DILocation(line: 718, column: 18, scope: !3978)
!3981 = !DILocation(line: 719, column: 5, scope: !3978)
!3982 = !DILocation(line: 722, column: 13, scope: !3945)
!3983 = !DILocation(line: 722, column: 11, scope: !3945)
!3984 = !DILocation(line: 723, column: 7, scope: !3985)
!3985 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 723, column: 7)
!3986 = !DILocation(line: 723, column: 15, scope: !3985)
!3987 = !DILocation(line: 723, column: 18, scope: !3985)
!3988 = !DILocation(line: 723, column: 7, scope: !3945)
!3989 = !DILocation(line: 724, column: 18, scope: !3985)
!3990 = !DILocation(line: 724, column: 5, scope: !3985)
!3991 = !DILocation(line: 728, column: 23, scope: !3945)
!3992 = !DILocation(line: 728, column: 36, scope: !3945)
!3993 = !DILocation(line: 728, column: 48, scope: !3945)
!3994 = !DILocation(line: 728, column: 3, scope: !3945)
!3995 = !DILocation(line: 731, column: 16, scope: !3945)
!3996 = !DILocation(line: 731, column: 3, scope: !3945)
!3997 = !DILocation(line: 731, column: 14, scope: !3945)
!3998 = !DILocation(line: 733, column: 7, scope: !3999)
!3999 = distinct !DILexicalBlock(scope: !3945, file: !3, line: 733, column: 7)
!4000 = !DILocation(line: 733, column: 7, scope: !3945)
!4001 = !DILocation(line: 734, column: 14, scope: !3999)
!4002 = !DILocation(line: 735, column: 7, scope: !3999)
!4003 = !DILocation(line: 735, column: 10, scope: !3999)
!4004 = !DILocation(line: 735, column: 17, scope: !3999)
!4005 = !DILocation(line: 735, column: 20, scope: !3999)
!4006 = !DILocation(line: 734, column: 5, scope: !3999)
!4007 = !DILocation(line: 738, column: 17, scope: !3945)
!4008 = !DILocation(line: 738, column: 20, scope: !3945)
!4009 = !DILocation(line: 738, column: 3, scope: !3945)
!4010 = !DILocation(line: 739, column: 1, scope: !3945)
!4011 = distinct !DISubprogram(name: "notice_new_block", scope: !3, file: !3, line: 89, type: !2874, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4012 = !DILocalVariable(name: "bb", arg: 1, scope: !4011, file: !3, line: 89, type: !1370)
!4013 = !DILocation(line: 89, column: 31, scope: !4011)
!4014 = !DILocation(line: 91, column: 8, scope: !4015)
!4015 = distinct !DILexicalBlock(scope: !4011, file: !3, line: 91, column: 7)
!4016 = !DILocation(line: 91, column: 7, scope: !4011)
!4017 = !DILocation(line: 92, column: 5, scope: !4015)
!4018 = !DILocation(line: 94, column: 26, scope: !4019)
!4019 = distinct !DILexicalBlock(scope: !4011, file: !3, line: 94, column: 7)
!4020 = !DILocation(line: 94, column: 7, scope: !4019)
!4021 = !DILocation(line: 94, column: 7, scope: !4011)
!4022 = !DILocation(line: 95, column: 5, scope: !4019)
!4023 = !DILocation(line: 95, column: 9, scope: !4019)
!4024 = !DILocation(line: 95, column: 15, scope: !4019)
!4025 = !DILocation(line: 96, column: 1, scope: !4011)
!4026 = distinct !DISubprogram(name: "merge_blocks_move_predecessor_nojumps", scope: !3, file: !3, line: 649, type: !3946, scopeLine: 650, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4027 = !DILocalVariable(name: "a", arg: 1, scope: !4026, file: !3, line: 649, type: !1370)
!4028 = !DILocation(line: 649, column: 52, scope: !4026)
!4029 = !DILocalVariable(name: "b", arg: 2, scope: !4026, file: !3, line: 649, type: !1370)
!4030 = !DILocation(line: 649, column: 67, scope: !4026)
!4031 = !DILocalVariable(name: "barrier", scope: !4026, file: !3, line: 651, type: !970)
!4032 = !DILocation(line: 651, column: 7, scope: !4026)
!4033 = !DILocation(line: 663, column: 7, scope: !4034)
!4034 = distinct !DILexicalBlock(scope: !4026, file: !3, line: 663, column: 7)
!4035 = !DILocation(line: 663, column: 27, scope: !4034)
!4036 = !DILocation(line: 663, column: 24, scope: !4034)
!4037 = !DILocation(line: 663, column: 7, scope: !4026)
!4038 = !DILocation(line: 664, column: 5, scope: !4034)
!4039 = !DILocation(line: 666, column: 32, scope: !4026)
!4040 = !DILocation(line: 666, column: 13, scope: !4026)
!4041 = !DILocation(line: 666, column: 11, scope: !4026)
!4042 = !DILocation(line: 667, column: 3, scope: !4026)
!4043 = !DILocation(line: 668, column: 16, scope: !4026)
!4044 = !DILocation(line: 668, column: 3, scope: !4026)
!4045 = !DILocation(line: 671, column: 7, scope: !4046)
!4046 = distinct !DILexicalBlock(scope: !4026, file: !3, line: 671, column: 7)
!4047 = !DILocation(line: 671, column: 21, scope: !4046)
!4048 = !DILocation(line: 671, column: 18, scope: !4046)
!4049 = !DILocation(line: 671, column: 7, scope: !4026)
!4050 = !DILocation(line: 672, column: 25, scope: !4046)
!4051 = !DILocation(line: 672, column: 38, scope: !4046)
!4052 = !DILocation(line: 672, column: 50, scope: !4046)
!4053 = !DILocation(line: 672, column: 5, scope: !4046)
!4054 = !DILocation(line: 673, column: 20, scope: !4026)
!4055 = !DILocation(line: 673, column: 3, scope: !4026)
!4056 = !DILocation(line: 675, column: 7, scope: !4057)
!4057 = distinct !DILexicalBlock(scope: !4026, file: !3, line: 675, column: 7)
!4058 = !DILocation(line: 675, column: 7, scope: !4026)
!4059 = !DILocation(line: 676, column: 14, scope: !4057)
!4060 = !DILocation(line: 677, column: 7, scope: !4057)
!4061 = !DILocation(line: 677, column: 10, scope: !4057)
!4062 = !DILocation(line: 677, column: 17, scope: !4057)
!4063 = !DILocation(line: 677, column: 20, scope: !4057)
!4064 = !DILocation(line: 676, column: 5, scope: !4057)
!4065 = !DILocation(line: 681, column: 17, scope: !4026)
!4066 = !DILocation(line: 681, column: 3, scope: !4026)
!4067 = !DILocation(line: 682, column: 15, scope: !4026)
!4068 = !DILocation(line: 682, column: 18, scope: !4026)
!4069 = !DILocation(line: 682, column: 21, scope: !4026)
!4070 = !DILocation(line: 682, column: 3, scope: !4026)
!4071 = !DILocation(line: 685, column: 17, scope: !4026)
!4072 = !DILocation(line: 685, column: 20, scope: !4026)
!4073 = !DILocation(line: 685, column: 3, scope: !4026)
!4074 = !DILocation(line: 686, column: 1, scope: !4026)
!4075 = distinct !DISubprogram(name: "ei_end_p", scope: !135, file: !135, line: 721, type: !4076, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4076 = !DISubroutineType(types: !4077)
!4077 = !{!1225, !3035}
!4078 = !DILocalVariable(name: "i", arg: 1, scope: !4075, file: !135, line: 721, type: !3035)
!4079 = !DILocation(line: 721, column: 25, scope: !4075)
!4080 = !DILocation(line: 723, column: 13, scope: !4075)
!4081 = !DILocation(line: 723, column: 22, scope: !4075)
!4082 = !DILocation(line: 723, column: 19, scope: !4075)
!4083 = !DILocation(line: 723, column: 10, scope: !4075)
!4084 = !DILocation(line: 723, column: 3, scope: !4075)
!4085 = distinct !DISubprogram(name: "ei_edge", scope: !135, file: !135, line: 752, type: !4086, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4086 = !DISubroutineType(types: !4087)
!4087 = !{!1387, !3035}
!4088 = !DILocalVariable(name: "i", arg: 1, scope: !4085, file: !135, line: 752, type: !3035)
!4089 = !DILocation(line: 752, column: 24, scope: !4085)
!4090 = !DILocation(line: 754, column: 10, scope: !4085)
!4091 = !DILocation(line: 754, column: 3, scope: !4085)
!4092 = distinct !DISubprogram(name: "ei_container", scope: !135, file: !135, line: 685, type: !4093, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4093 = !DISubroutineType(types: !4094)
!4094 = !{!1375, !3035}
!4095 = !DILocalVariable(name: "i", arg: 1, scope: !4092, file: !135, line: 685, type: !3035)
!4096 = !DILocation(line: 685, column: 29, scope: !4092)
!4097 = !DILocation(line: 687, column: 3, scope: !4092)
!4098 = !DILocation(line: 688, column: 13, scope: !4092)
!4099 = !DILocation(line: 688, column: 10, scope: !4092)
!4100 = !DILocation(line: 688, column: 3, scope: !4092)
!4101 = distinct !DISubprogram(name: "ei_safe_edge", scope: !135, file: !135, line: 761, type: !4086, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4102 = !DILocalVariable(name: "i", arg: 1, scope: !4101, file: !135, line: 761, type: !3035)
!4103 = !DILocation(line: 761, column: 29, scope: !4101)
!4104 = !DILocation(line: 763, column: 11, scope: !4101)
!4105 = !DILocation(line: 763, column: 10, scope: !4101)
!4106 = !DILocation(line: 763, column: 26, scope: !4101)
!4107 = !DILocation(line: 763, column: 3, scope: !4101)
!4108 = distinct !DISubprogram(name: "thread_jump", scope: !3, file: !3, line: 269, type: !4109, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4109 = !DISubroutineType(types: !4110)
!4110 = !{!1387, !1387, !1370}
!4111 = !DILocalVariable(name: "e", arg: 1, scope: !4108, file: !3, line: 269, type: !1387)
!4112 = !DILocation(line: 269, column: 19, scope: !4108)
!4113 = !DILocalVariable(name: "b", arg: 2, scope: !4108, file: !3, line: 269, type: !1370)
!4114 = !DILocation(line: 269, column: 34, scope: !4108)
!4115 = !DILocalVariable(name: "set1", scope: !4108, file: !3, line: 271, type: !970)
!4116 = !DILocation(line: 271, column: 7, scope: !4108)
!4117 = !DILocalVariable(name: "set2", scope: !4108, file: !3, line: 271, type: !970)
!4118 = !DILocation(line: 271, column: 13, scope: !4108)
!4119 = !DILocalVariable(name: "cond1", scope: !4108, file: !3, line: 271, type: !970)
!4120 = !DILocation(line: 271, column: 19, scope: !4108)
!4121 = !DILocalVariable(name: "cond2", scope: !4108, file: !3, line: 271, type: !970)
!4122 = !DILocation(line: 271, column: 26, scope: !4108)
!4123 = !DILocalVariable(name: "insn", scope: !4108, file: !3, line: 271, type: !970)
!4124 = !DILocation(line: 271, column: 33, scope: !4108)
!4125 = !DILocalVariable(name: "code1", scope: !4108, file: !3, line: 272, type: !414)
!4126 = !DILocation(line: 272, column: 17, scope: !4108)
!4127 = !DILocalVariable(name: "code2", scope: !4108, file: !3, line: 272, type: !414)
!4128 = !DILocation(line: 272, column: 24, scope: !4108)
!4129 = !DILocalVariable(name: "reversed_code2", scope: !4108, file: !3, line: 272, type: !414)
!4130 = !DILocation(line: 272, column: 31, scope: !4108)
!4131 = !DILocalVariable(name: "reverse1", scope: !4108, file: !3, line: 273, type: !1225)
!4132 = !DILocation(line: 273, column: 8, scope: !4108)
!4133 = !DILocalVariable(name: "i", scope: !4108, file: !3, line: 274, type: !7)
!4134 = !DILocation(line: 274, column: 12, scope: !4108)
!4135 = !DILocalVariable(name: "nonequal", scope: !4108, file: !3, line: 275, type: !2127)
!4136 = !DILocation(line: 275, column: 10, scope: !4108)
!4137 = !DILocalVariable(name: "failed", scope: !4108, file: !3, line: 276, type: !1225)
!4138 = !DILocation(line: 276, column: 8, scope: !4108)
!4139 = !DILocalVariable(name: "rsi", scope: !4108, file: !3, line: 277, type: !4140)
!4140 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_set_iterator", file: !135, line: 90, baseType: !4141)
!4141 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1050, line: 218, baseType: !4142)
!4142 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1050, line: 203, size: 256, elements: !4143)
!4143 = !{!4144, !4145, !4146, !4147}
!4144 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !4142, file: !1050, line: 206, baseType: !1053, size: 64)
!4145 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !4142, file: !1050, line: 209, baseType: !1053, size: 64, offset: 64)
!4146 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !4142, file: !1050, line: 212, baseType: !7, size: 32, offset: 128)
!4147 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !4142, file: !1050, line: 217, baseType: !1063, size: 64, offset: 192)
!4148 = !DILocation(line: 277, column: 20, scope: !4108)
!4149 = !DILocation(line: 279, column: 7, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 279, column: 7)
!4151 = !DILocation(line: 279, column: 10, scope: !4150)
!4152 = !DILocation(line: 279, column: 16, scope: !4150)
!4153 = !DILocation(line: 279, column: 7, scope: !4108)
!4154 = !DILocation(line: 280, column: 5, scope: !4150)
!4155 = !DILocation(line: 284, column: 7, scope: !4156)
!4156 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 284, column: 7)
!4157 = !DILocation(line: 284, column: 34, scope: !4156)
!4158 = !DILocation(line: 284, column: 7, scope: !4108)
!4159 = !DILocation(line: 285, column: 5, scope: !4156)
!4160 = !DILocation(line: 286, column: 7, scope: !4161)
!4161 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 286, column: 7)
!4162 = !DILocation(line: 286, column: 29, scope: !4161)
!4163 = !DILocation(line: 286, column: 7, scope: !4108)
!4164 = !DILocation(line: 288, column: 7, scope: !4165)
!4165 = distinct !DILexicalBlock(scope: !4161, file: !3, line: 287, column: 5)
!4166 = !DILocation(line: 288, column: 10, scope: !4165)
!4167 = !DILocation(line: 288, column: 16, scope: !4165)
!4168 = !DILocation(line: 289, column: 7, scope: !4165)
!4169 = !DILocation(line: 293, column: 24, scope: !4170)
!4170 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 293, column: 7)
!4171 = !DILocation(line: 293, column: 8, scope: !4170)
!4172 = !DILocation(line: 293, column: 7, scope: !4108)
!4173 = !DILocation(line: 294, column: 5, scope: !4170)
!4174 = !DILocation(line: 296, column: 24, scope: !4175)
!4175 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 296, column: 7)
!4176 = !DILocation(line: 296, column: 8, scope: !4175)
!4177 = !DILocation(line: 296, column: 36, scope: !4175)
!4178 = !DILocation(line: 296, column: 52, scope: !4175)
!4179 = !DILocation(line: 296, column: 40, scope: !4175)
!4180 = !DILocation(line: 296, column: 7, scope: !4108)
!4181 = !DILocation(line: 298, column: 7, scope: !4182)
!4182 = distinct !DILexicalBlock(scope: !4175, file: !3, line: 297, column: 5)
!4183 = !DILocation(line: 298, column: 10, scope: !4182)
!4184 = !DILocation(line: 298, column: 16, scope: !4182)
!4185 = !DILocation(line: 299, column: 7, scope: !4182)
!4186 = !DILocation(line: 302, column: 18, scope: !4108)
!4187 = !DILocation(line: 302, column: 10, scope: !4108)
!4188 = !DILocation(line: 302, column: 8, scope: !4108)
!4189 = !DILocation(line: 303, column: 18, scope: !4108)
!4190 = !DILocation(line: 303, column: 10, scope: !4108)
!4191 = !DILocation(line: 303, column: 8, scope: !4108)
!4192 = !DILocation(line: 304, column: 9, scope: !4193)
!4193 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 304, column: 7)
!4194 = !DILocation(line: 304, column: 12, scope: !4193)
!4195 = !DILocation(line: 304, column: 18, scope: !4193)
!4196 = !DILocation(line: 304, column: 35, scope: !4193)
!4197 = !DILocation(line: 305, column: 11, scope: !4193)
!4198 = !DILocation(line: 305, column: 39, scope: !4193)
!4199 = !DILocation(line: 305, column: 36, scope: !4193)
!4200 = !DILocation(line: 305, column: 7, scope: !4193)
!4201 = !DILocation(line: 304, column: 7, scope: !4108)
!4202 = !DILocation(line: 306, column: 14, scope: !4193)
!4203 = !DILocation(line: 306, column: 5, scope: !4193)
!4204 = !DILocation(line: 308, column: 11, scope: !4108)
!4205 = !DILocation(line: 308, column: 9, scope: !4108)
!4206 = !DILocation(line: 309, column: 11, scope: !4108)
!4207 = !DILocation(line: 309, column: 9, scope: !4108)
!4208 = !DILocation(line: 310, column: 7, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 310, column: 7)
!4210 = !DILocation(line: 310, column: 7, scope: !4108)
!4211 = !DILocation(line: 311, column: 39, scope: !4209)
!4212 = !DILocation(line: 311, column: 46, scope: !4209)
!4213 = !DILocation(line: 311, column: 13, scope: !4209)
!4214 = !DILocation(line: 311, column: 11, scope: !4209)
!4215 = !DILocation(line: 311, column: 5, scope: !4209)
!4216 = !DILocation(line: 313, column: 13, scope: !4209)
!4217 = !DILocation(line: 313, column: 11, scope: !4209)
!4218 = !DILocation(line: 315, column: 11, scope: !4108)
!4219 = !DILocation(line: 315, column: 9, scope: !4108)
!4220 = !DILocation(line: 316, column: 46, scope: !4108)
!4221 = !DILocation(line: 316, column: 53, scope: !4108)
!4222 = !DILocation(line: 316, column: 20, scope: !4108)
!4223 = !DILocation(line: 316, column: 18, scope: !4108)
!4224 = !DILocation(line: 318, column: 32, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 318, column: 7)
!4226 = !DILocation(line: 318, column: 39, scope: !4225)
!4227 = !DILocation(line: 318, column: 8, scope: !4225)
!4228 = !DILocation(line: 319, column: 7, scope: !4225)
!4229 = !DILocation(line: 319, column: 35, scope: !4225)
!4230 = !DILocation(line: 319, column: 42, scope: !4225)
!4231 = !DILocation(line: 319, column: 11, scope: !4225)
!4232 = !DILocation(line: 318, column: 7, scope: !4108)
!4233 = !DILocation(line: 320, column: 5, scope: !4225)
!4234 = !DILocation(line: 326, column: 21, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 326, column: 7)
!4236 = !DILocation(line: 326, column: 38, scope: !4235)
!4237 = !DILocation(line: 326, column: 8, scope: !4235)
!4238 = !DILocation(line: 327, column: 7, scope: !4235)
!4239 = !DILocation(line: 327, column: 24, scope: !4235)
!4240 = !DILocation(line: 327, column: 41, scope: !4235)
!4241 = !DILocation(line: 327, column: 11, scope: !4235)
!4242 = !DILocation(line: 326, column: 7, scope: !4108)
!4243 = !DILocation(line: 328, column: 5, scope: !4235)
!4244 = !DILocation(line: 332, column: 15, scope: !4245)
!4245 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 332, column: 3)
!4246 = !DILocation(line: 332, column: 13, scope: !4245)
!4247 = !DILocation(line: 332, column: 8, scope: !4245)
!4248 = !DILocation(line: 332, column: 40, scope: !4249)
!4249 = distinct !DILexicalBlock(scope: !4245, file: !3, line: 332, column: 3)
!4250 = !DILocation(line: 332, column: 48, scope: !4249)
!4251 = !DILocation(line: 332, column: 45, scope: !4249)
!4252 = !DILocation(line: 332, column: 3, scope: !4245)
!4253 = !DILocation(line: 334, column: 9, scope: !4254)
!4254 = distinct !DILexicalBlock(scope: !4249, file: !3, line: 334, column: 9)
!4255 = !DILocation(line: 334, column: 23, scope: !4254)
!4256 = !DILocation(line: 334, column: 42, scope: !4254)
!4257 = !DILocation(line: 334, column: 26, scope: !4254)
!4258 = !DILocation(line: 334, column: 9, scope: !4249)
!4259 = !DILocation(line: 336, column: 2, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4254, file: !3, line: 335, column: 7)
!4261 = !DILocation(line: 336, column: 5, scope: !4260)
!4262 = !DILocation(line: 336, column: 11, scope: !4260)
!4263 = !DILocation(line: 337, column: 2, scope: !4260)
!4264 = !DILocation(line: 334, column: 56, scope: !4254)
!4265 = !DILocation(line: 333, column: 15, scope: !4249)
!4266 = !DILocation(line: 333, column: 13, scope: !4249)
!4267 = !DILocation(line: 332, column: 3, scope: !4249)
!4268 = distinct !{!4268, !4252, !4269}
!4269 = !DILocation(line: 338, column: 7, scope: !4245)
!4270 = !DILocation(line: 340, column: 3, scope: !4108)
!4271 = !DILocation(line: 343, column: 15, scope: !4272)
!4272 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 343, column: 3)
!4273 = !DILocation(line: 343, column: 13, scope: !4272)
!4274 = !DILocation(line: 343, column: 8, scope: !4272)
!4275 = !DILocation(line: 344, column: 8, scope: !4276)
!4276 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 343, column: 3)
!4277 = !DILocation(line: 344, column: 16, scope: !4276)
!4278 = !DILocation(line: 344, column: 13, scope: !4276)
!4279 = !DILocation(line: 343, column: 3, scope: !4272)
!4280 = !DILocation(line: 346, column: 9, scope: !4281)
!4281 = distinct !DILexicalBlock(scope: !4276, file: !3, line: 346, column: 9)
!4282 = !DILocation(line: 346, column: 9, scope: !4276)
!4283 = !DILocation(line: 347, column: 28, scope: !4281)
!4284 = !DILocation(line: 347, column: 7, scope: !4281)
!4285 = !DILocation(line: 345, column: 15, scope: !4276)
!4286 = !DILocation(line: 345, column: 13, scope: !4276)
!4287 = !DILocation(line: 343, column: 3, scope: !4276)
!4288 = distinct !{!4288, !4279, !4289}
!4289 = !DILocation(line: 347, column: 32, scope: !4272)
!4290 = !DILocation(line: 349, column: 14, scope: !4108)
!4291 = !DILocation(line: 349, column: 12, scope: !4108)
!4292 = !DILocation(line: 350, column: 3, scope: !4108)
!4293 = !DILocation(line: 356, column: 15, scope: !4294)
!4294 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 356, column: 3)
!4295 = !DILocation(line: 356, column: 13, scope: !4294)
!4296 = !DILocation(line: 356, column: 8, scope: !4294)
!4297 = !DILocation(line: 357, column: 8, scope: !4298)
!4298 = distinct !DILexicalBlock(scope: !4294, file: !3, line: 356, column: 3)
!4299 = !DILocation(line: 357, column: 16, scope: !4298)
!4300 = !DILocation(line: 357, column: 13, scope: !4298)
!4301 = !DILocation(line: 357, column: 39, scope: !4298)
!4302 = !DILocation(line: 357, column: 43, scope: !4298)
!4303 = !DILocation(line: 357, column: 42, scope: !4298)
!4304 = !DILocation(line: 0, scope: !4298)
!4305 = !DILocation(line: 356, column: 3, scope: !4294)
!4306 = !DILocation(line: 360, column: 11, scope: !4307)
!4307 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 360, column: 11)
!4308 = distinct !DILexicalBlock(scope: !4298, file: !3, line: 359, column: 5)
!4309 = !DILocation(line: 360, column: 11, scope: !4308)
!4310 = !DILocalVariable(name: "pat", scope: !4311, file: !3, line: 362, type: !970)
!4311 = distinct !DILexicalBlock(scope: !4307, file: !3, line: 361, column: 2)
!4312 = !DILocation(line: 362, column: 8, scope: !4311)
!4313 = !DILocation(line: 362, column: 14, scope: !4311)
!4314 = !DILocation(line: 364, column: 8, scope: !4315)
!4315 = distinct !DILexicalBlock(scope: !4311, file: !3, line: 364, column: 8)
!4316 = !DILocation(line: 364, column: 23, scope: !4315)
!4317 = !DILocation(line: 364, column: 8, scope: !4311)
!4318 = !DILocation(line: 366, column: 15, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4320, file: !3, line: 366, column: 8)
!4320 = distinct !DILexicalBlock(scope: !4315, file: !3, line: 365, column: 6)
!4321 = !DILocation(line: 366, column: 13, scope: !4319)
!4322 = !DILocation(line: 366, column: 20, scope: !4323)
!4323 = distinct !DILexicalBlock(scope: !4319, file: !3, line: 366, column: 8)
!4324 = !DILocation(line: 366, column: 34, scope: !4323)
!4325 = !DILocation(line: 366, column: 22, scope: !4323)
!4326 = !DILocation(line: 366, column: 8, scope: !4319)
!4327 = !DILocation(line: 367, column: 26, scope: !4323)
!4328 = !DILocation(line: 367, column: 47, scope: !4323)
!4329 = !DILocation(line: 367, column: 13, scope: !4323)
!4330 = !DILocation(line: 367, column: 10, scope: !4323)
!4331 = !DILocation(line: 367, column: 3, scope: !4323)
!4332 = !DILocation(line: 366, column: 53, scope: !4323)
!4333 = !DILocation(line: 366, column: 8, scope: !4323)
!4334 = distinct !{!4334, !4326, !4335}
!4335 = !DILocation(line: 367, column: 55, scope: !4319)
!4336 = !DILocation(line: 368, column: 6, scope: !4320)
!4337 = !DILocation(line: 370, column: 29, scope: !4315)
!4338 = !DILocation(line: 370, column: 34, scope: !4315)
!4339 = !DILocation(line: 370, column: 16, scope: !4315)
!4340 = !DILocation(line: 370, column: 13, scope: !4315)
!4341 = !DILocation(line: 371, column: 2, scope: !4311)
!4342 = !DILocation(line: 373, column: 28, scope: !4308)
!4343 = !DILocation(line: 373, column: 7, scope: !4308)
!4344 = !DILocation(line: 374, column: 5, scope: !4308)
!4345 = !DILocation(line: 358, column: 15, scope: !4298)
!4346 = !DILocation(line: 358, column: 13, scope: !4298)
!4347 = !DILocation(line: 356, column: 3, scope: !4298)
!4348 = distinct !{!4348, !4305, !4349}
!4349 = !DILocation(line: 374, column: 5, scope: !4294)
!4350 = !DILocation(line: 378, column: 7, scope: !4351)
!4351 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 378, column: 7)
!4352 = !DILocation(line: 378, column: 7, scope: !4108)
!4353 = !DILocation(line: 380, column: 7, scope: !4354)
!4354 = distinct !DILexicalBlock(scope: !4351, file: !3, line: 379, column: 5)
!4355 = !DILocation(line: 380, column: 10, scope: !4354)
!4356 = !DILocation(line: 380, column: 16, scope: !4354)
!4357 = !DILocation(line: 381, column: 7, scope: !4354)
!4358 = !DILocation(line: 386, column: 53, scope: !4359)
!4359 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 386, column: 7)
!4360 = !DILocation(line: 386, column: 7, scope: !4359)
!4361 = !DILocation(line: 386, column: 7, scope: !4108)
!4362 = !DILocation(line: 387, column: 5, scope: !4359)
!4363 = !DILocation(line: 389, column: 3, scope: !4364)
!4364 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 389, column: 3)
!4365 = !DILocation(line: 389, column: 3, scope: !4366)
!4366 = distinct !DILexicalBlock(scope: !4364, file: !3, line: 389, column: 3)
!4367 = !DILocation(line: 390, column: 5, scope: !4366)
!4368 = distinct !{!4368, !4363, !4369}
!4369 = !DILocation(line: 390, column: 10, scope: !4364)
!4370 = !DILocation(line: 392, column: 3, scope: !4108)
!4371 = !DILocation(line: 393, column: 3, scope: !4108)
!4372 = !DILocation(line: 394, column: 32, scope: !4373)
!4373 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 394, column: 7)
!4374 = !DILocation(line: 394, column: 39, scope: !4373)
!4375 = !DILocation(line: 394, column: 8, scope: !4373)
!4376 = !DILocation(line: 394, column: 46, scope: !4373)
!4377 = !DILocation(line: 395, column: 11, scope: !4373)
!4378 = !DILocation(line: 395, column: 39, scope: !4373)
!4379 = !DILocation(line: 395, column: 36, scope: !4373)
!4380 = !DILocation(line: 395, column: 7, scope: !4373)
!4381 = !DILocation(line: 394, column: 7, scope: !4108)
!4382 = !DILocation(line: 396, column: 12, scope: !4373)
!4383 = !DILocation(line: 396, column: 5, scope: !4373)
!4384 = !DILocation(line: 398, column: 12, scope: !4373)
!4385 = !DILocation(line: 398, column: 5, scope: !4373)
!4386 = !DILabel(scope: !4108, name: "failed_exit", file: !3, line: 400)
!4387 = !DILocation(line: 400, column: 1, scope: !4108)
!4388 = !DILocation(line: 401, column: 3, scope: !4108)
!4389 = !DILocation(line: 402, column: 3, scope: !4108)
!4390 = !DILocation(line: 403, column: 3, scope: !4108)
!4391 = !DILocation(line: 404, column: 1, scope: !4108)
!4392 = distinct !DISubprogram(name: "mark_effect", scope: !3, file: !3, line: 195, type: !4393, scopeLine: 196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4393 = !DISubroutineType(types: !4394)
!4394 = !{!1225, !970, !2127}
!4395 = !DILocalVariable(name: "exp", arg: 1, scope: !4392, file: !3, line: 195, type: !970)
!4396 = !DILocation(line: 195, column: 18, scope: !4392)
!4397 = !DILocalVariable(name: "nonequal", arg: 2, scope: !4392, file: !3, line: 195, type: !2127)
!4398 = !DILocation(line: 195, column: 30, scope: !4392)
!4399 = !DILocalVariable(name: "regno", scope: !4392, file: !3, line: 197, type: !993)
!4400 = !DILocation(line: 197, column: 7, scope: !4392)
!4401 = !DILocalVariable(name: "dest", scope: !4392, file: !3, line: 198, type: !970)
!4402 = !DILocation(line: 198, column: 7, scope: !4392)
!4403 = !DILocation(line: 199, column: 11, scope: !4392)
!4404 = !DILocation(line: 199, column: 3, scope: !4392)
!4405 = !DILocation(line: 204, column: 11, scope: !4406)
!4406 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 204, column: 11)
!4407 = distinct !DILexicalBlock(scope: !4392, file: !3, line: 200, column: 5)
!4408 = !DILocation(line: 204, column: 11, scope: !4407)
!4409 = !DILocation(line: 206, column: 11, scope: !4410)
!4410 = distinct !DILexicalBlock(scope: !4406, file: !3, line: 205, column: 2)
!4411 = !DILocation(line: 206, column: 9, scope: !4410)
!4412 = !DILocation(line: 207, column: 12, scope: !4410)
!4413 = !DILocation(line: 207, column: 10, scope: !4410)
!4414 = !DILocation(line: 208, column: 4, scope: !4410)
!4415 = !DILocation(line: 209, column: 8, scope: !4416)
!4416 = distinct !DILexicalBlock(scope: !4410, file: !3, line: 209, column: 8)
!4417 = !DILocation(line: 209, column: 14, scope: !4416)
!4418 = !DILocation(line: 209, column: 8, scope: !4410)
!4419 = !DILocalVariable(name: "n", scope: !4420, file: !3, line: 211, type: !993)
!4420 = distinct !DILexicalBlock(scope: !4416, file: !3, line: 210, column: 6)
!4421 = !DILocation(line: 211, column: 12, scope: !4420)
!4422 = !DILocation(line: 211, column: 33, scope: !4420)
!4423 = !DILocation(line: 211, column: 16, scope: !4420)
!4424 = !DILocation(line: 211, column: 40, scope: !4420)
!4425 = !DILocation(line: 212, column: 8, scope: !4420)
!4426 = !DILocation(line: 212, column: 15, scope: !4420)
!4427 = !DILocation(line: 212, column: 19, scope: !4420)
!4428 = !DILocation(line: 213, column: 3, scope: !4420)
!4429 = distinct !{!4429, !4425, !4428}
!4430 = !DILocation(line: 214, column: 6, scope: !4420)
!4431 = !DILocation(line: 215, column: 2, scope: !4410)
!4432 = !DILocation(line: 216, column: 7, scope: !4407)
!4433 = !DILocation(line: 219, column: 35, scope: !4434)
!4434 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 219, column: 11)
!4435 = !DILocation(line: 219, column: 51, scope: !4434)
!4436 = !DILocation(line: 219, column: 11, scope: !4434)
!4437 = !DILocation(line: 219, column: 11, scope: !4407)
!4438 = !DILocation(line: 220, column: 2, scope: !4434)
!4439 = !DILocation(line: 221, column: 14, scope: !4407)
!4440 = !DILocation(line: 221, column: 12, scope: !4407)
!4441 = !DILocation(line: 222, column: 11, scope: !4442)
!4442 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 222, column: 11)
!4443 = !DILocation(line: 222, column: 19, scope: !4442)
!4444 = !DILocation(line: 222, column: 16, scope: !4442)
!4445 = !DILocation(line: 222, column: 11, scope: !4407)
!4446 = !DILocation(line: 223, column: 2, scope: !4442)
!4447 = !DILocation(line: 224, column: 12, scope: !4448)
!4448 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 224, column: 11)
!4449 = !DILocation(line: 224, column: 11, scope: !4407)
!4450 = !DILocation(line: 225, column: 2, scope: !4448)
!4451 = !DILocation(line: 226, column: 15, scope: !4407)
!4452 = !DILocation(line: 226, column: 13, scope: !4407)
!4453 = !DILocation(line: 227, column: 7, scope: !4407)
!4454 = !DILocation(line: 228, column: 11, scope: !4455)
!4455 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 228, column: 11)
!4456 = !DILocation(line: 228, column: 17, scope: !4455)
!4457 = !DILocation(line: 228, column: 11, scope: !4407)
!4458 = !DILocalVariable(name: "n", scope: !4459, file: !3, line: 230, type: !993)
!4459 = distinct !DILexicalBlock(scope: !4455, file: !3, line: 229, column: 2)
!4460 = !DILocation(line: 230, column: 8, scope: !4459)
!4461 = !DILocation(line: 230, column: 29, scope: !4459)
!4462 = !DILocation(line: 230, column: 12, scope: !4459)
!4463 = !DILocation(line: 230, column: 36, scope: !4459)
!4464 = !DILocation(line: 231, column: 4, scope: !4459)
!4465 = !DILocation(line: 231, column: 11, scope: !4459)
!4466 = !DILocation(line: 231, column: 15, scope: !4459)
!4467 = !DILocation(line: 232, column: 6, scope: !4459)
!4468 = distinct !{!4468, !4464, !4467}
!4469 = !DILocation(line: 233, column: 2, scope: !4459)
!4470 = !DILocation(line: 234, column: 7, scope: !4407)
!4471 = !DILocation(line: 237, column: 7, scope: !4407)
!4472 = !DILocation(line: 239, column: 1, scope: !4392)
!4473 = distinct !DISubprogram(name: "mentions_nonequal_regs", scope: !3, file: !3, line: 244, type: !4474, scopeLine: 245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4474 = !DISubroutineType(types: !4475)
!4475 = !{!993, !4476, !1102}
!4476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !970, size: 64)
!4477 = !DILocalVariable(name: "x", arg: 1, scope: !4473, file: !3, line: 244, type: !4476)
!4478 = !DILocation(line: 244, column: 30, scope: !4473)
!4479 = !DILocalVariable(name: "data", arg: 2, scope: !4473, file: !3, line: 244, type: !1102)
!4480 = !DILocation(line: 244, column: 39, scope: !4473)
!4481 = !DILocalVariable(name: "nonequal", scope: !4473, file: !3, line: 246, type: !2127)
!4482 = !DILocation(line: 246, column: 10, scope: !4473)
!4483 = !DILocation(line: 246, column: 30, scope: !4473)
!4484 = !DILocation(line: 246, column: 21, scope: !4473)
!4485 = !DILocation(line: 247, column: 7, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !4473, file: !3, line: 247, column: 7)
!4487 = !DILocation(line: 247, column: 7, scope: !4473)
!4488 = !DILocalVariable(name: "regno", scope: !4489, file: !3, line: 249, type: !993)
!4489 = distinct !DILexicalBlock(scope: !4486, file: !3, line: 248, column: 5)
!4490 = !DILocation(line: 249, column: 11, scope: !4489)
!4491 = !DILocation(line: 251, column: 15, scope: !4489)
!4492 = !DILocation(line: 251, column: 13, scope: !4489)
!4493 = !DILocation(line: 252, column: 11, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4489, file: !3, line: 252, column: 11)
!4495 = !DILocation(line: 252, column: 11, scope: !4489)
!4496 = !DILocation(line: 253, column: 2, scope: !4494)
!4497 = !DILocation(line: 254, column: 11, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4489, file: !3, line: 254, column: 11)
!4499 = !DILocation(line: 254, column: 17, scope: !4498)
!4500 = !DILocation(line: 254, column: 11, scope: !4489)
!4501 = !DILocalVariable(name: "n", scope: !4502, file: !3, line: 256, type: !993)
!4502 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 255, column: 2)
!4503 = !DILocation(line: 256, column: 8, scope: !4502)
!4504 = !DILocation(line: 256, column: 29, scope: !4502)
!4505 = !DILocation(line: 256, column: 12, scope: !4502)
!4506 = !DILocation(line: 256, column: 36, scope: !4502)
!4507 = !DILocation(line: 257, column: 4, scope: !4502)
!4508 = !DILocation(line: 257, column: 11, scope: !4502)
!4509 = !DILocation(line: 257, column: 15, scope: !4502)
!4510 = !DILocation(line: 258, column: 10, scope: !4511)
!4511 = distinct !DILexicalBlock(scope: !4502, file: !3, line: 258, column: 10)
!4512 = !DILocation(line: 258, column: 10, scope: !4502)
!4513 = !DILocation(line: 259, column: 8, scope: !4511)
!4514 = distinct !{!4514, !4507, !4515}
!4515 = !DILocation(line: 259, column: 15, scope: !4502)
!4516 = !DILocation(line: 260, column: 2, scope: !4502)
!4517 = !DILocation(line: 261, column: 5, scope: !4489)
!4518 = !DILocation(line: 262, column: 3, scope: !4473)
!4519 = !DILocation(line: 263, column: 1, scope: !4473)
!4520 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1050, file: !1050, line: 224, type: !4521, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4521 = !DISubroutineType(types: !4522)
!4522 = !{null, !4523, !4524, !7, !4527}
!4523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4141, size: 64)
!4524 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !391, line: 48, baseType: !4525)
!4525 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4526, size: 64)
!4526 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1049)
!4527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4528 = !DILocalVariable(name: "bi", arg: 1, scope: !4520, file: !1050, line: 224, type: !4523)
!4529 = !DILocation(line: 224, column: 37, scope: !4520)
!4530 = !DILocalVariable(name: "map", arg: 2, scope: !4520, file: !1050, line: 224, type: !4524)
!4531 = !DILocation(line: 224, column: 54, scope: !4520)
!4532 = !DILocalVariable(name: "start_bit", arg: 3, scope: !4520, file: !1050, line: 225, type: !7)
!4533 = !DILocation(line: 225, column: 15, scope: !4520)
!4534 = !DILocalVariable(name: "bit_no", arg: 4, scope: !4520, file: !1050, line: 225, type: !4527)
!4535 = !DILocation(line: 225, column: 36, scope: !4520)
!4536 = !DILocation(line: 227, column: 14, scope: !4520)
!4537 = !DILocation(line: 227, column: 19, scope: !4520)
!4538 = !DILocation(line: 227, column: 3, scope: !4520)
!4539 = !DILocation(line: 227, column: 7, scope: !4520)
!4540 = !DILocation(line: 227, column: 12, scope: !4520)
!4541 = !DILocation(line: 228, column: 3, scope: !4520)
!4542 = !DILocation(line: 228, column: 7, scope: !4520)
!4543 = !DILocation(line: 228, column: 12, scope: !4520)
!4544 = !DILocation(line: 231, column: 3, scope: !4520)
!4545 = !DILocation(line: 233, column: 12, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4547, file: !1050, line: 233, column: 11)
!4547 = distinct !DILexicalBlock(scope: !4520, file: !1050, line: 232, column: 5)
!4548 = !DILocation(line: 233, column: 16, scope: !4546)
!4549 = !DILocation(line: 233, column: 11, scope: !4547)
!4550 = !DILocation(line: 235, column: 4, scope: !4551)
!4551 = distinct !DILexicalBlock(scope: !4546, file: !1050, line: 234, column: 2)
!4552 = !DILocation(line: 235, column: 8, scope: !4551)
!4553 = !DILocation(line: 235, column: 13, scope: !4551)
!4554 = !DILocation(line: 236, column: 4, scope: !4551)
!4555 = !DILocation(line: 239, column: 11, scope: !4556)
!4556 = distinct !DILexicalBlock(scope: !4547, file: !1050, line: 239, column: 11)
!4557 = !DILocation(line: 239, column: 15, scope: !4556)
!4558 = !DILocation(line: 239, column: 21, scope: !4556)
!4559 = !DILocation(line: 239, column: 29, scope: !4556)
!4560 = !DILocation(line: 239, column: 39, scope: !4556)
!4561 = !DILocation(line: 239, column: 26, scope: !4556)
!4562 = !DILocation(line: 239, column: 11, scope: !4547)
!4563 = !DILocation(line: 240, column: 2, scope: !4556)
!4564 = !DILocation(line: 241, column: 18, scope: !4547)
!4565 = !DILocation(line: 241, column: 22, scope: !4547)
!4566 = !DILocation(line: 241, column: 28, scope: !4547)
!4567 = !DILocation(line: 241, column: 7, scope: !4547)
!4568 = !DILocation(line: 241, column: 11, scope: !4547)
!4569 = !DILocation(line: 241, column: 16, scope: !4547)
!4570 = distinct !{!4570, !4544, !4571}
!4571 = !DILocation(line: 242, column: 5, scope: !4520)
!4572 = !DILocation(line: 245, column: 7, scope: !4573)
!4573 = distinct !DILexicalBlock(scope: !4520, file: !1050, line: 245, column: 7)
!4574 = !DILocation(line: 245, column: 11, scope: !4573)
!4575 = !DILocation(line: 245, column: 17, scope: !4573)
!4576 = !DILocation(line: 245, column: 25, scope: !4573)
!4577 = !DILocation(line: 245, column: 35, scope: !4573)
!4578 = !DILocation(line: 245, column: 22, scope: !4573)
!4579 = !DILocation(line: 245, column: 7, scope: !4520)
!4580 = !DILocation(line: 246, column: 17, scope: !4573)
!4581 = !DILocation(line: 246, column: 21, scope: !4573)
!4582 = !DILocation(line: 246, column: 27, scope: !4573)
!4583 = !DILocation(line: 246, column: 32, scope: !4573)
!4584 = !DILocation(line: 246, column: 15, scope: !4573)
!4585 = !DILocation(line: 246, column: 5, scope: !4573)
!4586 = !DILocation(line: 249, column: 17, scope: !4520)
!4587 = !DILocation(line: 249, column: 27, scope: !4520)
!4588 = !DILocation(line: 249, column: 46, scope: !4520)
!4589 = !DILocation(line: 249, column: 3, scope: !4520)
!4590 = !DILocation(line: 249, column: 7, scope: !4520)
!4591 = !DILocation(line: 249, column: 15, scope: !4520)
!4592 = !DILocation(line: 250, column: 14, scope: !4520)
!4593 = !DILocation(line: 250, column: 18, scope: !4520)
!4594 = !DILocation(line: 250, column: 24, scope: !4520)
!4595 = !DILocation(line: 250, column: 29, scope: !4520)
!4596 = !DILocation(line: 250, column: 33, scope: !4520)
!4597 = !DILocation(line: 250, column: 3, scope: !4520)
!4598 = !DILocation(line: 250, column: 7, scope: !4520)
!4599 = !DILocation(line: 250, column: 12, scope: !4520)
!4600 = !DILocation(line: 251, column: 16, scope: !4520)
!4601 = !DILocation(line: 251, column: 26, scope: !4520)
!4602 = !DILocation(line: 251, column: 3, scope: !4520)
!4603 = !DILocation(line: 251, column: 7, scope: !4520)
!4604 = !DILocation(line: 251, column: 12, scope: !4520)
!4605 = !DILocation(line: 257, column: 17, scope: !4520)
!4606 = !DILocation(line: 257, column: 21, scope: !4520)
!4607 = !DILocation(line: 257, column: 16, scope: !4520)
!4608 = !DILocation(line: 257, column: 13, scope: !4520)
!4609 = !DILocation(line: 259, column: 13, scope: !4520)
!4610 = !DILocation(line: 259, column: 4, scope: !4520)
!4611 = !DILocation(line: 259, column: 11, scope: !4520)
!4612 = !DILocation(line: 260, column: 1, scope: !4520)
!4613 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1050, file: !1050, line: 393, type: !4614, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4614 = !DISubroutineType(types: !4615)
!4615 = !{!1225, !4523, !4527}
!4616 = !DILocalVariable(name: "bi", arg: 1, scope: !4613, file: !1050, line: 393, type: !4523)
!4617 = !DILocation(line: 393, column: 32, scope: !4613)
!4618 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4613, file: !1050, line: 393, type: !4527)
!4619 = !DILocation(line: 393, column: 46, scope: !4613)
!4620 = !DILocation(line: 396, column: 7, scope: !4621)
!4621 = distinct !DILexicalBlock(scope: !4613, file: !1050, line: 396, column: 7)
!4622 = !DILocation(line: 396, column: 11, scope: !4621)
!4623 = !DILocation(line: 396, column: 7, scope: !4613)
!4624 = !DILocation(line: 397, column: 5, scope: !4621)
!4625 = !DILabel(scope: !4626, name: "next_bit", file: !1050, line: 398)
!4626 = distinct !DILexicalBlock(scope: !4621, file: !1050, line: 397, column: 5)
!4627 = !DILocation(line: 398, column: 5, scope: !4626)
!4628 = !DILocation(line: 399, column: 7, scope: !4626)
!4629 = !DILocation(line: 399, column: 16, scope: !4626)
!4630 = !DILocation(line: 399, column: 20, scope: !4626)
!4631 = !DILocation(line: 399, column: 25, scope: !4626)
!4632 = !DILocation(line: 399, column: 14, scope: !4626)
!4633 = !DILocation(line: 401, column: 4, scope: !4634)
!4634 = distinct !DILexicalBlock(scope: !4626, file: !1050, line: 400, column: 2)
!4635 = !DILocation(line: 401, column: 8, scope: !4634)
!4636 = !DILocation(line: 401, column: 13, scope: !4634)
!4637 = !DILocation(line: 402, column: 5, scope: !4634)
!4638 = !DILocation(line: 402, column: 12, scope: !4634)
!4639 = distinct !{!4639, !4628, !4640}
!4640 = !DILocation(line: 403, column: 2, scope: !4626)
!4641 = !DILocation(line: 404, column: 7, scope: !4626)
!4642 = !DILocation(line: 410, column: 16, scope: !4613)
!4643 = !DILocation(line: 410, column: 15, scope: !4613)
!4644 = !DILocation(line: 410, column: 23, scope: !4613)
!4645 = !DILocation(line: 410, column: 42, scope: !4613)
!4646 = !DILocation(line: 411, column: 7, scope: !4613)
!4647 = !DILocation(line: 411, column: 26, scope: !4613)
!4648 = !DILocation(line: 410, column: 4, scope: !4613)
!4649 = !DILocation(line: 410, column: 11, scope: !4613)
!4650 = !DILocation(line: 412, column: 3, scope: !4613)
!4651 = !DILocation(line: 412, column: 7, scope: !4613)
!4652 = !DILocation(line: 412, column: 14, scope: !4613)
!4653 = !DILocation(line: 414, column: 3, scope: !4613)
!4654 = !DILocation(line: 417, column: 7, scope: !4655)
!4655 = distinct !DILexicalBlock(scope: !4613, file: !1050, line: 415, column: 5)
!4656 = !DILocation(line: 417, column: 14, scope: !4655)
!4657 = !DILocation(line: 417, column: 18, scope: !4655)
!4658 = !DILocation(line: 417, column: 26, scope: !4655)
!4659 = !DILocation(line: 419, column: 15, scope: !4660)
!4660 = distinct !DILexicalBlock(scope: !4655, file: !1050, line: 418, column: 2)
!4661 = !DILocation(line: 419, column: 19, scope: !4660)
!4662 = !DILocation(line: 419, column: 25, scope: !4660)
!4663 = !DILocation(line: 419, column: 30, scope: !4660)
!4664 = !DILocation(line: 419, column: 34, scope: !4660)
!4665 = !DILocation(line: 419, column: 4, scope: !4660)
!4666 = !DILocation(line: 419, column: 8, scope: !4660)
!4667 = !DILocation(line: 419, column: 13, scope: !4660)
!4668 = !DILocation(line: 420, column: 8, scope: !4669)
!4669 = distinct !DILexicalBlock(scope: !4660, file: !1050, line: 420, column: 8)
!4670 = !DILocation(line: 420, column: 12, scope: !4669)
!4671 = !DILocation(line: 420, column: 8, scope: !4660)
!4672 = !DILocation(line: 421, column: 6, scope: !4669)
!4673 = !DILocation(line: 422, column: 5, scope: !4660)
!4674 = !DILocation(line: 422, column: 12, scope: !4660)
!4675 = !DILocation(line: 423, column: 4, scope: !4660)
!4676 = !DILocation(line: 423, column: 8, scope: !4660)
!4677 = !DILocation(line: 423, column: 15, scope: !4660)
!4678 = distinct !{!4678, !4654, !4679}
!4679 = !DILocation(line: 424, column: 2, scope: !4655)
!4680 = !DILocation(line: 427, column: 18, scope: !4655)
!4681 = !DILocation(line: 427, column: 22, scope: !4655)
!4682 = !DILocation(line: 427, column: 28, scope: !4655)
!4683 = !DILocation(line: 427, column: 7, scope: !4655)
!4684 = !DILocation(line: 427, column: 11, scope: !4655)
!4685 = !DILocation(line: 427, column: 16, scope: !4655)
!4686 = !DILocation(line: 428, column: 12, scope: !4687)
!4687 = distinct !DILexicalBlock(scope: !4655, file: !1050, line: 428, column: 11)
!4688 = !DILocation(line: 428, column: 16, scope: !4687)
!4689 = !DILocation(line: 428, column: 11, scope: !4655)
!4690 = !DILocation(line: 429, column: 2, scope: !4687)
!4691 = !DILocation(line: 430, column: 17, scope: !4655)
!4692 = !DILocation(line: 430, column: 21, scope: !4655)
!4693 = !DILocation(line: 430, column: 27, scope: !4655)
!4694 = !DILocation(line: 430, column: 32, scope: !4655)
!4695 = !DILocation(line: 430, column: 8, scope: !4655)
!4696 = !DILocation(line: 430, column: 15, scope: !4655)
!4697 = !DILocation(line: 431, column: 7, scope: !4655)
!4698 = !DILocation(line: 431, column: 11, scope: !4655)
!4699 = !DILocation(line: 431, column: 19, scope: !4655)
!4700 = distinct !{!4700, !4653, !4701}
!4701 = !DILocation(line: 432, column: 5, scope: !4613)
!4702 = !DILocation(line: 433, column: 1, scope: !4613)
!4703 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1050, file: !1050, line: 382, type: !4704, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4704 = !DISubroutineType(types: !4705)
!4705 = !{null, !4523, !4527}
!4706 = !DILocalVariable(name: "bi", arg: 1, scope: !4703, file: !1050, line: 382, type: !4523)
!4707 = !DILocation(line: 382, column: 33, scope: !4703)
!4708 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4703, file: !1050, line: 382, type: !4527)
!4709 = !DILocation(line: 382, column: 47, scope: !4703)
!4710 = !DILocation(line: 384, column: 3, scope: !4703)
!4711 = !DILocation(line: 384, column: 7, scope: !4703)
!4712 = !DILocation(line: 384, column: 12, scope: !4703)
!4713 = !DILocation(line: 385, column: 4, scope: !4703)
!4714 = !DILocation(line: 385, column: 11, scope: !4703)
!4715 = !DILocation(line: 386, column: 1, scope: !4703)
!4716 = distinct !DISubprogram(name: "rhs_regno", scope: !415, file: !415, line: 1051, type: !4717, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4717 = !DISubroutineType(types: !4718)
!4718 = !{!7, !4719}
!4719 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !391, line: 51, baseType: !4720)
!4720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4721, size: 64)
!4721 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !972)
!4722 = !DILocalVariable(name: "x", arg: 1, scope: !4716, file: !415, line: 1051, type: !4719)
!4723 = !DILocation(line: 1051, column: 22, scope: !4716)
!4724 = !DILocation(line: 1053, column: 10, scope: !4716)
!4725 = !DILocation(line: 1053, column: 3, scope: !4716)
!4726 = distinct !DISubprogram(name: "try_crossjump_to_edge", scope: !3, file: !3, line: 1441, type: !4727, scopeLine: 1442, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!4727 = !DISubroutineType(types: !4728)
!4728 = !{!1225, !993, !1387, !1387}
!4729 = !DILocalVariable(name: "mode", arg: 1, scope: !4726, file: !3, line: 1441, type: !993)
!4730 = !DILocation(line: 1441, column: 28, scope: !4726)
!4731 = !DILocalVariable(name: "e1", arg: 2, scope: !4726, file: !3, line: 1441, type: !1387)
!4732 = !DILocation(line: 1441, column: 39, scope: !4726)
!4733 = !DILocalVariable(name: "e2", arg: 3, scope: !4726, file: !3, line: 1441, type: !1387)
!4734 = !DILocation(line: 1441, column: 48, scope: !4726)
!4735 = !DILocalVariable(name: "nmatch", scope: !4726, file: !3, line: 1443, type: !993)
!4736 = !DILocation(line: 1443, column: 7, scope: !4726)
!4737 = !DILocalVariable(name: "src1", scope: !4726, file: !3, line: 1444, type: !1370)
!4738 = !DILocation(line: 1444, column: 15, scope: !4726)
!4739 = !DILocation(line: 1444, column: 22, scope: !4726)
!4740 = !DILocation(line: 1444, column: 26, scope: !4726)
!4741 = !DILocalVariable(name: "src2", scope: !4726, file: !3, line: 1444, type: !1370)
!4742 = !DILocation(line: 1444, column: 31, scope: !4726)
!4743 = !DILocation(line: 1444, column: 38, scope: !4726)
!4744 = !DILocation(line: 1444, column: 42, scope: !4726)
!4745 = !DILocalVariable(name: "redirect_to", scope: !4726, file: !3, line: 1445, type: !1370)
!4746 = !DILocation(line: 1445, column: 15, scope: !4726)
!4747 = !DILocalVariable(name: "redirect_from", scope: !4726, file: !3, line: 1445, type: !1370)
!4748 = !DILocation(line: 1445, column: 28, scope: !4726)
!4749 = !DILocalVariable(name: "to_remove", scope: !4726, file: !3, line: 1445, type: !1370)
!4750 = !DILocation(line: 1445, column: 43, scope: !4726)
!4751 = !DILocalVariable(name: "newpos1", scope: !4726, file: !3, line: 1446, type: !970)
!4752 = !DILocation(line: 1446, column: 7, scope: !4726)
!4753 = !DILocalVariable(name: "newpos2", scope: !4726, file: !3, line: 1446, type: !970)
!4754 = !DILocation(line: 1446, column: 16, scope: !4726)
!4755 = !DILocalVariable(name: "s", scope: !4726, file: !3, line: 1447, type: !1387)
!4756 = !DILocation(line: 1447, column: 8, scope: !4726)
!4757 = !DILocalVariable(name: "ei", scope: !4726, file: !3, line: 1448, type: !3035)
!4758 = !DILocation(line: 1448, column: 17, scope: !4726)
!4759 = !DILocation(line: 1450, column: 21, scope: !4726)
!4760 = !DILocation(line: 1450, column: 11, scope: !4726)
!4761 = !DILocation(line: 1461, column: 7, scope: !4762)
!4762 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1461, column: 7)
!4763 = !DILocation(line: 1461, column: 41, scope: !4762)
!4764 = !DILocation(line: 1461, column: 44, scope: !4762)
!4765 = !DILocation(line: 1461, column: 7, scope: !4726)
!4766 = !DILocation(line: 1462, column: 5, scope: !4762)
!4767 = !DILocation(line: 1468, column: 22, scope: !4768)
!4768 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1468, column: 7)
!4769 = !DILocation(line: 1468, column: 7, scope: !4768)
!4770 = !DILocation(line: 1469, column: 7, scope: !4768)
!4771 = !DILocation(line: 1469, column: 10, scope: !4768)
!4772 = !DILocation(line: 1468, column: 7, scope: !4726)
!4773 = !DILocation(line: 1470, column: 28, scope: !4768)
!4774 = !DILocation(line: 1470, column: 10, scope: !4768)
!4775 = !DILocation(line: 1470, column: 8, scope: !4768)
!4776 = !DILocation(line: 1470, column: 42, scope: !4768)
!4777 = !DILocation(line: 1470, column: 46, scope: !4768)
!4778 = !DILocation(line: 1470, column: 40, scope: !4768)
!4779 = !DILocation(line: 1470, column: 5, scope: !4768)
!4780 = !DILocation(line: 1472, column: 22, scope: !4781)
!4781 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1472, column: 7)
!4782 = !DILocation(line: 1472, column: 7, scope: !4781)
!4783 = !DILocation(line: 1473, column: 7, scope: !4781)
!4784 = !DILocation(line: 1473, column: 10, scope: !4781)
!4785 = !DILocation(line: 1472, column: 7, scope: !4726)
!4786 = !DILocation(line: 1474, column: 28, scope: !4781)
!4787 = !DILocation(line: 1474, column: 10, scope: !4781)
!4788 = !DILocation(line: 1474, column: 8, scope: !4781)
!4789 = !DILocation(line: 1474, column: 42, scope: !4781)
!4790 = !DILocation(line: 1474, column: 46, scope: !4781)
!4791 = !DILocation(line: 1474, column: 40, scope: !4781)
!4792 = !DILocation(line: 1474, column: 5, scope: !4781)
!4793 = !DILocation(line: 1477, column: 7, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1477, column: 7)
!4795 = !DILocation(line: 1477, column: 15, scope: !4794)
!4796 = !DILocation(line: 1477, column: 12, scope: !4794)
!4797 = !DILocation(line: 1477, column: 31, scope: !4794)
!4798 = !DILocation(line: 1477, column: 34, scope: !4794)
!4799 = !DILocation(line: 1477, column: 42, scope: !4794)
!4800 = !DILocation(line: 1477, column: 39, scope: !4794)
!4801 = !DILocation(line: 1477, column: 7, scope: !4726)
!4802 = !DILocation(line: 1478, column: 5, scope: !4794)
!4803 = !DILocation(line: 1479, column: 7, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1479, column: 7)
!4805 = !DILocation(line: 1479, column: 15, scope: !4804)
!4806 = !DILocation(line: 1479, column: 12, scope: !4804)
!4807 = !DILocation(line: 1479, column: 7, scope: !4726)
!4808 = !DILocation(line: 1480, column: 5, scope: !4804)
!4809 = !DILocation(line: 1483, column: 7, scope: !4810)
!4810 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1483, column: 7)
!4811 = !DILocation(line: 1484, column: 7, scope: !4810)
!4812 = !DILocation(line: 1484, column: 10, scope: !4810)
!4813 = !DILocation(line: 1483, column: 7, scope: !4726)
!4814 = !DILocation(line: 1485, column: 5, scope: !4810)
!4815 = !DILocation(line: 1487, column: 7, scope: !4816)
!4816 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1487, column: 7)
!4817 = !DILocation(line: 1488, column: 7, scope: !4816)
!4818 = !DILocation(line: 1488, column: 10, scope: !4816)
!4819 = !DILocation(line: 1487, column: 7, scope: !4726)
!4820 = !DILocation(line: 1489, column: 5, scope: !4816)
!4821 = !DILocation(line: 1493, column: 7, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1493, column: 7)
!4823 = !DILocation(line: 1493, column: 32, scope: !4822)
!4824 = !DILocation(line: 1493, column: 37, scope: !4822)
!4825 = !DILocation(line: 1493, column: 40, scope: !4822)
!4826 = !DILocation(line: 1493, column: 65, scope: !4822)
!4827 = !DILocation(line: 1493, column: 7, scope: !4726)
!4828 = !DILocation(line: 1494, column: 5, scope: !4822)
!4829 = !DILocation(line: 1497, column: 30, scope: !4830)
!4830 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1497, column: 7)
!4831 = !DILocation(line: 1497, column: 36, scope: !4830)
!4832 = !DILocation(line: 1497, column: 42, scope: !4830)
!4833 = !DILocation(line: 1497, column: 8, scope: !4830)
!4834 = !DILocation(line: 1497, column: 7, scope: !4726)
!4835 = !DILocation(line: 1498, column: 5, scope: !4830)
!4836 = !DILocation(line: 1501, column: 34, scope: !4726)
!4837 = !DILocation(line: 1501, column: 40, scope: !4726)
!4838 = !DILocation(line: 1501, column: 46, scope: !4726)
!4839 = !DILocation(line: 1501, column: 12, scope: !4726)
!4840 = !DILocation(line: 1501, column: 10, scope: !4726)
!4841 = !DILocation(line: 1507, column: 8, scope: !4842)
!4842 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1507, column: 7)
!4843 = !DILocation(line: 1507, column: 17, scope: !4842)
!4844 = !DILocation(line: 1507, column: 15, scope: !4842)
!4845 = !DILocation(line: 1508, column: 7, scope: !4842)
!4846 = !DILocation(line: 1508, column: 11, scope: !4842)
!4847 = !DILocation(line: 1508, column: 22, scope: !4842)
!4848 = !DILocation(line: 1508, column: 19, scope: !4842)
!4849 = !DILocation(line: 1507, column: 7, scope: !4726)
!4850 = !DILocation(line: 1509, column: 5, scope: !4842)
!4851 = !DILocation(line: 1512, column: 33, scope: !4852)
!4852 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1512, column: 7)
!4853 = !DILocation(line: 1512, column: 37, scope: !4852)
!4854 = !DILocation(line: 1512, column: 7, scope: !4852)
!4855 = !DILocation(line: 1513, column: 7, scope: !4852)
!4856 = !DILocation(line: 1513, column: 11, scope: !4852)
!4857 = !DILocation(line: 1513, column: 15, scope: !4852)
!4858 = !DILocation(line: 1513, column: 21, scope: !4852)
!4859 = !DILocation(line: 1512, column: 7, scope: !4726)
!4860 = !DILocation(line: 1514, column: 5, scope: !4852)
!4861 = !DILocalVariable(name: "label1", scope: !4862, file: !3, line: 1522, type: !970)
!4862 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1521, column: 5)
!4863 = !DILocation(line: 1522, column: 11, scope: !4862)
!4864 = !DILocalVariable(name: "label2", scope: !4862, file: !3, line: 1522, type: !970)
!4865 = !DILocation(line: 1522, column: 19, scope: !4862)
!4866 = !DILocalVariable(name: "table1", scope: !4862, file: !3, line: 1523, type: !970)
!4867 = !DILocation(line: 1523, column: 11, scope: !4862)
!4868 = !DILocalVariable(name: "table2", scope: !4862, file: !3, line: 1523, type: !970)
!4869 = !DILocation(line: 1523, column: 19, scope: !4862)
!4870 = !DILocation(line: 1525, column: 24, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4862, file: !3, line: 1525, column: 11)
!4872 = !DILocation(line: 1525, column: 11, scope: !4871)
!4873 = !DILocation(line: 1526, column: 4, scope: !4871)
!4874 = !DILocation(line: 1526, column: 20, scope: !4871)
!4875 = !DILocation(line: 1526, column: 7, scope: !4871)
!4876 = !DILocation(line: 1527, column: 4, scope: !4871)
!4877 = !DILocation(line: 1527, column: 7, scope: !4871)
!4878 = !DILocation(line: 1527, column: 17, scope: !4871)
!4879 = !DILocation(line: 1527, column: 14, scope: !4871)
!4880 = !DILocation(line: 1525, column: 11, scope: !4862)
!4881 = !DILocalVariable(name: "rr", scope: !4882, file: !3, line: 1529, type: !4883)
!4882 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 1528, column: 2)
!4883 = !DIDerivedType(tag: DW_TAG_typedef, name: "replace_label_data", file: !415, line: 1811, baseType: !4884)
!4884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "replace_label_data", file: !415, line: 1806, size: 192, elements: !4885)
!4885 = !{!4886, !4887, !4888}
!4886 = !DIDerivedType(tag: DW_TAG_member, name: "r1", scope: !4884, file: !415, line: 1808, baseType: !970, size: 64)
!4887 = !DIDerivedType(tag: DW_TAG_member, name: "r2", scope: !4884, file: !415, line: 1809, baseType: !970, size: 64, offset: 64)
!4888 = !DIDerivedType(tag: DW_TAG_member, name: "update_label_nuses", scope: !4884, file: !415, line: 1810, baseType: !1225, size: 8, offset: 128)
!4889 = !DILocation(line: 1529, column: 23, scope: !4882)
!4890 = !DILocalVariable(name: "insn", scope: !4882, file: !3, line: 1530, type: !970)
!4891 = !DILocation(line: 1530, column: 8, scope: !4882)
!4892 = !DILocation(line: 1533, column: 12, scope: !4882)
!4893 = !DILocation(line: 1533, column: 7, scope: !4882)
!4894 = !DILocation(line: 1533, column: 10, scope: !4882)
!4895 = !DILocation(line: 1534, column: 12, scope: !4882)
!4896 = !DILocation(line: 1534, column: 7, scope: !4882)
!4897 = !DILocation(line: 1534, column: 10, scope: !4882)
!4898 = !DILocation(line: 1535, column: 7, scope: !4882)
!4899 = !DILocation(line: 1535, column: 26, scope: !4882)
!4900 = !DILocation(line: 1536, column: 16, scope: !4901)
!4901 = distinct !DILexicalBlock(scope: !4882, file: !3, line: 1536, column: 4)
!4902 = !DILocation(line: 1536, column: 14, scope: !4901)
!4903 = !DILocation(line: 1536, column: 9, scope: !4901)
!4904 = !DILocation(line: 1536, column: 30, scope: !4905)
!4905 = distinct !DILexicalBlock(scope: !4901, file: !3, line: 1536, column: 4)
!4906 = !DILocation(line: 1536, column: 4, scope: !4901)
!4907 = !DILocation(line: 1541, column: 12, scope: !4908)
!4908 = distinct !DILexicalBlock(scope: !4909, file: !3, line: 1541, column: 12)
!4909 = distinct !DILexicalBlock(scope: !4905, file: !3, line: 1537, column: 6)
!4910 = !DILocation(line: 1541, column: 20, scope: !4908)
!4911 = !DILocation(line: 1541, column: 17, scope: !4908)
!4912 = !DILocation(line: 1541, column: 12, scope: !4909)
!4913 = !DILocation(line: 1542, column: 39, scope: !4908)
!4914 = !DILocation(line: 1542, column: 3, scope: !4908)
!4915 = !DILocation(line: 1543, column: 6, scope: !4909)
!4916 = !DILocation(line: 1536, column: 43, scope: !4905)
!4917 = !DILocation(line: 1536, column: 41, scope: !4905)
!4918 = !DILocation(line: 1536, column: 4, scope: !4905)
!4919 = distinct !{!4919, !4906, !4920}
!4920 = !DILocation(line: 1543, column: 6, scope: !4901)
!4921 = !DILocation(line: 1544, column: 2, scope: !4882)
!4922 = !DILocation(line: 1550, column: 7, scope: !4923)
!4923 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1550, column: 7)
!4924 = !DILocation(line: 1550, column: 18, scope: !4923)
!4925 = !DILocation(line: 1550, column: 15, scope: !4923)
!4926 = !DILocation(line: 1551, column: 7, scope: !4923)
!4927 = !DILocation(line: 1551, column: 12, scope: !4923)
!4928 = !DILocation(line: 1551, column: 33, scope: !4923)
!4929 = !DILocation(line: 1551, column: 39, scope: !4923)
!4930 = !DILocation(line: 1550, column: 7, scope: !4726)
!4931 = !DILocation(line: 1552, column: 19, scope: !4923)
!4932 = !DILocation(line: 1552, column: 17, scope: !4923)
!4933 = !DILocation(line: 1552, column: 5, scope: !4923)
!4934 = !DILocation(line: 1555, column: 11, scope: !4935)
!4935 = distinct !DILexicalBlock(scope: !4936, file: !3, line: 1555, column: 11)
!4936 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 1554, column: 5)
!4937 = !DILocation(line: 1555, column: 22, scope: !4935)
!4938 = !DILocation(line: 1555, column: 19, scope: !4935)
!4939 = !DILocation(line: 1555, column: 11, scope: !4936)
!4940 = !DILocation(line: 1558, column: 8, scope: !4941)
!4941 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 1558, column: 8)
!4942 = distinct !DILexicalBlock(scope: !4935, file: !3, line: 1556, column: 2)
!4943 = !DILocation(line: 1558, column: 8, scope: !4942)
!4944 = !DILocation(line: 1559, column: 16, scope: !4941)
!4945 = !DILocation(line: 1559, column: 14, scope: !4941)
!4946 = !DILocation(line: 1559, column: 6, scope: !4941)
!4947 = !DILocation(line: 1560, column: 4, scope: !4942)
!4948 = !DILocation(line: 1560, column: 11, scope: !4942)
!4949 = !DILocation(line: 1561, column: 16, scope: !4942)
!4950 = !DILocation(line: 1561, column: 14, scope: !4942)
!4951 = distinct !{!4951, !4947, !4949}
!4952 = !DILocation(line: 1562, column: 8, scope: !4953)
!4953 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 1562, column: 8)
!4954 = !DILocation(line: 1562, column: 8, scope: !4942)
!4955 = !DILocation(line: 1563, column: 16, scope: !4953)
!4956 = !DILocation(line: 1563, column: 14, scope: !4953)
!4957 = !DILocation(line: 1563, column: 6, scope: !4953)
!4958 = !DILocation(line: 1564, column: 4, scope: !4942)
!4959 = !DILocation(line: 1564, column: 11, scope: !4942)
!4960 = !DILocation(line: 1565, column: 16, scope: !4942)
!4961 = !DILocation(line: 1565, column: 14, scope: !4942)
!4962 = distinct !{!4962, !4958, !4960}
!4963 = !DILocation(line: 1566, column: 2, scope: !4942)
!4964 = !DILocation(line: 1568, column: 11, scope: !4965)
!4965 = distinct !DILexicalBlock(scope: !4936, file: !3, line: 1568, column: 11)
!4966 = !DILocation(line: 1568, column: 11, scope: !4936)
!4967 = !DILocation(line: 1569, column: 11, scope: !4965)
!4968 = !DILocation(line: 1570, column: 4, scope: !4965)
!4969 = !DILocation(line: 1570, column: 10, scope: !4965)
!4970 = !DILocation(line: 1570, column: 17, scope: !4965)
!4971 = !DILocation(line: 1569, column: 2, scope: !4965)
!4972 = !DILocation(line: 1571, column: 34, scope: !4936)
!4973 = !DILocation(line: 1571, column: 40, scope: !4936)
!4974 = !DILocation(line: 1571, column: 21, scope: !4936)
!4975 = !DILocation(line: 1571, column: 62, scope: !4936)
!4976 = !DILocation(line: 1571, column: 19, scope: !4936)
!4977 = !DILocation(line: 1574, column: 7, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1574, column: 7)
!4979 = !DILocation(line: 1574, column: 7, scope: !4726)
!4980 = !DILocation(line: 1575, column: 14, scope: !4978)
!4981 = !DILocation(line: 1577, column: 7, scope: !4978)
!4982 = !DILocation(line: 1577, column: 13, scope: !4978)
!4983 = !DILocation(line: 1577, column: 20, scope: !4978)
!4984 = !DILocation(line: 1577, column: 26, scope: !4978)
!4985 = !DILocation(line: 1577, column: 33, scope: !4978)
!4986 = !DILocation(line: 1575, column: 5, scope: !4978)
!4987 = !DILocation(line: 1580, column: 20, scope: !4726)
!4988 = !DILocation(line: 1580, column: 3, scope: !4726)
!4989 = !DILocation(line: 1583, column: 3, scope: !4990)
!4990 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1583, column: 3)
!4991 = !DILocation(line: 1583, column: 3, scope: !4992)
!4992 = distinct !DILexicalBlock(scope: !4990, file: !3, line: 1583, column: 3)
!4993 = !DILocalVariable(name: "s2", scope: !4994, file: !3, line: 1585, type: !1387)
!4994 = distinct !DILexicalBlock(scope: !4992, file: !3, line: 1584, column: 5)
!4995 = !DILocation(line: 1585, column: 12, scope: !4994)
!4996 = !DILocalVariable(name: "ei", scope: !4994, file: !3, line: 1586, type: !3035)
!4997 = !DILocation(line: 1586, column: 21, scope: !4994)
!4998 = !DILocalVariable(name: "d", scope: !4994, file: !3, line: 1587, type: !1370)
!4999 = !DILocation(line: 1587, column: 19, scope: !4994)
!5000 = !DILocation(line: 1587, column: 23, scope: !4994)
!5001 = !DILocation(line: 1587, column: 26, scope: !4994)
!5002 = !DILocation(line: 1589, column: 11, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 1589, column: 11)
!5004 = !DILocation(line: 1589, column: 11, scope: !4994)
!5005 = !DILocation(line: 1590, column: 19, scope: !5003)
!5006 = !DILocation(line: 1590, column: 6, scope: !5003)
!5007 = !DILocation(line: 1590, column: 4, scope: !5003)
!5008 = !DILocation(line: 1590, column: 2, scope: !5003)
!5009 = !DILocation(line: 1592, column: 7, scope: !5010)
!5010 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 1592, column: 7)
!5011 = !DILocation(line: 1592, column: 7, scope: !5012)
!5012 = distinct !DILexicalBlock(scope: !5010, file: !3, line: 1592, column: 7)
!5013 = !DILocalVariable(name: "d2", scope: !5014, file: !3, line: 1594, type: !1370)
!5014 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 1593, column: 2)
!5015 = !DILocation(line: 1594, column: 16, scope: !5014)
!5016 = !DILocation(line: 1594, column: 21, scope: !5014)
!5017 = !DILocation(line: 1594, column: 25, scope: !5014)
!5018 = !DILocation(line: 1595, column: 8, scope: !5019)
!5019 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1595, column: 8)
!5020 = !DILocation(line: 1595, column: 8, scope: !5014)
!5021 = !DILocation(line: 1596, column: 24, scope: !5019)
!5022 = !DILocation(line: 1596, column: 11, scope: !5019)
!5023 = !DILocation(line: 1596, column: 9, scope: !5019)
!5024 = !DILocation(line: 1596, column: 6, scope: !5019)
!5025 = !DILocation(line: 1597, column: 8, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 1597, column: 8)
!5027 = !DILocation(line: 1597, column: 13, scope: !5026)
!5028 = !DILocation(line: 1597, column: 10, scope: !5026)
!5029 = !DILocation(line: 1597, column: 8, scope: !5014)
!5030 = !DILocation(line: 1598, column: 6, scope: !5026)
!5031 = !DILocation(line: 1599, column: 2, scope: !5014)
!5032 = distinct !{!5032, !5009, !5033}
!5033 = !DILocation(line: 1599, column: 2, scope: !5010)
!5034 = !DILocation(line: 1601, column: 19, scope: !4994)
!5035 = !DILocation(line: 1601, column: 23, scope: !4994)
!5036 = !DILocation(line: 1601, column: 7, scope: !4994)
!5037 = !DILocation(line: 1601, column: 10, scope: !4994)
!5038 = !DILocation(line: 1601, column: 16, scope: !4994)
!5039 = !DILocation(line: 1606, column: 11, scope: !5040)
!5040 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 1606, column: 11)
!5041 = !DILocation(line: 1606, column: 11, scope: !4994)
!5042 = !DILocation(line: 1608, column: 41, scope: !5043)
!5043 = distinct !DILexicalBlock(scope: !5040, file: !3, line: 1607, column: 2)
!5044 = !DILocation(line: 1608, column: 45, scope: !5043)
!5045 = !DILocation(line: 1608, column: 22, scope: !5043)
!5046 = !DILocation(line: 1608, column: 25, scope: !5043)
!5047 = !DILocation(line: 1608, column: 4, scope: !5043)
!5048 = !DILocation(line: 1608, column: 32, scope: !5043)
!5049 = !DILocation(line: 1608, column: 38, scope: !5043)
!5050 = !DILocation(line: 1609, column: 22, scope: !5043)
!5051 = !DILocation(line: 1609, column: 26, scope: !5043)
!5052 = !DILocation(line: 1609, column: 4, scope: !5043)
!5053 = !DILocation(line: 1609, column: 7, scope: !5043)
!5054 = !DILocation(line: 1609, column: 13, scope: !5043)
!5055 = !DILocation(line: 1609, column: 19, scope: !5043)
!5056 = !DILocation(line: 1610, column: 26, scope: !5043)
!5057 = !DILocation(line: 1610, column: 4, scope: !5043)
!5058 = !DILocation(line: 1610, column: 7, scope: !5043)
!5059 = !DILocation(line: 1610, column: 13, scope: !5043)
!5060 = !DILocation(line: 1610, column: 23, scope: !5043)
!5061 = !DILocation(line: 1611, column: 2, scope: !5043)
!5062 = !DILocation(line: 1613, column: 11, scope: !5063)
!5063 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 1613, column: 11)
!5064 = !DILocation(line: 1613, column: 11, scope: !4994)
!5065 = !DILocation(line: 1615, column: 42, scope: !5066)
!5066 = distinct !DILexicalBlock(scope: !5063, file: !3, line: 1614, column: 2)
!5067 = !DILocation(line: 1615, column: 46, scope: !5066)
!5068 = !DILocation(line: 1615, column: 22, scope: !5066)
!5069 = !DILocation(line: 1615, column: 26, scope: !5066)
!5070 = !DILocation(line: 1615, column: 4, scope: !5066)
!5071 = !DILocation(line: 1615, column: 33, scope: !5066)
!5072 = !DILocation(line: 1615, column: 39, scope: !5066)
!5073 = !DILocation(line: 1616, column: 26, scope: !5074)
!5074 = distinct !DILexicalBlock(scope: !5066, file: !3, line: 1616, column: 8)
!5075 = !DILocation(line: 1616, column: 30, scope: !5074)
!5076 = !DILocation(line: 1616, column: 8, scope: !5074)
!5077 = !DILocation(line: 1616, column: 37, scope: !5074)
!5078 = !DILocation(line: 1616, column: 43, scope: !5074)
!5079 = !DILocation(line: 1616, column: 8, scope: !5066)
!5080 = !DILocation(line: 1617, column: 24, scope: !5074)
!5081 = !DILocation(line: 1617, column: 28, scope: !5074)
!5082 = !DILocation(line: 1617, column: 6, scope: !5074)
!5083 = !DILocation(line: 1617, column: 35, scope: !5074)
!5084 = !DILocation(line: 1617, column: 41, scope: !5074)
!5085 = !DILocation(line: 1618, column: 23, scope: !5066)
!5086 = !DILocation(line: 1618, column: 27, scope: !5066)
!5087 = !DILocation(line: 1618, column: 4, scope: !5066)
!5088 = !DILocation(line: 1618, column: 8, scope: !5066)
!5089 = !DILocation(line: 1618, column: 14, scope: !5066)
!5090 = !DILocation(line: 1618, column: 20, scope: !5066)
!5091 = !DILocation(line: 1619, column: 27, scope: !5066)
!5092 = !DILocation(line: 1619, column: 4, scope: !5066)
!5093 = !DILocation(line: 1619, column: 8, scope: !5066)
!5094 = !DILocation(line: 1619, column: 14, scope: !5066)
!5095 = !DILocation(line: 1619, column: 24, scope: !5066)
!5096 = !DILocation(line: 1620, column: 8, scope: !5097)
!5097 = distinct !DILexicalBlock(scope: !5066, file: !3, line: 1620, column: 8)
!5098 = !DILocation(line: 1620, column: 12, scope: !5097)
!5099 = !DILocation(line: 1620, column: 18, scope: !5097)
!5100 = !DILocation(line: 1620, column: 28, scope: !5097)
!5101 = !DILocation(line: 1620, column: 8, scope: !5066)
!5102 = !DILocation(line: 1621, column: 6, scope: !5097)
!5103 = !DILocation(line: 1621, column: 10, scope: !5097)
!5104 = !DILocation(line: 1621, column: 16, scope: !5097)
!5105 = !DILocation(line: 1621, column: 26, scope: !5097)
!5106 = !DILocation(line: 1622, column: 8, scope: !5107)
!5107 = distinct !DILexicalBlock(scope: !5066, file: !3, line: 1622, column: 8)
!5108 = !DILocation(line: 1622, column: 12, scope: !5107)
!5109 = !DILocation(line: 1622, column: 18, scope: !5107)
!5110 = !DILocation(line: 1622, column: 24, scope: !5107)
!5111 = !DILocation(line: 1622, column: 8, scope: !5066)
!5112 = !DILocation(line: 1623, column: 6, scope: !5107)
!5113 = !DILocation(line: 1623, column: 10, scope: !5107)
!5114 = !DILocation(line: 1623, column: 16, scope: !5107)
!5115 = !DILocation(line: 1623, column: 22, scope: !5107)
!5116 = !DILocation(line: 1624, column: 2, scope: !5066)
!5117 = !DILocation(line: 1626, column: 12, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 1626, column: 11)
!5119 = !DILocation(line: 1626, column: 25, scope: !5118)
!5120 = !DILocation(line: 1626, column: 35, scope: !5118)
!5121 = !DILocation(line: 1626, column: 39, scope: !5118)
!5122 = !DILocation(line: 1626, column: 45, scope: !5118)
!5123 = !DILocation(line: 1626, column: 11, scope: !4994)
!5124 = !DILocation(line: 1627, column: 20, scope: !5118)
!5125 = !DILocation(line: 1627, column: 23, scope: !5118)
!5126 = !DILocation(line: 1627, column: 37, scope: !5118)
!5127 = !DILocation(line: 1627, column: 41, scope: !5118)
!5128 = !DILocation(line: 1627, column: 35, scope: !5118)
!5129 = !DILocation(line: 1627, column: 54, scope: !5118)
!5130 = !DILocation(line: 1627, column: 2, scope: !5118)
!5131 = !DILocation(line: 1627, column: 5, scope: !5118)
!5132 = !DILocation(line: 1627, column: 17, scope: !5118)
!5133 = !DILocation(line: 1630, column: 8, scope: !5118)
!5134 = !DILocation(line: 1630, column: 11, scope: !5118)
!5135 = !DILocation(line: 1630, column: 25, scope: !5118)
!5136 = !DILocation(line: 1630, column: 38, scope: !5118)
!5137 = !DILocation(line: 1630, column: 23, scope: !5118)
!5138 = !DILocation(line: 1631, column: 8, scope: !5118)
!5139 = !DILocation(line: 1631, column: 12, scope: !5118)
!5140 = !DILocation(line: 1631, column: 26, scope: !5118)
!5141 = !DILocation(line: 1631, column: 32, scope: !5118)
!5142 = !DILocation(line: 1631, column: 24, scope: !5118)
!5143 = !DILocation(line: 1630, column: 48, scope: !5118)
!5144 = !DILocation(line: 1632, column: 10, scope: !5118)
!5145 = !DILocation(line: 1632, column: 23, scope: !5118)
!5146 = !DILocation(line: 1632, column: 35, scope: !5118)
!5147 = !DILocation(line: 1632, column: 41, scope: !5118)
!5148 = !DILocation(line: 1632, column: 33, scope: !5118)
!5149 = !DILocation(line: 1632, column: 7, scope: !5118)
!5150 = !DILocation(line: 1629, column: 2, scope: !5118)
!5151 = !DILocation(line: 1629, column: 5, scope: !5118)
!5152 = !DILocation(line: 1630, column: 4, scope: !5118)
!5153 = !DILocation(line: 1633, column: 5, scope: !4994)
!5154 = distinct !{!5154, !4989, !5155}
!5155 = !DILocation(line: 1633, column: 5, scope: !4990)
!5156 = !DILocation(line: 1639, column: 25, scope: !4726)
!5157 = !DILocation(line: 1639, column: 31, scope: !4726)
!5158 = !DILocation(line: 1639, column: 3, scope: !4726)
!5159 = !DILocation(line: 1639, column: 16, scope: !4726)
!5160 = !DILocation(line: 1639, column: 22, scope: !4726)
!5161 = !DILocation(line: 1640, column: 29, scope: !4726)
!5162 = !DILocation(line: 1640, column: 35, scope: !4726)
!5163 = !DILocation(line: 1640, column: 3, scope: !4726)
!5164 = !DILocation(line: 1640, column: 16, scope: !4726)
!5165 = !DILocation(line: 1640, column: 26, scope: !4726)
!5166 = !DILocation(line: 1641, column: 7, scope: !5167)
!5167 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1641, column: 7)
!5168 = !DILocation(line: 1641, column: 20, scope: !5167)
!5169 = !DILocation(line: 1641, column: 30, scope: !5167)
!5170 = !DILocation(line: 1641, column: 7, scope: !4726)
!5171 = !DILocation(line: 1642, column: 5, scope: !5167)
!5172 = !DILocation(line: 1642, column: 18, scope: !5167)
!5173 = !DILocation(line: 1642, column: 28, scope: !5167)
!5174 = !DILocation(line: 1643, column: 24, scope: !4726)
!5175 = !DILocation(line: 1643, column: 3, scope: !4726)
!5176 = !DILocation(line: 1648, column: 7, scope: !5177)
!5177 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1648, column: 7)
!5178 = !DILocation(line: 1648, column: 7, scope: !4726)
!5179 = !DILocation(line: 1649, column: 15, scope: !5177)
!5180 = !DILocation(line: 1649, column: 13, scope: !5177)
!5181 = !DILocation(line: 1649, column: 5, scope: !5177)
!5182 = !DILocation(line: 1651, column: 3, scope: !4726)
!5183 = !DILocation(line: 1651, column: 10, scope: !4726)
!5184 = !DILocation(line: 1652, column: 15, scope: !4726)
!5185 = !DILocation(line: 1652, column: 13, scope: !4726)
!5186 = distinct !{!5186, !5182, !5184}
!5187 = !DILocation(line: 1654, column: 7, scope: !5188)
!5188 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1654, column: 7)
!5189 = !DILocation(line: 1654, column: 7, scope: !4726)
!5190 = !DILocation(line: 1655, column: 15, scope: !5188)
!5191 = !DILocation(line: 1655, column: 13, scope: !5188)
!5192 = !DILocation(line: 1655, column: 5, scope: !5188)
!5193 = !DILocation(line: 1657, column: 3, scope: !4726)
!5194 = !DILocation(line: 1657, column: 10, scope: !4726)
!5195 = !DILocation(line: 1658, column: 15, scope: !4726)
!5196 = !DILocation(line: 1658, column: 13, scope: !4726)
!5197 = distinct !{!5197, !5193, !5195}
!5198 = !DILocation(line: 1660, column: 32, scope: !4726)
!5199 = !DILocation(line: 1660, column: 38, scope: !4726)
!5200 = !DILocation(line: 1660, column: 19, scope: !4726)
!5201 = !DILocation(line: 1660, column: 60, scope: !4726)
!5202 = !DILocation(line: 1660, column: 17, scope: !4726)
!5203 = !DILocation(line: 1661, column: 28, scope: !4726)
!5204 = !DILocation(line: 1661, column: 15, scope: !4726)
!5205 = !DILocation(line: 1661, column: 13, scope: !4726)
!5206 = !DILocation(line: 1663, column: 53, scope: !4726)
!5207 = !DILocation(line: 1663, column: 35, scope: !4726)
!5208 = !DILocation(line: 1663, column: 69, scope: !4726)
!5209 = !DILocation(line: 1663, column: 3, scope: !4726)
!5210 = !DILocation(line: 1664, column: 23, scope: !4726)
!5211 = !DILocation(line: 1664, column: 3, scope: !4726)
!5212 = !DILocation(line: 1666, column: 26, scope: !4726)
!5213 = !DILocation(line: 1666, column: 3, scope: !4726)
!5214 = !DILocation(line: 1667, column: 7, scope: !5215)
!5215 = distinct !DILexicalBlock(scope: !4726, file: !3, line: 1667, column: 7)
!5216 = !DILocation(line: 1667, column: 22, scope: !5215)
!5217 = !DILocation(line: 1667, column: 19, scope: !5215)
!5218 = !DILocation(line: 1667, column: 7, scope: !4726)
!5219 = !DILocation(line: 1668, column: 28, scope: !5215)
!5220 = !DILocation(line: 1668, column: 5, scope: !5215)
!5221 = !DILocation(line: 1670, column: 3, scope: !4726)
!5222 = !DILocation(line: 1671, column: 1, scope: !4726)
!5223 = distinct !DISubprogram(name: "outgoing_edges_match", scope: !3, file: !3, line: 1140, type: !5224, scopeLine: 1141, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!5224 = !DISubroutineType(types: !5225)
!5225 = !{!1225, !993, !1370, !1370}
!5226 = !DILocalVariable(name: "mode", arg: 1, scope: !5223, file: !3, line: 1140, type: !993)
!5227 = !DILocation(line: 1140, column: 27, scope: !5223)
!5228 = !DILocalVariable(name: "bb1", arg: 2, scope: !5223, file: !3, line: 1140, type: !1370)
!5229 = !DILocation(line: 1140, column: 45, scope: !5223)
!5230 = !DILocalVariable(name: "bb2", arg: 3, scope: !5223, file: !3, line: 1140, type: !1370)
!5231 = !DILocation(line: 1140, column: 62, scope: !5223)
!5232 = !DILocalVariable(name: "nehedges1", scope: !5223, file: !3, line: 1142, type: !993)
!5233 = !DILocation(line: 1142, column: 7, scope: !5223)
!5234 = !DILocalVariable(name: "nehedges2", scope: !5223, file: !3, line: 1142, type: !993)
!5235 = !DILocation(line: 1142, column: 22, scope: !5223)
!5236 = !DILocalVariable(name: "fallthru1", scope: !5223, file: !3, line: 1143, type: !1387)
!5237 = !DILocation(line: 1143, column: 8, scope: !5223)
!5238 = !DILocalVariable(name: "fallthru2", scope: !5223, file: !3, line: 1143, type: !1387)
!5239 = !DILocation(line: 1143, column: 23, scope: !5223)
!5240 = !DILocalVariable(name: "e1", scope: !5223, file: !3, line: 1144, type: !1387)
!5241 = !DILocation(line: 1144, column: 8, scope: !5223)
!5242 = !DILocalVariable(name: "e2", scope: !5223, file: !3, line: 1144, type: !1387)
!5243 = !DILocation(line: 1144, column: 12, scope: !5223)
!5244 = !DILocalVariable(name: "ei", scope: !5223, file: !3, line: 1145, type: !3035)
!5245 = !DILocation(line: 1145, column: 17, scope: !5223)
!5246 = !DILocation(line: 1149, column: 22, scope: !5247)
!5247 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1149, column: 7)
!5248 = !DILocation(line: 1149, column: 7, scope: !5247)
!5249 = !DILocation(line: 1150, column: 7, scope: !5247)
!5250 = !DILocation(line: 1150, column: 29, scope: !5247)
!5251 = !DILocation(line: 1150, column: 11, scope: !5247)
!5252 = !DILocation(line: 1150, column: 35, scope: !5247)
!5253 = !DILocation(line: 1150, column: 41, scope: !5247)
!5254 = !DILocation(line: 1150, column: 71, scope: !5247)
!5255 = !DILocation(line: 1151, column: 7, scope: !5247)
!5256 = !DILocation(line: 1151, column: 12, scope: !5247)
!5257 = !DILocation(line: 1151, column: 34, scope: !5247)
!5258 = !DILocation(line: 1151, column: 51, scope: !5247)
!5259 = !DILocation(line: 1151, column: 37, scope: !5247)
!5260 = !DILocation(line: 1149, column: 7, scope: !5223)
!5261 = !DILocation(line: 1152, column: 28, scope: !5247)
!5262 = !DILocation(line: 1152, column: 13, scope: !5247)
!5263 = !DILocation(line: 1153, column: 6, scope: !5247)
!5264 = !DILocation(line: 1153, column: 28, scope: !5247)
!5265 = !DILocation(line: 1153, column: 10, scope: !5247)
!5266 = !DILocation(line: 1153, column: 34, scope: !5247)
!5267 = !DILocation(line: 1154, column: 3, scope: !5247)
!5268 = !DILocation(line: 1154, column: 33, scope: !5247)
!5269 = !DILocation(line: 1155, column: 6, scope: !5247)
!5270 = !DILocation(line: 1155, column: 11, scope: !5247)
!5271 = !DILocation(line: 1155, column: 33, scope: !5247)
!5272 = !DILocation(line: 1155, column: 50, scope: !5247)
!5273 = !DILocation(line: 1155, column: 36, scope: !5247)
!5274 = !DILocation(line: 0, scope: !5247)
!5275 = !DILocation(line: 1152, column: 12, scope: !5247)
!5276 = !DILocation(line: 1152, column: 5, scope: !5247)
!5277 = !DILocation(line: 1159, column: 7, scope: !5278)
!5278 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1159, column: 7)
!5279 = !DILocation(line: 1159, column: 31, scope: !5278)
!5280 = !DILocation(line: 1160, column: 7, scope: !5278)
!5281 = !DILocation(line: 1160, column: 26, scope: !5278)
!5282 = !DILocation(line: 1160, column: 10, scope: !5278)
!5283 = !DILocation(line: 1161, column: 7, scope: !5278)
!5284 = !DILocation(line: 1161, column: 22, scope: !5278)
!5285 = !DILocation(line: 1161, column: 10, scope: !5278)
!5286 = !DILocation(line: 1159, column: 7, scope: !5223)
!5287 = !DILocalVariable(name: "b1", scope: !5288, file: !3, line: 1163, type: !1387)
!5288 = distinct !DILexicalBlock(scope: !5278, file: !3, line: 1162, column: 5)
!5289 = !DILocation(line: 1163, column: 12, scope: !5288)
!5290 = !DILocalVariable(name: "f1", scope: !5288, file: !3, line: 1163, type: !1387)
!5291 = !DILocation(line: 1163, column: 16, scope: !5288)
!5292 = !DILocalVariable(name: "b2", scope: !5288, file: !3, line: 1163, type: !1387)
!5293 = !DILocation(line: 1163, column: 20, scope: !5288)
!5294 = !DILocalVariable(name: "f2", scope: !5288, file: !3, line: 1163, type: !1387)
!5295 = !DILocation(line: 1163, column: 24, scope: !5288)
!5296 = !DILocalVariable(name: "reverse", scope: !5288, file: !3, line: 1164, type: !1225)
!5297 = !DILocation(line: 1164, column: 12, scope: !5288)
!5298 = !DILocalVariable(name: "match", scope: !5288, file: !3, line: 1164, type: !1225)
!5299 = !DILocation(line: 1164, column: 21, scope: !5288)
!5300 = !DILocalVariable(name: "set1", scope: !5288, file: !3, line: 1165, type: !970)
!5301 = !DILocation(line: 1165, column: 11, scope: !5288)
!5302 = !DILocalVariable(name: "set2", scope: !5288, file: !3, line: 1165, type: !970)
!5303 = !DILocation(line: 1165, column: 17, scope: !5288)
!5304 = !DILocalVariable(name: "cond1", scope: !5288, file: !3, line: 1165, type: !970)
!5305 = !DILocation(line: 1165, column: 23, scope: !5288)
!5306 = !DILocalVariable(name: "cond2", scope: !5288, file: !3, line: 1165, type: !970)
!5307 = !DILocation(line: 1165, column: 30, scope: !5288)
!5308 = !DILocalVariable(name: "code1", scope: !5288, file: !3, line: 1166, type: !414)
!5309 = !DILocation(line: 1166, column: 21, scope: !5288)
!5310 = !DILocalVariable(name: "code2", scope: !5288, file: !3, line: 1166, type: !414)
!5311 = !DILocation(line: 1166, column: 28, scope: !5288)
!5312 = !DILocation(line: 1168, column: 11, scope: !5313)
!5313 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 1168, column: 11)
!5314 = !DILocation(line: 1168, column: 35, scope: !5313)
!5315 = !DILocation(line: 1169, column: 4, scope: !5313)
!5316 = !DILocation(line: 1169, column: 24, scope: !5313)
!5317 = !DILocation(line: 1169, column: 8, scope: !5313)
!5318 = !DILocation(line: 1170, column: 4, scope: !5313)
!5319 = !DILocation(line: 1170, column: 20, scope: !5313)
!5320 = !DILocation(line: 1170, column: 8, scope: !5313)
!5321 = !DILocation(line: 1168, column: 11, scope: !5288)
!5322 = !DILocation(line: 1171, column: 2, scope: !5313)
!5323 = !DILocation(line: 1173, column: 12, scope: !5288)
!5324 = !DILocation(line: 1173, column: 10, scope: !5288)
!5325 = !DILocation(line: 1174, column: 12, scope: !5288)
!5326 = !DILocation(line: 1174, column: 10, scope: !5288)
!5327 = !DILocation(line: 1175, column: 12, scope: !5288)
!5328 = !DILocation(line: 1175, column: 10, scope: !5288)
!5329 = !DILocation(line: 1176, column: 12, scope: !5288)
!5330 = !DILocation(line: 1176, column: 10, scope: !5288)
!5331 = !DILocation(line: 1180, column: 11, scope: !5332)
!5332 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 1180, column: 11)
!5333 = !DILocation(line: 1180, column: 11, scope: !5288)
!5334 = !DILocation(line: 1181, column: 25, scope: !5332)
!5335 = !DILocation(line: 1181, column: 29, scope: !5332)
!5336 = !DILocation(line: 1181, column: 7, scope: !5332)
!5337 = !DILocation(line: 1181, column: 5, scope: !5332)
!5338 = !DILocation(line: 1181, column: 2, scope: !5332)
!5339 = !DILocation(line: 1183, column: 11, scope: !5340)
!5340 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 1183, column: 11)
!5341 = !DILocation(line: 1183, column: 11, scope: !5288)
!5342 = !DILocation(line: 1184, column: 25, scope: !5340)
!5343 = !DILocation(line: 1184, column: 29, scope: !5340)
!5344 = !DILocation(line: 1184, column: 7, scope: !5340)
!5345 = !DILocation(line: 1184, column: 5, scope: !5340)
!5346 = !DILocation(line: 1184, column: 2, scope: !5340)
!5347 = !DILocation(line: 1189, column: 11, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 1189, column: 11)
!5349 = !DILocation(line: 1190, column: 4, scope: !5348)
!5350 = !DILocation(line: 1190, column: 7, scope: !5348)
!5351 = !DILocation(line: 1191, column: 4, scope: !5348)
!5352 = !DILocation(line: 1191, column: 7, scope: !5348)
!5353 = !DILocation(line: 1192, column: 4, scope: !5348)
!5354 = !DILocation(line: 1192, column: 7, scope: !5348)
!5355 = !DILocation(line: 1189, column: 11, scope: !5288)
!5356 = !DILocation(line: 1193, column: 2, scope: !5348)
!5357 = !DILocation(line: 1195, column: 11, scope: !5358)
!5358 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 1195, column: 11)
!5359 = !DILocation(line: 1195, column: 15, scope: !5358)
!5360 = !DILocation(line: 1195, column: 23, scope: !5358)
!5361 = !DILocation(line: 1195, column: 27, scope: !5358)
!5362 = !DILocation(line: 1195, column: 20, scope: !5358)
!5363 = !DILocation(line: 1195, column: 32, scope: !5358)
!5364 = !DILocation(line: 1195, column: 35, scope: !5358)
!5365 = !DILocation(line: 1195, column: 39, scope: !5358)
!5366 = !DILocation(line: 1195, column: 47, scope: !5358)
!5367 = !DILocation(line: 1195, column: 51, scope: !5358)
!5368 = !DILocation(line: 1195, column: 44, scope: !5358)
!5369 = !DILocation(line: 1195, column: 11, scope: !5288)
!5370 = !DILocation(line: 1196, column: 10, scope: !5358)
!5371 = !DILocation(line: 1196, column: 2, scope: !5358)
!5372 = !DILocation(line: 1197, column: 16, scope: !5373)
!5373 = distinct !DILexicalBlock(scope: !5358, file: !3, line: 1197, column: 16)
!5374 = !DILocation(line: 1197, column: 20, scope: !5373)
!5375 = !DILocation(line: 1197, column: 28, scope: !5373)
!5376 = !DILocation(line: 1197, column: 32, scope: !5373)
!5377 = !DILocation(line: 1197, column: 25, scope: !5373)
!5378 = !DILocation(line: 1197, column: 37, scope: !5373)
!5379 = !DILocation(line: 1197, column: 40, scope: !5373)
!5380 = !DILocation(line: 1197, column: 44, scope: !5373)
!5381 = !DILocation(line: 1197, column: 52, scope: !5373)
!5382 = !DILocation(line: 1197, column: 56, scope: !5373)
!5383 = !DILocation(line: 1197, column: 49, scope: !5373)
!5384 = !DILocation(line: 1197, column: 16, scope: !5358)
!5385 = !DILocation(line: 1198, column: 10, scope: !5373)
!5386 = !DILocation(line: 1198, column: 2, scope: !5373)
!5387 = !DILocation(line: 1200, column: 2, scope: !5373)
!5388 = !DILocation(line: 1202, column: 22, scope: !5288)
!5389 = !DILocation(line: 1202, column: 14, scope: !5288)
!5390 = !DILocation(line: 1202, column: 12, scope: !5288)
!5391 = !DILocation(line: 1203, column: 22, scope: !5288)
!5392 = !DILocation(line: 1203, column: 14, scope: !5288)
!5393 = !DILocation(line: 1203, column: 12, scope: !5288)
!5394 = !DILocation(line: 1204, column: 12, scope: !5395)
!5395 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 1204, column: 11)
!5396 = !DILocation(line: 1204, column: 40, scope: !5395)
!5397 = !DILocation(line: 1204, column: 37, scope: !5395)
!5398 = !DILocation(line: 1205, column: 8, scope: !5395)
!5399 = !DILocation(line: 1205, column: 36, scope: !5395)
!5400 = !DILocation(line: 1205, column: 33, scope: !5395)
!5401 = !DILocation(line: 1205, column: 4, scope: !5395)
!5402 = !DILocation(line: 1204, column: 11, scope: !5288)
!5403 = !DILocation(line: 1206, column: 13, scope: !5395)
!5404 = !DILocation(line: 1206, column: 12, scope: !5395)
!5405 = !DILocation(line: 1206, column: 10, scope: !5395)
!5406 = !DILocation(line: 1206, column: 2, scope: !5395)
!5407 = !DILocation(line: 1208, column: 15, scope: !5288)
!5408 = !DILocation(line: 1208, column: 13, scope: !5288)
!5409 = !DILocation(line: 1209, column: 15, scope: !5288)
!5410 = !DILocation(line: 1209, column: 13, scope: !5288)
!5411 = !DILocation(line: 1210, column: 15, scope: !5288)
!5412 = !DILocation(line: 1210, column: 13, scope: !5288)
!5413 = !DILocation(line: 1211, column: 11, scope: !5414)
!5414 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 1211, column: 11)
!5415 = !DILocation(line: 1211, column: 11, scope: !5288)
!5416 = !DILocation(line: 1212, column: 36, scope: !5414)
!5417 = !DILocation(line: 1212, column: 43, scope: !5414)
!5418 = !DILocation(line: 1212, column: 10, scope: !5414)
!5419 = !DILocation(line: 1212, column: 8, scope: !5414)
!5420 = !DILocation(line: 1212, column: 2, scope: !5414)
!5421 = !DILocation(line: 1214, column: 10, scope: !5414)
!5422 = !DILocation(line: 1214, column: 8, scope: !5414)
!5423 = !DILocation(line: 1216, column: 11, scope: !5424)
!5424 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 1216, column: 11)
!5425 = !DILocation(line: 1216, column: 17, scope: !5424)
!5426 = !DILocation(line: 1216, column: 11, scope: !5288)
!5427 = !DILocation(line: 1217, column: 2, scope: !5424)
!5428 = !DILocation(line: 1220, column: 17, scope: !5288)
!5429 = !DILocation(line: 1220, column: 26, scope: !5288)
!5430 = !DILocation(line: 1220, column: 23, scope: !5288)
!5431 = !DILocation(line: 1221, column: 3, scope: !5288)
!5432 = !DILocation(line: 1221, column: 30, scope: !5288)
!5433 = !DILocation(line: 1221, column: 47, scope: !5288)
!5434 = !DILocation(line: 1221, column: 6, scope: !5288)
!5435 = !DILocation(line: 1222, column: 3, scope: !5288)
!5436 = !DILocation(line: 1222, column: 30, scope: !5288)
!5437 = !DILocation(line: 1222, column: 47, scope: !5288)
!5438 = !DILocation(line: 1222, column: 6, scope: !5288)
!5439 = !DILocation(line: 1223, column: 9, scope: !5288)
!5440 = !DILocation(line: 1223, column: 13, scope: !5288)
!5441 = !DILocation(line: 1223, column: 38, scope: !5288)
!5442 = !DILocation(line: 1223, column: 22, scope: !5288)
!5443 = !DILocation(line: 1223, column: 19, scope: !5288)
!5444 = !DILocation(line: 1224, column: 6, scope: !5288)
!5445 = !DILocation(line: 1224, column: 33, scope: !5288)
!5446 = !DILocation(line: 1225, column: 12, scope: !5288)
!5447 = !DILocation(line: 1224, column: 9, scope: !5288)
!5448 = !DILocation(line: 1226, column: 6, scope: !5288)
!5449 = !DILocation(line: 1226, column: 33, scope: !5288)
!5450 = !DILocation(line: 1227, column: 12, scope: !5288)
!5451 = !DILocation(line: 1226, column: 9, scope: !5288)
!5452 = !DILocation(line: 0, scope: !5288)
!5453 = !DILocation(line: 1220, column: 15, scope: !5288)
!5454 = !DILocation(line: 1220, column: 13, scope: !5288)
!5455 = !DILocation(line: 1233, column: 11, scope: !5456)
!5456 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 1233, column: 11)
!5457 = !DILocation(line: 1234, column: 4, scope: !5456)
!5458 = !DILocation(line: 1234, column: 32, scope: !5456)
!5459 = !DILocation(line: 1234, column: 7, scope: !5456)
!5460 = !DILocation(line: 1235, column: 4, scope: !5456)
!5461 = !DILocation(line: 1235, column: 32, scope: !5456)
!5462 = !DILocation(line: 1235, column: 7, scope: !5456)
!5463 = !DILocation(line: 1233, column: 11, scope: !5288)
!5464 = !DILocalVariable(name: "prob2", scope: !5465, file: !3, line: 1237, type: !993)
!5465 = distinct !DILexicalBlock(scope: !5456, file: !3, line: 1236, column: 2)
!5466 = !DILocation(line: 1237, column: 8, scope: !5465)
!5467 = !DILocation(line: 1239, column: 8, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 1239, column: 8)
!5469 = !DILocation(line: 1239, column: 12, scope: !5468)
!5470 = !DILocation(line: 1239, column: 20, scope: !5468)
!5471 = !DILocation(line: 1239, column: 24, scope: !5468)
!5472 = !DILocation(line: 1239, column: 17, scope: !5468)
!5473 = !DILocation(line: 1239, column: 8, scope: !5465)
!5474 = !DILocation(line: 1240, column: 14, scope: !5468)
!5475 = !DILocation(line: 1240, column: 18, scope: !5468)
!5476 = !DILocation(line: 1240, column: 12, scope: !5468)
!5477 = !DILocation(line: 1240, column: 6, scope: !5468)
!5478 = !DILocation(line: 1243, column: 33, scope: !5468)
!5479 = !DILocation(line: 1243, column: 37, scope: !5468)
!5480 = !DILocation(line: 1243, column: 31, scope: !5468)
!5481 = !DILocation(line: 1243, column: 12, scope: !5468)
!5482 = !DILocation(line: 1248, column: 13, scope: !5483)
!5483 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 1248, column: 8)
!5484 = !DILocation(line: 1248, column: 17, scope: !5483)
!5485 = !DILocation(line: 1248, column: 31, scope: !5483)
!5486 = !DILocation(line: 1248, column: 29, scope: !5483)
!5487 = !DILocation(line: 1248, column: 8, scope: !5483)
!5488 = !DILocation(line: 1248, column: 38, scope: !5483)
!5489 = !DILocation(line: 1248, column: 8, scope: !5465)
!5490 = !DILocation(line: 1250, column: 12, scope: !5491)
!5491 = distinct !DILexicalBlock(scope: !5492, file: !3, line: 1250, column: 12)
!5492 = distinct !DILexicalBlock(scope: !5483, file: !3, line: 1249, column: 6)
!5493 = !DILocation(line: 1250, column: 12, scope: !5492)
!5494 = !DILocation(line: 1251, column: 12, scope: !5491)
!5495 = !DILocation(line: 1253, column: 5, scope: !5491)
!5496 = !DILocation(line: 1253, column: 10, scope: !5491)
!5497 = !DILocation(line: 1253, column: 17, scope: !5491)
!5498 = !DILocation(line: 1253, column: 22, scope: !5491)
!5499 = !DILocation(line: 1253, column: 29, scope: !5491)
!5500 = !DILocation(line: 1253, column: 33, scope: !5491)
!5501 = !DILocation(line: 1253, column: 46, scope: !5491)
!5502 = !DILocation(line: 1251, column: 3, scope: !5491)
!5503 = !DILocation(line: 1255, column: 8, scope: !5492)
!5504 = !DILocation(line: 1257, column: 2, scope: !5465)
!5505 = !DILocation(line: 1259, column: 11, scope: !5506)
!5506 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 1259, column: 11)
!5507 = !DILocation(line: 1259, column: 21, scope: !5506)
!5508 = !DILocation(line: 1259, column: 24, scope: !5506)
!5509 = !DILocation(line: 1259, column: 11, scope: !5288)
!5510 = !DILocation(line: 1260, column: 11, scope: !5506)
!5511 = !DILocation(line: 1261, column: 4, scope: !5506)
!5512 = !DILocation(line: 1261, column: 9, scope: !5506)
!5513 = !DILocation(line: 1261, column: 16, scope: !5506)
!5514 = !DILocation(line: 1261, column: 21, scope: !5506)
!5515 = !DILocation(line: 1260, column: 2, scope: !5506)
!5516 = !DILocation(line: 1263, column: 14, scope: !5288)
!5517 = !DILocation(line: 1263, column: 7, scope: !5288)
!5518 = !DILocalVariable(name: "label1", scope: !5519, file: !3, line: 1272, type: !970)
!5519 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1271, column: 5)
!5520 = !DILocation(line: 1272, column: 11, scope: !5519)
!5521 = !DILocalVariable(name: "label2", scope: !5519, file: !3, line: 1272, type: !970)
!5522 = !DILocation(line: 1272, column: 19, scope: !5519)
!5523 = !DILocalVariable(name: "table1", scope: !5519, file: !3, line: 1273, type: !970)
!5524 = !DILocation(line: 1273, column: 11, scope: !5519)
!5525 = !DILocalVariable(name: "table2", scope: !5519, file: !3, line: 1273, type: !970)
!5526 = !DILocation(line: 1273, column: 19, scope: !5519)
!5527 = !DILocation(line: 1275, column: 24, scope: !5528)
!5528 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 1275, column: 11)
!5529 = !DILocation(line: 1275, column: 11, scope: !5528)
!5530 = !DILocation(line: 1276, column: 4, scope: !5528)
!5531 = !DILocation(line: 1276, column: 20, scope: !5528)
!5532 = !DILocation(line: 1276, column: 7, scope: !5528)
!5533 = !DILocation(line: 1277, column: 4, scope: !5528)
!5534 = !DILocation(line: 1277, column: 7, scope: !5528)
!5535 = !DILocation(line: 1277, column: 38, scope: !5528)
!5536 = !DILocation(line: 1277, column: 35, scope: !5528)
!5537 = !DILocation(line: 1275, column: 11, scope: !5519)
!5538 = !DILocation(line: 1286, column: 8, scope: !5539)
!5539 = distinct !DILexicalBlock(scope: !5540, file: !3, line: 1286, column: 8)
!5540 = distinct !DILexicalBlock(scope: !5528, file: !3, line: 1278, column: 2)
!5541 = !DILocation(line: 1286, column: 18, scope: !5539)
!5542 = !DILocation(line: 1286, column: 15, scope: !5539)
!5543 = !DILocation(line: 1286, column: 25, scope: !5539)
!5544 = !DILocation(line: 1286, column: 47, scope: !5539)
!5545 = !DILocation(line: 1286, column: 55, scope: !5539)
!5546 = !DILocation(line: 1286, column: 29, scope: !5539)
!5547 = !DILocation(line: 1286, column: 8, scope: !5540)
!5548 = !DILocalVariable(name: "identical", scope: !5549, file: !3, line: 1289, type: !1225)
!5549 = distinct !DILexicalBlock(scope: !5539, file: !3, line: 1287, column: 6)
!5550 = !DILocation(line: 1289, column: 13, scope: !5549)
!5551 = !DILocalVariable(name: "p1", scope: !5549, file: !3, line: 1290, type: !970)
!5552 = !DILocation(line: 1290, column: 12, scope: !5549)
!5553 = !DILocalVariable(name: "p2", scope: !5549, file: !3, line: 1290, type: !970)
!5554 = !DILocation(line: 1290, column: 16, scope: !5549)
!5555 = !DILocation(line: 1292, column: 13, scope: !5549)
!5556 = !DILocation(line: 1292, column: 11, scope: !5549)
!5557 = !DILocation(line: 1293, column: 13, scope: !5549)
!5558 = !DILocation(line: 1293, column: 11, scope: !5549)
!5559 = !DILocation(line: 1294, column: 12, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !5549, file: !3, line: 1294, column: 12)
!5561 = !DILocation(line: 1294, column: 26, scope: !5560)
!5562 = !DILocation(line: 1294, column: 38, scope: !5560)
!5563 = !DILocation(line: 1294, column: 54, scope: !5560)
!5564 = !DILocation(line: 1294, column: 58, scope: !5560)
!5565 = !DILocation(line: 1294, column: 41, scope: !5560)
!5566 = !DILocation(line: 1294, column: 12, scope: !5549)
!5567 = !DILocation(line: 1296, column: 15, scope: !5568)
!5568 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 1295, column: 3)
!5569 = !DILocation(line: 1297, column: 3, scope: !5568)
!5570 = !DILocation(line: 1298, column: 17, scope: !5571)
!5571 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 1298, column: 17)
!5572 = !DILocation(line: 1298, column: 31, scope: !5571)
!5573 = !DILocation(line: 1299, column: 10, scope: !5571)
!5574 = !DILocation(line: 1299, column: 14, scope: !5571)
!5575 = !DILocation(line: 1299, column: 33, scope: !5571)
!5576 = !DILocation(line: 1299, column: 30, scope: !5571)
!5577 = !DILocation(line: 1300, column: 10, scope: !5571)
!5578 = !DILocation(line: 1300, column: 26, scope: !5571)
!5579 = !DILocation(line: 1300, column: 40, scope: !5571)
!5580 = !DILocation(line: 1300, column: 13, scope: !5571)
!5581 = !DILocation(line: 1301, column: 10, scope: !5571)
!5582 = !DILocation(line: 1301, column: 26, scope: !5571)
!5583 = !DILocation(line: 1301, column: 40, scope: !5571)
!5584 = !DILocation(line: 1301, column: 13, scope: !5571)
!5585 = !DILocation(line: 1298, column: 17, scope: !5560)
!5586 = !DILocalVariable(name: "i", scope: !5587, file: !3, line: 1303, type: !993)
!5587 = distinct !DILexicalBlock(scope: !5571, file: !3, line: 1302, column: 3)
!5588 = !DILocation(line: 1303, column: 9, scope: !5587)
!5589 = !DILocation(line: 1305, column: 15, scope: !5587)
!5590 = !DILocation(line: 1306, column: 14, scope: !5591)
!5591 = distinct !DILexicalBlock(scope: !5587, file: !3, line: 1306, column: 5)
!5592 = !DILocation(line: 1306, column: 30, scope: !5591)
!5593 = !DILocation(line: 1306, column: 12, scope: !5591)
!5594 = !DILocation(line: 1306, column: 10, scope: !5591)
!5595 = !DILocation(line: 1306, column: 35, scope: !5596)
!5596 = distinct !DILexicalBlock(scope: !5591, file: !3, line: 1306, column: 5)
!5597 = !DILocation(line: 1306, column: 37, scope: !5596)
!5598 = !DILocation(line: 1306, column: 42, scope: !5596)
!5599 = !DILocation(line: 1306, column: 45, scope: !5596)
!5600 = !DILocation(line: 0, scope: !5596)
!5601 = !DILocation(line: 1306, column: 5, scope: !5591)
!5602 = !DILocation(line: 1307, column: 25, scope: !5603)
!5603 = distinct !DILexicalBlock(scope: !5596, file: !3, line: 1307, column: 11)
!5604 = !DILocation(line: 1307, column: 45, scope: !5603)
!5605 = !DILocation(line: 1307, column: 12, scope: !5603)
!5606 = !DILocation(line: 1307, column: 11, scope: !5596)
!5607 = !DILocation(line: 1308, column: 19, scope: !5603)
!5608 = !DILocation(line: 1308, column: 9, scope: !5603)
!5609 = !DILocation(line: 1307, column: 63, scope: !5603)
!5610 = !DILocation(line: 1306, column: 57, scope: !5596)
!5611 = !DILocation(line: 1306, column: 5, scope: !5596)
!5612 = distinct !{!5612, !5601, !5613}
!5613 = !DILocation(line: 1308, column: 21, scope: !5591)
!5614 = !DILocation(line: 1309, column: 3, scope: !5587)
!5615 = !DILocation(line: 1311, column: 12, scope: !5616)
!5616 = distinct !DILexicalBlock(scope: !5549, file: !3, line: 1311, column: 12)
!5617 = !DILocation(line: 1311, column: 12, scope: !5549)
!5618 = !DILocalVariable(name: "rr", scope: !5619, file: !3, line: 1313, type: !4883)
!5619 = distinct !DILexicalBlock(scope: !5616, file: !3, line: 1312, column: 3)
!5620 = !DILocation(line: 1313, column: 24, scope: !5619)
!5621 = !DILocalVariable(name: "match", scope: !5619, file: !3, line: 1314, type: !1225)
!5622 = !DILocation(line: 1314, column: 10, scope: !5619)
!5623 = !DILocation(line: 1318, column: 13, scope: !5619)
!5624 = !DILocation(line: 1318, column: 8, scope: !5619)
!5625 = !DILocation(line: 1318, column: 11, scope: !5619)
!5626 = !DILocation(line: 1319, column: 13, scope: !5619)
!5627 = !DILocation(line: 1319, column: 8, scope: !5619)
!5628 = !DILocation(line: 1319, column: 11, scope: !5619)
!5629 = !DILocation(line: 1320, column: 8, scope: !5619)
!5630 = !DILocation(line: 1320, column: 27, scope: !5619)
!5631 = !DILocation(line: 1321, column: 20, scope: !5619)
!5632 = !DILocation(line: 1321, column: 49, scope: !5619)
!5633 = !DILocation(line: 1321, column: 5, scope: !5619)
!5634 = !DILocation(line: 1323, column: 32, scope: !5619)
!5635 = !DILocation(line: 1323, column: 38, scope: !5619)
!5636 = !DILocation(line: 1323, column: 52, scope: !5619)
!5637 = !DILocation(line: 1323, column: 13, scope: !5619)
!5638 = !DILocation(line: 1323, column: 11, scope: !5619)
!5639 = !DILocation(line: 1324, column: 9, scope: !5640)
!5640 = distinct !DILexicalBlock(scope: !5619, file: !3, line: 1324, column: 9)
!5641 = !DILocation(line: 1324, column: 19, scope: !5640)
!5642 = !DILocation(line: 1324, column: 22, scope: !5640)
!5643 = !DILocation(line: 1324, column: 9, scope: !5619)
!5644 = !DILocation(line: 1325, column: 16, scope: !5640)
!5645 = !DILocation(line: 1327, column: 9, scope: !5640)
!5646 = !DILocation(line: 1327, column: 14, scope: !5640)
!5647 = !DILocation(line: 1327, column: 21, scope: !5640)
!5648 = !DILocation(line: 1327, column: 26, scope: !5640)
!5649 = !DILocation(line: 1325, column: 7, scope: !5640)
!5650 = !DILocation(line: 1332, column: 13, scope: !5619)
!5651 = !DILocation(line: 1332, column: 8, scope: !5619)
!5652 = !DILocation(line: 1332, column: 11, scope: !5619)
!5653 = !DILocation(line: 1333, column: 13, scope: !5619)
!5654 = !DILocation(line: 1333, column: 8, scope: !5619)
!5655 = !DILocation(line: 1333, column: 11, scope: !5619)
!5656 = !DILocation(line: 1334, column: 20, scope: !5619)
!5657 = !DILocation(line: 1334, column: 49, scope: !5619)
!5658 = !DILocation(line: 1334, column: 5, scope: !5619)
!5659 = !DILocation(line: 1336, column: 12, scope: !5619)
!5660 = !DILocation(line: 1336, column: 5, scope: !5619)
!5661 = !DILocation(line: 1338, column: 6, scope: !5549)
!5662 = !DILocation(line: 1339, column: 4, scope: !5540)
!5663 = !DILocation(line: 1345, column: 27, scope: !5664)
!5664 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1345, column: 7)
!5665 = !DILocation(line: 1345, column: 33, scope: !5664)
!5666 = !DILocation(line: 1345, column: 47, scope: !5664)
!5667 = !DILocation(line: 1345, column: 8, scope: !5664)
!5668 = !DILocation(line: 1345, column: 7, scope: !5223)
!5669 = !DILocation(line: 1346, column: 5, scope: !5664)
!5670 = !DILocation(line: 1351, column: 7, scope: !5671)
!5671 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1351, column: 7)
!5672 = !DILocation(line: 1351, column: 34, scope: !5671)
!5673 = !DILocation(line: 1351, column: 31, scope: !5671)
!5674 = !DILocation(line: 1351, column: 7, scope: !5223)
!5675 = !DILocation(line: 1352, column: 5, scope: !5671)
!5676 = !DILocation(line: 1354, column: 3, scope: !5677)
!5677 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1354, column: 3)
!5678 = !DILocation(line: 1354, column: 3, scope: !5679)
!5679 = distinct !DILexicalBlock(scope: !5677, file: !3, line: 1354, column: 3)
!5680 = !DILocation(line: 1356, column: 12, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5679, file: !3, line: 1355, column: 5)
!5682 = !DILocation(line: 1356, column: 10, scope: !5681)
!5683 = !DILocation(line: 1358, column: 11, scope: !5684)
!5684 = distinct !DILexicalBlock(scope: !5681, file: !3, line: 1358, column: 11)
!5685 = !DILocation(line: 1358, column: 15, scope: !5684)
!5686 = !DILocation(line: 1358, column: 21, scope: !5684)
!5687 = !DILocation(line: 1358, column: 11, scope: !5681)
!5688 = !DILocation(line: 1359, column: 11, scope: !5684)
!5689 = !DILocation(line: 1359, column: 2, scope: !5684)
!5690 = !DILocation(line: 1361, column: 11, scope: !5691)
!5691 = distinct !DILexicalBlock(scope: !5681, file: !3, line: 1361, column: 11)
!5692 = !DILocation(line: 1361, column: 15, scope: !5691)
!5693 = !DILocation(line: 1361, column: 21, scope: !5691)
!5694 = !DILocation(line: 1361, column: 11, scope: !5681)
!5695 = !DILocation(line: 1362, column: 11, scope: !5691)
!5696 = !DILocation(line: 1362, column: 2, scope: !5691)
!5697 = !DILocation(line: 1364, column: 11, scope: !5698)
!5698 = distinct !DILexicalBlock(scope: !5681, file: !3, line: 1364, column: 11)
!5699 = !DILocation(line: 1364, column: 15, scope: !5698)
!5700 = !DILocation(line: 1364, column: 21, scope: !5698)
!5701 = !DILocation(line: 1364, column: 11, scope: !5681)
!5702 = !DILocation(line: 1365, column: 14, scope: !5698)
!5703 = !DILocation(line: 1365, column: 12, scope: !5698)
!5704 = !DILocation(line: 1365, column: 2, scope: !5698)
!5705 = !DILocation(line: 1366, column: 11, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5681, file: !3, line: 1366, column: 11)
!5707 = !DILocation(line: 1366, column: 15, scope: !5706)
!5708 = !DILocation(line: 1366, column: 21, scope: !5706)
!5709 = !DILocation(line: 1366, column: 11, scope: !5681)
!5710 = !DILocation(line: 1367, column: 14, scope: !5706)
!5711 = !DILocation(line: 1367, column: 12, scope: !5706)
!5712 = !DILocation(line: 1367, column: 2, scope: !5706)
!5713 = !DILocation(line: 1368, column: 5, scope: !5681)
!5714 = distinct !{!5714, !5676, !5715}
!5715 = !DILocation(line: 1368, column: 5, scope: !5677)
!5716 = !DILocation(line: 1371, column: 7, scope: !5717)
!5717 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1371, column: 7)
!5718 = !DILocation(line: 1371, column: 20, scope: !5717)
!5719 = !DILocation(line: 1371, column: 17, scope: !5717)
!5720 = !DILocation(line: 1372, column: 7, scope: !5717)
!5721 = !DILocation(line: 1372, column: 11, scope: !5717)
!5722 = !DILocation(line: 1372, column: 21, scope: !5717)
!5723 = !DILocation(line: 1372, column: 31, scope: !5717)
!5724 = !DILocation(line: 1372, column: 41, scope: !5717)
!5725 = !DILocation(line: 1372, column: 27, scope: !5717)
!5726 = !DILocation(line: 1371, column: 7, scope: !5223)
!5727 = !DILocation(line: 1373, column: 5, scope: !5717)
!5728 = !DILocation(line: 1376, column: 7, scope: !5729)
!5729 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1376, column: 7)
!5730 = !DILocation(line: 1376, column: 7, scope: !5223)
!5731 = !DILocalVariable(name: "d1", scope: !5732, file: !3, line: 1378, type: !1370)
!5732 = distinct !DILexicalBlock(scope: !5729, file: !3, line: 1377, column: 5)
!5733 = !DILocation(line: 1378, column: 19, scope: !5732)
!5734 = !DILocation(line: 1378, column: 44, scope: !5732)
!5735 = !DILocation(line: 1378, column: 55, scope: !5732)
!5736 = !DILocation(line: 1378, column: 25, scope: !5732)
!5737 = !DILocation(line: 1379, column: 19, scope: !5732)
!5738 = !DILocation(line: 1379, column: 30, scope: !5732)
!5739 = !DILocation(line: 1379, column: 6, scope: !5732)
!5740 = !DILocation(line: 1379, column: 37, scope: !5732)
!5741 = !DILocation(line: 1379, column: 48, scope: !5732)
!5742 = !DILocalVariable(name: "d2", scope: !5732, file: !3, line: 1380, type: !1370)
!5743 = !DILocation(line: 1380, column: 19, scope: !5732)
!5744 = !DILocation(line: 1380, column: 44, scope: !5732)
!5745 = !DILocation(line: 1380, column: 55, scope: !5732)
!5746 = !DILocation(line: 1380, column: 25, scope: !5732)
!5747 = !DILocation(line: 1381, column: 19, scope: !5732)
!5748 = !DILocation(line: 1381, column: 30, scope: !5732)
!5749 = !DILocation(line: 1381, column: 6, scope: !5732)
!5750 = !DILocation(line: 1381, column: 37, scope: !5732)
!5751 = !DILocation(line: 1381, column: 48, scope: !5732)
!5752 = !DILocation(line: 1383, column: 11, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5732, file: !3, line: 1383, column: 11)
!5754 = !DILocation(line: 1383, column: 17, scope: !5753)
!5755 = !DILocation(line: 1383, column: 14, scope: !5753)
!5756 = !DILocation(line: 1383, column: 11, scope: !5732)
!5757 = !DILocation(line: 1384, column: 2, scope: !5753)
!5758 = !DILocation(line: 1385, column: 5, scope: !5732)
!5759 = !DILocalVariable(name: "n1", scope: !5760, file: !3, line: 1389, type: !970)
!5760 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1388, column: 3)
!5761 = !DILocation(line: 1389, column: 9, scope: !5760)
!5762 = !DILocation(line: 1389, column: 29, scope: !5760)
!5763 = !DILocation(line: 1389, column: 14, scope: !5760)
!5764 = !DILocalVariable(name: "n2", scope: !5760, file: !3, line: 1390, type: !970)
!5765 = !DILocation(line: 1390, column: 9, scope: !5760)
!5766 = !DILocation(line: 1390, column: 29, scope: !5760)
!5767 = !DILocation(line: 1390, column: 14, scope: !5760)
!5768 = !DILocation(line: 1392, column: 10, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5760, file: !3, line: 1392, column: 9)
!5770 = !DILocation(line: 1392, column: 13, scope: !5769)
!5771 = !DILocation(line: 1392, column: 16, scope: !5769)
!5772 = !DILocation(line: 1392, column: 9, scope: !5760)
!5773 = !DILocation(line: 1393, column: 7, scope: !5769)
!5774 = !DILocation(line: 1395, column: 9, scope: !5775)
!5775 = distinct !DILexicalBlock(scope: !5760, file: !3, line: 1395, column: 9)
!5776 = !DILocation(line: 1395, column: 12, scope: !5775)
!5777 = !DILocation(line: 1395, column: 17, scope: !5775)
!5778 = !DILocation(line: 1395, column: 20, scope: !5775)
!5779 = !DILocation(line: 1395, column: 23, scope: !5775)
!5780 = !DILocation(line: 1395, column: 39, scope: !5775)
!5781 = !DILocation(line: 1395, column: 36, scope: !5775)
!5782 = !DILocation(line: 1395, column: 9, scope: !5760)
!5783 = !DILocation(line: 1396, column: 7, scope: !5775)
!5784 = !DILocation(line: 1401, column: 3, scope: !5785)
!5785 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1401, column: 3)
!5786 = !DILocation(line: 1401, column: 3, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5785, file: !3, line: 1401, column: 3)
!5788 = !DILocalVariable(name: "e2", scope: !5789, file: !3, line: 1403, type: !1387)
!5789 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 1402, column: 5)
!5790 = !DILocation(line: 1403, column: 12, scope: !5789)
!5791 = !DILocalVariable(name: "ei", scope: !5789, file: !3, line: 1404, type: !3035)
!5792 = !DILocation(line: 1404, column: 21, scope: !5789)
!5793 = !DILocalVariable(name: "d1", scope: !5789, file: !3, line: 1405, type: !1370)
!5794 = !DILocation(line: 1405, column: 19, scope: !5789)
!5795 = !DILocation(line: 1405, column: 24, scope: !5789)
!5796 = !DILocation(line: 1405, column: 28, scope: !5789)
!5797 = !DILocation(line: 1407, column: 11, scope: !5798)
!5798 = distinct !DILexicalBlock(scope: !5789, file: !3, line: 1407, column: 11)
!5799 = !DILocation(line: 1407, column: 11, scope: !5789)
!5800 = !DILocation(line: 1408, column: 14, scope: !5798)
!5801 = !DILocation(line: 1408, column: 33, scope: !5798)
!5802 = !DILocation(line: 1408, column: 12, scope: !5798)
!5803 = !DILocation(line: 1408, column: 9, scope: !5798)
!5804 = !DILocation(line: 1410, column: 7, scope: !5805)
!5805 = distinct !DILexicalBlock(scope: !5789, file: !3, line: 1410, column: 7)
!5806 = !DILocation(line: 1410, column: 7, scope: !5807)
!5807 = distinct !DILexicalBlock(scope: !5805, file: !3, line: 1410, column: 7)
!5808 = !DILocalVariable(name: "d2", scope: !5809, file: !3, line: 1412, type: !1370)
!5809 = distinct !DILexicalBlock(scope: !5807, file: !3, line: 1411, column: 9)
!5810 = !DILocation(line: 1412, column: 23, scope: !5809)
!5811 = !DILocation(line: 1412, column: 28, scope: !5809)
!5812 = !DILocation(line: 1412, column: 32, scope: !5809)
!5813 = !DILocation(line: 1413, column: 15, scope: !5814)
!5814 = distinct !DILexicalBlock(scope: !5809, file: !3, line: 1413, column: 15)
!5815 = !DILocation(line: 1413, column: 15, scope: !5809)
!5816 = !DILocation(line: 1414, column: 18, scope: !5814)
!5817 = !DILocation(line: 1414, column: 37, scope: !5814)
!5818 = !DILocation(line: 1414, column: 16, scope: !5814)
!5819 = !DILocation(line: 1414, column: 13, scope: !5814)
!5820 = !DILocation(line: 1415, column: 15, scope: !5821)
!5821 = distinct !DILexicalBlock(scope: !5809, file: !3, line: 1415, column: 15)
!5822 = !DILocation(line: 1415, column: 21, scope: !5821)
!5823 = !DILocation(line: 1415, column: 18, scope: !5821)
!5824 = !DILocation(line: 1415, column: 15, scope: !5809)
!5825 = !DILocation(line: 1416, column: 13, scope: !5821)
!5826 = !DILocation(line: 1417, column: 9, scope: !5809)
!5827 = distinct !{!5827, !5804, !5828}
!5828 = !DILocation(line: 1417, column: 9, scope: !5805)
!5829 = !DILocation(line: 1419, column: 12, scope: !5830)
!5830 = distinct !DILexicalBlock(scope: !5789, file: !3, line: 1419, column: 11)
!5831 = !DILocation(line: 1419, column: 11, scope: !5789)
!5832 = !DILocation(line: 1420, column: 9, scope: !5830)
!5833 = !DILocation(line: 1421, column: 5, scope: !5789)
!5834 = distinct !{!5834, !5784, !5835}
!5835 = !DILocation(line: 1421, column: 5, scope: !5785)
!5836 = !DILocation(line: 1423, column: 3, scope: !5223)
!5837 = !DILocation(line: 1424, column: 1, scope: !5223)
!5838 = distinct !DISubprogram(name: "flow_find_cross_jump", scope: !3, file: !3, line: 1028, type: !5839, scopeLine: 1030, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!5839 = !DISubroutineType(types: !5840)
!5840 = !{!993, !993, !1370, !1370, !4476, !4476}
!5841 = !DILocalVariable(name: "mode", arg: 1, scope: !5838, file: !3, line: 1028, type: !993)
!5842 = !DILocation(line: 1028, column: 27, scope: !5838)
!5843 = !DILocalVariable(name: "bb1", arg: 2, scope: !5838, file: !3, line: 1028, type: !1370)
!5844 = !DILocation(line: 1028, column: 62, scope: !5838)
!5845 = !DILocalVariable(name: "bb2", arg: 3, scope: !5838, file: !3, line: 1029, type: !1370)
!5846 = !DILocation(line: 1029, column: 21, scope: !5838)
!5847 = !DILocalVariable(name: "f1", arg: 4, scope: !5838, file: !3, line: 1029, type: !4476)
!5848 = !DILocation(line: 1029, column: 31, scope: !5838)
!5849 = !DILocalVariable(name: "f2", arg: 5, scope: !5838, file: !3, line: 1029, type: !4476)
!5850 = !DILocation(line: 1029, column: 40, scope: !5838)
!5851 = !DILocalVariable(name: "i1", scope: !5838, file: !3, line: 1031, type: !970)
!5852 = !DILocation(line: 1031, column: 7, scope: !5838)
!5853 = !DILocalVariable(name: "i2", scope: !5838, file: !3, line: 1031, type: !970)
!5854 = !DILocation(line: 1031, column: 11, scope: !5838)
!5855 = !DILocalVariable(name: "last1", scope: !5838, file: !3, line: 1031, type: !970)
!5856 = !DILocation(line: 1031, column: 15, scope: !5838)
!5857 = !DILocalVariable(name: "last2", scope: !5838, file: !3, line: 1031, type: !970)
!5858 = !DILocation(line: 1031, column: 22, scope: !5838)
!5859 = !DILocalVariable(name: "afterlast1", scope: !5838, file: !3, line: 1031, type: !970)
!5860 = !DILocation(line: 1031, column: 29, scope: !5838)
!5861 = !DILocalVariable(name: "afterlast2", scope: !5838, file: !3, line: 1031, type: !970)
!5862 = !DILocation(line: 1031, column: 41, scope: !5838)
!5863 = !DILocalVariable(name: "ninsns", scope: !5838, file: !3, line: 1032, type: !993)
!5864 = !DILocation(line: 1032, column: 7, scope: !5838)
!5865 = !DILocation(line: 1037, column: 8, scope: !5838)
!5866 = !DILocation(line: 1037, column: 6, scope: !5838)
!5867 = !DILocation(line: 1038, column: 43, scope: !5838)
!5868 = !DILocation(line: 1038, column: 30, scope: !5838)
!5869 = !DILocation(line: 1038, column: 22, scope: !5838)
!5870 = !DILocation(line: 1038, column: 9, scope: !5838)
!5871 = !DILocation(line: 1039, column: 19, scope: !5872)
!5872 = distinct !DILexicalBlock(scope: !5838, file: !3, line: 1039, column: 7)
!5873 = !DILocation(line: 1039, column: 7, scope: !5872)
!5874 = !DILocation(line: 1040, column: 7, scope: !5872)
!5875 = !DILocation(line: 1040, column: 25, scope: !5872)
!5876 = !DILocation(line: 1040, column: 11, scope: !5872)
!5877 = !DILocation(line: 1040, column: 29, scope: !5872)
!5878 = !DILocation(line: 1040, column: 49, scope: !5872)
!5879 = !DILocation(line: 1040, column: 33, scope: !5872)
!5880 = !DILocation(line: 1039, column: 7, scope: !5838)
!5881 = !DILocation(line: 1042, column: 15, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5872, file: !3, line: 1041, column: 5)
!5883 = !DILocation(line: 1042, column: 13, scope: !5882)
!5884 = !DILocation(line: 1043, column: 12, scope: !5882)
!5885 = !DILocation(line: 1043, column: 10, scope: !5882)
!5886 = !DILocation(line: 1044, column: 5, scope: !5882)
!5887 = !DILocation(line: 1046, column: 8, scope: !5838)
!5888 = !DILocation(line: 1046, column: 6, scope: !5838)
!5889 = !DILocation(line: 1047, column: 19, scope: !5890)
!5890 = distinct !DILexicalBlock(scope: !5838, file: !3, line: 1047, column: 7)
!5891 = !DILocation(line: 1047, column: 7, scope: !5890)
!5892 = !DILocation(line: 1048, column: 7, scope: !5890)
!5893 = !DILocation(line: 1048, column: 25, scope: !5890)
!5894 = !DILocation(line: 1048, column: 11, scope: !5890)
!5895 = !DILocation(line: 1048, column: 29, scope: !5890)
!5896 = !DILocation(line: 1048, column: 49, scope: !5890)
!5897 = !DILocation(line: 1048, column: 33, scope: !5890)
!5898 = !DILocation(line: 1047, column: 7, scope: !5838)
!5899 = !DILocation(line: 1050, column: 15, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5890, file: !3, line: 1049, column: 5)
!5901 = !DILocation(line: 1050, column: 13, scope: !5900)
!5902 = !DILocation(line: 1052, column: 26, scope: !5903)
!5903 = distinct !DILexicalBlock(scope: !5900, file: !3, line: 1052, column: 11)
!5904 = !DILocation(line: 1052, column: 12, scope: !5903)
!5905 = !DILocation(line: 1052, column: 30, scope: !5903)
!5906 = !DILocation(line: 1052, column: 48, scope: !5903)
!5907 = !DILocation(line: 1052, column: 34, scope: !5903)
!5908 = !DILocation(line: 1052, column: 52, scope: !5903)
!5909 = !DILocation(line: 1052, column: 55, scope: !5903)
!5910 = !DILocation(line: 1052, column: 11, scope: !5900)
!5911 = !DILocation(line: 1053, column: 8, scope: !5903)
!5912 = !DILocation(line: 1053, column: 2, scope: !5903)
!5913 = !DILocation(line: 1054, column: 12, scope: !5900)
!5914 = !DILocation(line: 1054, column: 10, scope: !5900)
!5915 = !DILocation(line: 1055, column: 5, scope: !5900)
!5916 = !DILocation(line: 1057, column: 3, scope: !5838)
!5917 = !DILocation(line: 1060, column: 7, scope: !5918)
!5918 = distinct !DILexicalBlock(scope: !5838, file: !3, line: 1058, column: 5)
!5919 = !DILocation(line: 1060, column: 15, scope: !5918)
!5920 = !DILocation(line: 1060, column: 36, scope: !5918)
!5921 = !DILocation(line: 1060, column: 39, scope: !5918)
!5922 = !DILocation(line: 1060, column: 45, scope: !5918)
!5923 = !DILocation(line: 1060, column: 42, scope: !5918)
!5924 = !DILocation(line: 0, scope: !5918)
!5925 = !DILocation(line: 1061, column: 7, scope: !5918)
!5926 = !DILocation(line: 1061, column: 5, scope: !5918)
!5927 = distinct !{!5927, !5917, !5925}
!5928 = !DILocation(line: 1063, column: 7, scope: !5918)
!5929 = !DILocation(line: 1063, column: 15, scope: !5918)
!5930 = !DILocation(line: 1063, column: 36, scope: !5918)
!5931 = !DILocation(line: 1063, column: 39, scope: !5918)
!5932 = !DILocation(line: 1063, column: 45, scope: !5918)
!5933 = !DILocation(line: 1063, column: 42, scope: !5918)
!5934 = !DILocation(line: 1064, column: 7, scope: !5918)
!5935 = !DILocation(line: 1064, column: 5, scope: !5918)
!5936 = distinct !{!5936, !5928, !5934}
!5937 = !DILocation(line: 1066, column: 11, scope: !5938)
!5938 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 1066, column: 11)
!5939 = !DILocation(line: 1066, column: 17, scope: !5938)
!5940 = !DILocation(line: 1066, column: 14, scope: !5938)
!5941 = !DILocation(line: 1066, column: 31, scope: !5938)
!5942 = !DILocation(line: 1066, column: 34, scope: !5938)
!5943 = !DILocation(line: 1066, column: 40, scope: !5938)
!5944 = !DILocation(line: 1066, column: 37, scope: !5938)
!5945 = !DILocation(line: 1066, column: 11, scope: !5918)
!5946 = !DILocation(line: 1067, column: 2, scope: !5938)
!5947 = !DILocation(line: 1069, column: 31, scope: !5948)
!5948 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 1069, column: 11)
!5949 = !DILocation(line: 1069, column: 37, scope: !5948)
!5950 = !DILocation(line: 1069, column: 41, scope: !5948)
!5951 = !DILocation(line: 1069, column: 12, scope: !5948)
!5952 = !DILocation(line: 1069, column: 11, scope: !5918)
!5953 = !DILocation(line: 1070, column: 2, scope: !5948)
!5954 = !DILocation(line: 1072, column: 23, scope: !5918)
!5955 = !DILocation(line: 1072, column: 27, scope: !5918)
!5956 = !DILocation(line: 1072, column: 7, scope: !5918)
!5957 = !DILocation(line: 1075, column: 11, scope: !5958)
!5958 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 1075, column: 11)
!5959 = !DILocation(line: 1075, column: 11, scope: !5918)
!5960 = !DILocalVariable(name: "equiv1", scope: !5961, file: !3, line: 1079, type: !970)
!5961 = distinct !DILexicalBlock(scope: !5958, file: !3, line: 1076, column: 2)
!5962 = !DILocation(line: 1079, column: 8, scope: !5961)
!5963 = !DILocation(line: 1079, column: 44, scope: !5961)
!5964 = !DILocation(line: 1079, column: 17, scope: !5961)
!5965 = !DILocalVariable(name: "equiv2", scope: !5961, file: !3, line: 1080, type: !970)
!5966 = !DILocation(line: 1080, column: 8, scope: !5961)
!5967 = !DILocation(line: 1080, column: 44, scope: !5961)
!5968 = !DILocation(line: 1080, column: 17, scope: !5961)
!5969 = !DILocation(line: 1082, column: 8, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5961, file: !3, line: 1082, column: 8)
!5971 = !DILocation(line: 1082, column: 15, scope: !5970)
!5972 = !DILocation(line: 1082, column: 19, scope: !5970)
!5973 = !DILocation(line: 1082, column: 8, scope: !5961)
!5974 = !DILocation(line: 1083, column: 19, scope: !5970)
!5975 = !DILocation(line: 1083, column: 23, scope: !5970)
!5976 = !DILocation(line: 1083, column: 6, scope: !5970)
!5977 = !DILocation(line: 1084, column: 14, scope: !5978)
!5978 = distinct !DILexicalBlock(scope: !5970, file: !3, line: 1084, column: 13)
!5979 = !DILocation(line: 1084, column: 21, scope: !5978)
!5980 = !DILocation(line: 1084, column: 24, scope: !5978)
!5981 = !DILocation(line: 1084, column: 13, scope: !5970)
!5982 = !DILocation(line: 1085, column: 19, scope: !5978)
!5983 = !DILocation(line: 1085, column: 23, scope: !5978)
!5984 = !DILocation(line: 1085, column: 6, scope: !5978)
!5985 = !DILocation(line: 1086, column: 13, scope: !5986)
!5986 = distinct !DILexicalBlock(scope: !5978, file: !3, line: 1086, column: 13)
!5987 = !DILocation(line: 1086, column: 20, scope: !5986)
!5988 = !DILocation(line: 1086, column: 23, scope: !5986)
!5989 = !DILocation(line: 1087, column: 6, scope: !5986)
!5990 = !DILocation(line: 1087, column: 23, scope: !5986)
!5991 = !DILocation(line: 1087, column: 41, scope: !5986)
!5992 = !DILocation(line: 1087, column: 10, scope: !5986)
!5993 = !DILocation(line: 1086, column: 13, scope: !5978)
!5994 = !DILocation(line: 1089, column: 21, scope: !5995)
!5995 = distinct !DILexicalBlock(scope: !5986, file: !3, line: 1088, column: 6)
!5996 = !DILocation(line: 1089, column: 25, scope: !5995)
!5997 = !DILocation(line: 1089, column: 8, scope: !5995)
!5998 = !DILocation(line: 1090, column: 21, scope: !5995)
!5999 = !DILocation(line: 1090, column: 25, scope: !5995)
!6000 = !DILocation(line: 1090, column: 8, scope: !5995)
!6001 = !DILocation(line: 1091, column: 6, scope: !5995)
!6002 = !DILocation(line: 1093, column: 17, scope: !5961)
!6003 = !DILocation(line: 1093, column: 15, scope: !5961)
!6004 = !DILocation(line: 1093, column: 37, scope: !5961)
!6005 = !DILocation(line: 1093, column: 35, scope: !5961)
!6006 = !DILocation(line: 1094, column: 12, scope: !5961)
!6007 = !DILocation(line: 1094, column: 10, scope: !5961)
!6008 = !DILocation(line: 1094, column: 24, scope: !5961)
!6009 = !DILocation(line: 1094, column: 22, scope: !5961)
!6010 = !DILocation(line: 1095, column: 10, scope: !5961)
!6011 = !DILocation(line: 1096, column: 2, scope: !5961)
!6012 = !DILocation(line: 1098, column: 12, scope: !5918)
!6013 = !DILocation(line: 1098, column: 10, scope: !5918)
!6014 = !DILocation(line: 1099, column: 12, scope: !5918)
!6015 = !DILocation(line: 1099, column: 10, scope: !5918)
!6016 = distinct !{!6016, !5916, !6017}
!6017 = !DILocation(line: 1100, column: 5, scope: !5838)
!6018 = !DILocation(line: 1112, column: 7, scope: !6019)
!6019 = distinct !DILexicalBlock(scope: !5838, file: !3, line: 1112, column: 7)
!6020 = !DILocation(line: 1112, column: 7, scope: !5838)
!6021 = !DILocation(line: 1114, column: 7, scope: !6022)
!6022 = distinct !DILexicalBlock(scope: !6019, file: !3, line: 1113, column: 5)
!6023 = !DILocation(line: 1114, column: 14, scope: !6022)
!6024 = !DILocation(line: 1114, column: 23, scope: !6022)
!6025 = !DILocation(line: 1114, column: 20, scope: !6022)
!6026 = !DILocation(line: 1114, column: 37, scope: !6022)
!6027 = !DILocation(line: 1114, column: 41, scope: !6022)
!6028 = !DILocation(line: 0, scope: !6022)
!6029 = !DILocation(line: 1114, column: 40, scope: !6022)
!6030 = !DILocation(line: 1115, column: 10, scope: !6022)
!6031 = !DILocation(line: 1115, column: 8, scope: !6022)
!6032 = distinct !{!6032, !6021, !6030}
!6033 = !DILocation(line: 1117, column: 11, scope: !6034)
!6034 = distinct !DILexicalBlock(scope: !6022, file: !3, line: 1117, column: 11)
!6035 = !DILocation(line: 1117, column: 20, scope: !6034)
!6036 = !DILocation(line: 1117, column: 17, scope: !6034)
!6037 = !DILocation(line: 1117, column: 34, scope: !6034)
!6038 = !DILocation(line: 1117, column: 37, scope: !6034)
!6039 = !DILocation(line: 1117, column: 11, scope: !6022)
!6040 = !DILocation(line: 1118, column: 10, scope: !6034)
!6041 = !DILocation(line: 1118, column: 8, scope: !6034)
!6042 = !DILocation(line: 1118, column: 2, scope: !6034)
!6043 = !DILocation(line: 1120, column: 7, scope: !6022)
!6044 = !DILocation(line: 1120, column: 14, scope: !6022)
!6045 = !DILocation(line: 1120, column: 23, scope: !6022)
!6046 = !DILocation(line: 1120, column: 20, scope: !6022)
!6047 = !DILocation(line: 1120, column: 37, scope: !6022)
!6048 = !DILocation(line: 1120, column: 41, scope: !6022)
!6049 = !DILocation(line: 1120, column: 40, scope: !6022)
!6050 = !DILocation(line: 1121, column: 10, scope: !6022)
!6051 = !DILocation(line: 1121, column: 8, scope: !6022)
!6052 = distinct !{!6052, !6043, !6050}
!6053 = !DILocation(line: 1123, column: 11, scope: !6054)
!6054 = distinct !DILexicalBlock(scope: !6022, file: !3, line: 1123, column: 11)
!6055 = !DILocation(line: 1123, column: 20, scope: !6054)
!6056 = !DILocation(line: 1123, column: 17, scope: !6054)
!6057 = !DILocation(line: 1123, column: 34, scope: !6054)
!6058 = !DILocation(line: 1123, column: 37, scope: !6054)
!6059 = !DILocation(line: 1123, column: 11, scope: !6022)
!6060 = !DILocation(line: 1124, column: 10, scope: !6054)
!6061 = !DILocation(line: 1124, column: 8, scope: !6054)
!6062 = !DILocation(line: 1124, column: 2, scope: !6054)
!6063 = !DILocation(line: 1126, column: 13, scope: !6022)
!6064 = !DILocation(line: 1126, column: 8, scope: !6022)
!6065 = !DILocation(line: 1126, column: 11, scope: !6022)
!6066 = !DILocation(line: 1127, column: 13, scope: !6022)
!6067 = !DILocation(line: 1127, column: 8, scope: !6022)
!6068 = !DILocation(line: 1127, column: 11, scope: !6022)
!6069 = !DILocation(line: 1128, column: 5, scope: !6022)
!6070 = !DILocation(line: 1130, column: 10, scope: !5838)
!6071 = !DILocation(line: 1130, column: 3, scope: !5838)
!6072 = distinct !DISubprogram(name: "block_has_preserve_label", scope: !3, file: !3, line: 1429, type: !2897, scopeLine: 1430, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!6073 = !DILocalVariable(name: "bb", arg: 1, scope: !6072, file: !3, line: 1429, type: !1370)
!6074 = !DILocation(line: 1429, column: 39, scope: !6072)
!6075 = !DILocation(line: 1431, column: 11, scope: !6072)
!6076 = !DILocation(line: 1432, column: 11, scope: !6072)
!6077 = !DILocation(line: 1432, column: 27, scope: !6072)
!6078 = !DILocation(line: 1432, column: 14, scope: !6072)
!6079 = !DILocation(line: 1433, column: 11, scope: !6072)
!6080 = !DILocation(line: 1433, column: 14, scope: !6072)
!6081 = !DILocation(line: 0, scope: !6072)
!6082 = !DILocation(line: 1431, column: 10, scope: !6072)
!6083 = !DILocation(line: 1431, column: 3, scope: !6072)
!6084 = distinct !DISubprogram(name: "old_insns_match_p", scope: !3, file: !3, line: 948, type: !6085, scopeLine: 949, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!6085 = !DISubroutineType(types: !6086)
!6086 = !{!1225, !993, !970, !970}
!6087 = !DILocalVariable(name: "mode", arg: 1, scope: !6084, file: !3, line: 948, type: !993)
!6088 = !DILocation(line: 948, column: 24, scope: !6084)
!6089 = !DILocalVariable(name: "i1", arg: 2, scope: !6084, file: !3, line: 948, type: !970)
!6090 = !DILocation(line: 948, column: 51, scope: !6084)
!6091 = !DILocalVariable(name: "i2", arg: 3, scope: !6084, file: !3, line: 948, type: !970)
!6092 = !DILocation(line: 948, column: 59, scope: !6084)
!6093 = !DILocalVariable(name: "p1", scope: !6084, file: !3, line: 950, type: !970)
!6094 = !DILocation(line: 950, column: 7, scope: !6084)
!6095 = !DILocalVariable(name: "p2", scope: !6084, file: !3, line: 950, type: !970)
!6096 = !DILocation(line: 950, column: 11, scope: !6084)
!6097 = !DILocation(line: 953, column: 7, scope: !6098)
!6098 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 953, column: 7)
!6099 = !DILocation(line: 953, column: 24, scope: !6098)
!6100 = !DILocation(line: 953, column: 21, scope: !6098)
!6101 = !DILocation(line: 953, column: 7, scope: !6084)
!6102 = !DILocation(line: 954, column: 5, scope: !6098)
!6103 = !DILocation(line: 958, column: 7, scope: !6104)
!6104 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 958, column: 7)
!6105 = !DILocation(line: 958, column: 36, scope: !6104)
!6106 = !DILocation(line: 958, column: 39, scope: !6104)
!6107 = !DILocation(line: 958, column: 7, scope: !6084)
!6108 = !DILocation(line: 959, column: 5, scope: !6104)
!6109 = !DILocation(line: 961, column: 8, scope: !6084)
!6110 = !DILocation(line: 961, column: 6, scope: !6084)
!6111 = !DILocation(line: 962, column: 8, scope: !6084)
!6112 = !DILocation(line: 962, column: 6, scope: !6084)
!6113 = !DILocation(line: 964, column: 7, scope: !6114)
!6114 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 964, column: 7)
!6115 = !DILocation(line: 964, column: 24, scope: !6114)
!6116 = !DILocation(line: 964, column: 21, scope: !6114)
!6117 = !DILocation(line: 964, column: 7, scope: !6084)
!6118 = !DILocation(line: 965, column: 5, scope: !6114)
!6119 = !DILocation(line: 977, column: 7, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 977, column: 7)
!6121 = !DILocation(line: 978, column: 7, scope: !6120)
!6122 = !DILocation(line: 978, column: 25, scope: !6120)
!6123 = !DILocation(line: 979, column: 4, scope: !6120)
!6124 = !DILocation(line: 978, column: 12, scope: !6120)
!6125 = !DILocation(line: 980, column: 4, scope: !6120)
!6126 = !DILocation(line: 980, column: 7, scope: !6120)
!6127 = !DILocation(line: 980, column: 30, scope: !6120)
!6128 = !DILocation(line: 980, column: 27, scope: !6120)
!6129 = !DILocation(line: 977, column: 7, scope: !6084)
!6130 = !DILocation(line: 981, column: 5, scope: !6120)
!6131 = !DILocation(line: 988, column: 8, scope: !6132)
!6132 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 988, column: 7)
!6133 = !DILocation(line: 988, column: 13, scope: !6132)
!6134 = !DILocation(line: 988, column: 38, scope: !6132)
!6135 = !DILocation(line: 988, column: 63, scope: !6132)
!6136 = !DILocation(line: 988, column: 41, scope: !6132)
!6137 = !DILocation(line: 988, column: 7, scope: !6084)
!6138 = !DILocalVariable(name: "note", scope: !6139, file: !3, line: 994, type: !970)
!6139 = distinct !DILexicalBlock(scope: !6132, file: !3, line: 989, column: 5)
!6140 = !DILocation(line: 994, column: 11, scope: !6139)
!6141 = !DILocalVariable(name: "i1_regset", scope: !6139, file: !3, line: 995, type: !2128)
!6142 = !DILocation(line: 995, column: 20, scope: !6139)
!6143 = !DILocalVariable(name: "i2_regset", scope: !6139, file: !3, line: 995, type: !2128)
!6144 = !DILocation(line: 995, column: 31, scope: !6139)
!6145 = !DILocation(line: 997, column: 7, scope: !6139)
!6146 = !DILocation(line: 998, column: 7, scope: !6139)
!6147 = !DILocation(line: 1000, column: 19, scope: !6148)
!6148 = distinct !DILexicalBlock(scope: !6139, file: !3, line: 1000, column: 7)
!6149 = !DILocation(line: 1000, column: 17, scope: !6148)
!6150 = !DILocation(line: 1000, column: 12, scope: !6148)
!6151 = !DILocation(line: 1000, column: 35, scope: !6152)
!6152 = distinct !DILexicalBlock(scope: !6148, file: !3, line: 1000, column: 7)
!6153 = !DILocation(line: 1000, column: 7, scope: !6148)
!6154 = !DILocation(line: 1001, column: 6, scope: !6155)
!6155 = distinct !DILexicalBlock(scope: !6152, file: !3, line: 1001, column: 6)
!6156 = !DILocation(line: 1001, column: 27, scope: !6155)
!6157 = !DILocation(line: 1001, column: 39, scope: !6155)
!6158 = !DILocation(line: 1001, column: 42, scope: !6155)
!6159 = !DILocation(line: 1001, column: 6, scope: !6152)
!6160 = !DILocation(line: 1002, column: 4, scope: !6155)
!6161 = !DILocation(line: 1000, column: 48, scope: !6152)
!6162 = !DILocation(line: 1000, column: 46, scope: !6152)
!6163 = !DILocation(line: 1000, column: 7, scope: !6152)
!6164 = distinct !{!6164, !6153, !6165}
!6165 = !DILocation(line: 1002, column: 4, scope: !6148)
!6166 = !DILocation(line: 1004, column: 19, scope: !6167)
!6167 = distinct !DILexicalBlock(scope: !6139, file: !3, line: 1004, column: 7)
!6168 = !DILocation(line: 1004, column: 17, scope: !6167)
!6169 = !DILocation(line: 1004, column: 12, scope: !6167)
!6170 = !DILocation(line: 1004, column: 35, scope: !6171)
!6171 = distinct !DILexicalBlock(scope: !6167, file: !3, line: 1004, column: 7)
!6172 = !DILocation(line: 1004, column: 7, scope: !6167)
!6173 = !DILocation(line: 1005, column: 6, scope: !6174)
!6174 = distinct !DILexicalBlock(scope: !6171, file: !3, line: 1005, column: 6)
!6175 = !DILocation(line: 1005, column: 27, scope: !6174)
!6176 = !DILocation(line: 1005, column: 39, scope: !6174)
!6177 = !DILocation(line: 1005, column: 42, scope: !6174)
!6178 = !DILocation(line: 1005, column: 6, scope: !6171)
!6179 = !DILocation(line: 1006, column: 4, scope: !6174)
!6180 = !DILocation(line: 1004, column: 48, scope: !6171)
!6181 = !DILocation(line: 1004, column: 46, scope: !6171)
!6182 = !DILocation(line: 1004, column: 7, scope: !6171)
!6183 = distinct !{!6183, !6172, !6184}
!6184 = !DILocation(line: 1006, column: 4, scope: !6167)
!6185 = !DILocation(line: 1008, column: 34, scope: !6186)
!6186 = distinct !DILexicalBlock(scope: !6139, file: !3, line: 1008, column: 11)
!6187 = !DILocation(line: 1008, column: 45, scope: !6186)
!6188 = !DILocation(line: 1008, column: 12, scope: !6186)
!6189 = !DILocation(line: 1008, column: 11, scope: !6139)
!6190 = !DILocation(line: 1009, column: 2, scope: !6186)
!6191 = !DILocation(line: 1010, column: 5, scope: !6139)
!6192 = !DILocation(line: 1013, column: 7, scope: !6193)
!6193 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 1013, column: 7)
!6194 = !DILocation(line: 1013, column: 7, scope: !6084)
!6195 = !DILocation(line: 1014, column: 33, scope: !6193)
!6196 = !DILocation(line: 1014, column: 37, scope: !6193)
!6197 = !DILocation(line: 1014, column: 9, scope: !6193)
!6198 = !DILocation(line: 1014, column: 56, scope: !6193)
!6199 = !DILocation(line: 1014, column: 60, scope: !6193)
!6200 = !DILocation(line: 1014, column: 43, scope: !6193)
!6201 = !DILocation(line: 1015, column: 5, scope: !6193)
!6202 = !DILocation(line: 1017, column: 3, scope: !6084)
!6203 = !DILocation(line: 1018, column: 1, scope: !6084)
!6204 = distinct !DISubprogram(name: "hard_reg_set_equal_p", scope: !2129, file: !2129, line: 121, type: !6205, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!6205 = !DISubroutineType(types: !6206)
!6206 = !{!1225, !6207, !6207}
!6207 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2128)
!6208 = !DILocalVariable(name: "x", arg: 1, scope: !6204, file: !2129, line: 121, type: !6207)
!6209 = !DILocation(line: 121, column: 42, scope: !6204)
!6210 = !DILocalVariable(name: "y", arg: 2, scope: !6204, file: !2129, line: 121, type: !6207)
!6211 = !DILocation(line: 121, column: 64, scope: !6204)
!6212 = !DILocation(line: 123, column: 10, scope: !6204)
!6213 = !DILocation(line: 123, column: 15, scope: !6204)
!6214 = !DILocation(line: 123, column: 12, scope: !6204)
!6215 = !DILocation(line: 123, column: 3, scope: !6204)
!6216 = distinct !DISubprogram(name: "merge_memattrs", scope: !3, file: !3, line: 858, type: !6217, scopeLine: 859, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2169)
!6217 = !DISubroutineType(types: !6218)
!6218 = !{null, !970, !970}
!6219 = !DILocalVariable(name: "x", arg: 1, scope: !6216, file: !3, line: 858, type: !970)
!6220 = !DILocation(line: 858, column: 21, scope: !6216)
!6221 = !DILocalVariable(name: "y", arg: 2, scope: !6216, file: !3, line: 858, type: !970)
!6222 = !DILocation(line: 858, column: 28, scope: !6216)
!6223 = !DILocalVariable(name: "i", scope: !6216, file: !3, line: 860, type: !993)
!6224 = !DILocation(line: 860, column: 7, scope: !6216)
!6225 = !DILocalVariable(name: "j", scope: !6216, file: !3, line: 861, type: !993)
!6226 = !DILocation(line: 861, column: 7, scope: !6216)
!6227 = !DILocalVariable(name: "code", scope: !6216, file: !3, line: 862, type: !414)
!6228 = !DILocation(line: 862, column: 17, scope: !6216)
!6229 = !DILocalVariable(name: "fmt", scope: !6216, file: !3, line: 863, type: !996)
!6230 = !DILocation(line: 863, column: 15, scope: !6216)
!6231 = !DILocation(line: 865, column: 7, scope: !6232)
!6232 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 865, column: 7)
!6233 = !DILocation(line: 865, column: 12, scope: !6232)
!6234 = !DILocation(line: 865, column: 9, scope: !6232)
!6235 = !DILocation(line: 865, column: 7, scope: !6216)
!6236 = !DILocation(line: 866, column: 5, scope: !6232)
!6237 = !DILocation(line: 867, column: 7, scope: !6238)
!6238 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 867, column: 7)
!6239 = !DILocation(line: 867, column: 9, scope: !6238)
!6240 = !DILocation(line: 867, column: 14, scope: !6238)
!6241 = !DILocation(line: 867, column: 17, scope: !6238)
!6242 = !DILocation(line: 867, column: 19, scope: !6238)
!6243 = !DILocation(line: 867, column: 7, scope: !6216)
!6244 = !DILocation(line: 868, column: 5, scope: !6238)
!6245 = !DILocation(line: 870, column: 10, scope: !6216)
!6246 = !DILocation(line: 870, column: 8, scope: !6216)
!6247 = !DILocation(line: 872, column: 7, scope: !6248)
!6248 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 872, column: 7)
!6249 = !DILocation(line: 872, column: 15, scope: !6248)
!6250 = !DILocation(line: 872, column: 12, scope: !6248)
!6251 = !DILocation(line: 872, column: 7, scope: !6216)
!6252 = !DILocation(line: 873, column: 5, scope: !6248)
!6253 = !DILocation(line: 875, column: 7, scope: !6254)
!6254 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 875, column: 7)
!6255 = !DILocation(line: 875, column: 23, scope: !6254)
!6256 = !DILocation(line: 875, column: 20, scope: !6254)
!6257 = !DILocation(line: 875, column: 7, scope: !6216)
!6258 = !DILocation(line: 876, column: 5, scope: !6254)
!6259 = !DILocation(line: 878, column: 7, scope: !6260)
!6260 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 878, column: 7)
!6261 = !DILocation(line: 878, column: 12, scope: !6260)
!6262 = !DILocation(line: 878, column: 19, scope: !6260)
!6263 = !DILocation(line: 878, column: 22, scope: !6260)
!6264 = !DILocation(line: 878, column: 39, scope: !6260)
!6265 = !DILocation(line: 878, column: 36, scope: !6260)
!6266 = !DILocation(line: 878, column: 7, scope: !6216)
!6267 = !DILocation(line: 880, column: 13, scope: !6268)
!6268 = distinct !DILexicalBlock(scope: !6269, file: !3, line: 880, column: 11)
!6269 = distinct !DILexicalBlock(scope: !6260, file: !3, line: 879, column: 5)
!6270 = !DILocation(line: 880, column: 11, scope: !6269)
!6271 = !DILocation(line: 881, column: 2, scope: !6268)
!6272 = !DILocation(line: 881, column: 16, scope: !6268)
!6273 = !DILocation(line: 882, column: 18, scope: !6274)
!6274 = distinct !DILexicalBlock(scope: !6268, file: !3, line: 882, column: 16)
!6275 = !DILocation(line: 882, column: 16, scope: !6268)
!6276 = !DILocation(line: 883, column: 2, scope: !6274)
!6277 = !DILocation(line: 883, column: 16, scope: !6274)
!6278 = !DILocalVariable(name: "mem_size", scope: !6279, file: !3, line: 886, type: !970)
!6279 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 885, column: 2)
!6280 = !DILocation(line: 886, column: 8, scope: !6279)
!6281 = !DILocation(line: 888, column: 8, scope: !6282)
!6282 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 888, column: 8)
!6283 = !DILocation(line: 888, column: 29, scope: !6282)
!6284 = !DILocation(line: 888, column: 26, scope: !6282)
!6285 = !DILocation(line: 888, column: 8, scope: !6279)
!6286 = !DILocation(line: 890, column: 27, scope: !6287)
!6287 = distinct !DILexicalBlock(scope: !6282, file: !3, line: 889, column: 6)
!6288 = !DILocation(line: 890, column: 8, scope: !6287)
!6289 = !DILocation(line: 891, column: 27, scope: !6287)
!6290 = !DILocation(line: 891, column: 8, scope: !6287)
!6291 = !DILocation(line: 892, column: 6, scope: !6287)
!6292 = !DILocation(line: 894, column: 28, scope: !6293)
!6293 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 894, column: 8)
!6294 = !DILocation(line: 894, column: 42, scope: !6293)
!6295 = !DILocation(line: 894, column: 10, scope: !6293)
!6296 = !DILocation(line: 894, column: 8, scope: !6279)
!6297 = !DILocation(line: 896, column: 22, scope: !6298)
!6298 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 895, column: 6)
!6299 = !DILocation(line: 896, column: 8, scope: !6298)
!6300 = !DILocation(line: 897, column: 22, scope: !6298)
!6301 = !DILocation(line: 897, column: 8, scope: !6298)
!6302 = !DILocation(line: 898, column: 24, scope: !6298)
!6303 = !DILocation(line: 898, column: 8, scope: !6298)
!6304 = !DILocation(line: 899, column: 24, scope: !6298)
!6305 = !DILocation(line: 899, column: 8, scope: !6298)
!6306 = !DILocation(line: 900, column: 6, scope: !6298)
!6307 = !DILocation(line: 901, column: 13, scope: !6308)
!6308 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 901, column: 13)
!6309 = !DILocation(line: 901, column: 31, scope: !6308)
!6310 = !DILocation(line: 901, column: 28, scope: !6308)
!6311 = !DILocation(line: 901, column: 13, scope: !6293)
!6312 = !DILocation(line: 903, column: 24, scope: !6313)
!6313 = distinct !DILexicalBlock(scope: !6308, file: !3, line: 902, column: 6)
!6314 = !DILocation(line: 903, column: 8, scope: !6313)
!6315 = !DILocation(line: 904, column: 24, scope: !6313)
!6316 = !DILocation(line: 904, column: 8, scope: !6313)
!6317 = !DILocation(line: 905, column: 6, scope: !6313)
!6318 = !DILocation(line: 907, column: 9, scope: !6319)
!6319 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 907, column: 8)
!6320 = !DILocation(line: 907, column: 8, scope: !6279)
!6321 = !DILocation(line: 908, column: 15, scope: !6319)
!6322 = !DILocation(line: 908, column: 6, scope: !6319)
!6323 = !DILocation(line: 909, column: 14, scope: !6324)
!6324 = distinct !DILexicalBlock(scope: !6319, file: !3, line: 909, column: 13)
!6325 = !DILocation(line: 909, column: 13, scope: !6319)
!6326 = !DILocation(line: 910, column: 15, scope: !6324)
!6327 = !DILocation(line: 910, column: 6, scope: !6324)
!6328 = !DILocation(line: 912, column: 17, scope: !6324)
!6329 = !DILocation(line: 912, column: 15, scope: !6324)
!6330 = !DILocation(line: 914, column: 18, scope: !6279)
!6331 = !DILocation(line: 914, column: 21, scope: !6279)
!6332 = !DILocation(line: 914, column: 4, scope: !6279)
!6333 = !DILocation(line: 915, column: 18, scope: !6279)
!6334 = !DILocation(line: 915, column: 21, scope: !6279)
!6335 = !DILocation(line: 915, column: 4, scope: !6279)
!6336 = !DILocation(line: 917, column: 19, scope: !6279)
!6337 = !DILocation(line: 917, column: 22, scope: !6279)
!6338 = !DILocation(line: 917, column: 4, scope: !6279)
!6339 = !DILocation(line: 918, column: 19, scope: !6279)
!6340 = !DILocation(line: 918, column: 22, scope: !6279)
!6341 = !DILocation(line: 918, column: 4, scope: !6279)
!6342 = !DILocation(line: 920, column: 5, scope: !6269)
!6343 = !DILocation(line: 922, column: 9, scope: !6216)
!6344 = !DILocation(line: 922, column: 7, scope: !6216)
!6345 = !DILocation(line: 923, column: 12, scope: !6346)
!6346 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 923, column: 3)
!6347 = !DILocation(line: 923, column: 34, scope: !6346)
!6348 = !DILocation(line: 923, column: 10, scope: !6346)
!6349 = !DILocation(line: 923, column: 8, scope: !6346)
!6350 = !DILocation(line: 923, column: 39, scope: !6351)
!6351 = distinct !DILexicalBlock(scope: !6346, file: !3, line: 923, column: 3)
!6352 = !DILocation(line: 923, column: 41, scope: !6351)
!6353 = !DILocation(line: 923, column: 3, scope: !6346)
!6354 = !DILocation(line: 925, column: 15, scope: !6355)
!6355 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 924, column: 5)
!6356 = !DILocation(line: 925, column: 19, scope: !6355)
!6357 = !DILocation(line: 925, column: 7, scope: !6355)
!6358 = !DILocation(line: 929, column: 8, scope: !6359)
!6359 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 929, column: 8)
!6360 = distinct !DILexicalBlock(scope: !6355, file: !3, line: 926, column: 2)
!6361 = !DILocation(line: 929, column: 26, scope: !6359)
!6362 = !DILocation(line: 929, column: 23, scope: !6359)
!6363 = !DILocation(line: 929, column: 8, scope: !6360)
!6364 = !DILocation(line: 930, column: 6, scope: !6359)
!6365 = !DILocation(line: 932, column: 11, scope: !6366)
!6366 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 932, column: 4)
!6367 = !DILocation(line: 932, column: 9, scope: !6366)
!6368 = !DILocation(line: 932, column: 16, scope: !6369)
!6369 = distinct !DILexicalBlock(scope: !6366, file: !3, line: 932, column: 4)
!6370 = !DILocation(line: 932, column: 20, scope: !6369)
!6371 = !DILocation(line: 932, column: 18, scope: !6369)
!6372 = !DILocation(line: 932, column: 4, scope: !6366)
!6373 = !DILocation(line: 933, column: 22, scope: !6369)
!6374 = !DILocation(line: 933, column: 41, scope: !6369)
!6375 = !DILocation(line: 933, column: 6, scope: !6369)
!6376 = !DILocation(line: 932, column: 37, scope: !6369)
!6377 = !DILocation(line: 932, column: 4, scope: !6369)
!6378 = distinct !{!6378, !6372, !6379}
!6379 = !DILocation(line: 933, column: 58, scope: !6366)
!6380 = !DILocation(line: 935, column: 4, scope: !6360)
!6381 = !DILocation(line: 938, column: 20, scope: !6360)
!6382 = !DILocation(line: 938, column: 33, scope: !6360)
!6383 = !DILocation(line: 938, column: 4, scope: !6360)
!6384 = !DILocation(line: 939, column: 2, scope: !6360)
!6385 = !DILocation(line: 940, column: 5, scope: !6355)
!6386 = !DILocation(line: 923, column: 48, scope: !6351)
!6387 = !DILocation(line: 923, column: 3, scope: !6351)
!6388 = distinct !{!6388, !6353, !6389}
!6389 = !DILocation(line: 940, column: 5, scope: !6346)
!6390 = !DILocation(line: 941, column: 3, scope: !6216)
!6391 = !DILocation(line: 942, column: 1, scope: !6216)
