; ModuleID = 'varasm.c'
source_filename = "varasm.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.diagnostic_info = type opaque
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%union.gimple_statement_d = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type { %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx*, %struct.htab*, i64 }
%struct.constant_descriptor_rtx = type { %struct.constant_descriptor_rtx*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, i32, i32, i32, i32, i32 }
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.anon = type { i8*, i32 }
%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void ()*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i8 (%union.tree_node*)*, void (i32, i8*, i32, i8)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)*, void (i32)*, void (%struct.rtx_def*)*, void ()*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void (i32)*, void (%union.tree_node*, %union.tree_node*)*, i32 }
%struct.VEC_alias_pair_gc = type { %struct.VEC_alias_pair_base }
%struct.VEC_alias_pair_base = type { i32, i32, [1 x %struct.alias_pair] }
%struct.alias_pair = type { %union.tree_node*, %union.tree_node* }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.ggc_cache_tab = type { %struct.htab**, i64, i64, void (i8*)*, void (i8*)*, i32 (i8*)* }
%struct.tree_map = type { %struct.tree_map_base, i32, %union.tree_node* }
%struct.tree_map_base = type { %union.tree_node* }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.named_section = type { %struct.section_common, i8*, %union.tree_node* }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.VEC_constructor_elt_gc = type { %struct.VEC_constructor_elt_base }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.constructor_elt_d = type { %union.tree_node*, %union.tree_node* }
%struct.tree_constructor = type { %struct.tree_common, %struct.VEC_constructor_elt_gc* }
%struct.noswitch_section = type { %struct.section_common, i8 (%union.tree_node*, i8*, i64, i64)* }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type opaque
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.real_value = type { i32, [3 x i64] }
%struct.constant_descriptor_tree = type { %struct.rtx_def*, %union.tree_node*, i32 }
%struct.addr_const = type { %struct.rtx_def*, i64 }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.tree_real_cst = type { %struct.tree_common, %struct.real_value* }
%struct.tree_fixed_cst = type { %struct.tree_common, %struct.fixed_value* }
%struct.fixed_value = type { %struct.double_int, i32 }
%struct.tree_complex = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.oc_outer_state = type { i32, i32 }
%struct.tree_vector = type { %struct.tree_common, %union.tree_node* }
%struct.oc_local_state = type { %union.tree_node*, i64, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, i64, i8, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }

@.str = private unnamed_addr constant [8 x i8] c"__templ\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.1 = private unnamed_addr constant [9 x i8] c"__offset\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@word_mode = external dso_local global i32, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"__align\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"__size\00", align 1
@targetm = external dso_local global %struct.gcc_target, align 8
@emutls_htab = internal global %struct.htab* null, align 8, !dbg !0
@unnamed_sections = internal global %union.section* null, align 8, !dbg !3951
@section_htab = internal global %struct.htab* null, align 8, !dbg !3953
@.str.4 = private unnamed_addr constant [9 x i8] c"varasm.c\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"%+D causes a section type conflict\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@x_rtl = external dso_local global %struct.rtl_data, align 8
@.str.7 = private unnamed_addr constant [15 x i8] c".text.unlikely\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@first_function_block_is_cold = common dso_local global i8 0, align 1, !dbg !3915
@in_cold_section_p = common dso_local global i8 0, align 1, !dbg !3949
@current_function_decl = external dso_local global %union.tree_node*, align 8
@.str.8 = private unnamed_addr constant [8 x i8] c".rodata\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c".gnu.linkonce.t.\00", align 1
@flag_function_sections = external dso_local global i32, align 4
@flag_data_sections = external dso_local global i32, align 4
@.str.10 = private unnamed_addr constant [7 x i8] c".text.\00", align 1
@readonly_data_section = common dso_local global %union.section* null, align 8, !dbg !3923
@mode_size = external dso_local global [87 x i8], align 16
@flag_merge_constants = external dso_local global i32, align 4
@.str.11 = private unnamed_addr constant [14 x i8] c".rodata.cst%d\00", align 1
@_sch_istable = external dso_local constant [256 x i16], align 16
@reg_names = external dso_local global [53 x i8*], align 16
@decode_reg_name.table = internal constant [24 x %struct.anon] [%struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0), i32 0 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i32 1 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0), i32 2 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i32 0, i32 0), i32 3 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i32 0, i32 0), i32 4 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i32 0, i32 0), i32 5 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i32 0, i32 0), i32 6 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i32 0, i32 0), i32 7 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i32 0 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i32 0, i32 0), i32 1 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i32 0, i32 0), i32 2 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i32 0, i32 0), i32 3 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i32 0, i32 0), i32 4 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i32 0, i32 0), i32 5 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i32 0, i32 0), i32 6 }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i32 0, i32 0), i32 7 }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i32 0 }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i32 0, i32 0), i32 1 }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i32 2 }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31, i32 0, i32 0), i32 3 }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i32 0 }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i32 0, i32 0), i32 1 }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i32 2 }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0), i32 3 }], align 16, !dbg !3832
@.str.12 = private unnamed_addr constant [4 x i8] c"eax\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"edx\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"ecx\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"ebx\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"esi\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"edi\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"ebp\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"esp\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"rax\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"rdx\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"rcx\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c"rbx\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"rsi\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"rdi\00", align 1
@.str.26 = private unnamed_addr constant [4 x i8] c"rbp\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"rsp\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"al\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"dl\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"cl\00", align 1
@.str.31 = private unnamed_addr constant [3 x i8] c"bl\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"ah\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"dh\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"ch\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"bh\00", align 1
@.str.36 = private unnamed_addr constant [7 x i8] c"memory\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"cc\00", align 1
@.str.38 = private unnamed_addr constant [75 x i8] c"alignment of %q+D is greater than maximum object file alignment.  Using %d\00", align 1
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@flag_mudflap = external dso_local global i32, align 4
@.str.39 = private unnamed_addr constant [37 x i8] c"register name not specified for %q+D\00", align 1
@.str.40 = private unnamed_addr constant [31 x i8] c"invalid register name for %q+D\00", align 1
@.str.41 = private unnamed_addr constant [49 x i8] c"data type of %q+D isn%'t suitable for a register\00", align 1
@.str.42 = private unnamed_addr constant [58 x i8] c"register specified for %q+D isn%'t suitable for data type\00", align 1
@.str.43 = private unnamed_addr constant [43 x i8] c"global register variable has initial value\00", align 1
@.str.44 = private unnamed_addr constant [69 x i8] c"optimization may eliminate reads and/or writes to register variables\00", align 1
@hard_regno_nregs = external dso_local global [53 x [87 x i8]], align 16
@flag_strict_aliasing = external dso_local global i32, align 4
@asm_out_file = external dso_local global %struct._IO_FILE*, align 8
@.str.45 = private unnamed_addr constant [5 x i8] c"\09%s\0A\00", align 1
@.str.46 = private unnamed_addr constant [15 x i8] c"___DTOR_LIST__\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"%s.%.5u\00", align 1
@.str.48 = private unnamed_addr constant [7 x i8] c".ctors\00", align 1
@.str.49 = private unnamed_addr constant [7 x i8] c".dtors\00", align 1
@.str.50 = private unnamed_addr constant [15 x i8] c"___CTOR_LIST__\00", align 1
@first_global_object_name = common dso_local global i8* null, align 8, !dbg !3905
@flag_shlib = external dso_local global i32, align 4
@weak_global_object_name = common dso_local global i8* null, align 8, !dbg !3907
@flag_reorder_blocks_and_partition = external dso_local global i32, align 4
@.str.51 = private unnamed_addr constant [7 x i8] c"*.%s%u\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c"LHOTB\00", align 1
@const_labelno = internal global i32 0, align 4, !dbg !3909
@.str.53 = private unnamed_addr constant [7 x i8] c"LCOLDB\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"LHOTE\00", align 1
@.str.55 = private unnamed_addr constant [7 x i8] c"LCOLDE\00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@text_section = common dso_local global %union.section* null, align 8, !dbg !3919
@.str.57 = private unnamed_addr constant [12 x i8] c"\09.align %d\0A\00", align 1
@align_functions_log = external dso_local global i32, align 4
@align_functions = external dso_local global i32, align 4
@.str.58 = private unnamed_addr constant [14 x i8] c"\09.p2align %d\0A\00", align 1
@.str.59 = private unnamed_addr constant [18 x i8] c"\09.p2align %d,,%d\0A\00", align 1
@.str.60 = private unnamed_addr constant [13 x i8] c"\09.p2align 3\0A\00", align 1
@debug_hooks = external dso_local global %struct.gcc_debug_hooks*, align 8
@.str.61 = private unnamed_addr constant [8 x i8] c"\09.type\09\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.63 = private unnamed_addr constant [4 x i8] c"@%s\00", align 1
@.str.64 = private unnamed_addr constant [9 x i8] c"function\00", align 1
@flag_inhibit_size_directive = external dso_local global i32, align 4
@.str.65 = private unnamed_addr constant [8 x i8] c"\09.size\09\00", align 1
@.str.66 = private unnamed_addr constant [5 x i8] c", .-\00", align 1
@in_section = common dso_local global %union.section* null, align 8, !dbg !3947
@flag_syntax_only = external dso_local global i32, align 4
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@.str.67 = private unnamed_addr constant [7 x i8] c"%s%lu\0A\00", align 1
@.str.68 = private unnamed_addr constant [8 x i8] c"\09.zero\09\00", align 1
@.str.69 = private unnamed_addr constant [3 x i8] c"\22\0A\00", align 1
@.str.70 = private unnamed_addr constant [4 x i8] c"%s\22\00", align 1
@.str.71 = private unnamed_addr constant [10 x i8] c"\09.string\09\00", align 1
@.str.72 = private unnamed_addr constant [257 x i8] c"\01\01\01\01\01\01\01\01btn\01fralign 1
@.str.73 = private unnamed_addr constant [6 x i8] c"\\%03o\00", align 1
@.str.74 = private unnamed_addr constant [9 x i8] c"\09.ascii\09\00", align 1
@last_assemble_variable_decl = common dso_local global %union.tree_node* null, align 8, !dbg !3913
@.str.75 = private unnamed_addr constant [34 x i8] c"storage size of %q+D isn%'t known\00", align 1
@.str.76 = private unnamed_addr constant [35 x i8] c"size of variable %q+D is too large\00", align 1
@pending_assemble_externals = internal global %union.tree_node* null, align 8, !dbg !3963
@.str.77 = private unnamed_addr constant [5 x i8] c"weak\00", align 1
@weak_decls = internal global %union.tree_node* null, align 8, !dbg !3965
@cgraph_global_info_ready = external dso_local global i8, align 1
@.str.78 = private unnamed_addr constant [5 x i8] c"%U%s\00", align 1
@.str.79 = private unnamed_addr constant [3 x i8] c"LF\00", align 1
@.str.80 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.81 = private unnamed_addr constant [9 x i8] c"\09.local\09\00", align 1
@.str.82 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.83 = private unnamed_addr constant [8 x i8] c"\09.comm\09\00", align 1
@.str.84 = private unnamed_addr constant [9 x i8] c",%lu,%u\0A\00", align 1
@ix86_isa_flags = external dso_local global i32, align 4
@initial_trampoline = internal global %struct.rtx_def* null, align 8, !dbg !3967
@.str.85 = private unnamed_addr constant [7 x i8] c"LTRAMP\00", align 1
@mode_class = external dso_local constant [87 x i8], align 16
@const_desc_htab = internal global %struct.htab* null, align 8, !dbg !3969
@shared_constant_pool = internal global %struct.rtx_constant_pool* null, align 8, !dbg !3959
@.str.86 = private unnamed_addr constant [3 x i8] c"LC\00", align 1
@.str.87 = private unnamed_addr constant [61 x i8] c"initializer for integer/fixed-point value is too complicated\00", align 1
@.str.88 = private unnamed_addr constant [58 x i8] c"initializer for floating value is not a floating constant\00", align 1
@.str.89 = private unnamed_addr constant [49 x i8] c"weak declaration of %q+D must precede definition\00", align 1
@.str.90 = private unnamed_addr constant [73 x i8] c"weak declaration of %q+D after first use results in unspecified behavior\00", align 1
@.str.91 = private unnamed_addr constant [40 x i8] c"weak declaration of %q+D must be public\00", align 1
@weakref_targets = internal global %union.tree_node* null, align 8, !dbg !3971
@alias_pairs = common dso_local global %struct.VEC_alias_pair_gc* null, align 8, !dbg !3973
@.str.92 = private unnamed_addr constant [8 x i8] c"weakref\00", align 1
@.str.93 = private unnamed_addr constant [37 x i8] c"%q+D aliased to undefined symbol %qE\00", align 1
@.str.94 = private unnamed_addr constant [36 x i8] c"%q+D aliased to external symbol %qE\00", align 1
@.str.95 = private unnamed_addr constant [39 x i8] c"weakref %q+D ultimately targets itself\00", align 1
@.str.96 = private unnamed_addr constant [38 x i8] c"weakref %q+D must have static linkage\00", align 1
@default_assemble_visibility.visibility_types = internal constant [4 x i8*] [i8* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.99, i32 0, i32 0)], align 16, !dbg !3848
@.str.97 = private unnamed_addr constant [10 x i8] c"protected\00", align 1
@.str.98 = private unnamed_addr constant [7 x i8] c"hidden\00", align 1
@.str.99 = private unnamed_addr constant [9 x i8] c"internal\00", align 1
@.str.100 = private unnamed_addr constant [6 x i8] c"\09.%s\09\00", align 1
@object_block_htab = internal global %struct.htab* null, align 8, !dbg !3955
@const_alias_set = internal global i32 0, align 4, !dbg !3917
@.str.101 = private unnamed_addr constant [7 x i8] c"\09.text\00", align 1
@.str.102 = private unnamed_addr constant [7 x i8] c"\09.data\00", align 1
@data_section = common dso_local global %union.section* null, align 8, !dbg !3921
@.str.103 = private unnamed_addr constant [18 x i8] c"\09.section\09.rodata\00", align 1
@.str.104 = private unnamed_addr constant [6 x i8] c"\09.bss\00", align 1
@bss_section = common dso_local global %union.section* null, align 8, !dbg !3931
@tls_comm_section = common dso_local global %union.section* null, align 8, !dbg !3935
@lcomm_section = common dso_local global %union.section* null, align 8, !dbg !3939
@comm_section = common dso_local global %union.section* null, align 8, !dbg !3937
@bss_noswitch_section = common dso_local global %union.section* null, align 8, !dbg !3941
@optimize = external dso_local global i32, align 4
@flag_tls_default = external dso_local global i32, align 4
@.str.105 = private unnamed_addr constant [5 x i8] c".bss\00", align 1
@.str.106 = private unnamed_addr constant [6 x i8] c".bss.\00", align 1
@.str.107 = private unnamed_addr constant [17 x i8] c".gnu.linkonce.b.\00", align 1
@.str.108 = private unnamed_addr constant [6 x i8] c".sbss\00", align 1
@.str.109 = private unnamed_addr constant [7 x i8] c".sbss.\00", align 1
@.str.110 = private unnamed_addr constant [18 x i8] c".gnu.linkonce.sb.\00", align 1
@.str.111 = private unnamed_addr constant [7 x i8] c".tdata\00", align 1
@.str.112 = private unnamed_addr constant [8 x i8] c".tdata.\00", align 1
@.str.113 = private unnamed_addr constant [18 x i8] c".gnu.linkonce.td.\00", align 1
@.str.114 = private unnamed_addr constant [6 x i8] c".tbss\00", align 1
@.str.115 = private unnamed_addr constant [7 x i8] c".tbss.\00", align 1
@.str.116 = private unnamed_addr constant [18 x i8] c".gnu.linkonce.tb.\00", align 1
@.str.117 = private unnamed_addr constant [12 x i8] c".init_array\00", align 1
@.str.118 = private unnamed_addr constant [12 x i8] c".fini_array\00", align 1
@.str.119 = private unnamed_addr constant [15 x i8] c".preinit_array\00", align 1
@.str.120 = private unnamed_addr constant [14 x i8] c"\09.section\09%s\0A\00", align 1
@.str.121 = private unnamed_addr constant [18 x i8] c"\09.section\09%s,\22%s\22\00", align 1
@.str.122 = private unnamed_addr constant [7 x i8] c"nobits\00", align 1
@.str.123 = private unnamed_addr constant [9 x i8] c"progbits\00", align 1
@.str.124 = private unnamed_addr constant [5 x i8] c",@%s\00", align 1
@.str.125 = private unnamed_addr constant [4 x i8] c",%d\00", align 1
@.str.126 = private unnamed_addr constant [11 x i8] c",%s,comdat\00", align 1
@.str.127 = private unnamed_addr constant [19 x i8] c"\09.section\09%s,\22%s\22\0A\00", align 1
@.str.128 = private unnamed_addr constant [15 x i8] c"\09.linkonce %s\0A\00", align 1
@.str.129 = private unnamed_addr constant [8 x i8] c"discard\00", align 1
@.str.130 = private unnamed_addr constant [10 x i8] c"same_size\00", align 1
@flag_pic = external dso_local global i32, align 4
@emutls_object_type = internal global %union.tree_node* null, align 8, !dbg !3961
@flag_zero_initialized_in_bss = external dso_local global i32, align 4
@.str.131 = private unnamed_addr constant [8 x i8] c".sdata2\00", align 1
@.str.132 = private unnamed_addr constant [10 x i8] c".data.rel\00", align 1
@.str.133 = private unnamed_addr constant [16 x i8] c".data.rel.local\00", align 1
@.str.134 = private unnamed_addr constant [13 x i8] c".data.rel.ro\00", align 1
@.str.135 = private unnamed_addr constant [19 x i8] c".data.rel.ro.local\00", align 1
@.str.136 = private unnamed_addr constant [7 x i8] c".sdata\00", align 1
@.str.137 = private unnamed_addr constant [3 x i8] c".t\00", align 1
@.str.138 = private unnamed_addr constant [6 x i8] c".text\00", align 1
@.str.139 = private unnamed_addr constant [3 x i8] c".r\00", align 1
@.str.140 = private unnamed_addr constant [4 x i8] c".s2\00", align 1
@.str.141 = private unnamed_addr constant [3 x i8] c".d\00", align 1
@.str.142 = private unnamed_addr constant [6 x i8] c".data\00", align 1
@.str.143 = private unnamed_addr constant [7 x i8] c".d.rel\00", align 1
@.str.144 = private unnamed_addr constant [13 x i8] c".d.rel.local\00", align 1
@.str.145 = private unnamed_addr constant [10 x i8] c".d.rel.ro\00", align 1
@.str.146 = private unnamed_addr constant [16 x i8] c".d.rel.ro.local\00", align 1
@.str.147 = private unnamed_addr constant [3 x i8] c".s\00", align 1
@.str.148 = private unnamed_addr constant [3 x i8] c".b\00", align 1
@.str.149 = private unnamed_addr constant [4 x i8] c".sb\00", align 1
@.str.150 = private unnamed_addr constant [4 x i8] c".td\00", align 1
@.str.151 = private unnamed_addr constant [4 x i8] c".tb\00", align 1
@.str.152 = private unnamed_addr constant [14 x i8] c".gnu.linkonce\00", align 1
@.str.153 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.154 = private unnamed_addr constant [2 x i8] c".\00", align 1
@libiberty_concat_ptr = external dso_local global i8*, align 8
@.str.155 = private unnamed_addr constant [9 x i8] c"*. + %ld\00", align 1
@.str.156 = private unnamed_addr constant [7 x i8] c"\09.set\09\00", align 1
@.str.157 = private unnamed_addr constant [2 x i8] c",\00", align 1
@flag_whole_program = external dso_local global i32, align 4
@.str.158 = private unnamed_addr constant [8 x i8] c".globl \00", align 1
@flag_verbose_asm = external dso_local global i32, align 4
@flag_debug_asm = external dso_local global i32, align 4
@flag_dump_rtl_in_asm = external dso_local global i32, align 4
@.str.159 = private unnamed_addr constant [9 x i8] c"#NO_APP\0A\00", align 1
@main_input_filename = external dso_local global i8*, align 8
@trampolines_created = common dso_local global i32 0, align 4, !dbg !3975
@.str.160 = private unnamed_addr constant [16 x i8] c".note.GNU-stack\00", align 1
@.str.161 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@ptr_mode = external dso_local global i32, align 4
@.str.162 = private unnamed_addr constant [8 x i8] c"LANCHOR\00", align 1
@anchor_labelno = internal global i32 0, align 4, !dbg !3957
@elf_record_gcc_switches.buffer = internal global [1024 x i8] zeroinitializer, align 16, !dbg !3854
@elf_record_gcc_switches.previous_name_held_back = internal global i8 0, align 1, !dbg !3863
@.str.163 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@elf_record_gcc_switches.started = internal global i8 0, align 1, !dbg !3865
@gt_ggc_r_gt_varasm_h = dso_local constant [13 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%union.tree_node** @weakref_targets to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_lang_tree_node, void (i8*)* @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @const_desc_htab to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P24constant_descriptor_tree4htab, void (i8*)* @gt_pch_n_P24constant_descriptor_tree4htab }, %struct.ggc_root_tab { i8* bitcast (%struct.rtx_def** @initial_trampoline to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_rtx_def, void (i8*)* @gt_pch_nx_rtx_def }, %struct.ggc_root_tab { i8* bitcast (%union.tree_node** @weak_decls to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_lang_tree_node, void (i8*)* @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { i8* bitcast (%union.tree_node** @pending_assemble_externals to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_lang_tree_node, void (i8*)* @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { i8* bitcast (%union.tree_node** @emutls_object_type to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_lang_tree_node, void (i8*)* @gt_pch_nx_lang_tree_node }, %struct.ggc_root_tab { i8* bitcast (%struct.rtx_constant_pool** @shared_constant_pool to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_rtx_constant_pool, void (i8*)* @gt_pch_nx_rtx_constant_pool }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @object_block_htab to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P12object_block4htab, void (i8*)* @gt_pch_n_P12object_block4htab }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @section_htab to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P7section4htab, void (i8*)* @gt_pch_n_P7section4htab }, %struct.ggc_root_tab { i8* bitcast (%union.section** @unnamed_sections to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_section, void (i8*)* @gt_pch_nx_section }, %struct.ggc_root_tab { i8* bitcast (i8** @weak_global_object_name to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_S, void (i8*)* @gt_pch_n_S }, %struct.ggc_root_tab { i8* bitcast (i8** @first_global_object_name to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_S, void (i8*)* @gt_pch_n_S }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !3867
@gt_ggc_rc_gt_varasm_h = dso_local constant [2 x %struct.ggc_cache_tab] [%struct.ggc_cache_tab { %struct.htab** @emutls_htab, i64 1, i64 8, void (i8*)* @gt_ggc_mx_tree_map, void (i8*)* @gt_pch_nx_tree_map, i32 (i8*)* @tree_map_base_marked_p }, %struct.ggc_cache_tab zeroinitializer], align 16, !dbg !3883
@gt_pch_rc_gt_varasm_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.htab** @emutls_htab to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P8tree_map4htab, void (i8*)* @gt_pch_n_P8tree_map4htab }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !3899
@gt_pch_rs_gt_varasm_h = dso_local constant [3 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (i32* @anchor_labelno to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab { i8* bitcast (i32* @const_labelno to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !3902
@size_directive_output = common dso_local global i32 0, align 4, !dbg !3911
@sdata_section = common dso_local global %union.section* null, align 8, !dbg !3925
@ctors_section = common dso_local global %union.section* null, align 8, !dbg !3927
@dtors_section = common dso_local global %union.section* null, align 8, !dbg !3929
@sbss_section = common dso_local global %union.section* null, align 8, !dbg !3933
@exception_section = common dso_local global %union.section* null, align 8, !dbg !3943
@eh_frame_section = common dso_local global %union.section* null, align 8, !dbg !3945
@.str.164 = private unnamed_addr constant [12 x i8] c"__emutls_v.\00", align 1
@.str.165 = private unnamed_addr constant [16 x i8] c"__emutls_object\00", align 1
@built_in_decls = external dso_local global [721 x %union.tree_node*], align 16
@.str.166 = private unnamed_addr constant [10 x i8] c"_unlikely\00", align 1
@flag_section_anchors = external dso_local global i32, align 4
@.str.167 = private unnamed_addr constant [6 x i8] c"alias\00", align 1
@.str.168 = private unnamed_addr constant [12 x i8] c"__emutls_t.\00", align 1
@.str.169 = private unnamed_addr constant [74 x i8] c"requested alignment for %q+D is greater than implemented alignment of %wu\00", align 1
@.str.170 = private unnamed_addr constant [7 x i8] c"object\00", align 1
@.str.171 = private unnamed_addr constant [7 x i8] c", %ld\0A\00", align 1
@mode_inner = external dso_local constant [87 x i8], align 16
@.str.172 = private unnamed_addr constant [8 x i8] c"%s %s:\0A\00", align 1
@.str.173 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str.174 = private unnamed_addr constant [12 x i8] c"<anonymous>\00", align 1
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@.str.175 = private unnamed_addr constant [37 x i8] c"invalid initial value for member %qE\00", align 1
@.str.176 = private unnamed_addr constant [8 x i8] c"\09.weak\09\00", align 1
@.str.177 = private unnamed_addr constant [11 x i8] c"\09.weakref\09\00", align 1
@.str.178 = private unnamed_addr constant [5 x i8] c"\09%s\09\00", align 1
@.str.179 = private unnamed_addr constant [12 x i8] c".tls_common\00", align 1
@.str.180 = private unnamed_addr constant [17 x i8] c".rodata.str%d.%d\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @default_emutls_var_fields(%union.tree_node* %type, %union.tree_node** %name) #0 !dbg !3981 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca %union.tree_node**, align 8
  %word_type_node = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  %next_field = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !3984, metadata !DIExpression()), !dbg !3985
  store %union.tree_node** %name, %union.tree_node*** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %name.addr, metadata !3986, metadata !DIExpression()), !dbg !3987
  call void @llvm.dbg.declare(metadata %union.tree_node** %word_type_node, metadata !3988, metadata !DIExpression()), !dbg !3989
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !3990, metadata !DIExpression()), !dbg !3991
  call void @llvm.dbg.declare(metadata %union.tree_node** %next_field, metadata !3992, metadata !DIExpression()), !dbg !3993
  %call = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)), !dbg !3994
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !3994
  %call1 = call %union.tree_node* @build_decl_stat(i32 0, i32 31, %union.tree_node* %call, %union.tree_node* %0), !dbg !3994
  store %union.tree_node* %call1, %union.tree_node** %field, align 8, !dbg !3995
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !3996
  %2 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3997
  %decl_minimal = bitcast %union.tree_node* %2 to %struct.tree_decl_minimal*, !dbg !3997
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !3997
  store %union.tree_node* %1, %union.tree_node** %context, align 8, !dbg !3998
  %3 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !3999
  store %union.tree_node* %3, %union.tree_node** %next_field, align 8, !dbg !4000
  %call2 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !4001
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !4001
  %call3 = call %union.tree_node* @build_decl_stat(i32 0, i32 31, %union.tree_node* %call2, %union.tree_node* %4), !dbg !4001
  store %union.tree_node* %call3, %union.tree_node** %field, align 8, !dbg !4002
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4003
  %6 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4004
  %decl_minimal4 = bitcast %union.tree_node* %6 to %struct.tree_decl_minimal*, !dbg !4004
  %context5 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal4, i32 0, i32 4, !dbg !4004
  store %union.tree_node* %5, %union.tree_node** %context5, align 8, !dbg !4005
  %7 = load %union.tree_node*, %union.tree_node** %next_field, align 8, !dbg !4006
  %8 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4007
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !4007
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !4007
  store %union.tree_node* %7, %union.tree_node** %chain, align 8, !dbg !4008
  %9 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4009
  store %union.tree_node* %9, %union.tree_node** %next_field, align 8, !dbg !4010
  %10 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 2), align 8, !dbg !4011
  %11 = load i32, i32* @word_mode, align 4, !dbg !4012
  %call6 = call %union.tree_node* %10(i32 %11, i32 1), !dbg !4013
  store %union.tree_node* %call6, %union.tree_node** %word_type_node, align 8, !dbg !4014
  %call7 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)), !dbg !4015
  %12 = load %union.tree_node*, %union.tree_node** %word_type_node, align 8, !dbg !4015
  %call8 = call %union.tree_node* @build_decl_stat(i32 0, i32 31, %union.tree_node* %call7, %union.tree_node* %12), !dbg !4015
  store %union.tree_node* %call8, %union.tree_node** %field, align 8, !dbg !4016
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4017
  %14 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4018
  %decl_minimal9 = bitcast %union.tree_node* %14 to %struct.tree_decl_minimal*, !dbg !4018
  %context10 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal9, i32 0, i32 4, !dbg !4018
  store %union.tree_node* %13, %union.tree_node** %context10, align 8, !dbg !4019
  %15 = load %union.tree_node*, %union.tree_node** %next_field, align 8, !dbg !4020
  %16 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4021
  %common11 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !4021
  %chain12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 1, !dbg !4021
  store %union.tree_node* %15, %union.tree_node** %chain12, align 8, !dbg !4022
  %17 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4023
  store %union.tree_node* %17, %union.tree_node** %next_field, align 8, !dbg !4024
  %call13 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0)), !dbg !4025
  %18 = load %union.tree_node*, %union.tree_node** %word_type_node, align 8, !dbg !4025
  %call14 = call %union.tree_node* @build_decl_stat(i32 0, i32 31, %union.tree_node* %call13, %union.tree_node* %18), !dbg !4025
  store %union.tree_node* %call14, %union.tree_node** %field, align 8, !dbg !4026
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4027
  %20 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4028
  %decl_minimal15 = bitcast %union.tree_node* %20 to %struct.tree_decl_minimal*, !dbg !4028
  %context16 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal15, i32 0, i32 4, !dbg !4028
  store %union.tree_node* %19, %union.tree_node** %context16, align 8, !dbg !4029
  %21 = load %union.tree_node*, %union.tree_node** %next_field, align 8, !dbg !4030
  %22 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4031
  %common17 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !4031
  %chain18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 1, !dbg !4031
  store %union.tree_node* %21, %union.tree_node** %chain18, align 8, !dbg !4032
  %23 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4033
  ret %union.tree_node* %23, !dbg !4034
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @emutls_decl(%union.tree_node* %decl) #0 !dbg !4035 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %to = alloca %union.tree_node*, align 8
  %h = alloca %struct.tree_map*, align 8
  %in = alloca %struct.tree_map, align 8
  %loc = alloca i8**, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4038, metadata !DIExpression()), !dbg !4039
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !4040, metadata !DIExpression()), !dbg !4041
  call void @llvm.dbg.declare(metadata %union.tree_node** %to, metadata !4042, metadata !DIExpression()), !dbg !4043
  call void @llvm.dbg.declare(metadata %struct.tree_map** %h, metadata !4044, metadata !DIExpression()), !dbg !4045
  call void @llvm.dbg.declare(metadata %struct.tree_map* %in, metadata !4046, metadata !DIExpression()), !dbg !4047
  call void @llvm.dbg.declare(metadata i8*** %loc, metadata !4048, metadata !DIExpression()), !dbg !4049
  %0 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 113), align 4, !dbg !4050
  %conv = zext i8 %0 to i32, !dbg !4052
  %tobool = icmp ne i32 %conv, 0, !dbg !4052
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4053

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4054
  %cmp = icmp eq %union.tree_node* %1, null, !dbg !4055
  br i1 %cmp, label %if.then, label %lor.lhs.false2, !dbg !4056

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4057
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !4058
  %cmp3 = icmp eq %union.tree_node* %2, %3, !dbg !4059
  br i1 %cmp3, label %if.then, label %lor.lhs.false5, !dbg !4060

lor.lhs.false5:                                   ; preds = %lor.lhs.false2
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4061
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4061
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !4061
  %bf.load = load i64, i64* %5, align 8, !dbg !4061
  %bf.clear = and i64 %bf.load, 65535, !dbg !4061
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4061
  %cmp6 = icmp ne i32 %bf.cast, 32, !dbg !4062
  br i1 %cmp6, label %if.then, label %lor.lhs.false8, !dbg !4063

lor.lhs.false8:                                   ; preds = %lor.lhs.false5
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4064
  %decl_with_vis = bitcast %union.tree_node* %6 to %struct.tree_decl_with_vis*, !dbg !4064
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !4064
  %7 = bitcast i24* %tls_model to i32*, !dbg !4064
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4064
  %bf.lshr = lshr i32 %bf.load9, 13, !dbg !4064
  %bf.clear10 = and i32 %bf.lshr, 7, !dbg !4064
  %cmp11 = icmp sge i32 %bf.clear10, 2, !dbg !4064
  br i1 %cmp11, label %if.end, label %if.then, !dbg !4065

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false5, %lor.lhs.false2, %lor.lhs.false, %entry
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4066
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !4067
  br label %return, !dbg !4067

if.end:                                           ; preds = %lor.lhs.false8
  %9 = load %struct.htab*, %struct.htab** @emutls_htab, align 8, !dbg !4068
  %tobool13 = icmp ne %struct.htab* %9, null, !dbg !4068
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !4070

if.then14:                                        ; preds = %if.end
  %call = call %struct.htab* @htab_create_alloc(i64 512, i32 (i8*)* @tree_map_hash, i32 (i8*, i8*)* @tree_map_base_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !4071
  store %struct.htab* %call, %struct.htab** @emutls_htab, align 8, !dbg !4072
  br label %if.end15, !dbg !4073

if.end15:                                         ; preds = %if.then14, %if.end
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4074
  %call16 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %10), !dbg !4074
  store %union.tree_node* %call16, %union.tree_node** %name, align 8, !dbg !4075
  %11 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4076
  %identifier = bitcast %union.tree_node* %11 to %struct.tree_identifier*, !dbg !4076
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !4076
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !4076
  %12 = load i8*, i8** %str, align 8, !dbg !4076
  %call17 = call i32 @htab_hash_string(i8* %12), !dbg !4077
  %hash = getelementptr inbounds %struct.tree_map, %struct.tree_map* %in, i32 0, i32 1, !dbg !4078
  store i32 %call17, i32* %hash, align 8, !dbg !4079
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4080
  %base18 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %in, i32 0, i32 0, !dbg !4081
  %from = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base18, i32 0, i32 0, !dbg !4082
  store %union.tree_node* %13, %union.tree_node** %from, align 8, !dbg !4083
  %14 = load %struct.htab*, %struct.htab** @emutls_htab, align 8, !dbg !4084
  %15 = bitcast %struct.tree_map* %in to i8*, !dbg !4085
  %hash19 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %in, i32 0, i32 1, !dbg !4086
  %16 = load i32, i32* %hash19, align 8, !dbg !4086
  %call20 = call i8** @htab_find_slot_with_hash(%struct.htab* %14, i8* %15, i32 %16, i32 1), !dbg !4087
  store i8** %call20, i8*** %loc, align 8, !dbg !4088
  %17 = load i8**, i8*** %loc, align 8, !dbg !4089
  %18 = load i8*, i8** %17, align 8, !dbg !4090
  %19 = bitcast i8* %18 to %struct.tree_map*, !dbg !4091
  store %struct.tree_map* %19, %struct.tree_map** %h, align 8, !dbg !4092
  %20 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4093
  %cmp21 = icmp ne %struct.tree_map* %20, null, !dbg !4095
  br i1 %cmp21, label %if.then23, label %if.else, !dbg !4096

if.then23:                                        ; preds = %if.end15
  %21 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4097
  %to24 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %21, i32 0, i32 2, !dbg !4098
  %22 = load %union.tree_node*, %union.tree_node** %to24, align 8, !dbg !4098
  store %union.tree_node* %22, %union.tree_node** %to, align 8, !dbg !4099
  br label %if.end67, !dbg !4100

if.else:                                          ; preds = %if.end15
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4101
  %decl_minimal = bitcast %union.tree_node* %23 to %struct.tree_decl_minimal*, !dbg !4101
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !4101
  %24 = load i32, i32* %locus, align 8, !dbg !4101
  %25 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4101
  %call25 = call %union.tree_node* @get_emutls_object_name(%union.tree_node* %25), !dbg !4101
  %call26 = call %union.tree_node* @get_emutls_object_type(), !dbg !4101
  %call27 = call %union.tree_node* @build_decl_stat(i32 %24, i32 32, %union.tree_node* %call25, %union.tree_node* %call26), !dbg !4101
  store %union.tree_node* %call27, %union.tree_node** %to, align 8, !dbg !4103
  %call28 = call i8* @ggc_alloc_stat(i64 24), !dbg !4104
  %26 = bitcast i8* %call28 to %struct.tree_map*, !dbg !4104
  store %struct.tree_map* %26, %struct.tree_map** %h, align 8, !dbg !4105
  %hash29 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %in, i32 0, i32 1, !dbg !4106
  %27 = load i32, i32* %hash29, align 8, !dbg !4106
  %28 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4107
  %hash30 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %28, i32 0, i32 1, !dbg !4108
  store i32 %27, i32* %hash30, align 8, !dbg !4109
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4110
  %30 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4111
  %base31 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %30, i32 0, i32 0, !dbg !4112
  %from32 = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base31, i32 0, i32 0, !dbg !4113
  store %union.tree_node* %29, %union.tree_node** %from32, align 8, !dbg !4114
  %31 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4115
  %32 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4116
  %to33 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %32, i32 0, i32 2, !dbg !4117
  store %union.tree_node* %31, %union.tree_node** %to33, align 8, !dbg !4118
  %33 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4119
  %34 = load i8**, i8*** %loc, align 8, !dbg !4120
  %35 = bitcast i8** %34 to %struct.tree_map**, !dbg !4121
  store %struct.tree_map* %33, %struct.tree_map** %35, align 8, !dbg !4122
  %36 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4123
  %decl_with_vis34 = bitcast %union.tree_node* %36 to %struct.tree_decl_with_vis*, !dbg !4123
  %tls_model35 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis34, i32 0, i32 4, !dbg !4123
  %37 = bitcast i24* %tls_model35 to i32*, !dbg !4123
  %bf.load36 = load i32, i32* %37, align 8, !dbg !4124
  %bf.clear37 = and i32 %bf.load36, -57345, !dbg !4124
  %bf.set = or i32 %bf.clear37, 8192, !dbg !4124
  store i32 %bf.set, i32* %37, align 8, !dbg !4124
  %38 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4125
  %decl_common = bitcast %union.tree_node* %38 to %struct.tree_decl_common*, !dbg !4125
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4125
  %39 = bitcast i40* %artificial_flag to i64*, !dbg !4125
  %bf.load38 = load i64, i64* %39, align 8, !dbg !4126
  %bf.clear39 = and i64 %bf.load38, -4097, !dbg !4126
  %bf.set40 = or i64 %bf.clear39, 4096, !dbg !4126
  store i64 %bf.set40, i64* %39, align 8, !dbg !4126
  %40 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4127
  %decl_common41 = bitcast %union.tree_node* %40 to %struct.tree_decl_common*, !dbg !4127
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common41, i32 0, i32 2, !dbg !4127
  %41 = bitcast i40* %ignored_flag to i64*, !dbg !4127
  %bf.load42 = load i64, i64* %41, align 8, !dbg !4128
  %bf.clear43 = and i64 %bf.load42, -1025, !dbg !4128
  %bf.set44 = or i64 %bf.clear43, 1024, !dbg !4128
  store i64 %bf.set44, i64* %41, align 8, !dbg !4128
  %42 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4129
  %base45 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !4129
  %43 = bitcast %struct.tree_base* %base45 to i64*, !dbg !4129
  %bf.load46 = load i64, i64* %43, align 8, !dbg !4130
  %bf.clear47 = and i64 %bf.load46, -1048577, !dbg !4130
  store i64 %bf.clear47, i64* %43, align 8, !dbg !4130
  %44 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4131
  %decl_minimal48 = bitcast %union.tree_node* %44 to %struct.tree_decl_minimal*, !dbg !4131
  %name49 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal48, i32 0, i32 3, !dbg !4131
  %45 = load %union.tree_node*, %union.tree_node** %name49, align 8, !dbg !4131
  %46 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4131
  %decl_with_vis50 = bitcast %union.tree_node* %46 to %struct.tree_decl_with_vis*, !dbg !4131
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis50, i32 0, i32 1, !dbg !4131
  store %union.tree_node* %45, %union.tree_node** %assembler_name, align 8, !dbg !4131
  %47 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4132
  %decl_with_vis51 = bitcast %union.tree_node* %47 to %struct.tree_decl_with_vis*, !dbg !4132
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis51, i32 0, i32 3, !dbg !4132
  %48 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !4132
  %cmp52 = icmp ne %union.tree_node* %48, null, !dbg !4132
  br i1 %cmp52, label %if.then54, label %if.end56, !dbg !4134

if.then54:                                        ; preds = %if.else
  %49 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4135
  %50 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4136
  %call55 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %50), !dbg !4136
  call void @make_decl_one_only(%union.tree_node* %49, %union.tree_node* %call55), !dbg !4137
  br label %if.end56, !dbg !4137

if.end56:                                         ; preds = %if.then54, %if.else
  %51 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4138
  %decl_minimal57 = bitcast %union.tree_node* %51 to %struct.tree_decl_minimal*, !dbg !4138
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal57, i32 0, i32 4, !dbg !4138
  %52 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !4138
  %53 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4139
  %decl_minimal58 = bitcast %union.tree_node* %53 to %struct.tree_decl_minimal*, !dbg !4139
  %context59 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal58, i32 0, i32 4, !dbg !4139
  store %union.tree_node* %52, %union.tree_node** %context59, align 8, !dbg !4140
  %54 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 8), align 8, !dbg !4141
  %tobool60 = icmp ne i8 %54, 0, !dbg !4143
  br i1 %tobool60, label %if.then61, label %if.end66, !dbg !4144

if.then61:                                        ; preds = %if.end56
  %55 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4145
  %common = bitcast %union.tree_node* %55 to %struct.tree_common*, !dbg !4145
  %base62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !4145
  %56 = bitcast %struct.tree_base* %base62 to i64*, !dbg !4145
  %bf.load63 = load i64, i64* %56, align 8, !dbg !4146
  %bf.clear64 = and i64 %bf.load63, -4398046511105, !dbg !4146
  %bf.set65 = or i64 %bf.clear64, 4398046511104, !dbg !4146
  store i64 %bf.set65, i64* %56, align 8, !dbg !4146
  br label %if.end66, !dbg !4145

if.end66:                                         ; preds = %if.then61, %if.end56
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then23
  %57 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4147
  %base68 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !4147
  %58 = bitcast %struct.tree_base* %base68 to i64*, !dbg !4147
  %bf.load69 = load i64, i64* %58, align 8, !dbg !4147
  %bf.lshr70 = lshr i64 %bf.load69, 26, !dbg !4147
  %bf.clear71 = and i64 %bf.lshr70, 1, !dbg !4147
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !4147
  %59 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4148
  %base73 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !4148
  %60 = bitcast %struct.tree_base* %base73 to i64*, !dbg !4148
  %61 = zext i32 %bf.cast72 to i64, !dbg !4149
  %bf.load74 = load i64, i64* %60, align 8, !dbg !4149
  %bf.value = and i64 %61, 1, !dbg !4149
  %bf.shl = shl i64 %bf.value, 26, !dbg !4149
  %bf.clear75 = and i64 %bf.load74, -67108865, !dbg !4149
  %bf.set76 = or i64 %bf.clear75, %bf.shl, !dbg !4149
  store i64 %bf.set76, i64* %60, align 8, !dbg !4149
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !4149
  %62 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4150
  %base77 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !4150
  %63 = bitcast %struct.tree_base* %base77 to i64*, !dbg !4150
  %bf.load78 = load i64, i64* %63, align 8, !dbg !4150
  %bf.lshr79 = lshr i64 %bf.load78, 24, !dbg !4150
  %bf.clear80 = and i64 %bf.lshr79, 1, !dbg !4150
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !4150
  %64 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4151
  %base82 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !4151
  %65 = bitcast %struct.tree_base* %base82 to i64*, !dbg !4151
  %66 = zext i32 %bf.cast81 to i64, !dbg !4152
  %bf.load83 = load i64, i64* %65, align 8, !dbg !4152
  %bf.value84 = and i64 %66, 1, !dbg !4152
  %bf.shl85 = shl i64 %bf.value84, 24, !dbg !4152
  %bf.clear86 = and i64 %bf.load83, -16777217, !dbg !4152
  %bf.set87 = or i64 %bf.clear86, %bf.shl85, !dbg !4152
  store i64 %bf.set87, i64* %65, align 8, !dbg !4152
  %bf.result.cast88 = trunc i64 %bf.value84 to i32, !dbg !4152
  %67 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4153
  %base89 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !4153
  %68 = bitcast %struct.tree_base* %base89 to i64*, !dbg !4153
  %bf.load90 = load i64, i64* %68, align 8, !dbg !4153
  %bf.lshr91 = lshr i64 %bf.load90, 27, !dbg !4153
  %bf.clear92 = and i64 %bf.lshr91, 1, !dbg !4153
  %bf.cast93 = trunc i64 %bf.clear92 to i32, !dbg !4153
  %69 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4154
  %base94 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !4154
  %70 = bitcast %struct.tree_base* %base94 to i64*, !dbg !4154
  %71 = zext i32 %bf.cast93 to i64, !dbg !4155
  %bf.load95 = load i64, i64* %70, align 8, !dbg !4155
  %bf.value96 = and i64 %71, 1, !dbg !4155
  %bf.shl97 = shl i64 %bf.value96, 27, !dbg !4155
  %bf.clear98 = and i64 %bf.load95, -134217729, !dbg !4155
  %bf.set99 = or i64 %bf.clear98, %bf.shl97, !dbg !4155
  store i64 %bf.set99, i64* %70, align 8, !dbg !4155
  %bf.result.cast100 = trunc i64 %bf.value96 to i32, !dbg !4155
  %72 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4156
  %decl_common101 = bitcast %union.tree_node* %72 to %struct.tree_decl_common*, !dbg !4156
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common101, i32 0, i32 2, !dbg !4156
  %73 = bitcast i40* %decl_flag_1 to i64*, !dbg !4156
  %bf.load102 = load i64, i64* %73, align 8, !dbg !4156
  %bf.lshr103 = lshr i64 %bf.load102, 25, !dbg !4156
  %bf.clear104 = and i64 %bf.lshr103, 1, !dbg !4156
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !4156
  %74 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4157
  %decl_common106 = bitcast %union.tree_node* %74 to %struct.tree_decl_common*, !dbg !4157
  %decl_flag_1107 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common106, i32 0, i32 2, !dbg !4157
  %75 = bitcast i40* %decl_flag_1107 to i64*, !dbg !4157
  %76 = zext i32 %bf.cast105 to i64, !dbg !4158
  %bf.load108 = load i64, i64* %75, align 8, !dbg !4158
  %bf.value109 = and i64 %76, 1, !dbg !4158
  %bf.shl110 = shl i64 %bf.value109, 25, !dbg !4158
  %bf.clear111 = and i64 %bf.load108, -33554433, !dbg !4158
  %bf.set112 = or i64 %bf.clear111, %bf.shl110, !dbg !4158
  store i64 %bf.set112, i64* %75, align 8, !dbg !4158
  %bf.result.cast113 = trunc i64 %bf.value109 to i32, !dbg !4158
  %77 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4159
  %decl_with_vis114 = bitcast %union.tree_node* %77 to %struct.tree_decl_with_vis*, !dbg !4159
  %common_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis114, i32 0, i32 4, !dbg !4159
  %78 = bitcast i24* %common_flag to i32*, !dbg !4159
  %bf.load115 = load i32, i32* %78, align 8, !dbg !4159
  %bf.lshr116 = lshr i32 %bf.load115, 3, !dbg !4159
  %bf.clear117 = and i32 %bf.lshr116, 1, !dbg !4159
  %79 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4160
  %decl_with_vis118 = bitcast %union.tree_node* %79 to %struct.tree_decl_with_vis*, !dbg !4160
  %common_flag119 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis118, i32 0, i32 4, !dbg !4160
  %80 = bitcast i24* %common_flag119 to i32*, !dbg !4160
  %bf.load120 = load i32, i32* %80, align 8, !dbg !4161
  %bf.value121 = and i32 %bf.clear117, 1, !dbg !4161
  %bf.shl122 = shl i32 %bf.value121, 3, !dbg !4161
  %bf.clear123 = and i32 %bf.load120, -9, !dbg !4161
  %bf.set124 = or i32 %bf.clear123, %bf.shl122, !dbg !4161
  store i32 %bf.set124, i32* %80, align 8, !dbg !4161
  %81 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4162
  %decl_with_vis125 = bitcast %union.tree_node* %81 to %struct.tree_decl_with_vis*, !dbg !4162
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis125, i32 0, i32 4, !dbg !4162
  %82 = bitcast i24* %weak_flag to i32*, !dbg !4162
  %bf.load126 = load i32, i32* %82, align 8, !dbg !4162
  %bf.lshr127 = lshr i32 %bf.load126, 7, !dbg !4162
  %bf.clear128 = and i32 %bf.lshr127, 1, !dbg !4162
  %83 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4163
  %decl_with_vis129 = bitcast %union.tree_node* %83 to %struct.tree_decl_with_vis*, !dbg !4163
  %weak_flag130 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis129, i32 0, i32 4, !dbg !4163
  %84 = bitcast i24* %weak_flag130 to i32*, !dbg !4163
  %bf.load131 = load i32, i32* %84, align 8, !dbg !4164
  %bf.value132 = and i32 %bf.clear128, 1, !dbg !4164
  %bf.shl133 = shl i32 %bf.value132, 7, !dbg !4164
  %bf.clear134 = and i32 %bf.load131, -129, !dbg !4164
  %bf.set135 = or i32 %bf.clear134, %bf.shl133, !dbg !4164
  store i32 %bf.set135, i32* %84, align 8, !dbg !4164
  %85 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4165
  %decl_with_vis136 = bitcast %union.tree_node* %85 to %struct.tree_decl_with_vis*, !dbg !4165
  %visibility = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis136, i32 0, i32 4, !dbg !4165
  %86 = bitcast i24* %visibility to i32*, !dbg !4165
  %bf.load137 = load i32, i32* %86, align 8, !dbg !4165
  %bf.lshr138 = lshr i32 %bf.load137, 10, !dbg !4165
  %bf.clear139 = and i32 %bf.lshr138, 3, !dbg !4165
  %87 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4166
  %decl_with_vis140 = bitcast %union.tree_node* %87 to %struct.tree_decl_with_vis*, !dbg !4166
  %visibility141 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis140, i32 0, i32 4, !dbg !4166
  %88 = bitcast i24* %visibility141 to i32*, !dbg !4166
  %bf.load142 = load i32, i32* %88, align 8, !dbg !4167
  %bf.value143 = and i32 %bf.clear139, 3, !dbg !4167
  %bf.shl144 = shl i32 %bf.value143, 10, !dbg !4167
  %bf.clear145 = and i32 %bf.load142, -3073, !dbg !4167
  %bf.set146 = or i32 %bf.clear145, %bf.shl144, !dbg !4167
  store i32 %bf.set146, i32* %88, align 8, !dbg !4167
  %89 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4168
  store %union.tree_node* %89, %union.tree_node** %retval, align 8, !dbg !4169
  br label %return, !dbg !4169

return:                                           ; preds = %if.end67, %if.then
  %90 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4170
  ret %union.tree_node* %90, !dbg !4170
}

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

declare dso_local i32 @tree_map_hash(i8*) #2

declare dso_local i32 @tree_map_base_eq(i8*, i8*) #2

declare dso_local i8* @ggc_calloc(i64, i64) #2

declare dso_local void @ggc_free(i8*) #2

declare dso_local %union.tree_node* @decl_assembler_name(%union.tree_node*) #2

declare dso_local i32 @htab_hash_string(i8*) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_emutls_object_name(%union.tree_node* %name) #0 !dbg !4171 {
entry:
  %name.addr = alloca %union.tree_node*, align 8
  %prefix = alloca i8*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !4172, metadata !DIExpression()), !dbg !4173
  call void @llvm.dbg.declare(metadata i8** %prefix, metadata !4174, metadata !DIExpression()), !dbg !4175
  %0 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 4), align 8, !dbg !4176
  %tobool = icmp ne i8* %0, null, !dbg !4177
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4177

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 4), align 8, !dbg !4178
  br label %cond.end, !dbg !4177

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4177

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %1, %cond.true ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.164, i64 0, i64 0), %cond.false ], !dbg !4177
  store i8* %cond, i8** %prefix, align 8, !dbg !4175
  %2 = load i8*, i8** %prefix, align 8, !dbg !4179
  %3 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !4180
  %call = call %union.tree_node* @prefix_name(i8* %2, %union.tree_node* %3), !dbg !4181
  ret %union.tree_node* %call, !dbg !4182
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_emutls_object_type() #0 !dbg !4183 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %type_name = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4186, metadata !DIExpression()), !dbg !4187
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_name, metadata !4188, metadata !DIExpression()), !dbg !4189
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !4190, metadata !DIExpression()), !dbg !4191
  %0 = load %union.tree_node*, %union.tree_node** @emutls_object_type, align 8, !dbg !4192
  store %union.tree_node* %0, %union.tree_node** %type, align 8, !dbg !4193
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4194
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !4194
  br i1 %tobool, label %if.then, label %if.end, !dbg !4196

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4197
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !4198
  br label %return, !dbg !4198

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node* (i32)*, %union.tree_node* (i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 0), align 8, !dbg !4199
  %call = call %union.tree_node* %3(i32 16), !dbg !4200
  store %union.tree_node* %call, %union.tree_node** %type, align 8, !dbg !4201
  store %union.tree_node* %call, %union.tree_node** @emutls_object_type, align 8, !dbg !4202
  store %union.tree_node* null, %union.tree_node** %type_name, align 8, !dbg !4203
  %4 = load %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 6), align 8, !dbg !4204
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4205
  %call1 = call %union.tree_node* %4(%union.tree_node* %5, %union.tree_node** %type_name), !dbg !4206
  store %union.tree_node* %call1, %union.tree_node** %field, align 8, !dbg !4207
  %6 = load %union.tree_node*, %union.tree_node** %type_name, align 8, !dbg !4208
  %tobool2 = icmp ne %union.tree_node* %6, null, !dbg !4208
  br i1 %tobool2, label %if.end5, label %if.then3, !dbg !4210

if.then3:                                         ; preds = %if.end
  %call4 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.165, i64 0, i64 0)), !dbg !4211
  store %union.tree_node* %call4, %union.tree_node** %type_name, align 8, !dbg !4212
  br label %if.end5, !dbg !4213

if.end5:                                          ; preds = %if.then3, %if.end
  %7 = load %union.tree_node*, %union.tree_node** %type_name, align 8, !dbg !4214
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4214
  %call6 = call %union.tree_node* @build_decl_stat(i32 0, i32 35, %union.tree_node* %7, %union.tree_node* %8), !dbg !4214
  store %union.tree_node* %call6, %union.tree_node** %type_name, align 8, !dbg !4215
  %9 = load %union.tree_node*, %union.tree_node** %type_name, align 8, !dbg !4216
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4217
  %type7 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !4217
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 12, !dbg !4217
  store %union.tree_node* %9, %union.tree_node** %name, align 8, !dbg !4218
  %11 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !4219
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4220
  %type8 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !4220
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i32 0, i32 1, !dbg !4220
  store %union.tree_node* %11, %union.tree_node** %values, align 8, !dbg !4221
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4222
  call void @layout_type(%union.tree_node* %13), !dbg !4223
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4224
  store %union.tree_node* %14, %union.tree_node** %retval, align 8, !dbg !4225
  br label %return, !dbg !4225

return:                                           ; preds = %if.end5, %if.then
  %15 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4226
  ret %union.tree_node* %15, !dbg !4226
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @make_decl_one_only(%union.tree_node* %decl, %union.tree_node* %comdat_group) #0 !dbg !4227 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %comdat_group.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4230, metadata !DIExpression()), !dbg !4231
  store %union.tree_node* %comdat_group, %union.tree_node** %comdat_group.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %comdat_group.addr, metadata !4232, metadata !DIExpression()), !dbg !4233
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4234
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4234
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4234
  %bf.load = load i64, i64* %1, align 8, !dbg !4234
  %bf.clear = and i64 %bf.load, 65535, !dbg !4234
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4234
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !4234
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !4234

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4234
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !4234
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !4234
  %bf.load2 = load i64, i64* %3, align 8, !dbg !4234
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !4234
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !4234
  %cmp5 = icmp eq i32 %bf.cast4, 29, !dbg !4234
  br i1 %cmp5, label %cond.false, label %cond.true, !dbg !4234

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 5882, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !4234
  br label %cond.end, !dbg !4234

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !4234

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4234
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4235
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !4235
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !4235
  %bf.load7 = load i64, i64* %5, align 8, !dbg !4236
  %bf.clear8 = and i64 %bf.load7, -134217729, !dbg !4236
  %bf.set = or i64 %bf.clear8, 134217728, !dbg !4236
  store i64 %bf.set, i64* %5, align 8, !dbg !4236
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4237
  %decl_with_vis = bitcast %union.tree_node* %6 to %struct.tree_decl_with_vis*, !dbg !4237
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !4237
  %7 = bitcast i24* %weak_flag to i32*, !dbg !4237
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4237
  %bf.clear10 = and i32 %bf.load9, -129, !dbg !4237
  %bf.set11 = or i32 %bf.clear10, 128, !dbg !4237
  store i32 %bf.set11, i32* %7, align 8, !dbg !4237
  %8 = load %union.tree_node*, %union.tree_node** %comdat_group.addr, align 8, !dbg !4240
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4241
  %decl_with_vis12 = bitcast %union.tree_node* %9 to %struct.tree_decl_with_vis*, !dbg !4241
  %comdat_group13 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis12, i32 0, i32 3, !dbg !4241
  store %union.tree_node* %8, %union.tree_node** %comdat_group13, align 8, !dbg !4242
  ret void, !dbg !4243
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @emutls_finish() #0 !dbg !4244 {
entry:
  %body = alloca %union.tree_node*, align 8
  %0 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 1), align 8, !dbg !4247
  %tobool = icmp ne i8* %0, null, !dbg !4249
  br i1 %tobool, label %if.then, label %if.end5, !dbg !4250

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %body, metadata !4251, metadata !DIExpression()), !dbg !4253
  store %union.tree_node* null, %union.tree_node** %body, align 8, !dbg !4253
  %1 = load %struct.htab*, %struct.htab** @emutls_htab, align 8, !dbg !4254
  %cmp = icmp eq %struct.htab* %1, null, !dbg !4256
  br i1 %cmp, label %if.then1, label %if.end, !dbg !4257

if.then1:                                         ; preds = %if.then
  br label %if.end5, !dbg !4258

if.end:                                           ; preds = %if.then
  %2 = load %struct.htab*, %struct.htab** @emutls_htab, align 8, !dbg !4259
  %3 = bitcast %union.tree_node** %body to i8*, !dbg !4260
  call void @htab_traverse_noresize(%struct.htab* %2, i32 (i8**, i8*)* @emutls_common_1, i8* %3), !dbg !4261
  %4 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !4262
  %cmp2 = icmp eq %union.tree_node* %4, null, !dbg !4264
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !4265

if.then3:                                         ; preds = %if.end
  br label %if.end5, !dbg !4266

if.end4:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !4267
  call void @cgraph_build_static_cdtor(i8 signext 73, %union.tree_node* %5, i32 65535), !dbg !4268
  br label %if.end5, !dbg !4269

if.end5:                                          ; preds = %if.then1, %if.then3, %if.end4, %entry
  ret void, !dbg !4270
}

declare dso_local void @htab_traverse_noresize(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @emutls_common_1(i8** %loc, i8* %xstmts) #0 !dbg !4271 {
entry:
  %retval = alloca i32, align 4
  %loc.addr = alloca i8**, align 8
  %xstmts.addr = alloca i8*, align 8
  %h = alloca %struct.tree_map*, align 8
  %args = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %pstmts = alloca %union.tree_node**, align 8
  %word_type_node = alloca %union.tree_node*, align 8
  store i8** %loc, i8*** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %loc.addr, metadata !4274, metadata !DIExpression()), !dbg !4275
  store i8* %xstmts, i8** %xstmts.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %xstmts.addr, metadata !4276, metadata !DIExpression()), !dbg !4277
  call void @llvm.dbg.declare(metadata %struct.tree_map** %h, metadata !4278, metadata !DIExpression()), !dbg !4279
  %0 = load i8**, i8*** %loc.addr, align 8, !dbg !4280
  %1 = bitcast i8** %0 to %struct.tree_map**, !dbg !4281
  %2 = load %struct.tree_map*, %struct.tree_map** %1, align 8, !dbg !4281
  store %struct.tree_map* %2, %struct.tree_map** %h, align 8, !dbg !4279
  call void @llvm.dbg.declare(metadata %union.tree_node** %args, metadata !4282, metadata !DIExpression()), !dbg !4283
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !4284, metadata !DIExpression()), !dbg !4285
  call void @llvm.dbg.declare(metadata %union.tree_node*** %pstmts, metadata !4286, metadata !DIExpression()), !dbg !4287
  %3 = load i8*, i8** %xstmts.addr, align 8, !dbg !4288
  %4 = bitcast i8* %3 to %union.tree_node**, !dbg !4289
  store %union.tree_node** %4, %union.tree_node*** %pstmts, align 8, !dbg !4287
  call void @llvm.dbg.declare(metadata %union.tree_node** %word_type_node, metadata !4290, metadata !DIExpression()), !dbg !4291
  %5 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4292
  %base = getelementptr inbounds %struct.tree_map, %struct.tree_map* %5, i32 0, i32 0, !dbg !4292
  %from = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base, i32 0, i32 0, !dbg !4292
  %6 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !4292
  %decl_with_vis = bitcast %union.tree_node* %6 to %struct.tree_decl_with_vis*, !dbg !4292
  %common_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !4292
  %7 = bitcast i24* %common_flag to i32*, !dbg !4292
  %bf.load = load i32, i32* %7, align 8, !dbg !4292
  %bf.lshr = lshr i32 %bf.load, 3, !dbg !4292
  %bf.clear = and i32 %bf.lshr, 1, !dbg !4292
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !4292
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4294

lor.lhs.false:                                    ; preds = %entry
  %8 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4295
  %base1 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %8, i32 0, i32 0, !dbg !4295
  %from2 = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base1, i32 0, i32 0, !dbg !4295
  %9 = load %union.tree_node*, %union.tree_node** %from2, align 8, !dbg !4295
  %decl_common = bitcast %union.tree_node* %9 to %struct.tree_decl_common*, !dbg !4295
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !4295
  %10 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !4295
  %tobool3 = icmp ne %union.tree_node* %10, null, !dbg !4295
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !4296

land.lhs.true:                                    ; preds = %lor.lhs.false
  %11 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4297
  %base4 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %11, i32 0, i32 0, !dbg !4297
  %from5 = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base4, i32 0, i32 0, !dbg !4297
  %12 = load %union.tree_node*, %union.tree_node** %from5, align 8, !dbg !4297
  %decl_common6 = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !4297
  %initial7 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common6, i32 0, i32 5, !dbg !4297
  %13 = load %union.tree_node*, %union.tree_node** %initial7, align 8, !dbg !4297
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !4298
  %cmp = icmp ne %union.tree_node* %13, %14, !dbg !4299
  br i1 %cmp, label %if.then, label %if.end, !dbg !4300

if.then:                                          ; preds = %land.lhs.true, %entry
  store i32 1, i32* %retval, align 4, !dbg !4301
  br label %return, !dbg !4301

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %15 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 2), align 8, !dbg !4302
  %16 = load i32, i32* @word_mode, align 4, !dbg !4303
  %call = call %union.tree_node* %15(i32 %16, i32 1), !dbg !4304
  store %union.tree_node* %call, %union.tree_node** %word_type_node, align 8, !dbg !4305
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !4306
  store %union.tree_node* %17, %union.tree_node** %x, align 8, !dbg !4307
  %18 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4308
  %call8 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %18, %union.tree_node* null), !dbg !4308
  store %union.tree_node* %call8, %union.tree_node** %args, align 8, !dbg !4309
  %19 = load %union.tree_node*, %union.tree_node** %word_type_node, align 8, !dbg !4310
  %20 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4311
  %base9 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %20, i32 0, i32 0, !dbg !4311
  %from10 = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base9, i32 0, i32 0, !dbg !4311
  %21 = load %union.tree_node*, %union.tree_node** %from10, align 8, !dbg !4311
  %decl_common11 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !4311
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common11, i32 0, i32 3, !dbg !4311
  %22 = load i32, i32* %align, align 8, !dbg !4311
  %div = udiv i32 %22, 8, !dbg !4311
  %conv = zext i32 %div to i64, !dbg !4311
  %call12 = call %union.tree_node* @build_int_cst(%union.tree_node* %19, i64 %conv), !dbg !4312
  store %union.tree_node* %call12, %union.tree_node** %x, align 8, !dbg !4313
  %23 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4314
  %24 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !4314
  %call13 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %23, %union.tree_node* %24), !dbg !4314
  store %union.tree_node* %call13, %union.tree_node** %args, align 8, !dbg !4315
  %25 = load %union.tree_node*, %union.tree_node** %word_type_node, align 8, !dbg !4316
  %26 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4316
  %base14 = getelementptr inbounds %struct.tree_map, %struct.tree_map* %26, i32 0, i32 0, !dbg !4316
  %from15 = getelementptr inbounds %struct.tree_map_base, %struct.tree_map_base* %base14, i32 0, i32 0, !dbg !4316
  %27 = load %union.tree_node*, %union.tree_node** %from15, align 8, !dbg !4316
  %decl_common16 = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !4316
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common16, i32 0, i32 4, !dbg !4316
  %28 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !4316
  %call17 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %25, %union.tree_node* %28), !dbg !4316
  store %union.tree_node* %call17, %union.tree_node** %x, align 8, !dbg !4317
  %29 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4318
  %30 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !4318
  %call18 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %29, %union.tree_node* %30), !dbg !4318
  store %union.tree_node* %call18, %union.tree_node** %args, align 8, !dbg !4319
  %31 = load %struct.tree_map*, %struct.tree_map** %h, align 8, !dbg !4320
  %to = getelementptr inbounds %struct.tree_map, %struct.tree_map* %31, i32 0, i32 2, !dbg !4320
  %32 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !4320
  %call19 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %32), !dbg !4320
  store %union.tree_node* %call19, %union.tree_node** %x, align 8, !dbg !4321
  %33 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4322
  %34 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !4322
  %call20 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %33, %union.tree_node* %34), !dbg !4322
  store %union.tree_node* %call20, %union.tree_node** %args, align 8, !dbg !4323
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 549), align 8, !dbg !4324
  store %union.tree_node* %35, %union.tree_node** %x, align 8, !dbg !4325
  %36 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4326
  %37 = load %union.tree_node*, %union.tree_node** %args, align 8, !dbg !4327
  %call21 = call %union.tree_node* @build_function_call_expr(i32 0, %union.tree_node* %36, %union.tree_node* %37), !dbg !4328
  store %union.tree_node* %call21, %union.tree_node** %x, align 8, !dbg !4329
  %38 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !4330
  %39 = load %union.tree_node**, %union.tree_node*** %pstmts, align 8, !dbg !4331
  call void @append_to_statement_list(%union.tree_node* %38, %union.tree_node** %39), !dbg !4332
  store i32 1, i32* %retval, align 4, !dbg !4333
  br label %return, !dbg !4333

return:                                           ; preds = %if.end, %if.then
  %40 = load i32, i32* %retval, align 4, !dbg !4334
  ret i32 %40, !dbg !4334
}

declare dso_local void @cgraph_build_static_cdtor(i8 signext, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @get_unnamed_section(i32 %flags, void (i8*)* %callback, i8* %data) #0 !dbg !4335 {
entry:
  %flags.addr = alloca i32, align 4
  %callback.addr = alloca void (i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %sect = alloca %union.section*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4338, metadata !DIExpression()), !dbg !4339
  store void (i8*)* %callback, void (i8*)** %callback.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*)** %callback.addr, metadata !4340, metadata !DIExpression()), !dbg !4341
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4342, metadata !DIExpression()), !dbg !4343
  call void @llvm.dbg.declare(metadata %union.section** %sect, metadata !4344, metadata !DIExpression()), !dbg !4345
  %call = call i8* @ggc_alloc_stat(i64 32), !dbg !4346
  %0 = bitcast i8* %call to %union.section*, !dbg !4346
  store %union.section* %0, %union.section** %sect, align 8, !dbg !4347
  %1 = load i32, i32* %flags.addr, align 4, !dbg !4348
  %2 = load %union.section*, %union.section** %sect, align 8, !dbg !4349
  %unnamed = bitcast %union.section* %2 to %struct.unnamed_section*, !dbg !4350
  %common = getelementptr inbounds %struct.unnamed_section, %struct.unnamed_section* %unnamed, i32 0, i32 0, !dbg !4351
  %flags1 = getelementptr inbounds %struct.section_common, %struct.section_common* %common, i32 0, i32 0, !dbg !4352
  store i32 %1, i32* %flags1, align 8, !dbg !4353
  %3 = load void (i8*)*, void (i8*)** %callback.addr, align 8, !dbg !4354
  %4 = load %union.section*, %union.section** %sect, align 8, !dbg !4355
  %unnamed2 = bitcast %union.section* %4 to %struct.unnamed_section*, !dbg !4356
  %callback3 = getelementptr inbounds %struct.unnamed_section, %struct.unnamed_section* %unnamed2, i32 0, i32 1, !dbg !4357
  store void (i8*)* %3, void (i8*)** %callback3, align 8, !dbg !4358
  %5 = load i8*, i8** %data.addr, align 8, !dbg !4359
  %6 = load %union.section*, %union.section** %sect, align 8, !dbg !4360
  %unnamed4 = bitcast %union.section* %6 to %struct.unnamed_section*, !dbg !4361
  %data5 = getelementptr inbounds %struct.unnamed_section, %struct.unnamed_section* %unnamed4, i32 0, i32 2, !dbg !4362
  store i8* %5, i8** %data5, align 8, !dbg !4363
  %7 = load %union.section*, %union.section** @unnamed_sections, align 8, !dbg !4364
  %8 = load %union.section*, %union.section** %sect, align 8, !dbg !4365
  %unnamed6 = bitcast %union.section* %8 to %struct.unnamed_section*, !dbg !4366
  %next = getelementptr inbounds %struct.unnamed_section, %struct.unnamed_section* %unnamed6, i32 0, i32 3, !dbg !4367
  store %union.section* %7, %union.section** %next, align 8, !dbg !4368
  %9 = load %union.section*, %union.section** %sect, align 8, !dbg !4369
  store %union.section* %9, %union.section** @unnamed_sections, align 8, !dbg !4370
  %10 = load %union.section*, %union.section** %sect, align 8, !dbg !4371
  ret %union.section* %10, !dbg !4372
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @get_section(i8* %name, i32 %flags, %union.tree_node* %decl) #0 !dbg !4373 {
entry:
  %name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  %sect = alloca %union.section*, align 8
  %slot = alloca %union.section**, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !4376, metadata !DIExpression()), !dbg !4377
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4378, metadata !DIExpression()), !dbg !4379
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4380, metadata !DIExpression()), !dbg !4381
  call void @llvm.dbg.declare(metadata %union.section** %sect, metadata !4382, metadata !DIExpression()), !dbg !4383
  call void @llvm.dbg.declare(metadata %union.section*** %slot, metadata !4384, metadata !DIExpression()), !dbg !4385
  %0 = load %struct.htab*, %struct.htab** @section_htab, align 8, !dbg !4386
  %1 = load i8*, i8** %name.addr, align 8, !dbg !4387
  %2 = load i8*, i8** %name.addr, align 8, !dbg !4388
  %call = call i32 @htab_hash_string(i8* %2), !dbg !4389
  %call1 = call i8** @htab_find_slot_with_hash(%struct.htab* %0, i8* %1, i32 %call, i32 1), !dbg !4390
  %3 = bitcast i8** %call1 to %union.section**, !dbg !4391
  store %union.section** %3, %union.section*** %slot, align 8, !dbg !4392
  %4 = load i32, i32* %flags.addr, align 4, !dbg !4393
  %or = or i32 %4, 2097152, !dbg !4393
  store i32 %or, i32* %flags.addr, align 4, !dbg !4393
  %5 = load %union.section**, %union.section*** %slot, align 8, !dbg !4394
  %6 = load %union.section*, %union.section** %5, align 8, !dbg !4396
  %cmp = icmp eq %union.section* %6, null, !dbg !4397
  br i1 %cmp, label %if.then, label %if.else, !dbg !4398

if.then:                                          ; preds = %entry
  %call2 = call i8* @ggc_alloc_stat(i64 32), !dbg !4399
  %7 = bitcast i8* %call2 to %union.section*, !dbg !4399
  store %union.section* %7, %union.section** %sect, align 8, !dbg !4401
  %8 = load i32, i32* %flags.addr, align 4, !dbg !4402
  %9 = load %union.section*, %union.section** %sect, align 8, !dbg !4403
  %named = bitcast %union.section* %9 to %struct.named_section*, !dbg !4404
  %common = getelementptr inbounds %struct.named_section, %struct.named_section* %named, i32 0, i32 0, !dbg !4405
  %flags3 = getelementptr inbounds %struct.section_common, %struct.section_common* %common, i32 0, i32 0, !dbg !4406
  store i32 %8, i32* %flags3, align 8, !dbg !4407
  %10 = load i8*, i8** %name.addr, align 8, !dbg !4408
  %call4 = call i8* @ggc_alloc_string(i8* %10, i32 -1), !dbg !4408
  %11 = load %union.section*, %union.section** %sect, align 8, !dbg !4409
  %named5 = bitcast %union.section* %11 to %struct.named_section*, !dbg !4410
  %name6 = getelementptr inbounds %struct.named_section, %struct.named_section* %named5, i32 0, i32 1, !dbg !4411
  store i8* %call4, i8** %name6, align 8, !dbg !4412
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4413
  %13 = load %union.section*, %union.section** %sect, align 8, !dbg !4414
  %named7 = bitcast %union.section* %13 to %struct.named_section*, !dbg !4415
  %decl8 = getelementptr inbounds %struct.named_section, %struct.named_section* %named7, i32 0, i32 2, !dbg !4416
  store %union.tree_node* %12, %union.tree_node** %decl8, align 8, !dbg !4417
  %14 = load %union.section*, %union.section** %sect, align 8, !dbg !4418
  %15 = load %union.section**, %union.section*** %slot, align 8, !dbg !4419
  store %union.section* %14, %union.section** %15, align 8, !dbg !4420
  br label %if.end23, !dbg !4421

if.else:                                          ; preds = %entry
  %16 = load %union.section**, %union.section*** %slot, align 8, !dbg !4422
  %17 = load %union.section*, %union.section** %16, align 8, !dbg !4424
  store %union.section* %17, %union.section** %sect, align 8, !dbg !4425
  %18 = load %union.section*, %union.section** %sect, align 8, !dbg !4426
  %common9 = bitcast %union.section* %18 to %struct.section_common*, !dbg !4428
  %flags10 = getelementptr inbounds %struct.section_common, %struct.section_common* %common9, i32 0, i32 0, !dbg !4429
  %19 = load i32, i32* %flags10, align 8, !dbg !4429
  %and = and i32 %19, -1048577, !dbg !4430
  %20 = load i32, i32* %flags.addr, align 4, !dbg !4431
  %cmp11 = icmp ne i32 %and, %20, !dbg !4432
  br i1 %cmp11, label %land.lhs.true, label %if.end22, !dbg !4433

land.lhs.true:                                    ; preds = %if.else
  %21 = load %union.section*, %union.section** %sect, align 8, !dbg !4434
  %common12 = bitcast %union.section* %21 to %struct.section_common*, !dbg !4435
  %flags13 = getelementptr inbounds %struct.section_common, %struct.section_common* %common12, i32 0, i32 0, !dbg !4436
  %22 = load i32, i32* %flags13, align 8, !dbg !4436
  %23 = load i32, i32* %flags.addr, align 4, !dbg !4437
  %or14 = or i32 %22, %23, !dbg !4438
  %and15 = and i32 %or14, 131072, !dbg !4439
  %cmp16 = icmp eq i32 %and15, 0, !dbg !4440
  br i1 %cmp16, label %if.then17, label %if.end22, !dbg !4441

if.then17:                                        ; preds = %land.lhs.true
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4442
  %cmp18 = icmp eq %union.tree_node* %24, null, !dbg !4445
  br i1 %cmp18, label %if.then19, label %if.end, !dbg !4446

if.then19:                                        ; preds = %if.then17
  %25 = load %union.section*, %union.section** %sect, align 8, !dbg !4447
  %named20 = bitcast %union.section* %25 to %struct.named_section*, !dbg !4448
  %decl21 = getelementptr inbounds %struct.named_section, %struct.named_section* %named20, i32 0, i32 2, !dbg !4449
  %26 = load %union.tree_node*, %union.tree_node** %decl21, align 8, !dbg !4449
  store %union.tree_node* %26, %union.tree_node** %decl.addr, align 8, !dbg !4450
  br label %if.end, !dbg !4451

if.end:                                           ; preds = %if.then19, %if.then17
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4452
  %tobool = icmp ne %union.tree_node* %27, null, !dbg !4452
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4452

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 579, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !4452
  br label %cond.end, !dbg !4452

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4452

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4452
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4453
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0), %union.tree_node* %28), !dbg !4454
  br label %if.end22, !dbg !4455

if.end22:                                         ; preds = %cond.end, %land.lhs.true, %if.else
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then
  %29 = load %union.section*, %union.section** %sect, align 8, !dbg !4456
  ret %union.section* %29, !dbg !4457
}

declare dso_local i8* @ggc_alloc_string(i8*, i32) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local void @error(i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @unlikely_text_section() #0 !dbg !4458 {
entry:
  %retval = alloca %union.section*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4461
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4461
  %tobool = icmp ne %struct.function* %add.ptr, null, !dbg !4461
  br i1 %tobool, label %if.then, label %if.else, !dbg !4463

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !4464
  %tobool1 = icmp ne i8* %1, null, !dbg !4467
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !4468

if.then2:                                         ; preds = %if.then
  call void @initialize_cold_section_name(), !dbg !4469
  br label %if.end, !dbg !4469

if.end:                                           ; preds = %if.then2, %if.then
  %2 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !4470
  %call = call %union.section* @get_named_section(%union.tree_node* null, i8* %2, i32 0), !dbg !4471
  store %union.section* %call, %union.section** %retval, align 8, !dbg !4472
  br label %return, !dbg !4472

if.else:                                          ; preds = %entry
  %call3 = call %union.section* @get_named_section(%union.tree_node* null, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0), i32 0), !dbg !4473
  store %union.section* %call3, %union.section** %retval, align 8, !dbg !4474
  br label %return, !dbg !4474

return:                                           ; preds = %if.else, %if.end
  %3 = load %union.section*, %union.section** %retval, align 8, !dbg !4475
  ret %union.section* %3, !dbg !4475
}

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_cold_section_name() #0 !dbg !4476 {
entry:
  %stripped_name = alloca i8*, align 8
  %name = alloca i8*, align 8
  %buffer = alloca i8*, align 8
  %dsn = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata i8** %stripped_name, metadata !4477, metadata !DIExpression()), !dbg !4478
  call void @llvm.dbg.declare(metadata i8** %name, metadata !4479, metadata !DIExpression()), !dbg !4480
  call void @llvm.dbg.declare(metadata i8** %buffer, metadata !4481, metadata !DIExpression()), !dbg !4482
  call void @llvm.dbg.declare(metadata %union.tree_node** %dsn, metadata !4483, metadata !DIExpression()), !dbg !4484
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4485
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4485
  %tobool = icmp ne %struct.function* %add.ptr, null, !dbg !4485
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !4485

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4485
  %tobool1 = icmp ne %union.tree_node* %1, null, !dbg !4485
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !4485

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 657, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !4485
  br label %cond.end, !dbg !4485

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4485

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4485
  %2 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !4486
  %tobool2 = icmp ne i8* %2, null, !dbg !4488
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4489

if.then:                                          ; preds = %cond.end
  br label %if.end16, !dbg !4490

if.end:                                           ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4491
  %decl_with_vis = bitcast %union.tree_node* %3 to %struct.tree_decl_with_vis*, !dbg !4491
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 2, !dbg !4491
  %4 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !4491
  store %union.tree_node* %4, %union.tree_node** %dsn, align 8, !dbg !4492
  %5 = load i32, i32* @flag_function_sections, align 4, !dbg !4493
  %tobool3 = icmp ne i32 %5, 0, !dbg !4493
  br i1 %tobool3, label %land.lhs.true4, label %if.else, !dbg !4495

land.lhs.true4:                                   ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %dsn, align 8, !dbg !4496
  %tobool5 = icmp ne %union.tree_node* %6, null, !dbg !4496
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !4497

if.then6:                                         ; preds = %land.lhs.true4
  %7 = load %union.tree_node*, %union.tree_node** %dsn, align 8, !dbg !4498
  %string = bitcast %union.tree_node* %7 to %struct.tree_string*, !dbg !4498
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 1, !dbg !4498
  %8 = load i32, i32* %length, align 8, !dbg !4498
  %add = add nsw i32 %8, 1, !dbg !4498
  %conv = sext i32 %add to i64, !dbg !4498
  %9 = alloca i8, i64 %conv, align 16, !dbg !4498
  store i8* %9, i8** %name, align 8, !dbg !4500
  %10 = load i8*, i8** %name, align 8, !dbg !4501
  %11 = load %union.tree_node*, %union.tree_node** %dsn, align 8, !dbg !4502
  %string7 = bitcast %union.tree_node* %11 to %struct.tree_string*, !dbg !4502
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string7, i32 0, i32 2, !dbg !4502
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !4503
  %12 = load %union.tree_node*, %union.tree_node** %dsn, align 8, !dbg !4504
  %string8 = bitcast %union.tree_node* %12 to %struct.tree_string*, !dbg !4504
  %length9 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string8, i32 0, i32 1, !dbg !4504
  %13 = load i32, i32* %length9, align 8, !dbg !4504
  %add10 = add nsw i32 %13, 1, !dbg !4505
  %conv11 = sext i32 %add10 to i64, !dbg !4504
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 4 %arraydecay, i64 %conv11, i1 false), !dbg !4503
  %14 = load i8* (i8*)*, i8* (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 52), align 8, !dbg !4506
  %15 = load i8*, i8** %name, align 8, !dbg !4507
  %call = call i8* %14(i8* %15), !dbg !4508
  store i8* %call, i8** %stripped_name, align 8, !dbg !4509
  %16 = load i8*, i8** %stripped_name, align 8, !dbg !4510
  %call12 = call i64 (i8*, ...) @concat_length(i8* %16, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.166, i64 0, i64 0), i8* null), !dbg !4510
  %add13 = add i64 %call12, 1, !dbg !4510
  %17 = alloca i8, i64 %add13, align 16, !dbg !4510
  store i8* %17, i8** @libiberty_concat_ptr, align 8, !dbg !4510
  %18 = load i8*, i8** %stripped_name, align 8, !dbg !4510
  %call14 = call i8* (i8*, ...) @concat_copy2(i8* %18, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.166, i64 0, i64 0), i8* null), !dbg !4510
  store i8* %call14, i8** %buffer, align 8, !dbg !4511
  %19 = load i8*, i8** %buffer, align 8, !dbg !4512
  %call15 = call i8* @ggc_alloc_string(i8* %19, i32 -1), !dbg !4512
  store i8* %call15, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !4513
  br label %if.end16, !dbg !4514

if.else:                                          ; preds = %land.lhs.true4, %if.end
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0), i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !4515
  br label %if.end16

if.end16:                                         ; preds = %if.then, %if.else, %if.then6
  ret void, !dbg !4516
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @get_named_section(%union.tree_node* %decl, i8* %name, i32 %reloc) #0 !dbg !4517 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %reloc.addr = alloca i32, align 4
  %flags = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4520, metadata !DIExpression()), !dbg !4521
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !4522, metadata !DIExpression()), !dbg !4523
  store i32 %reloc, i32* %reloc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reloc.addr, metadata !4524, metadata !DIExpression()), !dbg !4525
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !4526, metadata !DIExpression()), !dbg !4527
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4528
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4528
  br i1 %tobool, label %lor.lhs.false, label %cond.false, !dbg !4528

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4528
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !4528
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !4528
  %bf.load = load i64, i64* %2, align 8, !dbg !4528
  %bf.clear = and i64 %bf.load, 65535, !dbg !4528
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4528
  %idxprom = sext i32 %bf.cast to i64, !dbg !4528
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4528
  %3 = load i32, i32* %arrayidx, align 4, !dbg !4528
  %cmp = icmp eq i32 %3, 3, !dbg !4528
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4528

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 725, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !4528
  br label %cond.end, !dbg !4528

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !4528

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4528
  %4 = load i8*, i8** %name.addr, align 8, !dbg !4529
  %cmp1 = icmp eq i8* %4, null, !dbg !4531
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4532

if.then:                                          ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4533
  %decl_with_vis = bitcast %union.tree_node* %5 to %struct.tree_decl_with_vis*, !dbg !4533
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 2, !dbg !4533
  %6 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !4533
  %string = bitcast %union.tree_node* %6 to %struct.tree_string*, !dbg !4533
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !4533
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !4533
  store i8* %arraydecay, i8** %name.addr, align 8, !dbg !4534
  br label %if.end, !dbg !4535

if.end:                                           ; preds = %if.then, %cond.end
  %7 = load i32 (%union.tree_node*, i8*, i32)*, i32 (%union.tree_node*, i8*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 31), align 8, !dbg !4536
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4537
  %9 = load i8*, i8** %name.addr, align 8, !dbg !4538
  %10 = load i32, i32* %reloc.addr, align 4, !dbg !4539
  %call = call i32 %7(%union.tree_node* %8, i8* %9, i32 %10), !dbg !4540
  store i32 %call, i32* %flags, align 4, !dbg !4541
  %11 = load i8*, i8** %name.addr, align 8, !dbg !4542
  %12 = load i32, i32* %flags, align 4, !dbg !4543
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4544
  %call2 = call %union.section* @get_section(i8* %11, i32 %12, %union.tree_node* %13), !dbg !4545
  ret %union.section* %call2, !dbg !4546
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @unlikely_text_section_p(%union.section* %sect) #0 !dbg !4547 {
entry:
  %sect.addr = alloca %union.section*, align 8
  %name = alloca i8*, align 8
  store %union.section* %sect, %union.section** %sect.addr, align 8
  call void @llvm.dbg.declare(metadata %union.section** %sect.addr, metadata !4550, metadata !DIExpression()), !dbg !4551
  call void @llvm.dbg.declare(metadata i8** %name, metadata !4552, metadata !DIExpression()), !dbg !4553
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4554
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4554
  %tobool = icmp ne %struct.function* %add.ptr, null, !dbg !4554
  br i1 %tobool, label %if.then, label %if.else, !dbg !4556

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !4557
  store i8* %1, i8** %name, align 8, !dbg !4558
  br label %if.end, !dbg !4559

if.else:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0), i8** %name, align 8, !dbg !4560
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load i8*, i8** %name, align 8, !dbg !4561
  %tobool1 = icmp ne i8* %2, null, !dbg !4561
  br i1 %tobool1, label %land.lhs.true, label %land.end, !dbg !4562

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.section*, %union.section** %sect.addr, align 8, !dbg !4563
  %tobool2 = icmp ne %union.section* %3, null, !dbg !4563
  br i1 %tobool2, label %land.lhs.true3, label %land.end, !dbg !4564

land.lhs.true3:                                   ; preds = %land.lhs.true
  %4 = load %union.section*, %union.section** %sect.addr, align 8, !dbg !4565
  %common = bitcast %union.section* %4 to %struct.section_common*, !dbg !4565
  %flags = getelementptr inbounds %struct.section_common, %struct.section_common* %common, i32 0, i32 0, !dbg !4565
  %5 = load i32, i32* %flags, align 8, !dbg !4565
  %and = and i32 %5, 6291456, !dbg !4565
  %cmp = icmp eq i32 %and, 2097152, !dbg !4566
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4567

land.rhs:                                         ; preds = %land.lhs.true3
  %6 = load i8*, i8** %name, align 8, !dbg !4568
  %7 = load %union.section*, %union.section** %sect.addr, align 8, !dbg !4569
  %named = bitcast %union.section* %7 to %struct.named_section*, !dbg !4570
  %name4 = getelementptr inbounds %struct.named_section, %struct.named_section* %named, i32 0, i32 1, !dbg !4571
  %8 = load i8*, i8** %name4, align 8, !dbg !4571
  %call = call i32 @strcmp(i8* %6, i8* %8), !dbg !4572
  %cmp5 = icmp eq i32 %call, 0, !dbg !4573
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true3, %land.lhs.true, %if.end
  %9 = phi i1 [ false, %land.lhs.true3 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %cmp5, %land.rhs ], !dbg !4574
  %land.ext = zext i1 %9 to i32, !dbg !4567
  %conv = trunc i32 %land.ext to i8, !dbg !4575
  ret i8 %conv, !dbg !4576
}

declare dso_local i32 @strcmp(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @resolve_unique_section(%union.tree_node* %decl, i32 %reloc, i32 %flag_function_or_data_sections) #0 !dbg !4577 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %reloc.addr = alloca i32, align 4
  %flag_function_or_data_sections.addr = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4580, metadata !DIExpression()), !dbg !4581
  store i32 %reloc, i32* %reloc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reloc.addr, metadata !4582, metadata !DIExpression()), !dbg !4583
  store i32 %flag_function_or_data_sections, i32* %flag_function_or_data_sections.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flag_function_or_data_sections.addr, metadata !4584, metadata !DIExpression()), !dbg !4585
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4586
  %decl_with_vis = bitcast %union.tree_node* %0 to %struct.tree_decl_with_vis*, !dbg !4586
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 2, !dbg !4586
  %1 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !4586
  %cmp = icmp eq %union.tree_node* %1, null, !dbg !4588
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4589

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 110), align 1, !dbg !4590
  %conv = zext i8 %2 to i32, !dbg !4591
  %tobool = icmp ne i32 %conv, 0, !dbg !4591
  br i1 %tobool, label %land.lhs.true1, label %if.end, !dbg !4592

land.lhs.true1:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flag_function_or_data_sections.addr, align 4, !dbg !4593
  %tobool2 = icmp ne i32 %3, 0, !dbg !4593
  br i1 %tobool2, label %if.then, label %lor.lhs.false, !dbg !4594

lor.lhs.false:                                    ; preds = %land.lhs.true1
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4595
  %decl_with_vis3 = bitcast %union.tree_node* %4 to %struct.tree_decl_with_vis*, !dbg !4595
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis3, i32 0, i32 3, !dbg !4595
  %5 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !4595
  %cmp4 = icmp ne %union.tree_node* %5, null, !dbg !4595
  br i1 %cmp4, label %if.then, label %if.end, !dbg !4596

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true1
  %6 = load void (%union.tree_node*, i32)*, void (%union.tree_node*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 23), align 8, !dbg !4597
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4598
  %8 = load i32, i32* %reloc.addr, align 4, !dbg !4599
  call void %6(%union.tree_node* %7, i32 %8), !dbg !4600
  br label %if.end, !dbg !4600

if.end:                                           ; preds = %if.then, %lor.lhs.false, %land.lhs.true, %entry
  ret void, !dbg !4601
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @function_section(%union.tree_node* %decl) #0 !dbg !4602 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %reloc = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4605, metadata !DIExpression()), !dbg !4606
  call void @llvm.dbg.declare(metadata i32* %reloc, metadata !4607, metadata !DIExpression()), !dbg !4608
  store i32 0, i32* %reloc, align 4, !dbg !4608
  %0 = load i8, i8* @first_function_block_is_cold, align 1, !dbg !4609
  %tobool = icmp ne i8 %0, 0, !dbg !4609
  br i1 %tobool, label %if.then, label %if.end, !dbg !4611

if.then:                                          ; preds = %entry
  store i32 1, i32* %reloc, align 4, !dbg !4612
  br label %if.end, !dbg !4613

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %reloc, align 4, !dbg !4614
  %tobool1 = icmp ne i32 %1, 0, !dbg !4614
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !4614

cond.true:                                        ; preds = %if.end
  %call = call %union.section* @unlikely_text_section(), !dbg !4615
  br label %cond.end, !dbg !4614

cond.false:                                       ; preds = %if.end
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4616
  %call2 = call %union.section* @hot_function_section(%union.tree_node* %2), !dbg !4617
  br label %cond.end, !dbg !4614

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.section* [ %call, %cond.true ], [ %call2, %cond.false ], !dbg !4614
  ret %union.section* %cond, !dbg !4618
}

; Function Attrs: noinline nounwind uwtable
define internal %union.section* @hot_function_section(%union.tree_node* %decl) #0 !dbg !4619 {
entry:
  %retval = alloca %union.section*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4620, metadata !DIExpression()), !dbg !4621
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4622
  %cmp = icmp ne %union.tree_node* %0, null, !dbg !4624
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !4625

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4626
  %decl_with_vis = bitcast %union.tree_node* %1 to %struct.tree_decl_with_vis*, !dbg !4626
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 2, !dbg !4626
  %2 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !4626
  %cmp1 = icmp ne %union.tree_node* %2, null, !dbg !4627
  br i1 %cmp1, label %land.lhs.true2, label %if.else, !dbg !4628

land.lhs.true2:                                   ; preds = %land.lhs.true
  %3 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 110), align 1, !dbg !4629
  %conv = zext i8 %3 to i32, !dbg !4630
  %tobool = icmp ne i32 %conv, 0, !dbg !4630
  br i1 %tobool, label %if.then, label %if.else, !dbg !4631

if.then:                                          ; preds = %land.lhs.true2
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4632
  %call = call %union.section* @get_named_section(%union.tree_node* %4, i8* null, i32 0), !dbg !4633
  store %union.section* %call, %union.section** %retval, align 8, !dbg !4634
  br label %return, !dbg !4634

if.else:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %5 = load %union.section*, %union.section** @text_section, align 8, !dbg !4635
  store %union.section* %5, %union.section** %retval, align 8, !dbg !4636
  br label %return, !dbg !4636

return:                                           ; preds = %if.else, %if.then
  %6 = load %union.section*, %union.section** %retval, align 8, !dbg !4637
  ret %union.section* %6, !dbg !4637
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @current_function_section() #0 !dbg !4638 {
entry:
  %0 = load i8, i8* @in_cold_section_p, align 1, !dbg !4639
  %conv = zext i8 %0 to i32, !dbg !4639
  %tobool = icmp ne i32 %conv, 0, !dbg !4639
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4639

cond.true:                                        ; preds = %entry
  %call = call %union.section* @unlikely_text_section(), !dbg !4640
  br label %cond.end, !dbg !4639

cond.false:                                       ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4641
  %call1 = call %union.section* @hot_function_section(%union.tree_node* %1), !dbg !4642
  br label %cond.end, !dbg !4639

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.section* [ %call, %cond.true ], [ %call1, %cond.false ], !dbg !4639
  ret %union.section* %cond, !dbg !4643
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @default_function_rodata_section(%union.tree_node* %decl) #0 !dbg !4644 {
entry:
  %retval = alloca %union.section*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  %dot = alloca i8*, align 8
  %len = alloca i64, align 8
  %rname = alloca i8*, align 8
  %len19 = alloca i64, align 8
  %rname22 = alloca i8*, align 8
  %len32 = alloca i64, align 8
  %rname35 = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4645, metadata !DIExpression()), !dbg !4646
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4647
  %cmp = icmp ne %union.tree_node* %0, null, !dbg !4649
  br i1 %cmp, label %land.lhs.true, label %if.end43, !dbg !4650

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4651
  %decl_with_vis = bitcast %union.tree_node* %1 to %struct.tree_decl_with_vis*, !dbg !4651
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 2, !dbg !4651
  %2 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !4651
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !4651
  br i1 %tobool, label %if.then, label %if.end43, !dbg !4652

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %name, metadata !4653, metadata !DIExpression()), !dbg !4655
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4656
  %decl_with_vis1 = bitcast %union.tree_node* %3 to %struct.tree_decl_with_vis*, !dbg !4656
  %section_name2 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis1, i32 0, i32 2, !dbg !4656
  %4 = load %union.tree_node*, %union.tree_node** %section_name2, align 8, !dbg !4656
  %string = bitcast %union.tree_node* %4 to %struct.tree_string*, !dbg !4656
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !4656
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !4656
  store i8* %arraydecay, i8** %name, align 8, !dbg !4655
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4657
  %decl_with_vis3 = bitcast %union.tree_node* %5 to %struct.tree_decl_with_vis*, !dbg !4657
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis3, i32 0, i32 3, !dbg !4657
  %6 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !4657
  %cmp4 = icmp ne %union.tree_node* %6, null, !dbg !4657
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !4659

if.then5:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i8** %dot, metadata !4660, metadata !DIExpression()), !dbg !4662
  call void @llvm.dbg.declare(metadata i64* %len, metadata !4663, metadata !DIExpression()), !dbg !4664
  call void @llvm.dbg.declare(metadata i8** %rname, metadata !4665, metadata !DIExpression()), !dbg !4666
  %7 = load i8*, i8** %name, align 8, !dbg !4667
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 1, !dbg !4668
  %call = call i8* @strchr(i8* %add.ptr, i32 46), !dbg !4669
  store i8* %call, i8** %dot, align 8, !dbg !4670
  %8 = load i8*, i8** %dot, align 8, !dbg !4671
  %tobool6 = icmp ne i8* %8, null, !dbg !4671
  br i1 %tobool6, label %if.end, label %if.then7, !dbg !4673

if.then7:                                         ; preds = %if.then5
  %9 = load i8*, i8** %name, align 8, !dbg !4674
  store i8* %9, i8** %dot, align 8, !dbg !4675
  br label %if.end, !dbg !4676

if.end:                                           ; preds = %if.then7, %if.then5
  %10 = load i8*, i8** %dot, align 8, !dbg !4677
  %call8 = call i64 @strlen(i8* %10), !dbg !4678
  %add = add i64 %call8, 8, !dbg !4679
  store i64 %add, i64* %len, align 8, !dbg !4680
  %11 = load i64, i64* %len, align 8, !dbg !4681
  %12 = alloca i8, i64 %11, align 16, !dbg !4681
  store i8* %12, i8** %rname, align 8, !dbg !4682
  %13 = load i8*, i8** %rname, align 8, !dbg !4683
  %call9 = call i8* @strcpy(i8* %13, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0)), !dbg !4684
  %14 = load i8*, i8** %rname, align 8, !dbg !4685
  %15 = load i8*, i8** %dot, align 8, !dbg !4686
  %call10 = call i8* @strcat(i8* %14, i8* %15), !dbg !4687
  %16 = load i8*, i8** %rname, align 8, !dbg !4688
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4689
  %call11 = call %union.section* @get_section(i8* %16, i32 2048, %union.tree_node* %17), !dbg !4690
  store %union.section* %call11, %union.section** %retval, align 8, !dbg !4691
  br label %return, !dbg !4691

if.else:                                          ; preds = %if.then
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4692
  %decl_with_vis12 = bitcast %union.tree_node* %18 to %struct.tree_decl_with_vis*, !dbg !4692
  %comdat_group13 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis12, i32 0, i32 3, !dbg !4692
  %19 = load %union.tree_node*, %union.tree_node** %comdat_group13, align 8, !dbg !4692
  %cmp14 = icmp ne %union.tree_node* %19, null, !dbg !4692
  br i1 %cmp14, label %land.lhs.true15, label %if.else24, !dbg !4694

land.lhs.true15:                                  ; preds = %if.else
  %20 = load i8*, i8** %name, align 8, !dbg !4695
  %call16 = call i32 @strncmp(i8* %20, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0), i64 16), !dbg !4696
  %cmp17 = icmp eq i32 %call16, 0, !dbg !4697
  br i1 %cmp17, label %if.then18, label %if.else24, !dbg !4698

if.then18:                                        ; preds = %land.lhs.true15
  call void @llvm.dbg.declare(metadata i64* %len19, metadata !4699, metadata !DIExpression()), !dbg !4701
  %21 = load i8*, i8** %name, align 8, !dbg !4702
  %call20 = call i64 @strlen(i8* %21), !dbg !4703
  %add21 = add i64 %call20, 1, !dbg !4704
  store i64 %add21, i64* %len19, align 8, !dbg !4701
  call void @llvm.dbg.declare(metadata i8** %rname22, metadata !4705, metadata !DIExpression()), !dbg !4706
  %22 = load i64, i64* %len19, align 8, !dbg !4707
  %23 = alloca i8, i64 %22, align 16, !dbg !4707
  store i8* %23, i8** %rname22, align 8, !dbg !4706
  %24 = load i8*, i8** %rname22, align 8, !dbg !4708
  %25 = load i8*, i8** %name, align 8, !dbg !4709
  %26 = load i64, i64* %len19, align 8, !dbg !4710
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 %25, i64 %26, i1 false), !dbg !4711
  %27 = load i8*, i8** %rname22, align 8, !dbg !4712
  %arrayidx = getelementptr inbounds i8, i8* %27, i64 14, !dbg !4712
  store i8 114, i8* %arrayidx, align 1, !dbg !4713
  %28 = load i8*, i8** %rname22, align 8, !dbg !4714
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4715
  %call23 = call %union.section* @get_section(i8* %28, i32 2048, %union.tree_node* %29), !dbg !4716
  store %union.section* %call23, %union.section** %retval, align 8, !dbg !4717
  br label %return, !dbg !4717

if.else24:                                        ; preds = %land.lhs.true15, %if.else
  %30 = load i32, i32* @flag_function_sections, align 4, !dbg !4718
  %tobool25 = icmp ne i32 %30, 0, !dbg !4718
  br i1 %tobool25, label %land.lhs.true26, label %if.end40, !dbg !4720

land.lhs.true26:                                  ; preds = %if.else24
  %31 = load i32, i32* @flag_data_sections, align 4, !dbg !4721
  %tobool27 = icmp ne i32 %31, 0, !dbg !4721
  br i1 %tobool27, label %land.lhs.true28, label %if.end40, !dbg !4722

land.lhs.true28:                                  ; preds = %land.lhs.true26
  %32 = load i8*, i8** %name, align 8, !dbg !4723
  %call29 = call i32 @strncmp(i8* %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0), i64 6), !dbg !4724
  %cmp30 = icmp eq i32 %call29, 0, !dbg !4725
  br i1 %cmp30, label %if.then31, label %if.end40, !dbg !4726

if.then31:                                        ; preds = %land.lhs.true28
  call void @llvm.dbg.declare(metadata i64* %len32, metadata !4727, metadata !DIExpression()), !dbg !4729
  %33 = load i8*, i8** %name, align 8, !dbg !4730
  %call33 = call i64 @strlen(i8* %33), !dbg !4731
  %add34 = add i64 %call33, 1, !dbg !4732
  store i64 %add34, i64* %len32, align 8, !dbg !4729
  call void @llvm.dbg.declare(metadata i8** %rname35, metadata !4733, metadata !DIExpression()), !dbg !4734
  %34 = load i64, i64* %len32, align 8, !dbg !4735
  %add36 = add i64 %34, 2, !dbg !4735
  %35 = alloca i8, i64 %add36, align 16, !dbg !4735
  store i8* %35, i8** %rname35, align 8, !dbg !4734
  %36 = load i8*, i8** %rname35, align 8, !dbg !4736
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %36, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), i64 7, i1 false), !dbg !4737
  %37 = load i8*, i8** %rname35, align 8, !dbg !4738
  %add.ptr37 = getelementptr inbounds i8, i8* %37, i64 7, !dbg !4739
  %38 = load i8*, i8** %name, align 8, !dbg !4740
  %add.ptr38 = getelementptr inbounds i8, i8* %38, i64 5, !dbg !4741
  %39 = load i64, i64* %len32, align 8, !dbg !4742
  %sub = sub i64 %39, 5, !dbg !4743
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr37, i8* align 1 %add.ptr38, i64 %sub, i1 false), !dbg !4744
  %40 = load i8*, i8** %rname35, align 8, !dbg !4745
  %41 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4746
  %call39 = call %union.section* @get_section(i8* %40, i32 0, %union.tree_node* %41), !dbg !4747
  store %union.section* %call39, %union.section** %retval, align 8, !dbg !4748
  br label %return, !dbg !4748

if.end40:                                         ; preds = %land.lhs.true28, %land.lhs.true26, %if.else24
  br label %if.end41

if.end41:                                         ; preds = %if.end40
  br label %if.end42

if.end42:                                         ; preds = %if.end41
  br label %if.end43, !dbg !4749

if.end43:                                         ; preds = %if.end42, %land.lhs.true, %entry
  %42 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !4750
  store %union.section* %42, %union.section** %retval, align 8, !dbg !4751
  br label %return, !dbg !4751

return:                                           ; preds = %if.end43, %if.then31, %if.then18, %if.end
  %43 = load %union.section*, %union.section** %retval, align 8, !dbg !4752
  ret %union.section* %43, !dbg !4752
}

declare dso_local i8* @strchr(i8*, i32) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i8* @strcpy(i8*, i8*) #2

declare dso_local i8* @strcat(i8*, i8*) #2

declare dso_local i32 @strncmp(i8*, i8*, i64) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @default_no_function_rodata_section(%union.tree_node* %decl) #0 !dbg !4753 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4754, metadata !DIExpression()), !dbg !4755
  %0 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !4756
  ret %union.section* %0, !dbg !4757
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @mergeable_constant_section(i32 %mode, i64 %align, i32 %flags) #0 !dbg !4758 {
entry:
  %retval = alloca %union.section*, align 8
  %mode.addr = alloca i32, align 4
  %align.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %modesize = alloca i32, align 4
  %name = alloca [24 x i8], align 16
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4761, metadata !DIExpression()), !dbg !4762
  store i64 %align, i64* %align.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %align.addr, metadata !4763, metadata !DIExpression()), !dbg !4764
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4765, metadata !DIExpression()), !dbg !4766
  call void @llvm.dbg.declare(metadata i32* %modesize, metadata !4767, metadata !DIExpression()), !dbg !4768
  %0 = load i32, i32* %mode.addr, align 4, !dbg !4769
  %idxprom = zext i32 %0 to i64, !dbg !4769
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !4769
  %1 = load i8, i8* %arrayidx, align 1, !dbg !4769
  %conv = zext i8 %1 to i16, !dbg !4769
  %conv1 = zext i16 %conv to i32, !dbg !4769
  %mul = mul nsw i32 %conv1, 8, !dbg !4769
  %conv2 = trunc i32 %mul to i16, !dbg !4769
  %conv3 = zext i16 %conv2 to i32, !dbg !4769
  store i32 %conv3, i32* %modesize, align 4, !dbg !4768
  %2 = load i32, i32* @flag_merge_constants, align 4, !dbg !4770
  %tobool = icmp ne i32 %2, 0, !dbg !4770
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4772

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !4773
  %cmp = icmp ne i32 %3, 0, !dbg !4774
  br i1 %cmp, label %land.lhs.true5, label %if.end, !dbg !4775

land.lhs.true5:                                   ; preds = %land.lhs.true
  %4 = load i32, i32* %mode.addr, align 4, !dbg !4776
  %cmp6 = icmp ne i32 %4, 1, !dbg !4777
  br i1 %cmp6, label %land.lhs.true8, label %if.end, !dbg !4778

land.lhs.true8:                                   ; preds = %land.lhs.true5
  %5 = load i32, i32* %modesize, align 4, !dbg !4779
  %conv9 = zext i32 %5 to i64, !dbg !4779
  %6 = load i64, i64* %align.addr, align 8, !dbg !4780
  %cmp10 = icmp ule i64 %conv9, %6, !dbg !4781
  br i1 %cmp10, label %land.lhs.true12, label %if.end, !dbg !4782

land.lhs.true12:                                  ; preds = %land.lhs.true8
  %7 = load i64, i64* %align.addr, align 8, !dbg !4783
  %cmp13 = icmp uge i64 %7, 8, !dbg !4784
  br i1 %cmp13, label %land.lhs.true15, label %if.end, !dbg !4785

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %8 = load i64, i64* %align.addr, align 8, !dbg !4786
  %cmp16 = icmp ule i64 %8, 256, !dbg !4787
  br i1 %cmp16, label %land.lhs.true18, label %if.end, !dbg !4788

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %9 = load i64, i64* %align.addr, align 8, !dbg !4789
  %10 = load i64, i64* %align.addr, align 8, !dbg !4790
  %sub = sub i64 %10, 1, !dbg !4791
  %and = and i64 %9, %sub, !dbg !4792
  %cmp19 = icmp eq i64 %and, 0, !dbg !4793
  br i1 %cmp19, label %if.then, label %if.end, !dbg !4794

if.then:                                          ; preds = %land.lhs.true18
  call void @llvm.dbg.declare(metadata [24 x i8]* %name, metadata !4795, metadata !DIExpression()), !dbg !4798
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %name, i64 0, i64 0, !dbg !4799
  %11 = load i64, i64* %align.addr, align 8, !dbg !4800
  %div = udiv i64 %11, 8, !dbg !4801
  %conv21 = trunc i64 %div to i32, !dbg !4802
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i32 %conv21), !dbg !4803
  %12 = load i64, i64* %align.addr, align 8, !dbg !4804
  %div22 = udiv i64 %12, 8, !dbg !4805
  %or = or i64 %div22, 32768, !dbg !4806
  %13 = load i32, i32* %flags.addr, align 4, !dbg !4807
  %conv23 = zext i32 %13 to i64, !dbg !4807
  %or24 = or i64 %conv23, %or, !dbg !4807
  %conv25 = trunc i64 %or24 to i32, !dbg !4807
  store i32 %conv25, i32* %flags.addr, align 4, !dbg !4807
  %arraydecay26 = getelementptr inbounds [24 x i8], [24 x i8]* %name, i64 0, i64 0, !dbg !4808
  %14 = load i32, i32* %flags.addr, align 4, !dbg !4809
  %call27 = call %union.section* @get_section(i8* %arraydecay26, i32 %14, %union.tree_node* null), !dbg !4810
  store %union.section* %call27, %union.section** %retval, align 8, !dbg !4811
  br label %return, !dbg !4811

if.end:                                           ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true8, %land.lhs.true5, %land.lhs.true, %entry
  %15 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !4812
  store %union.section* %15, %union.section** %retval, align 8, !dbg !4813
  br label %return, !dbg !4813

return:                                           ; preds = %if.end, %if.then
  %16 = load %union.section*, %union.section** %retval, align 8, !dbg !4814
  ret %union.section* %16, !dbg !4814
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_user_assembler_name(%union.tree_node* %decl, i8* %name) #0 !dbg !4815 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %starred = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4818, metadata !DIExpression()), !dbg !4819
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !4820, metadata !DIExpression()), !dbg !4821
  call void @llvm.dbg.declare(metadata i8** %starred, metadata !4822, metadata !DIExpression()), !dbg !4823
  %0 = load i8*, i8** %name.addr, align 8, !dbg !4824
  %call = call i64 @strlen(i8* %0), !dbg !4824
  %add = add i64 %call, 2, !dbg !4824
  %1 = alloca i8, i64 %add, align 16, !dbg !4824
  store i8* %1, i8** %starred, align 8, !dbg !4823
  %2 = load i8*, i8** %starred, align 8, !dbg !4825
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0, !dbg !4825
  store i8 42, i8* %arrayidx, align 1, !dbg !4826
  %3 = load i8*, i8** %starred, align 8, !dbg !4827
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 1, !dbg !4828
  %4 = load i8*, i8** %name.addr, align 8, !dbg !4829
  %call1 = call i8* @strcpy(i8* %add.ptr, i8* %4), !dbg !4830
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4831
  %6 = load i8*, i8** %starred, align 8, !dbg !4832
  %call2 = call %union.tree_node* @get_identifier(i8* %6), !dbg !4833
  call void @change_decl_assembler_name(%union.tree_node* %5, %union.tree_node* %call2), !dbg !4834
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4835
  call void @set_decl_rtl(%union.tree_node* %7, %struct.rtx_def* null), !dbg !4835
  ret void, !dbg !4836
}

declare dso_local void @change_decl_assembler_name(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @set_decl_rtl(%union.tree_node*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @decode_reg_name(i8* %asmspec) #0 !dbg !3834 {
entry:
  %retval = alloca i32, align 4
  %asmspec.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %asmspec, i8** %asmspec.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %asmspec.addr, metadata !4837, metadata !DIExpression()), !dbg !4838
  %0 = load i8*, i8** %asmspec.addr, align 8, !dbg !4839
  %cmp = icmp ne i8* %0, null, !dbg !4841
  br i1 %cmp, label %if.then, label %if.end74, !dbg !4842

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4843, metadata !DIExpression()), !dbg !4845
  %1 = load i8*, i8** %asmspec.addr, align 8, !dbg !4846
  %call = call i8* @strip_reg_name(i8* %1), !dbg !4847
  store i8* %call, i8** %asmspec.addr, align 8, !dbg !4848
  %2 = load i8*, i8** %asmspec.addr, align 8, !dbg !4849
  %call1 = call i64 @strlen(i8* %2), !dbg !4851
  %sub = sub i64 %call1, 1, !dbg !4852
  %conv = trunc i64 %sub to i32, !dbg !4851
  store i32 %conv, i32* %i, align 4, !dbg !4853
  br label %for.cond, !dbg !4854

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4, !dbg !4855
  %cmp2 = icmp sge i32 %3, 0, !dbg !4857
  br i1 %cmp2, label %for.body, label %for.end, !dbg !4858

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %asmspec.addr, align 8, !dbg !4859
  %5 = load i32, i32* %i, align 4, !dbg !4859
  %idxprom = sext i32 %5 to i64, !dbg !4859
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !4859
  %6 = load i8, i8* %arrayidx, align 1, !dbg !4859
  %conv4 = sext i8 %6 to i32, !dbg !4859
  %and = and i32 %conv4, 255, !dbg !4859
  %idxprom5 = sext i32 %and to i64, !dbg !4859
  %arrayidx6 = getelementptr inbounds [256 x i16], [256 x i16]* @_sch_istable, i64 0, i64 %idxprom5, !dbg !4859
  %7 = load i16, i16* %arrayidx6, align 2, !dbg !4859
  %conv7 = zext i16 %7 to i32, !dbg !4859
  %and8 = and i32 %conv7, 4, !dbg !4859
  %tobool = icmp ne i32 %and8, 0, !dbg !4859
  br i1 %tobool, label %if.end, label %if.then9, !dbg !4861

if.then9:                                         ; preds = %for.body
  br label %for.end, !dbg !4862

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4859

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4, !dbg !4863
  %dec = add nsw i32 %8, -1, !dbg !4863
  store i32 %dec, i32* %i, align 4, !dbg !4863
  br label %for.cond, !dbg !4864, !llvm.loop !4865

for.end:                                          ; preds = %if.then9, %for.cond
  %9 = load i8*, i8** %asmspec.addr, align 8, !dbg !4867
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i64 0, !dbg !4867
  %10 = load i8, i8* %arrayidx10, align 1, !dbg !4867
  %conv11 = sext i8 %10 to i32, !dbg !4867
  %cmp12 = icmp ne i32 %conv11, 0, !dbg !4869
  br i1 %cmp12, label %land.lhs.true, label %if.end24, !dbg !4870

land.lhs.true:                                    ; preds = %for.end
  %11 = load i32, i32* %i, align 4, !dbg !4871
  %cmp14 = icmp slt i32 %11, 0, !dbg !4872
  br i1 %cmp14, label %if.then16, label %if.end24, !dbg !4873

if.then16:                                        ; preds = %land.lhs.true
  %12 = load i8*, i8** %asmspec.addr, align 8, !dbg !4874
  %call17 = call i32 @atoi(i8* %12), !dbg !4876
  store i32 %call17, i32* %i, align 4, !dbg !4877
  %13 = load i32, i32* %i, align 4, !dbg !4878
  %cmp18 = icmp slt i32 %13, 53, !dbg !4880
  br i1 %cmp18, label %land.lhs.true20, label %if.else, !dbg !4881

land.lhs.true20:                                  ; preds = %if.then16
  %14 = load i32, i32* %i, align 4, !dbg !4882
  %cmp21 = icmp sge i32 %14, 0, !dbg !4883
  br i1 %cmp21, label %if.then23, label %if.else, !dbg !4884

if.then23:                                        ; preds = %land.lhs.true20
  %15 = load i32, i32* %i, align 4, !dbg !4885
  store i32 %15, i32* %retval, align 4, !dbg !4886
  br label %return, !dbg !4886

if.else:                                          ; preds = %land.lhs.true20, %if.then16
  store i32 -2, i32* %retval, align 4, !dbg !4887
  br label %return, !dbg !4887

if.end24:                                         ; preds = %land.lhs.true, %for.end
  store i32 0, i32* %i, align 4, !dbg !4888
  br label %for.cond25, !dbg !4890

for.cond25:                                       ; preds = %for.inc42, %if.end24
  %16 = load i32, i32* %i, align 4, !dbg !4891
  %cmp26 = icmp slt i32 %16, 53, !dbg !4893
  br i1 %cmp26, label %for.body28, label %for.end43, !dbg !4894

for.body28:                                       ; preds = %for.cond25
  %17 = load i32, i32* %i, align 4, !dbg !4895
  %idxprom29 = sext i32 %17 to i64, !dbg !4897
  %arrayidx30 = getelementptr inbounds [53 x i8*], [53 x i8*]* @reg_names, i64 0, i64 %idxprom29, !dbg !4897
  %18 = load i8*, i8** %arrayidx30, align 8, !dbg !4897
  %arrayidx31 = getelementptr inbounds i8, i8* %18, i64 0, !dbg !4897
  %19 = load i8, i8* %arrayidx31, align 1, !dbg !4897
  %conv32 = sext i8 %19 to i32, !dbg !4897
  %tobool33 = icmp ne i32 %conv32, 0, !dbg !4897
  br i1 %tobool33, label %land.lhs.true34, label %if.end41, !dbg !4898

land.lhs.true34:                                  ; preds = %for.body28
  %20 = load i8*, i8** %asmspec.addr, align 8, !dbg !4899
  %21 = load i32, i32* %i, align 4, !dbg !4900
  %idxprom35 = sext i32 %21 to i64, !dbg !4901
  %arrayidx36 = getelementptr inbounds [53 x i8*], [53 x i8*]* @reg_names, i64 0, i64 %idxprom35, !dbg !4901
  %22 = load i8*, i8** %arrayidx36, align 8, !dbg !4901
  %call37 = call i8* @strip_reg_name(i8* %22), !dbg !4902
  %call38 = call i32 @strcmp(i8* %20, i8* %call37), !dbg !4903
  %tobool39 = icmp ne i32 %call38, 0, !dbg !4903
  br i1 %tobool39, label %if.end41, label %if.then40, !dbg !4904

if.then40:                                        ; preds = %land.lhs.true34
  %23 = load i32, i32* %i, align 4, !dbg !4905
  store i32 %23, i32* %retval, align 4, !dbg !4906
  br label %return, !dbg !4906

if.end41:                                         ; preds = %land.lhs.true34, %for.body28
  br label %for.inc42, !dbg !4907

for.inc42:                                        ; preds = %if.end41
  %24 = load i32, i32* %i, align 4, !dbg !4908
  %inc = add nsw i32 %24, 1, !dbg !4908
  store i32 %inc, i32* %i, align 4, !dbg !4908
  br label %for.cond25, !dbg !4909, !llvm.loop !4910

for.end43:                                        ; preds = %for.cond25
  store i32 0, i32* %i, align 4, !dbg !4912
  br label %for.cond44, !dbg !4915

for.cond44:                                       ; preds = %for.inc63, %for.end43
  %25 = load i32, i32* %i, align 4, !dbg !4916
  %cmp45 = icmp slt i32 %25, 24, !dbg !4918
  br i1 %cmp45, label %for.body47, label %for.end65, !dbg !4919

for.body47:                                       ; preds = %for.cond44
  %26 = load i32, i32* %i, align 4, !dbg !4920
  %idxprom48 = sext i32 %26 to i64, !dbg !4922
  %arrayidx49 = getelementptr inbounds [24 x %struct.anon], [24 x %struct.anon]* @decode_reg_name.table, i64 0, i64 %idxprom48, !dbg !4922
  %name = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx49, i32 0, i32 0, !dbg !4923
  %27 = load i8*, i8** %name, align 16, !dbg !4923
  %arrayidx50 = getelementptr inbounds i8, i8* %27, i64 0, !dbg !4922
  %28 = load i8, i8* %arrayidx50, align 1, !dbg !4922
  %conv51 = sext i8 %28 to i32, !dbg !4922
  %tobool52 = icmp ne i32 %conv51, 0, !dbg !4922
  br i1 %tobool52, label %land.lhs.true53, label %if.end62, !dbg !4924

land.lhs.true53:                                  ; preds = %for.body47
  %29 = load i8*, i8** %asmspec.addr, align 8, !dbg !4925
  %30 = load i32, i32* %i, align 4, !dbg !4926
  %idxprom54 = sext i32 %30 to i64, !dbg !4927
  %arrayidx55 = getelementptr inbounds [24 x %struct.anon], [24 x %struct.anon]* @decode_reg_name.table, i64 0, i64 %idxprom54, !dbg !4927
  %name56 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx55, i32 0, i32 0, !dbg !4928
  %31 = load i8*, i8** %name56, align 16, !dbg !4928
  %call57 = call i32 @strcmp(i8* %29, i8* %31), !dbg !4929
  %tobool58 = icmp ne i32 %call57, 0, !dbg !4929
  br i1 %tobool58, label %if.end62, label %if.then59, !dbg !4930

if.then59:                                        ; preds = %land.lhs.true53
  %32 = load i32, i32* %i, align 4, !dbg !4931
  %idxprom60 = sext i32 %32 to i64, !dbg !4932
  %arrayidx61 = getelementptr inbounds [24 x %struct.anon], [24 x %struct.anon]* @decode_reg_name.table, i64 0, i64 %idxprom60, !dbg !4932
  %number = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx61, i32 0, i32 1, !dbg !4933
  %33 = load i32, i32* %number, align 8, !dbg !4933
  store i32 %33, i32* %retval, align 4, !dbg !4934
  br label %return, !dbg !4934

if.end62:                                         ; preds = %land.lhs.true53, %for.body47
  br label %for.inc63, !dbg !4935

for.inc63:                                        ; preds = %if.end62
  %34 = load i32, i32* %i, align 4, !dbg !4936
  %inc64 = add nsw i32 %34, 1, !dbg !4936
  store i32 %inc64, i32* %i, align 4, !dbg !4936
  br label %for.cond44, !dbg !4937, !llvm.loop !4938

for.end65:                                        ; preds = %for.cond44
  %35 = load i8*, i8** %asmspec.addr, align 8, !dbg !4940
  %call66 = call i32 @strcmp(i8* %35, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.36, i64 0, i64 0)), !dbg !4942
  %tobool67 = icmp ne i32 %call66, 0, !dbg !4942
  br i1 %tobool67, label %if.end69, label %if.then68, !dbg !4943

if.then68:                                        ; preds = %for.end65
  store i32 -4, i32* %retval, align 4, !dbg !4944
  br label %return, !dbg !4944

if.end69:                                         ; preds = %for.end65
  %36 = load i8*, i8** %asmspec.addr, align 8, !dbg !4945
  %call70 = call i32 @strcmp(i8* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)), !dbg !4947
  %tobool71 = icmp ne i32 %call70, 0, !dbg !4947
  br i1 %tobool71, label %if.end73, label %if.then72, !dbg !4948

if.then72:                                        ; preds = %if.end69
  store i32 -3, i32* %retval, align 4, !dbg !4949
  br label %return, !dbg !4949

if.end73:                                         ; preds = %if.end69
  store i32 -2, i32* %retval, align 4, !dbg !4950
  br label %return, !dbg !4950

if.end74:                                         ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !4951
  br label %return, !dbg !4951

return:                                           ; preds = %if.end74, %if.end73, %if.then72, %if.then68, %if.then59, %if.then40, %if.else, %if.then23
  %37 = load i32, i32* %retval, align 4, !dbg !4952
  ret i32 %37, !dbg !4952
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @strip_reg_name(i8* %name) #0 !dbg !4953 {
entry:
  %name.addr = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !4956, metadata !DIExpression()), !dbg !4957
  %0 = load i8*, i8** %name.addr, align 8, !dbg !4958
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !4958
  %1 = load i8, i8* %arrayidx, align 1, !dbg !4958
  %conv = sext i8 %1 to i32, !dbg !4958
  %cmp = icmp eq i32 %conv, 37, !dbg !4960
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4961

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8, !dbg !4962
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i64 0, !dbg !4962
  %3 = load i8, i8* %arrayidx2, align 1, !dbg !4962
  %conv3 = sext i8 %3 to i32, !dbg !4962
  %cmp4 = icmp eq i32 %conv3, 35, !dbg !4963
  br i1 %cmp4, label %if.then, label %if.end, !dbg !4964

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i8*, i8** %name.addr, align 8, !dbg !4965
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1, !dbg !4965
  store i8* %incdec.ptr, i8** %name.addr, align 8, !dbg !4965
  br label %if.end, !dbg !4966

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %5 = load i8*, i8** %name.addr, align 8, !dbg !4967
  ret i8* %5, !dbg !4968
}

declare dso_local i32 @atoi(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @align_variable(%union.tree_node* %decl, i8 zeroext %dont_output_data) #0 !dbg !4969 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %dont_output_data.addr = alloca i8, align 1
  %align = alloca i32, align 4
  %data_align = alloca i32, align 4
  %const_align = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !4972, metadata !DIExpression()), !dbg !4973
  store i8 %dont_output_data, i8* %dont_output_data.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %dont_output_data.addr, metadata !4974, metadata !DIExpression()), !dbg !4975
  call void @llvm.dbg.declare(metadata i32* %align, metadata !4976, metadata !DIExpression()), !dbg !4977
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4978
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !4978
  %align1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !4978
  %1 = load i32, i32* %align1, align 8, !dbg !4978
  store i32 %1, i32* %align, align 4, !dbg !4977
  %2 = load i8, i8* %dont_output_data.addr, align 1, !dbg !4979
  %conv = zext i8 %2 to i32, !dbg !4979
  %tobool = icmp ne i32 %conv, 0, !dbg !4979
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !4981

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4982
  %decl_common2 = bitcast %union.tree_node* %3 to %struct.tree_decl_common*, !dbg !4982
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common2, i32 0, i32 1, !dbg !4982
  %4 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !4982
  %cmp = icmp eq %union.tree_node* %4, null, !dbg !4983
  br i1 %cmp, label %land.lhs.true4, label %if.end, !dbg !4984

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4985
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4985
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4985
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4985
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !4985
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !4985
  %bf.load = load i64, i64* %7, align 8, !dbg !4985
  %bf.clear = and i64 %bf.load, 65535, !dbg !4985
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4985
  %cmp5 = icmp eq i32 %bf.cast, 15, !dbg !4986
  br i1 %cmp5, label %if.then, label %if.end, !dbg !4987

if.then:                                          ; preds = %land.lhs.true4
  %8 = load i32, i32* %align, align 4, !dbg !4988
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4988
  %common7 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !4988
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !4988
  %10 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !4988
  %common9 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !4988
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !4988
  %11 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !4988
  %type11 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !4988
  %align12 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 7, !dbg !4988
  %12 = load i32, i32* %align12, align 8, !dbg !4988
  %cmp13 = icmp ugt i32 %8, %12, !dbg !4988
  br i1 %cmp13, label %cond.true, label %cond.false, !dbg !4988

cond.true:                                        ; preds = %if.then
  %13 = load i32, i32* %align, align 4, !dbg !4988
  br label %cond.end, !dbg !4988

cond.false:                                       ; preds = %if.then
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4988
  %common15 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !4988
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !4988
  %15 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !4988
  %common17 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !4988
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !4988
  %16 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !4988
  %type19 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !4988
  %align20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 7, !dbg !4988
  %17 = load i32, i32* %align20, align 8, !dbg !4988
  br label %cond.end, !dbg !4988

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %13, %cond.true ], [ %17, %cond.false ], !dbg !4988
  store i32 %cond, i32* %align, align 4, !dbg !4989
  br label %if.end, !dbg !4990

if.end:                                           ; preds = %cond.end, %land.lhs.true4, %land.lhs.true, %entry
  %18 = load i32, i32* %align, align 4, !dbg !4991
  %cmp21 = icmp ugt i32 %18, -2147483648, !dbg !4993
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !4994

if.then23:                                        ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !4995
  %call = call zeroext i8 (i32, i8*, ...) @warning(i32 0, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.38, i64 0, i64 0), %union.tree_node* %19, i32 268435456), !dbg !4997
  store i32 -2147483648, i32* %align, align 4, !dbg !4998
  br label %if.end24, !dbg !4999

if.end24:                                         ; preds = %if.then23, %if.end
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5000
  %common25 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !5000
  %base26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 0, !dbg !5000
  %21 = bitcast %struct.tree_base* %base26 to i64*, !dbg !5000
  %bf.load27 = load i64, i64* %21, align 8, !dbg !5000
  %bf.lshr = lshr i64 %bf.load27, 42, !dbg !5000
  %bf.clear28 = and i64 %bf.lshr, 1, !dbg !5000
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !5000
  %tobool30 = icmp ne i32 %bf.cast29, 0, !dbg !5000
  br i1 %tobool30, label %if.end69, label %if.then31, !dbg !5002

if.then31:                                        ; preds = %if.end24
  call void @llvm.dbg.declare(metadata i32* %data_align, metadata !5003, metadata !DIExpression()), !dbg !5005
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5006
  %common32 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !5006
  %type33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2, !dbg !5006
  %23 = load %union.tree_node*, %union.tree_node** %type33, align 8, !dbg !5006
  %24 = load i32, i32* %align, align 4, !dbg !5006
  %call34 = call i32 @ix86_data_alignment(%union.tree_node* %23, i32 %24), !dbg !5006
  store i32 %call34, i32* %data_align, align 4, !dbg !5005
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5007
  %decl_with_vis = bitcast %union.tree_node* %25 to %struct.tree_decl_with_vis*, !dbg !5007
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !5007
  %26 = bitcast i24* %tls_model to i32*, !dbg !5007
  %bf.load35 = load i32, i32* %26, align 8, !dbg !5007
  %bf.lshr36 = lshr i32 %bf.load35, 13, !dbg !5007
  %bf.clear37 = and i32 %bf.lshr36, 7, !dbg !5007
  %cmp38 = icmp sge i32 %bf.clear37, 2, !dbg !5007
  br i1 %cmp38, label %lor.lhs.false, label %if.then42, !dbg !5009

lor.lhs.false:                                    ; preds = %if.then31
  %27 = load i32, i32* %data_align, align 4, !dbg !5010
  %cmp40 = icmp ule i32 %27, 32, !dbg !5011
  br i1 %cmp40, label %if.then42, label %if.end43, !dbg !5012

if.then42:                                        ; preds = %lor.lhs.false, %if.then31
  %28 = load i32, i32* %data_align, align 4, !dbg !5013
  store i32 %28, i32* %align, align 4, !dbg !5014
  br label %if.end43, !dbg !5015

if.end43:                                         ; preds = %if.then42, %lor.lhs.false
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5016
  %decl_common44 = bitcast %union.tree_node* %29 to %struct.tree_decl_common*, !dbg !5016
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common44, i32 0, i32 5, !dbg !5016
  %30 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5016
  %cmp45 = icmp ne %union.tree_node* %30, null, !dbg !5018
  br i1 %cmp45, label %land.lhs.true47, label %if.end68, !dbg !5019

land.lhs.true47:                                  ; preds = %if.end43
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5020
  %decl_common48 = bitcast %union.tree_node* %31 to %struct.tree_decl_common*, !dbg !5020
  %initial49 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common48, i32 0, i32 5, !dbg !5020
  %32 = load %union.tree_node*, %union.tree_node** %initial49, align 8, !dbg !5020
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5021
  %cmp50 = icmp ne %union.tree_node* %32, %33, !dbg !5022
  br i1 %cmp50, label %if.then52, label %if.end68, !dbg !5023

if.then52:                                        ; preds = %land.lhs.true47
  call void @llvm.dbg.declare(metadata i32* %const_align, metadata !5024, metadata !DIExpression()), !dbg !5026
  %34 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5027
  %decl_common53 = bitcast %union.tree_node* %34 to %struct.tree_decl_common*, !dbg !5027
  %initial54 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common53, i32 0, i32 5, !dbg !5027
  %35 = load %union.tree_node*, %union.tree_node** %initial54, align 8, !dbg !5027
  %36 = load i32, i32* %align, align 4, !dbg !5027
  %call55 = call i32 @ix86_constant_alignment(%union.tree_node* %35, i32 %36), !dbg !5027
  store i32 %call55, i32* %const_align, align 4, !dbg !5026
  %37 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5028
  %decl_with_vis56 = bitcast %union.tree_node* %37 to %struct.tree_decl_with_vis*, !dbg !5028
  %tls_model57 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis56, i32 0, i32 4, !dbg !5028
  %38 = bitcast i24* %tls_model57 to i32*, !dbg !5028
  %bf.load58 = load i32, i32* %38, align 8, !dbg !5028
  %bf.lshr59 = lshr i32 %bf.load58, 13, !dbg !5028
  %bf.clear60 = and i32 %bf.lshr59, 7, !dbg !5028
  %cmp61 = icmp sge i32 %bf.clear60, 2, !dbg !5028
  br i1 %cmp61, label %lor.lhs.false63, label %if.then66, !dbg !5030

lor.lhs.false63:                                  ; preds = %if.then52
  %39 = load i32, i32* %const_align, align 4, !dbg !5031
  %cmp64 = icmp ule i32 %39, 32, !dbg !5032
  br i1 %cmp64, label %if.then66, label %if.end67, !dbg !5033

if.then66:                                        ; preds = %lor.lhs.false63, %if.then52
  %40 = load i32, i32* %const_align, align 4, !dbg !5034
  store i32 %40, i32* %align, align 4, !dbg !5035
  br label %if.end67, !dbg !5036

if.end67:                                         ; preds = %if.then66, %lor.lhs.false63
  br label %if.end68, !dbg !5037

if.end68:                                         ; preds = %if.end67, %land.lhs.true47, %if.end43
  br label %if.end69, !dbg !5038

if.end69:                                         ; preds = %if.end68, %if.end24
  %41 = load i32, i32* %align, align 4, !dbg !5039
  %42 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5040
  %decl_common70 = bitcast %union.tree_node* %42 to %struct.tree_decl_common*, !dbg !5040
  %align71 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common70, i32 0, i32 3, !dbg !5040
  store i32 %41, i32* %align71, align 8, !dbg !5041
  ret void, !dbg !5042
}

declare dso_local zeroext i8 @warning(i32, i8*, ...) #2

declare dso_local i32 @ix86_data_alignment(%union.tree_node*, i32) #2

declare dso_local i32 @ix86_constant_alignment(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @make_decl_rtl(%union.tree_node* %decl) #0 !dbg !5043 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  %reg_number = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %asmspec = alloca i8*, align 8
  %nregs = alloca i32, align 4
  %address_mode = alloca i32, align 4
  %as = alloca i8, align 1
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5046, metadata !DIExpression()), !dbg !5047
  call void @llvm.dbg.declare(metadata i8** %name, metadata !5048, metadata !DIExpression()), !dbg !5049
  store i8* null, i8** %name, align 8, !dbg !5049
  call void @llvm.dbg.declare(metadata i32* %reg_number, metadata !5050, metadata !DIExpression()), !dbg !5051
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !5052, metadata !DIExpression()), !dbg !5053
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5054
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5054
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5054
  %bf.load = load i64, i64* %1, align 8, !dbg !5054
  %bf.clear = and i64 %bf.load, 65535, !dbg !5054
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5054
  %cmp = icmp ne i32 %bf.cast, 34, !dbg !5054
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !5054

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5054
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5054
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5054
  %bf.load2 = load i64, i64* %3, align 8, !dbg !5054
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5054
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5054
  %cmp5 = icmp ne i32 %bf.cast4, 36, !dbg !5054
  br i1 %cmp5, label %cond.false, label %cond.true, !dbg !5054

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 1310, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !5054
  br label %cond.end, !dbg !5054

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5054

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5054
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5055
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5055
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !5055
  %bf.load7 = load i64, i64* %5, align 8, !dbg !5055
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !5055
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !5055
  %cmp10 = icmp ne i32 %bf.cast9, 32, !dbg !5055
  br i1 %cmp10, label %cond.false36, label %lor.lhs.false, !dbg !5055

lor.lhs.false:                                    ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5055
  %base11 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5055
  %7 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5055
  %bf.load12 = load i64, i64* %7, align 8, !dbg !5055
  %bf.lshr = lshr i64 %bf.load12, 26, !dbg !5055
  %bf.clear13 = and i64 %bf.lshr, 1, !dbg !5055
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !5055
  %tobool = icmp ne i32 %bf.cast14, 0, !dbg !5055
  br i1 %tobool, label %cond.false36, label %lor.lhs.false15, !dbg !5055

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5055
  %base16 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5055
  %9 = bitcast %struct.tree_base* %base16 to i64*, !dbg !5055
  %bf.load17 = load i64, i64* %9, align 8, !dbg !5055
  %bf.lshr18 = lshr i64 %bf.load17, 27, !dbg !5055
  %bf.clear19 = and i64 %bf.lshr18, 1, !dbg !5055
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !5055
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !5055
  br i1 %tobool21, label %cond.false36, label %lor.lhs.false22, !dbg !5055

lor.lhs.false22:                                  ; preds = %lor.lhs.false15
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5055
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !5055
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5055
  %11 = bitcast i40* %decl_flag_1 to i64*, !dbg !5055
  %bf.load23 = load i64, i64* %11, align 8, !dbg !5055
  %bf.lshr24 = lshr i64 %bf.load23, 25, !dbg !5055
  %bf.clear25 = and i64 %bf.lshr24, 1, !dbg !5055
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !5055
  %tobool27 = icmp ne i32 %bf.cast26, 0, !dbg !5055
  br i1 %tobool27, label %cond.false36, label %lor.lhs.false28, !dbg !5055

lor.lhs.false28:                                  ; preds = %lor.lhs.false22
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5055
  %decl_common29 = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !5055
  %decl_flag_0 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common29, i32 0, i32 2, !dbg !5055
  %13 = bitcast i40* %decl_flag_0 to i64*, !dbg !5055
  %bf.load30 = load i64, i64* %13, align 8, !dbg !5055
  %bf.lshr31 = lshr i64 %bf.load30, 24, !dbg !5055
  %bf.clear32 = and i64 %bf.lshr31, 1, !dbg !5055
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !5055
  %tobool34 = icmp ne i32 %bf.cast33, 0, !dbg !5055
  br i1 %tobool34, label %cond.false36, label %cond.true35, !dbg !5055

cond.true35:                                      ; preds = %lor.lhs.false28
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 1317, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !5055
  br label %cond.end37, !dbg !5055

cond.false36:                                     ; preds = %lor.lhs.false28, %lor.lhs.false22, %lor.lhs.false15, %lor.lhs.false, %cond.end
  br label %cond.end37, !dbg !5055

cond.end37:                                       ; preds = %cond.false36, %cond.true35
  %cond38 = phi i32 [ 0, %cond.true35 ], [ 0, %cond.false36 ], !dbg !5055
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5056
  %base39 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5056
  %15 = bitcast %struct.tree_base* %base39 to i64*, !dbg !5056
  %bf.load40 = load i64, i64* %15, align 8, !dbg !5056
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !5056
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !5056
  %cmp43 = icmp ne i32 %bf.cast42, 35, !dbg !5056
  br i1 %cmp43, label %land.lhs.true44, label %cond.true50, !dbg !5056

land.lhs.true44:                                  ; preds = %cond.end37
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5056
  %base45 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5056
  %17 = bitcast %struct.tree_base* %base45 to i64*, !dbg !5056
  %bf.load46 = load i64, i64* %17, align 8, !dbg !5056
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !5056
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !5056
  %cmp49 = icmp ne i32 %bf.cast48, 30, !dbg !5056
  br i1 %cmp49, label %cond.false51, label %cond.true50, !dbg !5056

cond.true50:                                      ; preds = %land.lhs.true44, %cond.end37
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 1321, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !5056
  br label %cond.end52, !dbg !5056

cond.false51:                                     ; preds = %land.lhs.true44
  br label %cond.end52, !dbg !5056

cond.end52:                                       ; preds = %cond.false51, %cond.true50
  %cond53 = phi i32 [ 0, %cond.true50 ], [ 0, %cond.false51 ], !dbg !5056
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5057
  %base54 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5057
  %19 = bitcast %struct.tree_base* %base54 to i64*, !dbg !5057
  %bf.load55 = load i64, i64* %19, align 8, !dbg !5057
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !5057
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !5057
  %idxprom = zext i32 %bf.cast57 to i64, !dbg !5057
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !5057
  %arrayidx58 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !5057
  %20 = load i8, i8* %arrayidx58, align 1, !dbg !5057
  %conv = zext i8 %20 to i32, !dbg !5057
  %tobool59 = icmp ne i32 %conv, 0, !dbg !5057
  br i1 %tobool59, label %land.lhs.true60, label %if.end153, !dbg !5057

land.lhs.true60:                                  ; preds = %cond.end52
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5057
  %decl_with_rtl = bitcast %union.tree_node* %21 to %struct.tree_decl_with_rtl*, !dbg !5057
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !5057
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !5057
  %cmp61 = icmp ne %struct.rtx_def* %22, null, !dbg !5057
  br i1 %cmp61, label %if.then, label %if.end153, !dbg !5059

if.then:                                          ; preds = %land.lhs.true60
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5060
  %decl_with_rtl63 = bitcast %union.tree_node* %23 to %struct.tree_decl_with_rtl*, !dbg !5060
  %rtl64 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl63, i32 0, i32 1, !dbg !5060
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl64, align 8, !dbg !5060
  %tobool65 = icmp ne %struct.rtx_def* %24, null, !dbg !5060
  br i1 %tobool65, label %cond.true66, label %cond.false69, !dbg !5060

cond.true66:                                      ; preds = %if.then
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5060
  %decl_with_rtl67 = bitcast %union.tree_node* %25 to %struct.tree_decl_with_rtl*, !dbg !5060
  %rtl68 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl67, i32 0, i32 1, !dbg !5060
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtl68, align 8, !dbg !5060
  br label %cond.end72, !dbg !5060

cond.false69:                                     ; preds = %if.then
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5060
  call void @make_decl_rtl(%union.tree_node* %27), !dbg !5060
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5060
  %decl_with_rtl70 = bitcast %union.tree_node* %28 to %struct.tree_decl_with_rtl*, !dbg !5060
  %rtl71 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl70, i32 0, i32 1, !dbg !5060
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtl71, align 8, !dbg !5060
  br label %cond.end72, !dbg !5060

cond.end72:                                       ; preds = %cond.false69, %cond.true66
  %cond73 = phi %struct.rtx_def* [ %26, %cond.true66 ], [ %29, %cond.false69 ], !dbg !5060
  store %struct.rtx_def* %cond73, %struct.rtx_def** %x, align 8, !dbg !5062
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5063
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !5063
  %bf.load74 = load i32, i32* %31, align 8, !dbg !5063
  %bf.lshr75 = lshr i32 %bf.load74, 16, !dbg !5063
  %bf.clear76 = and i32 %bf.lshr75, 255, !dbg !5063
  %32 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5065
  %decl_common77 = bitcast %union.tree_node* %32 to %struct.tree_decl_common*, !dbg !5065
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common77, i32 0, i32 2, !dbg !5065
  %33 = bitcast i40* %mode to i64*, !dbg !5065
  %bf.load78 = load i64, i64* %33, align 8, !dbg !5065
  %bf.clear79 = and i64 %bf.load78, 255, !dbg !5065
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !5065
  %cmp81 = icmp ne i32 %bf.clear76, %bf.cast80, !dbg !5066
  br i1 %cmp81, label %if.then83, label %if.end, !dbg !5067

if.then83:                                        ; preds = %cond.end72
  %34 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5068
  %35 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5068
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5068
  %decl_common84 = bitcast %union.tree_node* %36 to %struct.tree_decl_common*, !dbg !5068
  %mode85 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common84, i32 0, i32 2, !dbg !5068
  %37 = bitcast i40* %mode85 to i64*, !dbg !5068
  %bf.load86 = load i64, i64* %37, align 8, !dbg !5068
  %bf.clear87 = and i64 %bf.load86, 255, !dbg !5068
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !5068
  %call = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %35, i32 %bf.cast88, i64 0, i32 0, i32 1), !dbg !5068
  call void @set_decl_rtl(%union.tree_node* %34, %struct.rtx_def* %call), !dbg !5068
  br label %if.end, !dbg !5068

if.end:                                           ; preds = %if.then83, %cond.end72
  %38 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5069
  %base89 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !5069
  %39 = bitcast %struct.tree_base* %base89 to i64*, !dbg !5069
  %bf.load90 = load i64, i64* %39, align 8, !dbg !5069
  %bf.clear91 = and i64 %bf.load90, 65535, !dbg !5069
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !5069
  %cmp93 = icmp ne i32 %bf.cast92, 29, !dbg !5071
  br i1 %cmp93, label %land.lhs.true95, label %if.end104, !dbg !5072

land.lhs.true95:                                  ; preds = %if.end
  %40 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5073
  %decl_common96 = bitcast %union.tree_node* %40 to %struct.tree_decl_common*, !dbg !5073
  %decl_flag_097 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common96, i32 0, i32 2, !dbg !5073
  %41 = bitcast i40* %decl_flag_097 to i64*, !dbg !5073
  %bf.load98 = load i64, i64* %41, align 8, !dbg !5073
  %bf.lshr99 = lshr i64 %bf.load98, 24, !dbg !5073
  %bf.clear100 = and i64 %bf.lshr99, 1, !dbg !5073
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !5073
  %tobool102 = icmp ne i32 %bf.cast101, 0, !dbg !5073
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !5074

if.then103:                                       ; preds = %land.lhs.true95
  br label %if.end462, !dbg !5075

if.end104:                                        ; preds = %land.lhs.true95, %if.end
  %42 = load void (%union.tree_node*, %struct.rtx_def*, i32)*, void (%union.tree_node*, %struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 51), align 8, !dbg !5076
  %43 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5077
  %44 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5078
  %decl_with_rtl105 = bitcast %union.tree_node* %44 to %struct.tree_decl_with_rtl*, !dbg !5078
  %rtl106 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl105, i32 0, i32 1, !dbg !5078
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rtl106, align 8, !dbg !5078
  %tobool107 = icmp ne %struct.rtx_def* %45, null, !dbg !5078
  br i1 %tobool107, label %cond.true108, label %cond.false111, !dbg !5078

cond.true108:                                     ; preds = %if.end104
  %46 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5078
  %decl_with_rtl109 = bitcast %union.tree_node* %46 to %struct.tree_decl_with_rtl*, !dbg !5078
  %rtl110 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl109, i32 0, i32 1, !dbg !5078
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rtl110, align 8, !dbg !5078
  br label %cond.end114, !dbg !5078

cond.false111:                                    ; preds = %if.end104
  %48 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5078
  call void @make_decl_rtl(%union.tree_node* %48), !dbg !5078
  %49 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5078
  %decl_with_rtl112 = bitcast %union.tree_node* %49 to %struct.tree_decl_with_rtl*, !dbg !5078
  %rtl113 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl112, i32 0, i32 1, !dbg !5078
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rtl113, align 8, !dbg !5078
  br label %cond.end114, !dbg !5078

cond.end114:                                      ; preds = %cond.false111, %cond.true108
  %cond115 = phi %struct.rtx_def* [ %47, %cond.true108 ], [ %50, %cond.false111 ], !dbg !5078
  call void %42(%union.tree_node* %43, %struct.rtx_def* %cond115, i32 0), !dbg !5079
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5080
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !5080
  %bf.load116 = load i32, i32* %52, align 8, !dbg !5080
  %bf.clear117 = and i32 %bf.load116, 65535, !dbg !5080
  %cmp118 = icmp eq i32 %bf.clear117, 43, !dbg !5080
  br i1 %cmp118, label %land.lhs.true120, label %if.end142, !dbg !5082

land.lhs.true120:                                 ; preds = %cond.end114
  %53 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5083
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !5083
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5083
  %arrayidx121 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5083
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx121 to %struct.rtx_def**, !dbg !5083
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5083
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !5083
  %bf.load122 = load i32, i32* %55, align 8, !dbg !5083
  %bf.clear123 = and i32 %bf.load122, 65535, !dbg !5083
  %cmp124 = icmp eq i32 %bf.clear123, 45, !dbg !5084
  br i1 %cmp124, label %land.lhs.true126, label %if.end142, !dbg !5085

land.lhs.true126:                                 ; preds = %land.lhs.true120
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5086
  %u127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !5086
  %fld128 = bitcast %union.u* %u127 to [1 x %union.rtunion_def]*, !dbg !5086
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i64 0, i64 0, !dbg !5086
  %rt_rtx130 = bitcast %union.rtunion_def* %arrayidx129 to %struct.rtx_def**, !dbg !5086
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx130, align 8, !dbg !5086
  %u131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !5086
  %fld132 = bitcast %union.u* %u131 to [1 x %union.rtunion_def]*, !dbg !5086
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i64 0, i64 1, !dbg !5086
  %rt_int = bitcast %union.rtunion_def* %arrayidx133 to i32*, !dbg !5086
  %58 = load i32, i32* %rt_int, align 8, !dbg !5086
  %and = and i32 %58, 128, !dbg !5086
  %cmp134 = icmp ne i32 %and, 0, !dbg !5086
  br i1 %cmp134, label %if.then136, label %if.end142, !dbg !5087

if.then136:                                       ; preds = %land.lhs.true126
  %59 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5088
  %u137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !5088
  %fld138 = bitcast %union.u* %u137 to [1 x %union.rtunion_def]*, !dbg !5088
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld138, i64 0, i64 0, !dbg !5088
  %rt_rtx140 = bitcast %union.rtunion_def* %arrayidx139 to %struct.rtx_def**, !dbg !5088
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx140, align 8, !dbg !5088
  %61 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5089
  %call141 = call %struct.object_block* @get_block_for_decl(%union.tree_node* %61), !dbg !5090
  call void @change_symbol_block(%struct.rtx_def* %60, %struct.object_block* %call141), !dbg !5091
  br label %if.end142, !dbg !5091

if.end142:                                        ; preds = %if.then136, %land.lhs.true126, %land.lhs.true120, %cond.end114
  %62 = load i32, i32* @flag_mudflap, align 4, !dbg !5092
  %tobool143 = icmp ne i32 %62, 0, !dbg !5092
  br i1 %tobool143, label %land.lhs.true144, label %if.end152, !dbg !5094

land.lhs.true144:                                 ; preds = %if.end142
  %63 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5095
  %base145 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !5095
  %64 = bitcast %struct.tree_base* %base145 to i64*, !dbg !5095
  %bf.load146 = load i64, i64* %64, align 8, !dbg !5095
  %bf.clear147 = and i64 %bf.load146, 65535, !dbg !5095
  %bf.cast148 = trunc i64 %bf.clear147 to i32, !dbg !5095
  %cmp149 = icmp eq i32 %bf.cast148, 32, !dbg !5096
  br i1 %cmp149, label %if.then151, label %if.end152, !dbg !5097

if.then151:                                       ; preds = %land.lhs.true144
  %65 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5098
  call void @mudflap_enqueue_decl(%union.tree_node* %65), !dbg !5099
  br label %if.end152, !dbg !5099

if.end152:                                        ; preds = %if.then151, %land.lhs.true144, %if.end142
  br label %if.end462, !dbg !5100

if.end153:                                        ; preds = %land.lhs.true60, %cond.end52
  %66 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5101
  %call154 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %66), !dbg !5101
  %identifier = bitcast %union.tree_node* %call154 to %struct.tree_identifier*, !dbg !5101
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !5101
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !5101
  %67 = load i8*, i8** %str, align 8, !dbg !5101
  store i8* %67, i8** %name, align 8, !dbg !5102
  %68 = load i8*, i8** %name, align 8, !dbg !5103
  %arrayidx155 = getelementptr inbounds i8, i8* %68, i64 0, !dbg !5103
  %69 = load i8, i8* %arrayidx155, align 1, !dbg !5103
  %conv156 = sext i8 %69 to i32, !dbg !5103
  %cmp157 = icmp ne i32 %conv156, 42, !dbg !5105
  br i1 %cmp157, label %land.lhs.true159, label %if.else, !dbg !5106

land.lhs.true159:                                 ; preds = %if.end153
  %70 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5107
  %base160 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !5107
  %71 = bitcast %struct.tree_base* %base160 to i64*, !dbg !5107
  %bf.load161 = load i64, i64* %71, align 8, !dbg !5107
  %bf.clear162 = and i64 %bf.load161, 65535, !dbg !5107
  %bf.cast163 = trunc i64 %bf.clear162 to i32, !dbg !5107
  %cmp164 = icmp ne i32 %bf.cast163, 29, !dbg !5108
  br i1 %cmp164, label %land.lhs.true166, label %if.else, !dbg !5109

land.lhs.true166:                                 ; preds = %land.lhs.true159
  %72 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5110
  %decl_common167 = bitcast %union.tree_node* %72 to %struct.tree_decl_common*, !dbg !5110
  %decl_flag_0168 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common167, i32 0, i32 2, !dbg !5110
  %73 = bitcast i40* %decl_flag_0168 to i64*, !dbg !5110
  %bf.load169 = load i64, i64* %73, align 8, !dbg !5110
  %bf.lshr170 = lshr i64 %bf.load169, 24, !dbg !5110
  %bf.clear171 = and i64 %bf.lshr170, 1, !dbg !5110
  %bf.cast172 = trunc i64 %bf.clear171 to i32, !dbg !5110
  %tobool173 = icmp ne i32 %bf.cast172, 0, !dbg !5110
  br i1 %tobool173, label %if.then174, label %if.else, !dbg !5111

if.then174:                                       ; preds = %land.lhs.true166
  %74 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5112
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.39, i64 0, i64 0), %union.tree_node* %74), !dbg !5114
  br label %if.end337, !dbg !5115

if.else:                                          ; preds = %land.lhs.true166, %land.lhs.true159, %if.end153
  %75 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5116
  %base175 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !5116
  %76 = bitcast %struct.tree_base* %base175 to i64*, !dbg !5116
  %bf.load176 = load i64, i64* %76, align 8, !dbg !5116
  %bf.clear177 = and i64 %bf.load176, 65535, !dbg !5116
  %bf.cast178 = trunc i64 %bf.clear177 to i32, !dbg !5116
  %cmp179 = icmp ne i32 %bf.cast178, 29, !dbg !5118
  br i1 %cmp179, label %land.lhs.true181, label %if.else329, !dbg !5119

land.lhs.true181:                                 ; preds = %if.else
  %77 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5120
  %decl_common182 = bitcast %union.tree_node* %77 to %struct.tree_decl_common*, !dbg !5120
  %decl_flag_0183 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common182, i32 0, i32 2, !dbg !5120
  %78 = bitcast i40* %decl_flag_0183 to i64*, !dbg !5120
  %bf.load184 = load i64, i64* %78, align 8, !dbg !5120
  %bf.lshr185 = lshr i64 %bf.load184, 24, !dbg !5120
  %bf.clear186 = and i64 %bf.lshr185, 1, !dbg !5120
  %bf.cast187 = trunc i64 %bf.clear186 to i32, !dbg !5120
  %tobool188 = icmp ne i32 %bf.cast187, 0, !dbg !5120
  br i1 %tobool188, label %if.then189, label %if.else329, !dbg !5121

if.then189:                                       ; preds = %land.lhs.true181
  call void @llvm.dbg.declare(metadata i8** %asmspec, metadata !5122, metadata !DIExpression()), !dbg !5124
  %79 = load i8*, i8** %name, align 8, !dbg !5125
  %add.ptr = getelementptr inbounds i8, i8* %79, i64 1, !dbg !5126
  store i8* %add.ptr, i8** %asmspec, align 8, !dbg !5124
  %80 = load i8*, i8** %asmspec, align 8, !dbg !5127
  %call190 = call i32 @decode_reg_name(i8* %80), !dbg !5128
  store i32 %call190, i32* %reg_number, align 4, !dbg !5129
  %81 = load i32, i32* %reg_number, align 4, !dbg !5130
  %cmp191 = icmp eq i32 %81, -1, !dbg !5132
  br i1 %cmp191, label %if.then193, label %if.else194, !dbg !5133

if.then193:                                       ; preds = %if.then189
  %82 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5134
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.39, i64 0, i64 0), %union.tree_node* %82), !dbg !5135
  br label %if.end328, !dbg !5135

if.else194:                                       ; preds = %if.then189
  %83 = load i32, i32* %reg_number, align 4, !dbg !5136
  %cmp195 = icmp slt i32 %83, 0, !dbg !5138
  br i1 %cmp195, label %if.then197, label %if.else198, !dbg !5139

if.then197:                                       ; preds = %if.else194
  %84 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5140
  call void (i8*, ...) @error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.40, i64 0, i64 0), %union.tree_node* %84), !dbg !5141
  br label %if.end327, !dbg !5141

if.else198:                                       ; preds = %if.else194
  %85 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5142
  %common = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !5142
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5142
  %86 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5142
  %base199 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !5142
  %87 = bitcast %struct.tree_base* %base199 to i64*, !dbg !5142
  %bf.load200 = load i64, i64* %87, align 8, !dbg !5142
  %bf.clear201 = and i64 %bf.load200, 65535, !dbg !5142
  %bf.cast202 = trunc i64 %bf.clear201 to i32, !dbg !5142
  %cmp203 = icmp eq i32 %bf.cast202, 14, !dbg !5142
  br i1 %cmp203, label %cond.true205, label %cond.false209, !dbg !5142

cond.true205:                                     ; preds = %if.else198
  %88 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5142
  %common206 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !5142
  %type207 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common206, i32 0, i32 2, !dbg !5142
  %89 = load %union.tree_node*, %union.tree_node** %type207, align 8, !dbg !5142
  %call208 = call i32 @vector_type_mode(%union.tree_node* %89), !dbg !5142
  br label %cond.end217, !dbg !5142

cond.false209:                                    ; preds = %if.else198
  %90 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5142
  %common210 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !5142
  %type211 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common210, i32 0, i32 2, !dbg !5142
  %91 = load %union.tree_node*, %union.tree_node** %type211, align 8, !dbg !5142
  %type212 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !5142
  %mode213 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type212, i32 0, i32 6, !dbg !5142
  %bf.load214 = load i32, i32* %mode213, align 4, !dbg !5142
  %bf.lshr215 = lshr i32 %bf.load214, 16, !dbg !5142
  %bf.clear216 = and i32 %bf.lshr215, 255, !dbg !5142
  br label %cond.end217, !dbg !5142

cond.end217:                                      ; preds = %cond.false209, %cond.true205
  %cond218 = phi i32 [ %call208, %cond.true205 ], [ %bf.clear216, %cond.false209 ], !dbg !5142
  %cmp219 = icmp eq i32 %cond218, 1, !dbg !5144
  br i1 %cmp219, label %if.then221, label %if.else222, !dbg !5145

if.then221:                                       ; preds = %cond.end217
  %92 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5146
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.41, i64 0, i64 0), %union.tree_node* %92), !dbg !5147
  br label %if.end326, !dbg !5147

if.else222:                                       ; preds = %cond.end217
  %93 = load i32, i32* %reg_number, align 4, !dbg !5148
  %94 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5148
  %common223 = bitcast %union.tree_node* %94 to %struct.tree_common*, !dbg !5148
  %type224 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common223, i32 0, i32 2, !dbg !5148
  %95 = load %union.tree_node*, %union.tree_node** %type224, align 8, !dbg !5148
  %base225 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !5148
  %96 = bitcast %struct.tree_base* %base225 to i64*, !dbg !5148
  %bf.load226 = load i64, i64* %96, align 8, !dbg !5148
  %bf.clear227 = and i64 %bf.load226, 65535, !dbg !5148
  %bf.cast228 = trunc i64 %bf.clear227 to i32, !dbg !5148
  %cmp229 = icmp eq i32 %bf.cast228, 14, !dbg !5148
  br i1 %cmp229, label %cond.true231, label %cond.false235, !dbg !5148

cond.true231:                                     ; preds = %if.else222
  %97 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5148
  %common232 = bitcast %union.tree_node* %97 to %struct.tree_common*, !dbg !5148
  %type233 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common232, i32 0, i32 2, !dbg !5148
  %98 = load %union.tree_node*, %union.tree_node** %type233, align 8, !dbg !5148
  %call234 = call i32 @vector_type_mode(%union.tree_node* %98), !dbg !5148
  br label %cond.end243, !dbg !5148

cond.false235:                                    ; preds = %if.else222
  %99 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5148
  %common236 = bitcast %union.tree_node* %99 to %struct.tree_common*, !dbg !5148
  %type237 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common236, i32 0, i32 2, !dbg !5148
  %100 = load %union.tree_node*, %union.tree_node** %type237, align 8, !dbg !5148
  %type238 = bitcast %union.tree_node* %100 to %struct.tree_type*, !dbg !5148
  %mode239 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type238, i32 0, i32 6, !dbg !5148
  %bf.load240 = load i32, i32* %mode239, align 4, !dbg !5148
  %bf.lshr241 = lshr i32 %bf.load240, 16, !dbg !5148
  %bf.clear242 = and i32 %bf.lshr241, 255, !dbg !5148
  br label %cond.end243, !dbg !5148

cond.end243:                                      ; preds = %cond.false235, %cond.true231
  %cond244 = phi i32 [ %call234, %cond.true231 ], [ %bf.clear242, %cond.false235 ], !dbg !5148
  %call245 = call zeroext i8 @ix86_hard_regno_mode_ok(i32 %93, i32 %cond244), !dbg !5148
  %tobool246 = icmp ne i8 %call245, 0, !dbg !5148
  br i1 %tobool246, label %if.else248, label %if.then247, !dbg !5150

if.then247:                                       ; preds = %cond.end243
  %101 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5151
  call void (i8*, ...) @error(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.42, i64 0, i64 0), %union.tree_node* %101), !dbg !5152
  br label %if.end325, !dbg !5152

if.else248:                                       ; preds = %cond.end243
  call void @llvm.dbg.declare(metadata i32* %nregs, metadata !5153, metadata !DIExpression()), !dbg !5155
  %102 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5156
  %decl_common249 = bitcast %union.tree_node* %102 to %struct.tree_decl_common*, !dbg !5156
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common249, i32 0, i32 5, !dbg !5156
  %103 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5156
  %cmp250 = icmp ne %union.tree_node* %103, null, !dbg !5158
  br i1 %cmp250, label %land.lhs.true252, label %if.end262, !dbg !5159

land.lhs.true252:                                 ; preds = %if.else248
  %104 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5160
  %base253 = bitcast %union.tree_node* %104 to %struct.tree_base*, !dbg !5160
  %105 = bitcast %struct.tree_base* %base253 to i64*, !dbg !5160
  %bf.load254 = load i64, i64* %105, align 8, !dbg !5160
  %bf.lshr255 = lshr i64 %bf.load254, 26, !dbg !5160
  %bf.clear256 = and i64 %bf.lshr255, 1, !dbg !5160
  %bf.cast257 = trunc i64 %bf.clear256 to i32, !dbg !5160
  %tobool258 = icmp ne i32 %bf.cast257, 0, !dbg !5160
  br i1 %tobool258, label %if.then259, label %if.end262, !dbg !5161

if.then259:                                       ; preds = %land.lhs.true252
  %106 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5162
  %decl_common260 = bitcast %union.tree_node* %106 to %struct.tree_decl_common*, !dbg !5162
  %initial261 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common260, i32 0, i32 5, !dbg !5162
  store %union.tree_node* null, %union.tree_node** %initial261, align 8, !dbg !5164
  call void (i8*, ...) @error(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.43, i64 0, i64 0)), !dbg !5165
  br label %if.end262, !dbg !5166

if.end262:                                        ; preds = %if.then259, %land.lhs.true252, %if.else248
  %107 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5167
  %base263 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !5167
  %108 = bitcast %struct.tree_base* %base263 to i64*, !dbg !5167
  %bf.load264 = load i64, i64* %108, align 8, !dbg !5167
  %bf.lshr265 = lshr i64 %bf.load264, 19, !dbg !5167
  %bf.clear266 = and i64 %bf.lshr265, 1, !dbg !5167
  %bf.cast267 = trunc i64 %bf.clear266 to i32, !dbg !5167
  %tobool268 = icmp ne i32 %bf.cast267, 0, !dbg !5167
  br i1 %tobool268, label %if.then269, label %if.end271, !dbg !5169

if.then269:                                       ; preds = %if.end262
  %call270 = call zeroext i8 (i32, i8*, ...) @warning(i32 235, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.44, i64 0, i64 0)), !dbg !5170
  br label %if.end271, !dbg !5170

if.end271:                                        ; preds = %if.then269, %if.end262
  %109 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5171
  %110 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5171
  %decl_common272 = bitcast %union.tree_node* %110 to %struct.tree_decl_common*, !dbg !5171
  %mode273 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common272, i32 0, i32 2, !dbg !5171
  %111 = bitcast i40* %mode273 to i64*, !dbg !5171
  %bf.load274 = load i64, i64* %111, align 8, !dbg !5171
  %bf.clear275 = and i64 %bf.load274, 255, !dbg !5171
  %bf.cast276 = trunc i64 %bf.clear275 to i32, !dbg !5171
  %112 = load i32, i32* %reg_number, align 4, !dbg !5171
  %call277 = call %struct.rtx_def* @gen_rtx_fmt_i00_stat(i32 37, i32 %bf.cast276, i32 %112), !dbg !5171
  call void @set_decl_rtl(%union.tree_node* %109, %struct.rtx_def* %call277), !dbg !5171
  %113 = load i32, i32* %reg_number, align 4, !dbg !5172
  %114 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5173
  %decl_with_rtl278 = bitcast %union.tree_node* %114 to %struct.tree_decl_with_rtl*, !dbg !5173
  %rtl279 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl278, i32 0, i32 1, !dbg !5173
  %115 = load %struct.rtx_def*, %struct.rtx_def** %rtl279, align 8, !dbg !5173
  %tobool280 = icmp ne %struct.rtx_def* %115, null, !dbg !5173
  br i1 %tobool280, label %cond.true281, label %cond.false284, !dbg !5173

cond.true281:                                     ; preds = %if.end271
  %116 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5173
  %decl_with_rtl282 = bitcast %union.tree_node* %116 to %struct.tree_decl_with_rtl*, !dbg !5173
  %rtl283 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl282, i32 0, i32 1, !dbg !5173
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rtl283, align 8, !dbg !5173
  br label %cond.end287, !dbg !5173

cond.false284:                                    ; preds = %if.end271
  %118 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5173
  call void @make_decl_rtl(%union.tree_node* %118), !dbg !5173
  %119 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5173
  %decl_with_rtl285 = bitcast %union.tree_node* %119 to %struct.tree_decl_with_rtl*, !dbg !5173
  %rtl286 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl285, i32 0, i32 1, !dbg !5173
  %120 = load %struct.rtx_def*, %struct.rtx_def** %rtl286, align 8, !dbg !5173
  br label %cond.end287, !dbg !5173

cond.end287:                                      ; preds = %cond.false284, %cond.true281
  %cond288 = phi %struct.rtx_def* [ %117, %cond.true281 ], [ %120, %cond.false284 ], !dbg !5173
  %u289 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond288, i32 0, i32 1, !dbg !5173
  %fld290 = bitcast %union.u* %u289 to [1 x %union.rtunion_def]*, !dbg !5173
  %arrayidx291 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld290, i64 0, i64 1, !dbg !5173
  %rt_uint = bitcast %union.rtunion_def* %arrayidx291 to i32*, !dbg !5173
  store i32 %113, i32* %rt_uint, align 8, !dbg !5174
  %121 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5175
  %decl_with_rtl292 = bitcast %union.tree_node* %121 to %struct.tree_decl_with_rtl*, !dbg !5175
  %rtl293 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl292, i32 0, i32 1, !dbg !5175
  %122 = load %struct.rtx_def*, %struct.rtx_def** %rtl293, align 8, !dbg !5175
  %tobool294 = icmp ne %struct.rtx_def* %122, null, !dbg !5175
  br i1 %tobool294, label %cond.true295, label %cond.false298, !dbg !5175

cond.true295:                                     ; preds = %cond.end287
  %123 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5175
  %decl_with_rtl296 = bitcast %union.tree_node* %123 to %struct.tree_decl_with_rtl*, !dbg !5175
  %rtl297 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl296, i32 0, i32 1, !dbg !5175
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rtl297, align 8, !dbg !5175
  br label %cond.end301, !dbg !5175

cond.false298:                                    ; preds = %cond.end287
  %125 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5175
  call void @make_decl_rtl(%union.tree_node* %125), !dbg !5175
  %126 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5175
  %decl_with_rtl299 = bitcast %union.tree_node* %126 to %struct.tree_decl_with_rtl*, !dbg !5175
  %rtl300 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl299, i32 0, i32 1, !dbg !5175
  %127 = load %struct.rtx_def*, %struct.rtx_def** %rtl300, align 8, !dbg !5175
  br label %cond.end301, !dbg !5175

cond.end301:                                      ; preds = %cond.false298, %cond.true295
  %cond302 = phi %struct.rtx_def* [ %124, %cond.true295 ], [ %127, %cond.false298 ], !dbg !5175
  %128 = bitcast %struct.rtx_def* %cond302 to i32*, !dbg !5175
  %bf.load303 = load i32, i32* %128, align 8, !dbg !5176
  %bf.clear304 = and i32 %bf.load303, -134217729, !dbg !5176
  %bf.set = or i32 %bf.clear304, 134217728, !dbg !5176
  store i32 %bf.set, i32* %128, align 8, !dbg !5176
  %129 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5177
  %base305 = bitcast %union.tree_node* %129 to %struct.tree_base*, !dbg !5177
  %130 = bitcast %struct.tree_base* %base305 to i64*, !dbg !5177
  %bf.load306 = load i64, i64* %130, align 8, !dbg !5177
  %bf.lshr307 = lshr i64 %bf.load306, 26, !dbg !5177
  %bf.clear308 = and i64 %bf.lshr307, 1, !dbg !5177
  %bf.cast309 = trunc i64 %bf.clear308 to i32, !dbg !5177
  %tobool310 = icmp ne i32 %bf.cast309, 0, !dbg !5177
  br i1 %tobool310, label %if.then311, label %if.end324, !dbg !5179

if.then311:                                       ; preds = %cond.end301
  %131 = load i32, i32* %reg_number, align 4, !dbg !5180
  %idxprom312 = sext i32 %131 to i64, !dbg !5182
  %arrayidx313 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom312, !dbg !5182
  %132 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5183
  %decl_common314 = bitcast %union.tree_node* %132 to %struct.tree_decl_common*, !dbg !5183
  %mode315 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common314, i32 0, i32 2, !dbg !5183
  %133 = bitcast i40* %mode315 to i64*, !dbg !5183
  %bf.load316 = load i64, i64* %133, align 8, !dbg !5183
  %bf.clear317 = and i64 %bf.load316, 255, !dbg !5183
  %bf.cast318 = trunc i64 %bf.clear317 to i32, !dbg !5183
  %idxprom319 = zext i32 %bf.cast318 to i64, !dbg !5182
  %arrayidx320 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx313, i64 0, i64 %idxprom319, !dbg !5182
  %134 = load i8, i8* %arrayidx320, align 1, !dbg !5182
  %conv321 = zext i8 %134 to i32, !dbg !5182
  store i32 %conv321, i32* %nregs, align 4, !dbg !5184
  br label %while.cond, !dbg !5185

while.cond:                                       ; preds = %while.body, %if.then311
  %135 = load i32, i32* %nregs, align 4, !dbg !5186
  %cmp322 = icmp sgt i32 %135, 0, !dbg !5187
  br i1 %cmp322, label %while.body, label %while.end, !dbg !5185

while.body:                                       ; preds = %while.cond
  %136 = load i32, i32* %reg_number, align 4, !dbg !5188
  %137 = load i32, i32* %nregs, align 4, !dbg !5189
  %dec = add nsw i32 %137, -1, !dbg !5189
  store i32 %dec, i32* %nregs, align 4, !dbg !5189
  %add = add nsw i32 %136, %dec, !dbg !5190
  call void @globalize_reg(i32 %add), !dbg !5191
  br label %while.cond, !dbg !5185, !llvm.loop !5192

while.end:                                        ; preds = %while.cond
  br label %if.end324, !dbg !5194

if.end324:                                        ; preds = %while.end, %cond.end301
  br label %if.end462, !dbg !5195

if.end325:                                        ; preds = %if.then247
  br label %if.end326

if.end326:                                        ; preds = %if.end325, %if.then221
  br label %if.end327

if.end327:                                        ; preds = %if.end326, %if.then197
  br label %if.end328

if.end328:                                        ; preds = %if.end327, %if.then193
  br label %if.end336, !dbg !5196

if.else329:                                       ; preds = %land.lhs.true181, %if.else
  %138 = load i8*, i8** %name, align 8, !dbg !5197
  %arrayidx330 = getelementptr inbounds i8, i8* %138, i64 0, !dbg !5197
  %139 = load i8, i8* %arrayidx330, align 1, !dbg !5197
  %conv331 = sext i8 %139 to i32, !dbg !5197
  %cmp332 = icmp eq i32 %conv331, 42, !dbg !5199
  br i1 %cmp332, label %if.then334, label %if.end335, !dbg !5200

if.then334:                                       ; preds = %if.else329
  br label %if.end335, !dbg !5201

if.end335:                                        ; preds = %if.then334, %if.else329
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %if.end328
  br label %if.end337

if.end337:                                        ; preds = %if.end336, %if.then174
  %140 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5203
  %base338 = bitcast %union.tree_node* %140 to %struct.tree_base*, !dbg !5203
  %141 = bitcast %struct.tree_base* %base338 to i64*, !dbg !5203
  %bf.load339 = load i64, i64* %141, align 8, !dbg !5203
  %bf.clear340 = and i64 %bf.load339, 65535, !dbg !5203
  %bf.cast341 = trunc i64 %bf.clear340 to i32, !dbg !5203
  %cmp342 = icmp eq i32 %bf.cast341, 32, !dbg !5205
  br i1 %cmp342, label %land.lhs.true344, label %if.end363, !dbg !5206

land.lhs.true344:                                 ; preds = %if.end337
  %142 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5207
  %decl_with_vis = bitcast %union.tree_node* %142 to %struct.tree_decl_with_vis*, !dbg !5207
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 2, !dbg !5207
  %143 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !5207
  %cmp345 = icmp ne %union.tree_node* %143, null, !dbg !5208
  br i1 %cmp345, label %land.lhs.true347, label %if.end363, !dbg !5209

land.lhs.true347:                                 ; preds = %land.lhs.true344
  %144 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5210
  %decl_common348 = bitcast %union.tree_node* %144 to %struct.tree_decl_common*, !dbg !5210
  %initial349 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common348, i32 0, i32 5, !dbg !5210
  %145 = load %union.tree_node*, %union.tree_node** %initial349, align 8, !dbg !5210
  %cmp350 = icmp eq %union.tree_node* %145, null, !dbg !5211
  br i1 %cmp350, label %land.lhs.true352, label %if.end363, !dbg !5212

land.lhs.true352:                                 ; preds = %land.lhs.true347
  %146 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5213
  %decl_with_vis353 = bitcast %union.tree_node* %146 to %struct.tree_decl_with_vis*, !dbg !5213
  %common_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis353, i32 0, i32 4, !dbg !5213
  %147 = bitcast i24* %common_flag to i32*, !dbg !5213
  %bf.load354 = load i32, i32* %147, align 8, !dbg !5213
  %bf.lshr355 = lshr i32 %bf.load354, 3, !dbg !5213
  %bf.clear356 = and i32 %bf.lshr355, 1, !dbg !5213
  %tobool357 = icmp ne i32 %bf.clear356, 0, !dbg !5213
  br i1 %tobool357, label %if.then358, label %if.end363, !dbg !5214

if.then358:                                       ; preds = %land.lhs.true352
  %148 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5215
  %decl_with_vis359 = bitcast %union.tree_node* %148 to %struct.tree_decl_with_vis*, !dbg !5215
  %common_flag360 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis359, i32 0, i32 4, !dbg !5215
  %149 = bitcast i24* %common_flag360 to i32*, !dbg !5215
  %bf.load361 = load i32, i32* %149, align 8, !dbg !5216
  %bf.clear362 = and i32 %bf.load361, -9, !dbg !5216
  store i32 %bf.clear362, i32* %149, align 8, !dbg !5216
  br label %if.end363, !dbg !5215

if.end363:                                        ; preds = %if.then358, %land.lhs.true352, %land.lhs.true347, %land.lhs.true344, %if.end337
  %150 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5217
  %base364 = bitcast %union.tree_node* %150 to %struct.tree_base*, !dbg !5217
  %151 = bitcast %struct.tree_base* %base364 to i64*, !dbg !5217
  %bf.load365 = load i64, i64* %151, align 8, !dbg !5217
  %bf.clear366 = and i64 %bf.load365, 65535, !dbg !5217
  %bf.cast367 = trunc i64 %bf.clear366 to i32, !dbg !5217
  %cmp368 = icmp eq i32 %bf.cast367, 32, !dbg !5219
  br i1 %cmp368, label %land.lhs.true370, label %if.end381, !dbg !5220

land.lhs.true370:                                 ; preds = %if.end363
  %152 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5221
  %decl_with_vis371 = bitcast %union.tree_node* %152 to %struct.tree_decl_with_vis*, !dbg !5221
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis371, i32 0, i32 4, !dbg !5221
  %153 = bitcast i24* %weak_flag to i32*, !dbg !5221
  %bf.load372 = load i32, i32* %153, align 8, !dbg !5221
  %bf.lshr373 = lshr i32 %bf.load372, 7, !dbg !5221
  %bf.clear374 = and i32 %bf.lshr373, 1, !dbg !5221
  %tobool375 = icmp ne i32 %bf.clear374, 0, !dbg !5221
  br i1 %tobool375, label %if.then376, label %if.end381, !dbg !5222

if.then376:                                       ; preds = %land.lhs.true370
  %154 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5223
  %decl_with_vis377 = bitcast %union.tree_node* %154 to %struct.tree_decl_with_vis*, !dbg !5223
  %common_flag378 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis377, i32 0, i32 4, !dbg !5223
  %155 = bitcast i24* %common_flag378 to i32*, !dbg !5223
  %bf.load379 = load i32, i32* %155, align 8, !dbg !5224
  %bf.clear380 = and i32 %bf.load379, -9, !dbg !5224
  store i32 %bf.clear380, i32* %155, align 8, !dbg !5224
  br label %if.end381, !dbg !5223

if.end381:                                        ; preds = %if.then376, %land.lhs.true370, %if.end363
  %call382 = call zeroext i8 @use_object_blocks_p(), !dbg !5225
  %conv383 = zext i8 %call382 to i32, !dbg !5225
  %tobool384 = icmp ne i32 %conv383, 0, !dbg !5225
  br i1 %tobool384, label %land.lhs.true385, label %if.else392, !dbg !5227

land.lhs.true385:                                 ; preds = %if.end381
  %156 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5228
  %call386 = call zeroext i8 @use_blocks_for_decl_p(%union.tree_node* %156), !dbg !5229
  %conv387 = zext i8 %call386 to i32, !dbg !5229
  %tobool388 = icmp ne i32 %conv387, 0, !dbg !5229
  br i1 %tobool388, label %if.then389, label %if.else392, !dbg !5230

if.then389:                                       ; preds = %land.lhs.true385
  %157 = load i8*, i8** %name, align 8, !dbg !5231
  %158 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5232
  %call390 = call %struct.object_block* @get_block_for_decl(%union.tree_node* %158), !dbg !5233
  %call391 = call %struct.rtx_def* @create_block_symbol(i8* %157, %struct.object_block* %call390, i64 -1), !dbg !5234
  store %struct.rtx_def* %call391, %struct.rtx_def** %x, align 8, !dbg !5235
  br label %if.end408, !dbg !5236

if.else392:                                       ; preds = %land.lhs.true385, %if.end381
  call void @llvm.dbg.declare(metadata i32* %address_mode, metadata !5237, metadata !DIExpression()), !dbg !5239
  store i32 16, i32* %address_mode, align 4, !dbg !5239
  %159 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5240
  %common393 = bitcast %union.tree_node* %159 to %struct.tree_common*, !dbg !5240
  %type394 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common393, i32 0, i32 2, !dbg !5240
  %160 = load %union.tree_node*, %union.tree_node** %type394, align 8, !dbg !5240
  %161 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5242
  %cmp395 = icmp ne %union.tree_node* %160, %161, !dbg !5243
  br i1 %cmp395, label %if.then397, label %if.end406, !dbg !5244

if.then397:                                       ; preds = %if.else392
  call void @llvm.dbg.declare(metadata i8* %as, metadata !5245, metadata !DIExpression()), !dbg !5248
  %162 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5249
  %common398 = bitcast %union.tree_node* %162 to %struct.tree_common*, !dbg !5249
  %type399 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common398, i32 0, i32 2, !dbg !5249
  %163 = load %union.tree_node*, %union.tree_node** %type399, align 8, !dbg !5249
  %base400 = bitcast %union.tree_node* %163 to %struct.tree_base*, !dbg !5249
  %164 = bitcast %struct.tree_base* %base400 to i64*, !dbg !5249
  %bf.load401 = load i64, i64* %164, align 8, !dbg !5249
  %bf.lshr402 = lshr i64 %bf.load401, 56, !dbg !5249
  %bf.cast403 = trunc i64 %bf.lshr402 to i32, !dbg !5249
  %conv404 = trunc i32 %bf.cast403 to i8, !dbg !5249
  store i8 %conv404, i8* %as, align 1, !dbg !5248
  %165 = load i32 (i8)*, i32 (i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 57, i32 1), align 8, !dbg !5250
  %166 = load i8, i8* %as, align 1, !dbg !5251
  %call405 = call i32 %165(i8 zeroext %166), !dbg !5252
  store i32 %call405, i32* %address_mode, align 4, !dbg !5253
  br label %if.end406, !dbg !5254

if.end406:                                        ; preds = %if.then397, %if.else392
  %167 = load i32, i32* %address_mode, align 4, !dbg !5255
  %168 = load i8*, i8** %name, align 8, !dbg !5255
  %call407 = call %struct.rtx_def* @gen_rtx_fmt_s00_stat(i32 45, i32 %167, i8* %168), !dbg !5255
  store %struct.rtx_def* %call407, %struct.rtx_def** %x, align 8, !dbg !5256
  br label %if.end408

if.end408:                                        ; preds = %if.end406, %if.then389
  %169 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5257
  %decl_with_vis409 = bitcast %union.tree_node* %169 to %struct.tree_decl_with_vis*, !dbg !5257
  %weak_flag410 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis409, i32 0, i32 4, !dbg !5257
  %170 = bitcast i24* %weak_flag410 to i32*, !dbg !5257
  %bf.load411 = load i32, i32* %170, align 8, !dbg !5257
  %bf.lshr412 = lshr i32 %bf.load411, 7, !dbg !5257
  %bf.clear413 = and i32 %bf.lshr412, 1, !dbg !5257
  %171 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5258
  %172 = bitcast %struct.rtx_def* %171 to i32*, !dbg !5258
  %bf.load414 = load i32, i32* %172, align 8, !dbg !5259
  %bf.value = and i32 %bf.clear413, 1, !dbg !5259
  %bf.shl = shl i32 %bf.value, 31, !dbg !5259
  %bf.clear415 = and i32 %bf.load414, 2147483647, !dbg !5259
  %bf.set416 = or i32 %bf.clear415, %bf.shl, !dbg !5259
  store i32 %bf.set416, i32* %172, align 8, !dbg !5259
  %173 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5260
  %174 = bitcast %struct.rtx_def* %173 to i32*, !dbg !5260
  %bf.load417 = load i32, i32* %174, align 8, !dbg !5260
  %bf.lshr418 = lshr i32 %bf.load417, 26, !dbg !5260
  %bf.clear419 = and i32 %bf.lshr418, 1, !dbg !5260
  %tobool420 = icmp ne i32 %bf.clear419, 0, !dbg !5260
  br i1 %tobool420, label %cond.true421, label %cond.false422, !dbg !5260

cond.true421:                                     ; preds = %if.end408
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 1465, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !5260
  br label %cond.end423, !dbg !5260

cond.false422:                                    ; preds = %if.end408
  br label %cond.end423, !dbg !5260

cond.end423:                                      ; preds = %cond.false422, %cond.true421
  %cond424 = phi i32 [ 0, %cond.true421 ], [ 0, %cond.false422 ], !dbg !5260
  %175 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5260
  %176 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5260
  %u425 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %176, i32 0, i32 1, !dbg !5260
  %fld426 = bitcast %union.u* %u425 to [1 x %union.rtunion_def]*, !dbg !5260
  %arrayidx427 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld426, i64 0, i64 2, !dbg !5260
  %rt_tree = bitcast %union.rtunion_def* %arrayidx427 to %union.tree_node**, !dbg !5260
  store %union.tree_node* %175, %union.tree_node** %rt_tree, align 8, !dbg !5260
  %177 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5261
  %decl_common428 = bitcast %union.tree_node* %177 to %struct.tree_decl_common*, !dbg !5261
  %mode429 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common428, i32 0, i32 2, !dbg !5261
  %178 = bitcast i40* %mode429 to i64*, !dbg !5261
  %bf.load430 = load i64, i64* %178, align 8, !dbg !5261
  %bf.clear431 = and i64 %bf.load430, 255, !dbg !5261
  %bf.cast432 = trunc i64 %bf.clear431 to i32, !dbg !5261
  %179 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5262
  %call433 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast432, %struct.rtx_def* %179), !dbg !5263
  store %struct.rtx_def* %call433, %struct.rtx_def** %x, align 8, !dbg !5264
  %180 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5265
  %base434 = bitcast %union.tree_node* %180 to %struct.tree_base*, !dbg !5265
  %181 = bitcast %struct.tree_base* %base434 to i64*, !dbg !5265
  %bf.load435 = load i64, i64* %181, align 8, !dbg !5265
  %bf.clear436 = and i64 %bf.load435, 65535, !dbg !5265
  %bf.cast437 = trunc i64 %bf.clear436 to i32, !dbg !5265
  %cmp438 = icmp ne i32 %bf.cast437, 29, !dbg !5267
  br i1 %cmp438, label %if.then440, label %if.end441, !dbg !5268

if.then440:                                       ; preds = %cond.end423
  %182 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5269
  %183 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5270
  call void @set_mem_attributes(%struct.rtx_def* %182, %union.tree_node* %183, i32 1), !dbg !5271
  br label %if.end441, !dbg !5271

if.end441:                                        ; preds = %if.then440, %cond.end423
  %184 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5272
  %185 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5272
  call void @set_decl_rtl(%union.tree_node* %184, %struct.rtx_def* %185), !dbg !5272
  %186 = load void (%union.tree_node*, %struct.rtx_def*, i32)*, void (%union.tree_node*, %struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 51), align 8, !dbg !5273
  %187 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5274
  %188 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5275
  %decl_with_rtl442 = bitcast %union.tree_node* %188 to %struct.tree_decl_with_rtl*, !dbg !5275
  %rtl443 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl442, i32 0, i32 1, !dbg !5275
  %189 = load %struct.rtx_def*, %struct.rtx_def** %rtl443, align 8, !dbg !5275
  %tobool444 = icmp ne %struct.rtx_def* %189, null, !dbg !5275
  br i1 %tobool444, label %cond.true445, label %cond.false448, !dbg !5275

cond.true445:                                     ; preds = %if.end441
  %190 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5275
  %decl_with_rtl446 = bitcast %union.tree_node* %190 to %struct.tree_decl_with_rtl*, !dbg !5275
  %rtl447 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl446, i32 0, i32 1, !dbg !5275
  %191 = load %struct.rtx_def*, %struct.rtx_def** %rtl447, align 8, !dbg !5275
  br label %cond.end451, !dbg !5275

cond.false448:                                    ; preds = %if.end441
  %192 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5275
  call void @make_decl_rtl(%union.tree_node* %192), !dbg !5275
  %193 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5275
  %decl_with_rtl449 = bitcast %union.tree_node* %193 to %struct.tree_decl_with_rtl*, !dbg !5275
  %rtl450 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl449, i32 0, i32 1, !dbg !5275
  %194 = load %struct.rtx_def*, %struct.rtx_def** %rtl450, align 8, !dbg !5275
  br label %cond.end451, !dbg !5275

cond.end451:                                      ; preds = %cond.false448, %cond.true445
  %cond452 = phi %struct.rtx_def* [ %191, %cond.true445 ], [ %194, %cond.false448 ], !dbg !5275
  call void %186(%union.tree_node* %187, %struct.rtx_def* %cond452, i32 1), !dbg !5276
  %195 = load i32, i32* @flag_mudflap, align 4, !dbg !5277
  %tobool453 = icmp ne i32 %195, 0, !dbg !5277
  br i1 %tobool453, label %land.lhs.true454, label %if.end462, !dbg !5279

land.lhs.true454:                                 ; preds = %cond.end451
  %196 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5280
  %base455 = bitcast %union.tree_node* %196 to %struct.tree_base*, !dbg !5280
  %197 = bitcast %struct.tree_base* %base455 to i64*, !dbg !5280
  %bf.load456 = load i64, i64* %197, align 8, !dbg !5280
  %bf.clear457 = and i64 %bf.load456, 65535, !dbg !5280
  %bf.cast458 = trunc i64 %bf.clear457 to i32, !dbg !5280
  %cmp459 = icmp eq i32 %bf.cast458, 32, !dbg !5281
  br i1 %cmp459, label %if.then461, label %if.end462, !dbg !5282

if.then461:                                       ; preds = %land.lhs.true454
  %198 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5283
  call void @mudflap_enqueue_decl(%union.tree_node* %198), !dbg !5284
  br label %if.end462, !dbg !5284

if.end462:                                        ; preds = %if.then103, %if.end152, %if.end324, %if.then461, %land.lhs.true454, %cond.end451
  ret void, !dbg !5285
}

declare dso_local %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @change_symbol_block(%struct.rtx_def* %symbol, %struct.object_block* %block) #0 !dbg !5286 {
entry:
  %symbol.addr = alloca %struct.rtx_def*, align 8
  %block.addr = alloca %struct.object_block*, align 8
  store %struct.rtx_def* %symbol, %struct.rtx_def** %symbol.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol.addr, metadata !5289, metadata !DIExpression()), !dbg !5290
  store %struct.object_block* %block, %struct.object_block** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.object_block** %block.addr, metadata !5291, metadata !DIExpression()), !dbg !5292
  %0 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !5293
  %1 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !5295
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !5295
  %block_sym = bitcast %union.u* %u to %struct.block_symbol*, !dbg !5295
  %block1 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym, i32 0, i32 1, !dbg !5295
  %2 = load %struct.object_block*, %struct.object_block** %block1, align 8, !dbg !5295
  %cmp = icmp ne %struct.object_block* %0, %2, !dbg !5296
  br i1 %cmp, label %if.then, label %if.end, !dbg !5297

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !5298
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !5298
  %block_sym3 = bitcast %union.u* %u2 to %struct.block_symbol*, !dbg !5298
  %offset = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym3, i32 0, i32 2, !dbg !5298
  %4 = load i64, i64* %offset, align 8, !dbg !5298
  %cmp4 = icmp slt i64 %4, 0, !dbg !5298
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !5298

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 1264, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !5298
  br label %cond.end, !dbg !5298

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !5298

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5298
  %5 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !5300
  %6 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !5301
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !5301
  %block_sym6 = bitcast %union.u* %u5 to %struct.block_symbol*, !dbg !5301
  %block7 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym6, i32 0, i32 1, !dbg !5301
  store %struct.object_block* %5, %struct.object_block** %block7, align 8, !dbg !5302
  br label %if.end, !dbg !5303

if.end:                                           ; preds = %cond.end, %entry
  ret void, !dbg !5304
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.object_block* @get_block_for_decl(%union.tree_node* %decl) #0 !dbg !5305 {
entry:
  %retval = alloca %struct.object_block*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %sect = alloca %union.section*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5308, metadata !DIExpression()), !dbg !5309
  call void @llvm.dbg.declare(metadata %union.section** %sect, metadata !5310, metadata !DIExpression()), !dbg !5311
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5312
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5312
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5312
  %bf.load = load i64, i64* %1, align 8, !dbg !5312
  %bf.clear = and i64 %bf.load, 65535, !dbg !5312
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5312
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !5314
  br i1 %cmp, label %if.then, label %if.end8, !dbg !5315

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5316
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !5316
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5316
  %3 = bitcast i40* %decl_flag_1 to i64*, !dbg !5316
  %bf.load1 = load i64, i64* %3, align 8, !dbg !5316
  %bf.lshr = lshr i64 %bf.load1, 25, !dbg !5316
  %bf.clear2 = and i64 %bf.lshr, 1, !dbg !5316
  %bf.cast3 = trunc i64 %bf.clear2 to i32, !dbg !5316
  %tobool = icmp ne i32 %bf.cast3, 0, !dbg !5316
  br i1 %tobool, label %if.then4, label %if.end, !dbg !5319

if.then4:                                         ; preds = %if.then
  store %struct.object_block* null, %struct.object_block** %retval, align 8, !dbg !5320
  br label %return, !dbg !5320

if.end:                                           ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5321
  %decl_with_vis = bitcast %union.tree_node* %4 to %struct.tree_decl_with_vis*, !dbg !5321
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 3, !dbg !5321
  %5 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !5321
  %cmp5 = icmp ne %union.tree_node* %5, null, !dbg !5321
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !5323

if.then6:                                         ; preds = %if.end
  store %struct.object_block* null, %struct.object_block** %retval, align 8, !dbg !5324
  br label %return, !dbg !5324

if.end7:                                          ; preds = %if.end
  br label %if.end8, !dbg !5325

if.end8:                                          ; preds = %if.end7, %entry
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5326
  %decl_common9 = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !5326
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common9, i32 0, i32 4, !dbg !5326
  %7 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !5326
  %cmp10 = icmp eq %union.tree_node* %7, null, !dbg !5328
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !5329

if.then11:                                        ; preds = %if.end8
  store %struct.object_block* null, %struct.object_block** %retval, align 8, !dbg !5330
  br label %return, !dbg !5330

if.end12:                                         ; preds = %if.end8
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5331
  %decl_common13 = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !5331
  %size_unit14 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common13, i32 0, i32 4, !dbg !5331
  %9 = load %union.tree_node*, %union.tree_node** %size_unit14, align 8, !dbg !5331
  %call = call i32 @host_integerp(%union.tree_node* %9, i32 1), !dbg !5333
  %tobool15 = icmp ne i32 %call, 0, !dbg !5333
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !5334

if.then16:                                        ; preds = %if.end12
  store %struct.object_block* null, %struct.object_block** %retval, align 8, !dbg !5335
  br label %return, !dbg !5335

if.end17:                                         ; preds = %if.end12
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5336
  %base18 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5336
  %11 = bitcast %struct.tree_base* %base18 to i64*, !dbg !5336
  %bf.load19 = load i64, i64* %11, align 8, !dbg !5336
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !5336
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !5336
  %cmp22 = icmp eq i32 %bf.cast21, 32, !dbg !5338
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !5339

if.then23:                                        ; preds = %if.end17
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5340
  call void @align_variable(%union.tree_node* %12, i8 zeroext 0), !dbg !5341
  br label %if.end24, !dbg !5341

if.end24:                                         ; preds = %if.then23, %if.end17
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5342
  %call25 = call %union.section* @get_variable_section(%union.tree_node* %13, i8 zeroext 1), !dbg !5343
  store %union.section* %call25, %union.section** %sect, align 8, !dbg !5344
  %14 = load %union.section*, %union.section** %sect, align 8, !dbg !5345
  %common = bitcast %union.section* %14 to %struct.section_common*, !dbg !5345
  %flags = getelementptr inbounds %struct.section_common, %struct.section_common* %common, i32 0, i32 0, !dbg !5345
  %15 = load i32, i32* %flags, align 8, !dbg !5345
  %and = and i32 %15, 6291456, !dbg !5345
  %cmp26 = icmp eq i32 %and, 4194304, !dbg !5347
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !5348

if.then27:                                        ; preds = %if.end24
  store %struct.object_block* null, %struct.object_block** %retval, align 8, !dbg !5349
  br label %return, !dbg !5349

if.end28:                                         ; preds = %if.end24
  %16 = load %union.section*, %union.section** %sect, align 8, !dbg !5350
  %call29 = call %struct.object_block* @get_block_for_section(%union.section* %16), !dbg !5351
  store %struct.object_block* %call29, %struct.object_block** %retval, align 8, !dbg !5352
  br label %return, !dbg !5352

return:                                           ; preds = %if.end28, %if.then27, %if.then16, %if.then11, %if.then6, %if.then4
  %17 = load %struct.object_block*, %struct.object_block** %retval, align 8, !dbg !5353
  ret %struct.object_block* %17, !dbg !5353
}

declare dso_local void @mudflap_enqueue_decl(%union.tree_node*) #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local zeroext i8 @ix86_hard_regno_mode_ok(i32, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_i00_stat(i32, i32, i32) #2

declare dso_local void @globalize_reg(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @use_object_blocks_p() #0 !dbg !5354 {
entry:
  %0 = load i32, i32* @flag_section_anchors, align 4, !dbg !5357
  %conv = trunc i32 %0 to i8, !dbg !5357
  ret i8 %conv, !dbg !5358
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @use_blocks_for_decl_p(%union.tree_node* %decl) #0 !dbg !5359 {
entry:
  %retval = alloca i8, align 1
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5362, metadata !DIExpression()), !dbg !5363
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5364
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5364
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5364
  %bf.load = load i64, i64* %1, align 8, !dbg !5364
  %bf.clear = and i64 %bf.load, 65535, !dbg !5364
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5364
  %cmp = icmp ne i32 %bf.cast, 32, !dbg !5366
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5367

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5368
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !5368
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5368
  %bf.load2 = load i64, i64* %3, align 8, !dbg !5368
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5368
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5368
  %cmp5 = icmp ne i32 %bf.cast4, 33, !dbg !5369
  br i1 %cmp5, label %if.then, label %if.end, !dbg !5370

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !5371
  br label %return, !dbg !5371

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5372
  %decl_common = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !5372
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !5372
  %5 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5372
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5374
  %cmp6 = icmp eq %union.tree_node* %5, %6, !dbg !5375
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !5376

if.then7:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5377
  br label %return, !dbg !5377

if.end8:                                          ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5378
  %decl_common9 = bitcast %union.tree_node* %7 to %struct.tree_decl_common*, !dbg !5378
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common9, i32 0, i32 6, !dbg !5378
  %8 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !5378
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.167, i64 0, i64 0), %union.tree_node* %8), !dbg !5380
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !5380
  br i1 %tobool, label %if.then10, label %if.end11, !dbg !5381

if.then10:                                        ; preds = %if.end8
  store i8 0, i8* %retval, align 1, !dbg !5382
  br label %return, !dbg !5382

if.end11:                                         ; preds = %if.end8
  store i8 1, i8* %retval, align 1, !dbg !5383
  br label %return, !dbg !5383

return:                                           ; preds = %if.end11, %if.then10, %if.then7, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !5384
  ret i8 %9, !dbg !5384
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @create_block_symbol(i8* %label, %struct.object_block* %block, i64 %offset) #0 !dbg !5385 {
entry:
  %label.addr = alloca i8*, align 8
  %block.addr = alloca %struct.object_block*, align 8
  %offset.addr = alloca i64, align 8
  %symbol = alloca %struct.rtx_def*, align 8
  %size = alloca i32, align 4
  store i8* %label, i8** %label.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %label.addr, metadata !5388, metadata !DIExpression()), !dbg !5389
  store %struct.object_block* %block, %struct.object_block** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.object_block** %block.addr, metadata !5390, metadata !DIExpression()), !dbg !5391
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !5392, metadata !DIExpression()), !dbg !5393
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol, metadata !5394, metadata !DIExpression()), !dbg !5395
  call void @llvm.dbg.declare(metadata i32* %size, metadata !5396, metadata !DIExpression()), !dbg !5397
  store i32 48, i32* %size, align 4, !dbg !5398
  %0 = load i32, i32* %size, align 4, !dbg !5399
  %conv = zext i32 %0 to i64, !dbg !5399
  %call = call i8* @ggc_alloc_stat(i64 %conv), !dbg !5399
  %1 = bitcast i8* %call to %struct.rtx_def*, !dbg !5400
  store %struct.rtx_def* %1, %struct.rtx_def** %symbol, align 8, !dbg !5401
  %2 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !5402
  %3 = bitcast %struct.rtx_def* %2 to i8*, !dbg !5403
  %4 = load i32, i32* %size, align 4, !dbg !5404
  %conv1 = zext i32 %4 to i64, !dbg !5404
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 %conv1, i1 false), !dbg !5403
  %5 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !5405
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !5405
  %bf.load = load i32, i32* %6, align 8, !dbg !5405
  %bf.clear = and i32 %bf.load, -65536, !dbg !5405
  %bf.set = or i32 %bf.clear, 45, !dbg !5405
  store i32 %bf.set, i32* %6, align 8, !dbg !5405
  %7 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !5406
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !5406
  %bf.load2 = load i32, i32* %8, align 8, !dbg !5406
  %bf.clear3 = and i32 %bf.load2, -16711681, !dbg !5406
  %bf.set4 = or i32 %bf.clear3, 1048576, !dbg !5406
  store i32 %bf.set4, i32* %8, align 8, !dbg !5406
  %9 = load i8*, i8** %label.addr, align 8, !dbg !5407
  %10 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !5408
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5408
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5408
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5408
  %rt_str = bitcast %union.rtunion_def* %arrayidx to i8**, !dbg !5408
  store i8* %9, i8** %rt_str, align 8, !dbg !5409
  %11 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !5410
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !5410
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !5410
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !5410
  %rt_int = bitcast %union.rtunion_def* %arrayidx7 to i32*, !dbg !5410
  store i32 128, i32* %rt_int, align 8, !dbg !5411
  %12 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !5412
  %13 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !5413
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !5413
  %block_sym = bitcast %union.u* %u8 to %struct.block_symbol*, !dbg !5413
  %block9 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym, i32 0, i32 1, !dbg !5413
  store %struct.object_block* %12, %struct.object_block** %block9, align 8, !dbg !5414
  %14 = load i64, i64* %offset.addr, align 8, !dbg !5415
  %15 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !5416
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !5416
  %block_sym11 = bitcast %union.u* %u10 to %struct.block_symbol*, !dbg !5416
  %offset12 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym11, i32 0, i32 2, !dbg !5416
  store i64 %14, i64* %offset12, align 8, !dbg !5417
  %16 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !5418
  ret %struct.rtx_def* %16, !dbg !5419
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_s00_stat(i32, i32, i8*) #2

declare dso_local %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #2

declare dso_local void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @make_decl_rtl_for_debug(%union.tree_node* %decl) #0 !dbg !5420 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %save_aliasing_flag = alloca i32, align 4
  %save_mudflap_flag = alloca i32, align 4
  %rtl = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5423, metadata !DIExpression()), !dbg !5424
  call void @llvm.dbg.declare(metadata i32* %save_aliasing_flag, metadata !5425, metadata !DIExpression()), !dbg !5426
  call void @llvm.dbg.declare(metadata i32* %save_mudflap_flag, metadata !5427, metadata !DIExpression()), !dbg !5428
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtl, metadata !5429, metadata !DIExpression()), !dbg !5430
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5431
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5431
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5431
  %bf.load = load i64, i64* %1, align 8, !dbg !5431
  %bf.clear = and i64 %bf.load, 65535, !dbg !5431
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5431
  %idxprom = zext i32 %bf.cast to i64, !dbg !5431
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !5431
  %arrayidx1 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !5431
  %2 = load i8, i8* %arrayidx1, align 1, !dbg !5431
  %conv = zext i8 %2 to i32, !dbg !5431
  %tobool = icmp ne i32 %conv, 0, !dbg !5431
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5431

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5431
  %decl_with_rtl = bitcast %union.tree_node* %3 to %struct.tree_decl_with_rtl*, !dbg !5431
  %rtl2 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !5431
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtl2, align 8, !dbg !5431
  %cmp = icmp ne %struct.rtx_def* %4, null, !dbg !5431
  br i1 %cmp, label %if.then, label %if.end, !dbg !5433

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5434
  %decl_with_rtl4 = bitcast %union.tree_node* %5 to %struct.tree_decl_with_rtl*, !dbg !5434
  %rtl5 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl4, i32 0, i32 1, !dbg !5434
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8, !dbg !5434
  %tobool6 = icmp ne %struct.rtx_def* %6, null, !dbg !5434
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !5434

cond.true:                                        ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5434
  %decl_with_rtl7 = bitcast %union.tree_node* %7 to %struct.tree_decl_with_rtl*, !dbg !5434
  %rtl8 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl7, i32 0, i32 1, !dbg !5434
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl8, align 8, !dbg !5434
  br label %cond.end, !dbg !5434

cond.false:                                       ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5434
  call void @make_decl_rtl(%union.tree_node* %9), !dbg !5434
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5434
  %decl_with_rtl9 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_rtl*, !dbg !5434
  %rtl10 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl9, i32 0, i32 1, !dbg !5434
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl10, align 8, !dbg !5434
  br label %cond.end, !dbg !5434

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %8, %cond.true ], [ %11, %cond.false ], !dbg !5434
  store %struct.rtx_def* %cond, %struct.rtx_def** %retval, align 8, !dbg !5435
  br label %return, !dbg !5435

if.end:                                           ; preds = %land.lhs.true, %entry
  %12 = load i32, i32* @flag_strict_aliasing, align 4, !dbg !5436
  store i32 %12, i32* %save_aliasing_flag, align 4, !dbg !5437
  store i32 0, i32* @flag_strict_aliasing, align 4, !dbg !5438
  %13 = load i32, i32* @flag_mudflap, align 4, !dbg !5439
  store i32 %13, i32* %save_mudflap_flag, align 4, !dbg !5440
  store i32 0, i32* @flag_mudflap, align 4, !dbg !5441
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5442
  %decl_with_rtl11 = bitcast %union.tree_node* %14 to %struct.tree_decl_with_rtl*, !dbg !5442
  %rtl12 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl11, i32 0, i32 1, !dbg !5442
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl12, align 8, !dbg !5442
  %tobool13 = icmp ne %struct.rtx_def* %15, null, !dbg !5442
  br i1 %tobool13, label %cond.true14, label %cond.false17, !dbg !5442

cond.true14:                                      ; preds = %if.end
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5442
  %decl_with_rtl15 = bitcast %union.tree_node* %16 to %struct.tree_decl_with_rtl*, !dbg !5442
  %rtl16 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl15, i32 0, i32 1, !dbg !5442
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rtl16, align 8, !dbg !5442
  br label %cond.end20, !dbg !5442

cond.false17:                                     ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5442
  call void @make_decl_rtl(%union.tree_node* %18), !dbg !5442
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5442
  %decl_with_rtl18 = bitcast %union.tree_node* %19 to %struct.tree_decl_with_rtl*, !dbg !5442
  %rtl19 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl18, i32 0, i32 1, !dbg !5442
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl19, align 8, !dbg !5442
  br label %cond.end20, !dbg !5442

cond.end20:                                       ; preds = %cond.false17, %cond.true14
  %cond21 = phi %struct.rtx_def* [ %17, %cond.true14 ], [ %20, %cond.false17 ], !dbg !5442
  store %struct.rtx_def* %cond21, %struct.rtx_def** %rtl, align 8, !dbg !5443
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5444
  call void @set_decl_rtl(%union.tree_node* %21, %struct.rtx_def* null), !dbg !5444
  %22 = load i32, i32* %save_aliasing_flag, align 4, !dbg !5445
  store i32 %22, i32* @flag_strict_aliasing, align 4, !dbg !5446
  %23 = load i32, i32* %save_mudflap_flag, align 4, !dbg !5447
  store i32 %23, i32* @flag_mudflap, align 4, !dbg !5448
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !5449
  store %struct.rtx_def* %24, %struct.rtx_def** %retval, align 8, !dbg !5450
  br label %return, !dbg !5450

return:                                           ; preds = %cond.end20, %cond.end
  %25 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5451
  ret %struct.rtx_def* %25, !dbg !5451
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_asm(%union.tree_node* %string) #0 !dbg !5452 {
entry:
  %string.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %string, %union.tree_node** %string.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %string.addr, metadata !5453, metadata !DIExpression()), !dbg !5454
  call void @app_enable(), !dbg !5455
  %0 = load %union.tree_node*, %union.tree_node** %string.addr, align 8, !dbg !5456
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5456
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5456
  %bf.load = load i64, i64* %1, align 8, !dbg !5456
  %bf.clear = and i64 %bf.load, 65535, !dbg !5456
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5456
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !5458
  br i1 %cmp, label %if.then, label %if.end, !dbg !5459

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %string.addr, align 8, !dbg !5460
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !5460
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5460
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5460
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5460
  store %union.tree_node* %3, %union.tree_node** %string.addr, align 8, !dbg !5461
  br label %if.end, !dbg !5462

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5463
  %5 = load %union.tree_node*, %union.tree_node** %string.addr, align 8, !dbg !5464
  %string1 = bitcast %union.tree_node* %5 to %struct.tree_string*, !dbg !5464
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string1, i32 0, i32 2, !dbg !5464
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !5464
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i64 0, i64 0), i8* %arraydecay), !dbg !5465
  ret void, !dbg !5466
}

declare dso_local void @app_enable() #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_stabs_asm_out_destructor(%struct.rtx_def* %symbol, i32 %priority) #0 !dbg !5467 {
entry:
  %symbol.addr = alloca %struct.rtx_def*, align 8
  %priority.addr = alloca i32, align 4
  store %struct.rtx_def* %symbol, %struct.rtx_def** %symbol.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol.addr, metadata !5470, metadata !DIExpression()), !dbg !5471
  store i32 %priority, i32* %priority.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %priority.addr, metadata !5472, metadata !DIExpression()), !dbg !5473
  call void @dbxout_begin_simple_stabs(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.46, i64 0, i64 0), i32 22), !dbg !5474
  %0 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !5475
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5475
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5475
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5475
  %rt_str = bitcast %union.rtunion_def* %arrayidx to i8**, !dbg !5475
  %1 = load i8*, i8** %rt_str, align 8, !dbg !5475
  call void @dbxout_stab_value_label(i8* %1), !dbg !5476
  ret void, !dbg !5477
}

declare dso_local void @dbxout_begin_simple_stabs(i8*, i32) #2

declare dso_local void @dbxout_stab_value_label(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_addr_to_section(%struct.rtx_def* %symbol, %union.section* %sec) #0 !dbg !5478 {
entry:
  %symbol.addr = alloca %struct.rtx_def*, align 8
  %sec.addr = alloca %union.section*, align 8
  store %struct.rtx_def* %symbol, %struct.rtx_def** %symbol.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol.addr, metadata !5481, metadata !DIExpression()), !dbg !5482
  store %union.section* %sec, %union.section** %sec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.section** %sec.addr, metadata !5483, metadata !DIExpression()), !dbg !5484
  %0 = load %union.section*, %union.section** %sec.addr, align 8, !dbg !5485
  call void @switch_to_section(%union.section* %0), !dbg !5486
  call void @assemble_align(i32 32), !dbg !5487
  %1 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !5488
  %call = call zeroext i8 @assemble_integer(%struct.rtx_def* %1, i32 4, i32 32, i32 1), !dbg !5489
  ret void, !dbg !5490
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @switch_to_section(%union.section* %new_section) #0 !dbg !5491 {
entry:
  %new_section.addr = alloca %union.section*, align 8
  store %union.section* %new_section, %union.section** %new_section.addr, align 8
  call void @llvm.dbg.declare(metadata %union.section** %new_section.addr, metadata !5494, metadata !DIExpression()), !dbg !5495
  %0 = load %union.section*, %union.section** @in_section, align 8, !dbg !5496
  %1 = load %union.section*, %union.section** %new_section.addr, align 8, !dbg !5498
  %cmp = icmp eq %union.section* %0, %1, !dbg !5499
  br i1 %cmp, label %if.then, label %if.end, !dbg !5500

if.then:                                          ; preds = %entry
  br label %return, !dbg !5501

if.end:                                           ; preds = %entry
  %2 = load %union.section*, %union.section** %new_section.addr, align 8, !dbg !5502
  %common = bitcast %union.section* %2 to %struct.section_common*, !dbg !5504
  %flags = getelementptr inbounds %struct.section_common, %struct.section_common* %common, i32 0, i32 0, !dbg !5505
  %3 = load i32, i32* %flags, align 8, !dbg !5505
  %and = and i32 %3, 16384, !dbg !5506
  %tobool = icmp ne i32 %and, 0, !dbg !5506
  br i1 %tobool, label %if.then1, label %if.else, !dbg !5507

if.then1:                                         ; preds = %if.end
  store %union.section* null, %union.section** @in_section, align 8, !dbg !5508
  br label %if.end2, !dbg !5509

if.else:                                          ; preds = %if.end
  %4 = load %union.section*, %union.section** %new_section.addr, align 8, !dbg !5510
  store %union.section* %4, %union.section** @in_section, align 8, !dbg !5511
  br label %if.end2

if.end2:                                          ; preds = %if.else, %if.then1
  %5 = load %union.section*, %union.section** %new_section.addr, align 8, !dbg !5512
  %common3 = bitcast %union.section* %5 to %struct.section_common*, !dbg !5512
  %flags4 = getelementptr inbounds %struct.section_common, %struct.section_common* %common3, i32 0, i32 0, !dbg !5512
  %6 = load i32, i32* %flags4, align 8, !dbg !5512
  %and5 = and i32 %6, 6291456, !dbg !5512
  switch i32 %and5, label %sw.epilog [
    i32 2097152, label %sw.bb
    i32 0, label %sw.bb18
    i32 4194304, label %sw.bb20
  ], !dbg !5513

sw.bb:                                            ; preds = %if.end2
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5514
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !5514
  %tobool6 = icmp ne %struct.function* %add.ptr, null, !dbg !5514
  br i1 %tobool6, label %land.lhs.true, label %if.end11, !dbg !5517

land.lhs.true:                                    ; preds = %sw.bb
  %8 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !5518
  %tobool7 = icmp ne i8* %8, null, !dbg !5519
  br i1 %tobool7, label %if.end11, label %land.lhs.true8, !dbg !5520

land.lhs.true8:                                   ; preds = %land.lhs.true
  %9 = load %union.section*, %union.section** %new_section.addr, align 8, !dbg !5521
  %named = bitcast %union.section* %9 to %struct.named_section*, !dbg !5522
  %name = getelementptr inbounds %struct.named_section, %struct.named_section* %named, i32 0, i32 1, !dbg !5523
  %10 = load i8*, i8** %name, align 8, !dbg !5523
  %call = call i32 @strcmp(i8* %10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !5524
  %cmp9 = icmp eq i32 %call, 0, !dbg !5525
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !5526

if.then10:                                        ; preds = %land.lhs.true8
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0), i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !5527
  br label %if.end11, !dbg !5528

if.end11:                                         ; preds = %if.then10, %land.lhs.true8, %land.lhs.true, %sw.bb
  %11 = load void (i8*, i32, %union.tree_node*)*, void (i8*, i32, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 19), align 8, !dbg !5529
  %12 = load %union.section*, %union.section** %new_section.addr, align 8, !dbg !5530
  %named12 = bitcast %union.section* %12 to %struct.named_section*, !dbg !5531
  %name13 = getelementptr inbounds %struct.named_section, %struct.named_section* %named12, i32 0, i32 1, !dbg !5532
  %13 = load i8*, i8** %name13, align 8, !dbg !5532
  %14 = load %union.section*, %union.section** %new_section.addr, align 8, !dbg !5533
  %named14 = bitcast %union.section* %14 to %struct.named_section*, !dbg !5534
  %common15 = getelementptr inbounds %struct.named_section, %struct.named_section* %named14, i32 0, i32 0, !dbg !5535
  %flags16 = getelementptr inbounds %struct.section_common, %struct.section_common* %common15, i32 0, i32 0, !dbg !5536
  %15 = load i32, i32* %flags16, align 8, !dbg !5536
  %16 = load %union.section*, %union.section** %new_section.addr, align 8, !dbg !5537
  %named17 = bitcast %union.section* %16 to %struct.named_section*, !dbg !5538
  %decl = getelementptr inbounds %struct.named_section, %struct.named_section* %named17, i32 0, i32 2, !dbg !5539
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5539
  call void %11(i8* %13, i32 %15, %union.tree_node* %17), !dbg !5540
  br label %sw.epilog, !dbg !5541

sw.bb18:                                          ; preds = %if.end2
  %18 = load %union.section*, %union.section** %new_section.addr, align 8, !dbg !5542
  %unnamed = bitcast %union.section* %18 to %struct.unnamed_section*, !dbg !5543
  %callback = getelementptr inbounds %struct.unnamed_section, %struct.unnamed_section* %unnamed, i32 0, i32 1, !dbg !5544
  %19 = load void (i8*)*, void (i8*)** %callback, align 8, !dbg !5544
  %20 = load %union.section*, %union.section** %new_section.addr, align 8, !dbg !5545
  %unnamed19 = bitcast %union.section* %20 to %struct.unnamed_section*, !dbg !5546
  %data = getelementptr inbounds %struct.unnamed_section, %struct.unnamed_section* %unnamed19, i32 0, i32 2, !dbg !5547
  %21 = load i8*, i8** %data, align 8, !dbg !5547
  call void %19(i8* %21), !dbg !5542
  br label %sw.epilog, !dbg !5548

sw.bb20:                                          ; preds = %if.end2
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 6837, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !5549
  br label %sw.epilog, !dbg !5550

sw.epilog:                                        ; preds = %if.end2, %sw.bb20, %sw.bb18, %if.end11
  %22 = load %union.section*, %union.section** %new_section.addr, align 8, !dbg !5551
  %common21 = bitcast %union.section* %22 to %struct.section_common*, !dbg !5552
  %flags22 = getelementptr inbounds %struct.section_common, %struct.section_common* %common21, i32 0, i32 0, !dbg !5553
  %23 = load i32, i32* %flags22, align 8, !dbg !5554
  %or = or i32 %23, 1048576, !dbg !5554
  store i32 %or, i32* %flags22, align 8, !dbg !5554
  br label %return, !dbg !5555

return:                                           ; preds = %sw.epilog, %if.then
  ret void, !dbg !5555
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_align(i32 %align) #0 !dbg !5556 {
entry:
  %align.addr = alloca i32, align 4
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !5559, metadata !DIExpression()), !dbg !5560
  %0 = load i32, i32* %align.addr, align 4, !dbg !5561
  %cmp = icmp sgt i32 %0, 8, !dbg !5563
  br i1 %cmp, label %if.then, label %if.end8, !dbg !5564

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %align.addr, align 4, !dbg !5565
  %div = sdiv i32 %1, 8, !dbg !5565
  %conv = sext i32 %div to i64, !dbg !5565
  %call = call i32 @floor_log2(i64 %conv), !dbg !5565
  %cmp1 = icmp ne i32 %call, 0, !dbg !5565
  br i1 %cmp1, label %if.then3, label %if.end, !dbg !5568

if.then3:                                         ; preds = %if.then
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5565
  %3 = load i32, i32* %align.addr, align 4, !dbg !5565
  %div4 = sdiv i32 %3, 8, !dbg !5565
  %conv5 = sext i32 %div4 to i64, !dbg !5565
  %call6 = call i32 @floor_log2(i64 %conv5), !dbg !5565
  %shl = shl i32 1, %call6, !dbg !5565
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i64 0, i64 0), i32 %shl), !dbg !5565
  br label %if.end, !dbg !5565

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end8, !dbg !5569

if.end8:                                          ; preds = %if.end, %entry
  ret void, !dbg !5570
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @assemble_integer(%struct.rtx_def* %x, i32 %size, i32 %align, i32 %force) #0 !dbg !5571 {
entry:
  %retval = alloca i8, align 1
  %x.addr = alloca %struct.rtx_def*, align 8
  %size.addr = alloca i32, align 4
  %align.addr = alloca i32, align 4
  %force.addr = alloca i32, align 4
  %aligned_p = alloca i32, align 4
  %omode = alloca i32, align 4
  %imode = alloca i32, align 4
  %subalign = alloca i32, align 4
  %subsize = alloca i32, align 4
  %i = alloca i32, align 4
  %mclass = alloca i32, align 4
  %partial = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5574, metadata !DIExpression()), !dbg !5575
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !5576, metadata !DIExpression()), !dbg !5577
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !5578, metadata !DIExpression()), !dbg !5579
  store i32 %force, i32* %force.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %force.addr, metadata !5580, metadata !DIExpression()), !dbg !5581
  call void @llvm.dbg.declare(metadata i32* %aligned_p, metadata !5582, metadata !DIExpression()), !dbg !5583
  %0 = load i32, i32* %align.addr, align 4, !dbg !5584
  %1 = load i32, i32* %size.addr, align 4, !dbg !5585
  %mul = mul i32 %1, 8, !dbg !5585
  %2 = load i32, i32* @ix86_isa_flags, align 4, !dbg !5585
  %and = and i32 %2, 32, !dbg !5585
  %cmp = icmp ne i32 %and, 0, !dbg !5585
  %3 = zext i1 %cmp to i64, !dbg !5585
  %cond = select i1 %cmp, i32 256, i32 128, !dbg !5585
  %cmp1 = icmp ult i32 %mul, %cond, !dbg !5585
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !5585

cond.true:                                        ; preds = %entry
  %4 = load i32, i32* %size.addr, align 4, !dbg !5585
  %mul2 = mul i32 %4, 8, !dbg !5585
  br label %cond.end, !dbg !5585

cond.false:                                       ; preds = %entry
  %5 = load i32, i32* @ix86_isa_flags, align 4, !dbg !5585
  %and3 = and i32 %5, 32, !dbg !5585
  %cmp4 = icmp ne i32 %and3, 0, !dbg !5585
  %6 = zext i1 %cmp4 to i64, !dbg !5585
  %cond5 = select i1 %cmp4, i32 256, i32 128, !dbg !5585
  br label %cond.end, !dbg !5585

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond6 = phi i32 [ %mul2, %cond.true ], [ %cond5, %cond.false ], !dbg !5585
  %cmp7 = icmp uge i32 %0, %cond6, !dbg !5586
  %conv = zext i1 %cmp7 to i32, !dbg !5586
  store i32 %conv, i32* %aligned_p, align 4, !dbg !5587
  %7 = load i8 (%struct.rtx_def*, i32, i32)*, i8 (%struct.rtx_def*, i32, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 5), align 8, !dbg !5588
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5590
  %9 = load i32, i32* %size.addr, align 4, !dbg !5591
  %10 = load i32, i32* %aligned_p, align 4, !dbg !5592
  %call = call zeroext i8 %7(%struct.rtx_def* %8, i32 %9, i32 %10), !dbg !5593
  %tobool = icmp ne i8 %call, 0, !dbg !5593
  br i1 %tobool, label %if.then, label %if.end, !dbg !5594

if.then:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !5595
  br label %return, !dbg !5595

if.end:                                           ; preds = %cond.end
  %11 = load i32, i32* %size.addr, align 4, !dbg !5596
  %cmp8 = icmp ugt i32 %11, 1, !dbg !5598
  br i1 %cmp8, label %if.then10, label %if.end50, !dbg !5599

if.then10:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %omode, metadata !5600, metadata !DIExpression()), !dbg !5602
  call void @llvm.dbg.declare(metadata i32* %imode, metadata !5603, metadata !DIExpression()), !dbg !5604
  call void @llvm.dbg.declare(metadata i32* %subalign, metadata !5605, metadata !DIExpression()), !dbg !5606
  call void @llvm.dbg.declare(metadata i32* %subsize, metadata !5607, metadata !DIExpression()), !dbg !5608
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5609, metadata !DIExpression()), !dbg !5610
  call void @llvm.dbg.declare(metadata i32* %mclass, metadata !5611, metadata !DIExpression()), !dbg !5612
  %12 = load i32, i32* %size.addr, align 4, !dbg !5613
  %cmp11 = icmp ugt i32 %12, 4, !dbg !5614
  %13 = zext i1 %cmp11 to i64, !dbg !5613
  %cond13 = select i1 %cmp11, i32 4, i32 1, !dbg !5613
  store i32 %cond13, i32* %subsize, align 4, !dbg !5615
  %14 = load i32, i32* %align.addr, align 4, !dbg !5616
  %15 = load i32, i32* %subsize, align 4, !dbg !5616
  %mul14 = mul i32 %15, 8, !dbg !5616
  %cmp15 = icmp ult i32 %14, %mul14, !dbg !5616
  br i1 %cmp15, label %cond.true17, label %cond.false18, !dbg !5616

cond.true17:                                      ; preds = %if.then10
  %16 = load i32, i32* %align.addr, align 4, !dbg !5616
  br label %cond.end20, !dbg !5616

cond.false18:                                     ; preds = %if.then10
  %17 = load i32, i32* %subsize, align 4, !dbg !5616
  %mul19 = mul i32 %17, 8, !dbg !5616
  br label %cond.end20, !dbg !5616

cond.end20:                                       ; preds = %cond.false18, %cond.true17
  %cond21 = phi i32 [ %16, %cond.true17 ], [ %mul19, %cond.false18 ], !dbg !5616
  store i32 %cond21, i32* %subalign, align 4, !dbg !5617
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5618
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !5618
  %bf.load = load i32, i32* %19, align 8, !dbg !5618
  %bf.clear = and i32 %bf.load, 65535, !dbg !5618
  %cmp22 = icmp eq i32 %bf.clear, 31, !dbg !5620
  br i1 %cmp22, label %if.then24, label %if.else, !dbg !5621

if.then24:                                        ; preds = %cond.end20
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5622
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5622
  %bf.load25 = load i32, i32* %21, align 8, !dbg !5622
  %bf.lshr = lshr i32 %bf.load25, 16, !dbg !5622
  %bf.clear26 = and i32 %bf.lshr, 255, !dbg !5622
  %idxprom = zext i32 %bf.clear26 to i64, !dbg !5622
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !5622
  %22 = load i8, i8* %arrayidx, align 1, !dbg !5622
  %conv27 = zext i8 %22 to i32, !dbg !5622
  store i32 %conv27, i32* %mclass, align 4, !dbg !5623
  br label %if.end28, !dbg !5624

if.else:                                          ; preds = %cond.end20
  store i32 2, i32* %mclass, align 4, !dbg !5625
  br label %if.end28

if.end28:                                         ; preds = %if.else, %if.then24
  %23 = load i32, i32* %subsize, align 4, !dbg !5626
  %mul29 = mul i32 %23, 8, !dbg !5627
  %24 = load i32, i32* %mclass, align 4, !dbg !5628
  %call30 = call i32 @mode_for_size(i32 %mul29, i32 %24, i32 0), !dbg !5629
  store i32 %call30, i32* %omode, align 4, !dbg !5630
  %25 = load i32, i32* %size.addr, align 4, !dbg !5631
  %mul31 = mul i32 %25, 8, !dbg !5632
  %26 = load i32, i32* %mclass, align 4, !dbg !5633
  %call32 = call i32 @mode_for_size(i32 %mul31, i32 %26, i32 0), !dbg !5634
  store i32 %call32, i32* %imode, align 4, !dbg !5635
  store i32 0, i32* %i, align 4, !dbg !5636
  br label %for.cond, !dbg !5638

for.cond:                                         ; preds = %for.inc, %if.end28
  %27 = load i32, i32* %i, align 4, !dbg !5639
  %28 = load i32, i32* %size.addr, align 4, !dbg !5641
  %cmp33 = icmp ult i32 %27, %28, !dbg !5642
  br i1 %cmp33, label %for.body, label %for.end, !dbg !5643

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %partial, metadata !5644, metadata !DIExpression()), !dbg !5646
  %29 = load i32, i32* %omode, align 4, !dbg !5647
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5648
  %31 = load i32, i32* %imode, align 4, !dbg !5649
  %32 = load i32, i32* %i, align 4, !dbg !5650
  %call35 = call %struct.rtx_def* @simplify_subreg(i32 %29, %struct.rtx_def* %30, i32 %31, i32 %32), !dbg !5651
  store %struct.rtx_def* %call35, %struct.rtx_def** %partial, align 8, !dbg !5646
  %33 = load %struct.rtx_def*, %struct.rtx_def** %partial, align 8, !dbg !5652
  %tobool36 = icmp ne %struct.rtx_def* %33, null, !dbg !5652
  br i1 %tobool36, label %lor.lhs.false, label %if.then39, !dbg !5654

lor.lhs.false:                                    ; preds = %for.body
  %34 = load %struct.rtx_def*, %struct.rtx_def** %partial, align 8, !dbg !5655
  %35 = load i32, i32* %subsize, align 4, !dbg !5656
  %36 = load i32, i32* %subalign, align 4, !dbg !5657
  %call37 = call zeroext i8 @assemble_integer(%struct.rtx_def* %34, i32 %35, i32 %36, i32 0), !dbg !5658
  %tobool38 = icmp ne i8 %call37, 0, !dbg !5658
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !5659

if.then39:                                        ; preds = %lor.lhs.false, %for.body
  br label %for.end, !dbg !5660

if.end40:                                         ; preds = %lor.lhs.false
  br label %for.inc, !dbg !5661

for.inc:                                          ; preds = %if.end40
  %37 = load i32, i32* %subsize, align 4, !dbg !5662
  %38 = load i32, i32* %i, align 4, !dbg !5663
  %add = add i32 %38, %37, !dbg !5663
  store i32 %add, i32* %i, align 4, !dbg !5663
  br label %for.cond, !dbg !5664, !llvm.loop !5665

for.end:                                          ; preds = %if.then39, %for.cond
  %39 = load i32, i32* %i, align 4, !dbg !5667
  %40 = load i32, i32* %size.addr, align 4, !dbg !5669
  %cmp41 = icmp eq i32 %39, %40, !dbg !5670
  br i1 %cmp41, label %if.then43, label %if.end44, !dbg !5671

if.then43:                                        ; preds = %for.end
  store i8 1, i8* %retval, align 1, !dbg !5672
  br label %return, !dbg !5672

if.end44:                                         ; preds = %for.end
  %41 = load i32, i32* %i, align 4, !dbg !5673
  %tobool45 = icmp ne i32 %41, 0, !dbg !5673
  br i1 %tobool45, label %cond.true46, label %cond.false47, !dbg !5673

cond.true46:                                      ; preds = %if.end44
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2726, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !5673
  br label %cond.end48, !dbg !5673

cond.false47:                                     ; preds = %if.end44
  br label %cond.end48, !dbg !5673

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond49 = phi i32 [ 0, %cond.true46 ], [ 0, %cond.false47 ], !dbg !5673
  br label %if.end50, !dbg !5674

if.end50:                                         ; preds = %cond.end48, %if.end
  %42 = load i32, i32* %force.addr, align 4, !dbg !5675
  %tobool51 = icmp ne i32 %42, 0, !dbg !5675
  br i1 %tobool51, label %cond.true52, label %cond.false53, !dbg !5675

cond.true52:                                      ; preds = %if.end50
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2729, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !5675
  br label %cond.end54, !dbg !5675

cond.false53:                                     ; preds = %if.end50
  br label %cond.end54, !dbg !5675

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i32 [ 0, %cond.true52 ], [ 0, %cond.false53 ], !dbg !5675
  store i8 0, i8* %retval, align 1, !dbg !5676
  br label %return, !dbg !5676

return:                                           ; preds = %cond.end54, %if.then43, %if.then
  %43 = load i8, i8* %retval, align 1, !dbg !5677
  ret i8 %43, !dbg !5677
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @get_cdtor_priority_section(i32 %priority, i8 zeroext %constructor_p) #0 !dbg !5678 {
entry:
  %priority.addr = alloca i32, align 4
  %constructor_p.addr = alloca i8, align 1
  %buf = alloca [16 x i8], align 16
  store i32 %priority, i32* %priority.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %priority.addr, metadata !5681, metadata !DIExpression()), !dbg !5682
  store i8 %constructor_p, i8* %constructor_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %constructor_p.addr, metadata !5683, metadata !DIExpression()), !dbg !5684
  call void @llvm.dbg.declare(metadata [16 x i8]* %buf, metadata !5685, metadata !DIExpression()), !dbg !5689
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !5690
  %0 = load i8, i8* %constructor_p.addr, align 1, !dbg !5691
  %conv = zext i8 %0 to i32, !dbg !5691
  %tobool = icmp ne i32 %conv, 0, !dbg !5691
  %1 = zext i1 %tobool to i64, !dbg !5691
  %cond = select i1 %tobool, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i64 0, i64 0), !dbg !5691
  %2 = load i32, i32* %priority.addr, align 4, !dbg !5692
  %sub = sub nsw i32 65535, %2, !dbg !5693
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i64 0, i64 0), i8* %cond, i32 %sub), !dbg !5694
  %arraydecay1 = getelementptr inbounds [16 x i8], [16 x i8]* %buf, i64 0, i64 0, !dbg !5695
  %call2 = call %union.section* @get_section(i8* %arraydecay1, i32 512, %union.tree_node* null), !dbg !5696
  ret %union.section* %call2, !dbg !5697
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_named_section_asm_out_destructor(%struct.rtx_def* %symbol, i32 %priority) #0 !dbg !5698 {
entry:
  %symbol.addr = alloca %struct.rtx_def*, align 8
  %priority.addr = alloca i32, align 4
  %sec = alloca %union.section*, align 8
  store %struct.rtx_def* %symbol, %struct.rtx_def** %symbol.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol.addr, metadata !5699, metadata !DIExpression()), !dbg !5700
  store i32 %priority, i32* %priority.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %priority.addr, metadata !5701, metadata !DIExpression()), !dbg !5702
  call void @llvm.dbg.declare(metadata %union.section** %sec, metadata !5703, metadata !DIExpression()), !dbg !5704
  %0 = load i32, i32* %priority.addr, align 4, !dbg !5705
  %cmp = icmp ne i32 %0, 65535, !dbg !5707
  br i1 %cmp, label %if.then, label %if.else, !dbg !5708

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %priority.addr, align 4, !dbg !5709
  %call = call %union.section* @get_cdtor_priority_section(i32 %1, i8 zeroext 0), !dbg !5710
  store %union.section* %call, %union.section** %sec, align 8, !dbg !5711
  br label %if.end, !dbg !5712

if.else:                                          ; preds = %entry
  %call1 = call %union.section* @get_section(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i64 0, i64 0), i32 512, %union.tree_node* null), !dbg !5713
  store %union.section* %call1, %union.section** %sec, align 8, !dbg !5714
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !5715
  %3 = load %union.section*, %union.section** %sec, align 8, !dbg !5716
  call void @assemble_addr_to_section(%struct.rtx_def* %2, %union.section* %3), !dbg !5717
  ret void, !dbg !5718
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_stabs_asm_out_constructor(%struct.rtx_def* %symbol, i32 %priority) #0 !dbg !5719 {
entry:
  %symbol.addr = alloca %struct.rtx_def*, align 8
  %priority.addr = alloca i32, align 4
  store %struct.rtx_def* %symbol, %struct.rtx_def** %symbol.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol.addr, metadata !5720, metadata !DIExpression()), !dbg !5721
  store i32 %priority, i32* %priority.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %priority.addr, metadata !5722, metadata !DIExpression()), !dbg !5723
  call void @dbxout_begin_simple_stabs(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.50, i64 0, i64 0), i32 22), !dbg !5724
  %0 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !5725
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !5725
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5725
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5725
  %rt_str = bitcast %union.rtunion_def* %arrayidx to i8**, !dbg !5725
  %1 = load i8*, i8** %rt_str, align 8, !dbg !5725
  call void @dbxout_stab_value_label(i8* %1), !dbg !5726
  ret void, !dbg !5727
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_named_section_asm_out_constructor(%struct.rtx_def* %symbol, i32 %priority) #0 !dbg !5728 {
entry:
  %symbol.addr = alloca %struct.rtx_def*, align 8
  %priority.addr = alloca i32, align 4
  %sec = alloca %union.section*, align 8
  store %struct.rtx_def* %symbol, %struct.rtx_def** %symbol.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol.addr, metadata !5729, metadata !DIExpression()), !dbg !5730
  store i32 %priority, i32* %priority.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %priority.addr, metadata !5731, metadata !DIExpression()), !dbg !5732
  call void @llvm.dbg.declare(metadata %union.section** %sec, metadata !5733, metadata !DIExpression()), !dbg !5734
  %0 = load i32, i32* %priority.addr, align 4, !dbg !5735
  %cmp = icmp ne i32 %0, 65535, !dbg !5737
  br i1 %cmp, label %if.then, label %if.else, !dbg !5738

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %priority.addr, align 4, !dbg !5739
  %call = call %union.section* @get_cdtor_priority_section(i32 %1, i8 zeroext 1), !dbg !5740
  store %union.section* %call, %union.section** %sec, align 8, !dbg !5741
  br label %if.end, !dbg !5742

if.else:                                          ; preds = %entry
  %call1 = call %union.section* @get_section(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.48, i64 0, i64 0), i32 512, %union.tree_node* null), !dbg !5743
  store %union.section* %call1, %union.section** %sec, align 8, !dbg !5744
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !5745
  %3 = load %union.section*, %union.section** %sec, align 8, !dbg !5746
  call void @assemble_addr_to_section(%struct.rtx_def* %2, %union.section* %3), !dbg !5747
  ret void, !dbg !5748
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @notice_global_symbol(%union.tree_node* %decl) #0 !dbg !5749 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %type = alloca i8**, align 8
  %p = alloca i8*, align 8
  %name55 = alloca i8*, align 8
  %decl_rtl = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5750, metadata !DIExpression()), !dbg !5751
  call void @llvm.dbg.declare(metadata i8*** %type, metadata !5752, metadata !DIExpression()), !dbg !5754
  store i8** @first_global_object_name, i8*** %type, align 8, !dbg !5754
  %0 = load i8*, i8** @first_global_object_name, align 8, !dbg !5755
  %tobool = icmp ne i8* %0, null, !dbg !5755
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5757

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5758
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5758
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5758
  %bf.load = load i64, i64* %2, align 8, !dbg !5758
  %bf.lshr = lshr i64 %bf.load, 27, !dbg !5758
  %bf.clear = and i64 %bf.lshr, 1, !dbg !5758
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5758
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !5758
  br i1 %tobool1, label %lor.lhs.false2, label %if.then, !dbg !5759

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5760
  %decl_common = bitcast %union.tree_node* %3 to %struct.tree_decl_common*, !dbg !5760
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5760
  %4 = bitcast i40* %decl_flag_1 to i64*, !dbg !5760
  %bf.load3 = load i64, i64* %4, align 8, !dbg !5760
  %bf.lshr4 = lshr i64 %bf.load3, 25, !dbg !5760
  %bf.clear5 = and i64 %bf.lshr4, 1, !dbg !5760
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5760
  %tobool7 = icmp ne i32 %bf.cast6, 0, !dbg !5760
  br i1 %tobool7, label %if.then, label %lor.lhs.false8, !dbg !5761

lor.lhs.false8:                                   ; preds = %lor.lhs.false2
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5762
  %decl_minimal = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !5762
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !5762
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5762
  %tobool9 = icmp ne %union.tree_node* %6, null, !dbg !5762
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !5763

lor.lhs.false10:                                  ; preds = %lor.lhs.false8
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5764
  %base11 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5764
  %8 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5764
  %bf.load12 = load i64, i64* %8, align 8, !dbg !5764
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !5764
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !5764
  %cmp = icmp ne i32 %bf.cast14, 29, !dbg !5765
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false32, !dbg !5766

land.lhs.true:                                    ; preds = %lor.lhs.false10
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5767
  %base15 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !5767
  %10 = bitcast %struct.tree_base* %base15 to i64*, !dbg !5767
  %bf.load16 = load i64, i64* %10, align 8, !dbg !5767
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !5767
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !5767
  %cmp19 = icmp ne i32 %bf.cast18, 32, !dbg !5768
  br i1 %cmp19, label %if.then, label %lor.lhs.false20, !dbg !5769

lor.lhs.false20:                                  ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5770
  %decl_with_vis = bitcast %union.tree_node* %11 to %struct.tree_decl_with_vis*, !dbg !5770
  %common_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !5770
  %12 = bitcast i24* %common_flag to i32*, !dbg !5770
  %bf.load21 = load i32, i32* %12, align 8, !dbg !5770
  %bf.lshr22 = lshr i32 %bf.load21, 3, !dbg !5770
  %bf.clear23 = and i32 %bf.lshr22, 1, !dbg !5770
  %tobool24 = icmp ne i32 %bf.clear23, 0, !dbg !5770
  br i1 %tobool24, label %land.lhs.true25, label %lor.lhs.false32, !dbg !5771

land.lhs.true25:                                  ; preds = %lor.lhs.false20
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5772
  %decl_common26 = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !5772
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common26, i32 0, i32 5, !dbg !5772
  %14 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5772
  %cmp27 = icmp eq %union.tree_node* %14, null, !dbg !5773
  br i1 %cmp27, label %if.then, label %lor.lhs.false28, !dbg !5774

lor.lhs.false28:                                  ; preds = %land.lhs.true25
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5775
  %decl_common29 = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !5775
  %initial30 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common29, i32 0, i32 5, !dbg !5775
  %16 = load %union.tree_node*, %union.tree_node** %initial30, align 8, !dbg !5775
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5776
  %cmp31 = icmp eq %union.tree_node* %16, %17, !dbg !5777
  br i1 %cmp31, label %if.then, label %lor.lhs.false32, !dbg !5778

lor.lhs.false32:                                  ; preds = %lor.lhs.false28, %lor.lhs.false20, %lor.lhs.false10
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5779
  %decl_with_rtl = bitcast %union.tree_node* %18 to %struct.tree_decl_with_rtl*, !dbg !5779
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !5779
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !5779
  %tobool33 = icmp ne %struct.rtx_def* %19, null, !dbg !5779
  br i1 %tobool33, label %cond.true, label %cond.false, !dbg !5779

cond.true:                                        ; preds = %lor.lhs.false32
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5779
  %decl_with_rtl34 = bitcast %union.tree_node* %20 to %struct.tree_decl_with_rtl*, !dbg !5779
  %rtl35 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl34, i32 0, i32 1, !dbg !5779
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl35, align 8, !dbg !5779
  br label %cond.end, !dbg !5779

cond.false:                                       ; preds = %lor.lhs.false32
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5779
  call void @make_decl_rtl(%union.tree_node* %22), !dbg !5779
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5779
  %decl_with_rtl36 = bitcast %union.tree_node* %23 to %struct.tree_decl_with_rtl*, !dbg !5779
  %rtl37 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl36, i32 0, i32 1, !dbg !5779
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl37, align 8, !dbg !5779
  br label %cond.end, !dbg !5779

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %21, %cond.true ], [ %24, %cond.false ], !dbg !5779
  %25 = bitcast %struct.rtx_def* %cond to i32*, !dbg !5779
  %bf.load38 = load i32, i32* %25, align 8, !dbg !5779
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !5779
  %cmp40 = icmp eq i32 %bf.clear39, 43, !dbg !5779
  br i1 %cmp40, label %if.end, label %if.then, !dbg !5780

if.then:                                          ; preds = %cond.end, %lor.lhs.false28, %land.lhs.true25, %land.lhs.true, %lor.lhs.false8, %lor.lhs.false2, %lor.lhs.false, %entry
  br label %if.end71, !dbg !5781

if.end:                                           ; preds = %cond.end
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5782
  %decl_with_vis41 = bitcast %union.tree_node* %26 to %struct.tree_decl_with_vis*, !dbg !5782
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis41, i32 0, i32 4, !dbg !5782
  %27 = bitcast i24* %weak_flag to i32*, !dbg !5782
  %bf.load42 = load i32, i32* %27, align 8, !dbg !5782
  %bf.lshr43 = lshr i32 %bf.load42, 7, !dbg !5782
  %bf.clear44 = and i32 %bf.lshr43, 1, !dbg !5782
  %tobool45 = icmp ne i32 %bf.clear44, 0, !dbg !5782
  br i1 %tobool45, label %if.then51, label %lor.lhs.false46, !dbg !5784

lor.lhs.false46:                                  ; preds = %if.end
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5785
  %decl_with_vis47 = bitcast %union.tree_node* %28 to %struct.tree_decl_with_vis*, !dbg !5785
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis47, i32 0, i32 3, !dbg !5785
  %29 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !5785
  %cmp48 = icmp ne %union.tree_node* %29, null, !dbg !5785
  br i1 %cmp48, label %if.then51, label %lor.lhs.false49, !dbg !5786

lor.lhs.false49:                                  ; preds = %lor.lhs.false46
  %30 = load i32, i32* @flag_shlib, align 4, !dbg !5787
  %tobool50 = icmp ne i32 %30, 0, !dbg !5787
  br i1 %tobool50, label %if.then51, label %if.end52, !dbg !5788

if.then51:                                        ; preds = %lor.lhs.false49, %lor.lhs.false46, %if.end
  store i8** @weak_global_object_name, i8*** %type, align 8, !dbg !5789
  br label %if.end52, !dbg !5790

if.end52:                                         ; preds = %if.then51, %lor.lhs.false49
  %31 = load i8**, i8*** %type, align 8, !dbg !5791
  %32 = load i8*, i8** %31, align 8, !dbg !5793
  %tobool53 = icmp ne i8* %32, null, !dbg !5793
  br i1 %tobool53, label %if.end71, label %if.then54, !dbg !5794

if.then54:                                        ; preds = %if.end52
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5795, metadata !DIExpression()), !dbg !5797
  call void @llvm.dbg.declare(metadata i8** %name55, metadata !5798, metadata !DIExpression()), !dbg !5799
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %decl_rtl, metadata !5800, metadata !DIExpression()), !dbg !5801
  %33 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5802
  %decl_with_rtl56 = bitcast %union.tree_node* %33 to %struct.tree_decl_with_rtl*, !dbg !5802
  %rtl57 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl56, i32 0, i32 1, !dbg !5802
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtl57, align 8, !dbg !5802
  %tobool58 = icmp ne %struct.rtx_def* %34, null, !dbg !5802
  br i1 %tobool58, label %cond.true59, label %cond.false62, !dbg !5802

cond.true59:                                      ; preds = %if.then54
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5802
  %decl_with_rtl60 = bitcast %union.tree_node* %35 to %struct.tree_decl_with_rtl*, !dbg !5802
  %rtl61 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl60, i32 0, i32 1, !dbg !5802
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rtl61, align 8, !dbg !5802
  br label %cond.end65, !dbg !5802

cond.false62:                                     ; preds = %if.then54
  %37 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5802
  call void @make_decl_rtl(%union.tree_node* %37), !dbg !5802
  %38 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5802
  %decl_with_rtl63 = bitcast %union.tree_node* %38 to %struct.tree_decl_with_rtl*, !dbg !5802
  %rtl64 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl63, i32 0, i32 1, !dbg !5802
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rtl64, align 8, !dbg !5802
  br label %cond.end65, !dbg !5802

cond.end65:                                       ; preds = %cond.false62, %cond.true59
  %cond66 = phi %struct.rtx_def* [ %36, %cond.true59 ], [ %39, %cond.false62 ], !dbg !5802
  store %struct.rtx_def* %cond66, %struct.rtx_def** %decl_rtl, align 8, !dbg !5801
  %40 = load i8* (i8*)*, i8* (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 52), align 8, !dbg !5803
  %41 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !5804
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !5804
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5804
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5804
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5804
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5804
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !5804
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !5804
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 0, !dbg !5804
  %rt_str = bitcast %union.rtunion_def* %arrayidx69 to i8**, !dbg !5804
  %43 = load i8*, i8** %rt_str, align 8, !dbg !5804
  %call = call i8* %40(i8* %43), !dbg !5805
  store i8* %call, i8** %p, align 8, !dbg !5806
  %44 = load i8*, i8** %p, align 8, !dbg !5807
  %call70 = call i8* @ggc_alloc_string(i8* %44, i32 -1), !dbg !5807
  store i8* %call70, i8** %name55, align 8, !dbg !5808
  %45 = load i8*, i8** %name55, align 8, !dbg !5809
  %46 = load i8**, i8*** %type, align 8, !dbg !5810
  store i8* %45, i8** %46, align 8, !dbg !5811
  br label %if.end71, !dbg !5812

if.end71:                                         ; preds = %if.then, %cond.end65, %if.end52
  ret void, !dbg !5813
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_start_function(%union.tree_node* %decl, i8* %fnname) #0 !dbg !5814 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %fnname.addr = alloca i8*, align 8
  %align = alloca i32, align 4
  %tmp_label = alloca [100 x i8], align 16
  %hot_label_written = alloca i8, align 1
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5815, metadata !DIExpression()), !dbg !5816
  store i8* %fnname, i8** %fnname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fnname.addr, metadata !5817, metadata !DIExpression()), !dbg !5818
  call void @llvm.dbg.declare(metadata i32* %align, metadata !5819, metadata !DIExpression()), !dbg !5820
  call void @llvm.dbg.declare(metadata [100 x i8]* %tmp_label, metadata !5821, metadata !DIExpression()), !dbg !5825
  call void @llvm.dbg.declare(metadata i8* %hot_label_written, metadata !5826, metadata !DIExpression()), !dbg !5827
  store i8 0, i8* %hot_label_written, align 1, !dbg !5827
  store i8* null, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !5828
  store i8 0, i8* @first_function_block_is_cold, align 1, !dbg !5829
  %0 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !5830
  %tobool = icmp ne i32 %0, 0, !dbg !5830
  br i1 %tobool, label %if.then, label %if.else, !dbg !5832

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !5833

do.body:                                          ; preds = %if.then
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %tmp_label, i64 0, i64 0, !dbg !5835
  %1 = load i32, i32* @const_labelno, align 4, !dbg !5835
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i64 0, i64 0), i32 %1), !dbg !5835
  br label %do.end, !dbg !5835

do.end:                                           ; preds = %do.body
  %arraydecay1 = getelementptr inbounds [100 x i8], [100 x i8]* %tmp_label, i64 0, i64 0, !dbg !5837
  %call2 = call i8* @ggc_alloc_string(i8* %arraydecay1, i32 -1), !dbg !5837
  store i8* %call2, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 0), align 8, !dbg !5838
  br label %do.body3, !dbg !5839

do.body3:                                         ; preds = %do.end
  %arraydecay4 = getelementptr inbounds [100 x i8], [100 x i8]* %tmp_label, i64 0, i64 0, !dbg !5840
  %2 = load i32, i32* @const_labelno, align 4, !dbg !5840
  %call5 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.53, i64 0, i64 0), i32 %2), !dbg !5840
  br label %do.end6, !dbg !5840

do.end6:                                          ; preds = %do.body3
  %arraydecay7 = getelementptr inbounds [100 x i8], [100 x i8]* %tmp_label, i64 0, i64 0, !dbg !5842
  %call8 = call i8* @ggc_alloc_string(i8* %arraydecay7, i32 -1), !dbg !5842
  store i8* %call8, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 1), align 8, !dbg !5843
  br label %do.body9, !dbg !5844

do.body9:                                         ; preds = %do.end6
  %arraydecay10 = getelementptr inbounds [100 x i8], [100 x i8]* %tmp_label, i64 0, i64 0, !dbg !5845
  %3 = load i32, i32* @const_labelno, align 4, !dbg !5845
  %call11 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay10, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i64 0, i64 0), i32 %3), !dbg !5845
  br label %do.end12, !dbg !5845

do.end12:                                         ; preds = %do.body9
  %arraydecay13 = getelementptr inbounds [100 x i8], [100 x i8]* %tmp_label, i64 0, i64 0, !dbg !5847
  %call14 = call i8* @ggc_alloc_string(i8* %arraydecay13, i32 -1), !dbg !5847
  store i8* %call14, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 2), align 8, !dbg !5848
  br label %do.body15, !dbg !5849

do.body15:                                        ; preds = %do.end12
  %arraydecay16 = getelementptr inbounds [100 x i8], [100 x i8]* %tmp_label, i64 0, i64 0, !dbg !5850
  %4 = load i32, i32* @const_labelno, align 4, !dbg !5850
  %call17 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay16, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.55, i64 0, i64 0), i32 %4), !dbg !5850
  br label %do.end18, !dbg !5850

do.end18:                                         ; preds = %do.body15
  %arraydecay19 = getelementptr inbounds [100 x i8], [100 x i8]* %tmp_label, i64 0, i64 0, !dbg !5852
  %call20 = call i8* @ggc_alloc_string(i8* %arraydecay19, i32 -1), !dbg !5852
  store i8* %call20, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 3), align 8, !dbg !5853
  %5 = load i32, i32* @const_labelno, align 4, !dbg !5854
  %inc = add nsw i32 %5, 1, !dbg !5854
  store i32 %inc, i32* @const_labelno, align 4, !dbg !5854
  br label %if.end, !dbg !5855

if.else:                                          ; preds = %entry
  store i8* null, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 0), align 8, !dbg !5856
  store i8* null, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 1), align 8, !dbg !5858
  store i8* null, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 2), align 8, !dbg !5859
  store i8* null, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 3), align 8, !dbg !5860
  br label %if.end

if.end:                                           ; preds = %if.else, %do.end18
  call void @app_disable(), !dbg !5861
  %6 = load i8*, i8** %fnname.addr, align 8, !dbg !5862
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5864
  call void @output_constant_pool(i8* %6, %union.tree_node* %7), !dbg !5865
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5866
  %9 = load i32, i32* @flag_function_sections, align 4, !dbg !5867
  call void @resolve_unique_section(%union.tree_node* %8, i32 0, i32 %9), !dbg !5868
  %10 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !5869
  %tobool21 = icmp ne i32 %10, 0, !dbg !5869
  br i1 %tobool21, label %if.then22, label %if.else37, !dbg !5871

if.then22:                                        ; preds = %if.end
  %call23 = call %union.section* @unlikely_text_section(), !dbg !5872
  call void @switch_to_section(%union.section* %call23), !dbg !5874
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5875
  %decl_common = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !5875
  %align24 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !5875
  %12 = load i32, i32* %align24, align 8, !dbg !5875
  call void @assemble_align(i32 %12), !dbg !5876
  br label %do.body25, !dbg !5877

do.body25:                                        ; preds = %if.then22
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5878
  %14 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 1), align 8, !dbg !5878
  call void @assemble_name(%struct._IO_FILE* %13, i8* %14), !dbg !5878
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5878
  %call26 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), %struct._IO_FILE* %15), !dbg !5878
  br label %do.end27, !dbg !5878

do.end27:                                         ; preds = %do.body25
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5880
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !5880
  %is_thunk = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !5882
  %bf.load = load i32, i32* %is_thunk, align 8, !dbg !5882
  %bf.lshr = lshr i32 %bf.load, 30, !dbg !5882
  %bf.clear = and i32 %bf.lshr, 1, !dbg !5882
  %tobool28 = icmp ne i32 %bf.clear, 0, !dbg !5880
  br i1 %tobool28, label %if.end36, label %land.lhs.true, !dbg !5883

land.lhs.true:                                    ; preds = %do.end27
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5884
  %add.ptr29 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !5884
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr29, i32 0, i32 1, !dbg !5884
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5884
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 0, !dbg !5884
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5884
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 6, !dbg !5884
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5884
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 13, !dbg !5884
  %21 = load i32, i32* %flags, align 8, !dbg !5884
  %and = and i32 %21, 96, !dbg !5884
  %cmp = icmp eq i32 %and, 64, !dbg !5885
  br i1 %cmp, label %if.then30, label %if.end36, !dbg !5886

if.then30:                                        ; preds = %land.lhs.true
  %22 = load %union.section*, %union.section** @text_section, align 8, !dbg !5887
  call void @switch_to_section(%union.section* %22), !dbg !5889
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5890
  %decl_common31 = bitcast %union.tree_node* %23 to %struct.tree_decl_common*, !dbg !5890
  %align32 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common31, i32 0, i32 3, !dbg !5890
  %24 = load i32, i32* %align32, align 8, !dbg !5890
  call void @assemble_align(i32 %24), !dbg !5891
  br label %do.body33, !dbg !5892

do.body33:                                        ; preds = %if.then30
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5893
  %26 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 0), align 8, !dbg !5893
  call void @assemble_name(%struct._IO_FILE* %25, i8* %26), !dbg !5893
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5893
  %call34 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), %struct._IO_FILE* %27), !dbg !5893
  br label %do.end35, !dbg !5893

do.end35:                                         ; preds = %do.body33
  store i8 1, i8* %hot_label_written, align 1, !dbg !5895
  store i8 1, i8* @first_function_block_is_cold, align 1, !dbg !5896
  br label %if.end36, !dbg !5897

if.end36:                                         ; preds = %do.end35, %land.lhs.true, %do.end27
  br label %if.end50, !dbg !5898

if.else37:                                        ; preds = %if.end
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5899
  %decl_with_vis = bitcast %union.tree_node* %28 to %struct.tree_decl_with_vis*, !dbg !5899
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 2, !dbg !5899
  %29 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !5899
  %tobool38 = icmp ne %union.tree_node* %29, null, !dbg !5899
  br i1 %tobool38, label %if.then39, label %if.end49, !dbg !5901

if.then39:                                        ; preds = %if.else37
  call void @initialize_cold_section_name(), !dbg !5902
  %30 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !5904
  %tobool40 = icmp ne i8* %30, null, !dbg !5906
  br i1 %tobool40, label %land.lhs.true41, label %if.end48, !dbg !5907

land.lhs.true41:                                  ; preds = %if.then39
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5908
  %decl_with_vis42 = bitcast %union.tree_node* %31 to %struct.tree_decl_with_vis*, !dbg !5908
  %section_name43 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis42, i32 0, i32 2, !dbg !5908
  %32 = load %union.tree_node*, %union.tree_node** %section_name43, align 8, !dbg !5908
  %string = bitcast %union.tree_node* %32 to %struct.tree_string*, !dbg !5908
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !5908
  %arraydecay44 = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !5908
  %33 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !5909
  %call45 = call i32 @strcmp(i8* %arraydecay44, i8* %33), !dbg !5910
  %cmp46 = icmp eq i32 %call45, 0, !dbg !5911
  br i1 %cmp46, label %if.then47, label %if.end48, !dbg !5912

if.then47:                                        ; preds = %land.lhs.true41
  store i8 1, i8* @first_function_block_is_cold, align 1, !dbg !5913
  br label %if.end48, !dbg !5914

if.end48:                                         ; preds = %if.then47, %land.lhs.true41, %if.then39
  br label %if.end49, !dbg !5915

if.end49:                                         ; preds = %if.end48, %if.else37
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.end36
  %34 = load i8, i8* @first_function_block_is_cold, align 1, !dbg !5916
  store i8 %34, i8* @in_cold_section_p, align 1, !dbg !5917
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5918
  %call51 = call %union.section* @function_section(%union.tree_node* %35), !dbg !5919
  call void @switch_to_section(%union.section* %call51), !dbg !5920
  %36 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !5921
  %tobool52 = icmp ne i32 %36, 0, !dbg !5921
  br i1 %tobool52, label %land.lhs.true53, label %if.end59, !dbg !5923

land.lhs.true53:                                  ; preds = %if.end50
  %37 = load i8, i8* %hot_label_written, align 1, !dbg !5924
  %tobool54 = icmp ne i8 %37, 0, !dbg !5924
  br i1 %tobool54, label %if.end59, label %if.then55, !dbg !5925

if.then55:                                        ; preds = %land.lhs.true53
  br label %do.body56, !dbg !5926

do.body56:                                        ; preds = %if.then55
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5927
  %39 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 0), align 8, !dbg !5927
  call void @assemble_name(%struct._IO_FILE* %38, i8* %39), !dbg !5927
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5927
  %call57 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), %struct._IO_FILE* %40), !dbg !5927
  br label %do.end58, !dbg !5927

do.end58:                                         ; preds = %do.body56
  br label %if.end59, !dbg !5927

if.end59:                                         ; preds = %do.end58, %land.lhs.true53, %if.end50
  %41 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5929
  %decl_common60 = bitcast %union.tree_node* %41 to %struct.tree_decl_common*, !dbg !5929
  %align61 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common60, i32 0, i32 3, !dbg !5929
  %42 = load i32, i32* %align61, align 8, !dbg !5929
  %div = udiv i32 %42, 8, !dbg !5930
  %conv = zext i32 %div to i64, !dbg !5929
  %call62 = call i32 @floor_log2(i64 %conv), !dbg !5931
  store i32 %call62, i32* %align, align 4, !dbg !5932
  %43 = load i32, i32* %align, align 4, !dbg !5933
  %cmp63 = icmp sgt i32 %43, 0, !dbg !5935
  br i1 %cmp63, label %if.then65, label %if.end71, !dbg !5936

if.then65:                                        ; preds = %if.end59
  %44 = load i32, i32* %align, align 4, !dbg !5937
  %cmp66 = icmp ne i32 %44, 0, !dbg !5937
  br i1 %cmp66, label %if.then68, label %if.end70, !dbg !5940

if.then68:                                        ; preds = %if.then65
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5937
  %46 = load i32, i32* %align, align 4, !dbg !5937
  %shl = shl i32 1, %46, !dbg !5937
  %call69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i64 0, i64 0), i32 %shl), !dbg !5937
  br label %if.end70, !dbg !5937

if.end70:                                         ; preds = %if.then68, %if.then65
  br label %if.end71, !dbg !5941

if.end71:                                         ; preds = %if.end70, %if.end59
  %47 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5942
  %common = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !5942
  %base = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 0, !dbg !5942
  %48 = bitcast %struct.tree_base* %base to i64*, !dbg !5942
  %bf.load72 = load i64, i64* %48, align 8, !dbg !5942
  %bf.lshr73 = lshr i64 %bf.load72, 42, !dbg !5942
  %bf.clear74 = and i64 %bf.lshr73, 1, !dbg !5942
  %bf.cast = trunc i64 %bf.clear74 to i32, !dbg !5942
  %tobool75 = icmp ne i32 %bf.cast, 0, !dbg !5942
  br i1 %tobool75, label %if.end113, label %land.lhs.true76, !dbg !5944

land.lhs.true76:                                  ; preds = %if.end71
  %49 = load i32, i32* @align_functions_log, align 4, !dbg !5945
  %50 = load i32, i32* %align, align 4, !dbg !5946
  %cmp77 = icmp sgt i32 %49, %50, !dbg !5947
  br i1 %cmp77, label %land.lhs.true79, label %if.end113, !dbg !5948

land.lhs.true79:                                  ; preds = %land.lhs.true76
  %51 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5949
  %add.ptr80 = getelementptr inbounds %struct.function, %struct.function* %51, i64 0, !dbg !5949
  %call81 = call zeroext i8 @optimize_function_for_speed_p(%struct.function* %add.ptr80), !dbg !5950
  %conv82 = zext i8 %call81 to i32, !dbg !5950
  %tobool83 = icmp ne i32 %conv82, 0, !dbg !5950
  br i1 %tobool83, label %if.then84, label %if.end113, !dbg !5951

if.then84:                                        ; preds = %land.lhs.true79
  br label %do.body85, !dbg !5952

do.body85:                                        ; preds = %if.then84
  %52 = load i32, i32* @align_functions_log, align 4, !dbg !5954
  %cmp86 = icmp ne i32 %52, 0, !dbg !5954
  br i1 %cmp86, label %if.then88, label %if.end111, !dbg !5957

if.then88:                                        ; preds = %do.body85
  %53 = load i32, i32* @align_functions, align 4, !dbg !5958
  %sub = sub nsw i32 %53, 1, !dbg !5958
  %cmp89 = icmp eq i32 %sub, 0, !dbg !5958
  br i1 %cmp89, label %if.then91, label %if.else93, !dbg !5961

if.then91:                                        ; preds = %if.then88
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5958
  %55 = load i32, i32* @align_functions_log, align 4, !dbg !5958
  %call92 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.58, i64 0, i64 0), i32 %55), !dbg !5958
  br label %if.end110, !dbg !5958

if.else93:                                        ; preds = %if.then88
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5962
  %57 = load i32, i32* @align_functions_log, align 4, !dbg !5962
  %58 = load i32, i32* @align_functions, align 4, !dbg !5962
  %sub94 = sub nsw i32 %58, 1, !dbg !5962
  %call95 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.59, i64 0, i64 0), i32 %57, i32 %sub94), !dbg !5962
  %59 = load i32, i32* @align_functions_log, align 4, !dbg !5964
  %cmp96 = icmp sgt i32 %59, 3, !dbg !5964
  br i1 %cmp96, label %land.lhs.true98, label %if.end109, !dbg !5964

land.lhs.true98:                                  ; preds = %if.else93
  %60 = load i32, i32* @align_functions_log, align 4, !dbg !5964
  %shl99 = shl i32 1, %60, !dbg !5964
  %61 = load i32, i32* @align_functions, align 4, !dbg !5964
  %sub100 = sub nsw i32 %61, 1, !dbg !5964
  %add = add nsw i32 %sub100, 1, !dbg !5964
  %cmp101 = icmp sgt i32 %shl99, %add, !dbg !5964
  br i1 %cmp101, label %land.lhs.true103, label %if.end109, !dbg !5964

land.lhs.true103:                                 ; preds = %land.lhs.true98
  %62 = load i32, i32* @align_functions, align 4, !dbg !5964
  %sub104 = sub nsw i32 %62, 1, !dbg !5964
  %cmp105 = icmp sge i32 %sub104, 7, !dbg !5964
  br i1 %cmp105, label %if.then107, label %if.end109, !dbg !5962

if.then107:                                       ; preds = %land.lhs.true103
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5964
  %call108 = call i32 @fputs(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.60, i64 0, i64 0), %struct._IO_FILE* %63), !dbg !5964
  br label %if.end109, !dbg !5964

if.end109:                                        ; preds = %if.then107, %land.lhs.true103, %land.lhs.true98, %if.else93
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.then91
  br label %if.end111, !dbg !5961

if.end111:                                        ; preds = %if.end110, %do.body85
  br label %do.end112, !dbg !5957

do.end112:                                        ; preds = %if.end111
  br label %if.end113, !dbg !5966

if.end113:                                        ; preds = %do.end112, %land.lhs.true79, %land.lhs.true76, %if.end71
  %64 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5967
  %decl_common114 = bitcast %union.tree_node* %64 to %struct.tree_decl_common*, !dbg !5967
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common114, i32 0, i32 2, !dbg !5967
  %65 = bitcast i40* %ignored_flag to i64*, !dbg !5967
  %bf.load115 = load i64, i64* %65, align 8, !dbg !5967
  %bf.lshr116 = lshr i64 %bf.load115, 10, !dbg !5967
  %bf.clear117 = and i64 %bf.lshr116, 1, !dbg !5967
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !5967
  %tobool119 = icmp ne i32 %bf.cast118, 0, !dbg !5967
  br i1 %tobool119, label %if.end121, label %if.then120, !dbg !5969

if.then120:                                       ; preds = %if.end113
  %66 = load %struct.gcc_debug_hooks*, %struct.gcc_debug_hooks** @debug_hooks, align 8, !dbg !5970
  %begin_function = getelementptr inbounds %struct.gcc_debug_hooks, %struct.gcc_debug_hooks* %66, i32 0, i32 14, !dbg !5971
  %67 = load void (%union.tree_node*)*, void (%union.tree_node*)** %begin_function, align 8, !dbg !5971
  %68 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5972
  call void %67(%union.tree_node* %68), !dbg !5973
  br label %if.end121, !dbg !5973

if.end121:                                        ; preds = %if.then120, %if.end113
  %69 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5974
  %base122 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !5974
  %70 = bitcast %struct.tree_base* %base122 to i64*, !dbg !5974
  %bf.load123 = load i64, i64* %70, align 8, !dbg !5974
  %bf.lshr124 = lshr i64 %bf.load123, 27, !dbg !5974
  %bf.clear125 = and i64 %bf.lshr124, 1, !dbg !5974
  %bf.cast126 = trunc i64 %bf.clear125 to i32, !dbg !5974
  %tobool127 = icmp ne i32 %bf.cast126, 0, !dbg !5974
  br i1 %tobool127, label %if.then128, label %if.end130, !dbg !5976

if.then128:                                       ; preds = %if.end121
  %71 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5977
  call void @notice_global_symbol(%union.tree_node* %71), !dbg !5979
  %72 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5980
  call void @globalize_decl(%union.tree_node* %72), !dbg !5981
  %73 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5982
  %call129 = call i32 @maybe_assemble_visibility(%union.tree_node* %73), !dbg !5983
  br label %if.end130, !dbg !5984

if.end130:                                        ; preds = %if.then128, %if.end121
  %74 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5985
  %decl_common131 = bitcast %union.tree_node* %74 to %struct.tree_decl_common*, !dbg !5985
  %preserve_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common131, i32 0, i32 2, !dbg !5985
  %75 = bitcast i40* %preserve_flag to i64*, !dbg !5985
  %bf.load132 = load i64, i64* %75, align 8, !dbg !5985
  %bf.lshr133 = lshr i64 %bf.load132, 13, !dbg !5985
  %bf.clear134 = and i64 %bf.lshr133, 1, !dbg !5985
  %bf.cast135 = trunc i64 %bf.clear134 to i32, !dbg !5985
  %tobool136 = icmp ne i32 %bf.cast135, 0, !dbg !5985
  br i1 %tobool136, label %if.then137, label %if.end138, !dbg !5987

if.then137:                                       ; preds = %if.end130
  %76 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 33), align 8, !dbg !5988
  %77 = load i8*, i8** %fnname.addr, align 8, !dbg !5989
  call void %76(i8* %77), !dbg !5990
  br label %if.end138, !dbg !5990

if.end138:                                        ; preds = %if.then137, %if.end130
  br label %do.body139, !dbg !5991

do.body139:                                       ; preds = %if.end138
  br label %do.body140, !dbg !5992

do.body140:                                       ; preds = %do.body139
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5994
  %call141 = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i64 0, i64 0), %struct._IO_FILE* %78), !dbg !5994
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5994
  %80 = load i8*, i8** %fnname.addr, align 8, !dbg !5994
  call void @assemble_name(%struct._IO_FILE* %79, i8* %80), !dbg !5994
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5994
  %call142 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i64 0, i64 0), %struct._IO_FILE* %81), !dbg !5994
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5994
  %call143 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.64, i64 0, i64 0)), !dbg !5994
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5994
  %call144 = call i32 @putc(i32 10, %struct._IO_FILE* %83), !dbg !5994
  br label %do.end145, !dbg !5994

do.end145:                                        ; preds = %do.body140
  br label %do.body146, !dbg !5992

do.body146:                                       ; preds = %do.end145
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5996
  %85 = load i8*, i8** %fnname.addr, align 8, !dbg !5996
  call void @assemble_name(%struct._IO_FILE* %84, i8* %85), !dbg !5996
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !5996
  %call147 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), %struct._IO_FILE* %86), !dbg !5996
  br label %do.end148, !dbg !5996

do.end148:                                        ; preds = %do.body146
  br label %do.end149, !dbg !5992

do.end149:                                        ; preds = %do.end148
  ret void, !dbg !5998
}

declare dso_local void @app_disable() #2

; Function Attrs: noinline nounwind uwtable
define internal void @output_constant_pool(i8* %fnname, %union.tree_node* %fndecl) #0 !dbg !5999 {
entry:
  %fnname.addr = alloca i8*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %pool = alloca %struct.rtx_constant_pool*, align 8
  store i8* %fnname, i8** %fnname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fnname.addr, metadata !6002, metadata !DIExpression()), !dbg !6003
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6004, metadata !DIExpression()), !dbg !6005
  call void @llvm.dbg.declare(metadata %struct.rtx_constant_pool** %pool, metadata !6006, metadata !DIExpression()), !dbg !6007
  %0 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 2, i32 0), align 8, !dbg !6008
  store %struct.rtx_constant_pool* %0, %struct.rtx_constant_pool** %pool, align 8, !dbg !6007
  call void @mark_constant_pool(), !dbg !6009
  %1 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !6010
  call void @output_constant_pool_contents(%struct.rtx_constant_pool* %1), !dbg !6011
  ret void, !dbg !6012
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_name(%struct._IO_FILE* %file, i8* %name) #0 !dbg !6013 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %name.addr = alloca i8*, align 8
  %real_name = alloca i8*, align 8
  %id = alloca %union.tree_node*, align 8
  %id_orig = alloca %union.tree_node*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !6066, metadata !DIExpression()), !dbg !6067
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6068, metadata !DIExpression()), !dbg !6069
  call void @llvm.dbg.declare(metadata i8** %real_name, metadata !6070, metadata !DIExpression()), !dbg !6071
  call void @llvm.dbg.declare(metadata %union.tree_node** %id, metadata !6072, metadata !DIExpression()), !dbg !6073
  %0 = load i8* (i8*)*, i8* (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 52), align 8, !dbg !6074
  %1 = load i8*, i8** %name.addr, align 8, !dbg !6075
  %call = call i8* %0(i8* %1), !dbg !6076
  store i8* %call, i8** %real_name, align 8, !dbg !6077
  %2 = load i8*, i8** %real_name, align 8, !dbg !6078
  %call1 = call %union.tree_node* @maybe_get_identifier(i8* %2), !dbg !6079
  store %union.tree_node* %call1, %union.tree_node** %id, align 8, !dbg !6080
  %3 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !6081
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !6081
  br i1 %tobool, label %if.then, label %if.end6, !dbg !6083

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %id_orig, metadata !6084, metadata !DIExpression()), !dbg !6086
  %4 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !6087
  store %union.tree_node* %4, %union.tree_node** %id_orig, align 8, !dbg !6086
  %5 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !6088
  call void @mark_referenced(%union.tree_node* %5), !dbg !6089
  %call2 = call %union.tree_node* @ultimate_transparent_alias_target(%union.tree_node** %id), !dbg !6090
  %6 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !6091
  %7 = load %union.tree_node*, %union.tree_node** %id_orig, align 8, !dbg !6093
  %cmp = icmp ne %union.tree_node* %6, %7, !dbg !6094
  br i1 %cmp, label %if.then3, label %if.end, !dbg !6095

if.then3:                                         ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !6096
  %identifier = bitcast %union.tree_node* %8 to %struct.tree_identifier*, !dbg !6096
  %id4 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !6096
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id4, i32 0, i32 0, !dbg !6096
  %9 = load i8*, i8** %str, align 8, !dbg !6096
  store i8* %9, i8** %name.addr, align 8, !dbg !6097
  br label %if.end, !dbg !6098

if.end:                                           ; preds = %if.then3, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %id, align 8, !dbg !6099
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !6099
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6099
  %11 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6099
  %tobool5 = icmp ne %union.tree_node* %11, null, !dbg !6099
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !6099

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2517, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6099
  br label %cond.end, !dbg !6099

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6099

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6099
  br label %if.end6, !dbg !6100

if.end6:                                          ; preds = %cond.end, %entry
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6101
  %13 = load i8*, i8** %name.addr, align 8, !dbg !6102
  call void @assemble_name_raw(%struct._IO_FILE* %12, i8* %13), !dbg !6103
  ret void, !dbg !6104
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #2

declare dso_local i32 @floor_log2(i64) #2

declare dso_local zeroext i8 @optimize_function_for_speed_p(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @globalize_decl(%union.tree_node* %decl) #0 !dbg !6105 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  %p = alloca %union.tree_node**, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6106, metadata !DIExpression()), !dbg !6107
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6108
  %decl_with_vis = bitcast %union.tree_node* %0 to %struct.tree_decl_with_vis*, !dbg !6108
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !6108
  %1 = bitcast i24* %weak_flag to i32*, !dbg !6108
  %bf.load = load i32, i32* %1, align 8, !dbg !6108
  %bf.lshr = lshr i32 %bf.load, 7, !dbg !6108
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6108
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !6108
  br i1 %tobool, label %if.then, label %if.end32, !dbg !6110

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %name, metadata !6111, metadata !DIExpression()), !dbg !6113
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6114
  %decl_with_rtl = bitcast %union.tree_node* %2 to %struct.tree_decl_with_rtl*, !dbg !6114
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !6114
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !6114
  %tobool1 = icmp ne %struct.rtx_def* %3, null, !dbg !6114
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6114

cond.true:                                        ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6114
  %decl_with_rtl2 = bitcast %union.tree_node* %4 to %struct.tree_decl_with_rtl*, !dbg !6114
  %rtl3 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl2, i32 0, i32 1, !dbg !6114
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rtl3, align 8, !dbg !6114
  br label %cond.end, !dbg !6114

cond.false:                                       ; preds = %if.then
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6114
  call void @make_decl_rtl(%union.tree_node* %6), !dbg !6114
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6114
  %decl_with_rtl4 = bitcast %union.tree_node* %7 to %struct.tree_decl_with_rtl*, !dbg !6114
  %rtl5 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl4, i32 0, i32 1, !dbg !6114
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8, !dbg !6114
  br label %cond.end, !dbg !6114

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %5, %cond.true ], [ %8, %cond.false ], !dbg !6114
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond, i32 0, i32 1, !dbg !6114
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6114
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6114
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6114
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6114
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !6114
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !6114
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 0, !dbg !6114
  %rt_str = bitcast %union.rtunion_def* %arrayidx8 to i8**, !dbg !6114
  %10 = load i8*, i8** %rt_str, align 8, !dbg !6114
  store i8* %10, i8** %name, align 8, !dbg !6113
  call void @llvm.dbg.declare(metadata %union.tree_node*** %p, metadata !6115, metadata !DIExpression()), !dbg !6116
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6117, metadata !DIExpression()), !dbg !6118
  br label %do.body, !dbg !6119

do.body:                                          ; preds = %cond.end
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6120
  %call = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.176, i64 0, i64 0), %struct._IO_FILE* %11), !dbg !6120
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6120
  %13 = load i8*, i8** %name, align 8, !dbg !6120
  call void @assemble_name(%struct._IO_FILE* %12, i8* %13), !dbg !6120
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6120
  %call9 = call i32 @fputc(i32 10, %struct._IO_FILE* %14), !dbg !6120
  br label %do.end, !dbg !6120

do.end:                                           ; preds = %do.body
  store %union.tree_node** @weak_decls, %union.tree_node*** %p, align 8, !dbg !6122
  br label %for.cond, !dbg !6124

for.cond:                                         ; preds = %if.end, %do.end
  %15 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6125
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !6127
  store %union.tree_node* %16, %union.tree_node** %t, align 8, !dbg !6128
  %tobool10 = icmp ne %union.tree_node* %16, null, !dbg !6129
  br i1 %tobool10, label %for.body, label %for.end, !dbg !6129

for.body:                                         ; preds = %for.cond
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6130
  %call11 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %17), !dbg !6130
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6133
  %list = bitcast %union.tree_node* %18 to %struct.tree_list*, !dbg !6133
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !6133
  %19 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6133
  %call12 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %19), !dbg !6133
  %cmp = icmp eq %union.tree_node* %call11, %call12, !dbg !6134
  br i1 %cmp, label %if.then13, label %if.else, !dbg !6135

if.then13:                                        ; preds = %for.body
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6136
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !6136
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6136
  %21 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6136
  %22 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6137
  store %union.tree_node* %21, %union.tree_node** %22, align 8, !dbg !6138
  br label %if.end, !dbg !6139

if.else:                                          ; preds = %for.body
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6140
  %common14 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !6140
  %chain15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 1, !dbg !6140
  store %union.tree_node** %chain15, %union.tree_node*** %p, align 8, !dbg !6141
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then13
  br label %for.cond, !dbg !6142, !llvm.loop !6143

for.end:                                          ; preds = %for.cond
  store %union.tree_node** @weakref_targets, %union.tree_node*** %p, align 8, !dbg !6145
  br label %for.cond16, !dbg !6147

for.cond16:                                       ; preds = %if.end30, %for.end
  %24 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6148
  %25 = load %union.tree_node*, %union.tree_node** %24, align 8, !dbg !6150
  store %union.tree_node* %25, %union.tree_node** %t, align 8, !dbg !6151
  %tobool17 = icmp ne %union.tree_node* %25, null, !dbg !6152
  br i1 %tobool17, label %for.body18, label %for.end31, !dbg !6152

for.body18:                                       ; preds = %for.cond16
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6153
  %call19 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %26), !dbg !6153
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6156
  %list20 = bitcast %union.tree_node* %27 to %struct.tree_list*, !dbg !6156
  %value21 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list20, i32 0, i32 2, !dbg !6156
  %call22 = call %union.tree_node* @ultimate_transparent_alias_target(%union.tree_node** %value21), !dbg !6157
  %cmp23 = icmp eq %union.tree_node* %call19, %call22, !dbg !6158
  br i1 %cmp23, label %if.then24, label %if.else27, !dbg !6159

if.then24:                                        ; preds = %for.body18
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6160
  %common25 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !6160
  %chain26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 1, !dbg !6160
  %29 = load %union.tree_node*, %union.tree_node** %chain26, align 8, !dbg !6160
  %30 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !6161
  store %union.tree_node* %29, %union.tree_node** %30, align 8, !dbg !6162
  br label %if.end30, !dbg !6163

if.else27:                                        ; preds = %for.body18
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6164
  %common28 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !6164
  %chain29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 1, !dbg !6164
  store %union.tree_node** %chain29, %union.tree_node*** %p, align 8, !dbg !6165
  br label %if.end30

if.end30:                                         ; preds = %if.else27, %if.then24
  br label %for.cond16, !dbg !6166, !llvm.loop !6167

for.end31:                                        ; preds = %for.cond16
  br label %return, !dbg !6169

if.end32:                                         ; preds = %entry
  %32 = load void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 7), align 8, !dbg !6170
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6171
  %34 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6172
  call void %32(%struct._IO_FILE* %33, %union.tree_node* %34), !dbg !6173
  br label %return, !dbg !6174

return:                                           ; preds = %if.end32, %for.end31
  ret void, !dbg !6174
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @maybe_assemble_visibility(%union.tree_node* %decl) #0 !dbg !6175 {
entry:
  %retval = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  %vis = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6178, metadata !DIExpression()), !dbg !6179
  call void @llvm.dbg.declare(metadata i32* %vis, metadata !6180, metadata !DIExpression()), !dbg !6181
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6182
  %decl_with_vis = bitcast %union.tree_node* %0 to %struct.tree_decl_with_vis*, !dbg !6182
  %visibility = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !6182
  %1 = bitcast i24* %visibility to i32*, !dbg !6182
  %bf.load = load i32, i32* %1, align 8, !dbg !6182
  %bf.lshr = lshr i32 %bf.load, 10, !dbg !6182
  %bf.clear = and i32 %bf.lshr, 3, !dbg !6182
  store i32 %bf.clear, i32* %vis, align 4, !dbg !6181
  %2 = load i32, i32* %vis, align 4, !dbg !6183
  %cmp = icmp ne i32 %2, 0, !dbg !6185
  br i1 %cmp, label %if.then, label %if.else, !dbg !6186

if.then:                                          ; preds = %entry
  %3 = load void (%union.tree_node*, i32)*, void (%union.tree_node*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 13), align 8, !dbg !6187
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6189
  %5 = load i32, i32* %vis, align 4, !dbg !6190
  call void %3(%union.tree_node* %4, i32 %5), !dbg !6191
  store i32 1, i32* %retval, align 4, !dbg !6192
  br label %return, !dbg !6192

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6193
  br label %return, !dbg !6193

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6194
  ret i32 %6, !dbg !6194
}

declare dso_local i32 @putc(i32, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_end_function(%union.tree_node* %decl, i8* %fnname) #0 !dbg !6195 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %fnname.addr = alloca i8*, align 8
  %save_text_section = alloca %union.section*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6196, metadata !DIExpression()), !dbg !6197
  store i8* %fnname, i8** %fnname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fnname.addr, metadata !6198, metadata !DIExpression()), !dbg !6199
  %0 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !6200
  %tobool = icmp ne i32 %0, 0, !dbg !6200
  br i1 %tobool, label %if.then, label %if.end, !dbg !6202

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6203
  %call = call %union.section* @function_section(%union.tree_node* %1), !dbg !6204
  call void @switch_to_section(%union.section* %call), !dbg !6205
  br label %if.end, !dbg !6205

if.end:                                           ; preds = %if.then, %entry
  br label %do.body, !dbg !6206

do.body:                                          ; preds = %if.end
  %2 = load i32, i32* @flag_inhibit_size_directive, align 4, !dbg !6207
  %tobool1 = icmp ne i32 %2, 0, !dbg !6207
  br i1 %tobool1, label %if.end7, label %if.then2, !dbg !6210

if.then2:                                         ; preds = %do.body
  br label %do.body3, !dbg !6207

do.body3:                                         ; preds = %if.then2
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6211
  %call4 = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i64 0, i64 0), %struct._IO_FILE* %3), !dbg !6211
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6211
  %5 = load i8*, i8** %fnname.addr, align 8, !dbg !6211
  call void @assemble_name(%struct._IO_FILE* %4, i8* %5), !dbg !6211
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6211
  %call5 = call i32 @fputs(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.66, i64 0, i64 0), %struct._IO_FILE* %6), !dbg !6211
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6211
  %8 = load i8*, i8** %fnname.addr, align 8, !dbg !6211
  call void @assemble_name(%struct._IO_FILE* %7, i8* %8), !dbg !6211
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6211
  %call6 = call i32 @putc(i32 10, %struct._IO_FILE* %9), !dbg !6211
  br label %do.end, !dbg !6211

do.end:                                           ; preds = %do.body3
  br label %if.end7, !dbg !6211

if.end7:                                          ; preds = %do.end, %do.body
  br label %do.end8, !dbg !6210

do.end8:                                          ; preds = %if.end7
  %10 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !6213
  %tobool9 = icmp ne i32 %10, 0, !dbg !6213
  br i1 %tobool9, label %if.then10, label %if.end22, !dbg !6215

if.then10:                                        ; preds = %do.end8
  call void @llvm.dbg.declare(metadata %union.section** %save_text_section, metadata !6216, metadata !DIExpression()), !dbg !6218
  %11 = load %union.section*, %union.section** @in_section, align 8, !dbg !6219
  store %union.section* %11, %union.section** %save_text_section, align 8, !dbg !6220
  %call11 = call %union.section* @unlikely_text_section(), !dbg !6221
  call void @switch_to_section(%union.section* %call11), !dbg !6222
  br label %do.body12, !dbg !6223

do.body12:                                        ; preds = %if.then10
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6224
  %13 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 3), align 8, !dbg !6224
  call void @assemble_name(%struct._IO_FILE* %12, i8* %13), !dbg !6224
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6224
  %call13 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), %struct._IO_FILE* %14), !dbg !6224
  br label %do.end14, !dbg !6224

do.end14:                                         ; preds = %do.body12
  %15 = load i8, i8* @first_function_block_is_cold, align 1, !dbg !6226
  %tobool15 = icmp ne i8 %15, 0, !dbg !6226
  br i1 %tobool15, label %if.then16, label %if.else, !dbg !6228

if.then16:                                        ; preds = %do.end14
  %16 = load %union.section*, %union.section** @text_section, align 8, !dbg !6229
  call void @switch_to_section(%union.section* %16), !dbg !6230
  br label %if.end18, !dbg !6230

if.else:                                          ; preds = %do.end14
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6231
  %call17 = call %union.section* @function_section(%union.tree_node* %17), !dbg !6232
  call void @switch_to_section(%union.section* %call17), !dbg !6233
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then16
  br label %do.body19, !dbg !6234

do.body19:                                        ; preds = %if.end18
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6235
  %19 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 2), align 8, !dbg !6235
  call void @assemble_name(%struct._IO_FILE* %18, i8* %19), !dbg !6235
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6235
  %call20 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), %struct._IO_FILE* %20), !dbg !6235
  br label %do.end21, !dbg !6235

do.end21:                                         ; preds = %do.body19
  %21 = load %union.section*, %union.section** %save_text_section, align 8, !dbg !6237
  call void @switch_to_section(%union.section* %21), !dbg !6238
  br label %if.end22, !dbg !6239

if.end22:                                         ; preds = %do.end21, %do.end8
  ret void, !dbg !6240
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_zeros(i64 %size) #0 !dbg !6241 {
entry:
  %size.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !6244, metadata !DIExpression()), !dbg !6245
  %0 = load i32, i32* @flag_syntax_only, align 4, !dbg !6246
  %tobool = icmp ne i32 %0, 0, !dbg !6246
  br i1 %tobool, label %if.then, label %if.end, !dbg !6248

if.then:                                          ; preds = %entry
  br label %if.end7, !dbg !6249

if.end:                                           ; preds = %entry
  %1 = load %union.section*, %union.section** @in_section, align 8, !dbg !6250
  %common = bitcast %union.section* %1 to %struct.section_common*, !dbg !6252
  %flags = getelementptr inbounds %struct.section_common, %struct.section_common* %common, i32 0, i32 0, !dbg !6253
  %2 = load i32, i32* %flags, align 8, !dbg !6253
  %and = and i32 %2, 256, !dbg !6254
  %cmp = icmp ne i32 %and, 0, !dbg !6255
  br i1 %cmp, label %if.then1, label %if.else, !dbg !6256

if.then1:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6257, metadata !DIExpression()), !dbg !6259
  store i64 0, i64* %i, align 8, !dbg !6260
  br label %for.cond, !dbg !6262

for.cond:                                         ; preds = %for.inc, %if.then1
  %3 = load i64, i64* %i, align 8, !dbg !6263
  %4 = load i64, i64* %size.addr, align 8, !dbg !6265
  %cmp2 = icmp ult i64 %3, %4, !dbg !6266
  br i1 %cmp2, label %for.body, label %for.end, !dbg !6267

for.body:                                         ; preds = %for.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6268
  %call = call zeroext i8 @assemble_integer(%struct.rtx_def* %5, i32 1, i32 8, i32 1), !dbg !6269
  br label %for.inc, !dbg !6269

for.inc:                                          ; preds = %for.body
  %6 = load i64, i64* %i, align 8, !dbg !6270
  %inc = add i64 %6, 1, !dbg !6270
  store i64 %inc, i64* %i, align 8, !dbg !6270
  br label %for.cond, !dbg !6271, !llvm.loop !6272

for.end:                                          ; preds = %for.cond
  br label %if.end7, !dbg !6274

if.else:                                          ; preds = %if.end
  %7 = load i64, i64* %size.addr, align 8, !dbg !6275
  %cmp3 = icmp ugt i64 %7, 0, !dbg !6277
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !6278

if.then4:                                         ; preds = %if.else
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6279
  %9 = load i64, i64* %size.addr, align 8, !dbg !6279
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i64 0, i64 0), i64 %9), !dbg !6279
  br label %if.end6, !dbg !6279

if.end6:                                          ; preds = %if.then4, %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.then, %if.end6, %for.end
  ret void, !dbg !6280
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_string(i8* %p, i32 %size) #0 !dbg !6281 {
entry:
  %p.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %pos = alloca i32, align 4
  %maximum = alloca i32, align 4
  %thissize = alloca i32, align 4
  %_ascii_bytes = alloca i8*, align 8
  %limit = alloca i8*, align 8
  %last_null = alloca i8*, align 8
  %bytes_in_chunk = alloca i32, align 4
  %p3 = alloca i8*, align 8
  %_limited_str = alloca i8*, align 8
  %ch = alloca i32, align 4
  %escape = alloca i32, align 4
  %escape41 = alloca i32, align 4
  %ch42 = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !6284, metadata !DIExpression()), !dbg !6285
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !6286, metadata !DIExpression()), !dbg !6287
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !6288, metadata !DIExpression()), !dbg !6289
  store i32 0, i32* %pos, align 4, !dbg !6289
  call void @llvm.dbg.declare(metadata i32* %maximum, metadata !6290, metadata !DIExpression()), !dbg !6291
  store i32 2000, i32* %maximum, align 4, !dbg !6291
  br label %while.cond, !dbg !6292

while.cond:                                       ; preds = %do.end70, %entry
  %0 = load i32, i32* %pos, align 4, !dbg !6293
  %1 = load i32, i32* %size.addr, align 4, !dbg !6294
  %cmp = icmp slt i32 %0, %1, !dbg !6295
  br i1 %cmp, label %while.body, label %while.end, !dbg !6292

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %thissize, metadata !6296, metadata !DIExpression()), !dbg !6298
  %2 = load i32, i32* %size.addr, align 4, !dbg !6299
  %3 = load i32, i32* %pos, align 4, !dbg !6300
  %sub = sub nsw i32 %2, %3, !dbg !6301
  store i32 %sub, i32* %thissize, align 4, !dbg !6298
  %4 = load i32, i32* %thissize, align 4, !dbg !6302
  %5 = load i32, i32* %maximum, align 4, !dbg !6304
  %cmp1 = icmp sgt i32 %4, %5, !dbg !6305
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6306

if.then:                                          ; preds = %while.body
  %6 = load i32, i32* %maximum, align 4, !dbg !6307
  store i32 %6, i32* %thissize, align 4, !dbg !6308
  br label %if.end, !dbg !6309

if.end:                                           ; preds = %if.then, %while.body
  br label %do.body, !dbg !6310

do.body:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8** %_ascii_bytes, metadata !6311, metadata !DIExpression()), !dbg !6313
  %7 = load i8*, i8** %p.addr, align 8, !dbg !6313
  store i8* %7, i8** %_ascii_bytes, align 8, !dbg !6313
  call void @llvm.dbg.declare(metadata i8** %limit, metadata !6314, metadata !DIExpression()), !dbg !6313
  %8 = load i8*, i8** %_ascii_bytes, align 8, !dbg !6313
  %9 = load i32, i32* %thissize, align 4, !dbg !6313
  %idx.ext = sext i32 %9 to i64, !dbg !6313
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %idx.ext, !dbg !6313
  store i8* %add.ptr, i8** %limit, align 8, !dbg !6313
  call void @llvm.dbg.declare(metadata i8** %last_null, metadata !6315, metadata !DIExpression()), !dbg !6313
  store i8* null, i8** %last_null, align 8, !dbg !6313
  call void @llvm.dbg.declare(metadata i32* %bytes_in_chunk, metadata !6316, metadata !DIExpression()), !dbg !6313
  store i32 0, i32* %bytes_in_chunk, align 4, !dbg !6313
  br label %for.cond, !dbg !6313

for.cond:                                         ; preds = %for.inc62, %do.body
  %10 = load i8*, i8** %_ascii_bytes, align 8, !dbg !6317
  %11 = load i8*, i8** %limit, align 8, !dbg !6317
  %cmp2 = icmp ult i8* %10, %11, !dbg !6317
  br i1 %cmp2, label %for.body, label %for.end64, !dbg !6320

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8** %p3, metadata !6321, metadata !DIExpression()), !dbg !6323
  %12 = load i32, i32* %bytes_in_chunk, align 4, !dbg !6324
  %cmp4 = icmp uge i32 %12, 60, !dbg !6324
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !6323

if.then5:                                         ; preds = %for.body
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6326
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !6326
  store i32 0, i32* %bytes_in_chunk, align 4, !dbg !6326
  br label %if.end6, !dbg !6326

if.end6:                                          ; preds = %if.then5, %for.body
  %14 = load i8*, i8** %_ascii_bytes, align 8, !dbg !6328
  %15 = load i8*, i8** %last_null, align 8, !dbg !6328
  %cmp7 = icmp ugt i8* %14, %15, !dbg !6328
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !6323

if.then8:                                         ; preds = %if.end6
  %16 = load i8*, i8** %_ascii_bytes, align 8, !dbg !6330
  store i8* %16, i8** %p3, align 8, !dbg !6330
  br label %for.cond9, !dbg !6330

for.cond9:                                        ; preds = %for.inc, %if.then8
  %17 = load i8*, i8** %p3, align 8, !dbg !6333
  %18 = load i8*, i8** %limit, align 8, !dbg !6333
  %cmp10 = icmp ult i8* %17, %18, !dbg !6333
  br i1 %cmp10, label %land.rhs, label %land.end, !dbg !6333

land.rhs:                                         ; preds = %for.cond9
  %19 = load i8*, i8** %p3, align 8, !dbg !6333
  %20 = load i8, i8* %19, align 1, !dbg !6333
  %conv = zext i8 %20 to i32, !dbg !6333
  %cmp11 = icmp ne i32 %conv, 0, !dbg !6333
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond9
  %21 = phi i1 [ false, %for.cond9 ], [ %cmp11, %land.rhs ], !dbg !6335
  br i1 %21, label %for.body13, label %for.end, !dbg !6330

for.body13:                                       ; preds = %land.end
  br label %for.inc, !dbg !6333

for.inc:                                          ; preds = %for.body13
  %22 = load i8*, i8** %p3, align 8, !dbg !6333
  %incdec.ptr = getelementptr inbounds i8, i8* %22, i32 1, !dbg !6333
  store i8* %incdec.ptr, i8** %p3, align 8, !dbg !6333
  br label %for.cond9, !dbg !6333, !llvm.loop !6336

for.end:                                          ; preds = %land.end
  %23 = load i8*, i8** %p3, align 8, !dbg !6337
  store i8* %23, i8** %last_null, align 8, !dbg !6337
  br label %if.end14, !dbg !6337

if.else:                                          ; preds = %if.end6
  %24 = load i8*, i8** %last_null, align 8, !dbg !6328
  store i8* %24, i8** %p3, align 8, !dbg !6328
  br label %if.end14

if.end14:                                         ; preds = %if.else, %for.end
  %25 = load i8*, i8** %p3, align 8, !dbg !6338
  %26 = load i8*, i8** %limit, align 8, !dbg !6338
  %cmp15 = icmp ult i8* %25, %26, !dbg !6338
  br i1 %cmp15, label %land.lhs.true, label %if.else40, !dbg !6338

land.lhs.true:                                    ; preds = %if.end14
  %27 = load i8*, i8** %p3, align 8, !dbg !6338
  %28 = load i8*, i8** %_ascii_bytes, align 8, !dbg !6338
  %sub.ptr.lhs.cast = ptrtoint i8* %27 to i64, !dbg !6338
  %sub.ptr.rhs.cast = ptrtoint i8* %28 to i64, !dbg !6338
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !6338
  %cmp17 = icmp sle i64 %sub.ptr.sub, 256, !dbg !6338
  br i1 %cmp17, label %if.then19, label %if.else40, !dbg !6323

if.then19:                                        ; preds = %land.lhs.true
  %29 = load i32, i32* %bytes_in_chunk, align 4, !dbg !6340
  %cmp20 = icmp ugt i32 %29, 0, !dbg !6340
  br i1 %cmp20, label %if.then22, label %if.end24, !dbg !6343

if.then22:                                        ; preds = %if.then19
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6344
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !6344
  store i32 0, i32* %bytes_in_chunk, align 4, !dbg !6344
  br label %if.end24, !dbg !6344

if.end24:                                         ; preds = %if.then22, %if.then19
  br label %do.body25, !dbg !6343

do.body25:                                        ; preds = %if.end24
  call void @llvm.dbg.declare(metadata i8** %_limited_str, metadata !6346, metadata !DIExpression()), !dbg !6348
  %31 = load i8*, i8** %_ascii_bytes, align 8, !dbg !6348
  store i8* %31, i8** %_limited_str, align 8, !dbg !6348
  call void @llvm.dbg.declare(metadata i32* %ch, metadata !6349, metadata !DIExpression()), !dbg !6348
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6348
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i64 0, i64 0)), !dbg !6348
  br label %for.cond27, !dbg !6348

for.cond27:                                       ; preds = %for.inc36, %do.body25
  %33 = load i8*, i8** %_limited_str, align 8, !dbg !6350
  %34 = load i8, i8* %33, align 1, !dbg !6350
  %conv28 = zext i8 %34 to i32, !dbg !6350
  store i32 %conv28, i32* %ch, align 4, !dbg !6350
  %tobool = icmp ne i32 %conv28, 0, !dbg !6353
  br i1 %tobool, label %for.body29, label %for.end38, !dbg !6353

for.body29:                                       ; preds = %for.cond27
  call void @llvm.dbg.declare(metadata i32* %escape, metadata !6354, metadata !DIExpression()), !dbg !6356
  %35 = load i32, i32* %ch, align 4, !dbg !6356
  %idxprom = zext i32 %35 to i64, !dbg !6356
  %arrayidx = getelementptr inbounds [257 x i8], [257 x i8]* @.str.72, i64 0, i64 %idxprom, !dbg !6356
  %36 = load i8, i8* %arrayidx, align 1, !dbg !6356
  %conv30 = sext i8 %36 to i32, !dbg !6356
  store i32 %conv30, i32* %escape, align 4, !dbg !6356
  switch i32 %conv30, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb32
  ], !dbg !6356

sw.bb:                                            ; preds = %for.body29
  %37 = load i32, i32* %ch, align 4, !dbg !6357
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6357
  %call31 = call i32 @putc(i32 %37, %struct._IO_FILE* %38), !dbg !6357
  br label %sw.epilog, !dbg !6357

sw.bb32:                                          ; preds = %for.body29
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6357
  %40 = load i32, i32* %ch, align 4, !dbg !6357
  %call33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i64 0, i64 0), i32 %40), !dbg !6357
  br label %sw.epilog, !dbg !6357

sw.default:                                       ; preds = %for.body29
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6357
  %call34 = call i32 @putc(i32 92, %struct._IO_FILE* %41), !dbg !6357
  %42 = load i32, i32* %escape, align 4, !dbg !6357
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6357
  %call35 = call i32 @putc(i32 %42, %struct._IO_FILE* %43), !dbg !6357
  br label %sw.epilog, !dbg !6357

sw.epilog:                                        ; preds = %sw.default, %sw.bb32, %sw.bb
  br label %for.inc36, !dbg !6356

for.inc36:                                        ; preds = %sw.epilog
  %44 = load i8*, i8** %_limited_str, align 8, !dbg !6350
  %incdec.ptr37 = getelementptr inbounds i8, i8* %44, i32 1, !dbg !6350
  store i8* %incdec.ptr37, i8** %_limited_str, align 8, !dbg !6350
  br label %for.cond27, !dbg !6350, !llvm.loop !6359

for.end38:                                        ; preds = %for.cond27
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6348
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !6348
  br label %do.end, !dbg !6348

do.end:                                           ; preds = %for.end38
  %46 = load i8*, i8** %p3, align 8, !dbg !6343
  store i8* %46, i8** %_ascii_bytes, align 8, !dbg !6343
  br label %if.end61, !dbg !6343

if.else40:                                        ; preds = %land.lhs.true, %if.end14
  call void @llvm.dbg.declare(metadata i32* %escape41, metadata !6360, metadata !DIExpression()), !dbg !6362
  call void @llvm.dbg.declare(metadata i32* %ch42, metadata !6363, metadata !DIExpression()), !dbg !6362
  %47 = load i32, i32* %bytes_in_chunk, align 4, !dbg !6364
  %cmp43 = icmp eq i32 %47, 0, !dbg !6364
  br i1 %cmp43, label %if.then45, label %if.end47, !dbg !6362

if.then45:                                        ; preds = %if.else40
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6364
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.74, i64 0, i64 0)), !dbg !6364
  br label %if.end47, !dbg !6364

if.end47:                                         ; preds = %if.then45, %if.else40
  %49 = load i8*, i8** %_ascii_bytes, align 8, !dbg !6362
  %50 = load i8, i8* %49, align 1, !dbg !6362
  %conv48 = zext i8 %50 to i32, !dbg !6362
  store i32 %conv48, i32* %ch42, align 4, !dbg !6362
  %idxprom49 = zext i32 %conv48 to i64, !dbg !6362
  %arrayidx50 = getelementptr inbounds [257 x i8], [257 x i8]* @.str.72, i64 0, i64 %idxprom49, !dbg !6362
  %51 = load i8, i8* %arrayidx50, align 1, !dbg !6362
  %conv51 = sext i8 %51 to i32, !dbg !6362
  store i32 %conv51, i32* %escape41, align 4, !dbg !6362
  switch i32 %conv51, label %sw.default56 [
    i32 0, label %sw.bb52
    i32 1, label %sw.bb54
  ], !dbg !6362

sw.bb52:                                          ; preds = %if.end47
  %52 = load i32, i32* %ch42, align 4, !dbg !6366
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6366
  %call53 = call i32 @putc(i32 %52, %struct._IO_FILE* %53), !dbg !6366
  %54 = load i32, i32* %bytes_in_chunk, align 4, !dbg !6366
  %inc = add i32 %54, 1, !dbg !6366
  store i32 %inc, i32* %bytes_in_chunk, align 4, !dbg !6366
  br label %sw.epilog60, !dbg !6366

sw.bb54:                                          ; preds = %if.end47
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6366
  %56 = load i32, i32* %ch42, align 4, !dbg !6366
  %call55 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i64 0, i64 0), i32 %56), !dbg !6366
  %57 = load i32, i32* %bytes_in_chunk, align 4, !dbg !6366
  %add = add i32 %57, 4, !dbg !6366
  store i32 %add, i32* %bytes_in_chunk, align 4, !dbg !6366
  br label %sw.epilog60, !dbg !6366

sw.default56:                                     ; preds = %if.end47
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6366
  %call57 = call i32 @putc(i32 92, %struct._IO_FILE* %58), !dbg !6366
  %59 = load i32, i32* %escape41, align 4, !dbg !6366
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6366
  %call58 = call i32 @putc(i32 %59, %struct._IO_FILE* %60), !dbg !6366
  %61 = load i32, i32* %bytes_in_chunk, align 4, !dbg !6366
  %add59 = add i32 %61, 2, !dbg !6366
  store i32 %add59, i32* %bytes_in_chunk, align 4, !dbg !6366
  br label %sw.epilog60, !dbg !6366

sw.epilog60:                                      ; preds = %sw.default56, %sw.bb54, %sw.bb52
  br label %if.end61

if.end61:                                         ; preds = %sw.epilog60, %do.end
  br label %for.inc62, !dbg !6323

for.inc62:                                        ; preds = %if.end61
  %62 = load i8*, i8** %_ascii_bytes, align 8, !dbg !6317
  %incdec.ptr63 = getelementptr inbounds i8, i8* %62, i32 1, !dbg !6317
  store i8* %incdec.ptr63, i8** %_ascii_bytes, align 8, !dbg !6317
  br label %for.cond, !dbg !6317, !llvm.loop !6368

for.end64:                                        ; preds = %for.cond
  %63 = load i32, i32* %bytes_in_chunk, align 4, !dbg !6369
  %cmp65 = icmp ugt i32 %63, 0, !dbg !6369
  br i1 %cmp65, label %if.then67, label %if.end69, !dbg !6313

if.then67:                                        ; preds = %for.end64
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6369
  %call68 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !6369
  br label %if.end69, !dbg !6369

if.end69:                                         ; preds = %if.then67, %for.end64
  br label %do.end70, !dbg !6313

do.end70:                                         ; preds = %if.end69
  %65 = load i32, i32* %thissize, align 4, !dbg !6371
  %66 = load i32, i32* %pos, align 4, !dbg !6372
  %add71 = add nsw i32 %66, %65, !dbg !6372
  store i32 %add71, i32* %pos, align 4, !dbg !6372
  %67 = load i32, i32* %thissize, align 4, !dbg !6373
  %68 = load i8*, i8** %p.addr, align 8, !dbg !6374
  %idx.ext72 = sext i32 %67 to i64, !dbg !6374
  %add.ptr73 = getelementptr inbounds i8, i8* %68, i64 %idx.ext72, !dbg !6374
  store i8* %add.ptr73, i8** %p.addr, align 8, !dbg !6374
  br label %while.cond, !dbg !6292, !llvm.loop !6375

while.end:                                        ; preds = %while.cond
  ret void, !dbg !6377
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @default_emutls_var_init(%union.tree_node* %to, %union.tree_node* %decl, %union.tree_node* %proxy) #0 !dbg !6378 {
entry:
  %to.addr = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %proxy.addr = alloca %union.tree_node*, align 8
  %v = alloca %struct.VEC_constructor_elt_gc*, align 8
  %elt = alloca %struct.constructor_elt_d*, align 8
  %type = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  store %union.tree_node* %to, %union.tree_node** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to.addr, metadata !6381, metadata !DIExpression()), !dbg !6382
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6383, metadata !DIExpression()), !dbg !6384
  store %union.tree_node* %proxy, %union.tree_node** %proxy.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %proxy.addr, metadata !6385, metadata !DIExpression()), !dbg !6386
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc** %v, metadata !6387, metadata !DIExpression()), !dbg !6388
  %call = call %struct.VEC_constructor_elt_gc* @VEC_constructor_elt_gc_alloc(i32 4), !dbg !6389
  store %struct.VEC_constructor_elt_gc* %call, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !6388
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %elt, metadata !6390, metadata !DIExpression()), !dbg !6392
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6393, metadata !DIExpression()), !dbg !6394
  %0 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !6395
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6395
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6395
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6395
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !6394
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !6396, metadata !DIExpression()), !dbg !6397
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6398
  %type2 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !6398
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 1, !dbg !6398
  %3 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !6398
  store %union.tree_node* %3, %union.tree_node** %field, align 8, !dbg !6397
  %4 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !6399
  %tobool = icmp ne %struct.VEC_constructor_elt_gc* %4, null, !dbg !6399
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6399

cond.true:                                        ; preds = %entry
  %5 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !6399
  %base = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %5, i32 0, i32 0, !dbg !6399
  br label %cond.end, !dbg !6399

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6399

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6399
  %call3 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_quick_push(%struct.VEC_constructor_elt_base* %cond, %struct.constructor_elt_d* null), !dbg !6399
  store %struct.constructor_elt_d* %call3, %struct.constructor_elt_d** %elt, align 8, !dbg !6400
  %6 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6401
  %7 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %elt, align 8, !dbg !6402
  %index = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %7, i32 0, i32 0, !dbg !6403
  store %union.tree_node* %6, %union.tree_node** %index, align 8, !dbg !6404
  %8 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6405
  %common4 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !6405
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !6405
  %9 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !6405
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6405
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !6405
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !6405
  %11 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !6405
  %call6 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %9, %union.tree_node* %11), !dbg !6405
  %12 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %elt, align 8, !dbg !6406
  %value = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %12, i32 0, i32 1, !dbg !6407
  store %union.tree_node* %call6, %union.tree_node** %value, align 8, !dbg !6408
  %13 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !6409
  %tobool7 = icmp ne %struct.VEC_constructor_elt_gc* %13, null, !dbg !6409
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !6409

cond.true8:                                       ; preds = %cond.end
  %14 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !6409
  %base9 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %14, i32 0, i32 0, !dbg !6409
  br label %cond.end11, !dbg !6409

cond.false10:                                     ; preds = %cond.end
  br label %cond.end11, !dbg !6409

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_constructor_elt_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !6409
  %call13 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_quick_push(%struct.VEC_constructor_elt_base* %cond12, %struct.constructor_elt_d* null), !dbg !6409
  store %struct.constructor_elt_d* %call13, %struct.constructor_elt_d** %elt, align 8, !dbg !6410
  %15 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6411
  %common14 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !6411
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 1, !dbg !6411
  %16 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6411
  store %union.tree_node* %16, %union.tree_node** %field, align 8, !dbg !6412
  %17 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6413
  %18 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %elt, align 8, !dbg !6414
  %index15 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %18, i32 0, i32 0, !dbg !6415
  store %union.tree_node* %17, %union.tree_node** %index15, align 8, !dbg !6416
  %19 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6417
  %common16 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !6417
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !6417
  %20 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !6417
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6418
  %decl_common18 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !6418
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common18, i32 0, i32 3, !dbg !6418
  %22 = load i32, i32* %align, align 8, !dbg !6418
  %div = udiv i32 %22, 8, !dbg !6418
  %conv = zext i32 %div to i64, !dbg !6418
  %call19 = call %union.tree_node* @build_int_cst(%union.tree_node* %20, i64 %conv), !dbg !6419
  %23 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %elt, align 8, !dbg !6420
  %value20 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %23, i32 0, i32 1, !dbg !6421
  store %union.tree_node* %call19, %union.tree_node** %value20, align 8, !dbg !6422
  %24 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !6423
  %tobool21 = icmp ne %struct.VEC_constructor_elt_gc* %24, null, !dbg !6423
  br i1 %tobool21, label %cond.true22, label %cond.false24, !dbg !6423

cond.true22:                                      ; preds = %cond.end11
  %25 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !6423
  %base23 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %25, i32 0, i32 0, !dbg !6423
  br label %cond.end25, !dbg !6423

cond.false24:                                     ; preds = %cond.end11
  br label %cond.end25, !dbg !6423

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi %struct.VEC_constructor_elt_base* [ %base23, %cond.true22 ], [ null, %cond.false24 ], !dbg !6423
  %call27 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_quick_push(%struct.VEC_constructor_elt_base* %cond26, %struct.constructor_elt_d* null), !dbg !6423
  store %struct.constructor_elt_d* %call27, %struct.constructor_elt_d** %elt, align 8, !dbg !6424
  %26 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6425
  %common28 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !6425
  %chain29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 1, !dbg !6425
  %27 = load %union.tree_node*, %union.tree_node** %chain29, align 8, !dbg !6425
  store %union.tree_node* %27, %union.tree_node** %field, align 8, !dbg !6426
  %28 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6427
  %29 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %elt, align 8, !dbg !6428
  %index30 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %29, i32 0, i32 0, !dbg !6429
  store %union.tree_node* %28, %union.tree_node** %index30, align 8, !dbg !6430
  %30 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !6431
  %31 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %elt, align 8, !dbg !6432
  %value31 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %31, i32 0, i32 1, !dbg !6433
  store %union.tree_node* %30, %union.tree_node** %value31, align 8, !dbg !6434
  %32 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !6435
  %tobool32 = icmp ne %struct.VEC_constructor_elt_gc* %32, null, !dbg !6435
  br i1 %tobool32, label %cond.true33, label %cond.false35, !dbg !6435

cond.true33:                                      ; preds = %cond.end25
  %33 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !6435
  %base34 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %33, i32 0, i32 0, !dbg !6435
  br label %cond.end36, !dbg !6435

cond.false35:                                     ; preds = %cond.end25
  br label %cond.end36, !dbg !6435

cond.end36:                                       ; preds = %cond.false35, %cond.true33
  %cond37 = phi %struct.VEC_constructor_elt_base* [ %base34, %cond.true33 ], [ null, %cond.false35 ], !dbg !6435
  %call38 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_quick_push(%struct.VEC_constructor_elt_base* %cond37, %struct.constructor_elt_d* null), !dbg !6435
  store %struct.constructor_elt_d* %call38, %struct.constructor_elt_d** %elt, align 8, !dbg !6436
  %34 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6437
  %common39 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !6437
  %chain40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 1, !dbg !6437
  %35 = load %union.tree_node*, %union.tree_node** %chain40, align 8, !dbg !6437
  store %union.tree_node* %35, %union.tree_node** %field, align 8, !dbg !6438
  %36 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6439
  %37 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %elt, align 8, !dbg !6440
  %index41 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %37, i32 0, i32 0, !dbg !6441
  store %union.tree_node* %36, %union.tree_node** %index41, align 8, !dbg !6442
  %38 = load %union.tree_node*, %union.tree_node** %proxy.addr, align 8, !dbg !6443
  %39 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %elt, align 8, !dbg !6444
  %value42 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %39, i32 0, i32 1, !dbg !6445
  store %union.tree_node* %38, %union.tree_node** %value42, align 8, !dbg !6446
  %40 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6447
  %41 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !6448
  %call43 = call %union.tree_node* @build_constructor(%union.tree_node* %40, %struct.VEC_constructor_elt_gc* %41), !dbg !6449
  ret %union.tree_node* %call43, !dbg !6450
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_constructor_elt_gc* @VEC_constructor_elt_gc_alloc(i32 %alloc_) #0 !dbg !6451 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6454, metadata !DIExpression()), !dbg !6455
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6455
  %call = call i8* @vec_gc_o_reserve_exact(i8* null, i32 %0, i64 8, i64 16), !dbg !6455
  %1 = bitcast i8* %call to %struct.VEC_constructor_elt_gc*, !dbg !6455
  ret %struct.VEC_constructor_elt_gc* %1, !dbg !6455
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constructor_elt_d* @VEC_constructor_elt_base_quick_push(%struct.VEC_constructor_elt_base* %vec_, %struct.constructor_elt_d* %obj_) #0 !dbg !6456 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %obj_.addr = alloca %struct.constructor_elt_d*, align 8
  %slot_ = alloca %struct.constructor_elt_d*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !6462, metadata !DIExpression()), !dbg !6463
  store %struct.constructor_elt_d* %obj_, %struct.constructor_elt_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %obj_.addr, metadata !6464, metadata !DIExpression()), !dbg !6463
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %slot_, metadata !6465, metadata !DIExpression()), !dbg !6463
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !6463
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %0, i32 0, i32 0, !dbg !6463
  %1 = load i32, i32* %num, align 8, !dbg !6463
  %2 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !6463
  %alloc = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %2, i32 0, i32 1, !dbg !6463
  %3 = load i32, i32* %alloc, align 4, !dbg !6463
  %cmp = icmp ult i32 %1, %3, !dbg !6463
  %conv = zext i1 %cmp to i32, !dbg !6463
  %4 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !6463
  %vec = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %4, i32 0, i32 2, !dbg !6463
  %5 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !6463
  %num1 = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %5, i32 0, i32 0, !dbg !6463
  %6 = load i32, i32* %num1, align 8, !dbg !6463
  %inc = add i32 %6, 1, !dbg !6463
  store i32 %inc, i32* %num1, align 8, !dbg !6463
  %idxprom = zext i32 %6 to i64, !dbg !6463
  %arrayidx = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec, i64 0, i64 %idxprom, !dbg !6463
  store %struct.constructor_elt_d* %arrayidx, %struct.constructor_elt_d** %slot_, align 8, !dbg !6463
  %7 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %obj_.addr, align 8, !dbg !6466
  %tobool = icmp ne %struct.constructor_elt_d* %7, null, !dbg !6466
  br i1 %tobool, label %if.then, label %if.end, !dbg !6463

if.then:                                          ; preds = %entry
  %8 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %slot_, align 8, !dbg !6466
  %9 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %obj_.addr, align 8, !dbg !6466
  %10 = bitcast %struct.constructor_elt_d* %8 to i8*, !dbg !6466
  %11 = bitcast %struct.constructor_elt_d* %9 to i8*, !dbg !6466
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !6466
  br label %if.end, !dbg !6466

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %slot_, align 8, !dbg !6463
  ret %struct.constructor_elt_d* %12, !dbg !6463
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local %union.tree_node* @build_constructor(%union.tree_node*, %struct.VEC_constructor_elt_gc*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_variable(%union.tree_node* %decl, i32 %top_level, i32 %at_end, i32 %dont_output_data) #0 !dbg !6468 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %top_level.addr = alloca i32, align 4
  %at_end.addr = alloca i32, align 4
  %dont_output_data.addr = alloca i32, align 4
  %name = alloca i8*, align 8
  %decl_rtl = alloca %struct.rtx_def*, align 8
  %symbol = alloca %struct.rtx_def*, align 8
  %sect = alloca %union.section*, align 8
  %to = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6471, metadata !DIExpression()), !dbg !6472
  store i32 %top_level, i32* %top_level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %top_level.addr, metadata !6473, metadata !DIExpression()), !dbg !6474
  store i32 %at_end, i32* %at_end.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %at_end.addr, metadata !6475, metadata !DIExpression()), !dbg !6476
  store i32 %dont_output_data, i32* %dont_output_data.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dont_output_data.addr, metadata !6477, metadata !DIExpression()), !dbg !6478
  call void @llvm.dbg.declare(metadata i8** %name, metadata !6479, metadata !DIExpression()), !dbg !6480
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %decl_rtl, metadata !6481, metadata !DIExpression()), !dbg !6482
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol, metadata !6483, metadata !DIExpression()), !dbg !6484
  call void @llvm.dbg.declare(metadata %union.section** %sect, metadata !6485, metadata !DIExpression()), !dbg !6486
  %0 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 113), align 4, !dbg !6487
  %tobool = icmp ne i8 %0, 0, !dbg !6489
  br i1 %tobool, label %if.end27, label %land.lhs.true, !dbg !6490

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6491
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6491
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6491
  %bf.load = load i64, i64* %2, align 8, !dbg !6491
  %bf.clear = and i64 %bf.load, 65535, !dbg !6491
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6491
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !6492
  br i1 %cmp, label %land.lhs.true1, label %if.end27, !dbg !6493

land.lhs.true1:                                   ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6494
  %decl_with_vis = bitcast %union.tree_node* %3 to %struct.tree_decl_with_vis*, !dbg !6494
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !6494
  %4 = bitcast i24* %tls_model to i32*, !dbg !6494
  %bf.load2 = load i32, i32* %4, align 8, !dbg !6494
  %bf.lshr = lshr i32 %bf.load2, 13, !dbg !6494
  %bf.clear3 = and i32 %bf.lshr, 7, !dbg !6494
  %cmp4 = icmp sge i32 %bf.clear3, 2, !dbg !6494
  br i1 %cmp4, label %if.then, label %if.end27, !dbg !6495

if.then:                                          ; preds = %land.lhs.true1
  call void @llvm.dbg.declare(metadata %union.tree_node** %to, metadata !6496, metadata !DIExpression()), !dbg !6498
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6499
  %call = call %union.tree_node* @emutls_decl(%union.tree_node* %5), !dbg !6500
  store %union.tree_node* %call, %union.tree_node** %to, align 8, !dbg !6498
  %6 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6501
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !6501
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6501
  %7 = bitcast i40* %decl_flag_1 to i64*, !dbg !6501
  %bf.load5 = load i64, i64* %7, align 8, !dbg !6501
  %bf.lshr6 = lshr i64 %bf.load5, 25, !dbg !6501
  %bf.clear7 = and i64 %bf.lshr6, 1, !dbg !6501
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !6501
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !6501
  br i1 %tobool9, label %if.end, label %land.lhs.true10, !dbg !6503

land.lhs.true10:                                  ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6504
  %decl_with_vis11 = bitcast %union.tree_node* %8 to %struct.tree_decl_with_vis*, !dbg !6504
  %common_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis11, i32 0, i32 4, !dbg !6504
  %9 = bitcast i24* %common_flag to i32*, !dbg !6504
  %bf.load12 = load i32, i32* %9, align 8, !dbg !6504
  %bf.lshr13 = lshr i32 %bf.load12, 3, !dbg !6504
  %bf.clear14 = and i32 %bf.lshr13, 1, !dbg !6504
  %tobool15 = icmp ne i32 %bf.clear14, 0, !dbg !6504
  br i1 %tobool15, label %lor.lhs.false, label %if.then22, !dbg !6505

lor.lhs.false:                                    ; preds = %land.lhs.true10
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6506
  %decl_common16 = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !6506
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common16, i32 0, i32 5, !dbg !6506
  %11 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !6506
  %tobool17 = icmp ne %union.tree_node* %11, null, !dbg !6506
  br i1 %tobool17, label %land.lhs.true18, label %if.end, !dbg !6507

land.lhs.true18:                                  ; preds = %lor.lhs.false
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6508
  %decl_common19 = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !6508
  %initial20 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common19, i32 0, i32 5, !dbg !6508
  %13 = load %union.tree_node*, %union.tree_node** %initial20, align 8, !dbg !6508
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6509
  %cmp21 = icmp ne %union.tree_node* %13, %14, !dbg !6510
  br i1 %cmp21, label %if.then22, label %if.end, !dbg !6511

if.then22:                                        ; preds = %land.lhs.true18, %land.lhs.true10
  %15 = load %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 7), align 8, !dbg !6512
  %16 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6514
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6515
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6516
  %call23 = call %union.tree_node* @get_emutls_init_templ_addr(%union.tree_node* %18), !dbg !6517
  %call24 = call %union.tree_node* %15(%union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %call23), !dbg !6518
  %19 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6519
  %decl_common25 = bitcast %union.tree_node* %19 to %struct.tree_decl_common*, !dbg !6519
  %initial26 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common25, i32 0, i32 5, !dbg !6519
  store %union.tree_node* %call24, %union.tree_node** %initial26, align 8, !dbg !6520
  %20 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6521
  call void @record_references_in_initializer(%union.tree_node* %20, i8 zeroext 0), !dbg !6522
  br label %if.end, !dbg !6523

if.end:                                           ; preds = %if.then22, %land.lhs.true18, %lor.lhs.false, %if.then
  %21 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6524
  store %union.tree_node* %21, %union.tree_node** %decl.addr, align 8, !dbg !6525
  br label %if.end27, !dbg !6526

if.end27:                                         ; preds = %if.end, %land.lhs.true1, %land.lhs.true, %entry
  store %union.tree_node* null, %union.tree_node** @last_assemble_variable_decl, align 8, !dbg !6527
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6528
  %decl_common28 = bitcast %union.tree_node* %22 to %struct.tree_decl_common*, !dbg !6528
  %decl_flag_129 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common28, i32 0, i32 2, !dbg !6528
  %23 = bitcast i40* %decl_flag_129 to i64*, !dbg !6528
  %bf.load30 = load i64, i64* %23, align 8, !dbg !6528
  %bf.lshr31 = lshr i64 %bf.load30, 25, !dbg !6528
  %bf.clear32 = and i64 %bf.lshr31, 1, !dbg !6528
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !6528
  %tobool34 = icmp ne i32 %bf.cast33, 0, !dbg !6528
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !6530

if.then35:                                        ; preds = %if.end27
  br label %if.end255, !dbg !6531

if.end36:                                         ; preds = %if.end27
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6532
  %base37 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !6532
  %25 = bitcast %struct.tree_base* %base37 to i64*, !dbg !6532
  %bf.load38 = load i64, i64* %25, align 8, !dbg !6532
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !6532
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !6532
  %cmp41 = icmp eq i32 %bf.cast40, 29, !dbg !6534
  br i1 %cmp41, label %if.then42, label %if.end43, !dbg !6535

if.then42:                                        ; preds = %if.end36
  br label %if.end255, !dbg !6536

if.end43:                                         ; preds = %if.end36
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6537
  %base44 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !6537
  %27 = bitcast %struct.tree_base* %base44 to i64*, !dbg !6537
  %bf.load45 = load i64, i64* %27, align 8, !dbg !6537
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !6537
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !6537
  %idxprom = zext i32 %bf.cast47 to i64, !dbg !6537
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !6537
  %arrayidx48 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !6537
  %28 = load i8, i8* %arrayidx48, align 1, !dbg !6537
  %conv = zext i8 %28 to i32, !dbg !6537
  %tobool49 = icmp ne i32 %conv, 0, !dbg !6537
  br i1 %tobool49, label %land.lhs.true50, label %if.end69, !dbg !6537

land.lhs.true50:                                  ; preds = %if.end43
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6537
  %decl_with_rtl = bitcast %union.tree_node* %29 to %struct.tree_decl_with_rtl*, !dbg !6537
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !6537
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !6537
  %cmp51 = icmp ne %struct.rtx_def* %30, null, !dbg !6537
  br i1 %cmp51, label %land.lhs.true53, label %if.end69, !dbg !6539

land.lhs.true53:                                  ; preds = %land.lhs.true50
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6540
  %decl_with_rtl54 = bitcast %union.tree_node* %31 to %struct.tree_decl_with_rtl*, !dbg !6540
  %rtl55 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl54, i32 0, i32 1, !dbg !6540
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rtl55, align 8, !dbg !6540
  %tobool56 = icmp ne %struct.rtx_def* %32, null, !dbg !6540
  br i1 %tobool56, label %cond.true, label %cond.false, !dbg !6540

cond.true:                                        ; preds = %land.lhs.true53
  %33 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6540
  %decl_with_rtl57 = bitcast %union.tree_node* %33 to %struct.tree_decl_with_rtl*, !dbg !6540
  %rtl58 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl57, i32 0, i32 1, !dbg !6540
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rtl58, align 8, !dbg !6540
  br label %cond.end, !dbg !6540

cond.false:                                       ; preds = %land.lhs.true53
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6540
  call void @make_decl_rtl(%union.tree_node* %35), !dbg !6540
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6540
  %decl_with_rtl59 = bitcast %union.tree_node* %36 to %struct.tree_decl_with_rtl*, !dbg !6540
  %rtl60 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl59, i32 0, i32 1, !dbg !6540
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtl60, align 8, !dbg !6540
  br label %cond.end, !dbg !6540

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %34, %cond.true ], [ %37, %cond.false ], !dbg !6540
  %38 = bitcast %struct.rtx_def* %cond to i32*, !dbg !6540
  %bf.load61 = load i32, i32* %38, align 8, !dbg !6540
  %bf.clear62 = and i32 %bf.load61, 65535, !dbg !6540
  %cmp63 = icmp eq i32 %bf.clear62, 37, !dbg !6540
  br i1 %cmp63, label %if.then65, label %if.end69, !dbg !6541

if.then65:                                        ; preds = %cond.end
  %39 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6542
  %base66 = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !6542
  %40 = bitcast %struct.tree_base* %base66 to i64*, !dbg !6542
  %bf.load67 = load i64, i64* %40, align 8, !dbg !6544
  %bf.clear68 = and i64 %bf.load67, -4194305, !dbg !6544
  %bf.set = or i64 %bf.clear68, 4194304, !dbg !6544
  store i64 %bf.set, i64* %40, align 8, !dbg !6544
  br label %if.end255, !dbg !6545

if.end69:                                         ; preds = %cond.end, %land.lhs.true50, %if.end43
  %41 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6546
  %decl_common70 = bitcast %union.tree_node* %41 to %struct.tree_decl_common*, !dbg !6546
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common70, i32 0, i32 1, !dbg !6546
  %42 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !6546
  %cmp71 = icmp eq %union.tree_node* %42, null, !dbg !6548
  br i1 %cmp71, label %if.then73, label %if.end74, !dbg !6549

if.then73:                                        ; preds = %if.end69
  %43 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6550
  call void @layout_decl(%union.tree_node* %43, i32 0), !dbg !6551
  br label %if.end74, !dbg !6551

if.end74:                                         ; preds = %if.then73, %if.end69
  %44 = load i32, i32* %dont_output_data.addr, align 4, !dbg !6552
  %tobool75 = icmp ne i32 %44, 0, !dbg !6552
  br i1 %tobool75, label %if.end86, label %land.lhs.true76, !dbg !6554

land.lhs.true76:                                  ; preds = %if.end74
  %45 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6555
  %decl_common77 = bitcast %union.tree_node* %45 to %struct.tree_decl_common*, !dbg !6555
  %size78 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common77, i32 0, i32 1, !dbg !6555
  %46 = load %union.tree_node*, %union.tree_node** %size78, align 8, !dbg !6555
  %cmp79 = icmp eq %union.tree_node* %46, null, !dbg !6556
  br i1 %cmp79, label %if.then81, label %if.end86, !dbg !6557

if.then81:                                        ; preds = %land.lhs.true76
  %47 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6558
  call void (i8*, ...) @error(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.75, i64 0, i64 0), %union.tree_node* %47), !dbg !6560
  %48 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6561
  %base82 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !6561
  %49 = bitcast %struct.tree_base* %base82 to i64*, !dbg !6561
  %bf.load83 = load i64, i64* %49, align 8, !dbg !6562
  %bf.clear84 = and i64 %bf.load83, -4194305, !dbg !6562
  %bf.set85 = or i64 %bf.clear84, 4194304, !dbg !6562
  store i64 %bf.set85, i64* %49, align 8, !dbg !6562
  br label %if.end255, !dbg !6563

if.end86:                                         ; preds = %land.lhs.true76, %if.end74
  %50 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6564
  %base87 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !6564
  %51 = bitcast %struct.tree_base* %base87 to i64*, !dbg !6564
  %bf.load88 = load i64, i64* %51, align 8, !dbg !6564
  %bf.lshr89 = lshr i64 %bf.load88, 22, !dbg !6564
  %bf.clear90 = and i64 %bf.lshr89, 1, !dbg !6564
  %bf.cast91 = trunc i64 %bf.clear90 to i32, !dbg !6564
  %tobool92 = icmp ne i32 %bf.cast91, 0, !dbg !6564
  br i1 %tobool92, label %if.then93, label %if.end94, !dbg !6566

if.then93:                                        ; preds = %if.end86
  br label %if.end255, !dbg !6567

if.end94:                                         ; preds = %if.end86
  %52 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6568
  %decl_with_rtl95 = bitcast %union.tree_node* %52 to %struct.tree_decl_with_rtl*, !dbg !6568
  %rtl96 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl95, i32 0, i32 1, !dbg !6568
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rtl96, align 8, !dbg !6568
  %tobool97 = icmp ne %struct.rtx_def* %53, null, !dbg !6568
  br i1 %tobool97, label %cond.true98, label %cond.false101, !dbg !6568

cond.true98:                                      ; preds = %if.end94
  %54 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6568
  %decl_with_rtl99 = bitcast %union.tree_node* %54 to %struct.tree_decl_with_rtl*, !dbg !6568
  %rtl100 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl99, i32 0, i32 1, !dbg !6568
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rtl100, align 8, !dbg !6568
  br label %cond.end104, !dbg !6568

cond.false101:                                    ; preds = %if.end94
  %56 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6568
  call void @make_decl_rtl(%union.tree_node* %56), !dbg !6568
  %57 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6568
  %decl_with_rtl102 = bitcast %union.tree_node* %57 to %struct.tree_decl_with_rtl*, !dbg !6568
  %rtl103 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl102, i32 0, i32 1, !dbg !6568
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rtl103, align 8, !dbg !6568
  br label %cond.end104, !dbg !6568

cond.end104:                                      ; preds = %cond.false101, %cond.true98
  %cond105 = phi %struct.rtx_def* [ %55, %cond.true98 ], [ %58, %cond.false101 ], !dbg !6568
  store %struct.rtx_def* %cond105, %struct.rtx_def** %decl_rtl, align 8, !dbg !6569
  %59 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6570
  %base106 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !6570
  %60 = bitcast %struct.tree_base* %base106 to i64*, !dbg !6570
  %bf.load107 = load i64, i64* %60, align 8, !dbg !6571
  %bf.clear108 = and i64 %bf.load107, -4194305, !dbg !6571
  %bf.set109 = or i64 %bf.clear108, 4194304, !dbg !6571
  store i64 %bf.set109, i64* %60, align 8, !dbg !6571
  %61 = load i32, i32* @flag_syntax_only, align 4, !dbg !6572
  %tobool110 = icmp ne i32 %61, 0, !dbg !6572
  br i1 %tobool110, label %if.then111, label %if.end112, !dbg !6574

if.then111:                                       ; preds = %cond.end104
  br label %if.end255, !dbg !6575

if.end112:                                        ; preds = %cond.end104
  call void @app_disable(), !dbg !6576
  %62 = load i32, i32* %dont_output_data.addr, align 4, !dbg !6577
  %tobool113 = icmp ne i32 %62, 0, !dbg !6577
  br i1 %tobool113, label %if.end119, label %land.lhs.true114, !dbg !6579

land.lhs.true114:                                 ; preds = %if.end112
  %63 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6580
  %decl_common115 = bitcast %union.tree_node* %63 to %struct.tree_decl_common*, !dbg !6580
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common115, i32 0, i32 4, !dbg !6580
  %64 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !6580
  %call116 = call i32 @host_integerp(%union.tree_node* %64, i32 1), !dbg !6581
  %tobool117 = icmp ne i32 %call116, 0, !dbg !6581
  br i1 %tobool117, label %if.end119, label %if.then118, !dbg !6582

if.then118:                                       ; preds = %land.lhs.true114
  %65 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6583
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.76, i64 0, i64 0), %union.tree_node* %65), !dbg !6585
  br label %if.end255, !dbg !6586

if.end119:                                        ; preds = %land.lhs.true114, %if.end112
  %66 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !6587
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !6587
  %bf.load120 = load i32, i32* %67, align 8, !dbg !6587
  %bf.clear121 = and i32 %bf.load120, 65535, !dbg !6587
  %cmp122 = icmp eq i32 %bf.clear121, 43, !dbg !6587
  br i1 %cmp122, label %cond.false125, label %cond.true124, !dbg !6587

cond.true124:                                     ; preds = %if.end119
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2212, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6587
  br label %cond.end126, !dbg !6587

cond.false125:                                    ; preds = %if.end119
  br label %cond.end126, !dbg !6587

cond.end126:                                      ; preds = %cond.false125, %cond.true124
  %cond127 = phi i32 [ 0, %cond.true124 ], [ 0, %cond.false125 ], !dbg !6587
  %68 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !6588
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !6588
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6588
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6588
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**, !dbg !6588
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6588
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !6588
  %bf.load129 = load i32, i32* %70, align 8, !dbg !6588
  %bf.clear130 = and i32 %bf.load129, 65535, !dbg !6588
  %cmp131 = icmp eq i32 %bf.clear130, 45, !dbg !6588
  br i1 %cmp131, label %cond.false134, label %cond.true133, !dbg !6588

cond.true133:                                     ; preds = %cond.end126
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2213, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6588
  br label %cond.end135, !dbg !6588

cond.false134:                                    ; preds = %cond.end126
  br label %cond.end135, !dbg !6588

cond.end135:                                      ; preds = %cond.false134, %cond.true133
  %cond136 = phi i32 [ 0, %cond.true133 ], [ 0, %cond.false134 ], !dbg !6588
  %71 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !6589
  %u137 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !6589
  %fld138 = bitcast %union.u* %u137 to [1 x %union.rtunion_def]*, !dbg !6589
  %arrayidx139 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld138, i64 0, i64 0, !dbg !6589
  %rt_rtx140 = bitcast %union.rtunion_def* %arrayidx139 to %struct.rtx_def**, !dbg !6589
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx140, align 8, !dbg !6589
  store %struct.rtx_def* %72, %struct.rtx_def** %symbol, align 8, !dbg !6590
  %73 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !6591
  %u141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !6591
  %fld142 = bitcast %union.u* %u141 to [1 x %union.rtunion_def]*, !dbg !6591
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i64 0, i64 0, !dbg !6591
  %rt_str = bitcast %union.rtunion_def* %arrayidx143 to i8**, !dbg !6591
  %74 = load i8*, i8** %rt_str, align 8, !dbg !6591
  store i8* %74, i8** %name, align 8, !dbg !6592
  %75 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6593
  %base144 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !6593
  %76 = bitcast %struct.tree_base* %base144 to i64*, !dbg !6593
  %bf.load145 = load i64, i64* %76, align 8, !dbg !6593
  %bf.lshr146 = lshr i64 %bf.load145, 27, !dbg !6593
  %bf.clear147 = and i64 %bf.lshr146, 1, !dbg !6593
  %bf.cast148 = trunc i64 %bf.clear147 to i32, !dbg !6593
  %tobool149 = icmp ne i32 %bf.cast148, 0, !dbg !6593
  br i1 %tobool149, label %land.lhs.true150, label %if.end154, !dbg !6595

land.lhs.true150:                                 ; preds = %cond.end135
  %77 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6596
  %decl_minimal = bitcast %union.tree_node* %77 to %struct.tree_decl_minimal*, !dbg !6596
  %name151 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !6596
  %78 = load %union.tree_node*, %union.tree_node** %name151, align 8, !dbg !6596
  %tobool152 = icmp ne %union.tree_node* %78, null, !dbg !6596
  br i1 %tobool152, label %if.then153, label %if.end154, !dbg !6597

if.then153:                                       ; preds = %land.lhs.true150
  %79 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6598
  call void @notice_global_symbol(%union.tree_node* %79), !dbg !6599
  br label %if.end154, !dbg !6599

if.end154:                                        ; preds = %if.then153, %land.lhs.true150, %cond.end135
  %80 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6600
  %81 = load i32, i32* %dont_output_data.addr, align 4, !dbg !6601
  %conv155 = trunc i32 %81 to i8, !dbg !6601
  call void @align_variable(%union.tree_node* %80, i8 zeroext %conv155), !dbg !6602
  %82 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !6603
  %83 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6604
  %decl_common156 = bitcast %union.tree_node* %83 to %struct.tree_decl_common*, !dbg !6604
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common156, i32 0, i32 3, !dbg !6604
  %84 = load i32, i32* %align, align 8, !dbg !6604
  call void @set_mem_align(%struct.rtx_def* %82, i32 %84), !dbg !6605
  %85 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6606
  %base157 = bitcast %union.tree_node* %85 to %struct.tree_base*, !dbg !6606
  %86 = bitcast %struct.tree_base* %base157 to i64*, !dbg !6606
  %bf.load158 = load i64, i64* %86, align 8, !dbg !6606
  %bf.lshr159 = lshr i64 %bf.load158, 27, !dbg !6606
  %bf.clear160 = and i64 %bf.lshr159, 1, !dbg !6606
  %bf.cast161 = trunc i64 %bf.clear160 to i32, !dbg !6606
  %tobool162 = icmp ne i32 %bf.cast161, 0, !dbg !6606
  br i1 %tobool162, label %if.then163, label %if.end165, !dbg !6608

if.then163:                                       ; preds = %if.end154
  %87 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6609
  %call164 = call i32 @maybe_assemble_visibility(%union.tree_node* %87), !dbg !6610
  br label %if.end165, !dbg !6610

if.end165:                                        ; preds = %if.then163, %if.end154
  %88 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6611
  %decl_common166 = bitcast %union.tree_node* %88 to %struct.tree_decl_common*, !dbg !6611
  %preserve_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common166, i32 0, i32 2, !dbg !6611
  %89 = bitcast i40* %preserve_flag to i64*, !dbg !6611
  %bf.load167 = load i64, i64* %89, align 8, !dbg !6611
  %bf.lshr168 = lshr i64 %bf.load167, 13, !dbg !6611
  %bf.clear169 = and i64 %bf.lshr168, 1, !dbg !6611
  %bf.cast170 = trunc i64 %bf.clear169 to i32, !dbg !6611
  %tobool171 = icmp ne i32 %bf.cast170, 0, !dbg !6611
  br i1 %tobool171, label %if.then172, label %if.end173, !dbg !6613

if.then172:                                       ; preds = %if.end165
  %90 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 33), align 8, !dbg !6614
  %91 = load i8*, i8** %name, align 8, !dbg !6615
  call void %90(i8* %91), !dbg !6616
  br label %if.end173, !dbg !6616

if.end173:                                        ; preds = %if.then172, %if.end165
  %92 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6617
  %call174 = call %union.section* @get_variable_section(%union.tree_node* %92, i8 zeroext 0), !dbg !6618
  store %union.section* %call174, %union.section** %sect, align 8, !dbg !6619
  %93 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6620
  %base175 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !6620
  %94 = bitcast %struct.tree_base* %base175 to i64*, !dbg !6620
  %bf.load176 = load i64, i64* %94, align 8, !dbg !6620
  %bf.lshr177 = lshr i64 %bf.load176, 27, !dbg !6620
  %bf.clear178 = and i64 %bf.lshr177, 1, !dbg !6620
  %bf.cast179 = trunc i64 %bf.clear178 to i32, !dbg !6620
  %tobool180 = icmp ne i32 %bf.cast179, 0, !dbg !6620
  br i1 %tobool180, label %land.lhs.true181, label %if.end185, !dbg !6622

land.lhs.true181:                                 ; preds = %if.end173
  %95 = load %union.section*, %union.section** %sect, align 8, !dbg !6623
  %common = bitcast %union.section* %95 to %struct.section_common*, !dbg !6624
  %flags = getelementptr inbounds %struct.section_common, %struct.section_common* %common, i32 0, i32 0, !dbg !6625
  %96 = load i32, i32* %flags, align 8, !dbg !6625
  %and = and i32 %96, 8388608, !dbg !6626
  %cmp182 = icmp eq i32 %and, 0, !dbg !6627
  br i1 %cmp182, label %if.then184, label %if.end185, !dbg !6628

if.then184:                                       ; preds = %land.lhs.true181
  %97 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6629
  call void @globalize_decl(%union.tree_node* %97), !dbg !6630
  br label %if.end185, !dbg !6630

if.end185:                                        ; preds = %if.then184, %land.lhs.true181, %if.end173
  %98 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6631
  %decl_common186 = bitcast %union.tree_node* %98 to %struct.tree_decl_common*, !dbg !6631
  %initial187 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common186, i32 0, i32 5, !dbg !6631
  %99 = load %union.tree_node*, %union.tree_node** %initial187, align 8, !dbg !6631
  %tobool188 = icmp ne %union.tree_node* %99, null, !dbg !6631
  br i1 %tobool188, label %land.lhs.true189, label %if.end197, !dbg !6633

land.lhs.true189:                                 ; preds = %if.end185
  %100 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6634
  %decl_common190 = bitcast %union.tree_node* %100 to %struct.tree_decl_common*, !dbg !6634
  %initial191 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common190, i32 0, i32 5, !dbg !6634
  %101 = load %union.tree_node*, %union.tree_node** %initial191, align 8, !dbg !6634
  %102 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6635
  %cmp192 = icmp ne %union.tree_node* %101, %102, !dbg !6636
  br i1 %cmp192, label %if.then194, label %if.end197, !dbg !6637

if.then194:                                       ; preds = %land.lhs.true189
  %103 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6638
  %decl_common195 = bitcast %union.tree_node* %103 to %struct.tree_decl_common*, !dbg !6638
  %initial196 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common195, i32 0, i32 5, !dbg !6638
  %104 = load %union.tree_node*, %union.tree_node** %initial196, align 8, !dbg !6638
  call void @output_addressed_constants(%union.tree_node* %104), !dbg !6639
  br label %if.end197, !dbg !6639

if.end197:                                        ; preds = %if.then194, %land.lhs.true189, %if.end185
  %105 = load %union.section*, %union.section** %sect, align 8, !dbg !6640
  %tobool198 = icmp ne %union.section* %105, null, !dbg !6640
  br i1 %tobool198, label %land.lhs.true199, label %if.end210, !dbg !6642

land.lhs.true199:                                 ; preds = %if.end197
  %106 = load %union.section*, %union.section** %sect, align 8, !dbg !6643
  %common200 = bitcast %union.section* %106 to %struct.section_common*, !dbg !6644
  %flags201 = getelementptr inbounds %struct.section_common, %struct.section_common* %common200, i32 0, i32 0, !dbg !6645
  %107 = load i32, i32* %flags201, align 8, !dbg !6645
  %and202 = and i32 %107, 256, !dbg !6646
  %cmp203 = icmp ne i32 %and202, 0, !dbg !6647
  br i1 %cmp203, label %if.then205, label %if.end210, !dbg !6648

if.then205:                                       ; preds = %land.lhs.true199
  %108 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6649
  %decl_with_vis206 = bitcast %union.tree_node* %108 to %struct.tree_decl_with_vis*, !dbg !6649
  %in_text_section = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis206, i32 0, i32 4, !dbg !6649
  %109 = bitcast i24* %in_text_section to i32*, !dbg !6649
  %bf.load207 = load i32, i32* %109, align 8, !dbg !6650
  %bf.clear208 = and i32 %bf.load207, -17, !dbg !6650
  %bf.set209 = or i32 %bf.clear208, 16, !dbg !6650
  store i32 %bf.set209, i32* %109, align 8, !dbg !6650
  br label %if.end210, !dbg !6649

if.end210:                                        ; preds = %if.then205, %land.lhs.true199, %if.end197
  %110 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !6651
  %u211 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1, !dbg !6651
  %fld212 = bitcast %union.u* %u211 to [1 x %union.rtunion_def]*, !dbg !6651
  %arrayidx213 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld212, i64 0, i64 1, !dbg !6651
  %rt_int = bitcast %union.rtunion_def* %arrayidx213 to i32*, !dbg !6651
  %111 = load i32, i32* %rt_int, align 8, !dbg !6651
  %and214 = and i32 %111, 128, !dbg !6651
  %cmp215 = icmp ne i32 %and214, 0, !dbg !6651
  br i1 %cmp215, label %land.lhs.true217, label %if.else, !dbg !6653

land.lhs.true217:                                 ; preds = %if.end210
  %112 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !6654
  %u218 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1, !dbg !6654
  %block_sym = bitcast %union.u* %u218 to %struct.block_symbol*, !dbg !6654
  %block = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym, i32 0, i32 1, !dbg !6654
  %113 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !6654
  %tobool219 = icmp ne %struct.object_block* %113, null, !dbg !6654
  br i1 %tobool219, label %if.then220, label %if.else, !dbg !6655

if.then220:                                       ; preds = %land.lhs.true217
  %114 = load i32, i32* %dont_output_data.addr, align 4, !dbg !6656
  %tobool221 = icmp ne i32 %114, 0, !dbg !6656
  br i1 %tobool221, label %cond.true222, label %cond.false223, !dbg !6656

cond.true222:                                     ; preds = %if.then220
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2249, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6656
  br label %cond.end224, !dbg !6656

cond.false223:                                    ; preds = %if.then220
  br label %cond.end224, !dbg !6656

cond.end224:                                      ; preds = %cond.false223, %cond.true222
  %cond225 = phi i32 [ 0, %cond.true222 ], [ 0, %cond.false223 ], !dbg !6656
  %115 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !6658
  call void @place_block_symbol(%struct.rtx_def* %115), !dbg !6659
  br label %if.end255, !dbg !6660

if.else:                                          ; preds = %land.lhs.true217, %if.end210
  %116 = load %union.section*, %union.section** %sect, align 8, !dbg !6661
  %common226 = bitcast %union.section* %116 to %struct.section_common*, !dbg !6661
  %flags227 = getelementptr inbounds %struct.section_common, %struct.section_common* %common226, i32 0, i32 0, !dbg !6661
  %117 = load i32, i32* %flags227, align 8, !dbg !6661
  %and228 = and i32 %117, 6291456, !dbg !6661
  %cmp229 = icmp eq i32 %and228, 4194304, !dbg !6663
  br i1 %cmp229, label %if.then231, label %if.else232, !dbg !6664

if.then231:                                       ; preds = %if.else
  %118 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6665
  %119 = load i8*, i8** %name, align 8, !dbg !6666
  %120 = load %union.section*, %union.section** %sect, align 8, !dbg !6667
  call void @assemble_noswitch_variable(%union.tree_node* %118, i8* %119, %union.section* %120), !dbg !6668
  br label %if.end254, !dbg !6668

if.else232:                                       ; preds = %if.else
  %121 = load %union.section*, %union.section** %sect, align 8, !dbg !6669
  call void @switch_to_section(%union.section* %121), !dbg !6671
  %122 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6672
  %decl_common233 = bitcast %union.tree_node* %122 to %struct.tree_decl_common*, !dbg !6672
  %align234 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common233, i32 0, i32 3, !dbg !6672
  %123 = load i32, i32* %align234, align 8, !dbg !6672
  %cmp235 = icmp ugt i32 %123, 8, !dbg !6674
  br i1 %cmp235, label %if.then237, label %if.end252, !dbg !6675

if.then237:                                       ; preds = %if.else232
  %124 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6676
  %decl_common238 = bitcast %union.tree_node* %124 to %struct.tree_decl_common*, !dbg !6676
  %align239 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common238, i32 0, i32 3, !dbg !6676
  %125 = load i32, i32* %align239, align 8, !dbg !6676
  %div = udiv i32 %125, 8, !dbg !6676
  %conv240 = zext i32 %div to i64, !dbg !6676
  %call241 = call i32 @floor_log2(i64 %conv240), !dbg !6676
  %cmp242 = icmp ne i32 %call241, 0, !dbg !6676
  br i1 %cmp242, label %if.then244, label %if.end251, !dbg !6678

if.then244:                                       ; preds = %if.then237
  %126 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !6676
  %127 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6676
  %decl_common245 = bitcast %union.tree_node* %127 to %struct.tree_decl_common*, !dbg !6676
  %align246 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common245, i32 0, i32 3, !dbg !6676
  %128 = load i32, i32* %align246, align 8, !dbg !6676
  %div247 = udiv i32 %128, 8, !dbg !6676
  %conv248 = zext i32 %div247 to i64, !dbg !6676
  %call249 = call i32 @floor_log2(i64 %conv248), !dbg !6676
  %shl = shl i32 1, %call249, !dbg !6676
  %call250 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %126, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i64 0, i64 0), i32 %shl), !dbg !6676
  br label %if.end251, !dbg !6676

if.end251:                                        ; preds = %if.then244, %if.then237
  br label %if.end252, !dbg !6676

if.end252:                                        ; preds = %if.end251, %if.else232
  %129 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6679
  %130 = load i8*, i8** %name, align 8, !dbg !6680
  %131 = load i32, i32* %dont_output_data.addr, align 4, !dbg !6681
  %conv253 = trunc i32 %131 to i8, !dbg !6681
  call void @assemble_variable_contents(%union.tree_node* %129, i8* %130, i8 zeroext %conv253), !dbg !6682
  br label %if.end254

if.end254:                                        ; preds = %if.end252, %if.then231
  br label %if.end255

if.end255:                                        ; preds = %if.then35, %if.then42, %if.then65, %if.then81, %if.then93, %if.then111, %if.then118, %if.end254, %cond.end224
  ret void, !dbg !6683
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_emutls_init_templ_addr(%union.tree_node* %decl) #0 !dbg !6684 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %to = alloca %union.tree_node*, align 8
  %prefix = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6685, metadata !DIExpression()), !dbg !6686
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !6687, metadata !DIExpression()), !dbg !6688
  call void @llvm.dbg.declare(metadata %union.tree_node** %to, metadata !6689, metadata !DIExpression()), !dbg !6690
  %0 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 1), align 8, !dbg !6691
  %tobool = icmp ne i8* %0, null, !dbg !6693
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6694

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6695
  %decl_common = bitcast %union.tree_node* %1 to %struct.tree_decl_common*, !dbg !6695
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !6695
  %2 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !6695
  %tobool1 = icmp ne %union.tree_node* %2, null, !dbg !6695
  br i1 %tobool1, label %if.end, label %land.lhs.true2, !dbg !6696

land.lhs.true2:                                   ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6697
  %decl_with_vis = bitcast %union.tree_node* %3 to %struct.tree_decl_with_vis*, !dbg !6697
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 2, !dbg !6697
  %4 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !6697
  %tobool3 = icmp ne %union.tree_node* %4, null, !dbg !6697
  br i1 %tobool3, label %if.end, label %if.then, !dbg !6698

if.then:                                          ; preds = %land.lhs.true2
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !6699
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !6700
  br label %return, !dbg !6700

if.end:                                           ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6701
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %6), !dbg !6701
  store %union.tree_node* %call, %union.tree_node** %name, align 8, !dbg !6702
  %7 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 5), align 8, !dbg !6703
  %tobool4 = icmp ne i8* %7, null, !dbg !6705
  br i1 %tobool4, label %lor.lhs.false, label %if.then6, !dbg !6706

lor.lhs.false:                                    ; preds = %if.end
  %8 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 5), align 8, !dbg !6707
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 0, !dbg !6708
  %9 = load i8, i8* %arrayidx, align 1, !dbg !6708
  %conv = sext i8 %9 to i32, !dbg !6708
  %tobool5 = icmp ne i32 %conv, 0, !dbg !6708
  br i1 %tobool5, label %if.then6, label %if.end9, !dbg !6709

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  call void @llvm.dbg.declare(metadata i8** %prefix, metadata !6710, metadata !DIExpression()), !dbg !6712
  %10 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 5), align 8, !dbg !6713
  %tobool7 = icmp ne i8* %10, null, !dbg !6714
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !6714

cond.true:                                        ; preds = %if.then6
  %11 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 5), align 8, !dbg !6715
  br label %cond.end, !dbg !6714

cond.false:                                       ; preds = %if.then6
  br label %cond.end, !dbg !6714

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %11, %cond.true ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.168, i64 0, i64 0), %cond.false ], !dbg !6714
  store i8* %cond, i8** %prefix, align 8, !dbg !6712
  %12 = load i8*, i8** %prefix, align 8, !dbg !6716
  %13 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6717
  %call8 = call %union.tree_node* @prefix_name(i8* %12, %union.tree_node* %13), !dbg !6718
  store %union.tree_node* %call8, %union.tree_node** %name, align 8, !dbg !6719
  br label %if.end9, !dbg !6720

if.end9:                                          ; preds = %cond.end, %lor.lhs.false
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6721
  %decl_minimal = bitcast %union.tree_node* %14 to %struct.tree_decl_minimal*, !dbg !6721
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !6721
  %15 = load i32, i32* %locus, align 8, !dbg !6721
  %16 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6721
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6721
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !6721
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6721
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6721
  %call10 = call %union.tree_node* @build_decl_stat(i32 %15, i32 32, %union.tree_node* %16, %union.tree_node* %18), !dbg !6721
  store %union.tree_node* %call10, %union.tree_node** %to, align 8, !dbg !6722
  %19 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6723
  %decl_minimal11 = bitcast %union.tree_node* %19 to %struct.tree_decl_minimal*, !dbg !6723
  %name12 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal11, i32 0, i32 3, !dbg !6723
  %20 = load %union.tree_node*, %union.tree_node** %name12, align 8, !dbg !6723
  %21 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6723
  %decl_with_vis13 = bitcast %union.tree_node* %21 to %struct.tree_decl_with_vis*, !dbg !6723
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis13, i32 0, i32 1, !dbg !6723
  store %union.tree_node* %20, %union.tree_node** %assembler_name, align 8, !dbg !6723
  %22 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6724
  %decl_with_vis14 = bitcast %union.tree_node* %22 to %struct.tree_decl_with_vis*, !dbg !6724
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis14, i32 0, i32 4, !dbg !6724
  %23 = bitcast i24* %tls_model to i32*, !dbg !6724
  %bf.load = load i32, i32* %23, align 8, !dbg !6725
  %bf.clear = and i32 %bf.load, -57345, !dbg !6725
  %bf.set = or i32 %bf.clear, 8192, !dbg !6725
  store i32 %bf.set, i32* %23, align 8, !dbg !6725
  %24 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6726
  %decl_common15 = bitcast %union.tree_node* %24 to %struct.tree_decl_common*, !dbg !6726
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common15, i32 0, i32 2, !dbg !6726
  %25 = bitcast i40* %artificial_flag to i64*, !dbg !6726
  %bf.load16 = load i64, i64* %25, align 8, !dbg !6727
  %bf.clear17 = and i64 %bf.load16, -4097, !dbg !6727
  %bf.set18 = or i64 %bf.clear17, 4096, !dbg !6727
  store i64 %bf.set18, i64* %25, align 8, !dbg !6727
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6728
  %base = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !6728
  %27 = bitcast %struct.tree_base* %base to i64*, !dbg !6728
  %bf.load19 = load i64, i64* %27, align 8, !dbg !6728
  %bf.lshr = lshr i64 %bf.load19, 24, !dbg !6728
  %bf.clear20 = and i64 %bf.lshr, 1, !dbg !6728
  %bf.cast = trunc i64 %bf.clear20 to i32, !dbg !6728
  %28 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6729
  %base21 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !6729
  %29 = bitcast %struct.tree_base* %base21 to i64*, !dbg !6729
  %30 = zext i32 %bf.cast to i64, !dbg !6730
  %bf.load22 = load i64, i64* %29, align 8, !dbg !6730
  %bf.value = and i64 %30, 1, !dbg !6730
  %bf.shl = shl i64 %bf.value, 24, !dbg !6730
  %bf.clear23 = and i64 %bf.load22, -16777217, !dbg !6730
  %bf.set24 = or i64 %bf.clear23, %bf.shl, !dbg !6730
  store i64 %bf.set24, i64* %29, align 8, !dbg !6730
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !6730
  %31 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6731
  %base25 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !6731
  %32 = bitcast %struct.tree_base* %base25 to i64*, !dbg !6731
  %bf.load26 = load i64, i64* %32, align 8, !dbg !6732
  %bf.clear27 = and i64 %bf.load26, -1048577, !dbg !6732
  %bf.set28 = or i64 %bf.clear27, 1048576, !dbg !6732
  store i64 %bf.set28, i64* %32, align 8, !dbg !6732
  %33 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6733
  %decl_common29 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !6733
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common29, i32 0, i32 2, !dbg !6733
  %34 = bitcast i40* %ignored_flag to i64*, !dbg !6733
  %bf.load30 = load i64, i64* %34, align 8, !dbg !6734
  %bf.clear31 = and i64 %bf.load30, -1025, !dbg !6734
  %bf.set32 = or i64 %bf.clear31, 1024, !dbg !6734
  store i64 %bf.set32, i64* %34, align 8, !dbg !6734
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6735
  %decl_minimal33 = bitcast %union.tree_node* %35 to %struct.tree_decl_minimal*, !dbg !6735
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal33, i32 0, i32 4, !dbg !6735
  %36 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !6735
  %37 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6736
  %decl_minimal34 = bitcast %union.tree_node* %37 to %struct.tree_decl_minimal*, !dbg !6736
  %context35 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal34, i32 0, i32 4, !dbg !6736
  store %union.tree_node* %36, %union.tree_node** %context35, align 8, !dbg !6737
  %38 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6738
  %decl_with_vis36 = bitcast %union.tree_node* %38 to %struct.tree_decl_with_vis*, !dbg !6738
  %section_name37 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis36, i32 0, i32 2, !dbg !6738
  %39 = load %union.tree_node*, %union.tree_node** %section_name37, align 8, !dbg !6738
  %40 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6739
  %decl_with_vis38 = bitcast %union.tree_node* %40 to %struct.tree_decl_with_vis*, !dbg !6739
  %section_name39 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis38, i32 0, i32 2, !dbg !6739
  store %union.tree_node* %39, %union.tree_node** %section_name39, align 8, !dbg !6740
  %41 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6741
  %decl_with_vis40 = bitcast %union.tree_node* %41 to %struct.tree_decl_with_vis*, !dbg !6741
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis40, i32 0, i32 4, !dbg !6741
  %42 = bitcast i24* %weak_flag to i32*, !dbg !6741
  %bf.load41 = load i32, i32* %42, align 8, !dbg !6741
  %bf.lshr42 = lshr i32 %bf.load41, 7, !dbg !6741
  %bf.clear43 = and i32 %bf.lshr42, 1, !dbg !6741
  %43 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6742
  %decl_with_vis44 = bitcast %union.tree_node* %43 to %struct.tree_decl_with_vis*, !dbg !6742
  %weak_flag45 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis44, i32 0, i32 4, !dbg !6742
  %44 = bitcast i24* %weak_flag45 to i32*, !dbg !6742
  %bf.load46 = load i32, i32* %44, align 8, !dbg !6743
  %bf.value47 = and i32 %bf.clear43, 1, !dbg !6743
  %bf.shl48 = shl i32 %bf.value47, 7, !dbg !6743
  %bf.clear49 = and i32 %bf.load46, -129, !dbg !6743
  %bf.set50 = or i32 %bf.clear49, %bf.shl48, !dbg !6743
  store i32 %bf.set50, i32* %44, align 8, !dbg !6743
  %45 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6744
  %decl_with_vis51 = bitcast %union.tree_node* %45 to %struct.tree_decl_with_vis*, !dbg !6744
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis51, i32 0, i32 3, !dbg !6744
  %46 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !6744
  %cmp = icmp ne %union.tree_node* %46, null, !dbg !6744
  br i1 %cmp, label %if.then53, label %if.else, !dbg !6746

if.then53:                                        ; preds = %if.end9
  %47 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6747
  %48 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6749
  %call54 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %48), !dbg !6749
  call void @make_decl_one_only(%union.tree_node* %47, %union.tree_node* %call54), !dbg !6750
  %49 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6751
  %base55 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !6751
  %50 = bitcast %struct.tree_base* %base55 to i64*, !dbg !6751
  %bf.load56 = load i64, i64* %50, align 8, !dbg !6751
  %bf.lshr57 = lshr i64 %bf.load56, 26, !dbg !6751
  %bf.clear58 = and i64 %bf.lshr57, 1, !dbg !6751
  %bf.cast59 = trunc i64 %bf.clear58 to i32, !dbg !6751
  %51 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6752
  %base60 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !6752
  %52 = bitcast %struct.tree_base* %base60 to i64*, !dbg !6752
  %53 = zext i32 %bf.cast59 to i64, !dbg !6753
  %bf.load61 = load i64, i64* %52, align 8, !dbg !6753
  %bf.value62 = and i64 %53, 1, !dbg !6753
  %bf.shl63 = shl i64 %bf.value62, 26, !dbg !6753
  %bf.clear64 = and i64 %bf.load61, -67108865, !dbg !6753
  %bf.set65 = or i64 %bf.clear64, %bf.shl63, !dbg !6753
  store i64 %bf.set65, i64* %52, align 8, !dbg !6753
  %bf.result.cast66 = trunc i64 %bf.value62 to i32, !dbg !6753
  %54 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6754
  %base67 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !6754
  %55 = bitcast %struct.tree_base* %base67 to i64*, !dbg !6754
  %bf.load68 = load i64, i64* %55, align 8, !dbg !6754
  %bf.lshr69 = lshr i64 %bf.load68, 27, !dbg !6754
  %bf.clear70 = and i64 %bf.lshr69, 1, !dbg !6754
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !6754
  %56 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6755
  %base72 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !6755
  %57 = bitcast %struct.tree_base* %base72 to i64*, !dbg !6755
  %58 = zext i32 %bf.cast71 to i64, !dbg !6756
  %bf.load73 = load i64, i64* %57, align 8, !dbg !6756
  %bf.value74 = and i64 %58, 1, !dbg !6756
  %bf.shl75 = shl i64 %bf.value74, 27, !dbg !6756
  %bf.clear76 = and i64 %bf.load73, -134217729, !dbg !6756
  %bf.set77 = or i64 %bf.clear76, %bf.shl75, !dbg !6756
  store i64 %bf.set77, i64* %57, align 8, !dbg !6756
  %bf.result.cast78 = trunc i64 %bf.value74 to i32, !dbg !6756
  %59 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6757
  %decl_with_vis79 = bitcast %union.tree_node* %59 to %struct.tree_decl_with_vis*, !dbg !6757
  %visibility = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis79, i32 0, i32 4, !dbg !6757
  %60 = bitcast i24* %visibility to i32*, !dbg !6757
  %bf.load80 = load i32, i32* %60, align 8, !dbg !6757
  %bf.lshr81 = lshr i32 %bf.load80, 10, !dbg !6757
  %bf.clear82 = and i32 %bf.lshr81, 3, !dbg !6757
  %61 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6758
  %decl_with_vis83 = bitcast %union.tree_node* %61 to %struct.tree_decl_with_vis*, !dbg !6758
  %visibility84 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis83, i32 0, i32 4, !dbg !6758
  %62 = bitcast i24* %visibility84 to i32*, !dbg !6758
  %bf.load85 = load i32, i32* %62, align 8, !dbg !6759
  %bf.value86 = and i32 %bf.clear82, 3, !dbg !6759
  %bf.shl87 = shl i32 %bf.value86, 10, !dbg !6759
  %bf.clear88 = and i32 %bf.load85, -3073, !dbg !6759
  %bf.set89 = or i32 %bf.clear88, %bf.shl87, !dbg !6759
  store i32 %bf.set89, i32* %62, align 8, !dbg !6759
  br label %if.end94, !dbg !6760

if.else:                                          ; preds = %if.end9
  %63 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6761
  %base90 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !6761
  %64 = bitcast %struct.tree_base* %base90 to i64*, !dbg !6761
  %bf.load91 = load i64, i64* %64, align 8, !dbg !6762
  %bf.clear92 = and i64 %bf.load91, -67108865, !dbg !6762
  %bf.set93 = or i64 %bf.clear92, 67108864, !dbg !6762
  store i64 %bf.set93, i64* %64, align 8, !dbg !6762
  br label %if.end94

if.end94:                                         ; preds = %if.else, %if.then53
  %65 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6763
  %decl_common95 = bitcast %union.tree_node* %65 to %struct.tree_decl_common*, !dbg !6763
  %initial96 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common95, i32 0, i32 5, !dbg !6763
  %66 = load %union.tree_node*, %union.tree_node** %initial96, align 8, !dbg !6763
  %67 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6764
  %decl_common97 = bitcast %union.tree_node* %67 to %struct.tree_decl_common*, !dbg !6764
  %initial98 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common97, i32 0, i32 5, !dbg !6764
  store %union.tree_node* %66, %union.tree_node** %initial98, align 8, !dbg !6765
  %68 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6766
  %decl_common99 = bitcast %union.tree_node* %68 to %struct.tree_decl_common*, !dbg !6766
  %initial100 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common99, i32 0, i32 5, !dbg !6766
  store %union.tree_node* null, %union.tree_node** %initial100, align 8, !dbg !6767
  %69 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6768
  call void @varpool_finalize_decl(%union.tree_node* %69), !dbg !6769
  %70 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6770
  %call101 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %70), !dbg !6770
  store %union.tree_node* %call101, %union.tree_node** %retval, align 8, !dbg !6771
  br label %return, !dbg !6771

return:                                           ; preds = %if.end94, %if.then
  %71 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6772
  ret %union.tree_node* %71, !dbg !6772
}

declare dso_local void @record_references_in_initializer(%union.tree_node*, i8 zeroext) #2

declare dso_local void @layout_decl(%union.tree_node*, i32) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local void @set_mem_align(%struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.section* @get_variable_section(%union.tree_node* %decl, i8 zeroext %prefer_noswitch_p) #0 !dbg !6773 {
entry:
  %retval = alloca %union.section*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %prefer_noswitch_p.addr = alloca i8, align 1
  %as = alloca i8, align 1
  %reloc = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6776, metadata !DIExpression()), !dbg !6777
  store i8 %prefer_noswitch_p, i8* %prefer_noswitch_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %prefer_noswitch_p.addr, metadata !6778, metadata !DIExpression()), !dbg !6779
  call void @llvm.dbg.declare(metadata i8* %as, metadata !6780, metadata !DIExpression()), !dbg !6781
  store i8 0, i8* %as, align 1, !dbg !6781
  call void @llvm.dbg.declare(metadata i32* %reloc, metadata !6782, metadata !DIExpression()), !dbg !6783
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6784
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6784
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6784
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6784
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6786
  %cmp = icmp ne %union.tree_node* %1, %2, !dbg !6787
  br i1 %cmp, label %if.then, label %if.end, !dbg !6788

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6789
  %common1 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !6789
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !6789
  %4 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !6789
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6789
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !6789
  %bf.load = load i64, i64* %5, align 8, !dbg !6789
  %bf.lshr = lshr i64 %bf.load, 56, !dbg !6789
  %bf.cast = trunc i64 %bf.lshr to i32, !dbg !6789
  %conv = trunc i32 %bf.cast to i8, !dbg !6789
  store i8 %conv, i8* %as, align 1, !dbg !6790
  br label %if.end, !dbg !6791

if.end:                                           ; preds = %if.then, %entry
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6792
  %decl_with_vis = bitcast %union.tree_node* %6 to %struct.tree_decl_with_vis*, !dbg !6792
  %common_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !6792
  %7 = bitcast i24* %common_flag to i32*, !dbg !6792
  %bf.load3 = load i32, i32* %7, align 8, !dbg !6792
  %bf.lshr4 = lshr i32 %bf.load3, 3, !dbg !6792
  %bf.clear = and i32 %bf.lshr4, 1, !dbg !6792
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !6792
  br i1 %tobool, label %if.then5, label %if.end43, !dbg !6794

if.then5:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6795
  %decl_with_vis6 = bitcast %union.tree_node* %8 to %struct.tree_decl_with_vis*, !dbg !6795
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis6, i32 0, i32 2, !dbg !6795
  %9 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !6795
  %cmp7 = icmp eq %union.tree_node* %9, null, !dbg !6795
  br i1 %cmp7, label %land.lhs.true, label %cond.true, !dbg !6795

land.lhs.true:                                    ; preds = %if.then5
  %10 = load i8, i8* %as, align 1, !dbg !6795
  %conv9 = zext i8 %10 to i32, !dbg !6795
  %cmp10 = icmp eq i32 %conv9, 0, !dbg !6795
  br i1 %cmp10, label %cond.false, label %cond.true, !dbg !6795

cond.true:                                        ; preds = %land.lhs.true, %if.then5
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 1183, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6795
  br label %cond.end, !dbg !6795

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6795

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6795
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6797
  %decl_with_vis12 = bitcast %union.tree_node* %11 to %struct.tree_decl_with_vis*, !dbg !6797
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis12, i32 0, i32 4, !dbg !6797
  %12 = bitcast i24* %tls_model to i32*, !dbg !6797
  %bf.load13 = load i32, i32* %12, align 8, !dbg !6797
  %bf.lshr14 = lshr i32 %bf.load13, 13, !dbg !6797
  %bf.clear15 = and i32 %bf.lshr14, 7, !dbg !6797
  %cmp16 = icmp sge i32 %bf.clear15, 2, !dbg !6797
  br i1 %cmp16, label %if.then18, label %if.else, !dbg !6799

if.then18:                                        ; preds = %cond.end
  %13 = load %union.section*, %union.section** @tls_comm_section, align 8, !dbg !6800
  store %union.section* %13, %union.section** %retval, align 8, !dbg !6801
  br label %return, !dbg !6801

if.else:                                          ; preds = %cond.end
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6802
  %decl_with_vis19 = bitcast %union.tree_node* %14 to %struct.tree_decl_with_vis*, !dbg !6802
  %tls_model20 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis19, i32 0, i32 4, !dbg !6802
  %15 = bitcast i24* %tls_model20 to i32*, !dbg !6802
  %bf.load21 = load i32, i32* %15, align 8, !dbg !6802
  %bf.lshr22 = lshr i32 %bf.load21, 13, !dbg !6802
  %bf.clear23 = and i32 %bf.lshr22, 7, !dbg !6802
  %cmp24 = icmp eq i32 %bf.clear23, 1, !dbg !6804
  br i1 %cmp24, label %land.lhs.true26, label %if.else29, !dbg !6805

land.lhs.true26:                                  ; preds = %if.else
  %16 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 1), align 8, !dbg !6806
  %tobool27 = icmp ne i8* %16, null, !dbg !6807
  br i1 %tobool27, label %if.else29, label %if.then28, !dbg !6808

if.then28:                                        ; preds = %land.lhs.true26
  br label %if.end41, !dbg !6808

if.else29:                                        ; preds = %land.lhs.true26, %if.else
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6809
  %base30 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !6809
  %18 = bitcast %struct.tree_base* %base30 to i64*, !dbg !6809
  %bf.load31 = load i64, i64* %18, align 8, !dbg !6809
  %bf.lshr32 = lshr i64 %bf.load31, 27, !dbg !6809
  %bf.clear33 = and i64 %bf.lshr32, 1, !dbg !6809
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !6809
  %tobool35 = icmp ne i32 %bf.cast34, 0, !dbg !6809
  br i1 %tobool35, label %land.lhs.true36, label %if.end40, !dbg !6811

land.lhs.true36:                                  ; preds = %if.else29
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6812
  %call = call zeroext i8 @bss_initializer_p(%union.tree_node* %19), !dbg !6813
  %conv37 = zext i8 %call to i32, !dbg !6813
  %tobool38 = icmp ne i32 %conv37, 0, !dbg !6813
  br i1 %tobool38, label %if.then39, label %if.end40, !dbg !6814

if.then39:                                        ; preds = %land.lhs.true36
  %20 = load %union.section*, %union.section** @comm_section, align 8, !dbg !6815
  store %union.section* %20, %union.section** %retval, align 8, !dbg !6816
  br label %return, !dbg !6816

if.end40:                                         ; preds = %land.lhs.true36, %if.else29
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then28
  br label %if.end42

if.end42:                                         ; preds = %if.end41
  br label %if.end43, !dbg !6817

if.end43:                                         ; preds = %if.end42, %if.end
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6818
  %decl_common = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !6818
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !6818
  %22 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !6818
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6820
  %cmp44 = icmp eq %union.tree_node* %22, %23, !dbg !6821
  br i1 %cmp44, label %if.then46, label %if.else52, !dbg !6822

if.then46:                                        ; preds = %if.end43
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6823
  %common47 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !6823
  %type48 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common47, i32 0, i32 2, !dbg !6823
  %25 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !6823
  %call49 = call i32 @contains_pointers_p(%union.tree_node* %25), !dbg !6824
  %tobool50 = icmp ne i32 %call49, 0, !dbg !6824
  %26 = zext i1 %tobool50 to i64, !dbg !6824
  %cond51 = select i1 %tobool50, i32 3, i32 0, !dbg !6824
  store i32 %cond51, i32* %reloc, align 4, !dbg !6825
  br label %if.end62, !dbg !6826

if.else52:                                        ; preds = %if.end43
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6827
  %decl_common53 = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !6827
  %initial54 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common53, i32 0, i32 5, !dbg !6827
  %28 = load %union.tree_node*, %union.tree_node** %initial54, align 8, !dbg !6827
  %tobool55 = icmp ne %union.tree_node* %28, null, !dbg !6827
  br i1 %tobool55, label %if.then56, label %if.else60, !dbg !6829

if.then56:                                        ; preds = %if.else52
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6830
  %decl_common57 = bitcast %union.tree_node* %29 to %struct.tree_decl_common*, !dbg !6830
  %initial58 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common57, i32 0, i32 5, !dbg !6830
  %30 = load %union.tree_node*, %union.tree_node** %initial58, align 8, !dbg !6830
  %call59 = call i32 @compute_reloc_for_constant(%union.tree_node* %30), !dbg !6831
  store i32 %call59, i32* %reloc, align 4, !dbg !6832
  br label %if.end61, !dbg !6833

if.else60:                                        ; preds = %if.else52
  store i32 0, i32* %reloc, align 4, !dbg !6834
  br label %if.end61

if.end61:                                         ; preds = %if.else60, %if.then56
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then46
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6835
  %32 = load i32, i32* %reloc, align 4, !dbg !6836
  %33 = load i32, i32* @flag_data_sections, align 4, !dbg !6837
  call void @resolve_unique_section(%union.tree_node* %31, i32 %32, i32 %33), !dbg !6838
  %34 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6839
  %base63 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !6839
  %35 = bitcast %struct.tree_base* %base63 to i64*, !dbg !6839
  %bf.load64 = load i64, i64* %35, align 8, !dbg !6839
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !6839
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !6839
  %cmp67 = icmp eq i32 %bf.cast66, 29, !dbg !6839
  br i1 %cmp67, label %land.lhs.true75, label %lor.lhs.false, !dbg !6839

lor.lhs.false:                                    ; preds = %if.end62
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6839
  %base69 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !6839
  %37 = bitcast %struct.tree_base* %base69 to i64*, !dbg !6839
  %bf.load70 = load i64, i64* %37, align 8, !dbg !6839
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !6839
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !6839
  %cmp73 = icmp eq i32 %bf.cast72, 32, !dbg !6839
  br i1 %cmp73, label %land.lhs.true75, label %if.end82, !dbg !6839

land.lhs.true75:                                  ; preds = %lor.lhs.false, %if.end62
  %38 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6839
  %decl_with_vis76 = bitcast %union.tree_node* %38 to %struct.tree_decl_with_vis*, !dbg !6839
  %section_name77 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis76, i32 0, i32 2, !dbg !6839
  %39 = load %union.tree_node*, %union.tree_node** %section_name77, align 8, !dbg !6839
  %cmp78 = icmp ne %union.tree_node* %39, null, !dbg !6839
  br i1 %cmp78, label %if.then80, label %if.end82, !dbg !6841

if.then80:                                        ; preds = %land.lhs.true75
  %40 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6842
  %41 = load i32, i32* %reloc, align 4, !dbg !6843
  %call81 = call %union.section* @get_named_section(%union.tree_node* %40, i8* null, i32 %41), !dbg !6844
  store %union.section* %call81, %union.section** %retval, align 8, !dbg !6845
  br label %return, !dbg !6845

if.end82:                                         ; preds = %land.lhs.true75, %lor.lhs.false
  %42 = load i8, i8* %as, align 1, !dbg !6846
  %conv83 = zext i8 %42 to i32, !dbg !6846
  %cmp84 = icmp eq i32 %conv83, 0, !dbg !6846
  br i1 %cmp84, label %land.lhs.true86, label %if.end116, !dbg !6848

land.lhs.true86:                                  ; preds = %if.end82
  %43 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6849
  %decl_with_vis87 = bitcast %union.tree_node* %43 to %struct.tree_decl_with_vis*, !dbg !6849
  %tls_model88 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis87, i32 0, i32 4, !dbg !6849
  %44 = bitcast i24* %tls_model88 to i32*, !dbg !6849
  %bf.load89 = load i32, i32* %44, align 8, !dbg !6849
  %bf.lshr90 = lshr i32 %bf.load89, 13, !dbg !6849
  %bf.clear91 = and i32 %bf.lshr90, 7, !dbg !6849
  %cmp92 = icmp sge i32 %bf.clear91, 2, !dbg !6849
  br i1 %cmp92, label %if.end116, label %land.lhs.true94, !dbg !6850

land.lhs.true94:                                  ; preds = %land.lhs.true86
  %45 = load i8, i8* %prefer_noswitch_p.addr, align 1, !dbg !6851
  %conv95 = zext i8 %45 to i32, !dbg !6851
  %tobool96 = icmp ne i32 %conv95, 0, !dbg !6851
  br i1 %tobool96, label %land.lhs.true97, label %land.lhs.true100, !dbg !6852

land.lhs.true97:                                  ; preds = %land.lhs.true94
  %46 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 111), align 2, !dbg !6853
  %conv98 = zext i8 %46 to i32, !dbg !6854
  %tobool99 = icmp ne i32 %conv98, 0, !dbg !6854
  br i1 %tobool99, label %if.end116, label %land.lhs.true100, !dbg !6855

land.lhs.true100:                                 ; preds = %land.lhs.true97, %land.lhs.true94
  %47 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6856
  %call101 = call zeroext i8 @bss_initializer_p(%union.tree_node* %47), !dbg !6857
  %conv102 = zext i8 %call101 to i32, !dbg !6857
  %tobool103 = icmp ne i32 %conv102, 0, !dbg !6857
  br i1 %tobool103, label %if.then104, label %if.end116, !dbg !6858

if.then104:                                       ; preds = %land.lhs.true100
  %48 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6859
  %base105 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !6859
  %49 = bitcast %struct.tree_base* %base105 to i64*, !dbg !6859
  %bf.load106 = load i64, i64* %49, align 8, !dbg !6859
  %bf.lshr107 = lshr i64 %bf.load106, 27, !dbg !6859
  %bf.clear108 = and i64 %bf.lshr107, 1, !dbg !6859
  %bf.cast109 = trunc i64 %bf.clear108 to i32, !dbg !6859
  %tobool110 = icmp ne i32 %bf.cast109, 0, !dbg !6859
  br i1 %tobool110, label %if.end112, label %if.then111, !dbg !6862

if.then111:                                       ; preds = %if.then104
  %50 = load %union.section*, %union.section** @lcomm_section, align 8, !dbg !6863
  store %union.section* %50, %union.section** %retval, align 8, !dbg !6864
  br label %return, !dbg !6864

if.end112:                                        ; preds = %if.then104
  %51 = load %union.section*, %union.section** @bss_noswitch_section, align 8, !dbg !6865
  %tobool113 = icmp ne %union.section* %51, null, !dbg !6865
  br i1 %tobool113, label %if.then114, label %if.end115, !dbg !6867

if.then114:                                       ; preds = %if.end112
  %52 = load %union.section*, %union.section** @bss_noswitch_section, align 8, !dbg !6868
  store %union.section* %52, %union.section** %retval, align 8, !dbg !6869
  br label %return, !dbg !6869

if.end115:                                        ; preds = %if.end112
  br label %if.end116, !dbg !6870

if.end116:                                        ; preds = %if.end115, %land.lhs.true100, %land.lhs.true97, %land.lhs.true86, %if.end82
  %53 = load %union.section* (%union.tree_node*, i32, i64)*, %union.section* (%union.tree_node*, i32, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 21), align 8, !dbg !6871
  %54 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6872
  %55 = load i32, i32* %reloc, align 4, !dbg !6873
  %56 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6874
  %decl_common117 = bitcast %union.tree_node* %56 to %struct.tree_decl_common*, !dbg !6874
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common117, i32 0, i32 3, !dbg !6874
  %57 = load i32, i32* %align, align 8, !dbg !6874
  %conv118 = zext i32 %57 to i64, !dbg !6874
  %call119 = call %union.section* %53(%union.tree_node* %54, i32 %55, i64 %conv118), !dbg !6875
  store %union.section* %call119, %union.section** %retval, align 8, !dbg !6876
  br label %return, !dbg !6876

return:                                           ; preds = %if.end116, %if.then114, %if.then111, %if.then80, %if.then39, %if.then18
  %58 = load %union.section*, %union.section** %retval, align 8, !dbg !6877
  ret %union.section* %58, !dbg !6877
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_addressed_constants(%union.tree_node* %exp) #0 !dbg !6878 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %tem = alloca %union.tree_node*, align 8
  %idx = alloca i64, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6879, metadata !DIExpression()), !dbg !6880
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !6881, metadata !DIExpression()), !dbg !6882
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6883
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6883
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6883
  %bf.load = load i64, i64* %1, align 8, !dbg !6883
  %bf.clear = and i64 %bf.load, 65535, !dbg !6883
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6883
  switch i32 %bf.cast, label %sw.default [
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 63, label %sw.bb26
    i32 66, label %sw.bb26
    i32 64, label %sw.bb26
    i32 116, label %sw.bb30
    i32 113, label %sw.bb30
    i32 118, label %sw.bb30
    i32 51, label %sw.bb34
  ], !dbg !6884

sw.bb:                                            ; preds = %entry, %entry
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6885
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !6885
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !6885
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6885
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6885
  store %union.tree_node* %3, %union.tree_node** %tem, align 8, !dbg !6888
  br label %for.cond, !dbg !6889

for.cond:                                         ; preds = %for.inc, %sw.bb
  %4 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6890
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %4), !dbg !6892
  %tobool = icmp ne i8 %call, 0, !dbg !6893
  br i1 %tobool, label %for.body, label %for.end, !dbg !6893

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !6893

for.inc:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6894
  %exp2 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !6894
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !6894
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i64 0, i64 0, !dbg !6894
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8, !dbg !6894
  store %union.tree_node* %6, %union.tree_node** %tem, align 8, !dbg !6895
  br label %for.cond, !dbg !6896, !llvm.loop !6897

for.end:                                          ; preds = %for.cond
  %7 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6899
  %base5 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6899
  %8 = bitcast %struct.tree_base* %base5 to i64*, !dbg !6899
  %bf.load6 = load i64, i64* %8, align 8, !dbg !6899
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !6899
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !6899
  %cmp = icmp eq i32 %bf.cast8, 33, !dbg !6901
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6902

land.lhs.true:                                    ; preds = %for.end
  %9 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6903
  %decl_common = bitcast %union.tree_node* %9 to %struct.tree_decl_common*, !dbg !6903
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !6903
  %10 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !6903
  %tobool9 = icmp ne %union.tree_node* %10, null, !dbg !6903
  br i1 %tobool9, label %if.then, label %if.end, !dbg !6904

if.then:                                          ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6905
  %decl_common10 = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !6905
  %initial11 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common10, i32 0, i32 5, !dbg !6905
  %12 = load %union.tree_node*, %union.tree_node** %initial11, align 8, !dbg !6905
  store %union.tree_node* %12, %union.tree_node** %tem, align 8, !dbg !6906
  br label %if.end, !dbg !6907

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.end
  %13 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6908
  %base12 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6908
  %14 = bitcast %struct.tree_base* %base12 to i64*, !dbg !6908
  %bf.load13 = load i64, i64* %14, align 8, !dbg !6908
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !6908
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !6908
  %idxprom = sext i32 %bf.cast15 to i64, !dbg !6908
  %arrayidx16 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6908
  %15 = load i32, i32* %arrayidx16, align 4, !dbg !6908
  %cmp17 = icmp eq i32 %15, 1, !dbg !6908
  br i1 %cmp17, label %if.then23, label %lor.lhs.false, !dbg !6910

lor.lhs.false:                                    ; preds = %if.end
  %16 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6911
  %base18 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !6911
  %17 = bitcast %struct.tree_base* %base18 to i64*, !dbg !6911
  %bf.load19 = load i64, i64* %17, align 8, !dbg !6911
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !6911
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !6911
  %cmp22 = icmp eq i32 %bf.cast21, 51, !dbg !6912
  br i1 %cmp22, label %if.then23, label %if.end25, !dbg !6913

if.then23:                                        ; preds = %lor.lhs.false, %if.end
  %18 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6914
  %call24 = call %struct.rtx_def* @output_constant_def(%union.tree_node* %18, i32 0), !dbg !6915
  br label %if.end25, !dbg !6915

if.end25:                                         ; preds = %if.then23, %lor.lhs.false
  br label %sw.epilog, !dbg !6916

sw.bb26:                                          ; preds = %entry, %entry, %entry
  %19 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6917
  %exp27 = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !6917
  %operands28 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp27, i32 0, i32 3, !dbg !6917
  %arrayidx29 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands28, i64 0, i64 1, !dbg !6917
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx29, align 8, !dbg !6917
  call void @output_addressed_constants(%union.tree_node* %20), !dbg !6918
  br label %sw.bb30, !dbg !6918

sw.bb30:                                          ; preds = %entry, %entry, %entry, %sw.bb26
  %21 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6919
  %exp31 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !6919
  %operands32 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp31, i32 0, i32 3, !dbg !6919
  %arrayidx33 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands32, i64 0, i64 0, !dbg !6919
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx33, align 8, !dbg !6919
  call void @output_addressed_constants(%union.tree_node* %22), !dbg !6920
  br label %sw.epilog, !dbg !6921

sw.bb34:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %idx, metadata !6922, metadata !DIExpression()), !dbg !6924
  store i64 0, i64* %idx, align 8, !dbg !6925
  br label %for.cond35, !dbg !6925

for.cond35:                                       ; preds = %for.inc65, %sw.bb34
  %23 = load i64, i64* %idx, align 8, !dbg !6927
  %24 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6927
  %constructor = bitcast %union.tree_node* %24 to %struct.tree_constructor*, !dbg !6927
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !6927
  %25 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !6927
  %tobool36 = icmp ne %struct.VEC_constructor_elt_gc* %25, null, !dbg !6927
  br i1 %tobool36, label %cond.true, label %cond.false, !dbg !6927

cond.true:                                        ; preds = %for.cond35
  %26 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6927
  %constructor37 = bitcast %union.tree_node* %26 to %struct.tree_constructor*, !dbg !6927
  %elts38 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor37, i32 0, i32 1, !dbg !6927
  %27 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts38, align 8, !dbg !6927
  %base39 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %27, i32 0, i32 0, !dbg !6927
  br label %cond.end, !dbg !6927

cond.false:                                       ; preds = %for.cond35
  br label %cond.end, !dbg !6927

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base39, %cond.true ], [ null, %cond.false ], !dbg !6927
  %call40 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !6927
  %conv = zext i32 %call40 to i64, !dbg !6927
  %cmp41 = icmp uge i64 %23, %conv, !dbg !6927
  br i1 %cmp41, label %cond.true43, label %cond.false44, !dbg !6927

cond.true43:                                      ; preds = %cond.end
  br label %cond.end57, !dbg !6927

cond.false44:                                     ; preds = %cond.end
  %28 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6927
  %constructor45 = bitcast %union.tree_node* %28 to %struct.tree_constructor*, !dbg !6927
  %elts46 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor45, i32 0, i32 1, !dbg !6927
  %29 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts46, align 8, !dbg !6927
  %tobool47 = icmp ne %struct.VEC_constructor_elt_gc* %29, null, !dbg !6927
  br i1 %tobool47, label %cond.true48, label %cond.false52, !dbg !6927

cond.true48:                                      ; preds = %cond.false44
  %30 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6927
  %constructor49 = bitcast %union.tree_node* %30 to %struct.tree_constructor*, !dbg !6927
  %elts50 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor49, i32 0, i32 1, !dbg !6927
  %31 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts50, align 8, !dbg !6927
  %base51 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %31, i32 0, i32 0, !dbg !6927
  br label %cond.end53, !dbg !6927

cond.false52:                                     ; preds = %cond.false44
  br label %cond.end53, !dbg !6927

cond.end53:                                       ; preds = %cond.false52, %cond.true48
  %cond54 = phi %struct.VEC_constructor_elt_base* [ %base51, %cond.true48 ], [ null, %cond.false52 ], !dbg !6927
  %32 = load i64, i64* %idx, align 8, !dbg !6927
  %conv55 = trunc i64 %32 to i32, !dbg !6927
  %call56 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond54, i32 %conv55), !dbg !6927
  %value = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call56, i32 0, i32 1, !dbg !6927
  %33 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !6927
  store %union.tree_node* %33, %union.tree_node** %tem, align 8, !dbg !6927
  br label %cond.end57, !dbg !6927

cond.end57:                                       ; preds = %cond.end53, %cond.true43
  %cond58 = phi i32 [ 0, %cond.true43 ], [ 1, %cond.end53 ], !dbg !6927
  %tobool59 = icmp ne i32 %cond58, 0, !dbg !6925
  br i1 %tobool59, label %for.body60, label %for.end66, !dbg !6925

for.body60:                                       ; preds = %cond.end57
  %34 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6929
  %cmp61 = icmp ne %union.tree_node* %34, null, !dbg !6931
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !6932

if.then63:                                        ; preds = %for.body60
  %35 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !6933
  call void @output_addressed_constants(%union.tree_node* %35), !dbg !6934
  br label %if.end64, !dbg !6934

if.end64:                                         ; preds = %if.then63, %for.body60
  br label %for.inc65, !dbg !6935

for.inc65:                                        ; preds = %if.end64
  %36 = load i64, i64* %idx, align 8, !dbg !6927
  %inc = add i64 %36, 1, !dbg !6927
  store i64 %inc, i64* %idx, align 8, !dbg !6927
  br label %for.cond35, !dbg !6927, !llvm.loop !6936

for.end66:                                        ; preds = %cond.end57
  br label %sw.epilog, !dbg !6938

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !6939

sw.epilog:                                        ; preds = %sw.default, %for.end66, %sw.bb30, %if.end25
  ret void, !dbg !6940
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @place_block_symbol(%struct.rtx_def* %symbol) #0 !dbg !6941 {
entry:
  %symbol.addr = alloca %struct.rtx_def*, align 8
  %size = alloca i64, align 8
  %mask = alloca i64, align 8
  %offset = alloca i64, align 8
  %desc = alloca %struct.constant_descriptor_rtx*, align 8
  %alignment = alloca i32, align 4
  %block = alloca %struct.object_block*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %symbol, %struct.rtx_def** %symbol.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol.addr, metadata !6944, metadata !DIExpression()), !dbg !6945
  call void @llvm.dbg.declare(metadata i64* %size, metadata !6946, metadata !DIExpression()), !dbg !6947
  call void @llvm.dbg.declare(metadata i64* %mask, metadata !6948, metadata !DIExpression()), !dbg !6949
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !6950, metadata !DIExpression()), !dbg !6951
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %desc, metadata !6952, metadata !DIExpression()), !dbg !6953
  call void @llvm.dbg.declare(metadata i32* %alignment, metadata !6954, metadata !DIExpression()), !dbg !6955
  call void @llvm.dbg.declare(metadata %struct.object_block** %block, metadata !6956, metadata !DIExpression()), !dbg !6957
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6958, metadata !DIExpression()), !dbg !6959
  %0 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !6960
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6960
  %block_sym = bitcast %union.u* %u to %struct.block_symbol*, !dbg !6960
  %block1 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym, i32 0, i32 1, !dbg !6960
  %1 = load %struct.object_block*, %struct.object_block** %block1, align 8, !dbg !6960
  %tobool = icmp ne %struct.object_block* %1, null, !dbg !6960
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6960

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 6856, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6960
  br label %cond.end, !dbg !6960

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6960

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6960
  %2 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !6961
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !6961
  %block_sym3 = bitcast %union.u* %u2 to %struct.block_symbol*, !dbg !6961
  %offset4 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym3, i32 0, i32 2, !dbg !6961
  %3 = load i64, i64* %offset4, align 8, !dbg !6961
  %cmp = icmp sge i64 %3, 0, !dbg !6963
  br i1 %cmp, label %if.then, label %if.end, !dbg !6964

if.then:                                          ; preds = %cond.end
  br label %return, !dbg !6965

if.end:                                           ; preds = %cond.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !6966
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6966
  %bf.load = load i32, i32* %5, align 8, !dbg !6966
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !6966
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6966
  %tobool5 = icmp ne i32 %bf.clear, 0, !dbg !6966
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !6968

if.then6:                                         ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !6969
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6969
  %bf.load7 = load i32, i32* %7, align 8, !dbg !6969
  %bf.lshr8 = lshr i32 %bf.load7, 26, !dbg !6969
  %bf.clear9 = and i32 %bf.lshr8, 1, !dbg !6969
  %tobool10 = icmp ne i32 %bf.clear9, 0, !dbg !6969
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !6969

cond.true11:                                      ; preds = %if.then6
  %8 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !6969
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !6969
  %fld = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !6969
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6969
  %rt_constant = bitcast %union.rtunion_def* %arrayidx to %struct.constant_descriptor_rtx**, !dbg !6969
  %9 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %rt_constant, align 8, !dbg !6969
  br label %cond.end14, !dbg !6969

cond.false13:                                     ; preds = %if.then6
  br label %cond.end14, !dbg !6969

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.constant_descriptor_rtx* [ %9, %cond.true11 ], [ null, %cond.false13 ], !dbg !6969
  store %struct.constant_descriptor_rtx* %cond15, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !6971
  %10 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !6972
  %align = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %10, i32 0, i32 7, !dbg !6973
  %11 = load i32, i32* %align, align 8, !dbg !6973
  store i32 %11, i32* %alignment, align 4, !dbg !6974
  %12 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !6975
  %mode = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %12, i32 0, i32 6, !dbg !6975
  %13 = load i32, i32* %mode, align 4, !dbg !6975
  %idxprom = zext i32 %13 to i64, !dbg !6975
  %arrayidx16 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !6975
  %14 = load i8, i8* %arrayidx16, align 1, !dbg !6975
  %conv = zext i8 %14 to i16, !dbg !6975
  %conv17 = zext i16 %conv to i64, !dbg !6975
  store i64 %conv17, i64* %size, align 8, !dbg !6976
  br label %if.end52, !dbg !6977

if.else:                                          ; preds = %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !6978
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !6978
  %bf.load18 = load i32, i32* %16, align 8, !dbg !6978
  %bf.lshr19 = lshr i32 %bf.load18, 30, !dbg !6978
  %bf.clear20 = and i32 %bf.lshr19, 1, !dbg !6978
  %tobool21 = icmp ne i32 %bf.clear20, 0, !dbg !6978
  br i1 %tobool21, label %if.then22, label %if.else35, !dbg !6980

if.then22:                                        ; preds = %if.else
  %17 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !6981
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !6981
  %bf.load23 = load i32, i32* %18, align 8, !dbg !6981
  %bf.lshr24 = lshr i32 %bf.load23, 26, !dbg !6981
  %bf.clear25 = and i32 %bf.lshr24, 1, !dbg !6981
  %tobool26 = icmp ne i32 %bf.clear25, 0, !dbg !6981
  br i1 %tobool26, label %cond.true27, label %cond.false28, !dbg !6981

cond.true27:                                      ; preds = %if.then22
  br label %cond.end32, !dbg !6981

cond.false28:                                     ; preds = %if.then22
  %19 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !6981
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !6981
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !6981
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 2, !dbg !6981
  %rt_tree = bitcast %union.rtunion_def* %arrayidx31 to %union.tree_node**, !dbg !6981
  %20 = load %union.tree_node*, %union.tree_node** %rt_tree, align 8, !dbg !6981
  br label %cond.end32, !dbg !6981

cond.end32:                                       ; preds = %cond.false28, %cond.true27
  %cond33 = phi %union.tree_node* [ null, %cond.true27 ], [ %20, %cond.false28 ], !dbg !6981
  store %union.tree_node* %cond33, %union.tree_node** %decl, align 8, !dbg !6983
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6984
  %call = call i32 @get_constant_alignment(%union.tree_node* %21), !dbg !6985
  store i32 %call, i32* %alignment, align 4, !dbg !6986
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6987
  %call34 = call i64 @get_constant_size(%union.tree_node* %22), !dbg !6988
  store i64 %call34, i64* %size, align 8, !dbg !6989
  br label %if.end51, !dbg !6990

if.else35:                                        ; preds = %if.else
  %23 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !6991
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !6991
  %bf.load36 = load i32, i32* %24, align 8, !dbg !6991
  %bf.lshr37 = lshr i32 %bf.load36, 26, !dbg !6991
  %bf.clear38 = and i32 %bf.lshr37, 1, !dbg !6991
  %tobool39 = icmp ne i32 %bf.clear38, 0, !dbg !6991
  br i1 %tobool39, label %cond.true40, label %cond.false41, !dbg !6991

cond.true40:                                      ; preds = %if.else35
  br label %cond.end46, !dbg !6991

cond.false41:                                     ; preds = %if.else35
  %25 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !6991
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !6991
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !6991
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 2, !dbg !6991
  %rt_tree45 = bitcast %union.rtunion_def* %arrayidx44 to %union.tree_node**, !dbg !6991
  %26 = load %union.tree_node*, %union.tree_node** %rt_tree45, align 8, !dbg !6991
  br label %cond.end46, !dbg !6991

cond.end46:                                       ; preds = %cond.false41, %cond.true40
  %cond47 = phi %union.tree_node* [ null, %cond.true40 ], [ %26, %cond.false41 ], !dbg !6991
  store %union.tree_node* %cond47, %union.tree_node** %decl, align 8, !dbg !6993
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6994
  %decl_common = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !6994
  %align48 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !6994
  %28 = load i32, i32* %align48, align 8, !dbg !6994
  store i32 %28, i32* %alignment, align 4, !dbg !6995
  %29 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6996
  %decl_common49 = bitcast %union.tree_node* %29 to %struct.tree_decl_common*, !dbg !6996
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common49, i32 0, i32 4, !dbg !6996
  %30 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !6996
  %call50 = call i64 @tree_low_cst(%union.tree_node* %30, i32 1), !dbg !6997
  store i64 %call50, i64* %size, align 8, !dbg !6998
  br label %if.end51

if.end51:                                         ; preds = %cond.end46, %cond.end32
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %cond.end14
  %31 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !6999
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !6999
  %block_sym54 = bitcast %union.u* %u53 to %struct.block_symbol*, !dbg !6999
  %block55 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym54, i32 0, i32 1, !dbg !6999
  %32 = load %struct.object_block*, %struct.object_block** %block55, align 8, !dbg !6999
  store %struct.object_block* %32, %struct.object_block** %block, align 8, !dbg !7000
  %33 = load i32, i32* %alignment, align 4, !dbg !7001
  %div = udiv i32 %33, 8, !dbg !7002
  %sub = sub i32 %div, 1, !dbg !7003
  %conv56 = zext i32 %sub to i64, !dbg !7001
  store i64 %conv56, i64* %mask, align 8, !dbg !7004
  %34 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !7005
  %size57 = getelementptr inbounds %struct.object_block, %struct.object_block* %34, i32 0, i32 2, !dbg !7006
  %35 = load i64, i64* %size57, align 8, !dbg !7006
  %36 = load i64, i64* %mask, align 8, !dbg !7007
  %add = add i64 %35, %36, !dbg !7008
  %37 = load i64, i64* %mask, align 8, !dbg !7009
  %neg = xor i64 %37, -1, !dbg !7010
  %and = and i64 %add, %neg, !dbg !7011
  store i64 %and, i64* %offset, align 8, !dbg !7012
  %38 = load i64, i64* %offset, align 8, !dbg !7013
  %39 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !7014
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !7014
  %block_sym59 = bitcast %union.u* %u58 to %struct.block_symbol*, !dbg !7014
  %offset60 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym59, i32 0, i32 2, !dbg !7014
  store i64 %38, i64* %offset60, align 8, !dbg !7015
  %40 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !7016
  %alignment61 = getelementptr inbounds %struct.object_block, %struct.object_block* %40, i32 0, i32 1, !dbg !7016
  %41 = load i32, i32* %alignment61, align 8, !dbg !7016
  %42 = load i32, i32* %alignment, align 4, !dbg !7016
  %cmp62 = icmp ugt i32 %41, %42, !dbg !7016
  br i1 %cmp62, label %cond.true64, label %cond.false66, !dbg !7016

cond.true64:                                      ; preds = %if.end52
  %43 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !7016
  %alignment65 = getelementptr inbounds %struct.object_block, %struct.object_block* %43, i32 0, i32 1, !dbg !7016
  %44 = load i32, i32* %alignment65, align 8, !dbg !7016
  br label %cond.end67, !dbg !7016

cond.false66:                                     ; preds = %if.end52
  %45 = load i32, i32* %alignment, align 4, !dbg !7016
  br label %cond.end67, !dbg !7016

cond.end67:                                       ; preds = %cond.false66, %cond.true64
  %cond68 = phi i32 [ %44, %cond.true64 ], [ %45, %cond.false66 ], !dbg !7016
  %46 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !7017
  %alignment69 = getelementptr inbounds %struct.object_block, %struct.object_block* %46, i32 0, i32 1, !dbg !7018
  store i32 %cond68, i32* %alignment69, align 8, !dbg !7019
  %47 = load i64, i64* %offset, align 8, !dbg !7020
  %48 = load i64, i64* %size, align 8, !dbg !7021
  %add70 = add i64 %47, %48, !dbg !7022
  %49 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !7023
  %size71 = getelementptr inbounds %struct.object_block, %struct.object_block* %49, i32 0, i32 2, !dbg !7024
  store i64 %add70, i64* %size71, align 8, !dbg !7025
  %50 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !7026
  %objects = getelementptr inbounds %struct.object_block, %struct.object_block* %50, i32 0, i32 3, !dbg !7026
  %51 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !7026
  %call72 = call %struct.rtx_def** @VEC_rtx_gc_safe_push(%struct.VEC_rtx_gc** %objects, %struct.rtx_def* %51), !dbg !7026
  br label %return, !dbg !7027

return:                                           ; preds = %cond.end67, %if.then
  ret void, !dbg !7027
}

; Function Attrs: noinline nounwind uwtable
define internal void @assemble_noswitch_variable(%union.tree_node* %decl, i8* %name, %union.section* %sect) #0 !dbg !7028 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %sect.addr = alloca %union.section*, align 8
  %size = alloca i64, align 8
  %rounded = alloca i64, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7031, metadata !DIExpression()), !dbg !7032
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7033, metadata !DIExpression()), !dbg !7034
  store %union.section* %sect, %union.section** %sect.addr, align 8
  call void @llvm.dbg.declare(metadata %union.section** %sect.addr, metadata !7035, metadata !DIExpression()), !dbg !7036
  call void @llvm.dbg.declare(metadata i64* %size, metadata !7037, metadata !DIExpression()), !dbg !7038
  call void @llvm.dbg.declare(metadata i64* %rounded, metadata !7039, metadata !DIExpression()), !dbg !7040
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7041
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !7041
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !7041
  %1 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !7041
  %call = call i64 @tree_low_cst(%union.tree_node* %1, i32 1), !dbg !7042
  store i64 %call, i64* %size, align 8, !dbg !7043
  %2 = load i64, i64* %size, align 8, !dbg !7044
  store i64 %2, i64* %rounded, align 8, !dbg !7045
  %3 = load i64, i64* %size, align 8, !dbg !7046
  %cmp = icmp eq i64 %3, 0, !dbg !7048
  br i1 %cmp, label %if.then, label %if.end, !dbg !7049

if.then:                                          ; preds = %entry
  store i64 1, i64* %rounded, align 8, !dbg !7050
  br label %if.end, !dbg !7051

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* @ix86_isa_flags, align 4, !dbg !7052
  %and = and i32 %4, 32, !dbg !7052
  %cmp1 = icmp ne i32 %and, 0, !dbg !7052
  %5 = zext i1 %cmp1 to i64, !dbg !7052
  %cond = select i1 %cmp1, i32 256, i32 128, !dbg !7052
  %div = sdiv i32 %cond, 8, !dbg !7053
  %sub = sub nsw i32 %div, 1, !dbg !7054
  %conv = sext i32 %sub to i64, !dbg !7055
  %6 = load i64, i64* %rounded, align 8, !dbg !7056
  %add = add i64 %6, %conv, !dbg !7056
  store i64 %add, i64* %rounded, align 8, !dbg !7056
  %7 = load i64, i64* %rounded, align 8, !dbg !7057
  %8 = load i32, i32* @ix86_isa_flags, align 4, !dbg !7058
  %and2 = and i32 %8, 32, !dbg !7058
  %cmp3 = icmp ne i32 %and2, 0, !dbg !7058
  %9 = zext i1 %cmp3 to i64, !dbg !7058
  %cond5 = select i1 %cmp3, i32 256, i32 128, !dbg !7058
  %div6 = sdiv i32 %cond5, 8, !dbg !7059
  %conv7 = sext i32 %div6 to i64, !dbg !7060
  %div8 = udiv i64 %7, %conv7, !dbg !7061
  %10 = load i32, i32* @ix86_isa_flags, align 4, !dbg !7062
  %and9 = and i32 %10, 32, !dbg !7062
  %cmp10 = icmp ne i32 %and9, 0, !dbg !7062
  %11 = zext i1 %cmp10 to i64, !dbg !7062
  %cond12 = select i1 %cmp10, i32 256, i32 128, !dbg !7062
  %div13 = sdiv i32 %cond12, 8, !dbg !7063
  %conv14 = sext i32 %div13 to i64, !dbg !7064
  %mul = mul i64 %div8, %conv14, !dbg !7065
  store i64 %mul, i64* %rounded, align 8, !dbg !7066
  %12 = load %union.section*, %union.section** %sect.addr, align 8, !dbg !7067
  %noswitch = bitcast %union.section* %12 to %struct.noswitch_section*, !dbg !7069
  %callback = getelementptr inbounds %struct.noswitch_section, %struct.noswitch_section* %noswitch, i32 0, i32 1, !dbg !7070
  %13 = load i8 (%union.tree_node*, i8*, i64, i64)*, i8 (%union.tree_node*, i8*, i64, i64)** %callback, align 8, !dbg !7070
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7071
  %15 = load i8*, i8** %name.addr, align 8, !dbg !7072
  %16 = load i64, i64* %size, align 8, !dbg !7073
  %17 = load i64, i64* %rounded, align 8, !dbg !7074
  %call15 = call zeroext i8 %13(%union.tree_node* %14, i8* %15, i64 %16, i64 %17), !dbg !7067
  %tobool = icmp ne i8 %call15, 0, !dbg !7067
  br i1 %tobool, label %if.end23, label %land.lhs.true, !dbg !7075

land.lhs.true:                                    ; preds = %if.end
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7076
  %decl_common16 = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !7076
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common16, i32 0, i32 3, !dbg !7076
  %19 = load i32, i32* %align, align 8, !dbg !7076
  %div17 = udiv i32 %19, 8, !dbg !7076
  %conv18 = zext i32 %div17 to i64, !dbg !7077
  %20 = load i64, i64* %rounded, align 8, !dbg !7078
  %cmp19 = icmp ugt i64 %conv18, %20, !dbg !7079
  br i1 %cmp19, label %if.then21, label %if.end23, !dbg !7080

if.then21:                                        ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7081
  %22 = load i64, i64* %rounded, align 8, !dbg !7082
  %call22 = call zeroext i8 (i32, i8*, ...) @warning(i32 0, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.169, i64 0, i64 0), %union.tree_node* %21, i64 %22), !dbg !7083
  br label %if.end23, !dbg !7083

if.end23:                                         ; preds = %if.then21, %land.lhs.true, %if.end
  ret void, !dbg !7084
}

; Function Attrs: noinline nounwind uwtable
define internal void @assemble_variable_contents(%union.tree_node* %decl, i8* %name, i8 zeroext %dont_output_data) #0 !dbg !7085 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %dont_output_data.addr = alloca i8, align 1
  %size = alloca i64, align 8
  %size_ = alloca i64, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7088, metadata !DIExpression()), !dbg !7089
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7090, metadata !DIExpression()), !dbg !7091
  store i8 %dont_output_data, i8* %dont_output_data.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %dont_output_data.addr, metadata !7092, metadata !DIExpression()), !dbg !7093
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7094
  store %union.tree_node* %0, %union.tree_node** @last_assemble_variable_decl, align 8, !dbg !7095
  br label %do.body, !dbg !7096

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %size, metadata !7097, metadata !DIExpression()), !dbg !7099
  br label %do.body1, !dbg !7100

do.body1:                                         ; preds = %do.body
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7102
  %call = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i64 0, i64 0), %struct._IO_FILE* %1), !dbg !7102
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7102
  %3 = load i8*, i8** %name.addr, align 8, !dbg !7102
  call void @assemble_name(%struct._IO_FILE* %2, i8* %3), !dbg !7102
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7102
  %call2 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i64 0, i64 0), %struct._IO_FILE* %4), !dbg !7102
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7102
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i64 0, i64 0)), !dbg !7102
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7102
  %call4 = call i32 @putc(i32 10, %struct._IO_FILE* %6), !dbg !7102
  br label %do.end, !dbg !7102

do.end:                                           ; preds = %do.body1
  store i32 0, i32* @size_directive_output, align 4, !dbg !7099
  %7 = load i32, i32* @flag_inhibit_size_directive, align 4, !dbg !7104
  %tobool = icmp ne i32 %7, 0, !dbg !7104
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !7104

land.lhs.true:                                    ; preds = %do.end
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7104
  %tobool5 = icmp ne %union.tree_node* %8, null, !dbg !7104
  br i1 %tobool5, label %land.lhs.true6, label %if.end, !dbg !7104

land.lhs.true6:                                   ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7104
  %decl_common = bitcast %union.tree_node* %9 to %struct.tree_decl_common*, !dbg !7104
  %size7 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !7104
  %10 = load %union.tree_node*, %union.tree_node** %size7, align 8, !dbg !7104
  %tobool8 = icmp ne %union.tree_node* %10, null, !dbg !7104
  br i1 %tobool8, label %if.then, label %if.end, !dbg !7099

if.then:                                          ; preds = %land.lhs.true6
  store i32 1, i32* @size_directive_output, align 4, !dbg !7106
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7106
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !7106
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7106
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7106
  %call9 = call i64 @int_size_in_bytes(%union.tree_node* %12), !dbg !7106
  store i64 %call9, i64* %size, align 8, !dbg !7106
  br label %do.body10, !dbg !7106

do.body10:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %size_, metadata !7108, metadata !DIExpression()), !dbg !7110
  %13 = load i64, i64* %size, align 8, !dbg !7110
  store i64 %13, i64* %size_, align 8, !dbg !7110
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7110
  %call11 = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i64 0, i64 0), %struct._IO_FILE* %14), !dbg !7110
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7110
  %16 = load i8*, i8** %name.addr, align 8, !dbg !7110
  call void @assemble_name(%struct._IO_FILE* %15, i8* %16), !dbg !7110
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7110
  %18 = load i64, i64* %size_, align 8, !dbg !7110
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.171, i64 0, i64 0), i64 %18), !dbg !7110
  br label %do.end13, !dbg !7110

do.end13:                                         ; preds = %do.body10
  br label %if.end, !dbg !7106

if.end:                                           ; preds = %do.end13, %land.lhs.true6, %land.lhs.true, %do.end
  br label %do.body14, !dbg !7099

do.body14:                                        ; preds = %if.end
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7111
  %20 = load i8*, i8** %name.addr, align 8, !dbg !7111
  call void @assemble_name(%struct._IO_FILE* %19, i8* %20), !dbg !7111
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7111
  %call15 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), %struct._IO_FILE* %21), !dbg !7111
  br label %do.end16, !dbg !7111

do.end16:                                         ; preds = %do.body14
  br label %do.end17, !dbg !7099

do.end17:                                         ; preds = %do.end16
  %22 = load i8, i8* %dont_output_data.addr, align 1, !dbg !7113
  %tobool18 = icmp ne i8 %22, 0, !dbg !7113
  br i1 %tobool18, label %if.end40, label %if.then19, !dbg !7115

if.then19:                                        ; preds = %do.end17
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7116
  %decl_common20 = bitcast %union.tree_node* %23 to %struct.tree_decl_common*, !dbg !7116
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common20, i32 0, i32 5, !dbg !7116
  %24 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !7116
  %tobool21 = icmp ne %union.tree_node* %24, null, !dbg !7116
  br i1 %tobool21, label %land.lhs.true22, label %if.else, !dbg !7119

land.lhs.true22:                                  ; preds = %if.then19
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7120
  %decl_common23 = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !7120
  %initial24 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common23, i32 0, i32 5, !dbg !7120
  %26 = load %union.tree_node*, %union.tree_node** %initial24, align 8, !dbg !7120
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !7121
  %cmp = icmp ne %union.tree_node* %26, %27, !dbg !7122
  br i1 %cmp, label %land.lhs.true25, label %if.else, !dbg !7123

land.lhs.true25:                                  ; preds = %land.lhs.true22
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7124
  %decl_common26 = bitcast %union.tree_node* %28 to %struct.tree_decl_common*, !dbg !7124
  %initial27 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common26, i32 0, i32 5, !dbg !7124
  %29 = load %union.tree_node*, %union.tree_node** %initial27, align 8, !dbg !7124
  %call28 = call zeroext i8 @initializer_zerop(%union.tree_node* %29), !dbg !7125
  %tobool29 = icmp ne i8 %call28, 0, !dbg !7125
  br i1 %tobool29, label %if.else, label %if.then30, !dbg !7126

if.then30:                                        ; preds = %land.lhs.true25
  %30 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7127
  %decl_common31 = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !7127
  %initial32 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common31, i32 0, i32 5, !dbg !7127
  %31 = load %union.tree_node*, %union.tree_node** %initial32, align 8, !dbg !7127
  %32 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7128
  %decl_common33 = bitcast %union.tree_node* %32 to %struct.tree_decl_common*, !dbg !7128
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common33, i32 0, i32 4, !dbg !7128
  %33 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !7128
  %call34 = call i64 @tree_low_cst(%union.tree_node* %33, i32 1), !dbg !7129
  %34 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7130
  %decl_common35 = bitcast %union.tree_node* %34 to %struct.tree_decl_common*, !dbg !7130
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common35, i32 0, i32 3, !dbg !7130
  %35 = load i32, i32* %align, align 8, !dbg !7130
  call void @output_constant(%union.tree_node* %31, i64 %call34, i32 %35), !dbg !7131
  br label %if.end39, !dbg !7131

if.else:                                          ; preds = %land.lhs.true25, %land.lhs.true22, %if.then19
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7132
  %decl_common36 = bitcast %union.tree_node* %36 to %struct.tree_decl_common*, !dbg !7132
  %size_unit37 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common36, i32 0, i32 4, !dbg !7132
  %37 = load %union.tree_node*, %union.tree_node** %size_unit37, align 8, !dbg !7132
  %call38 = call i64 @tree_low_cst(%union.tree_node* %37, i32 1), !dbg !7133
  call void @assemble_zeros(i64 %call38), !dbg !7134
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then30
  br label %if.end40, !dbg !7135

if.end40:                                         ; preds = %if.end39, %do.end17
  ret void, !dbg !7136
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @process_pending_assemble_externals() #0 !dbg !7137 {
entry:
  %list = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %list, metadata !7138, metadata !DIExpression()), !dbg !7139
  %0 = load %union.tree_node*, %union.tree_node** @pending_assemble_externals, align 8, !dbg !7140
  store %union.tree_node* %0, %union.tree_node** %list, align 8, !dbg !7142
  br label %for.cond, !dbg !7143

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !7144
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !7146
  br i1 %tobool, label %for.body, label %for.end, !dbg !7146

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !7147
  %list1 = bitcast %union.tree_node* %2 to %struct.tree_list*, !dbg !7147
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 2, !dbg !7147
  %3 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7147
  call void @assemble_external_real(%union.tree_node* %3), !dbg !7148
  br label %for.inc, !dbg !7148

for.inc:                                          ; preds = %for.body
  %4 = load %union.tree_node*, %union.tree_node** %list, align 8, !dbg !7149
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !7149
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7149
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7149
  store %union.tree_node* %5, %union.tree_node** %list, align 8, !dbg !7150
  br label %for.cond, !dbg !7151, !llvm.loop !7152

for.end:                                          ; preds = %for.cond
  store %union.tree_node* null, %union.tree_node** @pending_assemble_externals, align 8, !dbg !7154
  ret void, !dbg !7155
}

; Function Attrs: noinline nounwind uwtable
define internal void @assemble_external_real(%union.tree_node* %decl) #0 !dbg !7156 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %rtl = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7157, metadata !DIExpression()), !dbg !7158
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtl, metadata !7159, metadata !DIExpression()), !dbg !7160
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7161
  %decl_with_rtl = bitcast %union.tree_node* %0 to %struct.tree_decl_with_rtl*, !dbg !7161
  %rtl1 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !7161
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtl1, align 8, !dbg !7161
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !7161
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7161

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7161
  %decl_with_rtl2 = bitcast %union.tree_node* %2 to %struct.tree_decl_with_rtl*, !dbg !7161
  %rtl3 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl2, i32 0, i32 1, !dbg !7161
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtl3, align 8, !dbg !7161
  br label %cond.end, !dbg !7161

cond.false:                                       ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7161
  call void @make_decl_rtl(%union.tree_node* %4), !dbg !7161
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7161
  %decl_with_rtl4 = bitcast %union.tree_node* %5 to %struct.tree_decl_with_rtl*, !dbg !7161
  %rtl5 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl4, i32 0, i32 1, !dbg !7161
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8, !dbg !7161
  br label %cond.end, !dbg !7161

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %3, %cond.true ], [ %6, %cond.false ], !dbg !7161
  store %struct.rtx_def* %cond, %struct.rtx_def** %rtl, align 8, !dbg !7160
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !7162
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !7162
  %bf.load = load i32, i32* %8, align 8, !dbg !7162
  %bf.clear = and i32 %bf.load, 65535, !dbg !7162
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !7162
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7164

land.lhs.true:                                    ; preds = %cond.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !7165
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !7165
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7165
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7165
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7165
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7165
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !7165
  %bf.load6 = load i32, i32* %11, align 8, !dbg !7165
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !7165
  %cmp8 = icmp eq i32 %bf.clear7, 45, !dbg !7166
  br i1 %cmp8, label %land.lhs.true9, label %if.end, !dbg !7167

land.lhs.true9:                                   ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !7168
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !7168
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !7168
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 0, !dbg !7168
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !7168
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx13, align 8, !dbg !7168
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !7168
  %bf.load14 = load i32, i32* %14, align 8, !dbg !7168
  %bf.lshr = lshr i32 %bf.load14, 29, !dbg !7168
  %bf.clear15 = and i32 %bf.lshr, 1, !dbg !7168
  %tobool16 = icmp ne i32 %bf.clear15, 0, !dbg !7168
  br i1 %tobool16, label %if.end, label %land.lhs.true17, !dbg !7169

land.lhs.true17:                                  ; preds = %land.lhs.true9
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7170
  %call = call zeroext i8 @incorporeal_function_p(%union.tree_node* %15), !dbg !7171
  %tobool18 = icmp ne i8 %call, 0, !dbg !7171
  br i1 %tobool18, label %if.end, label %if.then, !dbg !7172

if.then:                                          ; preds = %land.lhs.true17
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !7173
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !7173
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !7173
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 0, !dbg !7173
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !7173
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !7173
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !7173
  %bf.load23 = load i32, i32* %18, align 8, !dbg !7175
  %bf.clear24 = and i32 %bf.load23, -536870913, !dbg !7175
  %bf.set = or i32 %bf.clear24, 536870912, !dbg !7175
  store i32 %bf.set, i32* %18, align 8, !dbg !7175
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7176
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7176
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !7176
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !7176
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !7176
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !7176
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !7176
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !7176
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !7176
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !7176
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !7176
  %rt_str = bitcast %union.rtunion_def* %arrayidx31 to i8**, !dbg !7176
  %23 = load i8*, i8** %rt_str, align 8, !dbg !7176
  call void @default_elf_asm_output_external(%struct._IO_FILE* %19, %union.tree_node* %20, i8* %23), !dbg !7176
  br label %if.end, !dbg !7177

if.end:                                           ; preds = %if.then, %land.lhs.true17, %land.lhs.true9, %land.lhs.true, %cond.end
  ret void, !dbg !7178
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_external(%union.tree_node* %decl) #0 !dbg !7179 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7180, metadata !DIExpression()), !dbg !7181
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7182
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !7182
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7182

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2373, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !7182
  br label %cond.end, !dbg !7182

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7182

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7182
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7183
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7183
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7183
  %bf.load = load i64, i64* %2, align 8, !dbg !7183
  %bf.clear = and i64 %bf.load, 65535, !dbg !7183
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7183
  %idxprom = sext i32 %bf.cast to i64, !dbg !7183
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7183
  %3 = load i32, i32* %arrayidx, align 4, !dbg !7183
  %cmp = icmp eq i32 %3, 3, !dbg !7183
  br i1 %cmp, label %lor.lhs.false, label %if.then, !dbg !7185

lor.lhs.false:                                    ; preds = %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7186
  %decl_common = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !7186
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7186
  %5 = bitcast i40* %decl_flag_1 to i64*, !dbg !7186
  %bf.load1 = load i64, i64* %5, align 8, !dbg !7186
  %bf.lshr = lshr i64 %bf.load1, 25, !dbg !7186
  %bf.clear2 = and i64 %bf.lshr, 1, !dbg !7186
  %bf.cast3 = trunc i64 %bf.clear2 to i32, !dbg !7186
  %tobool4 = icmp ne i32 %bf.cast3, 0, !dbg !7186
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !7187

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7188
  %base6 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7188
  %7 = bitcast %struct.tree_base* %base6 to i64*, !dbg !7188
  %bf.load7 = load i64, i64* %7, align 8, !dbg !7188
  %bf.lshr8 = lshr i64 %bf.load7, 27, !dbg !7188
  %bf.clear9 = and i64 %bf.lshr8, 1, !dbg !7188
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !7188
  %tobool11 = icmp ne i32 %bf.cast10, 0, !dbg !7188
  br i1 %tobool11, label %if.end, label %if.then, !dbg !7189

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false, %cond.end
  br label %if.end35, !dbg !7190

if.end:                                           ; preds = %lor.lhs.false5
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7191
  %decl_with_vis = bitcast %union.tree_node* %8 to %struct.tree_decl_with_vis*, !dbg !7191
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !7191
  %9 = bitcast i24* %weak_flag to i32*, !dbg !7191
  %bf.load12 = load i32, i32* %9, align 8, !dbg !7191
  %bf.lshr13 = lshr i32 %bf.load12, 7, !dbg !7191
  %bf.clear14 = and i32 %bf.lshr13, 1, !dbg !7191
  %tobool15 = icmp ne i32 %bf.clear14, 0, !dbg !7191
  br i1 %tobool15, label %land.lhs.true, label %if.end30, !dbg !7193

land.lhs.true:                                    ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7194
  %base16 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7194
  %11 = bitcast %struct.tree_base* %base16 to i64*, !dbg !7194
  %bf.load17 = load i64, i64* %11, align 8, !dbg !7194
  %bf.lshr18 = lshr i64 %bf.load17, 26, !dbg !7194
  %bf.clear19 = and i64 %bf.lshr18, 1, !dbg !7194
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !7194
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !7194
  br i1 %tobool21, label %if.end30, label %land.lhs.true22, !dbg !7195

land.lhs.true22:                                  ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7196
  %decl_common23 = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !7196
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common23, i32 0, i32 6, !dbg !7196
  %13 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !7196
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77, i64 0, i64 0), %union.tree_node* %13), !dbg !7197
  %tobool24 = icmp ne %union.tree_node* %call, null, !dbg !7197
  br i1 %tobool24, label %land.lhs.true25, label %if.end30, !dbg !7198

land.lhs.true25:                                  ; preds = %land.lhs.true22
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7199
  %15 = load %union.tree_node*, %union.tree_node** @weak_decls, align 8, !dbg !7200
  %call26 = call %union.tree_node* @value_member(%union.tree_node* %14, %union.tree_node* %15), !dbg !7201
  %cmp27 = icmp eq %union.tree_node* %call26, null, !dbg !7202
  br i1 %cmp27, label %if.then28, label %if.end30, !dbg !7203

if.then28:                                        ; preds = %land.lhs.true25
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7204
  %17 = load %union.tree_node*, %union.tree_node** @weak_decls, align 8, !dbg !7204
  %call29 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %16, %union.tree_node* %17), !dbg !7204
  store %union.tree_node* %call29, %union.tree_node** @weak_decls, align 8, !dbg !7205
  br label %if.end30, !dbg !7206

if.end30:                                         ; preds = %if.then28, %land.lhs.true25, %land.lhs.true22, %land.lhs.true, %if.end
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7207
  %19 = load %union.tree_node*, %union.tree_node** @pending_assemble_externals, align 8, !dbg !7209
  %call31 = call %union.tree_node* @value_member(%union.tree_node* %18, %union.tree_node* %19), !dbg !7210
  %cmp32 = icmp eq %union.tree_node* %call31, null, !dbg !7211
  br i1 %cmp32, label %if.then33, label %if.end35, !dbg !7212

if.then33:                                        ; preds = %if.end30
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7213
  %21 = load %union.tree_node*, %union.tree_node** @pending_assemble_externals, align 8, !dbg !7213
  %call34 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %20, %union.tree_node* %21), !dbg !7213
  store %union.tree_node* %call34, %union.tree_node** @pending_assemble_externals, align 8, !dbg !7214
  br label %if.end35, !dbg !7215

if.end35:                                         ; preds = %if.then, %if.then33, %if.end30
  ret void, !dbg !7216
}

declare dso_local %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) #2

declare dso_local %union.tree_node* @value_member(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_external_libcall(%struct.rtx_def* %fun) #0 !dbg !7217 {
entry:
  %fun.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %fun, %struct.rtx_def** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %fun.addr, metadata !7218, metadata !DIExpression()), !dbg !7219
  %0 = load %struct.rtx_def*, %struct.rtx_def** %fun.addr, align 8, !dbg !7220
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7220
  %bf.load = load i32, i32* %1, align 8, !dbg !7220
  %bf.lshr = lshr i32 %bf.load, 29, !dbg !7220
  %bf.clear = and i32 %bf.lshr, 1, !dbg !7220
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !7220
  br i1 %tobool, label %if.end, label %if.then, !dbg !7222

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %fun.addr, align 8, !dbg !7223
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !7223
  %bf.load1 = load i32, i32* %3, align 8, !dbg !7225
  %bf.clear2 = and i32 %bf.load1, -536870913, !dbg !7225
  %bf.set = or i32 %bf.clear2, 536870912, !dbg !7225
  store i32 %bf.set, i32* %3, align 8, !dbg !7225
  %4 = load void (%struct.rtx_def*)*, void (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 32), align 8, !dbg !7226
  %5 = load %struct.rtx_def*, %struct.rtx_def** %fun.addr, align 8, !dbg !7227
  call void %4(%struct.rtx_def* %5), !dbg !7228
  br label %if.end, !dbg !7229

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !7230
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_label(i8* %name) #0 !dbg !7231 {
entry:
  %name.addr = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7234, metadata !DIExpression()), !dbg !7235
  br label %do.body, !dbg !7236

do.body:                                          ; preds = %entry
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7237
  %1 = load i8*, i8** %name.addr, align 8, !dbg !7237
  call void @assemble_name(%struct._IO_FILE* %0, i8* %1), !dbg !7237
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7237
  %call = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), %struct._IO_FILE* %2), !dbg !7237
  br label %do.end, !dbg !7237

do.end:                                           ; preds = %do.body
  ret void, !dbg !7239
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_referenced(%union.tree_node* %id) #0 !dbg !7240 {
entry:
  %id.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %id, %union.tree_node** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %id.addr, metadata !7241, metadata !DIExpression()), !dbg !7242
  %0 = load %union.tree_node*, %union.tree_node** %id.addr, align 8, !dbg !7243
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7243
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7243
  %bf.load = load i64, i64* %1, align 8, !dbg !7244
  %bf.clear = and i64 %bf.load, -67108865, !dbg !7244
  %bf.set = or i64 %bf.clear, 67108864, !dbg !7244
  store i64 %bf.set, i64* %1, align 8, !dbg !7244
  ret void, !dbg !7245
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_decl_referenced(%union.tree_node* %decl) #0 !dbg !7246 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %node23 = alloca %struct.varpool_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7247, metadata !DIExpression()), !dbg !7248
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7249
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7249
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7249
  %bf.load = load i64, i64* %1, align 8, !dbg !7249
  %bf.clear = and i64 %bf.load, 65535, !dbg !7249
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7249
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !7251
  br i1 %cmp, label %if.then, label %if.else, !dbg !7252

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !7253, metadata !DIExpression()), !dbg !7398
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7399
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %2), !dbg !7400
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !7398
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7401
  %decl_common = bitcast %union.tree_node* %3 to %struct.tree_decl_common*, !dbg !7401
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7401
  %4 = bitcast i40* %decl_flag_1 to i64*, !dbg !7401
  %bf.load1 = load i64, i64* %4, align 8, !dbg !7401
  %bf.lshr = lshr i64 %bf.load1, 25, !dbg !7401
  %bf.clear2 = and i64 %bf.lshr, 1, !dbg !7401
  %bf.cast3 = trunc i64 %bf.clear2 to i32, !dbg !7401
  %tobool = icmp ne i32 %bf.cast3, 0, !dbg !7401
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !7403

land.lhs.true:                                    ; preds = %if.then
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7404
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 18, !dbg !7405
  %vtable_method = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !7406
  %bf.load4 = load i8, i8* %vtable_method, align 8, !dbg !7406
  %bf.lshr5 = lshr i8 %bf.load4, 7, !dbg !7406
  %bf.cast6 = zext i8 %bf.lshr5 to i32, !dbg !7406
  %tobool7 = icmp ne i32 %bf.cast6, 0, !dbg !7404
  br i1 %tobool7, label %lor.lhs.false, label %if.then16, !dbg !7407

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load i8, i8* @cgraph_global_info_ready, align 1, !dbg !7408
  %tobool8 = icmp ne i8 %6, 0, !dbg !7408
  br i1 %tobool8, label %lor.lhs.false9, label %if.then16, !dbg !7409

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7410
  %local10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 18, !dbg !7411
  %finalized = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local10, i32 0, i32 2, !dbg !7412
  %bf.load11 = load i8, i8* %finalized, align 8, !dbg !7412
  %bf.lshr12 = lshr i8 %bf.load11, 2, !dbg !7412
  %bf.clear13 = and i8 %bf.lshr12, 1, !dbg !7412
  %bf.cast14 = zext i8 %bf.clear13 to i32, !dbg !7412
  %tobool15 = icmp ne i32 %bf.cast14, 0, !dbg !7410
  br i1 %tobool15, label %if.end, label %if.then16, !dbg !7413

if.then16:                                        ; preds = %lor.lhs.false9, %lor.lhs.false, %land.lhs.true
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7414
  call void @cgraph_mark_needed_node(%struct.cgraph_node* %8), !dbg !7415
  br label %if.end, !dbg !7415

if.end:                                           ; preds = %if.then16, %lor.lhs.false9, %if.then
  br label %if.end28, !dbg !7416

if.else:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7417
  %base17 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7417
  %10 = bitcast %struct.tree_base* %base17 to i64*, !dbg !7417
  %bf.load18 = load i64, i64* %10, align 8, !dbg !7417
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !7417
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !7417
  %cmp21 = icmp eq i32 %bf.cast20, 32, !dbg !7419
  br i1 %cmp21, label %if.then22, label %if.end27, !dbg !7420

if.then22:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %node23, metadata !7421, metadata !DIExpression()), !dbg !7438
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7439
  %call24 = call %struct.varpool_node* @varpool_node(%union.tree_node* %11), !dbg !7440
  store %struct.varpool_node* %call24, %struct.varpool_node** %node23, align 8, !dbg !7438
  %12 = load %struct.varpool_node*, %struct.varpool_node** %node23, align 8, !dbg !7441
  call void @varpool_mark_needed_node(%struct.varpool_node* %12), !dbg !7442
  %13 = load %struct.varpool_node*, %struct.varpool_node** %node23, align 8, !dbg !7443
  %force_output = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %13, i32 0, i32 5, !dbg !7444
  %bf.load25 = load i8, i8* %force_output, align 4, !dbg !7445
  %bf.clear26 = and i8 %bf.load25, -3, !dbg !7445
  %bf.set = or i8 %bf.clear26, 2, !dbg !7445
  store i8 %bf.set, i8* %force_output, align 4, !dbg !7445
  br label %if.end27, !dbg !7446

if.end27:                                         ; preds = %if.then22, %if.else
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end
  ret void, !dbg !7447
}

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) #2

declare dso_local void @cgraph_mark_needed_node(%struct.cgraph_node*) #2

declare dso_local %struct.varpool_node* @varpool_node(%union.tree_node*) #2

declare dso_local void @varpool_mark_needed_node(%struct.varpool_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_name_raw(%struct._IO_FILE* %file, i8* %name) #0 !dbg !7448 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %name.addr = alloca i8*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !7449, metadata !DIExpression()), !dbg !7450
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7451, metadata !DIExpression()), !dbg !7452
  %0 = load i8*, i8** %name.addr, align 8, !dbg !7453
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !7453
  %1 = load i8, i8* %arrayidx, align 1, !dbg !7453
  %conv = sext i8 %1 to i32, !dbg !7453
  %cmp = icmp eq i32 %conv, 42, !dbg !7455
  br i1 %cmp, label %if.then, label %if.else, !dbg !7456

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8, !dbg !7457
  %arrayidx2 = getelementptr inbounds i8, i8* %2, i64 1, !dbg !7457
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7458
  %call = call i32 @fputs(i8* %arrayidx2, %struct._IO_FILE* %3), !dbg !7459
  br label %if.end, !dbg !7459

if.else:                                          ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !7460
  %5 = load i8*, i8** %name.addr, align 8, !dbg !7460
  call void (%struct._IO_FILE*, i8*, ...) @asm_fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i64 0, i64 0), i8* %5), !dbg !7460
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !7461
}

declare dso_local void @asm_fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local %union.tree_node* @maybe_get_identifier(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @ultimate_transparent_alias_target(%union.tree_node** %alias) #0 !dbg !7462 {
entry:
  %alias.addr = alloca %union.tree_node**, align 8
  %target = alloca %union.tree_node*, align 8
  store %union.tree_node** %alias, %union.tree_node*** %alias.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %alias.addr, metadata !7465, metadata !DIExpression()), !dbg !7466
  call void @llvm.dbg.declare(metadata %union.tree_node** %target, metadata !7467, metadata !DIExpression()), !dbg !7468
  %0 = load %union.tree_node**, %union.tree_node*** %alias.addr, align 8, !dbg !7469
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7470
  store %union.tree_node* %1, %union.tree_node** %target, align 8, !dbg !7468
  %2 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !7471
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7471
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7471
  %bf.load = load i64, i64* %3, align 8, !dbg !7471
  %bf.lshr = lshr i64 %bf.load, 30, !dbg !7471
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7471
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7471
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7471
  br i1 %tobool, label %if.then, label %if.end, !dbg !7473

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !7474
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !7474
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7474
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7474
  %tobool1 = icmp ne %union.tree_node* %5, null, !dbg !7474
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !7474

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2471, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !7474
  br label %cond.end, !dbg !7474

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7474

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7474
  %6 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !7476
  %common2 = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !7476
  %chain3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 1, !dbg !7476
  %call = call %union.tree_node* @ultimate_transparent_alias_target(%union.tree_node** %chain3), !dbg !7477
  store %union.tree_node* %call, %union.tree_node** %target, align 8, !dbg !7478
  %7 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !7479
  %base4 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7479
  %8 = bitcast %struct.tree_base* %base4 to i64*, !dbg !7479
  %bf.load5 = load i64, i64* %8, align 8, !dbg !7479
  %bf.lshr6 = lshr i64 %bf.load5, 30, !dbg !7479
  %bf.clear7 = and i64 %bf.lshr6, 1, !dbg !7479
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !7479
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !7479
  br i1 %tobool9, label %cond.true13, label %land.lhs.true, !dbg !7479

land.lhs.true:                                    ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !7479
  %common10 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !7479
  %chain11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 1, !dbg !7479
  %10 = load %union.tree_node*, %union.tree_node** %chain11, align 8, !dbg !7479
  %tobool12 = icmp ne %union.tree_node* %10, null, !dbg !7479
  br i1 %tobool12, label %cond.true13, label %cond.false14, !dbg !7479

cond.true13:                                      ; preds = %land.lhs.true, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2474, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !7479
  br label %cond.end15, !dbg !7479

cond.false14:                                     ; preds = %land.lhs.true
  br label %cond.end15, !dbg !7479

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false14 ], !dbg !7479
  %11 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !7480
  %12 = load %union.tree_node**, %union.tree_node*** %alias.addr, align 8, !dbg !7481
  store %union.tree_node* %11, %union.tree_node** %12, align 8, !dbg !7482
  br label %if.end, !dbg !7483

if.end:                                           ; preds = %cond.end15, %entry
  %13 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !7484
  ret %union.tree_node* %13, !dbg !7485
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @assemble_static_space(i64 %size) #0 !dbg !7486 {
entry:
  %size.addr = alloca i64, align 8
  %name = alloca [12 x i8], align 1
  %namestring = alloca i8*, align 8
  %x = alloca %struct.rtx_def*, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !7489, metadata !DIExpression()), !dbg !7490
  call void @llvm.dbg.declare(metadata [12 x i8]* %name, metadata !7491, metadata !DIExpression()), !dbg !7495
  call void @llvm.dbg.declare(metadata i8** %namestring, metadata !7496, metadata !DIExpression()), !dbg !7497
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !7498, metadata !DIExpression()), !dbg !7499
  br label %do.body, !dbg !7500

do.body:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [12 x i8], [12 x i8]* %name, i64 0, i64 0, !dbg !7501
  %0 = load i32, i32* @const_labelno, align 4, !dbg !7501
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.79, i64 0, i64 0), i32 %0), !dbg !7501
  br label %do.end, !dbg !7501

do.end:                                           ; preds = %do.body
  %1 = load i32, i32* @const_labelno, align 4, !dbg !7503
  %inc = add nsw i32 %1, 1, !dbg !7503
  store i32 %inc, i32* @const_labelno, align 4, !dbg !7503
  %arraydecay1 = getelementptr inbounds [12 x i8], [12 x i8]* %name, i64 0, i64 0, !dbg !7504
  %call2 = call i8* @ggc_alloc_string(i8* %arraydecay1, i32 -1), !dbg !7504
  store i8* %call2, i8** %namestring, align 8, !dbg !7505
  %2 = load i8*, i8** %namestring, align 8, !dbg !7506
  %call3 = call %struct.rtx_def* @gen_rtx_fmt_s00_stat(i32 45, i32 16, i8* %2), !dbg !7506
  store %struct.rtx_def* %call3, %struct.rtx_def** %x, align 8, !dbg !7507
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7508
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !7508
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7508
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !7508
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7508
  store i32 2, i32* %rt_int, align 8, !dbg !7509
  br label %do.body4, !dbg !7510

do.body4:                                         ; preds = %do.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7511
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.81, i64 0, i64 0)), !dbg !7511
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7511
  %arraydecay6 = getelementptr inbounds [12 x i8], [12 x i8]* %name, i64 0, i64 0, !dbg !7511
  call void @assemble_name(%struct._IO_FILE* %5, i8* %arraydecay6), !dbg !7511
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7511
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i64 0, i64 0)), !dbg !7511
  br label %do.body8, !dbg !7511

do.body8:                                         ; preds = %do.body4
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7513
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.83, i64 0, i64 0)), !dbg !7513
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7513
  %arraydecay10 = getelementptr inbounds [12 x i8], [12 x i8]* %name, i64 0, i64 0, !dbg !7513
  call void @assemble_name(%struct._IO_FILE* %8, i8* %arraydecay10), !dbg !7513
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7513
  %10 = load i64, i64* %size.addr, align 8, !dbg !7513
  %11 = load i32, i32* @ix86_isa_flags, align 4, !dbg !7513
  %and = and i32 %11, 32, !dbg !7513
  %cmp = icmp ne i32 %and, 0, !dbg !7513
  %12 = zext i1 %cmp to i64, !dbg !7513
  %cond = select i1 %cmp, i32 256, i32 128, !dbg !7513
  %div = sdiv i32 %cond, 8, !dbg !7513
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.84, i64 0, i64 0), i64 %10, i32 %div), !dbg !7513
  br label %do.end12, !dbg !7513

do.end12:                                         ; preds = %do.body8
  br label %do.end13, !dbg !7511

do.end13:                                         ; preds = %do.end12
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7515
  ret %struct.rtx_def* %13, !dbg !7516
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @assemble_trampoline_template() #0 !dbg !7517 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %label = alloca [256 x i8], align 16
  %name = alloca i8*, align 8
  %align = alloca i32, align 4
  %symbol = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata [256 x i8]* %label, metadata !7520, metadata !DIExpression()), !dbg !7524
  call void @llvm.dbg.declare(metadata i8** %name, metadata !7525, metadata !DIExpression()), !dbg !7526
  call void @llvm.dbg.declare(metadata i32* %align, metadata !7527, metadata !DIExpression()), !dbg !7528
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol, metadata !7529, metadata !DIExpression()), !dbg !7530
  %0 = load void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 39), align 8, !dbg !7531
  %cmp = icmp ne void (%struct._IO_FILE*)* %0, null, !dbg !7531
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7531

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2576, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !7531
  br label %cond.end, !dbg !7531

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7531

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7531
  %1 = load %struct.rtx_def*, %struct.rtx_def** @initial_trampoline, align 8, !dbg !7532
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !7532
  br i1 %tobool, label %if.then, label %if.end, !dbg !7534

if.then:                                          ; preds = %cond.end
  %2 = load %struct.rtx_def*, %struct.rtx_def** @initial_trampoline, align 8, !dbg !7535
  store %struct.rtx_def* %2, %struct.rtx_def** %retval, align 8, !dbg !7536
  br label %return, !dbg !7536

if.end:                                           ; preds = %cond.end
  %3 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !7537
  call void @switch_to_section(%union.section* %3), !dbg !7538
  %call = call i32 @floor_log2(i64 1), !dbg !7539
  store i32 %call, i32* %align, align 4, !dbg !7540
  %4 = load i32, i32* %align, align 4, !dbg !7541
  %cmp1 = icmp sgt i32 %4, 0, !dbg !7543
  br i1 %cmp1, label %if.then2, label %if.end7, !dbg !7544

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %align, align 4, !dbg !7545
  %cmp3 = icmp ne i32 %5, 0, !dbg !7545
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !7547

if.then4:                                         ; preds = %if.then2
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7545
  %7 = load i32, i32* %align, align 4, !dbg !7545
  %shl = shl i32 1, %7, !dbg !7545
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i64 0, i64 0), i32 %shl), !dbg !7545
  br label %if.end6, !dbg !7545

if.end6:                                          ; preds = %if.then4, %if.then2
  br label %if.end7, !dbg !7545

if.end7:                                          ; preds = %if.end6, %if.end
  %8 = load void (%struct._IO_FILE*, i8*, i64)*, void (%struct._IO_FILE*, i8*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 11), align 8, !dbg !7548
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7549
  call void %8(%struct._IO_FILE* %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.85, i64 0, i64 0), i64 0), !dbg !7550
  %10 = load void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 39), align 8, !dbg !7551
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7552
  call void %10(%struct._IO_FILE* %11), !dbg !7553
  br label %do.body, !dbg !7554

do.body:                                          ; preds = %if.end7
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %label, i64 0, i64 0, !dbg !7555
  %call8 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.85, i64 0, i64 0), i32 0), !dbg !7555
  br label %do.end, !dbg !7555

do.end:                                           ; preds = %do.body
  %arraydecay9 = getelementptr inbounds [256 x i8], [256 x i8]* %label, i64 0, i64 0, !dbg !7557
  %call10 = call i8* @ggc_alloc_string(i8* %arraydecay9, i32 -1), !dbg !7557
  store i8* %call10, i8** %name, align 8, !dbg !7558
  %12 = load i8*, i8** %name, align 8, !dbg !7559
  %call11 = call %struct.rtx_def* @gen_rtx_fmt_s00_stat(i32 45, i32 16, i8* %12), !dbg !7559
  store %struct.rtx_def* %call11, %struct.rtx_def** %symbol, align 8, !dbg !7560
  %13 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !7561
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !7561
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7561
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !7561
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7561
  store i32 2, i32* %rt_int, align 8, !dbg !7562
  %14 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !7563
  %call12 = call %struct.rtx_def* @gen_const_mem(i32 1, %struct.rtx_def* %14), !dbg !7564
  store %struct.rtx_def* %call12, %struct.rtx_def** @initial_trampoline, align 8, !dbg !7565
  %15 = load %struct.rtx_def*, %struct.rtx_def** @initial_trampoline, align 8, !dbg !7566
  call void @set_mem_align(%struct.rtx_def* %15, i32 8), !dbg !7567
  %16 = load %struct.rtx_def*, %struct.rtx_def** @initial_trampoline, align 8, !dbg !7568
  %call13 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 10), !dbg !7569
  call void @set_mem_size(%struct.rtx_def* %16, %struct.rtx_def* %call13), !dbg !7570
  %17 = load %struct.rtx_def*, %struct.rtx_def** @initial_trampoline, align 8, !dbg !7571
  store %struct.rtx_def* %17, %struct.rtx_def** %retval, align 8, !dbg !7572
  br label %return, !dbg !7572

return:                                           ; preds = %do.end, %if.then
  %18 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !7573
  ret %struct.rtx_def* %18, !dbg !7573
}

declare dso_local %struct.rtx_def* @gen_const_mem(i32, %struct.rtx_def*) #2

declare dso_local void @set_mem_size(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @integer_asm_op(i32 %size, i32 %aligned_p) #0 !dbg !7574 {
entry:
  %retval = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %aligned_p.addr = alloca i32, align 4
  %ops = alloca %struct.asm_int_op*, align 8
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !7577, metadata !DIExpression()), !dbg !7578
  store i32 %aligned_p, i32* %aligned_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %aligned_p.addr, metadata !7579, metadata !DIExpression()), !dbg !7580
  call void @llvm.dbg.declare(metadata %struct.asm_int_op** %ops, metadata !7581, metadata !DIExpression()), !dbg !7589
  %0 = load i32, i32* %aligned_p.addr, align 4, !dbg !7590
  %tobool = icmp ne i32 %0, 0, !dbg !7590
  br i1 %tobool, label %if.then, label %if.else, !dbg !7592

if.then:                                          ; preds = %entry
  store %struct.asm_int_op* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 3), %struct.asm_int_op** %ops, align 8, !dbg !7593
  br label %if.end, !dbg !7594

if.else:                                          ; preds = %entry
  store %struct.asm_int_op* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 4), %struct.asm_int_op** %ops, align 8, !dbg !7595
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %1 = load i32, i32* %size.addr, align 4, !dbg !7596
  switch i32 %1, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb1
    i32 4, label %sw.bb2
    i32 8, label %sw.bb3
    i32 16, label %sw.bb4
  ], !dbg !7597

sw.bb:                                            ; preds = %if.end
  %2 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 2), align 8, !dbg !7598
  store i8* %2, i8** %retval, align 8, !dbg !7600
  br label %return, !dbg !7600

sw.bb1:                                           ; preds = %if.end
  %3 = load %struct.asm_int_op*, %struct.asm_int_op** %ops, align 8, !dbg !7601
  %hi = getelementptr inbounds %struct.asm_int_op, %struct.asm_int_op* %3, i32 0, i32 0, !dbg !7602
  %4 = load i8*, i8** %hi, align 8, !dbg !7602
  store i8* %4, i8** %retval, align 8, !dbg !7603
  br label %return, !dbg !7603

sw.bb2:                                           ; preds = %if.end
  %5 = load %struct.asm_int_op*, %struct.asm_int_op** %ops, align 8, !dbg !7604
  %si = getelementptr inbounds %struct.asm_int_op, %struct.asm_int_op* %5, i32 0, i32 1, !dbg !7605
  %6 = load i8*, i8** %si, align 8, !dbg !7605
  store i8* %6, i8** %retval, align 8, !dbg !7606
  br label %return, !dbg !7606

sw.bb3:                                           ; preds = %if.end
  %7 = load %struct.asm_int_op*, %struct.asm_int_op** %ops, align 8, !dbg !7607
  %di = getelementptr inbounds %struct.asm_int_op, %struct.asm_int_op* %7, i32 0, i32 2, !dbg !7608
  %8 = load i8*, i8** %di, align 8, !dbg !7608
  store i8* %8, i8** %retval, align 8, !dbg !7609
  br label %return, !dbg !7609

sw.bb4:                                           ; preds = %if.end
  %9 = load %struct.asm_int_op*, %struct.asm_int_op** %ops, align 8, !dbg !7610
  %ti = getelementptr inbounds %struct.asm_int_op, %struct.asm_int_op* %9, i32 0, i32 3, !dbg !7611
  %10 = load i8*, i8** %ti, align 8, !dbg !7611
  store i8* %10, i8** %retval, align 8, !dbg !7612
  br label %return, !dbg !7612

sw.default:                                       ; preds = %if.end
  store i8* null, i8** %retval, align 8, !dbg !7613
  br label %return, !dbg !7613

return:                                           ; preds = %sw.default, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %11 = load i8*, i8** %retval, align 8, !dbg !7614
  ret i8* %11, !dbg !7614
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_integer_with_op(i8* %op, %struct.rtx_def* %x) #0 !dbg !7615 {
entry:
  %op.addr = alloca i8*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  store i8* %op, i8** %op.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %op.addr, metadata !7618, metadata !DIExpression()), !dbg !7619
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7620, metadata !DIExpression()), !dbg !7621
  %0 = load i8*, i8** %op.addr, align 8, !dbg !7622
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7623
  %call = call i32 @fputs(i8* %0, %struct._IO_FILE* %1), !dbg !7624
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7625
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7626
  call void @output_addr_const(%struct._IO_FILE* %2, %struct.rtx_def* %3), !dbg !7627
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !7628
  %call1 = call i32 @fputc(i32 10, %struct._IO_FILE* %4), !dbg !7629
  ret void, !dbg !7630
}

declare dso_local void @output_addr_const(%struct._IO_FILE*, %struct.rtx_def*) #2

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @default_assemble_integer(%struct.rtx_def* %x, i32 %size, i32 %aligned_p) #0 !dbg !7631 {
entry:
  %retval = alloca i8, align 1
  %x.addr = alloca %struct.rtx_def*, align 8
  %size.addr = alloca i32, align 4
  %aligned_p.addr = alloca i32, align 4
  %op = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7634, metadata !DIExpression()), !dbg !7635
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !7636, metadata !DIExpression()), !dbg !7637
  store i32 %aligned_p, i32* %aligned_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %aligned_p.addr, metadata !7638, metadata !DIExpression()), !dbg !7639
  call void @llvm.dbg.declare(metadata i8** %op, metadata !7640, metadata !DIExpression()), !dbg !7641
  %0 = load i32, i32* %size.addr, align 4, !dbg !7642
  %1 = load i32, i32* %aligned_p.addr, align 4, !dbg !7643
  %call = call i8* @integer_asm_op(i32 %0, i32 %1), !dbg !7644
  store i8* %call, i8** %op, align 8, !dbg !7641
  %2 = load i32, i32* %size.addr, align 4, !dbg !7645
  %cmp = icmp ugt i32 %2, 4, !dbg !7647
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7648

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %size.addr, align 4, !dbg !7649
  %cmp1 = icmp ugt i32 %3, 4, !dbg !7650
  br i1 %cmp1, label %if.then, label %if.end, !dbg !7651

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !7652
  br label %return, !dbg !7652

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load i8*, i8** %op, align 8, !dbg !7653
  %tobool = icmp ne i8* %4, null, !dbg !7653
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7654

land.rhs:                                         ; preds = %if.end
  %5 = load i8*, i8** %op, align 8, !dbg !7655
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7656
  call void @assemble_integer_with_op(i8* %5, %struct.rtx_def* %6), !dbg !7657
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %7 = phi i1 [ false, %if.end ], [ true, %land.rhs ], !dbg !7658
  %land.ext = zext i1 %7 to i32, !dbg !7654
  %conv = trunc i32 %land.ext to i8, !dbg !7653
  store i8 %conv, i8* %retval, align 1, !dbg !7659
  br label %return, !dbg !7659

return:                                           ; preds = %land.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !7660
  ret i8 %8, !dbg !7660
}

declare dso_local i32 @mode_for_size(i32, i32, i32) #2

declare dso_local %struct.rtx_def* @simplify_subreg(i32, %struct.rtx_def*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_real(%struct.real_value* byval(%struct.real_value) align 8 %d, i32 %mode, i32 %align) #0 !dbg !7661 {
entry:
  %mode.addr = alloca i32, align 4
  %align.addr = alloca i32, align 4
  %data = alloca [4 x i64], align 16
  %i = alloca i32, align 4
  %bitsize = alloca i32, align 4
  %nelts = alloca i32, align 4
  %nunits = alloca i32, align 4
  %units_per = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.real_value* %d, metadata !7664, metadata !DIExpression()), !dbg !7665
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !7666, metadata !DIExpression()), !dbg !7667
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !7668, metadata !DIExpression()), !dbg !7669
  call void @llvm.dbg.declare(metadata [4 x i64]* %data, metadata !7670, metadata !DIExpression()), !dbg !7672
  %0 = bitcast [4 x i64]* %data to i8*, !dbg !7672
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 32, i1 false), !dbg !7672
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7673, metadata !DIExpression()), !dbg !7674
  call void @llvm.dbg.declare(metadata i32* %bitsize, metadata !7675, metadata !DIExpression()), !dbg !7676
  call void @llvm.dbg.declare(metadata i32* %nelts, metadata !7677, metadata !DIExpression()), !dbg !7678
  call void @llvm.dbg.declare(metadata i32* %nunits, metadata !7679, metadata !DIExpression()), !dbg !7680
  call void @llvm.dbg.declare(metadata i32* %units_per, metadata !7681, metadata !DIExpression()), !dbg !7682
  %1 = load i32, i32* %mode.addr, align 4, !dbg !7683
  %idxprom = zext i32 %1 to i64, !dbg !7683
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !7683
  %2 = load i8, i8* %arrayidx, align 1, !dbg !7683
  %conv = zext i8 %2 to i16, !dbg !7683
  %conv1 = zext i16 %conv to i32, !dbg !7683
  store i32 %conv1, i32* %nunits, align 4, !dbg !7684
  %3 = load i32, i32* %nunits, align 4, !dbg !7685
  %mul = mul nsw i32 %3, 8, !dbg !7686
  store i32 %mul, i32* %bitsize, align 4, !dbg !7687
  %4 = load i32, i32* %bitsize, align 4, !dbg !7688
  %add = add nsw i32 %4, 32, !dbg !7688
  %sub = sub nsw i32 %add, 1, !dbg !7688
  %div = sdiv i32 %sub, 32, !dbg !7688
  store i32 %div, i32* %nelts, align 4, !dbg !7689
  store i32 4, i32* %units_per, align 4, !dbg !7690
  %arraydecay = getelementptr inbounds [4 x i64], [4 x i64]* %data, i64 0, i64 0, !dbg !7691
  %5 = load i32, i32* %mode.addr, align 4, !dbg !7692
  %call = call i64 @real_to_target(i64* %arraydecay, %struct.real_value* %d, i32 %5), !dbg !7693
  %arrayidx2 = getelementptr inbounds [4 x i64], [4 x i64]* %data, i64 0, i64 0, !dbg !7694
  %6 = load i64, i64* %arrayidx2, align 16, !dbg !7694
  %conv3 = trunc i64 %6 to i32, !dbg !7694
  %conv4 = zext i32 %conv3 to i64, !dbg !7694
  %call5 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv4), !dbg !7694
  %7 = load i32, i32* %nunits, align 4, !dbg !7695
  %8 = load i32, i32* %units_per, align 4, !dbg !7695
  %cmp = icmp slt i32 %7, %8, !dbg !7695
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7695

cond.true:                                        ; preds = %entry
  %9 = load i32, i32* %nunits, align 4, !dbg !7695
  br label %cond.end, !dbg !7695

cond.false:                                       ; preds = %entry
  %10 = load i32, i32* %units_per, align 4, !dbg !7695
  br label %cond.end, !dbg !7695

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %9, %cond.true ], [ %10, %cond.false ], !dbg !7695
  %11 = load i32, i32* %align.addr, align 4, !dbg !7696
  %call7 = call zeroext i8 @assemble_integer(%struct.rtx_def* %call5, i32 %cond, i32 %11, i32 1), !dbg !7697
  %12 = load i32, i32* %units_per, align 4, !dbg !7698
  %13 = load i32, i32* %nunits, align 4, !dbg !7699
  %sub8 = sub nsw i32 %13, %12, !dbg !7699
  store i32 %sub8, i32* %nunits, align 4, !dbg !7699
  %14 = load i32, i32* %align.addr, align 4, !dbg !7700
  %call9 = call i32 @min_align(i32 %14, i32 32), !dbg !7701
  store i32 %call9, i32* %align.addr, align 4, !dbg !7702
  store i32 1, i32* %i, align 4, !dbg !7703
  br label %for.cond, !dbg !7705

for.cond:                                         ; preds = %for.inc, %cond.end
  %15 = load i32, i32* %i, align 4, !dbg !7706
  %16 = load i32, i32* %nelts, align 4, !dbg !7708
  %cmp10 = icmp slt i32 %15, %16, !dbg !7709
  br i1 %cmp10, label %for.body, label %for.end, !dbg !7710

for.body:                                         ; preds = %for.cond
  %17 = load i32, i32* %i, align 4, !dbg !7711
  %idxprom12 = sext i32 %17 to i64, !dbg !7711
  %arrayidx13 = getelementptr inbounds [4 x i64], [4 x i64]* %data, i64 0, i64 %idxprom12, !dbg !7711
  %18 = load i64, i64* %arrayidx13, align 8, !dbg !7711
  %conv14 = trunc i64 %18 to i32, !dbg !7711
  %conv15 = zext i32 %conv14 to i64, !dbg !7711
  %call16 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv15), !dbg !7711
  %19 = load i32, i32* %nunits, align 4, !dbg !7713
  %20 = load i32, i32* %units_per, align 4, !dbg !7713
  %cmp17 = icmp slt i32 %19, %20, !dbg !7713
  br i1 %cmp17, label %cond.true19, label %cond.false20, !dbg !7713

cond.true19:                                      ; preds = %for.body
  %21 = load i32, i32* %nunits, align 4, !dbg !7713
  br label %cond.end21, !dbg !7713

cond.false20:                                     ; preds = %for.body
  %22 = load i32, i32* %units_per, align 4, !dbg !7713
  br label %cond.end21, !dbg !7713

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi i32 [ %21, %cond.true19 ], [ %22, %cond.false20 ], !dbg !7713
  %23 = load i32, i32* %align.addr, align 4, !dbg !7714
  %call23 = call zeroext i8 @assemble_integer(%struct.rtx_def* %call16, i32 %cond22, i32 %23, i32 1), !dbg !7715
  %24 = load i32, i32* %units_per, align 4, !dbg !7716
  %25 = load i32, i32* %nunits, align 4, !dbg !7717
  %sub24 = sub nsw i32 %25, %24, !dbg !7717
  store i32 %sub24, i32* %nunits, align 4, !dbg !7717
  br label %for.inc, !dbg !7718

for.inc:                                          ; preds = %cond.end21
  %26 = load i32, i32* %i, align 4, !dbg !7719
  %inc = add nsw i32 %26, 1, !dbg !7719
  store i32 %inc, i32* %i, align 4, !dbg !7719
  br label %for.cond, !dbg !7720, !llvm.loop !7721

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7723
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local i64 @real_to_target(i64*, %struct.real_value*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @min_align(i32 %a, i32 %b) #0 !dbg !7724 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !7727, metadata !DIExpression()), !dbg !7728
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !7729, metadata !DIExpression()), !dbg !7730
  %0 = load i32, i32* %a.addr, align 4, !dbg !7731
  %1 = load i32, i32* %b.addr, align 4, !dbg !7732
  %or = or i32 %0, %1, !dbg !7733
  %2 = load i32, i32* %a.addr, align 4, !dbg !7734
  %3 = load i32, i32* %b.addr, align 4, !dbg !7735
  %or1 = or i32 %2, %3, !dbg !7736
  %sub = sub i32 0, %or1, !dbg !7737
  %and = and i32 %or, %sub, !dbg !7738
  ret i32 %and, !dbg !7739
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.htab* @constant_pool_htab() #0 !dbg !7740 {
entry:
  %0 = load %struct.htab*, %struct.htab** @const_desc_htab, align 8, !dbg !7743
  ret %struct.htab* %0, !dbg !7744
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @output_constant_def(%union.tree_node* %exp, i32 %defer) #0 !dbg !7745 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %defer.addr = alloca i32, align 4
  %desc = alloca %struct.constant_descriptor_tree*, align 8
  %key = alloca %struct.constant_descriptor_tree, align 8
  %loc = alloca i8**, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !7748, metadata !DIExpression()), !dbg !7749
  store i32 %defer, i32* %defer.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %defer.addr, metadata !7750, metadata !DIExpression()), !dbg !7751
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_tree** %desc, metadata !7752, metadata !DIExpression()), !dbg !7753
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_tree* %key, metadata !7754, metadata !DIExpression()), !dbg !7755
  call void @llvm.dbg.declare(metadata i8*** %loc, metadata !7756, metadata !DIExpression()), !dbg !7757
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7758
  %value = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %key, i32 0, i32 1, !dbg !7759
  store %union.tree_node* %0, %union.tree_node** %value, align 8, !dbg !7760
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7761
  %call = call i32 @const_hash_1(%union.tree_node* %1), !dbg !7762
  %hash = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %key, i32 0, i32 2, !dbg !7763
  store i32 %call, i32* %hash, align 8, !dbg !7764
  %2 = load %struct.htab*, %struct.htab** @const_desc_htab, align 8, !dbg !7765
  %3 = bitcast %struct.constant_descriptor_tree* %key to i8*, !dbg !7766
  %hash1 = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %key, i32 0, i32 2, !dbg !7767
  %4 = load i32, i32* %hash1, align 8, !dbg !7767
  %call2 = call i8** @htab_find_slot_with_hash(%struct.htab* %2, i8* %3, i32 %4, i32 1), !dbg !7768
  store i8** %call2, i8*** %loc, align 8, !dbg !7769
  %5 = load i8**, i8*** %loc, align 8, !dbg !7770
  %6 = load i8*, i8** %5, align 8, !dbg !7771
  %7 = bitcast i8* %6 to %struct.constant_descriptor_tree*, !dbg !7772
  store %struct.constant_descriptor_tree* %7, %struct.constant_descriptor_tree** %desc, align 8, !dbg !7773
  %8 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !7774
  %cmp = icmp eq %struct.constant_descriptor_tree* %8, null, !dbg !7776
  br i1 %cmp, label %if.then, label %if.end, !dbg !7777

if.then:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7778
  %call3 = call %struct.constant_descriptor_tree* @build_constant_desc(%union.tree_node* %9), !dbg !7780
  store %struct.constant_descriptor_tree* %call3, %struct.constant_descriptor_tree** %desc, align 8, !dbg !7781
  %hash4 = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %key, i32 0, i32 2, !dbg !7782
  %10 = load i32, i32* %hash4, align 8, !dbg !7782
  %11 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !7783
  %hash5 = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %11, i32 0, i32 2, !dbg !7784
  store i32 %10, i32* %hash5, align 8, !dbg !7785
  %12 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !7786
  %13 = bitcast %struct.constant_descriptor_tree* %12 to i8*, !dbg !7786
  %14 = load i8**, i8*** %loc, align 8, !dbg !7787
  store i8* %13, i8** %14, align 8, !dbg !7788
  br label %if.end, !dbg !7789

if.end:                                           ; preds = %if.then, %entry
  %15 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !7790
  %16 = load i32, i32* %defer.addr, align 4, !dbg !7791
  call void @maybe_output_constant_def_contents(%struct.constant_descriptor_tree* %15, i32 %16), !dbg !7792
  %17 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !7793
  %rtl = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %17, i32 0, i32 0, !dbg !7794
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !7794
  ret %struct.rtx_def* %18, !dbg !7795
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_hash_1(%union.tree_node* %exp) #0 !dbg !7796 {
entry:
  %retval = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %p = alloca i8*, align 8
  %hi = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %code = alloca i32, align 4
  %idx = alloca i64, align 8
  %value = alloca %union.tree_node*, align 8
  %value43 = alloca %struct.addr_const, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !7800, metadata !DIExpression()), !dbg !7801
  call void @llvm.dbg.declare(metadata i8** %p, metadata !7802, metadata !DIExpression()), !dbg !7803
  call void @llvm.dbg.declare(metadata i32* %hi, metadata !7804, metadata !DIExpression()), !dbg !7805
  call void @llvm.dbg.declare(metadata i32* %len, metadata !7806, metadata !DIExpression()), !dbg !7807
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7808, metadata !DIExpression()), !dbg !7809
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7810, metadata !DIExpression()), !dbg !7811
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7812
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7812
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7812
  %bf.load = load i64, i64* %1, align 8, !dbg !7812
  %bf.clear = and i64 %bf.load, 65535, !dbg !7812
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7812
  store i32 %bf.cast, i32* %code, align 4, !dbg !7811
  %2 = load i32, i32* %code, align 4, !dbg !7813
  switch i32 %2, label %sw.default94 [
    i32 23, label %sw.bb
    i32 24, label %sw.bb2
    i32 25, label %sw.bb3
    i32 28, label %sw.bb5
    i32 26, label %sw.bb7
    i32 51, label %sw.bb11
    i32 121, label %sw.bb42
    i32 122, label %sw.bb42
    i32 63, label %sw.bb77
    i32 66, label %sw.bb77
    i32 64, label %sw.bb77
    i32 116, label %sw.bb87
    i32 113, label %sw.bb87
  ], !dbg !7814

sw.bb:                                            ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7815
  %int_cst = bitcast %union.tree_node* %3 to %struct.tree_int_cst*, !dbg !7815
  %int_cst1 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7815
  %4 = bitcast %struct.double_int* %int_cst1 to i8*, !dbg !7817
  store i8* %4, i8** %p, align 8, !dbg !7818
  store i32 16, i32* %len, align 4, !dbg !7819
  br label %sw.epilog95, !dbg !7820

sw.bb2:                                           ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7821
  %real_cst = bitcast %union.tree_node* %5 to %struct.tree_real_cst*, !dbg !7821
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !7821
  %6 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !7821
  %call = call i32 @real_hash(%struct.real_value* %6), !dbg !7822
  store i32 %call, i32* %retval, align 4, !dbg !7823
  br label %return, !dbg !7823

sw.bb3:                                           ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7824
  %fixed_cst = bitcast %union.tree_node* %7 to %struct.tree_fixed_cst*, !dbg !7824
  %fixed_cst_ptr = getelementptr inbounds %struct.tree_fixed_cst, %struct.tree_fixed_cst* %fixed_cst, i32 0, i32 1, !dbg !7824
  %8 = load %struct.fixed_value*, %struct.fixed_value** %fixed_cst_ptr, align 8, !dbg !7824
  %call4 = call i32 @fixed_hash(%struct.fixed_value* %8), !dbg !7825
  store i32 %call4, i32* %retval, align 4, !dbg !7826
  br label %return, !dbg !7826

sw.bb5:                                           ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7827
  %string = bitcast %union.tree_node* %9 to %struct.tree_string*, !dbg !7827
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 2, !dbg !7827
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !7827
  store i8* %arraydecay, i8** %p, align 8, !dbg !7828
  %10 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7829
  %string6 = bitcast %union.tree_node* %10 to %struct.tree_string*, !dbg !7829
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string6, i32 0, i32 1, !dbg !7829
  %11 = load i32, i32* %length, align 8, !dbg !7829
  store i32 %11, i32* %len, align 4, !dbg !7830
  br label %sw.epilog95, !dbg !7831

sw.bb7:                                           ; preds = %entry
  %12 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7832
  %complex = bitcast %union.tree_node* %12 to %struct.tree_complex*, !dbg !7832
  %real = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex, i32 0, i32 1, !dbg !7832
  %13 = load %union.tree_node*, %union.tree_node** %real, align 8, !dbg !7832
  %call8 = call i32 @const_hash_1(%union.tree_node* %13), !dbg !7833
  %mul = mul i32 %call8, 5, !dbg !7834
  %14 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7835
  %complex9 = bitcast %union.tree_node* %14 to %struct.tree_complex*, !dbg !7835
  %imag = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex9, i32 0, i32 2, !dbg !7835
  %15 = load %union.tree_node*, %union.tree_node** %imag, align 8, !dbg !7835
  %call10 = call i32 @const_hash_1(%union.tree_node* %15), !dbg !7836
  %add = add i32 %mul, %call10, !dbg !7837
  store i32 %add, i32* %retval, align 4, !dbg !7838
  br label %return, !dbg !7838

sw.bb11:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %idx, metadata !7839, metadata !DIExpression()), !dbg !7841
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !7842, metadata !DIExpression()), !dbg !7843
  %16 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7844
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !7844
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7844
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7844
  %call12 = call i64 @int_size_in_bytes(%union.tree_node* %17), !dbg !7845
  %add13 = add nsw i64 5, %call12, !dbg !7846
  %conv = trunc i64 %add13 to i32, !dbg !7847
  store i32 %conv, i32* %hi, align 4, !dbg !7848
  store i64 0, i64* %idx, align 8, !dbg !7849
  br label %for.cond, !dbg !7849

for.cond:                                         ; preds = %for.inc, %sw.bb11
  %18 = load i64, i64* %idx, align 8, !dbg !7851
  %19 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7851
  %constructor = bitcast %union.tree_node* %19 to %struct.tree_constructor*, !dbg !7851
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !7851
  %20 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !7851
  %tobool = icmp ne %struct.VEC_constructor_elt_gc* %20, null, !dbg !7851
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7851

cond.true:                                        ; preds = %for.cond
  %21 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7851
  %constructor14 = bitcast %union.tree_node* %21 to %struct.tree_constructor*, !dbg !7851
  %elts15 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor14, i32 0, i32 1, !dbg !7851
  %22 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts15, align 8, !dbg !7851
  %base16 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %22, i32 0, i32 0, !dbg !7851
  br label %cond.end, !dbg !7851

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7851

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base16, %cond.true ], [ null, %cond.false ], !dbg !7851
  %call17 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !7851
  %conv18 = zext i32 %call17 to i64, !dbg !7851
  %cmp = icmp uge i64 %18, %conv18, !dbg !7851
  br i1 %cmp, label %cond.true20, label %cond.false21, !dbg !7851

cond.true20:                                      ; preds = %cond.end
  br label %cond.end35, !dbg !7851

cond.false21:                                     ; preds = %cond.end
  %23 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7851
  %constructor22 = bitcast %union.tree_node* %23 to %struct.tree_constructor*, !dbg !7851
  %elts23 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor22, i32 0, i32 1, !dbg !7851
  %24 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts23, align 8, !dbg !7851
  %tobool24 = icmp ne %struct.VEC_constructor_elt_gc* %24, null, !dbg !7851
  br i1 %tobool24, label %cond.true25, label %cond.false29, !dbg !7851

cond.true25:                                      ; preds = %cond.false21
  %25 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7851
  %constructor26 = bitcast %union.tree_node* %25 to %struct.tree_constructor*, !dbg !7851
  %elts27 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor26, i32 0, i32 1, !dbg !7851
  %26 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts27, align 8, !dbg !7851
  %base28 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %26, i32 0, i32 0, !dbg !7851
  br label %cond.end30, !dbg !7851

cond.false29:                                     ; preds = %cond.false21
  br label %cond.end30, !dbg !7851

cond.end30:                                       ; preds = %cond.false29, %cond.true25
  %cond31 = phi %struct.VEC_constructor_elt_base* [ %base28, %cond.true25 ], [ null, %cond.false29 ], !dbg !7851
  %27 = load i64, i64* %idx, align 8, !dbg !7851
  %conv32 = trunc i64 %27 to i32, !dbg !7851
  %call33 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond31, i32 %conv32), !dbg !7851
  %value34 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call33, i32 0, i32 1, !dbg !7851
  %28 = load %union.tree_node*, %union.tree_node** %value34, align 8, !dbg !7851
  store %union.tree_node* %28, %union.tree_node** %value, align 8, !dbg !7851
  br label %cond.end35, !dbg !7851

cond.end35:                                       ; preds = %cond.end30, %cond.true20
  %cond36 = phi i32 [ 0, %cond.true20 ], [ 1, %cond.end30 ], !dbg !7851
  %tobool37 = icmp ne i32 %cond36, 0, !dbg !7849
  br i1 %tobool37, label %for.body, label %for.end, !dbg !7849

for.body:                                         ; preds = %cond.end35
  %29 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7853
  %tobool38 = icmp ne %union.tree_node* %29, null, !dbg !7853
  br i1 %tobool38, label %if.then, label %if.end, !dbg !7855

if.then:                                          ; preds = %for.body
  %30 = load i32, i32* %hi, align 4, !dbg !7856
  %mul39 = mul i32 %30, 603, !dbg !7857
  %31 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !7858
  %call40 = call i32 @const_hash_1(%union.tree_node* %31), !dbg !7859
  %add41 = add i32 %mul39, %call40, !dbg !7860
  store i32 %add41, i32* %hi, align 4, !dbg !7861
  br label %if.end, !dbg !7862

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !7853

for.inc:                                          ; preds = %if.end
  %32 = load i64, i64* %idx, align 8, !dbg !7851
  %inc = add i64 %32, 1, !dbg !7851
  store i64 %inc, i64* %idx, align 8, !dbg !7851
  br label %for.cond, !dbg !7851, !llvm.loop !7863

for.end:                                          ; preds = %cond.end35
  %33 = load i32, i32* %hi, align 4, !dbg !7865
  store i32 %33, i32* %retval, align 4, !dbg !7866
  br label %return, !dbg !7866

sw.bb42:                                          ; preds = %entry, %entry
  call void @llvm.dbg.declare(metadata %struct.addr_const* %value43, metadata !7867, metadata !DIExpression()), !dbg !7873
  %34 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7874
  call void @decode_addr_const(%union.tree_node* %34, %struct.addr_const* %value43), !dbg !7875
  %base44 = getelementptr inbounds %struct.addr_const, %struct.addr_const* %value43, i32 0, i32 0, !dbg !7876
  %35 = load %struct.rtx_def*, %struct.rtx_def** %base44, align 8, !dbg !7876
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !7876
  %bf.load45 = load i32, i32* %36, align 8, !dbg !7876
  %bf.clear46 = and i32 %bf.load45, 65535, !dbg !7876
  switch i32 %bf.clear46, label %sw.default [
    i32 45, label %sw.bb47
    i32 44, label %sw.bb64
  ], !dbg !7877

sw.bb47:                                          ; preds = %sw.bb42
  %offset = getelementptr inbounds %struct.addr_const, %struct.addr_const* %value43, i32 0, i32 1, !dbg !7878
  %37 = load i64, i64* %offset, align 8, !dbg !7878
  %conv48 = trunc i64 %37 to i32, !dbg !7880
  store i32 %conv48, i32* %hi, align 4, !dbg !7881
  %base49 = getelementptr inbounds %struct.addr_const, %struct.addr_const* %value43, i32 0, i32 0, !dbg !7882
  %38 = load %struct.rtx_def*, %struct.rtx_def** %base49, align 8, !dbg !7882
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !7882
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7882
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7882
  %rt_str = bitcast %union.rtunion_def* %arrayidx to i8**, !dbg !7882
  %39 = load i8*, i8** %rt_str, align 8, !dbg !7882
  store i8* %39, i8** %p, align 8, !dbg !7883
  store i32 0, i32* %i, align 4, !dbg !7884
  br label %for.cond50, !dbg !7886

for.cond50:                                       ; preds = %for.inc61, %sw.bb47
  %40 = load i8*, i8** %p, align 8, !dbg !7887
  %41 = load i32, i32* %i, align 4, !dbg !7889
  %idxprom = sext i32 %41 to i64, !dbg !7887
  %arrayidx51 = getelementptr inbounds i8, i8* %40, i64 %idxprom, !dbg !7887
  %42 = load i8, i8* %arrayidx51, align 1, !dbg !7887
  %conv52 = sext i8 %42 to i32, !dbg !7887
  %cmp53 = icmp ne i32 %conv52, 0, !dbg !7890
  br i1 %cmp53, label %for.body55, label %for.end63, !dbg !7891

for.body55:                                       ; preds = %for.cond50
  %43 = load i32, i32* %hi, align 4, !dbg !7892
  %mul56 = mul i32 %43, 613, !dbg !7893
  %44 = load i8*, i8** %p, align 8, !dbg !7894
  %45 = load i32, i32* %i, align 4, !dbg !7895
  %idxprom57 = sext i32 %45 to i64, !dbg !7894
  %arrayidx58 = getelementptr inbounds i8, i8* %44, i64 %idxprom57, !dbg !7894
  %46 = load i8, i8* %arrayidx58, align 1, !dbg !7894
  %conv59 = sext i8 %46 to i32, !dbg !7896
  %add60 = add i32 %mul56, %conv59, !dbg !7897
  store i32 %add60, i32* %hi, align 4, !dbg !7898
  br label %for.inc61, !dbg !7899

for.inc61:                                        ; preds = %for.body55
  %47 = load i32, i32* %i, align 4, !dbg !7900
  %inc62 = add nsw i32 %47, 1, !dbg !7900
  store i32 %inc62, i32* %i, align 4, !dbg !7900
  br label %for.cond50, !dbg !7901, !llvm.loop !7902

for.end63:                                        ; preds = %for.cond50
  br label %sw.epilog, !dbg !7904

sw.bb64:                                          ; preds = %sw.bb42
  %offset65 = getelementptr inbounds %struct.addr_const, %struct.addr_const* %value43, i32 0, i32 1, !dbg !7905
  %48 = load i64, i64* %offset65, align 8, !dbg !7905
  %base66 = getelementptr inbounds %struct.addr_const, %struct.addr_const* %value43, i32 0, i32 0, !dbg !7906
  %49 = load %struct.rtx_def*, %struct.rtx_def** %base66, align 8, !dbg !7906
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !7906
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !7906
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 0, !dbg !7906
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**, !dbg !7906
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7906
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !7906
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !7906
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 6, !dbg !7906
  %rt_int = bitcast %union.rtunion_def* %arrayidx72 to i32*, !dbg !7906
  %51 = load i32, i32* %rt_int, align 8, !dbg !7906
  %mul73 = mul nsw i32 %51, 13, !dbg !7907
  %conv74 = sext i32 %mul73 to i64, !dbg !7906
  %add75 = add nsw i64 %48, %conv74, !dbg !7908
  %conv76 = trunc i64 %add75 to i32, !dbg !7909
  store i32 %conv76, i32* %hi, align 4, !dbg !7910
  br label %sw.epilog, !dbg !7911

sw.default:                                       ; preds = %sw.bb42
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2947, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !7912
  br label %sw.epilog, !dbg !7913

sw.epilog:                                        ; preds = %sw.default, %sw.bb64, %for.end63
  %52 = load i32, i32* %hi, align 4, !dbg !7914
  store i32 %52, i32* %retval, align 4, !dbg !7915
  br label %return, !dbg !7915

sw.bb77:                                          ; preds = %entry, %entry, %entry
  %53 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7916
  %exp78 = bitcast %union.tree_node* %53 to %struct.tree_exp*, !dbg !7916
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp78, i32 0, i32 3, !dbg !7916
  %arrayidx79 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7916
  %54 = load %union.tree_node*, %union.tree_node** %arrayidx79, align 8, !dbg !7916
  %call80 = call i32 @const_hash_1(%union.tree_node* %54), !dbg !7917
  %mul81 = mul i32 %call80, 9, !dbg !7918
  %55 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7919
  %exp82 = bitcast %union.tree_node* %55 to %struct.tree_exp*, !dbg !7919
  %operands83 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp82, i32 0, i32 3, !dbg !7919
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands83, i64 0, i64 1, !dbg !7919
  %56 = load %union.tree_node*, %union.tree_node** %arrayidx84, align 8, !dbg !7919
  %call85 = call i32 @const_hash_1(%union.tree_node* %56), !dbg !7920
  %add86 = add i32 %mul81, %call85, !dbg !7921
  store i32 %add86, i32* %retval, align 4, !dbg !7922
  br label %return, !dbg !7922

sw.bb87:                                          ; preds = %entry, %entry
  %57 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7923
  %exp88 = bitcast %union.tree_node* %57 to %struct.tree_exp*, !dbg !7923
  %operands89 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp88, i32 0, i32 3, !dbg !7923
  %arrayidx90 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands89, i64 0, i64 0, !dbg !7923
  %58 = load %union.tree_node*, %union.tree_node** %arrayidx90, align 8, !dbg !7923
  %call91 = call i32 @const_hash_1(%union.tree_node* %58), !dbg !7924
  %mul92 = mul i32 %call91, 7, !dbg !7925
  %add93 = add i32 %mul92, 2, !dbg !7926
  store i32 %add93, i32* %retval, align 4, !dbg !7927
  br label %return, !dbg !7927

sw.default94:                                     ; preds = %entry
  %59 = load i32, i32* %code, align 4, !dbg !7928
  store i32 %59, i32* %retval, align 4, !dbg !7929
  br label %return, !dbg !7929

sw.epilog95:                                      ; preds = %sw.bb5, %sw.bb
  %60 = load i32, i32* %len, align 4, !dbg !7930
  store i32 %60, i32* %hi, align 4, !dbg !7931
  store i32 0, i32* %i, align 4, !dbg !7932
  br label %for.cond96, !dbg !7934

for.cond96:                                       ; preds = %for.inc105, %sw.epilog95
  %61 = load i32, i32* %i, align 4, !dbg !7935
  %62 = load i32, i32* %len, align 4, !dbg !7937
  %cmp97 = icmp slt i32 %61, %62, !dbg !7938
  br i1 %cmp97, label %for.body99, label %for.end107, !dbg !7939

for.body99:                                       ; preds = %for.cond96
  %63 = load i32, i32* %hi, align 4, !dbg !7940
  %mul100 = mul i32 %63, 613, !dbg !7941
  %64 = load i8*, i8** %p, align 8, !dbg !7942
  %65 = load i32, i32* %i, align 4, !dbg !7943
  %idxprom101 = sext i32 %65 to i64, !dbg !7942
  %arrayidx102 = getelementptr inbounds i8, i8* %64, i64 %idxprom101, !dbg !7942
  %66 = load i8, i8* %arrayidx102, align 1, !dbg !7942
  %conv103 = sext i8 %66 to i32, !dbg !7944
  %add104 = add i32 %mul100, %conv103, !dbg !7945
  store i32 %add104, i32* %hi, align 4, !dbg !7946
  br label %for.inc105, !dbg !7947

for.inc105:                                       ; preds = %for.body99
  %67 = load i32, i32* %i, align 4, !dbg !7948
  %inc106 = add nsw i32 %67, 1, !dbg !7948
  store i32 %inc106, i32* %i, align 4, !dbg !7948
  br label %for.cond96, !dbg !7949, !llvm.loop !7950

for.end107:                                       ; preds = %for.cond96
  %68 = load i32, i32* %hi, align 4, !dbg !7952
  store i32 %68, i32* %retval, align 4, !dbg !7953
  br label %return, !dbg !7953

return:                                           ; preds = %for.end107, %sw.default94, %sw.bb87, %sw.bb77, %sw.epilog, %for.end, %sw.bb7, %sw.bb3, %sw.bb2
  %69 = load i32, i32* %retval, align 4, !dbg !7954
  ret i32 %69, !dbg !7954
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constant_descriptor_tree* @build_constant_desc(%union.tree_node* %exp) #0 !dbg !7955 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %symbol = alloca %struct.rtx_def*, align 8
  %rtl = alloca %struct.rtx_def*, align 8
  %label = alloca [256 x i8], align 16
  %labelno = alloca i32, align 4
  %desc = alloca %struct.constant_descriptor_tree*, align 8
  %sect = alloca %union.section*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !7958, metadata !DIExpression()), !dbg !7959
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol, metadata !7960, metadata !DIExpression()), !dbg !7961
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtl, metadata !7962, metadata !DIExpression()), !dbg !7963
  call void @llvm.dbg.declare(metadata [256 x i8]* %label, metadata !7964, metadata !DIExpression()), !dbg !7965
  call void @llvm.dbg.declare(metadata i32* %labelno, metadata !7966, metadata !DIExpression()), !dbg !7967
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_tree** %desc, metadata !7968, metadata !DIExpression()), !dbg !7969
  %call = call i8* @ggc_alloc_stat(i64 24), !dbg !7970
  %0 = bitcast i8* %call to %struct.constant_descriptor_tree*, !dbg !7970
  store %struct.constant_descriptor_tree* %0, %struct.constant_descriptor_tree** %desc, align 8, !dbg !7971
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7972
  %call1 = call %union.tree_node* @copy_constant(%union.tree_node* %1), !dbg !7973
  %2 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !7974
  %value = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %2, i32 0, i32 1, !dbg !7975
  store %union.tree_node* %call1, %union.tree_node** %value, align 8, !dbg !7976
  %3 = load i32, i32* @flag_mudflap, align 4, !dbg !7977
  %tobool = icmp ne i32 %3, 0, !dbg !7977
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7979

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7980
  %call2 = call i32 @mf_marked_p(%union.tree_node* %4), !dbg !7981
  %tobool3 = icmp ne i32 %call2, 0, !dbg !7981
  br i1 %tobool3, label %if.then, label %if.end, !dbg !7982

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !7983
  %value4 = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %5, i32 0, i32 1, !dbg !7984
  %6 = load %union.tree_node*, %union.tree_node** %value4, align 8, !dbg !7984
  %call5 = call %union.tree_node* @mf_mark(%union.tree_node* %6), !dbg !7985
  br label %if.end, !dbg !7985

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load i32, i32* @const_labelno, align 4, !dbg !7986
  %inc = add nsw i32 %7, 1, !dbg !7986
  store i32 %inc, i32* @const_labelno, align 4, !dbg !7986
  store i32 %7, i32* %labelno, align 4, !dbg !7987
  br label %do.body, !dbg !7988

do.body:                                          ; preds = %if.end
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %label, i64 0, i64 0, !dbg !7989
  %8 = load i32, i32* %labelno, align 4, !dbg !7989
  %call6 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86, i64 0, i64 0), i32 %8), !dbg !7989
  br label %do.end, !dbg !7989

do.end:                                           ; preds = %do.body
  %call7 = call zeroext i8 @use_object_blocks_p(), !dbg !7991
  %tobool8 = icmp ne i8 %call7, 0, !dbg !7991
  br i1 %tobool8, label %if.then9, label %if.else, !dbg !7993

if.then9:                                         ; preds = %do.end
  call void @llvm.dbg.declare(metadata %union.section** %sect, metadata !7994, metadata !DIExpression()), !dbg !7996
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !7997
  %call10 = call %union.section* @get_constant_section(%union.tree_node* %9), !dbg !7998
  store %union.section* %call10, %union.section** %sect, align 8, !dbg !7996
  %arraydecay11 = getelementptr inbounds [256 x i8], [256 x i8]* %label, i64 0, i64 0, !dbg !7999
  %call12 = call i8* @ggc_alloc_string(i8* %arraydecay11, i32 -1), !dbg !7999
  %10 = load %union.section*, %union.section** %sect, align 8, !dbg !8000
  %call13 = call %struct.object_block* @get_block_for_section(%union.section* %10), !dbg !8001
  %call14 = call %struct.rtx_def* @create_block_symbol(i8* %call12, %struct.object_block* %call13, i64 -1), !dbg !8002
  store %struct.rtx_def* %call14, %struct.rtx_def** %symbol, align 8, !dbg !8003
  br label %if.end18, !dbg !8004

if.else:                                          ; preds = %do.end
  %arraydecay15 = getelementptr inbounds [256 x i8], [256 x i8]* %label, i64 0, i64 0, !dbg !8005
  %call16 = call i8* @ggc_alloc_string(i8* %arraydecay15, i32 -1), !dbg !8005
  %call17 = call %struct.rtx_def* @gen_rtx_fmt_s00_stat(i32 45, i32 16, i8* %call16), !dbg !8005
  store %struct.rtx_def* %call17, %struct.rtx_def** %symbol, align 8, !dbg !8006
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then9
  %11 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8007
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !8007
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8007
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8007
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8007
  %12 = load i32, i32* %rt_int, align 8, !dbg !8008
  %or = or i32 %12, 2, !dbg !8008
  store i32 %or, i32* %rt_int, align 8, !dbg !8008
  %13 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8009
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !8009
  %bf.load = load i32, i32* %14, align 8, !dbg !8009
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !8009
  %bf.clear = and i32 %bf.lshr, 1, !dbg !8009
  %tobool19 = icmp ne i32 %bf.clear, 0, !dbg !8009
  br i1 %tobool19, label %cond.true, label %cond.false, !dbg !8009

cond.true:                                        ; preds = %if.end18
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 3268, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !8009
  br label %cond.end, !dbg !8009

cond.false:                                       ; preds = %if.end18
  br label %cond.end, !dbg !8009

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8009
  %15 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !8009
  %value20 = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %15, i32 0, i32 1, !dbg !8009
  %16 = load %union.tree_node*, %union.tree_node** %value20, align 8, !dbg !8009
  %17 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8009
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !8009
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !8009
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 2, !dbg !8009
  %rt_tree = bitcast %union.rtunion_def* %arrayidx23 to %union.tree_node**, !dbg !8009
  store %union.tree_node* %16, %union.tree_node** %rt_tree, align 8, !dbg !8009
  %18 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8010
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !8010
  %bf.load24 = load i32, i32* %19, align 8, !dbg !8011
  %bf.clear25 = and i32 %bf.load24, -1073741825, !dbg !8011
  %bf.set = or i32 %bf.clear25, 1073741824, !dbg !8011
  store i32 %bf.set, i32* %19, align 8, !dbg !8011
  %20 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8012
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !8012
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8012
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8012
  %base = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !8012
  %22 = bitcast %struct.tree_base* %base to i64*, !dbg !8012
  %bf.load26 = load i64, i64* %22, align 8, !dbg !8012
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !8012
  %bf.cast = trunc i64 %bf.clear27 to i32, !dbg !8012
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !8012
  br i1 %cmp, label %cond.true28, label %cond.false32, !dbg !8012

cond.true28:                                      ; preds = %cond.end
  %23 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8012
  %common29 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !8012
  %type30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2, !dbg !8012
  %24 = load %union.tree_node*, %union.tree_node** %type30, align 8, !dbg !8012
  %call31 = call i32 @vector_type_mode(%union.tree_node* %24), !dbg !8012
  br label %cond.end39, !dbg !8012

cond.false32:                                     ; preds = %cond.end
  %25 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8012
  %common33 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !8012
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !8012
  %26 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !8012
  %type35 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !8012
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type35, i32 0, i32 6, !dbg !8012
  %bf.load36 = load i32, i32* %mode, align 4, !dbg !8012
  %bf.lshr37 = lshr i32 %bf.load36, 16, !dbg !8012
  %bf.clear38 = and i32 %bf.lshr37, 255, !dbg !8012
  br label %cond.end39, !dbg !8012

cond.end39:                                       ; preds = %cond.false32, %cond.true28
  %cond40 = phi i32 [ %call31, %cond.true28 ], [ %bf.clear38, %cond.false32 ], !dbg !8012
  %27 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8013
  %call41 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond40, %struct.rtx_def* %27), !dbg !8014
  store %struct.rtx_def* %call41, %struct.rtx_def** %rtl, align 8, !dbg !8015
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8016
  %29 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8017
  call void @set_mem_attributes(%struct.rtx_def* %28, %union.tree_node* %29, i32 1), !dbg !8018
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8019
  call void @set_mem_alias_set(%struct.rtx_def* %30, i32 0), !dbg !8020
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8021
  %32 = load i32, i32* @const_alias_set, align 4, !dbg !8022
  call void @set_mem_alias_set(%struct.rtx_def* %31, i32 %32), !dbg !8023
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8024
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !8024
  %bf.load42 = load i32, i32* %34, align 8, !dbg !8025
  %bf.clear43 = and i32 %bf.load42, -536870913, !dbg !8025
  %bf.set44 = or i32 %bf.clear43, 536870912, !dbg !8025
  store i32 %bf.set44, i32* %34, align 8, !dbg !8025
  %35 = load void (%union.tree_node*, %struct.rtx_def*, i32)*, void (%union.tree_node*, %struct.rtx_def*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 51), align 8, !dbg !8026
  %36 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8027
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8028
  call void %35(%union.tree_node* %36, %struct.rtx_def* %37, i32 1), !dbg !8029
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8030
  %39 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !8031
  %rtl45 = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %39, i32 0, i32 0, !dbg !8032
  store %struct.rtx_def* %38, %struct.rtx_def** %rtl45, align 8, !dbg !8033
  %40 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !8034
  ret %struct.constant_descriptor_tree* %40, !dbg !8035
}

; Function Attrs: noinline nounwind uwtable
define internal void @maybe_output_constant_def_contents(%struct.constant_descriptor_tree* %desc, i32 %defer) #0 !dbg !8036 {
entry:
  %desc.addr = alloca %struct.constant_descriptor_tree*, align 8
  %defer.addr = alloca i32, align 4
  %symbol = alloca %struct.rtx_def*, align 8
  %exp = alloca %union.tree_node*, align 8
  store %struct.constant_descriptor_tree* %desc, %struct.constant_descriptor_tree** %desc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_tree** %desc.addr, metadata !8039, metadata !DIExpression()), !dbg !8040
  store i32 %defer, i32* %defer.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %defer.addr, metadata !8041, metadata !DIExpression()), !dbg !8042
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol, metadata !8043, metadata !DIExpression()), !dbg !8044
  %0 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc.addr, align 8, !dbg !8045
  %rtl = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %0, i32 0, i32 0, !dbg !8045
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8045
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !8045
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8045
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8045
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8045
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8045
  store %struct.rtx_def* %2, %struct.rtx_def** %symbol, align 8, !dbg !8044
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp, metadata !8046, metadata !DIExpression()), !dbg !8047
  %3 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc.addr, align 8, !dbg !8048
  %value = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %3, i32 0, i32 1, !dbg !8049
  %4 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !8049
  store %union.tree_node* %4, %union.tree_node** %exp, align 8, !dbg !8047
  %5 = load i32, i32* @flag_syntax_only, align 4, !dbg !8050
  %tobool = icmp ne i32 %5, 0, !dbg !8050
  br i1 %tobool, label %if.then, label %if.end, !dbg !8052

if.then:                                          ; preds = %entry
  br label %return, !dbg !8053

if.end:                                           ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !8054
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8054
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !8054
  %bf.load = load i64, i64* %7, align 8, !dbg !8054
  %bf.lshr = lshr i64 %bf.load, 22, !dbg !8054
  %bf.clear = and i64 %bf.lshr, 1, !dbg !8054
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8054
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !8054
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !8056

if.then2:                                         ; preds = %if.end
  br label %return, !dbg !8057

if.end3:                                          ; preds = %if.end
  %8 = load i32, i32* %defer.addr, align 4, !dbg !8058
  %tobool4 = icmp ne i32 %8, 0, !dbg !8058
  br i1 %tobool4, label %if.then5, label %if.end9, !dbg !8060

if.then5:                                         ; preds = %if.end3
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8061
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !8061
  %tobool6 = icmp ne %struct.function* %add.ptr, null, !dbg !8061
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !8064

if.then7:                                         ; preds = %if.then5
  %10 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 2, i32 1), align 8, !dbg !8065
  %inc = add i32 %10, 1, !dbg !8065
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 2, i32 1), align 8, !dbg !8065
  br label %if.end8, !dbg !8066

if.end8:                                          ; preds = %if.then7, %if.then5
  br label %return, !dbg !8067

if.end9:                                          ; preds = %if.end3
  %11 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8068
  call void @output_constant_def_contents(%struct.rtx_def* %11), !dbg !8069
  br label %return, !dbg !8070

return:                                           ; preds = %if.end9, %if.end8, %if.then2, %if.then
  ret void, !dbg !8070
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @lookup_constant_def(%union.tree_node* %exp) #0 !dbg !8071 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %desc = alloca %struct.constant_descriptor_tree*, align 8
  %key = alloca %struct.constant_descriptor_tree, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !8072, metadata !DIExpression()), !dbg !8073
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_tree** %desc, metadata !8074, metadata !DIExpression()), !dbg !8075
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_tree* %key, metadata !8076, metadata !DIExpression()), !dbg !8077
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8078
  %value = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %key, i32 0, i32 1, !dbg !8079
  store %union.tree_node* %0, %union.tree_node** %value, align 8, !dbg !8080
  %1 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8081
  %call = call i32 @const_hash_1(%union.tree_node* %1), !dbg !8082
  %hash = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %key, i32 0, i32 2, !dbg !8083
  store i32 %call, i32* %hash, align 8, !dbg !8084
  %2 = load %struct.htab*, %struct.htab** @const_desc_htab, align 8, !dbg !8085
  %3 = bitcast %struct.constant_descriptor_tree* %key to i8*, !dbg !8086
  %hash1 = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %key, i32 0, i32 2, !dbg !8087
  %4 = load i32, i32* %hash1, align 8, !dbg !8087
  %call2 = call i8* @htab_find_with_hash(%struct.htab* %2, i8* %3, i32 %4), !dbg !8088
  %5 = bitcast i8* %call2 to %struct.constant_descriptor_tree*, !dbg !8089
  store %struct.constant_descriptor_tree* %5, %struct.constant_descriptor_tree** %desc, align 8, !dbg !8090
  %6 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !8091
  %tobool = icmp ne %struct.constant_descriptor_tree* %6, null, !dbg !8091
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8091

cond.true:                                        ; preds = %entry
  %7 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %desc, align 8, !dbg !8092
  %rtl = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %7, i32 0, i32 0, !dbg !8093
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8093
  br label %cond.end, !dbg !8091

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8091

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %8, %cond.true ], [ null, %cond.false ], !dbg !8091
  ret %struct.rtx_def* %cond, !dbg !8094
}

declare dso_local i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_varasm_status() #0 !dbg !8095 {
entry:
  %call = call %struct.rtx_constant_pool* @create_constant_pool(), !dbg !8096
  store %struct.rtx_constant_pool* %call, %struct.rtx_constant_pool** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 2, i32 0), align 8, !dbg !8097
  store i32 0, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 2, i32 1), align 8, !dbg !8098
  ret void, !dbg !8099
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_constant_pool* @create_constant_pool() #0 !dbg !8100 {
entry:
  %pool = alloca %struct.rtx_constant_pool*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_constant_pool** %pool, metadata !8103, metadata !DIExpression()), !dbg !8104
  %call = call i8* @ggc_alloc_stat(i64 32), !dbg !8105
  %0 = bitcast i8* %call to %struct.rtx_constant_pool*, !dbg !8105
  store %struct.rtx_constant_pool* %0, %struct.rtx_constant_pool** %pool, align 8, !dbg !8106
  %call1 = call %struct.htab* @htab_create_alloc(i64 31, i32 (i8*)* @const_desc_rtx_hash, i32 (i8*, i8*)* @const_desc_rtx_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !8107
  %1 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8108
  %const_rtx_htab = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %1, i32 0, i32 2, !dbg !8109
  store %struct.htab* %call1, %struct.htab** %const_rtx_htab, align 8, !dbg !8110
  %2 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8111
  %first = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %2, i32 0, i32 0, !dbg !8112
  store %struct.constant_descriptor_rtx* null, %struct.constant_descriptor_rtx** %first, align 8, !dbg !8113
  %3 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8114
  %last = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %3, i32 0, i32 1, !dbg !8115
  store %struct.constant_descriptor_rtx* null, %struct.constant_descriptor_rtx** %last, align 8, !dbg !8116
  %4 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8117
  %offset = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %4, i32 0, i32 3, !dbg !8118
  store i64 0, i64* %offset, align 8, !dbg !8119
  %5 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8120
  ret %struct.rtx_constant_pool* %5, !dbg !8121
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @simplify_subtraction(%struct.rtx_def* %x) #0 !dbg !8122 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %r = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8125, metadata !DIExpression()), !dbg !8126
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %r, metadata !8127, metadata !DIExpression()), !dbg !8128
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8129
  %call = call %struct.rtx_def* @simplify_rtx(%struct.rtx_def* %0), !dbg !8130
  store %struct.rtx_def* %call, %struct.rtx_def** %r, align 8, !dbg !8128
  %1 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8, !dbg !8131
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !8131
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8131

cond.true:                                        ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %r, align 8, !dbg !8132
  br label %cond.end, !dbg !8131

cond.false:                                       ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8133
  br label %cond.end, !dbg !8131

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %2, %cond.true ], [ %3, %cond.false ], !dbg !8131
  ret %struct.rtx_def* %cond, !dbg !8134
}

declare dso_local %struct.rtx_def* @simplify_rtx(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @force_const_mem(i32 %mode, %struct.rtx_def* %x) #0 !dbg !8135 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %desc = alloca %struct.constant_descriptor_rtx*, align 8
  %tmp = alloca %struct.constant_descriptor_rtx, align 8
  %pool = alloca %struct.rtx_constant_pool*, align 8
  %label = alloca [256 x i8], align 16
  %def = alloca %struct.rtx_def*, align 8
  %symbol = alloca %struct.rtx_def*, align 8
  %hash = alloca i32, align 4
  %align = alloca i32, align 4
  %slot = alloca i8**, align 8
  %type = alloca %union.tree_node*, align 8
  %sect = alloca %union.section*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !8138, metadata !DIExpression()), !dbg !8139
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8140, metadata !DIExpression()), !dbg !8141
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %desc, metadata !8142, metadata !DIExpression()), !dbg !8143
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx* %tmp, metadata !8144, metadata !DIExpression()), !dbg !8145
  call void @llvm.dbg.declare(metadata %struct.rtx_constant_pool** %pool, metadata !8146, metadata !DIExpression()), !dbg !8147
  call void @llvm.dbg.declare(metadata [256 x i8]* %label, metadata !8148, metadata !DIExpression()), !dbg !8149
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %def, metadata !8150, metadata !DIExpression()), !dbg !8151
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol, metadata !8152, metadata !DIExpression()), !dbg !8153
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !8154, metadata !DIExpression()), !dbg !8155
  call void @llvm.dbg.declare(metadata i32* %align, metadata !8156, metadata !DIExpression()), !dbg !8157
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8158, metadata !DIExpression()), !dbg !8159
  %0 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 36), align 8, !dbg !8160
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8162
  %call = call zeroext i8 %0(%struct.rtx_def* %1), !dbg !8163
  %tobool = icmp ne i8 %call, 0, !dbg !8163
  br i1 %tobool, label %if.then, label %if.end, !dbg !8164

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !8165
  br label %return, !dbg !8165

if.end:                                           ; preds = %entry
  store i8 1, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 36), align 8, !dbg !8166
  %2 = load i8 (i32, %struct.rtx_def*)*, i8 (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 42), align 8, !dbg !8167
  %3 = load i32, i32* %mode.addr, align 4, !dbg !8168
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8169
  %call1 = call zeroext i8 %2(i32 %3, %struct.rtx_def* %4), !dbg !8170
  %conv = zext i8 %call1 to i32, !dbg !8170
  %tobool2 = icmp ne i32 %conv, 0, !dbg !8170
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !8170

cond.true:                                        ; preds = %if.end
  %5 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** @shared_constant_pool, align 8, !dbg !8171
  br label %cond.end, !dbg !8170

cond.false:                                       ; preds = %if.end
  %6 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 2, i32 0), align 8, !dbg !8172
  br label %cond.end, !dbg !8170

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_constant_pool* [ %5, %cond.true ], [ %6, %cond.false ], !dbg !8170
  store %struct.rtx_constant_pool* %cond, %struct.rtx_constant_pool** %pool, align 8, !dbg !8173
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8174
  %constant = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %tmp, i32 0, i32 3, !dbg !8175
  store %struct.rtx_def* %7, %struct.rtx_def** %constant, align 8, !dbg !8176
  %8 = load i32, i32* %mode.addr, align 4, !dbg !8177
  %mode3 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %tmp, i32 0, i32 6, !dbg !8178
  store i32 %8, i32* %mode3, align 4, !dbg !8179
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8180
  %call4 = call i32 @const_rtx_hash(%struct.rtx_def* %9), !dbg !8181
  store i32 %call4, i32* %hash, align 4, !dbg !8182
  %10 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8183
  %const_rtx_htab = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %10, i32 0, i32 2, !dbg !8184
  %11 = load %struct.htab*, %struct.htab** %const_rtx_htab, align 8, !dbg !8184
  %12 = bitcast %struct.constant_descriptor_rtx* %tmp to i8*, !dbg !8185
  %13 = load i32, i32* %hash, align 4, !dbg !8186
  %call5 = call i8** @htab_find_slot_with_hash(%struct.htab* %11, i8* %12, i32 %13, i32 1), !dbg !8187
  store i8** %call5, i8*** %slot, align 8, !dbg !8188
  %14 = load i8**, i8*** %slot, align 8, !dbg !8189
  %15 = load i8*, i8** %14, align 8, !dbg !8190
  %16 = bitcast i8* %15 to %struct.constant_descriptor_rtx*, !dbg !8191
  store %struct.constant_descriptor_rtx* %16, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8192
  %17 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8193
  %tobool6 = icmp ne %struct.constant_descriptor_rtx* %17, null, !dbg !8193
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !8195

if.then7:                                         ; preds = %cond.end
  %18 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8196
  %mem = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %18, i32 0, i32 1, !dbg !8197
  %19 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !8197
  %call8 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %19), !dbg !8198
  store %struct.rtx_def* %call8, %struct.rtx_def** %retval, align 8, !dbg !8199
  br label %return, !dbg !8199

if.end9:                                          ; preds = %cond.end
  %call10 = call i8* @ggc_alloc_stat(i64 64), !dbg !8200
  %20 = bitcast i8* %call10 to %struct.constant_descriptor_rtx*, !dbg !8200
  store %struct.constant_descriptor_rtx* %20, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8201
  %21 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8202
  %22 = bitcast %struct.constant_descriptor_rtx* %21 to i8*, !dbg !8202
  %23 = load i8**, i8*** %slot, align 8, !dbg !8203
  store i8* %22, i8** %23, align 8, !dbg !8204
  %24 = load i32, i32* %mode.addr, align 4, !dbg !8205
  %cmp = icmp eq i32 %24, 0, !dbg !8205
  br i1 %cmp, label %cond.true12, label %cond.false13, !dbg !8205

cond.true12:                                      ; preds = %if.end9
  %25 = load i32, i32* @word_mode, align 4, !dbg !8205
  br label %cond.end14, !dbg !8205

cond.false13:                                     ; preds = %if.end9
  %26 = load i32, i32* %mode.addr, align 4, !dbg !8205
  br label %cond.end14, !dbg !8205

cond.end14:                                       ; preds = %cond.false13, %cond.true12
  %cond15 = phi i32 [ %25, %cond.true12 ], [ %26, %cond.false13 ], !dbg !8205
  %call16 = call i32 @get_mode_alignment(i32 %cond15), !dbg !8205
  store i32 %call16, i32* %align, align 4, !dbg !8206
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !8207, metadata !DIExpression()), !dbg !8209
  %27 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 2), align 8, !dbg !8210
  %28 = load i32, i32* %mode.addr, align 4, !dbg !8211
  %call17 = call %union.tree_node* %27(i32 %28, i32 0), !dbg !8212
  store %union.tree_node* %call17, %union.tree_node** %type, align 8, !dbg !8209
  %29 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8213
  %cmp18 = icmp ne %union.tree_node* %29, null, !dbg !8215
  br i1 %cmp18, label %if.then20, label %if.end23, !dbg !8216

if.then20:                                        ; preds = %cond.end14
  %30 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8217
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8217
  %call21 = call %union.tree_node* @make_tree(%union.tree_node* %30, %struct.rtx_def* %31), !dbg !8217
  %32 = load i32, i32* %align, align 4, !dbg !8217
  %call22 = call i32 @ix86_constant_alignment(%union.tree_node* %call21, i32 %32), !dbg !8217
  store i32 %call22, i32* %align, align 4, !dbg !8218
  br label %if.end23, !dbg !8219

if.end23:                                         ; preds = %if.then20, %cond.end14
  %33 = load i32, i32* %align, align 4, !dbg !8220
  %div = udiv i32 %33, 8, !dbg !8221
  %sub = sub i32 %div, 1, !dbg !8222
  %conv24 = zext i32 %sub to i64, !dbg !8223
  %34 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8224
  %offset = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %34, i32 0, i32 3, !dbg !8225
  %35 = load i64, i64* %offset, align 8, !dbg !8226
  %add = add nsw i64 %35, %conv24, !dbg !8226
  store i64 %add, i64* %offset, align 8, !dbg !8226
  %36 = load i32, i32* %align, align 4, !dbg !8227
  %div25 = udiv i32 %36, 8, !dbg !8228
  %sub26 = sub i32 %div25, 1, !dbg !8229
  %neg = xor i32 %sub26, -1, !dbg !8230
  %conv27 = zext i32 %neg to i64, !dbg !8230
  %37 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8231
  %offset28 = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %37, i32 0, i32 3, !dbg !8232
  %38 = load i64, i64* %offset28, align 8, !dbg !8233
  %and = and i64 %38, %conv27, !dbg !8233
  store i64 %and, i64* %offset28, align 8, !dbg !8233
  %39 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8234
  %next = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %39, i32 0, i32 0, !dbg !8235
  store %struct.constant_descriptor_rtx* null, %struct.constant_descriptor_rtx** %next, align 8, !dbg !8236
  %constant29 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %tmp, i32 0, i32 3, !dbg !8237
  %40 = load %struct.rtx_def*, %struct.rtx_def** %constant29, align 8, !dbg !8237
  %41 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8238
  %constant30 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %41, i32 0, i32 3, !dbg !8239
  store %struct.rtx_def* %40, %struct.rtx_def** %constant30, align 8, !dbg !8240
  %42 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8241
  %offset31 = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %42, i32 0, i32 3, !dbg !8242
  %43 = load i64, i64* %offset31, align 8, !dbg !8242
  %44 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8243
  %offset32 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %44, i32 0, i32 4, !dbg !8244
  store i64 %43, i64* %offset32, align 8, !dbg !8245
  %45 = load i32, i32* %hash, align 4, !dbg !8246
  %46 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8247
  %hash33 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %46, i32 0, i32 5, !dbg !8248
  store i32 %45, i32* %hash33, align 8, !dbg !8249
  %47 = load i32, i32* %mode.addr, align 4, !dbg !8250
  %48 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8251
  %mode34 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %48, i32 0, i32 6, !dbg !8252
  store i32 %47, i32* %mode34, align 4, !dbg !8253
  %49 = load i32, i32* %align, align 4, !dbg !8254
  %50 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8255
  %align35 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %50, i32 0, i32 7, !dbg !8256
  store i32 %49, i32* %align35, align 8, !dbg !8257
  %51 = load i32, i32* @const_labelno, align 4, !dbg !8258
  %52 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8259
  %labelno = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %52, i32 0, i32 8, !dbg !8260
  store i32 %51, i32* %labelno, align 4, !dbg !8261
  %53 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8262
  %mark = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %53, i32 0, i32 9, !dbg !8263
  store i32 0, i32* %mark, align 8, !dbg !8264
  %54 = load i32, i32* %mode.addr, align 4, !dbg !8265
  %idxprom = zext i32 %54 to i64, !dbg !8265
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !8265
  %55 = load i8, i8* %arrayidx, align 1, !dbg !8265
  %conv36 = zext i8 %55 to i16, !dbg !8265
  %conv37 = zext i16 %conv36 to i64, !dbg !8265
  %56 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8266
  %offset38 = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %56, i32 0, i32 3, !dbg !8267
  %57 = load i64, i64* %offset38, align 8, !dbg !8268
  %add39 = add nsw i64 %57, %conv37, !dbg !8268
  store i64 %add39, i64* %offset38, align 8, !dbg !8268
  %58 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8269
  %last = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %58, i32 0, i32 1, !dbg !8271
  %59 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %last, align 8, !dbg !8271
  %tobool40 = icmp ne %struct.constant_descriptor_rtx* %59, null, !dbg !8269
  br i1 %tobool40, label %if.then41, label %if.else, !dbg !8272

if.then41:                                        ; preds = %if.end23
  %60 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8273
  %61 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8274
  %last42 = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %61, i32 0, i32 1, !dbg !8275
  %62 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %last42, align 8, !dbg !8275
  %next43 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %62, i32 0, i32 0, !dbg !8276
  store %struct.constant_descriptor_rtx* %60, %struct.constant_descriptor_rtx** %next43, align 8, !dbg !8277
  br label %if.end45, !dbg !8274

if.else:                                          ; preds = %if.end23
  %63 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8278
  %64 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8279
  %last44 = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %64, i32 0, i32 1, !dbg !8280
  store %struct.constant_descriptor_rtx* %63, %struct.constant_descriptor_rtx** %last44, align 8, !dbg !8281
  %65 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8282
  %first = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %65, i32 0, i32 0, !dbg !8283
  store %struct.constant_descriptor_rtx* %63, %struct.constant_descriptor_rtx** %first, align 8, !dbg !8284
  br label %if.end45

if.end45:                                         ; preds = %if.else, %if.then41
  %66 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8285
  %67 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool, align 8, !dbg !8286
  %last46 = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %67, i32 0, i32 1, !dbg !8287
  store %struct.constant_descriptor_rtx* %66, %struct.constant_descriptor_rtx** %last46, align 8, !dbg !8288
  br label %do.body, !dbg !8289

do.body:                                          ; preds = %if.end45
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %label, i64 0, i64 0, !dbg !8290
  %68 = load i32, i32* @const_labelno, align 4, !dbg !8290
  %call47 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86, i64 0, i64 0), i32 %68), !dbg !8290
  br label %do.end, !dbg !8290

do.end:                                           ; preds = %do.body
  %69 = load i32, i32* @const_labelno, align 4, !dbg !8292
  %inc = add nsw i32 %69, 1, !dbg !8292
  store i32 %inc, i32* @const_labelno, align 4, !dbg !8292
  %call48 = call zeroext i8 @use_object_blocks_p(), !dbg !8293
  %conv49 = zext i8 %call48 to i32, !dbg !8293
  %tobool50 = icmp ne i32 %conv49, 0, !dbg !8293
  br i1 %tobool50, label %land.lhs.true, label %if.else61, !dbg !8295

land.lhs.true:                                    ; preds = %do.end
  %70 = load i8 (i32, %struct.rtx_def*)*, i8 (i32, %struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 42), align 8, !dbg !8296
  %71 = load i32, i32* %mode.addr, align 4, !dbg !8297
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8298
  %call51 = call zeroext i8 %70(i32 %71, %struct.rtx_def* %72), !dbg !8299
  %conv52 = zext i8 %call51 to i32, !dbg !8299
  %tobool53 = icmp ne i32 %conv52, 0, !dbg !8299
  br i1 %tobool53, label %if.then54, label %if.else61, !dbg !8300

if.then54:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.section** %sect, metadata !8301, metadata !DIExpression()), !dbg !8303
  %73 = load %union.section* (i32, %struct.rtx_def*, i64)*, %union.section* (i32, %struct.rtx_def*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 22), align 8, !dbg !8304
  %74 = load i32, i32* %mode.addr, align 4, !dbg !8305
  %75 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8306
  %76 = load i32, i32* %align, align 4, !dbg !8307
  %conv55 = zext i32 %76 to i64, !dbg !8307
  %call56 = call %union.section* %73(i32 %74, %struct.rtx_def* %75, i64 %conv55), !dbg !8308
  store %union.section* %call56, %union.section** %sect, align 8, !dbg !8303
  %arraydecay57 = getelementptr inbounds [256 x i8], [256 x i8]* %label, i64 0, i64 0, !dbg !8309
  %call58 = call i8* @ggc_alloc_string(i8* %arraydecay57, i32 -1), !dbg !8309
  %77 = load %union.section*, %union.section** %sect, align 8, !dbg !8310
  %call59 = call %struct.object_block* @get_block_for_section(%union.section* %77), !dbg !8311
  %call60 = call %struct.rtx_def* @create_block_symbol(i8* %call58, %struct.object_block* %call59, i64 -1), !dbg !8312
  store %struct.rtx_def* %call60, %struct.rtx_def** %symbol, align 8, !dbg !8313
  br label %if.end65, !dbg !8314

if.else61:                                        ; preds = %land.lhs.true, %do.end
  %arraydecay62 = getelementptr inbounds [256 x i8], [256 x i8]* %label, i64 0, i64 0, !dbg !8315
  %call63 = call i8* @ggc_alloc_string(i8* %arraydecay62, i32 -1), !dbg !8315
  %call64 = call %struct.rtx_def* @gen_rtx_fmt_s00_stat(i32 45, i32 16, i8* %call63), !dbg !8315
  store %struct.rtx_def* %call64, %struct.rtx_def** %symbol, align 8, !dbg !8316
  br label %if.end65

if.end65:                                         ; preds = %if.else61, %if.then54
  %78 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8317
  %79 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8318
  %sym = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %79, i32 0, i32 2, !dbg !8319
  store %struct.rtx_def* %78, %struct.rtx_def** %sym, align 8, !dbg !8320
  %80 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8321
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !8321
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8321
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8321
  %rt_int = bitcast %union.rtunion_def* %arrayidx66 to i32*, !dbg !8321
  %81 = load i32, i32* %rt_int, align 8, !dbg !8322
  %or = or i32 %81, 2, !dbg !8322
  store i32 %or, i32* %rt_int, align 8, !dbg !8322
  %82 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8323
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !8323
  %bf.load = load i32, i32* %83, align 8, !dbg !8324
  %bf.clear = and i32 %bf.load, -67108865, !dbg !8324
  %bf.set = or i32 %bf.clear, 67108864, !dbg !8324
  store i32 %bf.set, i32* %83, align 8, !dbg !8324
  %84 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8325
  %85 = bitcast %struct.rtx_def* %84 to i32*, !dbg !8325
  %bf.load67 = load i32, i32* %85, align 8, !dbg !8325
  %bf.lshr = lshr i32 %bf.load67, 26, !dbg !8325
  %bf.clear68 = and i32 %bf.lshr, 1, !dbg !8325
  %tobool69 = icmp ne i32 %bf.clear68, 0, !dbg !8325
  br i1 %tobool69, label %cond.false71, label %cond.true70, !dbg !8325

cond.true70:                                      ; preds = %if.end65
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 3707, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !8325
  br label %cond.end72, !dbg !8325

cond.false71:                                     ; preds = %if.end65
  br label %cond.end72, !dbg !8325

cond.end72:                                       ; preds = %cond.false71, %cond.true70
  %cond73 = phi i32 [ 0, %cond.true70 ], [ 0, %cond.false71 ], !dbg !8325
  %86 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8325
  %87 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8325
  %u74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1, !dbg !8325
  %fld75 = bitcast %union.u* %u74 to [1 x %union.rtunion_def]*, !dbg !8325
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i64 0, i64 2, !dbg !8325
  %rt_constant = bitcast %union.rtunion_def* %arrayidx76 to %struct.constant_descriptor_rtx**, !dbg !8325
  store %struct.constant_descriptor_rtx* %86, %struct.constant_descriptor_rtx** %rt_constant, align 8, !dbg !8325
  %88 = load i32, i32* %mode.addr, align 4, !dbg !8326
  %89 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !8327
  %call77 = call %struct.rtx_def* @gen_const_mem(i32 %88, %struct.rtx_def* %89), !dbg !8328
  store %struct.rtx_def* %call77, %struct.rtx_def** %def, align 8, !dbg !8329
  %90 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8330
  %mem78 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %90, i32 0, i32 1, !dbg !8331
  store %struct.rtx_def* %call77, %struct.rtx_def** %mem78, align 8, !dbg !8332
  %91 = load %struct.rtx_def*, %struct.rtx_def** %def, align 8, !dbg !8333
  %92 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 2), align 8, !dbg !8334
  %93 = load i32, i32* %mode.addr, align 4, !dbg !8335
  %call79 = call %union.tree_node* %92(i32 %93, i32 0), !dbg !8336
  call void @set_mem_attributes(%struct.rtx_def* %91, %union.tree_node* %call79, i32 1), !dbg !8337
  %94 = load %struct.rtx_def*, %struct.rtx_def** %def, align 8, !dbg !8338
  %95 = load i32, i32* %align, align 4, !dbg !8339
  call void @set_mem_align(%struct.rtx_def* %94, i32 %95), !dbg !8340
  %96 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8341
  %97 = bitcast %struct.rtx_def* %96 to i32*, !dbg !8341
  %bf.load80 = load i32, i32* %97, align 8, !dbg !8341
  %bf.clear81 = and i32 %bf.load80, 65535, !dbg !8341
  %cmp82 = icmp eq i32 %bf.clear81, 44, !dbg !8343
  br i1 %cmp82, label %if.then84, label %if.end91, !dbg !8344

if.then84:                                        ; preds = %cond.end72
  %98 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8345
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1, !dbg !8345
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !8345
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 0, !dbg !8345
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !8345
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8345
  %100 = bitcast %struct.rtx_def* %99 to i32*, !dbg !8345
  %bf.load88 = load i32, i32* %100, align 8, !dbg !8346
  %bf.clear89 = and i32 %bf.load88, -268435457, !dbg !8346
  %bf.set90 = or i32 %bf.clear89, 268435456, !dbg !8346
  store i32 %bf.set90, i32* %100, align 8, !dbg !8346
  br label %if.end91, !dbg !8345

if.end91:                                         ; preds = %if.then84, %cond.end72
  %101 = load %struct.rtx_def*, %struct.rtx_def** %def, align 8, !dbg !8347
  %call92 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %101), !dbg !8348
  store %struct.rtx_def* %call92, %struct.rtx_def** %retval, align 8, !dbg !8349
  br label %return, !dbg !8349

return:                                           ; preds = %if.end91, %if.then7, %if.then
  %102 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8350
  ret %struct.rtx_def* %102, !dbg !8350
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_rtx_hash(%struct.rtx_def* %x) #0 !dbg !8351 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %h = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8354, metadata !DIExpression()), !dbg !8355
  call void @llvm.dbg.declare(metadata i32* %h, metadata !8356, metadata !DIExpression()), !dbg !8357
  store i32 0, i32* %h, align 4, !dbg !8357
  %0 = bitcast i32* %h to i8*, !dbg !8358
  %call = call i32 @for_each_rtx(%struct.rtx_def** %x.addr, i32 (%struct.rtx_def**, i8*)* @const_rtx_hash_1, i8* %0), !dbg !8359
  %1 = load i32, i32* %h, align 4, !dbg !8360
  ret i32 %1, !dbg !8361
}

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

declare dso_local i32 @get_mode_alignment(i32) #2

declare dso_local %union.tree_node* @make_tree(%union.tree_node*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.object_block* @get_block_for_section(%union.section* %sect) #0 !dbg !8362 {
entry:
  %retval = alloca %struct.object_block*, align 8
  %sect.addr = alloca %union.section*, align 8
  %block = alloca %struct.object_block*, align 8
  %slot = alloca i8**, align 8
  store %union.section* %sect, %union.section** %sect.addr, align 8
  call void @llvm.dbg.declare(metadata %union.section** %sect.addr, metadata !8365, metadata !DIExpression()), !dbg !8366
  call void @llvm.dbg.declare(metadata %struct.object_block** %block, metadata !8367, metadata !DIExpression()), !dbg !8368
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8369, metadata !DIExpression()), !dbg !8370
  %0 = load %union.section*, %union.section** %sect.addr, align 8, !dbg !8371
  %cmp = icmp eq %union.section* %0, null, !dbg !8373
  br i1 %cmp, label %if.then, label %if.end, !dbg !8374

if.then:                                          ; preds = %entry
  store %struct.object_block* null, %struct.object_block** %retval, align 8, !dbg !8375
  br label %return, !dbg !8375

if.end:                                           ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** @object_block_htab, align 8, !dbg !8376
  %2 = load %union.section*, %union.section** %sect.addr, align 8, !dbg !8377
  %3 = bitcast %union.section* %2 to i8*, !dbg !8377
  %4 = load %union.section*, %union.section** %sect.addr, align 8, !dbg !8378
  %call = call i32 @hash_section(%union.section* %4), !dbg !8379
  %call1 = call i8** @htab_find_slot_with_hash(%struct.htab* %1, i8* %3, i32 %call, i32 1), !dbg !8380
  store i8** %call1, i8*** %slot, align 8, !dbg !8381
  %5 = load i8**, i8*** %slot, align 8, !dbg !8382
  %6 = load i8*, i8** %5, align 8, !dbg !8383
  %7 = bitcast i8* %6 to %struct.object_block*, !dbg !8384
  store %struct.object_block* %7, %struct.object_block** %block, align 8, !dbg !8385
  %8 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !8386
  %cmp2 = icmp eq %struct.object_block* %8, null, !dbg !8388
  br i1 %cmp2, label %if.then3, label %if.end6, !dbg !8389

if.then3:                                         ; preds = %if.end
  %call4 = call i8* @ggc_alloc_cleared_stat(i64 40), !dbg !8390
  %9 = bitcast i8* %call4 to %struct.object_block*, !dbg !8392
  store %struct.object_block* %9, %struct.object_block** %block, align 8, !dbg !8393
  %10 = load %union.section*, %union.section** %sect.addr, align 8, !dbg !8394
  %11 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !8395
  %sect5 = getelementptr inbounds %struct.object_block, %struct.object_block* %11, i32 0, i32 0, !dbg !8396
  store %union.section* %10, %union.section** %sect5, align 8, !dbg !8397
  %12 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !8398
  %13 = bitcast %struct.object_block* %12 to i8*, !dbg !8398
  %14 = load i8**, i8*** %slot, align 8, !dbg !8399
  store i8* %13, i8** %14, align 8, !dbg !8400
  br label %if.end6, !dbg !8401

if.end6:                                          ; preds = %if.then3, %if.end
  %15 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !8402
  store %struct.object_block* %15, %struct.object_block** %retval, align 8, !dbg !8403
  br label %return, !dbg !8403

return:                                           ; preds = %if.end6, %if.then
  %16 = load %struct.object_block*, %struct.object_block** %retval, align 8, !dbg !8404
  ret %struct.object_block* %16, !dbg !8404
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_pool_constant(%struct.rtx_def* %addr) #0 !dbg !8405 {
entry:
  %addr.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !8406, metadata !DIExpression()), !dbg !8407
  %0 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !8408
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8408
  %bf.load = load i32, i32* %1, align 8, !dbg !8408
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !8408
  %bf.clear = and i32 %bf.lshr, 1, !dbg !8408
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !8408
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8408

cond.true:                                        ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !8408
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !8408
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8408
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8408
  %rt_constant = bitcast %union.rtunion_def* %arrayidx to %struct.constant_descriptor_rtx**, !dbg !8408
  %3 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %rt_constant, align 8, !dbg !8408
  br label %cond.end, !dbg !8408

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8408

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.constant_descriptor_rtx* [ %3, %cond.true ], [ null, %cond.false ], !dbg !8408
  %constant = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %cond, i32 0, i32 3, !dbg !8409
  %4 = load %struct.rtx_def*, %struct.rtx_def** %constant, align 8, !dbg !8409
  ret %struct.rtx_def* %4, !dbg !8410
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_pool_constant_mark(%struct.rtx_def* %addr, i8* %pmarked) #0 !dbg !8411 {
entry:
  %addr.addr = alloca %struct.rtx_def*, align 8
  %pmarked.addr = alloca i8*, align 8
  %desc = alloca %struct.constant_descriptor_rtx*, align 8
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !8415, metadata !DIExpression()), !dbg !8416
  store i8* %pmarked, i8** %pmarked.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pmarked.addr, metadata !8417, metadata !DIExpression()), !dbg !8418
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %desc, metadata !8419, metadata !DIExpression()), !dbg !8420
  %0 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !8421
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8421
  %bf.load = load i32, i32* %1, align 8, !dbg !8421
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !8421
  %bf.clear = and i32 %bf.lshr, 1, !dbg !8421
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !8421
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8421

cond.true:                                        ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !8421
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !8421
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8421
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8421
  %rt_constant = bitcast %union.rtunion_def* %arrayidx to %struct.constant_descriptor_rtx**, !dbg !8421
  %3 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %rt_constant, align 8, !dbg !8421
  br label %cond.end, !dbg !8421

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8421

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.constant_descriptor_rtx* [ %3, %cond.true ], [ null, %cond.false ], !dbg !8421
  store %struct.constant_descriptor_rtx* %cond, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8422
  %4 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8423
  %mark = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %4, i32 0, i32 9, !dbg !8424
  %5 = load i32, i32* %mark, align 8, !dbg !8424
  %cmp = icmp ne i32 %5, 0, !dbg !8425
  %conv = zext i1 %cmp to i32, !dbg !8425
  %conv1 = trunc i32 %conv to i8, !dbg !8426
  %6 = load i8*, i8** %pmarked.addr, align 8, !dbg !8427
  store i8 %conv1, i8* %6, align 1, !dbg !8428
  %7 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8429
  %constant = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %7, i32 0, i32 3, !dbg !8430
  %8 = load %struct.rtx_def*, %struct.rtx_def** %constant, align 8, !dbg !8430
  ret %struct.rtx_def* %8, !dbg !8431
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_pool_mode(%struct.rtx_def* %addr) #0 !dbg !8432 {
entry:
  %addr.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !8438, metadata !DIExpression()), !dbg !8439
  %0 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !8440
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8440
  %bf.load = load i32, i32* %1, align 8, !dbg !8440
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !8440
  %bf.clear = and i32 %bf.lshr, 1, !dbg !8440
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !8440
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8440

cond.true:                                        ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !8440
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !8440
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8440
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8440
  %rt_constant = bitcast %union.rtunion_def* %arrayidx to %struct.constant_descriptor_rtx**, !dbg !8440
  %3 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %rt_constant, align 8, !dbg !8440
  br label %cond.end, !dbg !8440

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8440

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.constant_descriptor_rtx* [ %3, %cond.true ], [ null, %cond.false ], !dbg !8440
  %mode = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %cond, i32 0, i32 6, !dbg !8441
  %4 = load i32, i32* %mode, align 4, !dbg !8441
  ret i32 %4, !dbg !8442
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_pool_size() #0 !dbg !8443 {
entry:
  %0 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 2, i32 0), align 8, !dbg !8446
  %offset = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %0, i32 0, i32 3, !dbg !8447
  %1 = load i64, i64* %offset, align 8, !dbg !8447
  %conv = trunc i64 %1 to i32, !dbg !8448
  ret i32 %conv, !dbg !8449
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @output_shared_constant_pool() #0 !dbg !8450 {
entry:
  %0 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** @shared_constant_pool, align 8, !dbg !8451
  call void @output_constant_pool_contents(%struct.rtx_constant_pool* %0), !dbg !8452
  ret void, !dbg !8453
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_constant_pool_contents(%struct.rtx_constant_pool* %pool) #0 !dbg !8454 {
entry:
  %pool.addr = alloca %struct.rtx_constant_pool*, align 8
  %desc = alloca %struct.constant_descriptor_rtx*, align 8
  store %struct.rtx_constant_pool* %pool, %struct.rtx_constant_pool** %pool.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_constant_pool** %pool.addr, metadata !8457, metadata !DIExpression()), !dbg !8458
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %desc, metadata !8459, metadata !DIExpression()), !dbg !8460
  %0 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %pool.addr, align 8, !dbg !8461
  %first = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %0, i32 0, i32 0, !dbg !8463
  %1 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %first, align 8, !dbg !8463
  store %struct.constant_descriptor_rtx* %1, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8464
  br label %for.cond, !dbg !8465

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8466
  %tobool = icmp ne %struct.constant_descriptor_rtx* %2, null, !dbg !8468
  br i1 %tobool, label %for.body, label %for.end, !dbg !8468

for.body:                                         ; preds = %for.cond
  %3 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8469
  %mark = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %3, i32 0, i32 9, !dbg !8471
  %4 = load i32, i32* %mark, align 8, !dbg !8471
  %tobool1 = icmp ne i32 %4, 0, !dbg !8469
  br i1 %tobool1, label %if.then, label %if.end8, !dbg !8472

if.then:                                          ; preds = %for.body
  %5 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8473
  %sym = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %5, i32 0, i32 2, !dbg !8473
  %6 = load %struct.rtx_def*, %struct.rtx_def** %sym, align 8, !dbg !8473
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !8473
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8473
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8473
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8473
  %7 = load i32, i32* %rt_int, align 8, !dbg !8473
  %and = and i32 %7, 128, !dbg !8473
  %cmp = icmp ne i32 %and, 0, !dbg !8473
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !8476

land.lhs.true:                                    ; preds = %if.then
  %8 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8477
  %sym2 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %8, i32 0, i32 2, !dbg !8477
  %9 = load %struct.rtx_def*, %struct.rtx_def** %sym2, align 8, !dbg !8477
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !8477
  %block_sym = bitcast %union.u* %u3 to %struct.block_symbol*, !dbg !8477
  %block = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym, i32 0, i32 1, !dbg !8477
  %10 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !8477
  %tobool4 = icmp ne %struct.object_block* %10, null, !dbg !8477
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !8478

if.then5:                                         ; preds = %land.lhs.true
  %11 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8479
  %sym6 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %11, i32 0, i32 2, !dbg !8480
  %12 = load %struct.rtx_def*, %struct.rtx_def** %sym6, align 8, !dbg !8480
  call void @place_block_symbol(%struct.rtx_def* %12), !dbg !8481
  br label %if.end, !dbg !8481

if.else:                                          ; preds = %land.lhs.true, %if.then
  %13 = load %union.section* (i32, %struct.rtx_def*, i64)*, %union.section* (i32, %struct.rtx_def*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 22), align 8, !dbg !8482
  %14 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8484
  %mode = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %14, i32 0, i32 6, !dbg !8485
  %15 = load i32, i32* %mode, align 4, !dbg !8485
  %16 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8486
  %constant = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %16, i32 0, i32 3, !dbg !8487
  %17 = load %struct.rtx_def*, %struct.rtx_def** %constant, align 8, !dbg !8487
  %18 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8488
  %align = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %18, i32 0, i32 7, !dbg !8489
  %19 = load i32, i32* %align, align 8, !dbg !8489
  %conv = zext i32 %19 to i64, !dbg !8488
  %call = call %union.section* %13(i32 %15, %struct.rtx_def* %17, i64 %conv), !dbg !8490
  call void @switch_to_section(%union.section* %call), !dbg !8491
  %20 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8492
  %21 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8493
  %align7 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %21, i32 0, i32 7, !dbg !8494
  %22 = load i32, i32* %align7, align 8, !dbg !8494
  call void @output_constant_pool_1(%struct.constant_descriptor_rtx* %20, i32 %22), !dbg !8495
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  br label %if.end8, !dbg !8496

if.end8:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !8471

for.inc:                                          ; preds = %if.end8
  %23 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8497
  %next = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %23, i32 0, i32 0, !dbg !8498
  %24 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %next, align 8, !dbg !8498
  store %struct.constant_descriptor_rtx* %24, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !8499
  br label %for.cond, !dbg !8500, !llvm.loop !8501

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8503
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @compute_reloc_for_constant(%union.tree_node* %exp) #0 !dbg !8504 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %reloc = alloca i32, align 4
  %reloc2 = alloca i32, align 4
  %tem = alloca %union.tree_node*, align 8
  %idx = alloca i64, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !8505, metadata !DIExpression()), !dbg !8506
  call void @llvm.dbg.declare(metadata i32* %reloc, metadata !8507, metadata !DIExpression()), !dbg !8508
  store i32 0, i32* %reloc, align 4, !dbg !8508
  call void @llvm.dbg.declare(metadata i32* %reloc2, metadata !8509, metadata !DIExpression()), !dbg !8510
  call void @llvm.dbg.declare(metadata %union.tree_node** %tem, metadata !8511, metadata !DIExpression()), !dbg !8512
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8513
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8513
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8513
  %bf.load = load i64, i64* %1, align 8, !dbg !8513
  %bf.clear = and i64 %bf.load, 65535, !dbg !8513
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8513
  switch i32 %bf.cast, label %sw.default [
    i32 121, label %sw.bb
    i32 122, label %sw.bb
    i32 63, label %sw.bb11
    i32 66, label %sw.bb11
    i32 64, label %sw.bb21
    i32 116, label %sw.bb35
    i32 113, label %sw.bb35
    i32 118, label %sw.bb35
    i32 51, label %sw.bb40
  ], !dbg !8514

sw.bb:                                            ; preds = %entry, %entry
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8515
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !8515
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !8515
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8515
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8515
  store %union.tree_node* %3, %union.tree_node** %tem, align 8, !dbg !8518
  br label %for.cond, !dbg !8519

for.cond:                                         ; preds = %for.inc, %sw.bb
  %4 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !8520
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %4), !dbg !8522
  %tobool = icmp ne i8 %call, 0, !dbg !8523
  br i1 %tobool, label %for.body, label %for.end, !dbg !8523

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !8523

for.inc:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !8524
  %exp2 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !8524
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !8524
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i64 0, i64 0, !dbg !8524
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8, !dbg !8524
  store %union.tree_node* %6, %union.tree_node** %tem, align 8, !dbg !8525
  br label %for.cond, !dbg !8526, !llvm.loop !8527

for.end:                                          ; preds = %for.cond
  %7 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !8529
  %base5 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !8529
  %8 = bitcast %struct.tree_base* %base5 to i64*, !dbg !8529
  %bf.load6 = load i64, i64* %8, align 8, !dbg !8529
  %bf.lshr = lshr i64 %bf.load6, 27, !dbg !8529
  %bf.clear7 = and i64 %bf.lshr, 1, !dbg !8529
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !8529
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !8529
  br i1 %tobool9, label %if.then, label %if.else, !dbg !8531

if.then:                                          ; preds = %for.end
  %9 = load i32, i32* %reloc, align 4, !dbg !8532
  %or = or i32 %9, 2, !dbg !8532
  store i32 %or, i32* %reloc, align 4, !dbg !8532
  br label %if.end, !dbg !8533

if.else:                                          ; preds = %for.end
  %10 = load i32, i32* %reloc, align 4, !dbg !8534
  %or10 = or i32 %10, 1, !dbg !8534
  store i32 %or10, i32* %reloc, align 4, !dbg !8534
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %sw.epilog, !dbg !8535

sw.bb11:                                          ; preds = %entry, %entry
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8536
  %exp12 = bitcast %union.tree_node* %11 to %struct.tree_exp*, !dbg !8536
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !8536
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 0, !dbg !8536
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !8536
  %call15 = call i32 @compute_reloc_for_constant(%union.tree_node* %12), !dbg !8537
  store i32 %call15, i32* %reloc, align 4, !dbg !8538
  %13 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8539
  %exp16 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !8539
  %operands17 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp16, i32 0, i32 3, !dbg !8539
  %arrayidx18 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands17, i64 0, i64 1, !dbg !8539
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !8539
  %call19 = call i32 @compute_reloc_for_constant(%union.tree_node* %14), !dbg !8540
  %15 = load i32, i32* %reloc, align 4, !dbg !8541
  %or20 = or i32 %15, %call19, !dbg !8541
  store i32 %or20, i32* %reloc, align 4, !dbg !8541
  br label %sw.epilog, !dbg !8542

sw.bb21:                                          ; preds = %entry
  %16 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8543
  %exp22 = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !8543
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !8543
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i64 0, i64 0, !dbg !8543
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !8543
  %call25 = call i32 @compute_reloc_for_constant(%union.tree_node* %17), !dbg !8544
  store i32 %call25, i32* %reloc, align 4, !dbg !8545
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8546
  %exp26 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !8546
  %operands27 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp26, i32 0, i32 3, !dbg !8546
  %arrayidx28 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands27, i64 0, i64 1, !dbg !8546
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx28, align 8, !dbg !8546
  %call29 = call i32 @compute_reloc_for_constant(%union.tree_node* %19), !dbg !8547
  store i32 %call29, i32* %reloc2, align 4, !dbg !8548
  %20 = load i32, i32* %reloc, align 4, !dbg !8549
  %cmp = icmp eq i32 %20, 1, !dbg !8551
  br i1 %cmp, label %land.lhs.true, label %if.else32, !dbg !8552

land.lhs.true:                                    ; preds = %sw.bb21
  %21 = load i32, i32* %reloc2, align 4, !dbg !8553
  %cmp30 = icmp eq i32 %21, 1, !dbg !8554
  br i1 %cmp30, label %if.then31, label %if.else32, !dbg !8555

if.then31:                                        ; preds = %land.lhs.true
  store i32 0, i32* %reloc, align 4, !dbg !8556
  br label %if.end34, !dbg !8557

if.else32:                                        ; preds = %land.lhs.true, %sw.bb21
  %22 = load i32, i32* %reloc2, align 4, !dbg !8558
  %23 = load i32, i32* %reloc, align 4, !dbg !8559
  %or33 = or i32 %23, %22, !dbg !8559
  store i32 %or33, i32* %reloc, align 4, !dbg !8559
  br label %if.end34

if.end34:                                         ; preds = %if.else32, %if.then31
  br label %sw.epilog, !dbg !8560

sw.bb35:                                          ; preds = %entry, %entry, %entry
  %24 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8561
  %exp36 = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !8561
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !8561
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 0, !dbg !8561
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !8561
  %call39 = call i32 @compute_reloc_for_constant(%union.tree_node* %25), !dbg !8562
  store i32 %call39, i32* %reloc, align 4, !dbg !8563
  br label %sw.epilog, !dbg !8564

sw.bb40:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %idx, metadata !8565, metadata !DIExpression()), !dbg !8567
  store i64 0, i64* %idx, align 8, !dbg !8568
  br label %for.cond41, !dbg !8568

for.cond41:                                       ; preds = %for.inc73, %sw.bb40
  %26 = load i64, i64* %idx, align 8, !dbg !8570
  %27 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8570
  %constructor = bitcast %union.tree_node* %27 to %struct.tree_constructor*, !dbg !8570
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !8570
  %28 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !8570
  %tobool42 = icmp ne %struct.VEC_constructor_elt_gc* %28, null, !dbg !8570
  br i1 %tobool42, label %cond.true, label %cond.false, !dbg !8570

cond.true:                                        ; preds = %for.cond41
  %29 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8570
  %constructor43 = bitcast %union.tree_node* %29 to %struct.tree_constructor*, !dbg !8570
  %elts44 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor43, i32 0, i32 1, !dbg !8570
  %30 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts44, align 8, !dbg !8570
  %base45 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %30, i32 0, i32 0, !dbg !8570
  br label %cond.end, !dbg !8570

cond.false:                                       ; preds = %for.cond41
  br label %cond.end, !dbg !8570

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base45, %cond.true ], [ null, %cond.false ], !dbg !8570
  %call46 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !8570
  %conv = zext i32 %call46 to i64, !dbg !8570
  %cmp47 = icmp uge i64 %26, %conv, !dbg !8570
  br i1 %cmp47, label %cond.true49, label %cond.false50, !dbg !8570

cond.true49:                                      ; preds = %cond.end
  br label %cond.end63, !dbg !8570

cond.false50:                                     ; preds = %cond.end
  %31 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8570
  %constructor51 = bitcast %union.tree_node* %31 to %struct.tree_constructor*, !dbg !8570
  %elts52 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor51, i32 0, i32 1, !dbg !8570
  %32 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts52, align 8, !dbg !8570
  %tobool53 = icmp ne %struct.VEC_constructor_elt_gc* %32, null, !dbg !8570
  br i1 %tobool53, label %cond.true54, label %cond.false58, !dbg !8570

cond.true54:                                      ; preds = %cond.false50
  %33 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8570
  %constructor55 = bitcast %union.tree_node* %33 to %struct.tree_constructor*, !dbg !8570
  %elts56 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor55, i32 0, i32 1, !dbg !8570
  %34 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts56, align 8, !dbg !8570
  %base57 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %34, i32 0, i32 0, !dbg !8570
  br label %cond.end59, !dbg !8570

cond.false58:                                     ; preds = %cond.false50
  br label %cond.end59, !dbg !8570

cond.end59:                                       ; preds = %cond.false58, %cond.true54
  %cond60 = phi %struct.VEC_constructor_elt_base* [ %base57, %cond.true54 ], [ null, %cond.false58 ], !dbg !8570
  %35 = load i64, i64* %idx, align 8, !dbg !8570
  %conv61 = trunc i64 %35 to i32, !dbg !8570
  %call62 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond60, i32 %conv61), !dbg !8570
  %value = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call62, i32 0, i32 1, !dbg !8570
  %36 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !8570
  store %union.tree_node* %36, %union.tree_node** %tem, align 8, !dbg !8570
  br label %cond.end63, !dbg !8570

cond.end63:                                       ; preds = %cond.end59, %cond.true49
  %cond64 = phi i32 [ 0, %cond.true49 ], [ 1, %cond.end59 ], !dbg !8570
  %tobool65 = icmp ne i32 %cond64, 0, !dbg !8568
  br i1 %tobool65, label %for.body66, label %for.end74, !dbg !8568

for.body66:                                       ; preds = %cond.end63
  %37 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !8572
  %cmp67 = icmp ne %union.tree_node* %37, null, !dbg !8574
  br i1 %cmp67, label %if.then69, label %if.end72, !dbg !8575

if.then69:                                        ; preds = %for.body66
  %38 = load %union.tree_node*, %union.tree_node** %tem, align 8, !dbg !8576
  %call70 = call i32 @compute_reloc_for_constant(%union.tree_node* %38), !dbg !8577
  %39 = load i32, i32* %reloc, align 4, !dbg !8578
  %or71 = or i32 %39, %call70, !dbg !8578
  store i32 %or71, i32* %reloc, align 4, !dbg !8578
  br label %if.end72, !dbg !8579

if.end72:                                         ; preds = %if.then69, %for.body66
  br label %for.inc73, !dbg !8580

for.inc73:                                        ; preds = %if.end72
  %40 = load i64, i64* %idx, align 8, !dbg !8570
  %inc = add i64 %40, 1, !dbg !8570
  store i64 %inc, i64* %idx, align 8, !dbg !8570
  br label %for.cond41, !dbg !8570, !llvm.loop !8581

for.end74:                                        ; preds = %cond.end63
  br label %sw.epilog, !dbg !8583

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !8584

sw.epilog:                                        ; preds = %sw.default, %for.end74, %sw.bb35, %if.end34, %sw.bb11, %if.end
  %41 = load i32, i32* %reloc, align 4, !dbg !8585
  ret i32 %41, !dbg !8586
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !8587 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !8591, metadata !DIExpression()), !dbg !8592
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !8593
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8593
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8593
  %bf.load = load i64, i64* %1, align 8, !dbg !8593
  %bf.clear = and i64 %bf.load, 65535, !dbg !8593
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8593
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !8594

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !8595
  br label %return, !dbg !8595

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8597
  br label %return, !dbg !8597

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !8598
  ret i8 %2, !dbg !8598
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %vec_) #0 !dbg !8599 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !8604, metadata !DIExpression()), !dbg !8605
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !8605
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !8605
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8605

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !8605
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %1, i32 0, i32 0, !dbg !8605
  %2 = load i32, i32* %num, align 8, !dbg !8605
  br label %cond.end, !dbg !8605

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8605

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8605
  ret i32 %cond, !dbg !8605
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %vec_, i32 %ix_) #0 !dbg !8606 {
entry:
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !8609, metadata !DIExpression()), !dbg !8610
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8611, metadata !DIExpression()), !dbg !8610
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !8610
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !8610
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8610

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8610
  %2 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !8610
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %2, i32 0, i32 0, !dbg !8610
  %3 = load i32, i32* %num, align 8, !dbg !8610
  %cmp = icmp ult i32 %1, %3, !dbg !8610
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8612
  %land.ext = zext i1 %4 to i32, !dbg !8610
  %5 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !8610
  %vec = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %5, i32 0, i32 2, !dbg !8610
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8610
  %idxprom = zext i32 %6 to i64, !dbg !8610
  %arrayidx = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec, i64 0, i64 %idxprom, !dbg !8610
  ret %struct.constructor_elt_d* %arrayidx, !dbg !8610
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @constructor_static_from_elts_p(%union.tree_node* %ctor) #0 !dbg !8613 {
entry:
  %ctor.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %ctor, %union.tree_node** %ctor.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ctor.addr, metadata !8614, metadata !DIExpression()), !dbg !8615
  %0 = load %union.tree_node*, %union.tree_node** %ctor.addr, align 8, !dbg !8616
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8616
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8616
  %bf.load = load i64, i64* %1, align 8, !dbg !8616
  %bf.lshr = lshr i64 %bf.load, 17, !dbg !8616
  %bf.clear = and i64 %bf.lshr, 1, !dbg !8616
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8616
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8616
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !8617

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %ctor.addr, align 8, !dbg !8618
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !8618
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8618
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8618
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8618
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8618
  %bf.load2 = load i64, i64* %4, align 8, !dbg !8618
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !8618
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8618
  %cmp = icmp eq i32 %bf.cast4, 17, !dbg !8619
  br i1 %cmp, label %land.rhs, label %lor.lhs.false, !dbg !8620

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %ctor.addr, align 8, !dbg !8621
  %common5 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !8621
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !8621
  %6 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !8621
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8621
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !8621
  %bf.load8 = load i64, i64* %7, align 8, !dbg !8621
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !8621
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !8621
  %cmp11 = icmp eq i32 %bf.cast10, 16, !dbg !8622
  br i1 %cmp11, label %land.rhs, label %land.end, !dbg !8623

land.rhs:                                         ; preds = %lor.lhs.false, %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %ctor.addr, align 8, !dbg !8624
  %constructor = bitcast %union.tree_node* %8 to %struct.tree_constructor*, !dbg !8624
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !8624
  %9 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !8624
  %tobool12 = icmp ne %struct.VEC_constructor_elt_gc* %9, null, !dbg !8624
  br i1 %tobool12, label %cond.true, label %cond.false, !dbg !8624

cond.true:                                        ; preds = %land.rhs
  %10 = load %union.tree_node*, %union.tree_node** %ctor.addr, align 8, !dbg !8624
  %constructor13 = bitcast %union.tree_node* %10 to %struct.tree_constructor*, !dbg !8624
  %elts14 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor13, i32 0, i32 1, !dbg !8624
  %11 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts14, align 8, !dbg !8624
  %base15 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %11, i32 0, i32 0, !dbg !8624
  br label %cond.end, !dbg !8624

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !8624

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base15, %cond.true ], [ null, %cond.false ], !dbg !8624
  %call = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !8624
  %cmp16 = icmp eq i32 %call, 0, !dbg !8624
  %lnot = xor i1 %cmp16, true, !dbg !8625
  br label %land.end

land.end:                                         ; preds = %cond.end, %lor.lhs.false, %entry
  %12 = phi i1 [ false, %lor.lhs.false ], [ false, %entry ], [ %lnot, %cond.end ], !dbg !8626
  %land.ext = zext i1 %12 to i32, !dbg !8623
  %conv = trunc i32 %land.ext to i8, !dbg !8627
  ret i8 %conv, !dbg !8628
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @initializer_constant_valid_p(%union.tree_node* %value, %union.tree_node* %endtype) #0 !dbg !8629 {
entry:
  %value.addr = alloca %union.tree_node*, align 8
  %endtype.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !8632, metadata !DIExpression()), !dbg !8633
  store %union.tree_node* %endtype, %union.tree_node** %endtype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %endtype.addr, metadata !8634, metadata !DIExpression()), !dbg !8635
  %0 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8636
  %1 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8637
  %call = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %0, %union.tree_node* %1, %union.tree_node** null), !dbg !8638
  ret %union.tree_node* %call, !dbg !8639
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %value, %union.tree_node* %endtype, %union.tree_node** %cache) #0 !dbg !8640 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  %endtype.addr = alloca %union.tree_node*, align 8
  %cache.addr = alloca %union.tree_node**, align 8
  %ret = alloca %union.tree_node*, align 8
  %idx = alloca i64, align 8
  %elt = alloca %union.tree_node*, align 8
  %absolute = alloca i8, align 1
  %reloc = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %src = alloca %union.tree_node*, align 8
  %src_type = alloca %union.tree_node*, align 8
  %dest_type = alloca %union.tree_node*, align 8
  %src228 = alloca %union.tree_node*, align 8
  %src_type232 = alloca %union.tree_node*, align 8
  %dest_type235 = alloca %union.tree_node*, align 8
  %inner = alloca %union.tree_node*, align 8
  %ncache = alloca [4 x %union.tree_node*], align 16
  %valid0 = alloca %union.tree_node*, align 8
  %valid1 = alloca %union.tree_node*, align 8
  %ncache719 = alloca [4 x %union.tree_node*], align 16
  %valid0720 = alloca %union.tree_node*, align 8
  %valid1726 = alloca %union.tree_node*, align 8
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !8643, metadata !DIExpression()), !dbg !8644
  store %union.tree_node* %endtype, %union.tree_node** %endtype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %endtype.addr, metadata !8645, metadata !DIExpression()), !dbg !8646
  store %union.tree_node** %cache, %union.tree_node*** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %cache.addr, metadata !8647, metadata !DIExpression()), !dbg !8648
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !8649, metadata !DIExpression()), !dbg !8650
  %0 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8651
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8651
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8651
  %bf.load = load i64, i64* %1, align 8, !dbg !8651
  %bf.clear = and i64 %bf.load, 65535, !dbg !8651
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8651
  switch i32 %bf.cast, label %sw.default [
    i32 51, label %sw.bb
    i32 23, label %sw.bb69
    i32 27, label %sw.bb69
    i32 24, label %sw.bb69
    i32 25, label %sw.bb69
    i32 28, label %sw.bb69
    i32 26, label %sw.bb69
    i32 121, label %sw.bb70
    i32 122, label %sw.bb70
    i32 117, label %sw.bb122
    i32 118, label %sw.bb127
    i32 116, label %sw.bb227
    i32 113, label %sw.bb227
    i32 66, label %sw.bb588
    i32 63, label %sw.bb588
    i32 64, label %sw.bb668
  ], !dbg !8652

sw.bb:                                            ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8653
  %call = call zeroext i8 @constructor_static_from_elts_p(%union.tree_node* %2), !dbg !8656
  %tobool = icmp ne i8 %call, 0, !dbg !8656
  br i1 %tobool, label %if.then, label %if.end59, !dbg !8657

if.then:                                          ; preds = %sw.bb
  call void @llvm.dbg.declare(metadata i64* %idx, metadata !8658, metadata !DIExpression()), !dbg !8660
  call void @llvm.dbg.declare(metadata %union.tree_node** %elt, metadata !8661, metadata !DIExpression()), !dbg !8662
  call void @llvm.dbg.declare(metadata i8* %absolute, metadata !8663, metadata !DIExpression()), !dbg !8664
  store i8 1, i8* %absolute, align 1, !dbg !8664
  %3 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8665
  %tobool1 = icmp ne %union.tree_node** %3, null, !dbg !8665
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !8667

land.lhs.true:                                    ; preds = %if.then
  %4 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8668
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %4, i64 0, !dbg !8668
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8668
  %6 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8669
  %cmp = icmp eq %union.tree_node* %5, %6, !dbg !8670
  br i1 %cmp, label %if.then2, label %if.end, !dbg !8671

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8672
  %arrayidx3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %7, i64 1, !dbg !8672
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !8672
  store %union.tree_node* %8, %union.tree_node** %retval, align 8, !dbg !8673
  br label %return, !dbg !8673

if.end:                                           ; preds = %land.lhs.true, %if.then
  store i64 0, i64* %idx, align 8, !dbg !8674
  br label %for.cond, !dbg !8674

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i64, i64* %idx, align 8, !dbg !8676
  %10 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8676
  %constructor = bitcast %union.tree_node* %10 to %struct.tree_constructor*, !dbg !8676
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !8676
  %11 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !8676
  %tobool4 = icmp ne %struct.VEC_constructor_elt_gc* %11, null, !dbg !8676
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !8676

cond.true:                                        ; preds = %for.cond
  %12 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8676
  %constructor5 = bitcast %union.tree_node* %12 to %struct.tree_constructor*, !dbg !8676
  %elts6 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor5, i32 0, i32 1, !dbg !8676
  %13 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts6, align 8, !dbg !8676
  %base7 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %13, i32 0, i32 0, !dbg !8676
  br label %cond.end, !dbg !8676

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8676

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base7, %cond.true ], [ null, %cond.false ], !dbg !8676
  %call8 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !8676
  %conv = zext i32 %call8 to i64, !dbg !8676
  %cmp9 = icmp uge i64 %9, %conv, !dbg !8676
  br i1 %cmp9, label %cond.true11, label %cond.false12, !dbg !8676

cond.true11:                                      ; preds = %cond.end
  br label %cond.end26, !dbg !8676

cond.false12:                                     ; preds = %cond.end
  %14 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8676
  %constructor13 = bitcast %union.tree_node* %14 to %struct.tree_constructor*, !dbg !8676
  %elts14 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor13, i32 0, i32 1, !dbg !8676
  %15 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts14, align 8, !dbg !8676
  %tobool15 = icmp ne %struct.VEC_constructor_elt_gc* %15, null, !dbg !8676
  br i1 %tobool15, label %cond.true16, label %cond.false20, !dbg !8676

cond.true16:                                      ; preds = %cond.false12
  %16 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8676
  %constructor17 = bitcast %union.tree_node* %16 to %struct.tree_constructor*, !dbg !8676
  %elts18 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor17, i32 0, i32 1, !dbg !8676
  %17 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts18, align 8, !dbg !8676
  %base19 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %17, i32 0, i32 0, !dbg !8676
  br label %cond.end21, !dbg !8676

cond.false20:                                     ; preds = %cond.false12
  br label %cond.end21, !dbg !8676

cond.end21:                                       ; preds = %cond.false20, %cond.true16
  %cond22 = phi %struct.VEC_constructor_elt_base* [ %base19, %cond.true16 ], [ null, %cond.false20 ], !dbg !8676
  %18 = load i64, i64* %idx, align 8, !dbg !8676
  %conv23 = trunc i64 %18 to i32, !dbg !8676
  %call24 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond22, i32 %conv23), !dbg !8676
  %value25 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call24, i32 0, i32 1, !dbg !8676
  %19 = load %union.tree_node*, %union.tree_node** %value25, align 8, !dbg !8676
  store %union.tree_node* %19, %union.tree_node** %elt, align 8, !dbg !8676
  br label %cond.end26, !dbg !8676

cond.end26:                                       ; preds = %cond.end21, %cond.true11
  %cond27 = phi i32 [ 0, %cond.true11 ], [ 1, %cond.end21 ], !dbg !8676
  %tobool28 = icmp ne i32 %cond27, 0, !dbg !8674
  br i1 %tobool28, label %for.body, label %for.end, !dbg !8674

for.body:                                         ; preds = %cond.end26
  call void @llvm.dbg.declare(metadata %union.tree_node** %reloc, metadata !8678, metadata !DIExpression()), !dbg !8680
  %20 = load %union.tree_node*, %union.tree_node** %elt, align 8, !dbg !8681
  %21 = load %union.tree_node*, %union.tree_node** %elt, align 8, !dbg !8682
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !8682
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8682
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8682
  %call29 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %20, %union.tree_node* %22, %union.tree_node** null), !dbg !8683
  store %union.tree_node* %call29, %union.tree_node** %reloc, align 8, !dbg !8684
  %23 = load %union.tree_node*, %union.tree_node** %reloc, align 8, !dbg !8685
  %tobool30 = icmp ne %union.tree_node* %23, null, !dbg !8685
  br i1 %tobool30, label %if.end37, label %if.then31, !dbg !8687

if.then31:                                        ; preds = %for.body
  %24 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8688
  %tobool32 = icmp ne %union.tree_node** %24, null, !dbg !8688
  br i1 %tobool32, label %if.then33, label %if.end36, !dbg !8691

if.then33:                                        ; preds = %if.then31
  %25 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8692
  %26 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8694
  %arrayidx34 = getelementptr inbounds %union.tree_node*, %union.tree_node** %26, i64 0, !dbg !8694
  store %union.tree_node* %25, %union.tree_node** %arrayidx34, align 8, !dbg !8695
  %27 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8696
  %arrayidx35 = getelementptr inbounds %union.tree_node*, %union.tree_node** %27, i64 1, !dbg !8696
  store %union.tree_node* null, %union.tree_node** %arrayidx35, align 8, !dbg !8697
  br label %if.end36, !dbg !8698

if.end36:                                         ; preds = %if.then33, %if.then31
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8699
  br label %return, !dbg !8699

if.end37:                                         ; preds = %for.body
  %28 = load %union.tree_node*, %union.tree_node** %reloc, align 8, !dbg !8700
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8702
  %cmp38 = icmp ne %union.tree_node* %28, %29, !dbg !8703
  br i1 %cmp38, label %if.then40, label %if.end41, !dbg !8704

if.then40:                                        ; preds = %if.end37
  store i8 0, i8* %absolute, align 1, !dbg !8705
  br label %if.end41, !dbg !8706

if.end41:                                         ; preds = %if.then40, %if.end37
  br label %for.inc, !dbg !8707

for.inc:                                          ; preds = %if.end41
  %30 = load i64, i64* %idx, align 8, !dbg !8676
  %inc = add i64 %30, 1, !dbg !8676
  store i64 %inc, i64* %idx, align 8, !dbg !8676
  br label %for.cond, !dbg !8676, !llvm.loop !8708

for.end:                                          ; preds = %cond.end26
  %31 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8710
  %tobool42 = icmp ne %union.tree_node** %31, null, !dbg !8710
  br i1 %tobool42, label %if.then43, label %if.end52, !dbg !8712

if.then43:                                        ; preds = %for.end
  %32 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8713
  %33 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8715
  %arrayidx44 = getelementptr inbounds %union.tree_node*, %union.tree_node** %33, i64 0, !dbg !8715
  store %union.tree_node* %32, %union.tree_node** %arrayidx44, align 8, !dbg !8716
  %34 = load i8, i8* %absolute, align 1, !dbg !8717
  %conv45 = zext i8 %34 to i32, !dbg !8717
  %tobool46 = icmp ne i32 %conv45, 0, !dbg !8717
  br i1 %tobool46, label %cond.true47, label %cond.false48, !dbg !8717

cond.true47:                                      ; preds = %if.then43
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8718
  br label %cond.end49, !dbg !8717

cond.false48:                                     ; preds = %if.then43
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8719
  br label %cond.end49, !dbg !8717

cond.end49:                                       ; preds = %cond.false48, %cond.true47
  %cond50 = phi %union.tree_node* [ %35, %cond.true47 ], [ %36, %cond.false48 ], !dbg !8717
  %37 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8720
  %arrayidx51 = getelementptr inbounds %union.tree_node*, %union.tree_node** %37, i64 1, !dbg !8720
  store %union.tree_node* %cond50, %union.tree_node** %arrayidx51, align 8, !dbg !8721
  br label %if.end52, !dbg !8722

if.end52:                                         ; preds = %cond.end49, %for.end
  %38 = load i8, i8* %absolute, align 1, !dbg !8723
  %conv53 = zext i8 %38 to i32, !dbg !8723
  %tobool54 = icmp ne i32 %conv53, 0, !dbg !8723
  br i1 %tobool54, label %cond.true55, label %cond.false56, !dbg !8723

cond.true55:                                      ; preds = %if.end52
  %39 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8724
  br label %cond.end57, !dbg !8723

cond.false56:                                     ; preds = %if.end52
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8725
  br label %cond.end57, !dbg !8723

cond.end57:                                       ; preds = %cond.false56, %cond.true55
  %cond58 = phi %union.tree_node* [ %39, %cond.true55 ], [ %40, %cond.false56 ], !dbg !8723
  store %union.tree_node* %cond58, %union.tree_node** %retval, align 8, !dbg !8726
  br label %return, !dbg !8726

if.end59:                                         ; preds = %sw.bb
  %41 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8727
  %base60 = bitcast %union.tree_node* %41 to %struct.tree_base*, !dbg !8727
  %42 = bitcast %struct.tree_base* %base60 to i64*, !dbg !8727
  %bf.load61 = load i64, i64* %42, align 8, !dbg !8727
  %bf.lshr = lshr i64 %bf.load61, 26, !dbg !8727
  %bf.clear62 = and i64 %bf.lshr, 1, !dbg !8727
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !8727
  %tobool64 = icmp ne i32 %bf.cast63, 0, !dbg !8727
  br i1 %tobool64, label %cond.true65, label %cond.false66, !dbg !8727

cond.true65:                                      ; preds = %if.end59
  %43 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8728
  br label %cond.end67, !dbg !8727

cond.false66:                                     ; preds = %if.end59
  br label %cond.end67, !dbg !8727

cond.end67:                                       ; preds = %cond.false66, %cond.true65
  %cond68 = phi %union.tree_node* [ %43, %cond.true65 ], [ null, %cond.false66 ], !dbg !8727
  store %union.tree_node* %cond68, %union.tree_node** %retval, align 8, !dbg !8729
  br label %return, !dbg !8729

sw.bb69:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %44 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8730
  store %union.tree_node* %44, %union.tree_node** %retval, align 8, !dbg !8731
  br label %return, !dbg !8731

sw.bb70:                                          ; preds = %entry, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !8732, metadata !DIExpression()), !dbg !8734
  %45 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8735
  %exp = bitcast %union.tree_node* %45 to %struct.tree_exp*, !dbg !8735
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8735
  %arrayidx71 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8735
  %46 = load %union.tree_node*, %union.tree_node** %arrayidx71, align 8, !dbg !8735
  %call72 = call %union.tree_node* @staticp(%union.tree_node* %46), !dbg !8736
  store %union.tree_node* %call72, %union.tree_node** %op0, align 8, !dbg !8734
  %47 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8737
  %tobool73 = icmp ne %union.tree_node* %47, null, !dbg !8737
  br i1 %tobool73, label %if.then74, label %if.end121, !dbg !8739

if.then74:                                        ; preds = %sw.bb70
  %48 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8740
  %base75 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !8740
  %49 = bitcast %struct.tree_base* %base75 to i64*, !dbg !8740
  %bf.load76 = load i64, i64* %49, align 8, !dbg !8740
  %bf.clear77 = and i64 %bf.load76, 65535, !dbg !8740
  %bf.cast78 = trunc i64 %bf.clear77 to i32, !dbg !8740
  %cmp79 = icmp eq i32 %bf.cast78, 47, !dbg !8743
  br i1 %cmp79, label %land.lhs.true81, label %if.end92, !dbg !8744

land.lhs.true81:                                  ; preds = %if.then74
  %50 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8745
  %exp82 = bitcast %union.tree_node* %50 to %struct.tree_exp*, !dbg !8745
  %operands83 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp82, i32 0, i32 3, !dbg !8745
  %arrayidx84 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands83, i64 0, i64 0, !dbg !8745
  %51 = load %union.tree_node*, %union.tree_node** %arrayidx84, align 8, !dbg !8745
  %base85 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !8745
  %52 = bitcast %struct.tree_base* %base85 to i64*, !dbg !8745
  %bf.load86 = load i64, i64* %52, align 8, !dbg !8745
  %bf.lshr87 = lshr i64 %bf.load86, 17, !dbg !8745
  %bf.clear88 = and i64 %bf.lshr87, 1, !dbg !8745
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !8745
  %tobool90 = icmp ne i32 %bf.cast89, 0, !dbg !8745
  br i1 %tobool90, label %if.then91, label %if.end92, !dbg !8746

if.then91:                                        ; preds = %land.lhs.true81
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8747
  store %union.tree_node* %53, %union.tree_node** %retval, align 8, !dbg !8748
  br label %return, !dbg !8748

if.end92:                                         ; preds = %land.lhs.true81, %if.then74
  %54 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8749
  %base93 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !8749
  %55 = bitcast %struct.tree_base* %base93 to i64*, !dbg !8749
  %bf.load94 = load i64, i64* %55, align 8, !dbg !8749
  %bf.clear95 = and i64 %bf.load94, 65535, !dbg !8749
  %bf.cast96 = trunc i64 %bf.clear95 to i32, !dbg !8749
  %cmp97 = icmp eq i32 %bf.cast96, 29, !dbg !8751
  br i1 %cmp97, label %land.lhs.true99, label %if.end112, !dbg !8752

land.lhs.true99:                                  ; preds = %if.end92
  %56 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8753
  %function_decl = bitcast %union.tree_node* %56 to %struct.tree_function_decl*, !dbg !8753
  %regdecl_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8753
  %bf.load100 = load i32, i32* %regdecl_flag, align 8, !dbg !8753
  %bf.lshr101 = lshr i32 %bf.load100, 22, !dbg !8753
  %bf.clear102 = and i32 %bf.lshr101, 1, !dbg !8753
  %tobool103 = icmp ne i32 %bf.clear102, 0, !dbg !8753
  br i1 %tobool103, label %land.lhs.true104, label %if.end112, !dbg !8754

land.lhs.true104:                                 ; preds = %land.lhs.true99
  %57 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8755
  %base105 = bitcast %union.tree_node* %57 to %struct.tree_base*, !dbg !8755
  %58 = bitcast %struct.tree_base* %base105 to i64*, !dbg !8755
  %bf.load106 = load i64, i64* %58, align 8, !dbg !8755
  %bf.lshr107 = lshr i64 %bf.load106, 26, !dbg !8755
  %bf.clear108 = and i64 %bf.lshr107, 1, !dbg !8755
  %bf.cast109 = trunc i64 %bf.clear108 to i32, !dbg !8755
  %tobool110 = icmp ne i32 %bf.cast109, 0, !dbg !8755
  br i1 %tobool110, label %if.end112, label %if.then111, !dbg !8756

if.then111:                                       ; preds = %land.lhs.true104
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8757
  br label %return, !dbg !8757

if.end112:                                        ; preds = %land.lhs.true104, %land.lhs.true99, %if.end92
  %59 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8758
  %base113 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !8758
  %60 = bitcast %struct.tree_base* %base113 to i64*, !dbg !8758
  %bf.load114 = load i64, i64* %60, align 8, !dbg !8758
  %bf.clear115 = and i64 %bf.load114, 65535, !dbg !8758
  %bf.cast116 = trunc i64 %bf.clear115 to i32, !dbg !8758
  %cmp117 = icmp eq i32 %bf.cast116, 51, !dbg !8760
  br i1 %cmp117, label %if.then119, label %if.end120, !dbg !8761

if.then119:                                       ; preds = %if.end112
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8762
  br label %return, !dbg !8762

if.end120:                                        ; preds = %if.end112
  br label %if.end121, !dbg !8763

if.end121:                                        ; preds = %if.end120, %sw.bb70
  %61 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !8764
  store %union.tree_node* %61, %union.tree_node** %retval, align 8, !dbg !8765
  br label %return, !dbg !8765

sw.bb122:                                         ; preds = %entry
  %62 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8766
  %exp123 = bitcast %union.tree_node* %62 to %struct.tree_exp*, !dbg !8766
  %operands124 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp123, i32 0, i32 3, !dbg !8766
  %arrayidx125 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands124, i64 0, i64 0, !dbg !8766
  %63 = load %union.tree_node*, %union.tree_node** %arrayidx125, align 8, !dbg !8766
  %64 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8767
  %65 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8768
  %call126 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %63, %union.tree_node* %64, %union.tree_node** %65), !dbg !8769
  store %union.tree_node* %call126, %union.tree_node** %retval, align 8, !dbg !8770
  br label %return, !dbg !8770

sw.bb127:                                         ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %src, metadata !8771, metadata !DIExpression()), !dbg !8773
  %66 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8774
  %exp128 = bitcast %union.tree_node* %66 to %struct.tree_exp*, !dbg !8774
  %operands129 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp128, i32 0, i32 3, !dbg !8774
  %arrayidx130 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands129, i64 0, i64 0, !dbg !8774
  %67 = load %union.tree_node*, %union.tree_node** %arrayidx130, align 8, !dbg !8774
  store %union.tree_node* %67, %union.tree_node** %src, align 8, !dbg !8773
  call void @llvm.dbg.declare(metadata %union.tree_node** %src_type, metadata !8775, metadata !DIExpression()), !dbg !8776
  %68 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !8777
  %common131 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !8777
  %type132 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common131, i32 0, i32 2, !dbg !8777
  %69 = load %union.tree_node*, %union.tree_node** %type132, align 8, !dbg !8777
  store %union.tree_node* %69, %union.tree_node** %src_type, align 8, !dbg !8776
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest_type, metadata !8778, metadata !DIExpression()), !dbg !8779
  %70 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8780
  %common133 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !8780
  %type134 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common133, i32 0, i32 2, !dbg !8780
  %71 = load %union.tree_node*, %union.tree_node** %type134, align 8, !dbg !8780
  store %union.tree_node* %71, %union.tree_node** %dest_type, align 8, !dbg !8779
  %72 = load %union.tree_node*, %union.tree_node** %src_type, align 8, !dbg !8781
  %base135 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !8781
  %73 = bitcast %struct.tree_base* %base135 to i64*, !dbg !8781
  %bf.load136 = load i64, i64* %73, align 8, !dbg !8781
  %bf.clear137 = and i64 %bf.load136, 65535, !dbg !8781
  %bf.cast138 = trunc i64 %bf.clear137 to i32, !dbg !8781
  %cmp139 = icmp eq i32 %bf.cast138, 15, !dbg !8781
  br i1 %cmp139, label %land.lhs.true161, label %lor.lhs.false, !dbg !8781

lor.lhs.false:                                    ; preds = %sw.bb127
  %74 = load %union.tree_node*, %union.tree_node** %src_type, align 8, !dbg !8781
  %base141 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !8781
  %75 = bitcast %struct.tree_base* %base141 to i64*, !dbg !8781
  %bf.load142 = load i64, i64* %75, align 8, !dbg !8781
  %bf.clear143 = and i64 %bf.load142, 65535, !dbg !8781
  %bf.cast144 = trunc i64 %bf.clear143 to i32, !dbg !8781
  %cmp145 = icmp eq i32 %bf.cast144, 16, !dbg !8781
  br i1 %cmp145, label %land.lhs.true161, label %lor.lhs.false147, !dbg !8781

lor.lhs.false147:                                 ; preds = %lor.lhs.false
  %76 = load %union.tree_node*, %union.tree_node** %src_type, align 8, !dbg !8781
  %base148 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !8781
  %77 = bitcast %struct.tree_base* %base148 to i64*, !dbg !8781
  %bf.load149 = load i64, i64* %77, align 8, !dbg !8781
  %bf.clear150 = and i64 %bf.load149, 65535, !dbg !8781
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !8781
  %cmp152 = icmp eq i32 %bf.cast151, 17, !dbg !8781
  br i1 %cmp152, label %land.lhs.true161, label %lor.lhs.false154, !dbg !8781

lor.lhs.false154:                                 ; preds = %lor.lhs.false147
  %78 = load %union.tree_node*, %union.tree_node** %src_type, align 8, !dbg !8781
  %base155 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !8781
  %79 = bitcast %struct.tree_base* %base155 to i64*, !dbg !8781
  %bf.load156 = load i64, i64* %79, align 8, !dbg !8781
  %bf.clear157 = and i64 %bf.load156, 65535, !dbg !8781
  %bf.cast158 = trunc i64 %bf.clear157 to i32, !dbg !8781
  %cmp159 = icmp eq i32 %bf.cast158, 18, !dbg !8781
  br i1 %cmp159, label %land.lhs.true161, label %if.end225, !dbg !8783

land.lhs.true161:                                 ; preds = %lor.lhs.false154, %lor.lhs.false147, %lor.lhs.false, %sw.bb127
  %80 = load %union.tree_node*, %union.tree_node** %dest_type, align 8, !dbg !8784
  %base162 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !8784
  %81 = bitcast %struct.tree_base* %base162 to i64*, !dbg !8784
  %bf.load163 = load i64, i64* %81, align 8, !dbg !8784
  %bf.clear164 = and i64 %bf.load163, 65535, !dbg !8784
  %bf.cast165 = trunc i64 %bf.clear164 to i32, !dbg !8784
  %cmp166 = icmp eq i32 %bf.cast165, 15, !dbg !8784
  br i1 %cmp166, label %if.end225, label %lor.lhs.false168, !dbg !8784

lor.lhs.false168:                                 ; preds = %land.lhs.true161
  %82 = load %union.tree_node*, %union.tree_node** %dest_type, align 8, !dbg !8784
  %base169 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !8784
  %83 = bitcast %struct.tree_base* %base169 to i64*, !dbg !8784
  %bf.load170 = load i64, i64* %83, align 8, !dbg !8784
  %bf.clear171 = and i64 %bf.load170, 65535, !dbg !8784
  %bf.cast172 = trunc i64 %bf.clear171 to i32, !dbg !8784
  %cmp173 = icmp eq i32 %bf.cast172, 16, !dbg !8784
  br i1 %cmp173, label %if.end225, label %lor.lhs.false175, !dbg !8784

lor.lhs.false175:                                 ; preds = %lor.lhs.false168
  %84 = load %union.tree_node*, %union.tree_node** %dest_type, align 8, !dbg !8784
  %base176 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !8784
  %85 = bitcast %struct.tree_base* %base176 to i64*, !dbg !8784
  %bf.load177 = load i64, i64* %85, align 8, !dbg !8784
  %bf.clear178 = and i64 %bf.load177, 65535, !dbg !8784
  %bf.cast179 = trunc i64 %bf.clear178 to i32, !dbg !8784
  %cmp180 = icmp eq i32 %bf.cast179, 17, !dbg !8784
  br i1 %cmp180, label %if.end225, label %lor.lhs.false182, !dbg !8784

lor.lhs.false182:                                 ; preds = %lor.lhs.false175
  %86 = load %union.tree_node*, %union.tree_node** %dest_type, align 8, !dbg !8784
  %base183 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !8784
  %87 = bitcast %struct.tree_base* %base183 to i64*, !dbg !8784
  %bf.load184 = load i64, i64* %87, align 8, !dbg !8784
  %bf.clear185 = and i64 %bf.load184, 65535, !dbg !8784
  %bf.cast186 = trunc i64 %bf.clear185 to i32, !dbg !8784
  %cmp187 = icmp eq i32 %bf.cast186, 18, !dbg !8784
  br i1 %cmp187, label %if.end225, label %if.then189, !dbg !8785

if.then189:                                       ; preds = %lor.lhs.false182
  %88 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8786
  %base190 = bitcast %union.tree_node* %88 to %struct.tree_base*, !dbg !8786
  %89 = bitcast %struct.tree_base* %base190 to i64*, !dbg !8786
  %bf.load191 = load i64, i64* %89, align 8, !dbg !8786
  %bf.clear192 = and i64 %bf.load191, 65535, !dbg !8786
  %bf.cast193 = trunc i64 %bf.clear192 to i32, !dbg !8786
  %cmp194 = icmp eq i32 %bf.cast193, 14, !dbg !8786
  br i1 %cmp194, label %cond.true196, label %cond.false198, !dbg !8786

cond.true196:                                     ; preds = %if.then189
  %90 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8786
  %call197 = call i32 @vector_type_mode(%union.tree_node* %90), !dbg !8786
  br label %cond.end203, !dbg !8786

cond.false198:                                    ; preds = %if.then189
  %91 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8786
  %type199 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !8786
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type199, i32 0, i32 6, !dbg !8786
  %bf.load200 = load i32, i32* %mode, align 4, !dbg !8786
  %bf.lshr201 = lshr i32 %bf.load200, 16, !dbg !8786
  %bf.clear202 = and i32 %bf.lshr201, 255, !dbg !8786
  br label %cond.end203, !dbg !8786

cond.end203:                                      ; preds = %cond.false198, %cond.true196
  %cond204 = phi i32 [ %call197, %cond.true196 ], [ %bf.clear202, %cond.false198 ], !dbg !8786
  %92 = load %union.tree_node*, %union.tree_node** %dest_type, align 8, !dbg !8789
  %base205 = bitcast %union.tree_node* %92 to %struct.tree_base*, !dbg !8789
  %93 = bitcast %struct.tree_base* %base205 to i64*, !dbg !8789
  %bf.load206 = load i64, i64* %93, align 8, !dbg !8789
  %bf.clear207 = and i64 %bf.load206, 65535, !dbg !8789
  %bf.cast208 = trunc i64 %bf.clear207 to i32, !dbg !8789
  %cmp209 = icmp eq i32 %bf.cast208, 14, !dbg !8789
  br i1 %cmp209, label %cond.true211, label %cond.false213, !dbg !8789

cond.true211:                                     ; preds = %cond.end203
  %94 = load %union.tree_node*, %union.tree_node** %dest_type, align 8, !dbg !8789
  %call212 = call i32 @vector_type_mode(%union.tree_node* %94), !dbg !8789
  br label %cond.end219, !dbg !8789

cond.false213:                                    ; preds = %cond.end203
  %95 = load %union.tree_node*, %union.tree_node** %dest_type, align 8, !dbg !8789
  %type214 = bitcast %union.tree_node* %95 to %struct.tree_type*, !dbg !8789
  %mode215 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type214, i32 0, i32 6, !dbg !8789
  %bf.load216 = load i32, i32* %mode215, align 4, !dbg !8789
  %bf.lshr217 = lshr i32 %bf.load216, 16, !dbg !8789
  %bf.clear218 = and i32 %bf.lshr217, 255, !dbg !8789
  br label %cond.end219, !dbg !8789

cond.end219:                                      ; preds = %cond.false213, %cond.true211
  %cond220 = phi i32 [ %call212, %cond.true211 ], [ %bf.clear218, %cond.false213 ], !dbg !8789
  %cmp221 = icmp eq i32 %cond204, %cond220, !dbg !8790
  br i1 %cmp221, label %if.then223, label %if.else, !dbg !8791

if.then223:                                       ; preds = %cond.end219
  %96 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !8792
  %97 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8793
  %98 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8794
  %call224 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %96, %union.tree_node* %97, %union.tree_node** %98), !dbg !8795
  store %union.tree_node* %call224, %union.tree_node** %retval, align 8, !dbg !8796
  br label %return, !dbg !8796

if.else:                                          ; preds = %cond.end219
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8797
  br label %return, !dbg !8797

if.end225:                                        ; preds = %lor.lhs.false182, %lor.lhs.false175, %lor.lhs.false168, %land.lhs.true161, %lor.lhs.false154
  %99 = load %union.tree_node*, %union.tree_node** %src, align 8, !dbg !8798
  %100 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8799
  %101 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8800
  %call226 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %99, %union.tree_node* %100, %union.tree_node** %101), !dbg !8801
  store %union.tree_node* %call226, %union.tree_node** %retval, align 8, !dbg !8802
  br label %return, !dbg !8802

sw.bb227:                                         ; preds = %entry, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %src228, metadata !8803, metadata !DIExpression()), !dbg !8805
  %102 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8806
  %exp229 = bitcast %union.tree_node* %102 to %struct.tree_exp*, !dbg !8806
  %operands230 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp229, i32 0, i32 3, !dbg !8806
  %arrayidx231 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands230, i64 0, i64 0, !dbg !8806
  %103 = load %union.tree_node*, %union.tree_node** %arrayidx231, align 8, !dbg !8806
  store %union.tree_node* %103, %union.tree_node** %src228, align 8, !dbg !8805
  call void @llvm.dbg.declare(metadata %union.tree_node** %src_type232, metadata !8807, metadata !DIExpression()), !dbg !8808
  %104 = load %union.tree_node*, %union.tree_node** %src228, align 8, !dbg !8809
  %common233 = bitcast %union.tree_node* %104 to %struct.tree_common*, !dbg !8809
  %type234 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common233, i32 0, i32 2, !dbg !8809
  %105 = load %union.tree_node*, %union.tree_node** %type234, align 8, !dbg !8809
  store %union.tree_node* %105, %union.tree_node** %src_type232, align 8, !dbg !8808
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest_type235, metadata !8810, metadata !DIExpression()), !dbg !8811
  %106 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8812
  %common236 = bitcast %union.tree_node* %106 to %struct.tree_common*, !dbg !8812
  %type237 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common236, i32 0, i32 2, !dbg !8812
  %107 = load %union.tree_node*, %union.tree_node** %type237, align 8, !dbg !8812
  store %union.tree_node* %107, %union.tree_node** %dest_type235, align 8, !dbg !8811
  %108 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8813
  %base238 = bitcast %union.tree_node* %108 to %struct.tree_base*, !dbg !8813
  %109 = bitcast %struct.tree_base* %base238 to i64*, !dbg !8813
  %bf.load239 = load i64, i64* %109, align 8, !dbg !8813
  %bf.clear240 = and i64 %bf.load239, 65535, !dbg !8813
  %bf.cast241 = trunc i64 %bf.clear240 to i32, !dbg !8813
  %cmp242 = icmp eq i32 %bf.cast241, 10, !dbg !8813
  br i1 %cmp242, label %land.lhs.true251, label %lor.lhs.false244, !dbg !8813

lor.lhs.false244:                                 ; preds = %sw.bb227
  %110 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8813
  %base245 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !8813
  %111 = bitcast %struct.tree_base* %base245 to i64*, !dbg !8813
  %bf.load246 = load i64, i64* %111, align 8, !dbg !8813
  %bf.clear247 = and i64 %bf.load246, 65535, !dbg !8813
  %bf.cast248 = trunc i64 %bf.clear247 to i32, !dbg !8813
  %cmp249 = icmp eq i32 %bf.cast248, 12, !dbg !8813
  br i1 %cmp249, label %land.lhs.true251, label %lor.lhs.false265, !dbg !8815

land.lhs.true251:                                 ; preds = %lor.lhs.false244, %sw.bb227
  %112 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8816
  %base252 = bitcast %union.tree_node* %112 to %struct.tree_base*, !dbg !8816
  %113 = bitcast %struct.tree_base* %base252 to i64*, !dbg !8816
  %bf.load253 = load i64, i64* %113, align 8, !dbg !8816
  %bf.clear254 = and i64 %bf.load253, 65535, !dbg !8816
  %bf.cast255 = trunc i64 %bf.clear254 to i32, !dbg !8816
  %cmp256 = icmp eq i32 %bf.cast255, 10, !dbg !8816
  br i1 %cmp256, label %if.then339, label %lor.lhs.false258, !dbg !8816

lor.lhs.false258:                                 ; preds = %land.lhs.true251
  %114 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8816
  %base259 = bitcast %union.tree_node* %114 to %struct.tree_base*, !dbg !8816
  %115 = bitcast %struct.tree_base* %base259 to i64*, !dbg !8816
  %bf.load260 = load i64, i64* %115, align 8, !dbg !8816
  %bf.clear261 = and i64 %bf.load260, 65535, !dbg !8816
  %bf.cast262 = trunc i64 %bf.clear261 to i32, !dbg !8816
  %cmp263 = icmp eq i32 %bf.cast262, 12, !dbg !8816
  br i1 %cmp263, label %if.then339, label %lor.lhs.false265, !dbg !8817

lor.lhs.false265:                                 ; preds = %lor.lhs.false258, %lor.lhs.false244
  %116 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8818
  %base266 = bitcast %union.tree_node* %116 to %struct.tree_base*, !dbg !8818
  %117 = bitcast %struct.tree_base* %base266 to i64*, !dbg !8818
  %bf.load267 = load i64, i64* %117, align 8, !dbg !8818
  %bf.clear268 = and i64 %bf.load267, 65535, !dbg !8818
  %bf.cast269 = trunc i64 %bf.clear268 to i32, !dbg !8818
  %cmp270 = icmp eq i32 %bf.cast269, 9, !dbg !8818
  br i1 %cmp270, label %land.lhs.true295, label %lor.lhs.false272, !dbg !8818

lor.lhs.false272:                                 ; preds = %lor.lhs.false265
  %118 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8818
  %base273 = bitcast %union.tree_node* %118 to %struct.tree_base*, !dbg !8818
  %119 = bitcast %struct.tree_base* %base273 to i64*, !dbg !8818
  %bf.load274 = load i64, i64* %119, align 8, !dbg !8818
  %bf.clear275 = and i64 %bf.load274, 65535, !dbg !8818
  %bf.cast276 = trunc i64 %bf.clear275 to i32, !dbg !8818
  %cmp277 = icmp eq i32 %bf.cast276, 13, !dbg !8818
  br i1 %cmp277, label %land.lhs.true286, label %lor.lhs.false279, !dbg !8818

lor.lhs.false279:                                 ; preds = %lor.lhs.false272
  %120 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8818
  %base280 = bitcast %union.tree_node* %120 to %struct.tree_base*, !dbg !8818
  %121 = bitcast %struct.tree_base* %base280 to i64*, !dbg !8818
  %bf.load281 = load i64, i64* %121, align 8, !dbg !8818
  %bf.clear282 = and i64 %bf.load281, 65535, !dbg !8818
  %bf.cast283 = trunc i64 %bf.clear282 to i32, !dbg !8818
  %cmp284 = icmp eq i32 %bf.cast283, 14, !dbg !8818
  br i1 %cmp284, label %land.lhs.true286, label %lor.lhs.false325, !dbg !8818

land.lhs.true286:                                 ; preds = %lor.lhs.false279, %lor.lhs.false272
  %122 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8818
  %common287 = bitcast %union.tree_node* %122 to %struct.tree_common*, !dbg !8818
  %type288 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common287, i32 0, i32 2, !dbg !8818
  %123 = load %union.tree_node*, %union.tree_node** %type288, align 8, !dbg !8818
  %base289 = bitcast %union.tree_node* %123 to %struct.tree_base*, !dbg !8818
  %124 = bitcast %struct.tree_base* %base289 to i64*, !dbg !8818
  %bf.load290 = load i64, i64* %124, align 8, !dbg !8818
  %bf.clear291 = and i64 %bf.load290, 65535, !dbg !8818
  %bf.cast292 = trunc i64 %bf.clear291 to i32, !dbg !8818
  %cmp293 = icmp eq i32 %bf.cast292, 9, !dbg !8818
  br i1 %cmp293, label %land.lhs.true295, label %lor.lhs.false325, !dbg !8819

land.lhs.true295:                                 ; preds = %land.lhs.true286, %lor.lhs.false265
  %125 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8820
  %base296 = bitcast %union.tree_node* %125 to %struct.tree_base*, !dbg !8820
  %126 = bitcast %struct.tree_base* %base296 to i64*, !dbg !8820
  %bf.load297 = load i64, i64* %126, align 8, !dbg !8820
  %bf.clear298 = and i64 %bf.load297, 65535, !dbg !8820
  %bf.cast299 = trunc i64 %bf.clear298 to i32, !dbg !8820
  %cmp300 = icmp eq i32 %bf.cast299, 9, !dbg !8820
  br i1 %cmp300, label %if.then339, label %lor.lhs.false302, !dbg !8820

lor.lhs.false302:                                 ; preds = %land.lhs.true295
  %127 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8820
  %base303 = bitcast %union.tree_node* %127 to %struct.tree_base*, !dbg !8820
  %128 = bitcast %struct.tree_base* %base303 to i64*, !dbg !8820
  %bf.load304 = load i64, i64* %128, align 8, !dbg !8820
  %bf.clear305 = and i64 %bf.load304, 65535, !dbg !8820
  %bf.cast306 = trunc i64 %bf.clear305 to i32, !dbg !8820
  %cmp307 = icmp eq i32 %bf.cast306, 13, !dbg !8820
  br i1 %cmp307, label %land.lhs.true316, label %lor.lhs.false309, !dbg !8820

lor.lhs.false309:                                 ; preds = %lor.lhs.false302
  %129 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8820
  %base310 = bitcast %union.tree_node* %129 to %struct.tree_base*, !dbg !8820
  %130 = bitcast %struct.tree_base* %base310 to i64*, !dbg !8820
  %bf.load311 = load i64, i64* %130, align 8, !dbg !8820
  %bf.clear312 = and i64 %bf.load311, 65535, !dbg !8820
  %bf.cast313 = trunc i64 %bf.clear312 to i32, !dbg !8820
  %cmp314 = icmp eq i32 %bf.cast313, 14, !dbg !8820
  br i1 %cmp314, label %land.lhs.true316, label %lor.lhs.false325, !dbg !8820

land.lhs.true316:                                 ; preds = %lor.lhs.false309, %lor.lhs.false302
  %131 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8820
  %common317 = bitcast %union.tree_node* %131 to %struct.tree_common*, !dbg !8820
  %type318 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common317, i32 0, i32 2, !dbg !8820
  %132 = load %union.tree_node*, %union.tree_node** %type318, align 8, !dbg !8820
  %base319 = bitcast %union.tree_node* %132 to %struct.tree_base*, !dbg !8820
  %133 = bitcast %struct.tree_base* %base319 to i64*, !dbg !8820
  %bf.load320 = load i64, i64* %133, align 8, !dbg !8820
  %bf.clear321 = and i64 %bf.load320, 65535, !dbg !8820
  %bf.cast322 = trunc i64 %bf.clear321 to i32, !dbg !8820
  %cmp323 = icmp eq i32 %bf.cast322, 9, !dbg !8820
  br i1 %cmp323, label %if.then339, label %lor.lhs.false325, !dbg !8821

lor.lhs.false325:                                 ; preds = %land.lhs.true316, %lor.lhs.false309, %land.lhs.true286, %lor.lhs.false279
  %134 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8822
  %base326 = bitcast %union.tree_node* %134 to %struct.tree_base*, !dbg !8822
  %135 = bitcast %struct.tree_base* %base326 to i64*, !dbg !8822
  %bf.load327 = load i64, i64* %135, align 8, !dbg !8822
  %bf.clear328 = and i64 %bf.load327, 65535, !dbg !8822
  %bf.cast329 = trunc i64 %bf.clear328 to i32, !dbg !8822
  %cmp330 = icmp eq i32 %bf.cast329, 5, !dbg !8823
  br i1 %cmp330, label %land.lhs.true332, label %if.end341, !dbg !8824

land.lhs.true332:                                 ; preds = %lor.lhs.false325
  %136 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8825
  %base333 = bitcast %union.tree_node* %136 to %struct.tree_base*, !dbg !8825
  %137 = bitcast %struct.tree_base* %base333 to i64*, !dbg !8825
  %bf.load334 = load i64, i64* %137, align 8, !dbg !8825
  %bf.clear335 = and i64 %bf.load334, 65535, !dbg !8825
  %bf.cast336 = trunc i64 %bf.clear335 to i32, !dbg !8825
  %cmp337 = icmp eq i32 %bf.cast336, 5, !dbg !8826
  br i1 %cmp337, label %if.then339, label %if.end341, !dbg !8827

if.then339:                                       ; preds = %land.lhs.true332, %land.lhs.true316, %land.lhs.true295, %lor.lhs.false258, %land.lhs.true251
  %138 = load %union.tree_node*, %union.tree_node** %src228, align 8, !dbg !8828
  %139 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8829
  %140 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8830
  %call340 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %138, %union.tree_node* %139, %union.tree_node** %140), !dbg !8831
  store %union.tree_node* %call340, %union.tree_node** %retval, align 8, !dbg !8832
  br label %return, !dbg !8832

if.end341:                                        ; preds = %land.lhs.true332, %lor.lhs.false325
  %141 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8833
  %base342 = bitcast %union.tree_node* %141 to %struct.tree_base*, !dbg !8833
  %142 = bitcast %struct.tree_base* %base342 to i64*, !dbg !8833
  %bf.load343 = load i64, i64* %142, align 8, !dbg !8833
  %bf.clear344 = and i64 %bf.load343, 65535, !dbg !8833
  %bf.cast345 = trunc i64 %bf.clear344 to i32, !dbg !8833
  %cmp346 = icmp eq i32 %bf.cast345, 6, !dbg !8833
  br i1 %cmp346, label %land.lhs.true362, label %lor.lhs.false348, !dbg !8833

lor.lhs.false348:                                 ; preds = %if.end341
  %143 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8833
  %base349 = bitcast %union.tree_node* %143 to %struct.tree_base*, !dbg !8833
  %144 = bitcast %struct.tree_base* %base349 to i64*, !dbg !8833
  %bf.load350 = load i64, i64* %144, align 8, !dbg !8833
  %bf.clear351 = and i64 %bf.load350, 65535, !dbg !8833
  %bf.cast352 = trunc i64 %bf.clear351 to i32, !dbg !8833
  %cmp353 = icmp eq i32 %bf.cast352, 7, !dbg !8833
  br i1 %cmp353, label %land.lhs.true362, label %lor.lhs.false355, !dbg !8833

lor.lhs.false355:                                 ; preds = %lor.lhs.false348
  %145 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8833
  %base356 = bitcast %union.tree_node* %145 to %struct.tree_base*, !dbg !8833
  %146 = bitcast %struct.tree_base* %base356 to i64*, !dbg !8833
  %bf.load357 = load i64, i64* %146, align 8, !dbg !8833
  %bf.clear358 = and i64 %bf.load357, 65535, !dbg !8833
  %bf.cast359 = trunc i64 %bf.clear358 to i32, !dbg !8833
  %cmp360 = icmp eq i32 %bf.cast359, 8, !dbg !8833
  br i1 %cmp360, label %land.lhs.true362, label %if.end395, !dbg !8835

land.lhs.true362:                                 ; preds = %lor.lhs.false355, %lor.lhs.false348, %if.end341
  %147 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8836
  %base363 = bitcast %union.tree_node* %147 to %struct.tree_base*, !dbg !8836
  %148 = bitcast %struct.tree_base* %base363 to i64*, !dbg !8836
  %bf.load364 = load i64, i64* %148, align 8, !dbg !8836
  %bf.clear365 = and i64 %bf.load364, 65535, !dbg !8836
  %bf.cast366 = trunc i64 %bf.clear365 to i32, !dbg !8836
  %cmp367 = icmp eq i32 %bf.cast366, 6, !dbg !8836
  br i1 %cmp367, label %land.lhs.true383, label %lor.lhs.false369, !dbg !8836

lor.lhs.false369:                                 ; preds = %land.lhs.true362
  %149 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8836
  %base370 = bitcast %union.tree_node* %149 to %struct.tree_base*, !dbg !8836
  %150 = bitcast %struct.tree_base* %base370 to i64*, !dbg !8836
  %bf.load371 = load i64, i64* %150, align 8, !dbg !8836
  %bf.clear372 = and i64 %bf.load371, 65535, !dbg !8836
  %bf.cast373 = trunc i64 %bf.clear372 to i32, !dbg !8836
  %cmp374 = icmp eq i32 %bf.cast373, 7, !dbg !8836
  br i1 %cmp374, label %land.lhs.true383, label %lor.lhs.false376, !dbg !8836

lor.lhs.false376:                                 ; preds = %lor.lhs.false369
  %151 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8836
  %base377 = bitcast %union.tree_node* %151 to %struct.tree_base*, !dbg !8836
  %152 = bitcast %struct.tree_base* %base377 to i64*, !dbg !8836
  %bf.load378 = load i64, i64* %152, align 8, !dbg !8836
  %bf.clear379 = and i64 %bf.load378, 65535, !dbg !8836
  %bf.cast380 = trunc i64 %bf.clear379 to i32, !dbg !8836
  %cmp381 = icmp eq i32 %bf.cast380, 8, !dbg !8836
  br i1 %cmp381, label %land.lhs.true383, label %if.end395, !dbg !8837

land.lhs.true383:                                 ; preds = %lor.lhs.false376, %lor.lhs.false369, %land.lhs.true362
  %153 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8838
  %type384 = bitcast %union.tree_node* %153 to %struct.tree_type*, !dbg !8838
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type384, i32 0, i32 6, !dbg !8838
  %bf.load385 = load i32, i32* %precision, align 4, !dbg !8838
  %bf.clear386 = and i32 %bf.load385, 1023, !dbg !8838
  %154 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8839
  %type387 = bitcast %union.tree_node* %154 to %struct.tree_type*, !dbg !8839
  %precision388 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type387, i32 0, i32 6, !dbg !8839
  %bf.load389 = load i32, i32* %precision388, align 4, !dbg !8839
  %bf.clear390 = and i32 %bf.load389, 1023, !dbg !8839
  %cmp391 = icmp eq i32 %bf.clear386, %bf.clear390, !dbg !8840
  br i1 %cmp391, label %if.then393, label %if.end395, !dbg !8841

if.then393:                                       ; preds = %land.lhs.true383
  %155 = load %union.tree_node*, %union.tree_node** %src228, align 8, !dbg !8842
  %156 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8843
  %157 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8844
  %call394 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %155, %union.tree_node* %156, %union.tree_node** %157), !dbg !8845
  store %union.tree_node* %call394, %union.tree_node** %retval, align 8, !dbg !8846
  br label %return, !dbg !8846

if.end395:                                        ; preds = %land.lhs.true383, %lor.lhs.false376, %lor.lhs.false355
  %158 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8847
  %base396 = bitcast %union.tree_node* %158 to %struct.tree_base*, !dbg !8847
  %159 = bitcast %struct.tree_base* %base396 to i64*, !dbg !8847
  %bf.load397 = load i64, i64* %159, align 8, !dbg !8847
  %bf.clear398 = and i64 %bf.load397, 65535, !dbg !8847
  %bf.cast399 = trunc i64 %bf.clear398 to i32, !dbg !8847
  %cmp400 = icmp eq i32 %bf.cast399, 6, !dbg !8847
  br i1 %cmp400, label %land.lhs.true416, label %lor.lhs.false402, !dbg !8847

lor.lhs.false402:                                 ; preds = %if.end395
  %160 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8847
  %base403 = bitcast %union.tree_node* %160 to %struct.tree_base*, !dbg !8847
  %161 = bitcast %struct.tree_base* %base403 to i64*, !dbg !8847
  %bf.load404 = load i64, i64* %161, align 8, !dbg !8847
  %bf.clear405 = and i64 %bf.load404, 65535, !dbg !8847
  %bf.cast406 = trunc i64 %bf.clear405 to i32, !dbg !8847
  %cmp407 = icmp eq i32 %bf.cast406, 7, !dbg !8847
  br i1 %cmp407, label %land.lhs.true416, label %lor.lhs.false409, !dbg !8847

lor.lhs.false409:                                 ; preds = %lor.lhs.false402
  %162 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8847
  %base410 = bitcast %union.tree_node* %162 to %struct.tree_base*, !dbg !8847
  %163 = bitcast %struct.tree_base* %base410 to i64*, !dbg !8847
  %bf.load411 = load i64, i64* %163, align 8, !dbg !8847
  %bf.clear412 = and i64 %bf.load411, 65535, !dbg !8847
  %bf.cast413 = trunc i64 %bf.clear412 to i32, !dbg !8847
  %cmp414 = icmp eq i32 %bf.cast413, 8, !dbg !8847
  br i1 %cmp414, label %land.lhs.true416, label %if.end443, !dbg !8849

land.lhs.true416:                                 ; preds = %lor.lhs.false409, %lor.lhs.false402, %if.end395
  %164 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8850
  %base417 = bitcast %union.tree_node* %164 to %struct.tree_base*, !dbg !8850
  %165 = bitcast %struct.tree_base* %base417 to i64*, !dbg !8850
  %bf.load418 = load i64, i64* %165, align 8, !dbg !8850
  %bf.clear419 = and i64 %bf.load418, 65535, !dbg !8850
  %bf.cast420 = trunc i64 %bf.clear419 to i32, !dbg !8850
  %cmp421 = icmp eq i32 %bf.cast420, 6, !dbg !8850
  br i1 %cmp421, label %if.then437, label %lor.lhs.false423, !dbg !8850

lor.lhs.false423:                                 ; preds = %land.lhs.true416
  %166 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8850
  %base424 = bitcast %union.tree_node* %166 to %struct.tree_base*, !dbg !8850
  %167 = bitcast %struct.tree_base* %base424 to i64*, !dbg !8850
  %bf.load425 = load i64, i64* %167, align 8, !dbg !8850
  %bf.clear426 = and i64 %bf.load425, 65535, !dbg !8850
  %bf.cast427 = trunc i64 %bf.clear426 to i32, !dbg !8850
  %cmp428 = icmp eq i32 %bf.cast427, 7, !dbg !8850
  br i1 %cmp428, label %if.then437, label %lor.lhs.false430, !dbg !8850

lor.lhs.false430:                                 ; preds = %lor.lhs.false423
  %168 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8850
  %base431 = bitcast %union.tree_node* %168 to %struct.tree_base*, !dbg !8850
  %169 = bitcast %struct.tree_base* %base431 to i64*, !dbg !8850
  %bf.load432 = load i64, i64* %169, align 8, !dbg !8850
  %bf.clear433 = and i64 %bf.load432, 65535, !dbg !8850
  %bf.cast434 = trunc i64 %bf.clear433 to i32, !dbg !8850
  %cmp435 = icmp eq i32 %bf.cast434, 8, !dbg !8850
  br i1 %cmp435, label %if.then437, label %if.end443, !dbg !8851

if.then437:                                       ; preds = %lor.lhs.false430, %lor.lhs.false423, %land.lhs.true416
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner, metadata !8852, metadata !DIExpression()), !dbg !8854
  %170 = load %union.tree_node*, %union.tree_node** %src228, align 8, !dbg !8855
  %171 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8856
  %172 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8857
  %call438 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %170, %union.tree_node* %171, %union.tree_node** %172), !dbg !8858
  store %union.tree_node* %call438, %union.tree_node** %inner, align 8, !dbg !8854
  %173 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !8859
  %174 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8861
  %cmp439 = icmp eq %union.tree_node* %173, %174, !dbg !8862
  br i1 %cmp439, label %if.then441, label %if.end442, !dbg !8863

if.then441:                                       ; preds = %if.then437
  %175 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8864
  store %union.tree_node* %175, %union.tree_node** %retval, align 8, !dbg !8865
  br label %return, !dbg !8865

if.end442:                                        ; preds = %if.then437
  br label %sw.epilog, !dbg !8866

if.end443:                                        ; preds = %lor.lhs.false430, %lor.lhs.false409
  %176 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8867
  %base444 = bitcast %union.tree_node* %176 to %struct.tree_base*, !dbg !8867
  %177 = bitcast %struct.tree_base* %base444 to i64*, !dbg !8867
  %bf.load445 = load i64, i64* %177, align 8, !dbg !8867
  %bf.clear446 = and i64 %bf.load445, 65535, !dbg !8867
  %bf.cast447 = trunc i64 %bf.clear446 to i32, !dbg !8867
  %cmp448 = icmp eq i32 %bf.cast447, 6, !dbg !8867
  br i1 %cmp448, label %land.lhs.true464, label %lor.lhs.false450, !dbg !8867

lor.lhs.false450:                                 ; preds = %if.end443
  %178 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8867
  %base451 = bitcast %union.tree_node* %178 to %struct.tree_base*, !dbg !8867
  %179 = bitcast %struct.tree_base* %base451 to i64*, !dbg !8867
  %bf.load452 = load i64, i64* %179, align 8, !dbg !8867
  %bf.clear453 = and i64 %bf.load452, 65535, !dbg !8867
  %bf.cast454 = trunc i64 %bf.clear453 to i32, !dbg !8867
  %cmp455 = icmp eq i32 %bf.cast454, 7, !dbg !8867
  br i1 %cmp455, label %land.lhs.true464, label %lor.lhs.false457, !dbg !8867

lor.lhs.false457:                                 ; preds = %lor.lhs.false450
  %180 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8867
  %base458 = bitcast %union.tree_node* %180 to %struct.tree_base*, !dbg !8867
  %181 = bitcast %struct.tree_base* %base458 to i64*, !dbg !8867
  %bf.load459 = load i64, i64* %181, align 8, !dbg !8867
  %bf.clear460 = and i64 %bf.load459, 65535, !dbg !8867
  %bf.cast461 = trunc i64 %bf.clear460 to i32, !dbg !8867
  %cmp462 = icmp eq i32 %bf.cast461, 8, !dbg !8867
  br i1 %cmp462, label %land.lhs.true464, label %if.end491, !dbg !8869

land.lhs.true464:                                 ; preds = %lor.lhs.false457, %lor.lhs.false450, %if.end443
  %182 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8870
  %base465 = bitcast %union.tree_node* %182 to %struct.tree_base*, !dbg !8870
  %183 = bitcast %struct.tree_base* %base465 to i64*, !dbg !8870
  %bf.load466 = load i64, i64* %183, align 8, !dbg !8870
  %bf.clear467 = and i64 %bf.load466, 65535, !dbg !8870
  %bf.cast468 = trunc i64 %bf.clear467 to i32, !dbg !8870
  %cmp469 = icmp eq i32 %bf.cast468, 10, !dbg !8870
  br i1 %cmp469, label %land.lhs.true478, label %lor.lhs.false471, !dbg !8870

lor.lhs.false471:                                 ; preds = %land.lhs.true464
  %184 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8870
  %base472 = bitcast %union.tree_node* %184 to %struct.tree_base*, !dbg !8870
  %185 = bitcast %struct.tree_base* %base472 to i64*, !dbg !8870
  %bf.load473 = load i64, i64* %185, align 8, !dbg !8870
  %bf.clear474 = and i64 %bf.load473, 65535, !dbg !8870
  %bf.cast475 = trunc i64 %bf.clear474 to i32, !dbg !8870
  %cmp476 = icmp eq i32 %bf.cast475, 12, !dbg !8870
  br i1 %cmp476, label %land.lhs.true478, label %if.end491, !dbg !8871

land.lhs.true478:                                 ; preds = %lor.lhs.false471, %land.lhs.true464
  %186 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8872
  %type479 = bitcast %union.tree_node* %186 to %struct.tree_type*, !dbg !8872
  %precision480 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type479, i32 0, i32 6, !dbg !8872
  %bf.load481 = load i32, i32* %precision480, align 4, !dbg !8872
  %bf.clear482 = and i32 %bf.load481, 1023, !dbg !8872
  %187 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8873
  %type483 = bitcast %union.tree_node* %187 to %struct.tree_type*, !dbg !8873
  %precision484 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type483, i32 0, i32 6, !dbg !8873
  %bf.load485 = load i32, i32* %precision484, align 4, !dbg !8873
  %bf.clear486 = and i32 %bf.load485, 1023, !dbg !8873
  %cmp487 = icmp sge i32 %bf.clear482, %bf.clear486, !dbg !8874
  br i1 %cmp487, label %if.then489, label %if.end491, !dbg !8875

if.then489:                                       ; preds = %land.lhs.true478
  %188 = load %union.tree_node*, %union.tree_node** %src228, align 8, !dbg !8876
  %189 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8877
  %190 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8878
  %call490 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %188, %union.tree_node* %189, %union.tree_node** %190), !dbg !8879
  store %union.tree_node* %call490, %union.tree_node** %retval, align 8, !dbg !8880
  br label %return, !dbg !8880

if.end491:                                        ; preds = %land.lhs.true478, %lor.lhs.false471, %lor.lhs.false457
  %191 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8881
  %base492 = bitcast %union.tree_node* %191 to %struct.tree_base*, !dbg !8881
  %192 = bitcast %struct.tree_base* %base492 to i64*, !dbg !8881
  %bf.load493 = load i64, i64* %192, align 8, !dbg !8881
  %bf.clear494 = and i64 %bf.load493, 65535, !dbg !8881
  %bf.cast495 = trunc i64 %bf.clear494 to i32, !dbg !8881
  %cmp496 = icmp eq i32 %bf.cast495, 10, !dbg !8881
  br i1 %cmp496, label %land.lhs.true512, label %lor.lhs.false498, !dbg !8881

lor.lhs.false498:                                 ; preds = %if.end491
  %193 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8881
  %base499 = bitcast %union.tree_node* %193 to %struct.tree_base*, !dbg !8881
  %194 = bitcast %struct.tree_base* %base499 to i64*, !dbg !8881
  %bf.load500 = load i64, i64* %194, align 8, !dbg !8881
  %bf.clear501 = and i64 %bf.load500, 65535, !dbg !8881
  %bf.cast502 = trunc i64 %bf.clear501 to i32, !dbg !8881
  %cmp503 = icmp eq i32 %bf.cast502, 12, !dbg !8881
  br i1 %cmp503, label %land.lhs.true512, label %lor.lhs.false505, !dbg !8883

lor.lhs.false505:                                 ; preds = %lor.lhs.false498
  %195 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8884
  %base506 = bitcast %union.tree_node* %195 to %struct.tree_base*, !dbg !8884
  %196 = bitcast %struct.tree_base* %base506 to i64*, !dbg !8884
  %bf.load507 = load i64, i64* %196, align 8, !dbg !8884
  %bf.clear508 = and i64 %bf.load507, 65535, !dbg !8884
  %bf.cast509 = trunc i64 %bf.clear508 to i32, !dbg !8884
  %cmp510 = icmp eq i32 %bf.cast509, 5, !dbg !8885
  br i1 %cmp510, label %land.lhs.true512, label %if.end571, !dbg !8886

land.lhs.true512:                                 ; preds = %lor.lhs.false505, %lor.lhs.false498, %if.end491
  %197 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8887
  %base513 = bitcast %union.tree_node* %197 to %struct.tree_base*, !dbg !8887
  %198 = bitcast %struct.tree_base* %base513 to i64*, !dbg !8887
  %bf.load514 = load i64, i64* %198, align 8, !dbg !8887
  %bf.clear515 = and i64 %bf.load514, 65535, !dbg !8887
  %bf.cast516 = trunc i64 %bf.clear515 to i32, !dbg !8887
  %cmp517 = icmp eq i32 %bf.cast516, 6, !dbg !8887
  br i1 %cmp517, label %if.then533, label %lor.lhs.false519, !dbg !8887

lor.lhs.false519:                                 ; preds = %land.lhs.true512
  %199 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8887
  %base520 = bitcast %union.tree_node* %199 to %struct.tree_base*, !dbg !8887
  %200 = bitcast %struct.tree_base* %base520 to i64*, !dbg !8887
  %bf.load521 = load i64, i64* %200, align 8, !dbg !8887
  %bf.clear522 = and i64 %bf.load521, 65535, !dbg !8887
  %bf.cast523 = trunc i64 %bf.clear522 to i32, !dbg !8887
  %cmp524 = icmp eq i32 %bf.cast523, 7, !dbg !8887
  br i1 %cmp524, label %if.then533, label %lor.lhs.false526, !dbg !8887

lor.lhs.false526:                                 ; preds = %lor.lhs.false519
  %201 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8887
  %base527 = bitcast %union.tree_node* %201 to %struct.tree_base*, !dbg !8887
  %202 = bitcast %struct.tree_base* %base527 to i64*, !dbg !8887
  %bf.load528 = load i64, i64* %202, align 8, !dbg !8887
  %bf.clear529 = and i64 %bf.load528, 65535, !dbg !8887
  %bf.cast530 = trunc i64 %bf.clear529 to i32, !dbg !8887
  %cmp531 = icmp eq i32 %bf.cast530, 8, !dbg !8887
  br i1 %cmp531, label %if.then533, label %if.end571, !dbg !8888

if.then533:                                       ; preds = %lor.lhs.false526, %lor.lhs.false519, %land.lhs.true512
  %203 = load %union.tree_node*, %union.tree_node** %src228, align 8, !dbg !8889
  %base534 = bitcast %union.tree_node* %203 to %struct.tree_base*, !dbg !8889
  %204 = bitcast %struct.tree_base* %base534 to i64*, !dbg !8889
  %bf.load535 = load i64, i64* %204, align 8, !dbg !8889
  %bf.clear536 = and i64 %bf.load535, 65535, !dbg !8889
  %bf.cast537 = trunc i64 %bf.clear536 to i32, !dbg !8889
  %cmp538 = icmp eq i32 %bf.cast537, 23, !dbg !8892
  br i1 %cmp538, label %land.lhs.true540, label %if.end552, !dbg !8893

land.lhs.true540:                                 ; preds = %if.then533
  %205 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8894
  %type541 = bitcast %union.tree_node* %205 to %struct.tree_type*, !dbg !8894
  %precision542 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type541, i32 0, i32 6, !dbg !8894
  %bf.load543 = load i32, i32* %precision542, align 4, !dbg !8894
  %bf.clear544 = and i32 %bf.load543, 1023, !dbg !8894
  %206 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8895
  %type545 = bitcast %union.tree_node* %206 to %struct.tree_type*, !dbg !8895
  %precision546 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type545, i32 0, i32 6, !dbg !8895
  %bf.load547 = load i32, i32* %precision546, align 4, !dbg !8895
  %bf.clear548 = and i32 %bf.load547, 1023, !dbg !8895
  %cmp549 = icmp sge i32 %bf.clear544, %bf.clear548, !dbg !8896
  br i1 %cmp549, label %if.then551, label %if.end552, !dbg !8897

if.then551:                                       ; preds = %land.lhs.true540
  %207 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8898
  store %union.tree_node* %207, %union.tree_node** %retval, align 8, !dbg !8899
  br label %return, !dbg !8899

if.end552:                                        ; preds = %land.lhs.true540, %if.then533
  %208 = load %union.tree_node*, %union.tree_node** %src228, align 8, !dbg !8900
  %call553 = call i32 @integer_zerop(%union.tree_node* %208), !dbg !8902
  %tobool554 = icmp ne i32 %call553, 0, !dbg !8902
  br i1 %tobool554, label %if.then555, label %if.else556, !dbg !8903

if.then555:                                       ; preds = %if.end552
  %209 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8904
  store %union.tree_node* %209, %union.tree_node** %retval, align 8, !dbg !8905
  br label %return, !dbg !8905

if.else556:                                       ; preds = %if.end552
  %210 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8906
  %type557 = bitcast %union.tree_node* %210 to %struct.tree_type*, !dbg !8906
  %precision558 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type557, i32 0, i32 6, !dbg !8906
  %bf.load559 = load i32, i32* %precision558, align 4, !dbg !8906
  %bf.clear560 = and i32 %bf.load559, 1023, !dbg !8906
  %211 = load %union.tree_node*, %union.tree_node** %src_type232, align 8, !dbg !8908
  %type561 = bitcast %union.tree_node* %211 to %struct.tree_type*, !dbg !8908
  %precision562 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type561, i32 0, i32 6, !dbg !8908
  %bf.load563 = load i32, i32* %precision562, align 4, !dbg !8908
  %bf.clear564 = and i32 %bf.load563, 1023, !dbg !8908
  %cmp565 = icmp sle i32 %bf.clear560, %bf.clear564, !dbg !8909
  br i1 %cmp565, label %if.then567, label %if.end569, !dbg !8910

if.then567:                                       ; preds = %if.else556
  %212 = load %union.tree_node*, %union.tree_node** %src228, align 8, !dbg !8911
  %213 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8912
  %214 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8913
  %call568 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %212, %union.tree_node* %213, %union.tree_node** %214), !dbg !8914
  store %union.tree_node* %call568, %union.tree_node** %retval, align 8, !dbg !8915
  br label %return, !dbg !8915

if.end569:                                        ; preds = %if.else556
  br label %if.end570

if.end570:                                        ; preds = %if.end569
  br label %if.end571, !dbg !8916

if.end571:                                        ; preds = %if.end570, %lor.lhs.false526, %lor.lhs.false505
  %215 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8917
  %base572 = bitcast %union.tree_node* %215 to %struct.tree_base*, !dbg !8917
  %216 = bitcast %struct.tree_base* %base572 to i64*, !dbg !8917
  %bf.load573 = load i64, i64* %216, align 8, !dbg !8917
  %bf.clear574 = and i64 %bf.load573, 65535, !dbg !8917
  %bf.cast575 = trunc i64 %bf.clear574 to i32, !dbg !8917
  %cmp576 = icmp eq i32 %bf.cast575, 16, !dbg !8919
  br i1 %cmp576, label %if.then585, label %lor.lhs.false578, !dbg !8920

lor.lhs.false578:                                 ; preds = %if.end571
  %217 = load %union.tree_node*, %union.tree_node** %dest_type235, align 8, !dbg !8921
  %base579 = bitcast %union.tree_node* %217 to %struct.tree_base*, !dbg !8921
  %218 = bitcast %struct.tree_base* %base579 to i64*, !dbg !8921
  %bf.load580 = load i64, i64* %218, align 8, !dbg !8921
  %bf.clear581 = and i64 %bf.load580, 65535, !dbg !8921
  %bf.cast582 = trunc i64 %bf.clear581 to i32, !dbg !8921
  %cmp583 = icmp eq i32 %bf.cast582, 17, !dbg !8922
  br i1 %cmp583, label %if.then585, label %if.end587, !dbg !8923

if.then585:                                       ; preds = %lor.lhs.false578, %if.end571
  %219 = load %union.tree_node*, %union.tree_node** %src228, align 8, !dbg !8924
  %220 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8925
  %221 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8926
  %call586 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %219, %union.tree_node* %220, %union.tree_node** %221), !dbg !8927
  store %union.tree_node* %call586, %union.tree_node** %retval, align 8, !dbg !8928
  br label %return, !dbg !8928

if.end587:                                        ; preds = %lor.lhs.false578
  br label %sw.epilog, !dbg !8929

sw.bb588:                                         ; preds = %entry, %entry
  %222 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8930
  %base589 = bitcast %union.tree_node* %222 to %struct.tree_base*, !dbg !8930
  %223 = bitcast %struct.tree_base* %base589 to i64*, !dbg !8930
  %bf.load590 = load i64, i64* %223, align 8, !dbg !8930
  %bf.clear591 = and i64 %bf.load590, 65535, !dbg !8930
  %bf.cast592 = trunc i64 %bf.clear591 to i32, !dbg !8930
  %cmp593 = icmp eq i32 %bf.cast592, 9, !dbg !8932
  br i1 %cmp593, label %if.then595, label %if.end596, !dbg !8933

if.then595:                                       ; preds = %sw.bb588
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8934
  br label %return, !dbg !8934

if.end596:                                        ; preds = %sw.bb588
  %224 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8935
  %tobool597 = icmp ne %union.tree_node** %224, null, !dbg !8935
  br i1 %tobool597, label %land.lhs.true598, label %if.end604, !dbg !8937

land.lhs.true598:                                 ; preds = %if.end596
  %225 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8938
  %arrayidx599 = getelementptr inbounds %union.tree_node*, %union.tree_node** %225, i64 0, !dbg !8938
  %226 = load %union.tree_node*, %union.tree_node** %arrayidx599, align 8, !dbg !8938
  %227 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8939
  %cmp600 = icmp eq %union.tree_node* %226, %227, !dbg !8940
  br i1 %cmp600, label %if.then602, label %if.end604, !dbg !8941

if.then602:                                       ; preds = %land.lhs.true598
  %228 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8942
  %arrayidx603 = getelementptr inbounds %union.tree_node*, %union.tree_node** %228, i64 1, !dbg !8942
  %229 = load %union.tree_node*, %union.tree_node** %arrayidx603, align 8, !dbg !8942
  store %union.tree_node* %229, %union.tree_node** %retval, align 8, !dbg !8943
  br label %return, !dbg !8943

if.end604:                                        ; preds = %land.lhs.true598, %if.end596
  %230 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8944
  %base605 = bitcast %union.tree_node* %230 to %struct.tree_base*, !dbg !8944
  %231 = bitcast %struct.tree_base* %base605 to i64*, !dbg !8944
  %bf.load606 = load i64, i64* %231, align 8, !dbg !8944
  %bf.clear607 = and i64 %bf.load606, 65535, !dbg !8944
  %bf.cast608 = trunc i64 %bf.clear607 to i32, !dbg !8944
  %cmp609 = icmp eq i32 %bf.cast608, 6, !dbg !8944
  br i1 %cmp609, label %lor.lhs.false625, label %lor.lhs.false611, !dbg !8944

lor.lhs.false611:                                 ; preds = %if.end604
  %232 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8944
  %base612 = bitcast %union.tree_node* %232 to %struct.tree_base*, !dbg !8944
  %233 = bitcast %struct.tree_base* %base612 to i64*, !dbg !8944
  %bf.load613 = load i64, i64* %233, align 8, !dbg !8944
  %bf.clear614 = and i64 %bf.load613, 65535, !dbg !8944
  %bf.cast615 = trunc i64 %bf.clear614 to i32, !dbg !8944
  %cmp616 = icmp eq i32 %bf.cast615, 7, !dbg !8944
  br i1 %cmp616, label %lor.lhs.false625, label %lor.lhs.false618, !dbg !8944

lor.lhs.false618:                                 ; preds = %lor.lhs.false611
  %234 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8944
  %base619 = bitcast %union.tree_node* %234 to %struct.tree_base*, !dbg !8944
  %235 = bitcast %struct.tree_base* %base619 to i64*, !dbg !8944
  %bf.load620 = load i64, i64* %235, align 8, !dbg !8944
  %bf.clear621 = and i64 %bf.load620, 65535, !dbg !8944
  %bf.cast622 = trunc i64 %bf.clear621 to i32, !dbg !8944
  %cmp623 = icmp eq i32 %bf.cast622, 8, !dbg !8944
  br i1 %cmp623, label %lor.lhs.false625, label %if.then638, !dbg !8946

lor.lhs.false625:                                 ; preds = %lor.lhs.false618, %lor.lhs.false611, %if.end604
  %236 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8947
  %type626 = bitcast %union.tree_node* %236 to %struct.tree_type*, !dbg !8947
  %precision627 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type626, i32 0, i32 6, !dbg !8947
  %bf.load628 = load i32, i32* %precision627, align 4, !dbg !8947
  %bf.clear629 = and i32 %bf.load628, 1023, !dbg !8947
  %237 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8948
  %common630 = bitcast %union.tree_node* %237 to %struct.tree_common*, !dbg !8948
  %type631 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common630, i32 0, i32 2, !dbg !8948
  %238 = load %union.tree_node*, %union.tree_node** %type631, align 8, !dbg !8948
  %type632 = bitcast %union.tree_node* %238 to %struct.tree_type*, !dbg !8948
  %precision633 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type632, i32 0, i32 6, !dbg !8948
  %bf.load634 = load i32, i32* %precision633, align 4, !dbg !8948
  %bf.clear635 = and i32 %bf.load634, 1023, !dbg !8948
  %cmp636 = icmp sge i32 %bf.clear629, %bf.clear635, !dbg !8949
  br i1 %cmp636, label %if.then638, label %if.else660, !dbg !8950

if.then638:                                       ; preds = %lor.lhs.false625, %lor.lhs.false618
  call void @llvm.dbg.declare(metadata [4 x %union.tree_node*]* %ncache, metadata !8951, metadata !DIExpression()), !dbg !8954
  %239 = bitcast [4 x %union.tree_node*]* %ncache to i8*, !dbg !8954
  call void @llvm.memset.p0i8.i64(i8* align 16 %239, i8 0, i64 32, i1 false), !dbg !8954
  call void @llvm.dbg.declare(metadata %union.tree_node** %valid0, metadata !8955, metadata !DIExpression()), !dbg !8956
  %240 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8957
  %exp639 = bitcast %union.tree_node* %240 to %struct.tree_exp*, !dbg !8957
  %operands640 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp639, i32 0, i32 3, !dbg !8957
  %arrayidx641 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands640, i64 0, i64 0, !dbg !8957
  %241 = load %union.tree_node*, %union.tree_node** %arrayidx641, align 8, !dbg !8957
  %242 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8958
  %arraydecay = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %ncache, i64 0, i64 0, !dbg !8959
  %call642 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %241, %union.tree_node* %242, %union.tree_node** %arraydecay), !dbg !8960
  store %union.tree_node* %call642, %union.tree_node** %valid0, align 8, !dbg !8956
  call void @llvm.dbg.declare(metadata %union.tree_node** %valid1, metadata !8961, metadata !DIExpression()), !dbg !8962
  %243 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8963
  %exp643 = bitcast %union.tree_node* %243 to %struct.tree_exp*, !dbg !8963
  %operands644 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp643, i32 0, i32 3, !dbg !8963
  %arrayidx645 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands644, i64 0, i64 1, !dbg !8963
  %244 = load %union.tree_node*, %union.tree_node** %arrayidx645, align 8, !dbg !8963
  %245 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8964
  %arraydecay646 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %ncache, i64 0, i64 0, !dbg !8965
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %arraydecay646, i64 2, !dbg !8966
  %call647 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %244, %union.tree_node* %245, %union.tree_node** %add.ptr), !dbg !8967
  store %union.tree_node* %call647, %union.tree_node** %valid1, align 8, !dbg !8962
  %246 = load %union.tree_node*, %union.tree_node** %valid0, align 8, !dbg !8968
  %247 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8970
  %cmp648 = icmp eq %union.tree_node* %246, %247, !dbg !8971
  br i1 %cmp648, label %if.then650, label %if.else651, !dbg !8972

if.then650:                                       ; preds = %if.then638
  %248 = load %union.tree_node*, %union.tree_node** %valid1, align 8, !dbg !8973
  store %union.tree_node* %248, %union.tree_node** %ret, align 8, !dbg !8974
  br label %if.end659, !dbg !8975

if.else651:                                       ; preds = %if.then638
  %249 = load %union.tree_node*, %union.tree_node** %valid1, align 8, !dbg !8976
  %250 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !8978
  %cmp652 = icmp eq %union.tree_node* %249, %250, !dbg !8979
  br i1 %cmp652, label %if.then654, label %if.else655, !dbg !8980

if.then654:                                       ; preds = %if.else651
  %251 = load %union.tree_node*, %union.tree_node** %valid0, align 8, !dbg !8981
  store %union.tree_node* %251, %union.tree_node** %ret, align 8, !dbg !8982
  br label %if.end658, !dbg !8983

if.else655:                                       ; preds = %if.else651
  %252 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8984
  %253 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8985
  %arraydecay656 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %ncache, i64 0, i64 0, !dbg !8986
  %call657 = call %union.tree_node* @narrowing_initializer_constant_valid_p(%union.tree_node* %252, %union.tree_node* %253, %union.tree_node** %arraydecay656), !dbg !8987
  store %union.tree_node* %call657, %union.tree_node** %ret, align 8, !dbg !8988
  br label %if.end658

if.end658:                                        ; preds = %if.else655, %if.then654
  br label %if.end659

if.end659:                                        ; preds = %if.end658, %if.then650
  br label %if.end662, !dbg !8989

if.else660:                                       ; preds = %lor.lhs.false625
  %254 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8990
  %255 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !8991
  %call661 = call %union.tree_node* @narrowing_initializer_constant_valid_p(%union.tree_node* %254, %union.tree_node* %255, %union.tree_node** null), !dbg !8992
  store %union.tree_node* %call661, %union.tree_node** %ret, align 8, !dbg !8993
  br label %if.end662

if.end662:                                        ; preds = %if.else660, %if.end659
  %256 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8994
  %tobool663 = icmp ne %union.tree_node** %256, null, !dbg !8994
  br i1 %tobool663, label %if.then664, label %if.end667, !dbg !8996

if.then664:                                       ; preds = %if.end662
  %257 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !8997
  %258 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !8999
  %arrayidx665 = getelementptr inbounds %union.tree_node*, %union.tree_node** %258, i64 0, !dbg !8999
  store %union.tree_node* %257, %union.tree_node** %arrayidx665, align 8, !dbg !9000
  %259 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !9001
  %260 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !9002
  %arrayidx666 = getelementptr inbounds %union.tree_node*, %union.tree_node** %260, i64 1, !dbg !9002
  store %union.tree_node* %259, %union.tree_node** %arrayidx666, align 8, !dbg !9003
  br label %if.end667, !dbg !9004

if.end667:                                        ; preds = %if.then664, %if.end662
  %261 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !9005
  store %union.tree_node* %261, %union.tree_node** %retval, align 8, !dbg !9006
  br label %return, !dbg !9006

sw.bb668:                                         ; preds = %entry
  %262 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !9007
  %base669 = bitcast %union.tree_node* %262 to %struct.tree_base*, !dbg !9007
  %263 = bitcast %struct.tree_base* %base669 to i64*, !dbg !9007
  %bf.load670 = load i64, i64* %263, align 8, !dbg !9007
  %bf.clear671 = and i64 %bf.load670, 65535, !dbg !9007
  %bf.cast672 = trunc i64 %bf.clear671 to i32, !dbg !9007
  %cmp673 = icmp eq i32 %bf.cast672, 9, !dbg !9009
  br i1 %cmp673, label %if.then675, label %if.end676, !dbg !9010

if.then675:                                       ; preds = %sw.bb668
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9011
  br label %return, !dbg !9011

if.end676:                                        ; preds = %sw.bb668
  %264 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !9012
  %tobool677 = icmp ne %union.tree_node** %264, null, !dbg !9012
  br i1 %tobool677, label %land.lhs.true678, label %if.end684, !dbg !9014

land.lhs.true678:                                 ; preds = %if.end676
  %265 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !9015
  %arrayidx679 = getelementptr inbounds %union.tree_node*, %union.tree_node** %265, i64 0, !dbg !9015
  %266 = load %union.tree_node*, %union.tree_node** %arrayidx679, align 8, !dbg !9015
  %267 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9016
  %cmp680 = icmp eq %union.tree_node* %266, %267, !dbg !9017
  br i1 %cmp680, label %if.then682, label %if.end684, !dbg !9018

if.then682:                                       ; preds = %land.lhs.true678
  %268 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !9019
  %arrayidx683 = getelementptr inbounds %union.tree_node*, %union.tree_node** %268, i64 1, !dbg !9019
  %269 = load %union.tree_node*, %union.tree_node** %arrayidx683, align 8, !dbg !9019
  store %union.tree_node* %269, %union.tree_node** %retval, align 8, !dbg !9020
  br label %return, !dbg !9020

if.end684:                                        ; preds = %land.lhs.true678, %if.end676
  %270 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !9021
  %base685 = bitcast %union.tree_node* %270 to %struct.tree_base*, !dbg !9021
  %271 = bitcast %struct.tree_base* %base685 to i64*, !dbg !9021
  %bf.load686 = load i64, i64* %271, align 8, !dbg !9021
  %bf.clear687 = and i64 %bf.load686, 65535, !dbg !9021
  %bf.cast688 = trunc i64 %bf.clear687 to i32, !dbg !9021
  %cmp689 = icmp eq i32 %bf.cast688, 6, !dbg !9021
  br i1 %cmp689, label %lor.lhs.false705, label %lor.lhs.false691, !dbg !9021

lor.lhs.false691:                                 ; preds = %if.end684
  %272 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !9021
  %base692 = bitcast %union.tree_node* %272 to %struct.tree_base*, !dbg !9021
  %273 = bitcast %struct.tree_base* %base692 to i64*, !dbg !9021
  %bf.load693 = load i64, i64* %273, align 8, !dbg !9021
  %bf.clear694 = and i64 %bf.load693, 65535, !dbg !9021
  %bf.cast695 = trunc i64 %bf.clear694 to i32, !dbg !9021
  %cmp696 = icmp eq i32 %bf.cast695, 7, !dbg !9021
  br i1 %cmp696, label %lor.lhs.false705, label %lor.lhs.false698, !dbg !9021

lor.lhs.false698:                                 ; preds = %lor.lhs.false691
  %274 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !9021
  %base699 = bitcast %union.tree_node* %274 to %struct.tree_base*, !dbg !9021
  %275 = bitcast %struct.tree_base* %base699 to i64*, !dbg !9021
  %bf.load700 = load i64, i64* %275, align 8, !dbg !9021
  %bf.clear701 = and i64 %bf.load700, 65535, !dbg !9021
  %bf.cast702 = trunc i64 %bf.clear701 to i32, !dbg !9021
  %cmp703 = icmp eq i32 %bf.cast702, 8, !dbg !9021
  br i1 %cmp703, label %lor.lhs.false705, label %if.then718, !dbg !9023

lor.lhs.false705:                                 ; preds = %lor.lhs.false698, %lor.lhs.false691, %if.end684
  %276 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !9024
  %type706 = bitcast %union.tree_node* %276 to %struct.tree_type*, !dbg !9024
  %precision707 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type706, i32 0, i32 6, !dbg !9024
  %bf.load708 = load i32, i32* %precision707, align 4, !dbg !9024
  %bf.clear709 = and i32 %bf.load708, 1023, !dbg !9024
  %277 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9025
  %common710 = bitcast %union.tree_node* %277 to %struct.tree_common*, !dbg !9025
  %type711 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common710, i32 0, i32 2, !dbg !9025
  %278 = load %union.tree_node*, %union.tree_node** %type711, align 8, !dbg !9025
  %type712 = bitcast %union.tree_node* %278 to %struct.tree_type*, !dbg !9025
  %precision713 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type712, i32 0, i32 6, !dbg !9025
  %bf.load714 = load i32, i32* %precision713, align 4, !dbg !9025
  %bf.clear715 = and i32 %bf.load714, 1023, !dbg !9025
  %cmp716 = icmp sge i32 %bf.clear709, %bf.clear715, !dbg !9026
  br i1 %cmp716, label %if.then718, label %if.else771, !dbg !9027

if.then718:                                       ; preds = %lor.lhs.false705, %lor.lhs.false698
  call void @llvm.dbg.declare(metadata [4 x %union.tree_node*]* %ncache719, metadata !9028, metadata !DIExpression()), !dbg !9030
  %279 = bitcast [4 x %union.tree_node*]* %ncache719 to i8*, !dbg !9030
  call void @llvm.memset.p0i8.i64(i8* align 16 %279, i8 0, i64 32, i1 false), !dbg !9030
  call void @llvm.dbg.declare(metadata %union.tree_node** %valid0720, metadata !9031, metadata !DIExpression()), !dbg !9032
  %280 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9033
  %exp721 = bitcast %union.tree_node* %280 to %struct.tree_exp*, !dbg !9033
  %operands722 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp721, i32 0, i32 3, !dbg !9033
  %arrayidx723 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands722, i64 0, i64 0, !dbg !9033
  %281 = load %union.tree_node*, %union.tree_node** %arrayidx723, align 8, !dbg !9033
  %282 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !9034
  %arraydecay724 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %ncache719, i64 0, i64 0, !dbg !9035
  %call725 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %281, %union.tree_node* %282, %union.tree_node** %arraydecay724), !dbg !9036
  store %union.tree_node* %call725, %union.tree_node** %valid0720, align 8, !dbg !9032
  call void @llvm.dbg.declare(metadata %union.tree_node** %valid1726, metadata !9037, metadata !DIExpression()), !dbg !9038
  %283 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9039
  %exp727 = bitcast %union.tree_node* %283 to %struct.tree_exp*, !dbg !9039
  %operands728 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp727, i32 0, i32 3, !dbg !9039
  %arrayidx729 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands728, i64 0, i64 1, !dbg !9039
  %284 = load %union.tree_node*, %union.tree_node** %arrayidx729, align 8, !dbg !9039
  %285 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !9040
  %arraydecay730 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %ncache719, i64 0, i64 0, !dbg !9041
  %add.ptr731 = getelementptr inbounds %union.tree_node*, %union.tree_node** %arraydecay730, i64 2, !dbg !9042
  %call732 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %284, %union.tree_node* %285, %union.tree_node** %add.ptr731), !dbg !9043
  store %union.tree_node* %call732, %union.tree_node** %valid1726, align 8, !dbg !9038
  %286 = load %union.tree_node*, %union.tree_node** %valid1726, align 8, !dbg !9044
  %287 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !9046
  %cmp733 = icmp eq %union.tree_node* %286, %287, !dbg !9047
  br i1 %cmp733, label %if.then735, label %if.else736, !dbg !9048

if.then735:                                       ; preds = %if.then718
  %288 = load %union.tree_node*, %union.tree_node** %valid0720, align 8, !dbg !9049
  store %union.tree_node* %288, %union.tree_node** %ret, align 8, !dbg !9050
  br label %if.end770, !dbg !9051

if.else736:                                       ; preds = %if.then718
  %289 = load %union.tree_node*, %union.tree_node** %valid0720, align 8, !dbg !9052
  %290 = load %union.tree_node*, %union.tree_node** %valid1726, align 8, !dbg !9054
  %cmp737 = icmp eq %union.tree_node* %289, %290, !dbg !9055
  br i1 %cmp737, label %land.lhs.true739, label %if.else743, !dbg !9056

land.lhs.true739:                                 ; preds = %if.else736
  %291 = load %union.tree_node*, %union.tree_node** %valid0720, align 8, !dbg !9057
  %cmp740 = icmp ne %union.tree_node* %291, null, !dbg !9058
  br i1 %cmp740, label %if.then742, label %if.else743, !dbg !9059

if.then742:                                       ; preds = %land.lhs.true739
  %292 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !9060
  store %union.tree_node* %292, %union.tree_node** %ret, align 8, !dbg !9061
  br label %if.end769, !dbg !9062

if.else743:                                       ; preds = %land.lhs.true739, %if.else736
  %293 = load %union.tree_node*, %union.tree_node** %valid0720, align 8, !dbg !9063
  %tobool744 = icmp ne %union.tree_node* %293, null, !dbg !9063
  br i1 %tobool744, label %land.lhs.true745, label %if.else765, !dbg !9065

land.lhs.true745:                                 ; preds = %if.else743
  %294 = load %union.tree_node*, %union.tree_node** %valid0720, align 8, !dbg !9066
  %base746 = bitcast %union.tree_node* %294 to %struct.tree_base*, !dbg !9066
  %295 = bitcast %struct.tree_base* %base746 to i64*, !dbg !9066
  %bf.load747 = load i64, i64* %295, align 8, !dbg !9066
  %bf.clear748 = and i64 %bf.load747, 65535, !dbg !9066
  %bf.cast749 = trunc i64 %bf.clear748 to i32, !dbg !9066
  %cmp750 = icmp eq i32 %bf.cast749, 28, !dbg !9067
  br i1 %cmp750, label %land.lhs.true752, label %if.else765, !dbg !9068

land.lhs.true752:                                 ; preds = %land.lhs.true745
  %296 = load %union.tree_node*, %union.tree_node** %valid1726, align 8, !dbg !9069
  %tobool753 = icmp ne %union.tree_node* %296, null, !dbg !9069
  br i1 %tobool753, label %land.lhs.true754, label %if.else765, !dbg !9070

land.lhs.true754:                                 ; preds = %land.lhs.true752
  %297 = load %union.tree_node*, %union.tree_node** %valid1726, align 8, !dbg !9071
  %base755 = bitcast %union.tree_node* %297 to %struct.tree_base*, !dbg !9071
  %298 = bitcast %struct.tree_base* %base755 to i64*, !dbg !9071
  %bf.load756 = load i64, i64* %298, align 8, !dbg !9071
  %bf.clear757 = and i64 %bf.load756, 65535, !dbg !9071
  %bf.cast758 = trunc i64 %bf.clear757 to i32, !dbg !9071
  %cmp759 = icmp eq i32 %bf.cast758, 28, !dbg !9072
  br i1 %cmp759, label %land.lhs.true761, label %if.else765, !dbg !9073

land.lhs.true761:                                 ; preds = %land.lhs.true754
  %299 = load %union.tree_node*, %union.tree_node** %valid0720, align 8, !dbg !9074
  %300 = load %union.tree_node*, %union.tree_node** %valid1726, align 8, !dbg !9075
  %call762 = call i32 @operand_equal_p(%union.tree_node* %299, %union.tree_node* %300, i32 1), !dbg !9076
  %tobool763 = icmp ne i32 %call762, 0, !dbg !9076
  br i1 %tobool763, label %if.then764, label %if.else765, !dbg !9077

if.then764:                                       ; preds = %land.lhs.true761
  %301 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !9078
  store %union.tree_node* %301, %union.tree_node** %ret, align 8, !dbg !9079
  br label %if.end768, !dbg !9080

if.else765:                                       ; preds = %land.lhs.true761, %land.lhs.true754, %land.lhs.true752, %land.lhs.true745, %if.else743
  %302 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9081
  %303 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !9082
  %arraydecay766 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %ncache719, i64 0, i64 0, !dbg !9083
  %call767 = call %union.tree_node* @narrowing_initializer_constant_valid_p(%union.tree_node* %302, %union.tree_node* %303, %union.tree_node** %arraydecay766), !dbg !9084
  store %union.tree_node* %call767, %union.tree_node** %ret, align 8, !dbg !9085
  br label %if.end768

if.end768:                                        ; preds = %if.else765, %if.then764
  br label %if.end769

if.end769:                                        ; preds = %if.end768, %if.then742
  br label %if.end770

if.end770:                                        ; preds = %if.end769, %if.then735
  br label %if.end773, !dbg !9086

if.else771:                                       ; preds = %lor.lhs.false705
  %304 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9087
  %305 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !9088
  %call772 = call %union.tree_node* @narrowing_initializer_constant_valid_p(%union.tree_node* %304, %union.tree_node* %305, %union.tree_node** null), !dbg !9089
  store %union.tree_node* %call772, %union.tree_node** %ret, align 8, !dbg !9090
  br label %if.end773

if.end773:                                        ; preds = %if.else771, %if.end770
  %306 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !9091
  %tobool774 = icmp ne %union.tree_node** %306, null, !dbg !9091
  br i1 %tobool774, label %if.then775, label %if.end778, !dbg !9093

if.then775:                                       ; preds = %if.end773
  %307 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9094
  %308 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !9096
  %arrayidx776 = getelementptr inbounds %union.tree_node*, %union.tree_node** %308, i64 0, !dbg !9096
  store %union.tree_node* %307, %union.tree_node** %arrayidx776, align 8, !dbg !9097
  %309 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !9098
  %310 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !9099
  %arrayidx777 = getelementptr inbounds %union.tree_node*, %union.tree_node** %310, i64 1, !dbg !9099
  store %union.tree_node* %309, %union.tree_node** %arrayidx777, align 8, !dbg !9100
  br label %if.end778, !dbg !9101

if.end778:                                        ; preds = %if.then775, %if.end773
  %311 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !9102
  store %union.tree_node* %311, %union.tree_node** %retval, align 8, !dbg !9103
  br label %return, !dbg !9103

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !9104

sw.epilog:                                        ; preds = %sw.default, %if.end587, %if.end442
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9105
  br label %return, !dbg !9105

return:                                           ; preds = %sw.epilog, %if.end778, %if.then682, %if.then675, %if.end667, %if.then602, %if.then595, %if.then585, %if.then567, %if.then555, %if.then551, %if.then489, %if.then441, %if.then393, %if.then339, %if.end225, %if.else, %if.then223, %sw.bb122, %if.end121, %if.then119, %if.then111, %if.then91, %sw.bb69, %cond.end67, %cond.end57, %if.end36, %if.then2
  %312 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9106
  ret %union.tree_node* %312, !dbg !9106
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @initializer_constant_valid_for_bitfield_p(%union.tree_node* %value) #0 !dbg !9107 {
entry:
  %retval = alloca i8, align 1
  %value.addr = alloca %union.tree_node*, align 8
  %idx = alloca i64, align 8
  %elt = alloca %union.tree_node*, align 8
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !9108, metadata !DIExpression()), !dbg !9109
  %0 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9110
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9110
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9110
  %bf.load = load i64, i64* %1, align 8, !dbg !9110
  %bf.clear = and i64 %bf.load, 65535, !dbg !9110
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9110
  switch i32 %bf.cast, label %sw.default [
    i32 51, label %sw.bb
    i32 23, label %sw.bb25
    i32 118, label %sw.bb26
    i32 117, label %sw.bb26
  ], !dbg !9111

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %idx, metadata !9112, metadata !DIExpression()), !dbg !9115
  call void @llvm.dbg.declare(metadata %union.tree_node** %elt, metadata !9116, metadata !DIExpression()), !dbg !9117
  store i64 0, i64* %idx, align 8, !dbg !9118
  br label %for.cond, !dbg !9118

for.cond:                                         ; preds = %for.inc, %sw.bb
  %2 = load i64, i64* %idx, align 8, !dbg !9120
  %3 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9120
  %constructor = bitcast %union.tree_node* %3 to %struct.tree_constructor*, !dbg !9120
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !9120
  %4 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !9120
  %tobool = icmp ne %struct.VEC_constructor_elt_gc* %4, null, !dbg !9120
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9120

cond.true:                                        ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9120
  %constructor1 = bitcast %union.tree_node* %5 to %struct.tree_constructor*, !dbg !9120
  %elts2 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor1, i32 0, i32 1, !dbg !9120
  %6 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts2, align 8, !dbg !9120
  %base3 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %6, i32 0, i32 0, !dbg !9120
  br label %cond.end, !dbg !9120

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9120

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base3, %cond.true ], [ null, %cond.false ], !dbg !9120
  %call = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !9120
  %conv = zext i32 %call to i64, !dbg !9120
  %cmp = icmp uge i64 %2, %conv, !dbg !9120
  br i1 %cmp, label %cond.true5, label %cond.false6, !dbg !9120

cond.true5:                                       ; preds = %cond.end
  br label %cond.end20, !dbg !9120

cond.false6:                                      ; preds = %cond.end
  %7 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9120
  %constructor7 = bitcast %union.tree_node* %7 to %struct.tree_constructor*, !dbg !9120
  %elts8 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor7, i32 0, i32 1, !dbg !9120
  %8 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts8, align 8, !dbg !9120
  %tobool9 = icmp ne %struct.VEC_constructor_elt_gc* %8, null, !dbg !9120
  br i1 %tobool9, label %cond.true10, label %cond.false14, !dbg !9120

cond.true10:                                      ; preds = %cond.false6
  %9 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9120
  %constructor11 = bitcast %union.tree_node* %9 to %struct.tree_constructor*, !dbg !9120
  %elts12 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor11, i32 0, i32 1, !dbg !9120
  %10 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts12, align 8, !dbg !9120
  %base13 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %10, i32 0, i32 0, !dbg !9120
  br label %cond.end15, !dbg !9120

cond.false14:                                     ; preds = %cond.false6
  br label %cond.end15, !dbg !9120

cond.end15:                                       ; preds = %cond.false14, %cond.true10
  %cond16 = phi %struct.VEC_constructor_elt_base* [ %base13, %cond.true10 ], [ null, %cond.false14 ], !dbg !9120
  %11 = load i64, i64* %idx, align 8, !dbg !9120
  %conv17 = trunc i64 %11 to i32, !dbg !9120
  %call18 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond16, i32 %conv17), !dbg !9120
  %value19 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call18, i32 0, i32 1, !dbg !9120
  %12 = load %union.tree_node*, %union.tree_node** %value19, align 8, !dbg !9120
  store %union.tree_node* %12, %union.tree_node** %elt, align 8, !dbg !9120
  br label %cond.end20, !dbg !9120

cond.end20:                                       ; preds = %cond.end15, %cond.true5
  %cond21 = phi i32 [ 0, %cond.true5 ], [ 1, %cond.end15 ], !dbg !9120
  %tobool22 = icmp ne i32 %cond21, 0, !dbg !9118
  br i1 %tobool22, label %for.body, label %for.end, !dbg !9118

for.body:                                         ; preds = %cond.end20
  %13 = load %union.tree_node*, %union.tree_node** %elt, align 8, !dbg !9122
  %call23 = call zeroext i8 @initializer_constant_valid_for_bitfield_p(%union.tree_node* %13), !dbg !9124
  %tobool24 = icmp ne i8 %call23, 0, !dbg !9124
  br i1 %tobool24, label %if.end, label %if.then, !dbg !9125

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !9126
  br label %return, !dbg !9126

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9127

for.inc:                                          ; preds = %if.end
  %14 = load i64, i64* %idx, align 8, !dbg !9120
  %inc = add i64 %14, 1, !dbg !9120
  store i64 %inc, i64* %idx, align 8, !dbg !9120
  br label %for.cond, !dbg !9120, !llvm.loop !9128

for.end:                                          ; preds = %cond.end20
  store i8 1, i8* %retval, align 1, !dbg !9130
  br label %return, !dbg !9130

sw.bb25:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !9131
  br label %return, !dbg !9131

sw.bb26:                                          ; preds = %entry, %entry
  %15 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !9132
  %exp = bitcast %union.tree_node* %15 to %struct.tree_exp*, !dbg !9132
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !9132
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9132
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9132
  %call27 = call zeroext i8 @initializer_constant_valid_for_bitfield_p(%union.tree_node* %16), !dbg !9133
  store i8 %call27, i8* %retval, align 1, !dbg !9134
  br label %return, !dbg !9134

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !9135

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !9136
  br label %return, !dbg !9136

return:                                           ; preds = %sw.epilog, %sw.bb26, %sw.bb25, %for.end, %if.then
  %17 = load i8, i8* %retval, align 1, !dbg !9137
  ret i8 %17, !dbg !9137
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @output_constant(%union.tree_node* %exp, i64 %size, i32 %align) #0 !dbg !9138 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %size.addr = alloca i64, align 8
  %align.addr = alloca i32, align 4
  %code = alloca i32, align 4
  %thissize = alloca i64, align 8
  %saved_type = alloca %union.tree_node*, align 8
  %type_size = alloca i64, align 8
  %op_size = alloca i64, align 8
  %elt_size = alloca i32, align 4
  %link = alloca %union.tree_node*, align 8
  %nalign = alloca i32, align 4
  %inner = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !9141, metadata !DIExpression()), !dbg !9142
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !9143, metadata !DIExpression()), !dbg !9144
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !9145, metadata !DIExpression()), !dbg !9146
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9147, metadata !DIExpression()), !dbg !9148
  call void @llvm.dbg.declare(metadata i64* %thissize, metadata !9149, metadata !DIExpression()), !dbg !9150
  %0 = load i64, i64* %size.addr, align 8, !dbg !9151
  %cmp = icmp eq i64 %0, 0, !dbg !9153
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9154

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @flag_syntax_only, align 4, !dbg !9155
  %tobool = icmp ne i32 %1, 0, !dbg !9155
  br i1 %tobool, label %if.then, label %if.end, !dbg !9156

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end367, !dbg !9157

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9158
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9158
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9158
  %bf.load = load i64, i64* %3, align 8, !dbg !9158
  %bf.clear = and i64 %bf.load, 65535, !dbg !9158
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9158
  %cmp1 = icmp eq i32 %bf.cast, 116, !dbg !9160
  br i1 %cmp1, label %land.lhs.true, label %if.end127, !dbg !9161

land.lhs.true:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9162
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !9162
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9162
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9162
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !9162
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !9162
  %bf.load3 = load i64, i64* %6, align 8, !dbg !9162
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !9162
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !9162
  %cmp6 = icmp eq i32 %bf.cast5, 10, !dbg !9162
  br i1 %cmp6, label %land.lhs.true15, label %lor.lhs.false7, !dbg !9162

lor.lhs.false7:                                   ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9162
  %common8 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !9162
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !9162
  %8 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !9162
  %base10 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !9162
  %9 = bitcast %struct.tree_base* %base10 to i64*, !dbg !9162
  %bf.load11 = load i64, i64* %9, align 8, !dbg !9162
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !9162
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !9162
  %cmp14 = icmp eq i32 %bf.cast13, 12, !dbg !9162
  br i1 %cmp14, label %land.lhs.true15, label %if.end127, !dbg !9163

land.lhs.true15:                                  ; preds = %lor.lhs.false7, %land.lhs.true
  %10 = load i8 (i32, i8)*, i8 (i32, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 57, i32 2), align 8, !dbg !9164
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9165
  %common16 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !9165
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !9165
  %12 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !9165
  %base18 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !9165
  %13 = bitcast %struct.tree_base* %base18 to i64*, !dbg !9165
  %bf.load19 = load i64, i64* %13, align 8, !dbg !9165
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !9165
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !9165
  %cmp22 = icmp eq i32 %bf.cast21, 14, !dbg !9165
  br i1 %cmp22, label %cond.true, label %cond.false, !dbg !9165

cond.true:                                        ; preds = %land.lhs.true15
  %14 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9165
  %common23 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !9165
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !9165
  %15 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !9165
  %call = call i32 @vector_type_mode(%union.tree_node* %15), !dbg !9165
  br label %cond.end, !dbg !9165

cond.false:                                       ; preds = %land.lhs.true15
  %16 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9165
  %common25 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !9165
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !9165
  %17 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !9165
  %type27 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !9165
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 6, !dbg !9165
  %bf.load28 = load i32, i32* %mode, align 4, !dbg !9165
  %bf.lshr = lshr i32 %bf.load28, 16, !dbg !9165
  %bf.clear29 = and i32 %bf.lshr, 255, !dbg !9165
  br label %cond.end, !dbg !9165

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear29, %cond.false ], !dbg !9165
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9166
  %common30 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !9166
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !9166
  %19 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !9166
  %common32 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !9166
  %type33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 2, !dbg !9166
  %20 = load %union.tree_node*, %union.tree_node** %type33, align 8, !dbg !9166
  %base34 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !9166
  %21 = bitcast %struct.tree_base* %base34 to i64*, !dbg !9166
  %bf.load35 = load i64, i64* %21, align 8, !dbg !9166
  %bf.lshr36 = lshr i64 %bf.load35, 56, !dbg !9166
  %bf.cast37 = trunc i64 %bf.lshr36 to i32, !dbg !9166
  %conv = trunc i32 %bf.cast37 to i8, !dbg !9166
  %call38 = call zeroext i8 %10(i32 %cond, i8 zeroext %conv), !dbg !9167
  %conv39 = zext i8 %call38 to i32, !dbg !9167
  %tobool40 = icmp ne i32 %conv39, 0, !dbg !9167
  br i1 %tobool40, label %if.then41, label %if.end127, !dbg !9168

if.then41:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %saved_type, metadata !9169, metadata !DIExpression()), !dbg !9171
  %22 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9172
  %common42 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !9172
  %type43 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common42, i32 0, i32 2, !dbg !9172
  %23 = load %union.tree_node*, %union.tree_node** %type43, align 8, !dbg !9172
  store %union.tree_node* %23, %union.tree_node** %saved_type, align 8, !dbg !9171
  br label %while.cond, !dbg !9173

while.cond:                                       ; preds = %while.body, %if.then41
  %24 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9174
  %base44 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !9174
  %25 = bitcast %struct.tree_base* %base44 to i64*, !dbg !9174
  %bf.load45 = load i64, i64* %25, align 8, !dbg !9174
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !9174
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !9174
  %cmp48 = icmp eq i32 %bf.cast47, 116, !dbg !9175
  br i1 %cmp48, label %land.lhs.true50, label %land.end, !dbg !9176

land.lhs.true50:                                  ; preds = %while.cond
  %26 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9177
  %common51 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !9177
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !9177
  %27 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !9177
  %base53 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !9177
  %28 = bitcast %struct.tree_base* %base53 to i64*, !dbg !9177
  %bf.load54 = load i64, i64* %28, align 8, !dbg !9177
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !9177
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !9177
  %cmp57 = icmp eq i32 %bf.cast56, 10, !dbg !9177
  br i1 %cmp57, label %land.rhs, label %lor.lhs.false59, !dbg !9177

lor.lhs.false59:                                  ; preds = %land.lhs.true50
  %29 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9177
  %common60 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !9177
  %type61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2, !dbg !9177
  %30 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !9177
  %base62 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !9177
  %31 = bitcast %struct.tree_base* %base62 to i64*, !dbg !9177
  %bf.load63 = load i64, i64* %31, align 8, !dbg !9177
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !9177
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !9177
  %cmp66 = icmp eq i32 %bf.cast65, 12, !dbg !9177
  br i1 %cmp66, label %land.rhs, label %land.end, !dbg !9178

land.rhs:                                         ; preds = %lor.lhs.false59, %land.lhs.true50
  %32 = load i8 (i32, i8)*, i8 (i32, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 57, i32 2), align 8, !dbg !9179
  %33 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9180
  %common68 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !9180
  %type69 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common68, i32 0, i32 2, !dbg !9180
  %34 = load %union.tree_node*, %union.tree_node** %type69, align 8, !dbg !9180
  %base70 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !9180
  %35 = bitcast %struct.tree_base* %base70 to i64*, !dbg !9180
  %bf.load71 = load i64, i64* %35, align 8, !dbg !9180
  %bf.clear72 = and i64 %bf.load71, 65535, !dbg !9180
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !9180
  %cmp74 = icmp eq i32 %bf.cast73, 14, !dbg !9180
  br i1 %cmp74, label %cond.true76, label %cond.false80, !dbg !9180

cond.true76:                                      ; preds = %land.rhs
  %36 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9180
  %common77 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !9180
  %type78 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common77, i32 0, i32 2, !dbg !9180
  %37 = load %union.tree_node*, %union.tree_node** %type78, align 8, !dbg !9180
  %call79 = call i32 @vector_type_mode(%union.tree_node* %37), !dbg !9180
  br label %cond.end88, !dbg !9180

cond.false80:                                     ; preds = %land.rhs
  %38 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9180
  %common81 = bitcast %union.tree_node* %38 to %struct.tree_common*, !dbg !9180
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2, !dbg !9180
  %39 = load %union.tree_node*, %union.tree_node** %type82, align 8, !dbg !9180
  %type83 = bitcast %union.tree_node* %39 to %struct.tree_type*, !dbg !9180
  %mode84 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type83, i32 0, i32 6, !dbg !9180
  %bf.load85 = load i32, i32* %mode84, align 4, !dbg !9180
  %bf.lshr86 = lshr i32 %bf.load85, 16, !dbg !9180
  %bf.clear87 = and i32 %bf.lshr86, 255, !dbg !9180
  br label %cond.end88, !dbg !9180

cond.end88:                                       ; preds = %cond.false80, %cond.true76
  %cond89 = phi i32 [ %call79, %cond.true76 ], [ %bf.clear87, %cond.false80 ], !dbg !9180
  %40 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9181
  %common90 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !9181
  %type91 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common90, i32 0, i32 2, !dbg !9181
  %41 = load %union.tree_node*, %union.tree_node** %type91, align 8, !dbg !9181
  %common92 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !9181
  %type93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 2, !dbg !9181
  %42 = load %union.tree_node*, %union.tree_node** %type93, align 8, !dbg !9181
  %base94 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !9181
  %43 = bitcast %struct.tree_base* %base94 to i64*, !dbg !9181
  %bf.load95 = load i64, i64* %43, align 8, !dbg !9181
  %bf.lshr96 = lshr i64 %bf.load95, 56, !dbg !9181
  %bf.cast97 = trunc i64 %bf.lshr96 to i32, !dbg !9181
  %conv98 = trunc i32 %bf.cast97 to i8, !dbg !9181
  %call99 = call zeroext i8 %32(i32 %cond89, i8 zeroext %conv98), !dbg !9182
  %conv100 = zext i8 %call99 to i32, !dbg !9182
  %tobool101 = icmp ne i32 %conv100, 0, !dbg !9178
  br label %land.end

land.end:                                         ; preds = %cond.end88, %lor.lhs.false59, %while.cond
  %44 = phi i1 [ false, %lor.lhs.false59 ], [ false, %while.cond ], [ %tobool101, %cond.end88 ], !dbg !9183
  br i1 %44, label %while.body, label %while.end, !dbg !9173

while.body:                                       ; preds = %land.end
  %45 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9184
  %exp102 = bitcast %union.tree_node* %45 to %struct.tree_exp*, !dbg !9184
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp102, i32 0, i32 3, !dbg !9184
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9184
  %46 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9184
  store %union.tree_node* %46, %union.tree_node** %exp.addr, align 8, !dbg !9185
  br label %while.cond, !dbg !9173, !llvm.loop !9186

while.end:                                        ; preds = %land.end
  %47 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9187
  %base103 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !9187
  %48 = bitcast %struct.tree_base* %base103 to i64*, !dbg !9187
  %bf.load104 = load i64, i64* %48, align 8, !dbg !9187
  %bf.clear105 = and i64 %bf.load104, 65535, !dbg !9187
  %bf.cast106 = trunc i64 %bf.clear105 to i32, !dbg !9187
  %cmp107 = icmp eq i32 %bf.cast106, 121, !dbg !9189
  br i1 %cmp107, label %if.then109, label %if.else, !dbg !9190

if.then109:                                       ; preds = %while.end
  %49 = load %union.tree_node*, %union.tree_node** %saved_type, align 8, !dbg !9191
  %50 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9191
  %exp110 = bitcast %union.tree_node* %50 to %struct.tree_exp*, !dbg !9191
  %operands111 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp110, i32 0, i32 3, !dbg !9191
  %arrayidx112 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands111, i64 0, i64 0, !dbg !9191
  %51 = load %union.tree_node*, %union.tree_node** %arrayidx112, align 8, !dbg !9191
  %call113 = call %union.tree_node* @build1_stat(i32 121, %union.tree_node* %49, %union.tree_node* %51), !dbg !9191
  store %union.tree_node* %call113, %union.tree_node** %exp.addr, align 8, !dbg !9192
  br label %if.end126, !dbg !9193

if.else:                                          ; preds = %while.end
  %52 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9194
  %base114 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !9194
  %53 = bitcast %struct.tree_base* %base114 to i64*, !dbg !9194
  %bf.load115 = load i64, i64* %53, align 8, !dbg !9194
  %bf.clear116 = and i64 %bf.load115, 65535, !dbg !9194
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !9194
  %cmp118 = icmp eq i32 %bf.cast117, 23, !dbg !9196
  br i1 %cmp118, label %if.then120, label %if.end125, !dbg !9197

if.then120:                                       ; preds = %if.else
  %54 = load %union.tree_node*, %union.tree_node** %saved_type, align 8, !dbg !9198
  %55 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9199
  %int_cst = bitcast %union.tree_node* %55 to %struct.tree_int_cst*, !dbg !9199
  %int_cst121 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !9199
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst121, i32 0, i32 0, !dbg !9199
  %56 = load i64, i64* %low, align 8, !dbg !9199
  %57 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9200
  %int_cst122 = bitcast %union.tree_node* %57 to %struct.tree_int_cst*, !dbg !9200
  %int_cst123 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst122, i32 0, i32 1, !dbg !9200
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst123, i32 0, i32 1, !dbg !9200
  %58 = load i64, i64* %high, align 8, !dbg !9200
  %call124 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %54, i64 %56, i64 %58), !dbg !9201
  store %union.tree_node* %call124, %union.tree_node** %exp.addr, align 8, !dbg !9202
  br label %if.end125, !dbg !9203

if.end125:                                        ; preds = %if.then120, %if.else
  br label %if.end126

if.end126:                                        ; preds = %if.end125, %if.then109
  br label %if.end127, !dbg !9204

if.end127:                                        ; preds = %if.end126, %cond.end, %lor.lhs.false7, %if.end
  br label %while.cond128, !dbg !9205

while.cond128:                                    ; preds = %if.end188, %if.end127
  %59 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9206
  %base129 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !9206
  %60 = bitcast %struct.tree_base* %base129 to i64*, !dbg !9206
  %bf.load130 = load i64, i64* %60, align 8, !dbg !9206
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !9206
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !9206
  %cmp133 = icmp eq i32 %bf.cast132, 116, !dbg !9206
  br i1 %cmp133, label %lor.end, label %lor.lhs.false135, !dbg !9206

lor.lhs.false135:                                 ; preds = %while.cond128
  %61 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9206
  %base136 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !9206
  %62 = bitcast %struct.tree_base* %base136 to i64*, !dbg !9206
  %bf.load137 = load i64, i64* %62, align 8, !dbg !9206
  %bf.clear138 = and i64 %bf.load137, 65535, !dbg !9206
  %bf.cast139 = trunc i64 %bf.clear138 to i32, !dbg !9206
  %cmp140 = icmp eq i32 %bf.cast139, 113, !dbg !9206
  br i1 %cmp140, label %lor.end, label %lor.lhs.false142, !dbg !9207

lor.lhs.false142:                                 ; preds = %lor.lhs.false135
  %63 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9208
  %base143 = bitcast %union.tree_node* %63 to %struct.tree_base*, !dbg !9208
  %64 = bitcast %struct.tree_base* %base143 to i64*, !dbg !9208
  %bf.load144 = load i64, i64* %64, align 8, !dbg !9208
  %bf.clear145 = and i64 %bf.load144, 65535, !dbg !9208
  %bf.cast146 = trunc i64 %bf.clear145 to i32, !dbg !9208
  %cmp147 = icmp eq i32 %bf.cast146, 117, !dbg !9209
  br i1 %cmp147, label %lor.end, label %lor.rhs, !dbg !9210

lor.rhs:                                          ; preds = %lor.lhs.false142
  %65 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9211
  %base149 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !9211
  %66 = bitcast %struct.tree_base* %base149 to i64*, !dbg !9211
  %bf.load150 = load i64, i64* %66, align 8, !dbg !9211
  %bf.clear151 = and i64 %bf.load150, 65535, !dbg !9211
  %bf.cast152 = trunc i64 %bf.clear151 to i32, !dbg !9211
  %cmp153 = icmp eq i32 %bf.cast152, 118, !dbg !9212
  br label %lor.end, !dbg !9210

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false142, %lor.lhs.false135, %while.cond128
  %67 = phi i1 [ true, %lor.lhs.false142 ], [ true, %lor.lhs.false135 ], [ true, %while.cond128 ], [ %cmp153, %lor.rhs ]
  br i1 %67, label %while.body155, label %while.end189, !dbg !9205

while.body155:                                    ; preds = %lor.end
  call void @llvm.dbg.declare(metadata i64* %type_size, metadata !9213, metadata !DIExpression()), !dbg !9215
  %68 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9216
  %common156 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !9216
  %type157 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common156, i32 0, i32 2, !dbg !9216
  %69 = load %union.tree_node*, %union.tree_node** %type157, align 8, !dbg !9216
  %call158 = call i64 @int_size_in_bytes(%union.tree_node* %69), !dbg !9217
  store i64 %call158, i64* %type_size, align 8, !dbg !9215
  call void @llvm.dbg.declare(metadata i64* %op_size, metadata !9218, metadata !DIExpression()), !dbg !9219
  %70 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9220
  %exp159 = bitcast %union.tree_node* %70 to %struct.tree_exp*, !dbg !9220
  %operands160 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp159, i32 0, i32 3, !dbg !9220
  %arrayidx161 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands160, i64 0, i64 0, !dbg !9220
  %71 = load %union.tree_node*, %union.tree_node** %arrayidx161, align 8, !dbg !9220
  %common162 = bitcast %union.tree_node* %71 to %struct.tree_common*, !dbg !9220
  %type163 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common162, i32 0, i32 2, !dbg !9220
  %72 = load %union.tree_node*, %union.tree_node** %type163, align 8, !dbg !9220
  %call164 = call i64 @int_size_in_bytes(%union.tree_node* %72), !dbg !9221
  store i64 %call164, i64* %op_size, align 8, !dbg !9219
  %73 = load i64, i64* %type_size, align 8, !dbg !9222
  %74 = load i64, i64* %op_size, align 8, !dbg !9224
  %cmp165 = icmp sgt i64 %73, %74, !dbg !9225
  br i1 %cmp165, label %land.lhs.true167, label %if.else184, !dbg !9226

land.lhs.true167:                                 ; preds = %while.body155
  %75 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9227
  %base168 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !9227
  %76 = bitcast %struct.tree_base* %base168 to i64*, !dbg !9227
  %bf.load169 = load i64, i64* %76, align 8, !dbg !9227
  %bf.clear170 = and i64 %bf.load169, 65535, !dbg !9227
  %bf.cast171 = trunc i64 %bf.clear170 to i32, !dbg !9227
  %cmp172 = icmp ne i32 %bf.cast171, 118, !dbg !9228
  br i1 %cmp172, label %land.lhs.true174, label %if.else184, !dbg !9229

land.lhs.true174:                                 ; preds = %land.lhs.true167
  %77 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9230
  %common175 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !9230
  %type176 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common175, i32 0, i32 2, !dbg !9230
  %78 = load %union.tree_node*, %union.tree_node** %type176, align 8, !dbg !9230
  %base177 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !9230
  %79 = bitcast %struct.tree_base* %base177 to i64*, !dbg !9230
  %bf.load178 = load i64, i64* %79, align 8, !dbg !9230
  %bf.clear179 = and i64 %bf.load178, 65535, !dbg !9230
  %bf.cast180 = trunc i64 %bf.clear179 to i32, !dbg !9230
  %cmp181 = icmp ne i32 %bf.cast180, 17, !dbg !9231
  br i1 %cmp181, label %if.then183, label %if.else184, !dbg !9232

if.then183:                                       ; preds = %land.lhs.true174
  br label %while.end189, !dbg !9233

if.else184:                                       ; preds = %land.lhs.true174, %land.lhs.true167, %while.body155
  %80 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9234
  %exp185 = bitcast %union.tree_node* %80 to %struct.tree_exp*, !dbg !9234
  %operands186 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp185, i32 0, i32 3, !dbg !9234
  %arrayidx187 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands186, i64 0, i64 0, !dbg !9234
  %81 = load %union.tree_node*, %union.tree_node** %arrayidx187, align 8, !dbg !9234
  store %union.tree_node* %81, %union.tree_node** %exp.addr, align 8, !dbg !9235
  br label %if.end188

if.end188:                                        ; preds = %if.else184
  br label %while.cond128, !dbg !9205, !llvm.loop !9236

while.end189:                                     ; preds = %if.then183, %lor.end
  %82 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9238
  %common190 = bitcast %union.tree_node* %82 to %struct.tree_common*, !dbg !9238
  %type191 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common190, i32 0, i32 2, !dbg !9238
  %83 = load %union.tree_node*, %union.tree_node** %type191, align 8, !dbg !9238
  %base192 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !9238
  %84 = bitcast %struct.tree_base* %base192 to i64*, !dbg !9238
  %bf.load193 = load i64, i64* %84, align 8, !dbg !9238
  %bf.clear194 = and i64 %bf.load193, 65535, !dbg !9238
  %bf.cast195 = trunc i64 %bf.clear194 to i32, !dbg !9238
  store i32 %bf.cast195, i32* %code, align 4, !dbg !9239
  %85 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9240
  %common196 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !9240
  %type197 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common196, i32 0, i32 2, !dbg !9240
  %86 = load %union.tree_node*, %union.tree_node** %type197, align 8, !dbg !9240
  %call198 = call i64 @int_size_in_bytes(%union.tree_node* %86), !dbg !9241
  store i64 %call198, i64* %thissize, align 8, !dbg !9242
  %87 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9243
  %base199 = bitcast %union.tree_node* %87 to %struct.tree_base*, !dbg !9243
  %88 = bitcast %struct.tree_base* %base199 to i64*, !dbg !9243
  %bf.load200 = load i64, i64* %88, align 8, !dbg !9243
  %bf.clear201 = and i64 %bf.load200, 65535, !dbg !9243
  %bf.cast202 = trunc i64 %bf.clear201 to i32, !dbg !9243
  %cmp203 = icmp eq i32 %bf.cast202, 51, !dbg !9245
  br i1 %cmp203, label %land.lhs.true205, label %if.end218, !dbg !9246

land.lhs.true205:                                 ; preds = %while.end189
  %89 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9247
  %constructor = bitcast %union.tree_node* %89 to %struct.tree_constructor*, !dbg !9247
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !9247
  %90 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !9247
  %tobool206 = icmp ne %struct.VEC_constructor_elt_gc* %90, null, !dbg !9247
  br i1 %tobool206, label %cond.true207, label %cond.false211, !dbg !9247

cond.true207:                                     ; preds = %land.lhs.true205
  %91 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9247
  %constructor208 = bitcast %union.tree_node* %91 to %struct.tree_constructor*, !dbg !9247
  %elts209 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor208, i32 0, i32 1, !dbg !9247
  %92 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts209, align 8, !dbg !9247
  %base210 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %92, i32 0, i32 0, !dbg !9247
  br label %cond.end212, !dbg !9247

cond.false211:                                    ; preds = %land.lhs.true205
  br label %cond.end212, !dbg !9247

cond.end212:                                      ; preds = %cond.false211, %cond.true207
  %cond213 = phi %struct.VEC_constructor_elt_base* [ %base210, %cond.true207 ], [ null, %cond.false211 ], !dbg !9247
  %call214 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond213), !dbg !9247
  %cmp215 = icmp eq i32 %call214, 0, !dbg !9247
  br i1 %cmp215, label %if.then217, label %if.end218, !dbg !9248

if.then217:                                       ; preds = %cond.end212
  %93 = load i64, i64* %size.addr, align 8, !dbg !9249
  call void @assemble_zeros(i64 %93), !dbg !9251
  br label %if.end367, !dbg !9252

if.end218:                                        ; preds = %cond.end212, %while.end189
  %94 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9253
  %base219 = bitcast %union.tree_node* %94 to %struct.tree_base*, !dbg !9253
  %95 = bitcast %struct.tree_base* %base219 to i64*, !dbg !9253
  %bf.load220 = load i64, i64* %95, align 8, !dbg !9253
  %bf.clear221 = and i64 %bf.load220, 65535, !dbg !9253
  %bf.cast222 = trunc i64 %bf.clear221 to i32, !dbg !9253
  %cmp223 = icmp eq i32 %bf.cast222, 122, !dbg !9255
  br i1 %cmp223, label %if.then225, label %if.end226, !dbg !9256

if.then225:                                       ; preds = %if.end218
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 4661, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !9257
  br label %if.end367, !dbg !9259

if.end226:                                        ; preds = %if.end218
  %96 = load i32, i32* %code, align 4, !dbg !9260
  switch i32 %96, label %sw.default362 [
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 6, label %sw.bb
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 5, label %sw.bb
    i32 11, label %sw.bb
    i32 9, label %sw.bb239
    i32 13, label %sw.bb271
    i32 15, label %sw.bb277
    i32 14, label %sw.bb277
    i32 16, label %sw.bb349
    i32 17, label %sw.bb349
    i32 0, label %sw.bb361
  ], !dbg !9261

sw.bb:                                            ; preds = %if.end226, %if.end226, %if.end226, %if.end226, %if.end226, %if.end226, %if.end226
  %97 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9262
  %call227 = call %struct.rtx_def* @expand_expr(%union.tree_node* %97, %struct.rtx_def* null, i32 0, i32 4), !dbg !9265
  %98 = load i64, i64* %size.addr, align 8, !dbg !9266
  %99 = load i64, i64* %thissize, align 8, !dbg !9266
  %cmp228 = icmp ult i64 %98, %99, !dbg !9266
  br i1 %cmp228, label %cond.true230, label %cond.false231, !dbg !9266

cond.true230:                                     ; preds = %sw.bb
  %100 = load i64, i64* %size.addr, align 8, !dbg !9266
  br label %cond.end232, !dbg !9266

cond.false231:                                    ; preds = %sw.bb
  %101 = load i64, i64* %thissize, align 8, !dbg !9266
  br label %cond.end232, !dbg !9266

cond.end232:                                      ; preds = %cond.false231, %cond.true230
  %cond233 = phi i64 [ %100, %cond.true230 ], [ %101, %cond.false231 ], !dbg !9266
  %conv234 = trunc i64 %cond233 to i32, !dbg !9266
  %102 = load i32, i32* %align.addr, align 4, !dbg !9267
  %call235 = call zeroext i8 @assemble_integer(%struct.rtx_def* %call227, i32 %conv234, i32 %102, i32 0), !dbg !9268
  %tobool236 = icmp ne i8 %call235, 0, !dbg !9268
  br i1 %tobool236, label %if.end238, label %if.then237, !dbg !9269

if.then237:                                       ; preds = %cond.end232
  call void (i8*, ...) @error(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.87, i64 0, i64 0)), !dbg !9270
  br label %if.end238, !dbg !9270

if.end238:                                        ; preds = %if.then237, %cond.end232
  br label %sw.epilog363, !dbg !9271

sw.bb239:                                         ; preds = %if.end226
  %103 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9272
  %base240 = bitcast %union.tree_node* %103 to %struct.tree_base*, !dbg !9272
  %104 = bitcast %struct.tree_base* %base240 to i64*, !dbg !9272
  %bf.load241 = load i64, i64* %104, align 8, !dbg !9272
  %bf.clear242 = and i64 %bf.load241, 65535, !dbg !9272
  %bf.cast243 = trunc i64 %bf.clear242 to i32, !dbg !9272
  %cmp244 = icmp ne i32 %bf.cast243, 24, !dbg !9274
  br i1 %cmp244, label %if.then246, label %if.else247, !dbg !9275

if.then246:                                       ; preds = %sw.bb239
  call void (i8*, ...) @error(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.88, i64 0, i64 0)), !dbg !9276
  br label %if.end270, !dbg !9276

if.else247:                                       ; preds = %sw.bb239
  %105 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9277
  %real_cst = bitcast %union.tree_node* %105 to %struct.tree_real_cst*, !dbg !9277
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !9277
  %106 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !9277
  %107 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9278
  %common248 = bitcast %union.tree_node* %107 to %struct.tree_common*, !dbg !9278
  %type249 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common248, i32 0, i32 2, !dbg !9278
  %108 = load %union.tree_node*, %union.tree_node** %type249, align 8, !dbg !9278
  %base250 = bitcast %union.tree_node* %108 to %struct.tree_base*, !dbg !9278
  %109 = bitcast %struct.tree_base* %base250 to i64*, !dbg !9278
  %bf.load251 = load i64, i64* %109, align 8, !dbg !9278
  %bf.clear252 = and i64 %bf.load251, 65535, !dbg !9278
  %bf.cast253 = trunc i64 %bf.clear252 to i32, !dbg !9278
  %cmp254 = icmp eq i32 %bf.cast253, 14, !dbg !9278
  br i1 %cmp254, label %cond.true256, label %cond.false260, !dbg !9278

cond.true256:                                     ; preds = %if.else247
  %110 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9278
  %common257 = bitcast %union.tree_node* %110 to %struct.tree_common*, !dbg !9278
  %type258 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common257, i32 0, i32 2, !dbg !9278
  %111 = load %union.tree_node*, %union.tree_node** %type258, align 8, !dbg !9278
  %call259 = call i32 @vector_type_mode(%union.tree_node* %111), !dbg !9278
  br label %cond.end268, !dbg !9278

cond.false260:                                    ; preds = %if.else247
  %112 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9278
  %common261 = bitcast %union.tree_node* %112 to %struct.tree_common*, !dbg !9278
  %type262 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common261, i32 0, i32 2, !dbg !9278
  %113 = load %union.tree_node*, %union.tree_node** %type262, align 8, !dbg !9278
  %type263 = bitcast %union.tree_node* %113 to %struct.tree_type*, !dbg !9278
  %mode264 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type263, i32 0, i32 6, !dbg !9278
  %bf.load265 = load i32, i32* %mode264, align 4, !dbg !9278
  %bf.lshr266 = lshr i32 %bf.load265, 16, !dbg !9278
  %bf.clear267 = and i32 %bf.lshr266, 255, !dbg !9278
  br label %cond.end268, !dbg !9278

cond.end268:                                      ; preds = %cond.false260, %cond.true256
  %cond269 = phi i32 [ %call259, %cond.true256 ], [ %bf.clear267, %cond.false260 ], !dbg !9278
  %114 = load i32, i32* %align.addr, align 4, !dbg !9279
  call void @assemble_real(%struct.real_value* byval(%struct.real_value) align 8 %106, i32 %cond269, i32 %114), !dbg !9280
  br label %if.end270

if.end270:                                        ; preds = %cond.end268, %if.then246
  br label %sw.epilog363, !dbg !9281

sw.bb271:                                         ; preds = %if.end226
  %115 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9282
  %complex = bitcast %union.tree_node* %115 to %struct.tree_complex*, !dbg !9282
  %real = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex, i32 0, i32 1, !dbg !9282
  %116 = load %union.tree_node*, %union.tree_node** %real, align 8, !dbg !9282
  %117 = load i64, i64* %thissize, align 8, !dbg !9283
  %div = udiv i64 %117, 2, !dbg !9284
  %118 = load i32, i32* %align.addr, align 4, !dbg !9285
  call void @output_constant(%union.tree_node* %116, i64 %div, i32 %118), !dbg !9286
  %119 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9287
  %complex272 = bitcast %union.tree_node* %119 to %struct.tree_complex*, !dbg !9287
  %imag = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex272, i32 0, i32 2, !dbg !9287
  %120 = load %union.tree_node*, %union.tree_node** %imag, align 8, !dbg !9287
  %121 = load i64, i64* %thissize, align 8, !dbg !9288
  %div273 = udiv i64 %121, 2, !dbg !9289
  %122 = load i32, i32* %align.addr, align 4, !dbg !9290
  %123 = load i64, i64* %thissize, align 8, !dbg !9291
  %div274 = udiv i64 %123, 2, !dbg !9292
  %mul = mul i64 8, %div274, !dbg !9293
  %conv275 = trunc i64 %mul to i32, !dbg !9294
  %call276 = call i32 @min_align(i32 %122, i32 %conv275), !dbg !9295
  call void @output_constant(%union.tree_node* %120, i64 %div273, i32 %call276), !dbg !9296
  br label %sw.epilog363, !dbg !9297

sw.bb277:                                         ; preds = %if.end226, %if.end226
  %124 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9298
  %base278 = bitcast %union.tree_node* %124 to %struct.tree_base*, !dbg !9298
  %125 = bitcast %struct.tree_base* %base278 to i64*, !dbg !9298
  %bf.load279 = load i64, i64* %125, align 8, !dbg !9298
  %bf.clear280 = and i64 %bf.load279, 65535, !dbg !9298
  %bf.cast281 = trunc i64 %bf.clear280 to i32, !dbg !9298
  switch i32 %bf.cast281, label %sw.default [
    i32 51, label %sw.bb282
    i32 28, label %sw.bb284
    i32 27, label %sw.bb297
  ], !dbg !9299

sw.bb282:                                         ; preds = %sw.bb277
  %126 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9300
  %127 = load i64, i64* %size.addr, align 8, !dbg !9302
  %128 = load i32, i32* %align.addr, align 4, !dbg !9303
  %call283 = call i64 @output_constructor(%union.tree_node* %126, i64 %127, i32 %128, %struct.oc_outer_state* null), !dbg !9304
  br label %if.end367, !dbg !9305

sw.bb284:                                         ; preds = %sw.bb277
  %129 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9306
  %string = bitcast %union.tree_node* %129 to %struct.tree_string*, !dbg !9306
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 1, !dbg !9306
  %130 = load i32, i32* %length, align 8, !dbg !9306
  %conv285 = sext i32 %130 to i64, !dbg !9306
  %131 = load i64, i64* %size.addr, align 8, !dbg !9306
  %cmp286 = icmp ult i64 %conv285, %131, !dbg !9306
  br i1 %cmp286, label %cond.true288, label %cond.false292, !dbg !9306

cond.true288:                                     ; preds = %sw.bb284
  %132 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9306
  %string289 = bitcast %union.tree_node* %132 to %struct.tree_string*, !dbg !9306
  %length290 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string289, i32 0, i32 1, !dbg !9306
  %133 = load i32, i32* %length290, align 8, !dbg !9306
  %conv291 = sext i32 %133 to i64, !dbg !9306
  br label %cond.end293, !dbg !9306

cond.false292:                                    ; preds = %sw.bb284
  %134 = load i64, i64* %size.addr, align 8, !dbg !9306
  br label %cond.end293, !dbg !9306

cond.end293:                                      ; preds = %cond.false292, %cond.true288
  %cond294 = phi i64 [ %conv291, %cond.true288 ], [ %134, %cond.false292 ], !dbg !9306
  store i64 %cond294, i64* %thissize, align 8, !dbg !9307
  %135 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9308
  %string295 = bitcast %union.tree_node* %135 to %struct.tree_string*, !dbg !9308
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string295, i32 0, i32 2, !dbg !9308
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !9308
  %136 = load i64, i64* %thissize, align 8, !dbg !9309
  %conv296 = trunc i64 %136 to i32, !dbg !9309
  call void @assemble_string(i8* %arraydecay, i32 %conv296), !dbg !9310
  br label %sw.epilog, !dbg !9311

sw.bb297:                                         ; preds = %sw.bb277
  call void @llvm.dbg.declare(metadata i32* %elt_size, metadata !9312, metadata !DIExpression()), !dbg !9314
  call void @llvm.dbg.declare(metadata %union.tree_node** %link, metadata !9315, metadata !DIExpression()), !dbg !9316
  call void @llvm.dbg.declare(metadata i32* %nalign, metadata !9317, metadata !DIExpression()), !dbg !9318
  call void @llvm.dbg.declare(metadata i32* %inner, metadata !9319, metadata !DIExpression()), !dbg !9320
  %137 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9321
  %common298 = bitcast %union.tree_node* %137 to %struct.tree_common*, !dbg !9321
  %type299 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common298, i32 0, i32 2, !dbg !9321
  %138 = load %union.tree_node*, %union.tree_node** %type299, align 8, !dbg !9321
  %common300 = bitcast %union.tree_node* %138 to %struct.tree_common*, !dbg !9321
  %type301 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common300, i32 0, i32 2, !dbg !9321
  %139 = load %union.tree_node*, %union.tree_node** %type301, align 8, !dbg !9321
  %base302 = bitcast %union.tree_node* %139 to %struct.tree_base*, !dbg !9321
  %140 = bitcast %struct.tree_base* %base302 to i64*, !dbg !9321
  %bf.load303 = load i64, i64* %140, align 8, !dbg !9321
  %bf.clear304 = and i64 %bf.load303, 65535, !dbg !9321
  %bf.cast305 = trunc i64 %bf.clear304 to i32, !dbg !9321
  %cmp306 = icmp eq i32 %bf.cast305, 14, !dbg !9321
  br i1 %cmp306, label %cond.true308, label %cond.false314, !dbg !9321

cond.true308:                                     ; preds = %sw.bb297
  %141 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9321
  %common309 = bitcast %union.tree_node* %141 to %struct.tree_common*, !dbg !9321
  %type310 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common309, i32 0, i32 2, !dbg !9321
  %142 = load %union.tree_node*, %union.tree_node** %type310, align 8, !dbg !9321
  %common311 = bitcast %union.tree_node* %142 to %struct.tree_common*, !dbg !9321
  %type312 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common311, i32 0, i32 2, !dbg !9321
  %143 = load %union.tree_node*, %union.tree_node** %type312, align 8, !dbg !9321
  %call313 = call i32 @vector_type_mode(%union.tree_node* %143), !dbg !9321
  br label %cond.end324, !dbg !9321

cond.false314:                                    ; preds = %sw.bb297
  %144 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9321
  %common315 = bitcast %union.tree_node* %144 to %struct.tree_common*, !dbg !9321
  %type316 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common315, i32 0, i32 2, !dbg !9321
  %145 = load %union.tree_node*, %union.tree_node** %type316, align 8, !dbg !9321
  %common317 = bitcast %union.tree_node* %145 to %struct.tree_common*, !dbg !9321
  %type318 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common317, i32 0, i32 2, !dbg !9321
  %146 = load %union.tree_node*, %union.tree_node** %type318, align 8, !dbg !9321
  %type319 = bitcast %union.tree_node* %146 to %struct.tree_type*, !dbg !9321
  %mode320 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type319, i32 0, i32 6, !dbg !9321
  %bf.load321 = load i32, i32* %mode320, align 4, !dbg !9321
  %bf.lshr322 = lshr i32 %bf.load321, 16, !dbg !9321
  %bf.clear323 = and i32 %bf.lshr322, 255, !dbg !9321
  br label %cond.end324, !dbg !9321

cond.end324:                                      ; preds = %cond.false314, %cond.true308
  %cond325 = phi i32 [ %call313, %cond.true308 ], [ %bf.clear323, %cond.false314 ], !dbg !9321
  store i32 %cond325, i32* %inner, align 4, !dbg !9322
  %147 = load i32, i32* %align.addr, align 4, !dbg !9323
  %148 = load i32, i32* %inner, align 4, !dbg !9323
  %call326 = call i32 @get_mode_alignment(i32 %148), !dbg !9323
  %cmp327 = icmp ult i32 %147, %call326, !dbg !9323
  br i1 %cmp327, label %cond.true329, label %cond.false330, !dbg !9323

cond.true329:                                     ; preds = %cond.end324
  %149 = load i32, i32* %align.addr, align 4, !dbg !9323
  br label %cond.end332, !dbg !9323

cond.false330:                                    ; preds = %cond.end324
  %150 = load i32, i32* %inner, align 4, !dbg !9323
  %call331 = call i32 @get_mode_alignment(i32 %150), !dbg !9323
  br label %cond.end332, !dbg !9323

cond.end332:                                      ; preds = %cond.false330, %cond.true329
  %cond333 = phi i32 [ %149, %cond.true329 ], [ %call331, %cond.false330 ], !dbg !9323
  store i32 %cond333, i32* %nalign, align 4, !dbg !9324
  %151 = load i32, i32* %inner, align 4, !dbg !9325
  %idxprom = zext i32 %151 to i64, !dbg !9325
  %arrayidx334 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !9325
  %152 = load i8, i8* %arrayidx334, align 1, !dbg !9325
  %conv335 = zext i8 %152 to i16, !dbg !9325
  %conv336 = zext i16 %conv335 to i32, !dbg !9325
  store i32 %conv336, i32* %elt_size, align 4, !dbg !9326
  %153 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9327
  %vector = bitcast %union.tree_node* %153 to %struct.tree_vector*, !dbg !9327
  %elements = getelementptr inbounds %struct.tree_vector, %struct.tree_vector* %vector, i32 0, i32 1, !dbg !9327
  %154 = load %union.tree_node*, %union.tree_node** %elements, align 8, !dbg !9327
  store %union.tree_node* %154, %union.tree_node** %link, align 8, !dbg !9328
  %155 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9329
  %list = bitcast %union.tree_node* %155 to %struct.tree_list*, !dbg !9329
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !9329
  %156 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9329
  %157 = load i32, i32* %elt_size, align 4, !dbg !9330
  %conv337 = sext i32 %157 to i64, !dbg !9330
  %158 = load i32, i32* %align.addr, align 4, !dbg !9331
  call void @output_constant(%union.tree_node* %156, i64 %conv337, i32 %158), !dbg !9332
  %159 = load i32, i32* %elt_size, align 4, !dbg !9333
  %conv338 = sext i32 %159 to i64, !dbg !9333
  store i64 %conv338, i64* %thissize, align 8, !dbg !9334
  br label %while.cond339, !dbg !9335

while.cond339:                                    ; preds = %while.body343, %cond.end332
  %160 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9336
  %common340 = bitcast %union.tree_node* %160 to %struct.tree_common*, !dbg !9336
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common340, i32 0, i32 1, !dbg !9336
  %161 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !9336
  store %union.tree_node* %161, %union.tree_node** %link, align 8, !dbg !9337
  %cmp341 = icmp ne %union.tree_node* %161, null, !dbg !9338
  br i1 %cmp341, label %while.body343, label %while.end348, !dbg !9335

while.body343:                                    ; preds = %while.cond339
  %162 = load %union.tree_node*, %union.tree_node** %link, align 8, !dbg !9339
  %list344 = bitcast %union.tree_node* %162 to %struct.tree_list*, !dbg !9339
  %value345 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list344, i32 0, i32 2, !dbg !9339
  %163 = load %union.tree_node*, %union.tree_node** %value345, align 8, !dbg !9339
  %164 = load i32, i32* %elt_size, align 4, !dbg !9341
  %conv346 = sext i32 %164 to i64, !dbg !9341
  %165 = load i32, i32* %nalign, align 4, !dbg !9342
  call void @output_constant(%union.tree_node* %163, i64 %conv346, i32 %165), !dbg !9343
  %166 = load i32, i32* %elt_size, align 4, !dbg !9344
  %conv347 = sext i32 %166 to i64, !dbg !9344
  %167 = load i64, i64* %thissize, align 8, !dbg !9345
  %add = add i64 %167, %conv347, !dbg !9345
  store i64 %add, i64* %thissize, align 8, !dbg !9345
  br label %while.cond339, !dbg !9335, !llvm.loop !9346

while.end348:                                     ; preds = %while.cond339
  br label %sw.epilog, !dbg !9348

sw.default:                                       ; preds = %sw.bb277
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 4732, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !9349
  br label %sw.epilog, !dbg !9350

sw.epilog:                                        ; preds = %sw.default, %while.end348, %cond.end293
  br label %sw.epilog363, !dbg !9351

sw.bb349:                                         ; preds = %if.end226, %if.end226
  %168 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9352
  %base350 = bitcast %union.tree_node* %168 to %struct.tree_base*, !dbg !9352
  %169 = bitcast %struct.tree_base* %base350 to i64*, !dbg !9352
  %bf.load351 = load i64, i64* %169, align 8, !dbg !9352
  %bf.clear352 = and i64 %bf.load351, 65535, !dbg !9352
  %bf.cast353 = trunc i64 %bf.clear352 to i32, !dbg !9352
  %cmp354 = icmp eq i32 %bf.cast353, 51, !dbg !9352
  br i1 %cmp354, label %cond.false357, label %cond.true356, !dbg !9352

cond.true356:                                     ; preds = %sw.bb349
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 4738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !9352
  br label %cond.end358, !dbg !9352

cond.false357:                                    ; preds = %sw.bb349
  br label %cond.end358, !dbg !9352

cond.end358:                                      ; preds = %cond.false357, %cond.true356
  %cond359 = phi i32 [ 0, %cond.true356 ], [ 0, %cond.false357 ], !dbg !9352
  %170 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9353
  %171 = load i64, i64* %size.addr, align 8, !dbg !9354
  %172 = load i32, i32* %align.addr, align 4, !dbg !9355
  %call360 = call i64 @output_constructor(%union.tree_node* %170, i64 %171, i32 %172, %struct.oc_outer_state* null), !dbg !9356
  br label %if.end367, !dbg !9357

sw.bb361:                                         ; preds = %if.end226
  br label %if.end367, !dbg !9358

sw.default362:                                    ; preds = %if.end226
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 4746, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !9359
  br label %sw.epilog363, !dbg !9360

sw.epilog363:                                     ; preds = %sw.default362, %sw.epilog, %sw.bb271, %if.end270, %if.end238
  %173 = load i64, i64* %size.addr, align 8, !dbg !9361
  %174 = load i64, i64* %thissize, align 8, !dbg !9363
  %cmp364 = icmp ugt i64 %173, %174, !dbg !9364
  br i1 %cmp364, label %if.then366, label %if.end367, !dbg !9365

if.then366:                                       ; preds = %sw.epilog363
  %175 = load i64, i64* %size.addr, align 8, !dbg !9366
  %176 = load i64, i64* %thissize, align 8, !dbg !9367
  %sub = sub i64 %175, %176, !dbg !9368
  call void @assemble_zeros(i64 %sub), !dbg !9369
  br label %if.end367, !dbg !9369

if.end367:                                        ; preds = %if.then, %if.then217, %if.then225, %sw.bb282, %cond.end358, %sw.bb361, %if.then366, %sw.epilog363
  ret void, !dbg !9370
}

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst_wide(%union.tree_node*, i64, i64) #2

declare dso_local i64 @int_size_in_bytes(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_expr(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %mode, i32 %modifier) #0 !dbg !9371 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %modifier.addr = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !9374, metadata !DIExpression()), !dbg !9375
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !9376, metadata !DIExpression()), !dbg !9377
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9378, metadata !DIExpression()), !dbg !9379
  store i32 %modifier, i32* %modifier.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %modifier.addr, metadata !9380, metadata !DIExpression()), !dbg !9381
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9382
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !9383
  %2 = load i32, i32* %mode.addr, align 4, !dbg !9384
  %3 = load i32, i32* %modifier.addr, align 4, !dbg !9385
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* %1, i32 %2, i32 %3, %struct.rtx_def** null), !dbg !9386
  ret %struct.rtx_def* %call, !dbg !9387
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @output_constructor(%union.tree_node* %exp, i64 %size, i32 %align, %struct.oc_outer_state* %outer) #0 !dbg !9388 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %size.addr = alloca i64, align 8
  %align.addr = alloca i32, align 4
  %outer.addr = alloca %struct.oc_outer_state*, align 8
  %cnt = alloca i64, align 8
  %ce = alloca %struct.constructor_elt_d*, align 8
  %local = alloca %struct.oc_local_state, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !9397, metadata !DIExpression()), !dbg !9398
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !9399, metadata !DIExpression()), !dbg !9400
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !9401, metadata !DIExpression()), !dbg !9402
  store %struct.oc_outer_state* %outer, %struct.oc_outer_state** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.oc_outer_state** %outer.addr, metadata !9403, metadata !DIExpression()), !dbg !9404
  call void @llvm.dbg.declare(metadata i64* %cnt, metadata !9405, metadata !DIExpression()), !dbg !9406
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %ce, metadata !9407, metadata !DIExpression()), !dbg !9408
  call void @llvm.dbg.declare(metadata %struct.oc_local_state* %local, metadata !9409, metadata !DIExpression()), !dbg !9425
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9426
  %exp1 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 0, !dbg !9427
  store %union.tree_node* %0, %union.tree_node** %exp1, align 8, !dbg !9428
  %1 = load i64, i64* %size.addr, align 8, !dbg !9429
  %size2 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 1, !dbg !9430
  store i64 %1, i64* %size2, align 8, !dbg !9431
  %2 = load i32, i32* %align.addr, align 4, !dbg !9432
  %align3 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 2, !dbg !9433
  store i32 %2, i32* %align3, align 8, !dbg !9434
  %total_bytes = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 6, !dbg !9435
  store i64 0, i64* %total_bytes, align 8, !dbg !9436
  %3 = load %struct.oc_outer_state*, %struct.oc_outer_state** %outer.addr, align 8, !dbg !9437
  %cmp = icmp ne %struct.oc_outer_state* %3, null, !dbg !9438
  %conv = zext i1 %cmp to i32, !dbg !9438
  %conv4 = trunc i32 %conv to i8, !dbg !9437
  %byte_buffer_in_use = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 7, !dbg !9439
  store i8 %conv4, i8* %byte_buffer_in_use, align 8, !dbg !9440
  %4 = load %struct.oc_outer_state*, %struct.oc_outer_state** %outer.addr, align 8, !dbg !9441
  %tobool = icmp ne %struct.oc_outer_state* %4, null, !dbg !9441
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9441

cond.true:                                        ; preds = %entry
  %5 = load %struct.oc_outer_state*, %struct.oc_outer_state** %outer.addr, align 8, !dbg !9442
  %byte = getelementptr inbounds %struct.oc_outer_state, %struct.oc_outer_state* %5, i32 0, i32 1, !dbg !9443
  %6 = load i32, i32* %byte, align 4, !dbg !9443
  br label %cond.end, !dbg !9441

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9441

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %6, %cond.true ], [ 0, %cond.false ], !dbg !9441
  %byte5 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 8, !dbg !9444
  store i32 %cond, i32* %byte5, align 4, !dbg !9445
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9446
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !9446
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9446
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9446
  %type6 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 3, !dbg !9447
  store %union.tree_node* %8, %union.tree_node** %type6, align 8, !dbg !9448
  %last_relative_index = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 9, !dbg !9449
  store i32 -1, i32* %last_relative_index, align 8, !dbg !9450
  %min_index = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 5, !dbg !9451
  store %union.tree_node* null, %union.tree_node** %min_index, align 8, !dbg !9452
  %type7 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 3, !dbg !9453
  %9 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !9453
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !9453
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !9453
  %bf.load = load i64, i64* %10, align 8, !dbg !9453
  %bf.clear = and i64 %bf.load, 65535, !dbg !9453
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9453
  %cmp8 = icmp eq i32 %bf.cast, 15, !dbg !9455
  br i1 %cmp8, label %land.lhs.true, label %if.end, !dbg !9456

land.lhs.true:                                    ; preds = %cond.end
  %type10 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 3, !dbg !9457
  %11 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !9457
  %type11 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !9457
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type11, i32 0, i32 1, !dbg !9457
  %12 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !9457
  %cmp12 = icmp ne %union.tree_node* %12, null, !dbg !9458
  br i1 %cmp12, label %if.then, label %if.end, !dbg !9459

if.then:                                          ; preds = %land.lhs.true
  %type14 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 3, !dbg !9460
  %13 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !9460
  %type15 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !9460
  %values16 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type15, i32 0, i32 1, !dbg !9460
  %14 = load %union.tree_node*, %union.tree_node** %values16, align 8, !dbg !9460
  %type17 = bitcast %union.tree_node* %14 to %struct.tree_type*, !dbg !9460
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type17, i32 0, i32 13, !dbg !9460
  %15 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !9460
  %min_index18 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 5, !dbg !9461
  store %union.tree_node* %15, %union.tree_node** %min_index18, align 8, !dbg !9462
  br label %if.end, !dbg !9463

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end
  %field = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9464
  store %union.tree_node* null, %union.tree_node** %field, align 8, !dbg !9465
  %type19 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 3, !dbg !9466
  %16 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !9466
  %base20 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !9466
  %17 = bitcast %struct.tree_base* %base20 to i64*, !dbg !9466
  %bf.load21 = load i64, i64* %17, align 8, !dbg !9466
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !9466
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !9466
  %cmp24 = icmp eq i32 %bf.cast23, 16, !dbg !9468
  br i1 %cmp24, label %if.then26, label %if.end31, !dbg !9469

if.then26:                                        ; preds = %if.end
  %type27 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 3, !dbg !9470
  %18 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !9470
  %type28 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !9470
  %values29 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type28, i32 0, i32 1, !dbg !9470
  %19 = load %union.tree_node*, %union.tree_node** %values29, align 8, !dbg !9470
  %field30 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9471
  store %union.tree_node* %19, %union.tree_node** %field30, align 8, !dbg !9472
  br label %if.end31, !dbg !9473

if.end31:                                         ; preds = %if.then26, %if.end
  store i64 0, i64* %cnt, align 8, !dbg !9474
  br label %for.cond, !dbg !9476

for.cond:                                         ; preds = %cond.end151, %if.end31
  %20 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9477
  %constructor = bitcast %union.tree_node* %20 to %struct.tree_constructor*, !dbg !9477
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !9477
  %21 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !9477
  %tobool32 = icmp ne %struct.VEC_constructor_elt_gc* %21, null, !dbg !9477
  br i1 %tobool32, label %cond.true33, label %cond.false37, !dbg !9477

cond.true33:                                      ; preds = %for.cond
  %22 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9477
  %constructor34 = bitcast %union.tree_node* %22 to %struct.tree_constructor*, !dbg !9477
  %elts35 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor34, i32 0, i32 1, !dbg !9477
  %23 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts35, align 8, !dbg !9477
  %base36 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %23, i32 0, i32 0, !dbg !9477
  br label %cond.end38, !dbg !9477

cond.false37:                                     ; preds = %for.cond
  br label %cond.end38, !dbg !9477

cond.end38:                                       ; preds = %cond.false37, %cond.true33
  %cond39 = phi %struct.VEC_constructor_elt_base* [ %base36, %cond.true33 ], [ null, %cond.false37 ], !dbg !9477
  %24 = load i64, i64* %cnt, align 8, !dbg !9477
  %conv40 = trunc i64 %24 to i32, !dbg !9477
  %call = call i32 @VEC_constructor_elt_base_iterate(%struct.VEC_constructor_elt_base* %cond39, i32 %conv40, %struct.constructor_elt_d** %ce), !dbg !9477
  %tobool41 = icmp ne i32 %call, 0, !dbg !9479
  br i1 %tobool41, label %for.body, label %for.end, !dbg !9479

for.body:                                         ; preds = %cond.end38
  %25 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %ce, align 8, !dbg !9480
  %value = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %25, i32 0, i32 1, !dbg !9482
  %26 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9482
  %val = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 10, !dbg !9483
  store %union.tree_node* %26, %union.tree_node** %val, align 8, !dbg !9484
  %index = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 11, !dbg !9485
  store %union.tree_node* null, %union.tree_node** %index, align 8, !dbg !9486
  %type42 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 3, !dbg !9487
  %27 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !9487
  %base43 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !9487
  %28 = bitcast %struct.tree_base* %base43 to i64*, !dbg !9487
  %bf.load44 = load i64, i64* %28, align 8, !dbg !9487
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !9487
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !9487
  %cmp47 = icmp eq i32 %bf.cast46, 16, !dbg !9489
  br i1 %cmp47, label %land.lhs.true64, label %lor.lhs.false, !dbg !9490

lor.lhs.false:                                    ; preds = %for.body
  %type49 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 3, !dbg !9491
  %29 = load %union.tree_node*, %union.tree_node** %type49, align 8, !dbg !9491
  %base50 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !9491
  %30 = bitcast %struct.tree_base* %base50 to i64*, !dbg !9491
  %bf.load51 = load i64, i64* %30, align 8, !dbg !9491
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !9491
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !9491
  %cmp54 = icmp eq i32 %bf.cast53, 17, !dbg !9492
  br i1 %cmp54, label %land.lhs.true64, label %lor.lhs.false56, !dbg !9493

lor.lhs.false56:                                  ; preds = %lor.lhs.false
  %type57 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 3, !dbg !9494
  %31 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !9494
  %base58 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !9494
  %32 = bitcast %struct.tree_base* %base58 to i64*, !dbg !9494
  %bf.load59 = load i64, i64* %32, align 8, !dbg !9494
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !9494
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !9494
  %cmp62 = icmp eq i32 %bf.cast61, 18, !dbg !9495
  br i1 %cmp62, label %land.lhs.true64, label %if.else, !dbg !9496

land.lhs.true64:                                  ; preds = %lor.lhs.false56, %lor.lhs.false, %for.body
  %33 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %ce, align 8, !dbg !9497
  %index65 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %33, i32 0, i32 0, !dbg !9498
  %34 = load %union.tree_node*, %union.tree_node** %index65, align 8, !dbg !9498
  %cmp66 = icmp ne %union.tree_node* %34, null, !dbg !9499
  br i1 %cmp66, label %if.then68, label %if.else, !dbg !9500

if.then68:                                        ; preds = %land.lhs.true64
  %35 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %ce, align 8, !dbg !9501
  %index69 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %35, i32 0, i32 0, !dbg !9502
  %36 = load %union.tree_node*, %union.tree_node** %index69, align 8, !dbg !9502
  %field70 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9503
  store %union.tree_node* %36, %union.tree_node** %field70, align 8, !dbg !9504
  br label %if.end82, !dbg !9505

if.else:                                          ; preds = %land.lhs.true64, %lor.lhs.false56
  %type71 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 3, !dbg !9506
  %37 = load %union.tree_node*, %union.tree_node** %type71, align 8, !dbg !9506
  %base72 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !9506
  %38 = bitcast %struct.tree_base* %base72 to i64*, !dbg !9506
  %bf.load73 = load i64, i64* %38, align 8, !dbg !9506
  %bf.clear74 = and i64 %bf.load73, 65535, !dbg !9506
  %bf.cast75 = trunc i64 %bf.clear74 to i32, !dbg !9506
  %cmp76 = icmp eq i32 %bf.cast75, 15, !dbg !9508
  br i1 %cmp76, label %if.then78, label %if.end81, !dbg !9509

if.then78:                                        ; preds = %if.else
  %39 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %ce, align 8, !dbg !9510
  %index79 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %39, i32 0, i32 0, !dbg !9511
  %40 = load %union.tree_node*, %union.tree_node** %index79, align 8, !dbg !9511
  %index80 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 11, !dbg !9512
  store %union.tree_node* %40, %union.tree_node** %index80, align 8, !dbg !9513
  br label %if.end81, !dbg !9514

if.end81:                                         ; preds = %if.then78, %if.else
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then68
  %field83 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9515
  %41 = load %union.tree_node*, %union.tree_node** %field83, align 8, !dbg !9515
  %tobool84 = icmp ne %union.tree_node* %41, null, !dbg !9517
  br i1 %tobool84, label %land.lhs.true85, label %if.end98, !dbg !9518

land.lhs.true85:                                  ; preds = %if.end82
  %42 = load i32, i32* @flag_verbose_asm, align 4, !dbg !9519
  %tobool86 = icmp ne i32 %42, 0, !dbg !9519
  br i1 %tobool86, label %if.then87, label %if.end98, !dbg !9520

if.then87:                                        ; preds = %land.lhs.true85
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !9521
  %field88 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9522
  %44 = load %union.tree_node*, %union.tree_node** %field88, align 8, !dbg !9522
  %decl_minimal = bitcast %union.tree_node* %44 to %struct.tree_decl_minimal*, !dbg !9522
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !9522
  %45 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !9522
  %tobool89 = icmp ne %union.tree_node* %45, null, !dbg !9522
  br i1 %tobool89, label %cond.true90, label %cond.false94, !dbg !9522

cond.true90:                                      ; preds = %if.then87
  %field91 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9523
  %46 = load %union.tree_node*, %union.tree_node** %field91, align 8, !dbg !9523
  %decl_minimal92 = bitcast %union.tree_node* %46 to %struct.tree_decl_minimal*, !dbg !9523
  %name93 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal92, i32 0, i32 3, !dbg !9523
  %47 = load %union.tree_node*, %union.tree_node** %name93, align 8, !dbg !9523
  %identifier = bitcast %union.tree_node* %47 to %struct.tree_identifier*, !dbg !9523
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !9523
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !9523
  %48 = load i8*, i8** %str, align 8, !dbg !9523
  br label %cond.end95, !dbg !9522

cond.false94:                                     ; preds = %if.then87
  br label %cond.end95, !dbg !9522

cond.end95:                                       ; preds = %cond.false94, %cond.true90
  %cond96 = phi i8* [ %48, %cond.true90 ], [ getelementptr inbounds ([12 x i8], [12 x i8]* @.str.174, i64 0, i64 0), %cond.false94 ], !dbg !9522
  %call97 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.172, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.173, i64 0, i64 0), i8* %cond96), !dbg !9524
  br label %if.end98, !dbg !9524

if.end98:                                         ; preds = %cond.end95, %land.lhs.true85, %if.end82
  %val99 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 10, !dbg !9525
  %49 = load %union.tree_node*, %union.tree_node** %val99, align 8, !dbg !9525
  %cmp100 = icmp ne %union.tree_node* %49, null, !dbg !9527
  br i1 %cmp100, label %if.then102, label %if.end106, !dbg !9528

if.then102:                                       ; preds = %if.end98
  %val103 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 10, !dbg !9529
  %50 = load %union.tree_node*, %union.tree_node** %val103, align 8, !dbg !9529
  %call104 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %50), !dbg !9529
  %val105 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 10, !dbg !9529
  store %union.tree_node* %call104, %union.tree_node** %val105, align 8, !dbg !9529
  br label %if.end106, !dbg !9529

if.end106:                                        ; preds = %if.then102, %if.end98
  %51 = load %struct.oc_outer_state*, %struct.oc_outer_state** %outer.addr, align 8, !dbg !9530
  %tobool107 = icmp ne %struct.oc_outer_state* %51, null, !dbg !9530
  br i1 %tobool107, label %if.else121, label %land.lhs.true108, !dbg !9532

land.lhs.true108:                                 ; preds = %if.end106
  %index109 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 11, !dbg !9533
  %52 = load %union.tree_node*, %union.tree_node** %index109, align 8, !dbg !9533
  %cmp110 = icmp ne %union.tree_node* %52, null, !dbg !9534
  br i1 %cmp110, label %land.lhs.true112, label %if.else121, !dbg !9535

land.lhs.true112:                                 ; preds = %land.lhs.true108
  %index113 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 11, !dbg !9536
  %53 = load %union.tree_node*, %union.tree_node** %index113, align 8, !dbg !9536
  %base114 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !9536
  %54 = bitcast %struct.tree_base* %base114 to i64*, !dbg !9536
  %bf.load115 = load i64, i64* %54, align 8, !dbg !9536
  %bf.clear116 = and i64 %bf.load115, 65535, !dbg !9536
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !9536
  %cmp118 = icmp eq i32 %bf.cast117, 111, !dbg !9537
  br i1 %cmp118, label %if.then120, label %if.else121, !dbg !9538

if.then120:                                       ; preds = %land.lhs.true112
  call void @output_constructor_array_range(%struct.oc_local_state* %local), !dbg !9539
  br label %if.end144, !dbg !9539

if.else121:                                       ; preds = %land.lhs.true112, %land.lhs.true108, %if.end106
  %55 = load %struct.oc_outer_state*, %struct.oc_outer_state** %outer.addr, align 8, !dbg !9540
  %tobool122 = icmp ne %struct.oc_outer_state* %55, null, !dbg !9540
  br i1 %tobool122, label %if.else142, label %land.lhs.true123, !dbg !9542

land.lhs.true123:                                 ; preds = %if.else121
  %field124 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9543
  %56 = load %union.tree_node*, %union.tree_node** %field124, align 8, !dbg !9543
  %cmp125 = icmp eq %union.tree_node* %56, null, !dbg !9544
  br i1 %cmp125, label %if.then141, label %lor.lhs.false127, !dbg !9545

lor.lhs.false127:                                 ; preds = %land.lhs.true123
  %field128 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9546
  %57 = load %union.tree_node*, %union.tree_node** %field128, align 8, !dbg !9546
  %decl_common = bitcast %union.tree_node* %57 to %struct.tree_decl_common*, !dbg !9546
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !9546
  %58 = bitcast i40* %decl_flag_1 to i64*, !dbg !9546
  %bf.load129 = load i64, i64* %58, align 8, !dbg !9546
  %bf.lshr = lshr i64 %bf.load129, 25, !dbg !9546
  %bf.clear130 = and i64 %bf.lshr, 1, !dbg !9546
  %bf.cast131 = trunc i64 %bf.clear130 to i32, !dbg !9546
  %tobool132 = icmp ne i32 %bf.cast131, 0, !dbg !9546
  br i1 %tobool132, label %land.lhs.true133, label %if.then141, !dbg !9546

land.lhs.true133:                                 ; preds = %lor.lhs.false127
  %field134 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9546
  %59 = load %union.tree_node*, %union.tree_node** %field134, align 8, !dbg !9546
  %decl_common135 = bitcast %union.tree_node* %59 to %struct.tree_decl_common*, !dbg !9546
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common135, i32 0, i32 2, !dbg !9546
  %60 = bitcast i40* %mode to i64*, !dbg !9546
  %bf.load136 = load i64, i64* %60, align 8, !dbg !9546
  %bf.clear137 = and i64 %bf.load136, 255, !dbg !9546
  %bf.cast138 = trunc i64 %bf.clear137 to i32, !dbg !9546
  %cmp139 = icmp ne i32 %bf.cast138, 1, !dbg !9546
  br i1 %cmp139, label %if.else142, label %if.then141, !dbg !9547

if.then141:                                       ; preds = %land.lhs.true133, %lor.lhs.false127, %land.lhs.true123
  call void @output_constructor_regular_field(%struct.oc_local_state* %local), !dbg !9548
  br label %if.end143, !dbg !9548

if.else142:                                       ; preds = %land.lhs.true133, %if.else121
  %61 = load %struct.oc_outer_state*, %struct.oc_outer_state** %outer.addr, align 8, !dbg !9549
  call void @output_constructor_bitfield(%struct.oc_local_state* %local, %struct.oc_outer_state* %61), !dbg !9550
  br label %if.end143

if.end143:                                        ; preds = %if.else142, %if.then141
  br label %if.end144

if.end144:                                        ; preds = %if.end143, %if.then120
  br label %for.inc, !dbg !9551

for.inc:                                          ; preds = %if.end144
  %62 = load i64, i64* %cnt, align 8, !dbg !9552
  %inc = add i64 %62, 1, !dbg !9552
  store i64 %inc, i64* %cnt, align 8, !dbg !9552
  %field145 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9553
  %63 = load %union.tree_node*, %union.tree_node** %field145, align 8, !dbg !9553
  %tobool146 = icmp ne %union.tree_node* %63, null, !dbg !9554
  br i1 %tobool146, label %cond.true147, label %cond.false150, !dbg !9554

cond.true147:                                     ; preds = %for.inc
  %field148 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9555
  %64 = load %union.tree_node*, %union.tree_node** %field148, align 8, !dbg !9555
  %common149 = bitcast %union.tree_node* %64 to %struct.tree_common*, !dbg !9555
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common149, i32 0, i32 1, !dbg !9555
  %65 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !9555
  br label %cond.end151, !dbg !9554

cond.false150:                                    ; preds = %for.inc
  br label %cond.end151, !dbg !9554

cond.end151:                                      ; preds = %cond.false150, %cond.true147
  %cond152 = phi %union.tree_node* [ %65, %cond.true147 ], [ null, %cond.false150 ], !dbg !9554
  %field153 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 4, !dbg !9556
  store %union.tree_node* %cond152, %union.tree_node** %field153, align 8, !dbg !9557
  br label %for.cond, !dbg !9558, !llvm.loop !9559

for.end:                                          ; preds = %cond.end38
  %66 = load %struct.oc_outer_state*, %struct.oc_outer_state** %outer.addr, align 8, !dbg !9561
  %tobool154 = icmp ne %struct.oc_outer_state* %66, null, !dbg !9561
  br i1 %tobool154, label %if.then155, label %if.else158, !dbg !9563

if.then155:                                       ; preds = %for.end
  %byte156 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 8, !dbg !9564
  %67 = load i32, i32* %byte156, align 4, !dbg !9564
  %68 = load %struct.oc_outer_state*, %struct.oc_outer_state** %outer.addr, align 8, !dbg !9565
  %byte157 = getelementptr inbounds %struct.oc_outer_state, %struct.oc_outer_state* %68, i32 0, i32 1, !dbg !9566
  store i32 %67, i32* %byte157, align 4, !dbg !9567
  br label %if.end179, !dbg !9565

if.else158:                                       ; preds = %for.end
  %byte_buffer_in_use159 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 7, !dbg !9568
  %69 = load i8, i8* %byte_buffer_in_use159, align 8, !dbg !9568
  %tobool160 = icmp ne i8 %69, 0, !dbg !9571
  br i1 %tobool160, label %if.then161, label %if.end168, !dbg !9572

if.then161:                                       ; preds = %if.else158
  %byte162 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 8, !dbg !9573
  %70 = load i32, i32* %byte162, align 4, !dbg !9573
  %conv163 = sext i32 %70 to i64, !dbg !9573
  %call164 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv163), !dbg !9573
  %call165 = call zeroext i8 @assemble_integer(%struct.rtx_def* %call164, i32 1, i32 8, i32 1), !dbg !9575
  %total_bytes166 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 6, !dbg !9576
  %71 = load i64, i64* %total_bytes166, align 8, !dbg !9577
  %inc167 = add nsw i64 %71, 1, !dbg !9577
  store i64 %inc167, i64* %total_bytes166, align 8, !dbg !9577
  br label %if.end168, !dbg !9578

if.end168:                                        ; preds = %if.then161, %if.else158
  %total_bytes169 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 6, !dbg !9579
  %72 = load i64, i64* %total_bytes169, align 8, !dbg !9579
  %size170 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 1, !dbg !9581
  %73 = load i64, i64* %size170, align 8, !dbg !9581
  %cmp171 = icmp ult i64 %72, %73, !dbg !9582
  br i1 %cmp171, label %if.then173, label %if.end178, !dbg !9583

if.then173:                                       ; preds = %if.end168
  %size174 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 1, !dbg !9584
  %74 = load i64, i64* %size174, align 8, !dbg !9584
  %total_bytes175 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 6, !dbg !9586
  %75 = load i64, i64* %total_bytes175, align 8, !dbg !9586
  %sub = sub i64 %74, %75, !dbg !9587
  call void @assemble_zeros(i64 %sub), !dbg !9588
  %size176 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 1, !dbg !9589
  %76 = load i64, i64* %size176, align 8, !dbg !9589
  %total_bytes177 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 6, !dbg !9590
  store i64 %76, i64* %total_bytes177, align 8, !dbg !9591
  br label %if.end178, !dbg !9592

if.end178:                                        ; preds = %if.then173, %if.end168
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %if.then155
  %total_bytes180 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %local, i32 0, i32 6, !dbg !9593
  %77 = load i64, i64* %total_bytes180, align 8, !dbg !9593
  ret i64 %77, !dbg !9594
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @merge_weak(%union.tree_node* %newdecl, %union.tree_node* %olddecl) #0 !dbg !9595 {
entry:
  %newdecl.addr = alloca %union.tree_node*, align 8
  %olddecl.addr = alloca %union.tree_node*, align 8
  %pwd = alloca %union.tree_node**, align 8
  %wd = alloca %union.tree_node*, align 8
  store %union.tree_node* %newdecl, %union.tree_node** %newdecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %newdecl.addr, metadata !9596, metadata !DIExpression()), !dbg !9597
  store %union.tree_node* %olddecl, %union.tree_node** %olddecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %olddecl.addr, metadata !9598, metadata !DIExpression()), !dbg !9599
  %0 = load %union.tree_node*, %union.tree_node** %newdecl.addr, align 8, !dbg !9600
  %decl_with_vis = bitcast %union.tree_node* %0 to %struct.tree_decl_with_vis*, !dbg !9600
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !9600
  %1 = bitcast i24* %weak_flag to i32*, !dbg !9600
  %bf.load = load i32, i32* %1, align 8, !dbg !9600
  %bf.lshr = lshr i32 %bf.load, 7, !dbg !9600
  %bf.clear = and i32 %bf.lshr, 1, !dbg !9600
  %2 = load %union.tree_node*, %union.tree_node** %olddecl.addr, align 8, !dbg !9602
  %decl_with_vis1 = bitcast %union.tree_node* %2 to %struct.tree_decl_with_vis*, !dbg !9602
  %weak_flag2 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis1, i32 0, i32 4, !dbg !9602
  %3 = bitcast i24* %weak_flag2 to i32*, !dbg !9602
  %bf.load3 = load i32, i32* %3, align 8, !dbg !9602
  %bf.lshr4 = lshr i32 %bf.load3, 7, !dbg !9602
  %bf.clear5 = and i32 %bf.lshr4, 1, !dbg !9602
  %cmp = icmp eq i32 %bf.clear, %bf.clear5, !dbg !9603
  br i1 %cmp, label %if.then, label %if.end18, !dbg !9604

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %newdecl.addr, align 8, !dbg !9605
  %decl_with_vis6 = bitcast %union.tree_node* %4 to %struct.tree_decl_with_vis*, !dbg !9605
  %weak_flag7 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis6, i32 0, i32 4, !dbg !9605
  %5 = bitcast i24* %weak_flag7 to i32*, !dbg !9605
  %bf.load8 = load i32, i32* %5, align 8, !dbg !9605
  %bf.lshr9 = lshr i32 %bf.load8, 7, !dbg !9605
  %bf.clear10 = and i32 %bf.lshr9, 1, !dbg !9605
  %tobool = icmp ne i32 %bf.clear10, 0, !dbg !9605
  br i1 %tobool, label %if.then11, label %if.end17, !dbg !9608

if.then11:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node*** %pwd, metadata !9609, metadata !DIExpression()), !dbg !9611
  store %union.tree_node** @weak_decls, %union.tree_node*** %pwd, align 8, !dbg !9612
  br label %for.cond, !dbg !9614

for.cond:                                         ; preds = %for.inc, %if.then11
  %6 = load %union.tree_node**, %union.tree_node*** %pwd, align 8, !dbg !9615
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !9617
  %tobool12 = icmp ne %union.tree_node* %7, null, !dbg !9618
  br i1 %tobool12, label %for.body, label %for.end, !dbg !9618

for.body:                                         ; preds = %for.cond
  %8 = load %union.tree_node**, %union.tree_node*** %pwd, align 8, !dbg !9619
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !9619
  %list = bitcast %union.tree_node* %9 to %struct.tree_list*, !dbg !9619
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !9619
  %10 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !9619
  %11 = load %union.tree_node*, %union.tree_node** %newdecl.addr, align 8, !dbg !9621
  %cmp13 = icmp eq %union.tree_node* %10, %11, !dbg !9622
  br i1 %cmp13, label %if.then14, label %if.end, !dbg !9623

if.then14:                                        ; preds = %for.body
  %12 = load %union.tree_node**, %union.tree_node*** %pwd, align 8, !dbg !9624
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !9624
  %common = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !9624
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !9624
  %14 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !9624
  %15 = load %union.tree_node**, %union.tree_node*** %pwd, align 8, !dbg !9626
  store %union.tree_node* %14, %union.tree_node** %15, align 8, !dbg !9627
  br label %for.end, !dbg !9628

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9621

for.inc:                                          ; preds = %if.end
  %16 = load %union.tree_node**, %union.tree_node*** %pwd, align 8, !dbg !9629
  %17 = load %union.tree_node*, %union.tree_node** %16, align 8, !dbg !9629
  %common15 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !9629
  %chain16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 1, !dbg !9629
  store %union.tree_node** %chain16, %union.tree_node*** %pwd, align 8, !dbg !9630
  br label %for.cond, !dbg !9631, !llvm.loop !9632

for.end:                                          ; preds = %if.then14, %for.cond
  br label %if.end17, !dbg !9634

if.end17:                                         ; preds = %for.end, %if.then
  br label %if.end62, !dbg !9635

if.end18:                                         ; preds = %entry
  %18 = load %union.tree_node*, %union.tree_node** %newdecl.addr, align 8, !dbg !9636
  %decl_with_vis19 = bitcast %union.tree_node* %18 to %struct.tree_decl_with_vis*, !dbg !9636
  %weak_flag20 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis19, i32 0, i32 4, !dbg !9636
  %19 = bitcast i24* %weak_flag20 to i32*, !dbg !9636
  %bf.load21 = load i32, i32* %19, align 8, !dbg !9636
  %bf.lshr22 = lshr i32 %bf.load21, 7, !dbg !9636
  %bf.clear23 = and i32 %bf.lshr22, 1, !dbg !9636
  %tobool24 = icmp ne i32 %bf.clear23, 0, !dbg !9636
  br i1 %tobool24, label %if.then25, label %if.else61, !dbg !9638

if.then25:                                        ; preds = %if.end18
  call void @llvm.dbg.declare(metadata %union.tree_node** %wd, metadata !9639, metadata !DIExpression()), !dbg !9641
  %20 = load %union.tree_node*, %union.tree_node** %olddecl.addr, align 8, !dbg !9642
  %base = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !9642
  %21 = bitcast %struct.tree_base* %base to i64*, !dbg !9642
  %bf.load26 = load i64, i64* %21, align 8, !dbg !9642
  %bf.lshr27 = lshr i64 %bf.load26, 22, !dbg !9642
  %bf.clear28 = and i64 %bf.lshr27, 1, !dbg !9642
  %bf.cast = trunc i64 %bf.clear28 to i32, !dbg !9642
  %tobool29 = icmp ne i32 %bf.cast, 0, !dbg !9642
  br i1 %tobool29, label %if.then30, label %if.else, !dbg !9644

if.then30:                                        ; preds = %if.then25
  %22 = load %union.tree_node*, %union.tree_node** %newdecl.addr, align 8, !dbg !9645
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.89, i64 0, i64 0), %union.tree_node* %22), !dbg !9646
  br label %if.end46, !dbg !9646

if.else:                                          ; preds = %if.then25
  %23 = load %union.tree_node*, %union.tree_node** %olddecl.addr, align 8, !dbg !9647
  %base31 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !9647
  %24 = bitcast %struct.tree_base* %base31 to i64*, !dbg !9647
  %bf.load32 = load i64, i64* %24, align 8, !dbg !9647
  %bf.lshr33 = lshr i64 %bf.load32, 24, !dbg !9647
  %bf.clear34 = and i64 %bf.lshr33, 1, !dbg !9647
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !9647
  %tobool36 = icmp ne i32 %bf.cast35, 0, !dbg !9647
  br i1 %tobool36, label %land.lhs.true, label %if.end45, !dbg !9649

land.lhs.true:                                    ; preds = %if.else
  %25 = load %union.tree_node*, %union.tree_node** %olddecl.addr, align 8, !dbg !9650
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %25), !dbg !9650
  %base37 = bitcast %union.tree_node* %call to %struct.tree_base*, !dbg !9650
  %26 = bitcast %struct.tree_base* %base37 to i64*, !dbg !9650
  %bf.load38 = load i64, i64* %26, align 8, !dbg !9650
  %bf.lshr39 = lshr i64 %bf.load38, 26, !dbg !9650
  %bf.clear40 = and i64 %bf.lshr39, 1, !dbg !9650
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !9650
  %tobool42 = icmp ne i32 %bf.cast41, 0, !dbg !9650
  br i1 %tobool42, label %if.then43, label %if.end45, !dbg !9651

if.then43:                                        ; preds = %land.lhs.true
  %27 = load %union.tree_node*, %union.tree_node** %newdecl.addr, align 8, !dbg !9652
  %call44 = call zeroext i8 (i32, i8*, ...) @warning(i32 0, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.90, i64 0, i64 0), %union.tree_node* %27), !dbg !9653
  br label %if.end45, !dbg !9653

if.end45:                                         ; preds = %if.then43, %land.lhs.true, %if.else
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then30
  %28 = load %union.tree_node*, %union.tree_node** @weak_decls, align 8, !dbg !9654
  store %union.tree_node* %28, %union.tree_node** %wd, align 8, !dbg !9658
  br label %for.cond47, !dbg !9659

for.cond47:                                       ; preds = %for.inc57, %if.end46
  %29 = load %union.tree_node*, %union.tree_node** %wd, align 8, !dbg !9660
  %tobool48 = icmp ne %union.tree_node* %29, null, !dbg !9662
  br i1 %tobool48, label %for.body49, label %for.end60, !dbg !9662

for.body49:                                       ; preds = %for.cond47
  %30 = load %union.tree_node*, %union.tree_node** %wd, align 8, !dbg !9663
  %list50 = bitcast %union.tree_node* %30 to %struct.tree_list*, !dbg !9663
  %value51 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list50, i32 0, i32 2, !dbg !9663
  %31 = load %union.tree_node*, %union.tree_node** %value51, align 8, !dbg !9663
  %32 = load %union.tree_node*, %union.tree_node** %newdecl.addr, align 8, !dbg !9665
  %cmp52 = icmp eq %union.tree_node* %31, %32, !dbg !9666
  br i1 %cmp52, label %if.then53, label %if.end56, !dbg !9667

if.then53:                                        ; preds = %for.body49
  %33 = load %union.tree_node*, %union.tree_node** %olddecl.addr, align 8, !dbg !9668
  %34 = load %union.tree_node*, %union.tree_node** %wd, align 8, !dbg !9670
  %list54 = bitcast %union.tree_node* %34 to %struct.tree_list*, !dbg !9670
  %value55 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list54, i32 0, i32 2, !dbg !9670
  store %union.tree_node* %33, %union.tree_node** %value55, align 8, !dbg !9671
  br label %for.end60, !dbg !9672

if.end56:                                         ; preds = %for.body49
  br label %for.inc57, !dbg !9665

for.inc57:                                        ; preds = %if.end56
  %35 = load %union.tree_node*, %union.tree_node** %wd, align 8, !dbg !9673
  %common58 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !9673
  %chain59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 1, !dbg !9673
  %36 = load %union.tree_node*, %union.tree_node** %chain59, align 8, !dbg !9673
  store %union.tree_node* %36, %union.tree_node** %wd, align 8, !dbg !9674
  br label %for.cond47, !dbg !9675, !llvm.loop !9676

for.end60:                                        ; preds = %if.then53, %for.cond47
  %37 = load %union.tree_node*, %union.tree_node** %olddecl.addr, align 8, !dbg !9678
  call void @mark_weak(%union.tree_node* %37), !dbg !9679
  br label %if.end62, !dbg !9680

if.else61:                                        ; preds = %if.end18
  %38 = load %union.tree_node*, %union.tree_node** %newdecl.addr, align 8, !dbg !9681
  call void @mark_weak(%union.tree_node* %38), !dbg !9682
  br label %if.end62

if.end62:                                         ; preds = %if.end17, %if.else61, %for.end60
  ret void, !dbg !9683
}

; Function Attrs: noinline nounwind uwtable
define internal void @mark_weak(%union.tree_node* %decl) #0 !dbg !9684 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !9685, metadata !DIExpression()), !dbg !9686
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9687
  %decl_with_vis = bitcast %union.tree_node* %0 to %struct.tree_decl_with_vis*, !dbg !9687
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !9687
  %1 = bitcast i24* %weak_flag to i32*, !dbg !9687
  %bf.load = load i32, i32* %1, align 8, !dbg !9688
  %bf.clear = and i32 %bf.load, -129, !dbg !9688
  %bf.set = or i32 %bf.clear, 128, !dbg !9688
  store i32 %bf.set, i32* %1, align 8, !dbg !9688
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9689
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9689
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9689
  %bf.load1 = load i64, i64* %3, align 8, !dbg !9689
  %bf.clear2 = and i64 %bf.load1, 65535, !dbg !9689
  %bf.cast = trunc i64 %bf.clear2 to i32, !dbg !9689
  %idxprom = zext i32 %bf.cast to i64, !dbg !9689
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !9689
  %arrayidx3 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !9689
  %4 = load i8, i8* %arrayidx3, align 1, !dbg !9689
  %conv = zext i8 %4 to i32, !dbg !9689
  %tobool = icmp ne i32 %conv, 0, !dbg !9689
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9689

land.lhs.true:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9689
  %decl_with_rtl = bitcast %union.tree_node* %5 to %struct.tree_decl_with_rtl*, !dbg !9689
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !9689
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !9689
  %cmp = icmp ne %struct.rtx_def* %6, null, !dbg !9689
  br i1 %cmp, label %land.lhs.true5, label %if.end, !dbg !9691

land.lhs.true5:                                   ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9692
  %decl_with_rtl6 = bitcast %union.tree_node* %7 to %struct.tree_decl_with_rtl*, !dbg !9692
  %rtl7 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl6, i32 0, i32 1, !dbg !9692
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rtl7, align 8, !dbg !9692
  %tobool8 = icmp ne %struct.rtx_def* %8, null, !dbg !9692
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !9692

cond.true:                                        ; preds = %land.lhs.true5
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9692
  %decl_with_rtl9 = bitcast %union.tree_node* %9 to %struct.tree_decl_with_rtl*, !dbg !9692
  %rtl10 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl9, i32 0, i32 1, !dbg !9692
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtl10, align 8, !dbg !9692
  br label %cond.end, !dbg !9692

cond.false:                                       ; preds = %land.lhs.true5
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9692
  call void @make_decl_rtl(%union.tree_node* %11), !dbg !9692
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9692
  %decl_with_rtl11 = bitcast %union.tree_node* %12 to %struct.tree_decl_with_rtl*, !dbg !9692
  %rtl12 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl11, i32 0, i32 1, !dbg !9692
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl12, align 8, !dbg !9692
  br label %cond.end, !dbg !9692

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %10, %cond.true ], [ %13, %cond.false ], !dbg !9692
  %14 = bitcast %struct.rtx_def* %cond to i32*, !dbg !9692
  %bf.load13 = load i32, i32* %14, align 8, !dbg !9692
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !9692
  %cmp15 = icmp eq i32 %bf.clear14, 43, !dbg !9692
  br i1 %cmp15, label %land.lhs.true17, label %if.end, !dbg !9693

land.lhs.true17:                                  ; preds = %cond.end
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9694
  %decl_with_rtl18 = bitcast %union.tree_node* %15 to %struct.tree_decl_with_rtl*, !dbg !9694
  %rtl19 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl18, i32 0, i32 1, !dbg !9694
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl19, align 8, !dbg !9694
  %tobool20 = icmp ne %struct.rtx_def* %16, null, !dbg !9694
  br i1 %tobool20, label %cond.true21, label %cond.false24, !dbg !9694

cond.true21:                                      ; preds = %land.lhs.true17
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9694
  %decl_with_rtl22 = bitcast %union.tree_node* %17 to %struct.tree_decl_with_rtl*, !dbg !9694
  %rtl23 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl22, i32 0, i32 1, !dbg !9694
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl23, align 8, !dbg !9694
  br label %cond.end27, !dbg !9694

cond.false24:                                     ; preds = %land.lhs.true17
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9694
  call void @make_decl_rtl(%union.tree_node* %19), !dbg !9694
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9694
  %decl_with_rtl25 = bitcast %union.tree_node* %20 to %struct.tree_decl_with_rtl*, !dbg !9694
  %rtl26 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl25, i32 0, i32 1, !dbg !9694
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rtl26, align 8, !dbg !9694
  br label %cond.end27, !dbg !9694

cond.end27:                                       ; preds = %cond.false24, %cond.true21
  %cond28 = phi %struct.rtx_def* [ %18, %cond.true21 ], [ %21, %cond.false24 ], !dbg !9694
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond28, i32 0, i32 1, !dbg !9694
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9694
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9694
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !9694
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9694
  %tobool30 = icmp ne %struct.rtx_def* %22, null, !dbg !9694
  br i1 %tobool30, label %land.lhs.true31, label %if.end, !dbg !9695

land.lhs.true31:                                  ; preds = %cond.end27
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9696
  %decl_with_rtl32 = bitcast %union.tree_node* %23 to %struct.tree_decl_with_rtl*, !dbg !9696
  %rtl33 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl32, i32 0, i32 1, !dbg !9696
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl33, align 8, !dbg !9696
  %tobool34 = icmp ne %struct.rtx_def* %24, null, !dbg !9696
  br i1 %tobool34, label %cond.true35, label %cond.false38, !dbg !9696

cond.true35:                                      ; preds = %land.lhs.true31
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9696
  %decl_with_rtl36 = bitcast %union.tree_node* %25 to %struct.tree_decl_with_rtl*, !dbg !9696
  %rtl37 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl36, i32 0, i32 1, !dbg !9696
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtl37, align 8, !dbg !9696
  br label %cond.end41, !dbg !9696

cond.false38:                                     ; preds = %land.lhs.true31
  %27 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9696
  call void @make_decl_rtl(%union.tree_node* %27), !dbg !9696
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9696
  %decl_with_rtl39 = bitcast %union.tree_node* %28 to %struct.tree_decl_with_rtl*, !dbg !9696
  %rtl40 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl39, i32 0, i32 1, !dbg !9696
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtl40, align 8, !dbg !9696
  br label %cond.end41, !dbg !9696

cond.end41:                                       ; preds = %cond.false38, %cond.true35
  %cond42 = phi %struct.rtx_def* [ %26, %cond.true35 ], [ %29, %cond.false38 ], !dbg !9696
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond42, i32 0, i32 1, !dbg !9696
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !9696
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 0, !dbg !9696
  %rt_rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**, !dbg !9696
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx46, align 8, !dbg !9696
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !9696
  %bf.load47 = load i32, i32* %31, align 8, !dbg !9696
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !9696
  %cmp49 = icmp eq i32 %bf.clear48, 45, !dbg !9697
  br i1 %cmp49, label %if.then, label %if.end, !dbg !9698

if.then:                                          ; preds = %cond.end41
  %32 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9699
  %decl_with_rtl51 = bitcast %union.tree_node* %32 to %struct.tree_decl_with_rtl*, !dbg !9699
  %rtl52 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl51, i32 0, i32 1, !dbg !9699
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtl52, align 8, !dbg !9699
  %tobool53 = icmp ne %struct.rtx_def* %33, null, !dbg !9699
  br i1 %tobool53, label %cond.true54, label %cond.false57, !dbg !9699

cond.true54:                                      ; preds = %if.then
  %34 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9699
  %decl_with_rtl55 = bitcast %union.tree_node* %34 to %struct.tree_decl_with_rtl*, !dbg !9699
  %rtl56 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl55, i32 0, i32 1, !dbg !9699
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtl56, align 8, !dbg !9699
  br label %cond.end60, !dbg !9699

cond.false57:                                     ; preds = %if.then
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9699
  call void @make_decl_rtl(%union.tree_node* %36), !dbg !9699
  %37 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9699
  %decl_with_rtl58 = bitcast %union.tree_node* %37 to %struct.tree_decl_with_rtl*, !dbg !9699
  %rtl59 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl58, i32 0, i32 1, !dbg !9699
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtl59, align 8, !dbg !9699
  br label %cond.end60, !dbg !9699

cond.end60:                                       ; preds = %cond.false57, %cond.true54
  %cond61 = phi %struct.rtx_def* [ %35, %cond.true54 ], [ %38, %cond.false57 ], !dbg !9699
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond61, i32 0, i32 1, !dbg !9699
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !9699
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 0, !dbg !9699
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !9699
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !9699
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !9699
  %bf.load66 = load i32, i32* %40, align 8, !dbg !9700
  %bf.clear67 = and i32 %bf.load66, 2147483647, !dbg !9700
  %bf.set68 = or i32 %bf.clear67, -2147483648, !dbg !9700
  store i32 %bf.set68, i32* %40, align 8, !dbg !9700
  br label %if.end, !dbg !9699

if.end:                                           ; preds = %cond.end60, %cond.end41, %cond.end27, %cond.end, %land.lhs.true, %entry
  ret void, !dbg !9701
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @declare_weak(%union.tree_node* %decl) #0 !dbg !9702 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !9703, metadata !DIExpression()), !dbg !9704
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9705
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9705
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9705
  %bf.load = load i64, i64* %1, align 8, !dbg !9705
  %bf.lshr = lshr i64 %bf.load, 27, !dbg !9705
  %bf.clear = and i64 %bf.lshr, 1, !dbg !9705
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9705
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !9705
  br i1 %tobool, label %if.else, label %if.then, !dbg !9707

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9708
  call void (i8*, ...) @error(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.91, i64 0, i64 0), %union.tree_node* %2), !dbg !9709
  br label %if.end13, !dbg !9709

if.else:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9710
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !9710
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9710
  %bf.load2 = load i64, i64* %4, align 8, !dbg !9710
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !9710
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9710
  %cmp = icmp eq i32 %bf.cast4, 29, !dbg !9712
  br i1 %cmp, label %land.lhs.true, label %if.else12, !dbg !9713

land.lhs.true:                                    ; preds = %if.else
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9714
  %base5 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !9714
  %6 = bitcast %struct.tree_base* %base5 to i64*, !dbg !9714
  %bf.load6 = load i64, i64* %6, align 8, !dbg !9714
  %bf.lshr7 = lshr i64 %bf.load6, 22, !dbg !9714
  %bf.clear8 = and i64 %bf.lshr7, 1, !dbg !9714
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !9714
  %tobool10 = icmp ne i32 %bf.cast9, 0, !dbg !9714
  br i1 %tobool10, label %if.then11, label %if.else12, !dbg !9715

if.then11:                                        ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9716
  call void (i8*, ...) @error(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.89, i64 0, i64 0), %union.tree_node* %7), !dbg !9717
  br label %if.end, !dbg !9717

if.else12:                                        ; preds = %land.lhs.true, %if.else
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then11
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9718
  call void @mark_weak(%union.tree_node* %8), !dbg !9719
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9720
  %decl_common = bitcast %union.tree_node* %9 to %struct.tree_decl_common*, !dbg !9720
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !9720
  %10 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !9720
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77, i64 0, i64 0), %union.tree_node* %10), !dbg !9722
  %tobool14 = icmp ne %union.tree_node* %call, null, !dbg !9722
  br i1 %tobool14, label %if.end22, label %if.then15, !dbg !9723

if.then15:                                        ; preds = %if.end13
  %call16 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.77, i64 0, i64 0)), !dbg !9724
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9724
  %decl_common17 = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !9724
  %attributes18 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common17, i32 0, i32 6, !dbg !9724
  %12 = load %union.tree_node*, %union.tree_node** %attributes18, align 8, !dbg !9724
  %call19 = call %union.tree_node* @tree_cons_stat(%union.tree_node* %call16, %union.tree_node* null, %union.tree_node* %12), !dbg !9724
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9725
  %decl_common20 = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !9725
  %attributes21 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common20, i32 0, i32 6, !dbg !9725
  store %union.tree_node* %call19, %union.tree_node** %attributes21, align 8, !dbg !9726
  br label %if.end22, !dbg !9725

if.end22:                                         ; preds = %if.then15, %if.end13
  ret void, !dbg !9727
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @weak_finish() #0 !dbg !9728 {
entry:
  %t = alloca %union.tree_node*, align 8
  %alias_decl = alloca %union.tree_node*, align 8
  %target = alloca %union.tree_node*, align 8
  %p = alloca %union.tree_node**, align 8
  %t2 = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !9729, metadata !DIExpression()), !dbg !9730
  %0 = load %union.tree_node*, %union.tree_node** @weakref_targets, align 8, !dbg !9731
  store %union.tree_node* %0, %union.tree_node** %t, align 8, !dbg !9733
  br label %for.cond, !dbg !9734

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9735
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !9737
  br i1 %tobool, label %for.body, label %for.end36, !dbg !9737

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %alias_decl, metadata !9738, metadata !DIExpression()), !dbg !9740
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9741
  %list = bitcast %union.tree_node* %2 to %struct.tree_list*, !dbg !9741
  %purpose = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 1, !dbg !9741
  %3 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !9741
  store %union.tree_node* %3, %union.tree_node** %alias_decl, align 8, !dbg !9740
  call void @llvm.dbg.declare(metadata %union.tree_node** %target, metadata !9742, metadata !DIExpression()), !dbg !9743
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9744
  %list1 = bitcast %union.tree_node* %4 to %struct.tree_list*, !dbg !9744
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list1, i32 0, i32 2, !dbg !9744
  %call = call %union.tree_node* @ultimate_transparent_alias_target(%union.tree_node** %value), !dbg !9745
  store %union.tree_node* %call, %union.tree_node** %target, align 8, !dbg !9743
  %5 = load %union.tree_node*, %union.tree_node** %alias_decl, align 8, !dbg !9746
  %call2 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %5), !dbg !9746
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !9746
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !9746
  %bf.load = load i64, i64* %6, align 8, !dbg !9746
  %bf.lshr = lshr i64 %bf.load, 26, !dbg !9746
  %bf.clear = and i64 %bf.lshr, 1, !dbg !9746
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9746
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !9746
  br i1 %tobool3, label %if.end, label %if.then, !dbg !9748

if.then:                                          ; preds = %for.body
  store %union.tree_node* null, %union.tree_node** %target, align 8, !dbg !9749
  br label %if.end, !dbg !9750

if.end:                                           ; preds = %if.then, %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node*** %p, metadata !9751, metadata !DIExpression()), !dbg !9753
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2, metadata !9754, metadata !DIExpression()), !dbg !9755
  store %union.tree_node** @weak_decls, %union.tree_node*** %p, align 8, !dbg !9756
  br label %for.cond4, !dbg !9758

for.cond4:                                        ; preds = %if.end16, %if.end
  %7 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !9759
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !9761
  store %union.tree_node* %8, %union.tree_node** %t2, align 8, !dbg !9762
  %tobool5 = icmp ne %union.tree_node* %8, null, !dbg !9763
  br i1 %tobool5, label %for.body6, label %for.end, !dbg !9763

for.body6:                                        ; preds = %for.cond4
  %9 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !9764
  %list7 = bitcast %union.tree_node* %9 to %struct.tree_list*, !dbg !9764
  %value8 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list7, i32 0, i32 2, !dbg !9764
  %10 = load %union.tree_node*, %union.tree_node** %value8, align 8, !dbg !9764
  %11 = load %union.tree_node*, %union.tree_node** %alias_decl, align 8, !dbg !9767
  %cmp = icmp eq %union.tree_node* %10, %11, !dbg !9768
  br i1 %cmp, label %if.then13, label %lor.lhs.false, !dbg !9769

lor.lhs.false:                                    ; preds = %for.body6
  %12 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !9770
  %13 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !9771
  %list9 = bitcast %union.tree_node* %13 to %struct.tree_list*, !dbg !9771
  %value10 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list9, i32 0, i32 2, !dbg !9771
  %14 = load %union.tree_node*, %union.tree_node** %value10, align 8, !dbg !9771
  %call11 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %14), !dbg !9771
  %cmp12 = icmp eq %union.tree_node* %12, %call11, !dbg !9772
  br i1 %cmp12, label %if.then13, label %if.else, !dbg !9773

if.then13:                                        ; preds = %lor.lhs.false, %for.body6
  %15 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !9774
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !9774
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !9774
  %16 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !9774
  %17 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !9775
  store %union.tree_node* %16, %union.tree_node** %17, align 8, !dbg !9776
  br label %if.end16, !dbg !9777

if.else:                                          ; preds = %lor.lhs.false
  %18 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !9778
  %common14 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !9778
  %chain15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 1, !dbg !9778
  store %union.tree_node** %chain15, %union.tree_node*** %p, align 8, !dbg !9779
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then13
  br label %for.cond4, !dbg !9780, !llvm.loop !9781

for.end:                                          ; preds = %for.cond4
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9783
  %common17 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !9783
  %chain18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 1, !dbg !9783
  store %union.tree_node** %chain18, %union.tree_node*** %p, align 8, !dbg !9785
  br label %for.cond19, !dbg !9786

for.cond19:                                       ; preds = %if.end32, %for.end
  %20 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !9787
  %21 = load %union.tree_node*, %union.tree_node** %20, align 8, !dbg !9789
  store %union.tree_node* %21, %union.tree_node** %t2, align 8, !dbg !9790
  %tobool20 = icmp ne %union.tree_node* %21, null, !dbg !9791
  br i1 %tobool20, label %for.body21, label %for.end33, !dbg !9791

for.body21:                                       ; preds = %for.cond19
  %22 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !9792
  %23 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !9795
  %list22 = bitcast %union.tree_node* %23 to %struct.tree_list*, !dbg !9795
  %value23 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list22, i32 0, i32 2, !dbg !9795
  %call24 = call %union.tree_node* @ultimate_transparent_alias_target(%union.tree_node** %value23), !dbg !9796
  %cmp25 = icmp eq %union.tree_node* %22, %call24, !dbg !9797
  br i1 %cmp25, label %if.then26, label %if.else29, !dbg !9798

if.then26:                                        ; preds = %for.body21
  %24 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !9799
  %common27 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !9799
  %chain28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 1, !dbg !9799
  %25 = load %union.tree_node*, %union.tree_node** %chain28, align 8, !dbg !9799
  %26 = load %union.tree_node**, %union.tree_node*** %p, align 8, !dbg !9800
  store %union.tree_node* %25, %union.tree_node** %26, align 8, !dbg !9801
  br label %if.end32, !dbg !9802

if.else29:                                        ; preds = %for.body21
  %27 = load %union.tree_node*, %union.tree_node** %t2, align 8, !dbg !9803
  %common30 = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !9803
  %chain31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 1, !dbg !9803
  store %union.tree_node** %chain31, %union.tree_node*** %p, align 8, !dbg !9804
  br label %if.end32

if.end32:                                         ; preds = %if.else29, %if.then26
  br label %for.cond19, !dbg !9805, !llvm.loop !9806

for.end33:                                        ; preds = %for.cond19
  br label %for.inc, !dbg !9808

for.inc:                                          ; preds = %for.end33
  %28 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9809
  %common34 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !9809
  %chain35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 1, !dbg !9809
  %29 = load %union.tree_node*, %union.tree_node** %chain35, align 8, !dbg !9809
  store %union.tree_node* %29, %union.tree_node** %t, align 8, !dbg !9810
  br label %for.cond, !dbg !9811, !llvm.loop !9812

for.end36:                                        ; preds = %for.cond
  %30 = load %union.tree_node*, %union.tree_node** @weak_decls, align 8, !dbg !9814
  store %union.tree_node* %30, %union.tree_node** %t, align 8, !dbg !9816
  br label %for.cond37, !dbg !9817

for.cond37:                                       ; preds = %for.inc42, %for.end36
  %31 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9818
  %tobool38 = icmp ne %union.tree_node* %31, null, !dbg !9820
  br i1 %tobool38, label %for.body39, label %for.end45, !dbg !9820

for.body39:                                       ; preds = %for.cond37
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !9821, metadata !DIExpression()), !dbg !9823
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9824
  %list40 = bitcast %union.tree_node* %32 to %struct.tree_list*, !dbg !9824
  %value41 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list40, i32 0, i32 2, !dbg !9824
  %33 = load %union.tree_node*, %union.tree_node** %value41, align 8, !dbg !9824
  store %union.tree_node* %33, %union.tree_node** %decl, align 8, !dbg !9823
  %34 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9825
  call void @weak_finish_1(%union.tree_node* %34), !dbg !9826
  br label %for.inc42, !dbg !9827

for.inc42:                                        ; preds = %for.body39
  %35 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !9828
  %common43 = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !9828
  %chain44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 1, !dbg !9828
  %36 = load %union.tree_node*, %union.tree_node** %chain44, align 8, !dbg !9828
  store %union.tree_node* %36, %union.tree_node** %t, align 8, !dbg !9829
  br label %for.cond37, !dbg !9830, !llvm.loop !9831

for.end45:                                        ; preds = %for.cond37
  ret void, !dbg !9833
}

; Function Attrs: noinline nounwind uwtable
define internal void @weak_finish_1(%union.tree_node* %decl) #0 !dbg !9834 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !9835, metadata !DIExpression()), !dbg !9836
  call void @llvm.dbg.declare(metadata i8** %name, metadata !9837, metadata !DIExpression()), !dbg !9838
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9839
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %0), !dbg !9839
  %identifier = bitcast %union.tree_node* %call to %struct.tree_identifier*, !dbg !9839
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !9839
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !9839
  %1 = load i8*, i8** %str, align 8, !dbg !9839
  store i8* %1, i8** %name, align 8, !dbg !9838
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9840
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9840
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9840
  %bf.load = load i64, i64* %3, align 8, !dbg !9840
  %bf.lshr = lshr i64 %bf.load, 24, !dbg !9840
  %bf.clear = and i64 %bf.lshr, 1, !dbg !9840
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9840
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !9840
  br i1 %tobool, label %if.end, label %if.then, !dbg !9842

if.then:                                          ; preds = %entry
  br label %do.end, !dbg !9843

if.end:                                           ; preds = %entry
  br label %do.body, !dbg !9844

do.body:                                          ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !9845
  %call1 = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.176, i64 0, i64 0), %struct._IO_FILE* %4), !dbg !9845
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !9845
  %6 = load i8*, i8** %name, align 8, !dbg !9845
  call void @assemble_name(%struct._IO_FILE* %5, i8* %6), !dbg !9845
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !9845
  %call2 = call i32 @fputc(i32 10, %struct._IO_FILE* %7), !dbg !9845
  br label %do.end, !dbg !9845

do.end:                                           ; preds = %if.then, %do.body
  ret void, !dbg !9847
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @remove_unreachable_alias_pairs() #0 !dbg !9848 {
entry:
  %i = alloca i32, align 4
  %p = alloca %struct.alias_pair*, align 8
  %fnode = alloca %struct.cgraph_node*, align 8
  %vnode = alloca %struct.varpool_node*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9849, metadata !DIExpression()), !dbg !9850
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %p, metadata !9851, metadata !DIExpression()), !dbg !9853
  %0 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !9854
  %cmp = icmp eq %struct.VEC_alias_pair_gc* %0, null, !dbg !9856
  br i1 %cmp, label %if.then, label %if.end, !dbg !9857

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !9858

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !9859
  br label %for.cond, !dbg !9861

for.cond:                                         ; preds = %if.end22, %cond.end19, %if.end
  %1 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !9862
  %tobool = icmp ne %struct.VEC_alias_pair_gc* %1, null, !dbg !9862
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9862

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !9862
  %base = getelementptr inbounds %struct.VEC_alias_pair_gc, %struct.VEC_alias_pair_gc* %2, i32 0, i32 0, !dbg !9862
  br label %cond.end, !dbg !9862

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9862

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_pair_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9862
  %3 = load i32, i32* %i, align 4, !dbg !9862
  %call = call i32 @VEC_alias_pair_base_iterate(%struct.VEC_alias_pair_base* %cond, i32 %3, %struct.alias_pair** %p), !dbg !9862
  %tobool1 = icmp ne i32 %call, 0, !dbg !9864
  br i1 %tobool1, label %for.body, label %for.end, !dbg !9864

for.body:                                         ; preds = %cond.end
  %4 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !9865
  %decl = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %4, i32 0, i32 0, !dbg !9865
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9865
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !9865
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !9865
  %6 = bitcast i40* %decl_flag_1 to i64*, !dbg !9865
  %bf.load = load i64, i64* %6, align 8, !dbg !9865
  %bf.lshr = lshr i64 %bf.load, 25, !dbg !9865
  %bf.clear = and i64 %bf.lshr, 1, !dbg !9865
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9865
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !9865
  br i1 %tobool2, label %if.end22, label %if.then3, !dbg !9868

if.then3:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %fnode, metadata !9869, metadata !DIExpression()), !dbg !9871
  store %struct.cgraph_node* null, %struct.cgraph_node** %fnode, align 8, !dbg !9871
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %vnode, metadata !9872, metadata !DIExpression()), !dbg !9873
  store %struct.varpool_node* null, %struct.varpool_node** %vnode, align 8, !dbg !9873
  %7 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !9874
  %target = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %7, i32 0, i32 1, !dbg !9875
  %8 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !9875
  %call4 = call %struct.cgraph_node* @cgraph_node_for_asm(%union.tree_node* %8), !dbg !9876
  store %struct.cgraph_node* %call4, %struct.cgraph_node** %fnode, align 8, !dbg !9877
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %fnode, align 8, !dbg !9878
  %cmp5 = icmp eq %struct.cgraph_node* %9, null, !dbg !9879
  br i1 %cmp5, label %cond.true6, label %cond.false9, !dbg !9880

cond.true6:                                       ; preds = %if.then3
  %10 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !9881
  %target7 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %10, i32 0, i32 1, !dbg !9882
  %11 = load %union.tree_node*, %union.tree_node** %target7, align 8, !dbg !9882
  %call8 = call %struct.varpool_node* @varpool_node_for_asm(%union.tree_node* %11), !dbg !9883
  br label %cond.end10, !dbg !9880

cond.false9:                                      ; preds = %if.then3
  br label %cond.end10, !dbg !9880

cond.end10:                                       ; preds = %cond.false9, %cond.true6
  %cond11 = phi %struct.varpool_node* [ %call8, %cond.true6 ], [ null, %cond.false9 ], !dbg !9880
  store %struct.varpool_node* %cond11, %struct.varpool_node** %vnode, align 8, !dbg !9884
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %fnode, align 8, !dbg !9885
  %cmp12 = icmp eq %struct.cgraph_node* %12, null, !dbg !9887
  br i1 %cmp12, label %land.lhs.true, label %if.end21, !dbg !9888

land.lhs.true:                                    ; preds = %cond.end10
  %13 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !9889
  %cmp13 = icmp eq %struct.varpool_node* %13, null, !dbg !9890
  br i1 %cmp13, label %if.then14, label %if.end21, !dbg !9891

if.then14:                                        ; preds = %land.lhs.true
  %14 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !9892
  %tobool15 = icmp ne %struct.VEC_alias_pair_gc* %14, null, !dbg !9892
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !9892

cond.true16:                                      ; preds = %if.then14
  %15 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !9892
  %base17 = getelementptr inbounds %struct.VEC_alias_pair_gc, %struct.VEC_alias_pair_gc* %15, i32 0, i32 0, !dbg !9892
  br label %cond.end19, !dbg !9892

cond.false18:                                     ; preds = %if.then14
  br label %cond.end19, !dbg !9892

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_alias_pair_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !9892
  %16 = load i32, i32* %i, align 4, !dbg !9892
  call void @VEC_alias_pair_base_unordered_remove(%struct.VEC_alias_pair_base* %cond20, i32 %16), !dbg !9892
  br label %for.cond, !dbg !9894, !llvm.loop !9895

if.end21:                                         ; preds = %land.lhs.true, %cond.end10
  br label %if.end22, !dbg !9897

if.end22:                                         ; preds = %if.end21, %for.body
  %17 = load i32, i32* %i, align 4, !dbg !9898
  %inc = add i32 %17, 1, !dbg !9898
  store i32 %inc, i32* %i, align 4, !dbg !9898
  br label %for.cond, !dbg !9899, !llvm.loop !9895

for.end:                                          ; preds = %if.then, %cond.end
  ret void, !dbg !9900
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alias_pair_base_iterate(%struct.VEC_alias_pair_base* %vec_, i32 %ix_, %struct.alias_pair** %ptr) #0 !dbg !9901 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_alias_pair_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.alias_pair**, align 8
  store %struct.VEC_alias_pair_base* %vec_, %struct.VEC_alias_pair_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_base** %vec_.addr, metadata !9906, metadata !DIExpression()), !dbg !9907
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9908, metadata !DIExpression()), !dbg !9907
  store %struct.alias_pair** %ptr, %struct.alias_pair*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alias_pair*** %ptr.addr, metadata !9909, metadata !DIExpression()), !dbg !9907
  %0 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !9910
  %tobool = icmp ne %struct.VEC_alias_pair_base* %0, null, !dbg !9910
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9910

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9910
  %2 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !9910
  %num = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %2, i32 0, i32 0, !dbg !9910
  %3 = load i32, i32* %num, align 8, !dbg !9910
  %cmp = icmp ult i32 %1, %3, !dbg !9910
  br i1 %cmp, label %if.then, label %if.else, !dbg !9907

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !9912
  %vec = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %4, i32 0, i32 2, !dbg !9912
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !9912
  %idxprom = zext i32 %5 to i64, !dbg !9912
  %arrayidx = getelementptr inbounds [1 x %struct.alias_pair], [1 x %struct.alias_pair]* %vec, i64 0, i64 %idxprom, !dbg !9912
  %6 = load %struct.alias_pair**, %struct.alias_pair*** %ptr.addr, align 8, !dbg !9912
  store %struct.alias_pair* %arrayidx, %struct.alias_pair** %6, align 8, !dbg !9912
  store i32 1, i32* %retval, align 4, !dbg !9912
  br label %return, !dbg !9912

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.alias_pair**, %struct.alias_pair*** %ptr.addr, align 8, !dbg !9914
  store %struct.alias_pair* null, %struct.alias_pair** %7, align 8, !dbg !9914
  store i32 0, i32* %retval, align 4, !dbg !9914
  br label %return, !dbg !9914

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !9907
  ret i32 %8, !dbg !9907
}

declare dso_local %struct.cgraph_node* @cgraph_node_for_asm(%union.tree_node*) #2

declare dso_local %struct.varpool_node* @varpool_node_for_asm(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_alias_pair_base_unordered_remove(%struct.VEC_alias_pair_base* %vec_, i32 %ix_) #0 !dbg !9916 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_pair_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_alias_pair_base* %vec_, %struct.VEC_alias_pair_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_base** %vec_.addr, metadata !9919, metadata !DIExpression()), !dbg !9920
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9921, metadata !DIExpression()), !dbg !9920
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !9920
  %1 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !9920
  %num = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %1, i32 0, i32 0, !dbg !9920
  %2 = load i32, i32* %num, align 8, !dbg !9920
  %cmp = icmp ult i32 %0, %2, !dbg !9920
  %conv = zext i1 %cmp to i32, !dbg !9920
  %3 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !9920
  %vec = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %3, i32 0, i32 2, !dbg !9920
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !9920
  %idxprom = zext i32 %4 to i64, !dbg !9920
  %arrayidx = getelementptr inbounds [1 x %struct.alias_pair], [1 x %struct.alias_pair]* %vec, i64 0, i64 %idxprom, !dbg !9920
  %5 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !9920
  %vec1 = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %5, i32 0, i32 2, !dbg !9920
  %6 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !9920
  %num2 = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %6, i32 0, i32 0, !dbg !9920
  %7 = load i32, i32* %num2, align 8, !dbg !9920
  %dec = add i32 %7, -1, !dbg !9920
  store i32 %dec, i32* %num2, align 8, !dbg !9920
  %idxprom3 = zext i32 %dec to i64, !dbg !9920
  %arrayidx4 = getelementptr inbounds [1 x %struct.alias_pair], [1 x %struct.alias_pair]* %vec1, i64 0, i64 %idxprom3, !dbg !9920
  %8 = bitcast %struct.alias_pair* %arrayidx to i8*, !dbg !9920
  %9 = bitcast %struct.alias_pair* %arrayidx4 to i8*, !dbg !9920
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false), !dbg !9920
  ret void, !dbg !9920
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @finish_aliases_1() #0 !dbg !9922 {
entry:
  %i = alloca i32, align 4
  %p = alloca %struct.alias_pair*, align 8
  %target_decl = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9923, metadata !DIExpression()), !dbg !9924
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %p, metadata !9925, metadata !DIExpression()), !dbg !9926
  store i32 0, i32* %i, align 4, !dbg !9927
  br label %for.cond, !dbg !9929

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !9930
  %tobool = icmp ne %struct.VEC_alias_pair_gc* %0, null, !dbg !9930
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9930

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !9930
  %base = getelementptr inbounds %struct.VEC_alias_pair_gc, %struct.VEC_alias_pair_gc* %1, i32 0, i32 0, !dbg !9930
  br label %cond.end, !dbg !9930

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9930

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_pair_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9930
  %2 = load i32, i32* %i, align 4, !dbg !9930
  %call = call i32 @VEC_alias_pair_base_iterate(%struct.VEC_alias_pair_base* %cond, i32 %2, %struct.alias_pair** %p), !dbg !9930
  %tobool1 = icmp ne i32 %call, 0, !dbg !9932
  br i1 %tobool1, label %for.body, label %for.end, !dbg !9932

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %target_decl, metadata !9933, metadata !DIExpression()), !dbg !9935
  %3 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !9936
  %decl = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %3, i32 0, i32 0, !dbg !9937
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9937
  %5 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !9938
  %target = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %5, i32 0, i32 1, !dbg !9939
  %6 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !9939
  %call2 = call %union.tree_node* @find_decl_and_mark_needed(%union.tree_node* %4, %union.tree_node* %6), !dbg !9940
  store %union.tree_node* %call2, %union.tree_node** %target_decl, align 8, !dbg !9941
  %7 = load %union.tree_node*, %union.tree_node** %target_decl, align 8, !dbg !9942
  %cmp = icmp eq %union.tree_node* %7, null, !dbg !9944
  br i1 %cmp, label %if.then, label %if.else, !dbg !9945

if.then:                                          ; preds = %for.body
  %8 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !9946
  %decl3 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %8, i32 0, i32 0, !dbg !9946
  %9 = load %union.tree_node*, %union.tree_node** %decl3, align 8, !dbg !9946
  %decl_common = bitcast %union.tree_node* %9 to %struct.tree_decl_common*, !dbg !9946
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !9946
  %10 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !9946
  %call4 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.92, i64 0, i64 0), %union.tree_node* %10), !dbg !9949
  %tobool5 = icmp ne %union.tree_node* %call4, null, !dbg !9949
  br i1 %tobool5, label %if.end, label %if.then6, !dbg !9950

if.then6:                                         ; preds = %if.then
  %11 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !9951
  %decl7 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %11, i32 0, i32 0, !dbg !9952
  %12 = load %union.tree_node*, %union.tree_node** %decl7, align 8, !dbg !9952
  %13 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !9953
  %target8 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %13, i32 0, i32 1, !dbg !9954
  %14 = load %union.tree_node*, %union.tree_node** %target8, align 8, !dbg !9954
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.93, i64 0, i64 0), %union.tree_node* %12, %union.tree_node* %14), !dbg !9955
  br label %if.end, !dbg !9955

if.end:                                           ; preds = %if.then6, %if.then
  br label %if.end32, !dbg !9956

if.else:                                          ; preds = %for.body
  %15 = load %union.tree_node*, %union.tree_node** %target_decl, align 8, !dbg !9957
  %decl_common9 = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !9957
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common9, i32 0, i32 2, !dbg !9957
  %16 = bitcast i40* %decl_flag_1 to i64*, !dbg !9957
  %bf.load = load i64, i64* %16, align 8, !dbg !9957
  %bf.lshr = lshr i64 %bf.load, 25, !dbg !9957
  %bf.clear = and i64 %bf.lshr, 1, !dbg !9957
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9957
  %tobool10 = icmp ne i32 %bf.cast, 0, !dbg !9957
  br i1 %tobool10, label %land.lhs.true, label %if.end31, !dbg !9959

land.lhs.true:                                    ; preds = %if.else
  %17 = load %union.tree_node*, %union.tree_node** %target_decl, align 8, !dbg !9960
  %base11 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !9960
  %18 = bitcast %struct.tree_base* %base11 to i64*, !dbg !9960
  %bf.load12 = load i64, i64* %18, align 8, !dbg !9960
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !9960
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !9960
  %cmp15 = icmp ne i32 %bf.cast14, 29, !dbg !9961
  br i1 %cmp15, label %land.lhs.true22, label %lor.lhs.false, !dbg !9962

lor.lhs.false:                                    ; preds = %land.lhs.true
  %19 = load %union.tree_node*, %union.tree_node** %target_decl, align 8, !dbg !9963
  %decl_common16 = bitcast %union.tree_node* %19 to %struct.tree_decl_common*, !dbg !9963
  %virtual_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common16, i32 0, i32 2, !dbg !9963
  %20 = bitcast i40* %virtual_flag to i64*, !dbg !9963
  %bf.load17 = load i64, i64* %20, align 8, !dbg !9963
  %bf.lshr18 = lshr i64 %bf.load17, 9, !dbg !9963
  %bf.clear19 = and i64 %bf.lshr18, 1, !dbg !9963
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !9963
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !9963
  br i1 %tobool21, label %if.end31, label %land.lhs.true22, !dbg !9964

land.lhs.true22:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %21 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !9965
  %decl23 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %21, i32 0, i32 0, !dbg !9965
  %22 = load %union.tree_node*, %union.tree_node** %decl23, align 8, !dbg !9965
  %decl_common24 = bitcast %union.tree_node* %22 to %struct.tree_decl_common*, !dbg !9965
  %attributes25 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common24, i32 0, i32 6, !dbg !9965
  %23 = load %union.tree_node*, %union.tree_node** %attributes25, align 8, !dbg !9965
  %call26 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.92, i64 0, i64 0), %union.tree_node* %23), !dbg !9966
  %tobool27 = icmp ne %union.tree_node* %call26, null, !dbg !9966
  br i1 %tobool27, label %if.end31, label %if.then28, !dbg !9967

if.then28:                                        ; preds = %land.lhs.true22
  %24 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !9968
  %decl29 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %24, i32 0, i32 0, !dbg !9969
  %25 = load %union.tree_node*, %union.tree_node** %decl29, align 8, !dbg !9969
  %26 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !9970
  %target30 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %26, i32 0, i32 1, !dbg !9971
  %27 = load %union.tree_node*, %union.tree_node** %target30, align 8, !dbg !9971
  call void (i8*, ...) @error(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.94, i64 0, i64 0), %union.tree_node* %25, %union.tree_node* %27), !dbg !9972
  br label %if.end31, !dbg !9972

if.end31:                                         ; preds = %if.then28, %land.lhs.true22, %lor.lhs.false, %if.else
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %if.end
  br label %for.inc, !dbg !9973

for.inc:                                          ; preds = %if.end32
  %28 = load i32, i32* %i, align 4, !dbg !9974
  %inc = add i32 %28, 1, !dbg !9974
  store i32 %inc, i32* %i, align 4, !dbg !9974
  br label %for.cond, !dbg !9975, !llvm.loop !9976

for.end:                                          ; preds = %cond.end
  ret void, !dbg !9978
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @find_decl_and_mark_needed(%union.tree_node* %decl, %union.tree_node* %target) #0 !dbg !9979 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %union.tree_node*, align 8
  %fnode = alloca %struct.cgraph_node*, align 8
  %vnode = alloca %struct.varpool_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !9980, metadata !DIExpression()), !dbg !9981
  store %union.tree_node* %target, %union.tree_node** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %target.addr, metadata !9982, metadata !DIExpression()), !dbg !9983
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %fnode, metadata !9984, metadata !DIExpression()), !dbg !9985
  store %struct.cgraph_node* null, %struct.cgraph_node** %fnode, align 8, !dbg !9985
  call void @llvm.dbg.declare(metadata %struct.varpool_node** %vnode, metadata !9986, metadata !DIExpression()), !dbg !9987
  store %struct.varpool_node* null, %struct.varpool_node** %vnode, align 8, !dbg !9987
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !9988
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9988
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9988
  %bf.load = load i64, i64* %1, align 8, !dbg !9988
  %bf.clear = and i64 %bf.load, 65535, !dbg !9988
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9988
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !9990
  br i1 %cmp, label %if.then, label %if.else, !dbg !9991

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !9992
  %call = call %struct.cgraph_node* @cgraph_node_for_asm(%union.tree_node* %2), !dbg !9994
  store %struct.cgraph_node* %call, %struct.cgraph_node** %fnode, align 8, !dbg !9995
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %fnode, align 8, !dbg !9996
  %cmp1 = icmp eq %struct.cgraph_node* %3, null, !dbg !9998
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !9999

if.then2:                                         ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10000
  %call3 = call %struct.varpool_node* @varpool_node_for_asm(%union.tree_node* %4), !dbg !10001
  store %struct.varpool_node* %call3, %struct.varpool_node** %vnode, align 8, !dbg !10002
  br label %if.end, !dbg !10003

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end9, !dbg !10004

if.else:                                          ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10005
  %call4 = call %struct.varpool_node* @varpool_node_for_asm(%union.tree_node* %5), !dbg !10007
  store %struct.varpool_node* %call4, %struct.varpool_node** %vnode, align 8, !dbg !10008
  %6 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !10009
  %cmp5 = icmp eq %struct.varpool_node* %6, null, !dbg !10011
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !10012

if.then6:                                         ; preds = %if.else
  %7 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10013
  %call7 = call %struct.cgraph_node* @cgraph_node_for_asm(%union.tree_node* %7), !dbg !10014
  store %struct.cgraph_node* %call7, %struct.cgraph_node** %fnode, align 8, !dbg !10015
  br label %if.end8, !dbg !10016

if.end8:                                          ; preds = %if.then6, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.end
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %fnode, align 8, !dbg !10017
  %tobool = icmp ne %struct.cgraph_node* %8, null, !dbg !10017
  br i1 %tobool, label %if.then10, label %if.else12, !dbg !10019

if.then10:                                        ; preds = %if.end9
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %fnode, align 8, !dbg !10020
  call void @cgraph_mark_needed_node(%struct.cgraph_node* %9), !dbg !10022
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %fnode, align 8, !dbg !10023
  %decl11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 0, !dbg !10024
  %11 = load %union.tree_node*, %union.tree_node** %decl11, align 8, !dbg !10024
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !10025
  br label %return, !dbg !10025

if.else12:                                        ; preds = %if.end9
  %12 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !10026
  %tobool13 = icmp ne %struct.varpool_node* %12, null, !dbg !10026
  br i1 %tobool13, label %if.then14, label %if.else16, !dbg !10028

if.then14:                                        ; preds = %if.else12
  %13 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !10029
  call void @varpool_mark_needed_node(%struct.varpool_node* %13), !dbg !10031
  %14 = load %struct.varpool_node*, %struct.varpool_node** %vnode, align 8, !dbg !10032
  %decl15 = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %14, i32 0, i32 0, !dbg !10033
  %15 = load %union.tree_node*, %union.tree_node** %decl15, align 8, !dbg !10033
  store %union.tree_node* %15, %union.tree_node** %retval, align 8, !dbg !10034
  br label %return, !dbg !10034

if.else16:                                        ; preds = %if.else12
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !10035
  br label %return, !dbg !10035

return:                                           ; preds = %if.else16, %if.then14, %if.then10
  %16 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !10036
  ret %union.tree_node* %16, !dbg !10036
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @finish_aliases_2() #0 !dbg !10037 {
entry:
  %i = alloca i32, align 4
  %p = alloca %struct.alias_pair*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10038, metadata !DIExpression()), !dbg !10039
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %p, metadata !10040, metadata !DIExpression()), !dbg !10041
  store i32 0, i32* %i, align 4, !dbg !10042
  br label %for.cond, !dbg !10044

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !10045
  %tobool = icmp ne %struct.VEC_alias_pair_gc* %0, null, !dbg !10045
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10045

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !10045
  %base = getelementptr inbounds %struct.VEC_alias_pair_gc, %struct.VEC_alias_pair_gc* %1, i32 0, i32 0, !dbg !10045
  br label %cond.end, !dbg !10045

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10045

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_pair_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10045
  %2 = load i32, i32* %i, align 4, !dbg !10045
  %call = call i32 @VEC_alias_pair_base_iterate(%struct.VEC_alias_pair_base* %cond, i32 %2, %struct.alias_pair** %p), !dbg !10045
  %tobool1 = icmp ne i32 %call, 0, !dbg !10047
  br i1 %tobool1, label %for.body, label %for.end, !dbg !10047

for.body:                                         ; preds = %cond.end
  %3 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !10048
  %decl = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %3, i32 0, i32 0, !dbg !10049
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10049
  %5 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !10050
  %target = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %5, i32 0, i32 1, !dbg !10051
  %6 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !10051
  call void @do_assemble_alias(%union.tree_node* %4, %union.tree_node* %6), !dbg !10052
  br label %for.inc, !dbg !10052

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !10053
  %inc = add i32 %7, 1, !dbg !10053
  store i32 %inc, i32* %i, align 4, !dbg !10053
  br label %for.cond, !dbg !10054, !llvm.loop !10055

for.end:                                          ; preds = %cond.end
  %8 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !10057
  %tobool2 = icmp ne %struct.VEC_alias_pair_gc* %8, null, !dbg !10057
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !10057

cond.true3:                                       ; preds = %for.end
  %9 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** @alias_pairs, align 8, !dbg !10057
  %base4 = getelementptr inbounds %struct.VEC_alias_pair_gc, %struct.VEC_alias_pair_gc* %9, i32 0, i32 0, !dbg !10057
  br label %cond.end6, !dbg !10057

cond.false5:                                      ; preds = %for.end
  br label %cond.end6, !dbg !10057

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_alias_pair_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !10057
  call void @VEC_alias_pair_base_truncate(%struct.VEC_alias_pair_base* %cond7, i32 0), !dbg !10057
  ret void, !dbg !10058
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_assemble_alias(%union.tree_node* %decl, %union.tree_node* %target) #0 !dbg !10059 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10060, metadata !DIExpression()), !dbg !10061
  store %union.tree_node* %target, %union.tree_node** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %target.addr, metadata !10062, metadata !DIExpression()), !dbg !10063
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10064
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !10064
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !10064
  %bf.load = load i64, i64* %1, align 8, !dbg !10064
  %bf.lshr = lshr i64 %bf.load, 22, !dbg !10064
  %bf.clear = and i64 %bf.lshr, 1, !dbg !10064
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10064
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !10064
  br i1 %tobool, label %if.then, label %if.end, !dbg !10066

if.then:                                          ; preds = %entry
  br label %do.end81, !dbg !10067

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10068
  call void @make_decl_rtl(%union.tree_node* %2), !dbg !10069
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10070
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10070
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10070
  %bf.load2 = load i64, i64* %4, align 8, !dbg !10071
  %bf.clear3 = and i64 %bf.load2, -4194305, !dbg !10071
  %bf.set = or i64 %bf.clear3, 4194304, !dbg !10071
  store i64 %bf.set, i64* %4, align 8, !dbg !10071
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10072
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %5), !dbg !10072
  %base4 = bitcast %union.tree_node* %call to %struct.tree_base*, !dbg !10072
  %6 = bitcast %struct.tree_base* %base4 to i64*, !dbg !10072
  %bf.load5 = load i64, i64* %6, align 8, !dbg !10073
  %bf.clear6 = and i64 %bf.load5, -4194305, !dbg !10073
  %bf.set7 = or i64 %bf.clear6, 4194304, !dbg !10073
  store i64 %bf.set7, i64* %6, align 8, !dbg !10073
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10074
  %decl_common = bitcast %union.tree_node* %7 to %struct.tree_decl_common*, !dbg !10074
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !10074
  %8 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !10074
  %call8 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.92, i64 0, i64 0), %union.tree_node* %8), !dbg !10076
  %tobool9 = icmp ne %union.tree_node* %call8, null, !dbg !10076
  br i1 %tobool9, label %if.then10, label %if.end42, !dbg !10077

if.then10:                                        ; preds = %if.end
  %call11 = call %union.tree_node* @ultimate_transparent_alias_target(%union.tree_node** %target.addr), !dbg !10078
  %9 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 113), align 4, !dbg !10080
  %tobool12 = icmp ne i8 %9, 0, !dbg !10082
  br i1 %tobool12, label %if.end25, label %land.lhs.true, !dbg !10083

land.lhs.true:                                    ; preds = %if.then10
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10084
  %base13 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !10084
  %11 = bitcast %struct.tree_base* %base13 to i64*, !dbg !10084
  %bf.load14 = load i64, i64* %11, align 8, !dbg !10084
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !10084
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !10084
  %cmp = icmp eq i32 %bf.cast16, 32, !dbg !10085
  br i1 %cmp, label %land.lhs.true17, label %if.end25, !dbg !10086

land.lhs.true17:                                  ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10087
  %decl_with_vis = bitcast %union.tree_node* %12 to %struct.tree_decl_with_vis*, !dbg !10087
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !10087
  %13 = bitcast i24* %tls_model to i32*, !dbg !10087
  %bf.load18 = load i32, i32* %13, align 8, !dbg !10087
  %bf.lshr19 = lshr i32 %bf.load18, 13, !dbg !10087
  %bf.clear20 = and i32 %bf.lshr19, 7, !dbg !10087
  %cmp21 = icmp sge i32 %bf.clear20, 2, !dbg !10087
  br i1 %cmp21, label %if.then22, label %if.end25, !dbg !10088

if.then22:                                        ; preds = %land.lhs.true17
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10089
  %call23 = call %union.tree_node* @emutls_decl(%union.tree_node* %14), !dbg !10091
  store %union.tree_node* %call23, %union.tree_node** %decl.addr, align 8, !dbg !10092
  %15 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10093
  %call24 = call %union.tree_node* @get_emutls_object_name(%union.tree_node* %15), !dbg !10094
  store %union.tree_node* %call24, %union.tree_node** %target.addr, align 8, !dbg !10095
  br label %if.end25, !dbg !10096

if.end25:                                         ; preds = %if.then22, %land.lhs.true17, %land.lhs.true, %if.then10
  %16 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10097
  %base26 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !10097
  %17 = bitcast %struct.tree_base* %base26 to i64*, !dbg !10097
  %bf.load27 = load i64, i64* %17, align 8, !dbg !10097
  %bf.lshr28 = lshr i64 %bf.load27, 26, !dbg !10097
  %bf.clear29 = and i64 %bf.lshr28, 1, !dbg !10097
  %bf.cast30 = trunc i64 %bf.clear29 to i32, !dbg !10097
  %tobool31 = icmp ne i32 %bf.cast30, 0, !dbg !10097
  br i1 %tobool31, label %if.end34, label %if.then32, !dbg !10099

if.then32:                                        ; preds = %if.end25
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10100
  %19 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10100
  %20 = load %union.tree_node*, %union.tree_node** @weakref_targets, align 8, !dbg !10100
  %call33 = call %union.tree_node* @tree_cons_stat(%union.tree_node* %18, %union.tree_node* %19, %union.tree_node* %20), !dbg !10100
  store %union.tree_node* %call33, %union.tree_node** @weakref_targets, align 8, !dbg !10101
  br label %if.end34, !dbg !10102

if.end34:                                         ; preds = %if.then32, %if.end25
  br label %do.body, !dbg !10103

do.body:                                          ; preds = %if.end34
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10104
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.177, i64 0, i64 0)), !dbg !10104
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10104
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10104
  %call36 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %23), !dbg !10104
  %identifier = bitcast %union.tree_node* %call36 to %struct.tree_identifier*, !dbg !10104
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !10104
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !10104
  %24 = load i8*, i8** %str, align 8, !dbg !10104
  call void @assemble_name(%struct._IO_FILE* %22, i8* %24), !dbg !10104
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10104
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.157, i64 0, i64 0)), !dbg !10104
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10104
  %27 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10104
  %identifier38 = bitcast %union.tree_node* %27 to %struct.tree_identifier*, !dbg !10104
  %id39 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier38, i32 0, i32 1, !dbg !10104
  %str40 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id39, i32 0, i32 0, !dbg !10104
  %28 = load i8*, i8** %str40, align 8, !dbg !10104
  call void @assemble_name(%struct._IO_FILE* %26, i8* %28), !dbg !10104
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10104
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i64 0, i64 0)), !dbg !10104
  br label %do.end, !dbg !10104

do.end:                                           ; preds = %do.body
  br label %do.end81, !dbg !10106

if.end42:                                         ; preds = %if.end
  %30 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 113), align 4, !dbg !10107
  %tobool43 = icmp ne i8 %30, 0, !dbg !10109
  br i1 %tobool43, label %if.end60, label %land.lhs.true44, !dbg !10110

land.lhs.true44:                                  ; preds = %if.end42
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10111
  %base45 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !10111
  %32 = bitcast %struct.tree_base* %base45 to i64*, !dbg !10111
  %bf.load46 = load i64, i64* %32, align 8, !dbg !10111
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !10111
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !10111
  %cmp49 = icmp eq i32 %bf.cast48, 32, !dbg !10112
  br i1 %cmp49, label %land.lhs.true50, label %if.end60, !dbg !10113

land.lhs.true50:                                  ; preds = %land.lhs.true44
  %33 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10114
  %decl_with_vis51 = bitcast %union.tree_node* %33 to %struct.tree_decl_with_vis*, !dbg !10114
  %tls_model52 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis51, i32 0, i32 4, !dbg !10114
  %34 = bitcast i24* %tls_model52 to i32*, !dbg !10114
  %bf.load53 = load i32, i32* %34, align 8, !dbg !10114
  %bf.lshr54 = lshr i32 %bf.load53, 13, !dbg !10114
  %bf.clear55 = and i32 %bf.lshr54, 7, !dbg !10114
  %cmp56 = icmp sge i32 %bf.clear55, 2, !dbg !10114
  br i1 %cmp56, label %if.then57, label %if.end60, !dbg !10115

if.then57:                                        ; preds = %land.lhs.true50
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10116
  %call58 = call %union.tree_node* @emutls_decl(%union.tree_node* %35), !dbg !10118
  store %union.tree_node* %call58, %union.tree_node** %decl.addr, align 8, !dbg !10119
  %36 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10120
  %call59 = call %union.tree_node* @get_emutls_object_name(%union.tree_node* %36), !dbg !10121
  store %union.tree_node* %call59, %union.tree_node** %target.addr, align 8, !dbg !10122
  br label %if.end60, !dbg !10123

if.end60:                                         ; preds = %if.then57, %land.lhs.true50, %land.lhs.true44, %if.end42
  %37 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10124
  %base61 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !10124
  %38 = bitcast %struct.tree_base* %base61 to i64*, !dbg !10124
  %bf.load62 = load i64, i64* %38, align 8, !dbg !10124
  %bf.lshr63 = lshr i64 %bf.load62, 27, !dbg !10124
  %bf.clear64 = and i64 %bf.lshr63, 1, !dbg !10124
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !10124
  %tobool66 = icmp ne i32 %bf.cast65, 0, !dbg !10124
  br i1 %tobool66, label %if.then67, label %if.end69, !dbg !10126

if.then67:                                        ; preds = %if.end60
  %39 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10127
  call void @globalize_decl(%union.tree_node* %39), !dbg !10129
  %40 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10130
  %call68 = call i32 @maybe_assemble_visibility(%union.tree_node* %40), !dbg !10131
  br label %if.end69, !dbg !10132

if.end69:                                         ; preds = %if.then67, %if.end60
  br label %do.body70, !dbg !10133

do.body70:                                        ; preds = %if.end69
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10134
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.156, i64 0, i64 0)), !dbg !10134
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10134
  %43 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10134
  %call72 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %43), !dbg !10134
  %identifier73 = bitcast %union.tree_node* %call72 to %struct.tree_identifier*, !dbg !10134
  %id74 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier73, i32 0, i32 1, !dbg !10134
  %str75 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id74, i32 0, i32 0, !dbg !10134
  %44 = load i8*, i8** %str75, align 8, !dbg !10134
  call void @assemble_name(%struct._IO_FILE* %42, i8* %44), !dbg !10134
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10134
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.157, i64 0, i64 0)), !dbg !10134
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10134
  %47 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10134
  %identifier77 = bitcast %union.tree_node* %47 to %struct.tree_identifier*, !dbg !10134
  %id78 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier77, i32 0, i32 1, !dbg !10134
  %str79 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id78, i32 0, i32 0, !dbg !10134
  %48 = load i8*, i8** %str79, align 8, !dbg !10134
  call void @assemble_name(%struct._IO_FILE* %46, i8* %48), !dbg !10134
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10134
  %call80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i64 0, i64 0)), !dbg !10134
  br label %do.end81, !dbg !10134

do.end81:                                         ; preds = %if.then, %do.end, %do.body70
  ret void, !dbg !10136
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_alias_pair_base_truncate(%struct.VEC_alias_pair_base* %vec_, i32 %size_) #0 !dbg !10137 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_pair_base*, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_alias_pair_base* %vec_, %struct.VEC_alias_pair_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_base** %vec_.addr, metadata !10138, metadata !DIExpression()), !dbg !10139
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !10140, metadata !DIExpression()), !dbg !10139
  %0 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !10139
  %tobool = icmp ne %struct.VEC_alias_pair_base* %0, null, !dbg !10139
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10139

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !10139
  %num = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %1, i32 0, i32 0, !dbg !10139
  %2 = load i32, i32* %num, align 8, !dbg !10139
  %3 = load i32, i32* %size_.addr, align 4, !dbg !10139
  %cmp = icmp uge i32 %2, %3, !dbg !10139
  %conv = zext i1 %cmp to i32, !dbg !10139
  br label %cond.end, !dbg !10139

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %size_.addr, align 4, !dbg !10139
  %tobool1 = icmp ne i32 %4, 0, !dbg !10139
  %lnot = xor i1 %tobool1, true, !dbg !10139
  %lnot.ext = zext i1 %lnot to i32, !dbg !10139
  br label %cond.end, !dbg !10139

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !10139
  %5 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !10141
  %tobool2 = icmp ne %struct.VEC_alias_pair_base* %5, null, !dbg !10141
  br i1 %tobool2, label %if.then, label %if.end, !dbg !10139

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* %size_.addr, align 4, !dbg !10141
  %7 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !10141
  %num3 = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %7, i32 0, i32 0, !dbg !10141
  store i32 %6, i32* %num3, align 8, !dbg !10141
  br label %if.end, !dbg !10141

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !10139
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @assemble_alias(%union.tree_node* %decl, %union.tree_node* %target) #0 !dbg !10143 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %union.tree_node*, align 8
  %target_decl = alloca %union.tree_node*, align 8
  %is_weakref = alloca i8, align 1
  %alias = alloca %union.tree_node*, align 8
  %p = alloca %struct.alias_pair*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10144, metadata !DIExpression()), !dbg !10145
  store %union.tree_node* %target, %union.tree_node** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %target.addr, metadata !10146, metadata !DIExpression()), !dbg !10147
  call void @llvm.dbg.declare(metadata %union.tree_node** %target_decl, metadata !10148, metadata !DIExpression()), !dbg !10149
  call void @llvm.dbg.declare(metadata i8* %is_weakref, metadata !10150, metadata !DIExpression()), !dbg !10151
  store i8 0, i8* %is_weakref, align 1, !dbg !10151
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10152
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !10152
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !10152
  %1 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !10152
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.92, i64 0, i64 0), %union.tree_node* %1), !dbg !10154
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !10154
  br i1 %tobool, label %if.then, label %if.else7, !dbg !10155

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %alias, metadata !10156, metadata !DIExpression()), !dbg !10158
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10159
  %call1 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %2), !dbg !10159
  store %union.tree_node* %call1, %union.tree_node** %alias, align 8, !dbg !10158
  store i8 1, i8* %is_weakref, align 1, !dbg !10160
  %call2 = call %union.tree_node* @ultimate_transparent_alias_target(%union.tree_node** %target.addr), !dbg !10161
  %3 = load %union.tree_node*, %union.tree_node** %alias, align 8, !dbg !10162
  %4 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10164
  %cmp = icmp eq %union.tree_node* %3, %4, !dbg !10165
  br i1 %cmp, label %if.then3, label %if.else, !dbg !10166

if.then3:                                         ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10167
  call void (i8*, ...) @error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.95, i64 0, i64 0), %union.tree_node* %5), !dbg !10168
  br label %if.end, !dbg !10168

if.else:                                          ; preds = %if.then
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10169
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !10169
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !10169
  %bf.load = load i64, i64* %7, align 8, !dbg !10169
  %bf.lshr = lshr i64 %bf.load, 27, !dbg !10169
  %bf.clear = and i64 %bf.lshr, 1, !dbg !10169
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10169
  %tobool4 = icmp ne i32 %bf.cast, 0, !dbg !10169
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !10171

if.then5:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10172
  call void (i8*, ...) @error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.96, i64 0, i64 0), %union.tree_node* %8), !dbg !10173
  br label %if.end6, !dbg !10173

if.end6:                                          ; preds = %if.then5, %if.end
  br label %if.end8, !dbg !10174

if.else7:                                         ; preds = %entry
  br label %if.end8

if.end8:                                          ; preds = %if.else7, %if.end6
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10175
  %base9 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !10175
  %10 = bitcast %struct.tree_base* %base9 to i64*, !dbg !10175
  %bf.load10 = load i64, i64* %10, align 8, !dbg !10176
  %bf.clear11 = and i64 %bf.load10, -16777217, !dbg !10176
  %bf.set = or i64 %bf.clear11, 16777216, !dbg !10176
  store i64 %bf.set, i64* %10, align 8, !dbg !10176
  %11 = load i8, i8* %is_weakref, align 1, !dbg !10177
  %tobool12 = icmp ne i8 %11, 0, !dbg !10177
  br i1 %tobool12, label %if.end17, label %if.then13, !dbg !10179

if.then13:                                        ; preds = %if.end8
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10180
  %decl_common14 = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !10180
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common14, i32 0, i32 2, !dbg !10180
  %13 = bitcast i40* %decl_flag_1 to i64*, !dbg !10180
  %bf.load15 = load i64, i64* %13, align 8, !dbg !10181
  %bf.clear16 = and i64 %bf.load15, -33554433, !dbg !10181
  store i64 %bf.clear16, i64* %13, align 8, !dbg !10181
  br label %if.end17, !dbg !10180

if.end17:                                         ; preds = %if.then13, %if.end8
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10182
  %base18 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !10182
  %15 = bitcast %struct.tree_base* %base18 to i64*, !dbg !10182
  %bf.load19 = load i64, i64* %15, align 8, !dbg !10182
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !10182
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !10182
  %cmp22 = icmp eq i32 %bf.cast21, 29, !dbg !10184
  br i1 %cmp22, label %if.then23, label %if.else29, !dbg !10185

if.then23:                                        ; preds = %if.end17
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10186
  %call24 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %16), !dbg !10187
  %alias25 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %call24, i32 0, i32 27, !dbg !10188
  %bf.load26 = load i16, i16* %alias25, align 4, !dbg !10189
  %bf.clear27 = and i16 %bf.load26, -129, !dbg !10189
  %bf.set28 = or i16 %bf.clear27, 128, !dbg !10189
  store i16 %bf.set28, i16* %alias25, align 4, !dbg !10189
  br label %if.end35, !dbg !10187

if.else29:                                        ; preds = %if.end17
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10190
  %call30 = call %struct.varpool_node* @varpool_node(%union.tree_node* %17), !dbg !10191
  %alias31 = getelementptr inbounds %struct.varpool_node, %struct.varpool_node* %call30, i32 0, i32 5, !dbg !10192
  %bf.load32 = load i8, i8* %alias31, align 4, !dbg !10193
  %bf.clear33 = and i8 %bf.load32, -65, !dbg !10193
  %bf.set34 = or i8 %bf.clear33, 64, !dbg !10193
  store i8 %bf.set34, i8* %alias31, align 4, !dbg !10193
  br label %if.end35

if.end35:                                         ; preds = %if.else29, %if.then23
  %18 = load i8, i8* @cgraph_global_info_ready, align 1, !dbg !10194
  %tobool36 = icmp ne i8 %18, 0, !dbg !10194
  br i1 %tobool36, label %if.then37, label %if.else39, !dbg !10196

if.then37:                                        ; preds = %if.end35
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10197
  %20 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10198
  %call38 = call %union.tree_node* @find_decl_and_mark_needed(%union.tree_node* %19, %union.tree_node* %20), !dbg !10199
  store %union.tree_node* %call38, %union.tree_node** %target_decl, align 8, !dbg !10200
  br label %if.end40, !dbg !10201

if.else39:                                        ; preds = %if.end35
  store %union.tree_node* null, %union.tree_node** %target_decl, align 8, !dbg !10202
  br label %if.end40

if.end40:                                         ; preds = %if.else39, %if.then37
  %21 = load %union.tree_node*, %union.tree_node** %target_decl, align 8, !dbg !10203
  %tobool41 = icmp ne %union.tree_node* %21, null, !dbg !10203
  br i1 %tobool41, label %land.lhs.true, label %if.else49, !dbg !10205

land.lhs.true:                                    ; preds = %if.end40
  %22 = load %union.tree_node*, %union.tree_node** %target_decl, align 8, !dbg !10206
  %base42 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !10206
  %23 = bitcast %struct.tree_base* %base42 to i64*, !dbg !10206
  %bf.load43 = load i64, i64* %23, align 8, !dbg !10206
  %bf.lshr44 = lshr i64 %bf.load43, 22, !dbg !10206
  %bf.clear45 = and i64 %bf.lshr44, 1, !dbg !10206
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !10206
  %tobool47 = icmp ne i32 %bf.cast46, 0, !dbg !10206
  br i1 %tobool47, label %if.then48, label %if.else49, !dbg !10207

if.then48:                                        ; preds = %land.lhs.true
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10208
  %25 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10209
  call void @do_assemble_alias(%union.tree_node* %24, %union.tree_node* %25), !dbg !10210
  br label %if.end53, !dbg !10210

if.else49:                                        ; preds = %land.lhs.true, %if.end40
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %p, metadata !10211, metadata !DIExpression()), !dbg !10213
  %call50 = call %struct.alias_pair* @VEC_alias_pair_gc_safe_push(%struct.VEC_alias_pair_gc** @alias_pairs, %struct.alias_pair* null), !dbg !10214
  store %struct.alias_pair* %call50, %struct.alias_pair** %p, align 8, !dbg !10213
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10215
  %27 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !10216
  %decl51 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %27, i32 0, i32 0, !dbg !10217
  store %union.tree_node* %26, %union.tree_node** %decl51, align 8, !dbg !10218
  %28 = load %union.tree_node*, %union.tree_node** %target.addr, align 8, !dbg !10219
  %29 = load %struct.alias_pair*, %struct.alias_pair** %p, align 8, !dbg !10220
  %target52 = getelementptr inbounds %struct.alias_pair, %struct.alias_pair* %29, i32 0, i32 1, !dbg !10221
  store %union.tree_node* %28, %union.tree_node** %target52, align 8, !dbg !10222
  br label %if.end53

if.end53:                                         ; preds = %if.else49, %if.then48
  ret void, !dbg !10223
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.alias_pair* @VEC_alias_pair_gc_safe_push(%struct.VEC_alias_pair_gc** %vec_, %struct.alias_pair* %obj_) #0 !dbg !10224 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_pair_gc**, align 8
  %obj_.addr = alloca %struct.alias_pair*, align 8
  store %struct.VEC_alias_pair_gc** %vec_, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_gc*** %vec_.addr, metadata !10230, metadata !DIExpression()), !dbg !10231
  store %struct.alias_pair* %obj_, %struct.alias_pair** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %obj_.addr, metadata !10232, metadata !DIExpression()), !dbg !10231
  %0 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !10231
  %call = call i32 @VEC_alias_pair_gc_reserve(%struct.VEC_alias_pair_gc** %0, i32 1), !dbg !10231
  %1 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !10231
  %2 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** %1, align 8, !dbg !10231
  %tobool = icmp ne %struct.VEC_alias_pair_gc* %2, null, !dbg !10231
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10231

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !10231
  %4 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** %3, align 8, !dbg !10231
  %base = getelementptr inbounds %struct.VEC_alias_pair_gc, %struct.VEC_alias_pair_gc* %4, i32 0, i32 0, !dbg !10231
  br label %cond.end, !dbg !10231

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10231

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_pair_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10231
  %5 = load %struct.alias_pair*, %struct.alias_pair** %obj_.addr, align 8, !dbg !10231
  %call1 = call %struct.alias_pair* @VEC_alias_pair_base_quick_push(%struct.VEC_alias_pair_base* %cond, %struct.alias_pair* %5), !dbg !10231
  ret %struct.alias_pair* %call1, !dbg !10231
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_assemble_visibility(%union.tree_node* %decl, i32 %vis) #0 !dbg !3850 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %vis.addr = alloca i32, align 4
  %name = alloca i8*, align 8
  %type = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10233, metadata !DIExpression()), !dbg !10234
  store i32 %vis, i32* %vis.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vis.addr, metadata !10235, metadata !DIExpression()), !dbg !10236
  call void @llvm.dbg.declare(metadata i8** %name, metadata !10237, metadata !DIExpression()), !dbg !10238
  call void @llvm.dbg.declare(metadata i8** %type, metadata !10239, metadata !DIExpression()), !dbg !10240
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10241
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %0), !dbg !10241
  %identifier = bitcast %union.tree_node* %call to %struct.tree_identifier*, !dbg !10241
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !10241
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !10241
  %1 = load i8*, i8** %str, align 8, !dbg !10241
  store i8* %1, i8** %name, align 8, !dbg !10242
  %2 = load i32, i32* %vis.addr, align 4, !dbg !10243
  %idxprom = sext i32 %2 to i64, !dbg !10244
  %arrayidx = getelementptr inbounds [4 x i8*], [4 x i8*]* @default_assemble_visibility.visibility_types, i64 0, i64 %idxprom, !dbg !10244
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !10244
  store i8* %3, i8** %type, align 8, !dbg !10245
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10246
  %5 = load i8*, i8** %type, align 8, !dbg !10247
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.100, i64 0, i64 0), i8* %5), !dbg !10248
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10249
  %7 = load i8*, i8** %name, align 8, !dbg !10250
  call void @assemble_name(%struct._IO_FILE* %6, i8* %7), !dbg !10251
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10252
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i64 0, i64 0)), !dbg !10253
  ret void, !dbg !10254
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @supports_one_only() #0 !dbg !10255 {
entry:
  ret i32 1, !dbg !10256
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_varasm_once() #0 !dbg !10258 {
entry:
  %call = call %struct.htab* @htab_create_alloc(i64 31, i32 (i8*)* @section_entry_hash, i32 (i8*, i8*)* @section_entry_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !10259
  store %struct.htab* %call, %struct.htab** @section_htab, align 8, !dbg !10260
  %call1 = call %struct.htab* @htab_create_alloc(i64 31, i32 (i8*)* @object_block_entry_hash, i32 (i8*, i8*)* @object_block_entry_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !10261
  store %struct.htab* %call1, %struct.htab** @object_block_htab, align 8, !dbg !10262
  %call2 = call %struct.htab* @htab_create_alloc(i64 1009, i32 (i8*)* @const_desc_hash, i32 (i8*, i8*)* @const_desc_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !10263
  store %struct.htab* %call2, %struct.htab** @const_desc_htab, align 8, !dbg !10264
  %call3 = call i32 @new_alias_set(), !dbg !10265
  store i32 %call3, i32* @const_alias_set, align 4, !dbg !10266
  %call4 = call %struct.rtx_constant_pool* @create_constant_pool(), !dbg !10267
  store %struct.rtx_constant_pool* %call4, %struct.rtx_constant_pool** @shared_constant_pool, align 8, !dbg !10268
  %call5 = call %union.section* @get_unnamed_section(i32 256, void (i8*)* @output_section_asm_op, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.101, i64 0, i64 0)), !dbg !10269
  store %union.section* %call5, %union.section** @text_section, align 8, !dbg !10270
  %call6 = call %union.section* @get_unnamed_section(i32 512, void (i8*)* @output_section_asm_op, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.102, i64 0, i64 0)), !dbg !10271
  store %union.section* %call6, %union.section** @data_section, align 8, !dbg !10272
  %call7 = call %union.section* @get_unnamed_section(i32 0, void (i8*)* @output_section_asm_op, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.103, i64 0, i64 0)), !dbg !10273
  store %union.section* %call7, %union.section** @readonly_data_section, align 8, !dbg !10274
  %call8 = call %union.section* @get_unnamed_section(i32 8704, void (i8*)* @output_section_asm_op, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.104, i64 0, i64 0)), !dbg !10275
  store %union.section* %call8, %union.section** @bss_section, align 8, !dbg !10276
  %call9 = call %union.section* @get_noswitch_section(i32 8397312, i8 (%union.tree_node*, i8*, i64, i64)* @emit_tls_common), !dbg !10277
  store %union.section* %call9, %union.section** @tls_comm_section, align 8, !dbg !10278
  %call10 = call %union.section* @get_noswitch_section(i32 8397312, i8 (%union.tree_node*, i8*, i64, i64)* @emit_local), !dbg !10279
  store %union.section* %call10, %union.section** @lcomm_section, align 8, !dbg !10280
  %call11 = call %union.section* @get_noswitch_section(i32 8397312, i8 (%union.tree_node*, i8*, i64, i64)* @emit_common), !dbg !10281
  store %union.section* %call11, %union.section** @comm_section, align 8, !dbg !10282
  %call12 = call %union.section* @get_noswitch_section(i32 8704, i8 (%union.tree_node*, i8*, i64, i64)* @emit_bss), !dbg !10283
  store %union.section* %call12, %union.section** @bss_noswitch_section, align 8, !dbg !10284
  %0 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 18), align 8, !dbg !10285
  call void %0(), !dbg !10286
  %1 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !10287
  %cmp = icmp eq %union.section* %1, null, !dbg !10289
  br i1 %cmp, label %if.then, label %if.end, !dbg !10290

if.then:                                          ; preds = %entry
  %2 = load %union.section*, %union.section** @text_section, align 8, !dbg !10291
  store %union.section* %2, %union.section** @readonly_data_section, align 8, !dbg !10292
  br label %if.end, !dbg !10293

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !10294
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @section_entry_hash(i8* %p) #0 !dbg !10295 {
entry:
  %p.addr = alloca i8*, align 8
  %old = alloca %union.section*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !10296, metadata !DIExpression()), !dbg !10297
  call void @llvm.dbg.declare(metadata %union.section** %old, metadata !10298, metadata !DIExpression()), !dbg !10299
  %0 = load i8*, i8** %p.addr, align 8, !dbg !10300
  %1 = bitcast i8* %0 to %union.section*, !dbg !10301
  store %union.section* %1, %union.section** %old, align 8, !dbg !10299
  %2 = load %union.section*, %union.section** %old, align 8, !dbg !10302
  %named = bitcast %union.section* %2 to %struct.named_section*, !dbg !10303
  %name = getelementptr inbounds %struct.named_section, %struct.named_section* %named, i32 0, i32 1, !dbg !10304
  %3 = load i8*, i8** %name, align 8, !dbg !10304
  %call = call i32 @htab_hash_string(i8* %3), !dbg !10305
  ret i32 %call, !dbg !10306
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @section_entry_eq(i8* %p1, i8* %p2) #0 !dbg !10307 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %old = alloca %union.section*, align 8
  %new_name = alloca i8*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !10308, metadata !DIExpression()), !dbg !10309
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !10310, metadata !DIExpression()), !dbg !10311
  call void @llvm.dbg.declare(metadata %union.section** %old, metadata !10312, metadata !DIExpression()), !dbg !10313
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !10314
  %1 = bitcast i8* %0 to %union.section*, !dbg !10315
  store %union.section* %1, %union.section** %old, align 8, !dbg !10313
  call void @llvm.dbg.declare(metadata i8** %new_name, metadata !10316, metadata !DIExpression()), !dbg !10317
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !10318
  store i8* %2, i8** %new_name, align 8, !dbg !10317
  %3 = load %union.section*, %union.section** %old, align 8, !dbg !10319
  %named = bitcast %union.section* %3 to %struct.named_section*, !dbg !10320
  %name = getelementptr inbounds %struct.named_section, %struct.named_section* %named, i32 0, i32 1, !dbg !10321
  %4 = load i8*, i8** %name, align 8, !dbg !10321
  %5 = load i8*, i8** %new_name, align 8, !dbg !10322
  %call = call i32 @strcmp(i8* %4, i8* %5), !dbg !10323
  %cmp = icmp eq i32 %call, 0, !dbg !10324
  %conv = zext i1 %cmp to i32, !dbg !10324
  ret i32 %conv, !dbg !10325
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @object_block_entry_hash(i8* %p) #0 !dbg !10326 {
entry:
  %p.addr = alloca i8*, align 8
  %old = alloca %struct.object_block*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !10327, metadata !DIExpression()), !dbg !10328
  call void @llvm.dbg.declare(metadata %struct.object_block** %old, metadata !10329, metadata !DIExpression()), !dbg !10330
  %0 = load i8*, i8** %p.addr, align 8, !dbg !10331
  %1 = bitcast i8* %0 to %struct.object_block*, !dbg !10332
  store %struct.object_block* %1, %struct.object_block** %old, align 8, !dbg !10330
  %2 = load %struct.object_block*, %struct.object_block** %old, align 8, !dbg !10333
  %sect = getelementptr inbounds %struct.object_block, %struct.object_block* %2, i32 0, i32 0, !dbg !10334
  %3 = load %union.section*, %union.section** %sect, align 8, !dbg !10334
  %call = call i32 @hash_section(%union.section* %3), !dbg !10335
  ret i32 %call, !dbg !10336
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @object_block_entry_eq(i8* %p1, i8* %p2) #0 !dbg !10337 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %old = alloca %struct.object_block*, align 8
  %new_section = alloca %union.section*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !10338, metadata !DIExpression()), !dbg !10339
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !10340, metadata !DIExpression()), !dbg !10341
  call void @llvm.dbg.declare(metadata %struct.object_block** %old, metadata !10342, metadata !DIExpression()), !dbg !10343
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !10344
  %1 = bitcast i8* %0 to %struct.object_block*, !dbg !10345
  store %struct.object_block* %1, %struct.object_block** %old, align 8, !dbg !10343
  call void @llvm.dbg.declare(metadata %union.section** %new_section, metadata !10346, metadata !DIExpression()), !dbg !10347
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !10348
  %3 = bitcast i8* %2 to %union.section*, !dbg !10349
  store %union.section* %3, %union.section** %new_section, align 8, !dbg !10347
  %4 = load %struct.object_block*, %struct.object_block** %old, align 8, !dbg !10350
  %sect = getelementptr inbounds %struct.object_block, %struct.object_block* %4, i32 0, i32 0, !dbg !10351
  %5 = load %union.section*, %union.section** %sect, align 8, !dbg !10351
  %6 = load %union.section*, %union.section** %new_section, align 8, !dbg !10352
  %cmp = icmp eq %union.section* %5, %6, !dbg !10353
  %conv = zext i1 %cmp to i32, !dbg !10353
  ret i32 %conv, !dbg !10354
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_desc_hash(i8* %ptr) #0 !dbg !10355 {
entry:
  %ptr.addr = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !10356, metadata !DIExpression()), !dbg !10357
  %0 = load i8*, i8** %ptr.addr, align 8, !dbg !10358
  %1 = bitcast i8* %0 to %struct.constant_descriptor_tree*, !dbg !10359
  %hash = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %1, i32 0, i32 2, !dbg !10360
  %2 = load i32, i32* %hash, align 8, !dbg !10360
  ret i32 %2, !dbg !10361
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_desc_eq(i8* %p1, i8* %p2) #0 !dbg !10362 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %c1 = alloca %struct.constant_descriptor_tree*, align 8
  %c2 = alloca %struct.constant_descriptor_tree*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !10363, metadata !DIExpression()), !dbg !10364
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !10365, metadata !DIExpression()), !dbg !10366
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_tree** %c1, metadata !10367, metadata !DIExpression()), !dbg !10369
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !10370
  %1 = bitcast i8* %0 to %struct.constant_descriptor_tree*, !dbg !10371
  store %struct.constant_descriptor_tree* %1, %struct.constant_descriptor_tree** %c1, align 8, !dbg !10369
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_tree** %c2, metadata !10372, metadata !DIExpression()), !dbg !10373
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !10374
  %3 = bitcast i8* %2 to %struct.constant_descriptor_tree*, !dbg !10375
  store %struct.constant_descriptor_tree* %3, %struct.constant_descriptor_tree** %c2, align 8, !dbg !10373
  %4 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %c1, align 8, !dbg !10376
  %hash = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %4, i32 0, i32 2, !dbg !10378
  %5 = load i32, i32* %hash, align 8, !dbg !10378
  %6 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %c2, align 8, !dbg !10379
  %hash1 = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %6, i32 0, i32 2, !dbg !10380
  %7 = load i32, i32* %hash1, align 8, !dbg !10380
  %cmp = icmp ne i32 %5, %7, !dbg !10381
  br i1 %cmp, label %if.then, label %if.end, !dbg !10382

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !10383
  br label %return, !dbg !10383

if.end:                                           ; preds = %entry
  %8 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %c1, align 8, !dbg !10384
  %value = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %8, i32 0, i32 1, !dbg !10385
  %9 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !10385
  %10 = load %struct.constant_descriptor_tree*, %struct.constant_descriptor_tree** %c2, align 8, !dbg !10386
  %value2 = getelementptr inbounds %struct.constant_descriptor_tree, %struct.constant_descriptor_tree* %10, i32 0, i32 1, !dbg !10387
  %11 = load %union.tree_node*, %union.tree_node** %value2, align 8, !dbg !10387
  %call = call i32 @compare_constant(%union.tree_node* %9, %union.tree_node* %11), !dbg !10388
  store i32 %call, i32* %retval, align 4, !dbg !10389
  br label %return, !dbg !10389

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !10390
  ret i32 %12, !dbg !10390
}

declare dso_local i32 @new_alias_set() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @output_section_asm_op(i8* %directive) #0 !dbg !10391 {
entry:
  %directive.addr = alloca i8*, align 8
  store i8* %directive, i8** %directive.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %directive.addr, metadata !10392, metadata !DIExpression()), !dbg !10393
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10394
  %1 = load i8*, i8** %directive.addr, align 8, !dbg !10395
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.161, i64 0, i64 0), i8* %1), !dbg !10396
  ret void, !dbg !10397
}

; Function Attrs: noinline nounwind uwtable
define internal %union.section* @get_noswitch_section(i32 %flags, i8 (%union.tree_node*, i8*, i64, i64)* %callback) #0 !dbg !10398 {
entry:
  %flags.addr = alloca i32, align 4
  %callback.addr = alloca i8 (%union.tree_node*, i8*, i64, i64)*, align 8
  %sect = alloca %union.section*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10401, metadata !DIExpression()), !dbg !10402
  store i8 (%union.tree_node*, i8*, i64, i64)* %callback, i8 (%union.tree_node*, i8*, i64, i64)** %callback.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%union.tree_node*, i8*, i64, i64)** %callback.addr, metadata !10403, metadata !DIExpression()), !dbg !10404
  call void @llvm.dbg.declare(metadata %union.section** %sect, metadata !10405, metadata !DIExpression()), !dbg !10406
  %call = call i8* @ggc_alloc_stat(i64 32), !dbg !10407
  %0 = bitcast i8* %call to %union.section*, !dbg !10407
  store %union.section* %0, %union.section** %sect, align 8, !dbg !10408
  %1 = load i32, i32* %flags.addr, align 4, !dbg !10409
  %or = or i32 %1, 4194304, !dbg !10410
  %2 = load %union.section*, %union.section** %sect, align 8, !dbg !10411
  %noswitch = bitcast %union.section* %2 to %struct.noswitch_section*, !dbg !10412
  %common = getelementptr inbounds %struct.noswitch_section, %struct.noswitch_section* %noswitch, i32 0, i32 0, !dbg !10413
  %flags1 = getelementptr inbounds %struct.section_common, %struct.section_common* %common, i32 0, i32 0, !dbg !10414
  store i32 %or, i32* %flags1, align 8, !dbg !10415
  %3 = load i8 (%union.tree_node*, i8*, i64, i64)*, i8 (%union.tree_node*, i8*, i64, i64)** %callback.addr, align 8, !dbg !10416
  %4 = load %union.section*, %union.section** %sect, align 8, !dbg !10417
  %noswitch2 = bitcast %union.section* %4 to %struct.noswitch_section*, !dbg !10418
  %callback3 = getelementptr inbounds %struct.noswitch_section, %struct.noswitch_section* %noswitch2, i32 0, i32 1, !dbg !10419
  store i8 (%union.tree_node*, i8*, i64, i64)* %3, i8 (%union.tree_node*, i8*, i64, i64)** %callback3, align 8, !dbg !10420
  %5 = load %union.section*, %union.section** %sect, align 8, !dbg !10421
  ret %union.section* %5, !dbg !10422
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @emit_tls_common(%union.tree_node* %decl, i8* %name, i64 %size, i64 %rounded) #0 !dbg !10423 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %rounded.addr = alloca i64, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10424, metadata !DIExpression()), !dbg !10425
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10426, metadata !DIExpression()), !dbg !10427
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !10428, metadata !DIExpression()), !dbg !10429
  store i64 %rounded, i64* %rounded.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %rounded.addr, metadata !10430, metadata !DIExpression()), !dbg !10431
  br label %do.body, !dbg !10432

do.body:                                          ; preds = %entry
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10433
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.178, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.179, i64 0, i64 0)), !dbg !10433
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10433
  %2 = load i8*, i8** %name.addr, align 8, !dbg !10433
  call void @assemble_name(%struct._IO_FILE* %1, i8* %2), !dbg !10433
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10433
  %4 = load i64, i64* %size.addr, align 8, !dbg !10433
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10433
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !10433
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !10433
  %6 = load i32, i32* %align, align 8, !dbg !10433
  %div = udiv i32 %6, 8, !dbg !10433
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.84, i64 0, i64 0), i64 %4, i32 %div), !dbg !10433
  br label %do.end, !dbg !10433

do.end:                                           ; preds = %do.body
  ret i8 1, !dbg !10435
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @emit_local(%union.tree_node* %decl, i8* %name, i64 %size, i64 %rounded) #0 !dbg !10436 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %rounded.addr = alloca i64, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10437, metadata !DIExpression()), !dbg !10438
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10439, metadata !DIExpression()), !dbg !10440
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !10441, metadata !DIExpression()), !dbg !10442
  store i64 %rounded, i64* %rounded.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %rounded.addr, metadata !10443, metadata !DIExpression()), !dbg !10444
  br label %do.body, !dbg !10445

do.body:                                          ; preds = %entry
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10446
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.81, i64 0, i64 0)), !dbg !10446
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10446
  %2 = load i8*, i8** %name.addr, align 8, !dbg !10446
  call void @assemble_name(%struct._IO_FILE* %1, i8* %2), !dbg !10446
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10446
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i64 0, i64 0)), !dbg !10446
  br label %do.body2, !dbg !10446

do.body2:                                         ; preds = %do.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10448
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.83, i64 0, i64 0)), !dbg !10448
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10448
  %6 = load i8*, i8** %name.addr, align 8, !dbg !10448
  call void @assemble_name(%struct._IO_FILE* %5, i8* %6), !dbg !10448
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10448
  %8 = load i64, i64* %size.addr, align 8, !dbg !10448
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10448
  %decl_common = bitcast %union.tree_node* %9 to %struct.tree_decl_common*, !dbg !10448
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !10448
  %10 = load i32, i32* %align, align 8, !dbg !10448
  %div = udiv i32 %10, 8, !dbg !10448
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.84, i64 0, i64 0), i64 %8, i32 %div), !dbg !10448
  br label %do.end, !dbg !10448

do.end:                                           ; preds = %do.body2
  br label %do.end5, !dbg !10446

do.end5:                                          ; preds = %do.end
  ret i8 1, !dbg !10450
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @emit_common(%union.tree_node* %decl, i8* %name, i64 %size, i64 %rounded) #0 !dbg !10451 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %rounded.addr = alloca i64, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10452, metadata !DIExpression()), !dbg !10453
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10454, metadata !DIExpression()), !dbg !10455
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !10456, metadata !DIExpression()), !dbg !10457
  store i64 %rounded, i64* %rounded.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %rounded.addr, metadata !10458, metadata !DIExpression()), !dbg !10459
  br label %do.body, !dbg !10460

do.body:                                          ; preds = %entry
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10461
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.83, i64 0, i64 0)), !dbg !10461
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10461
  %2 = load i8*, i8** %name.addr, align 8, !dbg !10461
  call void @assemble_name(%struct._IO_FILE* %1, i8* %2), !dbg !10461
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10461
  %4 = load i64, i64* %size.addr, align 8, !dbg !10461
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10461
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !10461
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !10461
  %6 = load i32, i32* %align, align 8, !dbg !10461
  %div = udiv i32 %6, 8, !dbg !10461
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.84, i64 0, i64 0), i64 %4, i32 %div), !dbg !10461
  br label %do.end, !dbg !10461

do.end:                                           ; preds = %do.body
  ret i8 1, !dbg !10463
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @emit_bss(%union.tree_node* %decl, i8* %name, i64 %size, i64 %rounded) #0 !dbg !10464 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %rounded.addr = alloca i64, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10465, metadata !DIExpression()), !dbg !10466
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10467, metadata !DIExpression()), !dbg !10468
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !10469, metadata !DIExpression()), !dbg !10470
  store i64 %rounded, i64* %rounded.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %rounded.addr, metadata !10471, metadata !DIExpression()), !dbg !10472
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10473
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10473
  %2 = load i8*, i8** %name.addr, align 8, !dbg !10473
  %3 = load i64, i64* %size.addr, align 8, !dbg !10473
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10473
  %decl_common = bitcast %union.tree_node* %4 to %struct.tree_decl_common*, !dbg !10473
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !10473
  %5 = load i32, i32* %align, align 8, !dbg !10473
  call void @asm_output_aligned_bss(%struct._IO_FILE* %0, %union.tree_node* %1, i8* %2, i64 %3, i32 %5), !dbg !10473
  ret i8 1, !dbg !10474
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @decl_default_tls_model(%union.tree_node* %decl) #0 !dbg !10475 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %kind = alloca i32, align 4
  %is_local = alloca i8, align 1
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10478, metadata !DIExpression()), !dbg !10479
  call void @llvm.dbg.declare(metadata i32* %kind, metadata !10480, metadata !DIExpression()), !dbg !10481
  call void @llvm.dbg.declare(metadata i8* %is_local, metadata !10482, metadata !DIExpression()), !dbg !10483
  %0 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 49), align 8, !dbg !10484
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10485
  %call = call zeroext i8 %0(%union.tree_node* %1), !dbg !10486
  store i8 %call, i8* %is_local, align 1, !dbg !10487
  %2 = load i32, i32* @flag_shlib, align 4, !dbg !10488
  %tobool = icmp ne i32 %2, 0, !dbg !10488
  br i1 %tobool, label %if.else3, label %if.then, !dbg !10490

if.then:                                          ; preds = %entry
  %3 = load i8, i8* %is_local, align 1, !dbg !10491
  %tobool1 = icmp ne i8 %3, 0, !dbg !10491
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !10494

if.then2:                                         ; preds = %if.then
  store i32 5, i32* %kind, align 4, !dbg !10495
  br label %if.end, !dbg !10496

if.else:                                          ; preds = %if.then
  store i32 4, i32* %kind, align 4, !dbg !10497
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end9, !dbg !10498

if.else3:                                         ; preds = %entry
  %4 = load i32, i32* @optimize, align 4, !dbg !10499
  %tobool4 = icmp ne i32 %4, 0, !dbg !10499
  br i1 %tobool4, label %land.lhs.true, label %if.else7, !dbg !10501

land.lhs.true:                                    ; preds = %if.else3
  %5 = load i8, i8* %is_local, align 1, !dbg !10502
  %conv = zext i8 %5 to i32, !dbg !10502
  %tobool5 = icmp ne i32 %conv, 0, !dbg !10502
  br i1 %tobool5, label %if.then6, label %if.else7, !dbg !10503

if.then6:                                         ; preds = %land.lhs.true
  store i32 3, i32* %kind, align 4, !dbg !10504
  br label %if.end8, !dbg !10505

if.else7:                                         ; preds = %land.lhs.true, %if.else3
  store i32 2, i32* %kind, align 4, !dbg !10506
  br label %if.end8

if.end8:                                          ; preds = %if.else7, %if.then6
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.end
  %6 = load i32, i32* %kind, align 4, !dbg !10507
  %7 = load i32, i32* @flag_tls_default, align 4, !dbg !10509
  %cmp = icmp ult i32 %6, %7, !dbg !10510
  br i1 %cmp, label %if.then11, label %if.end12, !dbg !10511

if.then11:                                        ; preds = %if.end9
  %8 = load i32, i32* @flag_tls_default, align 4, !dbg !10512
  store i32 %8, i32* %kind, align 4, !dbg !10513
  br label %if.end12, !dbg !10514

if.end12:                                         ; preds = %if.then11, %if.end9
  %9 = load i32, i32* %kind, align 4, !dbg !10515
  ret i32 %9, !dbg !10516
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @default_section_type_flags(%union.tree_node* %decl, i8* %name, i32 %reloc) #0 !dbg !10517 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %reloc.addr = alloca i32, align 4
  %flags = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10520, metadata !DIExpression()), !dbg !10521
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10522, metadata !DIExpression()), !dbg !10523
  store i32 %reloc, i32* %reloc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reloc.addr, metadata !10524, metadata !DIExpression()), !dbg !10525
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !10526, metadata !DIExpression()), !dbg !10527
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10528
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !10528
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !10530

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10531
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10531
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10531
  %bf.load = load i64, i64* %2, align 8, !dbg !10531
  %bf.clear = and i64 %bf.load, 65535, !dbg !10531
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10531
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !10532
  br i1 %cmp, label %if.then, label %if.else, !dbg !10533

if.then:                                          ; preds = %land.lhs.true
  store i32 256, i32* %flags, align 4, !dbg !10534
  br label %if.end30, !dbg !10535

if.else:                                          ; preds = %land.lhs.true, %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10536
  %tobool1 = icmp ne %union.tree_node* %3, null, !dbg !10536
  br i1 %tobool1, label %land.lhs.true2, label %if.else5, !dbg !10538

land.lhs.true2:                                   ; preds = %if.else
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10539
  %5 = load i32, i32* %reloc.addr, align 4, !dbg !10540
  %call = call zeroext i8 @decl_readonly_section(%union.tree_node* %4, i32 %5), !dbg !10541
  %conv = zext i8 %call to i32, !dbg !10541
  %tobool3 = icmp ne i32 %conv, 0, !dbg !10541
  br i1 %tobool3, label %if.then4, label %if.else5, !dbg !10542

if.then4:                                         ; preds = %land.lhs.true2
  store i32 0, i32* %flags, align 4, !dbg !10543
  br label %if.end29, !dbg !10544

if.else5:                                         ; preds = %land.lhs.true2, %if.else
  %6 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !10545
  %tobool6 = icmp ne %union.tree_node* %6, null, !dbg !10545
  br i1 %tobool6, label %land.lhs.true7, label %if.else16, !dbg !10547

land.lhs.true7:                                   ; preds = %if.else5
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10548
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !10548
  %tobool8 = icmp ne %struct.function* %add.ptr, null, !dbg !10548
  br i1 %tobool8, label %land.lhs.true9, label %if.else16, !dbg !10549

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %8 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !10550
  %tobool10 = icmp ne i8* %8, null, !dbg !10551
  br i1 %tobool10, label %land.lhs.true11, label %if.else16, !dbg !10552

land.lhs.true11:                                  ; preds = %land.lhs.true9
  %9 = load i8*, i8** %name.addr, align 8, !dbg !10553
  %10 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 4, i32 4), align 8, !dbg !10554
  %call12 = call i32 @strcmp(i8* %9, i8* %10), !dbg !10555
  %cmp13 = icmp eq i32 %call12, 0, !dbg !10556
  br i1 %cmp13, label %if.then15, label %if.else16, !dbg !10557

if.then15:                                        ; preds = %land.lhs.true11
  store i32 256, i32* %flags, align 4, !dbg !10558
  br label %if.end28, !dbg !10559

if.else16:                                        ; preds = %land.lhs.true11, %land.lhs.true9, %land.lhs.true7, %if.else5
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10560
  %tobool17 = icmp ne %union.tree_node* %11, null, !dbg !10560
  br i1 %tobool17, label %if.else27, label %land.lhs.true18, !dbg !10562

land.lhs.true18:                                  ; preds = %if.else16
  %12 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !10563
  %tobool19 = icmp ne %union.tree_node* %12, null, !dbg !10563
  br i1 %tobool19, label %lor.lhs.false, label %land.lhs.true22, !dbg !10564

lor.lhs.false:                                    ; preds = %land.lhs.true18
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10565
  %add.ptr20 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !10565
  %tobool21 = icmp ne %struct.function* %add.ptr20, null, !dbg !10565
  br i1 %tobool21, label %if.else27, label %land.lhs.true22, !dbg !10566

land.lhs.true22:                                  ; preds = %lor.lhs.false, %land.lhs.true18
  %14 = load i8*, i8** %name.addr, align 8, !dbg !10567
  %call23 = call i32 @strcmp(i8* %14, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !10568
  %cmp24 = icmp eq i32 %call23, 0, !dbg !10569
  br i1 %cmp24, label %if.then26, label %if.else27, !dbg !10570

if.then26:                                        ; preds = %land.lhs.true22
  store i32 256, i32* %flags, align 4, !dbg !10571
  br label %if.end, !dbg !10572

if.else27:                                        ; preds = %land.lhs.true22, %lor.lhs.false, %if.else16
  store i32 512, i32* %flags, align 4, !dbg !10573
  br label %if.end

if.end:                                           ; preds = %if.else27, %if.then26
  br label %if.end28

if.end28:                                         ; preds = %if.end, %if.then15
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then4
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10574
  %tobool31 = icmp ne %union.tree_node* %15, null, !dbg !10574
  br i1 %tobool31, label %land.lhs.true32, label %if.end36, !dbg !10576

land.lhs.true32:                                  ; preds = %if.end30
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10577
  %decl_with_vis = bitcast %union.tree_node* %16 to %struct.tree_decl_with_vis*, !dbg !10577
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 3, !dbg !10577
  %17 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !10577
  %cmp33 = icmp ne %union.tree_node* %17, null, !dbg !10577
  br i1 %cmp33, label %if.then35, label %if.end36, !dbg !10578

if.then35:                                        ; preds = %land.lhs.true32
  %18 = load i32, i32* %flags, align 4, !dbg !10579
  %or = or i32 %18, 2048, !dbg !10579
  store i32 %or, i32* %flags, align 4, !dbg !10579
  br label %if.end36, !dbg !10580

if.end36:                                         ; preds = %if.then35, %land.lhs.true32, %if.end30
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10581
  %tobool37 = icmp ne %union.tree_node* %19, null, !dbg !10581
  br i1 %tobool37, label %land.lhs.true38, label %if.end53, !dbg !10583

land.lhs.true38:                                  ; preds = %if.end36
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10584
  %base39 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !10584
  %21 = bitcast %struct.tree_base* %base39 to i64*, !dbg !10584
  %bf.load40 = load i64, i64* %21, align 8, !dbg !10584
  %bf.clear41 = and i64 %bf.load40, 65535, !dbg !10584
  %bf.cast42 = trunc i64 %bf.clear41 to i32, !dbg !10584
  %cmp43 = icmp eq i32 %bf.cast42, 32, !dbg !10585
  br i1 %cmp43, label %land.lhs.true45, label %if.end53, !dbg !10586

land.lhs.true45:                                  ; preds = %land.lhs.true38
  %22 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10587
  %decl_with_vis46 = bitcast %union.tree_node* %22 to %struct.tree_decl_with_vis*, !dbg !10587
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis46, i32 0, i32 4, !dbg !10587
  %23 = bitcast i24* %tls_model to i32*, !dbg !10587
  %bf.load47 = load i32, i32* %23, align 8, !dbg !10587
  %bf.lshr = lshr i32 %bf.load47, 13, !dbg !10587
  %bf.clear48 = and i32 %bf.lshr, 7, !dbg !10587
  %cmp49 = icmp sge i32 %bf.clear48, 2, !dbg !10587
  br i1 %cmp49, label %if.then51, label %if.end53, !dbg !10588

if.then51:                                        ; preds = %land.lhs.true45
  %24 = load i32, i32* %flags, align 4, !dbg !10589
  %or52 = or i32 %24, 262656, !dbg !10589
  store i32 %or52, i32* %flags, align 4, !dbg !10589
  br label %if.end53, !dbg !10590

if.end53:                                         ; preds = %if.then51, %land.lhs.true45, %land.lhs.true38, %if.end36
  %25 = load i8*, i8** %name.addr, align 8, !dbg !10591
  %call54 = call i32 @strcmp(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.105, i64 0, i64 0)), !dbg !10593
  %cmp55 = icmp eq i32 %call54, 0, !dbg !10594
  br i1 %cmp55, label %if.then77, label %lor.lhs.false57, !dbg !10595

lor.lhs.false57:                                  ; preds = %if.end53
  %26 = load i8*, i8** %name.addr, align 8, !dbg !10596
  %call58 = call i32 @strncmp(i8* %26, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i64 0, i64 0), i64 5), !dbg !10597
  %cmp59 = icmp eq i32 %call58, 0, !dbg !10598
  br i1 %cmp59, label %if.then77, label %lor.lhs.false61, !dbg !10599

lor.lhs.false61:                                  ; preds = %lor.lhs.false57
  %27 = load i8*, i8** %name.addr, align 8, !dbg !10600
  %call62 = call i32 @strncmp(i8* %27, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.107, i64 0, i64 0), i64 16), !dbg !10601
  %cmp63 = icmp eq i32 %call62, 0, !dbg !10602
  br i1 %cmp63, label %if.then77, label %lor.lhs.false65, !dbg !10603

lor.lhs.false65:                                  ; preds = %lor.lhs.false61
  %28 = load i8*, i8** %name.addr, align 8, !dbg !10604
  %call66 = call i32 @strcmp(i8* %28, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.108, i64 0, i64 0)), !dbg !10605
  %cmp67 = icmp eq i32 %call66, 0, !dbg !10606
  br i1 %cmp67, label %if.then77, label %lor.lhs.false69, !dbg !10607

lor.lhs.false69:                                  ; preds = %lor.lhs.false65
  %29 = load i8*, i8** %name.addr, align 8, !dbg !10608
  %call70 = call i32 @strncmp(i8* %29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.109, i64 0, i64 0), i64 6), !dbg !10609
  %cmp71 = icmp eq i32 %call70, 0, !dbg !10610
  br i1 %cmp71, label %if.then77, label %lor.lhs.false73, !dbg !10611

lor.lhs.false73:                                  ; preds = %lor.lhs.false69
  %30 = load i8*, i8** %name.addr, align 8, !dbg !10612
  %call74 = call i32 @strncmp(i8* %30, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.110, i64 0, i64 0), i64 17), !dbg !10613
  %cmp75 = icmp eq i32 %call74, 0, !dbg !10614
  br i1 %cmp75, label %if.then77, label %if.end79, !dbg !10615

if.then77:                                        ; preds = %lor.lhs.false73, %lor.lhs.false69, %lor.lhs.false65, %lor.lhs.false61, %lor.lhs.false57, %if.end53
  %31 = load i32, i32* %flags, align 4, !dbg !10616
  %or78 = or i32 %31, 8192, !dbg !10616
  store i32 %or78, i32* %flags, align 4, !dbg !10616
  br label %if.end79, !dbg !10617

if.end79:                                         ; preds = %if.then77, %lor.lhs.false73
  %32 = load i8*, i8** %name.addr, align 8, !dbg !10618
  %call80 = call i32 @strcmp(i8* %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i64 0, i64 0)), !dbg !10620
  %cmp81 = icmp eq i32 %call80, 0, !dbg !10621
  br i1 %cmp81, label %if.then91, label %lor.lhs.false83, !dbg !10622

lor.lhs.false83:                                  ; preds = %if.end79
  %33 = load i8*, i8** %name.addr, align 8, !dbg !10623
  %call84 = call i32 @strncmp(i8* %33, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112, i64 0, i64 0), i64 7), !dbg !10624
  %cmp85 = icmp eq i32 %call84, 0, !dbg !10625
  br i1 %cmp85, label %if.then91, label %lor.lhs.false87, !dbg !10626

lor.lhs.false87:                                  ; preds = %lor.lhs.false83
  %34 = load i8*, i8** %name.addr, align 8, !dbg !10627
  %call88 = call i32 @strncmp(i8* %34, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.113, i64 0, i64 0), i64 17), !dbg !10628
  %cmp89 = icmp eq i32 %call88, 0, !dbg !10629
  br i1 %cmp89, label %if.then91, label %if.end93, !dbg !10630

if.then91:                                        ; preds = %lor.lhs.false87, %lor.lhs.false83, %if.end79
  %35 = load i32, i32* %flags, align 4, !dbg !10631
  %or92 = or i32 %35, 262144, !dbg !10631
  store i32 %or92, i32* %flags, align 4, !dbg !10631
  br label %if.end93, !dbg !10632

if.end93:                                         ; preds = %if.then91, %lor.lhs.false87
  %36 = load i8*, i8** %name.addr, align 8, !dbg !10633
  %call94 = call i32 @strcmp(i8* %36, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i64 0, i64 0)), !dbg !10635
  %cmp95 = icmp eq i32 %call94, 0, !dbg !10636
  br i1 %cmp95, label %if.then105, label %lor.lhs.false97, !dbg !10637

lor.lhs.false97:                                  ; preds = %if.end93
  %37 = load i8*, i8** %name.addr, align 8, !dbg !10638
  %call98 = call i32 @strncmp(i8* %37, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.115, i64 0, i64 0), i64 6), !dbg !10639
  %cmp99 = icmp eq i32 %call98, 0, !dbg !10640
  br i1 %cmp99, label %if.then105, label %lor.lhs.false101, !dbg !10641

lor.lhs.false101:                                 ; preds = %lor.lhs.false97
  %38 = load i8*, i8** %name.addr, align 8, !dbg !10642
  %call102 = call i32 @strncmp(i8* %38, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.116, i64 0, i64 0), i64 17), !dbg !10643
  %cmp103 = icmp eq i32 %call102, 0, !dbg !10644
  br i1 %cmp103, label %if.then105, label %if.end107, !dbg !10645

if.then105:                                       ; preds = %lor.lhs.false101, %lor.lhs.false97, %if.end93
  %39 = load i32, i32* %flags, align 4, !dbg !10646
  %or106 = or i32 %39, 270336, !dbg !10646
  store i32 %or106, i32* %flags, align 4, !dbg !10646
  br label %if.end107, !dbg !10647

if.end107:                                        ; preds = %if.then105, %lor.lhs.false101
  %40 = load i32, i32* %flags, align 4, !dbg !10648
  %and = and i32 %40, 270592, !dbg !10650
  %tobool108 = icmp ne i32 %and, 0, !dbg !10650
  br i1 %tobool108, label %if.end123, label %land.lhs.true109, !dbg !10651

land.lhs.true109:                                 ; preds = %if.end107
  %41 = load i8*, i8** %name.addr, align 8, !dbg !10652
  %call110 = call i32 @strcmp(i8* %41, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.117, i64 0, i64 0)), !dbg !10653
  %cmp111 = icmp eq i32 %call110, 0, !dbg !10654
  br i1 %cmp111, label %if.then121, label %lor.lhs.false113, !dbg !10655

lor.lhs.false113:                                 ; preds = %land.lhs.true109
  %42 = load i8*, i8** %name.addr, align 8, !dbg !10656
  %call114 = call i32 @strcmp(i8* %42, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.118, i64 0, i64 0)), !dbg !10657
  %cmp115 = icmp eq i32 %call114, 0, !dbg !10658
  br i1 %cmp115, label %if.then121, label %lor.lhs.false117, !dbg !10659

lor.lhs.false117:                                 ; preds = %lor.lhs.false113
  %43 = load i8*, i8** %name.addr, align 8, !dbg !10660
  %call118 = call i32 @strcmp(i8* %43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.119, i64 0, i64 0)), !dbg !10661
  %cmp119 = icmp eq i32 %call118, 0, !dbg !10662
  br i1 %cmp119, label %if.then121, label %if.end123, !dbg !10663

if.then121:                                       ; preds = %lor.lhs.false117, %lor.lhs.false113, %land.lhs.true109
  %44 = load i32, i32* %flags, align 4, !dbg !10664
  %or122 = or i32 %44, 524288, !dbg !10664
  store i32 %or122, i32* %flags, align 4, !dbg !10664
  br label %if.end123, !dbg !10665

if.end123:                                        ; preds = %if.then121, %lor.lhs.false117, %if.end107
  %45 = load i32, i32* %flags, align 4, !dbg !10666
  ret i32 %45, !dbg !10667
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @decl_readonly_section(%union.tree_node* %decl, i32 %reloc) #0 !dbg !10668 {
entry:
  %retval = alloca i8, align 1
  %decl.addr = alloca %union.tree_node*, align 8
  %reloc.addr = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10671, metadata !DIExpression()), !dbg !10672
  store i32 %reloc, i32* %reloc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reloc.addr, metadata !10673, metadata !DIExpression()), !dbg !10674
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10675
  %1 = load i32, i32* %reloc.addr, align 4, !dbg !10676
  %call = call i32 @categorize_decl_for_section(%union.tree_node* %0, i32 %1), !dbg !10677
  switch i32 %call, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb
  ], !dbg !10678

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !10679
  br label %return, !dbg !10679

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !10681
  br label %return, !dbg !10681

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !10682
  ret i8 %2, !dbg !10682
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @have_global_bss_p() #0 !dbg !10683 {
entry:
  %0 = load %union.section*, %union.section** @bss_noswitch_section, align 8, !dbg !10684
  %tobool = icmp ne %union.section* %0, null, !dbg !10684
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !10685

lor.rhs:                                          ; preds = %entry
  %1 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 111), align 2, !dbg !10686
  %conv = zext i8 %1 to i32, !dbg !10687
  %tobool1 = icmp ne i32 %conv, 0, !dbg !10685
  br label %lor.end, !dbg !10685

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %tobool1, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32, !dbg !10685
  %conv2 = trunc i32 %lor.ext to i8, !dbg !10684
  ret i8 %conv2, !dbg !10688
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_no_named_section(i8* %name, i32 %flags, %union.tree_node* %decl) #0 !dbg !10689 {
entry:
  %name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10692, metadata !DIExpression()), !dbg !10693
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10694, metadata !DIExpression()), !dbg !10695
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10696, metadata !DIExpression()), !dbg !10697
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 6089, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !10698
  ret void, !dbg !10699
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_elf_asm_named_section(i8* %name, i32 %flags, %union.tree_node* %decl) #0 !dbg !10700 {
entry:
  %name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  %flagchars = alloca [10 x i8], align 1
  %f = alloca i8*, align 8
  %type = alloca i8*, align 8
  %format = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10701, metadata !DIExpression()), !dbg !10702
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10703, metadata !DIExpression()), !dbg !10704
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10705, metadata !DIExpression()), !dbg !10706
  call void @llvm.dbg.declare(metadata [10 x i8]* %flagchars, metadata !10707, metadata !DIExpression()), !dbg !10711
  call void @llvm.dbg.declare(metadata i8** %f, metadata !10712, metadata !DIExpression()), !dbg !10713
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %flagchars, i64 0, i64 0, !dbg !10714
  store i8* %arraydecay, i8** %f, align 8, !dbg !10713
  %0 = load i32, i32* %flags.addr, align 4, !dbg !10715
  %and = and i32 %0, 2048, !dbg !10717
  %tobool = icmp ne i32 %and, 0, !dbg !10717
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !10718

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !10719
  %and1 = and i32 %1, 1048576, !dbg !10720
  %tobool2 = icmp ne i32 %and1, 0, !dbg !10720
  br i1 %tobool2, label %if.then, label %if.end, !dbg !10721

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10722
  %3 = load i8*, i8** %name.addr, align 8, !dbg !10724
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.120, i64 0, i64 0), i8* %3), !dbg !10725
  br label %return, !dbg !10726

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load i32, i32* %flags.addr, align 4, !dbg !10727
  %and3 = and i32 %4, 1024, !dbg !10729
  %tobool4 = icmp ne i32 %and3, 0, !dbg !10729
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !10730

if.then5:                                         ; preds = %if.end
  %5 = load i8*, i8** %f, align 8, !dbg !10731
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !10731
  store i8* %incdec.ptr, i8** %f, align 8, !dbg !10731
  store i8 97, i8* %5, align 1, !dbg !10732
  br label %if.end6, !dbg !10733

if.end6:                                          ; preds = %if.then5, %if.end
  %6 = load i32, i32* %flags.addr, align 4, !dbg !10734
  %and7 = and i32 %6, 512, !dbg !10736
  %tobool8 = icmp ne i32 %and7, 0, !dbg !10736
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !10737

if.then9:                                         ; preds = %if.end6
  %7 = load i8*, i8** %f, align 8, !dbg !10738
  %incdec.ptr10 = getelementptr inbounds i8, i8* %7, i32 1, !dbg !10738
  store i8* %incdec.ptr10, i8** %f, align 8, !dbg !10738
  store i8 119, i8* %7, align 1, !dbg !10739
  br label %if.end11, !dbg !10740

if.end11:                                         ; preds = %if.then9, %if.end6
  %8 = load i32, i32* %flags.addr, align 4, !dbg !10741
  %and12 = and i32 %8, 256, !dbg !10743
  %tobool13 = icmp ne i32 %and12, 0, !dbg !10743
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !10744

if.then14:                                        ; preds = %if.end11
  %9 = load i8*, i8** %f, align 8, !dbg !10745
  %incdec.ptr15 = getelementptr inbounds i8, i8* %9, i32 1, !dbg !10745
  store i8* %incdec.ptr15, i8** %f, align 8, !dbg !10745
  store i8 120, i8* %9, align 1, !dbg !10746
  br label %if.end16, !dbg !10747

if.end16:                                         ; preds = %if.then14, %if.end11
  %10 = load i32, i32* %flags.addr, align 4, !dbg !10748
  %and17 = and i32 %10, 4096, !dbg !10750
  %tobool18 = icmp ne i32 %and17, 0, !dbg !10750
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !10751

if.then19:                                        ; preds = %if.end16
  %11 = load i8*, i8** %f, align 8, !dbg !10752
  %incdec.ptr20 = getelementptr inbounds i8, i8* %11, i32 1, !dbg !10752
  store i8* %incdec.ptr20, i8** %f, align 8, !dbg !10752
  store i8 115, i8* %11, align 1, !dbg !10753
  br label %if.end21, !dbg !10754

if.end21:                                         ; preds = %if.then19, %if.end16
  %12 = load i32, i32* %flags.addr, align 4, !dbg !10755
  %and22 = and i32 %12, 32768, !dbg !10757
  %tobool23 = icmp ne i32 %and22, 0, !dbg !10757
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !10758

if.then24:                                        ; preds = %if.end21
  %13 = load i8*, i8** %f, align 8, !dbg !10759
  %incdec.ptr25 = getelementptr inbounds i8, i8* %13, i32 1, !dbg !10759
  store i8* %incdec.ptr25, i8** %f, align 8, !dbg !10759
  store i8 77, i8* %13, align 1, !dbg !10760
  br label %if.end26, !dbg !10761

if.end26:                                         ; preds = %if.then24, %if.end21
  %14 = load i32, i32* %flags.addr, align 4, !dbg !10762
  %and27 = and i32 %14, 65536, !dbg !10764
  %tobool28 = icmp ne i32 %and27, 0, !dbg !10764
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !10765

if.then29:                                        ; preds = %if.end26
  %15 = load i8*, i8** %f, align 8, !dbg !10766
  %incdec.ptr30 = getelementptr inbounds i8, i8* %15, i32 1, !dbg !10766
  store i8* %incdec.ptr30, i8** %f, align 8, !dbg !10766
  store i8 83, i8* %15, align 1, !dbg !10767
  br label %if.end31, !dbg !10768

if.end31:                                         ; preds = %if.then29, %if.end26
  %16 = load i32, i32* %flags.addr, align 4, !dbg !10769
  %and32 = and i32 %16, 262144, !dbg !10771
  %tobool33 = icmp ne i32 %and32, 0, !dbg !10771
  br i1 %tobool33, label %if.then34, label %if.end36, !dbg !10772

if.then34:                                        ; preds = %if.end31
  %17 = load i8*, i8** %f, align 8, !dbg !10773
  %incdec.ptr35 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !10773
  store i8* %incdec.ptr35, i8** %f, align 8, !dbg !10773
  store i8 84, i8* %17, align 1, !dbg !10774
  br label %if.end36, !dbg !10775

if.end36:                                         ; preds = %if.then34, %if.end31
  %18 = load i32, i32* %flags.addr, align 4, !dbg !10776
  %and37 = and i32 %18, 2048, !dbg !10778
  %tobool38 = icmp ne i32 %and37, 0, !dbg !10778
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !10779

if.then39:                                        ; preds = %if.end36
  %19 = load i8*, i8** %f, align 8, !dbg !10780
  %incdec.ptr40 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !10780
  store i8* %incdec.ptr40, i8** %f, align 8, !dbg !10780
  store i8 71, i8* %19, align 1, !dbg !10781
  br label %if.end41, !dbg !10782

if.end41:                                         ; preds = %if.then39, %if.end36
  %20 = load i8*, i8** %f, align 8, !dbg !10783
  store i8 0, i8* %20, align 1, !dbg !10784
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10785
  %22 = load i8*, i8** %name.addr, align 8, !dbg !10786
  %arraydecay42 = getelementptr inbounds [10 x i8], [10 x i8]* %flagchars, i64 0, i64 0, !dbg !10787
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.121, i64 0, i64 0), i8* %22, i8* %arraydecay42), !dbg !10788
  %23 = load i32, i32* %flags.addr, align 4, !dbg !10789
  %and44 = and i32 %23, 524288, !dbg !10791
  %tobool45 = icmp ne i32 %and44, 0, !dbg !10791
  br i1 %tobool45, label %if.end70, label %if.then46, !dbg !10792

if.then46:                                        ; preds = %if.end41
  call void @llvm.dbg.declare(metadata i8** %type, metadata !10793, metadata !DIExpression()), !dbg !10795
  call void @llvm.dbg.declare(metadata i8** %format, metadata !10796, metadata !DIExpression()), !dbg !10797
  %24 = load i32, i32* %flags.addr, align 4, !dbg !10798
  %and47 = and i32 %24, 8192, !dbg !10800
  %tobool48 = icmp ne i32 %and47, 0, !dbg !10800
  br i1 %tobool48, label %if.then49, label %if.else, !dbg !10801

if.then49:                                        ; preds = %if.then46
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.122, i64 0, i64 0), i8** %type, align 8, !dbg !10802
  br label %if.end50, !dbg !10803

if.else:                                          ; preds = %if.then46
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.123, i64 0, i64 0), i8** %type, align 8, !dbg !10804
  br label %if.end50

if.end50:                                         ; preds = %if.else, %if.then49
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.124, i64 0, i64 0), i8** %format, align 8, !dbg !10805
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10806
  %26 = load i8*, i8** %format, align 8, !dbg !10807
  %27 = load i8*, i8** %type, align 8, !dbg !10808
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* %26, i8* %27), !dbg !10809
  %28 = load i32, i32* %flags.addr, align 4, !dbg !10810
  %and52 = and i32 %28, 255, !dbg !10812
  %tobool53 = icmp ne i32 %and52, 0, !dbg !10812
  br i1 %tobool53, label %if.then54, label %if.end57, !dbg !10813

if.then54:                                        ; preds = %if.end50
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10814
  %30 = load i32, i32* %flags.addr, align 4, !dbg !10815
  %and55 = and i32 %30, 255, !dbg !10816
  %call56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.125, i64 0, i64 0), i32 %and55), !dbg !10817
  br label %if.end57, !dbg !10817

if.end57:                                         ; preds = %if.then54, %if.end50
  %31 = load i32, i32* %flags.addr, align 4, !dbg !10818
  %and58 = and i32 %31, 2048, !dbg !10820
  %tobool59 = icmp ne i32 %and58, 0, !dbg !10820
  br i1 %tobool59, label %if.then60, label %if.end69, !dbg !10821

if.then60:                                        ; preds = %if.end57
  %32 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10822
  %base = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !10822
  %33 = bitcast %struct.tree_base* %base to i64*, !dbg !10822
  %bf.load = load i64, i64* %33, align 8, !dbg !10822
  %bf.clear = and i64 %bf.load, 65535, !dbg !10822
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10822
  %cmp = icmp eq i32 %bf.cast, 1, !dbg !10825
  br i1 %cmp, label %if.then61, label %if.else63, !dbg !10826

if.then61:                                        ; preds = %if.then60
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10827
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10828
  %identifier = bitcast %union.tree_node* %35 to %struct.tree_identifier*, !dbg !10828
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !10828
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !10828
  %36 = load i8*, i8** %str, align 8, !dbg !10828
  %call62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.126, i64 0, i64 0), i8* %36), !dbg !10829
  br label %if.end68, !dbg !10829

if.else63:                                        ; preds = %if.then60
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10830
  %38 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10831
  %decl_with_vis = bitcast %union.tree_node* %38 to %struct.tree_decl_with_vis*, !dbg !10831
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 3, !dbg !10831
  %39 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !10831
  %identifier64 = bitcast %union.tree_node* %39 to %struct.tree_identifier*, !dbg !10831
  %id65 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier64, i32 0, i32 1, !dbg !10831
  %str66 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id65, i32 0, i32 0, !dbg !10831
  %40 = load i8*, i8** %str66, align 8, !dbg !10831
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.126, i64 0, i64 0), i8* %40), !dbg !10832
  br label %if.end68

if.end68:                                         ; preds = %if.else63, %if.then61
  br label %if.end69, !dbg !10833

if.end69:                                         ; preds = %if.end68, %if.end57
  br label %if.end70, !dbg !10834

if.end70:                                         ; preds = %if.end69, %if.end41
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10835
  %call71 = call i32 @putc(i32 10, %struct._IO_FILE* %41), !dbg !10836
  br label %return, !dbg !10837

return:                                           ; preds = %if.end70, %if.then
  ret void, !dbg !10837
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_coff_asm_named_section(i8* %name, i32 %flags, %union.tree_node* %decl) #0 !dbg !10838 {
entry:
  %name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  %flagchars = alloca [8 x i8], align 1
  %f = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10839, metadata !DIExpression()), !dbg !10840
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10841, metadata !DIExpression()), !dbg !10842
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10843, metadata !DIExpression()), !dbg !10844
  call void @llvm.dbg.declare(metadata [8 x i8]* %flagchars, metadata !10845, metadata !DIExpression()), !dbg !10849
  call void @llvm.dbg.declare(metadata i8** %f, metadata !10850, metadata !DIExpression()), !dbg !10851
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %flagchars, i64 0, i64 0, !dbg !10852
  store i8* %arraydecay, i8** %f, align 8, !dbg !10851
  %0 = load i32, i32* %flags.addr, align 4, !dbg !10853
  %and = and i32 %0, 512, !dbg !10855
  %tobool = icmp ne i32 %and, 0, !dbg !10855
  br i1 %tobool, label %if.then, label %if.end, !dbg !10856

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %f, align 8, !dbg !10857
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i32 1, !dbg !10857
  store i8* %incdec.ptr, i8** %f, align 8, !dbg !10857
  store i8 119, i8* %1, align 1, !dbg !10858
  br label %if.end, !dbg !10859

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !10860
  %and1 = and i32 %2, 256, !dbg !10862
  %tobool2 = icmp ne i32 %and1, 0, !dbg !10862
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !10863

if.then3:                                         ; preds = %if.end
  %3 = load i8*, i8** %f, align 8, !dbg !10864
  %incdec.ptr4 = getelementptr inbounds i8, i8* %3, i32 1, !dbg !10864
  store i8* %incdec.ptr4, i8** %f, align 8, !dbg !10864
  store i8 120, i8* %3, align 1, !dbg !10865
  br label %if.end5, !dbg !10866

if.end5:                                          ; preds = %if.then3, %if.end
  %4 = load i8*, i8** %f, align 8, !dbg !10867
  store i8 0, i8* %4, align 1, !dbg !10868
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10869
  %6 = load i8*, i8** %name.addr, align 8, !dbg !10870
  %arraydecay6 = getelementptr inbounds [8 x i8], [8 x i8]* %flagchars, i64 0, i64 0, !dbg !10871
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.127, i64 0, i64 0), i8* %6, i8* %arraydecay6), !dbg !10872
  ret void, !dbg !10873
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_pe_asm_named_section(i8* %name, i32 %flags, %union.tree_node* %decl) #0 !dbg !10874 {
entry:
  %name.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !10875, metadata !DIExpression()), !dbg !10876
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10877, metadata !DIExpression()), !dbg !10878
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10879, metadata !DIExpression()), !dbg !10880
  %0 = load i8*, i8** %name.addr, align 8, !dbg !10881
  %1 = load i32, i32* %flags.addr, align 4, !dbg !10882
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10883
  call void @default_coff_asm_named_section(i8* %0, i32 %1, %union.tree_node* %2), !dbg !10884
  %3 = load i32, i32* %flags.addr, align 4, !dbg !10885
  %and = and i32 %3, 2048, !dbg !10887
  %tobool = icmp ne i32 %and, 0, !dbg !10887
  br i1 %tobool, label %if.then, label %if.end, !dbg !10888

if.then:                                          ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !10889
  %5 = load i32, i32* %flags.addr, align 4, !dbg !10891
  %and1 = and i32 %5, 256, !dbg !10892
  %tobool2 = icmp ne i32 %and1, 0, !dbg !10891
  %6 = zext i1 %tobool2 to i64, !dbg !10891
  %cond = select i1 %tobool2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.129, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.130, i64 0, i64 0), !dbg !10891
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.128, i64 0, i64 0), i8* %cond), !dbg !10893
  br label %if.end, !dbg !10894

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !10895
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @default_select_section(%union.tree_node* %decl, i32 %reloc, i64 %align) #0 !dbg !10896 {
entry:
  %retval = alloca %union.section*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %reloc.addr = alloca i32, align 4
  %align.addr = alloca i64, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10899, metadata !DIExpression()), !dbg !10900
  store i32 %reloc, i32* %reloc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reloc.addr, metadata !10901, metadata !DIExpression()), !dbg !10902
  store i64 %align, i64* %align.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %align.addr, metadata !10903, metadata !DIExpression()), !dbg !10904
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10905
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !10905
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !10905
  %bf.load = load i64, i64* %1, align 8, !dbg !10905
  %bf.clear = and i64 %bf.load, 65535, !dbg !10905
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10905
  %idxprom = sext i32 %bf.cast to i64, !dbg !10905
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10905
  %2 = load i32, i32* %arrayidx, align 4, !dbg !10905
  %cmp = icmp eq i32 %2, 3, !dbg !10905
  br i1 %cmp, label %if.then, label %if.else, !dbg !10907

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10908
  %4 = load i32, i32* %reloc.addr, align 4, !dbg !10911
  %call = call zeroext i8 @decl_readonly_section(%union.tree_node* %3, i32 %4), !dbg !10912
  %tobool = icmp ne i8 %call, 0, !dbg !10912
  br i1 %tobool, label %if.then1, label %if.end, !dbg !10913

if.then1:                                         ; preds = %if.then
  %5 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !10914
  store %union.section* %5, %union.section** %retval, align 8, !dbg !10915
  br label %return, !dbg !10915

if.end:                                           ; preds = %if.then
  br label %if.end46, !dbg !10916

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10917
  %base2 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !10917
  %7 = bitcast %struct.tree_base* %base2 to i64*, !dbg !10917
  %bf.load3 = load i64, i64* %7, align 8, !dbg !10917
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !10917
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !10917
  %cmp6 = icmp eq i32 %bf.cast5, 51, !dbg !10919
  br i1 %cmp6, label %if.then7, label %if.else31, !dbg !10920

if.then7:                                         ; preds = %if.else
  %8 = load i32, i32* @flag_pic, align 4, !dbg !10921
  %tobool8 = icmp ne i32 %8, 0, !dbg !10921
  br i1 %tobool8, label %land.lhs.true, label %lor.lhs.false, !dbg !10924

land.lhs.true:                                    ; preds = %if.then7
  %9 = load i32, i32* %reloc.addr, align 4, !dbg !10925
  %tobool9 = icmp ne i32 %9, 0, !dbg !10925
  br i1 %tobool9, label %if.end30, label %lor.lhs.false, !dbg !10926

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.then7
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10927
  %base10 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !10927
  %11 = bitcast %struct.tree_base* %base10 to i64*, !dbg !10927
  %bf.load11 = load i64, i64* %11, align 8, !dbg !10927
  %bf.lshr = lshr i64 %bf.load11, 20, !dbg !10927
  %bf.clear12 = and i64 %bf.lshr, 1, !dbg !10927
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !10927
  %tobool14 = icmp ne i32 %bf.cast13, 0, !dbg !10927
  br i1 %tobool14, label %lor.lhs.false15, label %if.end30, !dbg !10928

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10929
  %base16 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !10929
  %13 = bitcast %struct.tree_base* %base16 to i64*, !dbg !10929
  %bf.load17 = load i64, i64* %13, align 8, !dbg !10929
  %bf.lshr18 = lshr i64 %bf.load17, 16, !dbg !10929
  %bf.clear19 = and i64 %bf.lshr18, 1, !dbg !10929
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !10929
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !10929
  br i1 %tobool21, label %if.end30, label %lor.lhs.false22, !dbg !10930

lor.lhs.false22:                                  ; preds = %lor.lhs.false15
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10931
  %base23 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !10931
  %15 = bitcast %struct.tree_base* %base23 to i64*, !dbg !10931
  %bf.load24 = load i64, i64* %15, align 8, !dbg !10931
  %bf.lshr25 = lshr i64 %bf.load24, 17, !dbg !10931
  %bf.clear26 = and i64 %bf.lshr25, 1, !dbg !10931
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !10931
  %tobool28 = icmp ne i32 %bf.cast27, 0, !dbg !10931
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !10932

if.then29:                                        ; preds = %lor.lhs.false22
  %16 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !10933
  store %union.section* %16, %union.section** %retval, align 8, !dbg !10934
  br label %return, !dbg !10934

if.end30:                                         ; preds = %lor.lhs.false22, %lor.lhs.false15, %lor.lhs.false, %land.lhs.true
  br label %if.end45, !dbg !10935

if.else31:                                        ; preds = %if.else
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10936
  %base32 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !10936
  %18 = bitcast %struct.tree_base* %base32 to i64*, !dbg !10936
  %bf.load33 = load i64, i64* %18, align 8, !dbg !10936
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !10936
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !10936
  %cmp36 = icmp eq i32 %bf.cast35, 28, !dbg !10938
  br i1 %cmp36, label %if.then37, label %if.else38, !dbg !10939

if.then37:                                        ; preds = %if.else31
  %19 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !10940
  store %union.section* %19, %union.section** %retval, align 8, !dbg !10941
  br label %return, !dbg !10941

if.else38:                                        ; preds = %if.else31
  %20 = load i32, i32* @flag_pic, align 4, !dbg !10942
  %tobool39 = icmp ne i32 %20, 0, !dbg !10942
  br i1 %tobool39, label %land.lhs.true40, label %if.then42, !dbg !10944

land.lhs.true40:                                  ; preds = %if.else38
  %21 = load i32, i32* %reloc.addr, align 4, !dbg !10945
  %tobool41 = icmp ne i32 %21, 0, !dbg !10945
  br i1 %tobool41, label %if.end43, label %if.then42, !dbg !10946

if.then42:                                        ; preds = %land.lhs.true40, %if.else38
  %22 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !10947
  store %union.section* %22, %union.section** %retval, align 8, !dbg !10948
  br label %return, !dbg !10948

if.end43:                                         ; preds = %land.lhs.true40
  br label %if.end44

if.end44:                                         ; preds = %if.end43
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end30
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end
  %23 = load %union.section*, %union.section** @data_section, align 8, !dbg !10949
  store %union.section* %23, %union.section** %retval, align 8, !dbg !10950
  br label %return, !dbg !10950

return:                                           ; preds = %if.end46, %if.then42, %if.then37, %if.then29, %if.then1
  %24 = load %union.section*, %union.section** %retval, align 8, !dbg !10951
  ret %union.section* %24, !dbg !10951
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @categorize_decl_for_section(%union.tree_node* %decl, i32 %reloc) #0 !dbg !10952 {
entry:
  %retval = alloca i32, align 4
  %decl.addr = alloca %union.tree_node*, align 8
  %reloc.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !10955, metadata !DIExpression()), !dbg !10956
  store i32 %reloc, i32* %reloc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reloc.addr, metadata !10957, metadata !DIExpression()), !dbg !10958
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !10959, metadata !DIExpression()), !dbg !10960
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10961
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !10961
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !10961
  %bf.load = load i64, i64* %1, align 8, !dbg !10961
  %bf.clear = and i64 %bf.load, 65535, !dbg !10961
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10961
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !10963
  br i1 %cmp, label %if.then, label %if.else, !dbg !10964

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !10965
  br label %return, !dbg !10965

if.else:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10966
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !10966
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10966
  %bf.load2 = load i64, i64* %3, align 8, !dbg !10966
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !10966
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10966
  %cmp5 = icmp eq i32 %bf.cast4, 28, !dbg !10968
  br i1 %cmp5, label %if.then6, label %if.else9, !dbg !10969

if.then6:                                         ; preds = %if.else
  %4 = load i32, i32* @flag_mudflap, align 4, !dbg !10970
  %tobool = icmp ne i32 %4, 0, !dbg !10970
  br i1 %tobool, label %if.then7, label %if.else8, !dbg !10973

if.then7:                                         ; preds = %if.then6
  store i32 1, i32* %retval, align 4, !dbg !10974
  br label %return, !dbg !10974

if.else8:                                         ; preds = %if.then6
  store i32 2, i32* %retval, align 4, !dbg !10975
  br label %return, !dbg !10975

if.else9:                                         ; preds = %if.else
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10976
  %base10 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !10976
  %6 = bitcast %struct.tree_base* %base10 to i64*, !dbg !10976
  %bf.load11 = load i64, i64* %6, align 8, !dbg !10976
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !10976
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !10976
  %cmp14 = icmp eq i32 %bf.cast13, 32, !dbg !10978
  br i1 %cmp14, label %if.then15, label %if.else70, !dbg !10979

if.then15:                                        ; preds = %if.else9
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10980
  %call = call zeroext i8 @bss_initializer_p(%union.tree_node* %7), !dbg !10983
  %tobool16 = icmp ne i8 %call, 0, !dbg !10983
  br i1 %tobool16, label %if.then17, label %if.else18, !dbg !10984

if.then17:                                        ; preds = %if.then15
  store i32 13, i32* %ret, align 4, !dbg !10985
  br label %if.end69, !dbg !10986

if.else18:                                        ; preds = %if.then15
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10987
  %base19 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !10987
  %9 = bitcast %struct.tree_base* %base19 to i64*, !dbg !10987
  %bf.load20 = load i64, i64* %9, align 8, !dbg !10987
  %bf.lshr = lshr i64 %bf.load20, 20, !dbg !10987
  %bf.clear21 = and i64 %bf.lshr, 1, !dbg !10987
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !10987
  %tobool23 = icmp ne i32 %bf.cast22, 0, !dbg !10987
  br i1 %tobool23, label %lor.lhs.false, label %if.then37, !dbg !10989

lor.lhs.false:                                    ; preds = %if.else18
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10990
  %base24 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !10990
  %11 = bitcast %struct.tree_base* %base24 to i64*, !dbg !10990
  %bf.load25 = load i64, i64* %11, align 8, !dbg !10990
  %bf.lshr26 = lshr i64 %bf.load25, 16, !dbg !10990
  %bf.clear27 = and i64 %bf.lshr26, 1, !dbg !10990
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !10990
  %tobool29 = icmp ne i32 %bf.cast28, 0, !dbg !10990
  br i1 %tobool29, label %if.then37, label %lor.lhs.false30, !dbg !10991

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !10992
  %decl_common = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !10992
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !10992
  %13 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !10992
  %base31 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !10992
  %14 = bitcast %struct.tree_base* %base31 to i64*, !dbg !10992
  %bf.load32 = load i64, i64* %14, align 8, !dbg !10992
  %bf.lshr33 = lshr i64 %bf.load32, 17, !dbg !10992
  %bf.clear34 = and i64 %bf.lshr33, 1, !dbg !10992
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !10992
  %tobool36 = icmp ne i32 %bf.cast35, 0, !dbg !10992
  br i1 %tobool36, label %if.else43, label %if.then37, !dbg !10993

if.then37:                                        ; preds = %lor.lhs.false30, %lor.lhs.false, %if.else18
  %15 = load i32, i32* %reloc.addr, align 4, !dbg !10994
  %16 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 20), align 8, !dbg !10997
  %call38 = call i32 %16(), !dbg !10998
  %and = and i32 %15, %call38, !dbg !10999
  %tobool39 = icmp ne i32 %and, 0, !dbg !10999
  br i1 %tobool39, label %if.then40, label %if.else42, !dbg !11000

if.then40:                                        ; preds = %if.then37
  %17 = load i32, i32* %reloc.addr, align 4, !dbg !11001
  %cmp41 = icmp eq i32 %17, 1, !dbg !11002
  %18 = zext i1 %cmp41 to i64, !dbg !11001
  %cond = select i1 %cmp41, i32 8, i32 7, !dbg !11001
  store i32 %cond, i32* %ret, align 4, !dbg !11003
  br label %if.end, !dbg !11004

if.else42:                                        ; preds = %if.then37
  store i32 6, i32* %ret, align 4, !dbg !11005
  br label %if.end

if.end:                                           ; preds = %if.else42, %if.then40
  br label %if.end68, !dbg !11006

if.else43:                                        ; preds = %lor.lhs.false30
  %19 = load i32, i32* %reloc.addr, align 4, !dbg !11007
  %20 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 20), align 8, !dbg !11009
  %call44 = call i32 %20(), !dbg !11010
  %and45 = and i32 %19, %call44, !dbg !11011
  %tobool46 = icmp ne i32 %and45, 0, !dbg !11011
  br i1 %tobool46, label %if.then47, label %if.else50, !dbg !11012

if.then47:                                        ; preds = %if.else43
  %21 = load i32, i32* %reloc.addr, align 4, !dbg !11013
  %cmp48 = icmp eq i32 %21, 1, !dbg !11014
  %22 = zext i1 %cmp48 to i64, !dbg !11013
  %cond49 = select i1 %cmp48, i32 10, i32 9, !dbg !11013
  store i32 %cond49, i32* %ret, align 4, !dbg !11015
  br label %if.end67, !dbg !11016

if.else50:                                        ; preds = %if.else43
  %23 = load i32, i32* %reloc.addr, align 4, !dbg !11017
  %tobool51 = icmp ne i32 %23, 0, !dbg !11017
  br i1 %tobool51, label %if.then54, label %lor.lhs.false52, !dbg !11019

lor.lhs.false52:                                  ; preds = %if.else50
  %24 = load i32, i32* @flag_merge_constants, align 4, !dbg !11020
  %cmp53 = icmp slt i32 %24, 2, !dbg !11021
  br i1 %cmp53, label %if.then54, label %if.else55, !dbg !11022

if.then54:                                        ; preds = %lor.lhs.false52, %if.else50
  store i32 1, i32* %ret, align 4, !dbg !11023
  br label %if.end66, !dbg !11024

if.else55:                                        ; preds = %lor.lhs.false52
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11025
  %decl_common56 = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !11025
  %initial57 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common56, i32 0, i32 5, !dbg !11025
  %26 = load %union.tree_node*, %union.tree_node** %initial57, align 8, !dbg !11025
  %base58 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !11025
  %27 = bitcast %struct.tree_base* %base58 to i64*, !dbg !11025
  %bf.load59 = load i64, i64* %27, align 8, !dbg !11025
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !11025
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !11025
  %cmp62 = icmp eq i32 %bf.cast61, 28, !dbg !11027
  br i1 %cmp62, label %if.then63, label %if.else64, !dbg !11028

if.then63:                                        ; preds = %if.else55
  store i32 3, i32* %ret, align 4, !dbg !11029
  br label %if.end65, !dbg !11030

if.else64:                                        ; preds = %if.else55
  store i32 4, i32* %ret, align 4, !dbg !11031
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.then63
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then54
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then47
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.end
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then17
  br label %if.end99, !dbg !11032

if.else70:                                        ; preds = %if.else9
  %28 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11033
  %base71 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !11033
  %29 = bitcast %struct.tree_base* %base71 to i64*, !dbg !11033
  %bf.load72 = load i64, i64* %29, align 8, !dbg !11033
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !11033
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !11033
  %cmp75 = icmp eq i32 %bf.cast74, 51, !dbg !11035
  br i1 %cmp75, label %if.then76, label %if.else97, !dbg !11036

if.then76:                                        ; preds = %if.else70
  %30 = load i32, i32* %reloc.addr, align 4, !dbg !11037
  %31 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 20), align 8, !dbg !11040
  %call77 = call i32 %31(), !dbg !11041
  %and78 = and i32 %30, %call77, !dbg !11042
  %tobool79 = icmp ne i32 %and78, 0, !dbg !11042
  br i1 %tobool79, label %if.then94, label %lor.lhs.false80, !dbg !11043

lor.lhs.false80:                                  ; preds = %if.then76
  %32 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11044
  %base81 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !11044
  %33 = bitcast %struct.tree_base* %base81 to i64*, !dbg !11044
  %bf.load82 = load i64, i64* %33, align 8, !dbg !11044
  %bf.lshr83 = lshr i64 %bf.load82, 16, !dbg !11044
  %bf.clear84 = and i64 %bf.lshr83, 1, !dbg !11044
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !11044
  %tobool86 = icmp ne i32 %bf.cast85, 0, !dbg !11044
  br i1 %tobool86, label %if.then94, label %lor.lhs.false87, !dbg !11045

lor.lhs.false87:                                  ; preds = %lor.lhs.false80
  %34 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11046
  %base88 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !11046
  %35 = bitcast %struct.tree_base* %base88 to i64*, !dbg !11046
  %bf.load89 = load i64, i64* %35, align 8, !dbg !11046
  %bf.lshr90 = lshr i64 %bf.load89, 17, !dbg !11046
  %bf.clear91 = and i64 %bf.lshr90, 1, !dbg !11046
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !11046
  %tobool93 = icmp ne i32 %bf.cast92, 0, !dbg !11046
  br i1 %tobool93, label %if.else95, label %if.then94, !dbg !11047

if.then94:                                        ; preds = %lor.lhs.false87, %lor.lhs.false80, %if.then76
  store i32 6, i32* %ret, align 4, !dbg !11048
  br label %if.end96, !dbg !11049

if.else95:                                        ; preds = %lor.lhs.false87
  store i32 1, i32* %ret, align 4, !dbg !11050
  br label %if.end96

if.end96:                                         ; preds = %if.else95, %if.then94
  br label %if.end98, !dbg !11051

if.else97:                                        ; preds = %if.else70
  store i32 1, i32* %ret, align 4, !dbg !11052
  br label %if.end98

if.end98:                                         ; preds = %if.else97, %if.end96
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %if.end69
  br label %if.end100

if.end100:                                        ; preds = %if.end99
  br label %if.end101

if.end101:                                        ; preds = %if.end100
  %36 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11053
  %base102 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !11053
  %37 = bitcast %struct.tree_base* %base102 to i64*, !dbg !11053
  %bf.load103 = load i64, i64* %37, align 8, !dbg !11053
  %bf.clear104 = and i64 %bf.load103, 65535, !dbg !11053
  %bf.cast105 = trunc i64 %bf.clear104 to i32, !dbg !11053
  %cmp106 = icmp eq i32 %bf.cast105, 32, !dbg !11055
  br i1 %cmp106, label %land.lhs.true, label %if.else142, !dbg !11056

land.lhs.true:                                    ; preds = %if.end101
  %38 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11057
  %decl_with_vis = bitcast %union.tree_node* %38 to %struct.tree_decl_with_vis*, !dbg !11057
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !11057
  %39 = bitcast i24* %tls_model to i32*, !dbg !11057
  %bf.load107 = load i32, i32* %39, align 8, !dbg !11057
  %bf.lshr108 = lshr i32 %bf.load107, 13, !dbg !11057
  %bf.clear109 = and i32 %bf.lshr108, 7, !dbg !11057
  %tobool110 = icmp ne i32 %bf.clear109, 0, !dbg !11057
  br i1 %tobool110, label %if.then111, label %if.else142, !dbg !11058

if.then111:                                       ; preds = %land.lhs.true
  %40 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11059
  %decl_with_vis112 = bitcast %union.tree_node* %40 to %struct.tree_decl_with_vis*, !dbg !11059
  %tls_model113 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis112, i32 0, i32 4, !dbg !11059
  %41 = bitcast i24* %tls_model113 to i32*, !dbg !11059
  %bf.load114 = load i32, i32* %41, align 8, !dbg !11059
  %bf.lshr115 = lshr i32 %bf.load114, 13, !dbg !11059
  %bf.clear116 = and i32 %bf.lshr115, 7, !dbg !11059
  %cmp117 = icmp eq i32 %bf.clear116, 1, !dbg !11062
  br i1 %cmp117, label %if.then118, label %if.else129, !dbg !11063

if.then118:                                       ; preds = %if.then111
  %42 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11064
  %common = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !11064
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11064
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11064
  %44 = load %union.tree_node*, %union.tree_node** @emutls_object_type, align 8, !dbg !11064
  %cmp119 = icmp eq %union.tree_node* %43, %44, !dbg !11064
  br i1 %cmp119, label %if.then120, label %if.else124, !dbg !11067

if.then120:                                       ; preds = %if.then118
  %45 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 2), align 8, !dbg !11068
  %tobool121 = icmp ne i8* %45, null, !dbg !11071
  br i1 %tobool121, label %if.then122, label %if.end123, !dbg !11072

if.then122:                                       ; preds = %if.then120
  store i32 16, i32* %ret, align 4, !dbg !11073
  br label %if.end123, !dbg !11074

if.end123:                                        ; preds = %if.then122, %if.then120
  br label %if.end128, !dbg !11075

if.else124:                                       ; preds = %if.then118
  %46 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 5), align 8, !dbg !11076
  %tobool125 = icmp ne i8* %46, null, !dbg !11079
  br i1 %tobool125, label %if.then126, label %if.end127, !dbg !11080

if.then126:                                       ; preds = %if.else124
  store i32 17, i32* %ret, align 4, !dbg !11081
  br label %if.end127, !dbg !11082

if.end127:                                        ; preds = %if.then126, %if.else124
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %if.end123
  br label %if.end141, !dbg !11083

if.else129:                                       ; preds = %if.then111
  %47 = load i32, i32* %ret, align 4, !dbg !11084
  %cmp130 = icmp eq i32 %47, 13, !dbg !11086
  br i1 %cmp130, label %if.then138, label %lor.lhs.false131, !dbg !11087

lor.lhs.false131:                                 ; preds = %if.else129
  %48 = load i32, i32* @flag_zero_initialized_in_bss, align 4, !dbg !11088
  %tobool132 = icmp ne i32 %48, 0, !dbg !11088
  br i1 %tobool132, label %land.lhs.true133, label %if.else139, !dbg !11089

land.lhs.true133:                                 ; preds = %lor.lhs.false131
  %49 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11090
  %decl_common134 = bitcast %union.tree_node* %49 to %struct.tree_decl_common*, !dbg !11090
  %initial135 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common134, i32 0, i32 5, !dbg !11090
  %50 = load %union.tree_node*, %union.tree_node** %initial135, align 8, !dbg !11090
  %call136 = call zeroext i8 @initializer_zerop(%union.tree_node* %50), !dbg !11091
  %conv = zext i8 %call136 to i32, !dbg !11091
  %tobool137 = icmp ne i32 %conv, 0, !dbg !11091
  br i1 %tobool137, label %if.then138, label %if.else139, !dbg !11092

if.then138:                                       ; preds = %land.lhs.true133, %if.else129
  store i32 15, i32* %ret, align 4, !dbg !11093
  br label %if.end140, !dbg !11094

if.else139:                                       ; preds = %land.lhs.true133, %lor.lhs.false131
  store i32 12, i32* %ret, align 4, !dbg !11095
  br label %if.end140

if.end140:                                        ; preds = %if.else139, %if.then138
  br label %if.end141

if.end141:                                        ; preds = %if.end140, %if.end128
  br label %if.end160, !dbg !11096

if.else142:                                       ; preds = %land.lhs.true, %if.end101
  %51 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 48), align 8, !dbg !11097
  %52 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11099
  %call143 = call zeroext i8 %51(%union.tree_node* %52), !dbg !11100
  %tobool144 = icmp ne i8 %call143, 0, !dbg !11100
  br i1 %tobool144, label %if.then145, label %if.end159, !dbg !11101

if.then145:                                       ; preds = %if.else142
  %53 = load i32, i32* %ret, align 4, !dbg !11102
  %cmp146 = icmp eq i32 %53, 13, !dbg !11105
  br i1 %cmp146, label %if.then148, label %if.else149, !dbg !11106

if.then148:                                       ; preds = %if.then145
  store i32 14, i32* %ret, align 4, !dbg !11107
  br label %if.end158, !dbg !11108

if.else149:                                       ; preds = %if.then145
  %54 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 114), align 1, !dbg !11109
  %conv150 = zext i8 %54 to i32, !dbg !11111
  %tobool151 = icmp ne i32 %conv150, 0, !dbg !11111
  br i1 %tobool151, label %land.lhs.true152, label %if.else156, !dbg !11112

land.lhs.true152:                                 ; preds = %if.else149
  %55 = load i32, i32* %ret, align 4, !dbg !11113
  %cmp153 = icmp eq i32 %55, 1, !dbg !11114
  br i1 %cmp153, label %if.then155, label %if.else156, !dbg !11115

if.then155:                                       ; preds = %land.lhs.true152
  store i32 5, i32* %ret, align 4, !dbg !11116
  br label %if.end157, !dbg !11117

if.else156:                                       ; preds = %land.lhs.true152, %if.else149
  store i32 11, i32* %ret, align 4, !dbg !11118
  br label %if.end157

if.end157:                                        ; preds = %if.else156, %if.then155
  br label %if.end158

if.end158:                                        ; preds = %if.end157, %if.then148
  br label %if.end159, !dbg !11119

if.end159:                                        ; preds = %if.end158, %if.else142
  br label %if.end160

if.end160:                                        ; preds = %if.end159, %if.end141
  %56 = load i32, i32* %ret, align 4, !dbg !11120
  store i32 %56, i32* %retval, align 4, !dbg !11121
  br label %return, !dbg !11121

return:                                           ; preds = %if.end160, %if.else8, %if.then7, %if.then
  %57 = load i32, i32* %retval, align 4, !dbg !11122
  ret i32 %57, !dbg !11122
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bss_initializer_p(%union.tree_node* %decl) #0 !dbg !11123 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !11124, metadata !DIExpression()), !dbg !11125
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11126
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !11126
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !11126
  %1 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !11126
  %cmp = icmp eq %union.tree_node* %1, null, !dbg !11127
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !11128

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11129
  %decl_common1 = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !11129
  %initial2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common1, i32 0, i32 5, !dbg !11129
  %3 = load %union.tree_node*, %union.tree_node** %initial2, align 8, !dbg !11129
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !11130
  %cmp3 = icmp eq %union.tree_node* %3, %4, !dbg !11131
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !11132

lor.rhs:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* @flag_zero_initialized_in_bss, align 4, !dbg !11133
  %tobool = icmp ne i32 %5, 0, !dbg !11133
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !11134

land.lhs.true:                                    ; preds = %lor.rhs
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11135
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !11135
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !11135
  %bf.load = load i64, i64* %7, align 8, !dbg !11135
  %bf.lshr = lshr i64 %bf.load, 20, !dbg !11135
  %bf.clear = and i64 %bf.lshr, 1, !dbg !11135
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11135
  %tobool4 = icmp ne i32 %bf.cast, 0, !dbg !11135
  br i1 %tobool4, label %land.end, label %land.rhs, !dbg !11136

land.rhs:                                         ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11137
  %decl_common5 = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !11137
  %initial6 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common5, i32 0, i32 5, !dbg !11137
  %9 = load %union.tree_node*, %union.tree_node** %initial6, align 8, !dbg !11137
  %call = call zeroext i8 @initializer_zerop(%union.tree_node* %9), !dbg !11138
  %conv = zext i8 %call to i32, !dbg !11138
  %tobool7 = icmp ne i32 %conv, 0, !dbg !11136
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %lor.rhs
  %10 = phi i1 [ false, %land.lhs.true ], [ false, %lor.rhs ], [ %tobool7, %land.rhs ], !dbg !11139
  br label %lor.end, !dbg !11132

lor.end:                                          ; preds = %land.end, %lor.lhs.false, %entry
  %11 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %10, %land.end ]
  %lor.ext = zext i1 %11 to i32, !dbg !11132
  %conv8 = trunc i32 %lor.ext to i8, !dbg !11140
  ret i8 %conv8, !dbg !11141
}

declare dso_local zeroext i8 @initializer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @default_elf_select_section(%union.tree_node* %decl, i32 %reloc, i64 %align) #0 !dbg !11142 {
entry:
  %retval = alloca %union.section*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %reloc.addr = alloca i32, align 4
  %align.addr = alloca i64, align 8
  %sname = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !11143, metadata !DIExpression()), !dbg !11144
  store i32 %reloc, i32* %reloc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reloc.addr, metadata !11145, metadata !DIExpression()), !dbg !11146
  store i64 %align, i64* %align.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %align.addr, metadata !11147, metadata !DIExpression()), !dbg !11148
  call void @llvm.dbg.declare(metadata i8** %sname, metadata !11149, metadata !DIExpression()), !dbg !11150
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11151
  %1 = load i32, i32* %reloc.addr, align 4, !dbg !11152
  %call = call i32 @categorize_decl_for_section(%union.tree_node* %0, i32 %1), !dbg !11153
  switch i32 %call, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb4
    i32 4, label %sw.bb6
    i32 5, label %sw.bb9
    i32 6, label %sw.bb10
    i32 7, label %sw.bb11
    i32 8, label %sw.bb12
    i32 9, label %sw.bb13
    i32 10, label %sw.bb14
    i32 11, label %sw.bb15
    i32 12, label %sw.bb16
    i32 13, label %sw.bb17
    i32 14, label %sw.bb18
    i32 15, label %sw.bb19
    i32 16, label %sw.bb20
    i32 17, label %sw.bb21
  ], !dbg !11154

sw.bb:                                            ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 6349, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !11155
  br label %sw.bb1, !dbg !11155

sw.bb1:                                           ; preds = %entry, %sw.bb
  %2 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !11157
  store %union.section* %2, %union.section** %retval, align 8, !dbg !11158
  br label %return, !dbg !11158

sw.bb2:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11159
  %4 = load i64, i64* %align.addr, align 8, !dbg !11160
  %call3 = call %union.section* @mergeable_string_section(%union.tree_node* %3, i64 %4, i32 0), !dbg !11161
  store %union.section* %call3, %union.section** %retval, align 8, !dbg !11162
  br label %return, !dbg !11162

sw.bb4:                                           ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11163
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !11163
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !11163
  %6 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !11163
  %7 = load i64, i64* %align.addr, align 8, !dbg !11164
  %call5 = call %union.section* @mergeable_string_section(%union.tree_node* %6, i64 %7, i32 0), !dbg !11165
  store %union.section* %call5, %union.section** %retval, align 8, !dbg !11166
  br label %return, !dbg !11166

sw.bb6:                                           ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11167
  %decl_common7 = bitcast %union.tree_node* %8 to %struct.tree_decl_common*, !dbg !11167
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common7, i32 0, i32 2, !dbg !11167
  %9 = bitcast i40* %mode to i64*, !dbg !11167
  %bf.load = load i64, i64* %9, align 8, !dbg !11167
  %bf.clear = and i64 %bf.load, 255, !dbg !11167
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11167
  %10 = load i64, i64* %align.addr, align 8, !dbg !11168
  %call8 = call %union.section* @mergeable_constant_section(i32 %bf.cast, i64 %10, i32 0), !dbg !11169
  store %union.section* %call8, %union.section** %retval, align 8, !dbg !11170
  br label %return, !dbg !11170

sw.bb9:                                           ; preds = %entry
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.131, i64 0, i64 0), i8** %sname, align 8, !dbg !11171
  br label %sw.epilog, !dbg !11172

sw.bb10:                                          ; preds = %entry
  %11 = load %union.section*, %union.section** @data_section, align 8, !dbg !11173
  store %union.section* %11, %union.section** %retval, align 8, !dbg !11174
  br label %return, !dbg !11174

sw.bb11:                                          ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.132, i64 0, i64 0), i8** %sname, align 8, !dbg !11175
  br label %sw.epilog, !dbg !11176

sw.bb12:                                          ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.133, i64 0, i64 0), i8** %sname, align 8, !dbg !11177
  br label %sw.epilog, !dbg !11178

sw.bb13:                                          ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.134, i64 0, i64 0), i8** %sname, align 8, !dbg !11179
  br label %sw.epilog, !dbg !11180

sw.bb14:                                          ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.135, i64 0, i64 0), i8** %sname, align 8, !dbg !11181
  br label %sw.epilog, !dbg !11182

sw.bb15:                                          ; preds = %entry
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.136, i64 0, i64 0), i8** %sname, align 8, !dbg !11183
  br label %sw.epilog, !dbg !11184

sw.bb16:                                          ; preds = %entry
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i64 0, i64 0), i8** %sname, align 8, !dbg !11185
  br label %sw.epilog, !dbg !11186

sw.bb17:                                          ; preds = %entry
  %12 = load %union.section*, %union.section** @bss_section, align 8, !dbg !11187
  %tobool = icmp ne %union.section* %12, null, !dbg !11187
  br i1 %tobool, label %if.then, label %if.end, !dbg !11189

if.then:                                          ; preds = %sw.bb17
  %13 = load %union.section*, %union.section** @bss_section, align 8, !dbg !11190
  store %union.section* %13, %union.section** %retval, align 8, !dbg !11191
  br label %return, !dbg !11191

if.end:                                           ; preds = %sw.bb17
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.105, i64 0, i64 0), i8** %sname, align 8, !dbg !11192
  br label %sw.epilog, !dbg !11193

sw.bb18:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.108, i64 0, i64 0), i8** %sname, align 8, !dbg !11194
  br label %sw.epilog, !dbg !11195

sw.bb19:                                          ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i64 0, i64 0), i8** %sname, align 8, !dbg !11196
  br label %sw.epilog, !dbg !11197

sw.bb20:                                          ; preds = %entry
  %14 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 2), align 8, !dbg !11198
  store i8* %14, i8** %sname, align 8, !dbg !11199
  br label %sw.epilog, !dbg !11200

sw.bb21:                                          ; preds = %entry
  %15 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 3), align 8, !dbg !11201
  store i8* %15, i8** %sname, align 8, !dbg !11202
  br label %sw.epilog, !dbg !11203

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 6399, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !11204
  br label %sw.epilog, !dbg !11205

sw.epilog:                                        ; preds = %sw.default, %sw.bb21, %sw.bb20, %sw.bb19, %sw.bb18, %if.end, %sw.bb16, %sw.bb15, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb9
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11206
  %base = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !11206
  %17 = bitcast %struct.tree_base* %base to i64*, !dbg !11206
  %bf.load22 = load i64, i64* %17, align 8, !dbg !11206
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !11206
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !11206
  %idxprom = sext i32 %bf.cast24 to i64, !dbg !11206
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !11206
  %18 = load i32, i32* %arrayidx, align 4, !dbg !11206
  %cmp = icmp eq i32 %18, 3, !dbg !11206
  br i1 %cmp, label %if.end26, label %if.then25, !dbg !11208

if.then25:                                        ; preds = %sw.epilog
  store %union.tree_node* null, %union.tree_node** %decl.addr, align 8, !dbg !11209
  br label %if.end26, !dbg !11210

if.end26:                                         ; preds = %if.then25, %sw.epilog
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11211
  %20 = load i8*, i8** %sname, align 8, !dbg !11212
  %21 = load i32, i32* %reloc.addr, align 4, !dbg !11213
  %call27 = call %union.section* @get_named_section(%union.tree_node* %19, i8* %20, i32 %21), !dbg !11214
  store %union.section* %call27, %union.section** %retval, align 8, !dbg !11215
  br label %return, !dbg !11215

return:                                           ; preds = %if.end26, %if.then, %sw.bb10, %sw.bb6, %sw.bb4, %sw.bb2, %sw.bb1
  %22 = load %union.section*, %union.section** %retval, align 8, !dbg !11216
  ret %union.section* %22, !dbg !11216
}

; Function Attrs: noinline nounwind uwtable
define internal %union.section* @mergeable_string_section(%union.tree_node* %decl, i64 %align, i32 %flags) #0 !dbg !11217 {
entry:
  %retval = alloca %union.section*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %align.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %len = alloca i64, align 8
  %mode = alloca i32, align 4
  %modesize = alloca i32, align 4
  %str = alloca i8*, align 8
  %i = alloca i64, align 8
  %j = alloca i32, align 4
  %unit = alloca i32, align 4
  %name = alloca [30 x i8], align 16
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !11220, metadata !DIExpression()), !dbg !11221
  store i64 %align, i64* %align.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %align.addr, metadata !11222, metadata !DIExpression()), !dbg !11223
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !11224, metadata !DIExpression()), !dbg !11225
  call void @llvm.dbg.declare(metadata i64* %len, metadata !11226, metadata !DIExpression()), !dbg !11227
  %0 = load i32, i32* @flag_merge_constants, align 4, !dbg !11228
  %tobool = icmp ne i32 %0, 0, !dbg !11228
  br i1 %tobool, label %land.lhs.true, label %if.end100, !dbg !11230

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11231
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !11231
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !11231
  %bf.load = load i64, i64* %2, align 8, !dbg !11231
  %bf.clear = and i64 %bf.load, 65535, !dbg !11231
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11231
  %cmp = icmp eq i32 %bf.cast, 28, !dbg !11232
  br i1 %cmp, label %land.lhs.true1, label %if.end100, !dbg !11233

land.lhs.true1:                                   ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11234
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !11234
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11234
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11234
  %base2 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !11234
  %5 = bitcast %struct.tree_base* %base2 to i64*, !dbg !11234
  %bf.load3 = load i64, i64* %5, align 8, !dbg !11234
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !11234
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !11234
  %cmp6 = icmp eq i32 %bf.cast5, 15, !dbg !11235
  br i1 %cmp6, label %land.lhs.true7, label %if.end100, !dbg !11236

land.lhs.true7:                                   ; preds = %land.lhs.true1
  %6 = load i64, i64* %align.addr, align 8, !dbg !11237
  %cmp8 = icmp ule i64 %6, 256, !dbg !11238
  br i1 %cmp8, label %land.lhs.true9, label %if.end100, !dbg !11239

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11240
  %common10 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !11240
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !11240
  %8 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !11240
  %call = call i64 @int_size_in_bytes(%union.tree_node* %8), !dbg !11241
  store i64 %call, i64* %len, align 8, !dbg !11242
  %cmp12 = icmp sgt i64 %call, 0, !dbg !11243
  br i1 %cmp12, label %land.lhs.true13, label %if.end100, !dbg !11244

land.lhs.true13:                                  ; preds = %land.lhs.true9
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11245
  %string = bitcast %union.tree_node* %9 to %struct.tree_string*, !dbg !11245
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 1, !dbg !11245
  %10 = load i32, i32* %length, align 8, !dbg !11245
  %conv = sext i32 %10 to i64, !dbg !11245
  %11 = load i64, i64* %len, align 8, !dbg !11246
  %cmp14 = icmp sge i64 %conv, %11, !dbg !11247
  br i1 %cmp14, label %if.then, label %if.end100, !dbg !11248

if.then:                                          ; preds = %land.lhs.true13
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !11249, metadata !DIExpression()), !dbg !11251
  call void @llvm.dbg.declare(metadata i32* %modesize, metadata !11252, metadata !DIExpression()), !dbg !11253
  call void @llvm.dbg.declare(metadata i8** %str, metadata !11254, metadata !DIExpression()), !dbg !11255
  call void @llvm.dbg.declare(metadata i64* %i, metadata !11256, metadata !DIExpression()), !dbg !11257
  call void @llvm.dbg.declare(metadata i32* %j, metadata !11258, metadata !DIExpression()), !dbg !11259
  call void @llvm.dbg.declare(metadata i32* %unit, metadata !11260, metadata !DIExpression()), !dbg !11261
  call void @llvm.dbg.declare(metadata [30 x i8]* %name, metadata !11262, metadata !DIExpression()), !dbg !11266
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11267
  %common16 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !11267
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !11267
  %13 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !11267
  %common18 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !11267
  %type19 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common18, i32 0, i32 2, !dbg !11267
  %14 = load %union.tree_node*, %union.tree_node** %type19, align 8, !dbg !11267
  %base20 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !11267
  %15 = bitcast %struct.tree_base* %base20 to i64*, !dbg !11267
  %bf.load21 = load i64, i64* %15, align 8, !dbg !11267
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !11267
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !11267
  %cmp24 = icmp eq i32 %bf.cast23, 14, !dbg !11267
  br i1 %cmp24, label %cond.true, label %cond.false, !dbg !11267

cond.true:                                        ; preds = %if.then
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11267
  %common26 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !11267
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !11267
  %17 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !11267
  %common28 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !11267
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !11267
  %18 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !11267
  %call30 = call i32 @vector_type_mode(%union.tree_node* %18), !dbg !11267
  br label %cond.end, !dbg !11267

cond.false:                                       ; preds = %if.then
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11267
  %common31 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !11267
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !11267
  %20 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !11267
  %common33 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !11267
  %type34 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common33, i32 0, i32 2, !dbg !11267
  %21 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !11267
  %type35 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !11267
  %mode36 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type35, i32 0, i32 6, !dbg !11267
  %bf.load37 = load i32, i32* %mode36, align 4, !dbg !11267
  %bf.lshr = lshr i32 %bf.load37, 16, !dbg !11267
  %bf.clear38 = and i32 %bf.lshr, 255, !dbg !11267
  br label %cond.end, !dbg !11267

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call30, %cond.true ], [ %bf.clear38, %cond.false ], !dbg !11267
  store i32 %cond, i32* %mode, align 4, !dbg !11268
  %22 = load i32, i32* %mode, align 4, !dbg !11269
  %idxprom = zext i32 %22 to i64, !dbg !11269
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !11269
  %23 = load i8, i8* %arrayidx, align 1, !dbg !11269
  %conv39 = zext i8 %23 to i16, !dbg !11269
  %conv40 = zext i16 %conv39 to i32, !dbg !11269
  %mul = mul nsw i32 %conv40, 8, !dbg !11269
  %conv41 = trunc i32 %mul to i16, !dbg !11269
  %conv42 = zext i16 %conv41 to i32, !dbg !11269
  store i32 %conv42, i32* %modesize, align 4, !dbg !11270
  %24 = load i32, i32* %modesize, align 4, !dbg !11271
  %cmp43 = icmp uge i32 %24, 8, !dbg !11273
  br i1 %cmp43, label %land.lhs.true45, label %if.end99, !dbg !11274

land.lhs.true45:                                  ; preds = %cond.end
  %25 = load i32, i32* %modesize, align 4, !dbg !11275
  %cmp46 = icmp ule i32 %25, 256, !dbg !11276
  br i1 %cmp46, label %land.lhs.true48, label %if.end99, !dbg !11277

land.lhs.true48:                                  ; preds = %land.lhs.true45
  %26 = load i32, i32* %modesize, align 4, !dbg !11278
  %27 = load i32, i32* %modesize, align 4, !dbg !11279
  %sub = sub i32 %27, 1, !dbg !11280
  %and = and i32 %26, %sub, !dbg !11281
  %cmp49 = icmp eq i32 %and, 0, !dbg !11282
  br i1 %cmp49, label %if.then51, label %if.end99, !dbg !11283

if.then51:                                        ; preds = %land.lhs.true48
  %28 = load i64, i64* %align.addr, align 8, !dbg !11284
  %29 = load i32, i32* %modesize, align 4, !dbg !11287
  %conv52 = zext i32 %29 to i64, !dbg !11287
  %cmp53 = icmp ult i64 %28, %conv52, !dbg !11288
  br i1 %cmp53, label %if.then55, label %if.end, !dbg !11289

if.then55:                                        ; preds = %if.then51
  %30 = load i32, i32* %modesize, align 4, !dbg !11290
  %conv56 = zext i32 %30 to i64, !dbg !11290
  store i64 %conv56, i64* %align.addr, align 8, !dbg !11291
  br label %if.end, !dbg !11292

if.end:                                           ; preds = %if.then55, %if.then51
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11293
  %string57 = bitcast %union.tree_node* %31 to %struct.tree_string*, !dbg !11293
  %str58 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string57, i32 0, i32 2, !dbg !11293
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str58, i64 0, i64 0, !dbg !11293
  store i8* %arraydecay, i8** %str, align 8, !dbg !11294
  %32 = load i32, i32* %mode, align 4, !dbg !11295
  %idxprom59 = zext i32 %32 to i64, !dbg !11295
  %arrayidx60 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom59, !dbg !11295
  %33 = load i8, i8* %arrayidx60, align 1, !dbg !11295
  %conv61 = zext i8 %33 to i16, !dbg !11295
  %conv62 = zext i16 %conv61 to i32, !dbg !11295
  store i32 %conv62, i32* %unit, align 4, !dbg !11296
  store i64 0, i64* %i, align 8, !dbg !11297
  br label %for.cond, !dbg !11299

for.cond:                                         ; preds = %for.inc80, %if.end
  %34 = load i64, i64* %i, align 8, !dbg !11300
  %35 = load i64, i64* %len, align 8, !dbg !11302
  %cmp63 = icmp slt i64 %34, %35, !dbg !11303
  br i1 %cmp63, label %for.body, label %for.end83, !dbg !11304

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !11305
  br label %for.cond65, !dbg !11308

for.cond65:                                       ; preds = %for.inc, %for.body
  %36 = load i32, i32* %j, align 4, !dbg !11309
  %37 = load i32, i32* %unit, align 4, !dbg !11311
  %cmp66 = icmp slt i32 %36, %37, !dbg !11312
  br i1 %cmp66, label %for.body68, label %for.end, !dbg !11313

for.body68:                                       ; preds = %for.cond65
  %38 = load i8*, i8** %str, align 8, !dbg !11314
  %39 = load i64, i64* %i, align 8, !dbg !11316
  %40 = load i32, i32* %j, align 4, !dbg !11317
  %conv69 = sext i32 %40 to i64, !dbg !11317
  %add = add nsw i64 %39, %conv69, !dbg !11318
  %arrayidx70 = getelementptr inbounds i8, i8* %38, i64 %add, !dbg !11314
  %41 = load i8, i8* %arrayidx70, align 1, !dbg !11314
  %conv71 = sext i8 %41 to i32, !dbg !11314
  %cmp72 = icmp ne i32 %conv71, 0, !dbg !11319
  br i1 %cmp72, label %if.then74, label %if.end75, !dbg !11320

if.then74:                                        ; preds = %for.body68
  br label %for.end, !dbg !11321

if.end75:                                         ; preds = %for.body68
  br label %for.inc, !dbg !11322

for.inc:                                          ; preds = %if.end75
  %42 = load i32, i32* %j, align 4, !dbg !11323
  %inc = add nsw i32 %42, 1, !dbg !11323
  store i32 %inc, i32* %j, align 4, !dbg !11323
  br label %for.cond65, !dbg !11324, !llvm.loop !11325

for.end:                                          ; preds = %if.then74, %for.cond65
  %43 = load i32, i32* %j, align 4, !dbg !11327
  %44 = load i32, i32* %unit, align 4, !dbg !11329
  %cmp76 = icmp eq i32 %43, %44, !dbg !11330
  br i1 %cmp76, label %if.then78, label %if.end79, !dbg !11331

if.then78:                                        ; preds = %for.end
  br label %for.end83, !dbg !11332

if.end79:                                         ; preds = %for.end
  br label %for.inc80, !dbg !11333

for.inc80:                                        ; preds = %if.end79
  %45 = load i32, i32* %unit, align 4, !dbg !11334
  %conv81 = sext i32 %45 to i64, !dbg !11334
  %46 = load i64, i64* %i, align 8, !dbg !11335
  %add82 = add nsw i64 %46, %conv81, !dbg !11335
  store i64 %add82, i64* %i, align 8, !dbg !11335
  br label %for.cond, !dbg !11336, !llvm.loop !11337

for.end83:                                        ; preds = %if.then78, %for.cond
  %47 = load i64, i64* %i, align 8, !dbg !11339
  %48 = load i64, i64* %len, align 8, !dbg !11341
  %49 = load i32, i32* %unit, align 4, !dbg !11342
  %conv84 = sext i32 %49 to i64, !dbg !11342
  %sub85 = sub nsw i64 %48, %conv84, !dbg !11343
  %cmp86 = icmp eq i64 %47, %sub85, !dbg !11344
  br i1 %cmp86, label %if.then88, label %if.end98, !dbg !11345

if.then88:                                        ; preds = %for.end83
  %arraydecay89 = getelementptr inbounds [30 x i8], [30 x i8]* %name, i64 0, i64 0, !dbg !11346
  %50 = load i32, i32* %modesize, align 4, !dbg !11348
  %div = udiv i32 %50, 8, !dbg !11349
  %51 = load i64, i64* %align.addr, align 8, !dbg !11350
  %div90 = udiv i64 %51, 8, !dbg !11351
  %conv91 = trunc i64 %div90 to i32, !dbg !11352
  %call92 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay89, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.180, i64 0, i64 0), i32 %div, i32 %conv91), !dbg !11353
  %52 = load i32, i32* %modesize, align 4, !dbg !11354
  %div93 = udiv i32 %52, 8, !dbg !11355
  %or = or i32 %div93, 32768, !dbg !11356
  %or94 = or i32 %or, 65536, !dbg !11357
  %53 = load i32, i32* %flags.addr, align 4, !dbg !11358
  %or95 = or i32 %53, %or94, !dbg !11358
  store i32 %or95, i32* %flags.addr, align 4, !dbg !11358
  %arraydecay96 = getelementptr inbounds [30 x i8], [30 x i8]* %name, i64 0, i64 0, !dbg !11359
  %54 = load i32, i32* %flags.addr, align 4, !dbg !11360
  %call97 = call %union.section* @get_section(i8* %arraydecay96, i32 %54, %union.tree_node* null), !dbg !11361
  store %union.section* %call97, %union.section** %retval, align 8, !dbg !11362
  br label %return, !dbg !11362

if.end98:                                         ; preds = %for.end83
  br label %if.end99, !dbg !11363

if.end99:                                         ; preds = %if.end98, %land.lhs.true48, %land.lhs.true45, %cond.end
  br label %if.end100, !dbg !11364

if.end100:                                        ; preds = %if.end99, %land.lhs.true13, %land.lhs.true9, %land.lhs.true7, %land.lhs.true1, %land.lhs.true, %entry
  %55 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !11365
  store %union.section* %55, %union.section** %retval, align 8, !dbg !11366
  br label %return, !dbg !11366

return:                                           ; preds = %if.end100, %if.then88
  %56 = load %union.section*, %union.section** %retval, align 8, !dbg !11367
  ret %union.section* %56, !dbg !11367
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_unique_section(%union.tree_node* %decl, i32 %reloc) #0 !dbg !11368 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %reloc.addr = alloca i32, align 4
  %one_only = alloca i8, align 1
  %prefix = alloca i8*, align 8
  %name = alloca i8*, align 8
  %linkonce = alloca i8*, align 8
  %string = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !11369, metadata !DIExpression()), !dbg !11370
  store i32 %reloc, i32* %reloc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reloc.addr, metadata !11371, metadata !DIExpression()), !dbg !11372
  call void @llvm.dbg.declare(metadata i8* %one_only, metadata !11373, metadata !DIExpression()), !dbg !11374
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11375
  %decl_with_vis = bitcast %union.tree_node* %0 to %struct.tree_decl_with_vis*, !dbg !11375
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 3, !dbg !11375
  %1 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !11375
  %cmp = icmp ne %union.tree_node* %1, null, !dbg !11375
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !11376

land.rhs:                                         ; preds = %entry
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ false, %land.rhs ], !dbg !11377
  %land.ext = zext i1 %2 to i32, !dbg !11376
  %conv = trunc i32 %land.ext to i8, !dbg !11375
  store i8 %conv, i8* %one_only, align 1, !dbg !11374
  call void @llvm.dbg.declare(metadata i8** %prefix, metadata !11378, metadata !DIExpression()), !dbg !11379
  call void @llvm.dbg.declare(metadata i8** %name, metadata !11380, metadata !DIExpression()), !dbg !11381
  call void @llvm.dbg.declare(metadata i8** %linkonce, metadata !11382, metadata !DIExpression()), !dbg !11383
  call void @llvm.dbg.declare(metadata i8** %string, metadata !11384, metadata !DIExpression()), !dbg !11385
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11386
  %4 = load i32, i32* %reloc.addr, align 4, !dbg !11387
  %call = call i32 @categorize_decl_for_section(%union.tree_node* %3, i32 %4), !dbg !11388
  switch i32 %call, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb2
    i32 3, label %sw.bb2
    i32 4, label %sw.bb2
    i32 5, label %sw.bb6
    i32 6, label %sw.bb10
    i32 7, label %sw.bb14
    i32 8, label %sw.bb18
    i32 9, label %sw.bb22
    i32 10, label %sw.bb26
    i32 11, label %sw.bb30
    i32 13, label %sw.bb34
    i32 14, label %sw.bb38
    i32 12, label %sw.bb42
    i32 15, label %sw.bb46
    i32 16, label %sw.bb50
    i32 17, label %sw.bb51
  ], !dbg !11389

sw.bb:                                            ; preds = %land.end
  %5 = load i8, i8* %one_only, align 1, !dbg !11390
  %conv1 = zext i8 %5 to i32, !dbg !11390
  %tobool = icmp ne i32 %conv1, 0, !dbg !11390
  %6 = zext i1 %tobool to i64, !dbg !11390
  %cond = select i1 %tobool, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.137, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.138, i64 0, i64 0), !dbg !11390
  store i8* %cond, i8** %prefix, align 8, !dbg !11392
  br label %sw.epilog, !dbg !11393

sw.bb2:                                           ; preds = %land.end, %land.end, %land.end, %land.end
  %7 = load i8, i8* %one_only, align 1, !dbg !11394
  %conv3 = zext i8 %7 to i32, !dbg !11394
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !11394
  %8 = zext i1 %tobool4 to i64, !dbg !11394
  %cond5 = select i1 %tobool4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.139, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), !dbg !11394
  store i8* %cond5, i8** %prefix, align 8, !dbg !11395
  br label %sw.epilog, !dbg !11396

sw.bb6:                                           ; preds = %land.end
  %9 = load i8, i8* %one_only, align 1, !dbg !11397
  %conv7 = zext i8 %9 to i32, !dbg !11397
  %tobool8 = icmp ne i32 %conv7, 0, !dbg !11397
  %10 = zext i1 %tobool8 to i64, !dbg !11397
  %cond9 = select i1 %tobool8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.140, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.131, i64 0, i64 0), !dbg !11397
  store i8* %cond9, i8** %prefix, align 8, !dbg !11398
  br label %sw.epilog, !dbg !11399

sw.bb10:                                          ; preds = %land.end
  %11 = load i8, i8* %one_only, align 1, !dbg !11400
  %conv11 = zext i8 %11 to i32, !dbg !11400
  %tobool12 = icmp ne i32 %conv11, 0, !dbg !11400
  %12 = zext i1 %tobool12 to i64, !dbg !11400
  %cond13 = select i1 %tobool12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.141, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.142, i64 0, i64 0), !dbg !11400
  store i8* %cond13, i8** %prefix, align 8, !dbg !11401
  br label %sw.epilog, !dbg !11402

sw.bb14:                                          ; preds = %land.end
  %13 = load i8, i8* %one_only, align 1, !dbg !11403
  %conv15 = zext i8 %13 to i32, !dbg !11403
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !11403
  %14 = zext i1 %tobool16 to i64, !dbg !11403
  %cond17 = select i1 %tobool16, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.143, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.132, i64 0, i64 0), !dbg !11403
  store i8* %cond17, i8** %prefix, align 8, !dbg !11404
  br label %sw.epilog, !dbg !11405

sw.bb18:                                          ; preds = %land.end
  %15 = load i8, i8* %one_only, align 1, !dbg !11406
  %conv19 = zext i8 %15 to i32, !dbg !11406
  %tobool20 = icmp ne i32 %conv19, 0, !dbg !11406
  %16 = zext i1 %tobool20 to i64, !dbg !11406
  %cond21 = select i1 %tobool20, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.144, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.133, i64 0, i64 0), !dbg !11406
  store i8* %cond21, i8** %prefix, align 8, !dbg !11407
  br label %sw.epilog, !dbg !11408

sw.bb22:                                          ; preds = %land.end
  %17 = load i8, i8* %one_only, align 1, !dbg !11409
  %conv23 = zext i8 %17 to i32, !dbg !11409
  %tobool24 = icmp ne i32 %conv23, 0, !dbg !11409
  %18 = zext i1 %tobool24 to i64, !dbg !11409
  %cond25 = select i1 %tobool24, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.145, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.134, i64 0, i64 0), !dbg !11409
  store i8* %cond25, i8** %prefix, align 8, !dbg !11410
  br label %sw.epilog, !dbg !11411

sw.bb26:                                          ; preds = %land.end
  %19 = load i8, i8* %one_only, align 1, !dbg !11412
  %conv27 = zext i8 %19 to i32, !dbg !11412
  %tobool28 = icmp ne i32 %conv27, 0, !dbg !11412
  %20 = zext i1 %tobool28 to i64, !dbg !11412
  %cond29 = select i1 %tobool28, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.146, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.135, i64 0, i64 0), !dbg !11412
  store i8* %cond29, i8** %prefix, align 8, !dbg !11413
  br label %sw.epilog, !dbg !11414

sw.bb30:                                          ; preds = %land.end
  %21 = load i8, i8* %one_only, align 1, !dbg !11415
  %conv31 = zext i8 %21 to i32, !dbg !11415
  %tobool32 = icmp ne i32 %conv31, 0, !dbg !11415
  %22 = zext i1 %tobool32 to i64, !dbg !11415
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.147, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.136, i64 0, i64 0), !dbg !11415
  store i8* %cond33, i8** %prefix, align 8, !dbg !11416
  br label %sw.epilog, !dbg !11417

sw.bb34:                                          ; preds = %land.end
  %23 = load i8, i8* %one_only, align 1, !dbg !11418
  %conv35 = zext i8 %23 to i32, !dbg !11418
  %tobool36 = icmp ne i32 %conv35, 0, !dbg !11418
  %24 = zext i1 %tobool36 to i64, !dbg !11418
  %cond37 = select i1 %tobool36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.148, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.105, i64 0, i64 0), !dbg !11418
  store i8* %cond37, i8** %prefix, align 8, !dbg !11419
  br label %sw.epilog, !dbg !11420

sw.bb38:                                          ; preds = %land.end
  %25 = load i8, i8* %one_only, align 1, !dbg !11421
  %conv39 = zext i8 %25 to i32, !dbg !11421
  %tobool40 = icmp ne i32 %conv39, 0, !dbg !11421
  %26 = zext i1 %tobool40 to i64, !dbg !11421
  %cond41 = select i1 %tobool40, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.149, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.108, i64 0, i64 0), !dbg !11421
  store i8* %cond41, i8** %prefix, align 8, !dbg !11422
  br label %sw.epilog, !dbg !11423

sw.bb42:                                          ; preds = %land.end
  %27 = load i8, i8* %one_only, align 1, !dbg !11424
  %conv43 = zext i8 %27 to i32, !dbg !11424
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !11424
  %28 = zext i1 %tobool44 to i64, !dbg !11424
  %cond45 = select i1 %tobool44, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.150, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i64 0, i64 0), !dbg !11424
  store i8* %cond45, i8** %prefix, align 8, !dbg !11425
  br label %sw.epilog, !dbg !11426

sw.bb46:                                          ; preds = %land.end
  %29 = load i8, i8* %one_only, align 1, !dbg !11427
  %conv47 = zext i8 %29 to i32, !dbg !11427
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !11427
  %30 = zext i1 %tobool48 to i64, !dbg !11427
  %cond49 = select i1 %tobool48, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.151, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i64 0, i64 0), !dbg !11427
  store i8* %cond49, i8** %prefix, align 8, !dbg !11428
  br label %sw.epilog, !dbg !11429

sw.bb50:                                          ; preds = %land.end
  %31 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 2), align 8, !dbg !11430
  store i8* %31, i8** %prefix, align 8, !dbg !11431
  br label %sw.epilog, !dbg !11432

sw.bb51:                                          ; preds = %land.end
  %32 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 106, i32 3), align 8, !dbg !11433
  store i8* %32, i8** %prefix, align 8, !dbg !11434
  br label %sw.epilog, !dbg !11435

sw.default:                                       ; preds = %land.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 6469, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !11436
  br label %sw.epilog, !dbg !11437

sw.epilog:                                        ; preds = %sw.default, %sw.bb51, %sw.bb50, %sw.bb46, %sw.bb42, %sw.bb38, %sw.bb34, %sw.bb30, %sw.bb26, %sw.bb22, %sw.bb18, %sw.bb14, %sw.bb10, %sw.bb6, %sw.bb2, %sw.bb
  %33 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11438
  %call52 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %33), !dbg !11438
  %identifier = bitcast %union.tree_node* %call52 to %struct.tree_identifier*, !dbg !11438
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !11438
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !11438
  %34 = load i8*, i8** %str, align 8, !dbg !11438
  store i8* %34, i8** %name, align 8, !dbg !11439
  %35 = load i8* (i8*)*, i8* (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 52), align 8, !dbg !11440
  %36 = load i8*, i8** %name, align 8, !dbg !11441
  %call53 = call i8* %35(i8* %36), !dbg !11442
  store i8* %call53, i8** %name, align 8, !dbg !11443
  %37 = load i8, i8* %one_only, align 1, !dbg !11444
  %conv54 = zext i8 %37 to i32, !dbg !11444
  %tobool55 = icmp ne i32 %conv54, 0, !dbg !11444
  %38 = zext i1 %tobool55 to i64, !dbg !11444
  %cond56 = select i1 %tobool55, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.152, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.153, i64 0, i64 0), !dbg !11444
  store i8* %cond56, i8** %linkonce, align 8, !dbg !11445
  %39 = load i8*, i8** %linkonce, align 8, !dbg !11446
  %40 = load i8*, i8** %prefix, align 8, !dbg !11446
  %41 = load i8*, i8** %name, align 8, !dbg !11446
  %call57 = call i64 (i8*, ...) @concat_length(i8* %39, i8* %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.154, i64 0, i64 0), i8* %41, i8* null), !dbg !11446
  %add = add i64 %call57, 1, !dbg !11446
  %42 = alloca i8, i64 %add, align 16, !dbg !11446
  store i8* %42, i8** @libiberty_concat_ptr, align 8, !dbg !11446
  %43 = load i8*, i8** %linkonce, align 8, !dbg !11446
  %44 = load i8*, i8** %prefix, align 8, !dbg !11446
  %45 = load i8*, i8** %name, align 8, !dbg !11446
  %call58 = call i8* (i8*, ...) @concat_copy2(i8* %43, i8* %44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.154, i64 0, i64 0), i8* %45, i8* null), !dbg !11446
  store i8* %call58, i8** %string, align 8, !dbg !11447
  %46 = load i8*, i8** %string, align 8, !dbg !11448
  %call59 = call i64 @strlen(i8* %46), !dbg !11449
  %conv60 = trunc i64 %call59 to i32, !dbg !11449
  %47 = load i8*, i8** %string, align 8, !dbg !11450
  %call61 = call %union.tree_node* @build_string(i32 %conv60, i8* %47), !dbg !11451
  %48 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11452
  %decl_with_vis62 = bitcast %union.tree_node* %48 to %struct.tree_decl_with_vis*, !dbg !11452
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis62, i32 0, i32 2, !dbg !11452
  store %union.tree_node* %call61, %union.tree_node** %section_name, align 8, !dbg !11453
  ret void, !dbg !11454
}

declare dso_local i64 @concat_length(i8*, ...) #2

declare dso_local i8* @concat_copy2(i8*, ...) #2

declare dso_local %union.tree_node* @build_string(i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @default_select_rtx_section(i32 %mode, %struct.rtx_def* %x, i64 %align) #0 !dbg !11455 {
entry:
  %retval = alloca %union.section*, align 8
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %align.addr = alloca i64, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11458, metadata !DIExpression()), !dbg !11459
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !11460, metadata !DIExpression()), !dbg !11461
  store i64 %align, i64* %align.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %align.addr, metadata !11462, metadata !DIExpression()), !dbg !11463
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11464
  %call = call i32 @compute_reloc_for_rtx(%struct.rtx_def* %0), !dbg !11466
  %1 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 20), align 8, !dbg !11467
  %call1 = call i32 %1(), !dbg !11468
  %and = and i32 %call, %call1, !dbg !11469
  %tobool = icmp ne i32 %and, 0, !dbg !11469
  br i1 %tobool, label %if.then, label %if.else, !dbg !11470

if.then:                                          ; preds = %entry
  %2 = load %union.section*, %union.section** @data_section, align 8, !dbg !11471
  store %union.section* %2, %union.section** %retval, align 8, !dbg !11472
  br label %return, !dbg !11472

if.else:                                          ; preds = %entry
  %3 = load %union.section*, %union.section** @readonly_data_section, align 8, !dbg !11473
  store %union.section* %3, %union.section** %retval, align 8, !dbg !11474
  br label %return, !dbg !11474

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.section*, %union.section** %retval, align 8, !dbg !11475
  ret %union.section* %4, !dbg !11475
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compute_reloc_for_rtx(%struct.rtx_def* %x) #0 !dbg !11476 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %reloc = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !11479, metadata !DIExpression()), !dbg !11480
  call void @llvm.dbg.declare(metadata i32* %reloc, metadata !11481, metadata !DIExpression()), !dbg !11482
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11483
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !11483
  %bf.load = load i32, i32* %1, align 8, !dbg !11483
  %bf.clear = and i32 %bf.load, 65535, !dbg !11483
  switch i32 %bf.clear, label %sw.default [
    i32 35, label %sw.bb
    i32 45, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !11484

sw.bb:                                            ; preds = %entry, %entry, %entry
  store i32 0, i32* %reloc, align 4, !dbg !11485
  %2 = bitcast i32* %reloc to i8*, !dbg !11487
  %call = call i32 @for_each_rtx(%struct.rtx_def** %x.addr, i32 (%struct.rtx_def**, i8*)* @compute_reloc_for_rtx_1, i8* %2), !dbg !11488
  %3 = load i32, i32* %reloc, align 4, !dbg !11489
  store i32 %3, i32* %retval, align 4, !dbg !11490
  br label %return, !dbg !11490

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !11491
  br label %return, !dbg !11491

return:                                           ; preds = %sw.default, %sw.bb
  %4 = load i32, i32* %retval, align 4, !dbg !11492
  ret i32 %4, !dbg !11492
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.section* @default_elf_select_rtx_section(i32 %mode, %struct.rtx_def* %x, i64 %align) #0 !dbg !11493 {
entry:
  %retval = alloca %union.section*, align 8
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %align.addr = alloca i64, align 8
  %reloc = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11494, metadata !DIExpression()), !dbg !11495
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !11496, metadata !DIExpression()), !dbg !11497
  store i64 %align, i64* %align.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %align.addr, metadata !11498, metadata !DIExpression()), !dbg !11499
  call void @llvm.dbg.declare(metadata i32* %reloc, metadata !11500, metadata !DIExpression()), !dbg !11501
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !11502
  %call = call i32 @compute_reloc_for_rtx(%struct.rtx_def* %0), !dbg !11503
  store i32 %call, i32* %reloc, align 4, !dbg !11501
  %1 = load i32, i32* %reloc, align 4, !dbg !11504
  %2 = load i32 ()*, i32 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 20), align 8, !dbg !11506
  %call1 = call i32 %2(), !dbg !11507
  %and = and i32 %1, %call1, !dbg !11508
  %tobool = icmp ne i32 %and, 0, !dbg !11508
  br i1 %tobool, label %if.then, label %if.end, !dbg !11509

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %reloc, align 4, !dbg !11510
  %cmp = icmp eq i32 %3, 1, !dbg !11513
  br i1 %cmp, label %if.then2, label %if.else, !dbg !11514

if.then2:                                         ; preds = %if.then
  %call3 = call %union.section* @get_named_section(%union.tree_node* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.135, i64 0, i64 0), i32 1), !dbg !11515
  store %union.section* %call3, %union.section** %retval, align 8, !dbg !11516
  br label %return, !dbg !11516

if.else:                                          ; preds = %if.then
  %call4 = call %union.section* @get_named_section(%union.tree_node* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.134, i64 0, i64 0), i32 3), !dbg !11517
  store %union.section* %call4, %union.section** %retval, align 8, !dbg !11518
  br label %return, !dbg !11518

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %mode.addr, align 4, !dbg !11519
  %5 = load i64, i64* %align.addr, align 8, !dbg !11520
  %call5 = call %union.section* @mergeable_constant_section(i32 %4, i64 %5, i32 0), !dbg !11521
  store %union.section* %call5, %union.section** %retval, align 8, !dbg !11522
  br label %return, !dbg !11522

return:                                           ; preds = %if.end, %if.else, %if.then2
  %6 = load %union.section*, %union.section** %retval, align 8, !dbg !11523
  ret %union.section* %6, !dbg !11523
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_encode_section_info(%union.tree_node* %decl, %struct.rtx_def* %rtl, i32 %first) #0 !dbg !11524 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %rtl.addr = alloca %struct.rtx_def*, align 8
  %first.addr = alloca i32, align 4
  %symbol = alloca %struct.rtx_def*, align 8
  %flags = alloca i32, align 4
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !11527, metadata !DIExpression()), !dbg !11528
  store %struct.rtx_def* %rtl, %struct.rtx_def** %rtl.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtl.addr, metadata !11529, metadata !DIExpression()), !dbg !11530
  store i32 %first, i32* %first.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %first.addr, metadata !11531, metadata !DIExpression()), !dbg !11532
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol, metadata !11533, metadata !DIExpression()), !dbg !11534
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !11535, metadata !DIExpression()), !dbg !11536
  %0 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8, !dbg !11537
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !11537
  %bf.load = load i32, i32* %1, align 8, !dbg !11537
  %bf.clear = and i32 %bf.load, 65535, !dbg !11537
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !11537
  br i1 %cmp, label %if.end, label %if.then, !dbg !11539

if.then:                                          ; preds = %entry
  br label %return, !dbg !11540

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rtl.addr, align 8, !dbg !11541
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !11541
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11541
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11541
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !11541
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11541
  store %struct.rtx_def* %3, %struct.rtx_def** %symbol, align 8, !dbg !11542
  %4 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !11543
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !11543
  %bf.load1 = load i32, i32* %5, align 8, !dbg !11543
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !11543
  %cmp3 = icmp ne i32 %bf.clear2, 45, !dbg !11545
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !11546

if.then4:                                         ; preds = %if.end
  br label %return, !dbg !11547

if.end5:                                          ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !11548
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !11548
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !11548
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !11548
  %rt_int = bitcast %union.rtunion_def* %arrayidx8 to i32*, !dbg !11548
  %7 = load i32, i32* %rt_int, align 8, !dbg !11548
  %and = and i32 %7, 128, !dbg !11549
  store i32 %and, i32* %flags, align 4, !dbg !11550
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11551
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !11551
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !11551
  %bf.load9 = load i64, i64* %9, align 8, !dbg !11551
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !11551
  %bf.cast = trunc i64 %bf.clear10 to i32, !dbg !11551
  %cmp11 = icmp eq i32 %bf.cast, 29, !dbg !11553
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !11554

if.then12:                                        ; preds = %if.end5
  %10 = load i32, i32* %flags, align 4, !dbg !11555
  %or = or i32 %10, 1, !dbg !11555
  store i32 %or, i32* %flags, align 4, !dbg !11555
  br label %if.end13, !dbg !11556

if.end13:                                         ; preds = %if.then12, %if.end5
  %11 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 49), align 8, !dbg !11557
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11559
  %call = call zeroext i8 %11(%union.tree_node* %12), !dbg !11560
  %tobool = icmp ne i8 %call, 0, !dbg !11560
  br i1 %tobool, label %if.then14, label %if.end16, !dbg !11561

if.then14:                                        ; preds = %if.end13
  %13 = load i32, i32* %flags, align 4, !dbg !11562
  %or15 = or i32 %13, 2, !dbg !11562
  store i32 %or15, i32* %flags, align 4, !dbg !11562
  br label %if.end16, !dbg !11563

if.end16:                                         ; preds = %if.then14, %if.end13
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11564
  %base17 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !11564
  %15 = bitcast %struct.tree_base* %base17 to i64*, !dbg !11564
  %bf.load18 = load i64, i64* %15, align 8, !dbg !11564
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !11564
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !11564
  %cmp21 = icmp eq i32 %bf.cast20, 32, !dbg !11566
  br i1 %cmp21, label %land.lhs.true, label %if.else, !dbg !11567

land.lhs.true:                                    ; preds = %if.end16
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11568
  %decl_with_vis = bitcast %union.tree_node* %16 to %struct.tree_decl_with_vis*, !dbg !11568
  %tls_model = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !11568
  %17 = bitcast i24* %tls_model to i32*, !dbg !11568
  %bf.load22 = load i32, i32* %17, align 8, !dbg !11568
  %bf.lshr = lshr i32 %bf.load22, 13, !dbg !11568
  %bf.clear23 = and i32 %bf.lshr, 7, !dbg !11568
  %cmp24 = icmp sge i32 %bf.clear23, 2, !dbg !11568
  br i1 %cmp24, label %land.lhs.true25, label %if.else, !dbg !11569

land.lhs.true25:                                  ; preds = %land.lhs.true
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11570
  %decl_with_vis26 = bitcast %union.tree_node* %18 to %struct.tree_decl_with_vis*, !dbg !11570
  %tls_model27 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis26, i32 0, i32 4, !dbg !11570
  %19 = bitcast i24* %tls_model27 to i32*, !dbg !11570
  %bf.load28 = load i32, i32* %19, align 8, !dbg !11570
  %bf.lshr29 = lshr i32 %bf.load28, 13, !dbg !11570
  %bf.clear30 = and i32 %bf.lshr29, 7, !dbg !11570
  %cmp31 = icmp ne i32 %bf.clear30, 1, !dbg !11571
  br i1 %cmp31, label %if.then32, label %if.else, !dbg !11572

if.then32:                                        ; preds = %land.lhs.true25
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11573
  %decl_with_vis33 = bitcast %union.tree_node* %20 to %struct.tree_decl_with_vis*, !dbg !11573
  %tls_model34 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis33, i32 0, i32 4, !dbg !11573
  %21 = bitcast i24* %tls_model34 to i32*, !dbg !11573
  %bf.load35 = load i32, i32* %21, align 8, !dbg !11573
  %bf.lshr36 = lshr i32 %bf.load35, 13, !dbg !11573
  %bf.clear37 = and i32 %bf.lshr36, 7, !dbg !11573
  %shl = shl i32 %bf.clear37, 3, !dbg !11574
  %22 = load i32, i32* %flags, align 4, !dbg !11575
  %or38 = or i32 %22, %shl, !dbg !11575
  store i32 %or38, i32* %flags, align 4, !dbg !11575
  br label %if.end44, !dbg !11576

if.else:                                          ; preds = %land.lhs.true25, %land.lhs.true, %if.end16
  %23 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 48), align 8, !dbg !11577
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11579
  %call39 = call zeroext i8 %23(%union.tree_node* %24), !dbg !11580
  %tobool40 = icmp ne i8 %call39, 0, !dbg !11580
  br i1 %tobool40, label %if.then41, label %if.end43, !dbg !11581

if.then41:                                        ; preds = %if.else
  %25 = load i32, i32* %flags, align 4, !dbg !11582
  %or42 = or i32 %25, 4, !dbg !11582
  store i32 %or42, i32* %flags, align 4, !dbg !11582
  br label %if.end43, !dbg !11583

if.end43:                                         ; preds = %if.then41, %if.else
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then32
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11584
  %base45 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !11584
  %27 = bitcast %struct.tree_base* %base45 to i64*, !dbg !11584
  %bf.load46 = load i64, i64* %27, align 8, !dbg !11584
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !11584
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !11584
  %idxprom = sext i32 %bf.cast48 to i64, !dbg !11584
  %arrayidx49 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !11584
  %28 = load i32, i32* %arrayidx49, align 4, !dbg !11584
  %cmp50 = icmp eq i32 %28, 3, !dbg !11584
  br i1 %cmp50, label %land.lhs.true51, label %if.end66, !dbg !11586

land.lhs.true51:                                  ; preds = %if.end44
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11587
  %decl_common = bitcast %union.tree_node* %29 to %struct.tree_decl_common*, !dbg !11587
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11587
  %30 = bitcast i40* %decl_flag_1 to i64*, !dbg !11587
  %bf.load52 = load i64, i64* %30, align 8, !dbg !11587
  %bf.lshr53 = lshr i64 %bf.load52, 25, !dbg !11587
  %bf.clear54 = and i64 %bf.lshr53, 1, !dbg !11587
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !11587
  %tobool56 = icmp ne i32 %bf.cast55, 0, !dbg !11587
  br i1 %tobool56, label %land.lhs.true57, label %if.end66, !dbg !11588

land.lhs.true57:                                  ; preds = %land.lhs.true51
  %31 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11589
  %base58 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !11589
  %32 = bitcast %struct.tree_base* %base58 to i64*, !dbg !11589
  %bf.load59 = load i64, i64* %32, align 8, !dbg !11589
  %bf.lshr60 = lshr i64 %bf.load59, 27, !dbg !11589
  %bf.clear61 = and i64 %bf.lshr60, 1, !dbg !11589
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !11589
  %tobool63 = icmp ne i32 %bf.cast62, 0, !dbg !11589
  br i1 %tobool63, label %if.then64, label %if.end66, !dbg !11590

if.then64:                                        ; preds = %land.lhs.true57
  %33 = load i32, i32* %flags, align 4, !dbg !11591
  %or65 = or i32 %33, 64, !dbg !11591
  store i32 %or65, i32* %flags, align 4, !dbg !11591
  br label %if.end66, !dbg !11592

if.end66:                                         ; preds = %if.then64, %land.lhs.true57, %land.lhs.true51, %if.end44
  %34 = load i32, i32* %flags, align 4, !dbg !11593
  %35 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !11594
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !11594
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !11594
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 1, !dbg !11594
  %rt_int70 = bitcast %union.rtunion_def* %arrayidx69 to i32*, !dbg !11594
  store i32 %34, i32* %rt_int70, align 8, !dbg !11595
  br label %return, !dbg !11596

return:                                           ; preds = %if.end66, %if.then4, %if.then
  ret void, !dbg !11596
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @default_strip_name_encoding(i8* %str) #0 !dbg !11597 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !11598, metadata !DIExpression()), !dbg !11599
  %0 = load i8*, i8** %str.addr, align 8, !dbg !11600
  %1 = load i8*, i8** %str.addr, align 8, !dbg !11601
  %2 = load i8, i8* %1, align 1, !dbg !11602
  %conv = sext i8 %2 to i32, !dbg !11602
  %cmp = icmp eq i32 %conv, 42, !dbg !11603
  %conv1 = zext i1 %cmp to i32, !dbg !11603
  %idx.ext = sext i32 %conv1 to i64, !dbg !11604
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %idx.ext, !dbg !11604
  ret i8* %add.ptr, !dbg !11605
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_asm_output_anchor(%struct.rtx_def* %symbol) #0 !dbg !11606 {
entry:
  %symbol.addr = alloca %struct.rtx_def*, align 8
  %buffer = alloca [100 x i8], align 16
  store %struct.rtx_def* %symbol, %struct.rtx_def** %symbol.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol.addr, metadata !11607, metadata !DIExpression()), !dbg !11608
  call void @llvm.dbg.declare(metadata [100 x i8]* %buffer, metadata !11609, metadata !DIExpression()), !dbg !11610
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %buffer, i64 0, i64 0, !dbg !11611
  %0 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !11612
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !11612
  %block_sym = bitcast %union.u* %u to %struct.block_symbol*, !dbg !11612
  %offset = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym, i32 0, i32 2, !dbg !11612
  %1 = load i64, i64* %offset, align 8, !dbg !11612
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.155, i64 0, i64 0), i64 %1), !dbg !11613
  br label %do.body, !dbg !11614

do.body:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !11615
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.156, i64 0, i64 0)), !dbg !11615
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !11615
  %4 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !11615
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !11615
  %fld = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !11615
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11615
  %rt_str = bitcast %union.rtunion_def* %arrayidx to i8**, !dbg !11615
  %5 = load i8*, i8** %rt_str, align 8, !dbg !11615
  call void @assemble_name(%struct._IO_FILE* %3, i8* %5), !dbg !11615
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !11615
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.157, i64 0, i64 0)), !dbg !11615
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !11615
  %arraydecay4 = getelementptr inbounds [100 x i8], [100 x i8]* %buffer, i64 0, i64 0, !dbg !11615
  call void @assemble_name(%struct._IO_FILE* %7, i8* %arraydecay4), !dbg !11615
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !11615
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i64 0, i64 0)), !dbg !11615
  br label %do.end, !dbg !11615

do.end:                                           ; preds = %do.body
  ret void, !dbg !11617
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @default_use_anchors_for_symbol_p(%struct.rtx_def* %symbol) #0 !dbg !11618 {
entry:
  %retval = alloca i8, align 1
  %symbol.addr = alloca %struct.rtx_def*, align 8
  %sect = alloca %union.section*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %symbol, %struct.rtx_def** %symbol.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol.addr, metadata !11621, metadata !DIExpression()), !dbg !11622
  call void @llvm.dbg.declare(metadata %union.section** %sect, metadata !11623, metadata !DIExpression()), !dbg !11624
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !11625, metadata !DIExpression()), !dbg !11626
  %0 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !11627
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !11627
  %block_sym = bitcast %union.u* %u to %struct.block_symbol*, !dbg !11627
  %block = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym, i32 0, i32 1, !dbg !11627
  %1 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !11627
  %sect1 = getelementptr inbounds %struct.object_block, %struct.object_block* %1, i32 0, i32 0, !dbg !11628
  %2 = load %union.section*, %union.section** %sect1, align 8, !dbg !11628
  store %union.section* %2, %union.section** %sect, align 8, !dbg !11629
  %3 = load %union.section*, %union.section** %sect, align 8, !dbg !11630
  %common = bitcast %union.section* %3 to %struct.section_common*, !dbg !11632
  %flags = getelementptr inbounds %struct.section_common, %struct.section_common* %common, i32 0, i32 0, !dbg !11633
  %4 = load i32, i32* %flags, align 8, !dbg !11633
  %and = and i32 %4, 32768, !dbg !11634
  %tobool = icmp ne i32 %and, 0, !dbg !11634
  br i1 %tobool, label %if.then, label %if.end, !dbg !11635

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !11636
  br label %return, !dbg !11636

if.end:                                           ; preds = %entry
  %5 = load %union.section*, %union.section** %sect, align 8, !dbg !11637
  %common2 = bitcast %union.section* %5 to %struct.section_common*, !dbg !11639
  %flags3 = getelementptr inbounds %struct.section_common, %struct.section_common* %common2, i32 0, i32 0, !dbg !11640
  %6 = load i32, i32* %flags3, align 8, !dbg !11640
  %and4 = and i32 %6, 4096, !dbg !11641
  %tobool5 = icmp ne i32 %and4, 0, !dbg !11641
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !11642

if.then6:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !11643
  br label %return, !dbg !11643

if.end7:                                          ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !11644
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !11644
  %bf.load = load i32, i32* %8, align 8, !dbg !11644
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !11644
  %bf.clear = and i32 %bf.lshr, 1, !dbg !11644
  %tobool8 = icmp ne i32 %bf.clear, 0, !dbg !11644
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !11644

cond.true:                                        ; preds = %if.end7
  br label %cond.end, !dbg !11644

cond.false:                                       ; preds = %if.end7
  %9 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !11644
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !11644
  %fld = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !11644
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !11644
  %rt_tree = bitcast %union.rtunion_def* %arrayidx to %union.tree_node**, !dbg !11644
  %10 = load %union.tree_node*, %union.tree_node** %rt_tree, align 8, !dbg !11644
  br label %cond.end, !dbg !11644

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ null, %cond.true ], [ %10, %cond.false ], !dbg !11644
  store %union.tree_node* %cond, %union.tree_node** %decl, align 8, !dbg !11645
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !11646
  %tobool10 = icmp ne %union.tree_node* %11, null, !dbg !11646
  br i1 %tobool10, label %land.lhs.true, label %if.end22, !dbg !11648

land.lhs.true:                                    ; preds = %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !11649
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !11649
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !11649
  %bf.load11 = load i64, i64* %13, align 8, !dbg !11649
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !11649
  %bf.cast = trunc i64 %bf.clear12 to i32, !dbg !11649
  %idxprom = sext i32 %bf.cast to i64, !dbg !11649
  %arrayidx13 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !11649
  %14 = load i32, i32* %arrayidx13, align 4, !dbg !11649
  %cmp = icmp eq i32 %14, 3, !dbg !11649
  br i1 %cmp, label %if.then14, label %if.end22, !dbg !11650

if.then14:                                        ; preds = %land.lhs.true
  %15 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 49), align 8, !dbg !11651
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !11654
  %call = call zeroext i8 %15(%union.tree_node* %16), !dbg !11655
  %tobool15 = icmp ne i8 %call, 0, !dbg !11655
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !11656

if.then16:                                        ; preds = %if.then14
  store i8 0, i8* %retval, align 1, !dbg !11657
  br label %return, !dbg !11657

if.end17:                                         ; preds = %if.then14
  %17 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 48), align 8, !dbg !11658
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !11660
  %call18 = call zeroext i8 %17(%union.tree_node* %18), !dbg !11661
  %tobool19 = icmp ne i8 %call18, 0, !dbg !11661
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !11662

if.then20:                                        ; preds = %if.end17
  store i8 0, i8* %retval, align 1, !dbg !11663
  br label %return, !dbg !11663

if.end21:                                         ; preds = %if.end17
  br label %if.end22, !dbg !11664

if.end22:                                         ; preds = %if.end21, %land.lhs.true, %cond.end
  store i8 1, i8* %retval, align 1, !dbg !11665
  br label %return, !dbg !11665

return:                                           ; preds = %if.end22, %if.then20, %if.then16, %if.then6, %if.then
  %19 = load i8, i8* %retval, align 1, !dbg !11666
  ret i8 %19, !dbg !11666
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @default_binds_local_p(%union.tree_node* %exp) #0 !dbg !11667 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !11668, metadata !DIExpression()), !dbg !11669
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11670
  %1 = load i32, i32* @flag_shlib, align 4, !dbg !11671
  %call = call zeroext i8 @default_binds_local_p_1(%union.tree_node* %0, i32 %1), !dbg !11672
  ret i8 %call, !dbg !11673
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @default_binds_local_p_1(%union.tree_node* %exp, i32 %shlib) #0 !dbg !11674 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %shlib.addr = alloca i32, align 4
  %local_p = alloca i8, align 1
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !11675, metadata !DIExpression()), !dbg !11676
  store i32 %shlib, i32* %shlib.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shlib.addr, metadata !11677, metadata !DIExpression()), !dbg !11678
  call void @llvm.dbg.declare(metadata i8* %local_p, metadata !11679, metadata !DIExpression()), !dbg !11680
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11681
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !11681
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !11681
  %bf.load = load i64, i64* %1, align 8, !dbg !11681
  %bf.clear = and i64 %bf.load, 65535, !dbg !11681
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11681
  %idxprom = sext i32 %bf.cast to i64, !dbg !11681
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !11681
  %2 = load i32, i32* %arrayidx, align 4, !dbg !11681
  %cmp = icmp eq i32 %2, 3, !dbg !11681
  br i1 %cmp, label %if.else, label %if.then, !dbg !11683

if.then:                                          ; preds = %entry
  store i8 1, i8* %local_p, align 1, !dbg !11684
  br label %if.end69, !dbg !11685

if.else:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11686
  %decl_common = bitcast %union.tree_node* %3 to %struct.tree_decl_common*, !dbg !11686
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !11686
  %4 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !11686
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.92, i64 0, i64 0), %union.tree_node* %4), !dbg !11688
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !11688
  br i1 %tobool, label %if.then1, label %if.else2, !dbg !11689

if.then1:                                         ; preds = %if.else
  store i8 0, i8* %local_p, align 1, !dbg !11690
  br label %if.end68, !dbg !11691

if.else2:                                         ; preds = %if.else
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11692
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !11692
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !11692
  %bf.load4 = load i64, i64* %6, align 8, !dbg !11692
  %bf.lshr = lshr i64 %bf.load4, 27, !dbg !11692
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !11692
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !11692
  %tobool7 = icmp ne i32 %bf.cast6, 0, !dbg !11692
  br i1 %tobool7, label %if.else9, label %if.then8, !dbg !11694

if.then8:                                         ; preds = %if.else2
  store i8 1, i8* %local_p, align 1, !dbg !11695
  br label %if.end67, !dbg !11696

if.else9:                                         ; preds = %if.else2
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11697
  %decl_with_vis = bitcast %union.tree_node* %7 to %struct.tree_decl_with_vis*, !dbg !11697
  %visibility_specified = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !11697
  %8 = bitcast i24* %visibility_specified to i32*, !dbg !11697
  %bf.load10 = load i32, i32* %8, align 8, !dbg !11697
  %bf.lshr11 = lshr i32 %bf.load10, 12, !dbg !11697
  %bf.clear12 = and i32 %bf.lshr11, 1, !dbg !11697
  %tobool13 = icmp ne i32 %bf.clear12, 0, !dbg !11697
  br i1 %tobool13, label %land.lhs.true, label %if.else20, !dbg !11699

land.lhs.true:                                    ; preds = %if.else9
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11700
  %decl_with_vis14 = bitcast %union.tree_node* %9 to %struct.tree_decl_with_vis*, !dbg !11700
  %visibility = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis14, i32 0, i32 4, !dbg !11700
  %10 = bitcast i24* %visibility to i32*, !dbg !11700
  %bf.load15 = load i32, i32* %10, align 8, !dbg !11700
  %bf.lshr16 = lshr i32 %bf.load15, 10, !dbg !11700
  %bf.clear17 = and i32 %bf.lshr16, 3, !dbg !11700
  %cmp18 = icmp ne i32 %bf.clear17, 0, !dbg !11701
  br i1 %cmp18, label %if.then19, label %if.else20, !dbg !11702

if.then19:                                        ; preds = %land.lhs.true
  store i8 1, i8* %local_p, align 1, !dbg !11703
  br label %if.end66, !dbg !11704

if.else20:                                        ; preds = %land.lhs.true, %if.else9
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11705
  %decl_common21 = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !11705
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common21, i32 0, i32 2, !dbg !11705
  %12 = bitcast i40* %decl_flag_1 to i64*, !dbg !11705
  %bf.load22 = load i64, i64* %12, align 8, !dbg !11705
  %bf.lshr23 = lshr i64 %bf.load22, 25, !dbg !11705
  %bf.clear24 = and i64 %bf.lshr23, 1, !dbg !11705
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !11705
  %tobool26 = icmp ne i32 %bf.cast25, 0, !dbg !11705
  br i1 %tobool26, label %if.then27, label %if.else28, !dbg !11707

if.then27:                                        ; preds = %if.else20
  store i8 0, i8* %local_p, align 1, !dbg !11708
  br label %if.end65, !dbg !11709

if.else28:                                        ; preds = %if.else20
  %13 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11710
  %decl_with_vis29 = bitcast %union.tree_node* %13 to %struct.tree_decl_with_vis*, !dbg !11710
  %visibility30 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis29, i32 0, i32 4, !dbg !11710
  %14 = bitcast i24* %visibility30 to i32*, !dbg !11710
  %bf.load31 = load i32, i32* %14, align 8, !dbg !11710
  %bf.lshr32 = lshr i32 %bf.load31, 10, !dbg !11710
  %bf.clear33 = and i32 %bf.lshr32, 3, !dbg !11710
  %cmp34 = icmp ne i32 %bf.clear33, 0, !dbg !11712
  br i1 %cmp34, label %if.then35, label %if.else36, !dbg !11713

if.then35:                                        ; preds = %if.else28
  store i8 1, i8* %local_p, align 1, !dbg !11714
  br label %if.end64, !dbg !11715

if.else36:                                        ; preds = %if.else28
  %15 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11716
  %decl_with_vis37 = bitcast %union.tree_node* %15 to %struct.tree_decl_with_vis*, !dbg !11716
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis37, i32 0, i32 4, !dbg !11716
  %16 = bitcast i24* %weak_flag to i32*, !dbg !11716
  %bf.load38 = load i32, i32* %16, align 8, !dbg !11716
  %bf.lshr39 = lshr i32 %bf.load38, 7, !dbg !11716
  %bf.clear40 = and i32 %bf.lshr39, 1, !dbg !11716
  %tobool41 = icmp ne i32 %bf.clear40, 0, !dbg !11716
  br i1 %tobool41, label %if.then42, label %if.else43, !dbg !11718

if.then42:                                        ; preds = %if.else36
  store i8 0, i8* %local_p, align 1, !dbg !11719
  br label %if.end63, !dbg !11720

if.else43:                                        ; preds = %if.else36
  %17 = load i32, i32* %shlib.addr, align 4, !dbg !11721
  %tobool44 = icmp ne i32 %17, 0, !dbg !11721
  br i1 %tobool44, label %if.then45, label %if.else46, !dbg !11723

if.then45:                                        ; preds = %if.else43
  %18 = load i32, i32* @flag_whole_program, align 4, !dbg !11724
  %conv = trunc i32 %18 to i8, !dbg !11724
  store i8 %conv, i8* %local_p, align 1, !dbg !11725
  br label %if.end62, !dbg !11726

if.else46:                                        ; preds = %if.else43
  %19 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11727
  %decl_with_vis47 = bitcast %union.tree_node* %19 to %struct.tree_decl_with_vis*, !dbg !11727
  %common_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis47, i32 0, i32 4, !dbg !11727
  %20 = bitcast i24* %common_flag to i32*, !dbg !11727
  %bf.load48 = load i32, i32* %20, align 8, !dbg !11727
  %bf.lshr49 = lshr i32 %bf.load48, 3, !dbg !11727
  %bf.clear50 = and i32 %bf.lshr49, 1, !dbg !11727
  %tobool51 = icmp ne i32 %bf.clear50, 0, !dbg !11727
  br i1 %tobool51, label %land.lhs.true52, label %if.else61, !dbg !11729

land.lhs.true52:                                  ; preds = %if.else46
  %21 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11730
  %decl_common53 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !11730
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common53, i32 0, i32 5, !dbg !11730
  %22 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !11730
  %cmp54 = icmp eq %union.tree_node* %22, null, !dbg !11731
  br i1 %cmp54, label %if.then60, label %lor.lhs.false, !dbg !11732

lor.lhs.false:                                    ; preds = %land.lhs.true52
  %23 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11733
  %decl_common56 = bitcast %union.tree_node* %23 to %struct.tree_decl_common*, !dbg !11733
  %initial57 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common56, i32 0, i32 5, !dbg !11733
  %24 = load %union.tree_node*, %union.tree_node** %initial57, align 8, !dbg !11733
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !11734
  %cmp58 = icmp eq %union.tree_node* %24, %25, !dbg !11735
  br i1 %cmp58, label %if.then60, label %if.else61, !dbg !11736

if.then60:                                        ; preds = %lor.lhs.false, %land.lhs.true52
  store i8 0, i8* %local_p, align 1, !dbg !11737
  br label %if.end, !dbg !11738

if.else61:                                        ; preds = %lor.lhs.false, %if.else46
  store i8 1, i8* %local_p, align 1, !dbg !11739
  br label %if.end

if.end:                                           ; preds = %if.else61, %if.then60
  br label %if.end62

if.end62:                                         ; preds = %if.end, %if.then45
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then42
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then35
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then27
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then19
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then8
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then1
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then
  %26 = load i8, i8* %local_p, align 1, !dbg !11740
  ret i8 %26, !dbg !11741
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_globalize_label(%struct._IO_FILE* %stream, i8* %name) #0 !dbg !11742 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %name.addr = alloca i8*, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !11743, metadata !DIExpression()), !dbg !11744
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !11745, metadata !DIExpression()), !dbg !11746
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11747
  %call = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.158, i64 0, i64 0), %struct._IO_FILE* %0), !dbg !11748
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11749
  %2 = load i8*, i8** %name.addr, align 8, !dbg !11750
  call void @assemble_name(%struct._IO_FILE* %1, i8* %2), !dbg !11751
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11752
  %call1 = call i32 @putc(i32 10, %struct._IO_FILE* %3), !dbg !11753
  ret void, !dbg !11754
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_globalize_decl_name(%struct._IO_FILE* %stream, %union.tree_node* %decl) #0 !dbg !11755 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !11758, metadata !DIExpression()), !dbg !11759
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !11760, metadata !DIExpression()), !dbg !11761
  call void @llvm.dbg.declare(metadata i8** %name, metadata !11762, metadata !DIExpression()), !dbg !11763
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11764
  %decl_with_rtl = bitcast %union.tree_node* %0 to %struct.tree_decl_with_rtl*, !dbg !11764
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !11764
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !11764
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !11764
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11764

cond.true:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11764
  %decl_with_rtl1 = bitcast %union.tree_node* %2 to %struct.tree_decl_with_rtl*, !dbg !11764
  %rtl2 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl1, i32 0, i32 1, !dbg !11764
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rtl2, align 8, !dbg !11764
  br label %cond.end, !dbg !11764

cond.false:                                       ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11764
  call void @make_decl_rtl(%union.tree_node* %4), !dbg !11764
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !11764
  %decl_with_rtl3 = bitcast %union.tree_node* %5 to %struct.tree_decl_with_rtl*, !dbg !11764
  %rtl4 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl3, i32 0, i32 1, !dbg !11764
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl4, align 8, !dbg !11764
  br label %cond.end, !dbg !11764

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %3, %cond.true ], [ %6, %cond.false ], !dbg !11764
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond, i32 0, i32 1, !dbg !11764
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11764
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11764
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !11764
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11764
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !11764
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !11764
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 0, !dbg !11764
  %rt_str = bitcast %union.rtunion_def* %arrayidx7 to i8**, !dbg !11764
  %8 = load i8*, i8** %rt_str, align 8, !dbg !11764
  store i8* %8, i8** %name, align 8, !dbg !11763
  %9 = load void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 6), align 8, !dbg !11765
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11766
  %11 = load i8*, i8** %name, align 8, !dbg !11767
  call void %9(%struct._IO_FILE* %10, i8* %11), !dbg !11768
  ret void, !dbg !11769
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_emit_unwind_label(%struct._IO_FILE* %stream, %union.tree_node* %decl, i32 %for_eh, i32 %empty) #0 !dbg !11770 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %for_eh.addr = alloca i32, align 4
  %empty.addr = alloca i32, align 4
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !11773, metadata !DIExpression()), !dbg !11774
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !11775, metadata !DIExpression()), !dbg !11776
  store i32 %for_eh, i32* %for_eh.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %for_eh.addr, metadata !11777, metadata !DIExpression()), !dbg !11778
  store i32 %empty, i32* %empty.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %empty.addr, metadata !11779, metadata !DIExpression()), !dbg !11780
  ret void, !dbg !11781
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_emit_except_table_label(%struct._IO_FILE* %stream) #0 !dbg !11782 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !11785, metadata !DIExpression()), !dbg !11786
  ret void, !dbg !11787
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_internal_label(%struct._IO_FILE* %stream, i8* %prefix, i64 %labelno) #0 !dbg !11788 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %prefix.addr = alloca i8*, align 8
  %labelno.addr = alloca i64, align 8
  %buf = alloca i8*, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !11791, metadata !DIExpression()), !dbg !11792
  store i8* %prefix, i8** %prefix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %prefix.addr, metadata !11793, metadata !DIExpression()), !dbg !11794
  store i64 %labelno, i64* %labelno.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %labelno.addr, metadata !11795, metadata !DIExpression()), !dbg !11796
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !11797, metadata !DIExpression()), !dbg !11799
  %0 = load i8*, i8** %prefix.addr, align 8, !dbg !11800
  %call = call i64 @strlen(i8* %0), !dbg !11800
  %add = add i64 40, %call, !dbg !11800
  %1 = alloca i8, i64 %add, align 16, !dbg !11800
  store i8* %1, i8** %buf, align 8, !dbg !11799
  br label %do.body, !dbg !11801

do.body:                                          ; preds = %entry
  %2 = load i8*, i8** %buf, align 8, !dbg !11802
  %3 = load i8*, i8** %prefix.addr, align 8, !dbg !11802
  %4 = load i64, i64* %labelno.addr, align 8, !dbg !11802
  %conv = trunc i64 %4 to i32, !dbg !11802
  %call1 = call i32 (i8*, i8*, ...) @sprintf(i8* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0), i8* %3, i32 %conv), !dbg !11802
  br label %do.end, !dbg !11802

do.end:                                           ; preds = %do.body
  br label %do.body2, !dbg !11804

do.body2:                                         ; preds = %do.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11805
  %6 = load i8*, i8** %buf, align 8, !dbg !11805
  call void @assemble_name_raw(%struct._IO_FILE* %5, i8* %6), !dbg !11805
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !11805
  %call3 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), %struct._IO_FILE* %7), !dbg !11805
  br label %do.end4, !dbg !11805

do.end4:                                          ; preds = %do.body2
  ret void, !dbg !11807
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_file_start() #0 !dbg !11808 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 116), align 1, !dbg !11809
  %conv = zext i8 %0 to i32, !dbg !11811
  %tobool = icmp ne i32 %conv, 0, !dbg !11811
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !11812

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_verbose_asm, align 4, !dbg !11813
  %tobool1 = icmp ne i32 %1, 0, !dbg !11813
  br i1 %tobool1, label %if.end, label %lor.lhs.false, !dbg !11814

lor.lhs.false:                                    ; preds = %land.lhs.true
  %2 = load i32, i32* @flag_debug_asm, align 4, !dbg !11815
  %tobool2 = icmp ne i32 %2, 0, !dbg !11815
  br i1 %tobool2, label %if.end, label %lor.lhs.false3, !dbg !11816

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* @flag_dump_rtl_in_asm, align 4, !dbg !11817
  %tobool4 = icmp ne i32 %3, 0, !dbg !11817
  br i1 %tobool4, label %if.end, label %if.then, !dbg !11818

if.then:                                          ; preds = %lor.lhs.false3
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !11819
  %call = call i32 @fputs(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.159, i64 0, i64 0), %struct._IO_FILE* %4), !dbg !11820
  br label %if.end, !dbg !11820

if.end:                                           ; preds = %if.then, %lor.lhs.false3, %lor.lhs.false, %land.lhs.true, %entry
  %5 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 117), align 8, !dbg !11821
  %tobool5 = icmp ne i8 %5, 0, !dbg !11823
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !11824

if.then6:                                         ; preds = %if.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !11825
  %7 = load i8*, i8** @main_input_filename, align 8, !dbg !11826
  call void @output_file_directive(%struct._IO_FILE* %6, i8* %7), !dbg !11827
  br label %if.end7, !dbg !11827

if.end7:                                          ; preds = %if.then6, %if.end
  ret void, !dbg !11828
}

declare dso_local void @output_file_directive(%struct._IO_FILE*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @file_end_indicate_exec_stack() #0 !dbg !11829 {
entry:
  %flags = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !11830, metadata !DIExpression()), !dbg !11831
  store i32 1024, i32* %flags, align 4, !dbg !11831
  %0 = load i32, i32* @trampolines_created, align 4, !dbg !11832
  %tobool = icmp ne i32 %0, 0, !dbg !11832
  br i1 %tobool, label %if.then, label %if.end, !dbg !11834

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %flags, align 4, !dbg !11835
  %or = or i32 %1, 256, !dbg !11835
  store i32 %or, i32* %flags, align 4, !dbg !11835
  br label %if.end, !dbg !11836

if.end:                                           ; preds = %if.then, %entry
  %2 = load i32, i32* %flags, align 4, !dbg !11837
  %call = call %union.section* @get_section(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.160, i64 0, i64 0), i32 %2, %union.tree_node* null), !dbg !11838
  call void @switch_to_section(%union.section* %call), !dbg !11839
  ret void, !dbg !11840
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_constant_alignment(%union.tree_node* %exp) #0 !dbg !11841 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %align = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !11844, metadata !DIExpression()), !dbg !11845
  call void @llvm.dbg.declare(metadata i32* %align, metadata !11846, metadata !DIExpression()), !dbg !11847
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11848
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !11848
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11848
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11848
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !11848
  %align2 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 7, !dbg !11848
  %2 = load i32, i32* %align2, align 8, !dbg !11848
  store i32 %2, i32* %align, align 4, !dbg !11849
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11850
  %4 = load i32, i32* %align, align 4, !dbg !11850
  %call = call i32 @ix86_constant_alignment(%union.tree_node* %3, i32 %4), !dbg !11850
  store i32 %call, i32* %align, align 4, !dbg !11851
  %5 = load i32, i32* %align, align 4, !dbg !11852
  ret i32 %5, !dbg !11853
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @get_constant_size(%union.tree_node* %exp) #0 !dbg !11854 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %size = alloca i64, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !11857, metadata !DIExpression()), !dbg !11858
  call void @llvm.dbg.declare(metadata i64* %size, metadata !11859, metadata !DIExpression()), !dbg !11860
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11861
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !11861
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11861
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11861
  %call = call i64 @int_size_in_bytes(%union.tree_node* %1), !dbg !11862
  store i64 %call, i64* %size, align 8, !dbg !11863
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11864
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !11864
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !11864
  %bf.load = load i64, i64* %3, align 8, !dbg !11864
  %bf.clear = and i64 %bf.load, 65535, !dbg !11864
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11864
  %cmp = icmp eq i32 %bf.cast, 28, !dbg !11866
  br i1 %cmp, label %if.then, label %if.end, !dbg !11867

if.then:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11868
  %string = bitcast %union.tree_node* %4 to %struct.tree_string*, !dbg !11868
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 1, !dbg !11868
  %5 = load i32, i32* %length, align 8, !dbg !11868
  %conv = sext i32 %5 to i64, !dbg !11868
  %6 = load i64, i64* %size, align 8, !dbg !11868
  %cmp1 = icmp sgt i64 %conv, %6, !dbg !11868
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !11868

cond.true:                                        ; preds = %if.then
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !11868
  %string3 = bitcast %union.tree_node* %7 to %struct.tree_string*, !dbg !11868
  %length4 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string3, i32 0, i32 1, !dbg !11868
  %8 = load i32, i32* %length4, align 8, !dbg !11868
  %conv5 = sext i32 %8 to i64, !dbg !11868
  br label %cond.end, !dbg !11868

cond.false:                                       ; preds = %if.then
  %9 = load i64, i64* %size, align 8, !dbg !11868
  br label %cond.end, !dbg !11868

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv5, %cond.true ], [ %9, %cond.false ], !dbg !11868
  store i64 %cond, i64* %size, align 8, !dbg !11869
  br label %if.end, !dbg !11870

if.end:                                           ; preds = %cond.end, %entry
  %10 = load i64, i64* %size, align 8, !dbg !11871
  ret i64 %10, !dbg !11872
}

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_gc_safe_push(%struct.VEC_rtx_gc** %vec_, %struct.rtx_def* %obj_) #0 !dbg !11873 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_gc**, align 8
  %obj_.addr = alloca %struct.rtx_def*, align 8
  store %struct.VEC_rtx_gc** %vec_, %struct.VEC_rtx_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc*** %vec_.addr, metadata !11878, metadata !DIExpression()), !dbg !11879
  store %struct.rtx_def* %obj_, %struct.rtx_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_.addr, metadata !11880, metadata !DIExpression()), !dbg !11879
  %0 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !11879
  %call = call i32 @VEC_rtx_gc_reserve(%struct.VEC_rtx_gc** %0, i32 1), !dbg !11879
  %1 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !11879
  %2 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %1, align 8, !dbg !11879
  %tobool = icmp ne %struct.VEC_rtx_gc* %2, null, !dbg !11879
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11879

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !11879
  %4 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %3, align 8, !dbg !11879
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %4, i32 0, i32 0, !dbg !11879
  br label %cond.end, !dbg !11879

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11879

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11879
  %5 = load %struct.rtx_def*, %struct.rtx_def** %obj_.addr, align 8, !dbg !11879
  %call1 = call %struct.rtx_def** @VEC_rtx_base_quick_push(%struct.VEC_rtx_base* %cond, %struct.rtx_def* %5), !dbg !11879
  ret %struct.rtx_def** %call1, !dbg !11879
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_section_anchor(%struct.object_block* %block, i64 %offset, i32 %model) #0 !dbg !11881 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %block.addr = alloca %struct.object_block*, align 8
  %offset.addr = alloca i64, align 8
  %model.addr = alloca i32, align 4
  %label = alloca [100 x i8], align 16
  %begin = alloca i32, align 4
  %middle = alloca i32, align 4
  %end = alloca i32, align 4
  %min_offset = alloca i64, align 8
  %max_offset = alloca i64, align 8
  %range = alloca i64, align 8
  %bias = alloca i64, align 8
  %delta = alloca i64, align 8
  %anchor = alloca %struct.rtx_def*, align 8
  store %struct.object_block* %block, %struct.object_block** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.object_block** %block.addr, metadata !11884, metadata !DIExpression()), !dbg !11885
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !11886, metadata !DIExpression()), !dbg !11887
  store i32 %model, i32* %model.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %model.addr, metadata !11888, metadata !DIExpression()), !dbg !11889
  call void @llvm.dbg.declare(metadata [100 x i8]* %label, metadata !11890, metadata !DIExpression()), !dbg !11891
  call void @llvm.dbg.declare(metadata i32* %begin, metadata !11892, metadata !DIExpression()), !dbg !11893
  call void @llvm.dbg.declare(metadata i32* %middle, metadata !11894, metadata !DIExpression()), !dbg !11895
  call void @llvm.dbg.declare(metadata i32* %end, metadata !11896, metadata !DIExpression()), !dbg !11897
  call void @llvm.dbg.declare(metadata i64* %min_offset, metadata !11898, metadata !DIExpression()), !dbg !11899
  call void @llvm.dbg.declare(metadata i64* %max_offset, metadata !11900, metadata !DIExpression()), !dbg !11901
  call void @llvm.dbg.declare(metadata i64* %range, metadata !11902, metadata !DIExpression()), !dbg !11903
  call void @llvm.dbg.declare(metadata i64* %bias, metadata !11904, metadata !DIExpression()), !dbg !11905
  call void @llvm.dbg.declare(metadata i64* %delta, metadata !11906, metadata !DIExpression()), !dbg !11907
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %anchor, metadata !11908, metadata !DIExpression()), !dbg !11909
  %0 = load i64, i64* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 44), align 8, !dbg !11910
  store i64 %0, i64* %max_offset, align 8, !dbg !11911
  %1 = load i64, i64* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 43), align 8, !dbg !11912
  store i64 %1, i64* %min_offset, align 8, !dbg !11913
  %2 = load i64, i64* %max_offset, align 8, !dbg !11914
  %3 = load i64, i64* %min_offset, align 8, !dbg !11915
  %sub = sub i64 %2, %3, !dbg !11916
  %add = add i64 %sub, 1, !dbg !11917
  store i64 %add, i64* %range, align 8, !dbg !11918
  %4 = load i64, i64* %range, align 8, !dbg !11919
  %cmp = icmp eq i64 %4, 0, !dbg !11921
  br i1 %cmp, label %if.then, label %if.else, !dbg !11922

if.then:                                          ; preds = %entry
  store i64 0, i64* %offset.addr, align 8, !dbg !11923
  br label %if.end27, !dbg !11924

if.else:                                          ; preds = %entry
  %5 = load i32, i32* @ptr_mode, align 4, !dbg !11925
  %idxprom = zext i32 %5 to i64, !dbg !11925
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !11925
  %6 = load i8, i8* %arrayidx, align 1, !dbg !11925
  %conv = zext i8 %6 to i16, !dbg !11925
  %conv1 = zext i16 %conv to i32, !dbg !11925
  %mul = mul nsw i32 %conv1, 8, !dbg !11925
  %conv2 = trunc i32 %mul to i16, !dbg !11925
  %conv3 = zext i16 %conv2 to i32, !dbg !11925
  %sub4 = sub nsw i32 %conv3, 1, !dbg !11927
  %shl = shl i32 1, %sub4, !dbg !11928
  %conv5 = sext i32 %shl to i64, !dbg !11929
  store i64 %conv5, i64* %bias, align 8, !dbg !11930
  %7 = load i64, i64* %offset.addr, align 8, !dbg !11931
  %cmp6 = icmp slt i64 %7, 0, !dbg !11933
  br i1 %cmp6, label %if.then8, label %if.else16, !dbg !11934

if.then8:                                         ; preds = %if.else
  %8 = load i64, i64* %offset.addr, align 8, !dbg !11935
  %sub9 = sub i64 0, %8, !dbg !11937
  %9 = load i64, i64* %max_offset, align 8, !dbg !11938
  %add10 = add i64 %sub9, %9, !dbg !11939
  store i64 %add10, i64* %delta, align 8, !dbg !11940
  %10 = load i64, i64* %delta, align 8, !dbg !11941
  %11 = load i64, i64* %range, align 8, !dbg !11942
  %rem = urem i64 %10, %11, !dbg !11943
  %12 = load i64, i64* %delta, align 8, !dbg !11944
  %sub11 = sub i64 %12, %rem, !dbg !11944
  store i64 %sub11, i64* %delta, align 8, !dbg !11944
  %13 = load i64, i64* %delta, align 8, !dbg !11945
  %14 = load i64, i64* %bias, align 8, !dbg !11947
  %cmp12 = icmp ugt i64 %13, %14, !dbg !11948
  br i1 %cmp12, label %if.then14, label %if.end, !dbg !11949

if.then14:                                        ; preds = %if.then8
  %15 = load i64, i64* %bias, align 8, !dbg !11950
  store i64 %15, i64* %delta, align 8, !dbg !11951
  br label %if.end, !dbg !11952

if.end:                                           ; preds = %if.then14, %if.then8
  %16 = load i64, i64* %delta, align 8, !dbg !11953
  %sub15 = sub i64 0, %16, !dbg !11954
  store i64 %sub15, i64* %offset.addr, align 8, !dbg !11955
  br label %if.end26, !dbg !11956

if.else16:                                        ; preds = %if.else
  %17 = load i64, i64* %offset.addr, align 8, !dbg !11957
  %18 = load i64, i64* %min_offset, align 8, !dbg !11959
  %sub17 = sub i64 %17, %18, !dbg !11960
  store i64 %sub17, i64* %delta, align 8, !dbg !11961
  %19 = load i64, i64* %delta, align 8, !dbg !11962
  %20 = load i64, i64* %range, align 8, !dbg !11963
  %rem18 = urem i64 %19, %20, !dbg !11964
  %21 = load i64, i64* %delta, align 8, !dbg !11965
  %sub19 = sub i64 %21, %rem18, !dbg !11965
  store i64 %sub19, i64* %delta, align 8, !dbg !11965
  %22 = load i64, i64* %delta, align 8, !dbg !11966
  %23 = load i64, i64* %bias, align 8, !dbg !11968
  %sub20 = sub i64 %23, 1, !dbg !11969
  %cmp21 = icmp ugt i64 %22, %sub20, !dbg !11970
  br i1 %cmp21, label %if.then23, label %if.end25, !dbg !11971

if.then23:                                        ; preds = %if.else16
  %24 = load i64, i64* %bias, align 8, !dbg !11972
  %sub24 = sub i64 %24, 1, !dbg !11973
  store i64 %sub24, i64* %delta, align 8, !dbg !11974
  br label %if.end25, !dbg !11975

if.end25:                                         ; preds = %if.then23, %if.else16
  %25 = load i64, i64* %delta, align 8, !dbg !11976
  store i64 %25, i64* %offset.addr, align 8, !dbg !11977
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.end
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then
  store i32 0, i32* %begin, align 4, !dbg !11978
  %26 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !11979
  %anchors = getelementptr inbounds %struct.object_block, %struct.object_block* %26, i32 0, i32 4, !dbg !11979
  %27 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %anchors, align 8, !dbg !11979
  %tobool = icmp ne %struct.VEC_rtx_gc* %27, null, !dbg !11979
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11979

cond.true:                                        ; preds = %if.end27
  %28 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !11979
  %anchors28 = getelementptr inbounds %struct.object_block, %struct.object_block* %28, i32 0, i32 4, !dbg !11979
  %29 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %anchors28, align 8, !dbg !11979
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %29, i32 0, i32 0, !dbg !11979
  br label %cond.end, !dbg !11979

cond.false:                                       ; preds = %if.end27
  br label %cond.end, !dbg !11979

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11979
  %call = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond), !dbg !11979
  store i32 %call, i32* %end, align 4, !dbg !11980
  br label %while.cond, !dbg !11981

while.cond:                                       ; preds = %if.end74, %cond.end
  %30 = load i32, i32* %begin, align 4, !dbg !11982
  %31 = load i32, i32* %end, align 4, !dbg !11983
  %cmp29 = icmp ne i32 %30, %31, !dbg !11984
  br i1 %cmp29, label %while.body, label %while.end, !dbg !11981

while.body:                                       ; preds = %while.cond
  %32 = load i32, i32* %end, align 4, !dbg !11985
  %33 = load i32, i32* %begin, align 4, !dbg !11987
  %add31 = add i32 %32, %33, !dbg !11988
  %div = udiv i32 %add31, 2, !dbg !11989
  store i32 %div, i32* %middle, align 4, !dbg !11990
  %34 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !11991
  %anchors32 = getelementptr inbounds %struct.object_block, %struct.object_block* %34, i32 0, i32 4, !dbg !11991
  %35 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %anchors32, align 8, !dbg !11991
  %tobool33 = icmp ne %struct.VEC_rtx_gc* %35, null, !dbg !11991
  br i1 %tobool33, label %cond.true34, label %cond.false37, !dbg !11991

cond.true34:                                      ; preds = %while.body
  %36 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !11991
  %anchors35 = getelementptr inbounds %struct.object_block, %struct.object_block* %36, i32 0, i32 4, !dbg !11991
  %37 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %anchors35, align 8, !dbg !11991
  %base36 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %37, i32 0, i32 0, !dbg !11991
  br label %cond.end38, !dbg !11991

cond.false37:                                     ; preds = %while.body
  br label %cond.end38, !dbg !11991

cond.end38:                                       ; preds = %cond.false37, %cond.true34
  %cond39 = phi %struct.VEC_rtx_base* [ %base36, %cond.true34 ], [ null, %cond.false37 ], !dbg !11991
  %38 = load i32, i32* %middle, align 4, !dbg !11991
  %call40 = call %struct.rtx_def* @VEC_rtx_base_index(%struct.VEC_rtx_base* %cond39, i32 %38), !dbg !11991
  store %struct.rtx_def* %call40, %struct.rtx_def** %anchor, align 8, !dbg !11992
  %39 = load %struct.rtx_def*, %struct.rtx_def** %anchor, align 8, !dbg !11993
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !11993
  %block_sym = bitcast %union.u* %u to %struct.block_symbol*, !dbg !11993
  %offset41 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym, i32 0, i32 2, !dbg !11993
  %40 = load i64, i64* %offset41, align 8, !dbg !11993
  %41 = load i64, i64* %offset.addr, align 8, !dbg !11995
  %cmp42 = icmp sgt i64 %40, %41, !dbg !11996
  br i1 %cmp42, label %if.then44, label %if.else45, !dbg !11997

if.then44:                                        ; preds = %cond.end38
  %42 = load i32, i32* %middle, align 4, !dbg !11998
  store i32 %42, i32* %end, align 4, !dbg !11999
  br label %if.end74, !dbg !12000

if.else45:                                        ; preds = %cond.end38
  %43 = load %struct.rtx_def*, %struct.rtx_def** %anchor, align 8, !dbg !12001
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !12001
  %block_sym47 = bitcast %union.u* %u46 to %struct.block_symbol*, !dbg !12001
  %offset48 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym47, i32 0, i32 2, !dbg !12001
  %44 = load i64, i64* %offset48, align 8, !dbg !12001
  %45 = load i64, i64* %offset.addr, align 8, !dbg !12003
  %cmp49 = icmp slt i64 %44, %45, !dbg !12004
  br i1 %cmp49, label %if.then51, label %if.else53, !dbg !12005

if.then51:                                        ; preds = %if.else45
  %46 = load i32, i32* %middle, align 4, !dbg !12006
  %add52 = add i32 %46, 1, !dbg !12007
  store i32 %add52, i32* %begin, align 4, !dbg !12008
  br label %if.end73, !dbg !12009

if.else53:                                        ; preds = %if.else45
  %47 = load %struct.rtx_def*, %struct.rtx_def** %anchor, align 8, !dbg !12010
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !12010
  %fld = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !12010
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !12010
  %rt_int = bitcast %union.rtunion_def* %arrayidx55 to i32*, !dbg !12010
  %48 = load i32, i32* %rt_int, align 8, !dbg !12010
  %shr = ashr i32 %48, 3, !dbg !12010
  %and = and i32 %shr, 7, !dbg !12010
  %49 = load i32, i32* %model.addr, align 4, !dbg !12012
  %cmp56 = icmp ugt i32 %and, %49, !dbg !12013
  br i1 %cmp56, label %if.then58, label %if.else59, !dbg !12014

if.then58:                                        ; preds = %if.else53
  %50 = load i32, i32* %middle, align 4, !dbg !12015
  store i32 %50, i32* %end, align 4, !dbg !12016
  br label %if.end72, !dbg !12017

if.else59:                                        ; preds = %if.else53
  %51 = load %struct.rtx_def*, %struct.rtx_def** %anchor, align 8, !dbg !12018
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !12018
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !12018
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 1, !dbg !12018
  %rt_int63 = bitcast %union.rtunion_def* %arrayidx62 to i32*, !dbg !12018
  %52 = load i32, i32* %rt_int63, align 8, !dbg !12018
  %shr64 = ashr i32 %52, 3, !dbg !12018
  %and65 = and i32 %shr64, 7, !dbg !12018
  %53 = load i32, i32* %model.addr, align 4, !dbg !12020
  %cmp66 = icmp ult i32 %and65, %53, !dbg !12021
  br i1 %cmp66, label %if.then68, label %if.else70, !dbg !12022

if.then68:                                        ; preds = %if.else59
  %54 = load i32, i32* %middle, align 4, !dbg !12023
  %add69 = add i32 %54, 1, !dbg !12024
  store i32 %add69, i32* %begin, align 4, !dbg !12025
  br label %if.end71, !dbg !12026

if.else70:                                        ; preds = %if.else59
  %55 = load %struct.rtx_def*, %struct.rtx_def** %anchor, align 8, !dbg !12027
  store %struct.rtx_def* %55, %struct.rtx_def** %retval, align 8, !dbg !12028
  br label %return, !dbg !12028

if.end71:                                         ; preds = %if.then68
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.then58
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then51
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then44
  br label %while.cond, !dbg !11981, !llvm.loop !12029

while.end:                                        ; preds = %while.cond
  br label %do.body, !dbg !12031

do.body:                                          ; preds = %while.end
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %label, i64 0, i64 0, !dbg !12032
  %56 = load i32, i32* @anchor_labelno, align 4, !dbg !12032
  %inc = add nsw i32 %56, 1, !dbg !12032
  store i32 %inc, i32* @anchor_labelno, align 4, !dbg !12032
  %call75 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.162, i64 0, i64 0), i32 %56), !dbg !12032
  br label %do.end, !dbg !12032

do.end:                                           ; preds = %do.body
  %arraydecay76 = getelementptr inbounds [100 x i8], [100 x i8]* %label, i64 0, i64 0, !dbg !12034
  %call77 = call i8* @ggc_alloc_string(i8* %arraydecay76, i32 -1), !dbg !12034
  %57 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !12035
  %58 = load i64, i64* %offset.addr, align 8, !dbg !12036
  %call78 = call %struct.rtx_def* @create_block_symbol(i8* %call77, %struct.object_block* %57, i64 %58), !dbg !12037
  store %struct.rtx_def* %call78, %struct.rtx_def** %anchor, align 8, !dbg !12038
  %59 = load %struct.rtx_def*, %struct.rtx_def** %anchor, align 8, !dbg !12039
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !12039
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !12039
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 1, !dbg !12039
  %rt_int82 = bitcast %union.rtunion_def* %arrayidx81 to i32*, !dbg !12039
  %60 = load i32, i32* %rt_int82, align 8, !dbg !12040
  %or = or i32 %60, 258, !dbg !12040
  store i32 %or, i32* %rt_int82, align 8, !dbg !12040
  %61 = load i32, i32* %model.addr, align 4, !dbg !12041
  %shl83 = shl i32 %61, 3, !dbg !12042
  %62 = load %struct.rtx_def*, %struct.rtx_def** %anchor, align 8, !dbg !12043
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !12043
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !12043
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 1, !dbg !12043
  %rt_int87 = bitcast %union.rtunion_def* %arrayidx86 to i32*, !dbg !12043
  %63 = load i32, i32* %rt_int87, align 8, !dbg !12044
  %or88 = or i32 %63, %shl83, !dbg !12044
  store i32 %or88, i32* %rt_int87, align 8, !dbg !12044
  %64 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !12045
  %anchors89 = getelementptr inbounds %struct.object_block, %struct.object_block* %64, i32 0, i32 4, !dbg !12045
  %65 = load i32, i32* %begin, align 4, !dbg !12045
  %66 = load %struct.rtx_def*, %struct.rtx_def** %anchor, align 8, !dbg !12045
  %call90 = call %struct.rtx_def** @VEC_rtx_gc_safe_insert(%struct.VEC_rtx_gc** %anchors89, i32 %65, %struct.rtx_def* %66), !dbg !12045
  %67 = load %struct.rtx_def*, %struct.rtx_def** %anchor, align 8, !dbg !12046
  store %struct.rtx_def* %67, %struct.rtx_def** %retval, align 8, !dbg !12047
  br label %return, !dbg !12047

return:                                           ; preds = %do.end, %if.else70
  %68 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !12048
  ret %struct.rtx_def* %68, !dbg !12048
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %vec_) #0 !dbg !12049 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !12054, metadata !DIExpression()), !dbg !12055
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12055
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !12055
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12055

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12055
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %1, i32 0, i32 0, !dbg !12055
  %2 = load i32, i32* %num, align 8, !dbg !12055
  br label %cond.end, !dbg !12055

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12055

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !12055
  ret i32 %cond, !dbg !12055
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @VEC_rtx_base_index(%struct.VEC_rtx_base* %vec_, i32 %ix_) #0 !dbg !12056 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !12059, metadata !DIExpression()), !dbg !12060
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !12061, metadata !DIExpression()), !dbg !12060
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12060
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !12060
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12060

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !12060
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12060
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 0, !dbg !12060
  %3 = load i32, i32* %num, align 8, !dbg !12060
  %cmp = icmp ult i32 %1, %3, !dbg !12060
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !12062
  %land.ext = zext i1 %4 to i32, !dbg !12060
  %5 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12060
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %5, i32 0, i32 2, !dbg !12060
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !12060
  %idxprom = zext i32 %6 to i64, !dbg !12060
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !12060
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !12060
  ret %struct.rtx_def* %7, !dbg !12060
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_gc_safe_insert(%struct.VEC_rtx_gc** %vec_, i32 %ix_, %struct.rtx_def* %obj_) #0 !dbg !12063 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_gc**, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.rtx_def*, align 8
  store %struct.VEC_rtx_gc** %vec_, %struct.VEC_rtx_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc*** %vec_.addr, metadata !12066, metadata !DIExpression()), !dbg !12067
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !12068, metadata !DIExpression()), !dbg !12067
  store %struct.rtx_def* %obj_, %struct.rtx_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_.addr, metadata !12069, metadata !DIExpression()), !dbg !12067
  %0 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !12067
  %call = call i32 @VEC_rtx_gc_reserve(%struct.VEC_rtx_gc** %0, i32 1), !dbg !12067
  %1 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !12067
  %2 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %1, align 8, !dbg !12067
  %tobool = icmp ne %struct.VEC_rtx_gc* %2, null, !dbg !12067
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12067

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !12067
  %4 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %3, align 8, !dbg !12067
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %4, i32 0, i32 0, !dbg !12067
  br label %cond.end, !dbg !12067

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12067

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12067
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !12067
  %6 = load %struct.rtx_def*, %struct.rtx_def** %obj_.addr, align 8, !dbg !12067
  %call1 = call %struct.rtx_def** @VEC_rtx_base_quick_insert(%struct.VEC_rtx_base* %cond, i32 %5, %struct.rtx_def* %6), !dbg !12067
  ret %struct.rtx_def** %call1, !dbg !12067
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @output_object_blocks() #0 !dbg !12070 {
entry:
  %0 = load %struct.htab*, %struct.htab** @object_block_htab, align 8, !dbg !12071
  call void @htab_traverse(%struct.htab* %0, i32 (i8**, i8*)* @output_object_block_htab, i8* null), !dbg !12072
  ret void, !dbg !12073
}

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @output_object_block_htab(i8** %slot, i8* %data) #0 !dbg !12074 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !12075, metadata !DIExpression()), !dbg !12076
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !12077, metadata !DIExpression()), !dbg !12078
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !12079
  %1 = load i8*, i8** %0, align 8, !dbg !12080
  %2 = bitcast i8* %1 to %struct.object_block*, !dbg !12081
  call void @output_object_block(%struct.object_block* %2), !dbg !12082
  ret i32 1, !dbg !12083
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @elf_record_gcc_switches(i32 %type, i8* %name) #0 !dbg !3856 {
entry:
  %type.addr = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  %_ascii_bytes = alloca i8*, align 8
  %limit = alloca i8*, align 8
  %last_null = alloca i8*, align 8
  %bytes_in_chunk = alloca i32, align 4
  %p = alloca i8*, align 8
  %_limited_str = alloca i8*, align 8
  %ch = alloca i32, align 4
  %escape = alloca i32, align 4
  %escape53 = alloca i32, align 4
  %ch54 = alloca i32, align 4
  %_ascii_bytes87 = alloca i8*, align 8
  %limit88 = alloca i8*, align 8
  %last_null91 = alloca i8*, align 8
  %bytes_in_chunk92 = alloca i32, align 4
  %p97 = alloca i8*, align 8
  %_limited_str135 = alloca i8*, align 8
  %ch136 = alloca i32, align 4
  %escape142 = alloca i32, align 4
  %escape160 = alloca i32, align 4
  %ch161 = alloca i32, align 4
  %_ascii_bytes198 = alloca i8*, align 8
  %limit199 = alloca i8*, align 8
  %last_null202 = alloca i8*, align 8
  %bytes_in_chunk203 = alloca i32, align 4
  %p208 = alloca i8*, align 8
  %_limited_str246 = alloca i8*, align 8
  %ch247 = alloca i32, align 4
  %escape253 = alloca i32, align 4
  %escape271 = alloca i32, align 4
  %ch272 = alloca i32, align 4
  %_ascii_bytes316 = alloca i8*, align 8
  %limit317 = alloca i8*, align 8
  %last_null320 = alloca i8*, align 8
  %bytes_in_chunk321 = alloca i32, align 4
  %p326 = alloca i8*, align 8
  %_limited_str364 = alloca i8*, align 8
  %ch365 = alloca i32, align 4
  %escape371 = alloca i32, align 4
  %escape389 = alloca i32, align 4
  %ch390 = alloca i32, align 4
  %sec = alloca %union.section*, align 8
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !12084, metadata !DIExpression()), !dbg !12085
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !12086, metadata !DIExpression()), !dbg !12087
  %0 = load i32, i32* %type.addr, align 4, !dbg !12088
  switch i32 %0, label %sw.default427 [
    i32 0, label %sw.bb
    i32 2, label %sw.bb307
  ], !dbg !12089

sw.bb:                                            ; preds = %entry
  %1 = load i8*, i8** %name.addr, align 8, !dbg !12090
  %2 = load i8, i8* %1, align 1, !dbg !12093
  %conv = sext i8 %2 to i32, !dbg !12093
  %cmp = icmp ne i32 %conv, 45, !dbg !12094
  br i1 %cmp, label %if.then, label %if.else194, !dbg !12095

if.then:                                          ; preds = %sw.bb
  %3 = load i8, i8* @elf_record_gcc_switches.previous_name_held_back, align 1, !dbg !12096
  %tobool = icmp ne i8 %3, 0, !dbg !12096
  br i1 %tobool, label %if.then2, label %if.else84, !dbg !12099

if.then2:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %len, metadata !12100, metadata !DIExpression()), !dbg !12102
  %call = call i64 @strlen(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0)), !dbg !12103
  %conv3 = trunc i64 %call to i32, !dbg !12103
  store i32 %conv3, i32* %len, align 4, !dbg !12102
  %4 = load i32, i32* %len, align 4, !dbg !12104
  %idx.ext = zext i32 %4 to i64, !dbg !12105
  %add.ptr = getelementptr inbounds i8, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0), i64 %idx.ext, !dbg !12105
  %5 = load i32, i32* %len, align 4, !dbg !12106
  %conv4 = zext i32 %5 to i64, !dbg !12106
  %sub = sub i64 1024, %conv4, !dbg !12107
  %6 = load i8*, i8** %name.addr, align 8, !dbg !12108
  %call5 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %add.ptr, i64 %sub, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.163, i64 0, i64 0), i8* %6), !dbg !12109
  br label %do.body, !dbg !12110

do.body:                                          ; preds = %if.then2
  call void @llvm.dbg.declare(metadata i8** %_ascii_bytes, metadata !12111, metadata !DIExpression()), !dbg !12113
  store i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0), i8** %_ascii_bytes, align 8, !dbg !12113
  call void @llvm.dbg.declare(metadata i8** %limit, metadata !12114, metadata !DIExpression()), !dbg !12113
  %7 = load i8*, i8** %_ascii_bytes, align 8, !dbg !12113
  %call6 = call i64 @strlen(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0)), !dbg !12113
  %add.ptr7 = getelementptr inbounds i8, i8* %7, i64 %call6, !dbg !12113
  store i8* %add.ptr7, i8** %limit, align 8, !dbg !12113
  call void @llvm.dbg.declare(metadata i8** %last_null, metadata !12115, metadata !DIExpression()), !dbg !12113
  store i8* null, i8** %last_null, align 8, !dbg !12113
  call void @llvm.dbg.declare(metadata i32* %bytes_in_chunk, metadata !12116, metadata !DIExpression()), !dbg !12113
  store i32 0, i32* %bytes_in_chunk, align 4, !dbg !12113
  br label %for.cond, !dbg !12113

for.cond:                                         ; preds = %for.inc74, %do.body
  %8 = load i8*, i8** %_ascii_bytes, align 8, !dbg !12117
  %9 = load i8*, i8** %limit, align 8, !dbg !12117
  %cmp8 = icmp ult i8* %8, %9, !dbg !12117
  br i1 %cmp8, label %for.body, label %for.end76, !dbg !12120

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8** %p, metadata !12121, metadata !DIExpression()), !dbg !12123
  %10 = load i32, i32* %bytes_in_chunk, align 4, !dbg !12124
  %cmp10 = icmp uge i32 %10, 60, !dbg !12124
  br i1 %cmp10, label %if.then12, label %if.end, !dbg !12123

if.then12:                                        ; preds = %for.body
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12126
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12126
  store i32 0, i32* %bytes_in_chunk, align 4, !dbg !12126
  br label %if.end, !dbg !12126

if.end:                                           ; preds = %if.then12, %for.body
  %12 = load i8*, i8** %_ascii_bytes, align 8, !dbg !12128
  %13 = load i8*, i8** %last_null, align 8, !dbg !12128
  %cmp14 = icmp ugt i8* %12, %13, !dbg !12128
  br i1 %cmp14, label %if.then16, label %if.else, !dbg !12123

if.then16:                                        ; preds = %if.end
  %14 = load i8*, i8** %_ascii_bytes, align 8, !dbg !12130
  store i8* %14, i8** %p, align 8, !dbg !12130
  br label %for.cond17, !dbg !12130

for.cond17:                                       ; preds = %for.inc, %if.then16
  %15 = load i8*, i8** %p, align 8, !dbg !12133
  %16 = load i8*, i8** %limit, align 8, !dbg !12133
  %cmp18 = icmp ult i8* %15, %16, !dbg !12133
  br i1 %cmp18, label %land.rhs, label %land.end, !dbg !12133

land.rhs:                                         ; preds = %for.cond17
  %17 = load i8*, i8** %p, align 8, !dbg !12133
  %18 = load i8, i8* %17, align 1, !dbg !12133
  %conv20 = zext i8 %18 to i32, !dbg !12133
  %cmp21 = icmp ne i32 %conv20, 0, !dbg !12133
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond17
  %19 = phi i1 [ false, %for.cond17 ], [ %cmp21, %land.rhs ], !dbg !12135
  br i1 %19, label %for.body23, label %for.end, !dbg !12130

for.body23:                                       ; preds = %land.end
  br label %for.inc, !dbg !12133

for.inc:                                          ; preds = %for.body23
  %20 = load i8*, i8** %p, align 8, !dbg !12133
  %incdec.ptr = getelementptr inbounds i8, i8* %20, i32 1, !dbg !12133
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !12133
  br label %for.cond17, !dbg !12133, !llvm.loop !12136

for.end:                                          ; preds = %land.end
  %21 = load i8*, i8** %p, align 8, !dbg !12137
  store i8* %21, i8** %last_null, align 8, !dbg !12137
  br label %if.end24, !dbg !12137

if.else:                                          ; preds = %if.end
  %22 = load i8*, i8** %last_null, align 8, !dbg !12128
  store i8* %22, i8** %p, align 8, !dbg !12128
  br label %if.end24

if.end24:                                         ; preds = %if.else, %for.end
  %23 = load i8*, i8** %p, align 8, !dbg !12138
  %24 = load i8*, i8** %limit, align 8, !dbg !12138
  %cmp25 = icmp ult i8* %23, %24, !dbg !12138
  br i1 %cmp25, label %land.lhs.true, label %if.else52, !dbg !12138

land.lhs.true:                                    ; preds = %if.end24
  %25 = load i8*, i8** %p, align 8, !dbg !12138
  %26 = load i8*, i8** %_ascii_bytes, align 8, !dbg !12138
  %sub.ptr.lhs.cast = ptrtoint i8* %25 to i64, !dbg !12138
  %sub.ptr.rhs.cast = ptrtoint i8* %26 to i64, !dbg !12138
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !12138
  %cmp27 = icmp sle i64 %sub.ptr.sub, 256, !dbg !12138
  br i1 %cmp27, label %if.then29, label %if.else52, !dbg !12123

if.then29:                                        ; preds = %land.lhs.true
  %27 = load i32, i32* %bytes_in_chunk, align 4, !dbg !12140
  %cmp30 = icmp ugt i32 %27, 0, !dbg !12140
  br i1 %cmp30, label %if.then32, label %if.end34, !dbg !12143

if.then32:                                        ; preds = %if.then29
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12144
  %call33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12144
  store i32 0, i32* %bytes_in_chunk, align 4, !dbg !12144
  br label %if.end34, !dbg !12144

if.end34:                                         ; preds = %if.then32, %if.then29
  br label %do.body35, !dbg !12143

do.body35:                                        ; preds = %if.end34
  call void @llvm.dbg.declare(metadata i8** %_limited_str, metadata !12146, metadata !DIExpression()), !dbg !12148
  %29 = load i8*, i8** %_ascii_bytes, align 8, !dbg !12148
  store i8* %29, i8** %_limited_str, align 8, !dbg !12148
  call void @llvm.dbg.declare(metadata i32* %ch, metadata !12149, metadata !DIExpression()), !dbg !12148
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12148
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i64 0, i64 0)), !dbg !12148
  br label %for.cond37, !dbg !12148

for.cond37:                                       ; preds = %for.inc48, %do.body35
  %31 = load i8*, i8** %_limited_str, align 8, !dbg !12150
  %32 = load i8, i8* %31, align 1, !dbg !12150
  %conv38 = zext i8 %32 to i32, !dbg !12150
  store i32 %conv38, i32* %ch, align 4, !dbg !12150
  %tobool39 = icmp ne i32 %conv38, 0, !dbg !12153
  br i1 %tobool39, label %for.body40, label %for.end50, !dbg !12153

for.body40:                                       ; preds = %for.cond37
  call void @llvm.dbg.declare(metadata i32* %escape, metadata !12154, metadata !DIExpression()), !dbg !12156
  %33 = load i32, i32* %ch, align 4, !dbg !12156
  %idxprom = zext i32 %33 to i64, !dbg !12156
  %arrayidx = getelementptr inbounds [257 x i8], [257 x i8]* @.str.72, i64 0, i64 %idxprom, !dbg !12156
  %34 = load i8, i8* %arrayidx, align 1, !dbg !12156
  %conv41 = sext i8 %34 to i32, !dbg !12156
  store i32 %conv41, i32* %escape, align 4, !dbg !12156
  switch i32 %conv41, label %sw.default [
    i32 0, label %sw.bb42
    i32 1, label %sw.bb44
  ], !dbg !12156

sw.bb42:                                          ; preds = %for.body40
  %35 = load i32, i32* %ch, align 4, !dbg !12157
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12157
  %call43 = call i32 @putc(i32 %35, %struct._IO_FILE* %36), !dbg !12157
  br label %sw.epilog, !dbg !12157

sw.bb44:                                          ; preds = %for.body40
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12157
  %38 = load i32, i32* %ch, align 4, !dbg !12157
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i64 0, i64 0), i32 %38), !dbg !12157
  br label %sw.epilog, !dbg !12157

sw.default:                                       ; preds = %for.body40
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12157
  %call46 = call i32 @putc(i32 92, %struct._IO_FILE* %39), !dbg !12157
  %40 = load i32, i32* %escape, align 4, !dbg !12157
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12157
  %call47 = call i32 @putc(i32 %40, %struct._IO_FILE* %41), !dbg !12157
  br label %sw.epilog, !dbg !12157

sw.epilog:                                        ; preds = %sw.default, %sw.bb44, %sw.bb42
  br label %for.inc48, !dbg !12156

for.inc48:                                        ; preds = %sw.epilog
  %42 = load i8*, i8** %_limited_str, align 8, !dbg !12150
  %incdec.ptr49 = getelementptr inbounds i8, i8* %42, i32 1, !dbg !12150
  store i8* %incdec.ptr49, i8** %_limited_str, align 8, !dbg !12150
  br label %for.cond37, !dbg !12150, !llvm.loop !12159

for.end50:                                        ; preds = %for.cond37
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12148
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12148
  br label %do.end, !dbg !12148

do.end:                                           ; preds = %for.end50
  %44 = load i8*, i8** %p, align 8, !dbg !12143
  store i8* %44, i8** %_ascii_bytes, align 8, !dbg !12143
  br label %if.end73, !dbg !12143

if.else52:                                        ; preds = %land.lhs.true, %if.end24
  call void @llvm.dbg.declare(metadata i32* %escape53, metadata !12160, metadata !DIExpression()), !dbg !12162
  call void @llvm.dbg.declare(metadata i32* %ch54, metadata !12163, metadata !DIExpression()), !dbg !12162
  %45 = load i32, i32* %bytes_in_chunk, align 4, !dbg !12164
  %cmp55 = icmp eq i32 %45, 0, !dbg !12164
  br i1 %cmp55, label %if.then57, label %if.end59, !dbg !12162

if.then57:                                        ; preds = %if.else52
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12164
  %call58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.74, i64 0, i64 0)), !dbg !12164
  br label %if.end59, !dbg !12164

if.end59:                                         ; preds = %if.then57, %if.else52
  %47 = load i8*, i8** %_ascii_bytes, align 8, !dbg !12162
  %48 = load i8, i8* %47, align 1, !dbg !12162
  %conv60 = zext i8 %48 to i32, !dbg !12162
  store i32 %conv60, i32* %ch54, align 4, !dbg !12162
  %idxprom61 = zext i32 %conv60 to i64, !dbg !12162
  %arrayidx62 = getelementptr inbounds [257 x i8], [257 x i8]* @.str.72, i64 0, i64 %idxprom61, !dbg !12162
  %49 = load i8, i8* %arrayidx62, align 1, !dbg !12162
  %conv63 = sext i8 %49 to i32, !dbg !12162
  store i32 %conv63, i32* %escape53, align 4, !dbg !12162
  switch i32 %conv63, label %sw.default68 [
    i32 0, label %sw.bb64
    i32 1, label %sw.bb66
  ], !dbg !12162

sw.bb64:                                          ; preds = %if.end59
  %50 = load i32, i32* %ch54, align 4, !dbg !12166
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12166
  %call65 = call i32 @putc(i32 %50, %struct._IO_FILE* %51), !dbg !12166
  %52 = load i32, i32* %bytes_in_chunk, align 4, !dbg !12166
  %inc = add i32 %52, 1, !dbg !12166
  store i32 %inc, i32* %bytes_in_chunk, align 4, !dbg !12166
  br label %sw.epilog72, !dbg !12166

sw.bb66:                                          ; preds = %if.end59
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12166
  %54 = load i32, i32* %ch54, align 4, !dbg !12166
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i64 0, i64 0), i32 %54), !dbg !12166
  %55 = load i32, i32* %bytes_in_chunk, align 4, !dbg !12166
  %add = add i32 %55, 4, !dbg !12166
  store i32 %add, i32* %bytes_in_chunk, align 4, !dbg !12166
  br label %sw.epilog72, !dbg !12166

sw.default68:                                     ; preds = %if.end59
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12166
  %call69 = call i32 @putc(i32 92, %struct._IO_FILE* %56), !dbg !12166
  %57 = load i32, i32* %escape53, align 4, !dbg !12166
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12166
  %call70 = call i32 @putc(i32 %57, %struct._IO_FILE* %58), !dbg !12166
  %59 = load i32, i32* %bytes_in_chunk, align 4, !dbg !12166
  %add71 = add i32 %59, 2, !dbg !12166
  store i32 %add71, i32* %bytes_in_chunk, align 4, !dbg !12166
  br label %sw.epilog72, !dbg !12166

sw.epilog72:                                      ; preds = %sw.default68, %sw.bb66, %sw.bb64
  br label %if.end73

if.end73:                                         ; preds = %sw.epilog72, %do.end
  br label %for.inc74, !dbg !12123

for.inc74:                                        ; preds = %if.end73
  %60 = load i8*, i8** %_ascii_bytes, align 8, !dbg !12117
  %incdec.ptr75 = getelementptr inbounds i8, i8* %60, i32 1, !dbg !12117
  store i8* %incdec.ptr75, i8** %_ascii_bytes, align 8, !dbg !12117
  br label %for.cond, !dbg !12117, !llvm.loop !12168

for.end76:                                        ; preds = %for.cond
  %61 = load i32, i32* %bytes_in_chunk, align 4, !dbg !12169
  %cmp77 = icmp ugt i32 %61, 0, !dbg !12169
  br i1 %cmp77, label %if.then79, label %if.end81, !dbg !12113

if.then79:                                        ; preds = %for.end76
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12169
  %call80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12169
  br label %if.end81, !dbg !12169

if.end81:                                         ; preds = %if.then79, %for.end76
  br label %do.end82, !dbg !12113

do.end82:                                         ; preds = %if.end81
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12171
  %call83 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i64 0, i64 0), i64 1), !dbg !12171
  store i8 0, i8* @elf_record_gcc_switches.previous_name_held_back, align 1, !dbg !12172
  br label %if.end193, !dbg !12173

if.else84:                                        ; preds = %if.then
  %64 = load i8*, i8** %name.addr, align 8, !dbg !12174
  %call85 = call i8* @strncpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0), i8* %64, i64 1024), !dbg !12176
  br label %do.body86, !dbg !12177

do.body86:                                        ; preds = %if.else84
  call void @llvm.dbg.declare(metadata i8** %_ascii_bytes87, metadata !12178, metadata !DIExpression()), !dbg !12180
  store i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0), i8** %_ascii_bytes87, align 8, !dbg !12180
  call void @llvm.dbg.declare(metadata i8** %limit88, metadata !12181, metadata !DIExpression()), !dbg !12180
  %65 = load i8*, i8** %_ascii_bytes87, align 8, !dbg !12180
  %call89 = call i64 @strlen(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0)), !dbg !12180
  %add.ptr90 = getelementptr inbounds i8, i8* %65, i64 %call89, !dbg !12180
  store i8* %add.ptr90, i8** %limit88, align 8, !dbg !12180
  call void @llvm.dbg.declare(metadata i8** %last_null91, metadata !12182, metadata !DIExpression()), !dbg !12180
  store i8* null, i8** %last_null91, align 8, !dbg !12180
  call void @llvm.dbg.declare(metadata i32* %bytes_in_chunk92, metadata !12183, metadata !DIExpression()), !dbg !12180
  store i32 0, i32* %bytes_in_chunk92, align 4, !dbg !12180
  br label %for.cond93, !dbg !12180

for.cond93:                                       ; preds = %for.inc183, %do.body86
  %66 = load i8*, i8** %_ascii_bytes87, align 8, !dbg !12184
  %67 = load i8*, i8** %limit88, align 8, !dbg !12184
  %cmp94 = icmp ult i8* %66, %67, !dbg !12184
  br i1 %cmp94, label %for.body96, label %for.end185, !dbg !12187

for.body96:                                       ; preds = %for.cond93
  call void @llvm.dbg.declare(metadata i8** %p97, metadata !12188, metadata !DIExpression()), !dbg !12190
  %68 = load i32, i32* %bytes_in_chunk92, align 4, !dbg !12191
  %cmp98 = icmp uge i32 %68, 60, !dbg !12191
  br i1 %cmp98, label %if.then100, label %if.end102, !dbg !12190

if.then100:                                       ; preds = %for.body96
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12193
  %call101 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %69, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12193
  store i32 0, i32* %bytes_in_chunk92, align 4, !dbg !12193
  br label %if.end102, !dbg !12193

if.end102:                                        ; preds = %if.then100, %for.body96
  %70 = load i8*, i8** %_ascii_bytes87, align 8, !dbg !12195
  %71 = load i8*, i8** %last_null91, align 8, !dbg !12195
  %cmp103 = icmp ugt i8* %70, %71, !dbg !12195
  br i1 %cmp103, label %if.then105, label %if.else118, !dbg !12190

if.then105:                                       ; preds = %if.end102
  %72 = load i8*, i8** %_ascii_bytes87, align 8, !dbg !12197
  store i8* %72, i8** %p97, align 8, !dbg !12197
  br label %for.cond106, !dbg !12197

for.cond106:                                      ; preds = %for.inc115, %if.then105
  %73 = load i8*, i8** %p97, align 8, !dbg !12200
  %74 = load i8*, i8** %limit88, align 8, !dbg !12200
  %cmp107 = icmp ult i8* %73, %74, !dbg !12200
  br i1 %cmp107, label %land.rhs109, label %land.end113, !dbg !12200

land.rhs109:                                      ; preds = %for.cond106
  %75 = load i8*, i8** %p97, align 8, !dbg !12200
  %76 = load i8, i8* %75, align 1, !dbg !12200
  %conv110 = zext i8 %76 to i32, !dbg !12200
  %cmp111 = icmp ne i32 %conv110, 0, !dbg !12200
  br label %land.end113

land.end113:                                      ; preds = %land.rhs109, %for.cond106
  %77 = phi i1 [ false, %for.cond106 ], [ %cmp111, %land.rhs109 ], !dbg !12202
  br i1 %77, label %for.body114, label %for.end117, !dbg !12197

for.body114:                                      ; preds = %land.end113
  br label %for.inc115, !dbg !12200

for.inc115:                                       ; preds = %for.body114
  %78 = load i8*, i8** %p97, align 8, !dbg !12200
  %incdec.ptr116 = getelementptr inbounds i8, i8* %78, i32 1, !dbg !12200
  store i8* %incdec.ptr116, i8** %p97, align 8, !dbg !12200
  br label %for.cond106, !dbg !12200, !llvm.loop !12203

for.end117:                                       ; preds = %land.end113
  %79 = load i8*, i8** %p97, align 8, !dbg !12204
  store i8* %79, i8** %last_null91, align 8, !dbg !12204
  br label %if.end119, !dbg !12204

if.else118:                                       ; preds = %if.end102
  %80 = load i8*, i8** %last_null91, align 8, !dbg !12195
  store i8* %80, i8** %p97, align 8, !dbg !12195
  br label %if.end119

if.end119:                                        ; preds = %if.else118, %for.end117
  %81 = load i8*, i8** %p97, align 8, !dbg !12205
  %82 = load i8*, i8** %limit88, align 8, !dbg !12205
  %cmp120 = icmp ult i8* %81, %82, !dbg !12205
  br i1 %cmp120, label %land.lhs.true122, label %if.else159, !dbg !12205

land.lhs.true122:                                 ; preds = %if.end119
  %83 = load i8*, i8** %p97, align 8, !dbg !12205
  %84 = load i8*, i8** %_ascii_bytes87, align 8, !dbg !12205
  %sub.ptr.lhs.cast123 = ptrtoint i8* %83 to i64, !dbg !12205
  %sub.ptr.rhs.cast124 = ptrtoint i8* %84 to i64, !dbg !12205
  %sub.ptr.sub125 = sub i64 %sub.ptr.lhs.cast123, %sub.ptr.rhs.cast124, !dbg !12205
  %cmp126 = icmp sle i64 %sub.ptr.sub125, 256, !dbg !12205
  br i1 %cmp126, label %if.then128, label %if.else159, !dbg !12190

if.then128:                                       ; preds = %land.lhs.true122
  %85 = load i32, i32* %bytes_in_chunk92, align 4, !dbg !12207
  %cmp129 = icmp ugt i32 %85, 0, !dbg !12207
  br i1 %cmp129, label %if.then131, label %if.end133, !dbg !12210

if.then131:                                       ; preds = %if.then128
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12211
  %call132 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12211
  store i32 0, i32* %bytes_in_chunk92, align 4, !dbg !12211
  br label %if.end133, !dbg !12211

if.end133:                                        ; preds = %if.then131, %if.then128
  br label %do.body134, !dbg !12210

do.body134:                                       ; preds = %if.end133
  call void @llvm.dbg.declare(metadata i8** %_limited_str135, metadata !12213, metadata !DIExpression()), !dbg !12215
  %87 = load i8*, i8** %_ascii_bytes87, align 8, !dbg !12215
  store i8* %87, i8** %_limited_str135, align 8, !dbg !12215
  call void @llvm.dbg.declare(metadata i32* %ch136, metadata !12216, metadata !DIExpression()), !dbg !12215
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12215
  %call137 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i64 0, i64 0)), !dbg !12215
  br label %for.cond138, !dbg !12215

for.cond138:                                      ; preds = %for.inc154, %do.body134
  %89 = load i8*, i8** %_limited_str135, align 8, !dbg !12217
  %90 = load i8, i8* %89, align 1, !dbg !12217
  %conv139 = zext i8 %90 to i32, !dbg !12217
  store i32 %conv139, i32* %ch136, align 4, !dbg !12217
  %tobool140 = icmp ne i32 %conv139, 0, !dbg !12220
  br i1 %tobool140, label %for.body141, label %for.end156, !dbg !12220

for.body141:                                      ; preds = %for.cond138
  call void @llvm.dbg.declare(metadata i32* %escape142, metadata !12221, metadata !DIExpression()), !dbg !12223
  %91 = load i32, i32* %ch136, align 4, !dbg !12223
  %idxprom143 = zext i32 %91 to i64, !dbg !12223
  %arrayidx144 = getelementptr inbounds [257 x i8], [257 x i8]* @.str.72, i64 0, i64 %idxprom143, !dbg !12223
  %92 = load i8, i8* %arrayidx144, align 1, !dbg !12223
  %conv145 = sext i8 %92 to i32, !dbg !12223
  store i32 %conv145, i32* %escape142, align 4, !dbg !12223
  switch i32 %conv145, label %sw.default150 [
    i32 0, label %sw.bb146
    i32 1, label %sw.bb148
  ], !dbg !12223

sw.bb146:                                         ; preds = %for.body141
  %93 = load i32, i32* %ch136, align 4, !dbg !12224
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12224
  %call147 = call i32 @putc(i32 %93, %struct._IO_FILE* %94), !dbg !12224
  br label %sw.epilog153, !dbg !12224

sw.bb148:                                         ; preds = %for.body141
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12224
  %96 = load i32, i32* %ch136, align 4, !dbg !12224
  %call149 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i64 0, i64 0), i32 %96), !dbg !12224
  br label %sw.epilog153, !dbg !12224

sw.default150:                                    ; preds = %for.body141
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12224
  %call151 = call i32 @putc(i32 92, %struct._IO_FILE* %97), !dbg !12224
  %98 = load i32, i32* %escape142, align 4, !dbg !12224
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12224
  %call152 = call i32 @putc(i32 %98, %struct._IO_FILE* %99), !dbg !12224
  br label %sw.epilog153, !dbg !12224

sw.epilog153:                                     ; preds = %sw.default150, %sw.bb148, %sw.bb146
  br label %for.inc154, !dbg !12223

for.inc154:                                       ; preds = %sw.epilog153
  %100 = load i8*, i8** %_limited_str135, align 8, !dbg !12217
  %incdec.ptr155 = getelementptr inbounds i8, i8* %100, i32 1, !dbg !12217
  store i8* %incdec.ptr155, i8** %_limited_str135, align 8, !dbg !12217
  br label %for.cond138, !dbg !12217, !llvm.loop !12226

for.end156:                                       ; preds = %for.cond138
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12215
  %call157 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12215
  br label %do.end158, !dbg !12215

do.end158:                                        ; preds = %for.end156
  %102 = load i8*, i8** %p97, align 8, !dbg !12210
  store i8* %102, i8** %_ascii_bytes87, align 8, !dbg !12210
  br label %if.end182, !dbg !12210

if.else159:                                       ; preds = %land.lhs.true122, %if.end119
  call void @llvm.dbg.declare(metadata i32* %escape160, metadata !12227, metadata !DIExpression()), !dbg !12229
  call void @llvm.dbg.declare(metadata i32* %ch161, metadata !12230, metadata !DIExpression()), !dbg !12229
  %103 = load i32, i32* %bytes_in_chunk92, align 4, !dbg !12231
  %cmp162 = icmp eq i32 %103, 0, !dbg !12231
  br i1 %cmp162, label %if.then164, label %if.end166, !dbg !12229

if.then164:                                       ; preds = %if.else159
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12231
  %call165 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %104, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.74, i64 0, i64 0)), !dbg !12231
  br label %if.end166, !dbg !12231

if.end166:                                        ; preds = %if.then164, %if.else159
  %105 = load i8*, i8** %_ascii_bytes87, align 8, !dbg !12229
  %106 = load i8, i8* %105, align 1, !dbg !12229
  %conv167 = zext i8 %106 to i32, !dbg !12229
  store i32 %conv167, i32* %ch161, align 4, !dbg !12229
  %idxprom168 = zext i32 %conv167 to i64, !dbg !12229
  %arrayidx169 = getelementptr inbounds [257 x i8], [257 x i8]* @.str.72, i64 0, i64 %idxprom168, !dbg !12229
  %107 = load i8, i8* %arrayidx169, align 1, !dbg !12229
  %conv170 = sext i8 %107 to i32, !dbg !12229
  store i32 %conv170, i32* %escape160, align 4, !dbg !12229
  switch i32 %conv170, label %sw.default177 [
    i32 0, label %sw.bb171
    i32 1, label %sw.bb174
  ], !dbg !12229

sw.bb171:                                         ; preds = %if.end166
  %108 = load i32, i32* %ch161, align 4, !dbg !12233
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12233
  %call172 = call i32 @putc(i32 %108, %struct._IO_FILE* %109), !dbg !12233
  %110 = load i32, i32* %bytes_in_chunk92, align 4, !dbg !12233
  %inc173 = add i32 %110, 1, !dbg !12233
  store i32 %inc173, i32* %bytes_in_chunk92, align 4, !dbg !12233
  br label %sw.epilog181, !dbg !12233

sw.bb174:                                         ; preds = %if.end166
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12233
  %112 = load i32, i32* %ch161, align 4, !dbg !12233
  %call175 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %111, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i64 0, i64 0), i32 %112), !dbg !12233
  %113 = load i32, i32* %bytes_in_chunk92, align 4, !dbg !12233
  %add176 = add i32 %113, 4, !dbg !12233
  store i32 %add176, i32* %bytes_in_chunk92, align 4, !dbg !12233
  br label %sw.epilog181, !dbg !12233

sw.default177:                                    ; preds = %if.end166
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12233
  %call178 = call i32 @putc(i32 92, %struct._IO_FILE* %114), !dbg !12233
  %115 = load i32, i32* %escape160, align 4, !dbg !12233
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12233
  %call179 = call i32 @putc(i32 %115, %struct._IO_FILE* %116), !dbg !12233
  %117 = load i32, i32* %bytes_in_chunk92, align 4, !dbg !12233
  %add180 = add i32 %117, 2, !dbg !12233
  store i32 %add180, i32* %bytes_in_chunk92, align 4, !dbg !12233
  br label %sw.epilog181, !dbg !12233

sw.epilog181:                                     ; preds = %sw.default177, %sw.bb174, %sw.bb171
  br label %if.end182

if.end182:                                        ; preds = %sw.epilog181, %do.end158
  br label %for.inc183, !dbg !12190

for.inc183:                                       ; preds = %if.end182
  %118 = load i8*, i8** %_ascii_bytes87, align 8, !dbg !12184
  %incdec.ptr184 = getelementptr inbounds i8, i8* %118, i32 1, !dbg !12184
  store i8* %incdec.ptr184, i8** %_ascii_bytes87, align 8, !dbg !12184
  br label %for.cond93, !dbg !12184, !llvm.loop !12235

for.end185:                                       ; preds = %for.cond93
  %119 = load i32, i32* %bytes_in_chunk92, align 4, !dbg !12236
  %cmp186 = icmp ugt i32 %119, 0, !dbg !12236
  br i1 %cmp186, label %if.then188, label %if.end190, !dbg !12180

if.then188:                                       ; preds = %for.end185
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12236
  %call189 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %120, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12236
  br label %if.end190, !dbg !12236

if.end190:                                        ; preds = %if.then188, %for.end185
  br label %do.end191, !dbg !12180

do.end191:                                        ; preds = %if.end190
  %121 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12238
  %call192 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %121, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i64 0, i64 0), i64 1), !dbg !12238
  br label %if.end193

if.end193:                                        ; preds = %do.end191, %do.end82
  br label %if.end306, !dbg !12239

if.else194:                                       ; preds = %sw.bb
  %122 = load i8, i8* @elf_record_gcc_switches.previous_name_held_back, align 1, !dbg !12240
  %tobool195 = icmp ne i8 %122, 0, !dbg !12240
  br i1 %tobool195, label %if.then196, label %if.end304, !dbg !12243

if.then196:                                       ; preds = %if.else194
  br label %do.body197, !dbg !12244

do.body197:                                       ; preds = %if.then196
  call void @llvm.dbg.declare(metadata i8** %_ascii_bytes198, metadata !12246, metadata !DIExpression()), !dbg !12248
  store i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0), i8** %_ascii_bytes198, align 8, !dbg !12248
  call void @llvm.dbg.declare(metadata i8** %limit199, metadata !12249, metadata !DIExpression()), !dbg !12248
  %123 = load i8*, i8** %_ascii_bytes198, align 8, !dbg !12248
  %call200 = call i64 @strlen(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0)), !dbg !12248
  %add.ptr201 = getelementptr inbounds i8, i8* %123, i64 %call200, !dbg !12248
  store i8* %add.ptr201, i8** %limit199, align 8, !dbg !12248
  call void @llvm.dbg.declare(metadata i8** %last_null202, metadata !12250, metadata !DIExpression()), !dbg !12248
  store i8* null, i8** %last_null202, align 8, !dbg !12248
  call void @llvm.dbg.declare(metadata i32* %bytes_in_chunk203, metadata !12251, metadata !DIExpression()), !dbg !12248
  store i32 0, i32* %bytes_in_chunk203, align 4, !dbg !12248
  br label %for.cond204, !dbg !12248

for.cond204:                                      ; preds = %for.inc294, %do.body197
  %124 = load i8*, i8** %_ascii_bytes198, align 8, !dbg !12252
  %125 = load i8*, i8** %limit199, align 8, !dbg !12252
  %cmp205 = icmp ult i8* %124, %125, !dbg !12252
  br i1 %cmp205, label %for.body207, label %for.end296, !dbg !12255

for.body207:                                      ; preds = %for.cond204
  call void @llvm.dbg.declare(metadata i8** %p208, metadata !12256, metadata !DIExpression()), !dbg !12258
  %126 = load i32, i32* %bytes_in_chunk203, align 4, !dbg !12259
  %cmp209 = icmp uge i32 %126, 60, !dbg !12259
  br i1 %cmp209, label %if.then211, label %if.end213, !dbg !12258

if.then211:                                       ; preds = %for.body207
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12261
  %call212 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %127, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12261
  store i32 0, i32* %bytes_in_chunk203, align 4, !dbg !12261
  br label %if.end213, !dbg !12261

if.end213:                                        ; preds = %if.then211, %for.body207
  %128 = load i8*, i8** %_ascii_bytes198, align 8, !dbg !12263
  %129 = load i8*, i8** %last_null202, align 8, !dbg !12263
  %cmp214 = icmp ugt i8* %128, %129, !dbg !12263
  br i1 %cmp214, label %if.then216, label %if.else229, !dbg !12258

if.then216:                                       ; preds = %if.end213
  %130 = load i8*, i8** %_ascii_bytes198, align 8, !dbg !12265
  store i8* %130, i8** %p208, align 8, !dbg !12265
  br label %for.cond217, !dbg !12265

for.cond217:                                      ; preds = %for.inc226, %if.then216
  %131 = load i8*, i8** %p208, align 8, !dbg !12268
  %132 = load i8*, i8** %limit199, align 8, !dbg !12268
  %cmp218 = icmp ult i8* %131, %132, !dbg !12268
  br i1 %cmp218, label %land.rhs220, label %land.end224, !dbg !12268

land.rhs220:                                      ; preds = %for.cond217
  %133 = load i8*, i8** %p208, align 8, !dbg !12268
  %134 = load i8, i8* %133, align 1, !dbg !12268
  %conv221 = zext i8 %134 to i32, !dbg !12268
  %cmp222 = icmp ne i32 %conv221, 0, !dbg !12268
  br label %land.end224

land.end224:                                      ; preds = %land.rhs220, %for.cond217
  %135 = phi i1 [ false, %for.cond217 ], [ %cmp222, %land.rhs220 ], !dbg !12270
  br i1 %135, label %for.body225, label %for.end228, !dbg !12265

for.body225:                                      ; preds = %land.end224
  br label %for.inc226, !dbg !12268

for.inc226:                                       ; preds = %for.body225
  %136 = load i8*, i8** %p208, align 8, !dbg !12268
  %incdec.ptr227 = getelementptr inbounds i8, i8* %136, i32 1, !dbg !12268
  store i8* %incdec.ptr227, i8** %p208, align 8, !dbg !12268
  br label %for.cond217, !dbg !12268, !llvm.loop !12271

for.end228:                                       ; preds = %land.end224
  %137 = load i8*, i8** %p208, align 8, !dbg !12272
  store i8* %137, i8** %last_null202, align 8, !dbg !12272
  br label %if.end230, !dbg !12272

if.else229:                                       ; preds = %if.end213
  %138 = load i8*, i8** %last_null202, align 8, !dbg !12263
  store i8* %138, i8** %p208, align 8, !dbg !12263
  br label %if.end230

if.end230:                                        ; preds = %if.else229, %for.end228
  %139 = load i8*, i8** %p208, align 8, !dbg !12273
  %140 = load i8*, i8** %limit199, align 8, !dbg !12273
  %cmp231 = icmp ult i8* %139, %140, !dbg !12273
  br i1 %cmp231, label %land.lhs.true233, label %if.else270, !dbg !12273

land.lhs.true233:                                 ; preds = %if.end230
  %141 = load i8*, i8** %p208, align 8, !dbg !12273
  %142 = load i8*, i8** %_ascii_bytes198, align 8, !dbg !12273
  %sub.ptr.lhs.cast234 = ptrtoint i8* %141 to i64, !dbg !12273
  %sub.ptr.rhs.cast235 = ptrtoint i8* %142 to i64, !dbg !12273
  %sub.ptr.sub236 = sub i64 %sub.ptr.lhs.cast234, %sub.ptr.rhs.cast235, !dbg !12273
  %cmp237 = icmp sle i64 %sub.ptr.sub236, 256, !dbg !12273
  br i1 %cmp237, label %if.then239, label %if.else270, !dbg !12258

if.then239:                                       ; preds = %land.lhs.true233
  %143 = load i32, i32* %bytes_in_chunk203, align 4, !dbg !12275
  %cmp240 = icmp ugt i32 %143, 0, !dbg !12275
  br i1 %cmp240, label %if.then242, label %if.end244, !dbg !12278

if.then242:                                       ; preds = %if.then239
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12279
  %call243 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %144, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12279
  store i32 0, i32* %bytes_in_chunk203, align 4, !dbg !12279
  br label %if.end244, !dbg !12279

if.end244:                                        ; preds = %if.then242, %if.then239
  br label %do.body245, !dbg !12278

do.body245:                                       ; preds = %if.end244
  call void @llvm.dbg.declare(metadata i8** %_limited_str246, metadata !12281, metadata !DIExpression()), !dbg !12283
  %145 = load i8*, i8** %_ascii_bytes198, align 8, !dbg !12283
  store i8* %145, i8** %_limited_str246, align 8, !dbg !12283
  call void @llvm.dbg.declare(metadata i32* %ch247, metadata !12284, metadata !DIExpression()), !dbg !12283
  %146 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12283
  %call248 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %146, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i64 0, i64 0)), !dbg !12283
  br label %for.cond249, !dbg !12283

for.cond249:                                      ; preds = %for.inc265, %do.body245
  %147 = load i8*, i8** %_limited_str246, align 8, !dbg !12285
  %148 = load i8, i8* %147, align 1, !dbg !12285
  %conv250 = zext i8 %148 to i32, !dbg !12285
  store i32 %conv250, i32* %ch247, align 4, !dbg !12285
  %tobool251 = icmp ne i32 %conv250, 0, !dbg !12288
  br i1 %tobool251, label %for.body252, label %for.end267, !dbg !12288

for.body252:                                      ; preds = %for.cond249
  call void @llvm.dbg.declare(metadata i32* %escape253, metadata !12289, metadata !DIExpression()), !dbg !12291
  %149 = load i32, i32* %ch247, align 4, !dbg !12291
  %idxprom254 = zext i32 %149 to i64, !dbg !12291
  %arrayidx255 = getelementptr inbounds [257 x i8], [257 x i8]* @.str.72, i64 0, i64 %idxprom254, !dbg !12291
  %150 = load i8, i8* %arrayidx255, align 1, !dbg !12291
  %conv256 = sext i8 %150 to i32, !dbg !12291
  store i32 %conv256, i32* %escape253, align 4, !dbg !12291
  switch i32 %conv256, label %sw.default261 [
    i32 0, label %sw.bb257
    i32 1, label %sw.bb259
  ], !dbg !12291

sw.bb257:                                         ; preds = %for.body252
  %151 = load i32, i32* %ch247, align 4, !dbg !12292
  %152 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12292
  %call258 = call i32 @putc(i32 %151, %struct._IO_FILE* %152), !dbg !12292
  br label %sw.epilog264, !dbg !12292

sw.bb259:                                         ; preds = %for.body252
  %153 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12292
  %154 = load i32, i32* %ch247, align 4, !dbg !12292
  %call260 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %153, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i64 0, i64 0), i32 %154), !dbg !12292
  br label %sw.epilog264, !dbg !12292

sw.default261:                                    ; preds = %for.body252
  %155 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12292
  %call262 = call i32 @putc(i32 92, %struct._IO_FILE* %155), !dbg !12292
  %156 = load i32, i32* %escape253, align 4, !dbg !12292
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12292
  %call263 = call i32 @putc(i32 %156, %struct._IO_FILE* %157), !dbg !12292
  br label %sw.epilog264, !dbg !12292

sw.epilog264:                                     ; preds = %sw.default261, %sw.bb259, %sw.bb257
  br label %for.inc265, !dbg !12291

for.inc265:                                       ; preds = %sw.epilog264
  %158 = load i8*, i8** %_limited_str246, align 8, !dbg !12285
  %incdec.ptr266 = getelementptr inbounds i8, i8* %158, i32 1, !dbg !12285
  store i8* %incdec.ptr266, i8** %_limited_str246, align 8, !dbg !12285
  br label %for.cond249, !dbg !12285, !llvm.loop !12294

for.end267:                                       ; preds = %for.cond249
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12283
  %call268 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %159, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12283
  br label %do.end269, !dbg !12283

do.end269:                                        ; preds = %for.end267
  %160 = load i8*, i8** %p208, align 8, !dbg !12278
  store i8* %160, i8** %_ascii_bytes198, align 8, !dbg !12278
  br label %if.end293, !dbg !12278

if.else270:                                       ; preds = %land.lhs.true233, %if.end230
  call void @llvm.dbg.declare(metadata i32* %escape271, metadata !12295, metadata !DIExpression()), !dbg !12297
  call void @llvm.dbg.declare(metadata i32* %ch272, metadata !12298, metadata !DIExpression()), !dbg !12297
  %161 = load i32, i32* %bytes_in_chunk203, align 4, !dbg !12299
  %cmp273 = icmp eq i32 %161, 0, !dbg !12299
  br i1 %cmp273, label %if.then275, label %if.end277, !dbg !12297

if.then275:                                       ; preds = %if.else270
  %162 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12299
  %call276 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %162, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.74, i64 0, i64 0)), !dbg !12299
  br label %if.end277, !dbg !12299

if.end277:                                        ; preds = %if.then275, %if.else270
  %163 = load i8*, i8** %_ascii_bytes198, align 8, !dbg !12297
  %164 = load i8, i8* %163, align 1, !dbg !12297
  %conv278 = zext i8 %164 to i32, !dbg !12297
  store i32 %conv278, i32* %ch272, align 4, !dbg !12297
  %idxprom279 = zext i32 %conv278 to i64, !dbg !12297
  %arrayidx280 = getelementptr inbounds [257 x i8], [257 x i8]* @.str.72, i64 0, i64 %idxprom279, !dbg !12297
  %165 = load i8, i8* %arrayidx280, align 1, !dbg !12297
  %conv281 = sext i8 %165 to i32, !dbg !12297
  store i32 %conv281, i32* %escape271, align 4, !dbg !12297
  switch i32 %conv281, label %sw.default288 [
    i32 0, label %sw.bb282
    i32 1, label %sw.bb285
  ], !dbg !12297

sw.bb282:                                         ; preds = %if.end277
  %166 = load i32, i32* %ch272, align 4, !dbg !12301
  %167 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12301
  %call283 = call i32 @putc(i32 %166, %struct._IO_FILE* %167), !dbg !12301
  %168 = load i32, i32* %bytes_in_chunk203, align 4, !dbg !12301
  %inc284 = add i32 %168, 1, !dbg !12301
  store i32 %inc284, i32* %bytes_in_chunk203, align 4, !dbg !12301
  br label %sw.epilog292, !dbg !12301

sw.bb285:                                         ; preds = %if.end277
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12301
  %170 = load i32, i32* %ch272, align 4, !dbg !12301
  %call286 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %169, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i64 0, i64 0), i32 %170), !dbg !12301
  %171 = load i32, i32* %bytes_in_chunk203, align 4, !dbg !12301
  %add287 = add i32 %171, 4, !dbg !12301
  store i32 %add287, i32* %bytes_in_chunk203, align 4, !dbg !12301
  br label %sw.epilog292, !dbg !12301

sw.default288:                                    ; preds = %if.end277
  %172 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12301
  %call289 = call i32 @putc(i32 92, %struct._IO_FILE* %172), !dbg !12301
  %173 = load i32, i32* %escape271, align 4, !dbg !12301
  %174 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12301
  %call290 = call i32 @putc(i32 %173, %struct._IO_FILE* %174), !dbg !12301
  %175 = load i32, i32* %bytes_in_chunk203, align 4, !dbg !12301
  %add291 = add i32 %175, 2, !dbg !12301
  store i32 %add291, i32* %bytes_in_chunk203, align 4, !dbg !12301
  br label %sw.epilog292, !dbg !12301

sw.epilog292:                                     ; preds = %sw.default288, %sw.bb285, %sw.bb282
  br label %if.end293

if.end293:                                        ; preds = %sw.epilog292, %do.end269
  br label %for.inc294, !dbg !12258

for.inc294:                                       ; preds = %if.end293
  %176 = load i8*, i8** %_ascii_bytes198, align 8, !dbg !12252
  %incdec.ptr295 = getelementptr inbounds i8, i8* %176, i32 1, !dbg !12252
  store i8* %incdec.ptr295, i8** %_ascii_bytes198, align 8, !dbg !12252
  br label %for.cond204, !dbg !12252, !llvm.loop !12303

for.end296:                                       ; preds = %for.cond204
  %177 = load i32, i32* %bytes_in_chunk203, align 4, !dbg !12304
  %cmp297 = icmp ugt i32 %177, 0, !dbg !12304
  br i1 %cmp297, label %if.then299, label %if.end301, !dbg !12248

if.then299:                                       ; preds = %for.end296
  %178 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12304
  %call300 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %178, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12304
  br label %if.end301, !dbg !12304

if.end301:                                        ; preds = %if.then299, %for.end296
  br label %do.end302, !dbg !12248

do.end302:                                        ; preds = %if.end301
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12306
  %call303 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %179, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i64 0, i64 0), i64 1), !dbg !12306
  br label %if.end304, !dbg !12307

if.end304:                                        ; preds = %do.end302, %if.else194
  %180 = load i8*, i8** %name.addr, align 8, !dbg !12308
  %call305 = call i8* @strncpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0), i8* %180, i64 1024), !dbg !12309
  store i8 1, i8* @elf_record_gcc_switches.previous_name_held_back, align 1, !dbg !12310
  br label %if.end306

if.end306:                                        ; preds = %if.end304, %if.end193
  br label %sw.epilog428, !dbg !12311

sw.bb307:                                         ; preds = %entry
  %181 = load i8*, i8** %name.addr, align 8, !dbg !12312
  %cmp308 = icmp eq i8* %181, null, !dbg !12314
  br i1 %cmp308, label %if.then310, label %if.end426, !dbg !12315

if.then310:                                       ; preds = %sw.bb307
  %182 = load i8, i8* @elf_record_gcc_switches.started, align 1, !dbg !12316
  %tobool311 = icmp ne i8 %182, 0, !dbg !12316
  br i1 %tobool311, label %if.then312, label %if.else423, !dbg !12319

if.then312:                                       ; preds = %if.then310
  %183 = load i8, i8* @elf_record_gcc_switches.previous_name_held_back, align 1, !dbg !12320
  %tobool313 = icmp ne i8 %183, 0, !dbg !12320
  br i1 %tobool313, label %if.then314, label %if.end422, !dbg !12323

if.then314:                                       ; preds = %if.then312
  br label %do.body315, !dbg !12324

do.body315:                                       ; preds = %if.then314
  call void @llvm.dbg.declare(metadata i8** %_ascii_bytes316, metadata !12326, metadata !DIExpression()), !dbg !12328
  store i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0), i8** %_ascii_bytes316, align 8, !dbg !12328
  call void @llvm.dbg.declare(metadata i8** %limit317, metadata !12329, metadata !DIExpression()), !dbg !12328
  %184 = load i8*, i8** %_ascii_bytes316, align 8, !dbg !12328
  %call318 = call i64 @strlen(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @elf_record_gcc_switches.buffer, i64 0, i64 0)), !dbg !12328
  %add.ptr319 = getelementptr inbounds i8, i8* %184, i64 %call318, !dbg !12328
  store i8* %add.ptr319, i8** %limit317, align 8, !dbg !12328
  call void @llvm.dbg.declare(metadata i8** %last_null320, metadata !12330, metadata !DIExpression()), !dbg !12328
  store i8* null, i8** %last_null320, align 8, !dbg !12328
  call void @llvm.dbg.declare(metadata i32* %bytes_in_chunk321, metadata !12331, metadata !DIExpression()), !dbg !12328
  store i32 0, i32* %bytes_in_chunk321, align 4, !dbg !12328
  br label %for.cond322, !dbg !12328

for.cond322:                                      ; preds = %for.inc412, %do.body315
  %185 = load i8*, i8** %_ascii_bytes316, align 8, !dbg !12332
  %186 = load i8*, i8** %limit317, align 8, !dbg !12332
  %cmp323 = icmp ult i8* %185, %186, !dbg !12332
  br i1 %cmp323, label %for.body325, label %for.end414, !dbg !12335

for.body325:                                      ; preds = %for.cond322
  call void @llvm.dbg.declare(metadata i8** %p326, metadata !12336, metadata !DIExpression()), !dbg !12338
  %187 = load i32, i32* %bytes_in_chunk321, align 4, !dbg !12339
  %cmp327 = icmp uge i32 %187, 60, !dbg !12339
  br i1 %cmp327, label %if.then329, label %if.end331, !dbg !12338

if.then329:                                       ; preds = %for.body325
  %188 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12341
  %call330 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %188, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12341
  store i32 0, i32* %bytes_in_chunk321, align 4, !dbg !12341
  br label %if.end331, !dbg !12341

if.end331:                                        ; preds = %if.then329, %for.body325
  %189 = load i8*, i8** %_ascii_bytes316, align 8, !dbg !12343
  %190 = load i8*, i8** %last_null320, align 8, !dbg !12343
  %cmp332 = icmp ugt i8* %189, %190, !dbg !12343
  br i1 %cmp332, label %if.then334, label %if.else347, !dbg !12338

if.then334:                                       ; preds = %if.end331
  %191 = load i8*, i8** %_ascii_bytes316, align 8, !dbg !12345
  store i8* %191, i8** %p326, align 8, !dbg !12345
  br label %for.cond335, !dbg !12345

for.cond335:                                      ; preds = %for.inc344, %if.then334
  %192 = load i8*, i8** %p326, align 8, !dbg !12348
  %193 = load i8*, i8** %limit317, align 8, !dbg !12348
  %cmp336 = icmp ult i8* %192, %193, !dbg !12348
  br i1 %cmp336, label %land.rhs338, label %land.end342, !dbg !12348

land.rhs338:                                      ; preds = %for.cond335
  %194 = load i8*, i8** %p326, align 8, !dbg !12348
  %195 = load i8, i8* %194, align 1, !dbg !12348
  %conv339 = zext i8 %195 to i32, !dbg !12348
  %cmp340 = icmp ne i32 %conv339, 0, !dbg !12348
  br label %land.end342

land.end342:                                      ; preds = %land.rhs338, %for.cond335
  %196 = phi i1 [ false, %for.cond335 ], [ %cmp340, %land.rhs338 ], !dbg !12350
  br i1 %196, label %for.body343, label %for.end346, !dbg !12345

for.body343:                                      ; preds = %land.end342
  br label %for.inc344, !dbg !12348

for.inc344:                                       ; preds = %for.body343
  %197 = load i8*, i8** %p326, align 8, !dbg !12348
  %incdec.ptr345 = getelementptr inbounds i8, i8* %197, i32 1, !dbg !12348
  store i8* %incdec.ptr345, i8** %p326, align 8, !dbg !12348
  br label %for.cond335, !dbg !12348, !llvm.loop !12351

for.end346:                                       ; preds = %land.end342
  %198 = load i8*, i8** %p326, align 8, !dbg !12352
  store i8* %198, i8** %last_null320, align 8, !dbg !12352
  br label %if.end348, !dbg !12352

if.else347:                                       ; preds = %if.end331
  %199 = load i8*, i8** %last_null320, align 8, !dbg !12343
  store i8* %199, i8** %p326, align 8, !dbg !12343
  br label %if.end348

if.end348:                                        ; preds = %if.else347, %for.end346
  %200 = load i8*, i8** %p326, align 8, !dbg !12353
  %201 = load i8*, i8** %limit317, align 8, !dbg !12353
  %cmp349 = icmp ult i8* %200, %201, !dbg !12353
  br i1 %cmp349, label %land.lhs.true351, label %if.else388, !dbg !12353

land.lhs.true351:                                 ; preds = %if.end348
  %202 = load i8*, i8** %p326, align 8, !dbg !12353
  %203 = load i8*, i8** %_ascii_bytes316, align 8, !dbg !12353
  %sub.ptr.lhs.cast352 = ptrtoint i8* %202 to i64, !dbg !12353
  %sub.ptr.rhs.cast353 = ptrtoint i8* %203 to i64, !dbg !12353
  %sub.ptr.sub354 = sub i64 %sub.ptr.lhs.cast352, %sub.ptr.rhs.cast353, !dbg !12353
  %cmp355 = icmp sle i64 %sub.ptr.sub354, 256, !dbg !12353
  br i1 %cmp355, label %if.then357, label %if.else388, !dbg !12338

if.then357:                                       ; preds = %land.lhs.true351
  %204 = load i32, i32* %bytes_in_chunk321, align 4, !dbg !12355
  %cmp358 = icmp ugt i32 %204, 0, !dbg !12355
  br i1 %cmp358, label %if.then360, label %if.end362, !dbg !12358

if.then360:                                       ; preds = %if.then357
  %205 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12359
  %call361 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %205, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12359
  store i32 0, i32* %bytes_in_chunk321, align 4, !dbg !12359
  br label %if.end362, !dbg !12359

if.end362:                                        ; preds = %if.then360, %if.then357
  br label %do.body363, !dbg !12358

do.body363:                                       ; preds = %if.end362
  call void @llvm.dbg.declare(metadata i8** %_limited_str364, metadata !12361, metadata !DIExpression()), !dbg !12363
  %206 = load i8*, i8** %_ascii_bytes316, align 8, !dbg !12363
  store i8* %206, i8** %_limited_str364, align 8, !dbg !12363
  call void @llvm.dbg.declare(metadata i32* %ch365, metadata !12364, metadata !DIExpression()), !dbg !12363
  %207 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12363
  %call366 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %207, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.71, i64 0, i64 0)), !dbg !12363
  br label %for.cond367, !dbg !12363

for.cond367:                                      ; preds = %for.inc383, %do.body363
  %208 = load i8*, i8** %_limited_str364, align 8, !dbg !12365
  %209 = load i8, i8* %208, align 1, !dbg !12365
  %conv368 = zext i8 %209 to i32, !dbg !12365
  store i32 %conv368, i32* %ch365, align 4, !dbg !12365
  %tobool369 = icmp ne i32 %conv368, 0, !dbg !12368
  br i1 %tobool369, label %for.body370, label %for.end385, !dbg !12368

for.body370:                                      ; preds = %for.cond367
  call void @llvm.dbg.declare(metadata i32* %escape371, metadata !12369, metadata !DIExpression()), !dbg !12371
  %210 = load i32, i32* %ch365, align 4, !dbg !12371
  %idxprom372 = zext i32 %210 to i64, !dbg !12371
  %arrayidx373 = getelementptr inbounds [257 x i8], [257 x i8]* @.str.72, i64 0, i64 %idxprom372, !dbg !12371
  %211 = load i8, i8* %arrayidx373, align 1, !dbg !12371
  %conv374 = sext i8 %211 to i32, !dbg !12371
  store i32 %conv374, i32* %escape371, align 4, !dbg !12371
  switch i32 %conv374, label %sw.default379 [
    i32 0, label %sw.bb375
    i32 1, label %sw.bb377
  ], !dbg !12371

sw.bb375:                                         ; preds = %for.body370
  %212 = load i32, i32* %ch365, align 4, !dbg !12372
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12372
  %call376 = call i32 @putc(i32 %212, %struct._IO_FILE* %213), !dbg !12372
  br label %sw.epilog382, !dbg !12372

sw.bb377:                                         ; preds = %for.body370
  %214 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12372
  %215 = load i32, i32* %ch365, align 4, !dbg !12372
  %call378 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %214, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i64 0, i64 0), i32 %215), !dbg !12372
  br label %sw.epilog382, !dbg !12372

sw.default379:                                    ; preds = %for.body370
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12372
  %call380 = call i32 @putc(i32 92, %struct._IO_FILE* %216), !dbg !12372
  %217 = load i32, i32* %escape371, align 4, !dbg !12372
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12372
  %call381 = call i32 @putc(i32 %217, %struct._IO_FILE* %218), !dbg !12372
  br label %sw.epilog382, !dbg !12372

sw.epilog382:                                     ; preds = %sw.default379, %sw.bb377, %sw.bb375
  br label %for.inc383, !dbg !12371

for.inc383:                                       ; preds = %sw.epilog382
  %219 = load i8*, i8** %_limited_str364, align 8, !dbg !12365
  %incdec.ptr384 = getelementptr inbounds i8, i8* %219, i32 1, !dbg !12365
  store i8* %incdec.ptr384, i8** %_limited_str364, align 8, !dbg !12365
  br label %for.cond367, !dbg !12365, !llvm.loop !12374

for.end385:                                       ; preds = %for.cond367
  %220 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12363
  %call386 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %220, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12363
  br label %do.end387, !dbg !12363

do.end387:                                        ; preds = %for.end385
  %221 = load i8*, i8** %p326, align 8, !dbg !12358
  store i8* %221, i8** %_ascii_bytes316, align 8, !dbg !12358
  br label %if.end411, !dbg !12358

if.else388:                                       ; preds = %land.lhs.true351, %if.end348
  call void @llvm.dbg.declare(metadata i32* %escape389, metadata !12375, metadata !DIExpression()), !dbg !12377
  call void @llvm.dbg.declare(metadata i32* %ch390, metadata !12378, metadata !DIExpression()), !dbg !12377
  %222 = load i32, i32* %bytes_in_chunk321, align 4, !dbg !12379
  %cmp391 = icmp eq i32 %222, 0, !dbg !12379
  br i1 %cmp391, label %if.then393, label %if.end395, !dbg !12377

if.then393:                                       ; preds = %if.else388
  %223 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12379
  %call394 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %223, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.74, i64 0, i64 0)), !dbg !12379
  br label %if.end395, !dbg !12379

if.end395:                                        ; preds = %if.then393, %if.else388
  %224 = load i8*, i8** %_ascii_bytes316, align 8, !dbg !12377
  %225 = load i8, i8* %224, align 1, !dbg !12377
  %conv396 = zext i8 %225 to i32, !dbg !12377
  store i32 %conv396, i32* %ch390, align 4, !dbg !12377
  %idxprom397 = zext i32 %conv396 to i64, !dbg !12377
  %arrayidx398 = getelementptr inbounds [257 x i8], [257 x i8]* @.str.72, i64 0, i64 %idxprom397, !dbg !12377
  %226 = load i8, i8* %arrayidx398, align 1, !dbg !12377
  %conv399 = sext i8 %226 to i32, !dbg !12377
  store i32 %conv399, i32* %escape389, align 4, !dbg !12377
  switch i32 %conv399, label %sw.default406 [
    i32 0, label %sw.bb400
    i32 1, label %sw.bb403
  ], !dbg !12377

sw.bb400:                                         ; preds = %if.end395
  %227 = load i32, i32* %ch390, align 4, !dbg !12381
  %228 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12381
  %call401 = call i32 @putc(i32 %227, %struct._IO_FILE* %228), !dbg !12381
  %229 = load i32, i32* %bytes_in_chunk321, align 4, !dbg !12381
  %inc402 = add i32 %229, 1, !dbg !12381
  store i32 %inc402, i32* %bytes_in_chunk321, align 4, !dbg !12381
  br label %sw.epilog410, !dbg !12381

sw.bb403:                                         ; preds = %if.end395
  %230 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12381
  %231 = load i32, i32* %ch390, align 4, !dbg !12381
  %call404 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %230, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i64 0, i64 0), i32 %231), !dbg !12381
  %232 = load i32, i32* %bytes_in_chunk321, align 4, !dbg !12381
  %add405 = add i32 %232, 4, !dbg !12381
  store i32 %add405, i32* %bytes_in_chunk321, align 4, !dbg !12381
  br label %sw.epilog410, !dbg !12381

sw.default406:                                    ; preds = %if.end395
  %233 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12381
  %call407 = call i32 @putc(i32 92, %struct._IO_FILE* %233), !dbg !12381
  %234 = load i32, i32* %escape389, align 4, !dbg !12381
  %235 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12381
  %call408 = call i32 @putc(i32 %234, %struct._IO_FILE* %235), !dbg !12381
  %236 = load i32, i32* %bytes_in_chunk321, align 4, !dbg !12381
  %add409 = add i32 %236, 2, !dbg !12381
  store i32 %add409, i32* %bytes_in_chunk321, align 4, !dbg !12381
  br label %sw.epilog410, !dbg !12381

sw.epilog410:                                     ; preds = %sw.default406, %sw.bb403, %sw.bb400
  br label %if.end411

if.end411:                                        ; preds = %sw.epilog410, %do.end387
  br label %for.inc412, !dbg !12338

for.inc412:                                       ; preds = %if.end411
  %237 = load i8*, i8** %_ascii_bytes316, align 8, !dbg !12332
  %incdec.ptr413 = getelementptr inbounds i8, i8* %237, i32 1, !dbg !12332
  store i8* %incdec.ptr413, i8** %_ascii_bytes316, align 8, !dbg !12332
  br label %for.cond322, !dbg !12332, !llvm.loop !12383

for.end414:                                       ; preds = %for.cond322
  %238 = load i32, i32* %bytes_in_chunk321, align 4, !dbg !12384
  %cmp415 = icmp ugt i32 %238, 0, !dbg !12384
  br i1 %cmp415, label %if.then417, label %if.end419, !dbg !12328

if.then417:                                       ; preds = %for.end414
  %239 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12384
  %call418 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %239, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.69, i64 0, i64 0)), !dbg !12384
  br label %if.end419, !dbg !12384

if.end419:                                        ; preds = %if.then417, %for.end414
  br label %do.end420, !dbg !12328

do.end420:                                        ; preds = %if.end419
  %240 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !12386
  %call421 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %240, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i64 0, i64 0), i64 1), !dbg !12386
  br label %if.end422, !dbg !12387

if.end422:                                        ; preds = %do.end420, %if.then312
  br label %if.end425, !dbg !12388

if.else423:                                       ; preds = %if.then310
  call void @llvm.dbg.declare(metadata %union.section** %sec, metadata !12389, metadata !DIExpression()), !dbg !12391
  %241 = load i8*, i8** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 35), align 8, !dbg !12392
  %call424 = call %union.section* @get_section(i8* %241, i32 99329, %union.tree_node* null), !dbg !12393
  store %union.section* %call424, %union.section** %sec, align 8, !dbg !12394
  %242 = load %union.section*, %union.section** %sec, align 8, !dbg !12395
  call void @switch_to_section(%union.section* %242), !dbg !12396
  store i8 1, i8* @elf_record_gcc_switches.started, align 1, !dbg !12397
  br label %if.end425

if.end425:                                        ; preds = %if.else423, %if.end422
  br label %if.end426, !dbg !12398

if.end426:                                        ; preds = %if.end425, %sw.bb307
  br label %sw.default427, !dbg !12399

sw.default427:                                    ; preds = %entry, %if.end426
  br label %sw.epilog428, !dbg !12400

sw.epilog428:                                     ; preds = %sw.default427, %if.end306
  ret i32 0, !dbg !12401
}

declare dso_local i32 @snprintf(i8*, i64, i8*, ...) #2

declare dso_local i8* @strncpy(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_elf_asm_output_external(%struct._IO_FILE* %file, %union.tree_node* %decl, i8* %name) #0 !dbg !12402 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !12405, metadata !DIExpression()), !dbg !12406
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !12407, metadata !DIExpression()), !dbg !12408
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !12409, metadata !DIExpression()), !dbg !12410
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12411
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %0), !dbg !12411
  %base = bitcast %union.tree_node* %call to %struct.tree_base*, !dbg !12411
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12411
  %bf.load = load i64, i64* %1, align 8, !dbg !12411
  %bf.lshr = lshr i64 %bf.load, 26, !dbg !12411
  %bf.clear = and i64 %bf.lshr, 1, !dbg !12411
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12411
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !12411
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !12413

land.lhs.true:                                    ; preds = %entry
  %2 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 49), align 8, !dbg !12414
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12415
  %call1 = call zeroext i8 %2(%union.tree_node* %3), !dbg !12416
  %conv = zext i8 %call1 to i32, !dbg !12416
  %tobool2 = icmp ne i32 %conv, 0, !dbg !12416
  br i1 %tobool2, label %if.then, label %if.end, !dbg !12417

if.then:                                          ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12418
  %call3 = call i32 @maybe_assemble_visibility(%union.tree_node* %4), !dbg !12419
  br label %if.end, !dbg !12419

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !12420
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_mx_rtx_constant_pool(i8* %x_p) #0 !dbg !12421 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.rtx_constant_pool*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !12422, metadata !DIExpression()), !dbg !12423
  call void @llvm.dbg.declare(metadata %struct.rtx_constant_pool** %x, metadata !12424, metadata !DIExpression()), !dbg !12426
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !12427
  %1 = bitcast i8* %0 to %struct.rtx_constant_pool*, !dbg !12428
  store %struct.rtx_constant_pool* %1, %struct.rtx_constant_pool** %x, align 8, !dbg !12426
  %2 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12429
  %cmp = icmp ne %struct.rtx_constant_pool* %2, null, !dbg !12429
  br i1 %cmp, label %land.lhs.true, label %if.end12, !dbg !12429

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12429
  %4 = bitcast %struct.rtx_constant_pool* %3 to i8*, !dbg !12429
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !12429
  br i1 %cmp1, label %land.lhs.true2, label %if.end12, !dbg !12429

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12429
  %6 = bitcast %struct.rtx_constant_pool* %5 to i8*, !dbg !12429
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !12429
  %tobool = icmp ne i32 %call, 0, !dbg !12429
  br i1 %tobool, label %if.end12, label %if.then, !dbg !12431

if.then:                                          ; preds = %land.lhs.true2
  br label %do.body, !dbg !12432

do.body:                                          ; preds = %if.then
  %7 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12434
  %first = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %7, i32 0, i32 0, !dbg !12434
  %8 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %first, align 8, !dbg !12434
  %cmp3 = icmp ne %struct.constant_descriptor_rtx* %8, null, !dbg !12434
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !12437

if.then4:                                         ; preds = %do.body
  %9 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12434
  %first5 = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %9, i32 0, i32 0, !dbg !12434
  %10 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %first5, align 8, !dbg !12434
  %11 = bitcast %struct.constant_descriptor_rtx* %10 to i8*, !dbg !12434
  call void @gt_ggc_mx_constant_descriptor_rtx(i8* %11), !dbg !12434
  br label %if.end, !dbg !12434

if.end:                                           ; preds = %if.then4, %do.body
  br label %do.end, !dbg !12437

do.end:                                           ; preds = %if.end
  br label %do.body6, !dbg !12438

do.body6:                                         ; preds = %do.end
  %12 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12439
  %last = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %12, i32 0, i32 1, !dbg !12439
  %13 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %last, align 8, !dbg !12439
  %cmp7 = icmp ne %struct.constant_descriptor_rtx* %13, null, !dbg !12439
  br i1 %cmp7, label %if.then8, label %if.end10, !dbg !12442

if.then8:                                         ; preds = %do.body6
  %14 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12439
  %last9 = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %14, i32 0, i32 1, !dbg !12439
  %15 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %last9, align 8, !dbg !12439
  %16 = bitcast %struct.constant_descriptor_rtx* %15 to i8*, !dbg !12439
  call void @gt_ggc_mx_constant_descriptor_rtx(i8* %16), !dbg !12439
  br label %if.end10, !dbg !12439

if.end10:                                         ; preds = %if.then8, %do.body6
  br label %do.end11, !dbg !12442

do.end11:                                         ; preds = %if.end10
  %17 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12443
  %const_rtx_htab = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %17, i32 0, i32 2, !dbg !12444
  %18 = load %struct.htab*, %struct.htab** %const_rtx_htab, align 8, !dbg !12444
  %19 = bitcast %struct.htab* %18 to i8*, !dbg !12445
  call void @gt_ggc_m_P23constant_descriptor_rtx4htab(i8* %19), !dbg !12446
  br label %if.end12, !dbg !12447

if.end12:                                         ; preds = %do.end11, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !12448
}

declare dso_local i32 @ggc_set_mark(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_mx_constant_descriptor_rtx(i8* %x_p) #0 !dbg !12449 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.constant_descriptor_rtx*, align 8
  %xlimit = alloca %struct.constant_descriptor_rtx*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !12450, metadata !DIExpression()), !dbg !12451
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %x, metadata !12452, metadata !DIExpression()), !dbg !12453
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !12454
  %1 = bitcast i8* %0 to %struct.constant_descriptor_rtx*, !dbg !12455
  store %struct.constant_descriptor_rtx* %1, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12453
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %xlimit, metadata !12456, metadata !DIExpression()), !dbg !12457
  %2 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12458
  store %struct.constant_descriptor_rtx* %2, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12457
  br label %while.cond, !dbg !12459

while.cond:                                       ; preds = %while.body, %entry
  %3 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12460
  %cmp = icmp ne %struct.constant_descriptor_rtx* %3, null, !dbg !12460
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !12460

land.lhs.true:                                    ; preds = %while.cond
  %4 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12460
  %5 = bitcast %struct.constant_descriptor_rtx* %4 to i8*, !dbg !12460
  %cmp1 = icmp ne i8* %5, inttoptr (i64 1 to i8*), !dbg !12460
  br i1 %cmp1, label %land.rhs, label %land.end, !dbg !12460

land.rhs:                                         ; preds = %land.lhs.true
  %6 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12460
  %7 = bitcast %struct.constant_descriptor_rtx* %6 to i8*, !dbg !12460
  %call = call i32 @ggc_set_mark(i8* %7), !dbg !12460
  %tobool = icmp ne i32 %call, 0, !dbg !12460
  %lnot = xor i1 %tobool, true, !dbg !12460
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %8 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !12461
  br i1 %8, label %while.body, label %while.end, !dbg !12459

while.body:                                       ; preds = %land.end
  %9 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12462
  %next = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %9, i32 0, i32 0, !dbg !12463
  %10 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %next, align 8, !dbg !12463
  store %struct.constant_descriptor_rtx* %10, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12464
  br label %while.cond, !dbg !12459, !llvm.loop !12465

while.end:                                        ; preds = %land.end
  br label %while.cond2, !dbg !12467

while.cond2:                                      ; preds = %do.end25, %while.end
  %11 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12468
  %12 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12469
  %cmp3 = icmp ne %struct.constant_descriptor_rtx* %11, %12, !dbg !12470
  br i1 %cmp3, label %while.body4, label %while.end27, !dbg !12467

while.body4:                                      ; preds = %while.cond2
  br label %do.body, !dbg !12471

do.body:                                          ; preds = %while.body4
  %13 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12473
  %next5 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %13, i32 0, i32 0, !dbg !12473
  %14 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %next5, align 8, !dbg !12473
  %cmp6 = icmp ne %struct.constant_descriptor_rtx* %14, null, !dbg !12473
  br i1 %cmp6, label %if.then, label %if.end, !dbg !12476

if.then:                                          ; preds = %do.body
  %15 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12473
  %next7 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %15, i32 0, i32 0, !dbg !12473
  %16 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %next7, align 8, !dbg !12473
  %17 = bitcast %struct.constant_descriptor_rtx* %16 to i8*, !dbg !12473
  call void @gt_ggc_mx_constant_descriptor_rtx(i8* %17), !dbg !12473
  br label %if.end, !dbg !12473

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !12476

do.end:                                           ; preds = %if.end
  br label %do.body8, !dbg !12477

do.body8:                                         ; preds = %do.end
  %18 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12478
  %mem = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %18, i32 0, i32 1, !dbg !12478
  %19 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !12478
  %cmp9 = icmp ne %struct.rtx_def* %19, null, !dbg !12478
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !12481

if.then10:                                        ; preds = %do.body8
  %20 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12478
  %mem11 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %20, i32 0, i32 1, !dbg !12478
  %21 = load %struct.rtx_def*, %struct.rtx_def** %mem11, align 8, !dbg !12478
  %22 = bitcast %struct.rtx_def* %21 to i8*, !dbg !12478
  call void @gt_ggc_mx_rtx_def(i8* %22), !dbg !12478
  br label %if.end12, !dbg !12478

if.end12:                                         ; preds = %if.then10, %do.body8
  br label %do.end13, !dbg !12481

do.end13:                                         ; preds = %if.end12
  br label %do.body14, !dbg !12482

do.body14:                                        ; preds = %do.end13
  %23 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12483
  %sym = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %23, i32 0, i32 2, !dbg !12483
  %24 = load %struct.rtx_def*, %struct.rtx_def** %sym, align 8, !dbg !12483
  %cmp15 = icmp ne %struct.rtx_def* %24, null, !dbg !12483
  br i1 %cmp15, label %if.then16, label %if.end18, !dbg !12486

if.then16:                                        ; preds = %do.body14
  %25 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12483
  %sym17 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %25, i32 0, i32 2, !dbg !12483
  %26 = load %struct.rtx_def*, %struct.rtx_def** %sym17, align 8, !dbg !12483
  %27 = bitcast %struct.rtx_def* %26 to i8*, !dbg !12483
  call void @gt_ggc_mx_rtx_def(i8* %27), !dbg !12483
  br label %if.end18, !dbg !12483

if.end18:                                         ; preds = %if.then16, %do.body14
  br label %do.end19, !dbg !12486

do.end19:                                         ; preds = %if.end18
  br label %do.body20, !dbg !12487

do.body20:                                        ; preds = %do.end19
  %28 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12488
  %constant = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %28, i32 0, i32 3, !dbg !12488
  %29 = load %struct.rtx_def*, %struct.rtx_def** %constant, align 8, !dbg !12488
  %cmp21 = icmp ne %struct.rtx_def* %29, null, !dbg !12488
  br i1 %cmp21, label %if.then22, label %if.end24, !dbg !12491

if.then22:                                        ; preds = %do.body20
  %30 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12488
  %constant23 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %30, i32 0, i32 3, !dbg !12488
  %31 = load %struct.rtx_def*, %struct.rtx_def** %constant23, align 8, !dbg !12488
  %32 = bitcast %struct.rtx_def* %31 to i8*, !dbg !12488
  call void @gt_ggc_mx_rtx_def(i8* %32), !dbg !12488
  br label %if.end24, !dbg !12488

if.end24:                                         ; preds = %if.then22, %do.body20
  br label %do.end25, !dbg !12491

do.end25:                                         ; preds = %if.end24
  %33 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12492
  %next26 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %33, i32 0, i32 0, !dbg !12493
  %34 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %next26, align 8, !dbg !12493
  store %struct.constant_descriptor_rtx* %34, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12494
  br label %while.cond2, !dbg !12467, !llvm.loop !12495

while.end27:                                      ; preds = %while.cond2
  ret void, !dbg !12497
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_m_P23constant_descriptor_rtx4htab(i8* %x_p) #0 !dbg !12498 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  %a__ = alloca i8*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !12499, metadata !DIExpression()), !dbg !12500
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !12501, metadata !DIExpression()), !dbg !12503
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !12504
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !12505
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !12503
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12506
  %cmp = icmp ne %struct.htab* %2, null, !dbg !12506
  br i1 %cmp, label %land.lhs.true, label %if.end21, !dbg !12506

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12506
  %4 = bitcast %struct.htab* %3 to i8*, !dbg !12506
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !12506
  br i1 %cmp1, label %land.lhs.true2, label %if.end21, !dbg !12506

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12506
  %6 = bitcast %struct.htab* %5 to i8*, !dbg !12506
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !12506
  %tobool = icmp ne i32 %call, 0, !dbg !12506
  br i1 %tobool, label %if.end21, label %if.then, !dbg !12508

if.then:                                          ; preds = %land.lhs.true2
  %7 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12509
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %7, i32 0, i32 3, !dbg !12512
  %8 = load i8**, i8*** %entries, align 8, !dbg !12512
  %cmp3 = icmp ne i8** %8, null, !dbg !12513
  br i1 %cmp3, label %if.then4, label %if.end20, !dbg !12514

if.then4:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !12515, metadata !DIExpression()), !dbg !12517
  store i64 0, i64* %i0, align 8, !dbg !12518
  br label %for.cond, !dbg !12520

for.cond:                                         ; preds = %for.inc, %if.then4
  %9 = load i64, i64* %i0, align 8, !dbg !12521
  %10 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12523
  %size = getelementptr inbounds %struct.htab, %struct.htab* %10, i32 0, i32 4, !dbg !12524
  %11 = load i64, i64* %size, align 8, !dbg !12524
  %cmp5 = icmp ne i64 %9, %11, !dbg !12525
  br i1 %cmp5, label %for.body, label %for.end, !dbg !12526

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !12527

do.body:                                          ; preds = %for.body
  %12 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12529
  %entries6 = getelementptr inbounds %struct.htab, %struct.htab* %12, i32 0, i32 3, !dbg !12529
  %13 = load i8**, i8*** %entries6, align 8, !dbg !12529
  %14 = load i64, i64* %i0, align 8, !dbg !12529
  %arrayidx = getelementptr inbounds i8*, i8** %13, i64 %14, !dbg !12529
  %15 = load i8*, i8** %arrayidx, align 8, !dbg !12529
  %cmp7 = icmp ne i8* %15, null, !dbg !12529
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !12532

if.then8:                                         ; preds = %do.body
  %16 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12529
  %entries9 = getelementptr inbounds %struct.htab, %struct.htab* %16, i32 0, i32 3, !dbg !12529
  %17 = load i8**, i8*** %entries9, align 8, !dbg !12529
  %18 = load i64, i64* %i0, align 8, !dbg !12529
  %arrayidx10 = getelementptr inbounds i8*, i8** %17, i64 %18, !dbg !12529
  %19 = load i8*, i8** %arrayidx10, align 8, !dbg !12529
  call void @gt_ggc_mx_constant_descriptor_rtx(i8* %19), !dbg !12529
  br label %if.end, !dbg !12529

if.end:                                           ; preds = %if.then8, %do.body
  br label %do.end, !dbg !12532

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !12533

for.inc:                                          ; preds = %do.end
  %20 = load i64, i64* %i0, align 8, !dbg !12534
  %inc = add i64 %20, 1, !dbg !12534
  store i64 %inc, i64* %i0, align 8, !dbg !12534
  br label %for.cond, !dbg !12535, !llvm.loop !12536

for.end:                                          ; preds = %for.cond
  br label %do.body11, !dbg !12538

do.body11:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i8** %a__, metadata !12539, metadata !DIExpression()), !dbg !12542
  %21 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12542
  %entries12 = getelementptr inbounds %struct.htab, %struct.htab* %21, i32 0, i32 3, !dbg !12542
  %22 = load i8**, i8*** %entries12, align 8, !dbg !12542
  %23 = bitcast i8** %22 to i8*, !dbg !12542
  store i8* %23, i8** %a__, align 8, !dbg !12542
  %24 = load i8*, i8** %a__, align 8, !dbg !12543
  %cmp13 = icmp ne i8* %24, null, !dbg !12543
  br i1 %cmp13, label %land.lhs.true14, label %if.end18, !dbg !12543

land.lhs.true14:                                  ; preds = %do.body11
  %25 = load i8*, i8** %a__, align 8, !dbg !12543
  %cmp15 = icmp ne i8* %25, inttoptr (i64 1 to i8*), !dbg !12543
  br i1 %cmp15, label %if.then16, label %if.end18, !dbg !12542

if.then16:                                        ; preds = %land.lhs.true14
  %26 = load i8*, i8** %a__, align 8, !dbg !12543
  %call17 = call i32 @ggc_set_mark(i8* %26), !dbg !12543
  br label %if.end18, !dbg !12543

if.end18:                                         ; preds = %if.then16, %land.lhs.true14, %do.body11
  br label %do.end19, !dbg !12542

do.end19:                                         ; preds = %if.end18
  br label %if.end20, !dbg !12545

if.end20:                                         ; preds = %do.end19, %if.then
  br label %if.end21, !dbg !12546

if.end21:                                         ; preds = %if.end20, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !12547
}

declare dso_local void @gt_ggc_mx_rtx_def(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_nx_rtx_constant_pool(i8* %x_p) #0 !dbg !12548 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.rtx_constant_pool*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !12549, metadata !DIExpression()), !dbg !12550
  call void @llvm.dbg.declare(metadata %struct.rtx_constant_pool** %x, metadata !12551, metadata !DIExpression()), !dbg !12552
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !12553
  %1 = bitcast i8* %0 to %struct.rtx_constant_pool*, !dbg !12554
  store %struct.rtx_constant_pool* %1, %struct.rtx_constant_pool** %x, align 8, !dbg !12552
  %2 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12555
  %3 = bitcast %struct.rtx_constant_pool* %2 to i8*, !dbg !12555
  %4 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12557
  %5 = bitcast %struct.rtx_constant_pool* %4 to i8*, !dbg !12557
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_17rtx_constant_pool, i32 122), !dbg !12558
  %tobool = icmp ne i32 %call, 0, !dbg !12558
  br i1 %tobool, label %if.then, label %if.end9, !dbg !12559

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !12560

do.body:                                          ; preds = %if.then
  %6 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12562
  %first = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %6, i32 0, i32 0, !dbg !12562
  %7 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %first, align 8, !dbg !12562
  %cmp = icmp ne %struct.constant_descriptor_rtx* %7, null, !dbg !12562
  br i1 %cmp, label %if.then1, label %if.end, !dbg !12565

if.then1:                                         ; preds = %do.body
  %8 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12562
  %first2 = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %8, i32 0, i32 0, !dbg !12562
  %9 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %first2, align 8, !dbg !12562
  %10 = bitcast %struct.constant_descriptor_rtx* %9 to i8*, !dbg !12562
  call void @gt_pch_nx_constant_descriptor_rtx(i8* %10), !dbg !12562
  br label %if.end, !dbg !12562

if.end:                                           ; preds = %if.then1, %do.body
  br label %do.end, !dbg !12565

do.end:                                           ; preds = %if.end
  br label %do.body3, !dbg !12566

do.body3:                                         ; preds = %do.end
  %11 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12567
  %last = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %11, i32 0, i32 1, !dbg !12567
  %12 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %last, align 8, !dbg !12567
  %cmp4 = icmp ne %struct.constant_descriptor_rtx* %12, null, !dbg !12567
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !12570

if.then5:                                         ; preds = %do.body3
  %13 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12567
  %last6 = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %13, i32 0, i32 1, !dbg !12567
  %14 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %last6, align 8, !dbg !12567
  %15 = bitcast %struct.constant_descriptor_rtx* %14 to i8*, !dbg !12567
  call void @gt_pch_nx_constant_descriptor_rtx(i8* %15), !dbg !12567
  br label %if.end7, !dbg !12567

if.end7:                                          ; preds = %if.then5, %do.body3
  br label %do.end8, !dbg !12570

do.end8:                                          ; preds = %if.end7
  %16 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12571
  %const_rtx_htab = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %16, i32 0, i32 2, !dbg !12572
  %17 = load %struct.htab*, %struct.htab** %const_rtx_htab, align 8, !dbg !12572
  %18 = bitcast %struct.htab* %17 to i8*, !dbg !12573
  call void @gt_pch_n_P23constant_descriptor_rtx4htab(i8* %18), !dbg !12574
  br label %if.end9, !dbg !12575

if.end9:                                          ; preds = %do.end8, %entry
  ret void, !dbg !12576
}

declare dso_local i32 @gt_pch_note_object(i8*, i8*, void (i8*, i8*, void (i8*, i8*)*, i8*)*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_17rtx_constant_pool(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !12577 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.rtx_constant_pool*, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !12581, metadata !DIExpression()), !dbg !12582
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !12583, metadata !DIExpression()), !dbg !12584
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !12585, metadata !DIExpression()), !dbg !12586
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !12587, metadata !DIExpression()), !dbg !12588
  call void @llvm.dbg.declare(metadata %struct.rtx_constant_pool** %x, metadata !12589, metadata !DIExpression()), !dbg !12590
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !12591
  %1 = bitcast i8* %0 to %struct.rtx_constant_pool*, !dbg !12592
  store %struct.rtx_constant_pool* %1, %struct.rtx_constant_pool** %x, align 8, !dbg !12590
  %2 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12593
  %3 = bitcast %struct.rtx_constant_pool* %2 to i8*, !dbg !12595
  %4 = load i8*, i8** %this_obj.addr, align 8, !dbg !12596
  %cmp = icmp eq i8* %3, %4, !dbg !12597
  br i1 %cmp, label %if.then, label %if.end, !dbg !12598

if.then:                                          ; preds = %entry
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !12599
  %6 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12600
  %first = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %6, i32 0, i32 0, !dbg !12601
  %7 = bitcast %struct.constant_descriptor_rtx** %first to i8*, !dbg !12602
  %8 = load i8*, i8** %cookie.addr, align 8, !dbg !12603
  call void %5(i8* %7, i8* %8), !dbg !12599
  br label %if.end, !dbg !12599

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12604
  %10 = bitcast %struct.rtx_constant_pool* %9 to i8*, !dbg !12606
  %11 = load i8*, i8** %this_obj.addr, align 8, !dbg !12607
  %cmp1 = icmp eq i8* %10, %11, !dbg !12608
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !12609

if.then2:                                         ; preds = %if.end
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !12610
  %13 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12611
  %last = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %13, i32 0, i32 1, !dbg !12612
  %14 = bitcast %struct.constant_descriptor_rtx** %last to i8*, !dbg !12613
  %15 = load i8*, i8** %cookie.addr, align 8, !dbg !12614
  call void %12(i8* %14, i8* %15), !dbg !12610
  br label %if.end3, !dbg !12610

if.end3:                                          ; preds = %if.then2, %if.end
  %16 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12615
  %17 = bitcast %struct.rtx_constant_pool* %16 to i8*, !dbg !12617
  %18 = load i8*, i8** %this_obj.addr, align 8, !dbg !12618
  %cmp4 = icmp eq i8* %17, %18, !dbg !12619
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !12620

if.then5:                                         ; preds = %if.end3
  %19 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !12621
  %20 = load %struct.rtx_constant_pool*, %struct.rtx_constant_pool** %x, align 8, !dbg !12622
  %const_rtx_htab = getelementptr inbounds %struct.rtx_constant_pool, %struct.rtx_constant_pool* %20, i32 0, i32 2, !dbg !12623
  %21 = bitcast %struct.htab** %const_rtx_htab to i8*, !dbg !12624
  %22 = load i8*, i8** %cookie.addr, align 8, !dbg !12625
  call void %19(i8* %21, i8* %22), !dbg !12621
  br label %if.end6, !dbg !12621

if.end6:                                          ; preds = %if.then5, %if.end3
  ret void, !dbg !12626
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_nx_constant_descriptor_rtx(i8* %x_p) #0 !dbg !12627 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.constant_descriptor_rtx*, align 8
  %xlimit = alloca %struct.constant_descriptor_rtx*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !12628, metadata !DIExpression()), !dbg !12629
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %x, metadata !12630, metadata !DIExpression()), !dbg !12631
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !12632
  %1 = bitcast i8* %0 to %struct.constant_descriptor_rtx*, !dbg !12633
  store %struct.constant_descriptor_rtx* %1, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12631
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %xlimit, metadata !12634, metadata !DIExpression()), !dbg !12635
  %2 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12636
  store %struct.constant_descriptor_rtx* %2, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12635
  br label %while.cond, !dbg !12637

while.cond:                                       ; preds = %while.body, %entry
  %3 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12638
  %4 = bitcast %struct.constant_descriptor_rtx* %3 to i8*, !dbg !12638
  %5 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12639
  %6 = bitcast %struct.constant_descriptor_rtx* %5 to i8*, !dbg !12639
  %call = call i32 @gt_pch_note_object(i8* %4, i8* %6, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_23constant_descriptor_rtx, i32 146), !dbg !12640
  %tobool = icmp ne i32 %call, 0, !dbg !12637
  br i1 %tobool, label %while.body, label %while.end, !dbg !12637

while.body:                                       ; preds = %while.cond
  %7 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12641
  %next = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %7, i32 0, i32 0, !dbg !12642
  %8 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %next, align 8, !dbg !12642
  store %struct.constant_descriptor_rtx* %8, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12643
  br label %while.cond, !dbg !12637, !llvm.loop !12644

while.end:                                        ; preds = %while.cond
  br label %while.cond1, !dbg !12646

while.cond1:                                      ; preds = %do.end23, %while.end
  %9 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12647
  %10 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %xlimit, align 8, !dbg !12648
  %cmp = icmp ne %struct.constant_descriptor_rtx* %9, %10, !dbg !12649
  br i1 %cmp, label %while.body2, label %while.end25, !dbg !12646

while.body2:                                      ; preds = %while.cond1
  br label %do.body, !dbg !12650

do.body:                                          ; preds = %while.body2
  %11 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12652
  %next3 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %11, i32 0, i32 0, !dbg !12652
  %12 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %next3, align 8, !dbg !12652
  %cmp4 = icmp ne %struct.constant_descriptor_rtx* %12, null, !dbg !12652
  br i1 %cmp4, label %if.then, label %if.end, !dbg !12655

if.then:                                          ; preds = %do.body
  %13 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12652
  %next5 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %13, i32 0, i32 0, !dbg !12652
  %14 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %next5, align 8, !dbg !12652
  %15 = bitcast %struct.constant_descriptor_rtx* %14 to i8*, !dbg !12652
  call void @gt_pch_nx_constant_descriptor_rtx(i8* %15), !dbg !12652
  br label %if.end, !dbg !12652

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end, !dbg !12655

do.end:                                           ; preds = %if.end
  br label %do.body6, !dbg !12656

do.body6:                                         ; preds = %do.end
  %16 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12657
  %mem = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %16, i32 0, i32 1, !dbg !12657
  %17 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !12657
  %cmp7 = icmp ne %struct.rtx_def* %17, null, !dbg !12657
  br i1 %cmp7, label %if.then8, label %if.end10, !dbg !12660

if.then8:                                         ; preds = %do.body6
  %18 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12657
  %mem9 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %18, i32 0, i32 1, !dbg !12657
  %19 = load %struct.rtx_def*, %struct.rtx_def** %mem9, align 8, !dbg !12657
  %20 = bitcast %struct.rtx_def* %19 to i8*, !dbg !12657
  call void @gt_pch_nx_rtx_def(i8* %20), !dbg !12657
  br label %if.end10, !dbg !12657

if.end10:                                         ; preds = %if.then8, %do.body6
  br label %do.end11, !dbg !12660

do.end11:                                         ; preds = %if.end10
  br label %do.body12, !dbg !12661

do.body12:                                        ; preds = %do.end11
  %21 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12662
  %sym = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %21, i32 0, i32 2, !dbg !12662
  %22 = load %struct.rtx_def*, %struct.rtx_def** %sym, align 8, !dbg !12662
  %cmp13 = icmp ne %struct.rtx_def* %22, null, !dbg !12662
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !12665

if.then14:                                        ; preds = %do.body12
  %23 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12662
  %sym15 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %23, i32 0, i32 2, !dbg !12662
  %24 = load %struct.rtx_def*, %struct.rtx_def** %sym15, align 8, !dbg !12662
  %25 = bitcast %struct.rtx_def* %24 to i8*, !dbg !12662
  call void @gt_pch_nx_rtx_def(i8* %25), !dbg !12662
  br label %if.end16, !dbg !12662

if.end16:                                         ; preds = %if.then14, %do.body12
  br label %do.end17, !dbg !12665

do.end17:                                         ; preds = %if.end16
  br label %do.body18, !dbg !12666

do.body18:                                        ; preds = %do.end17
  %26 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12667
  %constant = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %26, i32 0, i32 3, !dbg !12667
  %27 = load %struct.rtx_def*, %struct.rtx_def** %constant, align 8, !dbg !12667
  %cmp19 = icmp ne %struct.rtx_def* %27, null, !dbg !12667
  br i1 %cmp19, label %if.then20, label %if.end22, !dbg !12670

if.then20:                                        ; preds = %do.body18
  %28 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12667
  %constant21 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %28, i32 0, i32 3, !dbg !12667
  %29 = load %struct.rtx_def*, %struct.rtx_def** %constant21, align 8, !dbg !12667
  %30 = bitcast %struct.rtx_def* %29 to i8*, !dbg !12667
  call void @gt_pch_nx_rtx_def(i8* %30), !dbg !12667
  br label %if.end22, !dbg !12667

if.end22:                                         ; preds = %if.then20, %do.body18
  br label %do.end23, !dbg !12670

do.end23:                                         ; preds = %if.end22
  %31 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12671
  %next24 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %31, i32 0, i32 0, !dbg !12672
  %32 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %next24, align 8, !dbg !12672
  store %struct.constant_descriptor_rtx* %32, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12673
  br label %while.cond1, !dbg !12646, !llvm.loop !12674

while.end25:                                      ; preds = %while.cond1
  ret void, !dbg !12676
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_n_P23constant_descriptor_rtx4htab(i8* %x_p) #0 !dbg !12677 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !12678, metadata !DIExpression()), !dbg !12679
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !12680, metadata !DIExpression()), !dbg !12681
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !12682
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !12683
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !12681
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12684
  %3 = bitcast %struct.htab* %2 to i8*, !dbg !12684
  %4 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12686
  %5 = bitcast %struct.htab* %4 to i8*, !dbg !12686
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_P23constant_descriptor_rtx4htab, i32 191), !dbg !12687
  %tobool = icmp ne i32 %call, 0, !dbg !12687
  br i1 %tobool, label %if.then, label %if.end11, !dbg !12688

if.then:                                          ; preds = %entry
  %6 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12689
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %6, i32 0, i32 3, !dbg !12692
  %7 = load i8**, i8*** %entries, align 8, !dbg !12692
  %cmp = icmp ne i8** %7, null, !dbg !12693
  br i1 %cmp, label %if.then1, label %if.end10, !dbg !12694

if.then1:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !12695, metadata !DIExpression()), !dbg !12697
  store i64 0, i64* %i0, align 8, !dbg !12698
  br label %for.cond, !dbg !12700

for.cond:                                         ; preds = %for.inc, %if.then1
  %8 = load i64, i64* %i0, align 8, !dbg !12701
  %9 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12703
  %size = getelementptr inbounds %struct.htab, %struct.htab* %9, i32 0, i32 4, !dbg !12704
  %10 = load i64, i64* %size, align 8, !dbg !12704
  %cmp2 = icmp ne i64 %8, %10, !dbg !12705
  br i1 %cmp2, label %for.body, label %for.end, !dbg !12706

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !12707

do.body:                                          ; preds = %for.body
  %11 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12709
  %entries3 = getelementptr inbounds %struct.htab, %struct.htab* %11, i32 0, i32 3, !dbg !12709
  %12 = load i8**, i8*** %entries3, align 8, !dbg !12709
  %13 = load i64, i64* %i0, align 8, !dbg !12709
  %arrayidx = getelementptr inbounds i8*, i8** %12, i64 %13, !dbg !12709
  %14 = load i8*, i8** %arrayidx, align 8, !dbg !12709
  %cmp4 = icmp ne i8* %14, null, !dbg !12709
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !12712

if.then5:                                         ; preds = %do.body
  %15 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12709
  %entries6 = getelementptr inbounds %struct.htab, %struct.htab* %15, i32 0, i32 3, !dbg !12709
  %16 = load i8**, i8*** %entries6, align 8, !dbg !12709
  %17 = load i64, i64* %i0, align 8, !dbg !12709
  %arrayidx7 = getelementptr inbounds i8*, i8** %16, i64 %17, !dbg !12709
  %18 = load i8*, i8** %arrayidx7, align 8, !dbg !12709
  call void @gt_pch_nx_constant_descriptor_rtx(i8* %18), !dbg !12709
  br label %if.end, !dbg !12709

if.end:                                           ; preds = %if.then5, %do.body
  br label %do.end, !dbg !12712

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !12713

for.inc:                                          ; preds = %do.end
  %19 = load i64, i64* %i0, align 8, !dbg !12714
  %inc = add i64 %19, 1, !dbg !12714
  store i64 %inc, i64* %i0, align 8, !dbg !12714
  br label %for.cond, !dbg !12715, !llvm.loop !12716

for.end:                                          ; preds = %for.cond
  %20 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12718
  %entries8 = getelementptr inbounds %struct.htab, %struct.htab* %20, i32 0, i32 3, !dbg !12719
  %21 = load i8**, i8*** %entries8, align 8, !dbg !12719
  %22 = bitcast i8** %21 to i8*, !dbg !12720
  %23 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12721
  %24 = bitcast %struct.htab* %23 to i8*, !dbg !12721
  %call9 = call i32 @gt_pch_note_object(i8* %22, i8* %24, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_P23constant_descriptor_rtx4htab, i32 217), !dbg !12722
  br label %if.end10, !dbg !12723

if.end10:                                         ; preds = %for.end, %if.then
  br label %if.end11, !dbg !12724

if.end11:                                         ; preds = %if.end10, %entry
  ret void, !dbg !12725
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_23constant_descriptor_rtx(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !12726 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.constant_descriptor_rtx*, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !12727, metadata !DIExpression()), !dbg !12728
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !12729, metadata !DIExpression()), !dbg !12730
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !12731, metadata !DIExpression()), !dbg !12732
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !12733, metadata !DIExpression()), !dbg !12734
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %x, metadata !12735, metadata !DIExpression()), !dbg !12737
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !12738
  %1 = bitcast i8* %0 to %struct.constant_descriptor_rtx*, !dbg !12739
  store %struct.constant_descriptor_rtx* %1, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12737
  %2 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12740
  %3 = bitcast %struct.constant_descriptor_rtx* %2 to i8*, !dbg !12742
  %4 = load i8*, i8** %this_obj.addr, align 8, !dbg !12743
  %cmp = icmp eq i8* %3, %4, !dbg !12744
  br i1 %cmp, label %if.then, label %if.end, !dbg !12745

if.then:                                          ; preds = %entry
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !12746
  %6 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12747
  %next = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %6, i32 0, i32 0, !dbg !12748
  %7 = bitcast %struct.constant_descriptor_rtx** %next to i8*, !dbg !12749
  %8 = load i8*, i8** %cookie.addr, align 8, !dbg !12750
  call void %5(i8* %7, i8* %8), !dbg !12746
  br label %if.end, !dbg !12746

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12751
  %10 = bitcast %struct.constant_descriptor_rtx* %9 to i8*, !dbg !12753
  %11 = load i8*, i8** %this_obj.addr, align 8, !dbg !12754
  %cmp1 = icmp eq i8* %10, %11, !dbg !12755
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !12756

if.then2:                                         ; preds = %if.end
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !12757
  %13 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12758
  %mem = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %13, i32 0, i32 1, !dbg !12759
  %14 = bitcast %struct.rtx_def** %mem to i8*, !dbg !12760
  %15 = load i8*, i8** %cookie.addr, align 8, !dbg !12761
  call void %12(i8* %14, i8* %15), !dbg !12757
  br label %if.end3, !dbg !12757

if.end3:                                          ; preds = %if.then2, %if.end
  %16 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12762
  %17 = bitcast %struct.constant_descriptor_rtx* %16 to i8*, !dbg !12764
  %18 = load i8*, i8** %this_obj.addr, align 8, !dbg !12765
  %cmp4 = icmp eq i8* %17, %18, !dbg !12766
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !12767

if.then5:                                         ; preds = %if.end3
  %19 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !12768
  %20 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12769
  %sym = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %20, i32 0, i32 2, !dbg !12770
  %21 = bitcast %struct.rtx_def** %sym to i8*, !dbg !12771
  %22 = load i8*, i8** %cookie.addr, align 8, !dbg !12772
  call void %19(i8* %21, i8* %22), !dbg !12768
  br label %if.end6, !dbg !12768

if.end6:                                          ; preds = %if.then5, %if.end3
  %23 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12773
  %24 = bitcast %struct.constant_descriptor_rtx* %23 to i8*, !dbg !12775
  %25 = load i8*, i8** %this_obj.addr, align 8, !dbg !12776
  %cmp7 = icmp eq i8* %24, %25, !dbg !12777
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !12778

if.then8:                                         ; preds = %if.end6
  %26 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !12779
  %27 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !12780
  %constant = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %27, i32 0, i32 3, !dbg !12781
  %28 = bitcast %struct.rtx_def** %constant to i8*, !dbg !12782
  %29 = load i8*, i8** %cookie.addr, align 8, !dbg !12783
  call void %26(i8* %28, i8* %29), !dbg !12779
  br label %if.end9, !dbg !12779

if.end9:                                          ; preds = %if.then8, %if.end6
  ret void, !dbg !12784
}

declare dso_local void @gt_pch_nx_rtx_def(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_P23constant_descriptor_rtx4htab(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !12785 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !12786, metadata !DIExpression()), !dbg !12787
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !12788, metadata !DIExpression()), !dbg !12789
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !12790, metadata !DIExpression()), !dbg !12791
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !12792, metadata !DIExpression()), !dbg !12793
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !12794, metadata !DIExpression()), !dbg !12795
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !12796
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !12797
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !12795
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12798
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %2, i32 0, i32 3, !dbg !12800
  %3 = load i8**, i8*** %entries, align 8, !dbg !12800
  %cmp = icmp ne i8** %3, null, !dbg !12801
  br i1 %cmp, label %if.then, label %if.end10, !dbg !12802

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !12803, metadata !DIExpression()), !dbg !12805
  store i64 0, i64* %i0, align 8, !dbg !12806
  br label %for.cond, !dbg !12808

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load i64, i64* %i0, align 8, !dbg !12809
  %5 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12811
  %size = getelementptr inbounds %struct.htab, %struct.htab* %5, i32 0, i32 4, !dbg !12812
  %6 = load i64, i64* %size, align 8, !dbg !12812
  %cmp1 = icmp ne i64 %4, %6, !dbg !12813
  br i1 %cmp1, label %for.body, label %for.end, !dbg !12814

for.body:                                         ; preds = %for.cond
  %7 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12815
  %entries2 = getelementptr inbounds %struct.htab, %struct.htab* %7, i32 0, i32 3, !dbg !12818
  %8 = load i8**, i8*** %entries2, align 8, !dbg !12818
  %9 = bitcast i8** %8 to i8*, !dbg !12819
  %10 = load i8*, i8** %this_obj.addr, align 8, !dbg !12820
  %cmp3 = icmp eq i8* %9, %10, !dbg !12821
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !12822

if.then4:                                         ; preds = %for.body
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !12823
  %12 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12824
  %entries5 = getelementptr inbounds %struct.htab, %struct.htab* %12, i32 0, i32 3, !dbg !12825
  %13 = load i8**, i8*** %entries5, align 8, !dbg !12825
  %14 = load i64, i64* %i0, align 8, !dbg !12826
  %arrayidx = getelementptr inbounds i8*, i8** %13, i64 %14, !dbg !12827
  %15 = bitcast i8** %arrayidx to i8*, !dbg !12828
  %16 = load i8*, i8** %cookie.addr, align 8, !dbg !12829
  call void %11(i8* %15, i8* %16), !dbg !12823
  br label %if.end, !dbg !12823

if.end:                                           ; preds = %if.then4, %for.body
  br label %for.inc, !dbg !12830

for.inc:                                          ; preds = %if.end
  %17 = load i64, i64* %i0, align 8, !dbg !12831
  %inc = add i64 %17, 1, !dbg !12831
  store i64 %inc, i64* %i0, align 8, !dbg !12831
  br label %for.cond, !dbg !12832, !llvm.loop !12833

for.end:                                          ; preds = %for.cond
  %18 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12835
  %19 = bitcast %struct.htab* %18 to i8*, !dbg !12837
  %20 = load i8*, i8** %this_obj.addr, align 8, !dbg !12838
  %cmp6 = icmp eq i8* %19, %20, !dbg !12839
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !12840

if.then7:                                         ; preds = %for.end
  %21 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !12841
  %22 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !12842
  %entries8 = getelementptr inbounds %struct.htab, %struct.htab* %22, i32 0, i32 3, !dbg !12843
  %23 = bitcast i8*** %entries8 to i8*, !dbg !12844
  %24 = load i8*, i8** %cookie.addr, align 8, !dbg !12845
  call void %21(i8* %23, i8* %24), !dbg !12841
  br label %if.end9, !dbg !12841

if.end9:                                          ; preds = %if.then7, %for.end
  br label %if.end10, !dbg !12846

if.end10:                                         ; preds = %if.end9, %entry
  ret void, !dbg !12847
}

declare dso_local void @gt_ggc_mx_lang_tree_node(i8*) #2

declare dso_local void @gt_pch_nx_lang_tree_node(i8*) #2

declare dso_local void @gt_ggc_m_P24constant_descriptor_tree4htab(i8*) #2

declare dso_local void @gt_pch_n_P24constant_descriptor_tree4htab(i8*) #2

declare dso_local void @gt_ggc_m_P12object_block4htab(i8*) #2

declare dso_local void @gt_pch_n_P12object_block4htab(i8*) #2

declare dso_local void @gt_ggc_m_P7section4htab(i8*) #2

declare dso_local void @gt_pch_n_P7section4htab(i8*) #2

declare dso_local void @gt_ggc_mx_section(i8*) #2

declare dso_local void @gt_pch_nx_section(i8*) #2

declare dso_local void @gt_ggc_m_S(i8*) #2

declare dso_local void @gt_pch_n_S(i8*) #2

declare dso_local void @gt_ggc_mx_tree_map(i8*) #2

declare dso_local void @gt_pch_nx_tree_map(i8*) #2

declare dso_local i32 @tree_map_base_marked_p(i8*) #2

declare dso_local void @gt_ggc_m_P8tree_map4htab(i8*) #2

declare dso_local void @gt_pch_n_P8tree_map4htab(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @prefix_name(i8* %prefix, %union.tree_node* %name) #0 !dbg !12848 {
entry:
  %prefix.addr = alloca i8*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %plen = alloca i32, align 4
  %nlen = alloca i32, align 4
  %toname = alloca i8*, align 8
  store i8* %prefix, i8** %prefix.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %prefix.addr, metadata !12851, metadata !DIExpression()), !dbg !12852
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !12853, metadata !DIExpression()), !dbg !12854
  call void @llvm.dbg.declare(metadata i32* %plen, metadata !12855, metadata !DIExpression()), !dbg !12856
  %0 = load i8*, i8** %prefix.addr, align 8, !dbg !12857
  %call = call i64 @strlen(i8* %0), !dbg !12858
  %conv = trunc i64 %call to i32, !dbg !12858
  store i32 %conv, i32* %plen, align 4, !dbg !12856
  call void @llvm.dbg.declare(metadata i32* %nlen, metadata !12859, metadata !DIExpression()), !dbg !12860
  %1 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !12861
  %identifier = bitcast %union.tree_node* %1 to %struct.tree_identifier*, !dbg !12861
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !12861
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !12861
  %2 = load i8*, i8** %str, align 8, !dbg !12861
  %call1 = call i64 @strlen(i8* %2), !dbg !12862
  %conv2 = trunc i64 %call1 to i32, !dbg !12862
  store i32 %conv2, i32* %nlen, align 4, !dbg !12860
  call void @llvm.dbg.declare(metadata i8** %toname, metadata !12863, metadata !DIExpression()), !dbg !12864
  %3 = load i32, i32* %plen, align 4, !dbg !12865
  %4 = load i32, i32* %nlen, align 4, !dbg !12865
  %add = add i32 %3, %4, !dbg !12865
  %add3 = add i32 %add, 1, !dbg !12865
  %conv4 = zext i32 %add3 to i64, !dbg !12865
  %5 = alloca i8, i64 %conv4, align 16, !dbg !12865
  store i8* %5, i8** %toname, align 8, !dbg !12864
  %6 = load i8*, i8** %toname, align 8, !dbg !12866
  %7 = load i8*, i8** %prefix.addr, align 8, !dbg !12867
  %8 = load i32, i32* %plen, align 4, !dbg !12868
  %conv5 = zext i32 %8 to i64, !dbg !12868
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 %conv5, i1 false), !dbg !12869
  %9 = load i8*, i8** %toname, align 8, !dbg !12870
  %10 = load i32, i32* %plen, align 4, !dbg !12871
  %idx.ext = zext i32 %10 to i64, !dbg !12872
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %idx.ext, !dbg !12872
  %11 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !12873
  %identifier6 = bitcast %union.tree_node* %11 to %struct.tree_identifier*, !dbg !12873
  %id7 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier6, i32 0, i32 1, !dbg !12873
  %str8 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id7, i32 0, i32 0, !dbg !12873
  %12 = load i8*, i8** %str8, align 8, !dbg !12873
  %13 = load i32, i32* %nlen, align 4, !dbg !12874
  %add9 = add i32 %13, 1, !dbg !12875
  %conv10 = zext i32 %add9 to i64, !dbg !12874
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %12, i64 %conv10, i1 false), !dbg !12876
  %14 = load i8*, i8** %toname, align 8, !dbg !12877
  %call11 = call %union.tree_node* @get_identifier(i8* %14), !dbg !12878
  ret %union.tree_node* %call11, !dbg !12879
}

declare dso_local void @layout_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_function_call_expr(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @append_to_statement_list(%union.tree_node*, %union.tree_node**) #2

declare dso_local i8* @vec_gc_o_reserve_exact(i8*, i32, i64, i64) #2

declare dso_local void @varpool_finalize_decl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @contains_pointers_p(%union.tree_node* %type) #0 !dbg !12880 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %fields = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !12881, metadata !DIExpression()), !dbg !12882
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12883
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12883
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12883
  %bf.load = load i64, i64* %1, align 8, !dbg !12883
  %bf.clear = and i64 %bf.load, 65535, !dbg !12883
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12883
  switch i32 %bf.cast, label %sw.default [
    i32 10, label %sw.bb
    i32 12, label %sw.bb
    i32 5, label %sw.bb
    i32 16, label %sw.bb1
    i32 17, label %sw.bb1
    i32 18, label %sw.bb1
    i32 15, label %sw.bb10
  ], !dbg !12884

sw.bb:                                            ; preds = %entry, %entry, %entry
  store i32 1, i32* %retval, align 4, !dbg !12885
  br label %return, !dbg !12885

sw.bb1:                                           ; preds = %entry, %entry, %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %fields, metadata !12887, metadata !DIExpression()), !dbg !12889
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12890
  %type2 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !12890
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i32 0, i32 1, !dbg !12890
  %3 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !12890
  store %union.tree_node* %3, %union.tree_node** %fields, align 8, !dbg !12892
  br label %for.cond, !dbg !12893

for.cond:                                         ; preds = %for.inc, %sw.bb1
  %4 = load %union.tree_node*, %union.tree_node** %fields, align 8, !dbg !12894
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !12896
  br i1 %tobool, label %for.body, label %for.end, !dbg !12896

for.body:                                         ; preds = %for.cond
  %5 = load %union.tree_node*, %union.tree_node** %fields, align 8, !dbg !12897
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !12897
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !12897
  %bf.load4 = load i64, i64* %6, align 8, !dbg !12897
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !12897
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !12897
  %cmp = icmp eq i32 %bf.cast6, 31, !dbg !12899
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !12900

land.lhs.true:                                    ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %fields, align 8, !dbg !12901
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !12901
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12901
  %8 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !12901
  %call = call i32 @contains_pointers_p(%union.tree_node* %8), !dbg !12902
  %tobool8 = icmp ne i32 %call, 0, !dbg !12902
  br i1 %tobool8, label %if.then, label %if.end, !dbg !12903

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !12904
  br label %return, !dbg !12904

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !12905

for.inc:                                          ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %fields, align 8, !dbg !12906
  %common9 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !12906
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 1, !dbg !12906
  %10 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !12906
  store %union.tree_node* %10, %union.tree_node** %fields, align 8, !dbg !12907
  br label %for.cond, !dbg !12908, !llvm.loop !12909

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !12911
  br label %return, !dbg !12911

sw.bb10:                                          ; preds = %entry
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !12912
  %common11 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !12912
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !12912
  %12 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !12912
  %call13 = call i32 @contains_pointers_p(%union.tree_node* %12), !dbg !12913
  store i32 %call13, i32* %retval, align 4, !dbg !12914
  br label %return, !dbg !12914

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !12915
  br label %return, !dbg !12915

return:                                           ; preds = %sw.default, %sw.bb10, %for.end, %if.then, %sw.bb
  %13 = load i32, i32* %retval, align 4, !dbg !12916
  ret i32 %13, !dbg !12916
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @incorporeal_function_p(%union.tree_node* %decl) #0 !dbg !12917 {
entry:
  %retval = alloca i8, align 1
  %decl.addr = alloca %union.tree_node*, align 8
  %name = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !12918, metadata !DIExpression()), !dbg !12919
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12920
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !12920
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !12920
  %bf.load = load i64, i64* %1, align 8, !dbg !12920
  %bf.clear = and i64 %bf.load, 65535, !dbg !12920
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12920
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !12922
  br i1 %cmp, label %land.lhs.true, label %if.end19, !dbg !12923

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12924
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !12924
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !12924
  %bf.load1 = load i32, i32* %built_in_class, align 8, !dbg !12924
  %bf.lshr = lshr i32 %bf.load1, 11, !dbg !12924
  %bf.clear2 = and i32 %bf.lshr, 3, !dbg !12924
  %cmp3 = icmp ne i32 %bf.clear2, 0, !dbg !12924
  br i1 %cmp3, label %if.then, label %if.end19, !dbg !12925

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8** %name, metadata !12926, metadata !DIExpression()), !dbg !12928
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12929
  %function_decl4 = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !12929
  %built_in_class5 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl4, i32 0, i32 5, !dbg !12929
  %bf.load6 = load i32, i32* %built_in_class5, align 8, !dbg !12929
  %bf.lshr7 = lshr i32 %bf.load6, 11, !dbg !12929
  %bf.clear8 = and i32 %bf.lshr7, 3, !dbg !12929
  %cmp9 = icmp eq i32 %bf.clear8, 3, !dbg !12931
  br i1 %cmp9, label %land.lhs.true10, label %if.end, !dbg !12932

land.lhs.true10:                                  ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12933
  %function_decl11 = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !12933
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl11, i32 0, i32 5, !dbg !12933
  %bf.load12 = load i32, i32* %function_code, align 8, !dbg !12933
  %bf.clear13 = and i32 %bf.load12, 2047, !dbg !12933
  %cmp14 = icmp eq i32 %bf.clear13, 415, !dbg !12934
  br i1 %cmp14, label %if.then15, label %if.end, !dbg !12935

if.then15:                                        ; preds = %land.lhs.true10
  store i8 1, i8* %retval, align 1, !dbg !12936
  br label %return, !dbg !12936

if.end:                                           ; preds = %land.lhs.true10, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !12937
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %5), !dbg !12937
  %identifier = bitcast %union.tree_node* %call to %struct.tree_identifier*, !dbg !12937
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !12937
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 0, !dbg !12937
  %6 = load i8*, i8** %str, align 8, !dbg !12937
  store i8* %6, i8** %name, align 8, !dbg !12938
  %7 = load i8*, i8** %name, align 8, !dbg !12939
  %call16 = call zeroext i8 @is_builtin_name(i8* %7), !dbg !12941
  %tobool = icmp ne i8 %call16, 0, !dbg !12941
  br i1 %tobool, label %if.then17, label %if.end18, !dbg !12942

if.then17:                                        ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !12943
  br label %return, !dbg !12943

if.end18:                                         ; preds = %if.end
  br label %if.end19, !dbg !12944

if.end19:                                         ; preds = %if.end18, %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !12945
  br label %return, !dbg !12945

return:                                           ; preds = %if.end19, %if.then17, %if.then15
  %8 = load i8, i8* %retval, align 1, !dbg !12946
  ret i8 %8, !dbg !12946
}

declare dso_local zeroext i8 @is_builtin_name(i8*) #2

declare dso_local i32 @real_hash(%struct.real_value*) #2

declare dso_local i32 @fixed_hash(%struct.fixed_value*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @decode_addr_const(%union.tree_node* %exp, %struct.addr_const* %value) #0 !dbg !12947 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %value.addr = alloca %struct.addr_const*, align 8
  %target = alloca %union.tree_node*, align 8
  %offset = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !12951, metadata !DIExpression()), !dbg !12952
  store %struct.addr_const* %value, %struct.addr_const** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.addr_const** %value.addr, metadata !12953, metadata !DIExpression()), !dbg !12954
  call void @llvm.dbg.declare(metadata %union.tree_node** %target, metadata !12955, metadata !DIExpression()), !dbg !12956
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !12957
  %exp1 = bitcast %union.tree_node* %0 to %struct.tree_exp*, !dbg !12957
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !12957
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !12957
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !12957
  store %union.tree_node* %1, %union.tree_node** %target, align 8, !dbg !12956
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !12958, metadata !DIExpression()), !dbg !12959
  store i32 0, i32* %offset, align 4, !dbg !12959
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !12960, metadata !DIExpression()), !dbg !12961
  br label %while.body, !dbg !12962

while.body:                                       ; preds = %entry, %if.end40
  %2 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !12963
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !12963
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !12963
  %bf.load = load i64, i64* %3, align 8, !dbg !12963
  %bf.clear = and i64 %bf.load, 65535, !dbg !12963
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12963
  %cmp = icmp eq i32 %bf.cast, 41, !dbg !12966
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !12967

land.lhs.true:                                    ; preds = %while.body
  %4 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !12968
  %exp2 = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !12968
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !12968
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i64 0, i64 1, !dbg !12968
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8, !dbg !12968
  %call = call %union.tree_node* @byte_position(%union.tree_node* %5), !dbg !12969
  %call5 = call i32 @host_integerp(%union.tree_node* %call, i32 0), !dbg !12970
  %tobool = icmp ne i32 %call5, 0, !dbg !12970
  br i1 %tobool, label %if.then, label %if.else, !dbg !12971

if.then:                                          ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !12972
  %exp6 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !12972
  %operands7 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp6, i32 0, i32 3, !dbg !12972
  %arrayidx8 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands7, i64 0, i64 1, !dbg !12972
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx8, align 8, !dbg !12972
  %call9 = call i64 @int_byte_position(%union.tree_node* %7), !dbg !12974
  %8 = load i32, i32* %offset, align 4, !dbg !12975
  %conv = sext i32 %8 to i64, !dbg !12975
  %add = add nsw i64 %conv, %call9, !dbg !12975
  %conv10 = trunc i64 %add to i32, !dbg !12975
  store i32 %conv10, i32* %offset, align 4, !dbg !12975
  %9 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !12976
  %exp11 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !12976
  %operands12 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp11, i32 0, i32 3, !dbg !12976
  %arrayidx13 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands12, i64 0, i64 0, !dbg !12976
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !12976
  store %union.tree_node* %10, %union.tree_node** %target, align 8, !dbg !12977
  br label %if.end40, !dbg !12978

if.else:                                          ; preds = %land.lhs.true, %while.body
  %11 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !12979
  %base14 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !12979
  %12 = bitcast %struct.tree_base* %base14 to i64*, !dbg !12979
  %bf.load15 = load i64, i64* %12, align 8, !dbg !12979
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !12979
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !12979
  %cmp18 = icmp eq i32 %bf.cast17, 45, !dbg !12981
  br i1 %cmp18, label %if.then26, label %lor.lhs.false, !dbg !12982

lor.lhs.false:                                    ; preds = %if.else
  %13 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !12983
  %base20 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !12983
  %14 = bitcast %struct.tree_base* %base20 to i64*, !dbg !12983
  %bf.load21 = load i64, i64* %14, align 8, !dbg !12983
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !12983
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !12983
  %cmp24 = icmp eq i32 %bf.cast23, 46, !dbg !12984
  br i1 %cmp24, label %if.then26, label %if.else39, !dbg !12985

if.then26:                                        ; preds = %lor.lhs.false, %if.else
  %15 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !12986
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !12986
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12986
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12986
  %type27 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !12986
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 3, !dbg !12986
  %17 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !12986
  %call28 = call i64 @tree_low_cst(%union.tree_node* %17, i32 1), !dbg !12988
  %18 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !12989
  %exp29 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !12989
  %operands30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp29, i32 0, i32 3, !dbg !12989
  %arrayidx31 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands30, i64 0, i64 1, !dbg !12989
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx31, align 8, !dbg !12989
  %call32 = call i64 @tree_low_cst(%union.tree_node* %19, i32 0), !dbg !12990
  %mul = mul nsw i64 %call28, %call32, !dbg !12991
  %20 = load i32, i32* %offset, align 4, !dbg !12992
  %conv33 = sext i32 %20 to i64, !dbg !12992
  %add34 = add nsw i64 %conv33, %mul, !dbg !12992
  %conv35 = trunc i64 %add34 to i32, !dbg !12992
  store i32 %conv35, i32* %offset, align 4, !dbg !12992
  %21 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !12993
  %exp36 = bitcast %union.tree_node* %21 to %struct.tree_exp*, !dbg !12993
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !12993
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 0, !dbg !12993
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !12993
  store %union.tree_node* %22, %union.tree_node** %target, align 8, !dbg !12994
  br label %if.end, !dbg !12995

if.else39:                                        ; preds = %lor.lhs.false
  br label %while.end, !dbg !12996

if.end:                                           ; preds = %if.then26
  br label %if.end40

if.end40:                                         ; preds = %if.end, %if.then
  br label %while.body, !dbg !12962, !llvm.loop !12997

while.end:                                        ; preds = %if.else39
  %23 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !12999
  %base41 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !12999
  %24 = bitcast %struct.tree_base* %base41 to i64*, !dbg !12999
  %bf.load42 = load i64, i64* %24, align 8, !dbg !12999
  %bf.clear43 = and i64 %bf.load42, 65535, !dbg !12999
  %bf.cast44 = trunc i64 %bf.clear43 to i32, !dbg !12999
  switch i32 %bf.cast44, label %sw.default [
    i32 32, label %sw.bb
    i32 29, label %sw.bb
    i32 30, label %sw.bb50
    i32 24, label %sw.bb54
    i32 25, label %sw.bb54
    i32 28, label %sw.bb54
    i32 26, label %sw.bb54
    i32 51, label %sw.bb54
    i32 23, label %sw.bb54
  ], !dbg !13000

sw.bb:                                            ; preds = %while.end, %while.end
  %25 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !13001
  %decl_with_rtl = bitcast %union.tree_node* %25 to %struct.tree_decl_with_rtl*, !dbg !13001
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !13001
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !13001
  %tobool45 = icmp ne %struct.rtx_def* %26, null, !dbg !13001
  br i1 %tobool45, label %cond.true, label %cond.false, !dbg !13001

cond.true:                                        ; preds = %sw.bb
  %27 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !13001
  %decl_with_rtl46 = bitcast %union.tree_node* %27 to %struct.tree_decl_with_rtl*, !dbg !13001
  %rtl47 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl46, i32 0, i32 1, !dbg !13001
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtl47, align 8, !dbg !13001
  br label %cond.end, !dbg !13001

cond.false:                                       ; preds = %sw.bb
  %29 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !13001
  call void @make_decl_rtl(%union.tree_node* %29), !dbg !13001
  %30 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !13001
  %decl_with_rtl48 = bitcast %union.tree_node* %30 to %struct.tree_decl_with_rtl*, !dbg !13001
  %rtl49 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl48, i32 0, i32 1, !dbg !13001
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtl49, align 8, !dbg !13001
  br label %cond.end, !dbg !13001

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %28, %cond.true ], [ %31, %cond.false ], !dbg !13001
  store %struct.rtx_def* %cond, %struct.rtx_def** %x, align 8, !dbg !13003
  br label %sw.epilog, !dbg !13004

sw.bb50:                                          ; preds = %while.end
  %32 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !13005
  %call51 = call %struct.rtx_def* @force_label_rtx(%union.tree_node* %32), !dbg !13005
  %call52 = call %struct.rtx_def* @gen_rtx_fmt_u_stat(i32 44, i32 16, %struct.rtx_def* %call51), !dbg !13005
  %call53 = call %struct.rtx_def* @gen_rtx_MEM(i32 14, %struct.rtx_def* %call52), !dbg !13006
  store %struct.rtx_def* %call53, %struct.rtx_def** %x, align 8, !dbg !13007
  br label %sw.epilog, !dbg !13008

sw.bb54:                                          ; preds = %while.end, %while.end, %while.end, %while.end, %while.end, %while.end
  %33 = load %union.tree_node*, %union.tree_node** %target, align 8, !dbg !13009
  %call55 = call %struct.rtx_def* @output_constant_def(%union.tree_node* %33, i32 1), !dbg !13010
  store %struct.rtx_def* %call55, %struct.rtx_def** %x, align 8, !dbg !13011
  br label %sw.epilog, !dbg !13012

sw.default:                                       ; preds = %while.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2845, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !13013
  br label %sw.epilog, !dbg !13014

sw.epilog:                                        ; preds = %sw.default, %sw.bb54, %sw.bb50, %cond.end
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13015
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !13015
  %bf.load56 = load i32, i32* %35, align 8, !dbg !13015
  %bf.clear57 = and i32 %bf.load56, 65535, !dbg !13015
  %cmp58 = icmp eq i32 %bf.clear57, 43, !dbg !13015
  br i1 %cmp58, label %cond.false61, label %cond.true60, !dbg !13015

cond.true60:                                      ; preds = %sw.epilog
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 2848, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !13015
  br label %cond.end62, !dbg !13015

cond.false61:                                     ; preds = %sw.epilog
  br label %cond.end62, !dbg !13015

cond.end62:                                       ; preds = %cond.false61, %cond.true60
  %cond63 = phi i32 [ 0, %cond.true60 ], [ 0, %cond.false61 ], !dbg !13015
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13016
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !13016
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !13016
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !13016
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !13016
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !13016
  store %struct.rtx_def* %37, %struct.rtx_def** %x, align 8, !dbg !13017
  %38 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13018
  %39 = load %struct.addr_const*, %struct.addr_const** %value.addr, align 8, !dbg !13019
  %base65 = getelementptr inbounds %struct.addr_const, %struct.addr_const* %39, i32 0, i32 0, !dbg !13020
  store %struct.rtx_def* %38, %struct.rtx_def** %base65, align 8, !dbg !13021
  %40 = load i32, i32* %offset, align 4, !dbg !13022
  %conv66 = sext i32 %40 to i64, !dbg !13022
  %41 = load %struct.addr_const*, %struct.addr_const** %value.addr, align 8, !dbg !13023
  %offset67 = getelementptr inbounds %struct.addr_const, %struct.addr_const* %41, i32 0, i32 1, !dbg !13024
  store i64 %conv66, i64* %offset67, align 8, !dbg !13025
  ret void, !dbg !13026
}

declare dso_local %union.tree_node* @byte_position(%union.tree_node*) #2

declare dso_local i64 @int_byte_position(%union.tree_node*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_u_stat(i32, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @force_label_rtx(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @copy_constant(%union.tree_node* %exp) #0 !dbg !13027 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %copy = alloca %union.tree_node*, align 8
  %v = alloca %struct.VEC_constructor_elt_gc*, align 8
  %idx = alloca i64, align 8
  %purpose = alloca %union.tree_node*, align 8
  %value = alloca %union.tree_node*, align 8
  %ce = alloca %struct.constructor_elt_d*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !13028, metadata !DIExpression()), !dbg !13029
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13030
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !13030
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !13030
  %bf.load = load i64, i64* %1, align 8, !dbg !13030
  %bf.clear = and i64 %bf.load, 65535, !dbg !13030
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13030
  switch i32 %bf.cast, label %sw.default [
    i32 121, label %sw.bb
    i32 23, label %sw.bb16
    i32 24, label %sw.bb16
    i32 25, label %sw.bb16
    i32 28, label %sw.bb16
    i32 26, label %sw.bb18
    i32 63, label %sw.bb25
    i32 66, label %sw.bb25
    i32 64, label %sw.bb25
    i32 116, label %sw.bb41
    i32 113, label %sw.bb41
    i32 118, label %sw.bb41
    i32 51, label %sw.bb53
  ], !dbg !13031

sw.bb:                                            ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13032
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !13032
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !13032
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !13032
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !13032
  %base2 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !13032
  %4 = bitcast %struct.tree_base* %base2 to i64*, !dbg !13032
  %bf.load3 = load i64, i64* %4, align 8, !dbg !13032
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !13032
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !13032
  %idxprom = sext i32 %bf.cast5 to i64, !dbg !13032
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !13032
  %5 = load i32, i32* %arrayidx6, align 4, !dbg !13032
  %cmp = icmp eq i32 %5, 1, !dbg !13032
  br i1 %cmp, label %if.then, label %if.else, !dbg !13035

if.then:                                          ; preds = %sw.bb
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13036
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !13036
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !13036
  %bf.load8 = load i64, i64* %7, align 8, !dbg !13036
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !13036
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !13036
  %8 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13036
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !13036
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13036
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13036
  %10 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13036
  %exp11 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !13036
  %operands12 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp11, i32 0, i32 3, !dbg !13036
  %arrayidx13 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands12, i64 0, i64 0, !dbg !13036
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !13036
  %call = call %union.tree_node* @copy_constant(%union.tree_node* %11), !dbg !13036
  %call14 = call %union.tree_node* @build1_stat(i32 %bf.cast10, %union.tree_node* %9, %union.tree_node* %call), !dbg !13036
  store %union.tree_node* %call14, %union.tree_node** %retval, align 8, !dbg !13037
  br label %return, !dbg !13037

if.else:                                          ; preds = %sw.bb
  %12 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13038
  %call15 = call %union.tree_node* @copy_node_stat(%union.tree_node* %12), !dbg !13038
  store %union.tree_node* %call15, %union.tree_node** %retval, align 8, !dbg !13039
  br label %return, !dbg !13039

sw.bb16:                                          ; preds = %entry, %entry, %entry, %entry
  %13 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13040
  %call17 = call %union.tree_node* @copy_node_stat(%union.tree_node* %13), !dbg !13040
  store %union.tree_node* %call17, %union.tree_node** %retval, align 8, !dbg !13041
  br label %return, !dbg !13041

sw.bb18:                                          ; preds = %entry
  %14 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13042
  %common19 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !13042
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !13042
  %15 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !13042
  %16 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13043
  %complex = bitcast %union.tree_node* %16 to %struct.tree_complex*, !dbg !13043
  %real = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex, i32 0, i32 1, !dbg !13043
  %17 = load %union.tree_node*, %union.tree_node** %real, align 8, !dbg !13043
  %call21 = call %union.tree_node* @copy_constant(%union.tree_node* %17), !dbg !13044
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13045
  %complex22 = bitcast %union.tree_node* %18 to %struct.tree_complex*, !dbg !13045
  %imag = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex22, i32 0, i32 2, !dbg !13045
  %19 = load %union.tree_node*, %union.tree_node** %imag, align 8, !dbg !13045
  %call23 = call %union.tree_node* @copy_constant(%union.tree_node* %19), !dbg !13046
  %call24 = call %union.tree_node* @build_complex(%union.tree_node* %15, %union.tree_node* %call21, %union.tree_node* %call23), !dbg !13047
  store %union.tree_node* %call24, %union.tree_node** %retval, align 8, !dbg !13048
  br label %return, !dbg !13048

sw.bb25:                                          ; preds = %entry, %entry, %entry
  %20 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13049
  %base26 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !13049
  %21 = bitcast %struct.tree_base* %base26 to i64*, !dbg !13049
  %bf.load27 = load i64, i64* %21, align 8, !dbg !13049
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !13049
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !13049
  %22 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13049
  %common30 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !13049
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !13049
  %23 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !13049
  %24 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13049
  %exp32 = bitcast %union.tree_node* %24 to %struct.tree_exp*, !dbg !13049
  %operands33 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp32, i32 0, i32 3, !dbg !13049
  %arrayidx34 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands33, i64 0, i64 0, !dbg !13049
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx34, align 8, !dbg !13049
  %call35 = call %union.tree_node* @copy_constant(%union.tree_node* %25), !dbg !13049
  %26 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13049
  %exp36 = bitcast %union.tree_node* %26 to %struct.tree_exp*, !dbg !13049
  %operands37 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp36, i32 0, i32 3, !dbg !13049
  %arrayidx38 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands37, i64 0, i64 1, !dbg !13049
  %27 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !13049
  %call39 = call %union.tree_node* @copy_constant(%union.tree_node* %27), !dbg !13049
  %call40 = call %union.tree_node* @build2_stat(i32 %bf.cast29, %union.tree_node* %23, %union.tree_node* %call35, %union.tree_node* %call39), !dbg !13049
  store %union.tree_node* %call40, %union.tree_node** %retval, align 8, !dbg !13050
  br label %return, !dbg !13050

sw.bb41:                                          ; preds = %entry, %entry, %entry
  %28 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13051
  %base42 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !13051
  %29 = bitcast %struct.tree_base* %base42 to i64*, !dbg !13051
  %bf.load43 = load i64, i64* %29, align 8, !dbg !13051
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !13051
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !13051
  %30 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13051
  %common46 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !13051
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !13051
  %31 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !13051
  %32 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13051
  %exp48 = bitcast %union.tree_node* %32 to %struct.tree_exp*, !dbg !13051
  %operands49 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp48, i32 0, i32 3, !dbg !13051
  %arrayidx50 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands49, i64 0, i64 0, !dbg !13051
  %33 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !13051
  %call51 = call %union.tree_node* @copy_constant(%union.tree_node* %33), !dbg !13051
  %call52 = call %union.tree_node* @build1_stat(i32 %bf.cast45, %union.tree_node* %31, %union.tree_node* %call51), !dbg !13051
  store %union.tree_node* %call52, %union.tree_node** %retval, align 8, !dbg !13052
  br label %return, !dbg !13052

sw.bb53:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %copy, metadata !13053, metadata !DIExpression()), !dbg !13055
  %34 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13056
  %call54 = call %union.tree_node* @copy_node_stat(%union.tree_node* %34), !dbg !13056
  store %union.tree_node* %call54, %union.tree_node** %copy, align 8, !dbg !13055
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc** %v, metadata !13057, metadata !DIExpression()), !dbg !13058
  call void @llvm.dbg.declare(metadata i64* %idx, metadata !13059, metadata !DIExpression()), !dbg !13060
  call void @llvm.dbg.declare(metadata %union.tree_node** %purpose, metadata !13061, metadata !DIExpression()), !dbg !13062
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !13063, metadata !DIExpression()), !dbg !13064
  %35 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13065
  %constructor = bitcast %union.tree_node* %35 to %struct.tree_constructor*, !dbg !13065
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !13065
  %36 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !13065
  %tobool = icmp ne %struct.VEC_constructor_elt_gc* %36, null, !dbg !13065
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13065

cond.true:                                        ; preds = %sw.bb53
  %37 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13065
  %constructor55 = bitcast %union.tree_node* %37 to %struct.tree_constructor*, !dbg !13065
  %elts56 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor55, i32 0, i32 1, !dbg !13065
  %38 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts56, align 8, !dbg !13065
  %base57 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %38, i32 0, i32 0, !dbg !13065
  br label %cond.end, !dbg !13065

cond.false:                                       ; preds = %sw.bb53
  br label %cond.end, !dbg !13065

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base57, %cond.true ], [ null, %cond.false ], !dbg !13065
  %call58 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !13065
  %call59 = call %struct.VEC_constructor_elt_gc* @VEC_constructor_elt_gc_alloc(i32 %call58), !dbg !13065
  store %struct.VEC_constructor_elt_gc* %call59, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !13066
  store i64 0, i64* %idx, align 8, !dbg !13067
  br label %for.cond, !dbg !13067

for.cond:                                         ; preds = %for.inc, %cond.end
  %39 = load i64, i64* %idx, align 8, !dbg !13069
  %40 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13069
  %constructor60 = bitcast %union.tree_node* %40 to %struct.tree_constructor*, !dbg !13069
  %elts61 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor60, i32 0, i32 1, !dbg !13069
  %41 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts61, align 8, !dbg !13069
  %tobool62 = icmp ne %struct.VEC_constructor_elt_gc* %41, null, !dbg !13069
  br i1 %tobool62, label %cond.true63, label %cond.false67, !dbg !13069

cond.true63:                                      ; preds = %for.cond
  %42 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13069
  %constructor64 = bitcast %union.tree_node* %42 to %struct.tree_constructor*, !dbg !13069
  %elts65 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor64, i32 0, i32 1, !dbg !13069
  %43 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts65, align 8, !dbg !13069
  %base66 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %43, i32 0, i32 0, !dbg !13069
  br label %cond.end68, !dbg !13069

cond.false67:                                     ; preds = %for.cond
  br label %cond.end68, !dbg !13069

cond.end68:                                       ; preds = %cond.false67, %cond.true63
  %cond69 = phi %struct.VEC_constructor_elt_base* [ %base66, %cond.true63 ], [ null, %cond.false67 ], !dbg !13069
  %call70 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond69), !dbg !13069
  %conv = zext i32 %call70 to i64, !dbg !13069
  %cmp71 = icmp uge i64 %39, %conv, !dbg !13069
  br i1 %cmp71, label %cond.true73, label %cond.false74, !dbg !13069

cond.true73:                                      ; preds = %cond.end68
  br label %cond.end100, !dbg !13069

cond.false74:                                     ; preds = %cond.end68
  %44 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13069
  %constructor75 = bitcast %union.tree_node* %44 to %struct.tree_constructor*, !dbg !13069
  %elts76 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor75, i32 0, i32 1, !dbg !13069
  %45 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts76, align 8, !dbg !13069
  %tobool77 = icmp ne %struct.VEC_constructor_elt_gc* %45, null, !dbg !13069
  br i1 %tobool77, label %cond.true78, label %cond.false82, !dbg !13069

cond.true78:                                      ; preds = %cond.false74
  %46 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13069
  %constructor79 = bitcast %union.tree_node* %46 to %struct.tree_constructor*, !dbg !13069
  %elts80 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor79, i32 0, i32 1, !dbg !13069
  %47 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts80, align 8, !dbg !13069
  %base81 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %47, i32 0, i32 0, !dbg !13069
  br label %cond.end83, !dbg !13069

cond.false82:                                     ; preds = %cond.false74
  br label %cond.end83, !dbg !13069

cond.end83:                                       ; preds = %cond.false82, %cond.true78
  %cond84 = phi %struct.VEC_constructor_elt_base* [ %base81, %cond.true78 ], [ null, %cond.false82 ], !dbg !13069
  %48 = load i64, i64* %idx, align 8, !dbg !13069
  %conv85 = trunc i64 %48 to i32, !dbg !13069
  %call86 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond84, i32 %conv85), !dbg !13069
  %value87 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call86, i32 0, i32 1, !dbg !13069
  %49 = load %union.tree_node*, %union.tree_node** %value87, align 8, !dbg !13069
  store %union.tree_node* %49, %union.tree_node** %value, align 8, !dbg !13069
  %50 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13069
  %constructor88 = bitcast %union.tree_node* %50 to %struct.tree_constructor*, !dbg !13069
  %elts89 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor88, i32 0, i32 1, !dbg !13069
  %51 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts89, align 8, !dbg !13069
  %tobool90 = icmp ne %struct.VEC_constructor_elt_gc* %51, null, !dbg !13069
  br i1 %tobool90, label %cond.true91, label %cond.false95, !dbg !13069

cond.true91:                                      ; preds = %cond.end83
  %52 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13069
  %constructor92 = bitcast %union.tree_node* %52 to %struct.tree_constructor*, !dbg !13069
  %elts93 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor92, i32 0, i32 1, !dbg !13069
  %53 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts93, align 8, !dbg !13069
  %base94 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %53, i32 0, i32 0, !dbg !13069
  br label %cond.end96, !dbg !13069

cond.false95:                                     ; preds = %cond.end83
  br label %cond.end96, !dbg !13069

cond.end96:                                       ; preds = %cond.false95, %cond.true91
  %cond97 = phi %struct.VEC_constructor_elt_base* [ %base94, %cond.true91 ], [ null, %cond.false95 ], !dbg !13069
  %54 = load i64, i64* %idx, align 8, !dbg !13069
  %conv98 = trunc i64 %54 to i32, !dbg !13069
  %call99 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond97, i32 %conv98), !dbg !13069
  %index = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call99, i32 0, i32 0, !dbg !13069
  %55 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !13069
  store %union.tree_node* %55, %union.tree_node** %purpose, align 8, !dbg !13069
  br label %cond.end100, !dbg !13069

cond.end100:                                      ; preds = %cond.end96, %cond.true73
  %cond101 = phi i32 [ 0, %cond.true73 ], [ 1, %cond.end96 ], !dbg !13069
  %tobool102 = icmp ne i32 %cond101, 0, !dbg !13067
  br i1 %tobool102, label %for.body, label %for.end, !dbg !13067

for.body:                                         ; preds = %cond.end100
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %ce, metadata !13071, metadata !DIExpression()), !dbg !13073
  %56 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !13074
  %tobool103 = icmp ne %struct.VEC_constructor_elt_gc* %56, null, !dbg !13074
  br i1 %tobool103, label %cond.true104, label %cond.false106, !dbg !13074

cond.true104:                                     ; preds = %for.body
  %57 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !13074
  %base105 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %57, i32 0, i32 0, !dbg !13074
  br label %cond.end107, !dbg !13074

cond.false106:                                    ; preds = %for.body
  br label %cond.end107, !dbg !13074

cond.end107:                                      ; preds = %cond.false106, %cond.true104
  %cond108 = phi %struct.VEC_constructor_elt_base* [ %base105, %cond.true104 ], [ null, %cond.false106 ], !dbg !13074
  %call109 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_quick_push(%struct.VEC_constructor_elt_base* %cond108, %struct.constructor_elt_d* null), !dbg !13074
  store %struct.constructor_elt_d* %call109, %struct.constructor_elt_d** %ce, align 8, !dbg !13073
  %58 = load %union.tree_node*, %union.tree_node** %purpose, align 8, !dbg !13075
  %59 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %ce, align 8, !dbg !13076
  %index110 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %59, i32 0, i32 0, !dbg !13077
  store %union.tree_node* %58, %union.tree_node** %index110, align 8, !dbg !13078
  %60 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !13079
  %call111 = call %union.tree_node* @copy_constant(%union.tree_node* %60), !dbg !13080
  %61 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %ce, align 8, !dbg !13081
  %value112 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %61, i32 0, i32 1, !dbg !13082
  store %union.tree_node* %call111, %union.tree_node** %value112, align 8, !dbg !13083
  br label %for.inc, !dbg !13084

for.inc:                                          ; preds = %cond.end107
  %62 = load i64, i64* %idx, align 8, !dbg !13069
  %inc = add i64 %62, 1, !dbg !13069
  store i64 %inc, i64* %idx, align 8, !dbg !13069
  br label %for.cond, !dbg !13069, !llvm.loop !13085

for.end:                                          ; preds = %cond.end100
  %63 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v, align 8, !dbg !13087
  %64 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !13088
  %constructor113 = bitcast %union.tree_node* %64 to %struct.tree_constructor*, !dbg !13088
  %elts114 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor113, i32 0, i32 1, !dbg !13088
  store %struct.VEC_constructor_elt_gc* %63, %struct.VEC_constructor_elt_gc** %elts114, align 8, !dbg !13089
  %65 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !13090
  store %union.tree_node* %65, %union.tree_node** %retval, align 8, !dbg !13091
  br label %return, !dbg !13091

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 3184, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !13092
  br label %sw.epilog, !dbg !13093

sw.epilog:                                        ; preds = %sw.default
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13094
  br label %return, !dbg !13094

return:                                           ; preds = %sw.epilog, %for.end, %sw.bb41, %sw.bb25, %sw.bb18, %sw.bb16, %if.else, %if.then
  %66 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13095
  ret %union.tree_node* %66, !dbg !13095
}

declare dso_local i32 @mf_marked_p(%union.tree_node*) #2

declare dso_local %union.tree_node* @mf_mark(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.section* @get_constant_section(%union.tree_node* %exp) #0 !dbg !13096 {
entry:
  %retval = alloca %union.section*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !13097, metadata !DIExpression()), !dbg !13098
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13099
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !13099
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !13099
  %bf.load = load i64, i64* %1, align 8, !dbg !13099
  %bf.clear = and i64 %bf.load, 65535, !dbg !13099
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13099
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !13099
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !13099

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13099
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !13099
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !13099
  %bf.load2 = load i64, i64* %3, align 8, !dbg !13099
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !13099
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !13099
  %cmp5 = icmp eq i32 %bf.cast4, 32, !dbg !13099
  br i1 %cmp5, label %land.lhs.true, label %if.else, !dbg !13099

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13099
  %decl_with_vis = bitcast %union.tree_node* %4 to %struct.tree_decl_with_vis*, !dbg !13099
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 2, !dbg !13099
  %5 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !13099
  %cmp6 = icmp ne %union.tree_node* %5, null, !dbg !13099
  br i1 %cmp6, label %if.then, label %if.else, !dbg !13101

if.then:                                          ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13102
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13103
  %call = call i32 @compute_reloc_for_constant(%union.tree_node* %7), !dbg !13104
  %call7 = call %union.section* @get_named_section(%union.tree_node* %6, i8* null, i32 %call), !dbg !13105
  store %union.section* %call7, %union.section** %retval, align 8, !dbg !13106
  br label %return, !dbg !13106

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %8 = load %union.section* (%union.tree_node*, i32, i64)*, %union.section* (%union.tree_node*, i32, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 21), align 8, !dbg !13107
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13108
  %10 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13109
  %call8 = call i32 @compute_reloc_for_constant(%union.tree_node* %10), !dbg !13110
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13111
  %call9 = call i32 @get_constant_alignment(%union.tree_node* %11), !dbg !13112
  %conv = zext i32 %call9 to i64, !dbg !13112
  %call10 = call %union.section* %8(%union.tree_node* %9, i32 %call8, i64 %conv), !dbg !13113
  store %union.section* %call10, %union.section** %retval, align 8, !dbg !13114
  br label %return, !dbg !13114

return:                                           ; preds = %if.else, %if.then
  %12 = load %union.section*, %union.section** %retval, align 8, !dbg !13115
  ret %union.section* %12, !dbg !13115
}

declare dso_local void @set_mem_alias_set(%struct.rtx_def*, i32) #2

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_complex(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @output_constant_def_contents(%struct.rtx_def* %symbol) #0 !dbg !13116 {
entry:
  %symbol.addr = alloca %struct.rtx_def*, align 8
  %exp = alloca %union.tree_node*, align 8
  %align = alloca i32, align 4
  store %struct.rtx_def* %symbol, %struct.rtx_def** %symbol.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol.addr, metadata !13117, metadata !DIExpression()), !dbg !13118
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp, metadata !13119, metadata !DIExpression()), !dbg !13120
  %0 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !13121
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !13121
  %bf.load = load i32, i32* %1, align 8, !dbg !13121
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !13121
  %bf.clear = and i32 %bf.lshr, 1, !dbg !13121
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !13121
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13121

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !13121

cond.false:                                       ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !13121
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !13121
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !13121
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !13121
  %rt_tree = bitcast %union.rtunion_def* %arrayidx to %union.tree_node**, !dbg !13121
  %3 = load %union.tree_node*, %union.tree_node** %rt_tree, align 8, !dbg !13121
  br label %cond.end, !dbg !13121

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ null, %cond.true ], [ %3, %cond.false ], !dbg !13121
  store %union.tree_node* %cond, %union.tree_node** %exp, align 8, !dbg !13120
  call void @llvm.dbg.declare(metadata i32* %align, metadata !13122, metadata !DIExpression()), !dbg !13123
  %4 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !13124
  call void @output_addressed_constants(%union.tree_node* %4), !dbg !13125
  %5 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !13126
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !13126
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !13126
  %bf.load1 = load i64, i64* %6, align 8, !dbg !13127
  %bf.clear2 = and i64 %bf.load1, -4194305, !dbg !13127
  %bf.set = or i64 %bf.clear2, 4194304, !dbg !13127
  store i64 %bf.set, i64* %6, align 8, !dbg !13127
  %7 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !13128
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !13128
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !13128
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 1, !dbg !13128
  %rt_int = bitcast %union.rtunion_def* %arrayidx5 to i32*, !dbg !13128
  %8 = load i32, i32* %rt_int, align 8, !dbg !13128
  %and = and i32 %8, 128, !dbg !13128
  %cmp = icmp ne i32 %and, 0, !dbg !13128
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !13130

land.lhs.true:                                    ; preds = %cond.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !13131
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !13131
  %block_sym = bitcast %union.u* %u6 to %struct.block_symbol*, !dbg !13131
  %block = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym, i32 0, i32 1, !dbg !13131
  %10 = load %struct.object_block*, %struct.object_block** %block, align 8, !dbg !13131
  %tobool7 = icmp ne %struct.object_block* %10, null, !dbg !13131
  br i1 %tobool7, label %if.then, label %if.else, !dbg !13132

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !13133
  call void @place_block_symbol(%struct.rtx_def* %11), !dbg !13134
  br label %if.end23, !dbg !13134

if.else:                                          ; preds = %land.lhs.true, %cond.end
  %12 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !13135
  %call = call %union.section* @get_constant_section(%union.tree_node* %12), !dbg !13137
  call void @switch_to_section(%union.section* %call), !dbg !13138
  %13 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !13139
  %call8 = call i32 @get_constant_alignment(%union.tree_node* %13), !dbg !13140
  store i32 %call8, i32* %align, align 4, !dbg !13141
  %14 = load i32, i32* %align, align 4, !dbg !13142
  %cmp9 = icmp ugt i32 %14, 8, !dbg !13144
  br i1 %cmp9, label %if.then10, label %if.end19, !dbg !13145

if.then10:                                        ; preds = %if.else
  %15 = load i32, i32* %align, align 4, !dbg !13146
  %div = udiv i32 %15, 8, !dbg !13146
  %conv = zext i32 %div to i64, !dbg !13146
  %call11 = call i32 @floor_log2(i64 %conv), !dbg !13146
  %cmp12 = icmp ne i32 %call11, 0, !dbg !13146
  br i1 %cmp12, label %if.then14, label %if.end, !dbg !13148

if.then14:                                        ; preds = %if.then10
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !13146
  %17 = load i32, i32* %align, align 4, !dbg !13146
  %div15 = udiv i32 %17, 8, !dbg !13146
  %conv16 = zext i32 %div15 to i64, !dbg !13146
  %call17 = call i32 @floor_log2(i64 %conv16), !dbg !13146
  %shl = shl i32 1, %call17, !dbg !13146
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i64 0, i64 0), i32 %shl), !dbg !13146
  br label %if.end, !dbg !13146

if.end:                                           ; preds = %if.then14, %if.then10
  br label %if.end19, !dbg !13146

if.end19:                                         ; preds = %if.end, %if.else
  %18 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !13149
  %19 = load %struct.rtx_def*, %struct.rtx_def** %symbol.addr, align 8, !dbg !13150
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !13150
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !13150
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 0, !dbg !13150
  %rt_str = bitcast %union.rtunion_def* %arrayidx22 to i8**, !dbg !13150
  %20 = load i8*, i8** %rt_str, align 8, !dbg !13150
  %21 = load i32, i32* %align, align 4, !dbg !13151
  call void @assemble_constant_contents(%union.tree_node* %18, i8* %20, i32 %21), !dbg !13152
  br label %if.end23

if.end23:                                         ; preds = %if.end19, %if.then
  %22 = load i32, i32* @flag_mudflap, align 4, !dbg !13153
  %tobool24 = icmp ne i32 %22, 0, !dbg !13153
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !13155

if.then25:                                        ; preds = %if.end23
  %23 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !13156
  call void @mudflap_enqueue_constant(%union.tree_node* %23), !dbg !13157
  br label %if.end26, !dbg !13157

if.end26:                                         ; preds = %if.then25, %if.end23
  ret void, !dbg !13158
}

; Function Attrs: noinline nounwind uwtable
define internal void @assemble_constant_contents(%union.tree_node* %exp, i8* %label, i32 %align) #0 !dbg !13159 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %label.addr = alloca i8*, align 8
  %align.addr = alloca i32, align 4
  %size = alloca i64, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !13162, metadata !DIExpression()), !dbg !13163
  store i8* %label, i8** %label.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %label.addr, metadata !13164, metadata !DIExpression()), !dbg !13165
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !13166, metadata !DIExpression()), !dbg !13167
  call void @llvm.dbg.declare(metadata i64* %size, metadata !13168, metadata !DIExpression()), !dbg !13169
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13170
  %call = call i64 @get_constant_size(%union.tree_node* %0), !dbg !13171
  store i64 %call, i64* %size, align 8, !dbg !13172
  br label %do.body, !dbg !13173

do.body:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !13174
  %2 = load i8*, i8** %label.addr, align 8, !dbg !13174
  call void @assemble_name(%struct._IO_FILE* %1, i8* %2), !dbg !13174
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !13174
  %call1 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), %struct._IO_FILE* %3), !dbg !13174
  br label %do.end, !dbg !13174

do.end:                                           ; preds = %do.body
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !13176
  %5 = load i64, i64* %size, align 8, !dbg !13177
  %6 = load i32, i32* %align.addr, align 4, !dbg !13178
  call void @output_constant(%union.tree_node* %4, i64 %5, i32 %6), !dbg !13179
  ret void, !dbg !13180
}

declare dso_local void @mudflap_enqueue_constant(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_desc_rtx_hash(i8* %ptr) #0 !dbg !13181 {
entry:
  %ptr.addr = alloca i8*, align 8
  %desc = alloca %struct.constant_descriptor_rtx*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !13182, metadata !DIExpression()), !dbg !13183
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %desc, metadata !13184, metadata !DIExpression()), !dbg !13186
  %0 = load i8*, i8** %ptr.addr, align 8, !dbg !13187
  %1 = bitcast i8* %0 to %struct.constant_descriptor_rtx*, !dbg !13188
  store %struct.constant_descriptor_rtx* %1, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !13186
  %2 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !13189
  %hash = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %2, i32 0, i32 5, !dbg !13190
  %3 = load i32, i32* %hash, align 8, !dbg !13190
  ret i32 %3, !dbg !13191
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_desc_rtx_eq(i8* %a, i8* %b) #0 !dbg !13192 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %x = alloca %struct.constant_descriptor_rtx*, align 8
  %y = alloca %struct.constant_descriptor_rtx*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !13193, metadata !DIExpression()), !dbg !13194
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !13195, metadata !DIExpression()), !dbg !13196
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %x, metadata !13197, metadata !DIExpression()), !dbg !13198
  %0 = load i8*, i8** %a.addr, align 8, !dbg !13199
  %1 = bitcast i8* %0 to %struct.constant_descriptor_rtx*, !dbg !13200
  store %struct.constant_descriptor_rtx* %1, %struct.constant_descriptor_rtx** %x, align 8, !dbg !13198
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %y, metadata !13201, metadata !DIExpression()), !dbg !13202
  %2 = load i8*, i8** %b.addr, align 8, !dbg !13203
  %3 = bitcast i8* %2 to %struct.constant_descriptor_rtx*, !dbg !13204
  store %struct.constant_descriptor_rtx* %3, %struct.constant_descriptor_rtx** %y, align 8, !dbg !13202
  %4 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !13205
  %mode = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %4, i32 0, i32 6, !dbg !13207
  %5 = load i32, i32* %mode, align 4, !dbg !13207
  %6 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %y, align 8, !dbg !13208
  %mode1 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %6, i32 0, i32 6, !dbg !13209
  %7 = load i32, i32* %mode1, align 4, !dbg !13209
  %cmp = icmp ne i32 %5, %7, !dbg !13210
  br i1 %cmp, label %if.then, label %if.end, !dbg !13211

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !13212
  br label %return, !dbg !13212

if.end:                                           ; preds = %entry
  %8 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %x, align 8, !dbg !13213
  %constant = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %8, i32 0, i32 3, !dbg !13214
  %9 = load %struct.rtx_def*, %struct.rtx_def** %constant, align 8, !dbg !13214
  %10 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %y, align 8, !dbg !13215
  %constant2 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %10, i32 0, i32 3, !dbg !13216
  %11 = load %struct.rtx_def*, %struct.rtx_def** %constant2, align 8, !dbg !13216
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %9, %struct.rtx_def* %11), !dbg !13217
  store i32 %call, i32* %retval, align 4, !dbg !13218
  br label %return, !dbg !13218

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !13219
  ret i32 %12, !dbg !13219
}

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @const_rtx_hash_1(%struct.rtx_def** %xp, i8* %data) #0 !dbg !13220 {
entry:
  %xp.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %hwi = alloca i64, align 8
  %mode = alloca i32, align 4
  %code = alloca i32, align 4
  %h = alloca i32, align 4
  %hp = alloca i32*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %shift = alloca i32, align 4
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  %i23 = alloca i32, align 4
  store %struct.rtx_def** %xp, %struct.rtx_def*** %xp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %xp.addr, metadata !13223, metadata !DIExpression()), !dbg !13224
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !13225, metadata !DIExpression()), !dbg !13226
  call void @llvm.dbg.declare(metadata i64* %hwi, metadata !13227, metadata !DIExpression()), !dbg !13228
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !13229, metadata !DIExpression()), !dbg !13230
  call void @llvm.dbg.declare(metadata i32* %code, metadata !13231, metadata !DIExpression()), !dbg !13232
  call void @llvm.dbg.declare(metadata i32* %h, metadata !13233, metadata !DIExpression()), !dbg !13234
  call void @llvm.dbg.declare(metadata i32** %hp, metadata !13235, metadata !DIExpression()), !dbg !13236
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !13237, metadata !DIExpression()), !dbg !13238
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %xp.addr, align 8, !dbg !13239
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !13240
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8, !dbg !13241
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13242
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !13242
  %bf.load = load i32, i32* %3, align 8, !dbg !13242
  %bf.clear = and i32 %bf.load, 65535, !dbg !13242
  store i32 %bf.clear, i32* %code, align 4, !dbg !13243
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13244
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !13244
  %bf.load1 = load i32, i32* %5, align 8, !dbg !13244
  %bf.lshr = lshr i32 %bf.load1, 16, !dbg !13244
  %bf.clear2 = and i32 %bf.lshr, 255, !dbg !13244
  store i32 %bf.clear2, i32* %mode, align 4, !dbg !13245
  %6 = load i32, i32* %code, align 4, !dbg !13246
  %mul = mul i32 %6, 1048573, !dbg !13247
  %7 = load i32, i32* %mode, align 4, !dbg !13248
  %add = add i32 %mul, %7, !dbg !13249
  store i32 %add, i32* %h, align 4, !dbg !13250
  %8 = load i32, i32* %code, align 4, !dbg !13251
  switch i32 %8, label %sw.default [
    i32 30, label %sw.bb
    i32 32, label %sw.bb6
    i32 31, label %sw.bb18
    i32 33, label %sw.bb22
    i32 45, label %sw.bb39
    i32 44, label %sw.bb45
    i32 18, label %sw.bb54
    i32 19, label %sw.bb54
  ], !dbg !13252

sw.bb:                                            ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13253
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !13253
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !13253
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !13253
  %10 = load i64, i64* %arrayidx, align 8, !dbg !13253
  store i64 %10, i64* %hwi, align 8, !dbg !13255
  br label %fold_hwi, !dbg !13256

fold_hwi:                                         ; preds = %if.then, %sw.bb
  call void @llvm.dbg.label(metadata !13257), !dbg !13258
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !13259, metadata !DIExpression()), !dbg !13261
  store i32 32, i32* %shift, align 4, !dbg !13261
  call void @llvm.dbg.declare(metadata i32* %n, metadata !13262, metadata !DIExpression()), !dbg !13263
  store i32 2, i32* %n, align 4, !dbg !13263
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13264, metadata !DIExpression()), !dbg !13265
  %11 = load i64, i64* %hwi, align 8, !dbg !13266
  %conv = trunc i64 %11 to i32, !dbg !13267
  %12 = load i32, i32* %h, align 4, !dbg !13268
  %xor = xor i32 %12, %conv, !dbg !13268
  store i32 %xor, i32* %h, align 4, !dbg !13268
  store i32 1, i32* %i, align 4, !dbg !13269
  br label %for.cond, !dbg !13271

for.cond:                                         ; preds = %for.inc, %fold_hwi
  %13 = load i32, i32* %i, align 4, !dbg !13272
  %cmp = icmp slt i32 %13, 2, !dbg !13274
  br i1 %cmp, label %for.body, label %for.end, !dbg !13275

for.body:                                         ; preds = %for.cond
  %14 = load i32, i32* %shift, align 4, !dbg !13276
  %15 = load i64, i64* %hwi, align 8, !dbg !13278
  %sh_prom = zext i32 %14 to i64, !dbg !13278
  %shr = lshr i64 %15, %sh_prom, !dbg !13278
  store i64 %shr, i64* %hwi, align 8, !dbg !13278
  %16 = load i64, i64* %hwi, align 8, !dbg !13279
  %conv4 = trunc i64 %16 to i32, !dbg !13280
  %17 = load i32, i32* %h, align 4, !dbg !13281
  %xor5 = xor i32 %17, %conv4, !dbg !13281
  store i32 %xor5, i32* %h, align 4, !dbg !13281
  br label %for.inc, !dbg !13282

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !13283
  %inc = add nsw i32 %18, 1, !dbg !13283
  store i32 %inc, i32* %i, align 4, !dbg !13283
  br label %for.cond, !dbg !13284, !llvm.loop !13285

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !13287

sw.bb6:                                           ; preds = %entry
  %19 = load i32, i32* %mode, align 4, !dbg !13288
  %cmp7 = icmp eq i32 %19, 0, !dbg !13290
  br i1 %cmp7, label %if.then, label %if.else, !dbg !13291

if.then:                                          ; preds = %sw.bb6
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13292
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !13292
  %hwint10 = bitcast %union.u* %u9 to [1 x i64]*, !dbg !13292
  %arrayidx11 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint10, i64 0, i64 0, !dbg !13292
  %21 = load i64, i64* %arrayidx11, align 8, !dbg !13292
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13294
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !13294
  %hwint13 = bitcast %union.u* %u12 to [1 x i64]*, !dbg !13294
  %arrayidx14 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint13, i64 0, i64 1, !dbg !13294
  %23 = load i64, i64* %arrayidx14, align 8, !dbg !13294
  %xor15 = xor i64 %21, %23, !dbg !13295
  store i64 %xor15, i64* %hwi, align 8, !dbg !13296
  br label %fold_hwi, !dbg !13297

if.else:                                          ; preds = %sw.bb6
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13298
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !13298
  %rv = bitcast %union.u* %u16 to %struct.real_value*, !dbg !13298
  %call = call i32 @real_hash(%struct.real_value* %rv), !dbg !13299
  %25 = load i32, i32* %h, align 4, !dbg !13300
  %xor17 = xor i32 %25, %call, !dbg !13300
  store i32 %xor17, i32* %h, align 4, !dbg !13300
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %sw.epilog, !dbg !13301

sw.bb18:                                          ; preds = %entry
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13302
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !13302
  %fv = bitcast %union.u* %u19 to %struct.fixed_value*, !dbg !13302
  %call20 = call i32 @fixed_hash(%struct.fixed_value* %fv), !dbg !13303
  %27 = load i32, i32* %h, align 4, !dbg !13304
  %xor21 = xor i32 %27, %call20, !dbg !13304
  store i32 %xor21, i32* %h, align 4, !dbg !13304
  br label %sw.epilog, !dbg !13305

sw.bb22:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i23, metadata !13306, metadata !DIExpression()), !dbg !13308
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13309
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !13309
  %fld = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !13309
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !13309
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtvec_def**, !dbg !13309
  %29 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !13309
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %29, i32 0, i32 0, !dbg !13309
  %30 = load i32, i32* %num_elem, align 8, !dbg !13309
  store i32 %30, i32* %i23, align 4, !dbg !13311
  br label %for.cond26, !dbg !13312

for.cond26:                                       ; preds = %for.body29, %sw.bb22
  %31 = load i32, i32* %i23, align 4, !dbg !13313
  %dec = add nsw i32 %31, -1, !dbg !13313
  store i32 %dec, i32* %i23, align 4, !dbg !13313
  %cmp27 = icmp sgt i32 %31, 0, !dbg !13315
  br i1 %cmp27, label %for.body29, label %for.end38, !dbg !13316

for.body29:                                       ; preds = %for.cond26
  %32 = load i32, i32* %h, align 4, !dbg !13317
  %mul30 = mul i32 %32, 251, !dbg !13318
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13319
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !13319
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !13319
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 0, !dbg !13319
  %rt_rtvec34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtvec_def**, !dbg !13319
  %34 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec34, align 8, !dbg !13319
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %34, i32 0, i32 1, !dbg !13319
  %35 = load i32, i32* %i23, align 4, !dbg !13319
  %idxprom = sext i32 %35 to i64, !dbg !13319
  %arrayidx35 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !13319
  %36 = load i8*, i8** %data.addr, align 8, !dbg !13320
  %call36 = call i32 @const_rtx_hash_1(%struct.rtx_def** %arrayidx35, i8* %36), !dbg !13321
  %add37 = add i32 %mul30, %call36, !dbg !13322
  store i32 %add37, i32* %h, align 4, !dbg !13323
  br label %for.cond26, !dbg !13324, !llvm.loop !13325

for.end38:                                        ; preds = %for.cond26
  br label %sw.epilog, !dbg !13327

sw.bb39:                                          ; preds = %entry
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13328
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !13328
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !13328
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 0, !dbg !13328
  %rt_str = bitcast %union.rtunion_def* %arrayidx42 to i8**, !dbg !13328
  %38 = load i8*, i8** %rt_str, align 8, !dbg !13328
  %call43 = call i32 @htab_hash_string(i8* %38), !dbg !13329
  %39 = load i32, i32* %h, align 4, !dbg !13330
  %xor44 = xor i32 %39, %call43, !dbg !13330
  store i32 %xor44, i32* %h, align 4, !dbg !13330
  br label %sw.epilog, !dbg !13331

sw.bb45:                                          ; preds = %entry
  %40 = load i32, i32* %h, align 4, !dbg !13332
  %mul46 = mul i32 %40, 251, !dbg !13333
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13334
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !13334
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !13334
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 0, !dbg !13334
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**, !dbg !13334
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !13334
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !13334
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !13334
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 6, !dbg !13334
  %rt_int = bitcast %union.rtunion_def* %arrayidx52 to i32*, !dbg !13334
  %43 = load i32, i32* %rt_int, align 8, !dbg !13334
  %add53 = add i32 %mul46, %43, !dbg !13335
  store i32 %add53, i32* %h, align 4, !dbg !13336
  br label %sw.epilog, !dbg !13337

sw.bb54:                                          ; preds = %entry, %entry
  %44 = load i32, i32* %h, align 4, !dbg !13338
  %mul55 = mul i32 %44, 251, !dbg !13339
  %45 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13340
  %u56 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !13340
  %fld57 = bitcast %union.u* %u56 to [1 x %union.rtunion_def]*, !dbg !13340
  %arrayidx58 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld57, i64 0, i64 1, !dbg !13340
  %rt_int59 = bitcast %union.rtunion_def* %arrayidx58 to i32*, !dbg !13340
  %46 = load i32, i32* %rt_int59, align 8, !dbg !13340
  %add60 = add i32 %mul55, %46, !dbg !13341
  store i32 %add60, i32* %h, align 4, !dbg !13342
  br label %sw.epilog, !dbg !13343

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !13344

sw.epilog:                                        ; preds = %sw.default, %sw.bb54, %sw.bb45, %sw.bb39, %for.end38, %sw.bb18, %if.end, %for.end
  %47 = load i8*, i8** %data.addr, align 8, !dbg !13345
  %48 = bitcast i8* %47 to i32*, !dbg !13346
  store i32* %48, i32** %hp, align 8, !dbg !13347
  %49 = load i32*, i32** %hp, align 8, !dbg !13348
  %50 = load i32, i32* %49, align 4, !dbg !13349
  %mul61 = mul i32 %50, 509, !dbg !13350
  %51 = load i32, i32* %h, align 4, !dbg !13351
  %add62 = add i32 %mul61, %51, !dbg !13352
  %52 = load i32*, i32** %hp, align 8, !dbg !13353
  store i32 %add62, i32* %52, align 4, !dbg !13354
  ret i32 0, !dbg !13355
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_section(%union.section* %sect) #0 !dbg !13356 {
entry:
  %retval = alloca i32, align 4
  %sect.addr = alloca %union.section*, align 8
  store %union.section* %sect, %union.section** %sect.addr, align 8
  call void @llvm.dbg.declare(metadata %union.section** %sect.addr, metadata !13359, metadata !DIExpression()), !dbg !13360
  %0 = load %union.section*, %union.section** %sect.addr, align 8, !dbg !13361
  %common = bitcast %union.section* %0 to %struct.section_common*, !dbg !13363
  %flags = getelementptr inbounds %struct.section_common, %struct.section_common* %common, i32 0, i32 0, !dbg !13364
  %1 = load i32, i32* %flags, align 8, !dbg !13364
  %and = and i32 %1, 2097152, !dbg !13365
  %tobool = icmp ne i32 %and, 0, !dbg !13365
  br i1 %tobool, label %if.then, label %if.end, !dbg !13366

if.then:                                          ; preds = %entry
  %2 = load %union.section*, %union.section** %sect.addr, align 8, !dbg !13367
  %named = bitcast %union.section* %2 to %struct.named_section*, !dbg !13368
  %name = getelementptr inbounds %struct.named_section, %struct.named_section* %named, i32 0, i32 1, !dbg !13369
  %3 = load i8*, i8** %name, align 8, !dbg !13369
  %call = call i32 @htab_hash_string(i8* %3), !dbg !13370
  store i32 %call, i32* %retval, align 4, !dbg !13371
  br label %return, !dbg !13371

if.end:                                           ; preds = %entry
  %4 = load %union.section*, %union.section** %sect.addr, align 8, !dbg !13372
  %common1 = bitcast %union.section* %4 to %struct.section_common*, !dbg !13373
  %flags2 = getelementptr inbounds %struct.section_common, %struct.section_common* %common1, i32 0, i32 0, !dbg !13374
  %5 = load i32, i32* %flags2, align 8, !dbg !13374
  store i32 %5, i32* %retval, align 4, !dbg !13375
  br label %return, !dbg !13375

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !13376
  ret i32 %6, !dbg !13376
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_constant_pool() #0 !dbg !13377 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %link = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !13378, metadata !DIExpression()), !dbg !13379
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %link, metadata !13380, metadata !DIExpression()), !dbg !13381
  %0 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 36), align 8, !dbg !13382
  %tobool = icmp ne i8 %0, 0, !dbg !13384
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !13385

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 2, i32 1), align 8, !dbg !13386
  %cmp = icmp eq i32 %1, 0, !dbg !13387
  br i1 %cmp, label %if.then, label %if.end, !dbg !13388

if.then:                                          ; preds = %land.lhs.true
  br label %for.end14, !dbg !13389

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = call %struct.rtx_def* @get_insns(), !dbg !13390
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !13392
  br label %for.cond, !dbg !13393

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !13394
  %tobool1 = icmp ne %struct.rtx_def* %2, null, !dbg !13396
  br i1 %tobool1, label %for.body, label %for.end, !dbg !13396

for.body:                                         ; preds = %for.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !13397
  call void @mark_constants(%struct.rtx_def* %3), !dbg !13398
  br label %for.inc, !dbg !13398

for.inc:                                          ; preds = %for.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !13399
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !13399
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !13399
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !13399
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !13399
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !13399
  store %struct.rtx_def* %5, %struct.rtx_def** %insn, align 8, !dbg !13400
  br label %for.cond, !dbg !13401, !llvm.loop !13402

for.end:                                          ; preds = %for.cond
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 27), align 8, !dbg !13404
  store %struct.rtx_def* %6, %struct.rtx_def** %link, align 8, !dbg !13406
  br label %for.cond2, !dbg !13407

for.cond2:                                        ; preds = %for.inc9, %for.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !13408
  %tobool3 = icmp ne %struct.rtx_def* %7, null, !dbg !13410
  br i1 %tobool3, label %for.body4, label %for.end14, !dbg !13410

for.body4:                                        ; preds = %for.cond2
  %8 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !13411
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !13411
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !13411
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 0, !dbg !13411
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !13411
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !13411
  call void @mark_constants(%struct.rtx_def* %9), !dbg !13412
  br label %for.inc9, !dbg !13412

for.inc9:                                         ; preds = %for.body4
  %10 = load %struct.rtx_def*, %struct.rtx_def** %link, align 8, !dbg !13413
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !13413
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !13413
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 1, !dbg !13413
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !13413
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx13, align 8, !dbg !13413
  store %struct.rtx_def* %11, %struct.rtx_def** %link, align 8, !dbg !13414
  br label %for.cond2, !dbg !13415, !llvm.loop !13416

for.end14:                                        ; preds = %if.then, %for.cond2
  ret void, !dbg !13418
}

declare dso_local %struct.rtx_def* @get_insns() #2

; Function Attrs: noinline nounwind uwtable
define internal void @mark_constants(%struct.rtx_def* %insn) #0 !dbg !13419 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %subinsn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !13420, metadata !DIExpression()), !dbg !13421
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !13422
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !13422
  %bf.load = load i32, i32* %1, align 8, !dbg !13422
  %bf.clear = and i32 %bf.load, 65535, !dbg !13422
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !13422
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !13422

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !13422
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !13422
  %bf.load1 = load i32, i32* %3, align 8, !dbg !13422
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !13422
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !13422
  br i1 %cmp3, label %if.end, label %lor.lhs.false4, !dbg !13422

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !13422
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !13422
  %bf.load5 = load i32, i32* %5, align 8, !dbg !13422
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !13422
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !13422
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !13422

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !13422
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !13422
  %bf.load9 = load i32, i32* %7, align 8, !dbg !13422
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !13422
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !13422
  br i1 %cmp11, label %if.end, label %if.then, !dbg !13424

if.then:                                          ; preds = %lor.lhs.false8
  br label %if.end55, !dbg !13425

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !13426
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !13426
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !13426
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !13426
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !13426
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !13426
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !13426
  %bf.load12 = load i32, i32* %10, align 8, !dbg !13426
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !13426
  %cmp14 = icmp eq i32 %bf.clear13, 5, !dbg !13428
  br i1 %cmp14, label %if.then15, label %if.else, !dbg !13429

if.then15:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !13430, metadata !DIExpression()), !dbg !13432
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !13433
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !13433
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !13433
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !13433
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !13433
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !13433
  store %struct.rtx_def* %12, %struct.rtx_def** %seq, align 8, !dbg !13432
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13434, metadata !DIExpression()), !dbg !13435
  call void @llvm.dbg.declare(metadata i32* %n, metadata !13436, metadata !DIExpression()), !dbg !13437
  %13 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !13438
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !13438
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !13438
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 0, !dbg !13438
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtvec_def**, !dbg !13438
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !13438
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %14, i32 0, i32 0, !dbg !13438
  %15 = load i32, i32* %num_elem, align 8, !dbg !13438
  store i32 %15, i32* %n, align 4, !dbg !13437
  store i32 0, i32* %i, align 4, !dbg !13439
  br label %for.cond, !dbg !13441

for.cond:                                         ; preds = %for.inc, %if.then15
  %16 = load i32, i32* %i, align 4, !dbg !13442
  %17 = load i32, i32* %n, align 4, !dbg !13444
  %cmp23 = icmp slt i32 %16, %17, !dbg !13445
  br i1 %cmp23, label %for.body, label %for.end, !dbg !13446

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subinsn, metadata !13447, metadata !DIExpression()), !dbg !13449
  %18 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !13450
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !13450
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !13450
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !13450
  %rt_rtvec27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtvec_def**, !dbg !13450
  %19 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec27, align 8, !dbg !13450
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %19, i32 0, i32 1, !dbg !13450
  %20 = load i32, i32* %i, align 4, !dbg !13450
  %idxprom = sext i32 %20 to i64, !dbg !13450
  %arrayidx28 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !13450
  %21 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8, !dbg !13450
  store %struct.rtx_def* %21, %struct.rtx_def** %subinsn, align 8, !dbg !13449
  %22 = load %struct.rtx_def*, %struct.rtx_def** %subinsn, align 8, !dbg !13451
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !13451
  %bf.load29 = load i32, i32* %23, align 8, !dbg !13451
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !13451
  %cmp31 = icmp eq i32 %bf.clear30, 8, !dbg !13451
  br i1 %cmp31, label %if.then44, label %lor.lhs.false32, !dbg !13451

lor.lhs.false32:                                  ; preds = %for.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %subinsn, align 8, !dbg !13451
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !13451
  %bf.load33 = load i32, i32* %25, align 8, !dbg !13451
  %bf.clear34 = and i32 %bf.load33, 65535, !dbg !13451
  %cmp35 = icmp eq i32 %bf.clear34, 7, !dbg !13451
  br i1 %cmp35, label %if.then44, label %lor.lhs.false36, !dbg !13451

lor.lhs.false36:                                  ; preds = %lor.lhs.false32
  %26 = load %struct.rtx_def*, %struct.rtx_def** %subinsn, align 8, !dbg !13451
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !13451
  %bf.load37 = load i32, i32* %27, align 8, !dbg !13451
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !13451
  %cmp39 = icmp eq i32 %bf.clear38, 9, !dbg !13451
  br i1 %cmp39, label %if.then44, label %lor.lhs.false40, !dbg !13451

lor.lhs.false40:                                  ; preds = %lor.lhs.false36
  %28 = load %struct.rtx_def*, %struct.rtx_def** %subinsn, align 8, !dbg !13451
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !13451
  %bf.load41 = load i32, i32* %29, align 8, !dbg !13451
  %bf.clear42 = and i32 %bf.load41, 65535, !dbg !13451
  %cmp43 = icmp eq i32 %bf.clear42, 10, !dbg !13451
  br i1 %cmp43, label %if.then44, label %if.end49, !dbg !13453

if.then44:                                        ; preds = %lor.lhs.false40, %lor.lhs.false36, %lor.lhs.false32, %for.body
  %30 = load %struct.rtx_def*, %struct.rtx_def** %subinsn, align 8, !dbg !13454
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !13454
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !13454
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 5, !dbg !13454
  %rt_rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**, !dbg !13454
  %call = call i32 @for_each_rtx(%struct.rtx_def** %rt_rtx48, i32 (%struct.rtx_def**, i8*)* @mark_constant, i8* null), !dbg !13455
  br label %if.end49, !dbg !13455

if.end49:                                         ; preds = %if.then44, %lor.lhs.false40
  br label %for.inc, !dbg !13456

for.inc:                                          ; preds = %if.end49
  %31 = load i32, i32* %i, align 4, !dbg !13457
  %inc = add nsw i32 %31, 1, !dbg !13457
  store i32 %inc, i32* %i, align 4, !dbg !13457
  br label %for.cond, !dbg !13458, !llvm.loop !13459

for.end:                                          ; preds = %for.cond
  br label %if.end55, !dbg !13461

if.else:                                          ; preds = %if.end
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !13462
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !13462
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !13462
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 5, !dbg !13462
  %rt_rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**, !dbg !13462
  %call54 = call i32 @for_each_rtx(%struct.rtx_def** %rt_rtx53, i32 (%struct.rtx_def**, i8*)* @mark_constant, i8* null), !dbg !13463
  br label %if.end55

if.end55:                                         ; preds = %if.then, %if.else, %for.end
  ret void, !dbg !13464
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mark_constant(%struct.rtx_def** %current_rtx, i8* %data) #0 !dbg !13465 {
entry:
  %retval = alloca i32, align 4
  %current_rtx.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %desc = alloca %struct.constant_descriptor_rtx*, align 8
  %exp = alloca %union.tree_node*, align 8
  store %struct.rtx_def** %current_rtx, %struct.rtx_def*** %current_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %current_rtx.addr, metadata !13466, metadata !DIExpression()), !dbg !13467
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !13468, metadata !DIExpression()), !dbg !13469
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !13470, metadata !DIExpression()), !dbg !13471
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %current_rtx.addr, align 8, !dbg !13472
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !13473
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8, !dbg !13471
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13474
  %cmp = icmp eq %struct.rtx_def* %2, null, !dbg !13476
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !13477

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13478
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !13478
  %bf.load = load i32, i32* %4, align 8, !dbg !13478
  %bf.clear = and i32 %bf.load, 65535, !dbg !13478
  %cmp1 = icmp ne i32 %bf.clear, 45, !dbg !13479
  br i1 %cmp1, label %if.then, label %if.end, !dbg !13480

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !13481
  br label %return, !dbg !13481

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13482
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !13482
  %bf.load2 = load i32, i32* %6, align 8, !dbg !13482
  %bf.lshr = lshr i32 %bf.load2, 26, !dbg !13482
  %bf.clear3 = and i32 %bf.lshr, 1, !dbg !13482
  %tobool = icmp ne i32 %bf.clear3, 0, !dbg !13482
  br i1 %tobool, label %if.then4, label %if.else, !dbg !13484

if.then4:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %desc, metadata !13485, metadata !DIExpression()), !dbg !13487
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13488
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !13488
  %bf.load5 = load i32, i32* %8, align 8, !dbg !13488
  %bf.lshr6 = lshr i32 %bf.load5, 26, !dbg !13488
  %bf.clear7 = and i32 %bf.lshr6, 1, !dbg !13488
  %tobool8 = icmp ne i32 %bf.clear7, 0, !dbg !13488
  br i1 %tobool8, label %cond.true, label %cond.false, !dbg !13488

cond.true:                                        ; preds = %if.then4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13488
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !13488
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !13488
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !13488
  %rt_constant = bitcast %union.rtunion_def* %arrayidx to %struct.constant_descriptor_rtx**, !dbg !13488
  %10 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %rt_constant, align 8, !dbg !13488
  br label %cond.end, !dbg !13488

cond.false:                                       ; preds = %if.then4
  br label %cond.end, !dbg !13488

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.constant_descriptor_rtx* [ %10, %cond.true ], [ null, %cond.false ], !dbg !13488
  store %struct.constant_descriptor_rtx* %cond, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !13487
  %11 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !13489
  %mark = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %11, i32 0, i32 9, !dbg !13491
  %12 = load i32, i32* %mark, align 8, !dbg !13491
  %cmp9 = icmp eq i32 %12, 0, !dbg !13492
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !13493

if.then10:                                        ; preds = %cond.end
  %13 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !13494
  %mark11 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %13, i32 0, i32 9, !dbg !13496
  store i32 1, i32* %mark11, align 8, !dbg !13497
  %14 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !13498
  %constant = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %14, i32 0, i32 3, !dbg !13499
  %call = call i32 @for_each_rtx(%struct.rtx_def** %constant, i32 (%struct.rtx_def**, i8*)* @mark_constant, i8* null), !dbg !13500
  br label %if.end12, !dbg !13501

if.end12:                                         ; preds = %if.then10, %cond.end
  br label %if.end36, !dbg !13502

if.else:                                          ; preds = %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13503
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !13503
  %bf.load13 = load i32, i32* %16, align 8, !dbg !13503
  %bf.lshr14 = lshr i32 %bf.load13, 30, !dbg !13503
  %bf.clear15 = and i32 %bf.lshr14, 1, !dbg !13503
  %tobool16 = icmp ne i32 %bf.clear15, 0, !dbg !13503
  br i1 %tobool16, label %if.then17, label %if.end35, !dbg !13505

if.then17:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp, metadata !13506, metadata !DIExpression()), !dbg !13508
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13509
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !13509
  %bf.load18 = load i32, i32* %18, align 8, !dbg !13509
  %bf.lshr19 = lshr i32 %bf.load18, 26, !dbg !13509
  %bf.clear20 = and i32 %bf.lshr19, 1, !dbg !13509
  %tobool21 = icmp ne i32 %bf.clear20, 0, !dbg !13509
  br i1 %tobool21, label %cond.true22, label %cond.false23, !dbg !13509

cond.true22:                                      ; preds = %if.then17
  br label %cond.end27, !dbg !13509

cond.false23:                                     ; preds = %if.then17
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13509
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !13509
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !13509
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 2, !dbg !13509
  %rt_tree = bitcast %union.rtunion_def* %arrayidx26 to %union.tree_node**, !dbg !13509
  %20 = load %union.tree_node*, %union.tree_node** %rt_tree, align 8, !dbg !13509
  br label %cond.end27, !dbg !13509

cond.end27:                                       ; preds = %cond.false23, %cond.true22
  %cond28 = phi %union.tree_node* [ null, %cond.true22 ], [ %20, %cond.false23 ], !dbg !13509
  store %union.tree_node* %cond28, %union.tree_node** %exp, align 8, !dbg !13508
  %21 = load %union.tree_node*, %union.tree_node** %exp, align 8, !dbg !13510
  %base = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !13510
  %22 = bitcast %struct.tree_base* %base to i64*, !dbg !13510
  %bf.load29 = load i64, i64* %22, align 8, !dbg !13510
  %bf.lshr30 = lshr i64 %bf.load29, 22, !dbg !13510
  %bf.clear31 = and i64 %bf.lshr30, 1, !dbg !13510
  %bf.cast = trunc i64 %bf.clear31 to i32, !dbg !13510
  %tobool32 = icmp ne i32 %bf.cast, 0, !dbg !13510
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !13512

if.then33:                                        ; preds = %cond.end27
  %23 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 2, i32 1), align 8, !dbg !13513
  %dec = add i32 %23, -1, !dbg !13513
  store i32 %dec, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 2, i32 1), align 8, !dbg !13513
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13515
  call void @output_constant_def_contents(%struct.rtx_def* %24), !dbg !13516
  br label %if.end34, !dbg !13517

if.end34:                                         ; preds = %if.then33, %cond.end27
  br label %if.end35, !dbg !13518

if.end35:                                         ; preds = %if.end34, %if.else
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end12
  store i32 -1, i32* %retval, align 4, !dbg !13519
  br label %return, !dbg !13519

return:                                           ; preds = %if.end36, %if.then
  %25 = load i32, i32* %retval, align 4, !dbg !13520
  ret i32 %25, !dbg !13520
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_constant_pool_1(%struct.constant_descriptor_rtx* %desc, i32 %align) #0 !dbg !13521 {
entry:
  %desc.addr = alloca %struct.constant_descriptor_rtx*, align 8
  %align.addr = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  store %struct.constant_descriptor_rtx* %desc, %struct.constant_descriptor_rtx** %desc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %desc.addr, metadata !13524, metadata !DIExpression()), !dbg !13525
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !13526, metadata !DIExpression()), !dbg !13527
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !13528, metadata !DIExpression()), !dbg !13529
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !13530, metadata !DIExpression()), !dbg !13531
  %0 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc.addr, align 8, !dbg !13532
  %constant = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %0, i32 0, i32 3, !dbg !13533
  %1 = load %struct.rtx_def*, %struct.rtx_def** %constant, align 8, !dbg !13533
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8, !dbg !13534
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13535
  store %struct.rtx_def* %2, %struct.rtx_def** %tmp, align 8, !dbg !13536
  %3 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !13537
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !13537
  %bf.load = load i32, i32* %4, align 8, !dbg !13537
  %bf.clear = and i32 %bf.load, 65535, !dbg !13537
  switch i32 %bf.clear, label %sw.default [
    i32 35, label %sw.bb
    i32 44, label %sw.bb22
  ], !dbg !13538

sw.bb:                                            ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !13539
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !13539
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !13539
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !13539
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !13539
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !13539
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !13539
  %bf.load1 = load i32, i32* %7, align 8, !dbg !13539
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !13539
  %cmp = icmp ne i32 %bf.clear2, 49, !dbg !13542
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !13543

lor.lhs.false:                                    ; preds = %sw.bb
  %8 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !13544
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !13544
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !13544
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 0, !dbg !13544
  %rt_rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !13544
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx6, align 8, !dbg !13544
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !13544
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !13544
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 0, !dbg !13544
  %rt_rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**, !dbg !13544
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx10, align 8, !dbg !13544
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !13544
  %bf.load11 = load i32, i32* %11, align 8, !dbg !13544
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !13544
  %cmp13 = icmp ne i32 %bf.clear12, 44, !dbg !13545
  br i1 %cmp13, label %if.then, label %if.end, !dbg !13546

if.then:                                          ; preds = %lor.lhs.false, %sw.bb
  br label %sw.epilog, !dbg !13547

if.end:                                           ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !13548
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !13548
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !13548
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !13548
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !13548
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !13548
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !13548
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !13548
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 0, !dbg !13548
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !13548
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !13548
  store %struct.rtx_def* %14, %struct.rtx_def** %tmp, align 8, !dbg !13549
  br label %sw.bb22, !dbg !13550

sw.bb22:                                          ; preds = %entry, %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !13551
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !13551
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !13551
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 0, !dbg !13551
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !13551
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !13551
  store %struct.rtx_def* %16, %struct.rtx_def** %tmp, align 8, !dbg !13552
  %17 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !13553
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !13553
  %bf.load27 = load i32, i32* %18, align 8, !dbg !13553
  %bf.lshr = lshr i32 %bf.load27, 27, !dbg !13553
  %bf.clear28 = and i32 %bf.lshr, 1, !dbg !13553
  %tobool = icmp ne i32 %bf.clear28, 0, !dbg !13553
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13553

cond.true:                                        ; preds = %sw.bb22
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 3846, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !13553
  br label %cond.end, !dbg !13553

cond.false:                                       ; preds = %sw.bb22
  br label %cond.end, !dbg !13553

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13553
  %19 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !13554
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !13554
  %bf.load29 = load i32, i32* %20, align 8, !dbg !13554
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !13554
  %cmp31 = icmp eq i32 %bf.clear30, 13, !dbg !13554
  br i1 %cmp31, label %lor.lhs.false32, label %cond.false38, !dbg !13554

lor.lhs.false32:                                  ; preds = %cond.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !13554
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !13554
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !13554
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 5, !dbg !13554
  %rt_int = bitcast %union.rtunion_def* %arrayidx35 to i32*, !dbg !13554
  %22 = load i32, i32* %rt_int, align 8, !dbg !13554
  %cmp36 = icmp ne i32 %22, 0, !dbg !13554
  br i1 %cmp36, label %cond.false38, label %cond.true37, !dbg !13554

cond.true37:                                      ; preds = %lor.lhs.false32
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 3848, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !13554
  br label %cond.end39, !dbg !13554

cond.false38:                                     ; preds = %lor.lhs.false32, %cond.end
  br label %cond.end39, !dbg !13554

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond40 = phi i32 [ 0, %cond.true37 ], [ 0, %cond.false38 ], !dbg !13554
  br label %sw.epilog, !dbg !13555

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !13556

sw.epilog:                                        ; preds = %sw.default, %cond.end39, %if.then
  %23 = load i32, i32* %align.addr, align 4, !dbg !13557
  call void @assemble_align(i32 %23), !dbg !13558
  %24 = load void (%struct._IO_FILE*, i8*, i64)*, void (%struct._IO_FILE*, i8*, i64)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 11), align 8, !dbg !13559
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @asm_out_file, align 8, !dbg !13560
  %26 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc.addr, align 8, !dbg !13561
  %labelno = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %26, i32 0, i32 8, !dbg !13562
  %27 = load i32, i32* %labelno, align 4, !dbg !13562
  %conv = sext i32 %27 to i64, !dbg !13561
  call void %24(%struct._IO_FILE* %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86, i64 0, i64 0), i64 %conv), !dbg !13563
  %28 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc.addr, align 8, !dbg !13564
  %mode = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %28, i32 0, i32 6, !dbg !13565
  %29 = load i32, i32* %mode, align 4, !dbg !13565
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !13566
  %31 = load i32, i32* %align.addr, align 4, !dbg !13567
  call void @output_constant_pool_2(i32 %29, %struct.rtx_def* %30, i32 %31), !dbg !13568
  %32 = load i32, i32* %align.addr, align 4, !dbg !13569
  %33 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc.addr, align 8, !dbg !13571
  %mode41 = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %33, i32 0, i32 6, !dbg !13571
  %34 = load i32, i32* %mode41, align 4, !dbg !13571
  %idxprom = zext i32 %34 to i64, !dbg !13571
  %arrayidx42 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !13571
  %35 = load i8, i8* %arrayidx42, align 1, !dbg !13571
  %conv43 = zext i8 %35 to i16, !dbg !13571
  %conv44 = zext i16 %conv43 to i32, !dbg !13571
  %mul = mul nsw i32 %conv44, 8, !dbg !13571
  %conv45 = trunc i32 %mul to i16, !dbg !13571
  %conv46 = zext i16 %conv45 to i32, !dbg !13571
  %cmp47 = icmp ugt i32 %32, %conv46, !dbg !13572
  br i1 %cmp47, label %land.lhs.true, label %if.end53, !dbg !13573

land.lhs.true:                                    ; preds = %sw.epilog
  %36 = load %union.section*, %union.section** @in_section, align 8, !dbg !13574
  %tobool49 = icmp ne %union.section* %36, null, !dbg !13574
  br i1 %tobool49, label %land.lhs.true50, label %if.end53, !dbg !13575

land.lhs.true50:                                  ; preds = %land.lhs.true
  %37 = load %union.section*, %union.section** @in_section, align 8, !dbg !13576
  %common = bitcast %union.section* %37 to %struct.section_common*, !dbg !13577
  %flags = getelementptr inbounds %struct.section_common, %struct.section_common* %common, i32 0, i32 0, !dbg !13578
  %38 = load i32, i32* %flags, align 8, !dbg !13578
  %and = and i32 %38, 32768, !dbg !13579
  %tobool51 = icmp ne i32 %and, 0, !dbg !13579
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !13580

if.then52:                                        ; preds = %land.lhs.true50
  %39 = load i32, i32* %align.addr, align 4, !dbg !13581
  call void @assemble_align(i32 %39), !dbg !13582
  br label %if.end53, !dbg !13582

if.end53:                                         ; preds = %if.then52, %land.lhs.true50, %land.lhs.true, %sw.epilog
  ret void, !dbg !13583
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_constant_pool_2(i32 %mode, %struct.rtx_def* %x, i32 %align) #0 !dbg !13584 {
entry:
  %mode.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %align.addr = alloca i32, align 4
  %r = alloca %struct.real_value, align 8
  %i = alloca i32, align 4
  %units = alloca i32, align 4
  %submode = alloca i32, align 4
  %subalign = alloca i32, align 4
  %elt = alloca %struct.rtx_def*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !13587, metadata !DIExpression()), !dbg !13588
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !13589, metadata !DIExpression()), !dbg !13590
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !13591, metadata !DIExpression()), !dbg !13592
  %0 = load i32, i32* %mode.addr, align 4, !dbg !13593
  %idxprom = zext i32 %0 to i64, !dbg !13593
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !13593
  %1 = load i8, i8* %arrayidx, align 1, !dbg !13593
  %conv = zext i8 %1 to i32, !dbg !13593
  switch i32 %conv, label %sw.default [
    i32 8, label %sw.bb
    i32 9, label %sw.bb
    i32 2, label %sw.bb2
    i32 3, label %sw.bb2
    i32 4, label %sw.bb2
    i32 5, label %sw.bb2
    i32 6, label %sw.bb2
    i32 7, label %sw.bb2
    i32 17, label %sw.bb7
    i32 12, label %sw.bb7
    i32 13, label %sw.bb7
    i32 14, label %sw.bb7
    i32 15, label %sw.bb7
    i32 16, label %sw.bb7
  ], !dbg !13594

sw.bb:                                            ; preds = %entry, %entry
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !13595, metadata !DIExpression()), !dbg !13598
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !13599
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !13599
  %bf.load = load i32, i32* %3, align 8, !dbg !13599
  %bf.clear = and i32 %bf.load, 65535, !dbg !13599
  %cmp = icmp eq i32 %bf.clear, 32, !dbg !13599
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !13599

cond.true:                                        ; preds = %sw.bb
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 3772, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !13599
  br label %cond.end, !dbg !13599

cond.false:                                       ; preds = %sw.bb
  br label %cond.end, !dbg !13599

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13599
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !13600
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !13600
  %rv = bitcast %union.u* %u to %struct.real_value*, !dbg !13600
  %5 = bitcast %struct.real_value* %r to i8*, !dbg !13600
  %6 = bitcast %struct.real_value* %rv to i8*, !dbg !13600
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 32, i1 false), !dbg !13600
  %7 = load i32, i32* %mode.addr, align 4, !dbg !13601
  %8 = load i32, i32* %align.addr, align 4, !dbg !13602
  call void @assemble_real(%struct.real_value* byval(%struct.real_value) align 8 %r, i32 %7, i32 %8), !dbg !13603
  br label %sw.epilog, !dbg !13604

sw.bb2:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !13605
  %10 = load i32, i32* %mode.addr, align 4, !dbg !13606
  %idxprom3 = zext i32 %10 to i64, !dbg !13606
  %arrayidx4 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom3, !dbg !13606
  %11 = load i8, i8* %arrayidx4, align 1, !dbg !13606
  %conv5 = zext i8 %11 to i16, !dbg !13606
  %conv6 = zext i16 %conv5 to i32, !dbg !13606
  %12 = load i32, i32* %align.addr, align 4, !dbg !13607
  %call = call zeroext i8 @assemble_integer(%struct.rtx_def* %9, i32 %conv6, i32 %12, i32 1), !dbg !13608
  br label %sw.epilog, !dbg !13609

sw.bb7:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13610, metadata !DIExpression()), !dbg !13612
  call void @llvm.dbg.declare(metadata i32* %units, metadata !13613, metadata !DIExpression()), !dbg !13614
  call void @llvm.dbg.declare(metadata i32* %submode, metadata !13615, metadata !DIExpression()), !dbg !13616
  %13 = load i32, i32* %mode.addr, align 4, !dbg !13617
  %idxprom8 = zext i32 %13 to i64, !dbg !13617
  %arrayidx9 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom8, !dbg !13617
  %14 = load i8, i8* %arrayidx9, align 1, !dbg !13617
  %conv10 = zext i8 %14 to i32, !dbg !13617
  store i32 %conv10, i32* %submode, align 4, !dbg !13616
  call void @llvm.dbg.declare(metadata i32* %subalign, metadata !13618, metadata !DIExpression()), !dbg !13619
  %15 = load i32, i32* %align.addr, align 4, !dbg !13620
  %16 = load i32, i32* %submode, align 4, !dbg !13620
  %idxprom11 = zext i32 %16 to i64, !dbg !13620
  %arrayidx12 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom11, !dbg !13620
  %17 = load i8, i8* %arrayidx12, align 1, !dbg !13620
  %conv13 = zext i8 %17 to i16, !dbg !13620
  %conv14 = zext i16 %conv13 to i32, !dbg !13620
  %mul = mul nsw i32 %conv14, 8, !dbg !13620
  %conv15 = trunc i32 %mul to i16, !dbg !13620
  %conv16 = zext i16 %conv15 to i32, !dbg !13620
  %cmp17 = icmp ult i32 %15, %conv16, !dbg !13620
  br i1 %cmp17, label %cond.true19, label %cond.false20, !dbg !13620

cond.true19:                                      ; preds = %sw.bb7
  %18 = load i32, i32* %align.addr, align 4, !dbg !13620
  br label %cond.end28, !dbg !13620

cond.false20:                                     ; preds = %sw.bb7
  %19 = load i32, i32* %submode, align 4, !dbg !13620
  %idxprom21 = zext i32 %19 to i64, !dbg !13620
  %arrayidx22 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom21, !dbg !13620
  %20 = load i8, i8* %arrayidx22, align 1, !dbg !13620
  %conv23 = zext i8 %20 to i16, !dbg !13620
  %conv24 = zext i16 %conv23 to i32, !dbg !13620
  %mul25 = mul nsw i32 %conv24, 8, !dbg !13620
  %conv26 = trunc i32 %mul25 to i16, !dbg !13620
  %conv27 = zext i16 %conv26 to i32, !dbg !13620
  br label %cond.end28, !dbg !13620

cond.end28:                                       ; preds = %cond.false20, %cond.true19
  %cond29 = phi i32 [ %18, %cond.true19 ], [ %conv27, %cond.false20 ], !dbg !13620
  store i32 %cond29, i32* %subalign, align 4, !dbg !13619
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !13621
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !13621
  %bf.load30 = load i32, i32* %22, align 8, !dbg !13621
  %bf.clear31 = and i32 %bf.load30, 65535, !dbg !13621
  %cmp32 = icmp eq i32 %bf.clear31, 33, !dbg !13621
  br i1 %cmp32, label %cond.false35, label %cond.true34, !dbg !13621

cond.true34:                                      ; preds = %cond.end28
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 3798, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !13621
  br label %cond.end36, !dbg !13621

cond.false35:                                     ; preds = %cond.end28
  br label %cond.end36, !dbg !13621

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond37 = phi i32 [ 0, %cond.true34 ], [ 0, %cond.false35 ], !dbg !13621
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !13622
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !13622
  %fld = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !13622
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !13622
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtvec_def**, !dbg !13622
  %24 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !13622
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %24, i32 0, i32 0, !dbg !13622
  %25 = load i32, i32* %num_elem, align 8, !dbg !13622
  store i32 %25, i32* %units, align 4, !dbg !13623
  store i32 0, i32* %i, align 4, !dbg !13624
  br label %for.cond, !dbg !13626

for.cond:                                         ; preds = %for.inc, %cond.end36
  %26 = load i32, i32* %i, align 4, !dbg !13627
  %27 = load i32, i32* %units, align 4, !dbg !13629
  %cmp40 = icmp slt i32 %26, %27, !dbg !13630
  br i1 %cmp40, label %for.body, label %for.end, !dbg !13631

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %elt, metadata !13632, metadata !DIExpression()), !dbg !13634
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !13635
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !13635
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !13635
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 0, !dbg !13635
  %rt_rtvec45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtvec_def**, !dbg !13635
  %29 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec45, align 8, !dbg !13635
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %29, i32 0, i32 1, !dbg !13635
  %30 = load i32, i32* %i, align 4, !dbg !13635
  %idxprom46 = sext i32 %30 to i64, !dbg !13635
  %arrayidx47 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom46, !dbg !13635
  %31 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx47, align 8, !dbg !13635
  store %struct.rtx_def* %31, %struct.rtx_def** %elt, align 8, !dbg !13634
  %32 = load i32, i32* %submode, align 4, !dbg !13636
  %33 = load %struct.rtx_def*, %struct.rtx_def** %elt, align 8, !dbg !13637
  %34 = load i32, i32* %i, align 4, !dbg !13638
  %tobool = icmp ne i32 %34, 0, !dbg !13638
  br i1 %tobool, label %cond.true48, label %cond.false49, !dbg !13638

cond.true48:                                      ; preds = %for.body
  %35 = load i32, i32* %subalign, align 4, !dbg !13639
  br label %cond.end50, !dbg !13638

cond.false49:                                     ; preds = %for.body
  %36 = load i32, i32* %align.addr, align 4, !dbg !13640
  br label %cond.end50, !dbg !13638

cond.end50:                                       ; preds = %cond.false49, %cond.true48
  %cond51 = phi i32 [ %35, %cond.true48 ], [ %36, %cond.false49 ], !dbg !13638
  call void @output_constant_pool_2(i32 %32, %struct.rtx_def* %33, i32 %cond51), !dbg !13641
  br label %for.inc, !dbg !13642

for.inc:                                          ; preds = %cond.end50
  %37 = load i32, i32* %i, align 4, !dbg !13643
  %inc = add nsw i32 %37, 1, !dbg !13643
  store i32 %inc, i32* %i, align 4, !dbg !13643
  br label %for.cond, !dbg !13644, !llvm.loop !13645

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !13647

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 3810, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !13648
  br label %sw.epilog, !dbg !13649

sw.epilog:                                        ; preds = %sw.default, %for.end, %sw.bb2, %cond.end
  ret void, !dbg !13650
}

declare dso_local %union.tree_node* @staticp(%union.tree_node*) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @narrowing_initializer_constant_valid_p(%union.tree_node* %value, %union.tree_node* %endtype, %union.tree_node** %cache) #0 !dbg !13651 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %value.addr = alloca %union.tree_node*, align 8
  %endtype.addr = alloca %union.tree_node*, align 8
  %cache.addr = alloca %union.tree_node**, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %inner = alloca %union.tree_node*, align 8
  %inner215 = alloca %union.tree_node*, align 8
  store %union.tree_node* %value, %union.tree_node** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %value.addr, metadata !13652, metadata !DIExpression()), !dbg !13653
  store %union.tree_node* %endtype, %union.tree_node** %endtype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %endtype.addr, metadata !13654, metadata !DIExpression()), !dbg !13655
  store %union.tree_node** %cache, %union.tree_node*** %cache.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %cache.addr, metadata !13656, metadata !DIExpression()), !dbg !13657
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !13658, metadata !DIExpression()), !dbg !13659
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !13660, metadata !DIExpression()), !dbg !13661
  %0 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !13662
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !13662
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !13662
  %bf.load = load i64, i64* %1, align 8, !dbg !13662
  %bf.clear = and i64 %bf.load, 65535, !dbg !13662
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13662
  %cmp = icmp eq i32 %bf.cast, 6, !dbg !13662
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !13662

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !13662
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !13662
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !13662
  %bf.load2 = load i64, i64* %3, align 8, !dbg !13662
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !13662
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !13662
  %cmp5 = icmp eq i32 %bf.cast4, 7, !dbg !13662
  br i1 %cmp5, label %if.end, label %lor.lhs.false6, !dbg !13662

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !13662
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !13662
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !13662
  %bf.load8 = load i64, i64* %5, align 8, !dbg !13662
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !13662
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !13662
  %cmp11 = icmp eq i32 %bf.cast10, 8, !dbg !13662
  br i1 %cmp11, label %if.end, label %if.then, !dbg !13664

if.then:                                          ; preds = %lor.lhs.false6
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13665
  br label %return, !dbg !13665

if.end:                                           ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %6 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !13666
  %exp = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !13666
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !13666
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !13666
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !13666
  store %union.tree_node* %7, %union.tree_node** %op0, align 8, !dbg !13667
  %8 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !13668
  %exp12 = bitcast %union.tree_node* %8 to %struct.tree_exp*, !dbg !13668
  %operands13 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp12, i32 0, i32 3, !dbg !13668
  %arrayidx14 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands13, i64 0, i64 1, !dbg !13668
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !13668
  store %union.tree_node* %9, %union.tree_node** %op1, align 8, !dbg !13669
  br label %while.cond, !dbg !13670

while.cond:                                       ; preds = %if.end191, %if.end
  %10 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13671
  %base15 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !13671
  %11 = bitcast %struct.tree_base* %base15 to i64*, !dbg !13671
  %bf.load16 = load i64, i64* %11, align 8, !dbg !13671
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !13671
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !13671
  %cmp19 = icmp eq i32 %bf.cast18, 116, !dbg !13671
  br i1 %cmp19, label %lor.end, label %lor.lhs.false20, !dbg !13671

lor.lhs.false20:                                  ; preds = %while.cond
  %12 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13671
  %base21 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !13671
  %13 = bitcast %struct.tree_base* %base21 to i64*, !dbg !13671
  %bf.load22 = load i64, i64* %13, align 8, !dbg !13671
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !13671
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !13671
  %cmp25 = icmp eq i32 %bf.cast24, 113, !dbg !13671
  br i1 %cmp25, label %lor.end, label %lor.rhs, !dbg !13672

lor.rhs:                                          ; preds = %lor.lhs.false20
  %14 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13673
  %base26 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !13673
  %15 = bitcast %struct.tree_base* %base26 to i64*, !dbg !13673
  %bf.load27 = load i64, i64* %15, align 8, !dbg !13673
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !13673
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !13673
  %cmp30 = icmp eq i32 %bf.cast29, 117, !dbg !13674
  br label %lor.end, !dbg !13672

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false20, %while.cond
  %16 = phi i1 [ true, %lor.lhs.false20 ], [ true, %while.cond ], [ %cmp30, %lor.rhs ]
  br i1 %16, label %while.body, label %while.end, !dbg !13670

while.body:                                       ; preds = %lor.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner, metadata !13675, metadata !DIExpression()), !dbg !13677
  %17 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13678
  %exp31 = bitcast %union.tree_node* %17 to %struct.tree_exp*, !dbg !13678
  %operands32 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp31, i32 0, i32 3, !dbg !13678
  %arrayidx33 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands32, i64 0, i64 0, !dbg !13678
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx33, align 8, !dbg !13678
  store %union.tree_node* %18, %union.tree_node** %inner, align 8, !dbg !13677
  %19 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13679
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !13681
  %cmp34 = icmp eq %union.tree_node* %19, %20, !dbg !13682
  br i1 %cmp34, label %if.then190, label %lor.lhs.false35, !dbg !13683

lor.lhs.false35:                                  ; preds = %while.body
  %21 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !13684
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13684
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13684
  %base36 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !13684
  %23 = bitcast %struct.tree_base* %base36 to i64*, !dbg !13684
  %bf.load37 = load i64, i64* %23, align 8, !dbg !13684
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !13684
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !13684
  %cmp40 = icmp eq i32 %bf.cast39, 14, !dbg !13684
  br i1 %cmp40, label %cond.true, label %cond.false, !dbg !13684

cond.true:                                        ; preds = %lor.lhs.false35
  %24 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common41 = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !13684
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !13684
  %25 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !13684
  %call = call i32 @vector_type_mode(%union.tree_node* %25), !dbg !13684
  br label %cond.end, !dbg !13684

cond.false:                                       ; preds = %lor.lhs.false35
  %26 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common43 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !13684
  %type44 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common43, i32 0, i32 2, !dbg !13684
  %27 = load %union.tree_node*, %union.tree_node** %type44, align 8, !dbg !13684
  %type45 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !13684
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type45, i32 0, i32 6, !dbg !13684
  %bf.load46 = load i32, i32* %mode, align 4, !dbg !13684
  %bf.lshr = lshr i32 %bf.load46, 16, !dbg !13684
  %bf.clear47 = and i32 %bf.lshr, 255, !dbg !13684
  br label %cond.end, !dbg !13684

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear47, %cond.false ], !dbg !13684
  %idxprom = zext i32 %cond to i64, !dbg !13684
  %arrayidx48 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !13684
  %28 = load i8, i8* %arrayidx48, align 1, !dbg !13684
  %conv = zext i8 %28 to i32, !dbg !13684
  %cmp49 = icmp eq i32 %conv, 2, !dbg !13684
  br i1 %cmp49, label %lor.lhs.false135, label %lor.lhs.false51, !dbg !13684

lor.lhs.false51:                                  ; preds = %cond.end
  %29 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common52 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !13684
  %type53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2, !dbg !13684
  %30 = load %union.tree_node*, %union.tree_node** %type53, align 8, !dbg !13684
  %base54 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !13684
  %31 = bitcast %struct.tree_base* %base54 to i64*, !dbg !13684
  %bf.load55 = load i64, i64* %31, align 8, !dbg !13684
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !13684
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !13684
  %cmp58 = icmp eq i32 %bf.cast57, 14, !dbg !13684
  br i1 %cmp58, label %cond.true60, label %cond.false64, !dbg !13684

cond.true60:                                      ; preds = %lor.lhs.false51
  %32 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common61 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !13684
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !13684
  %33 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !13684
  %call63 = call i32 @vector_type_mode(%union.tree_node* %33), !dbg !13684
  br label %cond.end72, !dbg !13684

cond.false64:                                     ; preds = %lor.lhs.false51
  %34 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common65 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !13684
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !13684
  %35 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !13684
  %type67 = bitcast %union.tree_node* %35 to %struct.tree_type*, !dbg !13684
  %mode68 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type67, i32 0, i32 6, !dbg !13684
  %bf.load69 = load i32, i32* %mode68, align 4, !dbg !13684
  %bf.lshr70 = lshr i32 %bf.load69, 16, !dbg !13684
  %bf.clear71 = and i32 %bf.lshr70, 255, !dbg !13684
  br label %cond.end72, !dbg !13684

cond.end72:                                       ; preds = %cond.false64, %cond.true60
  %cond73 = phi i32 [ %call63, %cond.true60 ], [ %bf.clear71, %cond.false64 ], !dbg !13684
  %idxprom74 = zext i32 %cond73 to i64, !dbg !13684
  %arrayidx75 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom74, !dbg !13684
  %36 = load i8, i8* %arrayidx75, align 1, !dbg !13684
  %conv76 = zext i8 %36 to i32, !dbg !13684
  %cmp77 = icmp eq i32 %conv76, 3, !dbg !13684
  br i1 %cmp77, label %lor.lhs.false135, label %lor.lhs.false79, !dbg !13684

lor.lhs.false79:                                  ; preds = %cond.end72
  %37 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common80 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !13684
  %type81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 2, !dbg !13684
  %38 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !13684
  %base82 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !13684
  %39 = bitcast %struct.tree_base* %base82 to i64*, !dbg !13684
  %bf.load83 = load i64, i64* %39, align 8, !dbg !13684
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !13684
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !13684
  %cmp86 = icmp eq i32 %bf.cast85, 14, !dbg !13684
  br i1 %cmp86, label %cond.true88, label %cond.false92, !dbg !13684

cond.true88:                                      ; preds = %lor.lhs.false79
  %40 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common89 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !13684
  %type90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common89, i32 0, i32 2, !dbg !13684
  %41 = load %union.tree_node*, %union.tree_node** %type90, align 8, !dbg !13684
  %call91 = call i32 @vector_type_mode(%union.tree_node* %41), !dbg !13684
  br label %cond.end100, !dbg !13684

cond.false92:                                     ; preds = %lor.lhs.false79
  %42 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common93 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !13684
  %type94 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common93, i32 0, i32 2, !dbg !13684
  %43 = load %union.tree_node*, %union.tree_node** %type94, align 8, !dbg !13684
  %type95 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !13684
  %mode96 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type95, i32 0, i32 6, !dbg !13684
  %bf.load97 = load i32, i32* %mode96, align 4, !dbg !13684
  %bf.lshr98 = lshr i32 %bf.load97, 16, !dbg !13684
  %bf.clear99 = and i32 %bf.lshr98, 255, !dbg !13684
  br label %cond.end100, !dbg !13684

cond.end100:                                      ; preds = %cond.false92, %cond.true88
  %cond101 = phi i32 [ %call91, %cond.true88 ], [ %bf.clear99, %cond.false92 ], !dbg !13684
  %idxprom102 = zext i32 %cond101 to i64, !dbg !13684
  %arrayidx103 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom102, !dbg !13684
  %44 = load i8, i8* %arrayidx103, align 1, !dbg !13684
  %conv104 = zext i8 %44 to i32, !dbg !13684
  %cmp105 = icmp eq i32 %conv104, 10, !dbg !13684
  br i1 %cmp105, label %lor.lhs.false135, label %lor.lhs.false107, !dbg !13684

lor.lhs.false107:                                 ; preds = %cond.end100
  %45 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common108 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !13684
  %type109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 2, !dbg !13684
  %46 = load %union.tree_node*, %union.tree_node** %type109, align 8, !dbg !13684
  %base110 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !13684
  %47 = bitcast %struct.tree_base* %base110 to i64*, !dbg !13684
  %bf.load111 = load i64, i64* %47, align 8, !dbg !13684
  %bf.clear112 = and i64 %bf.load111, 65535, !dbg !13684
  %bf.cast113 = trunc i64 %bf.clear112 to i32, !dbg !13684
  %cmp114 = icmp eq i32 %bf.cast113, 14, !dbg !13684
  br i1 %cmp114, label %cond.true116, label %cond.false120, !dbg !13684

cond.true116:                                     ; preds = %lor.lhs.false107
  %48 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common117 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !13684
  %type118 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common117, i32 0, i32 2, !dbg !13684
  %49 = load %union.tree_node*, %union.tree_node** %type118, align 8, !dbg !13684
  %call119 = call i32 @vector_type_mode(%union.tree_node* %49), !dbg !13684
  br label %cond.end128, !dbg !13684

cond.false120:                                    ; preds = %lor.lhs.false107
  %50 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13684
  %common121 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !13684
  %type122 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common121, i32 0, i32 2, !dbg !13684
  %51 = load %union.tree_node*, %union.tree_node** %type122, align 8, !dbg !13684
  %type123 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !13684
  %mode124 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type123, i32 0, i32 6, !dbg !13684
  %bf.load125 = load i32, i32* %mode124, align 4, !dbg !13684
  %bf.lshr126 = lshr i32 %bf.load125, 16, !dbg !13684
  %bf.clear127 = and i32 %bf.lshr126, 255, !dbg !13684
  br label %cond.end128, !dbg !13684

cond.end128:                                      ; preds = %cond.false120, %cond.true116
  %cond129 = phi i32 [ %call119, %cond.true116 ], [ %bf.clear127, %cond.false120 ], !dbg !13684
  %idxprom130 = zext i32 %cond129 to i64, !dbg !13684
  %arrayidx131 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom130, !dbg !13684
  %52 = load i8, i8* %arrayidx131, align 1, !dbg !13684
  %conv132 = zext i8 %52 to i32, !dbg !13684
  %cmp133 = icmp eq i32 %conv132, 12, !dbg !13684
  br i1 %cmp133, label %lor.lhs.false135, label %if.then190, !dbg !13685

lor.lhs.false135:                                 ; preds = %cond.end128, %cond.end100, %cond.end72, %cond.end
  %53 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13686
  %common136 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !13686
  %type137 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common136, i32 0, i32 2, !dbg !13686
  %54 = load %union.tree_node*, %union.tree_node** %type137, align 8, !dbg !13686
  %base138 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !13686
  %55 = bitcast %struct.tree_base* %base138 to i64*, !dbg !13686
  %bf.load139 = load i64, i64* %55, align 8, !dbg !13686
  %bf.clear140 = and i64 %bf.load139, 65535, !dbg !13686
  %bf.cast141 = trunc i64 %bf.clear140 to i32, !dbg !13686
  %cmp142 = icmp eq i32 %bf.cast141, 14, !dbg !13686
  br i1 %cmp142, label %cond.true144, label %cond.false148, !dbg !13686

cond.true144:                                     ; preds = %lor.lhs.false135
  %56 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13686
  %common145 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !13686
  %type146 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common145, i32 0, i32 2, !dbg !13686
  %57 = load %union.tree_node*, %union.tree_node** %type146, align 8, !dbg !13686
  %call147 = call i32 @vector_type_mode(%union.tree_node* %57), !dbg !13686
  br label %cond.end156, !dbg !13686

cond.false148:                                    ; preds = %lor.lhs.false135
  %58 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13686
  %common149 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !13686
  %type150 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common149, i32 0, i32 2, !dbg !13686
  %59 = load %union.tree_node*, %union.tree_node** %type150, align 8, !dbg !13686
  %type151 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !13686
  %mode152 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type151, i32 0, i32 6, !dbg !13686
  %bf.load153 = load i32, i32* %mode152, align 4, !dbg !13686
  %bf.lshr154 = lshr i32 %bf.load153, 16, !dbg !13686
  %bf.clear155 = and i32 %bf.lshr154, 255, !dbg !13686
  br label %cond.end156, !dbg !13686

cond.end156:                                      ; preds = %cond.false148, %cond.true144
  %cond157 = phi i32 [ %call147, %cond.true144 ], [ %bf.clear155, %cond.false148 ], !dbg !13686
  %idxprom158 = zext i32 %cond157 to i64, !dbg !13686
  %arrayidx159 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom158, !dbg !13686
  %60 = load i8, i8* %arrayidx159, align 1, !dbg !13686
  %conv160 = zext i8 %60 to i16, !dbg !13686
  %conv161 = zext i16 %conv160 to i32, !dbg !13686
  %61 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13687
  %common162 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !13687
  %type163 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common162, i32 0, i32 2, !dbg !13687
  %62 = load %union.tree_node*, %union.tree_node** %type163, align 8, !dbg !13687
  %base164 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !13687
  %63 = bitcast %struct.tree_base* %base164 to i64*, !dbg !13687
  %bf.load165 = load i64, i64* %63, align 8, !dbg !13687
  %bf.clear166 = and i64 %bf.load165, 65535, !dbg !13687
  %bf.cast167 = trunc i64 %bf.clear166 to i32, !dbg !13687
  %cmp168 = icmp eq i32 %bf.cast167, 14, !dbg !13687
  br i1 %cmp168, label %cond.true170, label %cond.false174, !dbg !13687

cond.true170:                                     ; preds = %cond.end156
  %64 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13687
  %common171 = bitcast %union.tree_node* %64 to %struct.tree_common*, !dbg !13687
  %type172 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common171, i32 0, i32 2, !dbg !13687
  %65 = load %union.tree_node*, %union.tree_node** %type172, align 8, !dbg !13687
  %call173 = call i32 @vector_type_mode(%union.tree_node* %65), !dbg !13687
  br label %cond.end182, !dbg !13687

cond.false174:                                    ; preds = %cond.end156
  %66 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13687
  %common175 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !13687
  %type176 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common175, i32 0, i32 2, !dbg !13687
  %67 = load %union.tree_node*, %union.tree_node** %type176, align 8, !dbg !13687
  %type177 = bitcast %union.tree_node* %67 to %struct.tree_type*, !dbg !13687
  %mode178 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type177, i32 0, i32 6, !dbg !13687
  %bf.load179 = load i32, i32* %mode178, align 4, !dbg !13687
  %bf.lshr180 = lshr i32 %bf.load179, 16, !dbg !13687
  %bf.clear181 = and i32 %bf.lshr180, 255, !dbg !13687
  br label %cond.end182, !dbg !13687

cond.end182:                                      ; preds = %cond.false174, %cond.true170
  %cond183 = phi i32 [ %call173, %cond.true170 ], [ %bf.clear181, %cond.false174 ], !dbg !13687
  %idxprom184 = zext i32 %cond183 to i64, !dbg !13687
  %arrayidx185 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom184, !dbg !13687
  %68 = load i8, i8* %arrayidx185, align 1, !dbg !13687
  %conv186 = zext i8 %68 to i16, !dbg !13687
  %conv187 = zext i16 %conv186 to i32, !dbg !13687
  %cmp188 = icmp sgt i32 %conv161, %conv187, !dbg !13688
  br i1 %cmp188, label %if.then190, label %if.end191, !dbg !13689

if.then190:                                       ; preds = %cond.end182, %cond.end128, %while.body
  br label %while.end, !dbg !13690

if.end191:                                        ; preds = %cond.end182
  %69 = load %union.tree_node*, %union.tree_node** %inner, align 8, !dbg !13691
  store %union.tree_node* %69, %union.tree_node** %op0, align 8, !dbg !13692
  br label %while.cond, !dbg !13670, !llvm.loop !13693

while.end:                                        ; preds = %if.then190, %lor.end
  br label %while.cond192, !dbg !13695

while.cond192:                                    ; preds = %if.end389, %while.end
  %70 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13696
  %base193 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !13696
  %71 = bitcast %struct.tree_base* %base193 to i64*, !dbg !13696
  %bf.load194 = load i64, i64* %71, align 8, !dbg !13696
  %bf.clear195 = and i64 %bf.load194, 65535, !dbg !13696
  %bf.cast196 = trunc i64 %bf.clear195 to i32, !dbg !13696
  %cmp197 = icmp eq i32 %bf.cast196, 116, !dbg !13696
  br i1 %cmp197, label %lor.end213, label %lor.lhs.false199, !dbg !13696

lor.lhs.false199:                                 ; preds = %while.cond192
  %72 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13696
  %base200 = bitcast %union.tree_node* %72 to %struct.tree_base*, !dbg !13696
  %73 = bitcast %struct.tree_base* %base200 to i64*, !dbg !13696
  %bf.load201 = load i64, i64* %73, align 8, !dbg !13696
  %bf.clear202 = and i64 %bf.load201, 65535, !dbg !13696
  %bf.cast203 = trunc i64 %bf.clear202 to i32, !dbg !13696
  %cmp204 = icmp eq i32 %bf.cast203, 113, !dbg !13696
  br i1 %cmp204, label %lor.end213, label %lor.rhs206, !dbg !13697

lor.rhs206:                                       ; preds = %lor.lhs.false199
  %74 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13698
  %base207 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !13698
  %75 = bitcast %struct.tree_base* %base207 to i64*, !dbg !13698
  %bf.load208 = load i64, i64* %75, align 8, !dbg !13698
  %bf.clear209 = and i64 %bf.load208, 65535, !dbg !13698
  %bf.cast210 = trunc i64 %bf.clear209 to i32, !dbg !13698
  %cmp211 = icmp eq i32 %bf.cast210, 117, !dbg !13699
  br label %lor.end213, !dbg !13697

lor.end213:                                       ; preds = %lor.rhs206, %lor.lhs.false199, %while.cond192
  %76 = phi i1 [ true, %lor.lhs.false199 ], [ true, %while.cond192 ], [ %cmp211, %lor.rhs206 ]
  br i1 %76, label %while.body214, label %while.end390, !dbg !13695

while.body214:                                    ; preds = %lor.end213
  call void @llvm.dbg.declare(metadata %union.tree_node** %inner215, metadata !13700, metadata !DIExpression()), !dbg !13702
  %77 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13703
  %exp216 = bitcast %union.tree_node* %77 to %struct.tree_exp*, !dbg !13703
  %operands217 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp216, i32 0, i32 3, !dbg !13703
  %arrayidx218 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands217, i64 0, i64 0, !dbg !13703
  %78 = load %union.tree_node*, %union.tree_node** %arrayidx218, align 8, !dbg !13703
  store %union.tree_node* %78, %union.tree_node** %inner215, align 8, !dbg !13702
  %79 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13704
  %80 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !13706
  %cmp219 = icmp eq %union.tree_node* %79, %80, !dbg !13707
  br i1 %cmp219, label %if.then388, label %lor.lhs.false221, !dbg !13708

lor.lhs.false221:                                 ; preds = %while.body214
  %81 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common222 = bitcast %union.tree_node* %81 to %struct.tree_common*, !dbg !13709
  %type223 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common222, i32 0, i32 2, !dbg !13709
  %82 = load %union.tree_node*, %union.tree_node** %type223, align 8, !dbg !13709
  %base224 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !13709
  %83 = bitcast %struct.tree_base* %base224 to i64*, !dbg !13709
  %bf.load225 = load i64, i64* %83, align 8, !dbg !13709
  %bf.clear226 = and i64 %bf.load225, 65535, !dbg !13709
  %bf.cast227 = trunc i64 %bf.clear226 to i32, !dbg !13709
  %cmp228 = icmp eq i32 %bf.cast227, 14, !dbg !13709
  br i1 %cmp228, label %cond.true230, label %cond.false234, !dbg !13709

cond.true230:                                     ; preds = %lor.lhs.false221
  %84 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common231 = bitcast %union.tree_node* %84 to %struct.tree_common*, !dbg !13709
  %type232 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common231, i32 0, i32 2, !dbg !13709
  %85 = load %union.tree_node*, %union.tree_node** %type232, align 8, !dbg !13709
  %call233 = call i32 @vector_type_mode(%union.tree_node* %85), !dbg !13709
  br label %cond.end242, !dbg !13709

cond.false234:                                    ; preds = %lor.lhs.false221
  %86 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common235 = bitcast %union.tree_node* %86 to %struct.tree_common*, !dbg !13709
  %type236 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common235, i32 0, i32 2, !dbg !13709
  %87 = load %union.tree_node*, %union.tree_node** %type236, align 8, !dbg !13709
  %type237 = bitcast %union.tree_node* %87 to %struct.tree_type*, !dbg !13709
  %mode238 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type237, i32 0, i32 6, !dbg !13709
  %bf.load239 = load i32, i32* %mode238, align 4, !dbg !13709
  %bf.lshr240 = lshr i32 %bf.load239, 16, !dbg !13709
  %bf.clear241 = and i32 %bf.lshr240, 255, !dbg !13709
  br label %cond.end242, !dbg !13709

cond.end242:                                      ; preds = %cond.false234, %cond.true230
  %cond243 = phi i32 [ %call233, %cond.true230 ], [ %bf.clear241, %cond.false234 ], !dbg !13709
  %idxprom244 = zext i32 %cond243 to i64, !dbg !13709
  %arrayidx245 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom244, !dbg !13709
  %88 = load i8, i8* %arrayidx245, align 1, !dbg !13709
  %conv246 = zext i8 %88 to i32, !dbg !13709
  %cmp247 = icmp eq i32 %conv246, 2, !dbg !13709
  br i1 %cmp247, label %lor.lhs.false333, label %lor.lhs.false249, !dbg !13709

lor.lhs.false249:                                 ; preds = %cond.end242
  %89 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common250 = bitcast %union.tree_node* %89 to %struct.tree_common*, !dbg !13709
  %type251 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common250, i32 0, i32 2, !dbg !13709
  %90 = load %union.tree_node*, %union.tree_node** %type251, align 8, !dbg !13709
  %base252 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !13709
  %91 = bitcast %struct.tree_base* %base252 to i64*, !dbg !13709
  %bf.load253 = load i64, i64* %91, align 8, !dbg !13709
  %bf.clear254 = and i64 %bf.load253, 65535, !dbg !13709
  %bf.cast255 = trunc i64 %bf.clear254 to i32, !dbg !13709
  %cmp256 = icmp eq i32 %bf.cast255, 14, !dbg !13709
  br i1 %cmp256, label %cond.true258, label %cond.false262, !dbg !13709

cond.true258:                                     ; preds = %lor.lhs.false249
  %92 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common259 = bitcast %union.tree_node* %92 to %struct.tree_common*, !dbg !13709
  %type260 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common259, i32 0, i32 2, !dbg !13709
  %93 = load %union.tree_node*, %union.tree_node** %type260, align 8, !dbg !13709
  %call261 = call i32 @vector_type_mode(%union.tree_node* %93), !dbg !13709
  br label %cond.end270, !dbg !13709

cond.false262:                                    ; preds = %lor.lhs.false249
  %94 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common263 = bitcast %union.tree_node* %94 to %struct.tree_common*, !dbg !13709
  %type264 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common263, i32 0, i32 2, !dbg !13709
  %95 = load %union.tree_node*, %union.tree_node** %type264, align 8, !dbg !13709
  %type265 = bitcast %union.tree_node* %95 to %struct.tree_type*, !dbg !13709
  %mode266 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type265, i32 0, i32 6, !dbg !13709
  %bf.load267 = load i32, i32* %mode266, align 4, !dbg !13709
  %bf.lshr268 = lshr i32 %bf.load267, 16, !dbg !13709
  %bf.clear269 = and i32 %bf.lshr268, 255, !dbg !13709
  br label %cond.end270, !dbg !13709

cond.end270:                                      ; preds = %cond.false262, %cond.true258
  %cond271 = phi i32 [ %call261, %cond.true258 ], [ %bf.clear269, %cond.false262 ], !dbg !13709
  %idxprom272 = zext i32 %cond271 to i64, !dbg !13709
  %arrayidx273 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom272, !dbg !13709
  %96 = load i8, i8* %arrayidx273, align 1, !dbg !13709
  %conv274 = zext i8 %96 to i32, !dbg !13709
  %cmp275 = icmp eq i32 %conv274, 3, !dbg !13709
  br i1 %cmp275, label %lor.lhs.false333, label %lor.lhs.false277, !dbg !13709

lor.lhs.false277:                                 ; preds = %cond.end270
  %97 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common278 = bitcast %union.tree_node* %97 to %struct.tree_common*, !dbg !13709
  %type279 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common278, i32 0, i32 2, !dbg !13709
  %98 = load %union.tree_node*, %union.tree_node** %type279, align 8, !dbg !13709
  %base280 = bitcast %union.tree_node* %98 to %struct.tree_base*, !dbg !13709
  %99 = bitcast %struct.tree_base* %base280 to i64*, !dbg !13709
  %bf.load281 = load i64, i64* %99, align 8, !dbg !13709
  %bf.clear282 = and i64 %bf.load281, 65535, !dbg !13709
  %bf.cast283 = trunc i64 %bf.clear282 to i32, !dbg !13709
  %cmp284 = icmp eq i32 %bf.cast283, 14, !dbg !13709
  br i1 %cmp284, label %cond.true286, label %cond.false290, !dbg !13709

cond.true286:                                     ; preds = %lor.lhs.false277
  %100 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common287 = bitcast %union.tree_node* %100 to %struct.tree_common*, !dbg !13709
  %type288 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common287, i32 0, i32 2, !dbg !13709
  %101 = load %union.tree_node*, %union.tree_node** %type288, align 8, !dbg !13709
  %call289 = call i32 @vector_type_mode(%union.tree_node* %101), !dbg !13709
  br label %cond.end298, !dbg !13709

cond.false290:                                    ; preds = %lor.lhs.false277
  %102 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common291 = bitcast %union.tree_node* %102 to %struct.tree_common*, !dbg !13709
  %type292 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common291, i32 0, i32 2, !dbg !13709
  %103 = load %union.tree_node*, %union.tree_node** %type292, align 8, !dbg !13709
  %type293 = bitcast %union.tree_node* %103 to %struct.tree_type*, !dbg !13709
  %mode294 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type293, i32 0, i32 6, !dbg !13709
  %bf.load295 = load i32, i32* %mode294, align 4, !dbg !13709
  %bf.lshr296 = lshr i32 %bf.load295, 16, !dbg !13709
  %bf.clear297 = and i32 %bf.lshr296, 255, !dbg !13709
  br label %cond.end298, !dbg !13709

cond.end298:                                      ; preds = %cond.false290, %cond.true286
  %cond299 = phi i32 [ %call289, %cond.true286 ], [ %bf.clear297, %cond.false290 ], !dbg !13709
  %idxprom300 = zext i32 %cond299 to i64, !dbg !13709
  %arrayidx301 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom300, !dbg !13709
  %104 = load i8, i8* %arrayidx301, align 1, !dbg !13709
  %conv302 = zext i8 %104 to i32, !dbg !13709
  %cmp303 = icmp eq i32 %conv302, 10, !dbg !13709
  br i1 %cmp303, label %lor.lhs.false333, label %lor.lhs.false305, !dbg !13709

lor.lhs.false305:                                 ; preds = %cond.end298
  %105 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common306 = bitcast %union.tree_node* %105 to %struct.tree_common*, !dbg !13709
  %type307 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common306, i32 0, i32 2, !dbg !13709
  %106 = load %union.tree_node*, %union.tree_node** %type307, align 8, !dbg !13709
  %base308 = bitcast %union.tree_node* %106 to %struct.tree_base*, !dbg !13709
  %107 = bitcast %struct.tree_base* %base308 to i64*, !dbg !13709
  %bf.load309 = load i64, i64* %107, align 8, !dbg !13709
  %bf.clear310 = and i64 %bf.load309, 65535, !dbg !13709
  %bf.cast311 = trunc i64 %bf.clear310 to i32, !dbg !13709
  %cmp312 = icmp eq i32 %bf.cast311, 14, !dbg !13709
  br i1 %cmp312, label %cond.true314, label %cond.false318, !dbg !13709

cond.true314:                                     ; preds = %lor.lhs.false305
  %108 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common315 = bitcast %union.tree_node* %108 to %struct.tree_common*, !dbg !13709
  %type316 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common315, i32 0, i32 2, !dbg !13709
  %109 = load %union.tree_node*, %union.tree_node** %type316, align 8, !dbg !13709
  %call317 = call i32 @vector_type_mode(%union.tree_node* %109), !dbg !13709
  br label %cond.end326, !dbg !13709

cond.false318:                                    ; preds = %lor.lhs.false305
  %110 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13709
  %common319 = bitcast %union.tree_node* %110 to %struct.tree_common*, !dbg !13709
  %type320 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common319, i32 0, i32 2, !dbg !13709
  %111 = load %union.tree_node*, %union.tree_node** %type320, align 8, !dbg !13709
  %type321 = bitcast %union.tree_node* %111 to %struct.tree_type*, !dbg !13709
  %mode322 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type321, i32 0, i32 6, !dbg !13709
  %bf.load323 = load i32, i32* %mode322, align 4, !dbg !13709
  %bf.lshr324 = lshr i32 %bf.load323, 16, !dbg !13709
  %bf.clear325 = and i32 %bf.lshr324, 255, !dbg !13709
  br label %cond.end326, !dbg !13709

cond.end326:                                      ; preds = %cond.false318, %cond.true314
  %cond327 = phi i32 [ %call317, %cond.true314 ], [ %bf.clear325, %cond.false318 ], !dbg !13709
  %idxprom328 = zext i32 %cond327 to i64, !dbg !13709
  %arrayidx329 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom328, !dbg !13709
  %112 = load i8, i8* %arrayidx329, align 1, !dbg !13709
  %conv330 = zext i8 %112 to i32, !dbg !13709
  %cmp331 = icmp eq i32 %conv330, 12, !dbg !13709
  br i1 %cmp331, label %lor.lhs.false333, label %if.then388, !dbg !13710

lor.lhs.false333:                                 ; preds = %cond.end326, %cond.end298, %cond.end270, %cond.end242
  %113 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13711
  %common334 = bitcast %union.tree_node* %113 to %struct.tree_common*, !dbg !13711
  %type335 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common334, i32 0, i32 2, !dbg !13711
  %114 = load %union.tree_node*, %union.tree_node** %type335, align 8, !dbg !13711
  %base336 = bitcast %union.tree_node* %114 to %struct.tree_base*, !dbg !13711
  %115 = bitcast %struct.tree_base* %base336 to i64*, !dbg !13711
  %bf.load337 = load i64, i64* %115, align 8, !dbg !13711
  %bf.clear338 = and i64 %bf.load337, 65535, !dbg !13711
  %bf.cast339 = trunc i64 %bf.clear338 to i32, !dbg !13711
  %cmp340 = icmp eq i32 %bf.cast339, 14, !dbg !13711
  br i1 %cmp340, label %cond.true342, label %cond.false346, !dbg !13711

cond.true342:                                     ; preds = %lor.lhs.false333
  %116 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13711
  %common343 = bitcast %union.tree_node* %116 to %struct.tree_common*, !dbg !13711
  %type344 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common343, i32 0, i32 2, !dbg !13711
  %117 = load %union.tree_node*, %union.tree_node** %type344, align 8, !dbg !13711
  %call345 = call i32 @vector_type_mode(%union.tree_node* %117), !dbg !13711
  br label %cond.end354, !dbg !13711

cond.false346:                                    ; preds = %lor.lhs.false333
  %118 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13711
  %common347 = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !13711
  %type348 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common347, i32 0, i32 2, !dbg !13711
  %119 = load %union.tree_node*, %union.tree_node** %type348, align 8, !dbg !13711
  %type349 = bitcast %union.tree_node* %119 to %struct.tree_type*, !dbg !13711
  %mode350 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type349, i32 0, i32 6, !dbg !13711
  %bf.load351 = load i32, i32* %mode350, align 4, !dbg !13711
  %bf.lshr352 = lshr i32 %bf.load351, 16, !dbg !13711
  %bf.clear353 = and i32 %bf.lshr352, 255, !dbg !13711
  br label %cond.end354, !dbg !13711

cond.end354:                                      ; preds = %cond.false346, %cond.true342
  %cond355 = phi i32 [ %call345, %cond.true342 ], [ %bf.clear353, %cond.false346 ], !dbg !13711
  %idxprom356 = zext i32 %cond355 to i64, !dbg !13711
  %arrayidx357 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom356, !dbg !13711
  %120 = load i8, i8* %arrayidx357, align 1, !dbg !13711
  %conv358 = zext i8 %120 to i16, !dbg !13711
  %conv359 = zext i16 %conv358 to i32, !dbg !13711
  %121 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13712
  %common360 = bitcast %union.tree_node* %121 to %struct.tree_common*, !dbg !13712
  %type361 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common360, i32 0, i32 2, !dbg !13712
  %122 = load %union.tree_node*, %union.tree_node** %type361, align 8, !dbg !13712
  %base362 = bitcast %union.tree_node* %122 to %struct.tree_base*, !dbg !13712
  %123 = bitcast %struct.tree_base* %base362 to i64*, !dbg !13712
  %bf.load363 = load i64, i64* %123, align 8, !dbg !13712
  %bf.clear364 = and i64 %bf.load363, 65535, !dbg !13712
  %bf.cast365 = trunc i64 %bf.clear364 to i32, !dbg !13712
  %cmp366 = icmp eq i32 %bf.cast365, 14, !dbg !13712
  br i1 %cmp366, label %cond.true368, label %cond.false372, !dbg !13712

cond.true368:                                     ; preds = %cond.end354
  %124 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13712
  %common369 = bitcast %union.tree_node* %124 to %struct.tree_common*, !dbg !13712
  %type370 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common369, i32 0, i32 2, !dbg !13712
  %125 = load %union.tree_node*, %union.tree_node** %type370, align 8, !dbg !13712
  %call371 = call i32 @vector_type_mode(%union.tree_node* %125), !dbg !13712
  br label %cond.end380, !dbg !13712

cond.false372:                                    ; preds = %cond.end354
  %126 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13712
  %common373 = bitcast %union.tree_node* %126 to %struct.tree_common*, !dbg !13712
  %type374 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common373, i32 0, i32 2, !dbg !13712
  %127 = load %union.tree_node*, %union.tree_node** %type374, align 8, !dbg !13712
  %type375 = bitcast %union.tree_node* %127 to %struct.tree_type*, !dbg !13712
  %mode376 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type375, i32 0, i32 6, !dbg !13712
  %bf.load377 = load i32, i32* %mode376, align 4, !dbg !13712
  %bf.lshr378 = lshr i32 %bf.load377, 16, !dbg !13712
  %bf.clear379 = and i32 %bf.lshr378, 255, !dbg !13712
  br label %cond.end380, !dbg !13712

cond.end380:                                      ; preds = %cond.false372, %cond.true368
  %cond381 = phi i32 [ %call371, %cond.true368 ], [ %bf.clear379, %cond.false372 ], !dbg !13712
  %idxprom382 = zext i32 %cond381 to i64, !dbg !13712
  %arrayidx383 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom382, !dbg !13712
  %128 = load i8, i8* %arrayidx383, align 1, !dbg !13712
  %conv384 = zext i8 %128 to i16, !dbg !13712
  %conv385 = zext i16 %conv384 to i32, !dbg !13712
  %cmp386 = icmp sgt i32 %conv359, %conv385, !dbg !13713
  br i1 %cmp386, label %if.then388, label %if.end389, !dbg !13714

if.then388:                                       ; preds = %cond.end380, %cond.end326, %while.body214
  br label %while.end390, !dbg !13715

if.end389:                                        ; preds = %cond.end380
  %129 = load %union.tree_node*, %union.tree_node** %inner215, align 8, !dbg !13716
  store %union.tree_node* %129, %union.tree_node** %op1, align 8, !dbg !13717
  br label %while.cond192, !dbg !13695, !llvm.loop !13718

while.end390:                                     ; preds = %if.then388, %lor.end213
  %130 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13720
  %131 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !13721
  %132 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !13722
  %call391 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %130, %union.tree_node* %131, %union.tree_node** %132), !dbg !13723
  store %union.tree_node* %call391, %union.tree_node** %op0, align 8, !dbg !13724
  %133 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13725
  %tobool = icmp ne %union.tree_node* %133, null, !dbg !13725
  br i1 %tobool, label %if.end393, label %if.then392, !dbg !13727

if.then392:                                       ; preds = %while.end390
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13728
  br label %return, !dbg !13728

if.end393:                                        ; preds = %while.end390
  %134 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13729
  %135 = load %union.tree_node*, %union.tree_node** %endtype.addr, align 8, !dbg !13730
  %136 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !13731
  %tobool394 = icmp ne %union.tree_node** %136, null, !dbg !13731
  br i1 %tobool394, label %cond.true395, label %cond.false396, !dbg !13731

cond.true395:                                     ; preds = %if.end393
  %137 = load %union.tree_node**, %union.tree_node*** %cache.addr, align 8, !dbg !13732
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %137, i64 2, !dbg !13733
  br label %cond.end397, !dbg !13731

cond.false396:                                    ; preds = %if.end393
  br label %cond.end397, !dbg !13731

cond.end397:                                      ; preds = %cond.false396, %cond.true395
  %cond398 = phi %union.tree_node** [ %add.ptr, %cond.true395 ], [ null, %cond.false396 ], !dbg !13731
  %call399 = call %union.tree_node* @initializer_constant_valid_p_1(%union.tree_node* %134, %union.tree_node* %135, %union.tree_node** %cond398), !dbg !13734
  store %union.tree_node* %call399, %union.tree_node** %op1, align 8, !dbg !13735
  %138 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13736
  %tobool400 = icmp ne %union.tree_node* %138, null, !dbg !13736
  br i1 %tobool400, label %if.then401, label %if.end448, !dbg !13738

if.then401:                                       ; preds = %cond.end397
  %139 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13739
  %140 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13742
  %cmp402 = icmp eq %union.tree_node* %139, %140, !dbg !13743
  br i1 %cmp402, label %land.lhs.true, label %if.end414, !dbg !13744

land.lhs.true:                                    ; preds = %if.then401
  %141 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13745
  %142 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !13746
  %cmp404 = icmp eq %union.tree_node* %141, %142, !dbg !13747
  br i1 %cmp404, label %if.then413, label %lor.lhs.false406, !dbg !13748

lor.lhs.false406:                                 ; preds = %land.lhs.true
  %143 = load %union.tree_node*, %union.tree_node** %value.addr, align 8, !dbg !13749
  %base407 = bitcast %union.tree_node* %143 to %struct.tree_base*, !dbg !13749
  %144 = bitcast %struct.tree_base* %base407 to i64*, !dbg !13749
  %bf.load408 = load i64, i64* %144, align 8, !dbg !13749
  %bf.clear409 = and i64 %bf.load408, 65535, !dbg !13749
  %bf.cast410 = trunc i64 %bf.clear409 to i32, !dbg !13749
  %cmp411 = icmp eq i32 %bf.cast410, 64, !dbg !13750
  br i1 %cmp411, label %if.then413, label %if.end414, !dbg !13751

if.then413:                                       ; preds = %lor.lhs.false406, %land.lhs.true
  %145 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !13752
  store %union.tree_node* %145, %union.tree_node** %retval, align 8, !dbg !13753
  br label %return, !dbg !13753

if.end414:                                        ; preds = %lor.lhs.false406, %if.then401
  %146 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13754
  %base415 = bitcast %union.tree_node* %146 to %struct.tree_base*, !dbg !13754
  %147 = bitcast %struct.tree_base* %base415 to i64*, !dbg !13754
  %bf.load416 = load i64, i64* %147, align 8, !dbg !13754
  %bf.clear417 = and i64 %bf.load416, 65535, !dbg !13754
  %bf.cast418 = trunc i64 %bf.clear417 to i32, !dbg !13754
  %cmp419 = icmp eq i32 %bf.cast418, 30, !dbg !13756
  br i1 %cmp419, label %land.lhs.true421, label %if.end429, !dbg !13757

land.lhs.true421:                                 ; preds = %if.end414
  %148 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13758
  %base422 = bitcast %union.tree_node* %148 to %struct.tree_base*, !dbg !13758
  %149 = bitcast %struct.tree_base* %base422 to i64*, !dbg !13758
  %bf.load423 = load i64, i64* %149, align 8, !dbg !13758
  %bf.clear424 = and i64 %bf.load423, 65535, !dbg !13758
  %bf.cast425 = trunc i64 %bf.clear424 to i32, !dbg !13758
  %cmp426 = icmp eq i32 %bf.cast425, 30, !dbg !13759
  br i1 %cmp426, label %if.then428, label %if.end429, !dbg !13760

if.then428:                                       ; preds = %land.lhs.true421
  %150 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !13761
  store %union.tree_node* %150, %union.tree_node** %retval, align 8, !dbg !13762
  br label %return, !dbg !13762

if.end429:                                        ; preds = %land.lhs.true421, %if.end414
  %151 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13763
  %base430 = bitcast %union.tree_node* %151 to %struct.tree_base*, !dbg !13763
  %152 = bitcast %struct.tree_base* %base430 to i64*, !dbg !13763
  %bf.load431 = load i64, i64* %152, align 8, !dbg !13763
  %bf.clear432 = and i64 %bf.load431, 65535, !dbg !13763
  %bf.cast433 = trunc i64 %bf.clear432 to i32, !dbg !13763
  %cmp434 = icmp eq i32 %bf.cast433, 28, !dbg !13765
  br i1 %cmp434, label %land.lhs.true436, label %if.end447, !dbg !13766

land.lhs.true436:                                 ; preds = %if.end429
  %153 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13767
  %base437 = bitcast %union.tree_node* %153 to %struct.tree_base*, !dbg !13767
  %154 = bitcast %struct.tree_base* %base437 to i64*, !dbg !13767
  %bf.load438 = load i64, i64* %154, align 8, !dbg !13767
  %bf.clear439 = and i64 %bf.load438, 65535, !dbg !13767
  %bf.cast440 = trunc i64 %bf.clear439 to i32, !dbg !13767
  %cmp441 = icmp eq i32 %bf.cast440, 28, !dbg !13768
  br i1 %cmp441, label %land.lhs.true443, label %if.end447, !dbg !13769

land.lhs.true443:                                 ; preds = %land.lhs.true436
  %155 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !13770
  %156 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !13771
  %call444 = call i32 @operand_equal_p(%union.tree_node* %155, %union.tree_node* %156, i32 1), !dbg !13772
  %tobool445 = icmp ne i32 %call444, 0, !dbg !13772
  br i1 %tobool445, label %if.then446, label %if.end447, !dbg !13773

if.then446:                                       ; preds = %land.lhs.true443
  %157 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 16), align 16, !dbg !13774
  store %union.tree_node* %157, %union.tree_node** %retval, align 8, !dbg !13775
  br label %return, !dbg !13775

if.end447:                                        ; preds = %land.lhs.true443, %land.lhs.true436, %if.end429
  br label %if.end448, !dbg !13776

if.end448:                                        ; preds = %if.end447, %cond.end397
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !13777
  br label %return, !dbg !13777

return:                                           ; preds = %if.end448, %if.then446, %if.then428, %if.then413, %if.then392, %if.then
  %158 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !13778
  ret %union.tree_node* %158, !dbg !13778
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

declare dso_local %struct.rtx_def* @expand_expr_real(%union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_constructor_elt_base_iterate(%struct.VEC_constructor_elt_base* %vec_, i32 %ix_, %struct.constructor_elt_d** %ptr) #0 !dbg !13779 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_constructor_elt_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.constructor_elt_d**, align 8
  store %struct.VEC_constructor_elt_base* %vec_, %struct.VEC_constructor_elt_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_base** %vec_.addr, metadata !13783, metadata !DIExpression()), !dbg !13784
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !13785, metadata !DIExpression()), !dbg !13784
  store %struct.constructor_elt_d** %ptr, %struct.constructor_elt_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d*** %ptr.addr, metadata !13786, metadata !DIExpression()), !dbg !13784
  %0 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !13787
  %tobool = icmp ne %struct.VEC_constructor_elt_base* %0, null, !dbg !13787
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !13787

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !13787
  %2 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !13787
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %2, i32 0, i32 0, !dbg !13787
  %3 = load i32, i32* %num, align 8, !dbg !13787
  %cmp = icmp ult i32 %1, %3, !dbg !13787
  br i1 %cmp, label %if.then, label %if.else, !dbg !13784

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_constructor_elt_base*, %struct.VEC_constructor_elt_base** %vec_.addr, align 8, !dbg !13789
  %vec = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %4, i32 0, i32 2, !dbg !13789
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !13789
  %idxprom = zext i32 %5 to i64, !dbg !13789
  %arrayidx = getelementptr inbounds [1 x %struct.constructor_elt_d], [1 x %struct.constructor_elt_d]* %vec, i64 0, i64 %idxprom, !dbg !13789
  %6 = load %struct.constructor_elt_d**, %struct.constructor_elt_d*** %ptr.addr, align 8, !dbg !13789
  store %struct.constructor_elt_d* %arrayidx, %struct.constructor_elt_d** %6, align 8, !dbg !13789
  store i32 1, i32* %retval, align 4, !dbg !13789
  br label %return, !dbg !13789

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.constructor_elt_d**, %struct.constructor_elt_d*** %ptr.addr, align 8, !dbg !13791
  store %struct.constructor_elt_d* null, %struct.constructor_elt_d** %7, align 8, !dbg !13791
  store i32 0, i32* %retval, align 4, !dbg !13791
  br label %return, !dbg !13791

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !13784
  ret i32 %8, !dbg !13784
}

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @output_constructor_array_range(%struct.oc_local_state* %local) #0 !dbg !13793 {
entry:
  %local.addr = alloca %struct.oc_local_state*, align 8
  %fieldsize = alloca i64, align 8
  %lo_index = alloca i64, align 8
  %hi_index = alloca i64, align 8
  %index8 = alloca i64, align 8
  %align2 = alloca i32, align 4
  store %struct.oc_local_state* %local, %struct.oc_local_state** %local.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.oc_local_state** %local.addr, metadata !13797, metadata !DIExpression()), !dbg !13798
  call void @llvm.dbg.declare(metadata i64* %fieldsize, metadata !13799, metadata !DIExpression()), !dbg !13800
  %0 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13801
  %type = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %0, i32 0, i32 3, !dbg !13801
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13801
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !13801
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13801
  %2 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !13801
  %call = call i64 @int_size_in_bytes(%union.tree_node* %2), !dbg !13802
  store i64 %call, i64* %fieldsize, align 8, !dbg !13800
  call void @llvm.dbg.declare(metadata i64* %lo_index, metadata !13803, metadata !DIExpression()), !dbg !13804
  %3 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13805
  %index = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %3, i32 0, i32 11, !dbg !13805
  %4 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !13805
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !13805
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !13805
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !13805
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !13805
  %call2 = call i64 @tree_low_cst(%union.tree_node* %5, i32 0), !dbg !13806
  store i64 %call2, i64* %lo_index, align 8, !dbg !13804
  call void @llvm.dbg.declare(metadata i64* %hi_index, metadata !13807, metadata !DIExpression()), !dbg !13808
  %6 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13809
  %index3 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %6, i32 0, i32 11, !dbg !13809
  %7 = load %union.tree_node*, %union.tree_node** %index3, align 8, !dbg !13809
  %exp4 = bitcast %union.tree_node* %7 to %struct.tree_exp*, !dbg !13809
  %operands5 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp4, i32 0, i32 3, !dbg !13809
  %arrayidx6 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands5, i64 0, i64 1, !dbg !13809
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !13809
  %call7 = call i64 @tree_low_cst(%union.tree_node* %8, i32 0), !dbg !13810
  store i64 %call7, i64* %hi_index, align 8, !dbg !13808
  call void @llvm.dbg.declare(metadata i64* %index8, metadata !13811, metadata !DIExpression()), !dbg !13812
  call void @llvm.dbg.declare(metadata i32* %align2, metadata !13813, metadata !DIExpression()), !dbg !13814
  %9 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13815
  %align = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %9, i32 0, i32 2, !dbg !13816
  %10 = load i32, i32* %align, align 8, !dbg !13816
  %11 = load i64, i64* %fieldsize, align 8, !dbg !13817
  %mul = mul i64 %11, 8, !dbg !13818
  %conv = trunc i64 %mul to i32, !dbg !13817
  %call9 = call i32 @min_align(i32 %10, i32 %conv), !dbg !13819
  store i32 %call9, i32* %align2, align 4, !dbg !13814
  %12 = load i64, i64* %lo_index, align 8, !dbg !13820
  store i64 %12, i64* %index8, align 8, !dbg !13822
  br label %for.cond, !dbg !13823

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i64, i64* %index8, align 8, !dbg !13824
  %14 = load i64, i64* %hi_index, align 8, !dbg !13826
  %cmp = icmp sle i64 %13, %14, !dbg !13827
  br i1 %cmp, label %for.body, label %for.end, !dbg !13828

for.body:                                         ; preds = %for.cond
  %15 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13829
  %val = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %15, i32 0, i32 10, !dbg !13832
  %16 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !13832
  %cmp11 = icmp eq %union.tree_node* %16, null, !dbg !13833
  br i1 %cmp11, label %if.then, label %if.else, !dbg !13834

if.then:                                          ; preds = %for.body
  %17 = load i64, i64* %fieldsize, align 8, !dbg !13835
  call void @assemble_zeros(i64 %17), !dbg !13836
  br label %if.end, !dbg !13836

if.else:                                          ; preds = %for.body
  %18 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13837
  %val13 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %18, i32 0, i32 10, !dbg !13838
  %19 = load %union.tree_node*, %union.tree_node** %val13, align 8, !dbg !13838
  %20 = load i64, i64* %fieldsize, align 8, !dbg !13839
  %21 = load i32, i32* %align2, align 4, !dbg !13840
  call void @output_constant(%union.tree_node* %19, i64 %20, i32 %21), !dbg !13841
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %22 = load i64, i64* %fieldsize, align 8, !dbg !13842
  %23 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13843
  %total_bytes = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %23, i32 0, i32 6, !dbg !13844
  %24 = load i64, i64* %total_bytes, align 8, !dbg !13845
  %add = add i64 %24, %22, !dbg !13845
  store i64 %add, i64* %total_bytes, align 8, !dbg !13845
  br label %for.inc, !dbg !13846

for.inc:                                          ; preds = %if.end
  %25 = load i64, i64* %index8, align 8, !dbg !13847
  %inc = add nsw i64 %25, 1, !dbg !13847
  store i64 %inc, i64* %index8, align 8, !dbg !13847
  br label %for.cond, !dbg !13848, !llvm.loop !13849

for.end:                                          ; preds = %for.cond
  ret void, !dbg !13851
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_constructor_regular_field(%struct.oc_local_state* %local) #0 !dbg !13852 {
entry:
  %local.addr = alloca %struct.oc_local_state*, align 8
  %fieldsize = alloca i64, align 8
  %fieldpos = alloca i64, align 8
  %align2 = alloca i32, align 4
  store %struct.oc_local_state* %local, %struct.oc_local_state** %local.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.oc_local_state** %local.addr, metadata !13853, metadata !DIExpression()), !dbg !13854
  call void @llvm.dbg.declare(metadata i64* %fieldsize, metadata !13855, metadata !DIExpression()), !dbg !13856
  call void @llvm.dbg.declare(metadata i64* %fieldpos, metadata !13857, metadata !DIExpression()), !dbg !13858
  call void @llvm.dbg.declare(metadata i32* %align2, metadata !13859, metadata !DIExpression()), !dbg !13860
  %0 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13861
  %index = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %0, i32 0, i32 11, !dbg !13863
  %1 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !13863
  %cmp = icmp ne %union.tree_node* %1, null, !dbg !13864
  br i1 %cmp, label %if.then, label %if.else, !dbg !13865

if.then:                                          ; preds = %entry
  %2 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13866
  %val = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %2, i32 0, i32 10, !dbg !13866
  %3 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !13866
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !13866
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !13866
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !13866
  %type1 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !13866
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 3, !dbg !13866
  %5 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !13866
  %call = call i64 @tree_low_cst(%union.tree_node* %5, i32 1), !dbg !13867
  %6 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13868
  %index2 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %6, i32 0, i32 11, !dbg !13869
  %7 = load %union.tree_node*, %union.tree_node** %index2, align 8, !dbg !13869
  %call3 = call i64 @tree_low_cst(%union.tree_node* %7, i32 0), !dbg !13870
  %8 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13871
  %min_index = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %8, i32 0, i32 5, !dbg !13872
  %9 = load %union.tree_node*, %union.tree_node** %min_index, align 8, !dbg !13872
  %call4 = call i64 @tree_low_cst(%union.tree_node* %9, i32 0), !dbg !13873
  %sub = sub nsw i64 %call3, %call4, !dbg !13874
  %mul = mul nsw i64 %call, %sub, !dbg !13875
  store i64 %mul, i64* %fieldpos, align 8, !dbg !13876
  br label %if.end10, !dbg !13877

if.else:                                          ; preds = %entry
  %10 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13878
  %field = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %10, i32 0, i32 4, !dbg !13880
  %11 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !13880
  %cmp5 = icmp ne %union.tree_node* %11, null, !dbg !13881
  br i1 %cmp5, label %if.then6, label %if.else9, !dbg !13882

if.then6:                                         ; preds = %if.else
  %12 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13883
  %field7 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %12, i32 0, i32 4, !dbg !13884
  %13 = load %union.tree_node*, %union.tree_node** %field7, align 8, !dbg !13884
  %call8 = call i64 @int_byte_position(%union.tree_node* %13), !dbg !13885
  store i64 %call8, i64* %fieldpos, align 8, !dbg !13886
  br label %if.end, !dbg !13887

if.else9:                                         ; preds = %if.else
  store i64 0, i64* %fieldpos, align 8, !dbg !13888
  br label %if.end

if.end:                                           ; preds = %if.else9, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %14 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13889
  %byte_buffer_in_use = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %14, i32 0, i32 7, !dbg !13891
  %15 = load i8, i8* %byte_buffer_in_use, align 8, !dbg !13891
  %tobool = icmp ne i8 %15, 0, !dbg !13889
  br i1 %tobool, label %if.then11, label %if.end15, !dbg !13892

if.then11:                                        ; preds = %if.end10
  %16 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13893
  %byte = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %16, i32 0, i32 8, !dbg !13893
  %17 = load i32, i32* %byte, align 4, !dbg !13893
  %conv = sext i32 %17 to i64, !dbg !13893
  %call12 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv), !dbg !13893
  %call13 = call zeroext i8 @assemble_integer(%struct.rtx_def* %call12, i32 1, i32 8, i32 1), !dbg !13895
  %18 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13896
  %total_bytes = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %18, i32 0, i32 6, !dbg !13897
  %19 = load i64, i64* %total_bytes, align 8, !dbg !13898
  %inc = add nsw i64 %19, 1, !dbg !13898
  store i64 %inc, i64* %total_bytes, align 8, !dbg !13898
  %20 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13899
  %byte_buffer_in_use14 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %20, i32 0, i32 7, !dbg !13900
  store i8 0, i8* %byte_buffer_in_use14, align 8, !dbg !13901
  br label %if.end15, !dbg !13902

if.end15:                                         ; preds = %if.then11, %if.end10
  %21 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13903
  %field16 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %21, i32 0, i32 4, !dbg !13905
  %22 = load %union.tree_node*, %union.tree_node** %field16, align 8, !dbg !13905
  %cmp17 = icmp ne %union.tree_node* %22, null, !dbg !13906
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false, !dbg !13907

lor.lhs.false:                                    ; preds = %if.end15
  %23 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13908
  %index19 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %23, i32 0, i32 11, !dbg !13909
  %24 = load %union.tree_node*, %union.tree_node** %index19, align 8, !dbg !13909
  %cmp20 = icmp ne %union.tree_node* %24, null, !dbg !13910
  br i1 %cmp20, label %land.lhs.true, label %if.end32, !dbg !13911

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end15
  %25 = load i64, i64* %fieldpos, align 8, !dbg !13912
  %26 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13913
  %total_bytes22 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %26, i32 0, i32 6, !dbg !13914
  %27 = load i64, i64* %total_bytes22, align 8, !dbg !13914
  %cmp23 = icmp ne i64 %25, %27, !dbg !13915
  br i1 %cmp23, label %if.then25, label %if.end32, !dbg !13916

if.then25:                                        ; preds = %land.lhs.true
  %28 = load i64, i64* %fieldpos, align 8, !dbg !13917
  %29 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13917
  %total_bytes26 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %29, i32 0, i32 6, !dbg !13917
  %30 = load i64, i64* %total_bytes26, align 8, !dbg !13917
  %cmp27 = icmp sge i64 %28, %30, !dbg !13917
  br i1 %cmp27, label %cond.false, label %cond.true, !dbg !13917

cond.true:                                        ; preds = %if.then25
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 4892, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !13917
  br label %cond.end, !dbg !13917

cond.false:                                       ; preds = %if.then25
  br label %cond.end, !dbg !13917

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13917
  %31 = load i64, i64* %fieldpos, align 8, !dbg !13919
  %32 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13920
  %total_bytes29 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %32, i32 0, i32 6, !dbg !13921
  %33 = load i64, i64* %total_bytes29, align 8, !dbg !13921
  %sub30 = sub nsw i64 %31, %33, !dbg !13922
  call void @assemble_zeros(i64 %sub30), !dbg !13923
  %34 = load i64, i64* %fieldpos, align 8, !dbg !13924
  %35 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13925
  %total_bytes31 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %35, i32 0, i32 6, !dbg !13926
  store i64 %34, i64* %total_bytes31, align 8, !dbg !13927
  br label %if.end32, !dbg !13928

if.end32:                                         ; preds = %cond.end, %land.lhs.true, %lor.lhs.false
  %36 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13929
  %align = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %36, i32 0, i32 2, !dbg !13930
  %37 = load i32, i32* %align, align 8, !dbg !13930
  %38 = load i64, i64* %fieldpos, align 8, !dbg !13931
  %mul33 = mul nsw i64 8, %38, !dbg !13932
  %conv34 = trunc i64 %mul33 to i32, !dbg !13933
  %call35 = call i32 @min_align(i32 %37, i32 %conv34), !dbg !13934
  store i32 %call35, i32* %align2, align 4, !dbg !13935
  %39 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13936
  %field36 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %39, i32 0, i32 4, !dbg !13938
  %40 = load %union.tree_node*, %union.tree_node** %field36, align 8, !dbg !13938
  %tobool37 = icmp ne %union.tree_node* %40, null, !dbg !13936
  br i1 %tobool37, label %if.then38, label %if.else88, !dbg !13939

if.then38:                                        ; preds = %if.end32
  store i64 0, i64* %fieldsize, align 8, !dbg !13940
  %41 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13942
  %field39 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %41, i32 0, i32 4, !dbg !13942
  %42 = load %union.tree_node*, %union.tree_node** %field39, align 8, !dbg !13942
  %common40 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !13942
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !13942
  %43 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !13942
  %base = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !13942
  %44 = bitcast %struct.tree_base* %base to i64*, !dbg !13942
  %bf.load = load i64, i64* %44, align 8, !dbg !13942
  %bf.clear = and i64 %bf.load, 65535, !dbg !13942
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !13942
  %cmp42 = icmp eq i32 %bf.cast, 15, !dbg !13944
  br i1 %cmp42, label %land.lhs.true44, label %if.else70, !dbg !13945

land.lhs.true44:                                  ; preds = %if.then38
  %45 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13946
  %field45 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %45, i32 0, i32 4, !dbg !13946
  %46 = load %union.tree_node*, %union.tree_node** %field45, align 8, !dbg !13946
  %common46 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !13946
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !13946
  %47 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !13946
  %type48 = bitcast %union.tree_node* %47 to %struct.tree_type*, !dbg !13946
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type48, i32 0, i32 1, !dbg !13946
  %48 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !13946
  %tobool49 = icmp ne %union.tree_node* %48, null, !dbg !13946
  br i1 %tobool49, label %land.lhs.true50, label %if.else70, !dbg !13947

land.lhs.true50:                                  ; preds = %land.lhs.true44
  %49 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13948
  %field51 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %49, i32 0, i32 4, !dbg !13948
  %50 = load %union.tree_node*, %union.tree_node** %field51, align 8, !dbg !13948
  %common52 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !13948
  %type53 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common52, i32 0, i32 2, !dbg !13948
  %51 = load %union.tree_node*, %union.tree_node** %type53, align 8, !dbg !13948
  %type54 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !13948
  %values55 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type54, i32 0, i32 1, !dbg !13948
  %52 = load %union.tree_node*, %union.tree_node** %values55, align 8, !dbg !13948
  %type56 = bitcast %union.tree_node* %52 to %struct.tree_type*, !dbg !13948
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type56, i32 0, i32 14, !dbg !13948
  %53 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !13948
  %tobool57 = icmp ne %union.tree_node* %53, null, !dbg !13948
  br i1 %tobool57, label %if.else70, label %if.then58, !dbg !13949

if.then58:                                        ; preds = %land.lhs.true50
  %54 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13950
  %val59 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %54, i32 0, i32 10, !dbg !13952
  %55 = load %union.tree_node*, %union.tree_node** %val59, align 8, !dbg !13952
  %call60 = call i64 @array_size_for_constructor(%union.tree_node* %55), !dbg !13953
  store i64 %call60, i64* %fieldsize, align 8, !dbg !13954
  %56 = load i64, i64* %fieldsize, align 8, !dbg !13955
  %tobool61 = icmp ne i64 %56, 0, !dbg !13955
  br i1 %tobool61, label %lor.lhs.false62, label %cond.false67, !dbg !13955

lor.lhs.false62:                                  ; preds = %if.then58
  %57 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13955
  %field63 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %57, i32 0, i32 4, !dbg !13955
  %58 = load %union.tree_node*, %union.tree_node** %field63, align 8, !dbg !13955
  %common64 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !13955
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common64, i32 0, i32 1, !dbg !13955
  %59 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !13955
  %tobool65 = icmp ne %union.tree_node* %59, null, !dbg !13955
  br i1 %tobool65, label %cond.true66, label %cond.false67, !dbg !13955

cond.true66:                                      ; preds = %lor.lhs.false62
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 4917, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !13955
  br label %cond.end68, !dbg !13955

cond.false67:                                     ; preds = %lor.lhs.false62, %if.then58
  br label %cond.end68, !dbg !13955

cond.end68:                                       ; preds = %cond.false67, %cond.true66
  %cond69 = phi i32 [ 0, %cond.true66 ], [ 0, %cond.false67 ], !dbg !13955
  br label %if.end87, !dbg !13956

if.else70:                                        ; preds = %land.lhs.true50, %land.lhs.true44, %if.then38
  %60 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13957
  %field71 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %60, i32 0, i32 4, !dbg !13957
  %61 = load %union.tree_node*, %union.tree_node** %field71, align 8, !dbg !13957
  %decl_common = bitcast %union.tree_node* %61 to %struct.tree_decl_common*, !dbg !13957
  %size_unit72 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !13957
  %62 = load %union.tree_node*, %union.tree_node** %size_unit72, align 8, !dbg !13957
  %tobool73 = icmp ne %union.tree_node* %62, null, !dbg !13957
  br i1 %tobool73, label %if.then74, label %if.end86, !dbg !13959

if.then74:                                        ; preds = %if.else70
  %63 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13960
  %field75 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %63, i32 0, i32 4, !dbg !13960
  %64 = load %union.tree_node*, %union.tree_node** %field75, align 8, !dbg !13960
  %decl_common76 = bitcast %union.tree_node* %64 to %struct.tree_decl_common*, !dbg !13960
  %size_unit77 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common76, i32 0, i32 4, !dbg !13960
  %65 = load %union.tree_node*, %union.tree_node** %size_unit77, align 8, !dbg !13960
  %call78 = call i32 @host_integerp(%union.tree_node* %65, i32 1), !dbg !13963
  %tobool79 = icmp ne i32 %call78, 0, !dbg !13963
  br i1 %tobool79, label %if.then80, label %if.end85, !dbg !13964

if.then80:                                        ; preds = %if.then74
  %66 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13965
  %field81 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %66, i32 0, i32 4, !dbg !13965
  %67 = load %union.tree_node*, %union.tree_node** %field81, align 8, !dbg !13965
  %decl_common82 = bitcast %union.tree_node* %67 to %struct.tree_decl_common*, !dbg !13965
  %size_unit83 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common82, i32 0, i32 4, !dbg !13965
  %68 = load %union.tree_node*, %union.tree_node** %size_unit83, align 8, !dbg !13965
  %call84 = call i64 @tree_low_cst(%union.tree_node* %68, i32 1), !dbg !13966
  store i64 %call84, i64* %fieldsize, align 8, !dbg !13967
  br label %if.end85, !dbg !13968

if.end85:                                         ; preds = %if.then80, %if.then74
  br label %if.end86, !dbg !13969

if.end86:                                         ; preds = %if.end85, %if.else70
  br label %if.end87

if.end87:                                         ; preds = %if.end86, %cond.end68
  br label %if.end93, !dbg !13970

if.else88:                                        ; preds = %if.end32
  %69 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13971
  %type89 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %69, i32 0, i32 3, !dbg !13971
  %70 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !13971
  %common90 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !13971
  %type91 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common90, i32 0, i32 2, !dbg !13971
  %71 = load %union.tree_node*, %union.tree_node** %type91, align 8, !dbg !13971
  %call92 = call i64 @int_size_in_bytes(%union.tree_node* %71), !dbg !13972
  store i64 %call92, i64* %fieldsize, align 8, !dbg !13973
  br label %if.end93

if.end93:                                         ; preds = %if.else88, %if.end87
  %72 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13974
  %val94 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %72, i32 0, i32 10, !dbg !13976
  %73 = load %union.tree_node*, %union.tree_node** %val94, align 8, !dbg !13976
  %cmp95 = icmp eq %union.tree_node* %73, null, !dbg !13977
  br i1 %cmp95, label %if.then97, label %if.else98, !dbg !13978

if.then97:                                        ; preds = %if.end93
  %74 = load i64, i64* %fieldsize, align 8, !dbg !13979
  call void @assemble_zeros(i64 %74), !dbg !13980
  br label %if.end100, !dbg !13980

if.else98:                                        ; preds = %if.end93
  %75 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13981
  %val99 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %75, i32 0, i32 10, !dbg !13982
  %76 = load %union.tree_node*, %union.tree_node** %val99, align 8, !dbg !13982
  %77 = load i64, i64* %fieldsize, align 8, !dbg !13983
  %78 = load i32, i32* %align2, align 4, !dbg !13984
  call void @output_constant(%union.tree_node* %76, i64 %77, i32 %78), !dbg !13985
  br label %if.end100

if.end100:                                        ; preds = %if.else98, %if.then97
  %79 = load i64, i64* %fieldsize, align 8, !dbg !13986
  %80 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !13987
  %total_bytes101 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %80, i32 0, i32 6, !dbg !13988
  %81 = load i64, i64* %total_bytes101, align 8, !dbg !13989
  %add = add i64 %81, %79, !dbg !13989
  store i64 %add, i64* %total_bytes101, align 8, !dbg !13989
  ret void, !dbg !13990
}

; Function Attrs: noinline nounwind uwtable
define internal void @output_constructor_bitfield(%struct.oc_local_state* %local, %struct.oc_outer_state* %outer) #0 !dbg !13991 {
entry:
  %local.addr = alloca %struct.oc_local_state*, align 8
  %outer.addr = alloca %struct.oc_outer_state*, align 8
  %ebitsize = alloca i64, align 8
  %relative_index = alloca i64, align 8
  %constructor_relative_ebitpos = alloca i64, align 8
  %byte_relative_ebitpos = alloca i64, align 8
  %next_offset = alloca i64, align 8
  %end_offset = alloca i64, align 8
  %output_state = alloca %struct.oc_outer_state, align 4
  %this_time = alloca i32, align 4
  %shift = alloca i32, align 4
  %value = alloca i64, align 8
  %next_byte = alloca i64, align 8
  %next_bit = alloca i64, align 8
  store %struct.oc_local_state* %local, %struct.oc_local_state** %local.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.oc_local_state** %local.addr, metadata !13994, metadata !DIExpression()), !dbg !13995
  store %struct.oc_outer_state* %outer, %struct.oc_outer_state** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.oc_outer_state** %outer.addr, metadata !13996, metadata !DIExpression()), !dbg !13997
  call void @llvm.dbg.declare(metadata i64* %ebitsize, metadata !13998, metadata !DIExpression()), !dbg !13999
  %0 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14000
  %field = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %0, i32 0, i32 4, !dbg !14001
  %1 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !14001
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !14000
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14000

cond.true:                                        ; preds = %entry
  %2 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14002
  %field1 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %2, i32 0, i32 4, !dbg !14002
  %3 = load %union.tree_node*, %union.tree_node** %field1, align 8, !dbg !14002
  %decl_common = bitcast %union.tree_node* %3 to %struct.tree_decl_common*, !dbg !14002
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !14002
  %4 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !14002
  %call = call i64 @tree_low_cst(%union.tree_node* %4, i32 1), !dbg !14003
  br label %cond.end, !dbg !14000

cond.false:                                       ; preds = %entry
  %5 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14004
  %type = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %5, i32 0, i32 3, !dbg !14004
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14004
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !14004
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14004
  %7 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !14004
  %type3 = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !14004
  %size4 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 2, !dbg !14004
  %8 = load %union.tree_node*, %union.tree_node** %size4, align 8, !dbg !14004
  %call5 = call i64 @tree_low_cst(%union.tree_node* %8, i32 1), !dbg !14005
  br label %cond.end, !dbg !14000

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ %call5, %cond.false ], !dbg !14000
  store i64 %cond, i64* %ebitsize, align 8, !dbg !13999
  call void @llvm.dbg.declare(metadata i64* %relative_index, metadata !14006, metadata !DIExpression()), !dbg !14007
  %9 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14008
  %field6 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %9, i32 0, i32 4, !dbg !14009
  %10 = load %union.tree_node*, %union.tree_node** %field6, align 8, !dbg !14009
  %tobool7 = icmp ne %union.tree_node* %10, null, !dbg !14008
  br i1 %tobool7, label %cond.false17, label %cond.true8, !dbg !14010

cond.true8:                                       ; preds = %cond.end
  %11 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14011
  %index = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %11, i32 0, i32 11, !dbg !14012
  %12 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !14012
  %tobool9 = icmp ne %union.tree_node* %12, null, !dbg !14011
  br i1 %tobool9, label %cond.true10, label %cond.false14, !dbg !14011

cond.true10:                                      ; preds = %cond.true8
  %13 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14013
  %index11 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %13, i32 0, i32 11, !dbg !14014
  %14 = load %union.tree_node*, %union.tree_node** %index11, align 8, !dbg !14014
  %call12 = call i64 @tree_low_cst(%union.tree_node* %14, i32 0), !dbg !14015
  %15 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14016
  %min_index = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %15, i32 0, i32 5, !dbg !14017
  %16 = load %union.tree_node*, %union.tree_node** %min_index, align 8, !dbg !14017
  %call13 = call i64 @tree_low_cst(%union.tree_node* %16, i32 0), !dbg !14018
  %sub = sub nsw i64 %call12, %call13, !dbg !14019
  br label %cond.end15, !dbg !14011

cond.false14:                                     ; preds = %cond.true8
  %17 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14020
  %last_relative_index = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %17, i32 0, i32 9, !dbg !14021
  %18 = load i32, i32* %last_relative_index, align 8, !dbg !14021
  %add = add nsw i32 %18, 1, !dbg !14022
  %conv = sext i32 %add to i64, !dbg !14020
  br label %cond.end15, !dbg !14011

cond.end15:                                       ; preds = %cond.false14, %cond.true10
  %cond16 = phi i64 [ %sub, %cond.true10 ], [ %conv, %cond.false14 ], !dbg !14011
  br label %cond.end18, !dbg !14010

cond.false17:                                     ; preds = %cond.end
  br label %cond.end18, !dbg !14010

cond.end18:                                       ; preds = %cond.false17, %cond.end15
  %cond19 = phi i64 [ %cond16, %cond.end15 ], [ 0, %cond.false17 ], !dbg !14010
  store i64 %cond19, i64* %relative_index, align 8, !dbg !14007
  call void @llvm.dbg.declare(metadata i64* %constructor_relative_ebitpos, metadata !14023, metadata !DIExpression()), !dbg !14024
  %19 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14025
  %field20 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %19, i32 0, i32 4, !dbg !14026
  %20 = load %union.tree_node*, %union.tree_node** %field20, align 8, !dbg !14026
  %tobool21 = icmp ne %union.tree_node* %20, null, !dbg !14025
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !14025

cond.true22:                                      ; preds = %cond.end18
  %21 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14027
  %field23 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %21, i32 0, i32 4, !dbg !14028
  %22 = load %union.tree_node*, %union.tree_node** %field23, align 8, !dbg !14028
  %call24 = call i64 @int_bit_position(%union.tree_node* %22), !dbg !14029
  br label %cond.end26, !dbg !14025

cond.false25:                                     ; preds = %cond.end18
  %23 = load i64, i64* %ebitsize, align 8, !dbg !14030
  %24 = load i64, i64* %relative_index, align 8, !dbg !14031
  %mul = mul nsw i64 %23, %24, !dbg !14032
  br label %cond.end26, !dbg !14025

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi i64 [ %call24, %cond.true22 ], [ %mul, %cond.false25 ], !dbg !14025
  store i64 %cond27, i64* %constructor_relative_ebitpos, align 8, !dbg !14024
  call void @llvm.dbg.declare(metadata i64* %byte_relative_ebitpos, metadata !14033, metadata !DIExpression()), !dbg !14034
  %25 = load %struct.oc_outer_state*, %struct.oc_outer_state** %outer.addr, align 8, !dbg !14035
  %tobool28 = icmp ne %struct.oc_outer_state* %25, null, !dbg !14035
  br i1 %tobool28, label %cond.true29, label %cond.false30, !dbg !14035

cond.true29:                                      ; preds = %cond.end26
  %26 = load %struct.oc_outer_state*, %struct.oc_outer_state** %outer.addr, align 8, !dbg !14036
  %bit_offset = getelementptr inbounds %struct.oc_outer_state, %struct.oc_outer_state* %26, i32 0, i32 0, !dbg !14037
  %27 = load i32, i32* %bit_offset, align 4, !dbg !14037
  br label %cond.end31, !dbg !14035

cond.false30:                                     ; preds = %cond.end26
  br label %cond.end31, !dbg !14035

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi i32 [ %27, %cond.true29 ], [ 0, %cond.false30 ], !dbg !14035
  %conv33 = zext i32 %cond32 to i64, !dbg !14038
  %28 = load i64, i64* %constructor_relative_ebitpos, align 8, !dbg !14039
  %add34 = add nsw i64 %conv33, %28, !dbg !14040
  store i64 %add34, i64* %byte_relative_ebitpos, align 8, !dbg !14034
  call void @llvm.dbg.declare(metadata i64* %next_offset, metadata !14041, metadata !DIExpression()), !dbg !14042
  %29 = load i64, i64* %byte_relative_ebitpos, align 8, !dbg !14043
  store i64 %29, i64* %next_offset, align 8, !dbg !14042
  call void @llvm.dbg.declare(metadata i64* %end_offset, metadata !14044, metadata !DIExpression()), !dbg !14045
  %30 = load i64, i64* %byte_relative_ebitpos, align 8, !dbg !14046
  %31 = load i64, i64* %ebitsize, align 8, !dbg !14047
  %add35 = add nsw i64 %30, %31, !dbg !14048
  store i64 %add35, i64* %end_offset, align 8, !dbg !14045
  %32 = load i64, i64* %relative_index, align 8, !dbg !14049
  %conv36 = trunc i64 %32 to i32, !dbg !14049
  %33 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14050
  %last_relative_index37 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %33, i32 0, i32 9, !dbg !14051
  store i32 %conv36, i32* %last_relative_index37, align 8, !dbg !14052
  %34 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14053
  %val = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %34, i32 0, i32 10, !dbg !14055
  %35 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !14055
  %cmp = icmp eq %union.tree_node* %35, null, !dbg !14056
  br i1 %cmp, label %if.then, label %if.end, !dbg !14057

if.then:                                          ; preds = %cond.end31
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !14058
  %37 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14059
  %val39 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %37, i32 0, i32 10, !dbg !14060
  store %union.tree_node* %36, %union.tree_node** %val39, align 8, !dbg !14061
  br label %if.end, !dbg !14059

if.end:                                           ; preds = %if.then, %cond.end31
  br label %while.cond, !dbg !14062

while.cond:                                       ; preds = %while.body, %if.end
  %38 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14063
  %val40 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %38, i32 0, i32 10, !dbg !14063
  %39 = load %union.tree_node*, %union.tree_node** %val40, align 8, !dbg !14063
  %base = bitcast %union.tree_node* %39 to %struct.tree_base*, !dbg !14063
  %40 = bitcast %struct.tree_base* %base to i64*, !dbg !14063
  %bf.load = load i64, i64* %40, align 8, !dbg !14063
  %bf.clear = and i64 %bf.load, 65535, !dbg !14063
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14063
  %cmp41 = icmp eq i32 %bf.cast, 118, !dbg !14064
  br i1 %cmp41, label %lor.end, label %lor.rhs, !dbg !14065

lor.rhs:                                          ; preds = %while.cond
  %41 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14066
  %val43 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %41, i32 0, i32 10, !dbg !14066
  %42 = load %union.tree_node*, %union.tree_node** %val43, align 8, !dbg !14066
  %base44 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !14066
  %43 = bitcast %struct.tree_base* %base44 to i64*, !dbg !14066
  %bf.load45 = load i64, i64* %43, align 8, !dbg !14066
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !14066
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !14066
  %cmp48 = icmp eq i32 %bf.cast47, 117, !dbg !14067
  br label %lor.end, !dbg !14065

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %44 = phi i1 [ true, %while.cond ], [ %cmp48, %lor.rhs ]
  br i1 %44, label %while.body, label %while.end, !dbg !14062

while.body:                                       ; preds = %lor.end
  %45 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14068
  %val50 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %45, i32 0, i32 10, !dbg !14068
  %46 = load %union.tree_node*, %union.tree_node** %val50, align 8, !dbg !14068
  %exp = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !14068
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14068
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14068
  %47 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14068
  %48 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14069
  %val51 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %48, i32 0, i32 10, !dbg !14070
  store %union.tree_node* %47, %union.tree_node** %val51, align 8, !dbg !14071
  br label %while.cond, !dbg !14062, !llvm.loop !14072

while.end:                                        ; preds = %lor.end
  %49 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14073
  %val52 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %49, i32 0, i32 10, !dbg !14073
  %50 = load %union.tree_node*, %union.tree_node** %val52, align 8, !dbg !14073
  %base53 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !14073
  %51 = bitcast %struct.tree_base* %base53 to i64*, !dbg !14073
  %bf.load54 = load i64, i64* %51, align 8, !dbg !14073
  %bf.clear55 = and i64 %bf.load54, 65535, !dbg !14073
  %bf.cast56 = trunc i64 %bf.clear55 to i32, !dbg !14073
  %cmp57 = icmp ne i32 %bf.cast56, 23, !dbg !14075
  br i1 %cmp57, label %land.lhs.true, label %if.end68, !dbg !14076

land.lhs.true:                                    ; preds = %while.end
  %52 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14077
  %val59 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %52, i32 0, i32 10, !dbg !14077
  %53 = load %union.tree_node*, %union.tree_node** %val59, align 8, !dbg !14077
  %base60 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !14077
  %54 = bitcast %struct.tree_base* %base60 to i64*, !dbg !14077
  %bf.load61 = load i64, i64* %54, align 8, !dbg !14077
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !14077
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !14077
  %cmp64 = icmp ne i32 %bf.cast63, 51, !dbg !14078
  br i1 %cmp64, label %if.then66, label %if.end68, !dbg !14079

if.then66:                                        ; preds = %land.lhs.true
  %55 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14080
  %field67 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %55, i32 0, i32 4, !dbg !14080
  %56 = load %union.tree_node*, %union.tree_node** %field67, align 8, !dbg !14080
  %decl_minimal = bitcast %union.tree_node* %56 to %struct.tree_decl_minimal*, !dbg !14080
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !14080
  %57 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !14080
  call void (i8*, ...) @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.175, i64 0, i64 0), %union.tree_node* %57), !dbg !14082
  br label %while.end196, !dbg !14083

if.end68:                                         ; preds = %land.lhs.true, %while.end
  %58 = load i64, i64* %next_offset, align 8, !dbg !14084
  %div = sdiv i64 %58, 8, !dbg !14086
  %59 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14087
  %total_bytes = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %59, i32 0, i32 6, !dbg !14088
  %60 = load i64, i64* %total_bytes, align 8, !dbg !14088
  %cmp69 = icmp ne i64 %div, %60, !dbg !14089
  br i1 %cmp69, label %if.then71, label %if.end99, !dbg !14090

if.then71:                                        ; preds = %if.end68
  %61 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14091
  %byte_buffer_in_use = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %61, i32 0, i32 7, !dbg !14094
  %62 = load i8, i8* %byte_buffer_in_use, align 8, !dbg !14094
  %tobool72 = icmp ne i8 %62, 0, !dbg !14091
  br i1 %tobool72, label %if.then73, label %if.end79, !dbg !14095

if.then73:                                        ; preds = %if.then71
  %63 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14096
  %byte = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %63, i32 0, i32 8, !dbg !14096
  %64 = load i32, i32* %byte, align 4, !dbg !14096
  %conv74 = sext i32 %64 to i64, !dbg !14096
  %call75 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv74), !dbg !14096
  %call76 = call zeroext i8 @assemble_integer(%struct.rtx_def* %call75, i32 1, i32 8, i32 1), !dbg !14098
  %65 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14099
  %total_bytes77 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %65, i32 0, i32 6, !dbg !14100
  %66 = load i64, i64* %total_bytes77, align 8, !dbg !14101
  %inc = add nsw i64 %66, 1, !dbg !14101
  store i64 %inc, i64* %total_bytes77, align 8, !dbg !14101
  %67 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14102
  %byte_buffer_in_use78 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %67, i32 0, i32 7, !dbg !14103
  store i8 0, i8* %byte_buffer_in_use78, align 8, !dbg !14104
  br label %if.end79, !dbg !14105

if.end79:                                         ; preds = %if.then73, %if.then71
  %68 = load i64, i64* %next_offset, align 8, !dbg !14106
  %div80 = sdiv i64 %68, 8, !dbg !14108
  %69 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14109
  %total_bytes81 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %69, i32 0, i32 6, !dbg !14110
  %70 = load i64, i64* %total_bytes81, align 8, !dbg !14110
  %cmp82 = icmp ne i64 %div80, %70, !dbg !14111
  br i1 %cmp82, label %if.then84, label %if.end98, !dbg !14112

if.then84:                                        ; preds = %if.end79
  %71 = load i64, i64* %next_offset, align 8, !dbg !14113
  %div85 = sdiv i64 %71, 8, !dbg !14113
  %72 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14113
  %total_bytes86 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %72, i32 0, i32 6, !dbg !14113
  %73 = load i64, i64* %total_bytes86, align 8, !dbg !14113
  %cmp87 = icmp sge i64 %div85, %73, !dbg !14113
  br i1 %cmp87, label %cond.false90, label %cond.true89, !dbg !14113

cond.true89:                                      ; preds = %if.then84
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 5010, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !14113
  br label %cond.end91, !dbg !14113

cond.false90:                                     ; preds = %if.then84
  br label %cond.end91, !dbg !14113

cond.end91:                                       ; preds = %cond.false90, %cond.true89
  %cond92 = phi i32 [ 0, %cond.true89 ], [ 0, %cond.false90 ], !dbg !14113
  %74 = load i64, i64* %next_offset, align 8, !dbg !14115
  %div93 = sdiv i64 %74, 8, !dbg !14116
  %75 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14117
  %total_bytes94 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %75, i32 0, i32 6, !dbg !14118
  %76 = load i64, i64* %total_bytes94, align 8, !dbg !14118
  %sub95 = sub nsw i64 %div93, %76, !dbg !14119
  call void @assemble_zeros(i64 %sub95), !dbg !14120
  %77 = load i64, i64* %next_offset, align 8, !dbg !14121
  %div96 = sdiv i64 %77, 8, !dbg !14122
  %78 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14123
  %total_bytes97 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %78, i32 0, i32 6, !dbg !14124
  store i64 %div96, i64* %total_bytes97, align 8, !dbg !14125
  br label %if.end98, !dbg !14126

if.end98:                                         ; preds = %cond.end91, %if.end79
  br label %if.end99, !dbg !14127

if.end99:                                         ; preds = %if.end98, %if.end68
  %79 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14128
  %byte_buffer_in_use100 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %79, i32 0, i32 7, !dbg !14130
  %80 = load i8, i8* %byte_buffer_in_use100, align 8, !dbg !14130
  %tobool101 = icmp ne i8 %80, 0, !dbg !14128
  br i1 %tobool101, label %if.end109, label %if.then102, !dbg !14131

if.then102:                                       ; preds = %if.end99
  %81 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14132
  %byte103 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %81, i32 0, i32 8, !dbg !14134
  store i32 0, i32* %byte103, align 4, !dbg !14135
  %82 = load i64, i64* %ebitsize, align 8, !dbg !14136
  %cmp104 = icmp sgt i64 %82, 0, !dbg !14138
  br i1 %cmp104, label %if.then106, label %if.end108, !dbg !14139

if.then106:                                       ; preds = %if.then102
  %83 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14140
  %byte_buffer_in_use107 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %83, i32 0, i32 7, !dbg !14141
  store i8 1, i8* %byte_buffer_in_use107, align 8, !dbg !14142
  br label %if.end108, !dbg !14140

if.end108:                                        ; preds = %if.then106, %if.then102
  br label %if.end109, !dbg !14143

if.end109:                                        ; preds = %if.end108, %if.end99
  %84 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14144
  %val110 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %84, i32 0, i32 10, !dbg !14144
  %85 = load %union.tree_node*, %union.tree_node** %val110, align 8, !dbg !14144
  %base111 = bitcast %union.tree_node* %85 to %struct.tree_base*, !dbg !14144
  %86 = bitcast %struct.tree_base* %base111 to i64*, !dbg !14144
  %bf.load112 = load i64, i64* %86, align 8, !dbg !14144
  %bf.clear113 = and i64 %bf.load112, 65535, !dbg !14144
  %bf.cast114 = trunc i64 %bf.clear113 to i32, !dbg !14144
  %cmp115 = icmp eq i32 %bf.cast114, 51, !dbg !14146
  br i1 %cmp115, label %if.then117, label %if.end128, !dbg !14147

if.then117:                                       ; preds = %if.end109
  call void @llvm.dbg.declare(metadata %struct.oc_outer_state* %output_state, metadata !14148, metadata !DIExpression()), !dbg !14150
  %87 = load i64, i64* %next_offset, align 8, !dbg !14151
  %rem = srem i64 %87, 8, !dbg !14152
  %conv118 = trunc i64 %rem to i32, !dbg !14151
  %bit_offset119 = getelementptr inbounds %struct.oc_outer_state, %struct.oc_outer_state* %output_state, i32 0, i32 0, !dbg !14153
  store i32 %conv118, i32* %bit_offset119, align 4, !dbg !14154
  %88 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14155
  %byte120 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %88, i32 0, i32 8, !dbg !14156
  %89 = load i32, i32* %byte120, align 4, !dbg !14156
  %byte121 = getelementptr inbounds %struct.oc_outer_state, %struct.oc_outer_state* %output_state, i32 0, i32 1, !dbg !14157
  store i32 %89, i32* %byte121, align 4, !dbg !14158
  %90 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14159
  %val122 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %90, i32 0, i32 10, !dbg !14160
  %91 = load %union.tree_node*, %union.tree_node** %val122, align 8, !dbg !14160
  %call123 = call i64 @output_constructor(%union.tree_node* %91, i64 0, i32 0, %struct.oc_outer_state* %output_state), !dbg !14161
  %92 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14162
  %total_bytes124 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %92, i32 0, i32 6, !dbg !14163
  %93 = load i64, i64* %total_bytes124, align 8, !dbg !14164
  %add125 = add i64 %93, %call123, !dbg !14164
  store i64 %add125, i64* %total_bytes124, align 8, !dbg !14164
  %byte126 = getelementptr inbounds %struct.oc_outer_state, %struct.oc_outer_state* %output_state, i32 0, i32 1, !dbg !14165
  %94 = load i32, i32* %byte126, align 4, !dbg !14165
  %95 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14166
  %byte127 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %95, i32 0, i32 8, !dbg !14167
  store i32 %94, i32* %byte127, align 4, !dbg !14168
  br label %while.end196, !dbg !14169

if.end128:                                        ; preds = %if.end109
  br label %while.cond129, !dbg !14170

while.cond129:                                    ; preds = %if.end185, %if.end128
  %96 = load i64, i64* %next_offset, align 8, !dbg !14171
  %97 = load i64, i64* %end_offset, align 8, !dbg !14172
  %cmp130 = icmp slt i64 %96, %97, !dbg !14173
  br i1 %cmp130, label %while.body132, label %while.end196, !dbg !14170

while.body132:                                    ; preds = %while.cond129
  call void @llvm.dbg.declare(metadata i32* %this_time, metadata !14174, metadata !DIExpression()), !dbg !14176
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !14177, metadata !DIExpression()), !dbg !14178
  call void @llvm.dbg.declare(metadata i64* %value, metadata !14179, metadata !DIExpression()), !dbg !14180
  call void @llvm.dbg.declare(metadata i64* %next_byte, metadata !14181, metadata !DIExpression()), !dbg !14182
  %98 = load i64, i64* %next_offset, align 8, !dbg !14183
  %div133 = sdiv i64 %98, 8, !dbg !14184
  store i64 %div133, i64* %next_byte, align 8, !dbg !14182
  call void @llvm.dbg.declare(metadata i64* %next_bit, metadata !14185, metadata !DIExpression()), !dbg !14186
  %99 = load i64, i64* %next_offset, align 8, !dbg !14187
  %rem134 = srem i64 %99, 8, !dbg !14188
  store i64 %rem134, i64* %next_bit, align 8, !dbg !14186
  br label %while.cond135, !dbg !14189

while.cond135:                                    ; preds = %while.body139, %while.body132
  %100 = load i64, i64* %next_byte, align 8, !dbg !14190
  %101 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14191
  %total_bytes136 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %101, i32 0, i32 6, !dbg !14192
  %102 = load i64, i64* %total_bytes136, align 8, !dbg !14192
  %cmp137 = icmp ne i64 %100, %102, !dbg !14193
  br i1 %cmp137, label %while.body139, label %while.end147, !dbg !14189

while.body139:                                    ; preds = %while.cond135
  %103 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14194
  %byte140 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %103, i32 0, i32 8, !dbg !14194
  %104 = load i32, i32* %byte140, align 4, !dbg !14194
  %conv141 = sext i32 %104 to i64, !dbg !14194
  %call142 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv141), !dbg !14194
  %call143 = call zeroext i8 @assemble_integer(%struct.rtx_def* %call142, i32 1, i32 8, i32 1), !dbg !14196
  %105 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14197
  %total_bytes144 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %105, i32 0, i32 6, !dbg !14198
  %106 = load i64, i64* %total_bytes144, align 8, !dbg !14199
  %inc145 = add nsw i64 %106, 1, !dbg !14199
  store i64 %inc145, i64* %total_bytes144, align 8, !dbg !14199
  %107 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14200
  %byte146 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %107, i32 0, i32 8, !dbg !14201
  store i32 0, i32* %byte146, align 4, !dbg !14202
  br label %while.cond135, !dbg !14189, !llvm.loop !14203

while.end147:                                     ; preds = %while.cond135
  %108 = load i64, i64* %end_offset, align 8, !dbg !14205
  %109 = load i64, i64* %next_offset, align 8, !dbg !14205
  %sub148 = sub nsw i64 %108, %109, !dbg !14205
  %110 = load i64, i64* %next_bit, align 8, !dbg !14205
  %sub149 = sub nsw i64 8, %110, !dbg !14205
  %cmp150 = icmp slt i64 %sub148, %sub149, !dbg !14205
  br i1 %cmp150, label %cond.true152, label %cond.false154, !dbg !14205

cond.true152:                                     ; preds = %while.end147
  %111 = load i64, i64* %end_offset, align 8, !dbg !14205
  %112 = load i64, i64* %next_offset, align 8, !dbg !14205
  %sub153 = sub nsw i64 %111, %112, !dbg !14205
  br label %cond.end156, !dbg !14205

cond.false154:                                    ; preds = %while.end147
  %113 = load i64, i64* %next_bit, align 8, !dbg !14205
  %sub155 = sub nsw i64 8, %113, !dbg !14205
  br label %cond.end156, !dbg !14205

cond.end156:                                      ; preds = %cond.false154, %cond.true152
  %cond157 = phi i64 [ %sub153, %cond.true152 ], [ %sub155, %cond.false154 ], !dbg !14205
  %conv158 = trunc i64 %cond157 to i32, !dbg !14205
  store i32 %conv158, i32* %this_time, align 4, !dbg !14206
  %114 = load i64, i64* %next_offset, align 8, !dbg !14207
  %115 = load i64, i64* %byte_relative_ebitpos, align 8, !dbg !14210
  %sub159 = sub nsw i64 %114, %115, !dbg !14211
  %conv160 = trunc i64 %sub159 to i32, !dbg !14207
  store i32 %conv160, i32* %shift, align 4, !dbg !14212
  %116 = load i32, i32* %shift, align 4, !dbg !14213
  %cmp161 = icmp slt i32 %116, 64, !dbg !14215
  br i1 %cmp161, label %land.lhs.true163, label %if.end169, !dbg !14216

land.lhs.true163:                                 ; preds = %cond.end156
  %117 = load i32, i32* %shift, align 4, !dbg !14217
  %118 = load i32, i32* %this_time, align 4, !dbg !14218
  %add164 = add nsw i32 %117, %118, !dbg !14219
  %cmp165 = icmp sgt i32 %add164, 64, !dbg !14220
  br i1 %cmp165, label %if.then167, label %if.end169, !dbg !14221

if.then167:                                       ; preds = %land.lhs.true163
  %119 = load i32, i32* %shift, align 4, !dbg !14222
  %sub168 = sub nsw i32 64, %119, !dbg !14223
  store i32 %sub168, i32* %this_time, align 4, !dbg !14224
  br label %if.end169, !dbg !14225

if.end169:                                        ; preds = %if.then167, %land.lhs.true163, %cond.end156
  %120 = load i32, i32* %shift, align 4, !dbg !14226
  %cmp170 = icmp slt i32 %120, 64, !dbg !14228
  br i1 %cmp170, label %if.then172, label %if.else, !dbg !14229

if.then172:                                       ; preds = %if.end169
  %121 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14230
  %val173 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %121, i32 0, i32 10, !dbg !14230
  %122 = load %union.tree_node*, %union.tree_node** %val173, align 8, !dbg !14230
  %int_cst = bitcast %union.tree_node* %122 to %struct.tree_int_cst*, !dbg !14230
  %int_cst174 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !14230
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst174, i32 0, i32 0, !dbg !14230
  %123 = load i64, i64* %low, align 8, !dbg !14230
  store i64 %123, i64* %value, align 8, !dbg !14231
  br label %if.end185, !dbg !14232

if.else:                                          ; preds = %if.end169
  %124 = load i32, i32* %shift, align 4, !dbg !14233
  %cmp175 = icmp slt i32 %124, 128, !dbg !14233
  br i1 %cmp175, label %cond.false178, label %cond.true177, !dbg !14233

cond.true177:                                     ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32 5117, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !14233
  br label %cond.end179, !dbg !14233

cond.false178:                                    ; preds = %if.else
  br label %cond.end179, !dbg !14233

cond.end179:                                      ; preds = %cond.false178, %cond.true177
  %cond180 = phi i32 [ 0, %cond.true177 ], [ 0, %cond.false178 ], !dbg !14233
  %125 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14235
  %val181 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %125, i32 0, i32 10, !dbg !14235
  %126 = load %union.tree_node*, %union.tree_node** %val181, align 8, !dbg !14235
  %int_cst182 = bitcast %union.tree_node* %126 to %struct.tree_int_cst*, !dbg !14235
  %int_cst183 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst182, i32 0, i32 1, !dbg !14235
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst183, i32 0, i32 1, !dbg !14235
  %127 = load i64, i64* %high, align 8, !dbg !14235
  store i64 %127, i64* %value, align 8, !dbg !14236
  %128 = load i32, i32* %shift, align 4, !dbg !14237
  %sub184 = sub nsw i32 %128, 64, !dbg !14237
  store i32 %sub184, i32* %shift, align 4, !dbg !14237
  br label %if.end185

if.end185:                                        ; preds = %cond.end179, %if.then172
  %129 = load i64, i64* %value, align 8, !dbg !14238
  %130 = load i32, i32* %shift, align 4, !dbg !14239
  %sh_prom = zext i32 %130 to i64, !dbg !14240
  %shr = ashr i64 %129, %sh_prom, !dbg !14240
  %131 = load i32, i32* %this_time, align 4, !dbg !14241
  %sub186 = sub nsw i32 %131, 1, !dbg !14242
  %sh_prom187 = zext i32 %sub186 to i64, !dbg !14243
  %shl = shl i64 2, %sh_prom187, !dbg !14243
  %sub188 = sub nsw i64 %shl, 1, !dbg !14244
  %and = and i64 %shr, %sub188, !dbg !14245
  %132 = load i64, i64* %next_bit, align 8, !dbg !14246
  %shl189 = shl i64 %and, %132, !dbg !14247
  %133 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14248
  %byte190 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %133, i32 0, i32 8, !dbg !14249
  %134 = load i32, i32* %byte190, align 4, !dbg !14250
  %conv191 = sext i32 %134 to i64, !dbg !14250
  %or = or i64 %conv191, %shl189, !dbg !14250
  %conv192 = trunc i64 %or to i32, !dbg !14250
  store i32 %conv192, i32* %byte190, align 4, !dbg !14250
  %135 = load i32, i32* %this_time, align 4, !dbg !14251
  %conv193 = sext i32 %135 to i64, !dbg !14251
  %136 = load i64, i64* %next_offset, align 8, !dbg !14252
  %add194 = add nsw i64 %136, %conv193, !dbg !14252
  store i64 %add194, i64* %next_offset, align 8, !dbg !14252
  %137 = load %struct.oc_local_state*, %struct.oc_local_state** %local.addr, align 8, !dbg !14253
  %byte_buffer_in_use195 = getelementptr inbounds %struct.oc_local_state, %struct.oc_local_state* %137, i32 0, i32 7, !dbg !14254
  store i8 1, i8* %byte_buffer_in_use195, align 8, !dbg !14255
  br label %while.cond129, !dbg !14170, !llvm.loop !14256

while.end196:                                     ; preds = %if.then66, %if.then117, %while.cond129
  ret void, !dbg !14258
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @array_size_for_constructor(%union.tree_node* %val) #0 !dbg !14259 {
entry:
  %retval = alloca i64, align 8
  %val.addr = alloca %union.tree_node*, align 8
  %max_index = alloca %union.tree_node*, align 8
  %i = alloca %union.tree_node*, align 8
  %cnt = alloca i64, align 8
  %index = alloca %union.tree_node*, align 8
  %value = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !14262, metadata !DIExpression()), !dbg !14263
  call void @llvm.dbg.declare(metadata %union.tree_node** %max_index, metadata !14264, metadata !DIExpression()), !dbg !14265
  call void @llvm.dbg.declare(metadata %union.tree_node** %i, metadata !14266, metadata !DIExpression()), !dbg !14267
  call void @llvm.dbg.declare(metadata i64* %cnt, metadata !14268, metadata !DIExpression()), !dbg !14269
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !14270, metadata !DIExpression()), !dbg !14271
  call void @llvm.dbg.declare(metadata %union.tree_node** %value, metadata !14272, metadata !DIExpression()), !dbg !14273
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !14274, metadata !DIExpression()), !dbg !14275
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14276
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !14276
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !14276
  %bf.load = load i64, i64* %1, align 8, !dbg !14276
  %bf.clear = and i64 %bf.load, 65535, !dbg !14276
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14276
  %cmp = icmp eq i32 %bf.cast, 28, !dbg !14278
  br i1 %cmp, label %if.then, label %if.end, !dbg !14279

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14280
  %string = bitcast %union.tree_node* %2 to %struct.tree_string*, !dbg !14280
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 1, !dbg !14280
  %3 = load i32, i32* %length, align 8, !dbg !14280
  %conv = sext i32 %3 to i64, !dbg !14280
  store i64 %conv, i64* %retval, align 8, !dbg !14281
  br label %return, !dbg !14281

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %max_index, align 8, !dbg !14282
  store i64 0, i64* %cnt, align 8, !dbg !14283
  br label %for.cond, !dbg !14283

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i64, i64* %cnt, align 8, !dbg !14285
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14285
  %constructor = bitcast %union.tree_node* %5 to %struct.tree_constructor*, !dbg !14285
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !14285
  %6 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14285
  %tobool = icmp ne %struct.VEC_constructor_elt_gc* %6, null, !dbg !14285
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14285

cond.true:                                        ; preds = %for.cond
  %7 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14285
  %constructor1 = bitcast %union.tree_node* %7 to %struct.tree_constructor*, !dbg !14285
  %elts2 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor1, i32 0, i32 1, !dbg !14285
  %8 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts2, align 8, !dbg !14285
  %base3 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %8, i32 0, i32 0, !dbg !14285
  br label %cond.end, !dbg !14285

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !14285

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base3, %cond.true ], [ null, %cond.false ], !dbg !14285
  %call = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond), !dbg !14285
  %conv4 = zext i32 %call to i64, !dbg !14285
  %cmp5 = icmp uge i64 %4, %conv4, !dbg !14285
  br i1 %cmp5, label %cond.true7, label %cond.false8, !dbg !14285

cond.true7:                                       ; preds = %cond.end
  br label %cond.end35, !dbg !14285

cond.false8:                                      ; preds = %cond.end
  %9 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14285
  %constructor9 = bitcast %union.tree_node* %9 to %struct.tree_constructor*, !dbg !14285
  %elts10 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor9, i32 0, i32 1, !dbg !14285
  %10 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts10, align 8, !dbg !14285
  %tobool11 = icmp ne %struct.VEC_constructor_elt_gc* %10, null, !dbg !14285
  br i1 %tobool11, label %cond.true12, label %cond.false16, !dbg !14285

cond.true12:                                      ; preds = %cond.false8
  %11 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14285
  %constructor13 = bitcast %union.tree_node* %11 to %struct.tree_constructor*, !dbg !14285
  %elts14 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor13, i32 0, i32 1, !dbg !14285
  %12 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts14, align 8, !dbg !14285
  %base15 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %12, i32 0, i32 0, !dbg !14285
  br label %cond.end17, !dbg !14285

cond.false16:                                     ; preds = %cond.false8
  br label %cond.end17, !dbg !14285

cond.end17:                                       ; preds = %cond.false16, %cond.true12
  %cond18 = phi %struct.VEC_constructor_elt_base* [ %base15, %cond.true12 ], [ null, %cond.false16 ], !dbg !14285
  %13 = load i64, i64* %cnt, align 8, !dbg !14285
  %conv19 = trunc i64 %13 to i32, !dbg !14285
  %call20 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond18, i32 %conv19), !dbg !14285
  %value21 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call20, i32 0, i32 1, !dbg !14285
  %14 = load %union.tree_node*, %union.tree_node** %value21, align 8, !dbg !14285
  store %union.tree_node* %14, %union.tree_node** %value, align 8, !dbg !14285
  %15 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14285
  %constructor22 = bitcast %union.tree_node* %15 to %struct.tree_constructor*, !dbg !14285
  %elts23 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor22, i32 0, i32 1, !dbg !14285
  %16 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts23, align 8, !dbg !14285
  %tobool24 = icmp ne %struct.VEC_constructor_elt_gc* %16, null, !dbg !14285
  br i1 %tobool24, label %cond.true25, label %cond.false29, !dbg !14285

cond.true25:                                      ; preds = %cond.end17
  %17 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14285
  %constructor26 = bitcast %union.tree_node* %17 to %struct.tree_constructor*, !dbg !14285
  %elts27 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor26, i32 0, i32 1, !dbg !14285
  %18 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts27, align 8, !dbg !14285
  %base28 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %18, i32 0, i32 0, !dbg !14285
  br label %cond.end30, !dbg !14285

cond.false29:                                     ; preds = %cond.end17
  br label %cond.end30, !dbg !14285

cond.end30:                                       ; preds = %cond.false29, %cond.true25
  %cond31 = phi %struct.VEC_constructor_elt_base* [ %base28, %cond.true25 ], [ null, %cond.false29 ], !dbg !14285
  %19 = load i64, i64* %cnt, align 8, !dbg !14285
  %conv32 = trunc i64 %19 to i32, !dbg !14285
  %call33 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond31, i32 %conv32), !dbg !14285
  %index34 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %call33, i32 0, i32 0, !dbg !14285
  %20 = load %union.tree_node*, %union.tree_node** %index34, align 8, !dbg !14285
  store %union.tree_node* %20, %union.tree_node** %index, align 8, !dbg !14285
  br label %cond.end35, !dbg !14285

cond.end35:                                       ; preds = %cond.end30, %cond.true7
  %cond36 = phi i32 [ 0, %cond.true7 ], [ 1, %cond.end30 ], !dbg !14285
  %tobool37 = icmp ne i32 %cond36, 0, !dbg !14283
  br i1 %tobool37, label %for.body, label %for.end, !dbg !14283

for.body:                                         ; preds = %cond.end35
  %21 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !14287
  %base38 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !14287
  %22 = bitcast %struct.tree_base* %base38 to i64*, !dbg !14287
  %bf.load39 = load i64, i64* %22, align 8, !dbg !14287
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !14287
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !14287
  %cmp42 = icmp eq i32 %bf.cast41, 111, !dbg !14290
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !14291

if.then44:                                        ; preds = %for.body
  %23 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !14292
  %exp = bitcast %union.tree_node* %23 to %struct.tree_exp*, !dbg !14292
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14292
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !14292
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !14292
  store %union.tree_node* %24, %union.tree_node** %index, align 8, !dbg !14293
  br label %if.end45, !dbg !14294

if.end45:                                         ; preds = %if.then44, %for.body
  %25 = load %union.tree_node*, %union.tree_node** %max_index, align 8, !dbg !14295
  %cmp46 = icmp eq %union.tree_node* %25, null, !dbg !14297
  br i1 %cmp46, label %if.then50, label %lor.lhs.false, !dbg !14298

lor.lhs.false:                                    ; preds = %if.end45
  %26 = load %union.tree_node*, %union.tree_node** %max_index, align 8, !dbg !14299
  %27 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !14300
  %call48 = call i32 @tree_int_cst_lt(%union.tree_node* %26, %union.tree_node* %27), !dbg !14301
  %tobool49 = icmp ne i32 %call48, 0, !dbg !14301
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !14302

if.then50:                                        ; preds = %lor.lhs.false, %if.end45
  %28 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !14303
  store %union.tree_node* %28, %union.tree_node** %max_index, align 8, !dbg !14304
  br label %if.end51, !dbg !14305

if.end51:                                         ; preds = %if.then50, %lor.lhs.false
  br label %for.inc, !dbg !14306

for.inc:                                          ; preds = %if.end51
  %29 = load i64, i64* %cnt, align 8, !dbg !14285
  %inc = add i64 %29, 1, !dbg !14285
  store i64 %inc, i64* %cnt, align 8, !dbg !14285
  br label %for.cond, !dbg !14285, !llvm.loop !14307

for.end:                                          ; preds = %cond.end35
  %30 = load %union.tree_node*, %union.tree_node** %max_index, align 8, !dbg !14309
  %cmp52 = icmp eq %union.tree_node* %30, null, !dbg !14311
  br i1 %cmp52, label %if.then54, label %if.end55, !dbg !14312

if.then54:                                        ; preds = %for.end
  store i64 0, i64* %retval, align 8, !dbg !14313
  br label %return, !dbg !14313

if.end55:                                         ; preds = %for.end
  %31 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14314
  %common = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !14314
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14314
  %32 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14314
  %type56 = bitcast %union.tree_node* %32 to %struct.tree_type*, !dbg !14314
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type56, i32 0, i32 1, !dbg !14314
  %33 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !14314
  %type57 = bitcast %union.tree_node* %33 to %struct.tree_type*, !dbg !14314
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type57, i32 0, i32 13, !dbg !14314
  %34 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !14314
  store %union.tree_node* %34, %union.tree_node** %tmp, align 8, !dbg !14315
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !14316
  %36 = load %union.tree_node*, %union.tree_node** %max_index, align 8, !dbg !14316
  %call58 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %35, %union.tree_node* %36), !dbg !14316
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !14316
  %38 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !14316
  %call59 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %37, %union.tree_node* %38), !dbg !14316
  %call60 = call %union.tree_node* @size_binop_loc(i32 0, i32 64, %union.tree_node* %call58, %union.tree_node* %call59), !dbg !14316
  store %union.tree_node* %call60, %union.tree_node** %i, align 8, !dbg !14317
  %39 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !14318
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !14318
  %call61 = call %union.tree_node* @build_int_cst(%union.tree_node* %40, i64 1), !dbg !14318
  %call62 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %39, %union.tree_node* %call61), !dbg !14318
  store %union.tree_node* %call62, %union.tree_node** %i, align 8, !dbg !14319
  %41 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !14320
  %42 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !14320
  %common63 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !14320
  %type64 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common63, i32 0, i32 2, !dbg !14320
  %43 = load %union.tree_node*, %union.tree_node** %type64, align 8, !dbg !14320
  %common65 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !14320
  %type66 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common65, i32 0, i32 2, !dbg !14320
  %44 = load %union.tree_node*, %union.tree_node** %type66, align 8, !dbg !14320
  %type67 = bitcast %union.tree_node* %44 to %struct.tree_type*, !dbg !14320
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type67, i32 0, i32 3, !dbg !14320
  %45 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !14320
  %call68 = call %union.tree_node* @size_binop_loc(i32 0, i32 65, %union.tree_node* %41, %union.tree_node* %45), !dbg !14320
  store %union.tree_node* %call68, %union.tree_node** %i, align 8, !dbg !14321
  %46 = load %union.tree_node*, %union.tree_node** %i, align 8, !dbg !14322
  %call69 = call i64 @tree_low_cst(%union.tree_node* %46, i32 1), !dbg !14323
  store i64 %call69, i64* %retval, align 8, !dbg !14324
  br label %return, !dbg !14324

return:                                           ; preds = %if.end55, %if.then54, %if.then
  %47 = load i64, i64* %retval, align 8, !dbg !14325
  ret i64 %47, !dbg !14325
}

declare dso_local i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @size_binop_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local i64 @int_bit_position(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alias_pair_gc_reserve(%struct.VEC_alias_pair_gc** %vec_, i32 %alloc_) #0 !dbg !14326 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_pair_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_alias_pair_gc** %vec_, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_gc*** %vec_.addr, metadata !14329, metadata !DIExpression()), !dbg !14330
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !14331, metadata !DIExpression()), !dbg !14330
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !14332, metadata !DIExpression()), !dbg !14330
  %0 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !14330
  %1 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** %0, align 8, !dbg !14330
  %tobool = icmp ne %struct.VEC_alias_pair_gc* %1, null, !dbg !14330
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14330

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !14330
  %3 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** %2, align 8, !dbg !14330
  %base = getelementptr inbounds %struct.VEC_alias_pair_gc, %struct.VEC_alias_pair_gc* %3, i32 0, i32 0, !dbg !14330
  br label %cond.end, !dbg !14330

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14330

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_alias_pair_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14330
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !14330
  %call = call i32 @VEC_alias_pair_base_space(%struct.VEC_alias_pair_base* %cond, i32 %4), !dbg !14330
  %tobool1 = icmp ne i32 %call, 0, !dbg !14330
  %lnot = xor i1 %tobool1, true, !dbg !14330
  %lnot.ext = zext i1 %lnot to i32, !dbg !14330
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !14330
  %5 = load i32, i32* %extend, align 4, !dbg !14333
  %tobool2 = icmp ne i32 %5, 0, !dbg !14333
  br i1 %tobool2, label %if.then, label %if.end, !dbg !14330

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !14333
  %7 = load %struct.VEC_alias_pair_gc*, %struct.VEC_alias_pair_gc** %6, align 8, !dbg !14333
  %8 = bitcast %struct.VEC_alias_pair_gc* %7 to i8*, !dbg !14333
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !14333
  %call3 = call i8* @vec_gc_o_reserve(i8* %8, i32 %9, i64 8, i64 16), !dbg !14333
  %10 = bitcast i8* %call3 to %struct.VEC_alias_pair_gc*, !dbg !14333
  %11 = load %struct.VEC_alias_pair_gc**, %struct.VEC_alias_pair_gc*** %vec_.addr, align 8, !dbg !14333
  store %struct.VEC_alias_pair_gc* %10, %struct.VEC_alias_pair_gc** %11, align 8, !dbg !14333
  br label %if.end, !dbg !14333

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !14330
  ret i32 %12, !dbg !14330
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.alias_pair* @VEC_alias_pair_base_quick_push(%struct.VEC_alias_pair_base* %vec_, %struct.alias_pair* %obj_) #0 !dbg !14335 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_pair_base*, align 8
  %obj_.addr = alloca %struct.alias_pair*, align 8
  %slot_ = alloca %struct.alias_pair*, align 8
  store %struct.VEC_alias_pair_base* %vec_, %struct.VEC_alias_pair_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_base** %vec_.addr, metadata !14338, metadata !DIExpression()), !dbg !14339
  store %struct.alias_pair* %obj_, %struct.alias_pair** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %obj_.addr, metadata !14340, metadata !DIExpression()), !dbg !14339
  call void @llvm.dbg.declare(metadata %struct.alias_pair** %slot_, metadata !14341, metadata !DIExpression()), !dbg !14339
  %0 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !14339
  %num = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %0, i32 0, i32 0, !dbg !14339
  %1 = load i32, i32* %num, align 8, !dbg !14339
  %2 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !14339
  %alloc = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %2, i32 0, i32 1, !dbg !14339
  %3 = load i32, i32* %alloc, align 4, !dbg !14339
  %cmp = icmp ult i32 %1, %3, !dbg !14339
  %conv = zext i1 %cmp to i32, !dbg !14339
  %4 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !14339
  %vec = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %4, i32 0, i32 2, !dbg !14339
  %5 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !14339
  %num1 = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %5, i32 0, i32 0, !dbg !14339
  %6 = load i32, i32* %num1, align 8, !dbg !14339
  %inc = add i32 %6, 1, !dbg !14339
  store i32 %inc, i32* %num1, align 8, !dbg !14339
  %idxprom = zext i32 %6 to i64, !dbg !14339
  %arrayidx = getelementptr inbounds [1 x %struct.alias_pair], [1 x %struct.alias_pair]* %vec, i64 0, i64 %idxprom, !dbg !14339
  store %struct.alias_pair* %arrayidx, %struct.alias_pair** %slot_, align 8, !dbg !14339
  %7 = load %struct.alias_pair*, %struct.alias_pair** %obj_.addr, align 8, !dbg !14342
  %tobool = icmp ne %struct.alias_pair* %7, null, !dbg !14342
  br i1 %tobool, label %if.then, label %if.end, !dbg !14339

if.then:                                          ; preds = %entry
  %8 = load %struct.alias_pair*, %struct.alias_pair** %slot_, align 8, !dbg !14342
  %9 = load %struct.alias_pair*, %struct.alias_pair** %obj_.addr, align 8, !dbg !14342
  %10 = bitcast %struct.alias_pair* %8 to i8*, !dbg !14342
  %11 = bitcast %struct.alias_pair* %9 to i8*, !dbg !14342
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !14342
  br label %if.end, !dbg !14342

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.alias_pair*, %struct.alias_pair** %slot_, align 8, !dbg !14339
  ret %struct.alias_pair* %12, !dbg !14339
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_alias_pair_base_space(%struct.VEC_alias_pair_base* %vec_, i32 %alloc_) #0 !dbg !14344 {
entry:
  %vec_.addr = alloca %struct.VEC_alias_pair_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_alias_pair_base* %vec_, %struct.VEC_alias_pair_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_alias_pair_base** %vec_.addr, metadata !14347, metadata !DIExpression()), !dbg !14348
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !14349, metadata !DIExpression()), !dbg !14348
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !14348
  %cmp = icmp sge i32 %0, 0, !dbg !14348
  %conv = zext i1 %cmp to i32, !dbg !14348
  %1 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !14348
  %tobool = icmp ne %struct.VEC_alias_pair_base* %1, null, !dbg !14348
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14348

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !14348
  %alloc = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %2, i32 0, i32 1, !dbg !14348
  %3 = load i32, i32* %alloc, align 4, !dbg !14348
  %4 = load %struct.VEC_alias_pair_base*, %struct.VEC_alias_pair_base** %vec_.addr, align 8, !dbg !14348
  %num = getelementptr inbounds %struct.VEC_alias_pair_base, %struct.VEC_alias_pair_base* %4, i32 0, i32 0, !dbg !14348
  %5 = load i32, i32* %num, align 8, !dbg !14348
  %sub = sub i32 %3, %5, !dbg !14348
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !14348
  %cmp1 = icmp uge i32 %sub, %6, !dbg !14348
  %conv2 = zext i1 %cmp1 to i32, !dbg !14348
  br label %cond.end, !dbg !14348

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !14348
  %tobool3 = icmp ne i32 %7, 0, !dbg !14348
  %lnot = xor i1 %tobool3, true, !dbg !14348
  %lnot.ext = zext i1 %lnot to i32, !dbg !14348
  br label %cond.end, !dbg !14348

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !14348
  ret i32 %cond, !dbg !14348
}

declare dso_local i8* @vec_gc_o_reserve(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @compare_constant(%union.tree_node* %t1, %union.tree_node* %t2) #0 !dbg !14350 {
entry:
  %retval = alloca i32, align 4
  %t1.addr = alloca %union.tree_node*, align 8
  %t2.addr = alloca %union.tree_node*, align 8
  %typecode = alloca i32, align 4
  %v1 = alloca %struct.VEC_constructor_elt_gc*, align 8
  %v2 = alloca %struct.VEC_constructor_elt_gc*, align 8
  %idx = alloca i64, align 8
  %size_1 = alloca i64, align 8
  %c1 = alloca %struct.constructor_elt_d*, align 8
  %c2 = alloca %struct.constructor_elt_d*, align 8
  %value1 = alloca %struct.addr_const, align 8
  %value2 = alloca %struct.addr_const, align 8
  store %union.tree_node* %t1, %union.tree_node** %t1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t1.addr, metadata !14353, metadata !DIExpression()), !dbg !14354
  store %union.tree_node* %t2, %union.tree_node** %t2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t2.addr, metadata !14355, metadata !DIExpression()), !dbg !14356
  call void @llvm.dbg.declare(metadata i32* %typecode, metadata !14357, metadata !DIExpression()), !dbg !14358
  %0 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14359
  %cmp = icmp eq %union.tree_node* %0, null, !dbg !14361
  br i1 %cmp, label %if.then, label %if.end, !dbg !14362

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14363
  %cmp1 = icmp eq %union.tree_node* %1, null, !dbg !14364
  %conv = zext i1 %cmp1 to i32, !dbg !14364
  store i32 %conv, i32* %retval, align 4, !dbg !14365
  br label %return, !dbg !14365

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14366
  %cmp2 = icmp eq %union.tree_node* %2, null, !dbg !14368
  br i1 %cmp2, label %if.then4, label %if.end5, !dbg !14369

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !14370
  br label %return, !dbg !14370

if.end5:                                          ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14371
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !14371
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !14371
  %bf.load = load i64, i64* %4, align 8, !dbg !14371
  %bf.clear = and i64 %bf.load, 65535, !dbg !14371
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !14371
  %5 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14373
  %base6 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !14373
  %6 = bitcast %struct.tree_base* %base6 to i64*, !dbg !14373
  %bf.load7 = load i64, i64* %6, align 8, !dbg !14373
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !14373
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !14373
  %cmp10 = icmp ne i32 %bf.cast, %bf.cast9, !dbg !14374
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !14375

if.then12:                                        ; preds = %if.end5
  store i32 0, i32* %retval, align 4, !dbg !14376
  br label %return, !dbg !14376

if.end13:                                         ; preds = %if.end5
  %7 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14377
  %base14 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !14377
  %8 = bitcast %struct.tree_base* %base14 to i64*, !dbg !14377
  %bf.load15 = load i64, i64* %8, align 8, !dbg !14377
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !14377
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !14377
  switch i32 %bf.cast17, label %sw.default [
    i32 23, label %sw.bb
    i32 24, label %sw.bb73
    i32 25, label %sw.bb94
    i32 28, label %sw.bb115
    i32 26, label %sw.bb176
    i32 51, label %sw.bb189
    i32 121, label %sw.bb344
    i32 122, label %sw.bb344
    i32 63, label %sw.bb360
    i32 66, label %sw.bb360
    i32 64, label %sw.bb360
    i32 111, label %sw.bb360
    i32 116, label %sw.bb378
    i32 113, label %sw.bb378
    i32 118, label %sw.bb378
  ], !dbg !14378

sw.bb:                                            ; preds = %if.end13
  %9 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14379
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !14379
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14379
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14379
  %type18 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !14379
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 6, !dbg !14379
  %bf.load19 = load i32, i32* %precision, align 4, !dbg !14379
  %bf.clear20 = and i32 %bf.load19, 1023, !dbg !14379
  %11 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14382
  %common21 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !14382
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !14382
  %12 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !14382
  %type23 = bitcast %union.tree_node* %12 to %struct.tree_type*, !dbg !14382
  %precision24 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 6, !dbg !14382
  %bf.load25 = load i32, i32* %precision24, align 4, !dbg !14382
  %bf.clear26 = and i32 %bf.load25, 1023, !dbg !14382
  %cmp27 = icmp ne i32 %bf.clear20, %bf.clear26, !dbg !14383
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !14384

if.then29:                                        ; preds = %sw.bb
  store i32 0, i32* %retval, align 4, !dbg !14385
  br label %return, !dbg !14385

if.end30:                                         ; preds = %sw.bb
  %13 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14386
  %common31 = bitcast %union.tree_node* %13 to %struct.tree_common*, !dbg !14386
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !14386
  %14 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !14386
  %base33 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !14386
  %15 = bitcast %struct.tree_base* %base33 to i64*, !dbg !14386
  %bf.load34 = load i64, i64* %15, align 8, !dbg !14386
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !14386
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !14386
  %cmp37 = icmp eq i32 %bf.cast36, 14, !dbg !14386
  br i1 %cmp37, label %cond.true, label %cond.false, !dbg !14386

cond.true:                                        ; preds = %if.end30
  %16 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14386
  %common39 = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !14386
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !14386
  %17 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !14386
  %call = call i32 @vector_type_mode(%union.tree_node* %17), !dbg !14386
  br label %cond.end, !dbg !14386

cond.false:                                       ; preds = %if.end30
  %18 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14386
  %common41 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !14386
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !14386
  %19 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !14386
  %type43 = bitcast %union.tree_node* %19 to %struct.tree_type*, !dbg !14386
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 6, !dbg !14386
  %bf.load44 = load i32, i32* %mode, align 4, !dbg !14386
  %bf.lshr = lshr i32 %bf.load44, 16, !dbg !14386
  %bf.clear45 = and i32 %bf.lshr, 255, !dbg !14386
  br label %cond.end, !dbg !14386

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear45, %cond.false ], !dbg !14386
  %20 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14388
  %common46 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !14388
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !14388
  %21 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !14388
  %base48 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !14388
  %22 = bitcast %struct.tree_base* %base48 to i64*, !dbg !14388
  %bf.load49 = load i64, i64* %22, align 8, !dbg !14388
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !14388
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !14388
  %cmp52 = icmp eq i32 %bf.cast51, 14, !dbg !14388
  br i1 %cmp52, label %cond.true54, label %cond.false58, !dbg !14388

cond.true54:                                      ; preds = %cond.end
  %23 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14388
  %common55 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !14388
  %type56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 2, !dbg !14388
  %24 = load %union.tree_node*, %union.tree_node** %type56, align 8, !dbg !14388
  %call57 = call i32 @vector_type_mode(%union.tree_node* %24), !dbg !14388
  br label %cond.end66, !dbg !14388

cond.false58:                                     ; preds = %cond.end
  %25 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14388
  %common59 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !14388
  %type60 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common59, i32 0, i32 2, !dbg !14388
  %26 = load %union.tree_node*, %union.tree_node** %type60, align 8, !dbg !14388
  %type61 = bitcast %union.tree_node* %26 to %struct.tree_type*, !dbg !14388
  %mode62 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type61, i32 0, i32 6, !dbg !14388
  %bf.load63 = load i32, i32* %mode62, align 4, !dbg !14388
  %bf.lshr64 = lshr i32 %bf.load63, 16, !dbg !14388
  %bf.clear65 = and i32 %bf.lshr64, 255, !dbg !14388
  br label %cond.end66, !dbg !14388

cond.end66:                                       ; preds = %cond.false58, %cond.true54
  %cond67 = phi i32 [ %call57, %cond.true54 ], [ %bf.clear65, %cond.false58 ], !dbg !14388
  %cmp68 = icmp ne i32 %cond, %cond67, !dbg !14389
  br i1 %cmp68, label %if.then70, label %if.end71, !dbg !14390

if.then70:                                        ; preds = %cond.end66
  store i32 0, i32* %retval, align 4, !dbg !14391
  br label %return, !dbg !14391

if.end71:                                         ; preds = %cond.end66
  %27 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14392
  %28 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14393
  %call72 = call i32 @tree_int_cst_equal(%union.tree_node* %27, %union.tree_node* %28), !dbg !14394
  store i32 %call72, i32* %retval, align 4, !dbg !14395
  br label %return, !dbg !14395

sw.bb73:                                          ; preds = %if.end13
  %29 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14396
  %common74 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !14396
  %type75 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common74, i32 0, i32 2, !dbg !14396
  %30 = load %union.tree_node*, %union.tree_node** %type75, align 8, !dbg !14396
  %type76 = bitcast %union.tree_node* %30 to %struct.tree_type*, !dbg !14396
  %precision77 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type76, i32 0, i32 6, !dbg !14396
  %bf.load78 = load i32, i32* %precision77, align 4, !dbg !14396
  %bf.clear79 = and i32 %bf.load78, 1023, !dbg !14396
  %31 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14398
  %common80 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !14398
  %type81 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common80, i32 0, i32 2, !dbg !14398
  %32 = load %union.tree_node*, %union.tree_node** %type81, align 8, !dbg !14398
  %type82 = bitcast %union.tree_node* %32 to %struct.tree_type*, !dbg !14398
  %precision83 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type82, i32 0, i32 6, !dbg !14398
  %bf.load84 = load i32, i32* %precision83, align 4, !dbg !14398
  %bf.clear85 = and i32 %bf.load84, 1023, !dbg !14398
  %cmp86 = icmp ne i32 %bf.clear79, %bf.clear85, !dbg !14399
  br i1 %cmp86, label %if.then88, label %if.end89, !dbg !14400

if.then88:                                        ; preds = %sw.bb73
  store i32 0, i32* %retval, align 4, !dbg !14401
  br label %return, !dbg !14401

if.end89:                                         ; preds = %sw.bb73
  %33 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14402
  %real_cst = bitcast %union.tree_node* %33 to %struct.tree_real_cst*, !dbg !14402
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !14402
  %34 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !14402
  %35 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14402
  %real_cst90 = bitcast %union.tree_node* %35 to %struct.tree_real_cst*, !dbg !14402
  %real_cst_ptr91 = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst90, i32 0, i32 1, !dbg !14402
  %36 = load %struct.real_value*, %struct.real_value** %real_cst_ptr91, align 8, !dbg !14402
  %call92 = call zeroext i8 @real_identical(%struct.real_value* %34, %struct.real_value* %36), !dbg !14402
  %conv93 = zext i8 %call92 to i32, !dbg !14402
  store i32 %conv93, i32* %retval, align 4, !dbg !14403
  br label %return, !dbg !14403

sw.bb94:                                          ; preds = %if.end13
  %37 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14404
  %common95 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !14404
  %type96 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common95, i32 0, i32 2, !dbg !14404
  %38 = load %union.tree_node*, %union.tree_node** %type96, align 8, !dbg !14404
  %type97 = bitcast %union.tree_node* %38 to %struct.tree_type*, !dbg !14404
  %precision98 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type97, i32 0, i32 6, !dbg !14404
  %bf.load99 = load i32, i32* %precision98, align 4, !dbg !14404
  %bf.clear100 = and i32 %bf.load99, 1023, !dbg !14404
  %39 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14406
  %common101 = bitcast %union.tree_node* %39 to %struct.tree_common*, !dbg !14406
  %type102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common101, i32 0, i32 2, !dbg !14406
  %40 = load %union.tree_node*, %union.tree_node** %type102, align 8, !dbg !14406
  %type103 = bitcast %union.tree_node* %40 to %struct.tree_type*, !dbg !14406
  %precision104 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type103, i32 0, i32 6, !dbg !14406
  %bf.load105 = load i32, i32* %precision104, align 4, !dbg !14406
  %bf.clear106 = and i32 %bf.load105, 1023, !dbg !14406
  %cmp107 = icmp ne i32 %bf.clear100, %bf.clear106, !dbg !14407
  br i1 %cmp107, label %if.then109, label %if.end110, !dbg !14408

if.then109:                                       ; preds = %sw.bb94
  store i32 0, i32* %retval, align 4, !dbg !14409
  br label %return, !dbg !14409

if.end110:                                        ; preds = %sw.bb94
  %41 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14410
  %fixed_cst = bitcast %union.tree_node* %41 to %struct.tree_fixed_cst*, !dbg !14410
  %fixed_cst_ptr = getelementptr inbounds %struct.tree_fixed_cst, %struct.tree_fixed_cst* %fixed_cst, i32 0, i32 1, !dbg !14410
  %42 = load %struct.fixed_value*, %struct.fixed_value** %fixed_cst_ptr, align 8, !dbg !14410
  %43 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14410
  %fixed_cst111 = bitcast %union.tree_node* %43 to %struct.tree_fixed_cst*, !dbg !14410
  %fixed_cst_ptr112 = getelementptr inbounds %struct.tree_fixed_cst, %struct.tree_fixed_cst* %fixed_cst111, i32 0, i32 1, !dbg !14410
  %44 = load %struct.fixed_value*, %struct.fixed_value** %fixed_cst_ptr112, align 8, !dbg !14410
  %call113 = call zeroext i8 @fixed_identical(%struct.fixed_value* %42, %struct.fixed_value* %44), !dbg !14410
  %conv114 = zext i8 %call113 to i32, !dbg !14410
  store i32 %conv114, i32* %retval, align 4, !dbg !14411
  br label %return, !dbg !14411

sw.bb115:                                         ; preds = %if.end13
  %45 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14412
  %common116 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !14412
  %type117 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common116, i32 0, i32 2, !dbg !14412
  %46 = load %union.tree_node*, %union.tree_node** %type117, align 8, !dbg !14412
  %base118 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !14412
  %47 = bitcast %struct.tree_base* %base118 to i64*, !dbg !14412
  %bf.load119 = load i64, i64* %47, align 8, !dbg !14412
  %bf.clear120 = and i64 %bf.load119, 65535, !dbg !14412
  %bf.cast121 = trunc i64 %bf.clear120 to i32, !dbg !14412
  %cmp122 = icmp eq i32 %bf.cast121, 14, !dbg !14412
  br i1 %cmp122, label %cond.true124, label %cond.false128, !dbg !14412

cond.true124:                                     ; preds = %sw.bb115
  %48 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14412
  %common125 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !14412
  %type126 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common125, i32 0, i32 2, !dbg !14412
  %49 = load %union.tree_node*, %union.tree_node** %type126, align 8, !dbg !14412
  %call127 = call i32 @vector_type_mode(%union.tree_node* %49), !dbg !14412
  br label %cond.end136, !dbg !14412

cond.false128:                                    ; preds = %sw.bb115
  %50 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14412
  %common129 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !14412
  %type130 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2, !dbg !14412
  %51 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !14412
  %type131 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !14412
  %mode132 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type131, i32 0, i32 6, !dbg !14412
  %bf.load133 = load i32, i32* %mode132, align 4, !dbg !14412
  %bf.lshr134 = lshr i32 %bf.load133, 16, !dbg !14412
  %bf.clear135 = and i32 %bf.lshr134, 255, !dbg !14412
  br label %cond.end136, !dbg !14412

cond.end136:                                      ; preds = %cond.false128, %cond.true124
  %cond137 = phi i32 [ %call127, %cond.true124 ], [ %bf.clear135, %cond.false128 ], !dbg !14412
  %52 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14414
  %common138 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !14414
  %type139 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common138, i32 0, i32 2, !dbg !14414
  %53 = load %union.tree_node*, %union.tree_node** %type139, align 8, !dbg !14414
  %base140 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !14414
  %54 = bitcast %struct.tree_base* %base140 to i64*, !dbg !14414
  %bf.load141 = load i64, i64* %54, align 8, !dbg !14414
  %bf.clear142 = and i64 %bf.load141, 65535, !dbg !14414
  %bf.cast143 = trunc i64 %bf.clear142 to i32, !dbg !14414
  %cmp144 = icmp eq i32 %bf.cast143, 14, !dbg !14414
  br i1 %cmp144, label %cond.true146, label %cond.false150, !dbg !14414

cond.true146:                                     ; preds = %cond.end136
  %55 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14414
  %common147 = bitcast %union.tree_node* %55 to %struct.tree_common*, !dbg !14414
  %type148 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common147, i32 0, i32 2, !dbg !14414
  %56 = load %union.tree_node*, %union.tree_node** %type148, align 8, !dbg !14414
  %call149 = call i32 @vector_type_mode(%union.tree_node* %56), !dbg !14414
  br label %cond.end158, !dbg !14414

cond.false150:                                    ; preds = %cond.end136
  %57 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14414
  %common151 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !14414
  %type152 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common151, i32 0, i32 2, !dbg !14414
  %58 = load %union.tree_node*, %union.tree_node** %type152, align 8, !dbg !14414
  %type153 = bitcast %union.tree_node* %58 to %struct.tree_type*, !dbg !14414
  %mode154 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type153, i32 0, i32 6, !dbg !14414
  %bf.load155 = load i32, i32* %mode154, align 4, !dbg !14414
  %bf.lshr156 = lshr i32 %bf.load155, 16, !dbg !14414
  %bf.clear157 = and i32 %bf.lshr156, 255, !dbg !14414
  br label %cond.end158, !dbg !14414

cond.end158:                                      ; preds = %cond.false150, %cond.true146
  %cond159 = phi i32 [ %call149, %cond.true146 ], [ %bf.clear157, %cond.false150 ], !dbg !14414
  %cmp160 = icmp ne i32 %cond137, %cond159, !dbg !14415
  br i1 %cmp160, label %if.then162, label %if.end163, !dbg !14416

if.then162:                                       ; preds = %cond.end158
  store i32 0, i32* %retval, align 4, !dbg !14417
  br label %return, !dbg !14417

if.end163:                                        ; preds = %cond.end158
  %59 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14418
  %string = bitcast %union.tree_node* %59 to %struct.tree_string*, !dbg !14418
  %length = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string, i32 0, i32 1, !dbg !14418
  %60 = load i32, i32* %length, align 8, !dbg !14418
  %61 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14419
  %string164 = bitcast %union.tree_node* %61 to %struct.tree_string*, !dbg !14419
  %length165 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string164, i32 0, i32 1, !dbg !14419
  %62 = load i32, i32* %length165, align 8, !dbg !14419
  %cmp166 = icmp eq i32 %60, %62, !dbg !14420
  br i1 %cmp166, label %land.rhs, label %land.end, !dbg !14421

land.rhs:                                         ; preds = %if.end163
  %63 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14422
  %string168 = bitcast %union.tree_node* %63 to %struct.tree_string*, !dbg !14422
  %str = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string168, i32 0, i32 2, !dbg !14422
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %str, i64 0, i64 0, !dbg !14422
  %64 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14423
  %string169 = bitcast %union.tree_node* %64 to %struct.tree_string*, !dbg !14423
  %str170 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string169, i32 0, i32 2, !dbg !14423
  %arraydecay171 = getelementptr inbounds [1 x i8], [1 x i8]* %str170, i64 0, i64 0, !dbg !14423
  %65 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14424
  %string172 = bitcast %union.tree_node* %65 to %struct.tree_string*, !dbg !14424
  %length173 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %string172, i32 0, i32 1, !dbg !14424
  %66 = load i32, i32* %length173, align 8, !dbg !14424
  %conv174 = sext i32 %66 to i64, !dbg !14424
  %call175 = call i32 @memcmp(i8* %arraydecay, i8* %arraydecay171, i64 %conv174), !dbg !14425
  %tobool = icmp ne i32 %call175, 0, !dbg !14426
  %lnot = xor i1 %tobool, true, !dbg !14426
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end163
  %67 = phi i1 [ false, %if.end163 ], [ %lnot, %land.rhs ], !dbg !14427
  %land.ext = zext i1 %67 to i32, !dbg !14421
  store i32 %land.ext, i32* %retval, align 4, !dbg !14428
  br label %return, !dbg !14428

sw.bb176:                                         ; preds = %if.end13
  %68 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14429
  %complex = bitcast %union.tree_node* %68 to %struct.tree_complex*, !dbg !14429
  %real = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex, i32 0, i32 1, !dbg !14429
  %69 = load %union.tree_node*, %union.tree_node** %real, align 8, !dbg !14429
  %70 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14430
  %complex177 = bitcast %union.tree_node* %70 to %struct.tree_complex*, !dbg !14430
  %real178 = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex177, i32 0, i32 1, !dbg !14430
  %71 = load %union.tree_node*, %union.tree_node** %real178, align 8, !dbg !14430
  %call179 = call i32 @compare_constant(%union.tree_node* %69, %union.tree_node* %71), !dbg !14431
  %tobool180 = icmp ne i32 %call179, 0, !dbg !14431
  br i1 %tobool180, label %land.rhs181, label %land.end187, !dbg !14432

land.rhs181:                                      ; preds = %sw.bb176
  %72 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14433
  %complex182 = bitcast %union.tree_node* %72 to %struct.tree_complex*, !dbg !14433
  %imag = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex182, i32 0, i32 2, !dbg !14433
  %73 = load %union.tree_node*, %union.tree_node** %imag, align 8, !dbg !14433
  %74 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14434
  %complex183 = bitcast %union.tree_node* %74 to %struct.tree_complex*, !dbg !14434
  %imag184 = getelementptr inbounds %struct.tree_complex, %struct.tree_complex* %complex183, i32 0, i32 2, !dbg !14434
  %75 = load %union.tree_node*, %union.tree_node** %imag184, align 8, !dbg !14434
  %call185 = call i32 @compare_constant(%union.tree_node* %73, %union.tree_node* %75), !dbg !14435
  %tobool186 = icmp ne i32 %call185, 0, !dbg !14432
  br label %land.end187

land.end187:                                      ; preds = %land.rhs181, %sw.bb176
  %76 = phi i1 [ false, %sw.bb176 ], [ %tobool186, %land.rhs181 ], !dbg !14427
  %land.ext188 = zext i1 %76 to i32, !dbg !14432
  store i32 %land.ext188, i32* %retval, align 4, !dbg !14436
  br label %return, !dbg !14436

sw.bb189:                                         ; preds = %if.end13
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc** %v1, metadata !14437, metadata !DIExpression()), !dbg !14439
  call void @llvm.dbg.declare(metadata %struct.VEC_constructor_elt_gc** %v2, metadata !14440, metadata !DIExpression()), !dbg !14441
  call void @llvm.dbg.declare(metadata i64* %idx, metadata !14442, metadata !DIExpression()), !dbg !14443
  %77 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14444
  %common190 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !14444
  %type191 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common190, i32 0, i32 2, !dbg !14444
  %78 = load %union.tree_node*, %union.tree_node** %type191, align 8, !dbg !14444
  %base192 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !14444
  %79 = bitcast %struct.tree_base* %base192 to i64*, !dbg !14444
  %bf.load193 = load i64, i64* %79, align 8, !dbg !14444
  %bf.clear194 = and i64 %bf.load193, 65535, !dbg !14444
  %bf.cast195 = trunc i64 %bf.clear194 to i32, !dbg !14444
  store i32 %bf.cast195, i32* %typecode, align 4, !dbg !14445
  %80 = load i32, i32* %typecode, align 4, !dbg !14446
  %81 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14448
  %common196 = bitcast %union.tree_node* %81 to %struct.tree_common*, !dbg !14448
  %type197 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common196, i32 0, i32 2, !dbg !14448
  %82 = load %union.tree_node*, %union.tree_node** %type197, align 8, !dbg !14448
  %base198 = bitcast %union.tree_node* %82 to %struct.tree_base*, !dbg !14448
  %83 = bitcast %struct.tree_base* %base198 to i64*, !dbg !14448
  %bf.load199 = load i64, i64* %83, align 8, !dbg !14448
  %bf.clear200 = and i64 %bf.load199, 65535, !dbg !14448
  %bf.cast201 = trunc i64 %bf.clear200 to i32, !dbg !14448
  %cmp202 = icmp ne i32 %80, %bf.cast201, !dbg !14449
  br i1 %cmp202, label %if.then204, label %if.end205, !dbg !14450

if.then204:                                       ; preds = %sw.bb189
  store i32 0, i32* %retval, align 4, !dbg !14451
  br label %return, !dbg !14451

if.end205:                                        ; preds = %sw.bb189
  %84 = load i32, i32* %typecode, align 4, !dbg !14452
  %cmp206 = icmp eq i32 %84, 15, !dbg !14454
  br i1 %cmp206, label %if.then208, label %if.else, !dbg !14455

if.then208:                                       ; preds = %if.end205
  call void @llvm.dbg.declare(metadata i64* %size_1, metadata !14456, metadata !DIExpression()), !dbg !14458
  %85 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14459
  %common209 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !14459
  %type210 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common209, i32 0, i32 2, !dbg !14459
  %86 = load %union.tree_node*, %union.tree_node** %type210, align 8, !dbg !14459
  %call211 = call i64 @int_size_in_bytes(%union.tree_node* %86), !dbg !14460
  store i64 %call211, i64* %size_1, align 8, !dbg !14458
  %87 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14461
  %common212 = bitcast %union.tree_node* %87 to %struct.tree_common*, !dbg !14461
  %type213 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common212, i32 0, i32 2, !dbg !14461
  %88 = load %union.tree_node*, %union.tree_node** %type213, align 8, !dbg !14461
  %base214 = bitcast %union.tree_node* %88 to %struct.tree_base*, !dbg !14461
  %89 = bitcast %struct.tree_base* %base214 to i64*, !dbg !14461
  %bf.load215 = load i64, i64* %89, align 8, !dbg !14461
  %bf.clear216 = and i64 %bf.load215, 65535, !dbg !14461
  %bf.cast217 = trunc i64 %bf.clear216 to i32, !dbg !14461
  %cmp218 = icmp eq i32 %bf.cast217, 14, !dbg !14461
  br i1 %cmp218, label %cond.true220, label %cond.false224, !dbg !14461

cond.true220:                                     ; preds = %if.then208
  %90 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14461
  %common221 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !14461
  %type222 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common221, i32 0, i32 2, !dbg !14461
  %91 = load %union.tree_node*, %union.tree_node** %type222, align 8, !dbg !14461
  %call223 = call i32 @vector_type_mode(%union.tree_node* %91), !dbg !14461
  br label %cond.end232, !dbg !14461

cond.false224:                                    ; preds = %if.then208
  %92 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14461
  %common225 = bitcast %union.tree_node* %92 to %struct.tree_common*, !dbg !14461
  %type226 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common225, i32 0, i32 2, !dbg !14461
  %93 = load %union.tree_node*, %union.tree_node** %type226, align 8, !dbg !14461
  %type227 = bitcast %union.tree_node* %93 to %struct.tree_type*, !dbg !14461
  %mode228 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type227, i32 0, i32 6, !dbg !14461
  %bf.load229 = load i32, i32* %mode228, align 4, !dbg !14461
  %bf.lshr230 = lshr i32 %bf.load229, 16, !dbg !14461
  %bf.clear231 = and i32 %bf.lshr230, 255, !dbg !14461
  br label %cond.end232, !dbg !14461

cond.end232:                                      ; preds = %cond.false224, %cond.true220
  %cond233 = phi i32 [ %call223, %cond.true220 ], [ %bf.clear231, %cond.false224 ], !dbg !14461
  %94 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14463
  %common234 = bitcast %union.tree_node* %94 to %struct.tree_common*, !dbg !14463
  %type235 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common234, i32 0, i32 2, !dbg !14463
  %95 = load %union.tree_node*, %union.tree_node** %type235, align 8, !dbg !14463
  %base236 = bitcast %union.tree_node* %95 to %struct.tree_base*, !dbg !14463
  %96 = bitcast %struct.tree_base* %base236 to i64*, !dbg !14463
  %bf.load237 = load i64, i64* %96, align 8, !dbg !14463
  %bf.clear238 = and i64 %bf.load237, 65535, !dbg !14463
  %bf.cast239 = trunc i64 %bf.clear238 to i32, !dbg !14463
  %cmp240 = icmp eq i32 %bf.cast239, 14, !dbg !14463
  br i1 %cmp240, label %cond.true242, label %cond.false246, !dbg !14463

cond.true242:                                     ; preds = %cond.end232
  %97 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14463
  %common243 = bitcast %union.tree_node* %97 to %struct.tree_common*, !dbg !14463
  %type244 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common243, i32 0, i32 2, !dbg !14463
  %98 = load %union.tree_node*, %union.tree_node** %type244, align 8, !dbg !14463
  %call245 = call i32 @vector_type_mode(%union.tree_node* %98), !dbg !14463
  br label %cond.end254, !dbg !14463

cond.false246:                                    ; preds = %cond.end232
  %99 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14463
  %common247 = bitcast %union.tree_node* %99 to %struct.tree_common*, !dbg !14463
  %type248 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common247, i32 0, i32 2, !dbg !14463
  %100 = load %union.tree_node*, %union.tree_node** %type248, align 8, !dbg !14463
  %type249 = bitcast %union.tree_node* %100 to %struct.tree_type*, !dbg !14463
  %mode250 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type249, i32 0, i32 6, !dbg !14463
  %bf.load251 = load i32, i32* %mode250, align 4, !dbg !14463
  %bf.lshr252 = lshr i32 %bf.load251, 16, !dbg !14463
  %bf.clear253 = and i32 %bf.lshr252, 255, !dbg !14463
  br label %cond.end254, !dbg !14463

cond.end254:                                      ; preds = %cond.false246, %cond.true242
  %cond255 = phi i32 [ %call245, %cond.true242 ], [ %bf.clear253, %cond.false246 ], !dbg !14463
  %cmp256 = icmp ne i32 %cond233, %cond255, !dbg !14464
  br i1 %cmp256, label %if.then266, label %lor.lhs.false, !dbg !14465

lor.lhs.false:                                    ; preds = %cond.end254
  %101 = load i64, i64* %size_1, align 8, !dbg !14466
  %cmp258 = icmp eq i64 %101, -1, !dbg !14467
  br i1 %cmp258, label %if.then266, label %lor.lhs.false260, !dbg !14468

lor.lhs.false260:                                 ; preds = %lor.lhs.false
  %102 = load i64, i64* %size_1, align 8, !dbg !14469
  %103 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14470
  %common261 = bitcast %union.tree_node* %103 to %struct.tree_common*, !dbg !14470
  %type262 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common261, i32 0, i32 2, !dbg !14470
  %104 = load %union.tree_node*, %union.tree_node** %type262, align 8, !dbg !14470
  %call263 = call i64 @int_size_in_bytes(%union.tree_node* %104), !dbg !14471
  %cmp264 = icmp ne i64 %102, %call263, !dbg !14472
  br i1 %cmp264, label %if.then266, label %if.end267, !dbg !14473

if.then266:                                       ; preds = %lor.lhs.false260, %lor.lhs.false, %cond.end254
  store i32 0, i32* %retval, align 4, !dbg !14474
  br label %return, !dbg !14474

if.end267:                                        ; preds = %lor.lhs.false260
  br label %if.end276, !dbg !14475

if.else:                                          ; preds = %if.end205
  %105 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14476
  %common268 = bitcast %union.tree_node* %105 to %struct.tree_common*, !dbg !14476
  %type269 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common268, i32 0, i32 2, !dbg !14476
  %106 = load %union.tree_node*, %union.tree_node** %type269, align 8, !dbg !14476
  %107 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14479
  %common270 = bitcast %union.tree_node* %107 to %struct.tree_common*, !dbg !14479
  %type271 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common270, i32 0, i32 2, !dbg !14479
  %108 = load %union.tree_node*, %union.tree_node** %type271, align 8, !dbg !14479
  %cmp272 = icmp ne %union.tree_node* %106, %108, !dbg !14480
  br i1 %cmp272, label %if.then274, label %if.end275, !dbg !14481

if.then274:                                       ; preds = %if.else
  store i32 0, i32* %retval, align 4, !dbg !14482
  br label %return, !dbg !14482

if.end275:                                        ; preds = %if.else
  br label %if.end276

if.end276:                                        ; preds = %if.end275, %if.end267
  %109 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14483
  %constructor = bitcast %union.tree_node* %109 to %struct.tree_constructor*, !dbg !14483
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor, i32 0, i32 1, !dbg !14483
  %110 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !14483
  store %struct.VEC_constructor_elt_gc* %110, %struct.VEC_constructor_elt_gc** %v1, align 8, !dbg !14484
  %111 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14485
  %constructor277 = bitcast %union.tree_node* %111 to %struct.tree_constructor*, !dbg !14485
  %elts278 = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %constructor277, i32 0, i32 1, !dbg !14485
  %112 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts278, align 8, !dbg !14485
  store %struct.VEC_constructor_elt_gc* %112, %struct.VEC_constructor_elt_gc** %v2, align 8, !dbg !14486
  %113 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v1, align 8, !dbg !14487
  %tobool279 = icmp ne %struct.VEC_constructor_elt_gc* %113, null, !dbg !14487
  br i1 %tobool279, label %cond.true280, label %cond.false282, !dbg !14487

cond.true280:                                     ; preds = %if.end276
  %114 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v1, align 8, !dbg !14487
  %base281 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %114, i32 0, i32 0, !dbg !14487
  br label %cond.end283, !dbg !14487

cond.false282:                                    ; preds = %if.end276
  br label %cond.end283, !dbg !14487

cond.end283:                                      ; preds = %cond.false282, %cond.true280
  %cond284 = phi %struct.VEC_constructor_elt_base* [ %base281, %cond.true280 ], [ null, %cond.false282 ], !dbg !14487
  %call285 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond284), !dbg !14487
  %115 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v2, align 8, !dbg !14489
  %tobool286 = icmp ne %struct.VEC_constructor_elt_gc* %115, null, !dbg !14489
  br i1 %tobool286, label %cond.true287, label %cond.false289, !dbg !14489

cond.true287:                                     ; preds = %cond.end283
  %116 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v2, align 8, !dbg !14489
  %base288 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %116, i32 0, i32 0, !dbg !14489
  br label %cond.end290, !dbg !14489

cond.false289:                                    ; preds = %cond.end283
  br label %cond.end290, !dbg !14489

cond.end290:                                      ; preds = %cond.false289, %cond.true287
  %cond291 = phi %struct.VEC_constructor_elt_base* [ %base288, %cond.true287 ], [ null, %cond.false289 ], !dbg !14489
  %call292 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond291), !dbg !14489
  %cmp293 = icmp ne i32 %call285, %call292, !dbg !14490
  br i1 %cmp293, label %if.then295, label %if.end296, !dbg !14491

if.then295:                                       ; preds = %cond.end290
  store i32 0, i32* %retval, align 4, !dbg !14492
  br label %return, !dbg !14492

if.end296:                                        ; preds = %cond.end290
  store i64 0, i64* %idx, align 8, !dbg !14493
  br label %for.cond, !dbg !14495

for.cond:                                         ; preds = %for.inc, %if.end296
  %117 = load i64, i64* %idx, align 8, !dbg !14496
  %118 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v1, align 8, !dbg !14498
  %tobool297 = icmp ne %struct.VEC_constructor_elt_gc* %118, null, !dbg !14498
  br i1 %tobool297, label %cond.true298, label %cond.false300, !dbg !14498

cond.true298:                                     ; preds = %for.cond
  %119 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v1, align 8, !dbg !14498
  %base299 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %119, i32 0, i32 0, !dbg !14498
  br label %cond.end301, !dbg !14498

cond.false300:                                    ; preds = %for.cond
  br label %cond.end301, !dbg !14498

cond.end301:                                      ; preds = %cond.false300, %cond.true298
  %cond302 = phi %struct.VEC_constructor_elt_base* [ %base299, %cond.true298 ], [ null, %cond.false300 ], !dbg !14498
  %call303 = call i32 @VEC_constructor_elt_base_length(%struct.VEC_constructor_elt_base* %cond302), !dbg !14498
  %conv304 = zext i32 %call303 to i64, !dbg !14498
  %cmp305 = icmp ult i64 %117, %conv304, !dbg !14499
  br i1 %cmp305, label %for.body, label %for.end, !dbg !14500

for.body:                                         ; preds = %cond.end301
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %c1, metadata !14501, metadata !DIExpression()), !dbg !14503
  %120 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v1, align 8, !dbg !14504
  %tobool307 = icmp ne %struct.VEC_constructor_elt_gc* %120, null, !dbg !14504
  br i1 %tobool307, label %cond.true308, label %cond.false310, !dbg !14504

cond.true308:                                     ; preds = %for.body
  %121 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v1, align 8, !dbg !14504
  %base309 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %121, i32 0, i32 0, !dbg !14504
  br label %cond.end311, !dbg !14504

cond.false310:                                    ; preds = %for.body
  br label %cond.end311, !dbg !14504

cond.end311:                                      ; preds = %cond.false310, %cond.true308
  %cond312 = phi %struct.VEC_constructor_elt_base* [ %base309, %cond.true308 ], [ null, %cond.false310 ], !dbg !14504
  %122 = load i64, i64* %idx, align 8, !dbg !14504
  %conv313 = trunc i64 %122 to i32, !dbg !14504
  %call314 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond312, i32 %conv313), !dbg !14504
  store %struct.constructor_elt_d* %call314, %struct.constructor_elt_d** %c1, align 8, !dbg !14503
  call void @llvm.dbg.declare(metadata %struct.constructor_elt_d** %c2, metadata !14505, metadata !DIExpression()), !dbg !14506
  %123 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v2, align 8, !dbg !14507
  %tobool315 = icmp ne %struct.VEC_constructor_elt_gc* %123, null, !dbg !14507
  br i1 %tobool315, label %cond.true316, label %cond.false318, !dbg !14507

cond.true316:                                     ; preds = %cond.end311
  %124 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %v2, align 8, !dbg !14507
  %base317 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %124, i32 0, i32 0, !dbg !14507
  br label %cond.end319, !dbg !14507

cond.false318:                                    ; preds = %cond.end311
  br label %cond.end319, !dbg !14507

cond.end319:                                      ; preds = %cond.false318, %cond.true316
  %cond320 = phi %struct.VEC_constructor_elt_base* [ %base317, %cond.true316 ], [ null, %cond.false318 ], !dbg !14507
  %125 = load i64, i64* %idx, align 8, !dbg !14507
  %conv321 = trunc i64 %125 to i32, !dbg !14507
  %call322 = call %struct.constructor_elt_d* @VEC_constructor_elt_base_index(%struct.VEC_constructor_elt_base* %cond320, i32 %conv321), !dbg !14507
  store %struct.constructor_elt_d* %call322, %struct.constructor_elt_d** %c2, align 8, !dbg !14506
  %126 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %c1, align 8, !dbg !14508
  %value = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %126, i32 0, i32 1, !dbg !14510
  %127 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !14510
  %128 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %c2, align 8, !dbg !14511
  %value323 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %128, i32 0, i32 1, !dbg !14512
  %129 = load %union.tree_node*, %union.tree_node** %value323, align 8, !dbg !14512
  %call324 = call i32 @compare_constant(%union.tree_node* %127, %union.tree_node* %129), !dbg !14513
  %tobool325 = icmp ne i32 %call324, 0, !dbg !14513
  br i1 %tobool325, label %if.end327, label %if.then326, !dbg !14514

if.then326:                                       ; preds = %cond.end319
  store i32 0, i32* %retval, align 4, !dbg !14515
  br label %return, !dbg !14515

if.end327:                                        ; preds = %cond.end319
  %130 = load i32, i32* %typecode, align 4, !dbg !14516
  %cmp328 = icmp eq i32 %130, 15, !dbg !14518
  br i1 %cmp328, label %if.then330, label %if.else336, !dbg !14519

if.then330:                                       ; preds = %if.end327
  %131 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %c1, align 8, !dbg !14520
  %index = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %131, i32 0, i32 0, !dbg !14523
  %132 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !14523
  %133 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %c2, align 8, !dbg !14524
  %index331 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %133, i32 0, i32 0, !dbg !14525
  %134 = load %union.tree_node*, %union.tree_node** %index331, align 8, !dbg !14525
  %call332 = call i32 @compare_constant(%union.tree_node* %132, %union.tree_node* %134), !dbg !14526
  %tobool333 = icmp ne i32 %call332, 0, !dbg !14526
  br i1 %tobool333, label %if.end335, label %if.then334, !dbg !14527

if.then334:                                       ; preds = %if.then330
  store i32 0, i32* %retval, align 4, !dbg !14528
  br label %return, !dbg !14528

if.end335:                                        ; preds = %if.then330
  br label %if.end343, !dbg !14529

if.else336:                                       ; preds = %if.end327
  %135 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %c1, align 8, !dbg !14530
  %index337 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %135, i32 0, i32 0, !dbg !14533
  %136 = load %union.tree_node*, %union.tree_node** %index337, align 8, !dbg !14533
  %137 = load %struct.constructor_elt_d*, %struct.constructor_elt_d** %c2, align 8, !dbg !14534
  %index338 = getelementptr inbounds %struct.constructor_elt_d, %struct.constructor_elt_d* %137, i32 0, i32 0, !dbg !14535
  %138 = load %union.tree_node*, %union.tree_node** %index338, align 8, !dbg !14535
  %cmp339 = icmp ne %union.tree_node* %136, %138, !dbg !14536
  br i1 %cmp339, label %if.then341, label %if.end342, !dbg !14537

if.then341:                                       ; preds = %if.else336
  store i32 0, i32* %retval, align 4, !dbg !14538
  br label %return, !dbg !14538

if.end342:                                        ; preds = %if.else336
  br label %if.end343

if.end343:                                        ; preds = %if.end342, %if.end335
  br label %for.inc, !dbg !14539

for.inc:                                          ; preds = %if.end343
  %139 = load i64, i64* %idx, align 8, !dbg !14540
  %inc = add i64 %139, 1, !dbg !14540
  store i64 %inc, i64* %idx, align 8, !dbg !14540
  br label %for.cond, !dbg !14541, !llvm.loop !14542

for.end:                                          ; preds = %cond.end301
  store i32 1, i32* %retval, align 4, !dbg !14544
  br label %return, !dbg !14544

sw.bb344:                                         ; preds = %if.end13, %if.end13
  call void @llvm.dbg.declare(metadata %struct.addr_const* %value1, metadata !14545, metadata !DIExpression()), !dbg !14547
  call void @llvm.dbg.declare(metadata %struct.addr_const* %value2, metadata !14548, metadata !DIExpression()), !dbg !14549
  %140 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14550
  call void @decode_addr_const(%union.tree_node* %140, %struct.addr_const* %value1), !dbg !14551
  %141 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14552
  call void @decode_addr_const(%union.tree_node* %141, %struct.addr_const* %value2), !dbg !14553
  %offset = getelementptr inbounds %struct.addr_const, %struct.addr_const* %value1, i32 0, i32 1, !dbg !14554
  %142 = load i64, i64* %offset, align 8, !dbg !14554
  %offset345 = getelementptr inbounds %struct.addr_const, %struct.addr_const* %value2, i32 0, i32 1, !dbg !14555
  %143 = load i64, i64* %offset345, align 8, !dbg !14555
  %cmp346 = icmp eq i64 %142, %143, !dbg !14556
  br i1 %cmp346, label %land.rhs348, label %land.end358, !dbg !14557

land.rhs348:                                      ; preds = %sw.bb344
  %base349 = getelementptr inbounds %struct.addr_const, %struct.addr_const* %value1, i32 0, i32 0, !dbg !14558
  %144 = load %struct.rtx_def*, %struct.rtx_def** %base349, align 8, !dbg !14558
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1, !dbg !14558
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !14558
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !14558
  %rt_str = bitcast %union.rtunion_def* %arrayidx to i8**, !dbg !14558
  %145 = load i8*, i8** %rt_str, align 8, !dbg !14558
  %base350 = getelementptr inbounds %struct.addr_const, %struct.addr_const* %value2, i32 0, i32 0, !dbg !14559
  %146 = load %struct.rtx_def*, %struct.rtx_def** %base350, align 8, !dbg !14559
  %u351 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1, !dbg !14559
  %fld352 = bitcast %union.u* %u351 to [1 x %union.rtunion_def]*, !dbg !14559
  %arrayidx353 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld352, i64 0, i64 0, !dbg !14559
  %rt_str354 = bitcast %union.rtunion_def* %arrayidx353 to i8**, !dbg !14559
  %147 = load i8*, i8** %rt_str354, align 8, !dbg !14559
  %call355 = call i32 @strcmp(i8* %145, i8* %147), !dbg !14560
  %cmp356 = icmp eq i32 %call355, 0, !dbg !14561
  br label %land.end358

land.end358:                                      ; preds = %land.rhs348, %sw.bb344
  %148 = phi i1 [ false, %sw.bb344 ], [ %cmp356, %land.rhs348 ], !dbg !14562
  %land.ext359 = zext i1 %148 to i32, !dbg !14557
  store i32 %land.ext359, i32* %retval, align 4, !dbg !14563
  br label %return, !dbg !14563

sw.bb360:                                         ; preds = %if.end13, %if.end13, %if.end13, %if.end13
  %149 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14564
  %exp = bitcast %union.tree_node* %149 to %struct.tree_exp*, !dbg !14564
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !14564
  %arrayidx361 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !14564
  %150 = load %union.tree_node*, %union.tree_node** %arrayidx361, align 8, !dbg !14564
  %151 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14565
  %exp362 = bitcast %union.tree_node* %151 to %struct.tree_exp*, !dbg !14565
  %operands363 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp362, i32 0, i32 3, !dbg !14565
  %arrayidx364 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands363, i64 0, i64 0, !dbg !14565
  %152 = load %union.tree_node*, %union.tree_node** %arrayidx364, align 8, !dbg !14565
  %call365 = call i32 @compare_constant(%union.tree_node* %150, %union.tree_node* %152), !dbg !14566
  %tobool366 = icmp ne i32 %call365, 0, !dbg !14566
  br i1 %tobool366, label %land.rhs367, label %land.end376, !dbg !14567

land.rhs367:                                      ; preds = %sw.bb360
  %153 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14568
  %exp368 = bitcast %union.tree_node* %153 to %struct.tree_exp*, !dbg !14568
  %operands369 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp368, i32 0, i32 3, !dbg !14568
  %arrayidx370 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands369, i64 0, i64 1, !dbg !14568
  %154 = load %union.tree_node*, %union.tree_node** %arrayidx370, align 8, !dbg !14568
  %155 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14569
  %exp371 = bitcast %union.tree_node* %155 to %struct.tree_exp*, !dbg !14569
  %operands372 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp371, i32 0, i32 3, !dbg !14569
  %arrayidx373 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands372, i64 0, i64 1, !dbg !14569
  %156 = load %union.tree_node*, %union.tree_node** %arrayidx373, align 8, !dbg !14569
  %call374 = call i32 @compare_constant(%union.tree_node* %154, %union.tree_node* %156), !dbg !14570
  %tobool375 = icmp ne i32 %call374, 0, !dbg !14567
  br label %land.end376

land.end376:                                      ; preds = %land.rhs367, %sw.bb360
  %157 = phi i1 [ false, %sw.bb360 ], [ %tobool375, %land.rhs367 ], !dbg !14427
  %land.ext377 = zext i1 %157 to i32, !dbg !14567
  store i32 %land.ext377, i32* %retval, align 4, !dbg !14571
  br label %return, !dbg !14571

sw.bb378:                                         ; preds = %if.end13, %if.end13, %if.end13
  %158 = load %union.tree_node*, %union.tree_node** %t1.addr, align 8, !dbg !14572
  %exp379 = bitcast %union.tree_node* %158 to %struct.tree_exp*, !dbg !14572
  %operands380 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp379, i32 0, i32 3, !dbg !14572
  %arrayidx381 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands380, i64 0, i64 0, !dbg !14572
  %159 = load %union.tree_node*, %union.tree_node** %arrayidx381, align 8, !dbg !14572
  %160 = load %union.tree_node*, %union.tree_node** %t2.addr, align 8, !dbg !14573
  %exp382 = bitcast %union.tree_node* %160 to %struct.tree_exp*, !dbg !14573
  %operands383 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp382, i32 0, i32 3, !dbg !14573
  %arrayidx384 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands383, i64 0, i64 0, !dbg !14573
  %161 = load %union.tree_node*, %union.tree_node** %arrayidx384, align 8, !dbg !14573
  %call385 = call i32 @compare_constant(%union.tree_node* %159, %union.tree_node* %161), !dbg !14574
  store i32 %call385, i32* %retval, align 4, !dbg !14575
  br label %return, !dbg !14575

sw.default:                                       ; preds = %if.end13
  store i32 0, i32* %retval, align 4, !dbg !14576
  br label %return, !dbg !14576

return:                                           ; preds = %sw.default, %sw.bb378, %land.end376, %land.end358, %for.end, %if.then341, %if.then334, %if.then326, %if.then295, %if.then274, %if.then266, %if.then204, %land.end187, %land.end, %if.then162, %if.end110, %if.then109, %if.end89, %if.then88, %if.end71, %if.then70, %if.then29, %if.then12, %if.then4, %if.then
  %162 = load i32, i32* %retval, align 4, !dbg !14577
  ret i32 %162, !dbg !14577
}

declare dso_local i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @real_identical(%struct.real_value*, %struct.real_value*) #2

declare dso_local zeroext i8 @fixed_identical(%struct.fixed_value*, %struct.fixed_value*) #2

declare dso_local i32 @memcmp(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @asm_output_aligned_bss(%struct._IO_FILE* %file, %union.tree_node* %decl, i8* %name, i64 %size, i32 %align) #0 !dbg !14578 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %align.addr = alloca i32, align 4
  %size6 = alloca i64, align 8
  %size_ = alloca i64, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !14581, metadata !DIExpression()), !dbg !14582
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !14583, metadata !DIExpression()), !dbg !14584
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !14585, metadata !DIExpression()), !dbg !14586
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !14587, metadata !DIExpression()), !dbg !14588
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !14589, metadata !DIExpression()), !dbg !14590
  %0 = load %union.section*, %union.section** @bss_section, align 8, !dbg !14591
  call void @switch_to_section(%union.section* %0), !dbg !14592
  %1 = load i32, i32* %align.addr, align 4, !dbg !14593
  %div = sdiv i32 %1, 8, !dbg !14593
  %conv = sext i32 %div to i64, !dbg !14593
  %call = call i32 @floor_log2(i64 %conv), !dbg !14593
  %cmp = icmp ne i32 %call, 0, !dbg !14593
  br i1 %cmp, label %if.then, label %if.end, !dbg !14595

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14593
  %3 = load i32, i32* %align.addr, align 4, !dbg !14593
  %div2 = sdiv i32 %3, 8, !dbg !14593
  %conv3 = sext i32 %div2 to i64, !dbg !14593
  %call4 = call i32 @floor_log2(i64 %conv3), !dbg !14593
  %shl = shl i32 1, %call4, !dbg !14593
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.57, i64 0, i64 0), i32 %shl), !dbg !14593
  br label %if.end, !dbg !14593

if.end:                                           ; preds = %if.then, %entry
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14596
  store %union.tree_node* %4, %union.tree_node** @last_assemble_variable_decl, align 8, !dbg !14597
  br label %do.body, !dbg !14598

do.body:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i64* %size6, metadata !14599, metadata !DIExpression()), !dbg !14601
  br label %do.body7, !dbg !14602

do.body7:                                         ; preds = %do.body
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14604
  %call8 = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i64 0, i64 0), %struct._IO_FILE* %5), !dbg !14604
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14604
  %7 = load i8*, i8** %name.addr, align 8, !dbg !14604
  call void @assemble_name(%struct._IO_FILE* %6, i8* %7), !dbg !14604
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14604
  %call9 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i64 0, i64 0), %struct._IO_FILE* %8), !dbg !14604
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14604
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.170, i64 0, i64 0)), !dbg !14604
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14604
  %call11 = call i32 @putc(i32 10, %struct._IO_FILE* %10), !dbg !14604
  br label %do.end, !dbg !14604

do.end:                                           ; preds = %do.body7
  store i32 0, i32* @size_directive_output, align 4, !dbg !14601
  %11 = load i32, i32* @flag_inhibit_size_directive, align 4, !dbg !14606
  %tobool = icmp ne i32 %11, 0, !dbg !14606
  br i1 %tobool, label %if.end22, label %land.lhs.true, !dbg !14606

land.lhs.true:                                    ; preds = %do.end
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14606
  %tobool12 = icmp ne %union.tree_node* %12, null, !dbg !14606
  br i1 %tobool12, label %land.lhs.true13, label %if.end22, !dbg !14606

land.lhs.true13:                                  ; preds = %land.lhs.true
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14606
  %decl_common = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !14606
  %size14 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !14606
  %14 = load %union.tree_node*, %union.tree_node** %size14, align 8, !dbg !14606
  %tobool15 = icmp ne %union.tree_node* %14, null, !dbg !14606
  br i1 %tobool15, label %if.then16, label %if.end22, !dbg !14601

if.then16:                                        ; preds = %land.lhs.true13
  store i32 1, i32* @size_directive_output, align 4, !dbg !14608
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !14608
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !14608
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !14608
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !14608
  %call17 = call i64 @int_size_in_bytes(%union.tree_node* %16), !dbg !14608
  store i64 %call17, i64* %size6, align 8, !dbg !14608
  br label %do.body18, !dbg !14608

do.body18:                                        ; preds = %if.then16
  call void @llvm.dbg.declare(metadata i64* %size_, metadata !14610, metadata !DIExpression()), !dbg !14612
  %17 = load i64, i64* %size6, align 8, !dbg !14612
  store i64 %17, i64* %size_, align 8, !dbg !14612
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14612
  %call19 = call i32 @fputs(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i64 0, i64 0), %struct._IO_FILE* %18), !dbg !14612
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14612
  %20 = load i8*, i8** %name.addr, align 8, !dbg !14612
  call void @assemble_name(%struct._IO_FILE* %19, i8* %20), !dbg !14612
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14612
  %22 = load i64, i64* %size_, align 8, !dbg !14612
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.171, i64 0, i64 0), i64 %22), !dbg !14612
  br label %do.end21, !dbg !14612

do.end21:                                         ; preds = %do.body18
  br label %if.end22, !dbg !14608

if.end22:                                         ; preds = %do.end21, %land.lhs.true13, %land.lhs.true, %do.end
  br label %do.body23, !dbg !14601

do.body23:                                        ; preds = %if.end22
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14613
  %24 = load i8*, i8** %name.addr, align 8, !dbg !14613
  call void @assemble_name(%struct._IO_FILE* %23, i8* %24), !dbg !14613
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14613
  %call24 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0), %struct._IO_FILE* %25), !dbg !14613
  br label %do.end25, !dbg !14613

do.end25:                                         ; preds = %do.body23
  br label %do.end26, !dbg !14601

do.end26:                                         ; preds = %do.end25
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !14615
  %27 = load i64, i64* %size.addr, align 8, !dbg !14615
  %tobool27 = icmp ne i64 %27, 0, !dbg !14615
  br i1 %tobool27, label %cond.true, label %cond.false, !dbg !14615

cond.true:                                        ; preds = %do.end26
  %28 = load i64, i64* %size.addr, align 8, !dbg !14615
  br label %cond.end, !dbg !14615

cond.false:                                       ; preds = %do.end26
  br label %cond.end, !dbg !14615

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %28, %cond.true ], [ 1, %cond.false ], !dbg !14615
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i64 0, i64 0), i64 %cond), !dbg !14615
  ret void, !dbg !14616
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @compute_reloc_for_rtx_1(%struct.rtx_def** %xp, i8* %data) #0 !dbg !14617 {
entry:
  %xp.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %preloc = alloca i32*, align 8
  %x = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %xp, %struct.rtx_def*** %xp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %xp.addr, metadata !14618, metadata !DIExpression()), !dbg !14619
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !14620, metadata !DIExpression()), !dbg !14621
  call void @llvm.dbg.declare(metadata i32** %preloc, metadata !14622, metadata !DIExpression()), !dbg !14623
  %0 = load i8*, i8** %data.addr, align 8, !dbg !14624
  %1 = bitcast i8* %0 to i32*, !dbg !14625
  store i32* %1, i32** %preloc, align 8, !dbg !14623
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !14626, metadata !DIExpression()), !dbg !14627
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %xp.addr, align 8, !dbg !14628
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8, !dbg !14629
  store %struct.rtx_def* %3, %struct.rtx_def** %x, align 8, !dbg !14627
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !14630
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !14630
  %bf.load = load i32, i32* %5, align 8, !dbg !14630
  %bf.clear = and i32 %bf.load, 65535, !dbg !14630
  switch i32 %bf.clear, label %sw.default [
    i32 45, label %sw.bb
    i32 44, label %sw.bb1
  ], !dbg !14631

sw.bb:                                            ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !14632
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !14632
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !14632
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !14632
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !14632
  %7 = load i32, i32* %rt_int, align 8, !dbg !14632
  %and = and i32 %7, 2, !dbg !14632
  %cmp = icmp ne i32 %and, 0, !dbg !14632
  %8 = zext i1 %cmp to i64, !dbg !14632
  %cond = select i1 %cmp, i32 1, i32 2, !dbg !14632
  %9 = load i32*, i32** %preloc, align 8, !dbg !14634
  %10 = load i32, i32* %9, align 4, !dbg !14635
  %or = or i32 %10, %cond, !dbg !14635
  store i32 %or, i32* %9, align 4, !dbg !14635
  br label %sw.epilog, !dbg !14636

sw.bb1:                                           ; preds = %entry
  %11 = load i32*, i32** %preloc, align 8, !dbg !14637
  %12 = load i32, i32* %11, align 4, !dbg !14638
  %or2 = or i32 %12, 1, !dbg !14638
  store i32 %or2, i32* %11, align 4, !dbg !14638
  br label %sw.epilog, !dbg !14639

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !14640

sw.epilog:                                        ; preds = %sw.default, %sw.bb1, %sw.bb
  ret i32 0, !dbg !14641
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_gc_reserve(%struct.VEC_rtx_gc** %vec_, i32 %alloc_) #0 !dbg !14642 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_rtx_gc** %vec_, %struct.VEC_rtx_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc*** %vec_.addr, metadata !14645, metadata !DIExpression()), !dbg !14646
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !14647, metadata !DIExpression()), !dbg !14646
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !14648, metadata !DIExpression()), !dbg !14646
  %0 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !14646
  %1 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %0, align 8, !dbg !14646
  %tobool = icmp ne %struct.VEC_rtx_gc* %1, null, !dbg !14646
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14646

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !14646
  %3 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %2, align 8, !dbg !14646
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %3, i32 0, i32 0, !dbg !14646
  br label %cond.end, !dbg !14646

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !14646

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14646
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !14646
  %call = call i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %cond, i32 %4), !dbg !14646
  %tobool1 = icmp ne i32 %call, 0, !dbg !14646
  %lnot = xor i1 %tobool1, true, !dbg !14646
  %lnot.ext = zext i1 %lnot to i32, !dbg !14646
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !14646
  %5 = load i32, i32* %extend, align 4, !dbg !14649
  %tobool2 = icmp ne i32 %5, 0, !dbg !14649
  br i1 %tobool2, label %if.then, label %if.end, !dbg !14646

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !14649
  %7 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %6, align 8, !dbg !14649
  %8 = bitcast %struct.VEC_rtx_gc* %7 to i8*, !dbg !14649
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !14649
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !14649
  %10 = bitcast i8* %call3 to %struct.VEC_rtx_gc*, !dbg !14649
  %11 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !14649
  store %struct.VEC_rtx_gc* %10, %struct.VEC_rtx_gc** %11, align 8, !dbg !14649
  br label %if.end, !dbg !14649

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !14646
  ret i32 %12, !dbg !14646
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_base_quick_push(%struct.VEC_rtx_base* %vec_, %struct.rtx_def* %obj_) #0 !dbg !14651 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %obj_.addr = alloca %struct.rtx_def*, align 8
  %slot_ = alloca %struct.rtx_def**, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !14655, metadata !DIExpression()), !dbg !14656
  store %struct.rtx_def* %obj_, %struct.rtx_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_.addr, metadata !14657, metadata !DIExpression()), !dbg !14656
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %slot_, metadata !14658, metadata !DIExpression()), !dbg !14656
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14656
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %0, i32 0, i32 0, !dbg !14656
  %1 = load i32, i32* %num, align 8, !dbg !14656
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14656
  %alloc = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 1, !dbg !14656
  %3 = load i32, i32* %alloc, align 4, !dbg !14656
  %cmp = icmp ult i32 %1, %3, !dbg !14656
  %conv = zext i1 %cmp to i32, !dbg !14656
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14656
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 2, !dbg !14656
  %5 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14656
  %num1 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %5, i32 0, i32 0, !dbg !14656
  %6 = load i32, i32* %num1, align 8, !dbg !14656
  %inc = add i32 %6, 1, !dbg !14656
  store i32 %inc, i32* %num1, align 8, !dbg !14656
  %idxprom = zext i32 %6 to i64, !dbg !14656
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !14656
  store %struct.rtx_def** %arrayidx, %struct.rtx_def*** %slot_, align 8, !dbg !14656
  %7 = load %struct.rtx_def*, %struct.rtx_def** %obj_.addr, align 8, !dbg !14656
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !14656
  store %struct.rtx_def* %7, %struct.rtx_def** %8, align 8, !dbg !14656
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !14656
  ret %struct.rtx_def** %9, !dbg !14656
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %vec_, i32 %alloc_) #0 !dbg !14659 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !14662, metadata !DIExpression()), !dbg !14663
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !14664, metadata !DIExpression()), !dbg !14663
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !14663
  %cmp = icmp sge i32 %0, 0, !dbg !14663
  %conv = zext i1 %cmp to i32, !dbg !14663
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14663
  %tobool = icmp ne %struct.VEC_rtx_base* %1, null, !dbg !14663
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14663

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14663
  %alloc = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 1, !dbg !14663
  %3 = load i32, i32* %alloc, align 4, !dbg !14663
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14663
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 0, !dbg !14663
  %5 = load i32, i32* %num, align 8, !dbg !14663
  %sub = sub i32 %3, %5, !dbg !14663
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !14663
  %cmp1 = icmp uge i32 %sub, %6, !dbg !14663
  %conv2 = zext i1 %cmp1 to i32, !dbg !14663
  br label %cond.end, !dbg !14663

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !14663
  %tobool3 = icmp ne i32 %7, 0, !dbg !14663
  %lnot = xor i1 %tobool3, true, !dbg !14663
  %lnot.ext = zext i1 %lnot to i32, !dbg !14663
  br label %cond.end, !dbg !14663

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !14663
  ret i32 %cond, !dbg !14663
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_base_quick_insert(%struct.VEC_rtx_base* %vec_, i32 %ix_, %struct.rtx_def* %obj_) #0 !dbg !14665 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.rtx_def*, align 8
  %slot_ = alloca %struct.rtx_def**, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !14668, metadata !DIExpression()), !dbg !14669
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !14670, metadata !DIExpression()), !dbg !14669
  store %struct.rtx_def* %obj_, %struct.rtx_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_.addr, metadata !14671, metadata !DIExpression()), !dbg !14669
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %slot_, metadata !14672, metadata !DIExpression()), !dbg !14669
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14669
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %0, i32 0, i32 0, !dbg !14669
  %1 = load i32, i32* %num, align 8, !dbg !14669
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14669
  %alloc = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 1, !dbg !14669
  %3 = load i32, i32* %alloc, align 4, !dbg !14669
  %cmp = icmp ult i32 %1, %3, !dbg !14669
  %conv = zext i1 %cmp to i32, !dbg !14669
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !14669
  %5 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14669
  %num1 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %5, i32 0, i32 0, !dbg !14669
  %6 = load i32, i32* %num1, align 8, !dbg !14669
  %cmp2 = icmp ule i32 %4, %6, !dbg !14669
  %conv3 = zext i1 %cmp2 to i32, !dbg !14669
  %7 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14669
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %7, i32 0, i32 2, !dbg !14669
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !14669
  %idxprom = zext i32 %8 to i64, !dbg !14669
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !14669
  store %struct.rtx_def** %arrayidx, %struct.rtx_def*** %slot_, align 8, !dbg !14669
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !14669
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %9, i64 1, !dbg !14669
  %10 = bitcast %struct.rtx_def** %add.ptr to i8*, !dbg !14669
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !14669
  %12 = bitcast %struct.rtx_def** %11 to i8*, !dbg !14669
  %13 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14669
  %num4 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %13, i32 0, i32 0, !dbg !14669
  %14 = load i32, i32* %num4, align 8, !dbg !14669
  %inc = add i32 %14, 1, !dbg !14669
  store i32 %inc, i32* %num4, align 8, !dbg !14669
  %15 = load i32, i32* %ix_.addr, align 4, !dbg !14669
  %sub = sub i32 %14, %15, !dbg !14669
  %conv5 = zext i32 %sub to i64, !dbg !14669
  %mul = mul i64 %conv5, 8, !dbg !14669
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %12, i64 %mul, i1 false), !dbg !14669
  %16 = load %struct.rtx_def*, %struct.rtx_def** %obj_.addr, align 8, !dbg !14669
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !14669
  store %struct.rtx_def* %16, %struct.rtx_def** %17, align 8, !dbg !14669
  %18 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !14669
  ret %struct.rtx_def** %18, !dbg !14669
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @output_object_block(%struct.object_block* %block) #0 !dbg !14673 {
entry:
  %block.addr = alloca %struct.object_block*, align 8
  %desc = alloca %struct.constant_descriptor_rtx*, align 8
  %i = alloca i32, align 4
  %offset = alloca i64, align 8
  %decl = alloca %union.tree_node*, align 8
  %symbol = alloca %struct.rtx_def*, align 8
  store %struct.object_block* %block, %struct.object_block** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.object_block** %block.addr, metadata !14676, metadata !DIExpression()), !dbg !14677
  call void @llvm.dbg.declare(metadata %struct.constant_descriptor_rtx** %desc, metadata !14678, metadata !DIExpression()), !dbg !14679
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14680, metadata !DIExpression()), !dbg !14681
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !14682, metadata !DIExpression()), !dbg !14683
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !14684, metadata !DIExpression()), !dbg !14685
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol, metadata !14686, metadata !DIExpression()), !dbg !14687
  %0 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !14688
  %objects = getelementptr inbounds %struct.object_block, %struct.object_block* %0, i32 0, i32 3, !dbg !14690
  %1 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %objects, align 8, !dbg !14690
  %cmp = icmp eq %struct.VEC_rtx_gc* %1, null, !dbg !14691
  br i1 %cmp, label %if.then, label %if.end, !dbg !14692

if.then:                                          ; preds = %entry
  br label %for.end77, !dbg !14693

if.end:                                           ; preds = %entry
  %2 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !14694
  %sect = getelementptr inbounds %struct.object_block, %struct.object_block* %2, i32 0, i32 0, !dbg !14695
  %3 = load %union.section*, %union.section** %sect, align 8, !dbg !14695
  call void @switch_to_section(%union.section* %3), !dbg !14696
  %4 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !14697
  %alignment = getelementptr inbounds %struct.object_block, %struct.object_block* %4, i32 0, i32 1, !dbg !14698
  %5 = load i32, i32* %alignment, align 8, !dbg !14698
  call void @assemble_align(i32 %5), !dbg !14699
  store i32 0, i32* %i, align 4, !dbg !14700
  br label %for.cond, !dbg !14702

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !14703
  %anchors = getelementptr inbounds %struct.object_block, %struct.object_block* %6, i32 0, i32 4, !dbg !14703
  %7 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %anchors, align 8, !dbg !14703
  %tobool = icmp ne %struct.VEC_rtx_gc* %7, null, !dbg !14703
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !14703

cond.true:                                        ; preds = %for.cond
  %8 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !14703
  %anchors1 = getelementptr inbounds %struct.object_block, %struct.object_block* %8, i32 0, i32 4, !dbg !14703
  %9 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %anchors1, align 8, !dbg !14703
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %9, i32 0, i32 0, !dbg !14703
  br label %cond.end, !dbg !14703

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !14703

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !14703
  %10 = load i32, i32* %i, align 4, !dbg !14703
  %call = call i32 @VEC_rtx_base_iterate(%struct.VEC_rtx_base* %cond, i32 %10, %struct.rtx_def** %symbol), !dbg !14703
  %tobool2 = icmp ne i32 %call, 0, !dbg !14705
  br i1 %tobool2, label %for.body, label %for.end, !dbg !14705

for.body:                                         ; preds = %cond.end
  %11 = load void (%struct.rtx_def*)*, void (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 0, i32 36), align 8, !dbg !14706
  %12 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14707
  call void %11(%struct.rtx_def* %12), !dbg !14708
  br label %for.inc, !dbg !14708

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4, !dbg !14709
  %inc = add i32 %13, 1, !dbg !14709
  store i32 %inc, i32* %i, align 4, !dbg !14709
  br label %for.cond, !dbg !14710, !llvm.loop !14711

for.end:                                          ; preds = %cond.end
  store i64 0, i64* %offset, align 8, !dbg !14713
  store i32 0, i32* %i, align 4, !dbg !14714
  br label %for.cond3, !dbg !14716

for.cond3:                                        ; preds = %for.inc75, %for.end
  %14 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !14717
  %objects4 = getelementptr inbounds %struct.object_block, %struct.object_block* %14, i32 0, i32 3, !dbg !14717
  %15 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %objects4, align 8, !dbg !14717
  %tobool5 = icmp ne %struct.VEC_rtx_gc* %15, null, !dbg !14717
  br i1 %tobool5, label %cond.true6, label %cond.false9, !dbg !14717

cond.true6:                                       ; preds = %for.cond3
  %16 = load %struct.object_block*, %struct.object_block** %block.addr, align 8, !dbg !14717
  %objects7 = getelementptr inbounds %struct.object_block, %struct.object_block* %16, i32 0, i32 3, !dbg !14717
  %17 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %objects7, align 8, !dbg !14717
  %base8 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %17, i32 0, i32 0, !dbg !14717
  br label %cond.end10, !dbg !14717

cond.false9:                                      ; preds = %for.cond3
  br label %cond.end10, !dbg !14717

cond.end10:                                       ; preds = %cond.false9, %cond.true6
  %cond11 = phi %struct.VEC_rtx_base* [ %base8, %cond.true6 ], [ null, %cond.false9 ], !dbg !14717
  %18 = load i32, i32* %i, align 4, !dbg !14717
  %call12 = call i32 @VEC_rtx_base_iterate(%struct.VEC_rtx_base* %cond11, i32 %18, %struct.rtx_def** %symbol), !dbg !14717
  %tobool13 = icmp ne i32 %call12, 0, !dbg !14719
  br i1 %tobool13, label %for.body14, label %for.end77, !dbg !14719

for.body14:                                       ; preds = %cond.end10
  %19 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14720
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !14720
  %block_sym = bitcast %union.u* %u to %struct.block_symbol*, !dbg !14720
  %offset15 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym, i32 0, i32 2, !dbg !14720
  %20 = load i64, i64* %offset15, align 8, !dbg !14720
  %21 = load i64, i64* %offset, align 8, !dbg !14722
  %sub = sub nsw i64 %20, %21, !dbg !14723
  call void @assemble_zeros(i64 %sub), !dbg !14724
  %22 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14725
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !14725
  %block_sym17 = bitcast %union.u* %u16 to %struct.block_symbol*, !dbg !14725
  %offset18 = getelementptr inbounds %struct.block_symbol, %struct.block_symbol* %block_sym17, i32 0, i32 2, !dbg !14725
  %23 = load i64, i64* %offset18, align 8, !dbg !14725
  store i64 %23, i64* %offset, align 8, !dbg !14726
  %24 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14727
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !14727
  %bf.load = load i32, i32* %25, align 8, !dbg !14727
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !14727
  %bf.clear = and i32 %bf.lshr, 1, !dbg !14727
  %tobool19 = icmp ne i32 %bf.clear, 0, !dbg !14727
  br i1 %tobool19, label %if.then20, label %if.else, !dbg !14729

if.then20:                                        ; preds = %for.body14
  %26 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14730
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !14730
  %bf.load21 = load i32, i32* %27, align 8, !dbg !14730
  %bf.lshr22 = lshr i32 %bf.load21, 26, !dbg !14730
  %bf.clear23 = and i32 %bf.lshr22, 1, !dbg !14730
  %tobool24 = icmp ne i32 %bf.clear23, 0, !dbg !14730
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !14730

cond.true25:                                      ; preds = %if.then20
  %28 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14730
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !14730
  %fld = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !14730
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !14730
  %rt_constant = bitcast %union.rtunion_def* %arrayidx to %struct.constant_descriptor_rtx**, !dbg !14730
  %29 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %rt_constant, align 8, !dbg !14730
  br label %cond.end28, !dbg !14730

cond.false27:                                     ; preds = %if.then20
  br label %cond.end28, !dbg !14730

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.constant_descriptor_rtx* [ %29, %cond.true25 ], [ null, %cond.false27 ], !dbg !14730
  store %struct.constant_descriptor_rtx* %cond29, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !14732
  %30 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !14733
  call void @output_constant_pool_1(%struct.constant_descriptor_rtx* %30, i32 1), !dbg !14734
  %31 = load %struct.constant_descriptor_rtx*, %struct.constant_descriptor_rtx** %desc, align 8, !dbg !14735
  %mode = getelementptr inbounds %struct.constant_descriptor_rtx, %struct.constant_descriptor_rtx* %31, i32 0, i32 6, !dbg !14735
  %32 = load i32, i32* %mode, align 4, !dbg !14735
  %idxprom = zext i32 %32 to i64, !dbg !14735
  %arrayidx30 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !14735
  %33 = load i8, i8* %arrayidx30, align 1, !dbg !14735
  %conv = zext i8 %33 to i16, !dbg !14735
  %conv31 = zext i16 %conv to i64, !dbg !14735
  %34 = load i64, i64* %offset, align 8, !dbg !14736
  %add = add nsw i64 %34, %conv31, !dbg !14736
  store i64 %add, i64* %offset, align 8, !dbg !14736
  br label %if.end74, !dbg !14737

if.else:                                          ; preds = %for.body14
  %35 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14738
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !14738
  %bf.load32 = load i32, i32* %36, align 8, !dbg !14738
  %bf.lshr33 = lshr i32 %bf.load32, 30, !dbg !14738
  %bf.clear34 = and i32 %bf.lshr33, 1, !dbg !14738
  %tobool35 = icmp ne i32 %bf.clear34, 0, !dbg !14738
  br i1 %tobool35, label %if.then36, label %if.else54, !dbg !14740

if.then36:                                        ; preds = %if.else
  %37 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14741
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !14741
  %bf.load37 = load i32, i32* %38, align 8, !dbg !14741
  %bf.lshr38 = lshr i32 %bf.load37, 26, !dbg !14741
  %bf.clear39 = and i32 %bf.lshr38, 1, !dbg !14741
  %tobool40 = icmp ne i32 %bf.clear39, 0, !dbg !14741
  br i1 %tobool40, label %cond.true41, label %cond.false42, !dbg !14741

cond.true41:                                      ; preds = %if.then36
  br label %cond.end46, !dbg !14741

cond.false42:                                     ; preds = %if.then36
  %39 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14741
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !14741
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !14741
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 2, !dbg !14741
  %rt_tree = bitcast %union.rtunion_def* %arrayidx45 to %union.tree_node**, !dbg !14741
  %40 = load %union.tree_node*, %union.tree_node** %rt_tree, align 8, !dbg !14741
  br label %cond.end46, !dbg !14741

cond.end46:                                       ; preds = %cond.false42, %cond.true41
  %cond47 = phi %union.tree_node* [ null, %cond.true41 ], [ %40, %cond.false42 ], !dbg !14741
  store %union.tree_node* %cond47, %union.tree_node** %decl, align 8, !dbg !14743
  %41 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !14744
  %42 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14745
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !14745
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !14745
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 0, !dbg !14745
  %rt_str = bitcast %union.rtunion_def* %arrayidx50 to i8**, !dbg !14745
  %43 = load i8*, i8** %rt_str, align 8, !dbg !14745
  %44 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !14746
  %call51 = call i32 @get_constant_alignment(%union.tree_node* %44), !dbg !14747
  call void @assemble_constant_contents(%union.tree_node* %41, i8* %43, i32 %call51), !dbg !14748
  %45 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !14749
  %call52 = call i64 @get_constant_size(%union.tree_node* %45), !dbg !14750
  %46 = load i64, i64* %offset, align 8, !dbg !14751
  %add53 = add nsw i64 %46, %call52, !dbg !14751
  store i64 %add53, i64* %offset, align 8, !dbg !14751
  br label %if.end73, !dbg !14752

if.else54:                                        ; preds = %if.else
  %47 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14753
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !14753
  %bf.load55 = load i32, i32* %48, align 8, !dbg !14753
  %bf.lshr56 = lshr i32 %bf.load55, 26, !dbg !14753
  %bf.clear57 = and i32 %bf.lshr56, 1, !dbg !14753
  %tobool58 = icmp ne i32 %bf.clear57, 0, !dbg !14753
  br i1 %tobool58, label %cond.true59, label %cond.false60, !dbg !14753

cond.true59:                                      ; preds = %if.else54
  br label %cond.end65, !dbg !14753

cond.false60:                                     ; preds = %if.else54
  %49 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14753
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !14753
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !14753
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 2, !dbg !14753
  %rt_tree64 = bitcast %union.rtunion_def* %arrayidx63 to %union.tree_node**, !dbg !14753
  %50 = load %union.tree_node*, %union.tree_node** %rt_tree64, align 8, !dbg !14753
  br label %cond.end65, !dbg !14753

cond.end65:                                       ; preds = %cond.false60, %cond.true59
  %cond66 = phi %union.tree_node* [ null, %cond.true59 ], [ %50, %cond.false60 ], !dbg !14753
  store %union.tree_node* %cond66, %union.tree_node** %decl, align 8, !dbg !14755
  %51 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !14756
  %52 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !14757
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !14757
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !14757
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 0, !dbg !14757
  %rt_str70 = bitcast %union.rtunion_def* %arrayidx69 to i8**, !dbg !14757
  %53 = load i8*, i8** %rt_str70, align 8, !dbg !14757
  call void @assemble_variable_contents(%union.tree_node* %51, i8* %53, i8 zeroext 0), !dbg !14758
  %54 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !14759
  %decl_common = bitcast %union.tree_node* %54 to %struct.tree_decl_common*, !dbg !14759
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 4, !dbg !14759
  %55 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !14759
  %call71 = call i64 @tree_low_cst(%union.tree_node* %55, i32 1), !dbg !14760
  %56 = load i64, i64* %offset, align 8, !dbg !14761
  %add72 = add nsw i64 %56, %call71, !dbg !14761
  store i64 %add72, i64* %offset, align 8, !dbg !14761
  br label %if.end73

if.end73:                                         ; preds = %cond.end65, %cond.end46
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %cond.end28
  br label %for.inc75, !dbg !14762

for.inc75:                                        ; preds = %if.end74
  %57 = load i32, i32* %i, align 4, !dbg !14763
  %inc76 = add i32 %57, 1, !dbg !14763
  store i32 %inc76, i32* %i, align 4, !dbg !14763
  br label %for.cond3, !dbg !14764, !llvm.loop !14765

for.end77:                                        ; preds = %if.then, %cond.end10
  ret void, !dbg !14767
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_iterate(%struct.VEC_rtx_base* %vec_, i32 %ix_, %struct.rtx_def** %ptr) #0 !dbg !14768 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.rtx_def**, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !14771, metadata !DIExpression()), !dbg !14772
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !14773, metadata !DIExpression()), !dbg !14772
  store %struct.rtx_def** %ptr, %struct.rtx_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %ptr.addr, metadata !14774, metadata !DIExpression()), !dbg !14772
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14775
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !14775
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !14775

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !14775
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14775
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 0, !dbg !14775
  %3 = load i32, i32* %num, align 8, !dbg !14775
  %cmp = icmp ult i32 %1, %3, !dbg !14775
  br i1 %cmp, label %if.then, label %if.else, !dbg !14772

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !14777
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 2, !dbg !14777
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !14777
  %idxprom = zext i32 %5 to i64, !dbg !14777
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !14777
  %6 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !14777
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %ptr.addr, align 8, !dbg !14777
  store %struct.rtx_def* %6, %struct.rtx_def** %7, align 8, !dbg !14777
  store i32 1, i32* %retval, align 4, !dbg !14777
  br label %return, !dbg !14777

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %ptr.addr, align 8, !dbg !14779
  store %struct.rtx_def* null, %struct.rtx_def** %8, align 8, !dbg !14779
  store i32 0, i32* %retval, align 4, !dbg !14779
  br label %return, !dbg !14779

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !14772
  ret i32 %9, !dbg !14772
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3977, !3978, !3979}
!llvm.ident = !{!3980}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "emutls_htab", scope: !2, file: !3, line: 194, type: !3284, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !2688, globals: !3831, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "varasm.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !150, !169, !176, !183, !377, !511, !521, !526, !539, !560, !597, !740, !1614, !1628, !1651, !1673, !1683, !1689, !1710, !1718, !1939, !2659, !2665, !2681}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !146, line: 474, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149}
!148 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !151, line: 280, baseType: !7, size: 32, elements: !152)
!151 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!152 = !{!153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168}
!153 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!154 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!155 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!156 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!157 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!158 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!159 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!160 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!169 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !151, line: 1817, baseType: !7, size: 32, elements: !170)
!170 = !{!171, !172, !173, !174, !175}
!171 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !151, line: 1805, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !151, line: 39, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376}
!185 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!190 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!191 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!192 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!193 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!194 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!195 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!196 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!197 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!198 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!199 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!200 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!201 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!202 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!203 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!204 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!205 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!206 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!207 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!208 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!209 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!210 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!213 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!214 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!215 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!216 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!217 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!218 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!219 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!220 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!221 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!222 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!223 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!224 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!225 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!226 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!228 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!229 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!230 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!231 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!232 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!233 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!234 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!235 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!236 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!237 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!238 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!239 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!240 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!241 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!242 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!243 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!244 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!245 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!246 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!247 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!248 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!249 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!250 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!251 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!252 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!253 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!254 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!255 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!256 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!257 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!258 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!259 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!260 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!261 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!262 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!263 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!264 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!265 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!266 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!267 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!268 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!269 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!270 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!271 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!272 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!273 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!274 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!275 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!277 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!278 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!279 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!280 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!281 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!282 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!283 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!284 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!285 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!286 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!287 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!288 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!289 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!290 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!291 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!292 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!293 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!294 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!295 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!296 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!297 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!298 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!299 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!300 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!301 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!302 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!303 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!304 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!305 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!307 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!308 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!309 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!310 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!311 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!312 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!313 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!314 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!315 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!316 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!317 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!318 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!319 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!320 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!321 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!322 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!323 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!324 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!325 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!326 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!327 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!328 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!329 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!330 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!331 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!332 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!333 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!334 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!335 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!336 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!337 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!349 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!350 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!351 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!352 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!353 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!354 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!355 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!356 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!357 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!358 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!359 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!360 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!361 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!370 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!371 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!372 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!373 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!374 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!375 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!376 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !151, line: 3410, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510}
!379 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!384 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!385 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!386 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!387 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!388 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!389 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!390 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!391 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!392 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!393 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!394 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!395 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!396 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!397 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!398 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!399 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!400 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!401 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!402 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!403 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!404 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!405 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!406 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!407 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!408 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!409 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!410 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!411 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!412 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!413 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!414 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!415 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!416 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!417 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!418 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!419 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!420 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!421 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!422 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!423 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!424 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!425 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!426 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!427 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!428 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!429 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!430 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!431 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!432 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!433 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!434 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!435 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!436 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!437 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!438 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!439 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!440 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!441 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!442 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!443 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!444 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!445 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!446 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!447 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!448 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!449 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!450 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!451 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!452 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!453 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!454 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!455 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!456 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!457 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!458 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!459 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!460 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!461 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!462 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!463 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!464 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!465 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!466 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!467 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!468 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!469 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!470 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!511 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tls_model", file: !512, line: 97, baseType: !7, size: 32, elements: !513)
!512 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!513 = !{!514, !515, !516, !517, !518, !519, !520}
!514 = !DIEnumerator(name: "TLS_MODEL_NONE", value: 0, isUnsigned: true)
!515 = !DIEnumerator(name: "TLS_MODEL_EMULATED", value: 1, isUnsigned: true)
!516 = !DIEnumerator(name: "TLS_MODEL_REAL", value: 2, isUnsigned: true)
!517 = !DIEnumerator(name: "TLS_MODEL_GLOBAL_DYNAMIC", value: 2, isUnsigned: true)
!518 = !DIEnumerator(name: "TLS_MODEL_LOCAL_DYNAMIC", value: 3, isUnsigned: true)
!519 = !DIEnumerator(name: "TLS_MODEL_INITIAL_EXEC", value: 4, isUnsigned: true)
!520 = !DIEnumerator(name: "TLS_MODEL_LOCAL_EXEC", value: 5, isUnsigned: true)
!521 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !522, line: 147, baseType: !7, size: 32, elements: !523)
!522 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!523 = !{!524, !525}
!524 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!525 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!526 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !151, line: 58, baseType: !7, size: 32, elements: !527)
!527 = !{!528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538}
!528 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!529 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!530 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!531 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!532 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!533 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!534 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!535 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!536 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!537 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!538 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!539 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !540, line: 57, baseType: !7, size: 32, elements: !541)
!540 = !DIFile(filename: "./include/safe-ctype.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!541 = !{!542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559}
!542 = !DIEnumerator(name: "_sch_isblank", value: 1, isUnsigned: true)
!543 = !DIEnumerator(name: "_sch_iscntrl", value: 2, isUnsigned: true)
!544 = !DIEnumerator(name: "_sch_isdigit", value: 4, isUnsigned: true)
!545 = !DIEnumerator(name: "_sch_islower", value: 8, isUnsigned: true)
!546 = !DIEnumerator(name: "_sch_isprint", value: 16, isUnsigned: true)
!547 = !DIEnumerator(name: "_sch_ispunct", value: 32, isUnsigned: true)
!548 = !DIEnumerator(name: "_sch_isspace", value: 64, isUnsigned: true)
!549 = !DIEnumerator(name: "_sch_isupper", value: 128, isUnsigned: true)
!550 = !DIEnumerator(name: "_sch_isxdigit", value: 256, isUnsigned: true)
!551 = !DIEnumerator(name: "_sch_isidst", value: 512, isUnsigned: true)
!552 = !DIEnumerator(name: "_sch_isvsp", value: 1024, isUnsigned: true)
!553 = !DIEnumerator(name: "_sch_isnvsp", value: 2048, isUnsigned: true)
!554 = !DIEnumerator(name: "_sch_isalpha", value: 136, isUnsigned: true)
!555 = !DIEnumerator(name: "_sch_isalnum", value: 140, isUnsigned: true)
!556 = !DIEnumerator(name: "_sch_isidnum", value: 516, isUnsigned: true)
!557 = !DIEnumerator(name: "_sch_isgraph", value: 172, isUnsigned: true)
!558 = !DIEnumerator(name: "_sch_iscppsp", value: 3072, isUnsigned: true)
!559 = !DIEnumerator(name: "_sch_isbasic", value: 3088, isUnsigned: true)
!560 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !151, line: 630, baseType: !7, size: 32, elements: !561)
!561 = !{!562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596}
!562 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!563 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!564 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!565 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!566 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!567 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!568 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!569 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!570 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!571 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!572 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!573 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!574 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!575 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!576 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!577 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!578 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!579 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!580 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!581 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!582 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!583 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!584 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!585 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!586 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!587 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!588 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!589 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!590 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!591 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!592 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!593 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!594 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!595 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!596 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!597 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !598, line: 45, baseType: !7, size: 32, elements: !599)
!598 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!599 = !{!600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739}
!600 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!601 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!602 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!603 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!604 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!605 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!606 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!607 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!608 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!609 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!610 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!611 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!612 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!613 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!614 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!615 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!616 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!617 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!618 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!619 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!620 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!621 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!622 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!623 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!624 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!625 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!626 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!627 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!628 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!629 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!630 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!631 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!632 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!633 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!634 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!635 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!636 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!637 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!638 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!639 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!640 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!641 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!642 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!643 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!644 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!645 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!646 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!647 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!648 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!649 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!650 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!651 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!652 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!653 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!654 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!655 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!656 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!657 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!658 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!659 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!660 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!661 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!662 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!663 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!664 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!665 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!666 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!667 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!668 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!669 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!670 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!671 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!672 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!673 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!674 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!675 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!676 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!677 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!678 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!679 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!680 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!681 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!682 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!683 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!684 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!685 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!686 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!687 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!688 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!689 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!690 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!691 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!692 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!693 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!694 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!695 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!696 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!697 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!698 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!699 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!700 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!701 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!702 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!703 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!704 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!705 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!706 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!707 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!708 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!709 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!710 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!711 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!712 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!713 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!714 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!715 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!716 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!717 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!718 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!719 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!720 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!721 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!722 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!723 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!724 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!725 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!726 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!727 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!728 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!729 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!730 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!731 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!732 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!733 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!734 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!735 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!736 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!737 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!738 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!739 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!740 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !741, line: 723, baseType: !7, size: 32, elements: !742)
!741 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!742 = !{!743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613}
!743 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!744 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!745 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!746 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!747 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!748 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!749 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!750 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!751 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!752 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!753 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!754 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!755 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!756 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!757 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!758 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!759 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!760 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!761 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!762 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!763 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!764 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!765 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!766 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!767 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!768 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!769 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!770 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!771 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!772 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!773 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!774 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!775 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!776 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!777 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!778 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!779 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!780 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!781 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!782 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!783 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!784 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!785 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!786 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!787 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!788 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!789 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!790 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!791 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!792 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!793 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!794 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!795 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!796 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!797 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!798 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!799 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!800 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!801 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!802 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!803 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!804 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!805 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!806 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!807 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!808 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!809 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!810 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!811 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!812 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!813 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!814 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!815 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!816 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!817 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!818 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!819 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!820 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!821 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!822 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!823 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!824 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!825 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!826 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!827 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!828 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!829 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!830 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!831 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!832 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!833 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!834 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!835 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!836 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!837 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!838 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!839 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!840 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!841 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!842 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!843 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!844 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!845 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!846 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!847 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!848 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!849 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!850 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!851 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!852 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!853 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!854 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!855 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!856 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!857 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!858 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!859 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!860 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!861 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!862 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!863 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!864 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!865 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!866 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!867 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!868 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!869 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!870 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!871 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!872 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!873 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!874 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!875 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!876 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!877 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!878 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!879 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!880 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!881 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!882 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!883 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!884 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!885 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!886 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!887 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!888 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!889 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!890 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!891 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!892 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!893 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!894 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!895 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!896 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!897 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!898 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!899 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!900 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!901 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!902 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!903 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!904 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!905 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!906 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!907 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!908 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!909 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!910 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!911 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!912 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!913 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!914 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!915 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!916 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!917 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!918 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!919 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!920 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!921 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!922 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!923 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!924 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!925 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!926 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!927 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!928 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!929 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!930 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!931 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!932 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!933 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!934 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!935 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!936 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!937 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!938 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!939 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!940 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!941 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!942 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!943 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!944 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!945 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!946 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!947 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!948 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!949 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!950 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!951 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!952 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!953 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!954 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!955 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!956 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!957 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!958 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!959 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!960 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!961 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!962 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!963 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!964 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!965 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!966 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!967 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!968 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!969 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!970 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!971 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!972 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!973 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!974 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!975 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!976 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!977 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!978 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!979 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!980 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!981 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!982 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!983 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!984 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!985 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!986 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!987 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!988 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!989 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!990 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!991 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!992 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!993 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!994 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!995 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!996 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!997 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!998 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!999 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!1000 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!1001 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!1002 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!1003 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!1004 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!1005 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!1006 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!1007 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!1008 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!1009 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!1010 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!1011 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!1012 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!1013 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!1014 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!1015 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!1016 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!1017 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!1018 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!1019 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!1020 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!1021 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!1022 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!1023 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!1024 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!1025 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!1026 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!1027 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!1028 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!1029 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!1030 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!1031 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!1032 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!1033 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!1034 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!1035 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!1036 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!1037 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!1038 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!1039 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!1040 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!1041 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!1042 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!1043 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!1044 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!1045 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!1046 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!1047 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!1048 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!1049 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!1050 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!1051 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!1052 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!1053 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!1054 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!1055 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!1056 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!1057 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!1058 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!1059 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!1060 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!1061 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!1062 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!1063 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!1064 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!1065 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!1066 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!1067 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!1068 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!1069 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!1070 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!1071 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!1072 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!1073 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!1074 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!1075 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!1076 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!1077 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!1078 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!1079 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!1080 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!1081 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!1082 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!1083 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!1084 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!1085 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!1086 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!1087 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!1088 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!1089 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!1090 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!1091 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!1092 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!1093 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!1094 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!1095 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!1096 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!1097 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!1098 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!1099 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!1100 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!1101 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!1102 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!1103 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!1104 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!1105 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!1106 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!1107 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!1108 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!1109 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!1110 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!1111 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!1112 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!1113 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!1114 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!1115 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!1116 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!1117 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!1118 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!1119 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!1120 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!1121 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!1122 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!1123 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!1124 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!1125 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!1126 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!1127 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!1128 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!1129 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!1130 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!1131 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!1132 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!1133 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!1134 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!1135 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!1136 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!1137 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!1138 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!1139 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!1140 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!1141 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!1142 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!1143 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!1144 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!1145 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!1146 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!1147 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!1148 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!1149 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!1150 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!1151 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!1152 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!1153 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!1154 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!1155 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!1156 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!1157 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!1158 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!1159 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!1160 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!1161 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!1162 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!1163 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!1164 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!1165 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!1166 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!1167 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!1168 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!1169 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!1170 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!1171 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!1172 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!1173 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!1174 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!1175 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!1176 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!1177 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!1178 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!1179 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!1180 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!1181 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!1182 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!1183 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!1184 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!1185 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!1186 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!1187 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!1188 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!1189 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!1190 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!1191 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!1192 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!1193 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!1194 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!1195 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!1196 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!1197 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!1198 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!1199 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!1200 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!1201 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!1202 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!1203 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!1204 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!1205 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!1206 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!1207 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!1208 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!1209 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!1210 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!1211 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!1212 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!1213 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!1214 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!1215 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!1216 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!1217 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!1218 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!1219 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!1220 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!1221 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!1222 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!1223 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!1224 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!1225 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!1226 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!1227 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!1228 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!1229 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!1230 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!1231 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!1232 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!1233 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!1234 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!1235 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!1236 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!1237 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!1238 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!1239 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!1240 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!1241 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!1242 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!1243 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!1244 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!1245 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!1246 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!1247 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!1248 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!1249 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!1250 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!1251 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!1252 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!1253 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!1254 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!1255 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!1256 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!1257 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!1258 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!1259 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!1260 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!1261 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!1262 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!1263 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!1264 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!1265 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!1266 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!1267 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!1268 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!1269 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!1270 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!1271 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!1272 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!1273 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!1274 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!1275 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!1276 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!1277 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!1278 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!1279 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!1280 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!1281 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!1282 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!1283 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!1284 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!1285 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!1286 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!1287 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!1288 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!1289 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!1290 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!1291 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!1292 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!1293 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!1294 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!1295 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!1296 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!1297 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!1298 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!1299 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!1300 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!1301 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!1302 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!1304 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!1305 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!1306 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!1307 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!1308 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!1309 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!1310 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!1311 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!1312 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!1313 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!1314 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!1315 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!1316 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!1317 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!1318 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!1319 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!1320 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!1321 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!1322 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!1323 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!1324 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!1325 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!1326 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!1327 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!1328 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!1329 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!1330 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!1331 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!1332 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!1333 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!1334 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!1335 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!1336 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!1337 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!1338 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!1339 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!1340 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!1341 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!1342 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!1343 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!1344 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!1345 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!1346 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!1347 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!1348 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!1349 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!1350 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!1351 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!1352 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!1353 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!1354 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!1355 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!1356 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!1357 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!1358 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!1359 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!1360 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!1361 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!1362 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!1363 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!1364 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!1365 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!1366 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!1367 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!1368 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!1369 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!1370 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!1371 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!1372 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!1373 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!1374 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!1375 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!1376 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!1377 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!1378 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!1379 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!1380 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!1381 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!1382 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!1383 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!1384 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!1385 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!1386 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!1387 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!1388 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!1389 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!1390 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!1391 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!1392 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!1393 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!1394 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!1395 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!1396 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!1397 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!1398 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!1399 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!1400 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!1401 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!1402 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!1403 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!1404 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!1405 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!1406 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!1407 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!1408 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!1409 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!1410 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!1411 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!1412 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!1413 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!1414 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!1415 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!1416 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!1417 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!1418 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!1419 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!1420 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!1421 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!1422 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!1423 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!1424 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!1425 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!1426 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!1427 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!1428 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!1429 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!1430 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!1431 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!1432 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!1433 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!1434 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!1435 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!1436 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!1437 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!1438 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!1439 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!1440 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!1441 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!1442 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!1443 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!1444 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!1445 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!1446 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!1447 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!1448 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!1449 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!1450 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!1451 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!1452 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!1453 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!1454 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!1455 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!1456 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!1457 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!1458 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!1459 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!1460 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!1461 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!1462 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!1463 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!1464 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!1465 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!1466 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!1467 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!1468 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!1469 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!1470 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!1471 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!1472 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!1473 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!1474 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!1475 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!1476 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!1477 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!1478 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!1479 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!1480 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!1481 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!1482 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!1483 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!1484 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!1485 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!1486 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!1487 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!1488 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!1489 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!1490 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!1491 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!1492 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!1493 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!1494 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!1495 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!1496 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!1497 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!1498 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!1499 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!1500 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!1501 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!1502 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!1503 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!1504 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!1505 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!1506 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!1507 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!1508 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!1509 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!1510 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!1511 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!1512 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!1513 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!1514 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!1515 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!1516 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!1517 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!1518 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!1519 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!1520 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!1521 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!1522 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!1523 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!1524 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!1525 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!1526 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!1527 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!1528 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!1529 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!1530 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!1531 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!1532 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!1533 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!1534 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!1535 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!1536 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!1537 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!1538 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!1539 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!1540 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!1541 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!1542 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!1543 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!1544 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!1545 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!1546 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!1547 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!1548 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!1549 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!1550 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!1551 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!1552 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!1553 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!1554 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!1555 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!1556 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!1557 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!1558 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!1559 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!1560 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!1561 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!1562 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!1563 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!1564 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!1565 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!1566 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!1567 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!1568 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!1569 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!1570 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!1571 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!1572 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!1573 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!1574 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!1575 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!1576 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!1577 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!1578 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!1579 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!1580 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!1581 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!1582 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!1583 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!1584 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!1585 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!1586 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!1587 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!1588 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!1589 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!1590 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!1591 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!1592 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!1593 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!1594 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!1595 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!1596 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!1597 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!1598 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!1599 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!1600 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!1601 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!1602 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!1603 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!1604 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!1605 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!1606 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!1607 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!1608 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!1609 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!1610 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!1611 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!1612 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!1613 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!1614 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !135, line: 295, baseType: !7, size: 32, elements: !1615)
!1615 = !{!1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627}
!1616 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1617 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1618 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1619 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1620 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1621 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1622 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1623 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1624 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1625 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1626 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1627 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1628 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1629, line: 309, baseType: !7, size: 32, elements: !1630)
!1629 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1630 = !{!1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650}
!1631 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!1632 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!1633 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!1634 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!1635 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!1636 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!1637 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!1638 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!1639 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!1640 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!1641 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!1642 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!1643 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!1644 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!1645 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!1646 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!1647 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!1648 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!1649 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!1650 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!1651 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !1652, line: 36, baseType: !7, size: 32, elements: !1653)
!1652 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1653 = !{!1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672}
!1654 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!1655 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!1656 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!1657 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!1658 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!1659 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!1660 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!1661 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!1662 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!1663 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!1664 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!1665 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!1666 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!1667 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!1668 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!1669 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!1670 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!1671 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!1672 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!1673 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "expand_modifier", file: !1674, line: 52, baseType: !7, size: 32, elements: !1675)
!1674 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1675 = !{!1676, !1677, !1678, !1679, !1680, !1681, !1682}
!1676 = !DIEnumerator(name: "EXPAND_NORMAL", value: 0, isUnsigned: true)
!1677 = !DIEnumerator(name: "EXPAND_STACK_PARM", value: 1, isUnsigned: true)
!1678 = !DIEnumerator(name: "EXPAND_SUM", value: 2, isUnsigned: true)
!1679 = !DIEnumerator(name: "EXPAND_CONST_ADDRESS", value: 3, isUnsigned: true)
!1680 = !DIEnumerator(name: "EXPAND_INITIALIZER", value: 4, isUnsigned: true)
!1681 = !DIEnumerator(name: "EXPAND_WRITE", value: 5, isUnsigned: true)
!1682 = !DIEnumerator(name: "EXPAND_MEMORY", value: 6, isUnsigned: true)
!1683 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "symbol_visibility", file: !151, line: 2465, baseType: !7, size: 32, elements: !1684)
!1684 = !{!1685, !1686, !1687, !1688}
!1685 = !DIEnumerator(name: "VISIBILITY_DEFAULT", value: 0, isUnsigned: true)
!1686 = !DIEnumerator(name: "VISIBILITY_PROTECTED", value: 1, isUnsigned: true)
!1687 = !DIEnumerator(name: "VISIBILITY_HIDDEN", value: 2, isUnsigned: true)
!1688 = !DIEnumerator(name: "VISIBILITY_INTERNAL", value: 3, isUnsigned: true)
!1689 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "section_category", file: !1690, line: 444, baseType: !7, size: 32, elements: !1691)
!1690 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1691 = !{!1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709}
!1692 = !DIEnumerator(name: "SECCAT_TEXT", value: 0, isUnsigned: true)
!1693 = !DIEnumerator(name: "SECCAT_RODATA", value: 1, isUnsigned: true)
!1694 = !DIEnumerator(name: "SECCAT_RODATA_MERGE_STR", value: 2, isUnsigned: true)
!1695 = !DIEnumerator(name: "SECCAT_RODATA_MERGE_STR_INIT", value: 3, isUnsigned: true)
!1696 = !DIEnumerator(name: "SECCAT_RODATA_MERGE_CONST", value: 4, isUnsigned: true)
!1697 = !DIEnumerator(name: "SECCAT_SRODATA", value: 5, isUnsigned: true)
!1698 = !DIEnumerator(name: "SECCAT_DATA", value: 6, isUnsigned: true)
!1699 = !DIEnumerator(name: "SECCAT_DATA_REL", value: 7, isUnsigned: true)
!1700 = !DIEnumerator(name: "SECCAT_DATA_REL_LOCAL", value: 8, isUnsigned: true)
!1701 = !DIEnumerator(name: "SECCAT_DATA_REL_RO", value: 9, isUnsigned: true)
!1702 = !DIEnumerator(name: "SECCAT_DATA_REL_RO_LOCAL", value: 10, isUnsigned: true)
!1703 = !DIEnumerator(name: "SECCAT_SDATA", value: 11, isUnsigned: true)
!1704 = !DIEnumerator(name: "SECCAT_TDATA", value: 12, isUnsigned: true)
!1705 = !DIEnumerator(name: "SECCAT_BSS", value: 13, isUnsigned: true)
!1706 = !DIEnumerator(name: "SECCAT_SBSS", value: 14, isUnsigned: true)
!1707 = !DIEnumerator(name: "SECCAT_TBSS", value: 15, isUnsigned: true)
!1708 = !DIEnumerator(name: "SECCAT_EMUTLS_VAR", value: 16, isUnsigned: true)
!1709 = !DIEnumerator(name: "SECCAT_EMUTLS_TMPL", value: 17, isUnsigned: true)
!1710 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !1711, line: 56, baseType: !7, size: 32, elements: !1712)
!1711 = !DIFile(filename: "./target.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1712 = !{!1713, !1714, !1715, !1716, !1717}
!1713 = !DIEnumerator(name: "SWITCH_TYPE_PASSED", value: 0, isUnsigned: true)
!1714 = !DIEnumerator(name: "SWITCH_TYPE_ENABLED", value: 1, isUnsigned: true)
!1715 = !DIEnumerator(name: "SWITCH_TYPE_DESCRIPTIVE", value: 2, isUnsigned: true)
!1716 = !DIEnumerator(name: "SWITCH_TYPE_LINE_START", value: 3, isUnsigned: true)
!1717 = !DIEnumerator(name: "SWITCH_TYPE_LINE_END", value: 4, isUnsigned: true)
!1718 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gt_types_enum", file: !1719, line: 23, baseType: !7, size: 32, elements: !1720)
!1719 = !DIFile(filename: "./gtype-desc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1720 = !{!1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938}
!1721 = !DIEnumerator(name: "gt_ggc_e_15interface_tuple", value: 0, isUnsigned: true)
!1722 = !DIEnumerator(name: "gt_ggc_e_16volatilized_type", value: 1, isUnsigned: true)
!1723 = !DIEnumerator(name: "gt_ggc_e_17string_descriptor", value: 2, isUnsigned: true)
!1724 = !DIEnumerator(name: "gt_ggc_e_15c_inline_static", value: 3, isUnsigned: true)
!1725 = !DIEnumerator(name: "gt_ggc_e_24VEC_c_goto_bindings_p_gc", value: 4, isUnsigned: true)
!1726 = !DIEnumerator(name: "gt_ggc_e_15c_goto_bindings", value: 5, isUnsigned: true)
!1727 = !DIEnumerator(name: "gt_ggc_e_7c_scope", value: 6, isUnsigned: true)
!1728 = !DIEnumerator(name: "gt_ggc_e_9c_binding", value: 7, isUnsigned: true)
!1729 = !DIEnumerator(name: "gt_ggc_e_12c_label_vars", value: 8, isUnsigned: true)
!1730 = !DIEnumerator(name: "gt_ggc_e_8c_parser", value: 9, isUnsigned: true)
!1731 = !DIEnumerator(name: "gt_ggc_e_9imp_entry", value: 10, isUnsigned: true)
!1732 = !DIEnumerator(name: "gt_ggc_e_16hashed_attribute", value: 11, isUnsigned: true)
!1733 = !DIEnumerator(name: "gt_ggc_e_12hashed_entry", value: 12, isUnsigned: true)
!1734 = !DIEnumerator(name: "gt_ggc_e_14type_assertion", value: 13, isUnsigned: true)
!1735 = !DIEnumerator(name: "gt_ggc_e_18treetreehash_entry", value: 14, isUnsigned: true)
!1736 = !DIEnumerator(name: "gt_ggc_e_5CPool", value: 15, isUnsigned: true)
!1737 = !DIEnumerator(name: "gt_ggc_e_3JCF", value: 16, isUnsigned: true)
!1738 = !DIEnumerator(name: "gt_ggc_e_17module_htab_entry", value: 17, isUnsigned: true)
!1739 = !DIEnumerator(name: "gt_ggc_e_13binding_level", value: 18, isUnsigned: true)
!1740 = !DIEnumerator(name: "gt_ggc_e_9opt_stack", value: 19, isUnsigned: true)
!1741 = !DIEnumerator(name: "gt_ggc_e_11align_stack", value: 20, isUnsigned: true)
!1742 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_gc_vec_gc", value: 21, isUnsigned: true)
!1743 = !DIEnumerator(name: "gt_ggc_e_19VEC_const_char_p_gc", value: 22, isUnsigned: true)
!1744 = !DIEnumerator(name: "gt_ggc_e_21pending_abstract_type", value: 23, isUnsigned: true)
!1745 = !DIEnumerator(name: "gt_ggc_e_15VEC_tree_int_gc", value: 24, isUnsigned: true)
!1746 = !DIEnumerator(name: "gt_ggc_e_9cp_parser", value: 25, isUnsigned: true)
!1747 = !DIEnumerator(name: "gt_ggc_e_17cp_parser_context", value: 26, isUnsigned: true)
!1748 = !DIEnumerator(name: "gt_ggc_e_8cp_lexer", value: 27, isUnsigned: true)
!1749 = !DIEnumerator(name: "gt_ggc_e_10tree_check", value: 28, isUnsigned: true)
!1750 = !DIEnumerator(name: "gt_ggc_e_22VEC_deferred_access_gc", value: 29, isUnsigned: true)
!1751 = !DIEnumerator(name: "gt_ggc_e_10spec_entry", value: 30, isUnsigned: true)
!1752 = !DIEnumerator(name: "gt_ggc_e_16pending_template", value: 31, isUnsigned: true)
!1753 = !DIEnumerator(name: "gt_ggc_e_21named_label_use_entry", value: 32, isUnsigned: true)
!1754 = !DIEnumerator(name: "gt_ggc_e_28VEC_deferred_access_check_gc", value: 33, isUnsigned: true)
!1755 = !DIEnumerator(name: "gt_ggc_e_18sorted_fields_type", value: 34, isUnsigned: true)
!1756 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_pair_s_gc", value: 35, isUnsigned: true)
!1757 = !DIEnumerator(name: "gt_ggc_e_17named_label_entry", value: 36, isUnsigned: true)
!1758 = !DIEnumerator(name: "gt_ggc_e_32VEC_qualified_typedef_usage_t_gc", value: 37, isUnsigned: true)
!1759 = !DIEnumerator(name: "gt_ggc_e_14cp_token_cache", value: 38, isUnsigned: true)
!1760 = !DIEnumerator(name: "gt_ggc_e_11saved_scope", value: 39, isUnsigned: true)
!1761 = !DIEnumerator(name: "gt_ggc_e_16cxx_int_tree_map", value: 40, isUnsigned: true)
!1762 = !DIEnumerator(name: "gt_ggc_e_23VEC_cp_class_binding_gc", value: 41, isUnsigned: true)
!1763 = !DIEnumerator(name: "gt_ggc_e_24VEC_cxx_saved_binding_gc", value: 42, isUnsigned: true)
!1764 = !DIEnumerator(name: "gt_ggc_e_16cp_binding_level", value: 43, isUnsigned: true)
!1765 = !DIEnumerator(name: "gt_ggc_e_11cxx_binding", value: 44, isUnsigned: true)
!1766 = !DIEnumerator(name: "gt_ggc_e_15binding_entry_s", value: 45, isUnsigned: true)
!1767 = !DIEnumerator(name: "gt_ggc_e_15binding_table_s", value: 46, isUnsigned: true)
!1768 = !DIEnumerator(name: "gt_ggc_e_11tinst_level", value: 47, isUnsigned: true)
!1769 = !DIEnumerator(name: "gt_ggc_e_14VEC_tinfo_s_gc", value: 48, isUnsigned: true)
!1770 = !DIEnumerator(name: "gt_ggc_e_18gnat_binding_level", value: 49, isUnsigned: true)
!1771 = !DIEnumerator(name: "gt_ggc_e_9elab_info", value: 50, isUnsigned: true)
!1772 = !DIEnumerator(name: "gt_ggc_e_10stmt_group", value: 51, isUnsigned: true)
!1773 = !DIEnumerator(name: "gt_ggc_e_16VEC_parm_attr_gc", value: 52, isUnsigned: true)
!1774 = !DIEnumerator(name: "gt_ggc_e_11parm_attr_d", value: 53, isUnsigned: true)
!1775 = !DIEnumerator(name: "gt_ggc_e_22VEC_ipa_edge_args_t_gc", value: 54, isUnsigned: true)
!1776 = !DIEnumerator(name: "gt_ggc_e_20lto_symtab_entry_def", value: 55, isUnsigned: true)
!1777 = !DIEnumerator(name: "gt_ggc_e_20ssa_operand_memory_d", value: 56, isUnsigned: true)
!1778 = !DIEnumerator(name: "gt_ggc_e_13scev_info_str", value: 57, isUnsigned: true)
!1779 = !DIEnumerator(name: "gt_ggc_e_24VEC_mem_addr_template_gc", value: 58, isUnsigned: true)
!1780 = !DIEnumerator(name: "gt_ggc_e_13VEC_gimple_gc", value: 59, isUnsigned: true)
!1781 = !DIEnumerator(name: "gt_ggc_e_9type_hash", value: 60, isUnsigned: true)
!1782 = !DIEnumerator(name: "gt_ggc_e_16string_pool_data", value: 61, isUnsigned: true)
!1783 = !DIEnumerator(name: "gt_ggc_e_13libfunc_entry", value: 62, isUnsigned: true)
!1784 = !DIEnumerator(name: "gt_ggc_e_23temp_slot_address_entry", value: 63, isUnsigned: true)
!1785 = !DIEnumerator(name: "gt_ggc_e_15throw_stmt_node", value: 64, isUnsigned: true)
!1786 = !DIEnumerator(name: "gt_ggc_e_21VEC_eh_landing_pad_gc", value: 65, isUnsigned: true)
!1787 = !DIEnumerator(name: "gt_ggc_e_16VEC_eh_region_gc", value: 66, isUnsigned: true)
!1788 = !DIEnumerator(name: "gt_ggc_e_10eh_catch_d", value: 67, isUnsigned: true)
!1789 = !DIEnumerator(name: "gt_ggc_e_16eh_landing_pad_d", value: 68, isUnsigned: true)
!1790 = !DIEnumerator(name: "gt_ggc_e_11eh_region_d", value: 69, isUnsigned: true)
!1791 = !DIEnumerator(name: "gt_ggc_e_10vcall_insn", value: 70, isUnsigned: true)
!1792 = !DIEnumerator(name: "gt_ggc_e_18VEC_vcall_entry_gc", value: 71, isUnsigned: true)
!1793 = !DIEnumerator(name: "gt_ggc_e_18VEC_dcall_entry_gc", value: 72, isUnsigned: true)
!1794 = !DIEnumerator(name: "gt_ggc_e_16var_loc_list_def", value: 73, isUnsigned: true)
!1795 = !DIEnumerator(name: "gt_ggc_e_12var_loc_node", value: 74, isUnsigned: true)
!1796 = !DIEnumerator(name: "gt_ggc_e_20VEC_die_arg_entry_gc", value: 75, isUnsigned: true)
!1797 = !DIEnumerator(name: "gt_ggc_e_16limbo_die_struct", value: 76, isUnsigned: true)
!1798 = !DIEnumerator(name: "gt_ggc_e_20VEC_pubname_entry_gc", value: 77, isUnsigned: true)
!1799 = !DIEnumerator(name: "gt_ggc_e_19VEC_dw_attr_node_gc", value: 78, isUnsigned: true)
!1800 = !DIEnumerator(name: "gt_ggc_e_18comdat_type_struct", value: 79, isUnsigned: true)
!1801 = !DIEnumerator(name: "gt_ggc_e_25dw_ranges_by_label_struct", value: 80, isUnsigned: true)
!1802 = !DIEnumerator(name: "gt_ggc_e_16dw_ranges_struct", value: 81, isUnsigned: true)
!1803 = !DIEnumerator(name: "gt_ggc_e_28dw_separate_line_info_struct", value: 82, isUnsigned: true)
!1804 = !DIEnumerator(name: "gt_ggc_e_19dw_line_info_struct", value: 83, isUnsigned: true)
!1805 = !DIEnumerator(name: "gt_ggc_e_25VEC_deferred_locations_gc", value: 84, isUnsigned: true)
!1806 = !DIEnumerator(name: "gt_ggc_e_18dw_loc_list_struct", value: 85, isUnsigned: true)
!1807 = !DIEnumerator(name: "gt_ggc_e_15dwarf_file_data", value: 86, isUnsigned: true)
!1808 = !DIEnumerator(name: "gt_ggc_e_15queued_reg_save", value: 87, isUnsigned: true)
!1809 = !DIEnumerator(name: "gt_ggc_e_20indirect_string_node", value: 88, isUnsigned: true)
!1810 = !DIEnumerator(name: "gt_ggc_e_19dw_loc_descr_struct", value: 89, isUnsigned: true)
!1811 = !DIEnumerator(name: "gt_ggc_e_13dw_fde_struct", value: 90, isUnsigned: true)
!1812 = !DIEnumerator(name: "gt_ggc_e_13dw_cfi_struct", value: 91, isUnsigned: true)
!1813 = !DIEnumerator(name: "gt_ggc_e_8typeinfo", value: 92, isUnsigned: true)
!1814 = !DIEnumerator(name: "gt_ggc_e_22VEC_alias_set_entry_gc", value: 93, isUnsigned: true)
!1815 = !DIEnumerator(name: "gt_ggc_e_17alias_set_entry_d", value: 94, isUnsigned: true)
!1816 = !DIEnumerator(name: "gt_ggc_e_24constant_descriptor_tree", value: 95, isUnsigned: true)
!1817 = !DIEnumerator(name: "gt_ggc_e_15cgraph_asm_node", value: 96, isUnsigned: true)
!1818 = !DIEnumerator(name: "gt_ggc_e_12varpool_node", value: 97, isUnsigned: true)
!1819 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_set_gc", value: 98, isUnsigned: true)
!1820 = !DIEnumerator(name: "gt_ggc_e_19cgraph_node_set_def", value: 99, isUnsigned: true)
!1821 = !DIEnumerator(name: "gt_ggc_e_27cgraph_node_set_element_def", value: 100, isUnsigned: true)
!1822 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_ptr_gc", value: 101, isUnsigned: true)
!1823 = !DIEnumerator(name: "gt_ggc_e_11cgraph_edge", value: 102, isUnsigned: true)
!1824 = !DIEnumerator(name: "gt_ggc_e_24VEC_ipa_replace_map_p_gc", value: 103, isUnsigned: true)
!1825 = !DIEnumerator(name: "gt_ggc_e_15ipa_replace_map", value: 104, isUnsigned: true)
!1826 = !DIEnumerator(name: "gt_ggc_e_11cgraph_node", value: 105, isUnsigned: true)
!1827 = !DIEnumerator(name: "gt_ggc_e_18VEC_basic_block_gc", value: 106, isUnsigned: true)
!1828 = !DIEnumerator(name: "gt_ggc_e_14gimple_bb_info", value: 107, isUnsigned: true)
!1829 = !DIEnumerator(name: "gt_ggc_e_11rtl_bb_info", value: 108, isUnsigned: true)
!1830 = !DIEnumerator(name: "gt_ggc_e_11VEC_edge_gc", value: 109, isUnsigned: true)
!1831 = !DIEnumerator(name: "gt_ggc_e_17cselib_val_struct", value: 110, isUnsigned: true)
!1832 = !DIEnumerator(name: "gt_ggc_e_12elt_loc_list", value: 111, isUnsigned: true)
!1833 = !DIEnumerator(name: "gt_ggc_e_13VEC_loop_p_gc", value: 112, isUnsigned: true)
!1834 = !DIEnumerator(name: "gt_ggc_e_4loop", value: 113, isUnsigned: true)
!1835 = !DIEnumerator(name: "gt_ggc_e_9loop_exit", value: 114, isUnsigned: true)
!1836 = !DIEnumerator(name: "gt_ggc_e_13nb_iter_bound", value: 115, isUnsigned: true)
!1837 = !DIEnumerator(name: "gt_ggc_e_24types_used_by_vars_entry", value: 116, isUnsigned: true)
!1838 = !DIEnumerator(name: "gt_ggc_e_17language_function", value: 117, isUnsigned: true)
!1839 = !DIEnumerator(name: "gt_ggc_e_5loops", value: 118, isUnsigned: true)
!1840 = !DIEnumerator(name: "gt_ggc_e_18control_flow_graph", value: 119, isUnsigned: true)
!1841 = !DIEnumerator(name: "gt_ggc_e_9eh_status", value: 120, isUnsigned: true)
!1842 = !DIEnumerator(name: "gt_ggc_e_20initial_value_struct", value: 121, isUnsigned: true)
!1843 = !DIEnumerator(name: "gt_ggc_e_17rtx_constant_pool", value: 122, isUnsigned: true)
!1844 = !DIEnumerator(name: "gt_ggc_e_18VEC_temp_slot_p_gc", value: 123, isUnsigned: true)
!1845 = !DIEnumerator(name: "gt_ggc_e_9temp_slot", value: 124, isUnsigned: true)
!1846 = !DIEnumerator(name: "gt_ggc_e_9gimple_df", value: 125, isUnsigned: true)
!1847 = !DIEnumerator(name: "gt_ggc_e_23VEC_call_site_record_gc", value: 126, isUnsigned: true)
!1848 = !DIEnumerator(name: "gt_ggc_e_18call_site_record_d", value: 127, isUnsigned: true)
!1849 = !DIEnumerator(name: "gt_ggc_e_14sequence_stack", value: 128, isUnsigned: true)
!1850 = !DIEnumerator(name: "gt_ggc_e_8elt_list", value: 129, isUnsigned: true)
!1851 = !DIEnumerator(name: "gt_ggc_e_17tree_priority_map", value: 130, isUnsigned: true)
!1852 = !DIEnumerator(name: "gt_ggc_e_12tree_int_map", value: 131, isUnsigned: true)
!1853 = !DIEnumerator(name: "gt_ggc_e_8tree_map", value: 132, isUnsigned: true)
!1854 = !DIEnumerator(name: "gt_ggc_e_14lang_tree_node", value: 133, isUnsigned: true)
!1855 = !DIEnumerator(name: "gt_ggc_e_24tree_statement_list_node", value: 134, isUnsigned: true)
!1856 = !DIEnumerator(name: "gt_ggc_e_9var_ann_d", value: 135, isUnsigned: true)
!1857 = !DIEnumerator(name: "gt_ggc_e_9lang_decl", value: 136, isUnsigned: true)
!1858 = !DIEnumerator(name: "gt_ggc_e_9lang_type", value: 137, isUnsigned: true)
!1859 = !DIEnumerator(name: "gt_ggc_e_10die_struct", value: 138, isUnsigned: true)
!1860 = !DIEnumerator(name: "gt_ggc_e_15varray_head_tag", value: 139, isUnsigned: true)
!1861 = !DIEnumerator(name: "gt_ggc_e_12ptr_info_def", value: 140, isUnsigned: true)
!1862 = !DIEnumerator(name: "gt_ggc_e_22VEC_constructor_elt_gc", value: 141, isUnsigned: true)
!1863 = !DIEnumerator(name: "gt_ggc_e_17VEC_alias_pair_gc", value: 142, isUnsigned: true)
!1864 = !DIEnumerator(name: "gt_ggc_e_11VEC_tree_gc", value: 143, isUnsigned: true)
!1865 = !DIEnumerator(name: "gt_ggc_e_12VEC_uchar_gc", value: 144, isUnsigned: true)
!1866 = !DIEnumerator(name: "gt_ggc_e_8function", value: 145, isUnsigned: true)
!1867 = !DIEnumerator(name: "gt_ggc_e_23constant_descriptor_rtx", value: 146, isUnsigned: true)
!1868 = !DIEnumerator(name: "gt_ggc_e_11fixed_value", value: 147, isUnsigned: true)
!1869 = !DIEnumerator(name: "gt_ggc_e_10real_value", value: 148, isUnsigned: true)
!1870 = !DIEnumerator(name: "gt_ggc_e_10VEC_rtx_gc", value: 149, isUnsigned: true)
!1871 = !DIEnumerator(name: "gt_ggc_e_12object_block", value: 150, isUnsigned: true)
!1872 = !DIEnumerator(name: "gt_ggc_e_9reg_attrs", value: 151, isUnsigned: true)
!1873 = !DIEnumerator(name: "gt_ggc_e_9mem_attrs", value: 152, isUnsigned: true)
!1874 = !DIEnumerator(name: "gt_ggc_e_14bitmap_obstack", value: 153, isUnsigned: true)
!1875 = !DIEnumerator(name: "gt_ggc_e_18bitmap_element_def", value: 154, isUnsigned: true)
!1876 = !DIEnumerator(name: "gt_ggc_e_16machine_function", value: 155, isUnsigned: true)
!1877 = !DIEnumerator(name: "gt_ggc_e_17stack_local_entry", value: 156, isUnsigned: true)
!1878 = !DIEnumerator(name: "gt_ggc_e_15basic_block_def", value: 157, isUnsigned: true)
!1879 = !DIEnumerator(name: "gt_ggc_e_8edge_def", value: 158, isUnsigned: true)
!1880 = !DIEnumerator(name: "gt_ggc_e_17gimple_seq_node_d", value: 159, isUnsigned: true)
!1881 = !DIEnumerator(name: "gt_ggc_e_12gimple_seq_d", value: 160, isUnsigned: true)
!1882 = !DIEnumerator(name: "gt_ggc_e_7section", value: 161, isUnsigned: true)
!1883 = !DIEnumerator(name: "gt_ggc_e_18gimple_statement_d", value: 162, isUnsigned: true)
!1884 = !DIEnumerator(name: "gt_ggc_e_9rtvec_def", value: 163, isUnsigned: true)
!1885 = !DIEnumerator(name: "gt_ggc_e_7rtx_def", value: 164, isUnsigned: true)
!1886 = !DIEnumerator(name: "gt_ggc_e_15bitmap_head_def", value: 165, isUnsigned: true)
!1887 = !DIEnumerator(name: "gt_ggc_e_9tree_node", value: 166, isUnsigned: true)
!1888 = !DIEnumerator(name: "gt_ggc_e_6answer", value: 167, isUnsigned: true)
!1889 = !DIEnumerator(name: "gt_ggc_e_9cpp_macro", value: 168, isUnsigned: true)
!1890 = !DIEnumerator(name: "gt_ggc_e_9cpp_token", value: 169, isUnsigned: true)
!1891 = !DIEnumerator(name: "gt_ggc_e_9line_maps", value: 170, isUnsigned: true)
!1892 = !DIEnumerator(name: "gt_e_II17splay_tree_node_s", value: 171, isUnsigned: true)
!1893 = !DIEnumerator(name: "gt_e_SP9tree_node17splay_tree_node_s", value: 172, isUnsigned: true)
!1894 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node17splay_tree_node_s", value: 173, isUnsigned: true)
!1895 = !DIEnumerator(name: "gt_e_IP9tree_node17splay_tree_node_s", value: 174, isUnsigned: true)
!1896 = !DIEnumerator(name: "gt_e_P15interface_tuple4htab", value: 175, isUnsigned: true)
!1897 = !DIEnumerator(name: "gt_e_P16volatilized_type4htab", value: 176, isUnsigned: true)
!1898 = !DIEnumerator(name: "gt_e_P17string_descriptor4htab", value: 177, isUnsigned: true)
!1899 = !DIEnumerator(name: "gt_e_P14type_assertion4htab", value: 178, isUnsigned: true)
!1900 = !DIEnumerator(name: "gt_e_P18treetreehash_entry4htab", value: 179, isUnsigned: true)
!1901 = !DIEnumerator(name: "gt_e_P17module_htab_entry4htab", value: 180, isUnsigned: true)
!1902 = !DIEnumerator(name: "gt_e_P21pending_abstract_type4htab", value: 181, isUnsigned: true)
!1903 = !DIEnumerator(name: "gt_e_P10spec_entry4htab", value: 182, isUnsigned: true)
!1904 = !DIEnumerator(name: "gt_e_P16cxx_int_tree_map4htab", value: 183, isUnsigned: true)
!1905 = !DIEnumerator(name: "gt_e_P17named_label_entry4htab", value: 184, isUnsigned: true)
!1906 = !DIEnumerator(name: "gt_e_P12tree_int_map4htab", value: 185, isUnsigned: true)
!1907 = !DIEnumerator(name: "gt_e_P20lto_symtab_entry_def4htab", value: 186, isUnsigned: true)
!1908 = !DIEnumerator(name: "gt_e_IP9tree_node12splay_tree_s", value: 187, isUnsigned: true)
!1909 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node12splay_tree_s", value: 188, isUnsigned: true)
!1910 = !DIEnumerator(name: "gt_e_P12varpool_node4htab", value: 189, isUnsigned: true)
!1911 = !DIEnumerator(name: "gt_e_P13scev_info_str4htab", value: 190, isUnsigned: true)
!1912 = !DIEnumerator(name: "gt_e_P23constant_descriptor_rtx4htab", value: 191, isUnsigned: true)
!1913 = !DIEnumerator(name: "gt_e_P24constant_descriptor_tree4htab", value: 192, isUnsigned: true)
!1914 = !DIEnumerator(name: "gt_e_P12object_block4htab", value: 193, isUnsigned: true)
!1915 = !DIEnumerator(name: "gt_e_P7section4htab", value: 194, isUnsigned: true)
!1916 = !DIEnumerator(name: "gt_e_P17tree_priority_map4htab", value: 195, isUnsigned: true)
!1917 = !DIEnumerator(name: "gt_e_P8tree_map4htab", value: 196, isUnsigned: true)
!1918 = !DIEnumerator(name: "gt_e_P9type_hash4htab", value: 197, isUnsigned: true)
!1919 = !DIEnumerator(name: "gt_e_P13libfunc_entry4htab", value: 198, isUnsigned: true)
!1920 = !DIEnumerator(name: "gt_e_P23temp_slot_address_entry4htab", value: 199, isUnsigned: true)
!1921 = !DIEnumerator(name: "gt_e_P15throw_stmt_node4htab", value: 200, isUnsigned: true)
!1922 = !DIEnumerator(name: "gt_e_P9reg_attrs4htab", value: 201, isUnsigned: true)
!1923 = !DIEnumerator(name: "gt_e_P9mem_attrs4htab", value: 202, isUnsigned: true)
!1924 = !DIEnumerator(name: "gt_e_P7rtx_def4htab", value: 203, isUnsigned: true)
!1925 = !DIEnumerator(name: "gt_e_SP9tree_node12splay_tree_s", value: 204, isUnsigned: true)
!1926 = !DIEnumerator(name: "gt_e_P10vcall_insn4htab", value: 205, isUnsigned: true)
!1927 = !DIEnumerator(name: "gt_e_P16var_loc_list_def4htab", value: 206, isUnsigned: true)
!1928 = !DIEnumerator(name: "gt_e_P10die_struct4htab", value: 207, isUnsigned: true)
!1929 = !DIEnumerator(name: "gt_e_P15dwarf_file_data4htab", value: 208, isUnsigned: true)
!1930 = !DIEnumerator(name: "gt_e_P20indirect_string_node4htab", value: 209, isUnsigned: true)
!1931 = !DIEnumerator(name: "gt_e_P11cgraph_node4htab", value: 210, isUnsigned: true)
!1932 = !DIEnumerator(name: "gt_e_II12splay_tree_s", value: 211, isUnsigned: true)
!1933 = !DIEnumerator(name: "gt_e_P27cgraph_node_set_element_def4htab", value: 212, isUnsigned: true)
!1934 = !DIEnumerator(name: "gt_e_P11cgraph_edge4htab", value: 213, isUnsigned: true)
!1935 = !DIEnumerator(name: "gt_e_P9loop_exit4htab", value: 214, isUnsigned: true)
!1936 = !DIEnumerator(name: "gt_e_P24types_used_by_vars_entry4htab", value: 215, isUnsigned: true)
!1937 = !DIEnumerator(name: "gt_e_P9tree_node4htab", value: 216, isUnsigned: true)
!1938 = !DIEnumerator(name: "gt_types_enum_last", value: 217, isUnsigned: true)
!1939 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !151, line: 220, baseType: !7, size: 32, elements: !1940)
!1940 = !{!1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658}
!1941 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!1942 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!1943 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!1944 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!1945 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!1946 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!1947 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!1948 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!1949 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!1950 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!1951 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!1952 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!1953 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!1954 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!1955 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!1956 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!1957 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!1958 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!1959 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!1960 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!1961 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!1962 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!1963 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!1964 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!1965 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!1966 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!1967 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!1968 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!1969 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!1970 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!1971 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!1972 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!1973 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!1974 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!1975 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!1976 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!1977 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!1978 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!1979 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!1980 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!1981 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!1982 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!1983 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!1984 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!1985 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!1986 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!1987 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!1988 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!1989 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!1990 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!1991 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!1992 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!1993 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!1994 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!1995 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!1996 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!1997 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!1998 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!1999 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!2000 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!2001 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!2002 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!2003 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!2004 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!2005 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!2006 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!2007 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!2008 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!2009 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!2010 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!2011 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!2012 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!2013 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!2014 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!2015 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!2016 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!2017 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!2018 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!2019 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!2020 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!2021 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!2022 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!2023 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!2024 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!2025 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!2026 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!2027 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!2028 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!2029 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!2030 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!2031 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!2032 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!2033 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!2034 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!2035 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!2036 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!2037 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!2038 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!2039 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!2040 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!2041 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!2042 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!2043 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!2044 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!2045 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!2046 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!2047 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!2048 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!2049 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!2050 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!2051 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!2052 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!2053 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!2054 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!2055 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!2056 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!2057 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!2058 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!2059 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!2060 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!2061 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!2062 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!2063 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!2064 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!2065 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!2066 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!2067 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!2068 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!2069 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!2070 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!2071 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!2072 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!2073 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!2074 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!2075 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!2076 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!2077 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!2078 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!2079 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!2080 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!2081 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!2082 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!2083 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!2084 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!2085 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!2086 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!2087 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!2088 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!2089 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!2090 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!2091 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!2092 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!2093 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!2094 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!2095 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!2096 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!2097 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!2098 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!2099 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!2100 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!2101 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!2102 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!2103 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!2104 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!2105 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!2106 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!2107 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!2108 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!2109 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!2110 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!2111 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!2112 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!2113 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!2114 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!2115 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!2116 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!2117 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!2118 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!2119 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!2120 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!2121 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!2122 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!2123 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!2124 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!2125 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!2126 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!2127 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!2128 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!2129 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!2130 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!2131 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!2132 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!2133 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!2134 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!2135 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!2136 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!2137 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!2138 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!2139 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!2140 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!2141 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!2142 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!2143 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!2144 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!2145 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!2146 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!2147 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!2148 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!2149 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!2150 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!2151 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!2152 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!2153 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!2154 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!2155 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!2156 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!2157 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!2158 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!2159 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!2160 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!2161 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!2162 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!2163 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!2164 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!2165 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!2166 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!2167 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!2168 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!2169 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!2170 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!2171 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!2172 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!2173 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!2174 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!2175 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!2176 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!2177 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!2178 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!2179 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!2180 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!2181 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!2182 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!2183 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!2184 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!2185 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!2186 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!2187 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!2188 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!2189 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!2190 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!2191 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!2192 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!2193 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!2194 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!2195 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!2196 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!2197 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!2198 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!2199 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!2200 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!2201 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!2202 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!2203 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!2204 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!2205 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!2206 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!2207 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!2208 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!2209 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!2210 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!2211 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!2212 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!2213 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!2214 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!2215 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!2216 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!2217 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!2218 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!2219 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!2220 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!2221 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!2222 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!2223 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!2224 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!2225 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!2226 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!2227 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!2228 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!2229 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!2230 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!2231 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!2232 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!2233 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!2234 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!2235 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!2236 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!2237 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!2238 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!2239 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!2240 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!2241 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!2242 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!2243 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!2244 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!2245 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!2246 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!2247 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!2248 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!2249 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!2250 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!2251 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!2252 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!2253 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!2254 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!2255 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!2256 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!2257 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!2258 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!2259 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!2260 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!2261 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!2262 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!2263 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!2264 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!2265 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!2266 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!2267 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!2268 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!2269 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!2270 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!2271 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!2272 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!2273 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!2274 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!2275 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!2276 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!2277 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!2278 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!2279 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!2280 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!2281 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!2282 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!2283 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!2284 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!2285 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!2286 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!2287 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!2288 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!2289 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!2290 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!2291 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!2292 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!2293 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!2294 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!2295 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!2296 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!2297 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!2298 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!2299 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!2300 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!2301 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!2302 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!2303 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!2304 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!2305 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!2306 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!2307 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!2308 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!2309 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!2310 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!2311 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!2312 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!2313 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!2314 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!2315 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!2316 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!2317 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!2318 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!2319 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!2320 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!2321 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!2322 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!2323 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!2324 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!2325 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!2326 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!2327 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!2328 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!2329 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!2330 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!2331 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!2332 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!2333 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!2334 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!2335 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!2336 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!2337 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!2338 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!2339 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!2340 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!2341 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!2342 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!2343 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!2344 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!2345 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!2346 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!2347 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!2348 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!2349 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!2350 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!2351 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!2352 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!2353 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!2354 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!2355 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!2356 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!2357 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!2358 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!2359 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!2360 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!2361 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!2362 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!2363 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!2364 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!2365 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!2366 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!2367 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!2368 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!2369 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!2370 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!2371 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!2372 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!2373 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!2374 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!2375 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!2376 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!2377 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!2378 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!2379 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!2380 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!2381 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!2382 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!2383 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!2384 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!2385 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!2386 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!2387 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!2388 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!2389 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!2390 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!2391 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!2392 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!2393 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!2394 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!2395 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!2396 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!2397 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!2398 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!2399 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!2400 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!2401 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!2402 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!2403 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!2404 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!2405 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!2406 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!2407 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!2408 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!2409 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!2410 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!2411 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!2412 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!2413 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!2414 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!2415 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!2416 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!2417 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!2418 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!2419 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!2420 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!2421 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!2422 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!2423 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!2424 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!2425 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!2426 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!2427 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!2428 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!2429 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!2430 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!2431 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!2432 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!2433 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!2434 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!2435 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!2436 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!2437 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!2438 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!2439 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!2440 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!2441 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!2442 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!2443 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!2444 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!2445 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!2446 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!2447 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!2448 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!2449 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!2450 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!2451 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!2452 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!2453 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!2454 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!2455 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!2456 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!2457 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!2458 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!2459 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!2460 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!2461 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!2462 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!2463 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!2464 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!2465 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!2466 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!2467 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!2468 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!2469 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!2470 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!2471 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!2472 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!2473 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!2474 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!2475 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!2476 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!2477 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!2478 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!2479 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!2480 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!2481 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!2482 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!2483 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!2484 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!2485 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!2486 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!2487 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!2488 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!2489 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!2490 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!2491 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!2492 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!2493 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!2494 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!2495 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!2496 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!2497 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!2498 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!2499 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!2500 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!2501 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!2502 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!2503 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!2504 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!2505 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!2506 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!2507 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!2508 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!2509 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!2510 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!2511 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!2512 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!2513 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!2514 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!2515 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!2516 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!2517 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!2518 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!2519 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!2520 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!2521 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!2522 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!2523 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!2524 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!2525 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!2526 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!2527 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!2528 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!2529 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!2530 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!2531 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!2532 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!2533 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!2534 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!2535 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!2536 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!2537 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!2538 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!2539 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!2540 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!2541 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!2542 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!2543 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!2544 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!2545 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!2546 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!2547 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!2548 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!2549 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!2550 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!2551 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!2552 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!2553 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!2554 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!2555 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!2556 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!2557 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!2558 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!2559 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!2560 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!2561 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!2562 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!2563 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!2564 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!2565 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!2566 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!2567 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!2568 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!2569 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!2570 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!2571 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!2572 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!2573 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!2574 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!2575 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!2576 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!2577 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!2578 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!2579 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!2580 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!2581 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!2582 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!2583 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!2584 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!2585 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!2586 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!2587 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!2588 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!2589 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!2590 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!2591 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!2592 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!2593 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!2594 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!2595 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!2596 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!2597 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!2598 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!2599 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!2600 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!2601 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!2602 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!2603 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!2604 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!2605 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!2606 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!2607 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!2608 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!2609 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!2610 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!2611 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!2612 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!2613 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!2614 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!2615 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!2616 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!2617 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!2618 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!2619 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!2620 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!2621 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!2622 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!2623 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!2624 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!2625 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!2626 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!2627 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!2628 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!2629 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!2630 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!2631 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!2632 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!2633 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!2634 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!2635 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!2636 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!2637 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!2638 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!2639 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!2640 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!2641 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!2642 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!2643 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!2644 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!2645 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!2646 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!2647 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!2648 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!2649 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!2650 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!2651 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!2652 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!2653 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!2654 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!2655 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!2656 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!2657 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!2658 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!2659 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !151, line: 205, baseType: !7, size: 32, elements: !2660)
!2660 = !{!2661, !2662, !2663, !2664}
!2661 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!2662 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!2663 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!2664 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!2665 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !598, line: 956, baseType: !7, size: 32, elements: !2666)
!2666 = !{!2667, !2668, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680}
!2667 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!2668 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!2669 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!2670 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!2671 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!2672 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!2673 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!2674 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!2675 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!2676 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!2677 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!2678 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!2679 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!2680 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!2681 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !151, line: 4288, baseType: !7, size: 32, elements: !2682)
!2682 = !{!2683, !2684, !2685, !2686, !2687}
!2683 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!2684 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!2685 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!2686 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!2687 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!2688 = !{!2689, !2691, !183, !2692, !2695, !3782, !2702, !3109, !3783, !2798, !2964, !3784, !2876, !7, !5, !597, !2818, !2757, !1651, !3785, !3083, !2755, !511, !3791, !3285, !3306, !3499, !3559, !3798, !3092, !3800, !3802, !3804, !3105, !2703, !3805, !3807, !3824, !3826, !3828, !3830, !3148}
!2689 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !2690, line: 44, baseType: !7)
!2690 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2691 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!2692 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2693, size: 64)
!2693 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2694)
!2694 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2695 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2696, size: 64)
!2696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_map", file: !151, line: 5278, size: 192, elements: !2697)
!2697 = !{!2698, !3780, !3781}
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2696, file: !151, line: 5279, baseType: !2699, size: 64)
!2699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_map_base", file: !151, line: 5267, size: 64, elements: !2700)
!2700 = !{!2701}
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "from", scope: !2699, file: !151, line: 5268, baseType: !2702, size: 64)
!2702 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !512, line: 56, baseType: !2703)
!2703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2704, size: 64)
!2704 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !151, line: 3371, size: 1792, elements: !2705)
!2705 = !{!2706, !2739, !2745, !2758, !2777, !2788, !2793, !2803, !2809, !2823, !2833, !2871, !3163, !3191, !3199, !3200, !3205, !3214, !3220, !3225, !3229, !3233, !3407, !3454, !3460, !3467, !3474, !3500, !3525, !3542, !3554, !3576, !3591, !3762}
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2704, file: !151, line: 3372, baseType: !2707, size: 64)
!2707 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !151, line: 360, size: 64, elements: !2708)
!2708 = !{!2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738}
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2707, file: !151, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !2707, file: !151, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !2707, file: !151, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !2707, file: !151, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !2707, file: !151, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !2707, file: !151, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !2707, file: !151, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !2707, file: !151, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !2707, file: !151, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !2707, file: !151, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !2707, file: !151, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !2707, file: !151, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !2707, file: !151, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !2707, file: !151, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !2707, file: !151, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !2707, file: !151, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !2707, file: !151, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !2707, file: !151, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2707, file: !151, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2707, file: !151, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2707, file: !151, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2707, file: !151, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2707, file: !151, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2707, file: !151, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2707, file: !151, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2707, file: !151, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !2707, file: !151, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !2707, file: !151, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !2707, file: !151, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !2707, file: !151, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2704, file: !151, line: 3373, baseType: !2740, size: 192)
!2740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !151, line: 402, size: 192, elements: !2741)
!2741 = !{!2742, !2743, !2744}
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2740, file: !151, line: 403, baseType: !2707, size: 64)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !2740, file: !151, line: 404, baseType: !2702, size: 64, offset: 64)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2740, file: !151, line: 405, baseType: !2702, size: 64, offset: 128)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2704, file: !151, line: 3374, baseType: !2746, size: 320)
!2746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !151, line: 1384, size: 320, elements: !2747)
!2747 = !{!2748, !2749}
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2746, file: !151, line: 1385, baseType: !2740, size: 192)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2746, file: !151, line: 1386, baseType: !2750, size: 128, offset: 192)
!2750 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !2751, line: 58, baseType: !2752)
!2751 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2752 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2751, line: 54, size: 128, elements: !2753)
!2753 = !{!2754, !2756}
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !2752, file: !2751, line: 56, baseType: !2755, size: 64)
!2755 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !2752, file: !2751, line: 57, baseType: !2757, size: 64, offset: 64)
!2757 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !2704, file: !151, line: 3375, baseType: !2759, size: 256)
!2759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !151, line: 1397, size: 256, elements: !2760)
!2760 = !{!2761, !2762}
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2759, file: !151, line: 1398, baseType: !2740, size: 192)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !2759, file: !151, line: 1399, baseType: !2763, size: 64, offset: 192)
!2763 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2764, size: 64)
!2764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !2765, line: 52, size: 256, elements: !2766)
!2765 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2766 = !{!2767, !2768, !2769, !2770, !2771, !2772, !2773}
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !2764, file: !2765, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !2764, file: !2765, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !2764, file: !2765, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !2764, file: !2765, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2764, file: !2765, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !2764, file: !2765, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !2764, file: !2765, line: 62, baseType: !2774, size: 192, offset: 64)
!2774 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2755, size: 192, elements: !2775)
!2775 = !{!2776}
!2776 = !DISubrange(count: 3)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !2704, file: !151, line: 3376, baseType: !2778, size: 256)
!2778 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !151, line: 1408, size: 256, elements: !2779)
!2779 = !{!2780, !2781}
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2778, file: !151, line: 1409, baseType: !2740, size: 192)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !2778, file: !151, line: 1410, baseType: !2782, size: 64, offset: 192)
!2782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2783, size: 64)
!2783 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !2784, line: 27, size: 192, elements: !2785)
!2784 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2785 = !{!2786, !2787}
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2783, file: !2784, line: 29, baseType: !2750, size: 128)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2783, file: !2784, line: 30, baseType: !5, size: 32, offset: 128)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !2704, file: !151, line: 3377, baseType: !2789, size: 256)
!2789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !151, line: 1437, size: 256, elements: !2790)
!2790 = !{!2791, !2792}
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2789, file: !151, line: 1438, baseType: !2740, size: 192)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2789, file: !151, line: 1439, baseType: !2702, size: 64, offset: 192)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2704, file: !151, line: 3378, baseType: !2794, size: 256)
!2794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !151, line: 1418, size: 256, elements: !2795)
!2795 = !{!2796, !2797, !2799}
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2794, file: !151, line: 1419, baseType: !2740, size: 192)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2794, file: !151, line: 1420, baseType: !2798, size: 32, offset: 192)
!2798 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2794, file: !151, line: 1421, baseType: !2800, size: 8, offset: 224)
!2800 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 8, elements: !2801)
!2801 = !{!2802}
!2802 = !DISubrange(count: 1)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !2704, file: !151, line: 3379, baseType: !2804, size: 320)
!2804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !151, line: 1428, size: 320, elements: !2805)
!2805 = !{!2806, !2807, !2808}
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2804, file: !151, line: 1429, baseType: !2740, size: 192)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !2804, file: !151, line: 1430, baseType: !2702, size: 64, offset: 192)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !2804, file: !151, line: 1431, baseType: !2702, size: 64, offset: 256)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !2704, file: !151, line: 3380, baseType: !2810, size: 320)
!2810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !151, line: 1460, size: 320, elements: !2811)
!2811 = !{!2812, !2813}
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2810, file: !151, line: 1461, baseType: !2740, size: 192)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2810, file: !151, line: 1462, baseType: !2814, size: 128, offset: 192)
!2814 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !2815, line: 31, size: 128, elements: !2816)
!2815 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2816 = !{!2817, !2821, !2822}
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2814, file: !2815, line: 32, baseType: !2818, size: 64)
!2818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2819, size: 64)
!2819 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2820)
!2820 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2814, file: !2815, line: 33, baseType: !7, size: 32, offset: 64)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !2814, file: !2815, line: 34, baseType: !7, size: 32, offset: 96)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !2704, file: !151, line: 3381, baseType: !2824, size: 384)
!2824 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !151, line: 2507, size: 384, elements: !2825)
!2825 = !{!2826, !2827, !2830, !2831, !2832}
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2824, file: !151, line: 2508, baseType: !2740, size: 192)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2824, file: !151, line: 2509, baseType: !2828, size: 32, offset: 192)
!2828 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !2829, line: 58, baseType: !2689)
!2829 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2824, file: !151, line: 2510, baseType: !7, size: 32, offset: 224)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2824, file: !151, line: 2511, baseType: !2702, size: 64, offset: 256)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2824, file: !151, line: 2512, baseType: !2702, size: 64, offset: 320)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !2704, file: !151, line: 3382, baseType: !2834, size: 896)
!2834 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !151, line: 2652, size: 896, elements: !2835)
!2835 = !{!2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868}
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2834, file: !151, line: 2653, baseType: !2824, size: 384)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2834, file: !151, line: 2654, baseType: !2702, size: 64, offset: 384)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2834, file: !151, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !2834, file: !151, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !2834, file: !151, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !2834, file: !151, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2834, file: !151, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !2834, file: !151, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !2834, file: !151, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !2834, file: !151, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2834, file: !151, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2834, file: !151, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2834, file: !151, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2834, file: !151, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2834, file: !151, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2834, file: !151, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2834, file: !151, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !2834, file: !151, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !2834, file: !151, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !2834, file: !151, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !2834, file: !151, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !2834, file: !151, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !2834, file: !151, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !2834, file: !151, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !2834, file: !151, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !2834, file: !151, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !2834, file: !151, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2834, file: !151, line: 2703, baseType: !7, size: 32, offset: 512)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2834, file: !151, line: 2705, baseType: !2702, size: 64, offset: 576)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2834, file: !151, line: 2706, baseType: !2702, size: 64, offset: 640)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2834, file: !151, line: 2707, baseType: !2702, size: 64, offset: 704)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2834, file: !151, line: 2708, baseType: !2702, size: 64, offset: 768)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2834, file: !151, line: 2711, baseType: !2869, size: 64, offset: 832)
!2869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2870, size: 64)
!2870 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !151, line: 2711, flags: DIFlagFwdDecl)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !2704, file: !151, line: 3383, baseType: !2872, size: 960)
!2872 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !151, line: 2756, size: 960, elements: !2873)
!2873 = !{!2874, !2875}
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2872, file: !151, line: 2757, baseType: !2834, size: 896)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2872, file: !151, line: 2758, baseType: !2876, size: 64, offset: 896)
!2876 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !512, line: 50, baseType: !2877)
!2877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2878, size: 64)
!2878 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !598, line: 240, size: 384, elements: !2879)
!2879 = !{!2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890}
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2878, file: !598, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2878, file: !598, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !2878, file: !598, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2878, file: !598, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !2878, file: !598, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !2878, file: !598, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !2878, file: !598, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2878, file: !598, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !2878, file: !598, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !2878, file: !598, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2878, file: !598, line: 321, baseType: !2891, size: 320, offset: 64)
!2891 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !598, line: 315, size: 320, elements: !2892)
!2892 = !{!2893, !3097, !3099, !3161, !3162}
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2891, file: !598, line: 316, baseType: !2894, size: 64)
!2894 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2895, size: 64, elements: !2801)
!2895 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !598, line: 183, baseType: !2896)
!2896 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !598, line: 166, size: 64, elements: !2897)
!2897 = !{!2898, !2899, !2900, !2901, !2902, !2910, !2911, !2923, !2926, !2987, !2988, !3062, !3075, !3082}
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !2896, file: !598, line: 168, baseType: !2798, size: 32)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !2896, file: !598, line: 169, baseType: !7, size: 32)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !2896, file: !598, line: 170, baseType: !2692, size: 64)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !2896, file: !598, line: 171, baseType: !2876, size: 64)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !2896, file: !598, line: 172, baseType: !2903, size: 64)
!2903 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !512, line: 53, baseType: !2904)
!2904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2905, size: 64)
!2905 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !598, line: 359, size: 128, elements: !2906)
!2906 = !{!2907, !2908}
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !2905, file: !598, line: 360, baseType: !2798, size: 32)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !2905, file: !598, line: 361, baseType: !2909, size: 64, offset: 64)
!2909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2876, size: 64, elements: !2801)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !2896, file: !598, line: 173, baseType: !5, size: 32)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !2896, file: !598, line: 174, baseType: !2912, size: 32)
!2912 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !598, line: 133, baseType: !2913)
!2913 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !598, line: 115, size: 32, elements: !2914)
!2914 = !{!2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922}
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !2913, file: !598, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !2913, file: !598, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !2913, file: !598, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !2913, file: !598, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !2913, file: !598, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !2913, file: !598, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !2913, file: !598, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !2913, file: !598, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !2896, file: !598, line: 175, baseType: !2924, size: 64)
!2924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2925, size: 64)
!2925 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !598, line: 175, flags: DIFlagFwdDecl)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !2896, file: !598, line: 176, baseType: !2927, size: 64)
!2927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2928, size: 64)
!2928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2929, line: 75, size: 256, elements: !2930)
!2929 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2930 = !{!2931, !2945, !2946, !2947}
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2928, file: !2929, line: 76, baseType: !2932, size: 64)
!2932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2933, size: 64)
!2933 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2929, line: 68, baseType: !2934)
!2934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2929, line: 63, size: 320, elements: !2935)
!2935 = !{!2936, !2938, !2939, !2940}
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2934, file: !2929, line: 64, baseType: !2937, size: 64)
!2937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2934, size: 64)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2934, file: !2929, line: 65, baseType: !2937, size: 64, offset: 64)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2934, file: !2929, line: 66, baseType: !7, size: 32, offset: 128)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2934, file: !2929, line: 67, baseType: !2941, size: 128, offset: 192)
!2941 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2942, size: 128, elements: !2943)
!2942 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2929, line: 29, baseType: !2755)
!2943 = !{!2944}
!2944 = !DISubrange(count: 2)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2928, file: !2929, line: 77, baseType: !2932, size: 64, offset: 64)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2928, file: !2929, line: 78, baseType: !7, size: 32, offset: 128)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2928, file: !2929, line: 79, baseType: !2948, size: 64, offset: 192)
!2948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2949, size: 64)
!2949 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2929, line: 49, baseType: !2950)
!2950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2929, line: 45, size: 832, elements: !2951)
!2951 = !{!2952, !2953, !2954}
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2950, file: !2929, line: 46, baseType: !2937, size: 64)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2950, file: !2929, line: 47, baseType: !2927, size: 64, offset: 64)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2950, file: !2929, line: 48, baseType: !2955, size: 704, offset: 128)
!2955 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2956, line: 164, size: 704, elements: !2957)
!2956 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2957 = !{!2958, !2959, !2970, !2971, !2972, !2973, !2974, !2975, !2979, !2983, !2984, !2985, !2986}
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2955, file: !2956, line: 166, baseType: !2757, size: 64)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2955, file: !2956, line: 167, baseType: !2960, size: 64, offset: 64)
!2960 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2961, size: 64)
!2961 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2956, line: 157, size: 192, elements: !2962)
!2962 = !{!2963, !2965, !2966}
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2961, file: !2956, line: 159, baseType: !2964, size: 64)
!2964 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2694, size: 64)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2961, file: !2956, line: 160, baseType: !2960, size: 64, offset: 64)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2961, file: !2956, line: 161, baseType: !2967, size: 32, offset: 128)
!2967 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 32, elements: !2968)
!2968 = !{!2969}
!2969 = !DISubrange(count: 4)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2955, file: !2956, line: 168, baseType: !2964, size: 64, offset: 128)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2955, file: !2956, line: 169, baseType: !2964, size: 64, offset: 192)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2955, file: !2956, line: 170, baseType: !2964, size: 64, offset: 256)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2955, file: !2956, line: 171, baseType: !2757, size: 64, offset: 320)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2955, file: !2956, line: 172, baseType: !2798, size: 32, offset: 384)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2955, file: !2956, line: 176, baseType: !2976, size: 64, offset: 448)
!2976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2977, size: 64)
!2977 = !DISubroutineType(types: !2978)
!2978 = !{!2960, !2691, !2757}
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2955, file: !2956, line: 177, baseType: !2980, size: 64, offset: 512)
!2980 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2981, size: 64)
!2981 = !DISubroutineType(types: !2982)
!2982 = !{null, !2691, !2960}
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2955, file: !2956, line: 178, baseType: !2691, size: 64, offset: 576)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2955, file: !2956, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2955, file: !2956, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2955, file: !2956, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !2896, file: !598, line: 177, baseType: !2702, size: 64)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !2896, file: !598, line: 178, baseType: !2989, size: 64)
!2989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2990, size: 64)
!2990 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !2991)
!2991 = !{!2992, !3027, !3028, !3029, !3032, !3036, !3037, !3038, !3056, !3057, !3058, !3059, !3060, !3061}
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2990, file: !135, line: 219, baseType: !2993, size: 64)
!2993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2994, size: 64)
!2994 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !2995)
!2995 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !2996)
!2996 = !{!2997}
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2995, file: !135, line: 151, baseType: !2998, size: 128)
!2998 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !2999)
!2999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !3000)
!3000 = !{!3001, !3002, !3003}
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2999, file: !135, line: 150, baseType: !7, size: 32)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2999, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2999, file: !135, line: 150, baseType: !3004, size: 64, offset: 64)
!3004 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3005, size: 64, elements: !2801)
!3005 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !512, line: 108, baseType: !3006)
!3006 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3007, size: 64)
!3007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !3008)
!3008 = !{!3009, !3010, !3011, !3019, !3020, !3021, !3022, !3023, !3024, !3025}
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !3007, file: !135, line: 124, baseType: !2989, size: 64)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !3007, file: !135, line: 125, baseType: !2989, size: 64, offset: 64)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !3007, file: !135, line: 131, baseType: !3012, size: 64, offset: 128)
!3012 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !3013)
!3013 = !{!3014, !3018}
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !3012, file: !135, line: 129, baseType: !3015, size: 64)
!3015 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !512, line: 66, baseType: !3016)
!3016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3017, size: 64)
!3017 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !512, line: 65, flags: DIFlagFwdDecl)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !3012, file: !135, line: 130, baseType: !2876, size: 64)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3007, file: !135, line: 134, baseType: !2691, size: 64, offset: 192)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !3007, file: !135, line: 137, baseType: !2702, size: 64, offset: 256)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !3007, file: !135, line: 138, baseType: !2828, size: 32, offset: 320)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !3007, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3007, file: !135, line: 144, baseType: !2798, size: 32, offset: 384)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !3007, file: !135, line: 145, baseType: !2798, size: 32, offset: 416)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3007, file: !135, line: 146, baseType: !3026, size: 64, offset: 448)
!3026 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !2757)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2990, file: !135, line: 220, baseType: !2993, size: 64, offset: 64)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2990, file: !135, line: 223, baseType: !2691, size: 64, offset: 128)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2990, file: !135, line: 226, baseType: !3030, size: 64, offset: 192)
!3030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3031, size: 64)
!3031 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !135, line: 185, flags: DIFlagFwdDecl)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2990, file: !135, line: 229, baseType: !3033, size: 128, offset: 256)
!3033 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3034, size: 128, elements: !2943)
!3034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3035, size: 64)
!3035 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2990, file: !135, line: 232, baseType: !2989, size: 64, offset: 384)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2990, file: !135, line: 233, baseType: !2989, size: 64, offset: 448)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2990, file: !135, line: 238, baseType: !3039, size: 64, offset: 512)
!3039 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !3040)
!3040 = !{!3041, !3047}
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !3039, file: !135, line: 236, baseType: !3042, size: 64)
!3042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3043, size: 64)
!3043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !3044)
!3044 = !{!3045, !3046}
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3043, file: !135, line: 275, baseType: !3015, size: 64)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !3043, file: !135, line: 278, baseType: !3015, size: 64, offset: 64)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3039, file: !135, line: 237, baseType: !3048, size: 64)
!3048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3049, size: 64)
!3049 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !3050)
!3050 = !{!3051, !3052, !3053, !3054, !3055}
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !3049, file: !135, line: 261, baseType: !2876, size: 64)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !3049, file: !135, line: 262, baseType: !2876, size: 64, offset: 64)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !3049, file: !135, line: 266, baseType: !2876, size: 64, offset: 128)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !3049, file: !135, line: 267, baseType: !2876, size: 64, offset: 192)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3049, file: !135, line: 270, baseType: !2798, size: 32, offset: 256)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2990, file: !135, line: 241, baseType: !3026, size: 64, offset: 576)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2990, file: !135, line: 244, baseType: !2798, size: 32, offset: 640)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2990, file: !135, line: 247, baseType: !2798, size: 32, offset: 672)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2990, file: !135, line: 250, baseType: !2798, size: 32, offset: 704)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2990, file: !135, line: 253, baseType: !2798, size: 32, offset: 736)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2990, file: !135, line: 256, baseType: !2798, size: 32, offset: 768)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !2896, file: !598, line: 179, baseType: !3063, size: 64)
!3063 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3064, size: 64)
!3064 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !598, line: 150, baseType: !3065)
!3065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !598, line: 142, size: 320, elements: !3066)
!3066 = !{!3067, !3068, !3069, !3070, !3073, !3074}
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3065, file: !598, line: 144, baseType: !2702, size: 64)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3065, file: !598, line: 145, baseType: !2876, size: 64, offset: 64)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3065, file: !598, line: 146, baseType: !2876, size: 64, offset: 128)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3065, file: !598, line: 147, baseType: !3071, size: 32, offset: 192)
!3071 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !3072, line: 31, baseType: !2798)
!3072 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3065, file: !598, line: 148, baseType: !7, size: 32, offset: 224)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !3065, file: !598, line: 149, baseType: !2820, size: 8, offset: 256)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !2896, file: !598, line: 180, baseType: !3076, size: 64)
!3076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3077, size: 64)
!3077 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !598, line: 162, baseType: !3078)
!3078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !598, line: 159, size: 128, elements: !3079)
!3079 = !{!3080, !3081}
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3078, file: !598, line: 160, baseType: !2702, size: 64)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3078, file: !598, line: 161, baseType: !2757, size: 64, offset: 64)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !2896, file: !598, line: 181, baseType: !3083, size: 64)
!3083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3084, size: 64)
!3084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !3, line: 3459, size: 512, elements: !3085)
!3085 = !{!3086, !3087, !3088, !3089, !3090, !3091, !3093, !3094, !3095, !3096}
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3084, file: !3, line: 3460, baseType: !3083, size: 64)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !3084, file: !3, line: 3461, baseType: !2876, size: 64, offset: 64)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "sym", scope: !3084, file: !3, line: 3462, baseType: !2876, size: 64, offset: 128)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "constant", scope: !3084, file: !3, line: 3463, baseType: !2876, size: 64, offset: 192)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3084, file: !3, line: 3464, baseType: !2757, size: 64, offset: 256)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !3084, file: !3, line: 3465, baseType: !3092, size: 32, offset: 320)
!3092 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !522, line: 47, baseType: !7)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3084, file: !3, line: 3466, baseType: !5, size: 32, offset: 352)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3084, file: !3, line: 3467, baseType: !7, size: 32, offset: 384)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "labelno", scope: !3084, file: !3, line: 3468, baseType: !2798, size: 32, offset: 416)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !3084, file: !3, line: 3469, baseType: !2798, size: 32, offset: 448)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !2891, file: !598, line: 317, baseType: !3098, size: 64)
!3098 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2757, size: 64, elements: !2801)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !2891, file: !598, line: 318, baseType: !3100, size: 320)
!3100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !598, line: 188, size: 320, elements: !3101)
!3101 = !{!3102, !3104, !3160}
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3100, file: !598, line: 190, baseType: !3103, size: 192)
!3103 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2895, size: 192, elements: !2775)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3100, file: !598, line: 193, baseType: !3105, size: 64, offset: 192)
!3105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3106, size: 64)
!3106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !598, line: 206, size: 320, elements: !3107)
!3107 = !{!3108, !3145, !3146, !3147, !3159}
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !3106, file: !598, line: 208, baseType: !3109, size: 64)
!3109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3110, size: 64)
!3110 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !512, line: 62, baseType: !3111)
!3111 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1690, line: 538, size: 256, elements: !3112)
!3112 = !{!3113, !3117, !3123, !3136}
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3111, file: !1690, line: 539, baseType: !3114, size: 32)
!3114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1690, line: 482, size: 32, elements: !3115)
!3115 = !{!3116}
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3114, file: !1690, line: 484, baseType: !7, size: 32)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !3111, file: !1690, line: 540, baseType: !3118, size: 192)
!3118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1690, line: 488, size: 192, elements: !3119)
!3119 = !{!3120, !3121, !3122}
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3118, file: !1690, line: 489, baseType: !3114, size: 32)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3118, file: !1690, line: 492, baseType: !2692, size: 64, offset: 64)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3118, file: !1690, line: 496, baseType: !2702, size: 64, offset: 128)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !3111, file: !1690, line: 541, baseType: !3124, size: 256)
!3124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1690, line: 504, size: 256, elements: !3125)
!3125 = !{!3126, !3127, !3134, !3135}
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3124, file: !1690, line: 505, baseType: !3114, size: 32)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !3124, file: !1690, line: 509, baseType: !3128, size: 64, offset: 64)
!3128 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1690, line: 501, baseType: !3129)
!3129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3130, size: 64)
!3130 = !DISubroutineType(types: !3131)
!3131 = !{null, !3132}
!3132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3133, size: 64)
!3133 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3124, file: !1690, line: 510, baseType: !3132, size: 64, offset: 128)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3124, file: !1690, line: 513, baseType: !3109, size: 64, offset: 192)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !3111, file: !1690, line: 542, baseType: !3137, size: 128)
!3137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1690, line: 530, size: 128, elements: !3138)
!3138 = !{!3139, !3140}
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3137, file: !1690, line: 531, baseType: !3114, size: 32)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !3137, file: !1690, line: 534, baseType: !3141, size: 64, offset: 64)
!3141 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1690, line: 525, baseType: !3142)
!3142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3143, size: 64)
!3143 = !DISubroutineType(types: !3144)
!3144 = !{!2820, !2702, !2692, !2755, !2755}
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !3106, file: !598, line: 211, baseType: !7, size: 32, offset: 64)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3106, file: !598, line: 214, baseType: !2757, size: 64, offset: 128)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !3106, file: !598, line: 224, baseType: !3148, size: 64, offset: 192)
!3148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3149, size: 64)
!3149 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !598, line: 202, baseType: !3150)
!3150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !598, line: 202, size: 128, elements: !3151)
!3151 = !{!3152}
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3150, file: !598, line: 202, baseType: !3153, size: 128)
!3153 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !598, line: 200, baseType: !3154)
!3154 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !598, line: 200, size: 128, elements: !3155)
!3155 = !{!3156, !3157, !3158}
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3154, file: !598, line: 200, baseType: !7, size: 32)
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3154, file: !598, line: 200, baseType: !7, size: 32, offset: 32)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3154, file: !598, line: 200, baseType: !2909, size: 64, offset: 64)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !3106, file: !598, line: 234, baseType: !3148, size: 64, offset: 256)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3100, file: !598, line: 197, baseType: !2757, size: 64, offset: 256)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !2891, file: !598, line: 319, baseType: !2764, size: 256)
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !2891, file: !598, line: 320, baseType: !2783, size: 192)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !2704, file: !151, line: 3384, baseType: !3164, size: 1472)
!3164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !151, line: 3114, size: 1472, elements: !3165)
!3165 = !{!3166, !3187, !3188, !3189, !3190}
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3164, file: !151, line: 3115, baseType: !3167, size: 1216)
!3167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !151, line: 2984, size: 1216, elements: !3168)
!3168 = !{!3169, !3170, !3171, !3172, !3173, !3174, !3175, !3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186}
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3167, file: !151, line: 2985, baseType: !2872, size: 960)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !3167, file: !151, line: 2986, baseType: !2702, size: 64, offset: 960)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !3167, file: !151, line: 2987, baseType: !2702, size: 64, offset: 1024)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !3167, file: !151, line: 2988, baseType: !2702, size: 64, offset: 1088)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !3167, file: !151, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !3167, file: !151, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !3167, file: !151, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !3167, file: !151, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !3167, file: !151, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !3167, file: !151, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !3167, file: !151, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !3167, file: !151, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !3167, file: !151, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !3167, file: !151, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !3167, file: !151, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !3167, file: !151, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !3167, file: !151, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !3167, file: !151, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !3164, file: !151, line: 3117, baseType: !2702, size: 64, offset: 1216)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !3164, file: !151, line: 3119, baseType: !2702, size: 64, offset: 1280)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !3164, file: !151, line: 3121, baseType: !2702, size: 64, offset: 1344)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !3164, file: !151, line: 3123, baseType: !2702, size: 64, offset: 1408)
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !2704, file: !151, line: 3385, baseType: !3192, size: 1088)
!3192 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !151, line: 2874, size: 1088, elements: !3193)
!3193 = !{!3194, !3195, !3196}
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3192, file: !151, line: 2875, baseType: !2872, size: 960)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !3192, file: !151, line: 2876, baseType: !2876, size: 64, offset: 960)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3192, file: !151, line: 2877, baseType: !3197, size: 64, offset: 1024)
!3197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3198, size: 64)
!3198 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !151, line: 2856, flags: DIFlagFwdDecl)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !2704, file: !151, line: 3386, baseType: !3167, size: 1216)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !2704, file: !151, line: 3387, baseType: !3201, size: 1280)
!3201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !151, line: 3093, size: 1280, elements: !3202)
!3202 = !{!3203, !3204}
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3201, file: !151, line: 3094, baseType: !3167, size: 1216)
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3201, file: !151, line: 3095, baseType: !3197, size: 64, offset: 1216)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !2704, file: !151, line: 3388, baseType: !3206, size: 1216)
!3206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !151, line: 2824, size: 1216, elements: !3207)
!3207 = !{!3208, !3209, !3210, !3211, !3212, !3213}
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3206, file: !151, line: 2825, baseType: !2834, size: 896)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3206, file: !151, line: 2827, baseType: !2702, size: 64, offset: 896)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !3206, file: !151, line: 2828, baseType: !2702, size: 64, offset: 960)
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !3206, file: !151, line: 2829, baseType: !2702, size: 64, offset: 1024)
!3212 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !3206, file: !151, line: 2830, baseType: !2702, size: 64, offset: 1088)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !3206, file: !151, line: 2831, baseType: !2702, size: 64, offset: 1152)
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !2704, file: !151, line: 3389, baseType: !3215, size: 1024)
!3215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !151, line: 2850, size: 1024, elements: !3216)
!3216 = !{!3217, !3218, !3219}
!3217 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3215, file: !151, line: 2851, baseType: !2872, size: 960)
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !3215, file: !151, line: 2852, baseType: !2798, size: 32, offset: 960)
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !3215, file: !151, line: 2853, baseType: !2798, size: 32, offset: 992)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !2704, file: !151, line: 3390, baseType: !3221, size: 1024)
!3221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !151, line: 2857, size: 1024, elements: !3222)
!3222 = !{!3223, !3224}
!3223 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3221, file: !151, line: 2858, baseType: !2872, size: 960)
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3221, file: !151, line: 2859, baseType: !3197, size: 64, offset: 960)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !2704, file: !151, line: 3391, baseType: !3226, size: 960)
!3226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !151, line: 2862, size: 960, elements: !3227)
!3227 = !{!3228}
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3226, file: !151, line: 2863, baseType: !2872, size: 960)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !2704, file: !151, line: 3392, baseType: !3230, size: 1472)
!3230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !151, line: 3304, size: 1472, elements: !3231)
!3231 = !{!3232}
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3230, file: !151, line: 3305, baseType: !3164, size: 1472)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2704, file: !151, line: 3393, baseType: !3234, size: 1792)
!3234 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !151, line: 3248, size: 1792, elements: !3235)
!3235 = !{!3236, !3237, !3386, !3387, !3388, !3389, !3390, !3391, !3392, !3393, !3394, !3395, !3396, !3397, !3398, !3399, !3400, !3401, !3402, !3403, !3404, !3405, !3406}
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3234, file: !151, line: 3249, baseType: !3164, size: 1472)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !3234, file: !151, line: 3251, baseType: !3238, size: 64, offset: 1472)
!3238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3239, size: 64)
!3239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !3240, line: 463, size: 1152, elements: !3241)
!3240 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3241 = !{!3242, !3245, !3276, !3277, !3280, !3283, !3331, !3332, !3333, !3334, !3335, !3359, !3362, !3363, !3364, !3365, !3366, !3367, !3368, !3369, !3370, !3371, !3372, !3373, !3374, !3375, !3376, !3377, !3378, !3379, !3380, !3381, !3382, !3383, !3384, !3385}
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !3239, file: !3240, line: 464, baseType: !3243, size: 64)
!3243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3244, size: 64)
!3244 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !3240, line: 464, flags: DIFlagFwdDecl)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !3239, file: !3240, line: 467, baseType: !3246, size: 64, offset: 64)
!3246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3247, size: 64)
!3247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !3248)
!3248 = !{!3249, !3251, !3252, !3265, !3266, !3267, !3268, !3269, !3270, !3272, !3274, !3275}
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !3247, file: !135, line: 377, baseType: !3250, size: 64)
!3250 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !512, line: 111, baseType: !2989)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !3247, file: !135, line: 378, baseType: !3250, size: 64, offset: 64)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !3247, file: !135, line: 381, baseType: !3253, size: 64, offset: 128)
!3253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3254, size: 64)
!3254 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !3255)
!3255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !3256)
!3256 = !{!3257}
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3255, file: !135, line: 282, baseType: !3258, size: 128)
!3258 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !3259)
!3259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !3260)
!3260 = !{!3261, !3262, !3263}
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3259, file: !135, line: 281, baseType: !7, size: 32)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3259, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3259, file: !135, line: 281, baseType: !3264, size: 64, offset: 64)
!3264 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3250, size: 64, elements: !2801)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !3247, file: !135, line: 384, baseType: !2798, size: 32, offset: 192)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !3247, file: !135, line: 387, baseType: !2798, size: 32, offset: 224)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !3247, file: !135, line: 390, baseType: !2798, size: 32, offset: 256)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !3247, file: !135, line: 394, baseType: !3253, size: 64, offset: 320)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !3247, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !3247, file: !135, line: 399, baseType: !3271, size: 64, offset: 416)
!3271 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !2943)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !3247, file: !135, line: 402, baseType: !3273, size: 64, offset: 480)
!3273 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !2943)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !3247, file: !135, line: 406, baseType: !2798, size: 32, offset: 544)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !3247, file: !135, line: 409, baseType: !2798, size: 32, offset: 576)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !3239, file: !3240, line: 470, baseType: !3016, size: 64, offset: 128)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !3239, file: !3240, line: 473, baseType: !3278, size: 64, offset: 192)
!3278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3279, size: 64)
!3279 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !3240, line: 166, flags: DIFlagFwdDecl)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !3239, file: !3240, line: 476, baseType: !3281, size: 64, offset: 256)
!3281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3282, size: 64)
!3282 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !3240, line: 476, flags: DIFlagFwdDecl)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !3239, file: !3240, line: 479, baseType: !3284, size: 64, offset: 320)
!3284 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !522, line: 144, baseType: !3285)
!3285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3286, size: 64)
!3286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !522, line: 100, size: 896, elements: !3287)
!3287 = !{!3288, !3293, !3298, !3303, !3305, !3308, !3309, !3310, !3311, !3312, !3317, !3319, !3320, !3325, !3330}
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !3286, file: !522, line: 102, baseType: !3289, size: 64)
!3289 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !522, line: 52, baseType: !3290)
!3290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3291, size: 64)
!3291 = !DISubroutineType(types: !3292)
!3292 = !{!3092, !3132}
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !3286, file: !522, line: 105, baseType: !3294, size: 64, offset: 64)
!3294 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !522, line: 59, baseType: !3295)
!3295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3296, size: 64)
!3296 = !DISubroutineType(types: !3297)
!3297 = !{!2798, !3132, !3132}
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !3286, file: !522, line: 108, baseType: !3299, size: 64, offset: 128)
!3299 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !522, line: 63, baseType: !3300)
!3300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3301, size: 64)
!3301 = !DISubroutineType(types: !3302)
!3302 = !{null, !2691}
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !3286, file: !522, line: 111, baseType: !3304, size: 64, offset: 192)
!3304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2691, size: 64)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3286, file: !522, line: 114, baseType: !3306, size: 64, offset: 256)
!3306 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !3307, line: 46, baseType: !2755)
!3307 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !3286, file: !522, line: 117, baseType: !3306, size: 64, offset: 320)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !3286, file: !522, line: 120, baseType: !3306, size: 64, offset: 384)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !3286, file: !522, line: 124, baseType: !7, size: 32, offset: 448)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !3286, file: !522, line: 128, baseType: !7, size: 32, offset: 480)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !3286, file: !522, line: 131, baseType: !3313, size: 64, offset: 512)
!3313 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !522, line: 75, baseType: !3314)
!3314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3315, size: 64)
!3315 = !DISubroutineType(types: !3316)
!3316 = !{!2691, !3306, !3306}
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !3286, file: !522, line: 132, baseType: !3318, size: 64, offset: 576)
!3318 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !522, line: 78, baseType: !3300)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !3286, file: !522, line: 135, baseType: !2691, size: 64, offset: 640)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !3286, file: !522, line: 136, baseType: !3321, size: 64, offset: 704)
!3321 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !522, line: 82, baseType: !3322)
!3322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3323, size: 64)
!3323 = !DISubroutineType(types: !3324)
!3324 = !{!2691, !2691, !3306, !3306}
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !3286, file: !522, line: 137, baseType: !3326, size: 64, offset: 768)
!3326 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !522, line: 83, baseType: !3327)
!3327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3328, size: 64)
!3328 = !DISubroutineType(types: !3329)
!3329 = !{null, !2691, !2691}
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !3286, file: !522, line: 141, baseType: !7, size: 32, offset: 832)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3239, file: !3240, line: 484, baseType: !2702, size: 64, offset: 384)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !3239, file: !3240, line: 488, baseType: !2702, size: 64, offset: 448)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !3239, file: !3240, line: 493, baseType: !2702, size: 64, offset: 512)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !3239, file: !3240, line: 496, baseType: !2702, size: 64, offset: 576)
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !3239, file: !3240, line: 501, baseType: !3336, size: 64, offset: 640)
!3336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3337, size: 64)
!3337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !146, line: 2355, size: 576, elements: !3338)
!3338 = !{!3339, !3342, !3343, !3344, !3345, !3347, !3348, !3353, !3354, !3355, !3356, !3357, !3358}
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !3337, file: !146, line: 2356, baseType: !3340, size: 64)
!3340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3341, size: 64)
!3341 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !146, line: 2356, flags: DIFlagFwdDecl)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !3337, file: !146, line: 2357, baseType: !2692, size: 64, offset: 64)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !3337, file: !146, line: 2358, baseType: !2798, size: 32, offset: 128)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !3337, file: !146, line: 2359, baseType: !2798, size: 32, offset: 160)
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !3337, file: !146, line: 2360, baseType: !3346, size: 128, offset: 192)
!3346 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2798, size: 128, elements: !2968)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !3337, file: !146, line: 2364, baseType: !2798, size: 32, offset: 320)
!3348 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !3337, file: !146, line: 2367, baseType: !3349, size: 128, offset: 384)
!3349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !146, line: 2349, size: 128, elements: !3350)
!3350 = !{!3351, !3352}
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3349, file: !146, line: 2351, baseType: !2876, size: 64)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3349, file: !146, line: 2352, baseType: !2757, size: 64, offset: 64)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !3337, file: !146, line: 2371, baseType: !145, size: 32, offset: 512)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !3337, file: !146, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !3337, file: !146, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !3337, file: !146, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !3337, file: !146, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !3337, file: !146, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !3239, file: !3240, line: 504, baseType: !3360, size: 64, offset: 704)
!3360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3361, size: 64)
!3361 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !3240, line: 504, flags: DIFlagFwdDecl)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !3239, file: !3240, line: 507, baseType: !3284, size: 64, offset: 768)
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !3239, file: !3240, line: 510, baseType: !2798, size: 32, offset: 832)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !3239, file: !3240, line: 513, baseType: !2798, size: 32, offset: 864)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !3239, file: !3240, line: 516, baseType: !2828, size: 32, offset: 896)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !3239, file: !3240, line: 519, baseType: !2828, size: 32, offset: 928)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !3239, file: !3240, line: 522, baseType: !7, size: 32, offset: 960)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !3239, file: !3240, line: 523, baseType: !7, size: 32, offset: 992)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !3239, file: !3240, line: 528, baseType: !2692, size: 64, offset: 1024)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !3239, file: !3240, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !3239, file: !3240, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !3239, file: !3240, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !3239, file: !3240, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !3239, file: !3240, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !3239, file: !3240, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !3239, file: !3240, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !3239, file: !3240, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !3239, file: !3240, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !3239, file: !3240, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !3239, file: !3240, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !3239, file: !3240, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !3239, file: !3240, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !3239, file: !3240, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !3239, file: !3240, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !3239, file: !3240, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!3386 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !3234, file: !151, line: 3254, baseType: !2702, size: 64, offset: 1536)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !3234, file: !151, line: 3257, baseType: !2702, size: 64, offset: 1600)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !3234, file: !151, line: 3258, baseType: !2702, size: 64, offset: 1664)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !3234, file: !151, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !3234, file: !151, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !3234, file: !151, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !3234, file: !151, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !3234, file: !151, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !3234, file: !151, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !3234, file: !151, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !3234, file: !151, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !3234, file: !151, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !3234, file: !151, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !3234, file: !151, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !3234, file: !151, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !3234, file: !151, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !3234, file: !151, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !3234, file: !151, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3234, file: !151, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !3234, file: !151, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !3234, file: !151, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2704, file: !151, line: 3394, baseType: !3408, size: 1344)
!3408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !151, line: 2279, size: 1344, elements: !3409)
!3409 = !{!3410, !3411, !3412, !3413, !3414, !3415, !3416, !3417, !3418, !3419, !3420, !3421, !3422, !3423, !3424, !3425, !3426, !3427, !3428, !3429, !3430, !3431, !3432, !3433, !3434, !3435, !3443, !3444, !3445, !3446, !3447, !3448, !3449, !3450, !3451}
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3408, file: !151, line: 2280, baseType: !2740, size: 192)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !3408, file: !151, line: 2281, baseType: !2702, size: 64, offset: 192)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3408, file: !151, line: 2282, baseType: !2702, size: 64, offset: 256)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3408, file: !151, line: 2283, baseType: !2702, size: 64, offset: 320)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3408, file: !151, line: 2284, baseType: !2702, size: 64, offset: 384)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3408, file: !151, line: 2285, baseType: !7, size: 32, offset: 448)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !3408, file: !151, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !3408, file: !151, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !3408, file: !151, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !3408, file: !151, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !3408, file: !151, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !3408, file: !151, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3408, file: !151, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !3408, file: !151, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3408, file: !151, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3408, file: !151, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3408, file: !151, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3408, file: !151, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3408, file: !151, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3408, file: !151, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3408, file: !151, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3408, file: !151, line: 2305, baseType: !7, size: 32, offset: 512)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !3408, file: !151, line: 2306, baseType: !3071, size: 32, offset: 544)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !3408, file: !151, line: 2307, baseType: !2702, size: 64, offset: 576)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !3408, file: !151, line: 2308, baseType: !2702, size: 64, offset: 640)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !3408, file: !151, line: 2314, baseType: !3436, size: 64, offset: 704)
!3436 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !151, line: 2309, size: 64, elements: !3437)
!3437 = !{!3438, !3439, !3440}
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !3436, file: !151, line: 2310, baseType: !2798, size: 32)
!3439 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !3436, file: !151, line: 2311, baseType: !2692, size: 64)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !3436, file: !151, line: 2312, baseType: !3441, size: 64)
!3441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3442, size: 64)
!3442 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !151, line: 2277, flags: DIFlagFwdDecl)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3408, file: !151, line: 2315, baseType: !2702, size: 64, offset: 768)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !3408, file: !151, line: 2316, baseType: !2702, size: 64, offset: 832)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !3408, file: !151, line: 2317, baseType: !2702, size: 64, offset: 896)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !3408, file: !151, line: 2318, baseType: !2702, size: 64, offset: 960)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !3408, file: !151, line: 2319, baseType: !2702, size: 64, offset: 1024)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3408, file: !151, line: 2320, baseType: !2702, size: 64, offset: 1088)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3408, file: !151, line: 2321, baseType: !2702, size: 64, offset: 1152)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3408, file: !151, line: 2322, baseType: !2702, size: 64, offset: 1216)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3408, file: !151, line: 2324, baseType: !3452, size: 64, offset: 1280)
!3452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3453, size: 64)
!3453 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !151, line: 2324, flags: DIFlagFwdDecl)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2704, file: !151, line: 3395, baseType: !3455, size: 320)
!3455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !151, line: 1469, size: 320, elements: !3456)
!3456 = !{!3457, !3458, !3459}
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3455, file: !151, line: 1470, baseType: !2740, size: 192)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !3455, file: !151, line: 1471, baseType: !2702, size: 64, offset: 192)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3455, file: !151, line: 1472, baseType: !2702, size: 64, offset: 256)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2704, file: !151, line: 3396, baseType: !3461, size: 320)
!3461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !151, line: 1482, size: 320, elements: !3462)
!3462 = !{!3463, !3464, !3465}
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3461, file: !151, line: 1483, baseType: !2740, size: 192)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3461, file: !151, line: 1484, baseType: !2798, size: 32, offset: 192)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3461, file: !151, line: 1485, baseType: !3466, size: 64, offset: 256)
!3466 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2702, size: 64, elements: !2801)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !2704, file: !151, line: 3397, baseType: !3468, size: 384)
!3468 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !151, line: 1829, size: 384, elements: !3469)
!3469 = !{!3470, !3471, !3472, !3473}
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3468, file: !151, line: 1830, baseType: !2740, size: 192)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3468, file: !151, line: 1831, baseType: !2828, size: 32, offset: 192)
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3468, file: !151, line: 1832, baseType: !2702, size: 64, offset: 256)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !3468, file: !151, line: 1835, baseType: !3466, size: 64, offset: 320)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2704, file: !151, line: 3398, baseType: !3475, size: 704)
!3475 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !151, line: 1898, size: 704, elements: !3476)
!3476 = !{!3477, !3478, !3479, !3483, !3484, !3487}
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3475, file: !151, line: 1899, baseType: !2740, size: 192)
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !3475, file: !151, line: 1902, baseType: !2702, size: 64, offset: 192)
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !3475, file: !151, line: 1905, baseType: !3480, size: 64, offset: 256)
!3480 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !512, line: 58, baseType: !3481)
!3481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3482, size: 64)
!3482 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !512, line: 57, flags: DIFlagFwdDecl)
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !3475, file: !151, line: 1908, baseType: !7, size: 32, offset: 320)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3475, file: !151, line: 1911, baseType: !3485, size: 64, offset: 384)
!3485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3486, size: 64)
!3486 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !151, line: 1876, flags: DIFlagFwdDecl)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !3475, file: !151, line: 1914, baseType: !3488, size: 256, offset: 448)
!3488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !151, line: 1883, size: 256, elements: !3489)
!3489 = !{!3490, !3492, !3493, !3498}
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3488, file: !151, line: 1884, baseType: !3491, size: 64)
!3491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3488, size: 64)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3488, file: !151, line: 1885, baseType: !3491, size: 64, offset: 64)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !3488, file: !151, line: 1891, baseType: !3494, size: 64, offset: 128)
!3494 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3488, file: !151, line: 1891, size: 64, elements: !3495)
!3495 = !{!3496, !3497}
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3494, file: !151, line: 1891, baseType: !3480, size: 64)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !3494, file: !151, line: 1891, baseType: !2702, size: 64)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !3488, file: !151, line: 1892, baseType: !3499, size: 64, offset: 192)
!3499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2702, size: 64)
!3500 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2704, file: !151, line: 3399, baseType: !3501, size: 704)
!3501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !151, line: 2008, size: 704, elements: !3502)
!3502 = !{!3503, !3504, !3505, !3506, !3507, !3508, !3520, !3521, !3522, !3523, !3524}
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3501, file: !151, line: 2009, baseType: !2740, size: 192)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3501, file: !151, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !3501, file: !151, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3501, file: !151, line: 2014, baseType: !2828, size: 32, offset: 224)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3501, file: !151, line: 2016, baseType: !2702, size: 64, offset: 256)
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !3501, file: !151, line: 2017, baseType: !3509, size: 64, offset: 320)
!3509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3510, size: 64)
!3510 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !151, line: 183, baseType: !3511)
!3511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !151, line: 183, size: 128, elements: !3512)
!3512 = !{!3513}
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3511, file: !151, line: 183, baseType: !3514, size: 128)
!3514 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !151, line: 182, baseType: !3515)
!3515 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !151, line: 182, size: 128, elements: !3516)
!3516 = !{!3517, !3518, !3519}
!3517 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3515, file: !151, line: 182, baseType: !7, size: 32)
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3515, file: !151, line: 182, baseType: !7, size: 32, offset: 32)
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3515, file: !151, line: 182, baseType: !3466, size: 64, offset: 64)
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !3501, file: !151, line: 2019, baseType: !2702, size: 64, offset: 384)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !3501, file: !151, line: 2020, baseType: !2702, size: 64, offset: 448)
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3501, file: !151, line: 2021, baseType: !2702, size: 64, offset: 512)
!3523 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !3501, file: !151, line: 2022, baseType: !2702, size: 64, offset: 576)
!3524 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !3501, file: !151, line: 2023, baseType: !2702, size: 64, offset: 640)
!3525 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2704, file: !151, line: 3400, baseType: !3526, size: 832)
!3526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !151, line: 2430, size: 832, elements: !3527)
!3527 = !{!3528, !3529, !3530, !3531, !3532, !3533, !3534, !3535, !3536, !3537}
!3528 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3526, file: !151, line: 2431, baseType: !2740, size: 192)
!3529 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3526, file: !151, line: 2433, baseType: !2702, size: 64, offset: 192)
!3530 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !3526, file: !151, line: 2434, baseType: !2702, size: 64, offset: 256)
!3531 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !3526, file: !151, line: 2435, baseType: !2702, size: 64, offset: 320)
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !3526, file: !151, line: 2436, baseType: !2702, size: 64, offset: 384)
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !3526, file: !151, line: 2437, baseType: !3509, size: 64, offset: 448)
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !3526, file: !151, line: 2438, baseType: !2702, size: 64, offset: 512)
!3535 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !3526, file: !151, line: 2440, baseType: !2702, size: 64, offset: 576)
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !3526, file: !151, line: 2441, baseType: !2702, size: 64, offset: 640)
!3537 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !3526, file: !151, line: 2443, baseType: !3538, size: 128, offset: 704)
!3538 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !151, line: 182, baseType: !3539)
!3539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !151, line: 182, size: 128, elements: !3540)
!3540 = !{!3541}
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3539, file: !151, line: 182, baseType: !3514, size: 128)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !2704, file: !151, line: 3401, baseType: !3543, size: 320)
!3543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !151, line: 3327, size: 320, elements: !3544)
!3544 = !{!3545, !3546, !3553}
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3543, file: !151, line: 3329, baseType: !2740, size: 192)
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !3543, file: !151, line: 3330, baseType: !3547, size: 64, offset: 192)
!3547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3548, size: 64)
!3548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !151, line: 3320, size: 192, elements: !3549)
!3549 = !{!3550, !3551, !3552}
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3548, file: !151, line: 3322, baseType: !3547, size: 64)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3548, file: !151, line: 3323, baseType: !3547, size: 64, offset: 64)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3548, file: !151, line: 3324, baseType: !2702, size: 64, offset: 128)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !3543, file: !151, line: 3331, baseType: !3547, size: 64, offset: 256)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !2704, file: !151, line: 3402, baseType: !3555, size: 256)
!3555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !151, line: 1540, size: 256, elements: !3556)
!3556 = !{!3557, !3558}
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3555, file: !151, line: 1541, baseType: !2740, size: 192)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !3555, file: !151, line: 1542, baseType: !3559, size: 64, offset: 192)
!3559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3560, size: 64)
!3560 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !151, line: 1538, baseType: !3561)
!3561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !151, line: 1538, size: 192, elements: !3562)
!3562 = !{!3563}
!3563 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3561, file: !151, line: 1538, baseType: !3564, size: 192)
!3564 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !151, line: 1537, baseType: !3565)
!3565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !151, line: 1537, size: 192, elements: !3566)
!3566 = !{!3567, !3568, !3569}
!3567 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3565, file: !151, line: 1537, baseType: !7, size: 32)
!3568 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3565, file: !151, line: 1537, baseType: !7, size: 32, offset: 32)
!3569 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3565, file: !151, line: 1537, baseType: !3570, size: 128, offset: 64)
!3570 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3571, size: 128, elements: !2801)
!3571 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !151, line: 1535, baseType: !3572)
!3572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !151, line: 1532, size: 128, elements: !3573)
!3573 = !{!3574, !3575}
!3574 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3572, file: !151, line: 1533, baseType: !2702, size: 64)
!3575 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3572, file: !151, line: 1534, baseType: !2702, size: 64, offset: 64)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !2704, file: !151, line: 3403, baseType: !3577, size: 512)
!3577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !151, line: 1938, size: 512, elements: !3578)
!3578 = !{!3579, !3580, !3581, !3582, !3588, !3589, !3590}
!3579 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3577, file: !151, line: 1939, baseType: !2740, size: 192)
!3580 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3577, file: !151, line: 1940, baseType: !2828, size: 32, offset: 192)
!3581 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3577, file: !151, line: 1941, baseType: !150, size: 32, offset: 224)
!3582 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3577, file: !151, line: 1946, baseType: !3583, size: 32, offset: 256)
!3583 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !151, line: 1942, size: 32, elements: !3584)
!3584 = !{!3585, !3586, !3587}
!3585 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !3583, file: !151, line: 1943, baseType: !169, size: 32)
!3586 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !3583, file: !151, line: 1944, baseType: !176, size: 32)
!3587 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !3583, file: !151, line: 1945, baseType: !183, size: 32)
!3588 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !3577, file: !151, line: 1950, baseType: !3015, size: 64, offset: 320)
!3589 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !3577, file: !151, line: 1951, baseType: !3015, size: 64, offset: 384)
!3590 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3577, file: !151, line: 1953, baseType: !3466, size: 64, offset: 448)
!3591 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !2704, file: !151, line: 3404, baseType: !3592, size: 1664)
!3592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !151, line: 3337, size: 1664, elements: !3593)
!3593 = !{!3594, !3595}
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3592, file: !151, line: 3338, baseType: !2740, size: 192)
!3595 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3592, file: !151, line: 3341, baseType: !3596, size: 1472, offset: 192)
!3596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !741, line: 410, size: 1472, elements: !3597)
!3597 = !{!3598, !3599, !3600, !3601, !3602, !3603, !3604, !3605, !3606, !3608, !3609, !3610, !3611, !3612, !3613, !3614, !3615, !3616, !3617, !3618, !3619, !3620, !3621, !3622, !3623, !3624, !3625, !3626, !3627, !3628, !3629, !3630, !3631, !3632, !3633, !3634, !3635, !3636, !3637, !3638, !3639, !3640, !3641, !3642, !3643, !3644, !3645, !3646, !3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656, !3657, !3658, !3659, !3660, !3661, !3662, !3663, !3664, !3665, !3666, !3667, !3668, !3669, !3670, !3671, !3672, !3673, !3674, !3675, !3676, !3677, !3678, !3679, !3680, !3681, !3682, !3683, !3684, !3685, !3686, !3687, !3688, !3689, !3690, !3691, !3692, !3693, !3694, !3695, !3696, !3697, !3698, !3699, !3700, !3701, !3702, !3703, !3704, !3705, !3706, !3707, !3708, !3709, !3710, !3711, !3712, !3713, !3714, !3715, !3716, !3717, !3718, !3719, !3720, !3721, !3722, !3723, !3724, !3725, !3726, !3727, !3728, !3729, !3730, !3731, !3732, !3733, !3734, !3735, !3736, !3737, !3738, !3739, !3740, !3741, !3742, !3743, !3744, !3745, !3746, !3747, !3748, !3749, !3750, !3751, !3752, !3753, !3754, !3755, !3756, !3757, !3758, !3759, !3760, !3761}
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !3596, file: !741, line: 412, baseType: !2798, size: 32)
!3599 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !3596, file: !741, line: 413, baseType: !2798, size: 32, offset: 32)
!3600 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !3596, file: !741, line: 414, baseType: !2798, size: 32, offset: 64)
!3601 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !3596, file: !741, line: 415, baseType: !2798, size: 32, offset: 96)
!3602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !3596, file: !741, line: 416, baseType: !2798, size: 32, offset: 128)
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !3596, file: !741, line: 417, baseType: !2798, size: 32, offset: 160)
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !3596, file: !741, line: 418, baseType: !2820, size: 8, offset: 192)
!3605 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !3596, file: !741, line: 419, baseType: !2820, size: 8, offset: 200)
!3606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !3596, file: !741, line: 420, baseType: !3607, size: 8, offset: 208)
!3607 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !3596, file: !741, line: 421, baseType: !3607, size: 8, offset: 216)
!3609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !3596, file: !741, line: 422, baseType: !3607, size: 8, offset: 224)
!3610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !3596, file: !741, line: 423, baseType: !3607, size: 8, offset: 232)
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !3596, file: !741, line: 424, baseType: !3607, size: 8, offset: 240)
!3612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !3596, file: !741, line: 425, baseType: !3607, size: 8, offset: 248)
!3613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !3596, file: !741, line: 426, baseType: !3607, size: 8, offset: 256)
!3614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !3596, file: !741, line: 427, baseType: !3607, size: 8, offset: 264)
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !3596, file: !741, line: 428, baseType: !3607, size: 8, offset: 272)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !3596, file: !741, line: 429, baseType: !3607, size: 8, offset: 280)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !3596, file: !741, line: 430, baseType: !3607, size: 8, offset: 288)
!3618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !3596, file: !741, line: 431, baseType: !3607, size: 8, offset: 296)
!3619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !3596, file: !741, line: 432, baseType: !3607, size: 8, offset: 304)
!3620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !3596, file: !741, line: 433, baseType: !3607, size: 8, offset: 312)
!3621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !3596, file: !741, line: 434, baseType: !3607, size: 8, offset: 320)
!3622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !3596, file: !741, line: 435, baseType: !3607, size: 8, offset: 328)
!3623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !3596, file: !741, line: 436, baseType: !3607, size: 8, offset: 336)
!3624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !3596, file: !741, line: 437, baseType: !3607, size: 8, offset: 344)
!3625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !3596, file: !741, line: 438, baseType: !3607, size: 8, offset: 352)
!3626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !3596, file: !741, line: 439, baseType: !3607, size: 8, offset: 360)
!3627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !3596, file: !741, line: 440, baseType: !3607, size: 8, offset: 368)
!3628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !3596, file: !741, line: 441, baseType: !3607, size: 8, offset: 376)
!3629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !3596, file: !741, line: 442, baseType: !3607, size: 8, offset: 384)
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !3596, file: !741, line: 443, baseType: !3607, size: 8, offset: 392)
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !3596, file: !741, line: 444, baseType: !3607, size: 8, offset: 400)
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !3596, file: !741, line: 445, baseType: !3607, size: 8, offset: 408)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !3596, file: !741, line: 446, baseType: !3607, size: 8, offset: 416)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !3596, file: !741, line: 447, baseType: !3607, size: 8, offset: 424)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !3596, file: !741, line: 448, baseType: !3607, size: 8, offset: 432)
!3636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !3596, file: !741, line: 449, baseType: !3607, size: 8, offset: 440)
!3637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !3596, file: !741, line: 450, baseType: !3607, size: 8, offset: 448)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !3596, file: !741, line: 451, baseType: !3607, size: 8, offset: 456)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !3596, file: !741, line: 452, baseType: !3607, size: 8, offset: 464)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !3596, file: !741, line: 453, baseType: !3607, size: 8, offset: 472)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !3596, file: !741, line: 454, baseType: !3607, size: 8, offset: 480)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !3596, file: !741, line: 455, baseType: !3607, size: 8, offset: 488)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !3596, file: !741, line: 456, baseType: !3607, size: 8, offset: 496)
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !3596, file: !741, line: 457, baseType: !3607, size: 8, offset: 504)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !3596, file: !741, line: 458, baseType: !3607, size: 8, offset: 512)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !3596, file: !741, line: 459, baseType: !3607, size: 8, offset: 520)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !3596, file: !741, line: 460, baseType: !3607, size: 8, offset: 528)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !3596, file: !741, line: 461, baseType: !3607, size: 8, offset: 536)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !3596, file: !741, line: 462, baseType: !3607, size: 8, offset: 544)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !3596, file: !741, line: 463, baseType: !3607, size: 8, offset: 552)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !3596, file: !741, line: 464, baseType: !3607, size: 8, offset: 560)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !3596, file: !741, line: 465, baseType: !3607, size: 8, offset: 568)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !3596, file: !741, line: 466, baseType: !3607, size: 8, offset: 576)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !3596, file: !741, line: 467, baseType: !3607, size: 8, offset: 584)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !3596, file: !741, line: 468, baseType: !3607, size: 8, offset: 592)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !3596, file: !741, line: 469, baseType: !3607, size: 8, offset: 600)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !3596, file: !741, line: 470, baseType: !3607, size: 8, offset: 608)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !3596, file: !741, line: 471, baseType: !3607, size: 8, offset: 616)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !3596, file: !741, line: 472, baseType: !3607, size: 8, offset: 624)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !3596, file: !741, line: 473, baseType: !3607, size: 8, offset: 632)
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !3596, file: !741, line: 474, baseType: !3607, size: 8, offset: 640)
!3662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !3596, file: !741, line: 475, baseType: !3607, size: 8, offset: 648)
!3663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !3596, file: !741, line: 476, baseType: !3607, size: 8, offset: 656)
!3664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !3596, file: !741, line: 477, baseType: !3607, size: 8, offset: 664)
!3665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !3596, file: !741, line: 478, baseType: !3607, size: 8, offset: 672)
!3666 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !3596, file: !741, line: 479, baseType: !3607, size: 8, offset: 680)
!3667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !3596, file: !741, line: 480, baseType: !3607, size: 8, offset: 688)
!3668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !3596, file: !741, line: 481, baseType: !3607, size: 8, offset: 696)
!3669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !3596, file: !741, line: 482, baseType: !3607, size: 8, offset: 704)
!3670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !3596, file: !741, line: 483, baseType: !3607, size: 8, offset: 712)
!3671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !3596, file: !741, line: 484, baseType: !3607, size: 8, offset: 720)
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !3596, file: !741, line: 485, baseType: !3607, size: 8, offset: 728)
!3673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !3596, file: !741, line: 486, baseType: !3607, size: 8, offset: 736)
!3674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !3596, file: !741, line: 487, baseType: !3607, size: 8, offset: 744)
!3675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !3596, file: !741, line: 488, baseType: !3607, size: 8, offset: 752)
!3676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !3596, file: !741, line: 489, baseType: !3607, size: 8, offset: 760)
!3677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !3596, file: !741, line: 490, baseType: !3607, size: 8, offset: 768)
!3678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !3596, file: !741, line: 491, baseType: !3607, size: 8, offset: 776)
!3679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !3596, file: !741, line: 492, baseType: !3607, size: 8, offset: 784)
!3680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !3596, file: !741, line: 493, baseType: !3607, size: 8, offset: 792)
!3681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !3596, file: !741, line: 494, baseType: !3607, size: 8, offset: 800)
!3682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !3596, file: !741, line: 495, baseType: !3607, size: 8, offset: 808)
!3683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !3596, file: !741, line: 496, baseType: !3607, size: 8, offset: 816)
!3684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !3596, file: !741, line: 497, baseType: !3607, size: 8, offset: 824)
!3685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !3596, file: !741, line: 498, baseType: !3607, size: 8, offset: 832)
!3686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !3596, file: !741, line: 499, baseType: !3607, size: 8, offset: 840)
!3687 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !3596, file: !741, line: 500, baseType: !3607, size: 8, offset: 848)
!3688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !3596, file: !741, line: 501, baseType: !3607, size: 8, offset: 856)
!3689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !3596, file: !741, line: 502, baseType: !3607, size: 8, offset: 864)
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !3596, file: !741, line: 503, baseType: !3607, size: 8, offset: 872)
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !3596, file: !741, line: 504, baseType: !3607, size: 8, offset: 880)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !3596, file: !741, line: 505, baseType: !3607, size: 8, offset: 888)
!3693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !3596, file: !741, line: 506, baseType: !3607, size: 8, offset: 896)
!3694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !3596, file: !741, line: 507, baseType: !3607, size: 8, offset: 904)
!3695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !3596, file: !741, line: 508, baseType: !3607, size: 8, offset: 912)
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !3596, file: !741, line: 509, baseType: !3607, size: 8, offset: 920)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !3596, file: !741, line: 510, baseType: !3607, size: 8, offset: 928)
!3698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !3596, file: !741, line: 511, baseType: !3607, size: 8, offset: 936)
!3699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !3596, file: !741, line: 512, baseType: !3607, size: 8, offset: 944)
!3700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !3596, file: !741, line: 513, baseType: !3607, size: 8, offset: 952)
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !3596, file: !741, line: 514, baseType: !3607, size: 8, offset: 960)
!3702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !3596, file: !741, line: 515, baseType: !3607, size: 8, offset: 968)
!3703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !3596, file: !741, line: 516, baseType: !3607, size: 8, offset: 976)
!3704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !3596, file: !741, line: 517, baseType: !3607, size: 8, offset: 984)
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !3596, file: !741, line: 518, baseType: !3607, size: 8, offset: 992)
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !3596, file: !741, line: 519, baseType: !3607, size: 8, offset: 1000)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !3596, file: !741, line: 520, baseType: !3607, size: 8, offset: 1008)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !3596, file: !741, line: 521, baseType: !3607, size: 8, offset: 1016)
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !3596, file: !741, line: 522, baseType: !3607, size: 8, offset: 1024)
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !3596, file: !741, line: 523, baseType: !3607, size: 8, offset: 1032)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !3596, file: !741, line: 524, baseType: !3607, size: 8, offset: 1040)
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !3596, file: !741, line: 525, baseType: !3607, size: 8, offset: 1048)
!3713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !3596, file: !741, line: 526, baseType: !3607, size: 8, offset: 1056)
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !3596, file: !741, line: 527, baseType: !3607, size: 8, offset: 1064)
!3715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !3596, file: !741, line: 528, baseType: !3607, size: 8, offset: 1072)
!3716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !3596, file: !741, line: 529, baseType: !3607, size: 8, offset: 1080)
!3717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !3596, file: !741, line: 530, baseType: !3607, size: 8, offset: 1088)
!3718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !3596, file: !741, line: 531, baseType: !3607, size: 8, offset: 1096)
!3719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !3596, file: !741, line: 532, baseType: !3607, size: 8, offset: 1104)
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !3596, file: !741, line: 533, baseType: !3607, size: 8, offset: 1112)
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !3596, file: !741, line: 534, baseType: !3607, size: 8, offset: 1120)
!3722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !3596, file: !741, line: 535, baseType: !3607, size: 8, offset: 1128)
!3723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !3596, file: !741, line: 536, baseType: !3607, size: 8, offset: 1136)
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !3596, file: !741, line: 537, baseType: !3607, size: 8, offset: 1144)
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !3596, file: !741, line: 538, baseType: !3607, size: 8, offset: 1152)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !3596, file: !741, line: 539, baseType: !3607, size: 8, offset: 1160)
!3727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !3596, file: !741, line: 540, baseType: !3607, size: 8, offset: 1168)
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !3596, file: !741, line: 541, baseType: !3607, size: 8, offset: 1176)
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !3596, file: !741, line: 542, baseType: !3607, size: 8, offset: 1184)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !3596, file: !741, line: 543, baseType: !3607, size: 8, offset: 1192)
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !3596, file: !741, line: 544, baseType: !3607, size: 8, offset: 1200)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !3596, file: !741, line: 545, baseType: !3607, size: 8, offset: 1208)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !3596, file: !741, line: 546, baseType: !3607, size: 8, offset: 1216)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !3596, file: !741, line: 547, baseType: !3607, size: 8, offset: 1224)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !3596, file: !741, line: 548, baseType: !3607, size: 8, offset: 1232)
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !3596, file: !741, line: 549, baseType: !3607, size: 8, offset: 1240)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !3596, file: !741, line: 550, baseType: !3607, size: 8, offset: 1248)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !3596, file: !741, line: 551, baseType: !3607, size: 8, offset: 1256)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !3596, file: !741, line: 552, baseType: !3607, size: 8, offset: 1264)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !3596, file: !741, line: 553, baseType: !3607, size: 8, offset: 1272)
!3741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !3596, file: !741, line: 554, baseType: !3607, size: 8, offset: 1280)
!3742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !3596, file: !741, line: 555, baseType: !3607, size: 8, offset: 1288)
!3743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !3596, file: !741, line: 556, baseType: !3607, size: 8, offset: 1296)
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !3596, file: !741, line: 557, baseType: !3607, size: 8, offset: 1304)
!3745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !3596, file: !741, line: 558, baseType: !3607, size: 8, offset: 1312)
!3746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !3596, file: !741, line: 559, baseType: !3607, size: 8, offset: 1320)
!3747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !3596, file: !741, line: 560, baseType: !3607, size: 8, offset: 1328)
!3748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !3596, file: !741, line: 561, baseType: !3607, size: 8, offset: 1336)
!3749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !3596, file: !741, line: 562, baseType: !3607, size: 8, offset: 1344)
!3750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !3596, file: !741, line: 563, baseType: !3607, size: 8, offset: 1352)
!3751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !3596, file: !741, line: 564, baseType: !3607, size: 8, offset: 1360)
!3752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !3596, file: !741, line: 565, baseType: !3607, size: 8, offset: 1368)
!3753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !3596, file: !741, line: 566, baseType: !3607, size: 8, offset: 1376)
!3754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !3596, file: !741, line: 567, baseType: !3607, size: 8, offset: 1384)
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !3596, file: !741, line: 568, baseType: !3607, size: 8, offset: 1392)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !3596, file: !741, line: 569, baseType: !3607, size: 8, offset: 1400)
!3757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !3596, file: !741, line: 570, baseType: !3607, size: 8, offset: 1408)
!3758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !3596, file: !741, line: 571, baseType: !3607, size: 8, offset: 1416)
!3759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !3596, file: !741, line: 572, baseType: !3607, size: 8, offset: 1424)
!3760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !3596, file: !741, line: 573, baseType: !3607, size: 8, offset: 1432)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !3596, file: !741, line: 574, baseType: !3607, size: 8, offset: 1440)
!3762 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !2704, file: !151, line: 3405, baseType: !3763, size: 384)
!3763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !151, line: 3352, size: 384, elements: !3764)
!3764 = !{!3765, !3766}
!3765 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3763, file: !151, line: 3353, baseType: !2740, size: 192)
!3766 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3763, file: !151, line: 3356, baseType: !3767, size: 192, offset: 192)
!3767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !741, line: 578, size: 192, elements: !3768)
!3768 = !{!3769, !3770, !3771, !3772, !3773, !3774, !3775, !3776, !3777, !3778, !3779}
!3769 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3767, file: !741, line: 580, baseType: !2798, size: 32)
!3770 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3767, file: !741, line: 581, baseType: !2798, size: 32, offset: 32)
!3771 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3767, file: !741, line: 582, baseType: !2798, size: 32, offset: 64)
!3772 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3767, file: !741, line: 583, baseType: !2798, size: 32, offset: 96)
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3767, file: !741, line: 584, baseType: !2820, size: 8, offset: 128)
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3767, file: !741, line: 585, baseType: !2820, size: 8, offset: 136)
!3775 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3767, file: !741, line: 586, baseType: !2820, size: 8, offset: 144)
!3776 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3767, file: !741, line: 587, baseType: !2820, size: 8, offset: 152)
!3777 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3767, file: !741, line: 588, baseType: !2820, size: 8, offset: 160)
!3778 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3767, file: !741, line: 589, baseType: !2820, size: 8, offset: 168)
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3767, file: !741, line: 590, baseType: !2820, size: 8, offset: 176)
!3780 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !2696, file: !151, line: 5280, baseType: !7, size: 32, offset: 64)
!3781 = !DIDerivedType(tag: DW_TAG_member, name: "to", scope: !2696, file: !151, line: 5281, baseType: !2702, size: 64, offset: 128)
!3782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2695, size: 64)
!3783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3109, size: 64)
!3784 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3786, size: 64)
!3786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_tree", file: !1629, line: 697, size: 192, elements: !3787)
!3787 = !{!3788, !3789, !3790}
!3788 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3786, file: !1629, line: 699, baseType: !2876, size: 64)
!3789 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3786, file: !1629, line: 702, baseType: !2702, size: 64, offset: 64)
!3790 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !3786, file: !1629, line: 707, baseType: !3092, size: 32, offset: 128)
!3791 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3792, size: 64)
!3792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_constant_pool", file: !3, line: 3443, size: 256, elements: !3793)
!3793 = !{!3794, !3795, !3796, !3797}
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !3792, file: !3, line: 3445, baseType: !3083, size: 64)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !3792, file: !3, line: 3446, baseType: !3083, size: 64, offset: 64)
!3796 = !DIDerivedType(tag: DW_TAG_member, name: "const_rtx_htab", scope: !3792, file: !3, line: 3452, baseType: !3284, size: 64, offset: 128)
!3797 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3792, file: !3, line: 3456, baseType: !2757, size: 64, offset: 192)
!3798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3799, size: 64)
!3799 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3084)
!3800 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3801, size: 64)
!3801 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2764)
!3802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3803, size: 64)
!3803 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2783)
!3804 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3092, size: 64)
!3805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3806, size: 64)
!3806 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2704)
!3807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3808, size: 64)
!3808 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_alias_pair_gc", file: !151, line: 198, baseType: !3809)
!3809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_alias_pair_gc", file: !151, line: 198, size: 192, elements: !3810)
!3810 = !{!3811}
!3811 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3809, file: !151, line: 198, baseType: !3812, size: 192)
!3812 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_alias_pair_base", file: !151, line: 197, baseType: !3813)
!3813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_alias_pair_base", file: !151, line: 197, size: 192, elements: !3814)
!3814 = !{!3815, !3816, !3817}
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3813, file: !151, line: 197, baseType: !7, size: 32)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3813, file: !151, line: 197, baseType: !7, size: 32, offset: 32)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3813, file: !151, line: 197, baseType: !3818, size: 128, offset: 64)
!3818 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3819, size: 128, elements: !2801)
!3819 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_pair", file: !151, line: 194, baseType: !3820)
!3820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alias_pair", file: !151, line: 190, size: 128, elements: !3821)
!3821 = !{!3822, !3823}
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3820, file: !151, line: 192, baseType: !2702, size: 64)
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "target", scope: !3820, file: !151, line: 193, baseType: !2702, size: 64, offset: 64)
!3824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3825, size: 64)
!3825 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3110)
!3826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3827, size: 64)
!3827 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3106)
!3828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3829, size: 64)
!3829 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3786)
!3830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2798, size: 64)
!3831 = !{!3832, !3848, !3854, !3863, !3865, !3867, !3883, !3899, !3902, !3905, !3907, !3909, !3911, !3913, !3915, !3917, !3919, !3921, !3923, !3925, !3927, !3929, !3931, !3933, !3935, !3937, !3939, !3941, !3943, !3945, !3947, !3949, !3951, !3953, !3955, !3957, !3959, !0, !3961, !3963, !3965, !3967, !3969, !3971, !3973, !3975}
!3832 = !DIGlobalVariableExpression(var: !3833, expr: !DIExpression())
!3833 = distinct !DIGlobalVariable(name: "table", scope: !3834, file: !3, line: 1075, type: !3838, isLocal: true, isDefinition: true)
!3834 = distinct !DISubprogram(name: "decode_reg_name", scope: !3, file: !3, line: 1046, type: !3835, scopeLine: 1047, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!3835 = !DISubroutineType(types: !3836)
!3836 = !{!2798, !2692}
!3837 = !{}
!3838 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3839, size: 3072, elements: !3846)
!3839 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3840)
!3840 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3834, file: !3, line: 1075, size: 128, elements: !3841)
!3841 = !{!3842, !3844}
!3842 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3840, file: !3, line: 1075, baseType: !3843, size: 64)
!3843 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2692)
!3844 = !DIDerivedType(tag: DW_TAG_member, name: "number", scope: !3840, file: !3, line: 1075, baseType: !3845, size: 32, offset: 64)
!3845 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2798)
!3846 = !{!3847}
!3847 = !DISubrange(count: 24)
!3848 = !DIGlobalVariableExpression(var: !3849, expr: !DIExpression())
!3849 = distinct !DIGlobalVariable(name: "visibility_types", scope: !3850, file: !3, line: 5827, type: !3853, isLocal: true, isDefinition: true)
!3850 = distinct !DISubprogram(name: "default_assemble_visibility", scope: !3, file: !3, line: 5825, type: !3851, scopeLine: 5826, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!3851 = !DISubroutineType(types: !3852)
!3852 = !{null, !2702, !2798}
!3853 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3843, size: 256, elements: !2968)
!3854 = !DIGlobalVariableExpression(var: !3855, expr: !DIExpression())
!3855 = distinct !DIGlobalVariable(name: "buffer", scope: !3856, file: !3, line: 7064, type: !3860, isLocal: true, isDefinition: true)
!3856 = distinct !DISubprogram(name: "elf_record_gcc_switches", scope: !3, file: !3, line: 7062, type: !3857, scopeLine: 7063, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!3857 = !DISubroutineType(types: !3858)
!3858 = !{!2798, !3859, !2692}
!3859 = !DIDerivedType(tag: DW_TAG_typedef, name: "print_switch_type", file: !1711, line: 64, baseType: !1710)
!3860 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 8192, elements: !3861)
!3861 = !{!3862}
!3862 = !DISubrange(count: 1024)
!3863 = !DIGlobalVariableExpression(var: !3864, expr: !DIExpression())
!3864 = distinct !DIGlobalVariable(name: "previous_name_held_back", scope: !3856, file: !3, line: 7074, type: !2820, isLocal: true, isDefinition: true)
!3865 = !DIGlobalVariableExpression(var: !3866, expr: !DIExpression())
!3866 = distinct !DIGlobalVariable(name: "started", scope: !3856, file: !3, line: 7114, type: !2820, isLocal: true, isDefinition: true)
!3867 = !DIGlobalVariableExpression(var: !3868, expr: !DIExpression())
!3868 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_varasm_h", scope: !2, file: !3869, line: 164, type: !3870, isLocal: false, isDefinition: true)
!3869 = !DIFile(filename: "./gt-varasm.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3870 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3871, size: 4160, elements: !3881)
!3871 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3872)
!3872 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !3873, line: 69, size: 320, elements: !3874)
!3873 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3874 = !{!3875, !3876, !3877, !3878, !3880}
!3875 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3872, file: !3873, line: 70, baseType: !2691, size: 64)
!3876 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !3872, file: !3873, line: 71, baseType: !3306, size: 64, offset: 64)
!3877 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !3872, file: !3873, line: 72, baseType: !3306, size: 64, offset: 128)
!3878 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !3872, file: !3873, line: 73, baseType: !3879, size: 64, offset: 192)
!3879 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !3873, line: 65, baseType: !3300)
!3880 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !3872, file: !3873, line: 74, baseType: !3879, size: 64, offset: 256)
!3881 = !{!3882}
!3882 = !DISubrange(count: 13)
!3883 = !DIGlobalVariableExpression(var: !3884, expr: !DIExpression())
!3884 = distinct !DIGlobalVariable(name: "gt_ggc_rc_gt_varasm_h", scope: !2, file: !3869, line: 252, type: !3885, isLocal: false, isDefinition: true)
!3885 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3886, size: 768, elements: !2943)
!3886 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3887)
!3887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_cache_tab", file: !3873, line: 85, size: 384, elements: !3888)
!3888 = !{!3889, !3891, !3892, !3893, !3894, !3895}
!3889 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3887, file: !3873, line: 86, baseType: !3890, size: 64)
!3890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3285, size: 64)
!3891 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !3887, file: !3873, line: 87, baseType: !3306, size: 64, offset: 64)
!3892 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !3887, file: !3873, line: 88, baseType: !3306, size: 64, offset: 128)
!3893 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !3887, file: !3873, line: 89, baseType: !3879, size: 64, offset: 192)
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !3887, file: !3873, line: 90, baseType: !3879, size: 64, offset: 256)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "marked_p", scope: !3887, file: !3873, line: 91, baseType: !3896, size: 64, offset: 320)
!3896 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3897, size: 64)
!3897 = !DISubroutineType(types: !3898)
!3898 = !{!2798, !3132}
!3899 = !DIGlobalVariableExpression(var: !3900, expr: !DIExpression())
!3900 = distinct !DIGlobalVariable(name: "gt_pch_rc_gt_varasm_h", scope: !2, file: !3869, line: 264, type: !3901, isLocal: false, isDefinition: true)
!3901 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3871, size: 640, elements: !2943)
!3902 = !DIGlobalVariableExpression(var: !3903, expr: !DIExpression())
!3903 = distinct !DIGlobalVariable(name: "gt_pch_rs_gt_varasm_h", scope: !2, file: !3869, line: 275, type: !3904, isLocal: false, isDefinition: true)
!3904 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3871, size: 960, elements: !2775)
!3905 = !DIGlobalVariableExpression(var: !3906, expr: !DIExpression())
!3906 = distinct !DIGlobalVariable(name: "first_global_object_name", scope: !2, file: !3, line: 66, type: !2692, isLocal: false, isDefinition: true)
!3907 = !DIGlobalVariableExpression(var: !3908, expr: !DIExpression())
!3908 = distinct !DIGlobalVariable(name: "weak_global_object_name", scope: !2, file: !3, line: 67, type: !2692, isLocal: false, isDefinition: true)
!3909 = !DIGlobalVariableExpression(var: !3910, expr: !DIExpression())
!3910 = distinct !DIGlobalVariable(name: "const_labelno", scope: !2, file: !3, line: 78, type: !2798, isLocal: true, isDefinition: true)
!3911 = !DIGlobalVariableExpression(var: !3912, expr: !DIExpression())
!3912 = distinct !DIGlobalVariable(name: "size_directive_output", scope: !2, file: !3, line: 83, type: !2798, isLocal: false, isDefinition: true)
!3913 = !DIGlobalVariableExpression(var: !3914, expr: !DIExpression())
!3914 = distinct !DIGlobalVariable(name: "last_assemble_variable_decl", scope: !2, file: !3, line: 90, type: !2702, isLocal: false, isDefinition: true)
!3915 = !DIGlobalVariableExpression(var: !3916, expr: !DIExpression())
!3916 = distinct !DIGlobalVariable(name: "first_function_block_is_cold", scope: !2, file: !3, line: 95, type: !2820, isLocal: false, isDefinition: true)
!3917 = !DIGlobalVariableExpression(var: !3918, expr: !DIExpression())
!3918 = distinct !DIGlobalVariable(name: "const_alias_set", scope: !2, file: !3, line: 100, type: !3071, isLocal: true, isDefinition: true)
!3919 = !DIGlobalVariableExpression(var: !3920, expr: !DIExpression())
!3920 = distinct !DIGlobalVariable(name: "text_section", scope: !2, file: !3, line: 133, type: !3109, isLocal: false, isDefinition: true)
!3921 = !DIGlobalVariableExpression(var: !3922, expr: !DIExpression())
!3922 = distinct !DIGlobalVariable(name: "data_section", scope: !2, file: !3, line: 134, type: !3109, isLocal: false, isDefinition: true)
!3923 = !DIGlobalVariableExpression(var: !3924, expr: !DIExpression())
!3924 = distinct !DIGlobalVariable(name: "readonly_data_section", scope: !2, file: !3, line: 135, type: !3109, isLocal: false, isDefinition: true)
!3925 = !DIGlobalVariableExpression(var: !3926, expr: !DIExpression())
!3926 = distinct !DIGlobalVariable(name: "sdata_section", scope: !2, file: !3, line: 136, type: !3109, isLocal: false, isDefinition: true)
!3927 = !DIGlobalVariableExpression(var: !3928, expr: !DIExpression())
!3928 = distinct !DIGlobalVariable(name: "ctors_section", scope: !2, file: !3, line: 137, type: !3109, isLocal: false, isDefinition: true)
!3929 = !DIGlobalVariableExpression(var: !3930, expr: !DIExpression())
!3930 = distinct !DIGlobalVariable(name: "dtors_section", scope: !2, file: !3, line: 138, type: !3109, isLocal: false, isDefinition: true)
!3931 = !DIGlobalVariableExpression(var: !3932, expr: !DIExpression())
!3932 = distinct !DIGlobalVariable(name: "bss_section", scope: !2, file: !3, line: 139, type: !3109, isLocal: false, isDefinition: true)
!3933 = !DIGlobalVariableExpression(var: !3934, expr: !DIExpression())
!3934 = distinct !DIGlobalVariable(name: "sbss_section", scope: !2, file: !3, line: 140, type: !3109, isLocal: false, isDefinition: true)
!3935 = !DIGlobalVariableExpression(var: !3936, expr: !DIExpression())
!3936 = distinct !DIGlobalVariable(name: "tls_comm_section", scope: !2, file: !3, line: 143, type: !3109, isLocal: false, isDefinition: true)
!3937 = !DIGlobalVariableExpression(var: !3938, expr: !DIExpression())
!3938 = distinct !DIGlobalVariable(name: "comm_section", scope: !2, file: !3, line: 144, type: !3109, isLocal: false, isDefinition: true)
!3939 = !DIGlobalVariableExpression(var: !3940, expr: !DIExpression())
!3940 = distinct !DIGlobalVariable(name: "lcomm_section", scope: !2, file: !3, line: 145, type: !3109, isLocal: false, isDefinition: true)
!3941 = !DIGlobalVariableExpression(var: !3942, expr: !DIExpression())
!3942 = distinct !DIGlobalVariable(name: "bss_noswitch_section", scope: !2, file: !3, line: 149, type: !3109, isLocal: false, isDefinition: true)
!3943 = !DIGlobalVariableExpression(var: !3944, expr: !DIExpression())
!3944 = distinct !DIGlobalVariable(name: "exception_section", scope: !2, file: !3, line: 154, type: !3109, isLocal: false, isDefinition: true)
!3945 = !DIGlobalVariableExpression(var: !3946, expr: !DIExpression())
!3946 = distinct !DIGlobalVariable(name: "eh_frame_section", scope: !2, file: !3, line: 159, type: !3109, isLocal: false, isDefinition: true)
!3947 = !DIGlobalVariableExpression(var: !3948, expr: !DIExpression())
!3948 = distinct !DIGlobalVariable(name: "in_section", scope: !2, file: !3, line: 163, type: !3109, isLocal: false, isDefinition: true)
!3949 = !DIGlobalVariableExpression(var: !3950, expr: !DIExpression())
!3950 = distinct !DIGlobalVariable(name: "in_cold_section_p", scope: !2, file: !3, line: 167, type: !2820, isLocal: false, isDefinition: true)
!3951 = !DIGlobalVariableExpression(var: !3952, expr: !DIExpression())
!3952 = distinct !DIGlobalVariable(name: "unnamed_sections", scope: !2, file: !3, line: 170, type: !3109, isLocal: true, isDefinition: true)
!3953 = !DIGlobalVariableExpression(var: !3954, expr: !DIExpression())
!3954 = distinct !DIGlobalVariable(name: "section_htab", scope: !2, file: !3, line: 180, type: !3284, isLocal: true, isDefinition: true)
!3955 = !DIGlobalVariableExpression(var: !3956, expr: !DIExpression())
!3956 = distinct !DIGlobalVariable(name: "object_block_htab", scope: !2, file: !3, line: 183, type: !3284, isLocal: true, isDefinition: true)
!3957 = !DIGlobalVariableExpression(var: !3958, expr: !DIExpression())
!3958 = distinct !DIGlobalVariable(name: "anchor_labelno", scope: !2, file: !3, line: 186, type: !2798, isLocal: true, isDefinition: true)
!3959 = !DIGlobalVariableExpression(var: !3960, expr: !DIExpression())
!3960 = distinct !DIGlobalVariable(name: "shared_constant_pool", scope: !2, file: !3, line: 189, type: !3791, isLocal: true, isDefinition: true)
!3961 = !DIGlobalVariableExpression(var: !3962, expr: !DIExpression())
!3962 = distinct !DIGlobalVariable(name: "emutls_object_type", scope: !2, file: !3, line: 195, type: !2702, isLocal: true, isDefinition: true)
!3963 = !DIGlobalVariableExpression(var: !3964, expr: !DIExpression())
!3964 = distinct !DIGlobalVariable(name: "pending_assemble_externals", scope: !2, file: !3, line: 2303, type: !2702, isLocal: true, isDefinition: true)
!3965 = !DIGlobalVariableExpression(var: !3966, expr: !DIExpression())
!3966 = distinct !DIGlobalVariable(name: "weak_decls", scope: !2, file: !3, line: 2359, type: !2702, isLocal: true, isDefinition: true)
!3967 = !DIGlobalVariableExpression(var: !3968, expr: !DIExpression())
!3968 = distinct !DIGlobalVariable(name: "initial_trampoline", scope: !2, file: !3, line: 2566, type: !2876, isLocal: true, isDefinition: true)
!3969 = !DIGlobalVariableExpression(var: !3970, expr: !DIExpression())
!3970 = distinct !DIGlobalVariable(name: "const_desc_htab", scope: !2, file: !3, line: 2857, type: !3284, isLocal: true, isDefinition: true)
!3971 = !DIGlobalVariableExpression(var: !3972, expr: !DIExpression())
!3972 = distinct !DIGlobalVariable(name: "weakref_targets", scope: !2, file: !3, line: 5387, type: !2702, isLocal: true, isDefinition: true)
!3973 = !DIGlobalVariableExpression(var: !3974, expr: !DIExpression())
!3974 = distinct !DIGlobalVariable(name: "alias_pairs", scope: !2, file: !3, line: 5518, type: !3807, isLocal: false, isDefinition: true)
!3975 = !DIGlobalVariableExpression(var: !3976, expr: !DIExpression())
!3976 = distinct !DIGlobalVariable(name: "trampolines_created", scope: !2, file: !3, line: 6783, type: !2798, isLocal: false, isDefinition: true)
!3977 = !{i32 7, !"Dwarf Version", i32 4}
!3978 = !{i32 2, !"Debug Info Version", i32 3}
!3979 = !{i32 1, !"wchar_size", i32 4}
!3980 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3981 = distinct !DISubprogram(name: "default_emutls_var_fields", scope: !3, file: !3, line: 238, type: !3982, scopeLine: 239, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!3982 = !DISubroutineType(types: !3983)
!3983 = !{!2702, !2702, !3499}
!3984 = !DILocalVariable(name: "type", arg: 1, scope: !3981, file: !3, line: 238, type: !2702)
!3985 = !DILocation(line: 238, column: 33, scope: !3981)
!3986 = !DILocalVariable(name: "name", arg: 2, scope: !3981, file: !3, line: 238, type: !3499)
!3987 = !DILocation(line: 238, column: 45, scope: !3981)
!3988 = !DILocalVariable(name: "word_type_node", scope: !3981, file: !3, line: 240, type: !2702)
!3989 = !DILocation(line: 240, column: 8, scope: !3981)
!3990 = !DILocalVariable(name: "field", scope: !3981, file: !3, line: 240, type: !2702)
!3991 = !DILocation(line: 240, column: 24, scope: !3981)
!3992 = !DILocalVariable(name: "next_field", scope: !3981, file: !3, line: 240, type: !2702)
!3993 = !DILocation(line: 240, column: 31, scope: !3981)
!3994 = !DILocation(line: 242, column: 11, scope: !3981)
!3995 = !DILocation(line: 242, column: 9, scope: !3981)
!3996 = !DILocation(line: 244, column: 26, scope: !3981)
!3997 = !DILocation(line: 244, column: 3, scope: !3981)
!3998 = !DILocation(line: 244, column: 24, scope: !3981)
!3999 = !DILocation(line: 245, column: 16, scope: !3981)
!4000 = !DILocation(line: 245, column: 14, scope: !3981)
!4001 = !DILocation(line: 247, column: 11, scope: !3981)
!4002 = !DILocation(line: 247, column: 9, scope: !3981)
!4003 = !DILocation(line: 250, column: 26, scope: !3981)
!4004 = !DILocation(line: 250, column: 3, scope: !3981)
!4005 = !DILocation(line: 250, column: 24, scope: !3981)
!4006 = !DILocation(line: 251, column: 24, scope: !3981)
!4007 = !DILocation(line: 251, column: 3, scope: !3981)
!4008 = !DILocation(line: 251, column: 22, scope: !3981)
!4009 = !DILocation(line: 252, column: 16, scope: !3981)
!4010 = !DILocation(line: 252, column: 14, scope: !3981)
!4011 = !DILocation(line: 254, column: 37, scope: !3981)
!4012 = !DILocation(line: 254, column: 52, scope: !3981)
!4013 = !DILocation(line: 254, column: 20, scope: !3981)
!4014 = !DILocation(line: 254, column: 18, scope: !3981)
!4015 = !DILocation(line: 255, column: 11, scope: !3981)
!4016 = !DILocation(line: 255, column: 9, scope: !3981)
!4017 = !DILocation(line: 258, column: 26, scope: !3981)
!4018 = !DILocation(line: 258, column: 3, scope: !3981)
!4019 = !DILocation(line: 258, column: 24, scope: !3981)
!4020 = !DILocation(line: 259, column: 24, scope: !3981)
!4021 = !DILocation(line: 259, column: 3, scope: !3981)
!4022 = !DILocation(line: 259, column: 22, scope: !3981)
!4023 = !DILocation(line: 260, column: 16, scope: !3981)
!4024 = !DILocation(line: 260, column: 14, scope: !3981)
!4025 = !DILocation(line: 262, column: 11, scope: !3981)
!4026 = !DILocation(line: 262, column: 9, scope: !3981)
!4027 = !DILocation(line: 264, column: 26, scope: !3981)
!4028 = !DILocation(line: 264, column: 3, scope: !3981)
!4029 = !DILocation(line: 264, column: 24, scope: !3981)
!4030 = !DILocation(line: 265, column: 24, scope: !3981)
!4031 = !DILocation(line: 265, column: 3, scope: !3981)
!4032 = !DILocation(line: 265, column: 22, scope: !3981)
!4033 = !DILocation(line: 267, column: 10, scope: !3981)
!4034 = !DILocation(line: 267, column: 3, scope: !3981)
!4035 = distinct !DISubprogram(name: "emutls_decl", scope: !3, file: !3, line: 350, type: !4036, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4036 = !DISubroutineType(types: !4037)
!4037 = !{!2702, !2702}
!4038 = !DILocalVariable(name: "decl", arg: 1, scope: !4035, file: !3, line: 350, type: !2702)
!4039 = !DILocation(line: 350, column: 19, scope: !4035)
!4040 = !DILocalVariable(name: "name", scope: !4035, file: !3, line: 352, type: !2702)
!4041 = !DILocation(line: 352, column: 8, scope: !4035)
!4042 = !DILocalVariable(name: "to", scope: !4035, file: !3, line: 352, type: !2702)
!4043 = !DILocation(line: 352, column: 14, scope: !4035)
!4044 = !DILocalVariable(name: "h", scope: !4035, file: !3, line: 353, type: !2695)
!4045 = !DILocation(line: 353, column: 20, scope: !4035)
!4046 = !DILocalVariable(name: "in", scope: !4035, file: !3, line: 353, type: !2696)
!4047 = !DILocation(line: 353, column: 23, scope: !4035)
!4048 = !DILocalVariable(name: "loc", scope: !4035, file: !3, line: 354, type: !3304)
!4049 = !DILocation(line: 354, column: 10, scope: !4035)
!4050 = !DILocation(line: 356, column: 15, scope: !4051)
!4051 = distinct !DILexicalBlock(scope: !4035, file: !3, line: 356, column: 7)
!4052 = !DILocation(line: 356, column: 7, scope: !4051)
!4053 = !DILocation(line: 356, column: 24, scope: !4051)
!4054 = !DILocation(line: 356, column: 27, scope: !4051)
!4055 = !DILocation(line: 356, column: 32, scope: !4051)
!4056 = !DILocation(line: 356, column: 40, scope: !4051)
!4057 = !DILocation(line: 356, column: 43, scope: !4051)
!4058 = !DILocation(line: 356, column: 51, scope: !4051)
!4059 = !DILocation(line: 356, column: 48, scope: !4051)
!4060 = !DILocation(line: 357, column: 7, scope: !4051)
!4061 = !DILocation(line: 357, column: 10, scope: !4051)
!4062 = !DILocation(line: 357, column: 27, scope: !4051)
!4063 = !DILocation(line: 357, column: 39, scope: !4051)
!4064 = !DILocation(line: 357, column: 44, scope: !4051)
!4065 = !DILocation(line: 356, column: 7, scope: !4035)
!4066 = !DILocation(line: 358, column: 12, scope: !4051)
!4067 = !DILocation(line: 358, column: 5, scope: !4051)
!4068 = !DILocation(line: 362, column: 9, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4035, file: !3, line: 362, column: 7)
!4070 = !DILocation(line: 362, column: 7, scope: !4035)
!4071 = !DILocation(line: 363, column: 19, scope: !4069)
!4072 = !DILocation(line: 363, column: 17, scope: !4069)
!4073 = !DILocation(line: 363, column: 5, scope: !4069)
!4074 = !DILocation(line: 365, column: 10, scope: !4035)
!4075 = !DILocation(line: 365, column: 8, scope: !4035)
!4076 = !DILocation(line: 370, column: 31, scope: !4035)
!4077 = !DILocation(line: 370, column: 13, scope: !4035)
!4078 = !DILocation(line: 370, column: 6, scope: !4035)
!4079 = !DILocation(line: 370, column: 11, scope: !4035)
!4080 = !DILocation(line: 371, column: 18, scope: !4035)
!4081 = !DILocation(line: 371, column: 6, scope: !4035)
!4082 = !DILocation(line: 371, column: 11, scope: !4035)
!4083 = !DILocation(line: 371, column: 16, scope: !4035)
!4084 = !DILocation(line: 372, column: 35, scope: !4035)
!4085 = !DILocation(line: 372, column: 48, scope: !4035)
!4086 = !DILocation(line: 372, column: 56, scope: !4035)
!4087 = !DILocation(line: 372, column: 9, scope: !4035)
!4088 = !DILocation(line: 372, column: 7, scope: !4035)
!4089 = !DILocation(line: 373, column: 28, scope: !4035)
!4090 = !DILocation(line: 373, column: 27, scope: !4035)
!4091 = !DILocation(line: 373, column: 7, scope: !4035)
!4092 = !DILocation(line: 373, column: 5, scope: !4035)
!4093 = !DILocation(line: 374, column: 7, scope: !4094)
!4094 = distinct !DILexicalBlock(scope: !4035, file: !3, line: 374, column: 7)
!4095 = !DILocation(line: 374, column: 9, scope: !4094)
!4096 = !DILocation(line: 374, column: 7, scope: !4035)
!4097 = !DILocation(line: 375, column: 10, scope: !4094)
!4098 = !DILocation(line: 375, column: 13, scope: !4094)
!4099 = !DILocation(line: 375, column: 8, scope: !4094)
!4100 = !DILocation(line: 375, column: 5, scope: !4094)
!4101 = !DILocation(line: 378, column: 12, scope: !4102)
!4102 = distinct !DILexicalBlock(scope: !4094, file: !3, line: 377, column: 5)
!4103 = !DILocation(line: 378, column: 10, scope: !4102)
!4104 = !DILocation(line: 382, column: 11, scope: !4102)
!4105 = !DILocation(line: 382, column: 9, scope: !4102)
!4106 = !DILocation(line: 383, column: 20, scope: !4102)
!4107 = !DILocation(line: 383, column: 7, scope: !4102)
!4108 = !DILocation(line: 383, column: 10, scope: !4102)
!4109 = !DILocation(line: 383, column: 15, scope: !4102)
!4110 = !DILocation(line: 384, column: 22, scope: !4102)
!4111 = !DILocation(line: 384, column: 7, scope: !4102)
!4112 = !DILocation(line: 384, column: 10, scope: !4102)
!4113 = !DILocation(line: 384, column: 15, scope: !4102)
!4114 = !DILocation(line: 384, column: 20, scope: !4102)
!4115 = !DILocation(line: 385, column: 15, scope: !4102)
!4116 = !DILocation(line: 385, column: 7, scope: !4102)
!4117 = !DILocation(line: 385, column: 10, scope: !4102)
!4118 = !DILocation(line: 385, column: 13, scope: !4102)
!4119 = !DILocation(line: 386, column: 35, scope: !4102)
!4120 = !DILocation(line: 386, column: 29, scope: !4102)
!4121 = !DILocation(line: 386, column: 7, scope: !4102)
!4122 = !DILocation(line: 386, column: 33, scope: !4102)
!4123 = !DILocation(line: 388, column: 7, scope: !4102)
!4124 = !DILocation(line: 388, column: 27, scope: !4102)
!4125 = !DILocation(line: 389, column: 7, scope: !4102)
!4126 = !DILocation(line: 389, column: 28, scope: !4102)
!4127 = !DILocation(line: 390, column: 7, scope: !4102)
!4128 = !DILocation(line: 390, column: 27, scope: !4102)
!4129 = !DILocation(line: 391, column: 7, scope: !4102)
!4130 = !DILocation(line: 391, column: 26, scope: !4102)
!4131 = !DILocation(line: 392, column: 7, scope: !4102)
!4132 = !DILocation(line: 393, column: 11, scope: !4133)
!4133 = distinct !DILexicalBlock(scope: !4102, file: !3, line: 393, column: 11)
!4134 = !DILocation(line: 393, column: 11, scope: !4102)
!4135 = !DILocation(line: 394, column: 22, scope: !4133)
!4136 = !DILocation(line: 394, column: 26, scope: !4133)
!4137 = !DILocation(line: 394, column: 2, scope: !4133)
!4138 = !DILocation(line: 395, column: 27, scope: !4102)
!4139 = !DILocation(line: 395, column: 7, scope: !4102)
!4140 = !DILocation(line: 395, column: 25, scope: !4102)
!4141 = !DILocation(line: 396, column: 26, scope: !4142)
!4142 = distinct !DILexicalBlock(scope: !4102, file: !3, line: 396, column: 11)
!4143 = !DILocation(line: 396, column: 11, scope: !4142)
!4144 = !DILocation(line: 396, column: 11, scope: !4102)
!4145 = !DILocation(line: 399, column: 2, scope: !4142)
!4146 = !DILocation(line: 399, column: 23, scope: !4142)
!4147 = !DILocation(line: 409, column: 22, scope: !4035)
!4148 = !DILocation(line: 409, column: 3, scope: !4035)
!4149 = !DILocation(line: 409, column: 20, scope: !4035)
!4150 = !DILocation(line: 410, column: 20, scope: !4035)
!4151 = !DILocation(line: 410, column: 3, scope: !4035)
!4152 = !DILocation(line: 410, column: 18, scope: !4035)
!4153 = !DILocation(line: 411, column: 22, scope: !4035)
!4154 = !DILocation(line: 411, column: 3, scope: !4035)
!4155 = !DILocation(line: 411, column: 20, scope: !4035)
!4156 = !DILocation(line: 412, column: 24, scope: !4035)
!4157 = !DILocation(line: 412, column: 3, scope: !4035)
!4158 = !DILocation(line: 412, column: 22, scope: !4035)
!4159 = !DILocation(line: 413, column: 22, scope: !4035)
!4160 = !DILocation(line: 413, column: 3, scope: !4035)
!4161 = !DILocation(line: 413, column: 20, scope: !4035)
!4162 = !DILocation(line: 414, column: 20, scope: !4035)
!4163 = !DILocation(line: 414, column: 3, scope: !4035)
!4164 = !DILocation(line: 414, column: 18, scope: !4035)
!4165 = !DILocation(line: 415, column: 26, scope: !4035)
!4166 = !DILocation(line: 415, column: 3, scope: !4035)
!4167 = !DILocation(line: 415, column: 24, scope: !4035)
!4168 = !DILocation(line: 417, column: 10, scope: !4035)
!4169 = !DILocation(line: 417, column: 3, scope: !4035)
!4170 = !DILocation(line: 418, column: 1, scope: !4035)
!4171 = distinct !DISubprogram(name: "get_emutls_object_name", scope: !3, file: !3, line: 229, type: !4036, scopeLine: 230, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4172 = !DILocalVariable(name: "name", arg: 1, scope: !4171, file: !3, line: 229, type: !2702)
!4173 = !DILocation(line: 229, column: 30, scope: !4171)
!4174 = !DILocalVariable(name: "prefix", scope: !4171, file: !3, line: 231, type: !2692)
!4175 = !DILocation(line: 231, column: 15, scope: !4171)
!4176 = !DILocation(line: 231, column: 40, scope: !4171)
!4177 = !DILocation(line: 231, column: 25, scope: !4171)
!4178 = !DILocation(line: 232, column: 21, scope: !4171)
!4179 = !DILocation(line: 234, column: 23, scope: !4171)
!4180 = !DILocation(line: 234, column: 31, scope: !4171)
!4181 = !DILocation(line: 234, column: 10, scope: !4171)
!4182 = !DILocation(line: 234, column: 3, scope: !4171)
!4183 = distinct !DISubprogram(name: "get_emutls_object_type", scope: !3, file: !3, line: 274, type: !4184, scopeLine: 275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4184 = !DISubroutineType(types: !4185)
!4185 = !{!2702}
!4186 = !DILocalVariable(name: "type", scope: !4183, file: !3, line: 276, type: !2702)
!4187 = !DILocation(line: 276, column: 8, scope: !4183)
!4188 = !DILocalVariable(name: "type_name", scope: !4183, file: !3, line: 276, type: !2702)
!4189 = !DILocation(line: 276, column: 14, scope: !4183)
!4190 = !DILocalVariable(name: "field", scope: !4183, file: !3, line: 276, type: !2702)
!4191 = !DILocation(line: 276, column: 25, scope: !4183)
!4192 = !DILocation(line: 278, column: 10, scope: !4183)
!4193 = !DILocation(line: 278, column: 8, scope: !4183)
!4194 = !DILocation(line: 279, column: 7, scope: !4195)
!4195 = distinct !DILexicalBlock(scope: !4183, file: !3, line: 279, column: 7)
!4196 = !DILocation(line: 279, column: 7, scope: !4183)
!4197 = !DILocation(line: 280, column: 12, scope: !4195)
!4198 = !DILocation(line: 280, column: 5, scope: !4195)
!4199 = !DILocation(line: 282, column: 48, scope: !4183)
!4200 = !DILocation(line: 282, column: 31, scope: !4183)
!4201 = !DILocation(line: 282, column: 29, scope: !4183)
!4202 = !DILocation(line: 282, column: 22, scope: !4183)
!4203 = !DILocation(line: 283, column: 13, scope: !4183)
!4204 = !DILocation(line: 284, column: 26, scope: !4183)
!4205 = !DILocation(line: 284, column: 38, scope: !4183)
!4206 = !DILocation(line: 284, column: 11, scope: !4183)
!4207 = !DILocation(line: 284, column: 9, scope: !4183)
!4208 = !DILocation(line: 285, column: 8, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4183, file: !3, line: 285, column: 7)
!4210 = !DILocation(line: 285, column: 7, scope: !4183)
!4211 = !DILocation(line: 286, column: 17, scope: !4209)
!4212 = !DILocation(line: 286, column: 15, scope: !4209)
!4213 = !DILocation(line: 286, column: 5, scope: !4209)
!4214 = !DILocation(line: 287, column: 15, scope: !4183)
!4215 = !DILocation(line: 287, column: 13, scope: !4183)
!4216 = !DILocation(line: 289, column: 22, scope: !4183)
!4217 = !DILocation(line: 289, column: 3, scope: !4183)
!4218 = !DILocation(line: 289, column: 20, scope: !4183)
!4219 = !DILocation(line: 290, column: 24, scope: !4183)
!4220 = !DILocation(line: 290, column: 3, scope: !4183)
!4221 = !DILocation(line: 290, column: 22, scope: !4183)
!4222 = !DILocation(line: 291, column: 16, scope: !4183)
!4223 = !DILocation(line: 291, column: 3, scope: !4183)
!4224 = !DILocation(line: 293, column: 10, scope: !4183)
!4225 = !DILocation(line: 293, column: 3, scope: !4183)
!4226 = !DILocation(line: 294, column: 1, scope: !4183)
!4227 = distinct !DISubprogram(name: "make_decl_one_only", scope: !3, file: !3, line: 5879, type: !4228, scopeLine: 5880, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4228 = !DISubroutineType(types: !4229)
!4229 = !{null, !2702, !2702}
!4230 = !DILocalVariable(name: "decl", arg: 1, scope: !4227, file: !3, line: 5879, type: !2702)
!4231 = !DILocation(line: 5879, column: 26, scope: !4227)
!4232 = !DILocalVariable(name: "comdat_group", arg: 2, scope: !4227, file: !3, line: 5879, type: !2702)
!4233 = !DILocation(line: 5879, column: 37, scope: !4227)
!4234 = !DILocation(line: 5881, column: 3, scope: !4227)
!4235 = !DILocation(line: 5884, column: 3, scope: !4227)
!4236 = !DILocation(line: 5884, column: 22, scope: !4227)
!4237 = !DILocation(line: 5889, column: 7, scope: !4238)
!4238 = distinct !DILexicalBlock(scope: !4239, file: !3, line: 5887, column: 5)
!4239 = distinct !DILexicalBlock(scope: !4227, file: !3, line: 5886, column: 7)
!4240 = !DILocation(line: 5891, column: 34, scope: !4238)
!4241 = !DILocation(line: 5891, column: 7, scope: !4238)
!4242 = !DILocation(line: 5891, column: 32, scope: !4238)
!4243 = !DILocation(line: 5901, column: 1, scope: !4227)
!4244 = distinct !DISubprogram(name: "emutls_finish", scope: !3, file: !3, line: 455, type: !4245, scopeLine: 456, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4245 = !DISubroutineType(types: !4246)
!4246 = !{null}
!4247 = !DILocation(line: 457, column: 22, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4244, file: !3, line: 457, column: 7)
!4249 = !DILocation(line: 457, column: 7, scope: !4248)
!4250 = !DILocation(line: 457, column: 7, scope: !4244)
!4251 = !DILocalVariable(name: "body", scope: !4252, file: !3, line: 459, type: !2702)
!4252 = distinct !DILexicalBlock(scope: !4248, file: !3, line: 458, column: 5)
!4253 = !DILocation(line: 459, column: 12, scope: !4252)
!4254 = !DILocation(line: 461, column: 11, scope: !4255)
!4255 = distinct !DILexicalBlock(scope: !4252, file: !3, line: 461, column: 11)
!4256 = !DILocation(line: 461, column: 23, scope: !4255)
!4257 = !DILocation(line: 461, column: 11, scope: !4252)
!4258 = !DILocation(line: 462, column: 2, scope: !4255)
!4259 = !DILocation(line: 464, column: 31, scope: !4252)
!4260 = !DILocation(line: 464, column: 61, scope: !4252)
!4261 = !DILocation(line: 464, column: 7, scope: !4252)
!4262 = !DILocation(line: 465, column: 11, scope: !4263)
!4263 = distinct !DILexicalBlock(scope: !4252, file: !3, line: 465, column: 11)
!4264 = !DILocation(line: 465, column: 16, scope: !4263)
!4265 = !DILocation(line: 465, column: 11, scope: !4252)
!4266 = !DILocation(line: 466, column: 2, scope: !4263)
!4267 = !DILocation(line: 468, column: 39, scope: !4252)
!4268 = !DILocation(line: 468, column: 7, scope: !4252)
!4269 = !DILocation(line: 469, column: 5, scope: !4252)
!4270 = !DILocation(line: 470, column: 1, scope: !4244)
!4271 = distinct !DISubprogram(name: "emutls_common_1", scope: !3, file: !3, line: 421, type: !4272, scopeLine: 422, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4272 = !DISubroutineType(types: !4273)
!4273 = !{!2798, !3304, !2691}
!4274 = !DILocalVariable(name: "loc", arg: 1, scope: !4271, file: !3, line: 421, type: !3304)
!4275 = !DILocation(line: 421, column: 25, scope: !4271)
!4276 = !DILocalVariable(name: "xstmts", arg: 2, scope: !4271, file: !3, line: 421, type: !2691)
!4277 = !DILocation(line: 421, column: 36, scope: !4271)
!4278 = !DILocalVariable(name: "h", scope: !4271, file: !3, line: 423, type: !2695)
!4279 = !DILocation(line: 423, column: 20, scope: !4271)
!4280 = !DILocation(line: 423, column: 46, scope: !4271)
!4281 = !DILocation(line: 423, column: 24, scope: !4271)
!4282 = !DILocalVariable(name: "args", scope: !4271, file: !3, line: 424, type: !2702)
!4283 = !DILocation(line: 424, column: 8, scope: !4271)
!4284 = !DILocalVariable(name: "x", scope: !4271, file: !3, line: 424, type: !2702)
!4285 = !DILocation(line: 424, column: 14, scope: !4271)
!4286 = !DILocalVariable(name: "pstmts", scope: !4271, file: !3, line: 424, type: !3499)
!4287 = !DILocation(line: 424, column: 18, scope: !4271)
!4288 = !DILocation(line: 424, column: 36, scope: !4271)
!4289 = !DILocation(line: 424, column: 27, scope: !4271)
!4290 = !DILocalVariable(name: "word_type_node", scope: !4271, file: !3, line: 425, type: !2702)
!4291 = !DILocation(line: 425, column: 8, scope: !4271)
!4292 = !DILocation(line: 427, column: 9, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4271, file: !3, line: 427, column: 7)
!4294 = !DILocation(line: 428, column: 7, scope: !4293)
!4295 = !DILocation(line: 428, column: 11, scope: !4293)
!4296 = !DILocation(line: 429, column: 4, scope: !4293)
!4297 = !DILocation(line: 429, column: 7, scope: !4293)
!4298 = !DILocation(line: 429, column: 38, scope: !4293)
!4299 = !DILocation(line: 429, column: 35, scope: !4293)
!4300 = !DILocation(line: 427, column: 7, scope: !4271)
!4301 = !DILocation(line: 430, column: 5, scope: !4293)
!4302 = !DILocation(line: 432, column: 37, scope: !4271)
!4303 = !DILocation(line: 432, column: 52, scope: !4271)
!4304 = !DILocation(line: 432, column: 20, scope: !4271)
!4305 = !DILocation(line: 432, column: 18, scope: !4271)
!4306 = !DILocation(line: 438, column: 7, scope: !4271)
!4307 = !DILocation(line: 438, column: 5, scope: !4271)
!4308 = !DILocation(line: 439, column: 10, scope: !4271)
!4309 = !DILocation(line: 439, column: 8, scope: !4271)
!4310 = !DILocation(line: 440, column: 22, scope: !4271)
!4311 = !DILocation(line: 440, column: 38, scope: !4271)
!4312 = !DILocation(line: 440, column: 7, scope: !4271)
!4313 = !DILocation(line: 440, column: 5, scope: !4271)
!4314 = !DILocation(line: 441, column: 10, scope: !4271)
!4315 = !DILocation(line: 441, column: 8, scope: !4271)
!4316 = !DILocation(line: 442, column: 7, scope: !4271)
!4317 = !DILocation(line: 442, column: 5, scope: !4271)
!4318 = !DILocation(line: 443, column: 10, scope: !4271)
!4319 = !DILocation(line: 443, column: 8, scope: !4271)
!4320 = !DILocation(line: 444, column: 7, scope: !4271)
!4321 = !DILocation(line: 444, column: 5, scope: !4271)
!4322 = !DILocation(line: 445, column: 10, scope: !4271)
!4323 = !DILocation(line: 445, column: 8, scope: !4271)
!4324 = !DILocation(line: 447, column: 7, scope: !4271)
!4325 = !DILocation(line: 447, column: 5, scope: !4271)
!4326 = !DILocation(line: 448, column: 51, scope: !4271)
!4327 = !DILocation(line: 448, column: 54, scope: !4271)
!4328 = !DILocation(line: 448, column: 7, scope: !4271)
!4329 = !DILocation(line: 448, column: 5, scope: !4271)
!4330 = !DILocation(line: 450, column: 29, scope: !4271)
!4331 = !DILocation(line: 450, column: 32, scope: !4271)
!4332 = !DILocation(line: 450, column: 3, scope: !4271)
!4333 = !DILocation(line: 451, column: 3, scope: !4271)
!4334 = !DILocation(line: 452, column: 1, scope: !4271)
!4335 = distinct !DISubprogram(name: "get_unnamed_section", scope: !3, file: !3, line: 521, type: !4336, scopeLine: 523, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4336 = !DISubroutineType(types: !4337)
!4337 = !{!3109, !7, !3129, !3132}
!4338 = !DILocalVariable(name: "flags", arg: 1, scope: !4335, file: !3, line: 521, type: !7)
!4339 = !DILocation(line: 521, column: 35, scope: !4335)
!4340 = !DILocalVariable(name: "callback", arg: 2, scope: !4335, file: !3, line: 521, type: !3129)
!4341 = !DILocation(line: 521, column: 49, scope: !4335)
!4342 = !DILocalVariable(name: "data", arg: 3, scope: !4335, file: !3, line: 522, type: !3132)
!4343 = !DILocation(line: 522, column: 20, scope: !4335)
!4344 = !DILocalVariable(name: "sect", scope: !4335, file: !3, line: 524, type: !3109)
!4345 = !DILocation(line: 524, column: 12, scope: !4335)
!4346 = !DILocation(line: 526, column: 10, scope: !4335)
!4347 = !DILocation(line: 526, column: 8, scope: !4335)
!4348 = !DILocation(line: 527, column: 32, scope: !4335)
!4349 = !DILocation(line: 527, column: 3, scope: !4335)
!4350 = !DILocation(line: 527, column: 9, scope: !4335)
!4351 = !DILocation(line: 527, column: 17, scope: !4335)
!4352 = !DILocation(line: 527, column: 24, scope: !4335)
!4353 = !DILocation(line: 527, column: 30, scope: !4335)
!4354 = !DILocation(line: 528, column: 28, scope: !4335)
!4355 = !DILocation(line: 528, column: 3, scope: !4335)
!4356 = !DILocation(line: 528, column: 9, scope: !4335)
!4357 = !DILocation(line: 528, column: 17, scope: !4335)
!4358 = !DILocation(line: 528, column: 26, scope: !4335)
!4359 = !DILocation(line: 529, column: 24, scope: !4335)
!4360 = !DILocation(line: 529, column: 3, scope: !4335)
!4361 = !DILocation(line: 529, column: 9, scope: !4335)
!4362 = !DILocation(line: 529, column: 17, scope: !4335)
!4363 = !DILocation(line: 529, column: 22, scope: !4335)
!4364 = !DILocation(line: 530, column: 24, scope: !4335)
!4365 = !DILocation(line: 530, column: 3, scope: !4335)
!4366 = !DILocation(line: 530, column: 9, scope: !4335)
!4367 = !DILocation(line: 530, column: 17, scope: !4335)
!4368 = !DILocation(line: 530, column: 22, scope: !4335)
!4369 = !DILocation(line: 532, column: 22, scope: !4335)
!4370 = !DILocation(line: 532, column: 20, scope: !4335)
!4371 = !DILocation(line: 533, column: 10, scope: !4335)
!4372 = !DILocation(line: 533, column: 3, scope: !4335)
!4373 = distinct !DISubprogram(name: "get_section", scope: !3, file: !3, line: 554, type: !4374, scopeLine: 555, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4374 = !DISubroutineType(types: !4375)
!4375 = !{!3109, !2692, !7, !2702}
!4376 = !DILocalVariable(name: "name", arg: 1, scope: !4373, file: !3, line: 554, type: !2692)
!4377 = !DILocation(line: 554, column: 26, scope: !4373)
!4378 = !DILocalVariable(name: "flags", arg: 2, scope: !4373, file: !3, line: 554, type: !7)
!4379 = !DILocation(line: 554, column: 45, scope: !4373)
!4380 = !DILocalVariable(name: "decl", arg: 3, scope: !4373, file: !3, line: 554, type: !2702)
!4381 = !DILocation(line: 554, column: 57, scope: !4373)
!4382 = !DILocalVariable(name: "sect", scope: !4373, file: !3, line: 556, type: !3109)
!4383 = !DILocation(line: 556, column: 12, scope: !4373)
!4384 = !DILocalVariable(name: "slot", scope: !4373, file: !3, line: 556, type: !3783)
!4385 = !DILocation(line: 556, column: 20, scope: !4373)
!4386 = !DILocation(line: 559, column: 31, scope: !4373)
!4387 = !DILocation(line: 559, column: 45, scope: !4373)
!4388 = !DILocation(line: 560, column: 28, scope: !4373)
!4389 = !DILocation(line: 560, column: 10, scope: !4373)
!4390 = !DILocation(line: 559, column: 5, scope: !4373)
!4391 = !DILocation(line: 558, column: 10, scope: !4373)
!4392 = !DILocation(line: 558, column: 8, scope: !4373)
!4393 = !DILocation(line: 561, column: 9, scope: !4373)
!4394 = !DILocation(line: 562, column: 8, scope: !4395)
!4395 = distinct !DILexicalBlock(scope: !4373, file: !3, line: 562, column: 7)
!4396 = !DILocation(line: 562, column: 7, scope: !4395)
!4397 = !DILocation(line: 562, column: 13, scope: !4395)
!4398 = !DILocation(line: 562, column: 7, scope: !4373)
!4399 = !DILocation(line: 564, column: 14, scope: !4400)
!4400 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 563, column: 5)
!4401 = !DILocation(line: 564, column: 12, scope: !4400)
!4402 = !DILocation(line: 565, column: 34, scope: !4400)
!4403 = !DILocation(line: 565, column: 7, scope: !4400)
!4404 = !DILocation(line: 565, column: 13, scope: !4400)
!4405 = !DILocation(line: 565, column: 19, scope: !4400)
!4406 = !DILocation(line: 565, column: 26, scope: !4400)
!4407 = !DILocation(line: 565, column: 32, scope: !4400)
!4408 = !DILocation(line: 566, column: 26, scope: !4400)
!4409 = !DILocation(line: 566, column: 7, scope: !4400)
!4410 = !DILocation(line: 566, column: 13, scope: !4400)
!4411 = !DILocation(line: 566, column: 19, scope: !4400)
!4412 = !DILocation(line: 566, column: 24, scope: !4400)
!4413 = !DILocation(line: 567, column: 26, scope: !4400)
!4414 = !DILocation(line: 567, column: 7, scope: !4400)
!4415 = !DILocation(line: 567, column: 13, scope: !4400)
!4416 = !DILocation(line: 567, column: 19, scope: !4400)
!4417 = !DILocation(line: 567, column: 24, scope: !4400)
!4418 = !DILocation(line: 568, column: 15, scope: !4400)
!4419 = !DILocation(line: 568, column: 8, scope: !4400)
!4420 = !DILocation(line: 568, column: 13, scope: !4400)
!4421 = !DILocation(line: 569, column: 5, scope: !4400)
!4422 = !DILocation(line: 572, column: 15, scope: !4423)
!4423 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 571, column: 5)
!4424 = !DILocation(line: 572, column: 14, scope: !4423)
!4425 = !DILocation(line: 572, column: 12, scope: !4423)
!4426 = !DILocation(line: 573, column: 12, scope: !4427)
!4427 = distinct !DILexicalBlock(scope: !4423, file: !3, line: 573, column: 11)
!4428 = !DILocation(line: 573, column: 18, scope: !4427)
!4429 = !DILocation(line: 573, column: 25, scope: !4427)
!4430 = !DILocation(line: 573, column: 31, scope: !4427)
!4431 = !DILocation(line: 573, column: 55, scope: !4427)
!4432 = !DILocation(line: 573, column: 52, scope: !4427)
!4433 = !DILocation(line: 574, column: 4, scope: !4427)
!4434 = !DILocation(line: 574, column: 9, scope: !4427)
!4435 = !DILocation(line: 574, column: 15, scope: !4427)
!4436 = !DILocation(line: 574, column: 22, scope: !4427)
!4437 = !DILocation(line: 574, column: 30, scope: !4427)
!4438 = !DILocation(line: 574, column: 28, scope: !4427)
!4439 = !DILocation(line: 574, column: 37, scope: !4427)
!4440 = !DILocation(line: 574, column: 57, scope: !4427)
!4441 = !DILocation(line: 573, column: 11, scope: !4423)
!4442 = !DILocation(line: 577, column: 8, scope: !4443)
!4443 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 577, column: 8)
!4444 = distinct !DILexicalBlock(scope: !4427, file: !3, line: 575, column: 2)
!4445 = !DILocation(line: 577, column: 13, scope: !4443)
!4446 = !DILocation(line: 577, column: 8, scope: !4444)
!4447 = !DILocation(line: 578, column: 13, scope: !4443)
!4448 = !DILocation(line: 578, column: 19, scope: !4443)
!4449 = !DILocation(line: 578, column: 25, scope: !4443)
!4450 = !DILocation(line: 578, column: 11, scope: !4443)
!4451 = !DILocation(line: 578, column: 6, scope: !4443)
!4452 = !DILocation(line: 579, column: 4, scope: !4444)
!4453 = !DILocation(line: 580, column: 49, scope: !4444)
!4454 = !DILocation(line: 580, column: 4, scope: !4444)
!4455 = !DILocation(line: 581, column: 2, scope: !4444)
!4456 = !DILocation(line: 583, column: 10, scope: !4373)
!4457 = !DILocation(line: 583, column: 3, scope: !4373)
!4458 = distinct !DISubprogram(name: "unlikely_text_section", scope: !3, file: !3, line: 679, type: !4459, scopeLine: 680, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4459 = !DISubroutineType(types: !4460)
!4460 = !{!3109}
!4461 = !DILocation(line: 681, column: 7, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !4458, file: !3, line: 681, column: 7)
!4463 = !DILocation(line: 681, column: 7, scope: !4458)
!4464 = !DILocation(line: 683, column: 30, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !4466, file: !3, line: 683, column: 11)
!4466 = distinct !DILexicalBlock(scope: !4462, file: !3, line: 682, column: 5)
!4467 = !DILocation(line: 683, column: 12, scope: !4465)
!4468 = !DILocation(line: 683, column: 11, scope: !4466)
!4469 = !DILocation(line: 684, column: 2, scope: !4465)
!4470 = !DILocation(line: 686, column: 57, scope: !4466)
!4471 = !DILocation(line: 686, column: 14, scope: !4466)
!4472 = !DILocation(line: 686, column: 7, scope: !4466)
!4473 = !DILocation(line: 689, column: 12, scope: !4462)
!4474 = !DILocation(line: 689, column: 5, scope: !4462)
!4475 = !DILocation(line: 690, column: 1, scope: !4458)
!4476 = distinct !DISubprogram(name: "initialize_cold_section_name", scope: !3, file: !3, line: 651, type: !4245, scopeLine: 652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4477 = !DILocalVariable(name: "stripped_name", scope: !4476, file: !3, line: 653, type: !2692)
!4478 = !DILocation(line: 653, column: 15, scope: !4476)
!4479 = !DILocalVariable(name: "name", scope: !4476, file: !3, line: 654, type: !2964)
!4480 = !DILocation(line: 654, column: 9, scope: !4476)
!4481 = !DILocalVariable(name: "buffer", scope: !4476, file: !3, line: 654, type: !2964)
!4482 = !DILocation(line: 654, column: 16, scope: !4476)
!4483 = !DILocalVariable(name: "dsn", scope: !4476, file: !3, line: 655, type: !2702)
!4484 = !DILocation(line: 655, column: 8, scope: !4476)
!4485 = !DILocation(line: 657, column: 3, scope: !4476)
!4486 = !DILocation(line: 658, column: 25, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4476, file: !3, line: 658, column: 7)
!4488 = !DILocation(line: 658, column: 7, scope: !4487)
!4489 = !DILocation(line: 658, column: 7, scope: !4476)
!4490 = !DILocation(line: 659, column: 5, scope: !4487)
!4491 = !DILocation(line: 661, column: 9, scope: !4476)
!4492 = !DILocation(line: 661, column: 7, scope: !4476)
!4493 = !DILocation(line: 662, column: 7, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4476, file: !3, line: 662, column: 7)
!4495 = !DILocation(line: 662, column: 30, scope: !4494)
!4496 = !DILocation(line: 662, column: 33, scope: !4494)
!4497 = !DILocation(line: 662, column: 7, scope: !4476)
!4498 = !DILocation(line: 664, column: 23, scope: !4499)
!4499 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 663, column: 5)
!4500 = !DILocation(line: 664, column: 12, scope: !4499)
!4501 = !DILocation(line: 665, column: 15, scope: !4499)
!4502 = !DILocation(line: 665, column: 21, scope: !4499)
!4503 = !DILocation(line: 665, column: 7, scope: !4499)
!4504 = !DILocation(line: 665, column: 48, scope: !4499)
!4505 = !DILocation(line: 665, column: 73, scope: !4499)
!4506 = !DILocation(line: 667, column: 31, scope: !4499)
!4507 = !DILocation(line: 667, column: 52, scope: !4499)
!4508 = !DILocation(line: 667, column: 23, scope: !4499)
!4509 = !DILocation(line: 667, column: 21, scope: !4499)
!4510 = !DILocation(line: 669, column: 16, scope: !4499)
!4511 = !DILocation(line: 669, column: 14, scope: !4499)
!4512 = !DILocation(line: 670, column: 54, scope: !4499)
!4513 = !DILocation(line: 670, column: 52, scope: !4499)
!4514 = !DILocation(line: 671, column: 5, scope: !4499)
!4515 = !DILocation(line: 673, column: 50, scope: !4494)
!4516 = !DILocation(line: 674, column: 1, scope: !4476)
!4517 = distinct !DISubprogram(name: "get_named_section", scope: !3, file: !3, line: 721, type: !4518, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4518 = !DISubroutineType(types: !4519)
!4519 = !{!3109, !2702, !2692, !2798}
!4520 = !DILocalVariable(name: "decl", arg: 1, scope: !4517, file: !3, line: 721, type: !2702)
!4521 = !DILocation(line: 721, column: 25, scope: !4517)
!4522 = !DILocalVariable(name: "name", arg: 2, scope: !4517, file: !3, line: 721, type: !2692)
!4523 = !DILocation(line: 721, column: 43, scope: !4517)
!4524 = !DILocalVariable(name: "reloc", arg: 3, scope: !4517, file: !3, line: 721, type: !2798)
!4525 = !DILocation(line: 721, column: 53, scope: !4517)
!4526 = !DILocalVariable(name: "flags", scope: !4517, file: !3, line: 723, type: !7)
!4527 = !DILocation(line: 723, column: 16, scope: !4517)
!4528 = !DILocation(line: 725, column: 3, scope: !4517)
!4529 = !DILocation(line: 726, column: 7, scope: !4530)
!4530 = distinct !DILexicalBlock(scope: !4517, file: !3, line: 726, column: 7)
!4531 = !DILocation(line: 726, column: 12, scope: !4530)
!4532 = !DILocation(line: 726, column: 7, scope: !4517)
!4533 = !DILocation(line: 727, column: 12, scope: !4530)
!4534 = !DILocation(line: 727, column: 10, scope: !4530)
!4535 = !DILocation(line: 727, column: 5, scope: !4530)
!4536 = !DILocation(line: 729, column: 19, scope: !4517)
!4537 = !DILocation(line: 729, column: 39, scope: !4517)
!4538 = !DILocation(line: 729, column: 45, scope: !4517)
!4539 = !DILocation(line: 729, column: 51, scope: !4517)
!4540 = !DILocation(line: 729, column: 11, scope: !4517)
!4541 = !DILocation(line: 729, column: 9, scope: !4517)
!4542 = !DILocation(line: 731, column: 23, scope: !4517)
!4543 = !DILocation(line: 731, column: 29, scope: !4517)
!4544 = !DILocation(line: 731, column: 36, scope: !4517)
!4545 = !DILocation(line: 731, column: 10, scope: !4517)
!4546 = !DILocation(line: 731, column: 3, scope: !4517)
!4547 = distinct !DISubprogram(name: "unlikely_text_section_p", scope: !3, file: !3, line: 698, type: !4548, scopeLine: 699, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4548 = !DISubroutineType(types: !4549)
!4549 = !{!2820, !3109}
!4550 = !DILocalVariable(name: "sect", arg: 1, scope: !4547, file: !3, line: 698, type: !3109)
!4551 = !DILocation(line: 698, column: 35, scope: !4547)
!4552 = !DILocalVariable(name: "name", scope: !4547, file: !3, line: 700, type: !2692)
!4553 = !DILocation(line: 700, column: 15, scope: !4547)
!4554 = !DILocation(line: 702, column: 7, scope: !4555)
!4555 = distinct !DILexicalBlock(scope: !4547, file: !3, line: 702, column: 7)
!4556 = !DILocation(line: 702, column: 7, scope: !4547)
!4557 = !DILocation(line: 703, column: 30, scope: !4555)
!4558 = !DILocation(line: 703, column: 10, scope: !4555)
!4559 = !DILocation(line: 703, column: 5, scope: !4555)
!4560 = !DILocation(line: 705, column: 10, scope: !4555)
!4561 = !DILocation(line: 707, column: 11, scope: !4547)
!4562 = !DILocation(line: 708, column: 4, scope: !4547)
!4563 = !DILocation(line: 708, column: 7, scope: !4547)
!4564 = !DILocation(line: 709, column: 4, scope: !4547)
!4565 = !DILocation(line: 709, column: 7, scope: !4547)
!4566 = !DILocation(line: 709, column: 28, scope: !4547)
!4567 = !DILocation(line: 710, column: 4, scope: !4547)
!4568 = !DILocation(line: 710, column: 15, scope: !4547)
!4569 = !DILocation(line: 710, column: 21, scope: !4547)
!4570 = !DILocation(line: 710, column: 27, scope: !4547)
!4571 = !DILocation(line: 710, column: 33, scope: !4547)
!4572 = !DILocation(line: 710, column: 7, scope: !4547)
!4573 = !DILocation(line: 710, column: 39, scope: !4547)
!4574 = !DILocation(line: 0, scope: !4547)
!4575 = !DILocation(line: 707, column: 10, scope: !4547)
!4576 = !DILocation(line: 707, column: 3, scope: !4547)
!4577 = distinct !DISubprogram(name: "resolve_unique_section", scope: !3, file: !3, line: 737, type: !4578, scopeLine: 739, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4578 = !DISubroutineType(types: !4579)
!4579 = !{null, !2702, !2798, !2798}
!4580 = !DILocalVariable(name: "decl", arg: 1, scope: !4577, file: !3, line: 737, type: !2702)
!4581 = !DILocation(line: 737, column: 30, scope: !4577)
!4582 = !DILocalVariable(name: "reloc", arg: 2, scope: !4577, file: !3, line: 737, type: !2798)
!4583 = !DILocation(line: 737, column: 40, scope: !4577)
!4584 = !DILocalVariable(name: "flag_function_or_data_sections", arg: 3, scope: !4577, file: !3, line: 738, type: !2798)
!4585 = !DILocation(line: 738, column: 8, scope: !4577)
!4586 = !DILocation(line: 740, column: 7, scope: !4587)
!4587 = distinct !DILexicalBlock(scope: !4577, file: !3, line: 740, column: 7)
!4588 = !DILocation(line: 740, column: 32, scope: !4587)
!4589 = !DILocation(line: 741, column: 7, scope: !4587)
!4590 = !DILocation(line: 741, column: 18, scope: !4587)
!4591 = !DILocation(line: 741, column: 10, scope: !4587)
!4592 = !DILocation(line: 742, column: 7, scope: !4587)
!4593 = !DILocation(line: 742, column: 11, scope: !4587)
!4594 = !DILocation(line: 743, column: 4, scope: !4587)
!4595 = !DILocation(line: 743, column: 7, scope: !4587)
!4596 = !DILocation(line: 740, column: 7, scope: !4577)
!4597 = !DILocation(line: 744, column: 21, scope: !4587)
!4598 = !DILocation(line: 744, column: 37, scope: !4587)
!4599 = !DILocation(line: 744, column: 43, scope: !4587)
!4600 = !DILocation(line: 744, column: 5, scope: !4587)
!4601 = !DILocation(line: 745, column: 1, scope: !4577)
!4602 = distinct !DISubprogram(name: "function_section", scope: !3, file: !3, line: 827, type: !4603, scopeLine: 828, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4603 = !DISubroutineType(types: !4604)
!4604 = !{!3109, !2702}
!4605 = !DILocalVariable(name: "decl", arg: 1, scope: !4602, file: !3, line: 827, type: !2702)
!4606 = !DILocation(line: 827, column: 24, scope: !4602)
!4607 = !DILocalVariable(name: "reloc", scope: !4602, file: !3, line: 829, type: !2798)
!4608 = !DILocation(line: 829, column: 7, scope: !4602)
!4609 = !DILocation(line: 831, column: 7, scope: !4610)
!4610 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 831, column: 7)
!4611 = !DILocation(line: 831, column: 7, scope: !4602)
!4612 = !DILocation(line: 832, column: 11, scope: !4610)
!4613 = !DILocation(line: 832, column: 5, scope: !4610)
!4614 = !DILocation(line: 842, column: 10, scope: !4602)
!4615 = !DILocation(line: 842, column: 18, scope: !4602)
!4616 = !DILocation(line: 842, column: 67, scope: !4602)
!4617 = !DILocation(line: 842, column: 45, scope: !4602)
!4618 = !DILocation(line: 842, column: 3, scope: !4602)
!4619 = distinct !DISubprogram(name: "hot_function_section", scope: !3, file: !3, line: 810, type: !4603, scopeLine: 811, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4620 = !DILocalVariable(name: "decl", arg: 1, scope: !4619, file: !3, line: 810, type: !2702)
!4621 = !DILocation(line: 810, column: 28, scope: !4619)
!4622 = !DILocation(line: 812, column: 7, scope: !4623)
!4623 = distinct !DILexicalBlock(scope: !4619, file: !3, line: 812, column: 7)
!4624 = !DILocation(line: 812, column: 12, scope: !4623)
!4625 = !DILocation(line: 813, column: 7, scope: !4623)
!4626 = !DILocation(line: 813, column: 10, scope: !4623)
!4627 = !DILocation(line: 813, column: 35, scope: !4623)
!4628 = !DILocation(line: 814, column: 7, scope: !4623)
!4629 = !DILocation(line: 814, column: 18, scope: !4623)
!4630 = !DILocation(line: 814, column: 10, scope: !4623)
!4631 = !DILocation(line: 812, column: 7, scope: !4619)
!4632 = !DILocation(line: 815, column: 31, scope: !4623)
!4633 = !DILocation(line: 815, column: 12, scope: !4623)
!4634 = !DILocation(line: 815, column: 5, scope: !4623)
!4635 = !DILocation(line: 817, column: 12, scope: !4623)
!4636 = !DILocation(line: 817, column: 5, scope: !4623)
!4637 = !DILocation(line: 818, column: 1, scope: !4619)
!4638 = distinct !DISubprogram(name: "current_function_section", scope: !3, file: !3, line: 847, type: !4459, scopeLine: 848, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4639 = !DILocation(line: 860, column: 11, scope: !4638)
!4640 = !DILocation(line: 861, column: 6, scope: !4638)
!4641 = !DILocation(line: 862, column: 28, scope: !4638)
!4642 = !DILocation(line: 862, column: 6, scope: !4638)
!4643 = !DILocation(line: 860, column: 3, scope: !4638)
!4644 = distinct !DISubprogram(name: "default_function_rodata_section", scope: !3, file: !3, line: 869, type: !4603, scopeLine: 870, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4645 = !DILocalVariable(name: "decl", arg: 1, scope: !4644, file: !3, line: 869, type: !2702)
!4646 = !DILocation(line: 869, column: 39, scope: !4644)
!4647 = !DILocation(line: 871, column: 7, scope: !4648)
!4648 = distinct !DILexicalBlock(scope: !4644, file: !3, line: 871, column: 7)
!4649 = !DILocation(line: 871, column: 12, scope: !4648)
!4650 = !DILocation(line: 871, column: 25, scope: !4648)
!4651 = !DILocation(line: 871, column: 28, scope: !4648)
!4652 = !DILocation(line: 871, column: 7, scope: !4644)
!4653 = !DILocalVariable(name: "name", scope: !4654, file: !3, line: 873, type: !2692)
!4654 = distinct !DILexicalBlock(scope: !4648, file: !3, line: 872, column: 5)
!4655 = !DILocation(line: 873, column: 19, scope: !4654)
!4656 = !DILocation(line: 873, column: 26, scope: !4654)
!4657 = !DILocation(line: 875, column: 11, scope: !4658)
!4658 = distinct !DILexicalBlock(scope: !4654, file: !3, line: 875, column: 11)
!4659 = !DILocation(line: 875, column: 11, scope: !4654)
!4660 = !DILocalVariable(name: "dot", scope: !4661, file: !3, line: 877, type: !2692)
!4661 = distinct !DILexicalBlock(scope: !4658, file: !3, line: 876, column: 9)
!4662 = !DILocation(line: 877, column: 16, scope: !4661)
!4663 = !DILocalVariable(name: "len", scope: !4661, file: !3, line: 878, type: !3306)
!4664 = !DILocation(line: 878, column: 11, scope: !4661)
!4665 = !DILocalVariable(name: "rname", scope: !4661, file: !3, line: 879, type: !2964)
!4666 = !DILocation(line: 879, column: 10, scope: !4661)
!4667 = !DILocation(line: 881, column: 18, scope: !4661)
!4668 = !DILocation(line: 881, column: 23, scope: !4661)
!4669 = !DILocation(line: 881, column: 10, scope: !4661)
!4670 = !DILocation(line: 881, column: 8, scope: !4661)
!4671 = !DILocation(line: 882, column: 9, scope: !4672)
!4672 = distinct !DILexicalBlock(scope: !4661, file: !3, line: 882, column: 8)
!4673 = !DILocation(line: 882, column: 8, scope: !4661)
!4674 = !DILocation(line: 883, column: 12, scope: !4672)
!4675 = !DILocation(line: 883, column: 10, scope: !4672)
!4676 = !DILocation(line: 883, column: 6, scope: !4672)
!4677 = !DILocation(line: 884, column: 18, scope: !4661)
!4678 = !DILocation(line: 884, column: 10, scope: !4661)
!4679 = !DILocation(line: 884, column: 23, scope: !4661)
!4680 = !DILocation(line: 884, column: 8, scope: !4661)
!4681 = !DILocation(line: 885, column: 21, scope: !4661)
!4682 = !DILocation(line: 885, column: 10, scope: !4661)
!4683 = !DILocation(line: 887, column: 12, scope: !4661)
!4684 = !DILocation(line: 887, column: 4, scope: !4661)
!4685 = !DILocation(line: 888, column: 12, scope: !4661)
!4686 = !DILocation(line: 888, column: 19, scope: !4661)
!4687 = !DILocation(line: 888, column: 4, scope: !4661)
!4688 = !DILocation(line: 889, column: 24, scope: !4661)
!4689 = !DILocation(line: 889, column: 49, scope: !4661)
!4690 = !DILocation(line: 889, column: 11, scope: !4661)
!4691 = !DILocation(line: 889, column: 4, scope: !4661)
!4692 = !DILocation(line: 892, column: 16, scope: !4693)
!4693 = distinct !DILexicalBlock(scope: !4658, file: !3, line: 892, column: 16)
!4694 = !DILocation(line: 893, column: 9, scope: !4693)
!4695 = !DILocation(line: 893, column: 21, scope: !4693)
!4696 = !DILocation(line: 893, column: 12, scope: !4693)
!4697 = !DILocation(line: 893, column: 51, scope: !4693)
!4698 = !DILocation(line: 892, column: 16, scope: !4658)
!4699 = !DILocalVariable(name: "len", scope: !4700, file: !3, line: 895, type: !3306)
!4700 = distinct !DILexicalBlock(scope: !4693, file: !3, line: 894, column: 2)
!4701 = !DILocation(line: 895, column: 11, scope: !4700)
!4702 = !DILocation(line: 895, column: 25, scope: !4700)
!4703 = !DILocation(line: 895, column: 17, scope: !4700)
!4704 = !DILocation(line: 895, column: 31, scope: !4700)
!4705 = !DILocalVariable(name: "rname", scope: !4700, file: !3, line: 896, type: !2964)
!4706 = !DILocation(line: 896, column: 10, scope: !4700)
!4707 = !DILocation(line: 896, column: 27, scope: !4700)
!4708 = !DILocation(line: 898, column: 12, scope: !4700)
!4709 = !DILocation(line: 898, column: 19, scope: !4700)
!4710 = !DILocation(line: 898, column: 25, scope: !4700)
!4711 = !DILocation(line: 898, column: 4, scope: !4700)
!4712 = !DILocation(line: 899, column: 4, scope: !4700)
!4713 = !DILocation(line: 899, column: 14, scope: !4700)
!4714 = !DILocation(line: 900, column: 24, scope: !4700)
!4715 = !DILocation(line: 900, column: 49, scope: !4700)
!4716 = !DILocation(line: 900, column: 11, scope: !4700)
!4717 = !DILocation(line: 900, column: 4, scope: !4700)
!4718 = !DILocation(line: 903, column: 16, scope: !4719)
!4719 = distinct !DILexicalBlock(scope: !4693, file: !3, line: 903, column: 16)
!4720 = !DILocation(line: 903, column: 39, scope: !4719)
!4721 = !DILocation(line: 903, column: 42, scope: !4719)
!4722 = !DILocation(line: 904, column: 9, scope: !4719)
!4723 = !DILocation(line: 904, column: 21, scope: !4719)
!4724 = !DILocation(line: 904, column: 12, scope: !4719)
!4725 = !DILocation(line: 904, column: 40, scope: !4719)
!4726 = !DILocation(line: 903, column: 16, scope: !4693)
!4727 = !DILocalVariable(name: "len", scope: !4728, file: !3, line: 906, type: !3306)
!4728 = distinct !DILexicalBlock(scope: !4719, file: !3, line: 905, column: 2)
!4729 = !DILocation(line: 906, column: 11, scope: !4728)
!4730 = !DILocation(line: 906, column: 25, scope: !4728)
!4731 = !DILocation(line: 906, column: 17, scope: !4728)
!4732 = !DILocation(line: 906, column: 31, scope: !4728)
!4733 = !DILocalVariable(name: "rname", scope: !4728, file: !3, line: 907, type: !2964)
!4734 = !DILocation(line: 907, column: 10, scope: !4728)
!4735 = !DILocation(line: 907, column: 27, scope: !4728)
!4736 = !DILocation(line: 909, column: 12, scope: !4728)
!4737 = !DILocation(line: 909, column: 4, scope: !4728)
!4738 = !DILocation(line: 910, column: 12, scope: !4728)
!4739 = !DILocation(line: 910, column: 18, scope: !4728)
!4740 = !DILocation(line: 910, column: 23, scope: !4728)
!4741 = !DILocation(line: 910, column: 28, scope: !4728)
!4742 = !DILocation(line: 910, column: 33, scope: !4728)
!4743 = !DILocation(line: 910, column: 37, scope: !4728)
!4744 = !DILocation(line: 910, column: 4, scope: !4728)
!4745 = !DILocation(line: 911, column: 24, scope: !4728)
!4746 = !DILocation(line: 911, column: 34, scope: !4728)
!4747 = !DILocation(line: 911, column: 11, scope: !4728)
!4748 = !DILocation(line: 911, column: 4, scope: !4728)
!4749 = !DILocation(line: 913, column: 5, scope: !4654)
!4750 = !DILocation(line: 915, column: 10, scope: !4644)
!4751 = !DILocation(line: 915, column: 3, scope: !4644)
!4752 = !DILocation(line: 916, column: 1, scope: !4644)
!4753 = distinct !DISubprogram(name: "default_no_function_rodata_section", scope: !3, file: !3, line: 923, type: !4603, scopeLine: 924, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4754 = !DILocalVariable(name: "decl", arg: 1, scope: !4753, file: !3, line: 923, type: !2702)
!4755 = !DILocation(line: 923, column: 42, scope: !4753)
!4756 = !DILocation(line: 925, column: 10, scope: !4753)
!4757 = !DILocation(line: 925, column: 3, scope: !4753)
!4758 = distinct !DISubprogram(name: "mergeable_constant_section", scope: !3, file: !3, line: 987, type: !4759, scopeLine: 990, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4759 = !DISubroutineType(types: !4760)
!4760 = !{!3109, !5, !2755, !7}
!4761 = !DILocalVariable(name: "mode", arg: 1, scope: !4758, file: !3, line: 987, type: !5)
!4762 = !DILocation(line: 987, column: 47, scope: !4758)
!4763 = !DILocalVariable(name: "align", arg: 2, scope: !4758, file: !3, line: 988, type: !2755)
!4764 = !DILocation(line: 988, column: 31, scope: !4758)
!4765 = !DILocalVariable(name: "flags", arg: 3, scope: !4758, file: !3, line: 989, type: !7)
!4766 = !DILocation(line: 989, column: 21, scope: !4758)
!4767 = !DILocalVariable(name: "modesize", scope: !4758, file: !3, line: 991, type: !7)
!4768 = !DILocation(line: 991, column: 16, scope: !4758)
!4769 = !DILocation(line: 991, column: 27, scope: !4758)
!4770 = !DILocation(line: 993, column: 29, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4758, file: !3, line: 993, column: 7)
!4772 = !DILocation(line: 994, column: 7, scope: !4771)
!4773 = !DILocation(line: 994, column: 10, scope: !4771)
!4774 = !DILocation(line: 994, column: 15, scope: !4771)
!4775 = !DILocation(line: 995, column: 7, scope: !4771)
!4776 = !DILocation(line: 995, column: 10, scope: !4771)
!4777 = !DILocation(line: 995, column: 15, scope: !4771)
!4778 = !DILocation(line: 996, column: 7, scope: !4771)
!4779 = !DILocation(line: 996, column: 10, scope: !4771)
!4780 = !DILocation(line: 996, column: 22, scope: !4771)
!4781 = !DILocation(line: 996, column: 19, scope: !4771)
!4782 = !DILocation(line: 997, column: 7, scope: !4771)
!4783 = !DILocation(line: 997, column: 10, scope: !4771)
!4784 = !DILocation(line: 997, column: 16, scope: !4771)
!4785 = !DILocation(line: 998, column: 7, scope: !4771)
!4786 = !DILocation(line: 998, column: 10, scope: !4771)
!4787 = !DILocation(line: 998, column: 16, scope: !4771)
!4788 = !DILocation(line: 999, column: 7, scope: !4771)
!4789 = !DILocation(line: 999, column: 11, scope: !4771)
!4790 = !DILocation(line: 999, column: 20, scope: !4771)
!4791 = !DILocation(line: 999, column: 26, scope: !4771)
!4792 = !DILocation(line: 999, column: 17, scope: !4771)
!4793 = !DILocation(line: 999, column: 32, scope: !4771)
!4794 = !DILocation(line: 993, column: 7, scope: !4758)
!4795 = !DILocalVariable(name: "name", scope: !4796, file: !3, line: 1001, type: !4797)
!4796 = distinct !DILexicalBlock(scope: !4771, file: !3, line: 1000, column: 5)
!4797 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 192, elements: !3846)
!4798 = !DILocation(line: 1001, column: 12, scope: !4796)
!4799 = !DILocation(line: 1003, column: 16, scope: !4796)
!4800 = !DILocation(line: 1003, column: 46, scope: !4796)
!4801 = !DILocation(line: 1003, column: 52, scope: !4796)
!4802 = !DILocation(line: 1003, column: 39, scope: !4796)
!4803 = !DILocation(line: 1003, column: 7, scope: !4796)
!4804 = !DILocation(line: 1004, column: 17, scope: !4796)
!4805 = !DILocation(line: 1004, column: 23, scope: !4796)
!4806 = !DILocation(line: 1004, column: 28, scope: !4796)
!4807 = !DILocation(line: 1004, column: 13, scope: !4796)
!4808 = !DILocation(line: 1005, column: 27, scope: !4796)
!4809 = !DILocation(line: 1005, column: 33, scope: !4796)
!4810 = !DILocation(line: 1005, column: 14, scope: !4796)
!4811 = !DILocation(line: 1005, column: 7, scope: !4796)
!4812 = !DILocation(line: 1007, column: 10, scope: !4758)
!4813 = !DILocation(line: 1007, column: 3, scope: !4758)
!4814 = !DILocation(line: 1008, column: 1, scope: !4758)
!4815 = distinct !DISubprogram(name: "set_user_assembler_name", scope: !3, file: !3, line: 1028, type: !4816, scopeLine: 1029, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4816 = !DISubroutineType(types: !4817)
!4817 = !{null, !2702, !2692}
!4818 = !DILocalVariable(name: "decl", arg: 1, scope: !4815, file: !3, line: 1028, type: !2702)
!4819 = !DILocation(line: 1028, column: 31, scope: !4815)
!4820 = !DILocalVariable(name: "name", arg: 2, scope: !4815, file: !3, line: 1028, type: !2692)
!4821 = !DILocation(line: 1028, column: 49, scope: !4815)
!4822 = !DILocalVariable(name: "starred", scope: !4815, file: !3, line: 1030, type: !2964)
!4823 = !DILocation(line: 1030, column: 9, scope: !4815)
!4824 = !DILocation(line: 1030, column: 28, scope: !4815)
!4825 = !DILocation(line: 1031, column: 3, scope: !4815)
!4826 = !DILocation(line: 1031, column: 14, scope: !4815)
!4827 = !DILocation(line: 1032, column: 11, scope: !4815)
!4828 = !DILocation(line: 1032, column: 19, scope: !4815)
!4829 = !DILocation(line: 1032, column: 24, scope: !4815)
!4830 = !DILocation(line: 1032, column: 3, scope: !4815)
!4831 = !DILocation(line: 1033, column: 31, scope: !4815)
!4832 = !DILocation(line: 1033, column: 53, scope: !4815)
!4833 = !DILocation(line: 1033, column: 37, scope: !4815)
!4834 = !DILocation(line: 1033, column: 3, scope: !4815)
!4835 = !DILocation(line: 1034, column: 3, scope: !4815)
!4836 = !DILocation(line: 1035, column: 1, scope: !4815)
!4837 = !DILocalVariable(name: "asmspec", arg: 1, scope: !3834, file: !3, line: 1046, type: !2692)
!4838 = !DILocation(line: 1046, column: 30, scope: !3834)
!4839 = !DILocation(line: 1048, column: 7, scope: !4840)
!4840 = distinct !DILexicalBlock(scope: !3834, file: !3, line: 1048, column: 7)
!4841 = !DILocation(line: 1048, column: 15, scope: !4840)
!4842 = !DILocation(line: 1048, column: 7, scope: !3834)
!4843 = !DILocalVariable(name: "i", scope: !4844, file: !3, line: 1050, type: !2798)
!4844 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 1049, column: 5)
!4845 = !DILocation(line: 1050, column: 11, scope: !4844)
!4846 = !DILocation(line: 1053, column: 33, scope: !4844)
!4847 = !DILocation(line: 1053, column: 17, scope: !4844)
!4848 = !DILocation(line: 1053, column: 15, scope: !4844)
!4849 = !DILocation(line: 1056, column: 24, scope: !4850)
!4850 = distinct !DILexicalBlock(scope: !4844, file: !3, line: 1056, column: 7)
!4851 = !DILocation(line: 1056, column: 16, scope: !4850)
!4852 = !DILocation(line: 1056, column: 33, scope: !4850)
!4853 = !DILocation(line: 1056, column: 14, scope: !4850)
!4854 = !DILocation(line: 1056, column: 12, scope: !4850)
!4855 = !DILocation(line: 1056, column: 38, scope: !4856)
!4856 = distinct !DILexicalBlock(scope: !4850, file: !3, line: 1056, column: 7)
!4857 = !DILocation(line: 1056, column: 40, scope: !4856)
!4858 = !DILocation(line: 1056, column: 7, scope: !4850)
!4859 = !DILocation(line: 1057, column: 8, scope: !4860)
!4860 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 1057, column: 6)
!4861 = !DILocation(line: 1057, column: 6, scope: !4856)
!4862 = !DILocation(line: 1058, column: 4, scope: !4860)
!4863 = !DILocation(line: 1056, column: 47, scope: !4856)
!4864 = !DILocation(line: 1056, column: 7, scope: !4856)
!4865 = distinct !{!4865, !4858, !4866}
!4866 = !DILocation(line: 1058, column: 4, scope: !4850)
!4867 = !DILocation(line: 1059, column: 11, scope: !4868)
!4868 = distinct !DILexicalBlock(scope: !4844, file: !3, line: 1059, column: 11)
!4869 = !DILocation(line: 1059, column: 22, scope: !4868)
!4870 = !DILocation(line: 1059, column: 27, scope: !4868)
!4871 = !DILocation(line: 1059, column: 30, scope: !4868)
!4872 = !DILocation(line: 1059, column: 32, scope: !4868)
!4873 = !DILocation(line: 1059, column: 11, scope: !4844)
!4874 = !DILocation(line: 1061, column: 14, scope: !4875)
!4875 = distinct !DILexicalBlock(scope: !4868, file: !3, line: 1060, column: 2)
!4876 = !DILocation(line: 1061, column: 8, scope: !4875)
!4877 = !DILocation(line: 1061, column: 6, scope: !4875)
!4878 = !DILocation(line: 1062, column: 8, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !4875, file: !3, line: 1062, column: 8)
!4880 = !DILocation(line: 1062, column: 10, scope: !4879)
!4881 = !DILocation(line: 1062, column: 34, scope: !4879)
!4882 = !DILocation(line: 1062, column: 37, scope: !4879)
!4883 = !DILocation(line: 1062, column: 39, scope: !4879)
!4884 = !DILocation(line: 1062, column: 8, scope: !4875)
!4885 = !DILocation(line: 1063, column: 13, scope: !4879)
!4886 = !DILocation(line: 1063, column: 6, scope: !4879)
!4887 = !DILocation(line: 1065, column: 6, scope: !4879)
!4888 = !DILocation(line: 1068, column: 14, scope: !4889)
!4889 = distinct !DILexicalBlock(scope: !4844, file: !3, line: 1068, column: 7)
!4890 = !DILocation(line: 1068, column: 12, scope: !4889)
!4891 = !DILocation(line: 1068, column: 19, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4889, file: !3, line: 1068, column: 7)
!4893 = !DILocation(line: 1068, column: 21, scope: !4892)
!4894 = !DILocation(line: 1068, column: 7, scope: !4889)
!4895 = !DILocation(line: 1069, column: 16, scope: !4896)
!4896 = distinct !DILexicalBlock(scope: !4892, file: !3, line: 1069, column: 6)
!4897 = !DILocation(line: 1069, column: 6, scope: !4896)
!4898 = !DILocation(line: 1070, column: 6, scope: !4896)
!4899 = !DILocation(line: 1070, column: 19, scope: !4896)
!4900 = !DILocation(line: 1070, column: 54, scope: !4896)
!4901 = !DILocation(line: 1070, column: 44, scope: !4896)
!4902 = !DILocation(line: 1070, column: 28, scope: !4896)
!4903 = !DILocation(line: 1070, column: 11, scope: !4896)
!4904 = !DILocation(line: 1069, column: 6, scope: !4892)
!4905 = !DILocation(line: 1071, column: 11, scope: !4896)
!4906 = !DILocation(line: 1071, column: 4, scope: !4896)
!4907 = !DILocation(line: 1070, column: 57, scope: !4896)
!4908 = !DILocation(line: 1068, column: 47, scope: !4892)
!4909 = !DILocation(line: 1068, column: 7, scope: !4892)
!4910 = distinct !{!4910, !4894, !4911}
!4911 = !DILocation(line: 1071, column: 11, scope: !4889)
!4912 = !DILocation(line: 1078, column: 9, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4914, file: !3, line: 1078, column: 2)
!4914 = distinct !DILexicalBlock(scope: !4844, file: !3, line: 1074, column: 7)
!4915 = !DILocation(line: 1078, column: 7, scope: !4913)
!4916 = !DILocation(line: 1078, column: 14, scope: !4917)
!4917 = distinct !DILexicalBlock(scope: !4913, file: !3, line: 1078, column: 2)
!4918 = !DILocation(line: 1078, column: 16, scope: !4917)
!4919 = !DILocation(line: 1078, column: 2, scope: !4913)
!4920 = !DILocation(line: 1079, column: 14, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !4917, file: !3, line: 1079, column: 8)
!4922 = !DILocation(line: 1079, column: 8, scope: !4921)
!4923 = !DILocation(line: 1079, column: 17, scope: !4921)
!4924 = !DILocation(line: 1080, column: 8, scope: !4921)
!4925 = !DILocation(line: 1080, column: 21, scope: !4921)
!4926 = !DILocation(line: 1080, column: 36, scope: !4921)
!4927 = !DILocation(line: 1080, column: 30, scope: !4921)
!4928 = !DILocation(line: 1080, column: 39, scope: !4921)
!4929 = !DILocation(line: 1080, column: 13, scope: !4921)
!4930 = !DILocation(line: 1079, column: 8, scope: !4917)
!4931 = !DILocation(line: 1081, column: 19, scope: !4921)
!4932 = !DILocation(line: 1081, column: 13, scope: !4921)
!4933 = !DILocation(line: 1081, column: 22, scope: !4921)
!4934 = !DILocation(line: 1081, column: 6, scope: !4921)
!4935 = !DILocation(line: 1080, column: 43, scope: !4921)
!4936 = !DILocation(line: 1078, column: 45, scope: !4917)
!4937 = !DILocation(line: 1078, column: 2, scope: !4917)
!4938 = distinct !{!4938, !4919, !4939}
!4939 = !DILocation(line: 1081, column: 22, scope: !4913)
!4940 = !DILocation(line: 1085, column: 20, scope: !4941)
!4941 = distinct !DILexicalBlock(scope: !4844, file: !3, line: 1085, column: 11)
!4942 = !DILocation(line: 1085, column: 12, scope: !4941)
!4943 = !DILocation(line: 1085, column: 11, scope: !4844)
!4944 = !DILocation(line: 1086, column: 2, scope: !4941)
!4945 = !DILocation(line: 1088, column: 20, scope: !4946)
!4946 = distinct !DILexicalBlock(scope: !4844, file: !3, line: 1088, column: 11)
!4947 = !DILocation(line: 1088, column: 12, scope: !4946)
!4948 = !DILocation(line: 1088, column: 11, scope: !4844)
!4949 = !DILocation(line: 1089, column: 2, scope: !4946)
!4950 = !DILocation(line: 1091, column: 7, scope: !4844)
!4951 = !DILocation(line: 1094, column: 3, scope: !3834)
!4952 = !DILocation(line: 1095, column: 1, scope: !3834)
!4953 = distinct !DISubprogram(name: "strip_reg_name", scope: !3, file: !3, line: 1013, type: !4954, scopeLine: 1014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4954 = !DISubroutineType(types: !4955)
!4955 = !{!2692, !2692}
!4956 = !DILocalVariable(name: "name", arg: 1, scope: !4953, file: !3, line: 1013, type: !2692)
!4957 = !DILocation(line: 1013, column: 29, scope: !4953)
!4958 = !DILocation(line: 1019, column: 7, scope: !4959)
!4959 = distinct !DILexicalBlock(scope: !4953, file: !3, line: 1019, column: 7)
!4960 = !DILocation(line: 1019, column: 15, scope: !4959)
!4961 = !DILocation(line: 1019, column: 22, scope: !4959)
!4962 = !DILocation(line: 1019, column: 25, scope: !4959)
!4963 = !DILocation(line: 1019, column: 33, scope: !4959)
!4964 = !DILocation(line: 1019, column: 7, scope: !4953)
!4965 = !DILocation(line: 1020, column: 9, scope: !4959)
!4966 = !DILocation(line: 1020, column: 5, scope: !4959)
!4967 = !DILocation(line: 1021, column: 10, scope: !4953)
!4968 = !DILocation(line: 1021, column: 3, scope: !4953)
!4969 = distinct !DISubprogram(name: "align_variable", scope: !3, file: !3, line: 1115, type: !4970, scopeLine: 1116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!4970 = !DISubroutineType(types: !4971)
!4971 = !{null, !2702, !2820}
!4972 = !DILocalVariable(name: "decl", arg: 1, scope: !4969, file: !3, line: 1115, type: !2702)
!4973 = !DILocation(line: 1115, column: 22, scope: !4969)
!4974 = !DILocalVariable(name: "dont_output_data", arg: 2, scope: !4969, file: !3, line: 1115, type: !2820)
!4975 = !DILocation(line: 1115, column: 33, scope: !4969)
!4976 = !DILocalVariable(name: "align", scope: !4969, file: !3, line: 1117, type: !7)
!4977 = !DILocation(line: 1117, column: 16, scope: !4969)
!4978 = !DILocation(line: 1117, column: 24, scope: !4969)
!4979 = !DILocation(line: 1122, column: 7, scope: !4980)
!4980 = distinct !DILexicalBlock(scope: !4969, file: !3, line: 1122, column: 7)
!4981 = !DILocation(line: 1122, column: 24, scope: !4980)
!4982 = !DILocation(line: 1122, column: 27, scope: !4980)
!4983 = !DILocation(line: 1122, column: 44, scope: !4980)
!4984 = !DILocation(line: 1123, column: 7, scope: !4980)
!4985 = !DILocation(line: 1123, column: 10, scope: !4980)
!4986 = !DILocation(line: 1123, column: 39, scope: !4980)
!4987 = !DILocation(line: 1122, column: 7, scope: !4969)
!4988 = !DILocation(line: 1124, column: 13, scope: !4980)
!4989 = !DILocation(line: 1124, column: 11, scope: !4980)
!4990 = !DILocation(line: 1124, column: 5, scope: !4980)
!4991 = !DILocation(line: 1128, column: 7, scope: !4992)
!4992 = distinct !DILexicalBlock(scope: !4969, file: !3, line: 1128, column: 7)
!4993 = !DILocation(line: 1128, column: 13, scope: !4992)
!4994 = !DILocation(line: 1128, column: 7, scope: !4969)
!4995 = !DILocation(line: 1131, column: 45, scope: !4996)
!4996 = distinct !DILexicalBlock(scope: !4992, file: !3, line: 1129, column: 5)
!4997 = !DILocation(line: 1130, column: 7, scope: !4996)
!4998 = !DILocation(line: 1133, column: 13, scope: !4996)
!4999 = !DILocation(line: 1134, column: 5, scope: !4996)
!5000 = !DILocation(line: 1137, column: 9, scope: !5001)
!5001 = distinct !DILexicalBlock(scope: !4969, file: !3, line: 1137, column: 7)
!5002 = !DILocation(line: 1137, column: 7, scope: !4969)
!5003 = !DILocalVariable(name: "data_align", scope: !5004, file: !3, line: 1140, type: !7)
!5004 = distinct !DILexicalBlock(scope: !5001, file: !3, line: 1138, column: 5)
!5005 = !DILocation(line: 1140, column: 20, scope: !5004)
!5006 = !DILocation(line: 1140, column: 33, scope: !5004)
!5007 = !DILocation(line: 1143, column: 13, scope: !5008)
!5008 = distinct !DILexicalBlock(scope: !5004, file: !3, line: 1143, column: 11)
!5009 = !DILocation(line: 1143, column: 40, scope: !5008)
!5010 = !DILocation(line: 1143, column: 43, scope: !5008)
!5011 = !DILocation(line: 1143, column: 54, scope: !5008)
!5012 = !DILocation(line: 1143, column: 11, scope: !5004)
!5013 = !DILocation(line: 1144, column: 10, scope: !5008)
!5014 = !DILocation(line: 1144, column: 8, scope: !5008)
!5015 = !DILocation(line: 1144, column: 2, scope: !5008)
!5016 = !DILocation(line: 1147, column: 11, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !5004, file: !3, line: 1147, column: 11)
!5018 = !DILocation(line: 1147, column: 31, scope: !5017)
!5019 = !DILocation(line: 1147, column: 36, scope: !5017)
!5020 = !DILocation(line: 1147, column: 39, scope: !5017)
!5021 = !DILocation(line: 1147, column: 62, scope: !5017)
!5022 = !DILocation(line: 1147, column: 59, scope: !5017)
!5023 = !DILocation(line: 1147, column: 11, scope: !5004)
!5024 = !DILocalVariable(name: "const_align", scope: !5025, file: !3, line: 1149, type: !7)
!5025 = distinct !DILexicalBlock(scope: !5017, file: !3, line: 1148, column: 2)
!5026 = !DILocation(line: 1149, column: 17, scope: !5025)
!5027 = !DILocation(line: 1149, column: 31, scope: !5025)
!5028 = !DILocation(line: 1153, column: 10, scope: !5029)
!5029 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 1153, column: 8)
!5030 = !DILocation(line: 1153, column: 37, scope: !5029)
!5031 = !DILocation(line: 1153, column: 40, scope: !5029)
!5032 = !DILocation(line: 1153, column: 52, scope: !5029)
!5033 = !DILocation(line: 1153, column: 8, scope: !5025)
!5034 = !DILocation(line: 1154, column: 14, scope: !5029)
!5035 = !DILocation(line: 1154, column: 12, scope: !5029)
!5036 = !DILocation(line: 1154, column: 6, scope: !5029)
!5037 = !DILocation(line: 1155, column: 2, scope: !5025)
!5038 = !DILocation(line: 1157, column: 5, scope: !5004)
!5039 = !DILocation(line: 1161, column: 23, scope: !4969)
!5040 = !DILocation(line: 1161, column: 3, scope: !4969)
!5041 = !DILocation(line: 1161, column: 21, scope: !4969)
!5042 = !DILocation(line: 1162, column: 1, scope: !4969)
!5043 = distinct !DISubprogram(name: "make_decl_rtl", scope: !3, file: !3, line: 1302, type: !5044, scopeLine: 1303, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5044 = !DISubroutineType(types: !5045)
!5045 = !{null, !2702}
!5046 = !DILocalVariable(name: "decl", arg: 1, scope: !5043, file: !3, line: 1302, type: !2702)
!5047 = !DILocation(line: 1302, column: 21, scope: !5043)
!5048 = !DILocalVariable(name: "name", scope: !5043, file: !3, line: 1304, type: !2692)
!5049 = !DILocation(line: 1304, column: 15, scope: !5043)
!5050 = !DILocalVariable(name: "reg_number", scope: !5043, file: !3, line: 1305, type: !2798)
!5051 = !DILocation(line: 1305, column: 7, scope: !5043)
!5052 = !DILocalVariable(name: "x", scope: !5043, file: !3, line: 1306, type: !2876)
!5053 = !DILocation(line: 1306, column: 7, scope: !5043)
!5054 = !DILocation(line: 1309, column: 3, scope: !5043)
!5055 = !DILocation(line: 1313, column: 3, scope: !5043)
!5056 = !DILocation(line: 1320, column: 3, scope: !5043)
!5057 = !DILocation(line: 1325, column: 7, scope: !5058)
!5058 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 1325, column: 7)
!5059 = !DILocation(line: 1325, column: 7, scope: !5043)
!5060 = !DILocation(line: 1328, column: 11, scope: !5061)
!5061 = distinct !DILexicalBlock(scope: !5058, file: !3, line: 1326, column: 5)
!5062 = !DILocation(line: 1328, column: 9, scope: !5061)
!5063 = !DILocation(line: 1329, column: 11, scope: !5064)
!5064 = distinct !DILexicalBlock(scope: !5061, file: !3, line: 1329, column: 11)
!5065 = !DILocation(line: 1329, column: 27, scope: !5064)
!5066 = !DILocation(line: 1329, column: 24, scope: !5064)
!5067 = !DILocation(line: 1329, column: 11, scope: !5061)
!5068 = !DILocation(line: 1330, column: 2, scope: !5064)
!5069 = !DILocation(line: 1332, column: 11, scope: !5070)
!5070 = distinct !DILexicalBlock(scope: !5061, file: !3, line: 1332, column: 11)
!5071 = !DILocation(line: 1332, column: 28, scope: !5070)
!5072 = !DILocation(line: 1332, column: 45, scope: !5070)
!5073 = !DILocation(line: 1332, column: 48, scope: !5070)
!5074 = !DILocation(line: 1332, column: 11, scope: !5061)
!5075 = !DILocation(line: 1333, column: 2, scope: !5070)
!5076 = !DILocation(line: 1343, column: 15, scope: !5061)
!5077 = !DILocation(line: 1343, column: 36, scope: !5061)
!5078 = !DILocation(line: 1343, column: 42, scope: !5061)
!5079 = !DILocation(line: 1343, column: 7, scope: !5061)
!5080 = !DILocation(line: 1347, column: 11, scope: !5081)
!5081 = distinct !DILexicalBlock(scope: !5061, file: !3, line: 1347, column: 11)
!5082 = !DILocation(line: 1348, column: 4, scope: !5081)
!5083 = !DILocation(line: 1348, column: 7, scope: !5081)
!5084 = !DILocation(line: 1348, column: 30, scope: !5081)
!5085 = !DILocation(line: 1349, column: 4, scope: !5081)
!5086 = !DILocation(line: 1349, column: 7, scope: !5081)
!5087 = !DILocation(line: 1347, column: 11, scope: !5061)
!5088 = !DILocation(line: 1350, column: 23, scope: !5081)
!5089 = !DILocation(line: 1350, column: 56, scope: !5081)
!5090 = !DILocation(line: 1350, column: 36, scope: !5081)
!5091 = !DILocation(line: 1350, column: 2, scope: !5081)
!5092 = !DILocation(line: 1353, column: 11, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5061, file: !3, line: 1353, column: 11)
!5094 = !DILocation(line: 1353, column: 24, scope: !5093)
!5095 = !DILocation(line: 1353, column: 27, scope: !5093)
!5096 = !DILocation(line: 1353, column: 44, scope: !5093)
!5097 = !DILocation(line: 1353, column: 11, scope: !5061)
!5098 = !DILocation(line: 1354, column: 24, scope: !5093)
!5099 = !DILocation(line: 1354, column: 2, scope: !5093)
!5100 = !DILocation(line: 1356, column: 7, scope: !5061)
!5101 = !DILocation(line: 1359, column: 10, scope: !5043)
!5102 = !DILocation(line: 1359, column: 8, scope: !5043)
!5103 = !DILocation(line: 1361, column: 7, scope: !5104)
!5104 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 1361, column: 7)
!5105 = !DILocation(line: 1361, column: 15, scope: !5104)
!5106 = !DILocation(line: 1361, column: 22, scope: !5104)
!5107 = !DILocation(line: 1361, column: 25, scope: !5104)
!5108 = !DILocation(line: 1361, column: 42, scope: !5104)
!5109 = !DILocation(line: 1362, column: 7, scope: !5104)
!5110 = !DILocation(line: 1362, column: 10, scope: !5104)
!5111 = !DILocation(line: 1361, column: 7, scope: !5043)
!5112 = !DILocation(line: 1364, column: 54, scope: !5113)
!5113 = distinct !DILexicalBlock(scope: !5104, file: !3, line: 1363, column: 5)
!5114 = !DILocation(line: 1364, column: 7, scope: !5113)
!5115 = !DILocation(line: 1365, column: 5, scope: !5113)
!5116 = !DILocation(line: 1366, column: 12, scope: !5117)
!5117 = distinct !DILexicalBlock(scope: !5104, file: !3, line: 1366, column: 12)
!5118 = !DILocation(line: 1366, column: 29, scope: !5117)
!5119 = !DILocation(line: 1366, column: 46, scope: !5117)
!5120 = !DILocation(line: 1366, column: 49, scope: !5117)
!5121 = !DILocation(line: 1366, column: 12, scope: !5104)
!5122 = !DILocalVariable(name: "asmspec", scope: !5123, file: !3, line: 1368, type: !2692)
!5123 = distinct !DILexicalBlock(scope: !5117, file: !3, line: 1367, column: 5)
!5124 = !DILocation(line: 1368, column: 19, scope: !5123)
!5125 = !DILocation(line: 1368, column: 29, scope: !5123)
!5126 = !DILocation(line: 1368, column: 33, scope: !5123)
!5127 = !DILocation(line: 1369, column: 37, scope: !5123)
!5128 = !DILocation(line: 1369, column: 20, scope: !5123)
!5129 = !DILocation(line: 1369, column: 18, scope: !5123)
!5130 = !DILocation(line: 1371, column: 11, scope: !5131)
!5131 = distinct !DILexicalBlock(scope: !5123, file: !3, line: 1371, column: 11)
!5132 = !DILocation(line: 1371, column: 22, scope: !5131)
!5133 = !DILocation(line: 1371, column: 11, scope: !5123)
!5134 = !DILocation(line: 1372, column: 49, scope: !5131)
!5135 = !DILocation(line: 1372, column: 2, scope: !5131)
!5136 = !DILocation(line: 1373, column: 16, scope: !5137)
!5137 = distinct !DILexicalBlock(scope: !5131, file: !3, line: 1373, column: 16)
!5138 = !DILocation(line: 1373, column: 27, scope: !5137)
!5139 = !DILocation(line: 1373, column: 16, scope: !5131)
!5140 = !DILocation(line: 1374, column: 43, scope: !5137)
!5141 = !DILocation(line: 1374, column: 2, scope: !5137)
!5142 = !DILocation(line: 1375, column: 16, scope: !5143)
!5143 = distinct !DILexicalBlock(scope: !5137, file: !3, line: 1375, column: 16)
!5144 = !DILocation(line: 1375, column: 45, scope: !5143)
!5145 = !DILocation(line: 1375, column: 16, scope: !5137)
!5146 = !DILocation(line: 1377, column: 9, scope: !5143)
!5147 = !DILocation(line: 1376, column: 2, scope: !5143)
!5148 = !DILocation(line: 1378, column: 18, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5143, file: !3, line: 1378, column: 16)
!5150 = !DILocation(line: 1378, column: 16, scope: !5143)
!5151 = !DILocation(line: 1380, column: 16, scope: !5149)
!5152 = !DILocation(line: 1379, column: 2, scope: !5149)
!5153 = !DILocalVariable(name: "nregs", scope: !5154, file: !3, line: 1384, type: !2798)
!5154 = distinct !DILexicalBlock(scope: !5149, file: !3, line: 1383, column: 2)
!5155 = !DILocation(line: 1384, column: 8, scope: !5154)
!5156 = !DILocation(line: 1386, column: 8, scope: !5157)
!5157 = distinct !DILexicalBlock(scope: !5154, file: !3, line: 1386, column: 8)
!5158 = !DILocation(line: 1386, column: 28, scope: !5157)
!5159 = !DILocation(line: 1386, column: 33, scope: !5157)
!5160 = !DILocation(line: 1386, column: 36, scope: !5157)
!5161 = !DILocation(line: 1386, column: 8, scope: !5154)
!5162 = !DILocation(line: 1388, column: 8, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5157, file: !3, line: 1387, column: 6)
!5164 = !DILocation(line: 1388, column: 28, scope: !5163)
!5165 = !DILocation(line: 1389, column: 8, scope: !5163)
!5166 = !DILocation(line: 1390, column: 6, scope: !5163)
!5167 = !DILocation(line: 1391, column: 8, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5154, file: !3, line: 1391, column: 8)
!5169 = !DILocation(line: 1391, column: 8, scope: !5154)
!5170 = !DILocation(line: 1392, column: 6, scope: !5168)
!5171 = !DILocation(line: 1401, column: 4, scope: !5154)
!5172 = !DILocation(line: 1402, column: 39, scope: !5154)
!5173 = !DILocation(line: 1402, column: 4, scope: !5154)
!5174 = !DILocation(line: 1402, column: 37, scope: !5154)
!5175 = !DILocation(line: 1403, column: 4, scope: !5154)
!5176 = !DILocation(line: 1403, column: 36, scope: !5154)
!5177 = !DILocation(line: 1405, column: 8, scope: !5178)
!5178 = distinct !DILexicalBlock(scope: !5154, file: !3, line: 1405, column: 8)
!5179 = !DILocation(line: 1405, column: 8, scope: !5154)
!5180 = !DILocation(line: 1413, column: 33, scope: !5181)
!5181 = distinct !DILexicalBlock(scope: !5178, file: !3, line: 1406, column: 6)
!5182 = !DILocation(line: 1413, column: 16, scope: !5181)
!5183 = !DILocation(line: 1413, column: 45, scope: !5181)
!5184 = !DILocation(line: 1413, column: 14, scope: !5181)
!5185 = !DILocation(line: 1414, column: 8, scope: !5181)
!5186 = !DILocation(line: 1414, column: 15, scope: !5181)
!5187 = !DILocation(line: 1414, column: 21, scope: !5181)
!5188 = !DILocation(line: 1415, column: 18, scope: !5181)
!5189 = !DILocation(line: 1415, column: 31, scope: !5181)
!5190 = !DILocation(line: 1415, column: 29, scope: !5181)
!5191 = !DILocation(line: 1415, column: 3, scope: !5181)
!5192 = distinct !{!5192, !5185, !5193}
!5193 = !DILocation(line: 1415, column: 38, scope: !5181)
!5194 = !DILocation(line: 1416, column: 6, scope: !5181)
!5195 = !DILocation(line: 1419, column: 4, scope: !5154)
!5196 = !DILocation(line: 1421, column: 5, scope: !5123)
!5197 = !DILocation(line: 1424, column: 12, scope: !5198)
!5198 = distinct !DILexicalBlock(scope: !5117, file: !3, line: 1424, column: 12)
!5199 = !DILocation(line: 1424, column: 20, scope: !5198)
!5200 = !DILocation(line: 1424, column: 12, scope: !5117)
!5201 = !DILocation(line: 1434, column: 3, scope: !5202)
!5202 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 1425, column: 3)
!5203 = !DILocation(line: 1442, column: 7, scope: !5204)
!5204 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 1442, column: 7)
!5205 = !DILocation(line: 1442, column: 24, scope: !5204)
!5206 = !DILocation(line: 1443, column: 7, scope: !5204)
!5207 = !DILocation(line: 1443, column: 10, scope: !5204)
!5208 = !DILocation(line: 1443, column: 35, scope: !5204)
!5209 = !DILocation(line: 1444, column: 7, scope: !5204)
!5210 = !DILocation(line: 1444, column: 10, scope: !5204)
!5211 = !DILocation(line: 1444, column: 30, scope: !5204)
!5212 = !DILocation(line: 1445, column: 7, scope: !5204)
!5213 = !DILocation(line: 1445, column: 10, scope: !5204)
!5214 = !DILocation(line: 1442, column: 7, scope: !5043)
!5215 = !DILocation(line: 1446, column: 5, scope: !5204)
!5216 = !DILocation(line: 1446, column: 24, scope: !5204)
!5217 = !DILocation(line: 1449, column: 7, scope: !5218)
!5218 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 1449, column: 7)
!5219 = !DILocation(line: 1449, column: 24, scope: !5218)
!5220 = !DILocation(line: 1449, column: 36, scope: !5218)
!5221 = !DILocation(line: 1449, column: 39, scope: !5218)
!5222 = !DILocation(line: 1449, column: 7, scope: !5043)
!5223 = !DILocation(line: 1450, column: 5, scope: !5218)
!5224 = !DILocation(line: 1450, column: 24, scope: !5218)
!5225 = !DILocation(line: 1452, column: 7, scope: !5226)
!5226 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 1452, column: 7)
!5227 = !DILocation(line: 1452, column: 30, scope: !5226)
!5228 = !DILocation(line: 1452, column: 56, scope: !5226)
!5229 = !DILocation(line: 1452, column: 33, scope: !5226)
!5230 = !DILocation(line: 1452, column: 7, scope: !5043)
!5231 = !DILocation(line: 1453, column: 30, scope: !5226)
!5232 = !DILocation(line: 1453, column: 56, scope: !5226)
!5233 = !DILocation(line: 1453, column: 36, scope: !5226)
!5234 = !DILocation(line: 1453, column: 9, scope: !5226)
!5235 = !DILocation(line: 1453, column: 7, scope: !5226)
!5236 = !DILocation(line: 1453, column: 5, scope: !5226)
!5237 = !DILocalVariable(name: "address_mode", scope: !5238, file: !3, line: 1456, type: !5)
!5238 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 1455, column: 5)
!5239 = !DILocation(line: 1456, column: 25, scope: !5238)
!5240 = !DILocation(line: 1457, column: 11, scope: !5241)
!5241 = distinct !DILexicalBlock(scope: !5238, file: !3, line: 1457, column: 11)
!5242 = !DILocation(line: 1457, column: 31, scope: !5241)
!5243 = !DILocation(line: 1457, column: 28, scope: !5241)
!5244 = !DILocation(line: 1457, column: 11, scope: !5238)
!5245 = !DILocalVariable(name: "as", scope: !5246, file: !3, line: 1459, type: !5247)
!5246 = distinct !DILexicalBlock(scope: !5241, file: !3, line: 1458, column: 2)
!5247 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_space_t", file: !512, line: 73, baseType: !2820)
!5248 = !DILocation(line: 1459, column: 17, scope: !5246)
!5249 = !DILocation(line: 1459, column: 22, scope: !5246)
!5250 = !DILocation(line: 1460, column: 38, scope: !5246)
!5251 = !DILocation(line: 1460, column: 52, scope: !5246)
!5252 = !DILocation(line: 1460, column: 19, scope: !5246)
!5253 = !DILocation(line: 1460, column: 17, scope: !5246)
!5254 = !DILocation(line: 1461, column: 2, scope: !5246)
!5255 = !DILocation(line: 1462, column: 11, scope: !5238)
!5256 = !DILocation(line: 1462, column: 9, scope: !5238)
!5257 = !DILocation(line: 1464, column: 25, scope: !5043)
!5258 = !DILocation(line: 1464, column: 3, scope: !5043)
!5259 = !DILocation(line: 1464, column: 23, scope: !5043)
!5260 = !DILocation(line: 1465, column: 3, scope: !5043)
!5261 = !DILocation(line: 1467, column: 20, scope: !5043)
!5262 = !DILocation(line: 1467, column: 38, scope: !5043)
!5263 = !DILocation(line: 1467, column: 7, scope: !5043)
!5264 = !DILocation(line: 1467, column: 5, scope: !5043)
!5265 = !DILocation(line: 1468, column: 7, scope: !5266)
!5266 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 1468, column: 7)
!5267 = !DILocation(line: 1468, column: 24, scope: !5266)
!5268 = !DILocation(line: 1468, column: 7, scope: !5043)
!5269 = !DILocation(line: 1469, column: 25, scope: !5266)
!5270 = !DILocation(line: 1469, column: 28, scope: !5266)
!5271 = !DILocation(line: 1469, column: 5, scope: !5266)
!5272 = !DILocation(line: 1470, column: 3, scope: !5043)
!5273 = !DILocation(line: 1476, column: 11, scope: !5043)
!5274 = !DILocation(line: 1476, column: 32, scope: !5043)
!5275 = !DILocation(line: 1476, column: 38, scope: !5043)
!5276 = !DILocation(line: 1476, column: 3, scope: !5043)
!5277 = !DILocation(line: 1479, column: 7, scope: !5278)
!5278 = distinct !DILexicalBlock(scope: !5043, file: !3, line: 1479, column: 7)
!5279 = !DILocation(line: 1479, column: 20, scope: !5278)
!5280 = !DILocation(line: 1479, column: 23, scope: !5278)
!5281 = !DILocation(line: 1479, column: 40, scope: !5278)
!5282 = !DILocation(line: 1479, column: 7, scope: !5043)
!5283 = !DILocation(line: 1480, column: 27, scope: !5278)
!5284 = !DILocation(line: 1480, column: 5, scope: !5278)
!5285 = !DILocation(line: 1481, column: 1, scope: !5043)
!5286 = distinct !DISubprogram(name: "change_symbol_block", scope: !3, file: !3, line: 1260, type: !5287, scopeLine: 1261, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5287 = !DISubroutineType(types: !5288)
!5288 = !{null, !2876, !3105}
!5289 = !DILocalVariable(name: "symbol", arg: 1, scope: !5286, file: !3, line: 1260, type: !2876)
!5290 = !DILocation(line: 1260, column: 26, scope: !5286)
!5291 = !DILocalVariable(name: "block", arg: 2, scope: !5286, file: !3, line: 1260, type: !3105)
!5292 = !DILocation(line: 1260, column: 55, scope: !5286)
!5293 = !DILocation(line: 1262, column: 7, scope: !5294)
!5294 = distinct !DILexicalBlock(scope: !5286, file: !3, line: 1262, column: 7)
!5295 = !DILocation(line: 1262, column: 16, scope: !5294)
!5296 = !DILocation(line: 1262, column: 13, scope: !5294)
!5297 = !DILocation(line: 1262, column: 7, scope: !5286)
!5298 = !DILocation(line: 1264, column: 7, scope: !5299)
!5299 = distinct !DILexicalBlock(scope: !5294, file: !3, line: 1263, column: 5)
!5300 = !DILocation(line: 1265, column: 35, scope: !5299)
!5301 = !DILocation(line: 1265, column: 7, scope: !5299)
!5302 = !DILocation(line: 1265, column: 33, scope: !5299)
!5303 = !DILocation(line: 1266, column: 5, scope: !5299)
!5304 = !DILocation(line: 1267, column: 1, scope: !5286)
!5305 = distinct !DISubprogram(name: "get_block_for_decl", scope: !3, file: !3, line: 1223, type: !5306, scopeLine: 1224, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5306 = !DISubroutineType(types: !5307)
!5307 = !{!3105, !2702}
!5308 = !DILocalVariable(name: "decl", arg: 1, scope: !5305, file: !3, line: 1223, type: !2702)
!5309 = !DILocation(line: 1223, column: 26, scope: !5305)
!5310 = !DILocalVariable(name: "sect", scope: !5305, file: !3, line: 1225, type: !3109)
!5311 = !DILocation(line: 1225, column: 12, scope: !5305)
!5312 = !DILocation(line: 1227, column: 7, scope: !5313)
!5313 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 1227, column: 7)
!5314 = !DILocation(line: 1227, column: 24, scope: !5313)
!5315 = !DILocation(line: 1227, column: 7, scope: !5305)
!5316 = !DILocation(line: 1230, column: 11, scope: !5317)
!5317 = distinct !DILexicalBlock(scope: !5318, file: !3, line: 1230, column: 11)
!5318 = distinct !DILexicalBlock(scope: !5313, file: !3, line: 1228, column: 5)
!5319 = !DILocation(line: 1230, column: 11, scope: !5318)
!5320 = !DILocation(line: 1231, column: 2, scope: !5317)
!5321 = !DILocation(line: 1235, column: 11, scope: !5322)
!5322 = distinct !DILexicalBlock(scope: !5318, file: !3, line: 1235, column: 11)
!5323 = !DILocation(line: 1235, column: 11, scope: !5318)
!5324 = !DILocation(line: 1236, column: 2, scope: !5322)
!5325 = !DILocation(line: 1237, column: 5, scope: !5318)
!5326 = !DILocation(line: 1241, column: 7, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 1241, column: 7)
!5328 = !DILocation(line: 1241, column: 29, scope: !5327)
!5329 = !DILocation(line: 1241, column: 7, scope: !5305)
!5330 = !DILocation(line: 1242, column: 5, scope: !5327)
!5331 = !DILocation(line: 1243, column: 23, scope: !5332)
!5332 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 1243, column: 7)
!5333 = !DILocation(line: 1243, column: 8, scope: !5332)
!5334 = !DILocation(line: 1243, column: 7, scope: !5305)
!5335 = !DILocation(line: 1244, column: 5, scope: !5332)
!5336 = !DILocation(line: 1248, column: 7, scope: !5337)
!5337 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 1248, column: 7)
!5338 = !DILocation(line: 1248, column: 24, scope: !5337)
!5339 = !DILocation(line: 1248, column: 7, scope: !5305)
!5340 = !DILocation(line: 1249, column: 23, scope: !5337)
!5341 = !DILocation(line: 1249, column: 7, scope: !5337)
!5342 = !DILocation(line: 1250, column: 32, scope: !5305)
!5343 = !DILocation(line: 1250, column: 10, scope: !5305)
!5344 = !DILocation(line: 1250, column: 8, scope: !5305)
!5345 = !DILocation(line: 1251, column: 7, scope: !5346)
!5346 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 1251, column: 7)
!5347 = !DILocation(line: 1251, column: 28, scope: !5346)
!5348 = !DILocation(line: 1251, column: 7, scope: !5305)
!5349 = !DILocation(line: 1252, column: 5, scope: !5346)
!5350 = !DILocation(line: 1254, column: 33, scope: !5305)
!5351 = !DILocation(line: 1254, column: 10, scope: !5305)
!5352 = !DILocation(line: 1254, column: 3, scope: !5305)
!5353 = !DILocation(line: 1255, column: 1, scope: !5305)
!5354 = distinct !DISubprogram(name: "use_object_blocks_p", scope: !3, file: !3, line: 590, type: !5355, scopeLine: 591, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5355 = !DISubroutineType(types: !5356)
!5356 = !{!2820}
!5357 = !DILocation(line: 592, column: 10, scope: !5354)
!5358 = !DILocation(line: 592, column: 3, scope: !5354)
!5359 = distinct !DISubprogram(name: "use_blocks_for_decl_p", scope: !3, file: !3, line: 1272, type: !5360, scopeLine: 1273, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5360 = !DISubroutineType(types: !5361)
!5361 = !{!2820, !2702}
!5362 = !DILocalVariable(name: "decl", arg: 1, scope: !5359, file: !3, line: 1272, type: !2702)
!5363 = !DILocation(line: 1272, column: 29, scope: !5359)
!5364 = !DILocation(line: 1275, column: 7, scope: !5365)
!5365 = distinct !DILexicalBlock(scope: !5359, file: !3, line: 1275, column: 7)
!5366 = !DILocation(line: 1275, column: 24, scope: !5365)
!5367 = !DILocation(line: 1275, column: 36, scope: !5365)
!5368 = !DILocation(line: 1275, column: 39, scope: !5365)
!5369 = !DILocation(line: 1275, column: 56, scope: !5365)
!5370 = !DILocation(line: 1275, column: 7, scope: !5359)
!5371 = !DILocation(line: 1276, column: 5, scope: !5365)
!5372 = !DILocation(line: 1282, column: 7, scope: !5373)
!5373 = distinct !DILexicalBlock(scope: !5359, file: !3, line: 1282, column: 7)
!5374 = !DILocation(line: 1282, column: 30, scope: !5373)
!5375 = !DILocation(line: 1282, column: 27, scope: !5373)
!5376 = !DILocation(line: 1282, column: 7, scope: !5359)
!5377 = !DILocation(line: 1283, column: 5, scope: !5373)
!5378 = !DILocation(line: 1286, column: 34, scope: !5379)
!5379 = distinct !DILexicalBlock(scope: !5359, file: !3, line: 1286, column: 7)
!5380 = !DILocation(line: 1286, column: 7, scope: !5379)
!5381 = !DILocation(line: 1286, column: 7, scope: !5359)
!5382 = !DILocation(line: 1287, column: 5, scope: !5379)
!5383 = !DILocation(line: 1289, column: 3, scope: !5359)
!5384 = !DILocation(line: 1290, column: 1, scope: !5359)
!5385 = distinct !DISubprogram(name: "create_block_symbol", scope: !3, file: !3, line: 626, type: !5386, scopeLine: 628, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5386 = !DISubroutineType(types: !5387)
!5387 = !{!2876, !2692, !3105, !2757}
!5388 = !DILocalVariable(name: "label", arg: 1, scope: !5385, file: !3, line: 626, type: !2692)
!5389 = !DILocation(line: 626, column: 34, scope: !5385)
!5390 = !DILocalVariable(name: "block", arg: 2, scope: !5385, file: !3, line: 626, type: !3105)
!5391 = !DILocation(line: 626, column: 62, scope: !5385)
!5392 = !DILocalVariable(name: "offset", arg: 3, scope: !5385, file: !3, line: 627, type: !2757)
!5393 = !DILocation(line: 627, column: 22, scope: !5385)
!5394 = !DILocalVariable(name: "symbol", scope: !5385, file: !3, line: 629, type: !2876)
!5395 = !DILocation(line: 629, column: 7, scope: !5385)
!5396 = !DILocalVariable(name: "size", scope: !5385, file: !3, line: 630, type: !7)
!5397 = !DILocation(line: 630, column: 16, scope: !5385)
!5398 = !DILocation(line: 633, column: 8, scope: !5385)
!5399 = !DILocation(line: 634, column: 18, scope: !5385)
!5400 = !DILocation(line: 634, column: 12, scope: !5385)
!5401 = !DILocation(line: 634, column: 10, scope: !5385)
!5402 = !DILocation(line: 637, column: 11, scope: !5385)
!5403 = !DILocation(line: 637, column: 3, scope: !5385)
!5404 = !DILocation(line: 637, column: 22, scope: !5385)
!5405 = !DILocation(line: 638, column: 3, scope: !5385)
!5406 = !DILocation(line: 639, column: 3, scope: !5385)
!5407 = !DILocation(line: 640, column: 22, scope: !5385)
!5408 = !DILocation(line: 640, column: 3, scope: !5385)
!5409 = !DILocation(line: 640, column: 20, scope: !5385)
!5410 = !DILocation(line: 641, column: 3, scope: !5385)
!5411 = !DILocation(line: 641, column: 29, scope: !5385)
!5412 = !DILocation(line: 644, column: 31, scope: !5385)
!5413 = !DILocation(line: 644, column: 3, scope: !5385)
!5414 = !DILocation(line: 644, column: 29, scope: !5385)
!5415 = !DILocation(line: 645, column: 38, scope: !5385)
!5416 = !DILocation(line: 645, column: 3, scope: !5385)
!5417 = !DILocation(line: 645, column: 36, scope: !5385)
!5418 = !DILocation(line: 647, column: 10, scope: !5385)
!5419 = !DILocation(line: 647, column: 3, scope: !5385)
!5420 = distinct !DISubprogram(name: "make_decl_rtl_for_debug", scope: !3, file: !3, line: 1488, type: !5421, scopeLine: 1489, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5421 = !DISubroutineType(types: !5422)
!5422 = !{!2876, !2702}
!5423 = !DILocalVariable(name: "decl", arg: 1, scope: !5420, file: !3, line: 1488, type: !2702)
!5424 = !DILocation(line: 1488, column: 31, scope: !5420)
!5425 = !DILocalVariable(name: "save_aliasing_flag", scope: !5420, file: !3, line: 1490, type: !7)
!5426 = !DILocation(line: 1490, column: 16, scope: !5420)
!5427 = !DILocalVariable(name: "save_mudflap_flag", scope: !5420, file: !3, line: 1490, type: !7)
!5428 = !DILocation(line: 1490, column: 36, scope: !5420)
!5429 = !DILocalVariable(name: "rtl", scope: !5420, file: !3, line: 1491, type: !2876)
!5430 = !DILocation(line: 1491, column: 7, scope: !5420)
!5431 = !DILocation(line: 1493, column: 7, scope: !5432)
!5432 = distinct !DILexicalBlock(scope: !5420, file: !3, line: 1493, column: 7)
!5433 = !DILocation(line: 1493, column: 7, scope: !5420)
!5434 = !DILocation(line: 1494, column: 12, scope: !5432)
!5435 = !DILocation(line: 1494, column: 5, scope: !5432)
!5436 = !DILocation(line: 1503, column: 24, scope: !5420)
!5437 = !DILocation(line: 1503, column: 22, scope: !5420)
!5438 = !DILocation(line: 1504, column: 24, scope: !5420)
!5439 = !DILocation(line: 1505, column: 23, scope: !5420)
!5440 = !DILocation(line: 1505, column: 21, scope: !5420)
!5441 = !DILocation(line: 1506, column: 16, scope: !5420)
!5442 = !DILocation(line: 1508, column: 9, scope: !5420)
!5443 = !DILocation(line: 1508, column: 7, scope: !5420)
!5444 = !DILocation(line: 1511, column: 3, scope: !5420)
!5445 = !DILocation(line: 1513, column: 26, scope: !5420)
!5446 = !DILocation(line: 1513, column: 24, scope: !5420)
!5447 = !DILocation(line: 1514, column: 18, scope: !5420)
!5448 = !DILocation(line: 1514, column: 16, scope: !5420)
!5449 = !DILocation(line: 1516, column: 10, scope: !5420)
!5450 = !DILocation(line: 1516, column: 3, scope: !5420)
!5451 = !DILocation(line: 1517, column: 1, scope: !5420)
!5452 = distinct !DISubprogram(name: "assemble_asm", scope: !3, file: !3, line: 1523, type: !5044, scopeLine: 1524, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5453 = !DILocalVariable(name: "string", arg: 1, scope: !5452, file: !3, line: 1523, type: !2702)
!5454 = !DILocation(line: 1523, column: 20, scope: !5452)
!5455 = !DILocation(line: 1525, column: 3, scope: !5452)
!5456 = !DILocation(line: 1527, column: 7, scope: !5457)
!5457 = distinct !DILexicalBlock(scope: !5452, file: !3, line: 1527, column: 7)
!5458 = !DILocation(line: 1527, column: 26, scope: !5457)
!5459 = !DILocation(line: 1527, column: 7, scope: !5452)
!5460 = !DILocation(line: 1528, column: 14, scope: !5457)
!5461 = !DILocation(line: 1528, column: 12, scope: !5457)
!5462 = !DILocation(line: 1528, column: 5, scope: !5457)
!5463 = !DILocation(line: 1530, column: 12, scope: !5452)
!5464 = !DILocation(line: 1530, column: 36, scope: !5452)
!5465 = !DILocation(line: 1530, column: 3, scope: !5452)
!5466 = !DILocation(line: 1531, column: 1, scope: !5452)
!5467 = distinct !DISubprogram(name: "default_stabs_asm_out_destructor", scope: !3, file: !3, line: 1538, type: !5468, scopeLine: 1540, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5468 = !DISubroutineType(types: !5469)
!5469 = !{null, !2876, !2798}
!5470 = !DILocalVariable(name: "symbol", arg: 1, scope: !5467, file: !3, line: 1538, type: !2876)
!5471 = !DILocation(line: 1538, column: 39, scope: !5467)
!5472 = !DILocalVariable(name: "priority", arg: 2, scope: !5467, file: !3, line: 1539, type: !2798)
!5473 = !DILocation(line: 1539, column: 11, scope: !5467)
!5474 = !DILocation(line: 1545, column: 3, scope: !5467)
!5475 = !DILocation(line: 1546, column: 28, scope: !5467)
!5476 = !DILocation(line: 1546, column: 3, scope: !5467)
!5477 = !DILocation(line: 1550, column: 1, scope: !5467)
!5478 = distinct !DISubprogram(name: "assemble_addr_to_section", scope: !3, file: !3, line: 1554, type: !5479, scopeLine: 1555, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5479 = !DISubroutineType(types: !5480)
!5480 = !{null, !2876, !3109}
!5481 = !DILocalVariable(name: "symbol", arg: 1, scope: !5478, file: !3, line: 1554, type: !2876)
!5482 = !DILocation(line: 1554, column: 31, scope: !5478)
!5483 = !DILocalVariable(name: "sec", arg: 2, scope: !5478, file: !3, line: 1554, type: !3109)
!5484 = !DILocation(line: 1554, column: 48, scope: !5478)
!5485 = !DILocation(line: 1556, column: 22, scope: !5478)
!5486 = !DILocation(line: 1556, column: 3, scope: !5478)
!5487 = !DILocation(line: 1557, column: 3, scope: !5478)
!5488 = !DILocation(line: 1558, column: 21, scope: !5478)
!5489 = !DILocation(line: 1558, column: 3, scope: !5478)
!5490 = !DILocation(line: 1559, column: 1, scope: !5478)
!5491 = distinct !DISubprogram(name: "switch_to_section", scope: !3, file: !3, line: 6808, type: !5492, scopeLine: 6809, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5492 = !DISubroutineType(types: !5493)
!5493 = !{null, !3109}
!5494 = !DILocalVariable(name: "new_section", arg: 1, scope: !5491, file: !3, line: 6808, type: !3109)
!5495 = !DILocation(line: 6808, column: 29, scope: !5491)
!5496 = !DILocation(line: 6810, column: 7, scope: !5497)
!5497 = distinct !DILexicalBlock(scope: !5491, file: !3, line: 6810, column: 7)
!5498 = !DILocation(line: 6810, column: 21, scope: !5497)
!5499 = !DILocation(line: 6810, column: 18, scope: !5497)
!5500 = !DILocation(line: 6810, column: 7, scope: !5491)
!5501 = !DILocation(line: 6811, column: 5, scope: !5497)
!5502 = !DILocation(line: 6813, column: 7, scope: !5503)
!5503 = distinct !DILexicalBlock(scope: !5491, file: !3, line: 6813, column: 7)
!5504 = !DILocation(line: 6813, column: 20, scope: !5503)
!5505 = !DILocation(line: 6813, column: 27, scope: !5503)
!5506 = !DILocation(line: 6813, column: 33, scope: !5503)
!5507 = !DILocation(line: 6813, column: 7, scope: !5491)
!5508 = !DILocation(line: 6814, column: 16, scope: !5503)
!5509 = !DILocation(line: 6814, column: 5, scope: !5503)
!5510 = !DILocation(line: 6816, column: 18, scope: !5503)
!5511 = !DILocation(line: 6816, column: 16, scope: !5503)
!5512 = !DILocation(line: 6818, column: 11, scope: !5491)
!5513 = !DILocation(line: 6818, column: 3, scope: !5491)
!5514 = !DILocation(line: 6821, column: 11, scope: !5515)
!5515 = distinct !DILexicalBlock(scope: !5516, file: !3, line: 6821, column: 11)
!5516 = distinct !DILexicalBlock(scope: !5491, file: !3, line: 6819, column: 5)
!5517 = !DILocation(line: 6822, column: 4, scope: !5515)
!5518 = !DILocation(line: 6822, column: 26, scope: !5515)
!5519 = !DILocation(line: 6822, column: 8, scope: !5515)
!5520 = !DILocation(line: 6823, column: 4, scope: !5515)
!5521 = !DILocation(line: 6823, column: 15, scope: !5515)
!5522 = !DILocation(line: 6823, column: 28, scope: !5515)
!5523 = !DILocation(line: 6823, column: 34, scope: !5515)
!5524 = !DILocation(line: 6823, column: 7, scope: !5515)
!5525 = !DILocation(line: 6824, column: 45, scope: !5515)
!5526 = !DILocation(line: 6821, column: 11, scope: !5516)
!5527 = !DILocation(line: 6825, column: 47, scope: !5515)
!5528 = !DILocation(line: 6825, column: 2, scope: !5515)
!5529 = !DILocation(line: 6827, column: 23, scope: !5516)
!5530 = !DILocation(line: 6827, column: 38, scope: !5516)
!5531 = !DILocation(line: 6827, column: 51, scope: !5516)
!5532 = !DILocation(line: 6827, column: 57, scope: !5516)
!5533 = !DILocation(line: 6828, column: 10, scope: !5516)
!5534 = !DILocation(line: 6828, column: 23, scope: !5516)
!5535 = !DILocation(line: 6828, column: 29, scope: !5516)
!5536 = !DILocation(line: 6828, column: 36, scope: !5516)
!5537 = !DILocation(line: 6829, column: 10, scope: !5516)
!5538 = !DILocation(line: 6829, column: 23, scope: !5516)
!5539 = !DILocation(line: 6829, column: 29, scope: !5516)
!5540 = !DILocation(line: 6827, column: 7, scope: !5516)
!5541 = !DILocation(line: 6830, column: 7, scope: !5516)
!5542 = !DILocation(line: 6833, column: 7, scope: !5516)
!5543 = !DILocation(line: 6833, column: 20, scope: !5516)
!5544 = !DILocation(line: 6833, column: 28, scope: !5516)
!5545 = !DILocation(line: 6833, column: 38, scope: !5516)
!5546 = !DILocation(line: 6833, column: 51, scope: !5516)
!5547 = !DILocation(line: 6833, column: 59, scope: !5516)
!5548 = !DILocation(line: 6834, column: 7, scope: !5516)
!5549 = !DILocation(line: 6837, column: 7, scope: !5516)
!5550 = !DILocation(line: 6838, column: 7, scope: !5516)
!5551 = !DILocation(line: 6841, column: 3, scope: !5491)
!5552 = !DILocation(line: 6841, column: 16, scope: !5491)
!5553 = !DILocation(line: 6841, column: 23, scope: !5491)
!5554 = !DILocation(line: 6841, column: 29, scope: !5491)
!5555 = !DILocation(line: 6842, column: 1, scope: !5491)
!5556 = distinct !DISubprogram(name: "assemble_align", scope: !3, file: !3, line: 1896, type: !5557, scopeLine: 1897, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5557 = !DISubroutineType(types: !5558)
!5558 = !{null, !2798}
!5559 = !DILocalVariable(name: "align", arg: 1, scope: !5556, file: !3, line: 1896, type: !2798)
!5560 = !DILocation(line: 1896, column: 21, scope: !5556)
!5561 = !DILocation(line: 1898, column: 7, scope: !5562)
!5562 = distinct !DILexicalBlock(scope: !5556, file: !3, line: 1898, column: 7)
!5563 = !DILocation(line: 1898, column: 13, scope: !5562)
!5564 = !DILocation(line: 1898, column: 7, scope: !5556)
!5565 = !DILocation(line: 1900, column: 7, scope: !5566)
!5566 = distinct !DILexicalBlock(scope: !5567, file: !3, line: 1900, column: 7)
!5567 = distinct !DILexicalBlock(scope: !5562, file: !3, line: 1899, column: 5)
!5568 = !DILocation(line: 1900, column: 7, scope: !5567)
!5569 = !DILocation(line: 1901, column: 5, scope: !5567)
!5570 = !DILocation(line: 1902, column: 1, scope: !5556)
!5571 = distinct !DISubprogram(name: "assemble_integer", scope: !3, file: !3, line: 2686, type: !5572, scopeLine: 2687, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5572 = !DISubroutineType(types: !5573)
!5573 = !{!2820, !2876, !7, !7, !2798}
!5574 = !DILocalVariable(name: "x", arg: 1, scope: !5571, file: !3, line: 2686, type: !2876)
!5575 = !DILocation(line: 2686, column: 23, scope: !5571)
!5576 = !DILocalVariable(name: "size", arg: 2, scope: !5571, file: !3, line: 2686, type: !7)
!5577 = !DILocation(line: 2686, column: 39, scope: !5571)
!5578 = !DILocalVariable(name: "align", arg: 3, scope: !5571, file: !3, line: 2686, type: !7)
!5579 = !DILocation(line: 2686, column: 58, scope: !5571)
!5580 = !DILocalVariable(name: "force", arg: 4, scope: !5571, file: !3, line: 2686, type: !2798)
!5581 = !DILocation(line: 2686, column: 69, scope: !5571)
!5582 = !DILocalVariable(name: "aligned_p", scope: !5571, file: !3, line: 2688, type: !2798)
!5583 = !DILocation(line: 2688, column: 7, scope: !5571)
!5584 = !DILocation(line: 2690, column: 16, scope: !5571)
!5585 = !DILocation(line: 2690, column: 25, scope: !5571)
!5586 = !DILocation(line: 2690, column: 22, scope: !5571)
!5587 = !DILocation(line: 2690, column: 13, scope: !5571)
!5588 = !DILocation(line: 2693, column: 23, scope: !5589)
!5589 = distinct !DILexicalBlock(scope: !5571, file: !3, line: 2693, column: 7)
!5590 = !DILocation(line: 2693, column: 32, scope: !5589)
!5591 = !DILocation(line: 2693, column: 35, scope: !5589)
!5592 = !DILocation(line: 2693, column: 41, scope: !5589)
!5593 = !DILocation(line: 2693, column: 7, scope: !5589)
!5594 = !DILocation(line: 2693, column: 7, scope: !5571)
!5595 = !DILocation(line: 2694, column: 5, scope: !5589)
!5596 = !DILocation(line: 2698, column: 7, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5571, file: !3, line: 2698, column: 7)
!5598 = !DILocation(line: 2698, column: 12, scope: !5597)
!5599 = !DILocation(line: 2698, column: 7, scope: !5571)
!5600 = !DILocalVariable(name: "omode", scope: !5601, file: !3, line: 2700, type: !5)
!5601 = distinct !DILexicalBlock(scope: !5597, file: !3, line: 2699, column: 5)
!5602 = !DILocation(line: 2700, column: 25, scope: !5601)
!5603 = !DILocalVariable(name: "imode", scope: !5601, file: !3, line: 2700, type: !5)
!5604 = !DILocation(line: 2700, column: 32, scope: !5601)
!5605 = !DILocalVariable(name: "subalign", scope: !5601, file: !3, line: 2701, type: !7)
!5606 = !DILocation(line: 2701, column: 20, scope: !5601)
!5607 = !DILocalVariable(name: "subsize", scope: !5601, file: !3, line: 2702, type: !7)
!5608 = !DILocation(line: 2702, column: 20, scope: !5601)
!5609 = !DILocalVariable(name: "i", scope: !5601, file: !3, line: 2702, type: !7)
!5610 = !DILocation(line: 2702, column: 29, scope: !5601)
!5611 = !DILocalVariable(name: "mclass", scope: !5601, file: !3, line: 2703, type: !1651)
!5612 = !DILocation(line: 2703, column: 23, scope: !5601)
!5613 = !DILocation(line: 2705, column: 17, scope: !5601)
!5614 = !DILocation(line: 2705, column: 22, scope: !5601)
!5615 = !DILocation(line: 2705, column: 15, scope: !5601)
!5616 = !DILocation(line: 2706, column: 18, scope: !5601)
!5617 = !DILocation(line: 2706, column: 16, scope: !5601)
!5618 = !DILocation(line: 2707, column: 11, scope: !5619)
!5619 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 2707, column: 11)
!5620 = !DILocation(line: 2707, column: 24, scope: !5619)
!5621 = !DILocation(line: 2707, column: 11, scope: !5601)
!5622 = !DILocation(line: 2708, column: 11, scope: !5619)
!5623 = !DILocation(line: 2708, column: 9, scope: !5619)
!5624 = !DILocation(line: 2708, column: 2, scope: !5619)
!5625 = !DILocation(line: 2710, column: 9, scope: !5619)
!5626 = !DILocation(line: 2712, column: 30, scope: !5601)
!5627 = !DILocation(line: 2712, column: 38, scope: !5601)
!5628 = !DILocation(line: 2712, column: 55, scope: !5601)
!5629 = !DILocation(line: 2712, column: 15, scope: !5601)
!5630 = !DILocation(line: 2712, column: 13, scope: !5601)
!5631 = !DILocation(line: 2713, column: 30, scope: !5601)
!5632 = !DILocation(line: 2713, column: 35, scope: !5601)
!5633 = !DILocation(line: 2713, column: 52, scope: !5601)
!5634 = !DILocation(line: 2713, column: 15, scope: !5601)
!5635 = !DILocation(line: 2713, column: 13, scope: !5601)
!5636 = !DILocation(line: 2715, column: 14, scope: !5637)
!5637 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 2715, column: 7)
!5638 = !DILocation(line: 2715, column: 12, scope: !5637)
!5639 = !DILocation(line: 2715, column: 19, scope: !5640)
!5640 = distinct !DILexicalBlock(scope: !5637, file: !3, line: 2715, column: 7)
!5641 = !DILocation(line: 2715, column: 23, scope: !5640)
!5642 = !DILocation(line: 2715, column: 21, scope: !5640)
!5643 = !DILocation(line: 2715, column: 7, scope: !5637)
!5644 = !DILocalVariable(name: "partial", scope: !5645, file: !3, line: 2717, type: !2876)
!5645 = distinct !DILexicalBlock(scope: !5640, file: !3, line: 2716, column: 2)
!5646 = !DILocation(line: 2717, column: 8, scope: !5645)
!5647 = !DILocation(line: 2717, column: 35, scope: !5645)
!5648 = !DILocation(line: 2717, column: 42, scope: !5645)
!5649 = !DILocation(line: 2717, column: 45, scope: !5645)
!5650 = !DILocation(line: 2717, column: 52, scope: !5645)
!5651 = !DILocation(line: 2717, column: 18, scope: !5645)
!5652 = !DILocation(line: 2718, column: 9, scope: !5653)
!5653 = distinct !DILexicalBlock(scope: !5645, file: !3, line: 2718, column: 8)
!5654 = !DILocation(line: 2718, column: 17, scope: !5653)
!5655 = !DILocation(line: 2718, column: 39, scope: !5653)
!5656 = !DILocation(line: 2718, column: 48, scope: !5653)
!5657 = !DILocation(line: 2718, column: 57, scope: !5653)
!5658 = !DILocation(line: 2718, column: 21, scope: !5653)
!5659 = !DILocation(line: 2718, column: 8, scope: !5645)
!5660 = !DILocation(line: 2719, column: 6, scope: !5653)
!5661 = !DILocation(line: 2720, column: 2, scope: !5645)
!5662 = !DILocation(line: 2715, column: 34, scope: !5640)
!5663 = !DILocation(line: 2715, column: 31, scope: !5640)
!5664 = !DILocation(line: 2715, column: 7, scope: !5640)
!5665 = distinct !{!5665, !5643, !5666}
!5666 = !DILocation(line: 2720, column: 2, scope: !5637)
!5667 = !DILocation(line: 2721, column: 11, scope: !5668)
!5668 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 2721, column: 11)
!5669 = !DILocation(line: 2721, column: 16, scope: !5668)
!5670 = !DILocation(line: 2721, column: 13, scope: !5668)
!5671 = !DILocation(line: 2721, column: 11, scope: !5601)
!5672 = !DILocation(line: 2722, column: 2, scope: !5668)
!5673 = !DILocation(line: 2726, column: 7, scope: !5601)
!5674 = !DILocation(line: 2727, column: 5, scope: !5601)
!5675 = !DILocation(line: 2729, column: 3, scope: !5571)
!5676 = !DILocation(line: 2731, column: 3, scope: !5571)
!5677 = !DILocation(line: 2732, column: 1, scope: !5571)
!5678 = distinct !DISubprogram(name: "get_cdtor_priority_section", scope: !3, file: !3, line: 1564, type: !5679, scopeLine: 1565, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5679 = !DISubroutineType(types: !5680)
!5680 = !{!3109, !2798, !2820}
!5681 = !DILocalVariable(name: "priority", arg: 1, scope: !5678, file: !3, line: 1564, type: !2798)
!5682 = !DILocation(line: 1564, column: 33, scope: !5678)
!5683 = !DILocalVariable(name: "constructor_p", arg: 2, scope: !5678, file: !3, line: 1564, type: !2820)
!5684 = !DILocation(line: 1564, column: 48, scope: !5678)
!5685 = !DILocalVariable(name: "buf", scope: !5678, file: !3, line: 1566, type: !5686)
!5686 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 128, elements: !5687)
!5687 = !{!5688}
!5688 = !DISubrange(count: 16)
!5689 = !DILocation(line: 1566, column: 8, scope: !5678)
!5690 = !DILocation(line: 1569, column: 12, scope: !5678)
!5691 = !DILocation(line: 1570, column: 5, scope: !5678)
!5692 = !DILocation(line: 1574, column: 25, scope: !5678)
!5693 = !DILocation(line: 1574, column: 23, scope: !5678)
!5694 = !DILocation(line: 1569, column: 3, scope: !5678)
!5695 = !DILocation(line: 1575, column: 23, scope: !5678)
!5696 = !DILocation(line: 1575, column: 10, scope: !5678)
!5697 = !DILocation(line: 1575, column: 3, scope: !5678)
!5698 = distinct !DISubprogram(name: "default_named_section_asm_out_destructor", scope: !3, file: !3, line: 1579, type: !5468, scopeLine: 1580, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5699 = !DILocalVariable(name: "symbol", arg: 1, scope: !5698, file: !3, line: 1579, type: !2876)
!5700 = !DILocation(line: 1579, column: 47, scope: !5698)
!5701 = !DILocalVariable(name: "priority", arg: 2, scope: !5698, file: !3, line: 1579, type: !2798)
!5702 = !DILocation(line: 1579, column: 59, scope: !5698)
!5703 = !DILocalVariable(name: "sec", scope: !5698, file: !3, line: 1581, type: !3109)
!5704 = !DILocation(line: 1581, column: 12, scope: !5698)
!5705 = !DILocation(line: 1583, column: 7, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5698, file: !3, line: 1583, column: 7)
!5707 = !DILocation(line: 1583, column: 16, scope: !5706)
!5708 = !DILocation(line: 1583, column: 7, scope: !5698)
!5709 = !DILocation(line: 1584, column: 39, scope: !5706)
!5710 = !DILocation(line: 1584, column: 11, scope: !5706)
!5711 = !DILocation(line: 1584, column: 9, scope: !5706)
!5712 = !DILocation(line: 1584, column: 5, scope: !5706)
!5713 = !DILocation(line: 1587, column: 11, scope: !5706)
!5714 = !DILocation(line: 1587, column: 9, scope: !5706)
!5715 = !DILocation(line: 1589, column: 29, scope: !5698)
!5716 = !DILocation(line: 1589, column: 37, scope: !5698)
!5717 = !DILocation(line: 1589, column: 3, scope: !5698)
!5718 = !DILocation(line: 1590, column: 1, scope: !5698)
!5719 = distinct !DISubprogram(name: "default_stabs_asm_out_constructor", scope: !3, file: !3, line: 1604, type: !5468, scopeLine: 1606, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5720 = !DILocalVariable(name: "symbol", arg: 1, scope: !5719, file: !3, line: 1604, type: !2876)
!5721 = !DILocation(line: 1604, column: 40, scope: !5719)
!5722 = !DILocalVariable(name: "priority", arg: 2, scope: !5719, file: !3, line: 1605, type: !2798)
!5723 = !DILocation(line: 1605, column: 12, scope: !5719)
!5724 = !DILocation(line: 1611, column: 3, scope: !5719)
!5725 = !DILocation(line: 1612, column: 28, scope: !5719)
!5726 = !DILocation(line: 1612, column: 3, scope: !5719)
!5727 = !DILocation(line: 1616, column: 1, scope: !5719)
!5728 = distinct !DISubprogram(name: "default_named_section_asm_out_constructor", scope: !3, file: !3, line: 1619, type: !5468, scopeLine: 1620, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5729 = !DILocalVariable(name: "symbol", arg: 1, scope: !5728, file: !3, line: 1619, type: !2876)
!5730 = !DILocation(line: 1619, column: 48, scope: !5728)
!5731 = !DILocalVariable(name: "priority", arg: 2, scope: !5728, file: !3, line: 1619, type: !2798)
!5732 = !DILocation(line: 1619, column: 60, scope: !5728)
!5733 = !DILocalVariable(name: "sec", scope: !5728, file: !3, line: 1621, type: !3109)
!5734 = !DILocation(line: 1621, column: 12, scope: !5728)
!5735 = !DILocation(line: 1623, column: 7, scope: !5736)
!5736 = distinct !DILexicalBlock(scope: !5728, file: !3, line: 1623, column: 7)
!5737 = !DILocation(line: 1623, column: 16, scope: !5736)
!5738 = !DILocation(line: 1623, column: 7, scope: !5728)
!5739 = !DILocation(line: 1624, column: 39, scope: !5736)
!5740 = !DILocation(line: 1624, column: 11, scope: !5736)
!5741 = !DILocation(line: 1624, column: 9, scope: !5736)
!5742 = !DILocation(line: 1624, column: 5, scope: !5736)
!5743 = !DILocation(line: 1627, column: 11, scope: !5736)
!5744 = !DILocation(line: 1627, column: 9, scope: !5736)
!5745 = !DILocation(line: 1629, column: 29, scope: !5728)
!5746 = !DILocation(line: 1629, column: 37, scope: !5728)
!5747 = !DILocation(line: 1629, column: 3, scope: !5728)
!5748 = !DILocation(line: 1630, column: 1, scope: !5728)
!5749 = distinct !DISubprogram(name: "notice_global_symbol", scope: !3, file: !3, line: 1656, type: !5044, scopeLine: 1657, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5750 = !DILocalVariable(name: "decl", arg: 1, scope: !5749, file: !3, line: 1656, type: !2702)
!5751 = !DILocation(line: 1656, column: 28, scope: !5749)
!5752 = !DILocalVariable(name: "type", scope: !5749, file: !3, line: 1658, type: !5753)
!5753 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2692, size: 64)
!5754 = !DILocation(line: 1658, column: 16, scope: !5749)
!5755 = !DILocation(line: 1660, column: 7, scope: !5756)
!5756 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 1660, column: 7)
!5757 = !DILocation(line: 1661, column: 7, scope: !5756)
!5758 = !DILocation(line: 1661, column: 11, scope: !5756)
!5759 = !DILocation(line: 1662, column: 7, scope: !5756)
!5760 = !DILocation(line: 1662, column: 10, scope: !5756)
!5761 = !DILocation(line: 1663, column: 7, scope: !5756)
!5762 = !DILocation(line: 1663, column: 11, scope: !5756)
!5763 = !DILocation(line: 1664, column: 7, scope: !5756)
!5764 = !DILocation(line: 1664, column: 11, scope: !5756)
!5765 = !DILocation(line: 1664, column: 28, scope: !5756)
!5766 = !DILocation(line: 1665, column: 4, scope: !5756)
!5767 = !DILocation(line: 1665, column: 8, scope: !5756)
!5768 = !DILocation(line: 1665, column: 25, scope: !5756)
!5769 = !DILocation(line: 1666, column: 8, scope: !5756)
!5770 = !DILocation(line: 1666, column: 12, scope: !5756)
!5771 = !DILocation(line: 1667, column: 5, scope: !5756)
!5772 = !DILocation(line: 1667, column: 9, scope: !5756)
!5773 = !DILocation(line: 1667, column: 29, scope: !5756)
!5774 = !DILocation(line: 1668, column: 9, scope: !5756)
!5775 = !DILocation(line: 1668, column: 12, scope: !5756)
!5776 = !DILocation(line: 1668, column: 35, scope: !5756)
!5777 = !DILocation(line: 1668, column: 32, scope: !5756)
!5778 = !DILocation(line: 1669, column: 7, scope: !5756)
!5779 = !DILocation(line: 1669, column: 11, scope: !5756)
!5780 = !DILocation(line: 1660, column: 7, scope: !5749)
!5781 = !DILocation(line: 1670, column: 5, scope: !5756)
!5782 = !DILocation(line: 1674, column: 7, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 1674, column: 7)
!5784 = !DILocation(line: 1674, column: 24, scope: !5783)
!5785 = !DILocation(line: 1674, column: 27, scope: !5783)
!5786 = !DILocation(line: 1674, column: 48, scope: !5783)
!5787 = !DILocation(line: 1674, column: 51, scope: !5783)
!5788 = !DILocation(line: 1674, column: 7, scope: !5749)
!5789 = !DILocation(line: 1675, column: 10, scope: !5783)
!5790 = !DILocation(line: 1675, column: 5, scope: !5783)
!5791 = !DILocation(line: 1677, column: 9, scope: !5792)
!5792 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 1677, column: 7)
!5793 = !DILocation(line: 1677, column: 8, scope: !5792)
!5794 = !DILocation(line: 1677, column: 7, scope: !5749)
!5795 = !DILocalVariable(name: "p", scope: !5796, file: !3, line: 1679, type: !2692)
!5796 = distinct !DILexicalBlock(scope: !5792, file: !3, line: 1678, column: 5)
!5797 = !DILocation(line: 1679, column: 19, scope: !5796)
!5798 = !DILocalVariable(name: "name", scope: !5796, file: !3, line: 1680, type: !2692)
!5799 = !DILocation(line: 1680, column: 19, scope: !5796)
!5800 = !DILocalVariable(name: "decl_rtl", scope: !5796, file: !3, line: 1681, type: !2876)
!5801 = !DILocation(line: 1681, column: 11, scope: !5796)
!5802 = !DILocation(line: 1681, column: 22, scope: !5796)
!5803 = !DILocation(line: 1683, column: 19, scope: !5796)
!5804 = !DILocation(line: 1683, column: 40, scope: !5796)
!5805 = !DILocation(line: 1683, column: 11, scope: !5796)
!5806 = !DILocation(line: 1683, column: 9, scope: !5796)
!5807 = !DILocation(line: 1684, column: 14, scope: !5796)
!5808 = !DILocation(line: 1684, column: 12, scope: !5796)
!5809 = !DILocation(line: 1686, column: 15, scope: !5796)
!5810 = !DILocation(line: 1686, column: 8, scope: !5796)
!5811 = !DILocation(line: 1686, column: 13, scope: !5796)
!5812 = !DILocation(line: 1687, column: 5, scope: !5796)
!5813 = !DILocation(line: 1688, column: 1, scope: !5749)
!5814 = distinct !DISubprogram(name: "assemble_start_function", scope: !3, file: !3, line: 1696, type: !4816, scopeLine: 1697, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!5815 = !DILocalVariable(name: "decl", arg: 1, scope: !5814, file: !3, line: 1696, type: !2702)
!5816 = !DILocation(line: 1696, column: 31, scope: !5814)
!5817 = !DILocalVariable(name: "fnname", arg: 2, scope: !5814, file: !3, line: 1696, type: !2692)
!5818 = !DILocation(line: 1696, column: 49, scope: !5814)
!5819 = !DILocalVariable(name: "align", scope: !5814, file: !3, line: 1698, type: !2798)
!5820 = !DILocation(line: 1698, column: 7, scope: !5814)
!5821 = !DILocalVariable(name: "tmp_label", scope: !5814, file: !3, line: 1699, type: !5822)
!5822 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 800, elements: !5823)
!5823 = !{!5824}
!5824 = !DISubrange(count: 100)
!5825 = !DILocation(line: 1699, column: 8, scope: !5814)
!5826 = !DILocalVariable(name: "hot_label_written", scope: !5814, file: !3, line: 1700, type: !2820)
!5827 = !DILocation(line: 1700, column: 8, scope: !5814)
!5828 = !DILocation(line: 1702, column: 48, scope: !5814)
!5829 = !DILocation(line: 1704, column: 32, scope: !5814)
!5830 = !DILocation(line: 1705, column: 7, scope: !5831)
!5831 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 1705, column: 7)
!5832 = !DILocation(line: 1705, column: 7, scope: !5814)
!5833 = !DILocation(line: 1707, column: 7, scope: !5834)
!5834 = distinct !DILexicalBlock(scope: !5831, file: !3, line: 1706, column: 5)
!5835 = !DILocation(line: 1707, column: 7, scope: !5836)
!5836 = distinct !DILexicalBlock(scope: !5834, file: !3, line: 1707, column: 7)
!5837 = !DILocation(line: 1708, column: 45, scope: !5834)
!5838 = !DILocation(line: 1708, column: 43, scope: !5834)
!5839 = !DILocation(line: 1709, column: 7, scope: !5834)
!5840 = !DILocation(line: 1709, column: 7, scope: !5841)
!5841 = distinct !DILexicalBlock(scope: !5834, file: !3, line: 1709, column: 7)
!5842 = !DILocation(line: 1710, column: 46, scope: !5834)
!5843 = !DILocation(line: 1710, column: 44, scope: !5834)
!5844 = !DILocation(line: 1711, column: 7, scope: !5834)
!5845 = !DILocation(line: 1711, column: 7, scope: !5846)
!5846 = distinct !DILexicalBlock(scope: !5834, file: !3, line: 1711, column: 7)
!5847 = !DILocation(line: 1712, column: 49, scope: !5834)
!5848 = !DILocation(line: 1712, column: 47, scope: !5834)
!5849 = !DILocation(line: 1713, column: 7, scope: !5834)
!5850 = !DILocation(line: 1713, column: 7, scope: !5851)
!5851 = distinct !DILexicalBlock(scope: !5834, file: !3, line: 1713, column: 7)
!5852 = !DILocation(line: 1714, column: 50, scope: !5834)
!5853 = !DILocation(line: 1714, column: 48, scope: !5834)
!5854 = !DILocation(line: 1715, column: 20, scope: !5834)
!5855 = !DILocation(line: 1716, column: 5, scope: !5834)
!5856 = !DILocation(line: 1719, column: 43, scope: !5857)
!5857 = distinct !DILexicalBlock(scope: !5831, file: !3, line: 1718, column: 5)
!5858 = !DILocation(line: 1720, column: 44, scope: !5857)
!5859 = !DILocation(line: 1721, column: 47, scope: !5857)
!5860 = !DILocation(line: 1722, column: 48, scope: !5857)
!5861 = !DILocation(line: 1727, column: 3, scope: !5814)
!5862 = !DILocation(line: 1730, column: 27, scope: !5863)
!5863 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 1729, column: 7)
!5864 = !DILocation(line: 1730, column: 35, scope: !5863)
!5865 = !DILocation(line: 1730, column: 5, scope: !5863)
!5866 = !DILocation(line: 1732, column: 27, scope: !5814)
!5867 = !DILocation(line: 1732, column: 36, scope: !5814)
!5868 = !DILocation(line: 1732, column: 3, scope: !5814)
!5869 = !DILocation(line: 1739, column: 7, scope: !5870)
!5870 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 1739, column: 7)
!5871 = !DILocation(line: 1739, column: 7, scope: !5814)
!5872 = !DILocation(line: 1741, column: 26, scope: !5873)
!5873 = distinct !DILexicalBlock(scope: !5870, file: !3, line: 1740, column: 5)
!5874 = !DILocation(line: 1741, column: 7, scope: !5873)
!5875 = !DILocation(line: 1742, column: 23, scope: !5873)
!5876 = !DILocation(line: 1742, column: 7, scope: !5873)
!5877 = !DILocation(line: 1743, column: 7, scope: !5873)
!5878 = !DILocation(line: 1743, column: 7, scope: !5879)
!5879 = distinct !DILexicalBlock(scope: !5873, file: !3, line: 1743, column: 7)
!5880 = !DILocation(line: 1748, column: 12, scope: !5881)
!5881 = distinct !DILexicalBlock(scope: !5873, file: !3, line: 1748, column: 11)
!5882 = !DILocation(line: 1748, column: 18, scope: !5881)
!5883 = !DILocation(line: 1749, column: 4, scope: !5881)
!5884 = !DILocation(line: 1749, column: 7, scope: !5881)
!5885 = !DILocation(line: 1749, column: 47, scope: !5881)
!5886 = !DILocation(line: 1748, column: 11, scope: !5873)
!5887 = !DILocation(line: 1751, column: 23, scope: !5888)
!5888 = distinct !DILexicalBlock(scope: !5881, file: !3, line: 1750, column: 2)
!5889 = !DILocation(line: 1751, column: 4, scope: !5888)
!5890 = !DILocation(line: 1752, column: 20, scope: !5888)
!5891 = !DILocation(line: 1752, column: 4, scope: !5888)
!5892 = !DILocation(line: 1753, column: 4, scope: !5888)
!5893 = !DILocation(line: 1753, column: 4, scope: !5894)
!5894 = distinct !DILexicalBlock(scope: !5888, file: !3, line: 1753, column: 4)
!5895 = !DILocation(line: 1754, column: 22, scope: !5888)
!5896 = !DILocation(line: 1755, column: 33, scope: !5888)
!5897 = !DILocation(line: 1756, column: 2, scope: !5888)
!5898 = !DILocation(line: 1757, column: 5, scope: !5873)
!5899 = !DILocation(line: 1758, column: 12, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5870, file: !3, line: 1758, column: 12)
!5901 = !DILocation(line: 1758, column: 12, scope: !5870)
!5902 = !DILocation(line: 1765, column: 7, scope: !5903)
!5903 = distinct !DILexicalBlock(scope: !5900, file: !3, line: 1759, column: 5)
!5904 = !DILocation(line: 1767, column: 29, scope: !5905)
!5905 = distinct !DILexicalBlock(scope: !5903, file: !3, line: 1767, column: 11)
!5906 = !DILocation(line: 1767, column: 11, scope: !5905)
!5907 = !DILocation(line: 1768, column: 4, scope: !5905)
!5908 = !DILocation(line: 1768, column: 15, scope: !5905)
!5909 = !DILocation(line: 1769, column: 26, scope: !5905)
!5910 = !DILocation(line: 1768, column: 7, scope: !5905)
!5911 = !DILocation(line: 1769, column: 54, scope: !5905)
!5912 = !DILocation(line: 1767, column: 11, scope: !5903)
!5913 = !DILocation(line: 1770, column: 31, scope: !5905)
!5914 = !DILocation(line: 1770, column: 2, scope: !5905)
!5915 = !DILocation(line: 1771, column: 5, scope: !5903)
!5916 = !DILocation(line: 1773, column: 23, scope: !5814)
!5917 = !DILocation(line: 1773, column: 21, scope: !5814)
!5918 = !DILocation(line: 1777, column: 40, scope: !5814)
!5919 = !DILocation(line: 1777, column: 22, scope: !5814)
!5920 = !DILocation(line: 1777, column: 3, scope: !5814)
!5921 = !DILocation(line: 1778, column: 7, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 1778, column: 7)
!5923 = !DILocation(line: 1779, column: 7, scope: !5922)
!5924 = !DILocation(line: 1779, column: 11, scope: !5922)
!5925 = !DILocation(line: 1778, column: 7, scope: !5814)
!5926 = !DILocation(line: 1780, column: 5, scope: !5922)
!5927 = !DILocation(line: 1780, column: 5, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5922, file: !3, line: 1780, column: 5)
!5929 = !DILocation(line: 1783, column: 23, scope: !5814)
!5930 = !DILocation(line: 1783, column: 41, scope: !5814)
!5931 = !DILocation(line: 1783, column: 11, scope: !5814)
!5932 = !DILocation(line: 1783, column: 9, scope: !5814)
!5933 = !DILocation(line: 1784, column: 7, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 1784, column: 7)
!5935 = !DILocation(line: 1784, column: 13, scope: !5934)
!5936 = !DILocation(line: 1784, column: 7, scope: !5814)
!5937 = !DILocation(line: 1786, column: 7, scope: !5938)
!5938 = distinct !DILexicalBlock(scope: !5939, file: !3, line: 1786, column: 7)
!5939 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 1785, column: 5)
!5940 = !DILocation(line: 1786, column: 7, scope: !5939)
!5941 = !DILocation(line: 1787, column: 5, scope: !5939)
!5942 = !DILocation(line: 1792, column: 9, scope: !5943)
!5943 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 1792, column: 7)
!5944 = !DILocation(line: 1793, column: 7, scope: !5943)
!5945 = !DILocation(line: 1793, column: 10, scope: !5943)
!5946 = !DILocation(line: 1793, column: 32, scope: !5943)
!5947 = !DILocation(line: 1793, column: 30, scope: !5943)
!5948 = !DILocation(line: 1794, column: 7, scope: !5943)
!5949 = !DILocation(line: 1794, column: 41, scope: !5943)
!5950 = !DILocation(line: 1794, column: 10, scope: !5943)
!5951 = !DILocation(line: 1792, column: 7, scope: !5814)
!5952 = !DILocation(line: 1797, column: 7, scope: !5953)
!5953 = distinct !DILexicalBlock(scope: !5943, file: !3, line: 1795, column: 5)
!5954 = !DILocation(line: 1797, column: 7, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5956, file: !3, line: 1797, column: 7)
!5956 = distinct !DILexicalBlock(scope: !5953, file: !3, line: 1797, column: 7)
!5957 = !DILocation(line: 1797, column: 7, scope: !5956)
!5958 = !DILocation(line: 1797, column: 7, scope: !5959)
!5959 = distinct !DILexicalBlock(scope: !5960, file: !3, line: 1797, column: 7)
!5960 = distinct !DILexicalBlock(scope: !5955, file: !3, line: 1797, column: 7)
!5961 = !DILocation(line: 1797, column: 7, scope: !5960)
!5962 = !DILocation(line: 1797, column: 7, scope: !5963)
!5963 = distinct !DILexicalBlock(scope: !5959, file: !3, line: 1797, column: 7)
!5964 = !DILocation(line: 1797, column: 7, scope: !5965)
!5965 = distinct !DILexicalBlock(scope: !5963, file: !3, line: 1797, column: 7)
!5966 = !DILocation(line: 1802, column: 5, scope: !5953)
!5967 = !DILocation(line: 1808, column: 8, scope: !5968)
!5968 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 1808, column: 7)
!5969 = !DILocation(line: 1808, column: 7, scope: !5814)
!5970 = !DILocation(line: 1809, column: 7, scope: !5968)
!5971 = !DILocation(line: 1809, column: 20, scope: !5968)
!5972 = !DILocation(line: 1809, column: 37, scope: !5968)
!5973 = !DILocation(line: 1809, column: 5, scope: !5968)
!5974 = !DILocation(line: 1813, column: 7, scope: !5975)
!5975 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 1813, column: 7)
!5976 = !DILocation(line: 1813, column: 7, scope: !5814)
!5977 = !DILocation(line: 1815, column: 29, scope: !5978)
!5978 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 1814, column: 5)
!5979 = !DILocation(line: 1815, column: 7, scope: !5978)
!5980 = !DILocation(line: 1817, column: 23, scope: !5978)
!5981 = !DILocation(line: 1817, column: 7, scope: !5978)
!5982 = !DILocation(line: 1819, column: 34, scope: !5978)
!5983 = !DILocation(line: 1819, column: 7, scope: !5978)
!5984 = !DILocation(line: 1820, column: 5, scope: !5978)
!5985 = !DILocation(line: 1822, column: 7, scope: !5986)
!5986 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 1822, column: 7)
!5987 = !DILocation(line: 1822, column: 7, scope: !5814)
!5988 = !DILocation(line: 1823, column: 21, scope: !5986)
!5989 = !DILocation(line: 1823, column: 42, scope: !5986)
!5990 = !DILocation(line: 1823, column: 5, scope: !5986)
!5991 = !DILocation(line: 1827, column: 3, scope: !5814)
!5992 = !DILocation(line: 1827, column: 3, scope: !5993)
!5993 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 1827, column: 3)
!5994 = !DILocation(line: 1827, column: 3, scope: !5995)
!5995 = distinct !DILexicalBlock(scope: !5993, file: !3, line: 1827, column: 3)
!5996 = !DILocation(line: 1827, column: 3, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5993, file: !3, line: 1827, column: 3)
!5998 = !DILocation(line: 1832, column: 1, scope: !5814)
!5999 = distinct !DISubprogram(name: "output_constant_pool", scope: !3, file: !3, line: 3995, type: !6000, scopeLine: 3997, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6000 = !DISubroutineType(types: !6001)
!6001 = !{null, !2692, !2702}
!6002 = !DILocalVariable(name: "fnname", arg: 1, scope: !5999, file: !3, line: 3995, type: !2692)
!6003 = !DILocation(line: 3995, column: 35, scope: !5999)
!6004 = !DILocalVariable(name: "fndecl", arg: 2, scope: !5999, file: !3, line: 3996, type: !2702)
!6005 = !DILocation(line: 3996, column: 14, scope: !5999)
!6006 = !DILocalVariable(name: "pool", scope: !5999, file: !3, line: 3998, type: !3791)
!6007 = !DILocation(line: 3998, column: 29, scope: !5999)
!6008 = !DILocation(line: 3998, column: 49, scope: !5999)
!6009 = !DILocation(line: 4003, column: 3, scope: !5999)
!6010 = !DILocation(line: 4009, column: 34, scope: !5999)
!6011 = !DILocation(line: 4009, column: 3, scope: !5999)
!6012 = !DILocation(line: 4014, column: 1, scope: !5999)
!6013 = distinct !DISubprogram(name: "assemble_name", scope: !3, file: !3, line: 2501, type: !6014, scopeLine: 2502, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6014 = !DISubroutineType(types: !6015)
!6015 = !{null, !6016, !2692}
!6016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6017, size: 64)
!6017 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !6018, line: 7, baseType: !6019)
!6018 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!6019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !6020, line: 49, size: 1728, elements: !6021)
!6020 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!6021 = !{!6022, !6023, !6024, !6025, !6026, !6027, !6028, !6029, !6030, !6031, !6032, !6033, !6034, !6037, !6039, !6040, !6041, !6044, !6045, !6046, !6047, !6050, !6052, !6055, !6058, !6059, !6060, !6061, !6062}
!6022 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6019, file: !6020, line: 51, baseType: !2798, size: 32)
!6023 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6019, file: !6020, line: 54, baseType: !2964, size: 64, offset: 64)
!6024 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6019, file: !6020, line: 55, baseType: !2964, size: 64, offset: 128)
!6025 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6019, file: !6020, line: 56, baseType: !2964, size: 64, offset: 192)
!6026 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6019, file: !6020, line: 57, baseType: !2964, size: 64, offset: 256)
!6027 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6019, file: !6020, line: 58, baseType: !2964, size: 64, offset: 320)
!6028 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6019, file: !6020, line: 59, baseType: !2964, size: 64, offset: 384)
!6029 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6019, file: !6020, line: 60, baseType: !2964, size: 64, offset: 448)
!6030 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6019, file: !6020, line: 61, baseType: !2964, size: 64, offset: 512)
!6031 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6019, file: !6020, line: 64, baseType: !2964, size: 64, offset: 576)
!6032 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6019, file: !6020, line: 65, baseType: !2964, size: 64, offset: 640)
!6033 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6019, file: !6020, line: 66, baseType: !2964, size: 64, offset: 704)
!6034 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6019, file: !6020, line: 68, baseType: !6035, size: 64, offset: 768)
!6035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6036, size: 64)
!6036 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !6020, line: 36, flags: DIFlagFwdDecl)
!6037 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6019, file: !6020, line: 70, baseType: !6038, size: 64, offset: 832)
!6038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6019, size: 64)
!6039 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6019, file: !6020, line: 72, baseType: !2798, size: 32, offset: 896)
!6040 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6019, file: !6020, line: 73, baseType: !2798, size: 32, offset: 928)
!6041 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6019, file: !6020, line: 74, baseType: !6042, size: 64, offset: 960)
!6042 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !6043, line: 152, baseType: !2757)
!6043 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!6044 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6019, file: !6020, line: 77, baseType: !3784, size: 16, offset: 1024)
!6045 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6019, file: !6020, line: 78, baseType: !3607, size: 8, offset: 1040)
!6046 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6019, file: !6020, line: 79, baseType: !2800, size: 8, offset: 1048)
!6047 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6019, file: !6020, line: 81, baseType: !6048, size: 64, offset: 1088)
!6048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6049, size: 64)
!6049 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !6020, line: 43, baseType: null)
!6050 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6019, file: !6020, line: 89, baseType: !6051, size: 64, offset: 1152)
!6051 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !6043, line: 153, baseType: !2757)
!6052 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6019, file: !6020, line: 91, baseType: !6053, size: 64, offset: 1216)
!6053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6054, size: 64)
!6054 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !6020, line: 37, flags: DIFlagFwdDecl)
!6055 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6019, file: !6020, line: 92, baseType: !6056, size: 64, offset: 1280)
!6056 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6057, size: 64)
!6057 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !6020, line: 38, flags: DIFlagFwdDecl)
!6058 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6019, file: !6020, line: 93, baseType: !6038, size: 64, offset: 1344)
!6059 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6019, file: !6020, line: 94, baseType: !2691, size: 64, offset: 1408)
!6060 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6019, file: !6020, line: 95, baseType: !3306, size: 64, offset: 1472)
!6061 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6019, file: !6020, line: 96, baseType: !2798, size: 32, offset: 1536)
!6062 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6019, file: !6020, line: 98, baseType: !6063, size: 160, offset: 1568)
!6063 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 160, elements: !6064)
!6064 = !{!6065}
!6065 = !DISubrange(count: 20)
!6066 = !DILocalVariable(name: "file", arg: 1, scope: !6013, file: !3, line: 2501, type: !6016)
!6067 = !DILocation(line: 2501, column: 22, scope: !6013)
!6068 = !DILocalVariable(name: "name", arg: 2, scope: !6013, file: !3, line: 2501, type: !2692)
!6069 = !DILocation(line: 2501, column: 40, scope: !6013)
!6070 = !DILocalVariable(name: "real_name", scope: !6013, file: !3, line: 2503, type: !2692)
!6071 = !DILocation(line: 2503, column: 15, scope: !6013)
!6072 = !DILocalVariable(name: "id", scope: !6013, file: !3, line: 2504, type: !2702)
!6073 = !DILocation(line: 2504, column: 8, scope: !6013)
!6074 = !DILocation(line: 2506, column: 23, scope: !6013)
!6075 = !DILocation(line: 2506, column: 44, scope: !6013)
!6076 = !DILocation(line: 2506, column: 15, scope: !6013)
!6077 = !DILocation(line: 2506, column: 13, scope: !6013)
!6078 = !DILocation(line: 2508, column: 30, scope: !6013)
!6079 = !DILocation(line: 2508, column: 8, scope: !6013)
!6080 = !DILocation(line: 2508, column: 6, scope: !6013)
!6081 = !DILocation(line: 2509, column: 7, scope: !6082)
!6082 = distinct !DILexicalBlock(scope: !6013, file: !3, line: 2509, column: 7)
!6083 = !DILocation(line: 2509, column: 7, scope: !6013)
!6084 = !DILocalVariable(name: "id_orig", scope: !6085, file: !3, line: 2511, type: !2702)
!6085 = distinct !DILexicalBlock(scope: !6082, file: !3, line: 2510, column: 5)
!6086 = !DILocation(line: 2511, column: 12, scope: !6085)
!6087 = !DILocation(line: 2511, column: 22, scope: !6085)
!6088 = !DILocation(line: 2513, column: 24, scope: !6085)
!6089 = !DILocation(line: 2513, column: 7, scope: !6085)
!6090 = !DILocation(line: 2514, column: 7, scope: !6085)
!6091 = !DILocation(line: 2515, column: 11, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !6085, file: !3, line: 2515, column: 11)
!6093 = !DILocation(line: 2515, column: 17, scope: !6092)
!6094 = !DILocation(line: 2515, column: 14, scope: !6092)
!6095 = !DILocation(line: 2515, column: 11, scope: !6085)
!6096 = !DILocation(line: 2516, column: 9, scope: !6092)
!6097 = !DILocation(line: 2516, column: 7, scope: !6092)
!6098 = !DILocation(line: 2516, column: 2, scope: !6092)
!6099 = !DILocation(line: 2517, column: 7, scope: !6085)
!6100 = !DILocation(line: 2518, column: 5, scope: !6085)
!6101 = !DILocation(line: 2520, column: 22, scope: !6013)
!6102 = !DILocation(line: 2520, column: 28, scope: !6013)
!6103 = !DILocation(line: 2520, column: 3, scope: !6013)
!6104 = !DILocation(line: 2521, column: 1, scope: !6013)
!6105 = distinct !DISubprogram(name: "globalize_decl", scope: !3, file: !3, line: 5475, type: !5044, scopeLine: 5476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6106 = !DILocalVariable(name: "decl", arg: 1, scope: !6105, file: !3, line: 5475, type: !2702)
!6107 = !DILocation(line: 5475, column: 22, scope: !6105)
!6108 = !DILocation(line: 5479, column: 7, scope: !6109)
!6109 = distinct !DILexicalBlock(scope: !6105, file: !3, line: 5479, column: 7)
!6110 = !DILocation(line: 5479, column: 7, scope: !6105)
!6111 = !DILocalVariable(name: "name", scope: !6112, file: !3, line: 5481, type: !2692)
!6112 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 5480, column: 5)
!6113 = !DILocation(line: 5481, column: 19, scope: !6112)
!6114 = !DILocation(line: 5481, column: 26, scope: !6112)
!6115 = !DILocalVariable(name: "p", scope: !6112, file: !3, line: 5482, type: !3499)
!6116 = !DILocation(line: 5482, column: 13, scope: !6112)
!6117 = !DILocalVariable(name: "t", scope: !6112, file: !3, line: 5482, type: !2702)
!6118 = !DILocation(line: 5482, column: 16, scope: !6112)
!6119 = !DILocation(line: 5487, column: 7, scope: !6112)
!6120 = !DILocation(line: 5487, column: 7, scope: !6121)
!6121 = distinct !DILexicalBlock(scope: !6112, file: !3, line: 5487, column: 7)
!6122 = !DILocation(line: 5492, column: 14, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !6112, file: !3, line: 5492, column: 7)
!6124 = !DILocation(line: 5492, column: 12, scope: !6123)
!6125 = !DILocation(line: 5492, column: 35, scope: !6126)
!6126 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 5492, column: 7)
!6127 = !DILocation(line: 5492, column: 34, scope: !6126)
!6128 = !DILocation(line: 5492, column: 32, scope: !6126)
!6129 = !DILocation(line: 5492, column: 7, scope: !6123)
!6130 = !DILocation(line: 5494, column: 8, scope: !6131)
!6131 = distinct !DILexicalBlock(scope: !6132, file: !3, line: 5494, column: 8)
!6132 = distinct !DILexicalBlock(scope: !6126, file: !3, line: 5493, column: 2)
!6133 = !DILocation(line: 5494, column: 38, scope: !6131)
!6134 = !DILocation(line: 5494, column: 35, scope: !6131)
!6135 = !DILocation(line: 5494, column: 8, scope: !6132)
!6136 = !DILocation(line: 5495, column: 11, scope: !6131)
!6137 = !DILocation(line: 5495, column: 7, scope: !6131)
!6138 = !DILocation(line: 5495, column: 9, scope: !6131)
!6139 = !DILocation(line: 5495, column: 6, scope: !6131)
!6140 = !DILocation(line: 5497, column: 11, scope: !6131)
!6141 = !DILocation(line: 5497, column: 8, scope: !6131)
!6142 = !DILocation(line: 5492, column: 7, scope: !6126)
!6143 = distinct !{!6143, !6129, !6144}
!6144 = !DILocation(line: 5498, column: 2, scope: !6123)
!6145 = !DILocation(line: 5502, column: 14, scope: !6146)
!6146 = distinct !DILexicalBlock(scope: !6112, file: !3, line: 5502, column: 7)
!6147 = !DILocation(line: 5502, column: 12, scope: !6146)
!6148 = !DILocation(line: 5502, column: 40, scope: !6149)
!6149 = distinct !DILexicalBlock(scope: !6146, file: !3, line: 5502, column: 7)
!6150 = !DILocation(line: 5502, column: 39, scope: !6149)
!6151 = !DILocation(line: 5502, column: 37, scope: !6149)
!6152 = !DILocation(line: 5502, column: 7, scope: !6146)
!6153 = !DILocation(line: 5504, column: 8, scope: !6154)
!6154 = distinct !DILexicalBlock(scope: !6155, file: !3, line: 5504, column: 8)
!6155 = distinct !DILexicalBlock(scope: !6149, file: !3, line: 5503, column: 2)
!6156 = !DILocation(line: 5505, column: 47, scope: !6154)
!6157 = !DILocation(line: 5505, column: 11, scope: !6154)
!6158 = !DILocation(line: 5505, column: 8, scope: !6154)
!6159 = !DILocation(line: 5504, column: 8, scope: !6155)
!6160 = !DILocation(line: 5506, column: 11, scope: !6154)
!6161 = !DILocation(line: 5506, column: 7, scope: !6154)
!6162 = !DILocation(line: 5506, column: 9, scope: !6154)
!6163 = !DILocation(line: 5506, column: 6, scope: !6154)
!6164 = !DILocation(line: 5508, column: 11, scope: !6154)
!6165 = !DILocation(line: 5508, column: 8, scope: !6154)
!6166 = !DILocation(line: 5502, column: 7, scope: !6149)
!6167 = distinct !{!6167, !6152, !6168}
!6168 = !DILocation(line: 5509, column: 2, scope: !6146)
!6169 = !DILocation(line: 5511, column: 7, scope: !6112)
!6170 = !DILocation(line: 5515, column: 19, scope: !6105)
!6171 = !DILocation(line: 5515, column: 40, scope: !6105)
!6172 = !DILocation(line: 5515, column: 54, scope: !6105)
!6173 = !DILocation(line: 5515, column: 3, scope: !6105)
!6174 = !DILocation(line: 5516, column: 1, scope: !6105)
!6175 = distinct !DISubprogram(name: "maybe_assemble_visibility", scope: !3, file: !3, line: 5849, type: !6176, scopeLine: 5850, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6176 = !DISubroutineType(types: !6177)
!6177 = !{!2798, !2702}
!6178 = !DILocalVariable(name: "decl", arg: 1, scope: !6175, file: !3, line: 5849, type: !2702)
!6179 = !DILocation(line: 5849, column: 33, scope: !6175)
!6180 = !DILocalVariable(name: "vis", scope: !6175, file: !3, line: 5851, type: !1683)
!6181 = !DILocation(line: 5851, column: 26, scope: !6175)
!6182 = !DILocation(line: 5851, column: 32, scope: !6175)
!6183 = !DILocation(line: 5853, column: 7, scope: !6184)
!6184 = distinct !DILexicalBlock(scope: !6175, file: !3, line: 5853, column: 7)
!6185 = !DILocation(line: 5853, column: 11, scope: !6184)
!6186 = !DILocation(line: 5853, column: 7, scope: !6175)
!6187 = !DILocation(line: 5855, column: 23, scope: !6188)
!6188 = distinct !DILexicalBlock(scope: !6184, file: !3, line: 5854, column: 5)
!6189 = !DILocation(line: 5855, column: 35, scope: !6188)
!6190 = !DILocation(line: 5855, column: 41, scope: !6188)
!6191 = !DILocation(line: 5855, column: 7, scope: !6188)
!6192 = !DILocation(line: 5856, column: 7, scope: !6188)
!6193 = !DILocation(line: 5859, column: 5, scope: !6184)
!6194 = !DILocation(line: 5860, column: 1, scope: !6175)
!6195 = distinct !DISubprogram(name: "assemble_end_function", scope: !3, file: !3, line: 1838, type: !4816, scopeLine: 1839, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6196 = !DILocalVariable(name: "decl", arg: 1, scope: !6195, file: !3, line: 1838, type: !2702)
!6197 = !DILocation(line: 1838, column: 29, scope: !6195)
!6198 = !DILocalVariable(name: "fnname", arg: 2, scope: !6195, file: !3, line: 1838, type: !2692)
!6199 = !DILocation(line: 1838, column: 47, scope: !6195)
!6200 = !DILocation(line: 1842, column: 7, scope: !6201)
!6201 = distinct !DILexicalBlock(scope: !6195, file: !3, line: 1842, column: 7)
!6202 = !DILocation(line: 1842, column: 7, scope: !6195)
!6203 = !DILocation(line: 1843, column: 42, scope: !6201)
!6204 = !DILocation(line: 1843, column: 24, scope: !6201)
!6205 = !DILocation(line: 1843, column: 5, scope: !6201)
!6206 = !DILocation(line: 1844, column: 3, scope: !6195)
!6207 = !DILocation(line: 1844, column: 3, scope: !6208)
!6208 = distinct !DILexicalBlock(scope: !6209, file: !3, line: 1844, column: 3)
!6209 = distinct !DILexicalBlock(scope: !6195, file: !3, line: 1844, column: 3)
!6210 = !DILocation(line: 1844, column: 3, scope: !6209)
!6211 = !DILocation(line: 1844, column: 3, scope: !6212)
!6212 = distinct !DILexicalBlock(scope: !6208, file: !3, line: 1844, column: 3)
!6213 = !DILocation(line: 1853, column: 7, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6195, file: !3, line: 1853, column: 7)
!6215 = !DILocation(line: 1853, column: 7, scope: !6195)
!6216 = !DILocalVariable(name: "save_text_section", scope: !6217, file: !3, line: 1855, type: !3109)
!6217 = distinct !DILexicalBlock(scope: !6214, file: !3, line: 1854, column: 5)
!6218 = !DILocation(line: 1855, column: 16, scope: !6217)
!6219 = !DILocation(line: 1857, column: 27, scope: !6217)
!6220 = !DILocation(line: 1857, column: 25, scope: !6217)
!6221 = !DILocation(line: 1858, column: 26, scope: !6217)
!6222 = !DILocation(line: 1858, column: 7, scope: !6217)
!6223 = !DILocation(line: 1859, column: 7, scope: !6217)
!6224 = !DILocation(line: 1859, column: 7, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6217, file: !3, line: 1859, column: 7)
!6226 = !DILocation(line: 1860, column: 11, scope: !6227)
!6227 = distinct !DILexicalBlock(scope: !6217, file: !3, line: 1860, column: 11)
!6228 = !DILocation(line: 1860, column: 11, scope: !6217)
!6229 = !DILocation(line: 1861, column: 21, scope: !6227)
!6230 = !DILocation(line: 1861, column: 2, scope: !6227)
!6231 = !DILocation(line: 1863, column: 39, scope: !6227)
!6232 = !DILocation(line: 1863, column: 21, scope: !6227)
!6233 = !DILocation(line: 1863, column: 2, scope: !6227)
!6234 = !DILocation(line: 1864, column: 7, scope: !6217)
!6235 = !DILocation(line: 1864, column: 7, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6217, file: !3, line: 1864, column: 7)
!6237 = !DILocation(line: 1865, column: 26, scope: !6217)
!6238 = !DILocation(line: 1865, column: 7, scope: !6217)
!6239 = !DILocation(line: 1866, column: 5, scope: !6217)
!6240 = !DILocation(line: 1867, column: 1, scope: !6195)
!6241 = distinct !DISubprogram(name: "assemble_zeros", scope: !3, file: !3, line: 1872, type: !6242, scopeLine: 1873, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6242 = !DISubroutineType(types: !6243)
!6243 = !{null, !2755}
!6244 = !DILocalVariable(name: "size", arg: 1, scope: !6241, file: !3, line: 1872, type: !2755)
!6245 = !DILocation(line: 1872, column: 40, scope: !6241)
!6246 = !DILocation(line: 1875, column: 7, scope: !6247)
!6247 = distinct !DILexicalBlock(scope: !6241, file: !3, line: 1875, column: 7)
!6248 = !DILocation(line: 1875, column: 7, scope: !6241)
!6249 = !DILocation(line: 1876, column: 5, scope: !6247)
!6250 = !DILocation(line: 1881, column: 31, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !6241, file: !3, line: 1881, column: 7)
!6252 = !DILocation(line: 1881, column: 43, scope: !6251)
!6253 = !DILocation(line: 1881, column: 50, scope: !6251)
!6254 = !DILocation(line: 1881, column: 56, scope: !6251)
!6255 = !DILocation(line: 1881, column: 72, scope: !6251)
!6256 = !DILocation(line: 1881, column: 7, scope: !6241)
!6257 = !DILocalVariable(name: "i", scope: !6258, file: !3, line: 1883, type: !2755)
!6258 = distinct !DILexicalBlock(scope: !6251, file: !3, line: 1882, column: 5)
!6259 = !DILocation(line: 1883, column: 30, scope: !6258)
!6260 = !DILocation(line: 1884, column: 14, scope: !6261)
!6261 = distinct !DILexicalBlock(scope: !6258, file: !3, line: 1884, column: 7)
!6262 = !DILocation(line: 1884, column: 12, scope: !6261)
!6263 = !DILocation(line: 1884, column: 19, scope: !6264)
!6264 = distinct !DILexicalBlock(scope: !6261, file: !3, line: 1884, column: 7)
!6265 = !DILocation(line: 1884, column: 23, scope: !6264)
!6266 = !DILocation(line: 1884, column: 21, scope: !6264)
!6267 = !DILocation(line: 1884, column: 7, scope: !6261)
!6268 = !DILocation(line: 1885, column: 20, scope: !6264)
!6269 = !DILocation(line: 1885, column: 2, scope: !6264)
!6270 = !DILocation(line: 1884, column: 30, scope: !6264)
!6271 = !DILocation(line: 1884, column: 7, scope: !6264)
!6272 = distinct !{!6272, !6267, !6273}
!6273 = !DILocation(line: 1885, column: 51, scope: !6261)
!6274 = !DILocation(line: 1886, column: 5, scope: !6258)
!6275 = !DILocation(line: 1889, column: 9, scope: !6276)
!6276 = distinct !DILexicalBlock(scope: !6251, file: !3, line: 1889, column: 9)
!6277 = !DILocation(line: 1889, column: 14, scope: !6276)
!6278 = !DILocation(line: 1889, column: 9, scope: !6251)
!6279 = !DILocation(line: 1890, column: 7, scope: !6276)
!6280 = !DILocation(line: 1891, column: 1, scope: !6241)
!6281 = distinct !DISubprogram(name: "assemble_string", scope: !3, file: !3, line: 1907, type: !6282, scopeLine: 1908, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6282 = !DISubroutineType(types: !6283)
!6283 = !{null, !2692, !2798}
!6284 = !DILocalVariable(name: "p", arg: 1, scope: !6281, file: !3, line: 1907, type: !2692)
!6285 = !DILocation(line: 1907, column: 30, scope: !6281)
!6286 = !DILocalVariable(name: "size", arg: 2, scope: !6281, file: !3, line: 1907, type: !2798)
!6287 = !DILocation(line: 1907, column: 37, scope: !6281)
!6288 = !DILocalVariable(name: "pos", scope: !6281, file: !3, line: 1909, type: !2798)
!6289 = !DILocation(line: 1909, column: 7, scope: !6281)
!6290 = !DILocalVariable(name: "maximum", scope: !6281, file: !3, line: 1910, type: !2798)
!6291 = !DILocation(line: 1910, column: 7, scope: !6281)
!6292 = !DILocation(line: 1914, column: 3, scope: !6281)
!6293 = !DILocation(line: 1914, column: 10, scope: !6281)
!6294 = !DILocation(line: 1914, column: 16, scope: !6281)
!6295 = !DILocation(line: 1914, column: 14, scope: !6281)
!6296 = !DILocalVariable(name: "thissize", scope: !6297, file: !3, line: 1916, type: !2798)
!6297 = distinct !DILexicalBlock(scope: !6281, file: !3, line: 1915, column: 5)
!6298 = !DILocation(line: 1916, column: 11, scope: !6297)
!6299 = !DILocation(line: 1916, column: 22, scope: !6297)
!6300 = !DILocation(line: 1916, column: 29, scope: !6297)
!6301 = !DILocation(line: 1916, column: 27, scope: !6297)
!6302 = !DILocation(line: 1917, column: 11, scope: !6303)
!6303 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 1917, column: 11)
!6304 = !DILocation(line: 1917, column: 22, scope: !6303)
!6305 = !DILocation(line: 1917, column: 20, scope: !6303)
!6306 = !DILocation(line: 1917, column: 11, scope: !6297)
!6307 = !DILocation(line: 1918, column: 13, scope: !6303)
!6308 = !DILocation(line: 1918, column: 11, scope: !6303)
!6309 = !DILocation(line: 1918, column: 2, scope: !6303)
!6310 = !DILocation(line: 1920, column: 7, scope: !6297)
!6311 = !DILocalVariable(name: "_ascii_bytes", scope: !6312, file: !3, line: 1920, type: !2818)
!6312 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 1920, column: 7)
!6313 = !DILocation(line: 1920, column: 7, scope: !6312)
!6314 = !DILocalVariable(name: "limit", scope: !6312, file: !3, line: 1920, type: !2818)
!6315 = !DILocalVariable(name: "last_null", scope: !6312, file: !3, line: 1920, type: !2818)
!6316 = !DILocalVariable(name: "bytes_in_chunk", scope: !6312, file: !3, line: 1920, type: !7)
!6317 = !DILocation(line: 1920, column: 7, scope: !6318)
!6318 = distinct !DILexicalBlock(scope: !6319, file: !3, line: 1920, column: 7)
!6319 = distinct !DILexicalBlock(scope: !6312, file: !3, line: 1920, column: 7)
!6320 = !DILocation(line: 1920, column: 7, scope: !6319)
!6321 = !DILocalVariable(name: "p", scope: !6322, file: !3, line: 1920, type: !2818)
!6322 = distinct !DILexicalBlock(scope: !6318, file: !3, line: 1920, column: 7)
!6323 = !DILocation(line: 1920, column: 7, scope: !6322)
!6324 = !DILocation(line: 1920, column: 7, scope: !6325)
!6325 = distinct !DILexicalBlock(scope: !6322, file: !3, line: 1920, column: 7)
!6326 = !DILocation(line: 1920, column: 7, scope: !6327)
!6327 = distinct !DILexicalBlock(scope: !6325, file: !3, line: 1920, column: 7)
!6328 = !DILocation(line: 1920, column: 7, scope: !6329)
!6329 = distinct !DILexicalBlock(scope: !6322, file: !3, line: 1920, column: 7)
!6330 = !DILocation(line: 1920, column: 7, scope: !6331)
!6331 = distinct !DILexicalBlock(scope: !6332, file: !3, line: 1920, column: 7)
!6332 = distinct !DILexicalBlock(scope: !6329, file: !3, line: 1920, column: 7)
!6333 = !DILocation(line: 1920, column: 7, scope: !6334)
!6334 = distinct !DILexicalBlock(scope: !6331, file: !3, line: 1920, column: 7)
!6335 = !DILocation(line: 0, scope: !6334)
!6336 = distinct !{!6336, !6330, !6330}
!6337 = !DILocation(line: 1920, column: 7, scope: !6332)
!6338 = !DILocation(line: 1920, column: 7, scope: !6339)
!6339 = distinct !DILexicalBlock(scope: !6322, file: !3, line: 1920, column: 7)
!6340 = !DILocation(line: 1920, column: 7, scope: !6341)
!6341 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1920, column: 7)
!6342 = distinct !DILexicalBlock(scope: !6339, file: !3, line: 1920, column: 7)
!6343 = !DILocation(line: 1920, column: 7, scope: !6342)
!6344 = !DILocation(line: 1920, column: 7, scope: !6345)
!6345 = distinct !DILexicalBlock(scope: !6341, file: !3, line: 1920, column: 7)
!6346 = !DILocalVariable(name: "_limited_str", scope: !6347, file: !3, line: 1920, type: !2818)
!6347 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1920, column: 7)
!6348 = !DILocation(line: 1920, column: 7, scope: !6347)
!6349 = !DILocalVariable(name: "ch", scope: !6347, file: !3, line: 1920, type: !7)
!6350 = !DILocation(line: 1920, column: 7, scope: !6351)
!6351 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 1920, column: 7)
!6352 = distinct !DILexicalBlock(scope: !6347, file: !3, line: 1920, column: 7)
!6353 = !DILocation(line: 1920, column: 7, scope: !6352)
!6354 = !DILocalVariable(name: "escape", scope: !6355, file: !3, line: 1920, type: !2798)
!6355 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 1920, column: 7)
!6356 = !DILocation(line: 1920, column: 7, scope: !6355)
!6357 = !DILocation(line: 1920, column: 7, scope: !6358)
!6358 = distinct !DILexicalBlock(scope: !6355, file: !3, line: 1920, column: 7)
!6359 = distinct !{!6359, !6353, !6353}
!6360 = !DILocalVariable(name: "escape", scope: !6361, file: !3, line: 1920, type: !2798)
!6361 = distinct !DILexicalBlock(scope: !6339, file: !3, line: 1920, column: 7)
!6362 = !DILocation(line: 1920, column: 7, scope: !6361)
!6363 = !DILocalVariable(name: "ch", scope: !6361, file: !3, line: 1920, type: !7)
!6364 = !DILocation(line: 1920, column: 7, scope: !6365)
!6365 = distinct !DILexicalBlock(scope: !6361, file: !3, line: 1920, column: 7)
!6366 = !DILocation(line: 1920, column: 7, scope: !6367)
!6367 = distinct !DILexicalBlock(scope: !6361, file: !3, line: 1920, column: 7)
!6368 = distinct !{!6368, !6320, !6320}
!6369 = !DILocation(line: 1920, column: 7, scope: !6370)
!6370 = distinct !DILexicalBlock(scope: !6312, file: !3, line: 1920, column: 7)
!6371 = !DILocation(line: 1922, column: 14, scope: !6297)
!6372 = !DILocation(line: 1922, column: 11, scope: !6297)
!6373 = !DILocation(line: 1923, column: 12, scope: !6297)
!6374 = !DILocation(line: 1923, column: 9, scope: !6297)
!6375 = distinct !{!6375, !6292, !6376}
!6376 = !DILocation(line: 1924, column: 5, scope: !6281)
!6377 = !DILocation(line: 1925, column: 1, scope: !6281)
!6378 = distinct !DISubprogram(name: "default_emutls_var_init", scope: !3, file: !3, line: 2070, type: !6379, scopeLine: 2071, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6379 = !DISubroutineType(types: !6380)
!6380 = !{!2702, !2702, !2702, !2702}
!6381 = !DILocalVariable(name: "to", arg: 1, scope: !6378, file: !3, line: 2070, type: !2702)
!6382 = !DILocation(line: 2070, column: 31, scope: !6378)
!6383 = !DILocalVariable(name: "decl", arg: 2, scope: !6378, file: !3, line: 2070, type: !2702)
!6384 = !DILocation(line: 2070, column: 40, scope: !6378)
!6385 = !DILocalVariable(name: "proxy", arg: 3, scope: !6378, file: !3, line: 2070, type: !2702)
!6386 = !DILocation(line: 2070, column: 51, scope: !6378)
!6387 = !DILocalVariable(name: "v", scope: !6378, file: !3, line: 2072, type: !3559)
!6388 = !DILocation(line: 2072, column: 28, scope: !6378)
!6389 = !DILocation(line: 2072, column: 32, scope: !6378)
!6390 = !DILocalVariable(name: "elt", scope: !6378, file: !3, line: 2073, type: !6391)
!6391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3571, size: 64)
!6392 = !DILocation(line: 2073, column: 20, scope: !6378)
!6393 = !DILocalVariable(name: "type", scope: !6378, file: !3, line: 2074, type: !2702)
!6394 = !DILocation(line: 2074, column: 8, scope: !6378)
!6395 = !DILocation(line: 2074, column: 15, scope: !6378)
!6396 = !DILocalVariable(name: "field", scope: !6378, file: !3, line: 2075, type: !2702)
!6397 = !DILocation(line: 2075, column: 8, scope: !6378)
!6398 = !DILocation(line: 2075, column: 16, scope: !6378)
!6399 = !DILocation(line: 2077, column: 9, scope: !6378)
!6400 = !DILocation(line: 2077, column: 7, scope: !6378)
!6401 = !DILocation(line: 2078, column: 16, scope: !6378)
!6402 = !DILocation(line: 2078, column: 3, scope: !6378)
!6403 = !DILocation(line: 2078, column: 8, scope: !6378)
!6404 = !DILocation(line: 2078, column: 14, scope: !6378)
!6405 = !DILocation(line: 2079, column: 16, scope: !6378)
!6406 = !DILocation(line: 2079, column: 3, scope: !6378)
!6407 = !DILocation(line: 2079, column: 8, scope: !6378)
!6408 = !DILocation(line: 2079, column: 14, scope: !6378)
!6409 = !DILocation(line: 2081, column: 9, scope: !6378)
!6410 = !DILocation(line: 2081, column: 7, scope: !6378)
!6411 = !DILocation(line: 2082, column: 11, scope: !6378)
!6412 = !DILocation(line: 2082, column: 9, scope: !6378)
!6413 = !DILocation(line: 2083, column: 16, scope: !6378)
!6414 = !DILocation(line: 2083, column: 3, scope: !6378)
!6415 = !DILocation(line: 2083, column: 8, scope: !6378)
!6416 = !DILocation(line: 2083, column: 14, scope: !6378)
!6417 = !DILocation(line: 2084, column: 31, scope: !6378)
!6418 = !DILocation(line: 2085, column: 10, scope: !6378)
!6419 = !DILocation(line: 2084, column: 16, scope: !6378)
!6420 = !DILocation(line: 2084, column: 3, scope: !6378)
!6421 = !DILocation(line: 2084, column: 8, scope: !6378)
!6422 = !DILocation(line: 2084, column: 14, scope: !6378)
!6423 = !DILocation(line: 2087, column: 9, scope: !6378)
!6424 = !DILocation(line: 2087, column: 7, scope: !6378)
!6425 = !DILocation(line: 2088, column: 11, scope: !6378)
!6426 = !DILocation(line: 2088, column: 9, scope: !6378)
!6427 = !DILocation(line: 2089, column: 16, scope: !6378)
!6428 = !DILocation(line: 2089, column: 3, scope: !6378)
!6429 = !DILocation(line: 2089, column: 8, scope: !6378)
!6430 = !DILocation(line: 2089, column: 14, scope: !6378)
!6431 = !DILocation(line: 2090, column: 16, scope: !6378)
!6432 = !DILocation(line: 2090, column: 3, scope: !6378)
!6433 = !DILocation(line: 2090, column: 8, scope: !6378)
!6434 = !DILocation(line: 2090, column: 14, scope: !6378)
!6435 = !DILocation(line: 2092, column: 9, scope: !6378)
!6436 = !DILocation(line: 2092, column: 7, scope: !6378)
!6437 = !DILocation(line: 2093, column: 11, scope: !6378)
!6438 = !DILocation(line: 2093, column: 9, scope: !6378)
!6439 = !DILocation(line: 2094, column: 16, scope: !6378)
!6440 = !DILocation(line: 2094, column: 3, scope: !6378)
!6441 = !DILocation(line: 2094, column: 8, scope: !6378)
!6442 = !DILocation(line: 2094, column: 14, scope: !6378)
!6443 = !DILocation(line: 2095, column: 16, scope: !6378)
!6444 = !DILocation(line: 2095, column: 3, scope: !6378)
!6445 = !DILocation(line: 2095, column: 8, scope: !6378)
!6446 = !DILocation(line: 2095, column: 14, scope: !6378)
!6447 = !DILocation(line: 2097, column: 29, scope: !6378)
!6448 = !DILocation(line: 2097, column: 35, scope: !6378)
!6449 = !DILocation(line: 2097, column: 10, scope: !6378)
!6450 = !DILocation(line: 2097, column: 3, scope: !6378)
!6451 = distinct !DISubprogram(name: "VEC_constructor_elt_gc_alloc", scope: !151, file: !151, line: 1538, type: !6452, scopeLine: 1538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6452 = !DISubroutineType(types: !6453)
!6453 = !{!3559, !2798}
!6454 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6451, file: !151, line: 1538, type: !2798)
!6455 = !DILocation(line: 1538, column: 1, scope: !6451)
!6456 = distinct !DISubprogram(name: "VEC_constructor_elt_base_quick_push", scope: !151, file: !151, line: 1537, type: !6457, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6457 = !DISubroutineType(types: !6458)
!6458 = !{!6391, !6459, !6460}
!6459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3564, size: 64)
!6460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6461, size: 64)
!6461 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3571)
!6462 = !DILocalVariable(name: "vec_", arg: 1, scope: !6456, file: !151, line: 1537, type: !6459)
!6463 = !DILocation(line: 1537, column: 1, scope: !6456)
!6464 = !DILocalVariable(name: "obj_", arg: 2, scope: !6456, file: !151, line: 1537, type: !6460)
!6465 = !DILocalVariable(name: "slot_", scope: !6456, file: !151, line: 1537, type: !6391)
!6466 = !DILocation(line: 1537, column: 1, scope: !6467)
!6467 = distinct !DILexicalBlock(scope: !6456, file: !151, line: 1537, column: 1)
!6468 = distinct !DISubprogram(name: "assemble_variable", scope: !3, file: !3, line: 2111, type: !6469, scopeLine: 2113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6469 = !DISubroutineType(types: !6470)
!6470 = !{null, !2702, !2798, !2798, !2798}
!6471 = !DILocalVariable(name: "decl", arg: 1, scope: !6468, file: !3, line: 2111, type: !2702)
!6472 = !DILocation(line: 2111, column: 25, scope: !6468)
!6473 = !DILocalVariable(name: "top_level", arg: 2, scope: !6468, file: !3, line: 2111, type: !2798)
!6474 = !DILocation(line: 2111, column: 35, scope: !6468)
!6475 = !DILocalVariable(name: "at_end", arg: 3, scope: !6468, file: !3, line: 2112, type: !2798)
!6476 = !DILocation(line: 2112, column: 10, scope: !6468)
!6477 = !DILocalVariable(name: "dont_output_data", arg: 4, scope: !6468, file: !3, line: 2112, type: !2798)
!6478 = !DILocation(line: 2112, column: 39, scope: !6468)
!6479 = !DILocalVariable(name: "name", scope: !6468, file: !3, line: 2114, type: !2692)
!6480 = !DILocation(line: 2114, column: 15, scope: !6468)
!6481 = !DILocalVariable(name: "decl_rtl", scope: !6468, file: !3, line: 2115, type: !2876)
!6482 = !DILocation(line: 2115, column: 7, scope: !6468)
!6483 = !DILocalVariable(name: "symbol", scope: !6468, file: !3, line: 2115, type: !2876)
!6484 = !DILocation(line: 2115, column: 17, scope: !6468)
!6485 = !DILocalVariable(name: "sect", scope: !6468, file: !3, line: 2116, type: !3109)
!6486 = !DILocation(line: 2116, column: 12, scope: !6468)
!6487 = !DILocation(line: 2118, column: 17, scope: !6488)
!6488 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2118, column: 7)
!6489 = !DILocation(line: 2118, column: 9, scope: !6488)
!6490 = !DILocation(line: 2119, column: 7, scope: !6488)
!6491 = !DILocation(line: 2119, column: 10, scope: !6488)
!6492 = !DILocation(line: 2119, column: 27, scope: !6488)
!6493 = !DILocation(line: 2120, column: 7, scope: !6488)
!6494 = !DILocation(line: 2120, column: 10, scope: !6488)
!6495 = !DILocation(line: 2118, column: 7, scope: !6468)
!6496 = !DILocalVariable(name: "to", scope: !6497, file: !3, line: 2122, type: !2702)
!6497 = distinct !DILexicalBlock(scope: !6488, file: !3, line: 2121, column: 5)
!6498 = !DILocation(line: 2122, column: 12, scope: !6497)
!6499 = !DILocation(line: 2122, column: 30, scope: !6497)
!6500 = !DILocation(line: 2122, column: 17, scope: !6497)
!6501 = !DILocation(line: 2129, column: 13, scope: !6502)
!6502 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 2129, column: 11)
!6503 = !DILocation(line: 2130, column: 4, scope: !6502)
!6504 = !DILocation(line: 2130, column: 10, scope: !6502)
!6505 = !DILocation(line: 2131, column: 8, scope: !6502)
!6506 = !DILocation(line: 2131, column: 12, scope: !6502)
!6507 = !DILocation(line: 2132, column: 5, scope: !6502)
!6508 = !DILocation(line: 2132, column: 8, scope: !6502)
!6509 = !DILocation(line: 2132, column: 31, scope: !6502)
!6510 = !DILocation(line: 2132, column: 28, scope: !6502)
!6511 = !DILocation(line: 2129, column: 11, scope: !6497)
!6512 = !DILocation(line: 2134, column: 39, scope: !6513)
!6513 = distinct !DILexicalBlock(scope: !6502, file: !3, line: 2133, column: 2)
!6514 = !DILocation(line: 2135, column: 7, scope: !6513)
!6515 = !DILocation(line: 2135, column: 11, scope: !6513)
!6516 = !DILocation(line: 2135, column: 45, scope: !6513)
!6517 = !DILocation(line: 2135, column: 17, scope: !6513)
!6518 = !DILocation(line: 2134, column: 24, scope: !6513)
!6519 = !DILocation(line: 2134, column: 4, scope: !6513)
!6520 = !DILocation(line: 2134, column: 22, scope: !6513)
!6521 = !DILocation(line: 2141, column: 38, scope: !6513)
!6522 = !DILocation(line: 2141, column: 4, scope: !6513)
!6523 = !DILocation(line: 2142, column: 2, scope: !6513)
!6524 = !DILocation(line: 2144, column: 14, scope: !6497)
!6525 = !DILocation(line: 2144, column: 12, scope: !6497)
!6526 = !DILocation(line: 2145, column: 5, scope: !6497)
!6527 = !DILocation(line: 2147, column: 31, scope: !6468)
!6528 = !DILocation(line: 2153, column: 7, scope: !6529)
!6529 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2153, column: 7)
!6530 = !DILocation(line: 2153, column: 7, scope: !6468)
!6531 = !DILocation(line: 2154, column: 5, scope: !6529)
!6532 = !DILocation(line: 2159, column: 7, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2159, column: 7)
!6534 = !DILocation(line: 2159, column: 24, scope: !6533)
!6535 = !DILocation(line: 2159, column: 7, scope: !6468)
!6536 = !DILocation(line: 2160, column: 5, scope: !6533)
!6537 = !DILocation(line: 2163, column: 7, scope: !6538)
!6538 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2163, column: 7)
!6539 = !DILocation(line: 2163, column: 29, scope: !6538)
!6540 = !DILocation(line: 2163, column: 32, scope: !6538)
!6541 = !DILocation(line: 2163, column: 7, scope: !6468)
!6542 = !DILocation(line: 2165, column: 7, scope: !6543)
!6543 = distinct !DILexicalBlock(scope: !6538, file: !3, line: 2164, column: 5)
!6544 = !DILocation(line: 2165, column: 31, scope: !6543)
!6545 = !DILocation(line: 2166, column: 7, scope: !6543)
!6546 = !DILocation(line: 2172, column: 7, scope: !6547)
!6547 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2172, column: 7)
!6548 = !DILocation(line: 2172, column: 24, scope: !6547)
!6549 = !DILocation(line: 2172, column: 7, scope: !6468)
!6550 = !DILocation(line: 2173, column: 18, scope: !6547)
!6551 = !DILocation(line: 2173, column: 5, scope: !6547)
!6552 = !DILocation(line: 2178, column: 8, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2178, column: 7)
!6554 = !DILocation(line: 2178, column: 25, scope: !6553)
!6555 = !DILocation(line: 2178, column: 28, scope: !6553)
!6556 = !DILocation(line: 2178, column: 45, scope: !6553)
!6557 = !DILocation(line: 2178, column: 7, scope: !6468)
!6558 = !DILocation(line: 2180, column: 51, scope: !6559)
!6559 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2179, column: 5)
!6560 = !DILocation(line: 2180, column: 7, scope: !6559)
!6561 = !DILocation(line: 2181, column: 7, scope: !6559)
!6562 = !DILocation(line: 2181, column: 31, scope: !6559)
!6563 = !DILocation(line: 2182, column: 7, scope: !6559)
!6564 = !DILocation(line: 2190, column: 7, scope: !6565)
!6565 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2190, column: 7)
!6566 = !DILocation(line: 2190, column: 7, scope: !6468)
!6567 = !DILocation(line: 2191, column: 5, scope: !6565)
!6568 = !DILocation(line: 2195, column: 14, scope: !6468)
!6569 = !DILocation(line: 2195, column: 12, scope: !6468)
!6570 = !DILocation(line: 2197, column: 3, scope: !6468)
!6571 = !DILocation(line: 2197, column: 27, scope: !6468)
!6572 = !DILocation(line: 2200, column: 7, scope: !6573)
!6573 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2200, column: 7)
!6574 = !DILocation(line: 2200, column: 7, scope: !6468)
!6575 = !DILocation(line: 2201, column: 5, scope: !6573)
!6576 = !DILocation(line: 2203, column: 3, scope: !6468)
!6577 = !DILocation(line: 2205, column: 9, scope: !6578)
!6578 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2205, column: 7)
!6579 = !DILocation(line: 2206, column: 7, scope: !6578)
!6580 = !DILocation(line: 2206, column: 27, scope: !6578)
!6581 = !DILocation(line: 2206, column: 12, scope: !6578)
!6582 = !DILocation(line: 2205, column: 7, scope: !6468)
!6583 = !DILocation(line: 2208, column: 52, scope: !6584)
!6584 = distinct !DILexicalBlock(scope: !6578, file: !3, line: 2207, column: 5)
!6585 = !DILocation(line: 2208, column: 7, scope: !6584)
!6586 = !DILocation(line: 2209, column: 7, scope: !6584)
!6587 = !DILocation(line: 2212, column: 3, scope: !6468)
!6588 = !DILocation(line: 2213, column: 3, scope: !6468)
!6589 = !DILocation(line: 2214, column: 12, scope: !6468)
!6590 = !DILocation(line: 2214, column: 10, scope: !6468)
!6591 = !DILocation(line: 2215, column: 10, scope: !6468)
!6592 = !DILocation(line: 2215, column: 8, scope: !6468)
!6593 = !DILocation(line: 2216, column: 7, scope: !6594)
!6594 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2216, column: 7)
!6595 = !DILocation(line: 2216, column: 26, scope: !6594)
!6596 = !DILocation(line: 2216, column: 29, scope: !6594)
!6597 = !DILocation(line: 2216, column: 7, scope: !6468)
!6598 = !DILocation(line: 2217, column: 27, scope: !6594)
!6599 = !DILocation(line: 2217, column: 5, scope: !6594)
!6600 = !DILocation(line: 2221, column: 19, scope: !6468)
!6601 = !DILocation(line: 2221, column: 25, scope: !6468)
!6602 = !DILocation(line: 2221, column: 3, scope: !6468)
!6603 = !DILocation(line: 2222, column: 18, scope: !6468)
!6604 = !DILocation(line: 2222, column: 28, scope: !6468)
!6605 = !DILocation(line: 2222, column: 3, scope: !6468)
!6606 = !DILocation(line: 2224, column: 7, scope: !6607)
!6607 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2224, column: 7)
!6608 = !DILocation(line: 2224, column: 7, scope: !6468)
!6609 = !DILocation(line: 2225, column: 32, scope: !6607)
!6610 = !DILocation(line: 2225, column: 5, scope: !6607)
!6611 = !DILocation(line: 2227, column: 7, scope: !6612)
!6612 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2227, column: 7)
!6613 = !DILocation(line: 2227, column: 7, scope: !6468)
!6614 = !DILocation(line: 2228, column: 21, scope: !6612)
!6615 = !DILocation(line: 2228, column: 42, scope: !6612)
!6616 = !DILocation(line: 2228, column: 5, scope: !6612)
!6617 = !DILocation(line: 2231, column: 32, scope: !6468)
!6618 = !DILocation(line: 2231, column: 10, scope: !6468)
!6619 = !DILocation(line: 2231, column: 8, scope: !6468)
!6620 = !DILocation(line: 2232, column: 7, scope: !6621)
!6621 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2232, column: 7)
!6622 = !DILocation(line: 2233, column: 7, scope: !6621)
!6623 = !DILocation(line: 2233, column: 11, scope: !6621)
!6624 = !DILocation(line: 2233, column: 17, scope: !6621)
!6625 = !DILocation(line: 2233, column: 24, scope: !6621)
!6626 = !DILocation(line: 2233, column: 30, scope: !6621)
!6627 = !DILocation(line: 2233, column: 48, scope: !6621)
!6628 = !DILocation(line: 2232, column: 7, scope: !6468)
!6629 = !DILocation(line: 2234, column: 21, scope: !6621)
!6630 = !DILocation(line: 2234, column: 5, scope: !6621)
!6631 = !DILocation(line: 2237, column: 7, scope: !6632)
!6632 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2237, column: 7)
!6633 = !DILocation(line: 2237, column: 27, scope: !6632)
!6634 = !DILocation(line: 2237, column: 30, scope: !6632)
!6635 = !DILocation(line: 2237, column: 53, scope: !6632)
!6636 = !DILocation(line: 2237, column: 50, scope: !6632)
!6637 = !DILocation(line: 2237, column: 7, scope: !6468)
!6638 = !DILocation(line: 2238, column: 33, scope: !6632)
!6639 = !DILocation(line: 2238, column: 5, scope: !6632)
!6640 = !DILocation(line: 2241, column: 7, scope: !6641)
!6641 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2241, column: 7)
!6642 = !DILocation(line: 2241, column: 12, scope: !6641)
!6643 = !DILocation(line: 2241, column: 16, scope: !6641)
!6644 = !DILocation(line: 2241, column: 22, scope: !6641)
!6645 = !DILocation(line: 2241, column: 29, scope: !6641)
!6646 = !DILocation(line: 2241, column: 35, scope: !6641)
!6647 = !DILocation(line: 2241, column: 51, scope: !6641)
!6648 = !DILocation(line: 2241, column: 7, scope: !6468)
!6649 = !DILocation(line: 2242, column: 5, scope: !6641)
!6650 = !DILocation(line: 2242, column: 33, scope: !6641)
!6651 = !DILocation(line: 2247, column: 7, scope: !6652)
!6652 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 2247, column: 7)
!6653 = !DILocation(line: 2247, column: 44, scope: !6652)
!6654 = !DILocation(line: 2247, column: 47, scope: !6652)
!6655 = !DILocation(line: 2247, column: 7, scope: !6468)
!6656 = !DILocation(line: 2249, column: 7, scope: !6657)
!6657 = distinct !DILexicalBlock(scope: !6652, file: !3, line: 2248, column: 5)
!6658 = !DILocation(line: 2250, column: 27, scope: !6657)
!6659 = !DILocation(line: 2250, column: 7, scope: !6657)
!6660 = !DILocation(line: 2251, column: 5, scope: !6657)
!6661 = !DILocation(line: 2252, column: 12, scope: !6662)
!6662 = distinct !DILexicalBlock(scope: !6652, file: !3, line: 2252, column: 12)
!6663 = !DILocation(line: 2252, column: 33, scope: !6662)
!6664 = !DILocation(line: 2252, column: 12, scope: !6652)
!6665 = !DILocation(line: 2253, column: 33, scope: !6662)
!6666 = !DILocation(line: 2253, column: 39, scope: !6662)
!6667 = !DILocation(line: 2253, column: 45, scope: !6662)
!6668 = !DILocation(line: 2253, column: 5, scope: !6662)
!6669 = !DILocation(line: 2256, column: 26, scope: !6670)
!6670 = distinct !DILexicalBlock(scope: !6662, file: !3, line: 2255, column: 5)
!6671 = !DILocation(line: 2256, column: 7, scope: !6670)
!6672 = !DILocation(line: 2257, column: 11, scope: !6673)
!6673 = distinct !DILexicalBlock(scope: !6670, file: !3, line: 2257, column: 11)
!6674 = !DILocation(line: 2257, column: 29, scope: !6673)
!6675 = !DILocation(line: 2257, column: 11, scope: !6670)
!6676 = !DILocation(line: 2258, column: 2, scope: !6677)
!6677 = distinct !DILexicalBlock(scope: !6673, file: !3, line: 2258, column: 2)
!6678 = !DILocation(line: 2258, column: 2, scope: !6673)
!6679 = !DILocation(line: 2259, column: 35, scope: !6670)
!6680 = !DILocation(line: 2259, column: 41, scope: !6670)
!6681 = !DILocation(line: 2259, column: 47, scope: !6670)
!6682 = !DILocation(line: 2259, column: 7, scope: !6670)
!6683 = !DILocation(line: 2261, column: 1, scope: !6468)
!6684 = distinct !DISubprogram(name: "get_emutls_init_templ_addr", scope: !3, file: !3, line: 300, type: !4036, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6685 = !DILocalVariable(name: "decl", arg: 1, scope: !6684, file: !3, line: 300, type: !2702)
!6686 = !DILocation(line: 300, column: 34, scope: !6684)
!6687 = !DILocalVariable(name: "name", scope: !6684, file: !3, line: 302, type: !2702)
!6688 = !DILocation(line: 302, column: 8, scope: !6684)
!6689 = !DILocalVariable(name: "to", scope: !6684, file: !3, line: 302, type: !2702)
!6690 = !DILocation(line: 302, column: 14, scope: !6684)
!6691 = !DILocation(line: 304, column: 22, scope: !6692)
!6692 = distinct !DILexicalBlock(scope: !6684, file: !3, line: 304, column: 7)
!6693 = !DILocation(line: 304, column: 7, scope: !6692)
!6694 = !DILocation(line: 304, column: 38, scope: !6692)
!6695 = !DILocation(line: 304, column: 42, scope: !6692)
!6696 = !DILocation(line: 305, column: 7, scope: !6692)
!6697 = !DILocation(line: 305, column: 11, scope: !6692)
!6698 = !DILocation(line: 304, column: 7, scope: !6684)
!6699 = !DILocation(line: 306, column: 12, scope: !6692)
!6700 = !DILocation(line: 306, column: 5, scope: !6692)
!6701 = !DILocation(line: 308, column: 10, scope: !6684)
!6702 = !DILocation(line: 308, column: 8, scope: !6684)
!6703 = !DILocation(line: 309, column: 23, scope: !6704)
!6704 = distinct !DILexicalBlock(scope: !6684, file: !3, line: 309, column: 7)
!6705 = !DILocation(line: 309, column: 8, scope: !6704)
!6706 = !DILocation(line: 309, column: 35, scope: !6704)
!6707 = !DILocation(line: 309, column: 53, scope: !6704)
!6708 = !DILocation(line: 309, column: 38, scope: !6704)
!6709 = !DILocation(line: 309, column: 7, scope: !6684)
!6710 = !DILocalVariable(name: "prefix", scope: !6711, file: !3, line: 311, type: !2692)
!6711 = distinct !DILexicalBlock(scope: !6704, file: !3, line: 310, column: 5)
!6712 = !DILocation(line: 311, column: 19, scope: !6711)
!6713 = !DILocation(line: 311, column: 44, scope: !6711)
!6714 = !DILocation(line: 311, column: 29, scope: !6711)
!6715 = !DILocation(line: 312, column: 25, scope: !6711)
!6716 = !DILocation(line: 314, column: 27, scope: !6711)
!6717 = !DILocation(line: 314, column: 35, scope: !6711)
!6718 = !DILocation(line: 314, column: 14, scope: !6711)
!6719 = !DILocation(line: 314, column: 12, scope: !6711)
!6720 = !DILocation(line: 315, column: 5, scope: !6711)
!6721 = !DILocation(line: 317, column: 8, scope: !6684)
!6722 = !DILocation(line: 317, column: 6, scope: !6684)
!6723 = !DILocation(line: 319, column: 3, scope: !6684)
!6724 = !DILocation(line: 320, column: 3, scope: !6684)
!6725 = !DILocation(line: 320, column: 23, scope: !6684)
!6726 = !DILocation(line: 321, column: 3, scope: !6684)
!6727 = !DILocation(line: 321, column: 24, scope: !6684)
!6728 = !DILocation(line: 322, column: 20, scope: !6684)
!6729 = !DILocation(line: 322, column: 3, scope: !6684)
!6730 = !DILocation(line: 322, column: 18, scope: !6684)
!6731 = !DILocation(line: 323, column: 3, scope: !6684)
!6732 = !DILocation(line: 323, column: 22, scope: !6684)
!6733 = !DILocation(line: 324, column: 3, scope: !6684)
!6734 = !DILocation(line: 324, column: 23, scope: !6684)
!6735 = !DILocation(line: 325, column: 23, scope: !6684)
!6736 = !DILocation(line: 325, column: 3, scope: !6684)
!6737 = !DILocation(line: 325, column: 21, scope: !6684)
!6738 = !DILocation(line: 326, column: 28, scope: !6684)
!6739 = !DILocation(line: 326, column: 3, scope: !6684)
!6740 = !DILocation(line: 326, column: 26, scope: !6684)
!6741 = !DILocation(line: 328, column: 20, scope: !6684)
!6742 = !DILocation(line: 328, column: 3, scope: !6684)
!6743 = !DILocation(line: 328, column: 18, scope: !6684)
!6744 = !DILocation(line: 329, column: 7, scope: !6745)
!6745 = distinct !DILexicalBlock(scope: !6684, file: !3, line: 329, column: 7)
!6746 = !DILocation(line: 329, column: 7, scope: !6684)
!6747 = !DILocation(line: 331, column: 27, scope: !6748)
!6748 = distinct !DILexicalBlock(scope: !6745, file: !3, line: 330, column: 5)
!6749 = !DILocation(line: 331, column: 31, scope: !6748)
!6750 = !DILocation(line: 331, column: 7, scope: !6748)
!6751 = !DILocation(line: 332, column: 26, scope: !6748)
!6752 = !DILocation(line: 332, column: 7, scope: !6748)
!6753 = !DILocation(line: 332, column: 24, scope: !6748)
!6754 = !DILocation(line: 333, column: 26, scope: !6748)
!6755 = !DILocation(line: 333, column: 7, scope: !6748)
!6756 = !DILocation(line: 333, column: 24, scope: !6748)
!6757 = !DILocation(line: 334, column: 30, scope: !6748)
!6758 = !DILocation(line: 334, column: 7, scope: !6748)
!6759 = !DILocation(line: 334, column: 28, scope: !6748)
!6760 = !DILocation(line: 335, column: 5, scope: !6748)
!6761 = !DILocation(line: 337, column: 5, scope: !6745)
!6762 = !DILocation(line: 337, column: 22, scope: !6745)
!6763 = !DILocation(line: 339, column: 23, scope: !6684)
!6764 = !DILocation(line: 339, column: 3, scope: !6684)
!6765 = !DILocation(line: 339, column: 21, scope: !6684)
!6766 = !DILocation(line: 340, column: 3, scope: !6684)
!6767 = !DILocation(line: 340, column: 23, scope: !6684)
!6768 = !DILocation(line: 342, column: 26, scope: !6684)
!6769 = !DILocation(line: 342, column: 3, scope: !6684)
!6770 = !DILocation(line: 343, column: 10, scope: !6684)
!6771 = !DILocation(line: 343, column: 3, scope: !6684)
!6772 = !DILocation(line: 344, column: 1, scope: !6684)
!6773 = distinct !DISubprogram(name: "get_variable_section", scope: !3, file: !3, line: 1169, type: !6774, scopeLine: 1170, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6774 = !DISubroutineType(types: !6775)
!6775 = !{!3109, !2702, !2820}
!6776 = !DILocalVariable(name: "decl", arg: 1, scope: !6773, file: !3, line: 1169, type: !2702)
!6777 = !DILocation(line: 1169, column: 28, scope: !6773)
!6778 = !DILocalVariable(name: "prefer_noswitch_p", arg: 2, scope: !6773, file: !3, line: 1169, type: !2820)
!6779 = !DILocation(line: 1169, column: 39, scope: !6773)
!6780 = !DILocalVariable(name: "as", scope: !6773, file: !3, line: 1171, type: !5247)
!6781 = !DILocation(line: 1171, column: 16, scope: !6773)
!6782 = !DILocalVariable(name: "reloc", scope: !6773, file: !3, line: 1172, type: !2798)
!6783 = !DILocation(line: 1172, column: 7, scope: !6773)
!6784 = !DILocation(line: 1174, column: 7, scope: !6785)
!6785 = distinct !DILexicalBlock(scope: !6773, file: !3, line: 1174, column: 7)
!6786 = !DILocation(line: 1174, column: 27, scope: !6785)
!6787 = !DILocation(line: 1174, column: 24, scope: !6785)
!6788 = !DILocation(line: 1174, column: 7, scope: !6773)
!6789 = !DILocation(line: 1175, column: 10, scope: !6785)
!6790 = !DILocation(line: 1175, column: 8, scope: !6785)
!6791 = !DILocation(line: 1175, column: 5, scope: !6785)
!6792 = !DILocation(line: 1177, column: 7, scope: !6793)
!6793 = distinct !DILexicalBlock(scope: !6773, file: !3, line: 1177, column: 7)
!6794 = !DILocation(line: 1177, column: 7, scope: !6773)
!6795 = !DILocation(line: 1182, column: 7, scope: !6796)
!6796 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 1178, column: 5)
!6797 = !DILocation(line: 1184, column: 11, scope: !6798)
!6798 = distinct !DILexicalBlock(scope: !6796, file: !3, line: 1184, column: 11)
!6799 = !DILocation(line: 1184, column: 11, scope: !6796)
!6800 = !DILocation(line: 1185, column: 9, scope: !6798)
!6801 = !DILocation(line: 1185, column: 2, scope: !6798)
!6802 = !DILocation(line: 1188, column: 16, scope: !6803)
!6803 = distinct !DILexicalBlock(scope: !6798, file: !3, line: 1188, column: 16)
!6804 = !DILocation(line: 1188, column: 38, scope: !6803)
!6805 = !DILocation(line: 1189, column: 9, scope: !6803)
!6806 = !DILocation(line: 1189, column: 28, scope: !6803)
!6807 = !DILocation(line: 1189, column: 13, scope: !6803)
!6808 = !DILocation(line: 1188, column: 16, scope: !6798)
!6809 = !DILocation(line: 1191, column: 16, scope: !6810)
!6810 = distinct !DILexicalBlock(scope: !6803, file: !3, line: 1191, column: 16)
!6811 = !DILocation(line: 1191, column: 35, scope: !6810)
!6812 = !DILocation(line: 1191, column: 57, scope: !6810)
!6813 = !DILocation(line: 1191, column: 38, scope: !6810)
!6814 = !DILocation(line: 1191, column: 16, scope: !6803)
!6815 = !DILocation(line: 1192, column: 9, scope: !6810)
!6816 = !DILocation(line: 1192, column: 2, scope: !6810)
!6817 = !DILocation(line: 1193, column: 5, scope: !6796)
!6818 = !DILocation(line: 1195, column: 7, scope: !6819)
!6819 = distinct !DILexicalBlock(scope: !6773, file: !3, line: 1195, column: 7)
!6820 = !DILocation(line: 1195, column: 30, scope: !6819)
!6821 = !DILocation(line: 1195, column: 27, scope: !6819)
!6822 = !DILocation(line: 1195, column: 7, scope: !6773)
!6823 = !DILocation(line: 1196, column: 34, scope: !6819)
!6824 = !DILocation(line: 1196, column: 13, scope: !6819)
!6825 = !DILocation(line: 1196, column: 11, scope: !6819)
!6826 = !DILocation(line: 1196, column: 5, scope: !6819)
!6827 = !DILocation(line: 1197, column: 12, scope: !6828)
!6828 = distinct !DILexicalBlock(scope: !6819, file: !3, line: 1197, column: 12)
!6829 = !DILocation(line: 1197, column: 12, scope: !6819)
!6830 = !DILocation(line: 1198, column: 41, scope: !6828)
!6831 = !DILocation(line: 1198, column: 13, scope: !6828)
!6832 = !DILocation(line: 1198, column: 11, scope: !6828)
!6833 = !DILocation(line: 1198, column: 5, scope: !6828)
!6834 = !DILocation(line: 1200, column: 11, scope: !6828)
!6835 = !DILocation(line: 1202, column: 27, scope: !6773)
!6836 = !DILocation(line: 1202, column: 33, scope: !6773)
!6837 = !DILocation(line: 1202, column: 40, scope: !6773)
!6838 = !DILocation(line: 1202, column: 3, scope: !6773)
!6839 = !DILocation(line: 1203, column: 7, scope: !6840)
!6840 = distinct !DILexicalBlock(scope: !6773, file: !3, line: 1203, column: 7)
!6841 = !DILocation(line: 1203, column: 7, scope: !6773)
!6842 = !DILocation(line: 1204, column: 31, scope: !6840)
!6843 = !DILocation(line: 1204, column: 43, scope: !6840)
!6844 = !DILocation(line: 1204, column: 12, scope: !6840)
!6845 = !DILocation(line: 1204, column: 5, scope: !6840)
!6846 = !DILocation(line: 1206, column: 7, scope: !6847)
!6847 = distinct !DILexicalBlock(scope: !6773, file: !3, line: 1206, column: 7)
!6848 = !DILocation(line: 1207, column: 7, scope: !6847)
!6849 = !DILocation(line: 1207, column: 11, scope: !6847)
!6850 = !DILocation(line: 1208, column: 7, scope: !6847)
!6851 = !DILocation(line: 1208, column: 12, scope: !6847)
!6852 = !DILocation(line: 1208, column: 30, scope: !6847)
!6853 = !DILocation(line: 1208, column: 41, scope: !6847)
!6854 = !DILocation(line: 1208, column: 33, scope: !6847)
!6855 = !DILocation(line: 1209, column: 7, scope: !6847)
!6856 = !DILocation(line: 1209, column: 29, scope: !6847)
!6857 = !DILocation(line: 1209, column: 10, scope: !6847)
!6858 = !DILocation(line: 1206, column: 7, scope: !6773)
!6859 = !DILocation(line: 1211, column: 12, scope: !6860)
!6860 = distinct !DILexicalBlock(scope: !6861, file: !3, line: 1211, column: 11)
!6861 = distinct !DILexicalBlock(scope: !6847, file: !3, line: 1210, column: 5)
!6862 = !DILocation(line: 1211, column: 11, scope: !6861)
!6863 = !DILocation(line: 1212, column: 9, scope: !6860)
!6864 = !DILocation(line: 1212, column: 2, scope: !6860)
!6865 = !DILocation(line: 1213, column: 11, scope: !6866)
!6866 = distinct !DILexicalBlock(scope: !6861, file: !3, line: 1213, column: 11)
!6867 = !DILocation(line: 1213, column: 11, scope: !6861)
!6868 = !DILocation(line: 1214, column: 9, scope: !6866)
!6869 = !DILocation(line: 1214, column: 2, scope: !6866)
!6870 = !DILocation(line: 1215, column: 5, scope: !6861)
!6871 = !DILocation(line: 1217, column: 26, scope: !6773)
!6872 = !DILocation(line: 1217, column: 42, scope: !6773)
!6873 = !DILocation(line: 1217, column: 48, scope: !6773)
!6874 = !DILocation(line: 1217, column: 55, scope: !6773)
!6875 = !DILocation(line: 1217, column: 10, scope: !6773)
!6876 = !DILocation(line: 1217, column: 3, scope: !6773)
!6877 = !DILocation(line: 1218, column: 1, scope: !6773)
!6878 = distinct !DISubprogram(name: "output_addressed_constants", scope: !3, file: !3, line: 4090, type: !5044, scopeLine: 4091, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6879 = !DILocalVariable(name: "exp", arg: 1, scope: !6878, file: !3, line: 4090, type: !2702)
!6880 = !DILocation(line: 4090, column: 34, scope: !6878)
!6881 = !DILocalVariable(name: "tem", scope: !6878, file: !3, line: 4092, type: !2702)
!6882 = !DILocation(line: 4092, column: 8, scope: !6878)
!6883 = !DILocation(line: 4094, column: 11, scope: !6878)
!6884 = !DILocation(line: 4094, column: 3, scope: !6878)
!6885 = !DILocation(line: 4101, column: 18, scope: !6886)
!6886 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 4101, column: 7)
!6887 = distinct !DILexicalBlock(scope: !6878, file: !3, line: 4095, column: 5)
!6888 = !DILocation(line: 4101, column: 16, scope: !6886)
!6889 = !DILocation(line: 4101, column: 12, scope: !6886)
!6890 = !DILocation(line: 4101, column: 62, scope: !6891)
!6891 = distinct !DILexicalBlock(scope: !6886, file: !3, line: 4101, column: 7)
!6892 = !DILocation(line: 4101, column: 41, scope: !6891)
!6893 = !DILocation(line: 4101, column: 7, scope: !6886)
!6894 = !DILocation(line: 4102, column: 11, scope: !6891)
!6895 = !DILocation(line: 4102, column: 9, scope: !6891)
!6896 = !DILocation(line: 4101, column: 7, scope: !6891)
!6897 = distinct !{!6897, !6893, !6898}
!6898 = !DILocation(line: 4103, column: 2, scope: !6886)
!6899 = !DILocation(line: 4106, column: 11, scope: !6900)
!6900 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 4106, column: 11)
!6901 = !DILocation(line: 4106, column: 27, scope: !6900)
!6902 = !DILocation(line: 4106, column: 41, scope: !6900)
!6903 = !DILocation(line: 4106, column: 44, scope: !6900)
!6904 = !DILocation(line: 4106, column: 11, scope: !6887)
!6905 = !DILocation(line: 4107, column: 8, scope: !6900)
!6906 = !DILocation(line: 4107, column: 6, scope: !6900)
!6907 = !DILocation(line: 4107, column: 2, scope: !6900)
!6908 = !DILocation(line: 4109, column: 11, scope: !6909)
!6909 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 4109, column: 11)
!6910 = !DILocation(line: 4109, column: 34, scope: !6909)
!6911 = !DILocation(line: 4109, column: 37, scope: !6909)
!6912 = !DILocation(line: 4109, column: 53, scope: !6909)
!6913 = !DILocation(line: 4109, column: 11, scope: !6887)
!6914 = !DILocation(line: 4110, column: 23, scope: !6909)
!6915 = !DILocation(line: 4110, column: 2, scope: !6909)
!6916 = !DILocation(line: 4111, column: 7, scope: !6887)
!6917 = !DILocation(line: 4116, column: 35, scope: !6887)
!6918 = !DILocation(line: 4116, column: 7, scope: !6887)
!6919 = !DILocation(line: 4121, column: 35, scope: !6887)
!6920 = !DILocation(line: 4121, column: 7, scope: !6887)
!6921 = !DILocation(line: 4122, column: 7, scope: !6887)
!6922 = !DILocalVariable(name: "idx", scope: !6923, file: !3, line: 4126, type: !2755)
!6923 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 4125, column: 7)
!6924 = !DILocation(line: 4126, column: 25, scope: !6923)
!6925 = !DILocation(line: 4127, column: 2, scope: !6926)
!6926 = distinct !DILexicalBlock(scope: !6923, file: !3, line: 4127, column: 2)
!6927 = !DILocation(line: 4127, column: 2, scope: !6928)
!6928 = distinct !DILexicalBlock(scope: !6926, file: !3, line: 4127, column: 2)
!6929 = !DILocation(line: 4128, column: 8, scope: !6930)
!6930 = distinct !DILexicalBlock(scope: !6928, file: !3, line: 4128, column: 8)
!6931 = !DILocation(line: 4128, column: 12, scope: !6930)
!6932 = !DILocation(line: 4128, column: 8, scope: !6928)
!6933 = !DILocation(line: 4129, column: 34, scope: !6930)
!6934 = !DILocation(line: 4129, column: 6, scope: !6930)
!6935 = !DILocation(line: 4128, column: 15, scope: !6930)
!6936 = distinct !{!6936, !6925, !6937}
!6937 = !DILocation(line: 4129, column: 37, scope: !6926)
!6938 = !DILocation(line: 4131, column: 7, scope: !6887)
!6939 = !DILocation(line: 4134, column: 7, scope: !6887)
!6940 = !DILocation(line: 4136, column: 1, scope: !6878)
!6941 = distinct !DISubprogram(name: "place_block_symbol", scope: !3, file: !3, line: 6848, type: !6942, scopeLine: 6849, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!6942 = !DISubroutineType(types: !6943)
!6943 = !{null, !2876}
!6944 = !DILocalVariable(name: "symbol", arg: 1, scope: !6941, file: !3, line: 6848, type: !2876)
!6945 = !DILocation(line: 6848, column: 25, scope: !6941)
!6946 = !DILocalVariable(name: "size", scope: !6941, file: !3, line: 6850, type: !2755)
!6947 = !DILocation(line: 6850, column: 26, scope: !6941)
!6948 = !DILocalVariable(name: "mask", scope: !6941, file: !3, line: 6850, type: !2755)
!6949 = !DILocation(line: 6850, column: 32, scope: !6941)
!6950 = !DILocalVariable(name: "offset", scope: !6941, file: !3, line: 6850, type: !2755)
!6951 = !DILocation(line: 6850, column: 38, scope: !6941)
!6952 = !DILocalVariable(name: "desc", scope: !6941, file: !3, line: 6851, type: !3083)
!6953 = !DILocation(line: 6851, column: 35, scope: !6941)
!6954 = !DILocalVariable(name: "alignment", scope: !6941, file: !3, line: 6852, type: !7)
!6955 = !DILocation(line: 6852, column: 16, scope: !6941)
!6956 = !DILocalVariable(name: "block", scope: !6941, file: !3, line: 6853, type: !3105)
!6957 = !DILocation(line: 6853, column: 24, scope: !6941)
!6958 = !DILocalVariable(name: "decl", scope: !6941, file: !3, line: 6854, type: !2702)
!6959 = !DILocation(line: 6854, column: 8, scope: !6941)
!6960 = !DILocation(line: 6856, column: 3, scope: !6941)
!6961 = !DILocation(line: 6857, column: 7, scope: !6962)
!6962 = distinct !DILexicalBlock(scope: !6941, file: !3, line: 6857, column: 7)
!6963 = !DILocation(line: 6857, column: 40, scope: !6962)
!6964 = !DILocation(line: 6857, column: 7, scope: !6941)
!6965 = !DILocation(line: 6858, column: 5, scope: !6962)
!6966 = !DILocation(line: 6861, column: 7, scope: !6967)
!6967 = distinct !DILexicalBlock(scope: !6941, file: !3, line: 6861, column: 7)
!6968 = !DILocation(line: 6861, column: 7, scope: !6941)
!6969 = !DILocation(line: 6863, column: 14, scope: !6970)
!6970 = distinct !DILexicalBlock(scope: !6967, file: !3, line: 6862, column: 5)
!6971 = !DILocation(line: 6863, column: 12, scope: !6970)
!6972 = !DILocation(line: 6864, column: 19, scope: !6970)
!6973 = !DILocation(line: 6864, column: 25, scope: !6970)
!6974 = !DILocation(line: 6864, column: 17, scope: !6970)
!6975 = !DILocation(line: 6865, column: 14, scope: !6970)
!6976 = !DILocation(line: 6865, column: 12, scope: !6970)
!6977 = !DILocation(line: 6866, column: 5, scope: !6970)
!6978 = !DILocation(line: 6867, column: 12, scope: !6979)
!6979 = distinct !DILexicalBlock(scope: !6967, file: !3, line: 6867, column: 12)
!6980 = !DILocation(line: 6867, column: 12, scope: !6967)
!6981 = !DILocation(line: 6869, column: 14, scope: !6982)
!6982 = distinct !DILexicalBlock(scope: !6979, file: !3, line: 6868, column: 5)
!6983 = !DILocation(line: 6869, column: 12, scope: !6982)
!6984 = !DILocation(line: 6870, column: 43, scope: !6982)
!6985 = !DILocation(line: 6870, column: 19, scope: !6982)
!6986 = !DILocation(line: 6870, column: 17, scope: !6982)
!6987 = !DILocation(line: 6871, column: 33, scope: !6982)
!6988 = !DILocation(line: 6871, column: 14, scope: !6982)
!6989 = !DILocation(line: 6871, column: 12, scope: !6982)
!6990 = !DILocation(line: 6872, column: 5, scope: !6982)
!6991 = !DILocation(line: 6875, column: 14, scope: !6992)
!6992 = distinct !DILexicalBlock(scope: !6979, file: !3, line: 6874, column: 5)
!6993 = !DILocation(line: 6875, column: 12, scope: !6992)
!6994 = !DILocation(line: 6876, column: 19, scope: !6992)
!6995 = !DILocation(line: 6876, column: 17, scope: !6992)
!6996 = !DILocation(line: 6877, column: 28, scope: !6992)
!6997 = !DILocation(line: 6877, column: 14, scope: !6992)
!6998 = !DILocation(line: 6877, column: 12, scope: !6992)
!6999 = !DILocation(line: 6881, column: 11, scope: !6941)
!7000 = !DILocation(line: 6881, column: 9, scope: !6941)
!7001 = !DILocation(line: 6882, column: 10, scope: !6941)
!7002 = !DILocation(line: 6882, column: 20, scope: !6941)
!7003 = !DILocation(line: 6882, column: 36, scope: !6941)
!7004 = !DILocation(line: 6882, column: 8, scope: !6941)
!7005 = !DILocation(line: 6883, column: 13, scope: !6941)
!7006 = !DILocation(line: 6883, column: 20, scope: !6941)
!7007 = !DILocation(line: 6883, column: 27, scope: !6941)
!7008 = !DILocation(line: 6883, column: 25, scope: !6941)
!7009 = !DILocation(line: 6883, column: 36, scope: !6941)
!7010 = !DILocation(line: 6883, column: 35, scope: !6941)
!7011 = !DILocation(line: 6883, column: 33, scope: !6941)
!7012 = !DILocation(line: 6883, column: 10, scope: !6941)
!7013 = !DILocation(line: 6884, column: 38, scope: !6941)
!7014 = !DILocation(line: 6884, column: 3, scope: !6941)
!7015 = !DILocation(line: 6884, column: 36, scope: !6941)
!7016 = !DILocation(line: 6887, column: 22, scope: !6941)
!7017 = !DILocation(line: 6887, column: 3, scope: !6941)
!7018 = !DILocation(line: 6887, column: 10, scope: !6941)
!7019 = !DILocation(line: 6887, column: 20, scope: !6941)
!7020 = !DILocation(line: 6888, column: 17, scope: !6941)
!7021 = !DILocation(line: 6888, column: 26, scope: !6941)
!7022 = !DILocation(line: 6888, column: 24, scope: !6941)
!7023 = !DILocation(line: 6888, column: 3, scope: !6941)
!7024 = !DILocation(line: 6888, column: 10, scope: !6941)
!7025 = !DILocation(line: 6888, column: 15, scope: !6941)
!7026 = !DILocation(line: 6890, column: 3, scope: !6941)
!7027 = !DILocation(line: 6891, column: 1, scope: !6941)
!7028 = distinct !DISubprogram(name: "assemble_noswitch_variable", scope: !3, file: !3, line: 2010, type: !7029, scopeLine: 2011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7029 = !DISubroutineType(types: !7030)
!7030 = !{null, !2702, !2692, !3109}
!7031 = !DILocalVariable(name: "decl", arg: 1, scope: !7028, file: !3, line: 2010, type: !2702)
!7032 = !DILocation(line: 2010, column: 34, scope: !7028)
!7033 = !DILocalVariable(name: "name", arg: 2, scope: !7028, file: !3, line: 2010, type: !2692)
!7034 = !DILocation(line: 2010, column: 52, scope: !7028)
!7035 = !DILocalVariable(name: "sect", arg: 3, scope: !7028, file: !3, line: 2010, type: !3109)
!7036 = !DILocation(line: 2010, column: 67, scope: !7028)
!7037 = !DILocalVariable(name: "size", scope: !7028, file: !3, line: 2012, type: !2755)
!7038 = !DILocation(line: 2012, column: 26, scope: !7028)
!7039 = !DILocalVariable(name: "rounded", scope: !7028, file: !3, line: 2012, type: !2755)
!7040 = !DILocation(line: 2012, column: 32, scope: !7028)
!7041 = !DILocation(line: 2014, column: 24, scope: !7028)
!7042 = !DILocation(line: 2014, column: 10, scope: !7028)
!7043 = !DILocation(line: 2014, column: 8, scope: !7028)
!7044 = !DILocation(line: 2015, column: 13, scope: !7028)
!7045 = !DILocation(line: 2015, column: 11, scope: !7028)
!7046 = !DILocation(line: 2019, column: 7, scope: !7047)
!7047 = distinct !DILexicalBlock(scope: !7028, file: !3, line: 2019, column: 7)
!7048 = !DILocation(line: 2019, column: 12, scope: !7047)
!7049 = !DILocation(line: 2019, column: 7, scope: !7028)
!7050 = !DILocation(line: 2020, column: 13, scope: !7047)
!7051 = !DILocation(line: 2020, column: 5, scope: !7047)
!7052 = !DILocation(line: 2024, column: 15, scope: !7028)
!7053 = !DILocation(line: 2024, column: 33, scope: !7028)
!7054 = !DILocation(line: 2024, column: 50, scope: !7028)
!7055 = !DILocation(line: 2024, column: 14, scope: !7028)
!7056 = !DILocation(line: 2024, column: 11, scope: !7028)
!7057 = !DILocation(line: 2025, column: 14, scope: !7028)
!7058 = !DILocation(line: 2025, column: 25, scope: !7028)
!7059 = !DILocation(line: 2025, column: 43, scope: !7028)
!7060 = !DILocation(line: 2025, column: 24, scope: !7028)
!7061 = !DILocation(line: 2025, column: 22, scope: !7028)
!7062 = !DILocation(line: 2026, column: 10, scope: !7028)
!7063 = !DILocation(line: 2026, column: 28, scope: !7028)
!7064 = !DILocation(line: 2026, column: 9, scope: !7028)
!7065 = !DILocation(line: 2026, column: 7, scope: !7028)
!7066 = !DILocation(line: 2025, column: 11, scope: !7028)
!7067 = !DILocation(line: 2028, column: 8, scope: !7068)
!7068 = distinct !DILexicalBlock(scope: !7028, file: !3, line: 2028, column: 7)
!7069 = !DILocation(line: 2028, column: 14, scope: !7068)
!7070 = !DILocation(line: 2028, column: 23, scope: !7068)
!7071 = !DILocation(line: 2028, column: 33, scope: !7068)
!7072 = !DILocation(line: 2028, column: 39, scope: !7068)
!7073 = !DILocation(line: 2028, column: 45, scope: !7068)
!7074 = !DILocation(line: 2028, column: 51, scope: !7068)
!7075 = !DILocation(line: 2029, column: 7, scope: !7068)
!7076 = !DILocation(line: 2029, column: 35, scope: !7068)
!7077 = !DILocation(line: 2029, column: 10, scope: !7068)
!7078 = !DILocation(line: 2029, column: 60, scope: !7068)
!7079 = !DILocation(line: 2029, column: 58, scope: !7068)
!7080 = !DILocation(line: 2028, column: 7, scope: !7028)
!7081 = !DILocation(line: 2031, column: 39, scope: !7068)
!7082 = !DILocation(line: 2031, column: 45, scope: !7068)
!7083 = !DILocation(line: 2030, column: 5, scope: !7068)
!7084 = !DILocation(line: 2032, column: 1, scope: !7028)
!7085 = distinct !DISubprogram(name: "assemble_variable_contents", scope: !3, file: !3, line: 2039, type: !7086, scopeLine: 2041, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7086 = !DISubroutineType(types: !7087)
!7087 = !{null, !2702, !2692, !2820}
!7088 = !DILocalVariable(name: "decl", arg: 1, scope: !7085, file: !3, line: 2039, type: !2702)
!7089 = !DILocation(line: 2039, column: 34, scope: !7085)
!7090 = !DILocalVariable(name: "name", arg: 2, scope: !7085, file: !3, line: 2039, type: !2692)
!7091 = !DILocation(line: 2039, column: 52, scope: !7085)
!7092 = !DILocalVariable(name: "dont_output_data", arg: 3, scope: !7085, file: !3, line: 2040, type: !2820)
!7093 = !DILocation(line: 2040, column: 13, scope: !7085)
!7094 = !DILocation(line: 2044, column: 33, scope: !7085)
!7095 = !DILocation(line: 2044, column: 31, scope: !7085)
!7096 = !DILocation(line: 2045, column: 3, scope: !7085)
!7097 = !DILocalVariable(name: "size", scope: !7098, file: !3, line: 2045, type: !2757)
!7098 = distinct !DILexicalBlock(scope: !7085, file: !3, line: 2045, column: 3)
!7099 = !DILocation(line: 2045, column: 3, scope: !7098)
!7100 = !DILocation(line: 2045, column: 3, scope: !7101)
!7101 = distinct !DILexicalBlock(scope: !7098, file: !3, line: 2045, column: 3)
!7102 = !DILocation(line: 2045, column: 3, scope: !7103)
!7103 = distinct !DILexicalBlock(scope: !7101, file: !3, line: 2045, column: 3)
!7104 = !DILocation(line: 2045, column: 3, scope: !7105)
!7105 = distinct !DILexicalBlock(scope: !7098, file: !3, line: 2045, column: 3)
!7106 = !DILocation(line: 2045, column: 3, scope: !7107)
!7107 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 2045, column: 3)
!7108 = !DILocalVariable(name: "size_", scope: !7109, file: !3, line: 2045, type: !2757)
!7109 = distinct !DILexicalBlock(scope: !7107, file: !3, line: 2045, column: 3)
!7110 = !DILocation(line: 2045, column: 3, scope: !7109)
!7111 = !DILocation(line: 2045, column: 3, scope: !7112)
!7112 = distinct !DILexicalBlock(scope: !7098, file: !3, line: 2045, column: 3)
!7113 = !DILocation(line: 2051, column: 8, scope: !7114)
!7114 = distinct !DILexicalBlock(scope: !7085, file: !3, line: 2051, column: 7)
!7115 = !DILocation(line: 2051, column: 7, scope: !7085)
!7116 = !DILocation(line: 2053, column: 11, scope: !7117)
!7117 = distinct !DILexicalBlock(scope: !7118, file: !3, line: 2053, column: 11)
!7118 = distinct !DILexicalBlock(scope: !7114, file: !3, line: 2052, column: 5)
!7119 = !DILocation(line: 2054, column: 4, scope: !7117)
!7120 = !DILocation(line: 2054, column: 7, scope: !7117)
!7121 = !DILocation(line: 2054, column: 30, scope: !7117)
!7122 = !DILocation(line: 2054, column: 27, scope: !7117)
!7123 = !DILocation(line: 2055, column: 4, scope: !7117)
!7124 = !DILocation(line: 2055, column: 27, scope: !7117)
!7125 = !DILocation(line: 2055, column: 8, scope: !7117)
!7126 = !DILocation(line: 2053, column: 11, scope: !7118)
!7127 = !DILocation(line: 2057, column: 19, scope: !7117)
!7128 = !DILocation(line: 2058, column: 19, scope: !7117)
!7129 = !DILocation(line: 2058, column: 5, scope: !7117)
!7130 = !DILocation(line: 2059, column: 5, scope: !7117)
!7131 = !DILocation(line: 2057, column: 2, scope: !7117)
!7132 = !DILocation(line: 2062, column: 32, scope: !7117)
!7133 = !DILocation(line: 2062, column: 18, scope: !7117)
!7134 = !DILocation(line: 2062, column: 2, scope: !7117)
!7135 = !DILocation(line: 2063, column: 5, scope: !7118)
!7136 = !DILocation(line: 2064, column: 1, scope: !7085)
!7137 = distinct !DISubprogram(name: "process_pending_assemble_externals", scope: !3, file: !3, line: 2346, type: !4245, scopeLine: 2347, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7138 = !DILocalVariable(name: "list", scope: !7137, file: !3, line: 2349, type: !2702)
!7139 = !DILocation(line: 2349, column: 8, scope: !7137)
!7140 = !DILocation(line: 2350, column: 15, scope: !7141)
!7141 = distinct !DILexicalBlock(scope: !7137, file: !3, line: 2350, column: 3)
!7142 = !DILocation(line: 2350, column: 13, scope: !7141)
!7143 = !DILocation(line: 2350, column: 8, scope: !7141)
!7144 = !DILocation(line: 2350, column: 43, scope: !7145)
!7145 = distinct !DILexicalBlock(scope: !7141, file: !3, line: 2350, column: 3)
!7146 = !DILocation(line: 2350, column: 3, scope: !7141)
!7147 = !DILocation(line: 2351, column: 29, scope: !7145)
!7148 = !DILocation(line: 2351, column: 5, scope: !7145)
!7149 = !DILocation(line: 2350, column: 56, scope: !7145)
!7150 = !DILocation(line: 2350, column: 54, scope: !7145)
!7151 = !DILocation(line: 2350, column: 3, scope: !7145)
!7152 = distinct !{!7152, !7146, !7153}
!7153 = !DILocation(line: 2351, column: 46, scope: !7141)
!7154 = !DILocation(line: 2353, column: 30, scope: !7137)
!7155 = !DILocation(line: 2355, column: 1, scope: !7137)
!7156 = distinct !DISubprogram(name: "assemble_external_real", scope: !3, file: !3, line: 2330, type: !5044, scopeLine: 2331, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7157 = !DILocalVariable(name: "decl", arg: 1, scope: !7156, file: !3, line: 2330, type: !2702)
!7158 = !DILocation(line: 2330, column: 30, scope: !7156)
!7159 = !DILocalVariable(name: "rtl", scope: !7156, file: !3, line: 2332, type: !2876)
!7160 = !DILocation(line: 2332, column: 7, scope: !7156)
!7161 = !DILocation(line: 2332, column: 13, scope: !7156)
!7162 = !DILocation(line: 2334, column: 7, scope: !7163)
!7163 = distinct !DILexicalBlock(scope: !7156, file: !3, line: 2334, column: 7)
!7164 = !DILocation(line: 2334, column: 19, scope: !7163)
!7165 = !DILocation(line: 2334, column: 22, scope: !7163)
!7166 = !DILocation(line: 2334, column: 47, scope: !7163)
!7167 = !DILocation(line: 2335, column: 7, scope: !7163)
!7168 = !DILocation(line: 2335, column: 11, scope: !7163)
!7169 = !DILocation(line: 2336, column: 7, scope: !7163)
!7170 = !DILocation(line: 2336, column: 35, scope: !7163)
!7171 = !DILocation(line: 2336, column: 11, scope: !7163)
!7172 = !DILocation(line: 2334, column: 7, scope: !7156)
!7173 = !DILocation(line: 2339, column: 7, scope: !7174)
!7174 = distinct !DILexicalBlock(scope: !7163, file: !3, line: 2337, column: 5)
!7175 = !DILocation(line: 2339, column: 39, scope: !7174)
!7176 = !DILocation(line: 2340, column: 7, scope: !7174)
!7177 = !DILocation(line: 2341, column: 5, scope: !7174)
!7178 = !DILocation(line: 2342, column: 1, scope: !7156)
!7179 = distinct !DISubprogram(name: "assemble_external", scope: !3, file: !3, line: 2367, type: !5044, scopeLine: 2368, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7180 = !DILocalVariable(name: "decl", arg: 1, scope: !7179, file: !3, line: 2367, type: !2702)
!7181 = !DILocation(line: 2367, column: 25, scope: !7179)
!7182 = !DILocation(line: 2373, column: 3, scope: !7179)
!7183 = !DILocation(line: 2375, column: 8, scope: !7184)
!7184 = distinct !DILexicalBlock(scope: !7179, file: !3, line: 2375, column: 7)
!7185 = !DILocation(line: 2375, column: 22, scope: !7184)
!7186 = !DILocation(line: 2375, column: 26, scope: !7184)
!7187 = !DILocation(line: 2375, column: 47, scope: !7184)
!7188 = !DILocation(line: 2375, column: 51, scope: !7184)
!7189 = !DILocation(line: 2375, column: 7, scope: !7179)
!7190 = !DILocation(line: 2376, column: 5, scope: !7184)
!7191 = !DILocation(line: 2382, column: 10, scope: !7192)
!7192 = distinct !DILexicalBlock(scope: !7179, file: !3, line: 2381, column: 7)
!7193 = !DILocation(line: 2388, column: 7, scope: !7192)
!7194 = !DILocation(line: 2388, column: 11, scope: !7192)
!7195 = !DILocation(line: 2389, column: 7, scope: !7192)
!7196 = !DILocation(line: 2389, column: 36, scope: !7192)
!7197 = !DILocation(line: 2389, column: 10, scope: !7192)
!7198 = !DILocation(line: 2390, column: 7, scope: !7192)
!7199 = !DILocation(line: 2390, column: 24, scope: !7192)
!7200 = !DILocation(line: 2390, column: 30, scope: !7192)
!7201 = !DILocation(line: 2390, column: 10, scope: !7192)
!7202 = !DILocation(line: 2390, column: 42, scope: !7192)
!7203 = !DILocation(line: 2381, column: 7, scope: !7179)
!7204 = !DILocation(line: 2391, column: 18, scope: !7192)
!7205 = !DILocation(line: 2391, column: 16, scope: !7192)
!7206 = !DILocation(line: 2391, column: 5, scope: !7192)
!7207 = !DILocation(line: 2394, column: 21, scope: !7208)
!7208 = distinct !DILexicalBlock(scope: !7179, file: !3, line: 2394, column: 7)
!7209 = !DILocation(line: 2394, column: 27, scope: !7208)
!7210 = !DILocation(line: 2394, column: 7, scope: !7208)
!7211 = !DILocation(line: 2394, column: 55, scope: !7208)
!7212 = !DILocation(line: 2394, column: 7, scope: !7179)
!7213 = !DILocation(line: 2395, column: 34, scope: !7208)
!7214 = !DILocation(line: 2395, column: 32, scope: !7208)
!7215 = !DILocation(line: 2395, column: 5, scope: !7208)
!7216 = !DILocation(line: 2398, column: 1, scope: !7179)
!7217 = distinct !DISubprogram(name: "assemble_external_libcall", scope: !3, file: !3, line: 2403, type: !6942, scopeLine: 2404, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7218 = !DILocalVariable(name: "fun", arg: 1, scope: !7217, file: !3, line: 2403, type: !2876)
!7219 = !DILocation(line: 2403, column: 32, scope: !7217)
!7220 = !DILocation(line: 2406, column: 9, scope: !7221)
!7221 = distinct !DILexicalBlock(scope: !7217, file: !3, line: 2406, column: 7)
!7222 = !DILocation(line: 2406, column: 7, scope: !7217)
!7223 = !DILocation(line: 2408, column: 7, scope: !7224)
!7224 = distinct !DILexicalBlock(scope: !7221, file: !3, line: 2407, column: 5)
!7225 = !DILocation(line: 2408, column: 29, scope: !7224)
!7226 = !DILocation(line: 2409, column: 23, scope: !7224)
!7227 = !DILocation(line: 2409, column: 41, scope: !7224)
!7228 = !DILocation(line: 2409, column: 7, scope: !7224)
!7229 = !DILocation(line: 2410, column: 5, scope: !7224)
!7230 = !DILocation(line: 2411, column: 1, scope: !7217)
!7231 = distinct !DISubprogram(name: "assemble_label", scope: !3, file: !3, line: 2416, type: !7232, scopeLine: 2417, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7232 = !DISubroutineType(types: !7233)
!7233 = !{null, !2692}
!7234 = !DILocalVariable(name: "name", arg: 1, scope: !7231, file: !3, line: 2416, type: !2692)
!7235 = !DILocation(line: 2416, column: 29, scope: !7231)
!7236 = !DILocation(line: 2418, column: 3, scope: !7231)
!7237 = !DILocation(line: 2418, column: 3, scope: !7238)
!7238 = distinct !DILexicalBlock(scope: !7231, file: !3, line: 2418, column: 3)
!7239 = !DILocation(line: 2419, column: 1, scope: !7231)
!7240 = distinct !DISubprogram(name: "mark_referenced", scope: !3, file: !3, line: 2423, type: !5044, scopeLine: 2424, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7241 = !DILocalVariable(name: "id", arg: 1, scope: !7240, file: !3, line: 2423, type: !2702)
!7242 = !DILocation(line: 2423, column: 23, scope: !7240)
!7243 = !DILocation(line: 2425, column: 3, scope: !7240)
!7244 = !DILocation(line: 2425, column: 31, scope: !7240)
!7245 = !DILocation(line: 2426, column: 1, scope: !7240)
!7246 = distinct !DISubprogram(name: "mark_decl_referenced", scope: !3, file: !3, line: 2430, type: !5044, scopeLine: 2431, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7247 = !DILocalVariable(name: "decl", arg: 1, scope: !7246, file: !3, line: 2430, type: !2702)
!7248 = !DILocation(line: 2430, column: 28, scope: !7246)
!7249 = !DILocation(line: 2432, column: 7, scope: !7250)
!7250 = distinct !DILexicalBlock(scope: !7246, file: !3, line: 2432, column: 7)
!7251 = !DILocation(line: 2432, column: 24, scope: !7250)
!7252 = !DILocation(line: 2432, column: 7, scope: !7246)
!7253 = !DILocalVariable(name: "node", scope: !7254, file: !3, line: 2438, type: !7255)
!7254 = distinct !DILexicalBlock(scope: !7250, file: !3, line: 2433, column: 5)
!7255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7256, size: 64)
!7256 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !1629, line: 181, size: 2496, elements: !7257)
!7257 = !{!7258, !7259, !7281, !7282, !7283, !7284, !7285, !7286, !7287, !7288, !7289, !7290, !7291, !7292, !7293, !7294, !7295, !7296, !7312, !7334, !7344, !7348, !7375, !7384, !7385, !7386, !7387, !7388, !7389, !7390, !7391, !7392, !7393, !7394, !7395, !7396, !7397}
!7258 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !7256, file: !1629, line: 182, baseType: !2702, size: 64)
!7259 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !7256, file: !1629, line: 183, baseType: !7260, size: 64, offset: 64)
!7260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7261, size: 64)
!7261 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !1629, line: 314, size: 768, elements: !7262)
!7262 = !{!7263, !7264, !7265, !7266, !7267, !7268, !7269, !7270, !7271, !7272, !7274, !7275, !7276, !7277, !7278, !7279, !7280}
!7263 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !7261, file: !1629, line: 316, baseType: !3026, size: 64)
!7264 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !7261, file: !1629, line: 317, baseType: !7255, size: 64, offset: 64)
!7265 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !7261, file: !1629, line: 318, baseType: !7255, size: 64, offset: 128)
!7266 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !7261, file: !1629, line: 319, baseType: !7260, size: 64, offset: 192)
!7267 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !7261, file: !1629, line: 320, baseType: !7260, size: 64, offset: 256)
!7268 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !7261, file: !1629, line: 321, baseType: !7260, size: 64, offset: 320)
!7269 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !7261, file: !1629, line: 322, baseType: !7260, size: 64, offset: 384)
!7270 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !7261, file: !1629, line: 323, baseType: !3480, size: 64, offset: 448)
!7271 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !7261, file: !1629, line: 324, baseType: !2691, size: 64, offset: 512)
!7272 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !7261, file: !1629, line: 327, baseType: !7273, size: 32, offset: 576)
!7273 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !1629, line: 312, baseType: !1628)
!7274 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !7261, file: !1629, line: 330, baseType: !7, size: 32, offset: 608)
!7275 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !7261, file: !1629, line: 334, baseType: !2798, size: 32, offset: 640)
!7276 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !7261, file: !1629, line: 336, baseType: !2798, size: 32, offset: 672)
!7277 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !7261, file: !1629, line: 338, baseType: !3784, size: 16, offset: 704)
!7278 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !7261, file: !1629, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!7279 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !7261, file: !1629, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!7280 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !7261, file: !1629, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!7281 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !7256, file: !1629, line: 184, baseType: !7260, size: 64, offset: 128)
!7282 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7256, file: !1629, line: 185, baseType: !7255, size: 64, offset: 192)
!7283 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !7256, file: !1629, line: 186, baseType: !7255, size: 64, offset: 256)
!7284 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !7256, file: !1629, line: 188, baseType: !7255, size: 64, offset: 320)
!7285 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !7256, file: !1629, line: 190, baseType: !7255, size: 64, offset: 384)
!7286 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !7256, file: !1629, line: 192, baseType: !7255, size: 64, offset: 448)
!7287 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !7256, file: !1629, line: 194, baseType: !7255, size: 64, offset: 512)
!7288 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !7256, file: !1629, line: 196, baseType: !7255, size: 64, offset: 576)
!7289 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !7256, file: !1629, line: 197, baseType: !7255, size: 64, offset: 640)
!7290 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !7256, file: !1629, line: 198, baseType: !7255, size: 64, offset: 704)
!7291 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !7256, file: !1629, line: 199, baseType: !7255, size: 64, offset: 768)
!7292 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !7256, file: !1629, line: 202, baseType: !7255, size: 64, offset: 832)
!7293 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !7256, file: !1629, line: 204, baseType: !7255, size: 64, offset: 896)
!7294 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !7256, file: !1629, line: 207, baseType: !3284, size: 64, offset: 960)
!7295 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !7256, file: !1629, line: 209, baseType: !2691, size: 64, offset: 1024)
!7296 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !7256, file: !1629, line: 214, baseType: !7297, size: 64, offset: 1088)
!7297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7298, size: 64)
!7298 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !3240, line: 177, baseType: !7299)
!7299 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !3240, line: 177, size: 128, elements: !7300)
!7300 = !{!7301}
!7301 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !7299, file: !3240, line: 177, baseType: !7302, size: 128)
!7302 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !3240, line: 176, baseType: !7303)
!7303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !3240, line: 176, size: 128, elements: !7304)
!7304 = !{!7305, !7306, !7307}
!7305 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !7303, file: !3240, line: 176, baseType: !7, size: 32)
!7306 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !7303, file: !3240, line: 176, baseType: !7, size: 32, offset: 32)
!7307 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !7303, file: !3240, line: 176, baseType: !7308, size: 64, offset: 64)
!7308 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7309, size: 64, elements: !2801)
!7309 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !3240, line: 174, baseType: !7310)
!7310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7311, size: 64)
!7311 = !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !3240, line: 173, flags: DIFlagFwdDecl)
!7312 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !7256, file: !1629, line: 216, baseType: !7313, size: 320, offset: 1152)
!7313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !1629, line: 88, size: 320, elements: !7314)
!7314 = !{!7315, !7318, !7326, !7327, !7328, !7329, !7330, !7331, !7332, !7333}
!7315 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !7313, file: !1629, line: 90, baseType: !7316, size: 64)
!7316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7317, size: 64)
!7317 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !1629, line: 51, flags: DIFlagFwdDecl)
!7318 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !7313, file: !1629, line: 92, baseType: !7319, size: 192, offset: 64)
!7319 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !1629, line: 57, size: 192, elements: !7320)
!7320 = !{!7321, !7322, !7323, !7324, !7325}
!7321 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !7319, file: !1629, line: 60, baseType: !2757, size: 64)
!7322 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !7319, file: !1629, line: 63, baseType: !2798, size: 32, offset: 64)
!7323 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !7319, file: !1629, line: 65, baseType: !2798, size: 32, offset: 96)
!7324 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !7319, file: !1629, line: 67, baseType: !2798, size: 32, offset: 128)
!7325 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !7319, file: !1629, line: 69, baseType: !2798, size: 32, offset: 160)
!7326 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !7313, file: !1629, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!7327 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !7313, file: !1629, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!7328 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !7313, file: !1629, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!7329 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !7313, file: !1629, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!7330 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !7313, file: !1629, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!7331 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !7313, file: !1629, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!7332 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !7313, file: !1629, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!7333 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !7313, file: !1629, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!7334 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !7256, file: !1629, line: 217, baseType: !7335, size: 320, offset: 1472)
!7335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !1629, line: 126, size: 320, elements: !7336)
!7336 = !{!7337, !7338, !7339, !7340, !7341, !7342, !7343}
!7337 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !7335, file: !1629, line: 128, baseType: !2757, size: 64)
!7338 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !7335, file: !1629, line: 130, baseType: !2757, size: 64, offset: 64)
!7339 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !7335, file: !1629, line: 134, baseType: !7255, size: 64, offset: 128)
!7340 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !7335, file: !1629, line: 137, baseType: !2798, size: 32, offset: 192)
!7341 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !7335, file: !1629, line: 138, baseType: !2798, size: 32, offset: 224)
!7342 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !7335, file: !1629, line: 141, baseType: !2798, size: 32, offset: 256)
!7343 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !7335, file: !1629, line: 144, baseType: !2820, size: 8, offset: 288)
!7344 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !7256, file: !1629, line: 218, baseType: !7345, size: 32, offset: 1792)
!7345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !1629, line: 150, size: 32, elements: !7346)
!7346 = !{!7347}
!7347 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !7345, file: !1629, line: 151, baseType: !7, size: 32)
!7348 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !7256, file: !1629, line: 219, baseType: !7349, size: 192, offset: 1856)
!7349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !1629, line: 171, size: 192, elements: !7350)
!7350 = !{!7351, !7372, !7374}
!7351 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !7349, file: !1629, line: 173, baseType: !7352, size: 64)
!7352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7353, size: 64)
!7353 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !1629, line: 169, baseType: !7354)
!7354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !1629, line: 169, size: 128, elements: !7355)
!7355 = !{!7356}
!7356 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !7354, file: !1629, line: 169, baseType: !7357, size: 128)
!7357 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !1629, line: 168, baseType: !7358)
!7358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !1629, line: 168, size: 128, elements: !7359)
!7359 = !{!7360, !7361, !7362}
!7360 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !7358, file: !1629, line: 168, baseType: !7, size: 32)
!7361 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !7358, file: !1629, line: 168, baseType: !7, size: 32, offset: 32)
!7362 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !7358, file: !1629, line: 168, baseType: !7363, size: 64, offset: 64)
!7363 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7364, size: 64, elements: !2801)
!7364 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !1629, line: 167, baseType: !7365)
!7365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7366, size: 64)
!7366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !1629, line: 156, size: 192, elements: !7367)
!7367 = !{!7368, !7369, !7370, !7371}
!7368 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !7366, file: !1629, line: 159, baseType: !2702, size: 64)
!7369 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !7366, file: !1629, line: 161, baseType: !2702, size: 64, offset: 64)
!7370 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !7366, file: !1629, line: 163, baseType: !2820, size: 8, offset: 128)
!7371 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !7366, file: !1629, line: 165, baseType: !2820, size: 8, offset: 136)
!7372 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !7349, file: !1629, line: 174, baseType: !7373, size: 64, offset: 64)
!7373 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !512, line: 47, baseType: !2927)
!7374 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !7349, file: !1629, line: 175, baseType: !7373, size: 64, offset: 128)
!7375 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !7256, file: !1629, line: 220, baseType: !7376, size: 256, offset: 2048)
!7376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !1629, line: 74, size: 256, elements: !7377)
!7377 = !{!7378, !7379, !7380, !7381, !7382, !7383}
!7378 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !7376, file: !1629, line: 76, baseType: !2757, size: 64)
!7379 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !7376, file: !1629, line: 77, baseType: !2757, size: 64, offset: 64)
!7380 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !7376, file: !1629, line: 78, baseType: !2702, size: 64, offset: 128)
!7381 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !7376, file: !1629, line: 79, baseType: !2820, size: 8, offset: 192)
!7382 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !7376, file: !1629, line: 80, baseType: !2820, size: 8, offset: 200)
!7383 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !7376, file: !1629, line: 82, baseType: !2820, size: 8, offset: 208)
!7384 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !7256, file: !1629, line: 223, baseType: !3026, size: 64, offset: 2304)
!7385 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !7256, file: !1629, line: 225, baseType: !2798, size: 32, offset: 2368)
!7386 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !7256, file: !1629, line: 227, baseType: !2798, size: 32, offset: 2400)
!7387 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !7256, file: !1629, line: 231, baseType: !2798, size: 32, offset: 2432)
!7388 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !7256, file: !1629, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!7389 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !7256, file: !1629, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!7390 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !7256, file: !1629, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!7391 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !7256, file: !1629, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!7392 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !7256, file: !1629, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!7393 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !7256, file: !1629, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!7394 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !7256, file: !1629, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!7395 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !7256, file: !1629, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!7396 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !7256, file: !1629, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!7397 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !7256, file: !1629, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!7398 = !DILocation(line: 2438, column: 27, scope: !7254)
!7399 = !DILocation(line: 2438, column: 47, scope: !7254)
!7400 = !DILocation(line: 2438, column: 34, scope: !7254)
!7401 = !DILocation(line: 2439, column: 12, scope: !7402)
!7402 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 2439, column: 11)
!7403 = !DILocation(line: 2440, column: 4, scope: !7402)
!7404 = !DILocation(line: 2440, column: 9, scope: !7402)
!7405 = !DILocation(line: 2440, column: 15, scope: !7402)
!7406 = !DILocation(line: 2440, column: 21, scope: !7402)
!7407 = !DILocation(line: 2440, column: 35, scope: !7402)
!7408 = !DILocation(line: 2440, column: 39, scope: !7402)
!7409 = !DILocation(line: 2441, column: 8, scope: !7402)
!7410 = !DILocation(line: 2441, column: 12, scope: !7402)
!7411 = !DILocation(line: 2441, column: 18, scope: !7402)
!7412 = !DILocation(line: 2441, column: 24, scope: !7402)
!7413 = !DILocation(line: 2439, column: 11, scope: !7254)
!7414 = !DILocation(line: 2442, column: 27, scope: !7402)
!7415 = !DILocation(line: 2442, column: 2, scope: !7402)
!7416 = !DILocation(line: 2443, column: 5, scope: !7254)
!7417 = !DILocation(line: 2444, column: 12, scope: !7418)
!7418 = distinct !DILexicalBlock(scope: !7250, file: !3, line: 2444, column: 12)
!7419 = !DILocation(line: 2444, column: 29, scope: !7418)
!7420 = !DILocation(line: 2444, column: 12, scope: !7250)
!7421 = !DILocalVariable(name: "node", scope: !7422, file: !3, line: 2446, type: !7423)
!7422 = distinct !DILexicalBlock(scope: !7418, file: !3, line: 2445, column: 5)
!7423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7424, size: 64)
!7424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !1629, line: 358, size: 320, elements: !7425)
!7425 = !{!7426, !7427, !7428, !7429, !7430, !7431, !7432, !7433, !7434, !7435, !7436, !7437}
!7426 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !7424, file: !1629, line: 359, baseType: !2702, size: 64)
!7427 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7424, file: !1629, line: 361, baseType: !7423, size: 64, offset: 64)
!7428 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !7424, file: !1629, line: 363, baseType: !7423, size: 64, offset: 128)
!7429 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !7424, file: !1629, line: 366, baseType: !7423, size: 64, offset: 192)
!7430 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !7424, file: !1629, line: 368, baseType: !2798, size: 32, offset: 256)
!7431 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !7424, file: !1629, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!7432 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !7424, file: !1629, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!7433 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !7424, file: !1629, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!7434 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !7424, file: !1629, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!7435 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !7424, file: !1629, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!7436 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !7424, file: !1629, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!7437 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !7424, file: !1629, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!7438 = !DILocation(line: 2446, column: 28, scope: !7422)
!7439 = !DILocation(line: 2446, column: 49, scope: !7422)
!7440 = !DILocation(line: 2446, column: 35, scope: !7422)
!7441 = !DILocation(line: 2447, column: 33, scope: !7422)
!7442 = !DILocation(line: 2447, column: 7, scope: !7422)
!7443 = !DILocation(line: 2450, column: 7, scope: !7422)
!7444 = !DILocation(line: 2450, column: 13, scope: !7422)
!7445 = !DILocation(line: 2450, column: 26, scope: !7422)
!7446 = !DILocation(line: 2451, column: 5, scope: !7422)
!7447 = !DILocation(line: 2454, column: 1, scope: !7246)
!7448 = distinct !DISubprogram(name: "assemble_name_raw", scope: !3, file: !3, line: 2487, type: !6014, scopeLine: 2488, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7449 = !DILocalVariable(name: "file", arg: 1, scope: !7448, file: !3, line: 2487, type: !6016)
!7450 = !DILocation(line: 2487, column: 26, scope: !7448)
!7451 = !DILocalVariable(name: "name", arg: 2, scope: !7448, file: !3, line: 2487, type: !2692)
!7452 = !DILocation(line: 2487, column: 44, scope: !7448)
!7453 = !DILocation(line: 2489, column: 7, scope: !7454)
!7454 = distinct !DILexicalBlock(scope: !7448, file: !3, line: 2489, column: 7)
!7455 = !DILocation(line: 2489, column: 15, scope: !7454)
!7456 = !DILocation(line: 2489, column: 7, scope: !7448)
!7457 = !DILocation(line: 2490, column: 13, scope: !7454)
!7458 = !DILocation(line: 2490, column: 22, scope: !7454)
!7459 = !DILocation(line: 2490, column: 5, scope: !7454)
!7460 = !DILocation(line: 2492, column: 5, scope: !7454)
!7461 = !DILocation(line: 2493, column: 1, scope: !7448)
!7462 = distinct !DISubprogram(name: "ultimate_transparent_alias_target", scope: !3, file: !3, line: 2465, type: !7463, scopeLine: 2466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7463 = !DISubroutineType(types: !7464)
!7464 = !{!2702, !3499}
!7465 = !DILocalVariable(name: "alias", arg: 1, scope: !7462, file: !3, line: 2465, type: !3499)
!7466 = !DILocation(line: 2465, column: 42, scope: !7462)
!7467 = !DILocalVariable(name: "target", scope: !7462, file: !3, line: 2467, type: !2702)
!7468 = !DILocation(line: 2467, column: 8, scope: !7462)
!7469 = !DILocation(line: 2467, column: 18, scope: !7462)
!7470 = !DILocation(line: 2467, column: 17, scope: !7462)
!7471 = !DILocation(line: 2469, column: 7, scope: !7472)
!7472 = distinct !DILexicalBlock(scope: !7462, file: !3, line: 2469, column: 7)
!7473 = !DILocation(line: 2469, column: 7, scope: !7462)
!7474 = !DILocation(line: 2471, column: 7, scope: !7475)
!7475 = distinct !DILexicalBlock(scope: !7472, file: !3, line: 2470, column: 5)
!7476 = !DILocation(line: 2472, column: 52, scope: !7475)
!7477 = !DILocation(line: 2472, column: 16, scope: !7475)
!7478 = !DILocation(line: 2472, column: 14, scope: !7475)
!7479 = !DILocation(line: 2473, column: 7, scope: !7475)
!7480 = !DILocation(line: 2475, column: 16, scope: !7475)
!7481 = !DILocation(line: 2475, column: 8, scope: !7475)
!7482 = !DILocation(line: 2475, column: 14, scope: !7475)
!7483 = !DILocation(line: 2476, column: 5, scope: !7475)
!7484 = !DILocation(line: 2478, column: 10, scope: !7462)
!7485 = !DILocation(line: 2478, column: 3, scope: !7462)
!7486 = distinct !DISubprogram(name: "assemble_static_space", scope: !3, file: !3, line: 2527, type: !7487, scopeLine: 2528, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7487 = !DISubroutineType(types: !7488)
!7488 = !{!2876, !2755}
!7489 = !DILocalVariable(name: "size", arg: 1, scope: !7486, file: !3, line: 2527, type: !2755)
!7490 = !DILocation(line: 2527, column: 47, scope: !7486)
!7491 = !DILocalVariable(name: "name", scope: !7486, file: !3, line: 2529, type: !7492)
!7492 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 96, elements: !7493)
!7493 = !{!7494}
!7494 = !DISubrange(count: 12)
!7495 = !DILocation(line: 2529, column: 8, scope: !7486)
!7496 = !DILocalVariable(name: "namestring", scope: !7486, file: !3, line: 2530, type: !2692)
!7497 = !DILocation(line: 2530, column: 15, scope: !7486)
!7498 = !DILocalVariable(name: "x", scope: !7486, file: !3, line: 2531, type: !2876)
!7499 = !DILocation(line: 2531, column: 7, scope: !7486)
!7500 = !DILocation(line: 2533, column: 3, scope: !7486)
!7501 = !DILocation(line: 2533, column: 3, scope: !7502)
!7502 = distinct !DILexicalBlock(scope: !7486, file: !3, line: 2533, column: 3)
!7503 = !DILocation(line: 2534, column: 3, scope: !7486)
!7504 = !DILocation(line: 2535, column: 16, scope: !7486)
!7505 = !DILocation(line: 2535, column: 14, scope: !7486)
!7506 = !DILocation(line: 2537, column: 7, scope: !7486)
!7507 = !DILocation(line: 2537, column: 5, scope: !7486)
!7508 = !DILocation(line: 2538, column: 3, scope: !7486)
!7509 = !DILocation(line: 2538, column: 24, scope: !7486)
!7510 = !DILocation(line: 2545, column: 3, scope: !7486)
!7511 = !DILocation(line: 2545, column: 3, scope: !7512)
!7512 = distinct !DILexicalBlock(scope: !7486, file: !3, line: 2545, column: 3)
!7513 = !DILocation(line: 2545, column: 3, scope: !7514)
!7514 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 2545, column: 3)
!7515 = !DILocation(line: 2559, column: 10, scope: !7486)
!7516 = !DILocation(line: 2559, column: 3, scope: !7486)
!7517 = distinct !DISubprogram(name: "assemble_trampoline_template", scope: !3, file: !3, line: 2569, type: !7518, scopeLine: 2570, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7518 = !DISubroutineType(types: !7519)
!7519 = !{!2876}
!7520 = !DILocalVariable(name: "label", scope: !7517, file: !3, line: 2571, type: !7521)
!7521 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 2048, elements: !7522)
!7522 = !{!7523}
!7523 = !DISubrange(count: 256)
!7524 = !DILocation(line: 2571, column: 8, scope: !7517)
!7525 = !DILocalVariable(name: "name", scope: !7517, file: !3, line: 2572, type: !2692)
!7526 = !DILocation(line: 2572, column: 15, scope: !7517)
!7527 = !DILocalVariable(name: "align", scope: !7517, file: !3, line: 2573, type: !2798)
!7528 = !DILocation(line: 2573, column: 7, scope: !7517)
!7529 = !DILocalVariable(name: "symbol", scope: !7517, file: !3, line: 2574, type: !2876)
!7530 = !DILocation(line: 2574, column: 7, scope: !7517)
!7531 = !DILocation(line: 2576, column: 3, scope: !7517)
!7532 = !DILocation(line: 2578, column: 7, scope: !7533)
!7533 = distinct !DILexicalBlock(scope: !7517, file: !3, line: 2578, column: 7)
!7534 = !DILocation(line: 2578, column: 7, scope: !7517)
!7535 = !DILocation(line: 2579, column: 12, scope: !7533)
!7536 = !DILocation(line: 2579, column: 5, scope: !7533)
!7537 = !DILocation(line: 2586, column: 22, scope: !7517)
!7538 = !DILocation(line: 2586, column: 3, scope: !7517)
!7539 = !DILocation(line: 2590, column: 11, scope: !7517)
!7540 = !DILocation(line: 2590, column: 9, scope: !7517)
!7541 = !DILocation(line: 2591, column: 7, scope: !7542)
!7542 = distinct !DILexicalBlock(scope: !7517, file: !3, line: 2591, column: 7)
!7543 = !DILocation(line: 2591, column: 13, scope: !7542)
!7544 = !DILocation(line: 2591, column: 7, scope: !7517)
!7545 = !DILocation(line: 2592, column: 5, scope: !7546)
!7546 = distinct !DILexicalBlock(scope: !7542, file: !3, line: 2592, column: 5)
!7547 = !DILocation(line: 2592, column: 5, scope: !7542)
!7548 = !DILocation(line: 2594, column: 19, scope: !7517)
!7549 = !DILocation(line: 2594, column: 35, scope: !7517)
!7550 = !DILocation(line: 2594, column: 3, scope: !7517)
!7551 = !DILocation(line: 2595, column: 19, scope: !7517)
!7552 = !DILocation(line: 2595, column: 40, scope: !7517)
!7553 = !DILocation(line: 2595, column: 3, scope: !7517)
!7554 = !DILocation(line: 2598, column: 3, scope: !7517)
!7555 = !DILocation(line: 2598, column: 3, scope: !7556)
!7556 = distinct !DILexicalBlock(scope: !7517, file: !3, line: 2598, column: 3)
!7557 = !DILocation(line: 2599, column: 10, scope: !7517)
!7558 = !DILocation(line: 2599, column: 8, scope: !7517)
!7559 = !DILocation(line: 2600, column: 12, scope: !7517)
!7560 = !DILocation(line: 2600, column: 10, scope: !7517)
!7561 = !DILocation(line: 2601, column: 3, scope: !7517)
!7562 = !DILocation(line: 2601, column: 29, scope: !7517)
!7563 = !DILocation(line: 2603, column: 48, scope: !7517)
!7564 = !DILocation(line: 2603, column: 24, scope: !7517)
!7565 = !DILocation(line: 2603, column: 22, scope: !7517)
!7566 = !DILocation(line: 2604, column: 18, scope: !7517)
!7567 = !DILocation(line: 2604, column: 3, scope: !7517)
!7568 = !DILocation(line: 2605, column: 17, scope: !7517)
!7569 = !DILocation(line: 2605, column: 37, scope: !7517)
!7570 = !DILocation(line: 2605, column: 3, scope: !7517)
!7571 = !DILocation(line: 2607, column: 10, scope: !7517)
!7572 = !DILocation(line: 2607, column: 3, scope: !7517)
!7573 = !DILocation(line: 2608, column: 1, scope: !7517)
!7574 = distinct !DISubprogram(name: "integer_asm_op", scope: !3, file: !3, line: 2628, type: !7575, scopeLine: 2629, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7575 = !DISubroutineType(types: !7576)
!7576 = !{!2692, !2798, !2798}
!7577 = !DILocalVariable(name: "size", arg: 1, scope: !7574, file: !3, line: 2628, type: !2798)
!7578 = !DILocation(line: 2628, column: 21, scope: !7574)
!7579 = !DILocalVariable(name: "aligned_p", arg: 2, scope: !7574, file: !3, line: 2628, type: !2798)
!7580 = !DILocation(line: 2628, column: 31, scope: !7574)
!7581 = !DILocalVariable(name: "ops", scope: !7574, file: !3, line: 2630, type: !7582)
!7582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7583, size: 64)
!7583 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "asm_int_op", file: !1711, line: 102, size: 256, elements: !7584)
!7584 = !{!7585, !7586, !7587, !7588}
!7585 = !DIDerivedType(tag: DW_TAG_member, name: "hi", scope: !7583, file: !1711, line: 104, baseType: !2692, size: 64)
!7586 = !DIDerivedType(tag: DW_TAG_member, name: "si", scope: !7583, file: !1711, line: 105, baseType: !2692, size: 64, offset: 64)
!7587 = !DIDerivedType(tag: DW_TAG_member, name: "di", scope: !7583, file: !1711, line: 106, baseType: !2692, size: 64, offset: 128)
!7588 = !DIDerivedType(tag: DW_TAG_member, name: "ti", scope: !7583, file: !1711, line: 107, baseType: !2692, size: 64, offset: 192)
!7589 = !DILocation(line: 2630, column: 22, scope: !7574)
!7590 = !DILocation(line: 2632, column: 7, scope: !7591)
!7591 = distinct !DILexicalBlock(scope: !7574, file: !3, line: 2632, column: 7)
!7592 = !DILocation(line: 2632, column: 7, scope: !7574)
!7593 = !DILocation(line: 2633, column: 9, scope: !7591)
!7594 = !DILocation(line: 2633, column: 5, scope: !7591)
!7595 = !DILocation(line: 2635, column: 9, scope: !7591)
!7596 = !DILocation(line: 2637, column: 11, scope: !7574)
!7597 = !DILocation(line: 2637, column: 3, scope: !7574)
!7598 = !DILocation(line: 2640, column: 30, scope: !7599)
!7599 = distinct !DILexicalBlock(scope: !7574, file: !3, line: 2638, column: 5)
!7600 = !DILocation(line: 2640, column: 7, scope: !7599)
!7601 = !DILocation(line: 2642, column: 14, scope: !7599)
!7602 = !DILocation(line: 2642, column: 19, scope: !7599)
!7603 = !DILocation(line: 2642, column: 7, scope: !7599)
!7604 = !DILocation(line: 2644, column: 14, scope: !7599)
!7605 = !DILocation(line: 2644, column: 19, scope: !7599)
!7606 = !DILocation(line: 2644, column: 7, scope: !7599)
!7607 = !DILocation(line: 2646, column: 14, scope: !7599)
!7608 = !DILocation(line: 2646, column: 19, scope: !7599)
!7609 = !DILocation(line: 2646, column: 7, scope: !7599)
!7610 = !DILocation(line: 2648, column: 14, scope: !7599)
!7611 = !DILocation(line: 2648, column: 19, scope: !7599)
!7612 = !DILocation(line: 2648, column: 7, scope: !7599)
!7613 = !DILocation(line: 2650, column: 7, scope: !7599)
!7614 = !DILocation(line: 2652, column: 1, scope: !7574)
!7615 = distinct !DISubprogram(name: "assemble_integer_with_op", scope: !3, file: !3, line: 2658, type: !7616, scopeLine: 2659, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7616 = !DISubroutineType(types: !7617)
!7617 = !{null, !2692, !2876}
!7618 = !DILocalVariable(name: "op", arg: 1, scope: !7615, file: !3, line: 2658, type: !2692)
!7619 = !DILocation(line: 2658, column: 39, scope: !7615)
!7620 = !DILocalVariable(name: "x", arg: 2, scope: !7615, file: !3, line: 2658, type: !2876)
!7621 = !DILocation(line: 2658, column: 47, scope: !7615)
!7622 = !DILocation(line: 2660, column: 10, scope: !7615)
!7623 = !DILocation(line: 2660, column: 14, scope: !7615)
!7624 = !DILocation(line: 2660, column: 3, scope: !7615)
!7625 = !DILocation(line: 2661, column: 22, scope: !7615)
!7626 = !DILocation(line: 2661, column: 36, scope: !7615)
!7627 = !DILocation(line: 2661, column: 3, scope: !7615)
!7628 = !DILocation(line: 2662, column: 16, scope: !7615)
!7629 = !DILocation(line: 2662, column: 3, scope: !7615)
!7630 = !DILocation(line: 2663, column: 1, scope: !7615)
!7631 = distinct !DISubprogram(name: "default_assemble_integer", scope: !3, file: !3, line: 2668, type: !7632, scopeLine: 2671, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7632 = !DISubroutineType(types: !7633)
!7633 = !{!2820, !2876, !7, !2798}
!7634 = !DILocalVariable(name: "x", arg: 1, scope: !7631, file: !3, line: 2668, type: !2876)
!7635 = !DILocation(line: 2668, column: 31, scope: !7631)
!7636 = !DILocalVariable(name: "size", arg: 2, scope: !7631, file: !3, line: 2669, type: !7)
!7637 = !DILocation(line: 2669, column: 19, scope: !7631)
!7638 = !DILocalVariable(name: "aligned_p", arg: 3, scope: !7631, file: !3, line: 2670, type: !2798)
!7639 = !DILocation(line: 2670, column: 10, scope: !7631)
!7640 = !DILocalVariable(name: "op", scope: !7631, file: !3, line: 2672, type: !2692)
!7641 = !DILocation(line: 2672, column: 15, scope: !7631)
!7642 = !DILocation(line: 2672, column: 36, scope: !7631)
!7643 = !DILocation(line: 2672, column: 42, scope: !7631)
!7644 = !DILocation(line: 2672, column: 20, scope: !7631)
!7645 = !DILocation(line: 2675, column: 7, scope: !7646)
!7646 = distinct !DILexicalBlock(scope: !7631, file: !3, line: 2675, column: 7)
!7647 = !DILocation(line: 2675, column: 12, scope: !7646)
!7648 = !DILocation(line: 2675, column: 29, scope: !7646)
!7649 = !DILocation(line: 2675, column: 32, scope: !7646)
!7650 = !DILocation(line: 2675, column: 37, scope: !7646)
!7651 = !DILocation(line: 2675, column: 7, scope: !7631)
!7652 = !DILocation(line: 2676, column: 5, scope: !7646)
!7653 = !DILocation(line: 2677, column: 10, scope: !7631)
!7654 = !DILocation(line: 2677, column: 13, scope: !7631)
!7655 = !DILocation(line: 2677, column: 43, scope: !7631)
!7656 = !DILocation(line: 2677, column: 47, scope: !7631)
!7657 = !DILocation(line: 2677, column: 17, scope: !7631)
!7658 = !DILocation(line: 0, scope: !7631)
!7659 = !DILocation(line: 2677, column: 3, scope: !7631)
!7660 = !DILocation(line: 2678, column: 1, scope: !7631)
!7661 = distinct !DISubprogram(name: "assemble_real", scope: !3, file: !3, line: 2735, type: !7662, scopeLine: 2736, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7662 = !DISubroutineType(types: !7663)
!7663 = !{null, !2764, !5, !7}
!7664 = !DILocalVariable(name: "d", arg: 1, scope: !7661, file: !3, line: 2735, type: !2764)
!7665 = !DILocation(line: 2735, column: 32, scope: !7661)
!7666 = !DILocalVariable(name: "mode", arg: 2, scope: !7661, file: !3, line: 2735, type: !5)
!7667 = !DILocation(line: 2735, column: 53, scope: !7661)
!7668 = !DILocalVariable(name: "align", arg: 3, scope: !7661, file: !3, line: 2735, type: !7)
!7669 = !DILocation(line: 2735, column: 72, scope: !7661)
!7670 = !DILocalVariable(name: "data", scope: !7661, file: !3, line: 2737, type: !7671)
!7671 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2757, size: 256, elements: !2968)
!7672 = !DILocation(line: 2737, column: 8, scope: !7661)
!7673 = !DILocalVariable(name: "i", scope: !7661, file: !3, line: 2738, type: !2798)
!7674 = !DILocation(line: 2738, column: 7, scope: !7661)
!7675 = !DILocalVariable(name: "bitsize", scope: !7661, file: !3, line: 2739, type: !2798)
!7676 = !DILocation(line: 2739, column: 7, scope: !7661)
!7677 = !DILocalVariable(name: "nelts", scope: !7661, file: !3, line: 2739, type: !2798)
!7678 = !DILocation(line: 2739, column: 16, scope: !7661)
!7679 = !DILocalVariable(name: "nunits", scope: !7661, file: !3, line: 2739, type: !2798)
!7680 = !DILocation(line: 2739, column: 23, scope: !7661)
!7681 = !DILocalVariable(name: "units_per", scope: !7661, file: !3, line: 2739, type: !2798)
!7682 = !DILocation(line: 2739, column: 31, scope: !7661)
!7683 = !DILocation(line: 2753, column: 12, scope: !7661)
!7684 = !DILocation(line: 2753, column: 10, scope: !7661)
!7685 = !DILocation(line: 2754, column: 13, scope: !7661)
!7686 = !DILocation(line: 2754, column: 20, scope: !7661)
!7687 = !DILocation(line: 2754, column: 11, scope: !7661)
!7688 = !DILocation(line: 2755, column: 11, scope: !7661)
!7689 = !DILocation(line: 2755, column: 9, scope: !7661)
!7690 = !DILocation(line: 2756, column: 13, scope: !7661)
!7691 = !DILocation(line: 2758, column: 19, scope: !7661)
!7692 = !DILocation(line: 2758, column: 29, scope: !7661)
!7693 = !DILocation(line: 2758, column: 3, scope: !7661)
!7694 = !DILocation(line: 2764, column: 21, scope: !7661)
!7695 = !DILocation(line: 2764, column: 50, scope: !7661)
!7696 = !DILocation(line: 2764, column: 75, scope: !7661)
!7697 = !DILocation(line: 2764, column: 3, scope: !7661)
!7698 = !DILocation(line: 2768, column: 13, scope: !7661)
!7699 = !DILocation(line: 2768, column: 10, scope: !7661)
!7700 = !DILocation(line: 2771, column: 22, scope: !7661)
!7701 = !DILocation(line: 2771, column: 11, scope: !7661)
!7702 = !DILocation(line: 2771, column: 9, scope: !7661)
!7703 = !DILocation(line: 2773, column: 10, scope: !7704)
!7704 = distinct !DILexicalBlock(scope: !7661, file: !3, line: 2773, column: 3)
!7705 = !DILocation(line: 2773, column: 8, scope: !7704)
!7706 = !DILocation(line: 2773, column: 15, scope: !7707)
!7707 = distinct !DILexicalBlock(scope: !7704, file: !3, line: 2773, column: 3)
!7708 = !DILocation(line: 2773, column: 19, scope: !7707)
!7709 = !DILocation(line: 2773, column: 17, scope: !7707)
!7710 = !DILocation(line: 2773, column: 3, scope: !7704)
!7711 = !DILocation(line: 2778, column: 25, scope: !7712)
!7712 = distinct !DILexicalBlock(scope: !7707, file: !3, line: 2774, column: 5)
!7713 = !DILocation(line: 2778, column: 54, scope: !7712)
!7714 = !DILocation(line: 2778, column: 79, scope: !7712)
!7715 = !DILocation(line: 2778, column: 7, scope: !7712)
!7716 = !DILocation(line: 2782, column: 17, scope: !7712)
!7717 = !DILocation(line: 2782, column: 14, scope: !7712)
!7718 = !DILocation(line: 2783, column: 5, scope: !7712)
!7719 = !DILocation(line: 2773, column: 27, scope: !7707)
!7720 = !DILocation(line: 2773, column: 3, scope: !7707)
!7721 = distinct !{!7721, !7710, !7722}
!7722 = !DILocation(line: 2783, column: 5, scope: !7704)
!7723 = !DILocation(line: 2784, column: 1, scope: !7661)
!7724 = distinct !DISubprogram(name: "min_align", scope: !3, file: !3, line: 2614, type: !7725, scopeLine: 2615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7725 = !DISubroutineType(types: !7726)
!7726 = !{!7, !7, !7}
!7727 = !DILocalVariable(name: "a", arg: 1, scope: !7724, file: !3, line: 2614, type: !7)
!7728 = !DILocation(line: 2614, column: 25, scope: !7724)
!7729 = !DILocalVariable(name: "b", arg: 2, scope: !7724, file: !3, line: 2614, type: !7)
!7730 = !DILocation(line: 2614, column: 41, scope: !7724)
!7731 = !DILocation(line: 2616, column: 11, scope: !7724)
!7732 = !DILocation(line: 2616, column: 15, scope: !7724)
!7733 = !DILocation(line: 2616, column: 13, scope: !7724)
!7734 = !DILocation(line: 2616, column: 22, scope: !7724)
!7735 = !DILocation(line: 2616, column: 26, scope: !7724)
!7736 = !DILocation(line: 2616, column: 24, scope: !7724)
!7737 = !DILocation(line: 2616, column: 20, scope: !7724)
!7738 = !DILocation(line: 2616, column: 18, scope: !7724)
!7739 = !DILocation(line: 2616, column: 3, scope: !7724)
!7740 = distinct !DISubprogram(name: "constant_pool_htab", scope: !3, file: !3, line: 2865, type: !7741, scopeLine: 2866, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7741 = !DISubroutineType(types: !7742)
!7742 = !{!3284}
!7743 = !DILocation(line: 2867, column: 10, scope: !7740)
!7744 = !DILocation(line: 2867, column: 3, scope: !7740)
!7745 = distinct !DISubprogram(name: "output_constant_def", scope: !3, file: !3, line: 3307, type: !7746, scopeLine: 3308, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7746 = !DISubroutineType(types: !7747)
!7747 = !{!2876, !2702, !2798}
!7748 = !DILocalVariable(name: "exp", arg: 1, scope: !7745, file: !3, line: 3307, type: !2702)
!7749 = !DILocation(line: 3307, column: 27, scope: !7745)
!7750 = !DILocalVariable(name: "defer", arg: 2, scope: !7745, file: !3, line: 3307, type: !2798)
!7751 = !DILocation(line: 3307, column: 36, scope: !7745)
!7752 = !DILocalVariable(name: "desc", scope: !7745, file: !3, line: 3309, type: !3785)
!7753 = !DILocation(line: 3309, column: 36, scope: !7745)
!7754 = !DILocalVariable(name: "key", scope: !7745, file: !3, line: 3310, type: !3786)
!7755 = !DILocation(line: 3310, column: 35, scope: !7745)
!7756 = !DILocalVariable(name: "loc", scope: !7745, file: !3, line: 3311, type: !3304)
!7757 = !DILocation(line: 3311, column: 10, scope: !7745)
!7758 = !DILocation(line: 3315, column: 15, scope: !7745)
!7759 = !DILocation(line: 3315, column: 7, scope: !7745)
!7760 = !DILocation(line: 3315, column: 13, scope: !7745)
!7761 = !DILocation(line: 3316, column: 28, scope: !7745)
!7762 = !DILocation(line: 3316, column: 14, scope: !7745)
!7763 = !DILocation(line: 3316, column: 7, scope: !7745)
!7764 = !DILocation(line: 3316, column: 12, scope: !7745)
!7765 = !DILocation(line: 3317, column: 35, scope: !7745)
!7766 = !DILocation(line: 3317, column: 52, scope: !7745)
!7767 = !DILocation(line: 3317, column: 62, scope: !7745)
!7768 = !DILocation(line: 3317, column: 9, scope: !7745)
!7769 = !DILocation(line: 3317, column: 7, scope: !7745)
!7770 = !DILocation(line: 3319, column: 47, scope: !7745)
!7771 = !DILocation(line: 3319, column: 46, scope: !7745)
!7772 = !DILocation(line: 3319, column: 10, scope: !7745)
!7773 = !DILocation(line: 3319, column: 8, scope: !7745)
!7774 = !DILocation(line: 3320, column: 7, scope: !7775)
!7775 = distinct !DILexicalBlock(scope: !7745, file: !3, line: 3320, column: 7)
!7776 = !DILocation(line: 3320, column: 12, scope: !7775)
!7777 = !DILocation(line: 3320, column: 7, scope: !7745)
!7778 = !DILocation(line: 3322, column: 35, scope: !7779)
!7779 = distinct !DILexicalBlock(scope: !7775, file: !3, line: 3321, column: 5)
!7780 = !DILocation(line: 3322, column: 14, scope: !7779)
!7781 = !DILocation(line: 3322, column: 12, scope: !7779)
!7782 = !DILocation(line: 3323, column: 24, scope: !7779)
!7783 = !DILocation(line: 3323, column: 7, scope: !7779)
!7784 = !DILocation(line: 3323, column: 13, scope: !7779)
!7785 = !DILocation(line: 3323, column: 18, scope: !7779)
!7786 = !DILocation(line: 3324, column: 14, scope: !7779)
!7787 = !DILocation(line: 3324, column: 8, scope: !7779)
!7788 = !DILocation(line: 3324, column: 12, scope: !7779)
!7789 = !DILocation(line: 3325, column: 5, scope: !7779)
!7790 = !DILocation(line: 3327, column: 39, scope: !7745)
!7791 = !DILocation(line: 3327, column: 45, scope: !7745)
!7792 = !DILocation(line: 3327, column: 3, scope: !7745)
!7793 = !DILocation(line: 3328, column: 10, scope: !7745)
!7794 = !DILocation(line: 3328, column: 16, scope: !7745)
!7795 = !DILocation(line: 3328, column: 3, scope: !7745)
!7796 = distinct !DISubprogram(name: "const_hash_1", scope: !3, file: !3, line: 2879, type: !7797, scopeLine: 2880, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7797 = !DISubroutineType(types: !7798)
!7798 = !{!3092, !7799}
!7799 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2702)
!7800 = !DILocalVariable(name: "exp", arg: 1, scope: !7796, file: !3, line: 2879, type: !7799)
!7801 = !DILocation(line: 2879, column: 26, scope: !7796)
!7802 = !DILocalVariable(name: "p", scope: !7796, file: !3, line: 2881, type: !2692)
!7803 = !DILocation(line: 2881, column: 15, scope: !7796)
!7804 = !DILocalVariable(name: "hi", scope: !7796, file: !3, line: 2882, type: !3092)
!7805 = !DILocation(line: 2882, column: 13, scope: !7796)
!7806 = !DILocalVariable(name: "len", scope: !7796, file: !3, line: 2883, type: !2798)
!7807 = !DILocation(line: 2883, column: 7, scope: !7796)
!7808 = !DILocalVariable(name: "i", scope: !7796, file: !3, line: 2883, type: !2798)
!7809 = !DILocation(line: 2883, column: 12, scope: !7796)
!7810 = !DILocalVariable(name: "code", scope: !7796, file: !3, line: 2884, type: !183)
!7811 = !DILocation(line: 2884, column: 18, scope: !7796)
!7812 = !DILocation(line: 2884, column: 25, scope: !7796)
!7813 = !DILocation(line: 2889, column: 11, scope: !7796)
!7814 = !DILocation(line: 2889, column: 3, scope: !7796)
!7815 = !DILocation(line: 2892, column: 21, scope: !7816)
!7816 = distinct !DILexicalBlock(scope: !7796, file: !3, line: 2890, column: 5)
!7817 = !DILocation(line: 2892, column: 11, scope: !7816)
!7818 = !DILocation(line: 2892, column: 9, scope: !7816)
!7819 = !DILocation(line: 2893, column: 11, scope: !7816)
!7820 = !DILocation(line: 2894, column: 7, scope: !7816)
!7821 = !DILocation(line: 2897, column: 25, scope: !7816)
!7822 = !DILocation(line: 2897, column: 14, scope: !7816)
!7823 = !DILocation(line: 2897, column: 7, scope: !7816)
!7824 = !DILocation(line: 2900, column: 26, scope: !7816)
!7825 = !DILocation(line: 2900, column: 14, scope: !7816)
!7826 = !DILocation(line: 2900, column: 7, scope: !7816)
!7827 = !DILocation(line: 2903, column: 11, scope: !7816)
!7828 = !DILocation(line: 2903, column: 9, scope: !7816)
!7829 = !DILocation(line: 2904, column: 13, scope: !7816)
!7830 = !DILocation(line: 2904, column: 11, scope: !7816)
!7831 = !DILocation(line: 2905, column: 7, scope: !7816)
!7832 = !DILocation(line: 2908, column: 29, scope: !7816)
!7833 = !DILocation(line: 2908, column: 15, scope: !7816)
!7834 = !DILocation(line: 2908, column: 50, scope: !7816)
!7835 = !DILocation(line: 2909, column: 24, scope: !7816)
!7836 = !DILocation(line: 2909, column: 10, scope: !7816)
!7837 = !DILocation(line: 2909, column: 8, scope: !7816)
!7838 = !DILocation(line: 2908, column: 7, scope: !7816)
!7839 = !DILocalVariable(name: "idx", scope: !7840, file: !3, line: 2913, type: !2755)
!7840 = distinct !DILexicalBlock(scope: !7816, file: !3, line: 2912, column: 7)
!7841 = !DILocation(line: 2913, column: 25, scope: !7840)
!7842 = !DILocalVariable(name: "value", scope: !7840, file: !3, line: 2914, type: !2702)
!7843 = !DILocation(line: 2914, column: 7, scope: !7840)
!7844 = !DILocation(line: 2916, column: 30, scope: !7840)
!7845 = !DILocation(line: 2916, column: 11, scope: !7840)
!7846 = !DILocation(line: 2916, column: 9, scope: !7840)
!7847 = !DILocation(line: 2916, column: 7, scope: !7840)
!7848 = !DILocation(line: 2916, column: 5, scope: !7840)
!7849 = !DILocation(line: 2918, column: 2, scope: !7850)
!7850 = distinct !DILexicalBlock(scope: !7840, file: !3, line: 2918, column: 2)
!7851 = !DILocation(line: 2918, column: 2, scope: !7852)
!7852 = distinct !DILexicalBlock(scope: !7850, file: !3, line: 2918, column: 2)
!7853 = !DILocation(line: 2919, column: 8, scope: !7854)
!7854 = distinct !DILexicalBlock(scope: !7852, file: !3, line: 2919, column: 8)
!7855 = !DILocation(line: 2919, column: 8, scope: !7852)
!7856 = !DILocation(line: 2920, column: 11, scope: !7854)
!7857 = !DILocation(line: 2920, column: 14, scope: !7854)
!7858 = !DILocation(line: 2920, column: 36, scope: !7854)
!7859 = !DILocation(line: 2920, column: 22, scope: !7854)
!7860 = !DILocation(line: 2920, column: 20, scope: !7854)
!7861 = !DILocation(line: 2920, column: 9, scope: !7854)
!7862 = !DILocation(line: 2920, column: 6, scope: !7854)
!7863 = distinct !{!7863, !7849, !7864}
!7864 = !DILocation(line: 2920, column: 41, scope: !7850)
!7865 = !DILocation(line: 2922, column: 9, scope: !7840)
!7866 = !DILocation(line: 2922, column: 2, scope: !7840)
!7867 = !DILocalVariable(name: "value", scope: !7868, file: !3, line: 2928, type: !7869)
!7868 = distinct !DILexicalBlock(scope: !7816, file: !3, line: 2927, column: 7)
!7869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "addr_const", file: !3, line: 2791, size: 128, elements: !7870)
!7870 = !{!7871, !7872}
!7871 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !7869, file: !3, line: 2792, baseType: !2876, size: 64)
!7872 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !7869, file: !3, line: 2793, baseType: !2757, size: 64, offset: 64)
!7873 = !DILocation(line: 2928, column: 20, scope: !7868)
!7874 = !DILocation(line: 2930, column: 21, scope: !7868)
!7875 = !DILocation(line: 2930, column: 2, scope: !7868)
!7876 = !DILocation(line: 2931, column: 10, scope: !7868)
!7877 = !DILocation(line: 2931, column: 2, scope: !7868)
!7878 = !DILocation(line: 2936, column: 17, scope: !7879)
!7879 = distinct !DILexicalBlock(scope: !7868, file: !3, line: 2932, column: 4)
!7880 = !DILocation(line: 2936, column: 11, scope: !7879)
!7881 = !DILocation(line: 2936, column: 9, scope: !7879)
!7882 = !DILocation(line: 2937, column: 10, scope: !7879)
!7883 = !DILocation(line: 2937, column: 8, scope: !7879)
!7884 = !DILocation(line: 2938, column: 13, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7879, file: !3, line: 2938, column: 6)
!7886 = !DILocation(line: 2938, column: 11, scope: !7885)
!7887 = !DILocation(line: 2938, column: 18, scope: !7888)
!7888 = distinct !DILexicalBlock(scope: !7885, file: !3, line: 2938, column: 6)
!7889 = !DILocation(line: 2938, column: 20, scope: !7888)
!7890 = !DILocation(line: 2938, column: 23, scope: !7888)
!7891 = !DILocation(line: 2938, column: 6, scope: !7885)
!7892 = !DILocation(line: 2939, column: 15, scope: !7888)
!7893 = !DILocation(line: 2939, column: 18, scope: !7888)
!7894 = !DILocation(line: 2939, column: 39, scope: !7888)
!7895 = !DILocation(line: 2939, column: 41, scope: !7888)
!7896 = !DILocation(line: 2939, column: 27, scope: !7888)
!7897 = !DILocation(line: 2939, column: 25, scope: !7888)
!7898 = !DILocation(line: 2939, column: 11, scope: !7888)
!7899 = !DILocation(line: 2939, column: 8, scope: !7888)
!7900 = !DILocation(line: 2938, column: 30, scope: !7888)
!7901 = !DILocation(line: 2938, column: 6, scope: !7888)
!7902 = distinct !{!7902, !7891, !7903}
!7903 = !DILocation(line: 2939, column: 44, scope: !7885)
!7904 = !DILocation(line: 2940, column: 6, scope: !7879)
!7905 = !DILocation(line: 2943, column: 17, scope: !7879)
!7906 = !DILocation(line: 2943, column: 26, scope: !7879)
!7907 = !DILocation(line: 2943, column: 67, scope: !7879)
!7908 = !DILocation(line: 2943, column: 24, scope: !7879)
!7909 = !DILocation(line: 2943, column: 11, scope: !7879)
!7910 = !DILocation(line: 2943, column: 9, scope: !7879)
!7911 = !DILocation(line: 2944, column: 6, scope: !7879)
!7912 = !DILocation(line: 2947, column: 6, scope: !7879)
!7913 = !DILocation(line: 2948, column: 4, scope: !7879)
!7914 = !DILocation(line: 2950, column: 14, scope: !7816)
!7915 = !DILocation(line: 2950, column: 7, scope: !7816)
!7916 = !DILocation(line: 2955, column: 29, scope: !7816)
!7917 = !DILocation(line: 2955, column: 15, scope: !7816)
!7918 = !DILocation(line: 2955, column: 52, scope: !7816)
!7919 = !DILocation(line: 2956, column: 24, scope: !7816)
!7920 = !DILocation(line: 2956, column: 10, scope: !7816)
!7921 = !DILocation(line: 2956, column: 8, scope: !7816)
!7922 = !DILocation(line: 2955, column: 7, scope: !7816)
!7923 = !DILocation(line: 2959, column: 28, scope: !7816)
!7924 = !DILocation(line: 2959, column: 14, scope: !7816)
!7925 = !DILocation(line: 2959, column: 51, scope: !7816)
!7926 = !DILocation(line: 2959, column: 55, scope: !7816)
!7927 = !DILocation(line: 2959, column: 7, scope: !7816)
!7928 = !DILocation(line: 2963, column: 14, scope: !7816)
!7929 = !DILocation(line: 2963, column: 7, scope: !7816)
!7930 = !DILocation(line: 2967, column: 8, scope: !7796)
!7931 = !DILocation(line: 2967, column: 6, scope: !7796)
!7932 = !DILocation(line: 2968, column: 10, scope: !7933)
!7933 = distinct !DILexicalBlock(scope: !7796, file: !3, line: 2968, column: 3)
!7934 = !DILocation(line: 2968, column: 8, scope: !7933)
!7935 = !DILocation(line: 2968, column: 15, scope: !7936)
!7936 = distinct !DILexicalBlock(scope: !7933, file: !3, line: 2968, column: 3)
!7937 = !DILocation(line: 2968, column: 19, scope: !7936)
!7938 = !DILocation(line: 2968, column: 17, scope: !7936)
!7939 = !DILocation(line: 2968, column: 3, scope: !7933)
!7940 = !DILocation(line: 2969, column: 12, scope: !7936)
!7941 = !DILocation(line: 2969, column: 15, scope: !7936)
!7942 = !DILocation(line: 2969, column: 36, scope: !7936)
!7943 = !DILocation(line: 2969, column: 38, scope: !7936)
!7944 = !DILocation(line: 2969, column: 24, scope: !7936)
!7945 = !DILocation(line: 2969, column: 22, scope: !7936)
!7946 = !DILocation(line: 2969, column: 8, scope: !7936)
!7947 = !DILocation(line: 2969, column: 5, scope: !7936)
!7948 = !DILocation(line: 2968, column: 25, scope: !7936)
!7949 = !DILocation(line: 2968, column: 3, scope: !7936)
!7950 = distinct !{!7950, !7939, !7951}
!7951 = !DILocation(line: 2969, column: 41, scope: !7933)
!7952 = !DILocation(line: 2971, column: 10, scope: !7796)
!7953 = !DILocation(line: 2971, column: 3, scope: !7796)
!7954 = !DILocation(line: 2972, column: 1, scope: !7796)
!7955 = distinct !DISubprogram(name: "build_constant_desc", scope: !3, file: !3, line: 3239, type: !7956, scopeLine: 3240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!7956 = !DISubroutineType(types: !7957)
!7957 = !{!3785, !2702}
!7958 = !DILocalVariable(name: "exp", arg: 1, scope: !7955, file: !3, line: 3239, type: !2702)
!7959 = !DILocation(line: 3239, column: 27, scope: !7955)
!7960 = !DILocalVariable(name: "symbol", scope: !7955, file: !3, line: 3241, type: !2876)
!7961 = !DILocation(line: 3241, column: 7, scope: !7955)
!7962 = !DILocalVariable(name: "rtl", scope: !7955, file: !3, line: 3242, type: !2876)
!7963 = !DILocation(line: 3242, column: 7, scope: !7955)
!7964 = !DILocalVariable(name: "label", scope: !7955, file: !3, line: 3243, type: !7521)
!7965 = !DILocation(line: 3243, column: 8, scope: !7955)
!7966 = !DILocalVariable(name: "labelno", scope: !7955, file: !3, line: 3244, type: !2798)
!7967 = !DILocation(line: 3244, column: 7, scope: !7955)
!7968 = !DILocalVariable(name: "desc", scope: !7955, file: !3, line: 3245, type: !3785)
!7969 = !DILocation(line: 3245, column: 36, scope: !7955)
!7970 = !DILocation(line: 3247, column: 10, scope: !7955)
!7971 = !DILocation(line: 3247, column: 8, scope: !7955)
!7972 = !DILocation(line: 3248, column: 32, scope: !7955)
!7973 = !DILocation(line: 3248, column: 17, scope: !7955)
!7974 = !DILocation(line: 3248, column: 3, scope: !7955)
!7975 = !DILocation(line: 3248, column: 9, scope: !7955)
!7976 = !DILocation(line: 3248, column: 15, scope: !7955)
!7977 = !DILocation(line: 3251, column: 7, scope: !7978)
!7978 = distinct !DILexicalBlock(scope: !7955, file: !3, line: 3251, column: 7)
!7979 = !DILocation(line: 3251, column: 20, scope: !7978)
!7980 = !DILocation(line: 3251, column: 36, scope: !7978)
!7981 = !DILocation(line: 3251, column: 23, scope: !7978)
!7982 = !DILocation(line: 3251, column: 7, scope: !7955)
!7983 = !DILocation(line: 3252, column: 14, scope: !7978)
!7984 = !DILocation(line: 3252, column: 20, scope: !7978)
!7985 = !DILocation(line: 3252, column: 5, scope: !7978)
!7986 = !DILocation(line: 3255, column: 26, scope: !7955)
!7987 = !DILocation(line: 3255, column: 11, scope: !7955)
!7988 = !DILocation(line: 3256, column: 3, scope: !7955)
!7989 = !DILocation(line: 3256, column: 3, scope: !7990)
!7990 = distinct !DILexicalBlock(scope: !7955, file: !3, line: 3256, column: 3)
!7991 = !DILocation(line: 3259, column: 7, scope: !7992)
!7992 = distinct !DILexicalBlock(scope: !7955, file: !3, line: 3259, column: 7)
!7993 = !DILocation(line: 3259, column: 7, scope: !7955)
!7994 = !DILocalVariable(name: "sect", scope: !7995, file: !3, line: 3261, type: !3109)
!7995 = distinct !DILexicalBlock(scope: !7992, file: !3, line: 3260, column: 5)
!7996 = !DILocation(line: 3261, column: 16, scope: !7995)
!7997 = !DILocation(line: 3261, column: 45, scope: !7995)
!7998 = !DILocation(line: 3261, column: 23, scope: !7995)
!7999 = !DILocation(line: 3262, column: 37, scope: !7995)
!8000 = !DILocation(line: 3263, column: 32, scope: !7995)
!8001 = !DILocation(line: 3263, column: 9, scope: !7995)
!8002 = !DILocation(line: 3262, column: 16, scope: !7995)
!8003 = !DILocation(line: 3262, column: 14, scope: !7995)
!8004 = !DILocation(line: 3264, column: 5, scope: !7995)
!8005 = !DILocation(line: 3266, column: 14, scope: !7992)
!8006 = !DILocation(line: 3266, column: 12, scope: !7992)
!8007 = !DILocation(line: 3267, column: 3, scope: !7955)
!8008 = !DILocation(line: 3267, column: 29, scope: !7955)
!8009 = !DILocation(line: 3268, column: 3, scope: !7955)
!8010 = !DILocation(line: 3269, column: 3, scope: !7955)
!8011 = !DILocation(line: 3269, column: 41, scope: !7955)
!8012 = !DILocation(line: 3271, column: 22, scope: !7955)
!8013 = !DILocation(line: 3271, column: 51, scope: !7955)
!8014 = !DILocation(line: 3271, column: 9, scope: !7955)
!8015 = !DILocation(line: 3271, column: 7, scope: !7955)
!8016 = !DILocation(line: 3272, column: 23, scope: !7955)
!8017 = !DILocation(line: 3272, column: 28, scope: !7955)
!8018 = !DILocation(line: 3272, column: 3, scope: !7955)
!8019 = !DILocation(line: 3273, column: 22, scope: !7955)
!8020 = !DILocation(line: 3273, column: 3, scope: !7955)
!8021 = !DILocation(line: 3274, column: 22, scope: !7955)
!8022 = !DILocation(line: 3274, column: 27, scope: !7955)
!8023 = !DILocation(line: 3274, column: 3, scope: !7955)
!8024 = !DILocation(line: 3278, column: 3, scope: !7955)
!8025 = !DILocation(line: 3278, column: 24, scope: !7955)
!8026 = !DILocation(line: 3286, column: 11, scope: !7955)
!8027 = !DILocation(line: 3286, column: 32, scope: !7955)
!8028 = !DILocation(line: 3286, column: 37, scope: !7955)
!8029 = !DILocation(line: 3286, column: 3, scope: !7955)
!8030 = !DILocation(line: 3288, column: 15, scope: !7955)
!8031 = !DILocation(line: 3288, column: 3, scope: !7955)
!8032 = !DILocation(line: 3288, column: 9, scope: !7955)
!8033 = !DILocation(line: 3288, column: 13, scope: !7955)
!8034 = !DILocation(line: 3290, column: 10, scope: !7955)
!8035 = !DILocation(line: 3290, column: 3, scope: !7955)
!8036 = distinct !DISubprogram(name: "maybe_output_constant_def_contents", scope: !3, file: !3, line: 3334, type: !8037, scopeLine: 3336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8037 = !DISubroutineType(types: !8038)
!8038 = !{null, !3785, !2798}
!8039 = !DILocalVariable(name: "desc", arg: 1, scope: !8036, file: !3, line: 3334, type: !3785)
!8040 = !DILocation(line: 3334, column: 70, scope: !8036)
!8041 = !DILocalVariable(name: "defer", arg: 2, scope: !8036, file: !3, line: 3335, type: !2798)
!8042 = !DILocation(line: 3335, column: 13, scope: !8036)
!8043 = !DILocalVariable(name: "symbol", scope: !8036, file: !3, line: 3337, type: !2876)
!8044 = !DILocation(line: 3337, column: 7, scope: !8036)
!8045 = !DILocation(line: 3337, column: 16, scope: !8036)
!8046 = !DILocalVariable(name: "exp", scope: !8036, file: !3, line: 3338, type: !2702)
!8047 = !DILocation(line: 3338, column: 8, scope: !8036)
!8048 = !DILocation(line: 3338, column: 14, scope: !8036)
!8049 = !DILocation(line: 3338, column: 20, scope: !8036)
!8050 = !DILocation(line: 3340, column: 7, scope: !8051)
!8051 = distinct !DILexicalBlock(scope: !8036, file: !3, line: 3340, column: 7)
!8052 = !DILocation(line: 3340, column: 7, scope: !8036)
!8053 = !DILocation(line: 3341, column: 5, scope: !8051)
!8054 = !DILocation(line: 3343, column: 7, scope: !8055)
!8055 = distinct !DILexicalBlock(scope: !8036, file: !3, line: 3343, column: 7)
!8056 = !DILocation(line: 3343, column: 7, scope: !8036)
!8057 = !DILocation(line: 3345, column: 5, scope: !8055)
!8058 = !DILocation(line: 3349, column: 7, scope: !8059)
!8059 = distinct !DILexicalBlock(scope: !8036, file: !3, line: 3349, column: 7)
!8060 = !DILocation(line: 3349, column: 7, scope: !8036)
!8061 = !DILocation(line: 3356, column: 11, scope: !8062)
!8062 = distinct !DILexicalBlock(scope: !8063, file: !3, line: 3356, column: 11)
!8063 = distinct !DILexicalBlock(scope: !8059, file: !3, line: 3350, column: 5)
!8064 = !DILocation(line: 3356, column: 11, scope: !8063)
!8065 = !DILocation(line: 3357, column: 22, scope: !8062)
!8066 = !DILocation(line: 3357, column: 2, scope: !8062)
!8067 = !DILocation(line: 3358, column: 7, scope: !8063)
!8068 = !DILocation(line: 3361, column: 33, scope: !8036)
!8069 = !DILocation(line: 3361, column: 3, scope: !8036)
!8070 = !DILocation(line: 3362, column: 1, scope: !8036)
!8071 = distinct !DISubprogram(name: "lookup_constant_def", scope: !3, file: !3, line: 3423, type: !5421, scopeLine: 3424, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8072 = !DILocalVariable(name: "exp", arg: 1, scope: !8071, file: !3, line: 3423, type: !2702)
!8073 = !DILocation(line: 3423, column: 27, scope: !8071)
!8074 = !DILocalVariable(name: "desc", scope: !8071, file: !3, line: 3425, type: !3785)
!8075 = !DILocation(line: 3425, column: 36, scope: !8071)
!8076 = !DILocalVariable(name: "key", scope: !8071, file: !3, line: 3426, type: !3786)
!8077 = !DILocation(line: 3426, column: 35, scope: !8071)
!8078 = !DILocation(line: 3428, column: 15, scope: !8071)
!8079 = !DILocation(line: 3428, column: 7, scope: !8071)
!8080 = !DILocation(line: 3428, column: 13, scope: !8071)
!8081 = !DILocation(line: 3429, column: 28, scope: !8071)
!8082 = !DILocation(line: 3429, column: 14, scope: !8071)
!8083 = !DILocation(line: 3429, column: 7, scope: !8071)
!8084 = !DILocation(line: 3429, column: 12, scope: !8071)
!8085 = !DILocation(line: 3431, column: 26, scope: !8071)
!8086 = !DILocation(line: 3431, column: 43, scope: !8071)
!8087 = !DILocation(line: 3431, column: 53, scope: !8071)
!8088 = !DILocation(line: 3431, column: 5, scope: !8071)
!8089 = !DILocation(line: 3430, column: 10, scope: !8071)
!8090 = !DILocation(line: 3430, column: 8, scope: !8071)
!8091 = !DILocation(line: 3433, column: 11, scope: !8071)
!8092 = !DILocation(line: 3433, column: 18, scope: !8071)
!8093 = !DILocation(line: 3433, column: 24, scope: !8071)
!8094 = !DILocation(line: 3433, column: 3, scope: !8071)
!8095 = distinct !DISubprogram(name: "init_varasm_status", scope: !3, file: !3, line: 3604, type: !4245, scopeLine: 3605, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8096 = !DILocation(line: 3606, column: 23, scope: !8095)
!8097 = !DILocation(line: 3606, column: 21, scope: !8095)
!8098 = !DILocation(line: 3607, column: 35, scope: !8095)
!8099 = !DILocation(line: 3608, column: 1, scope: !8095)
!8100 = distinct !DISubprogram(name: "create_constant_pool", scope: !3, file: !3, line: 3588, type: !8101, scopeLine: 3589, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8101 = !DISubroutineType(types: !8102)
!8102 = !{!3791}
!8103 = !DILocalVariable(name: "pool", scope: !8100, file: !3, line: 3590, type: !3791)
!8104 = !DILocation(line: 3590, column: 29, scope: !8100)
!8105 = !DILocation(line: 3592, column: 10, scope: !8100)
!8106 = !DILocation(line: 3592, column: 8, scope: !8100)
!8107 = !DILocation(line: 3593, column: 26, scope: !8100)
!8108 = !DILocation(line: 3593, column: 3, scope: !8100)
!8109 = !DILocation(line: 3593, column: 9, scope: !8100)
!8110 = !DILocation(line: 3593, column: 24, scope: !8100)
!8111 = !DILocation(line: 3595, column: 3, scope: !8100)
!8112 = !DILocation(line: 3595, column: 9, scope: !8100)
!8113 = !DILocation(line: 3595, column: 15, scope: !8100)
!8114 = !DILocation(line: 3596, column: 3, scope: !8100)
!8115 = !DILocation(line: 3596, column: 9, scope: !8100)
!8116 = !DILocation(line: 3596, column: 14, scope: !8100)
!8117 = !DILocation(line: 3597, column: 3, scope: !8100)
!8118 = !DILocation(line: 3597, column: 9, scope: !8100)
!8119 = !DILocation(line: 3597, column: 16, scope: !8100)
!8120 = !DILocation(line: 3598, column: 10, scope: !8100)
!8121 = !DILocation(line: 3598, column: 3, scope: !8100)
!8122 = distinct !DISubprogram(name: "simplify_subtraction", scope: !3, file: !3, line: 3614, type: !8123, scopeLine: 3615, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8123 = !DISubroutineType(types: !8124)
!8124 = !{!2876, !2876}
!8125 = !DILocalVariable(name: "x", arg: 1, scope: !8122, file: !3, line: 3614, type: !2876)
!8126 = !DILocation(line: 3614, column: 27, scope: !8122)
!8127 = !DILocalVariable(name: "r", scope: !8122, file: !3, line: 3616, type: !2876)
!8128 = !DILocation(line: 3616, column: 7, scope: !8122)
!8129 = !DILocation(line: 3616, column: 25, scope: !8122)
!8130 = !DILocation(line: 3616, column: 11, scope: !8122)
!8131 = !DILocation(line: 3617, column: 10, scope: !8122)
!8132 = !DILocation(line: 3617, column: 14, scope: !8122)
!8133 = !DILocation(line: 3617, column: 18, scope: !8122)
!8134 = !DILocation(line: 3617, column: 3, scope: !8122)
!8135 = distinct !DISubprogram(name: "force_const_mem", scope: !3, file: !3, line: 3624, type: !8136, scopeLine: 3625, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8136 = !DISubroutineType(types: !8137)
!8137 = !{!2876, !5, !2876}
!8138 = !DILocalVariable(name: "mode", arg: 1, scope: !8135, file: !3, line: 3624, type: !5)
!8139 = !DILocation(line: 3624, column: 36, scope: !8135)
!8140 = !DILocalVariable(name: "x", arg: 2, scope: !8135, file: !3, line: 3624, type: !2876)
!8141 = !DILocation(line: 3624, column: 46, scope: !8135)
!8142 = !DILocalVariable(name: "desc", scope: !8135, file: !3, line: 3626, type: !3083)
!8143 = !DILocation(line: 3626, column: 35, scope: !8135)
!8144 = !DILocalVariable(name: "tmp", scope: !8135, file: !3, line: 3626, type: !3084)
!8145 = !DILocation(line: 3626, column: 41, scope: !8135)
!8146 = !DILocalVariable(name: "pool", scope: !8135, file: !3, line: 3627, type: !3791)
!8147 = !DILocation(line: 3627, column: 29, scope: !8135)
!8148 = !DILocalVariable(name: "label", scope: !8135, file: !3, line: 3628, type: !7521)
!8149 = !DILocation(line: 3628, column: 8, scope: !8135)
!8150 = !DILocalVariable(name: "def", scope: !8135, file: !3, line: 3629, type: !2876)
!8151 = !DILocation(line: 3629, column: 7, scope: !8135)
!8152 = !DILocalVariable(name: "symbol", scope: !8135, file: !3, line: 3629, type: !2876)
!8153 = !DILocation(line: 3629, column: 12, scope: !8135)
!8154 = !DILocalVariable(name: "hash", scope: !8135, file: !3, line: 3630, type: !3092)
!8155 = !DILocation(line: 3630, column: 13, scope: !8135)
!8156 = !DILocalVariable(name: "align", scope: !8135, file: !3, line: 3631, type: !7)
!8157 = !DILocation(line: 3631, column: 16, scope: !8135)
!8158 = !DILocalVariable(name: "slot", scope: !8135, file: !3, line: 3632, type: !3304)
!8159 = !DILocation(line: 3632, column: 10, scope: !8135)
!8160 = !DILocation(line: 3635, column: 15, scope: !8161)
!8161 = distinct !DILexicalBlock(scope: !8135, file: !3, line: 3635, column: 7)
!8162 = !DILocation(line: 3635, column: 39, scope: !8161)
!8163 = !DILocation(line: 3635, column: 7, scope: !8161)
!8164 = !DILocation(line: 3635, column: 7, scope: !8135)
!8165 = !DILocation(line: 3636, column: 5, scope: !8161)
!8166 = !DILocation(line: 3639, column: 25, scope: !8135)
!8167 = !DILocation(line: 3642, column: 19, scope: !8135)
!8168 = !DILocation(line: 3642, column: 46, scope: !8135)
!8169 = !DILocation(line: 3642, column: 52, scope: !8135)
!8170 = !DILocation(line: 3642, column: 11, scope: !8135)
!8171 = !DILocation(line: 3643, column: 6, scope: !8135)
!8172 = !DILocation(line: 3644, column: 19, scope: !8135)
!8173 = !DILocation(line: 3642, column: 8, scope: !8135)
!8174 = !DILocation(line: 3647, column: 18, scope: !8135)
!8175 = !DILocation(line: 3647, column: 7, scope: !8135)
!8176 = !DILocation(line: 3647, column: 16, scope: !8135)
!8177 = !DILocation(line: 3648, column: 14, scope: !8135)
!8178 = !DILocation(line: 3648, column: 7, scope: !8135)
!8179 = !DILocation(line: 3648, column: 12, scope: !8135)
!8180 = !DILocation(line: 3649, column: 26, scope: !8135)
!8181 = !DILocation(line: 3649, column: 10, scope: !8135)
!8182 = !DILocation(line: 3649, column: 8, scope: !8135)
!8183 = !DILocation(line: 3650, column: 36, scope: !8135)
!8184 = !DILocation(line: 3650, column: 42, scope: !8135)
!8185 = !DILocation(line: 3650, column: 58, scope: !8135)
!8186 = !DILocation(line: 3650, column: 64, scope: !8135)
!8187 = !DILocation(line: 3650, column: 10, scope: !8135)
!8188 = !DILocation(line: 3650, column: 8, scope: !8135)
!8189 = !DILocation(line: 3651, column: 46, scope: !8135)
!8190 = !DILocation(line: 3651, column: 45, scope: !8135)
!8191 = !DILocation(line: 3651, column: 10, scope: !8135)
!8192 = !DILocation(line: 3651, column: 8, scope: !8135)
!8193 = !DILocation(line: 3654, column: 7, scope: !8194)
!8194 = distinct !DILexicalBlock(scope: !8135, file: !3, line: 3654, column: 7)
!8195 = !DILocation(line: 3654, column: 7, scope: !8135)
!8196 = !DILocation(line: 3655, column: 22, scope: !8194)
!8197 = !DILocation(line: 3655, column: 28, scope: !8194)
!8198 = !DILocation(line: 3655, column: 12, scope: !8194)
!8199 = !DILocation(line: 3655, column: 5, scope: !8194)
!8200 = !DILocation(line: 3658, column: 10, scope: !8135)
!8201 = !DILocation(line: 3658, column: 8, scope: !8135)
!8202 = !DILocation(line: 3659, column: 11, scope: !8135)
!8203 = !DILocation(line: 3659, column: 4, scope: !8135)
!8204 = !DILocation(line: 3659, column: 9, scope: !8135)
!8205 = !DILocation(line: 3662, column: 11, scope: !8135)
!8206 = !DILocation(line: 3662, column: 9, scope: !8135)
!8207 = !DILocalVariable(name: "type", scope: !8208, file: !3, line: 3665, type: !2702)
!8208 = distinct !DILexicalBlock(scope: !8135, file: !3, line: 3664, column: 3)
!8209 = !DILocation(line: 3665, column: 10, scope: !8208)
!8210 = !DILocation(line: 3665, column: 34, scope: !8208)
!8211 = !DILocation(line: 3665, column: 49, scope: !8208)
!8212 = !DILocation(line: 3665, column: 17, scope: !8208)
!8213 = !DILocation(line: 3666, column: 9, scope: !8214)
!8214 = distinct !DILexicalBlock(scope: !8208, file: !3, line: 3666, column: 9)
!8215 = !DILocation(line: 3666, column: 14, scope: !8214)
!8216 = !DILocation(line: 3666, column: 9, scope: !8208)
!8217 = !DILocation(line: 3667, column: 15, scope: !8214)
!8218 = !DILocation(line: 3667, column: 13, scope: !8214)
!8219 = !DILocation(line: 3667, column: 7, scope: !8214)
!8220 = !DILocation(line: 3671, column: 20, scope: !8135)
!8221 = !DILocation(line: 3671, column: 26, scope: !8135)
!8222 = !DILocation(line: 3671, column: 43, scope: !8135)
!8223 = !DILocation(line: 3671, column: 19, scope: !8135)
!8224 = !DILocation(line: 3671, column: 3, scope: !8135)
!8225 = !DILocation(line: 3671, column: 9, scope: !8135)
!8226 = !DILocation(line: 3671, column: 16, scope: !8135)
!8227 = !DILocation(line: 3672, column: 23, scope: !8135)
!8228 = !DILocation(line: 3672, column: 29, scope: !8135)
!8229 = !DILocation(line: 3672, column: 46, scope: !8135)
!8230 = !DILocation(line: 3672, column: 19, scope: !8135)
!8231 = !DILocation(line: 3672, column: 3, scope: !8135)
!8232 = !DILocation(line: 3672, column: 9, scope: !8135)
!8233 = !DILocation(line: 3672, column: 16, scope: !8135)
!8234 = !DILocation(line: 3674, column: 3, scope: !8135)
!8235 = !DILocation(line: 3674, column: 9, scope: !8135)
!8236 = !DILocation(line: 3674, column: 14, scope: !8135)
!8237 = !DILocation(line: 3675, column: 24, scope: !8135)
!8238 = !DILocation(line: 3675, column: 3, scope: !8135)
!8239 = !DILocation(line: 3675, column: 9, scope: !8135)
!8240 = !DILocation(line: 3675, column: 18, scope: !8135)
!8241 = !DILocation(line: 3676, column: 18, scope: !8135)
!8242 = !DILocation(line: 3676, column: 24, scope: !8135)
!8243 = !DILocation(line: 3676, column: 3, scope: !8135)
!8244 = !DILocation(line: 3676, column: 9, scope: !8135)
!8245 = !DILocation(line: 3676, column: 16, scope: !8135)
!8246 = !DILocation(line: 3677, column: 16, scope: !8135)
!8247 = !DILocation(line: 3677, column: 3, scope: !8135)
!8248 = !DILocation(line: 3677, column: 9, scope: !8135)
!8249 = !DILocation(line: 3677, column: 14, scope: !8135)
!8250 = !DILocation(line: 3678, column: 16, scope: !8135)
!8251 = !DILocation(line: 3678, column: 3, scope: !8135)
!8252 = !DILocation(line: 3678, column: 9, scope: !8135)
!8253 = !DILocation(line: 3678, column: 14, scope: !8135)
!8254 = !DILocation(line: 3679, column: 17, scope: !8135)
!8255 = !DILocation(line: 3679, column: 3, scope: !8135)
!8256 = !DILocation(line: 3679, column: 9, scope: !8135)
!8257 = !DILocation(line: 3679, column: 15, scope: !8135)
!8258 = !DILocation(line: 3680, column: 19, scope: !8135)
!8259 = !DILocation(line: 3680, column: 3, scope: !8135)
!8260 = !DILocation(line: 3680, column: 9, scope: !8135)
!8261 = !DILocation(line: 3680, column: 17, scope: !8135)
!8262 = !DILocation(line: 3681, column: 3, scope: !8135)
!8263 = !DILocation(line: 3681, column: 9, scope: !8135)
!8264 = !DILocation(line: 3681, column: 14, scope: !8135)
!8265 = !DILocation(line: 3683, column: 19, scope: !8135)
!8266 = !DILocation(line: 3683, column: 3, scope: !8135)
!8267 = !DILocation(line: 3683, column: 9, scope: !8135)
!8268 = !DILocation(line: 3683, column: 16, scope: !8135)
!8269 = !DILocation(line: 3684, column: 7, scope: !8270)
!8270 = distinct !DILexicalBlock(scope: !8135, file: !3, line: 3684, column: 7)
!8271 = !DILocation(line: 3684, column: 13, scope: !8270)
!8272 = !DILocation(line: 3684, column: 7, scope: !8135)
!8273 = !DILocation(line: 3685, column: 24, scope: !8270)
!8274 = !DILocation(line: 3685, column: 5, scope: !8270)
!8275 = !DILocation(line: 3685, column: 11, scope: !8270)
!8276 = !DILocation(line: 3685, column: 17, scope: !8270)
!8277 = !DILocation(line: 3685, column: 22, scope: !8270)
!8278 = !DILocation(line: 3687, column: 32, scope: !8270)
!8279 = !DILocation(line: 3687, column: 19, scope: !8270)
!8280 = !DILocation(line: 3687, column: 25, scope: !8270)
!8281 = !DILocation(line: 3687, column: 30, scope: !8270)
!8282 = !DILocation(line: 3687, column: 5, scope: !8270)
!8283 = !DILocation(line: 3687, column: 11, scope: !8270)
!8284 = !DILocation(line: 3687, column: 17, scope: !8270)
!8285 = !DILocation(line: 3688, column: 16, scope: !8135)
!8286 = !DILocation(line: 3688, column: 3, scope: !8135)
!8287 = !DILocation(line: 3688, column: 9, scope: !8135)
!8288 = !DILocation(line: 3688, column: 14, scope: !8135)
!8289 = !DILocation(line: 3691, column: 3, scope: !8135)
!8290 = !DILocation(line: 3691, column: 3, scope: !8291)
!8291 = distinct !DILexicalBlock(scope: !8135, file: !3, line: 3691, column: 3)
!8292 = !DILocation(line: 3692, column: 3, scope: !8135)
!8293 = !DILocation(line: 3696, column: 7, scope: !8294)
!8294 = distinct !DILexicalBlock(scope: !8135, file: !3, line: 3696, column: 7)
!8295 = !DILocation(line: 3696, column: 30, scope: !8294)
!8296 = !DILocation(line: 3696, column: 41, scope: !8294)
!8297 = !DILocation(line: 3696, column: 68, scope: !8294)
!8298 = !DILocation(line: 3696, column: 74, scope: !8294)
!8299 = !DILocation(line: 3696, column: 33, scope: !8294)
!8300 = !DILocation(line: 3696, column: 7, scope: !8135)
!8301 = !DILocalVariable(name: "sect", scope: !8302, file: !3, line: 3698, type: !3109)
!8302 = distinct !DILexicalBlock(scope: !8294, file: !3, line: 3697, column: 5)
!8303 = !DILocation(line: 3698, column: 16, scope: !8302)
!8304 = !DILocation(line: 3698, column: 39, scope: !8302)
!8305 = !DILocation(line: 3698, column: 59, scope: !8302)
!8306 = !DILocation(line: 3698, column: 65, scope: !8302)
!8307 = !DILocation(line: 3698, column: 68, scope: !8302)
!8308 = !DILocation(line: 3698, column: 23, scope: !8302)
!8309 = !DILocation(line: 3699, column: 37, scope: !8302)
!8310 = !DILocation(line: 3700, column: 32, scope: !8302)
!8311 = !DILocation(line: 3700, column: 9, scope: !8302)
!8312 = !DILocation(line: 3699, column: 16, scope: !8302)
!8313 = !DILocation(line: 3699, column: 14, scope: !8302)
!8314 = !DILocation(line: 3701, column: 5, scope: !8302)
!8315 = !DILocation(line: 3703, column: 14, scope: !8294)
!8316 = !DILocation(line: 3703, column: 12, scope: !8294)
!8317 = !DILocation(line: 3704, column: 15, scope: !8135)
!8318 = !DILocation(line: 3704, column: 3, scope: !8135)
!8319 = !DILocation(line: 3704, column: 9, scope: !8135)
!8320 = !DILocation(line: 3704, column: 13, scope: !8135)
!8321 = !DILocation(line: 3705, column: 3, scope: !8135)
!8322 = !DILocation(line: 3705, column: 29, scope: !8135)
!8323 = !DILocation(line: 3706, column: 3, scope: !8135)
!8324 = !DILocation(line: 3706, column: 36, scope: !8135)
!8325 = !DILocation(line: 3707, column: 3, scope: !8135)
!8326 = !DILocation(line: 3710, column: 36, scope: !8135)
!8327 = !DILocation(line: 3710, column: 42, scope: !8135)
!8328 = !DILocation(line: 3710, column: 21, scope: !8135)
!8329 = !DILocation(line: 3710, column: 19, scope: !8135)
!8330 = !DILocation(line: 3710, column: 3, scope: !8135)
!8331 = !DILocation(line: 3710, column: 9, scope: !8135)
!8332 = !DILocation(line: 3710, column: 13, scope: !8135)
!8333 = !DILocation(line: 3711, column: 23, scope: !8135)
!8334 = !DILocation(line: 3711, column: 45, scope: !8135)
!8335 = !DILocation(line: 3711, column: 60, scope: !8135)
!8336 = !DILocation(line: 3711, column: 28, scope: !8135)
!8337 = !DILocation(line: 3711, column: 3, scope: !8135)
!8338 = !DILocation(line: 3712, column: 18, scope: !8135)
!8339 = !DILocation(line: 3712, column: 23, scope: !8135)
!8340 = !DILocation(line: 3712, column: 3, scope: !8135)
!8341 = !DILocation(line: 3716, column: 7, scope: !8342)
!8342 = distinct !DILexicalBlock(scope: !8135, file: !3, line: 3716, column: 7)
!8343 = !DILocation(line: 3716, column: 20, scope: !8342)
!8344 = !DILocation(line: 3716, column: 7, scope: !8135)
!8345 = !DILocation(line: 3717, column: 5, scope: !8342)
!8346 = !DILocation(line: 3717, column: 36, scope: !8342)
!8347 = !DILocation(line: 3719, column: 20, scope: !8135)
!8348 = !DILocation(line: 3719, column: 10, scope: !8135)
!8349 = !DILocation(line: 3719, column: 3, scope: !8135)
!8350 = !DILocation(line: 3720, column: 1, scope: !8135)
!8351 = distinct !DISubprogram(name: "const_rtx_hash", scope: !3, file: !3, line: 3577, type: !8352, scopeLine: 3578, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8352 = !DISubroutineType(types: !8353)
!8353 = !{!3092, !2876}
!8354 = !DILocalVariable(name: "x", arg: 1, scope: !8351, file: !3, line: 3577, type: !2876)
!8355 = !DILocation(line: 3577, column: 21, scope: !8351)
!8356 = !DILocalVariable(name: "h", scope: !8351, file: !3, line: 3579, type: !3092)
!8357 = !DILocation(line: 3579, column: 13, scope: !8351)
!8358 = !DILocation(line: 3580, column: 39, scope: !8351)
!8359 = !DILocation(line: 3580, column: 3, scope: !8351)
!8360 = !DILocation(line: 3581, column: 10, scope: !8351)
!8361 = !DILocation(line: 3581, column: 3, scope: !8351)
!8362 = distinct !DISubprogram(name: "get_block_for_section", scope: !3, file: !3, line: 600, type: !8363, scopeLine: 601, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8363 = !DISubroutineType(types: !8364)
!8364 = !{!3105, !3109}
!8365 = !DILocalVariable(name: "sect", arg: 1, scope: !8362, file: !3, line: 600, type: !3109)
!8366 = !DILocation(line: 600, column: 33, scope: !8362)
!8367 = !DILocalVariable(name: "block", scope: !8362, file: !3, line: 602, type: !3105)
!8368 = !DILocation(line: 602, column: 24, scope: !8362)
!8369 = !DILocalVariable(name: "slot", scope: !8362, file: !3, line: 603, type: !3304)
!8370 = !DILocation(line: 603, column: 10, scope: !8362)
!8371 = !DILocation(line: 605, column: 7, scope: !8372)
!8372 = distinct !DILexicalBlock(scope: !8362, file: !3, line: 605, column: 7)
!8373 = !DILocation(line: 605, column: 12, scope: !8372)
!8374 = !DILocation(line: 605, column: 7, scope: !8362)
!8375 = !DILocation(line: 606, column: 5, scope: !8372)
!8376 = !DILocation(line: 608, column: 36, scope: !8362)
!8377 = !DILocation(line: 608, column: 55, scope: !8362)
!8378 = !DILocation(line: 609, column: 22, scope: !8362)
!8379 = !DILocation(line: 609, column: 8, scope: !8362)
!8380 = !DILocation(line: 608, column: 10, scope: !8362)
!8381 = !DILocation(line: 608, column: 8, scope: !8362)
!8382 = !DILocation(line: 610, column: 36, scope: !8362)
!8383 = !DILocation(line: 610, column: 35, scope: !8362)
!8384 = !DILocation(line: 610, column: 11, scope: !8362)
!8385 = !DILocation(line: 610, column: 9, scope: !8362)
!8386 = !DILocation(line: 611, column: 7, scope: !8387)
!8387 = distinct !DILexicalBlock(scope: !8362, file: !3, line: 611, column: 7)
!8388 = !DILocation(line: 611, column: 13, scope: !8387)
!8389 = !DILocation(line: 611, column: 7, scope: !8362)
!8390 = !DILocation(line: 614, column: 2, scope: !8391)
!8391 = distinct !DILexicalBlock(scope: !8387, file: !3, line: 612, column: 5)
!8392 = !DILocation(line: 613, column: 15, scope: !8391)
!8393 = !DILocation(line: 613, column: 13, scope: !8391)
!8394 = !DILocation(line: 615, column: 21, scope: !8391)
!8395 = !DILocation(line: 615, column: 7, scope: !8391)
!8396 = !DILocation(line: 615, column: 14, scope: !8391)
!8397 = !DILocation(line: 615, column: 19, scope: !8391)
!8398 = !DILocation(line: 616, column: 15, scope: !8391)
!8399 = !DILocation(line: 616, column: 8, scope: !8391)
!8400 = !DILocation(line: 616, column: 13, scope: !8391)
!8401 = !DILocation(line: 617, column: 5, scope: !8391)
!8402 = !DILocation(line: 618, column: 10, scope: !8362)
!8403 = !DILocation(line: 618, column: 3, scope: !8362)
!8404 = !DILocation(line: 619, column: 1, scope: !8362)
!8405 = distinct !DISubprogram(name: "get_pool_constant", scope: !3, file: !3, line: 3725, type: !8123, scopeLine: 3726, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8406 = !DILocalVariable(name: "addr", arg: 1, scope: !8405, file: !3, line: 3725, type: !2876)
!8407 = !DILocation(line: 3725, column: 24, scope: !8405)
!8408 = !DILocation(line: 3727, column: 10, scope: !8405)
!8409 = !DILocation(line: 3727, column: 38, scope: !8405)
!8410 = !DILocation(line: 3727, column: 3, scope: !8405)
!8411 = distinct !DISubprogram(name: "get_pool_constant_mark", scope: !3, file: !3, line: 3734, type: !8412, scopeLine: 3735, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8412 = !DISubroutineType(types: !8413)
!8413 = !{!2876, !2876, !8414}
!8414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2820, size: 64)
!8415 = !DILocalVariable(name: "addr", arg: 1, scope: !8411, file: !3, line: 3734, type: !2876)
!8416 = !DILocation(line: 3734, column: 29, scope: !8411)
!8417 = !DILocalVariable(name: "pmarked", arg: 2, scope: !8411, file: !3, line: 3734, type: !8414)
!8418 = !DILocation(line: 3734, column: 41, scope: !8411)
!8419 = !DILocalVariable(name: "desc", scope: !8411, file: !3, line: 3736, type: !3083)
!8420 = !DILocation(line: 3736, column: 35, scope: !8411)
!8421 = !DILocation(line: 3738, column: 10, scope: !8411)
!8422 = !DILocation(line: 3738, column: 8, scope: !8411)
!8423 = !DILocation(line: 3739, column: 15, scope: !8411)
!8424 = !DILocation(line: 3739, column: 21, scope: !8411)
!8425 = !DILocation(line: 3739, column: 26, scope: !8411)
!8426 = !DILocation(line: 3739, column: 14, scope: !8411)
!8427 = !DILocation(line: 3739, column: 4, scope: !8411)
!8428 = !DILocation(line: 3739, column: 12, scope: !8411)
!8429 = !DILocation(line: 3740, column: 10, scope: !8411)
!8430 = !DILocation(line: 3740, column: 16, scope: !8411)
!8431 = !DILocation(line: 3740, column: 3, scope: !8411)
!8432 = distinct !DISubprogram(name: "get_pool_mode", scope: !3, file: !3, line: 3746, type: !8433, scopeLine: 3747, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8433 = !DISubroutineType(types: !8434)
!8434 = !{!5, !8435}
!8435 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !512, line: 51, baseType: !8436)
!8436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8437, size: 64)
!8437 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2878)
!8438 = !DILocalVariable(name: "addr", arg: 1, scope: !8432, file: !3, line: 3746, type: !8435)
!8439 = !DILocation(line: 3746, column: 26, scope: !8432)
!8440 = !DILocation(line: 3748, column: 10, scope: !8432)
!8441 = !DILocation(line: 3748, column: 38, scope: !8432)
!8442 = !DILocation(line: 3748, column: 3, scope: !8432)
!8443 = distinct !DISubprogram(name: "get_pool_size", scope: !3, file: !3, line: 3754, type: !8444, scopeLine: 3755, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8444 = !DISubroutineType(types: !8445)
!8445 = !{!2798}
!8446 = !DILocation(line: 3756, column: 23, scope: !8443)
!8447 = !DILocation(line: 3756, column: 29, scope: !8443)
!8448 = !DILocation(line: 3756, column: 10, scope: !8443)
!8449 = !DILocation(line: 3756, column: 3, scope: !8443)
!8450 = distinct !DISubprogram(name: "output_shared_constant_pool", scope: !3, file: !3, line: 4019, type: !4245, scopeLine: 4020, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8451 = !DILocation(line: 4021, column: 34, scope: !8450)
!8452 = !DILocation(line: 4021, column: 3, scope: !8450)
!8453 = !DILocation(line: 4022, column: 1, scope: !8450)
!8454 = distinct !DISubprogram(name: "output_constant_pool_contents", scope: !3, file: !3, line: 3968, type: !8455, scopeLine: 3969, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8455 = !DISubroutineType(types: !8456)
!8456 = !{null, !3791}
!8457 = !DILocalVariable(name: "pool", arg: 1, scope: !8454, file: !3, line: 3968, type: !3791)
!8458 = !DILocation(line: 3968, column: 58, scope: !8454)
!8459 = !DILocalVariable(name: "desc", scope: !8454, file: !3, line: 3970, type: !3083)
!8460 = !DILocation(line: 3970, column: 35, scope: !8454)
!8461 = !DILocation(line: 3972, column: 15, scope: !8462)
!8462 = distinct !DILexicalBlock(scope: !8454, file: !3, line: 3972, column: 3)
!8463 = !DILocation(line: 3972, column: 21, scope: !8462)
!8464 = !DILocation(line: 3972, column: 13, scope: !8462)
!8465 = !DILocation(line: 3972, column: 8, scope: !8462)
!8466 = !DILocation(line: 3972, column: 28, scope: !8467)
!8467 = distinct !DILexicalBlock(scope: !8462, file: !3, line: 3972, column: 3)
!8468 = !DILocation(line: 3972, column: 3, scope: !8462)
!8469 = !DILocation(line: 3973, column: 9, scope: !8470)
!8470 = distinct !DILexicalBlock(scope: !8467, file: !3, line: 3973, column: 9)
!8471 = !DILocation(line: 3973, column: 15, scope: !8470)
!8472 = !DILocation(line: 3973, column: 9, scope: !8467)
!8473 = !DILocation(line: 3979, column: 6, scope: !8474)
!8474 = distinct !DILexicalBlock(scope: !8475, file: !3, line: 3979, column: 6)
!8475 = distinct !DILexicalBlock(scope: !8470, file: !3, line: 3974, column: 7)
!8476 = !DILocation(line: 3980, column: 6, scope: !8474)
!8477 = !DILocation(line: 3980, column: 9, scope: !8474)
!8478 = !DILocation(line: 3979, column: 6, scope: !8475)
!8479 = !DILocation(line: 3981, column: 24, scope: !8474)
!8480 = !DILocation(line: 3981, column: 30, scope: !8474)
!8481 = !DILocation(line: 3981, column: 4, scope: !8474)
!8482 = !DILocation(line: 3984, column: 41, scope: !8483)
!8483 = distinct !DILexicalBlock(scope: !8474, file: !3, line: 3983, column: 4)
!8484 = !DILocation(line: 3985, column: 12, scope: !8483)
!8485 = !DILocation(line: 3985, column: 18, scope: !8483)
!8486 = !DILocation(line: 3985, column: 24, scope: !8483)
!8487 = !DILocation(line: 3985, column: 30, scope: !8483)
!8488 = !DILocation(line: 3985, column: 40, scope: !8483)
!8489 = !DILocation(line: 3985, column: 46, scope: !8483)
!8490 = !DILocation(line: 3984, column: 25, scope: !8483)
!8491 = !DILocation(line: 3984, column: 6, scope: !8483)
!8492 = !DILocation(line: 3986, column: 30, scope: !8483)
!8493 = !DILocation(line: 3986, column: 36, scope: !8483)
!8494 = !DILocation(line: 3986, column: 42, scope: !8483)
!8495 = !DILocation(line: 3986, column: 6, scope: !8483)
!8496 = !DILocation(line: 3988, column: 7, scope: !8475)
!8497 = !DILocation(line: 3972, column: 42, scope: !8467)
!8498 = !DILocation(line: 3972, column: 48, scope: !8467)
!8499 = !DILocation(line: 3972, column: 40, scope: !8467)
!8500 = !DILocation(line: 3972, column: 3, scope: !8467)
!8501 = distinct !{!8501, !8468, !8502}
!8502 = !DILocation(line: 3988, column: 7, scope: !8462)
!8503 = !DILocation(line: 3989, column: 1, scope: !8454)
!8504 = distinct !DISubprogram(name: "compute_reloc_for_constant", scope: !3, file: !3, line: 4027, type: !6176, scopeLine: 4028, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8505 = !DILocalVariable(name: "exp", arg: 1, scope: !8504, file: !3, line: 4027, type: !2702)
!8506 = !DILocation(line: 4027, column: 34, scope: !8504)
!8507 = !DILocalVariable(name: "reloc", scope: !8504, file: !3, line: 4029, type: !2798)
!8508 = !DILocation(line: 4029, column: 7, scope: !8504)
!8509 = !DILocalVariable(name: "reloc2", scope: !8504, file: !3, line: 4029, type: !2798)
!8510 = !DILocation(line: 4029, column: 18, scope: !8504)
!8511 = !DILocalVariable(name: "tem", scope: !8504, file: !3, line: 4030, type: !2702)
!8512 = !DILocation(line: 4030, column: 8, scope: !8504)
!8513 = !DILocation(line: 4032, column: 11, scope: !8504)
!8514 = !DILocation(line: 4032, column: 3, scope: !8504)
!8515 = !DILocation(line: 4039, column: 18, scope: !8516)
!8516 = distinct !DILexicalBlock(scope: !8517, file: !3, line: 4039, column: 7)
!8517 = distinct !DILexicalBlock(scope: !8504, file: !3, line: 4033, column: 5)
!8518 = !DILocation(line: 4039, column: 16, scope: !8516)
!8519 = !DILocation(line: 4039, column: 12, scope: !8516)
!8520 = !DILocation(line: 4039, column: 62, scope: !8521)
!8521 = distinct !DILexicalBlock(scope: !8516, file: !3, line: 4039, column: 7)
!8522 = !DILocation(line: 4039, column: 41, scope: !8521)
!8523 = !DILocation(line: 4039, column: 7, scope: !8516)
!8524 = !DILocation(line: 4040, column: 11, scope: !8521)
!8525 = !DILocation(line: 4040, column: 9, scope: !8521)
!8526 = !DILocation(line: 4039, column: 7, scope: !8521)
!8527 = distinct !{!8527, !8523, !8528}
!8528 = !DILocation(line: 4041, column: 2, scope: !8516)
!8529 = !DILocation(line: 4043, column: 11, scope: !8530)
!8530 = distinct !DILexicalBlock(scope: !8517, file: !3, line: 4043, column: 11)
!8531 = !DILocation(line: 4043, column: 11, scope: !8517)
!8532 = !DILocation(line: 4044, column: 8, scope: !8530)
!8533 = !DILocation(line: 4044, column: 2, scope: !8530)
!8534 = !DILocation(line: 4046, column: 8, scope: !8530)
!8535 = !DILocation(line: 4047, column: 7, scope: !8517)
!8536 = !DILocation(line: 4051, column: 43, scope: !8517)
!8537 = !DILocation(line: 4051, column: 15, scope: !8517)
!8538 = !DILocation(line: 4051, column: 13, scope: !8517)
!8539 = !DILocation(line: 4052, column: 44, scope: !8517)
!8540 = !DILocation(line: 4052, column: 16, scope: !8517)
!8541 = !DILocation(line: 4052, column: 13, scope: !8517)
!8542 = !DILocation(line: 4053, column: 7, scope: !8517)
!8543 = !DILocation(line: 4056, column: 43, scope: !8517)
!8544 = !DILocation(line: 4056, column: 15, scope: !8517)
!8545 = !DILocation(line: 4056, column: 13, scope: !8517)
!8546 = !DILocation(line: 4057, column: 44, scope: !8517)
!8547 = !DILocation(line: 4057, column: 16, scope: !8517)
!8548 = !DILocation(line: 4057, column: 14, scope: !8517)
!8549 = !DILocation(line: 4059, column: 11, scope: !8550)
!8550 = distinct !DILexicalBlock(scope: !8517, file: !3, line: 4059, column: 11)
!8551 = !DILocation(line: 4059, column: 17, scope: !8550)
!8552 = !DILocation(line: 4059, column: 22, scope: !8550)
!8553 = !DILocation(line: 4059, column: 25, scope: !8550)
!8554 = !DILocation(line: 4059, column: 32, scope: !8550)
!8555 = !DILocation(line: 4059, column: 11, scope: !8517)
!8556 = !DILocation(line: 4060, column: 8, scope: !8550)
!8557 = !DILocation(line: 4060, column: 2, scope: !8550)
!8558 = !DILocation(line: 4062, column: 11, scope: !8550)
!8559 = !DILocation(line: 4062, column: 8, scope: !8550)
!8560 = !DILocation(line: 4063, column: 7, scope: !8517)
!8561 = !DILocation(line: 4067, column: 43, scope: !8517)
!8562 = !DILocation(line: 4067, column: 15, scope: !8517)
!8563 = !DILocation(line: 4067, column: 13, scope: !8517)
!8564 = !DILocation(line: 4068, column: 7, scope: !8517)
!8565 = !DILocalVariable(name: "idx", scope: !8566, file: !3, line: 4072, type: !2755)
!8566 = distinct !DILexicalBlock(scope: !8517, file: !3, line: 4071, column: 7)
!8567 = !DILocation(line: 4072, column: 25, scope: !8566)
!8568 = !DILocation(line: 4073, column: 2, scope: !8569)
!8569 = distinct !DILexicalBlock(scope: !8566, file: !3, line: 4073, column: 2)
!8570 = !DILocation(line: 4073, column: 2, scope: !8571)
!8571 = distinct !DILexicalBlock(scope: !8569, file: !3, line: 4073, column: 2)
!8572 = !DILocation(line: 4074, column: 8, scope: !8573)
!8573 = distinct !DILexicalBlock(scope: !8571, file: !3, line: 4074, column: 8)
!8574 = !DILocation(line: 4074, column: 12, scope: !8573)
!8575 = !DILocation(line: 4074, column: 8, scope: !8571)
!8576 = !DILocation(line: 4075, column: 43, scope: !8573)
!8577 = !DILocation(line: 4075, column: 15, scope: !8573)
!8578 = !DILocation(line: 4075, column: 12, scope: !8573)
!8579 = !DILocation(line: 4075, column: 6, scope: !8573)
!8580 = !DILocation(line: 4074, column: 15, scope: !8573)
!8581 = distinct !{!8581, !8568, !8582}
!8582 = !DILocation(line: 4075, column: 46, scope: !8569)
!8583 = !DILocation(line: 4077, column: 7, scope: !8517)
!8584 = !DILocation(line: 4080, column: 7, scope: !8517)
!8585 = !DILocation(line: 4082, column: 10, scope: !8504)
!8586 = !DILocation(line: 4082, column: 3, scope: !8504)
!8587 = distinct !DISubprogram(name: "handled_component_p", scope: !151, file: !151, line: 4551, type: !8588, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8588 = !DISubroutineType(types: !8589)
!8589 = !{!2820, !8590}
!8590 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !512, line: 59, baseType: !3805)
!8591 = !DILocalVariable(name: "t", arg: 1, scope: !8587, file: !151, line: 4551, type: !8590)
!8592 = !DILocation(line: 4551, column: 33, scope: !8587)
!8593 = !DILocation(line: 4553, column: 11, scope: !8587)
!8594 = !DILocation(line: 4553, column: 3, scope: !8587)
!8595 = !DILocation(line: 4562, column: 7, scope: !8596)
!8596 = distinct !DILexicalBlock(scope: !8587, file: !151, line: 4554, column: 5)
!8597 = !DILocation(line: 4565, column: 7, scope: !8596)
!8598 = !DILocation(line: 4567, column: 1, scope: !8587)
!8599 = distinct !DISubprogram(name: "VEC_constructor_elt_base_length", scope: !151, file: !151, line: 1537, type: !8600, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8600 = !DISubroutineType(types: !8601)
!8601 = !{!7, !8602}
!8602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8603, size: 64)
!8603 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3564)
!8604 = !DILocalVariable(name: "vec_", arg: 1, scope: !8599, file: !151, line: 1537, type: !8602)
!8605 = !DILocation(line: 1537, column: 1, scope: !8599)
!8606 = distinct !DISubprogram(name: "VEC_constructor_elt_base_index", scope: !151, file: !151, line: 1537, type: !8607, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8607 = !DISubroutineType(types: !8608)
!8608 = !{!6391, !6459, !7}
!8609 = !DILocalVariable(name: "vec_", arg: 1, scope: !8606, file: !151, line: 1537, type: !6459)
!8610 = !DILocation(line: 1537, column: 1, scope: !8606)
!8611 = !DILocalVariable(name: "ix_", arg: 2, scope: !8606, file: !151, line: 1537, type: !7)
!8612 = !DILocation(line: 0, scope: !8606)
!8613 = distinct !DISubprogram(name: "constructor_static_from_elts_p", scope: !3, file: !3, line: 4144, type: !8588, scopeLine: 4145, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8614 = !DILocalVariable(name: "ctor", arg: 1, scope: !8613, file: !3, line: 4144, type: !8590)
!8615 = !DILocation(line: 4144, column: 44, scope: !8613)
!8616 = !DILocation(line: 4146, column: 11, scope: !8613)
!8617 = !DILocation(line: 4147, column: 4, scope: !8613)
!8618 = !DILocation(line: 4147, column: 8, scope: !8613)
!8619 = !DILocation(line: 4147, column: 37, scope: !8613)
!8620 = !DILocation(line: 4148, column: 8, scope: !8613)
!8621 = !DILocation(line: 4148, column: 11, scope: !8613)
!8622 = !DILocation(line: 4148, column: 40, scope: !8613)
!8623 = !DILocation(line: 4149, column: 4, scope: !8613)
!8624 = !DILocation(line: 4149, column: 8, scope: !8613)
!8625 = !DILocation(line: 4149, column: 7, scope: !8613)
!8626 = !DILocation(line: 0, scope: !8613)
!8627 = !DILocation(line: 4146, column: 10, scope: !8613)
!8628 = !DILocation(line: 4146, column: 3, scope: !8613)
!8629 = distinct !DISubprogram(name: "initializer_constant_valid_p", scope: !3, file: !3, line: 4505, type: !8630, scopeLine: 4506, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8630 = !DISubroutineType(types: !8631)
!8631 = !{!2702, !2702, !2702}
!8632 = !DILocalVariable(name: "value", arg: 1, scope: !8629, file: !3, line: 4505, type: !2702)
!8633 = !DILocation(line: 4505, column: 36, scope: !8629)
!8634 = !DILocalVariable(name: "endtype", arg: 2, scope: !8629, file: !3, line: 4505, type: !2702)
!8635 = !DILocation(line: 4505, column: 48, scope: !8629)
!8636 = !DILocation(line: 4507, column: 42, scope: !8629)
!8637 = !DILocation(line: 4507, column: 49, scope: !8629)
!8638 = !DILocation(line: 4507, column: 10, scope: !8629)
!8639 = !DILocation(line: 4507, column: 3, scope: !8629)
!8640 = distinct !DISubprogram(name: "initializer_constant_valid_p_1", scope: !3, file: !3, line: 4245, type: !8641, scopeLine: 4246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!8641 = !DISubroutineType(types: !8642)
!8642 = !{!2702, !2702, !2702, !3499}
!8643 = !DILocalVariable(name: "value", arg: 1, scope: !8640, file: !3, line: 4245, type: !2702)
!8644 = !DILocation(line: 4245, column: 38, scope: !8640)
!8645 = !DILocalVariable(name: "endtype", arg: 2, scope: !8640, file: !3, line: 4245, type: !2702)
!8646 = !DILocation(line: 4245, column: 50, scope: !8640)
!8647 = !DILocalVariable(name: "cache", arg: 3, scope: !8640, file: !3, line: 4245, type: !3499)
!8648 = !DILocation(line: 4245, column: 65, scope: !8640)
!8649 = !DILocalVariable(name: "ret", scope: !8640, file: !3, line: 4247, type: !2702)
!8650 = !DILocation(line: 4247, column: 8, scope: !8640)
!8651 = !DILocation(line: 4249, column: 11, scope: !8640)
!8652 = !DILocation(line: 4249, column: 3, scope: !8640)
!8653 = !DILocation(line: 4252, column: 43, scope: !8654)
!8654 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4252, column: 11)
!8655 = distinct !DILexicalBlock(scope: !8640, file: !3, line: 4250, column: 5)
!8656 = !DILocation(line: 4252, column: 11, scope: !8654)
!8657 = !DILocation(line: 4252, column: 11, scope: !8655)
!8658 = !DILocalVariable(name: "idx", scope: !8659, file: !3, line: 4254, type: !2755)
!8659 = distinct !DILexicalBlock(scope: !8654, file: !3, line: 4253, column: 2)
!8660 = !DILocation(line: 4254, column: 27, scope: !8659)
!8661 = !DILocalVariable(name: "elt", scope: !8659, file: !3, line: 4255, type: !2702)
!8662 = !DILocation(line: 4255, column: 9, scope: !8659)
!8663 = !DILocalVariable(name: "absolute", scope: !8659, file: !3, line: 4256, type: !2820)
!8664 = !DILocation(line: 4256, column: 9, scope: !8659)
!8665 = !DILocation(line: 4258, column: 8, scope: !8666)
!8666 = distinct !DILexicalBlock(scope: !8659, file: !3, line: 4258, column: 8)
!8667 = !DILocation(line: 4258, column: 14, scope: !8666)
!8668 = !DILocation(line: 4258, column: 17, scope: !8666)
!8669 = !DILocation(line: 4258, column: 29, scope: !8666)
!8670 = !DILocation(line: 4258, column: 26, scope: !8666)
!8671 = !DILocation(line: 4258, column: 8, scope: !8659)
!8672 = !DILocation(line: 4259, column: 13, scope: !8666)
!8673 = !DILocation(line: 4259, column: 6, scope: !8666)
!8674 = !DILocation(line: 4260, column: 4, scope: !8675)
!8675 = distinct !DILexicalBlock(scope: !8659, file: !3, line: 4260, column: 4)
!8676 = !DILocation(line: 4260, column: 4, scope: !8677)
!8677 = distinct !DILexicalBlock(scope: !8675, file: !3, line: 4260, column: 4)
!8678 = !DILocalVariable(name: "reloc", scope: !8679, file: !3, line: 4262, type: !2702)
!8679 = distinct !DILexicalBlock(scope: !8677, file: !3, line: 4261, column: 6)
!8680 = !DILocation(line: 4262, column: 13, scope: !8679)
!8681 = !DILocation(line: 4263, column: 48, scope: !8679)
!8682 = !DILocation(line: 4263, column: 53, scope: !8679)
!8683 = !DILocation(line: 4263, column: 16, scope: !8679)
!8684 = !DILocation(line: 4263, column: 14, scope: !8679)
!8685 = !DILocation(line: 4265, column: 13, scope: !8686)
!8686 = distinct !DILexicalBlock(scope: !8679, file: !3, line: 4265, column: 12)
!8687 = !DILocation(line: 4265, column: 12, scope: !8679)
!8688 = !DILocation(line: 4267, column: 9, scope: !8689)
!8689 = distinct !DILexicalBlock(scope: !8690, file: !3, line: 4267, column: 9)
!8690 = distinct !DILexicalBlock(scope: !8686, file: !3, line: 4266, column: 3)
!8691 = !DILocation(line: 4267, column: 9, scope: !8690)
!8692 = !DILocation(line: 4269, column: 20, scope: !8693)
!8693 = distinct !DILexicalBlock(scope: !8689, file: !3, line: 4268, column: 7)
!8694 = !DILocation(line: 4269, column: 9, scope: !8693)
!8695 = !DILocation(line: 4269, column: 18, scope: !8693)
!8696 = !DILocation(line: 4270, column: 9, scope: !8693)
!8697 = !DILocation(line: 4270, column: 18, scope: !8693)
!8698 = !DILocation(line: 4271, column: 7, scope: !8693)
!8699 = !DILocation(line: 4272, column: 5, scope: !8690)
!8700 = !DILocation(line: 4274, column: 12, scope: !8701)
!8701 = distinct !DILexicalBlock(scope: !8679, file: !3, line: 4274, column: 12)
!8702 = !DILocation(line: 4274, column: 21, scope: !8701)
!8703 = !DILocation(line: 4274, column: 18, scope: !8701)
!8704 = !DILocation(line: 4274, column: 12, scope: !8679)
!8705 = !DILocation(line: 4275, column: 12, scope: !8701)
!8706 = !DILocation(line: 4275, column: 3, scope: !8701)
!8707 = !DILocation(line: 4276, column: 6, scope: !8679)
!8708 = distinct !{!8708, !8674, !8709}
!8709 = !DILocation(line: 4276, column: 6, scope: !8675)
!8710 = !DILocation(line: 4280, column: 8, scope: !8711)
!8711 = distinct !DILexicalBlock(scope: !8659, file: !3, line: 4280, column: 8)
!8712 = !DILocation(line: 4280, column: 8, scope: !8659)
!8713 = !DILocation(line: 4282, column: 19, scope: !8714)
!8714 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 4281, column: 6)
!8715 = !DILocation(line: 4282, column: 8, scope: !8714)
!8716 = !DILocation(line: 4282, column: 17, scope: !8714)
!8717 = !DILocation(line: 4283, column: 19, scope: !8714)
!8718 = !DILocation(line: 4283, column: 30, scope: !8714)
!8719 = !DILocation(line: 4283, column: 50, scope: !8714)
!8720 = !DILocation(line: 4283, column: 8, scope: !8714)
!8721 = !DILocation(line: 4283, column: 17, scope: !8714)
!8722 = !DILocation(line: 4284, column: 6, scope: !8714)
!8723 = !DILocation(line: 4285, column: 11, scope: !8659)
!8724 = !DILocation(line: 4285, column: 22, scope: !8659)
!8725 = !DILocation(line: 4285, column: 42, scope: !8659)
!8726 = !DILocation(line: 4285, column: 4, scope: !8659)
!8727 = !DILocation(line: 4288, column: 14, scope: !8655)
!8728 = !DILocation(line: 4288, column: 36, scope: !8655)
!8729 = !DILocation(line: 4288, column: 7, scope: !8655)
!8730 = !DILocation(line: 4296, column: 14, scope: !8655)
!8731 = !DILocation(line: 4296, column: 7, scope: !8655)
!8732 = !DILocalVariable(name: "op0", scope: !8733, file: !3, line: 4301, type: !2702)
!8733 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4300, column: 7)
!8734 = !DILocation(line: 4301, column: 7, scope: !8733)
!8735 = !DILocation(line: 4301, column: 22, scope: !8733)
!8736 = !DILocation(line: 4301, column: 13, scope: !8733)
!8737 = !DILocation(line: 4302, column: 6, scope: !8738)
!8738 = distinct !DILexicalBlock(scope: !8733, file: !3, line: 4302, column: 6)
!8739 = !DILocation(line: 4302, column: 6, scope: !8733)
!8740 = !DILocation(line: 4306, column: 10, scope: !8741)
!8741 = distinct !DILexicalBlock(scope: !8742, file: !3, line: 4306, column: 10)
!8742 = distinct !DILexicalBlock(scope: !8738, file: !3, line: 4303, column: 4)
!8743 = !DILocation(line: 4306, column: 26, scope: !8741)
!8744 = !DILocation(line: 4307, column: 3, scope: !8741)
!8745 = !DILocation(line: 4307, column: 6, scope: !8741)
!8746 = !DILocation(line: 4306, column: 10, scope: !8742)
!8747 = !DILocation(line: 4308, column: 15, scope: !8741)
!8748 = !DILocation(line: 4308, column: 8, scope: !8741)
!8749 = !DILocation(line: 4311, column: 10, scope: !8750)
!8750 = distinct !DILexicalBlock(scope: !8742, file: !3, line: 4311, column: 10)
!8751 = !DILocation(line: 4311, column: 26, scope: !8750)
!8752 = !DILocation(line: 4312, column: 3, scope: !8750)
!8753 = !DILocation(line: 4312, column: 6, scope: !8750)
!8754 = !DILocation(line: 4313, column: 3, scope: !8750)
!8755 = !DILocation(line: 4313, column: 7, scope: !8750)
!8756 = !DILocation(line: 4311, column: 10, scope: !8742)
!8757 = !DILocation(line: 4314, column: 8, scope: !8750)
!8758 = !DILocation(line: 4317, column: 10, scope: !8759)
!8759 = distinct !DILexicalBlock(scope: !8742, file: !3, line: 4317, column: 10)
!8760 = !DILocation(line: 4317, column: 26, scope: !8759)
!8761 = !DILocation(line: 4317, column: 10, scope: !8742)
!8762 = !DILocation(line: 4318, column: 8, scope: !8759)
!8763 = !DILocation(line: 4319, column: 4, scope: !8742)
!8764 = !DILocation(line: 4320, column: 9, scope: !8733)
!8765 = !DILocation(line: 4320, column: 2, scope: !8733)
!8766 = !DILocation(line: 4324, column: 46, scope: !8655)
!8767 = !DILocation(line: 4325, column: 11, scope: !8655)
!8768 = !DILocation(line: 4325, column: 20, scope: !8655)
!8769 = !DILocation(line: 4324, column: 14, scope: !8655)
!8770 = !DILocation(line: 4324, column: 7, scope: !8655)
!8771 = !DILocalVariable(name: "src", scope: !8772, file: !3, line: 4329, type: !2702)
!8772 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4328, column: 7)
!8773 = !DILocation(line: 4329, column: 7, scope: !8772)
!8774 = !DILocation(line: 4329, column: 13, scope: !8772)
!8775 = !DILocalVariable(name: "src_type", scope: !8772, file: !3, line: 4330, type: !2702)
!8776 = !DILocation(line: 4330, column: 7, scope: !8772)
!8777 = !DILocation(line: 4330, column: 18, scope: !8772)
!8778 = !DILocalVariable(name: "dest_type", scope: !8772, file: !3, line: 4331, type: !2702)
!8779 = !DILocation(line: 4331, column: 7, scope: !8772)
!8780 = !DILocation(line: 4331, column: 19, scope: !8772)
!8781 = !DILocation(line: 4337, column: 6, scope: !8782)
!8782 = distinct !DILexicalBlock(scope: !8772, file: !3, line: 4337, column: 6)
!8783 = !DILocation(line: 4337, column: 34, scope: !8782)
!8784 = !DILocation(line: 4337, column: 38, scope: !8782)
!8785 = !DILocation(line: 4337, column: 6, scope: !8772)
!8786 = !DILocation(line: 4339, column: 10, scope: !8787)
!8787 = distinct !DILexicalBlock(scope: !8788, file: !3, line: 4339, column: 10)
!8788 = distinct !DILexicalBlock(scope: !8782, file: !3, line: 4338, column: 4)
!8789 = !DILocation(line: 4339, column: 33, scope: !8787)
!8790 = !DILocation(line: 4339, column: 30, scope: !8787)
!8791 = !DILocation(line: 4339, column: 10, scope: !8788)
!8792 = !DILocation(line: 4340, column: 47, scope: !8787)
!8793 = !DILocation(line: 4340, column: 52, scope: !8787)
!8794 = !DILocation(line: 4340, column: 61, scope: !8787)
!8795 = !DILocation(line: 4340, column: 15, scope: !8787)
!8796 = !DILocation(line: 4340, column: 8, scope: !8787)
!8797 = !DILocation(line: 4342, column: 8, scope: !8787)
!8798 = !DILocation(line: 4346, column: 41, scope: !8772)
!8799 = !DILocation(line: 4346, column: 46, scope: !8772)
!8800 = !DILocation(line: 4346, column: 55, scope: !8772)
!8801 = !DILocation(line: 4346, column: 9, scope: !8772)
!8802 = !DILocation(line: 4346, column: 2, scope: !8772)
!8803 = !DILocalVariable(name: "src", scope: !8804, file: !3, line: 4351, type: !2702)
!8804 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4350, column: 7)
!8805 = !DILocation(line: 4351, column: 7, scope: !8804)
!8806 = !DILocation(line: 4351, column: 13, scope: !8804)
!8807 = !DILocalVariable(name: "src_type", scope: !8804, file: !3, line: 4352, type: !2702)
!8808 = !DILocation(line: 4352, column: 7, scope: !8804)
!8809 = !DILocation(line: 4352, column: 18, scope: !8804)
!8810 = !DILocalVariable(name: "dest_type", scope: !8804, file: !3, line: 4353, type: !2702)
!8811 = !DILocation(line: 4353, column: 7, scope: !8804)
!8812 = !DILocation(line: 4353, column: 19, scope: !8804)
!8813 = !DILocation(line: 4357, column: 7, scope: !8814)
!8814 = distinct !DILexicalBlock(scope: !8804, file: !3, line: 4357, column: 6)
!8815 = !DILocation(line: 4357, column: 34, scope: !8814)
!8816 = !DILocation(line: 4357, column: 37, scope: !8814)
!8817 = !DILocation(line: 4358, column: 6, scope: !8814)
!8818 = !DILocation(line: 4358, column: 10, scope: !8814)
!8819 = !DILocation(line: 4358, column: 35, scope: !8814)
!8820 = !DILocation(line: 4358, column: 38, scope: !8814)
!8821 = !DILocation(line: 4359, column: 6, scope: !8814)
!8822 = !DILocation(line: 4359, column: 10, scope: !8814)
!8823 = !DILocation(line: 4359, column: 32, scope: !8814)
!8824 = !DILocation(line: 4360, column: 3, scope: !8814)
!8825 = !DILocation(line: 4360, column: 6, scope: !8814)
!8826 = !DILocation(line: 4360, column: 27, scope: !8814)
!8827 = !DILocation(line: 4357, column: 6, scope: !8804)
!8828 = !DILocation(line: 4361, column: 43, scope: !8814)
!8829 = !DILocation(line: 4361, column: 48, scope: !8814)
!8830 = !DILocation(line: 4361, column: 57, scope: !8814)
!8831 = !DILocation(line: 4361, column: 11, scope: !8814)
!8832 = !DILocation(line: 4361, column: 4, scope: !8814)
!8833 = !DILocation(line: 4364, column: 6, scope: !8834)
!8834 = distinct !DILexicalBlock(scope: !8804, file: !3, line: 4364, column: 6)
!8835 = !DILocation(line: 4364, column: 34, scope: !8834)
!8836 = !DILocation(line: 4364, column: 37, scope: !8834)
!8837 = !DILocation(line: 4365, column: 6, scope: !8834)
!8838 = !DILocation(line: 4365, column: 10, scope: !8834)
!8839 = !DILocation(line: 4365, column: 40, scope: !8834)
!8840 = !DILocation(line: 4365, column: 37, scope: !8834)
!8841 = !DILocation(line: 4364, column: 6, scope: !8804)
!8842 = !DILocation(line: 4366, column: 43, scope: !8834)
!8843 = !DILocation(line: 4366, column: 48, scope: !8834)
!8844 = !DILocation(line: 4366, column: 57, scope: !8834)
!8845 = !DILocation(line: 4366, column: 11, scope: !8834)
!8846 = !DILocation(line: 4366, column: 4, scope: !8834)
!8847 = !DILocation(line: 4370, column: 6, scope: !8848)
!8848 = distinct !DILexicalBlock(scope: !8804, file: !3, line: 4370, column: 6)
!8849 = !DILocation(line: 4370, column: 34, scope: !8848)
!8850 = !DILocation(line: 4370, column: 37, scope: !8848)
!8851 = !DILocation(line: 4370, column: 6, scope: !8804)
!8852 = !DILocalVariable(name: "inner", scope: !8853, file: !3, line: 4372, type: !2702)
!8853 = distinct !DILexicalBlock(scope: !8848, file: !3, line: 4371, column: 4)
!8854 = !DILocation(line: 4372, column: 11, scope: !8853)
!8855 = !DILocation(line: 4372, column: 51, scope: !8853)
!8856 = !DILocation(line: 4372, column: 56, scope: !8853)
!8857 = !DILocation(line: 4372, column: 65, scope: !8853)
!8858 = !DILocation(line: 4372, column: 19, scope: !8853)
!8859 = !DILocation(line: 4373, column: 10, scope: !8860)
!8860 = distinct !DILexicalBlock(scope: !8853, file: !3, line: 4373, column: 10)
!8861 = !DILocation(line: 4373, column: 19, scope: !8860)
!8862 = !DILocation(line: 4373, column: 16, scope: !8860)
!8863 = !DILocation(line: 4373, column: 10, scope: !8853)
!8864 = !DILocation(line: 4374, column: 15, scope: !8860)
!8865 = !DILocation(line: 4374, column: 8, scope: !8860)
!8866 = !DILocation(line: 4375, column: 6, scope: !8853)
!8867 = !DILocation(line: 4379, column: 6, scope: !8868)
!8868 = distinct !DILexicalBlock(scope: !8804, file: !3, line: 4379, column: 6)
!8869 = !DILocation(line: 4379, column: 34, scope: !8868)
!8870 = !DILocation(line: 4379, column: 37, scope: !8868)
!8871 = !DILocation(line: 4380, column: 6, scope: !8868)
!8872 = !DILocation(line: 4380, column: 10, scope: !8868)
!8873 = !DILocation(line: 4380, column: 40, scope: !8868)
!8874 = !DILocation(line: 4380, column: 37, scope: !8868)
!8875 = !DILocation(line: 4379, column: 6, scope: !8804)
!8876 = !DILocation(line: 4381, column: 43, scope: !8868)
!8877 = !DILocation(line: 4381, column: 48, scope: !8868)
!8878 = !DILocation(line: 4381, column: 57, scope: !8868)
!8879 = !DILocation(line: 4381, column: 11, scope: !8868)
!8880 = !DILocation(line: 4381, column: 4, scope: !8868)
!8881 = !DILocation(line: 4385, column: 7, scope: !8882)
!8882 = distinct !DILexicalBlock(scope: !8804, file: !3, line: 4385, column: 6)
!8883 = !DILocation(line: 4386, column: 7, scope: !8882)
!8884 = !DILocation(line: 4386, column: 10, scope: !8882)
!8885 = !DILocation(line: 4386, column: 32, scope: !8882)
!8886 = !DILocation(line: 4387, column: 6, scope: !8882)
!8887 = !DILocation(line: 4387, column: 9, scope: !8882)
!8888 = !DILocation(line: 4385, column: 6, scope: !8804)
!8889 = !DILocation(line: 4389, column: 10, scope: !8890)
!8890 = distinct !DILexicalBlock(scope: !8891, file: !3, line: 4389, column: 10)
!8891 = distinct !DILexicalBlock(scope: !8882, file: !3, line: 4388, column: 4)
!8892 = !DILocation(line: 4389, column: 26, scope: !8890)
!8893 = !DILocation(line: 4390, column: 3, scope: !8890)
!8894 = !DILocation(line: 4390, column: 6, scope: !8890)
!8895 = !DILocation(line: 4390, column: 36, scope: !8890)
!8896 = !DILocation(line: 4390, column: 33, scope: !8890)
!8897 = !DILocation(line: 4389, column: 10, scope: !8891)
!8898 = !DILocation(line: 4391, column: 15, scope: !8890)
!8899 = !DILocation(line: 4391, column: 8, scope: !8890)
!8900 = !DILocation(line: 4392, column: 25, scope: !8901)
!8901 = distinct !DILexicalBlock(scope: !8891, file: !3, line: 4392, column: 10)
!8902 = !DILocation(line: 4392, column: 10, scope: !8901)
!8903 = !DILocation(line: 4392, column: 10, scope: !8891)
!8904 = !DILocation(line: 4393, column: 15, scope: !8901)
!8905 = !DILocation(line: 4393, column: 8, scope: !8901)
!8906 = !DILocation(line: 4394, column: 15, scope: !8907)
!8907 = distinct !DILexicalBlock(scope: !8901, file: !3, line: 4394, column: 15)
!8908 = !DILocation(line: 4394, column: 45, scope: !8907)
!8909 = !DILocation(line: 4394, column: 42, scope: !8907)
!8910 = !DILocation(line: 4394, column: 15, scope: !8901)
!8911 = !DILocation(line: 4395, column: 47, scope: !8907)
!8912 = !DILocation(line: 4395, column: 52, scope: !8907)
!8913 = !DILocation(line: 4395, column: 61, scope: !8907)
!8914 = !DILocation(line: 4395, column: 15, scope: !8907)
!8915 = !DILocation(line: 4395, column: 8, scope: !8907)
!8916 = !DILocation(line: 4396, column: 4, scope: !8891)
!8917 = !DILocation(line: 4400, column: 6, scope: !8918)
!8918 = distinct !DILexicalBlock(scope: !8804, file: !3, line: 4400, column: 6)
!8919 = !DILocation(line: 4400, column: 28, scope: !8918)
!8920 = !DILocation(line: 4401, column: 6, scope: !8918)
!8921 = !DILocation(line: 4401, column: 9, scope: !8918)
!8922 = !DILocation(line: 4401, column: 31, scope: !8918)
!8923 = !DILocation(line: 4400, column: 6, scope: !8804)
!8924 = !DILocation(line: 4402, column: 43, scope: !8918)
!8925 = !DILocation(line: 4402, column: 48, scope: !8918)
!8926 = !DILocation(line: 4402, column: 57, scope: !8918)
!8927 = !DILocation(line: 4402, column: 11, scope: !8918)
!8928 = !DILocation(line: 4402, column: 4, scope: !8918)
!8929 = !DILocation(line: 4404, column: 7, scope: !8655)
!8930 = !DILocation(line: 4410, column: 11, scope: !8931)
!8931 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4410, column: 11)
!8932 = !DILocation(line: 4410, column: 31, scope: !8931)
!8933 = !DILocation(line: 4410, column: 11, scope: !8655)
!8934 = !DILocation(line: 4411, column: 2, scope: !8931)
!8935 = !DILocation(line: 4412, column: 11, scope: !8936)
!8936 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4412, column: 11)
!8937 = !DILocation(line: 4412, column: 17, scope: !8936)
!8938 = !DILocation(line: 4412, column: 20, scope: !8936)
!8939 = !DILocation(line: 4412, column: 32, scope: !8936)
!8940 = !DILocation(line: 4412, column: 29, scope: !8936)
!8941 = !DILocation(line: 4412, column: 11, scope: !8655)
!8942 = !DILocation(line: 4413, column: 9, scope: !8936)
!8943 = !DILocation(line: 4413, column: 2, scope: !8936)
!8944 = !DILocation(line: 4414, column: 13, scope: !8945)
!8945 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4414, column: 11)
!8946 = !DILocation(line: 4415, column: 4, scope: !8945)
!8947 = !DILocation(line: 4415, column: 7, scope: !8945)
!8948 = !DILocation(line: 4415, column: 35, scope: !8945)
!8949 = !DILocation(line: 4415, column: 32, scope: !8945)
!8950 = !DILocation(line: 4414, column: 11, scope: !8655)
!8951 = !DILocalVariable(name: "ncache", scope: !8952, file: !3, line: 4417, type: !8953)
!8952 = distinct !DILexicalBlock(scope: !8945, file: !3, line: 4416, column: 2)
!8953 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2702, size: 256, elements: !2968)
!8954 = !DILocation(line: 4417, column: 9, scope: !8952)
!8955 = !DILocalVariable(name: "valid0", scope: !8952, file: !3, line: 4418, type: !2702)
!8956 = !DILocation(line: 4418, column: 9, scope: !8952)
!8957 = !DILocation(line: 4419, column: 40, scope: !8952)
!8958 = !DILocation(line: 4420, column: 12, scope: !8952)
!8959 = !DILocation(line: 4420, column: 21, scope: !8952)
!8960 = !DILocation(line: 4419, column: 8, scope: !8952)
!8961 = !DILocalVariable(name: "valid1", scope: !8952, file: !3, line: 4421, type: !2702)
!8962 = !DILocation(line: 4421, column: 9, scope: !8952)
!8963 = !DILocation(line: 4422, column: 40, scope: !8952)
!8964 = !DILocation(line: 4423, column: 12, scope: !8952)
!8965 = !DILocation(line: 4423, column: 21, scope: !8952)
!8966 = !DILocation(line: 4423, column: 28, scope: !8952)
!8967 = !DILocation(line: 4422, column: 8, scope: !8952)
!8968 = !DILocation(line: 4425, column: 8, scope: !8969)
!8969 = distinct !DILexicalBlock(scope: !8952, file: !3, line: 4425, column: 8)
!8970 = !DILocation(line: 4425, column: 18, scope: !8969)
!8971 = !DILocation(line: 4425, column: 15, scope: !8969)
!8972 = !DILocation(line: 4425, column: 8, scope: !8952)
!8973 = !DILocation(line: 4426, column: 12, scope: !8969)
!8974 = !DILocation(line: 4426, column: 10, scope: !8969)
!8975 = !DILocation(line: 4426, column: 6, scope: !8969)
!8976 = !DILocation(line: 4427, column: 13, scope: !8977)
!8977 = distinct !DILexicalBlock(scope: !8969, file: !3, line: 4427, column: 13)
!8978 = !DILocation(line: 4427, column: 23, scope: !8977)
!8979 = !DILocation(line: 4427, column: 20, scope: !8977)
!8980 = !DILocation(line: 4427, column: 13, scope: !8969)
!8981 = !DILocation(line: 4428, column: 12, scope: !8977)
!8982 = !DILocation(line: 4428, column: 10, scope: !8977)
!8983 = !DILocation(line: 4428, column: 6, scope: !8977)
!8984 = !DILocation(line: 4431, column: 52, scope: !8977)
!8985 = !DILocation(line: 4431, column: 59, scope: !8977)
!8986 = !DILocation(line: 4432, column: 10, scope: !8977)
!8987 = !DILocation(line: 4431, column: 12, scope: !8977)
!8988 = !DILocation(line: 4431, column: 10, scope: !8977)
!8989 = !DILocation(line: 4433, column: 2, scope: !8952)
!8990 = !DILocation(line: 4436, column: 48, scope: !8945)
!8991 = !DILocation(line: 4436, column: 55, scope: !8945)
!8992 = !DILocation(line: 4436, column: 8, scope: !8945)
!8993 = !DILocation(line: 4436, column: 6, scope: !8945)
!8994 = !DILocation(line: 4437, column: 11, scope: !8995)
!8995 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4437, column: 11)
!8996 = !DILocation(line: 4437, column: 11, scope: !8655)
!8997 = !DILocation(line: 4439, column: 15, scope: !8998)
!8998 = distinct !DILexicalBlock(scope: !8995, file: !3, line: 4438, column: 2)
!8999 = !DILocation(line: 4439, column: 4, scope: !8998)
!9000 = !DILocation(line: 4439, column: 13, scope: !8998)
!9001 = !DILocation(line: 4440, column: 15, scope: !8998)
!9002 = !DILocation(line: 4440, column: 4, scope: !8998)
!9003 = !DILocation(line: 4440, column: 13, scope: !8998)
!9004 = !DILocation(line: 4441, column: 2, scope: !8998)
!9005 = !DILocation(line: 4442, column: 14, scope: !8655)
!9006 = !DILocation(line: 4442, column: 7, scope: !8655)
!9007 = !DILocation(line: 4445, column: 11, scope: !9008)
!9008 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4445, column: 11)
!9009 = !DILocation(line: 4445, column: 31, scope: !9008)
!9010 = !DILocation(line: 4445, column: 11, scope: !8655)
!9011 = !DILocation(line: 4446, column: 2, scope: !9008)
!9012 = !DILocation(line: 4447, column: 11, scope: !9013)
!9013 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4447, column: 11)
!9014 = !DILocation(line: 4447, column: 17, scope: !9013)
!9015 = !DILocation(line: 4447, column: 20, scope: !9013)
!9016 = !DILocation(line: 4447, column: 32, scope: !9013)
!9017 = !DILocation(line: 4447, column: 29, scope: !9013)
!9018 = !DILocation(line: 4447, column: 11, scope: !8655)
!9019 = !DILocation(line: 4448, column: 9, scope: !9013)
!9020 = !DILocation(line: 4448, column: 2, scope: !9013)
!9021 = !DILocation(line: 4449, column: 13, scope: !9022)
!9022 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4449, column: 11)
!9023 = !DILocation(line: 4450, column: 4, scope: !9022)
!9024 = !DILocation(line: 4450, column: 7, scope: !9022)
!9025 = !DILocation(line: 4450, column: 35, scope: !9022)
!9026 = !DILocation(line: 4450, column: 32, scope: !9022)
!9027 = !DILocation(line: 4449, column: 11, scope: !8655)
!9028 = !DILocalVariable(name: "ncache", scope: !9029, file: !3, line: 4452, type: !8953)
!9029 = distinct !DILexicalBlock(scope: !9022, file: !3, line: 4451, column: 2)
!9030 = !DILocation(line: 4452, column: 9, scope: !9029)
!9031 = !DILocalVariable(name: "valid0", scope: !9029, file: !3, line: 4453, type: !2702)
!9032 = !DILocation(line: 4453, column: 9, scope: !9029)
!9033 = !DILocation(line: 4454, column: 40, scope: !9029)
!9034 = !DILocation(line: 4455, column: 12, scope: !9029)
!9035 = !DILocation(line: 4455, column: 21, scope: !9029)
!9036 = !DILocation(line: 4454, column: 8, scope: !9029)
!9037 = !DILocalVariable(name: "valid1", scope: !9029, file: !3, line: 4456, type: !2702)
!9038 = !DILocation(line: 4456, column: 9, scope: !9029)
!9039 = !DILocation(line: 4457, column: 40, scope: !9029)
!9040 = !DILocation(line: 4458, column: 12, scope: !9029)
!9041 = !DILocation(line: 4458, column: 21, scope: !9029)
!9042 = !DILocation(line: 4458, column: 28, scope: !9029)
!9043 = !DILocation(line: 4457, column: 8, scope: !9029)
!9044 = !DILocation(line: 4460, column: 8, scope: !9045)
!9045 = distinct !DILexicalBlock(scope: !9029, file: !3, line: 4460, column: 8)
!9046 = !DILocation(line: 4460, column: 18, scope: !9045)
!9047 = !DILocation(line: 4460, column: 15, scope: !9045)
!9048 = !DILocation(line: 4460, column: 8, scope: !9029)
!9049 = !DILocation(line: 4461, column: 12, scope: !9045)
!9050 = !DILocation(line: 4461, column: 10, scope: !9045)
!9051 = !DILocation(line: 4461, column: 6, scope: !9045)
!9052 = !DILocation(line: 4464, column: 13, scope: !9053)
!9053 = distinct !DILexicalBlock(scope: !9045, file: !3, line: 4464, column: 13)
!9054 = !DILocation(line: 4464, column: 23, scope: !9053)
!9055 = !DILocation(line: 4464, column: 20, scope: !9053)
!9056 = !DILocation(line: 4464, column: 30, scope: !9053)
!9057 = !DILocation(line: 4464, column: 33, scope: !9053)
!9058 = !DILocation(line: 4464, column: 40, scope: !9053)
!9059 = !DILocation(line: 4464, column: 13, scope: !9045)
!9060 = !DILocation(line: 4465, column: 12, scope: !9053)
!9061 = !DILocation(line: 4465, column: 10, scope: !9053)
!9062 = !DILocation(line: 4465, column: 6, scope: !9053)
!9063 = !DILocation(line: 4469, column: 13, scope: !9064)
!9064 = distinct !DILexicalBlock(scope: !9053, file: !3, line: 4469, column: 13)
!9065 = !DILocation(line: 4469, column: 20, scope: !9064)
!9066 = !DILocation(line: 4469, column: 23, scope: !9064)
!9067 = !DILocation(line: 4469, column: 42, scope: !9064)
!9068 = !DILocation(line: 4470, column: 6, scope: !9064)
!9069 = !DILocation(line: 4470, column: 9, scope: !9064)
!9070 = !DILocation(line: 4470, column: 16, scope: !9064)
!9071 = !DILocation(line: 4470, column: 19, scope: !9064)
!9072 = !DILocation(line: 4470, column: 38, scope: !9064)
!9073 = !DILocation(line: 4471, column: 6, scope: !9064)
!9074 = !DILocation(line: 4471, column: 26, scope: !9064)
!9075 = !DILocation(line: 4471, column: 34, scope: !9064)
!9076 = !DILocation(line: 4471, column: 9, scope: !9064)
!9077 = !DILocation(line: 4469, column: 13, scope: !9053)
!9078 = !DILocation(line: 4472, column: 12, scope: !9064)
!9079 = !DILocation(line: 4472, column: 10, scope: !9064)
!9080 = !DILocation(line: 4472, column: 6, scope: !9064)
!9081 = !DILocation(line: 4475, column: 52, scope: !9064)
!9082 = !DILocation(line: 4475, column: 59, scope: !9064)
!9083 = !DILocation(line: 4476, column: 10, scope: !9064)
!9084 = !DILocation(line: 4475, column: 12, scope: !9064)
!9085 = !DILocation(line: 4475, column: 10, scope: !9064)
!9086 = !DILocation(line: 4477, column: 2, scope: !9029)
!9087 = !DILocation(line: 4480, column: 48, scope: !9022)
!9088 = !DILocation(line: 4480, column: 55, scope: !9022)
!9089 = !DILocation(line: 4480, column: 8, scope: !9022)
!9090 = !DILocation(line: 4480, column: 6, scope: !9022)
!9091 = !DILocation(line: 4481, column: 11, scope: !9092)
!9092 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 4481, column: 11)
!9093 = !DILocation(line: 4481, column: 11, scope: !8655)
!9094 = !DILocation(line: 4483, column: 15, scope: !9095)
!9095 = distinct !DILexicalBlock(scope: !9092, file: !3, line: 4482, column: 2)
!9096 = !DILocation(line: 4483, column: 4, scope: !9095)
!9097 = !DILocation(line: 4483, column: 13, scope: !9095)
!9098 = !DILocation(line: 4484, column: 15, scope: !9095)
!9099 = !DILocation(line: 4484, column: 4, scope: !9095)
!9100 = !DILocation(line: 4484, column: 13, scope: !9095)
!9101 = !DILocation(line: 4485, column: 2, scope: !9095)
!9102 = !DILocation(line: 4486, column: 14, scope: !8655)
!9103 = !DILocation(line: 4486, column: 7, scope: !8655)
!9104 = !DILocation(line: 4489, column: 7, scope: !8655)
!9105 = !DILocation(line: 4492, column: 3, scope: !8640)
!9106 = !DILocation(line: 4493, column: 1, scope: !8640)
!9107 = distinct !DISubprogram(name: "initializer_constant_valid_for_bitfield_p", scope: !3, file: !3, line: 4515, type: !5360, scopeLine: 4516, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9108 = !DILocalVariable(name: "value", arg: 1, scope: !9107, file: !3, line: 4515, type: !2702)
!9109 = !DILocation(line: 4515, column: 49, scope: !9107)
!9110 = !DILocation(line: 4519, column: 11, scope: !9107)
!9111 = !DILocation(line: 4519, column: 3, scope: !9107)
!9112 = !DILocalVariable(name: "idx", scope: !9113, file: !3, line: 4523, type: !2755)
!9113 = distinct !DILexicalBlock(scope: !9114, file: !3, line: 4522, column: 7)
!9114 = distinct !DILexicalBlock(scope: !9107, file: !3, line: 4520, column: 5)
!9115 = !DILocation(line: 4523, column: 25, scope: !9113)
!9116 = !DILocalVariable(name: "elt", scope: !9113, file: !3, line: 4524, type: !2702)
!9117 = !DILocation(line: 4524, column: 7, scope: !9113)
!9118 = !DILocation(line: 4526, column: 2, scope: !9119)
!9119 = distinct !DILexicalBlock(scope: !9113, file: !3, line: 4526, column: 2)
!9120 = !DILocation(line: 4526, column: 2, scope: !9121)
!9121 = distinct !DILexicalBlock(scope: !9119, file: !3, line: 4526, column: 2)
!9122 = !DILocation(line: 4527, column: 52, scope: !9123)
!9123 = distinct !DILexicalBlock(scope: !9121, file: !3, line: 4527, column: 8)
!9124 = !DILocation(line: 4527, column: 9, scope: !9123)
!9125 = !DILocation(line: 4527, column: 8, scope: !9121)
!9126 = !DILocation(line: 4528, column: 6, scope: !9123)
!9127 = !DILocation(line: 4527, column: 55, scope: !9123)
!9128 = distinct !{!9128, !9118, !9129}
!9129 = !DILocation(line: 4528, column: 13, scope: !9119)
!9130 = !DILocation(line: 4529, column: 2, scope: !9113)
!9131 = !DILocation(line: 4533, column: 7, scope: !9114)
!9132 = !DILocation(line: 4538, column: 45, scope: !9114)
!9133 = !DILocation(line: 4538, column: 2, scope: !9114)
!9134 = !DILocation(line: 4537, column: 7, scope: !9114)
!9135 = !DILocation(line: 4541, column: 7, scope: !9114)
!9136 = !DILocation(line: 4544, column: 3, scope: !9107)
!9137 = !DILocation(line: 4545, column: 1, scope: !9107)
!9138 = distinct !DISubprogram(name: "output_constant", scope: !3, file: !3, line: 4580, type: !9139, scopeLine: 4581, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9139 = !DISubroutineType(types: !9140)
!9140 = !{null, !2702, !2755, !7}
!9141 = !DILocalVariable(name: "exp", arg: 1, scope: !9138, file: !3, line: 4580, type: !2702)
!9142 = !DILocation(line: 4580, column: 23, scope: !9138)
!9143 = !DILocalVariable(name: "size", arg: 2, scope: !9138, file: !3, line: 4580, type: !2755)
!9144 = !DILocation(line: 4580, column: 51, scope: !9138)
!9145 = !DILocalVariable(name: "align", arg: 3, scope: !9138, file: !3, line: 4580, type: !7)
!9146 = !DILocation(line: 4580, column: 70, scope: !9138)
!9147 = !DILocalVariable(name: "code", scope: !9138, file: !3, line: 4582, type: !183)
!9148 = !DILocation(line: 4582, column: 18, scope: !9138)
!9149 = !DILocalVariable(name: "thissize", scope: !9138, file: !3, line: 4583, type: !2755)
!9150 = !DILocation(line: 4583, column: 26, scope: !9138)
!9151 = !DILocation(line: 4585, column: 7, scope: !9152)
!9152 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 4585, column: 7)
!9153 = !DILocation(line: 4585, column: 12, scope: !9152)
!9154 = !DILocation(line: 4585, column: 17, scope: !9152)
!9155 = !DILocation(line: 4585, column: 20, scope: !9152)
!9156 = !DILocation(line: 4585, column: 7, scope: !9138)
!9157 = !DILocation(line: 4586, column: 5, scope: !9152)
!9158 = !DILocation(line: 4592, column: 7, scope: !9159)
!9159 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 4592, column: 7)
!9160 = !DILocation(line: 4592, column: 23, scope: !9159)
!9161 = !DILocation(line: 4593, column: 7, scope: !9159)
!9162 = !DILocation(line: 4593, column: 10, scope: !9159)
!9163 = !DILocation(line: 4594, column: 7, scope: !9159)
!9164 = !DILocation(line: 4594, column: 29, scope: !9159)
!9165 = !DILocation(line: 4595, column: 6, scope: !9159)
!9166 = !DILocation(line: 4596, column: 6, scope: !9159)
!9167 = !DILocation(line: 4594, column: 10, scope: !9159)
!9168 = !DILocation(line: 4592, column: 7, scope: !9138)
!9169 = !DILocalVariable(name: "saved_type", scope: !9170, file: !3, line: 4598, type: !2702)
!9170 = distinct !DILexicalBlock(scope: !9159, file: !3, line: 4597, column: 5)
!9171 = !DILocation(line: 4598, column: 12, scope: !9170)
!9172 = !DILocation(line: 4598, column: 25, scope: !9170)
!9173 = !DILocation(line: 4602, column: 7, scope: !9170)
!9174 = !DILocation(line: 4602, column: 14, scope: !9170)
!9175 = !DILocation(line: 4602, column: 30, scope: !9170)
!9176 = !DILocation(line: 4603, column: 7, scope: !9170)
!9177 = !DILocation(line: 4603, column: 10, scope: !9170)
!9178 = !DILocation(line: 4604, column: 7, scope: !9170)
!9179 = !DILocation(line: 4604, column: 29, scope: !9170)
!9180 = !DILocation(line: 4605, column: 6, scope: !9170)
!9181 = !DILocation(line: 4606, column: 6, scope: !9170)
!9182 = !DILocation(line: 4604, column: 10, scope: !9170)
!9183 = !DILocation(line: 0, scope: !9170)
!9184 = !DILocation(line: 4607, column: 8, scope: !9170)
!9185 = !DILocation(line: 4607, column: 6, scope: !9170)
!9186 = distinct !{!9186, !9173, !9184}
!9187 = !DILocation(line: 4612, column: 11, scope: !9188)
!9188 = distinct !DILexicalBlock(scope: !9170, file: !3, line: 4612, column: 11)
!9189 = !DILocation(line: 4612, column: 27, scope: !9188)
!9190 = !DILocation(line: 4612, column: 11, scope: !9170)
!9191 = !DILocation(line: 4613, column: 8, scope: !9188)
!9192 = !DILocation(line: 4613, column: 6, scope: !9188)
!9193 = !DILocation(line: 4613, column: 2, scope: !9188)
!9194 = !DILocation(line: 4615, column: 16, scope: !9195)
!9195 = distinct !DILexicalBlock(scope: !9188, file: !3, line: 4615, column: 16)
!9196 = !DILocation(line: 4615, column: 32, scope: !9195)
!9197 = !DILocation(line: 4615, column: 16, scope: !9188)
!9198 = !DILocation(line: 4616, column: 28, scope: !9195)
!9199 = !DILocation(line: 4616, column: 40, scope: !9195)
!9200 = !DILocation(line: 4617, column: 7, scope: !9195)
!9201 = !DILocation(line: 4616, column: 8, scope: !9195)
!9202 = !DILocation(line: 4616, column: 6, scope: !9195)
!9203 = !DILocation(line: 4616, column: 2, scope: !9195)
!9204 = !DILocation(line: 4619, column: 5, scope: !9170)
!9205 = !DILocation(line: 4623, column: 3, scope: !9138)
!9206 = !DILocation(line: 4623, column: 10, scope: !9138)
!9207 = !DILocation(line: 4624, column: 3, scope: !9138)
!9208 = !DILocation(line: 4624, column: 6, scope: !9138)
!9209 = !DILocation(line: 4624, column: 22, scope: !9138)
!9210 = !DILocation(line: 4625, column: 3, scope: !9138)
!9211 = !DILocation(line: 4625, column: 6, scope: !9138)
!9212 = !DILocation(line: 4625, column: 22, scope: !9138)
!9213 = !DILocalVariable(name: "type_size", scope: !9214, file: !3, line: 4627, type: !2757)
!9214 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 4626, column: 5)
!9215 = !DILocation(line: 4627, column: 21, scope: !9214)
!9216 = !DILocation(line: 4627, column: 52, scope: !9214)
!9217 = !DILocation(line: 4627, column: 33, scope: !9214)
!9218 = !DILocalVariable(name: "op_size", scope: !9214, file: !3, line: 4628, type: !2757)
!9219 = !DILocation(line: 4628, column: 21, scope: !9214)
!9220 = !DILocation(line: 4628, column: 50, scope: !9214)
!9221 = !DILocation(line: 4628, column: 31, scope: !9214)
!9222 = !DILocation(line: 4633, column: 11, scope: !9223)
!9223 = distinct !DILexicalBlock(scope: !9214, file: !3, line: 4633, column: 11)
!9224 = !DILocation(line: 4633, column: 23, scope: !9223)
!9225 = !DILocation(line: 4633, column: 21, scope: !9223)
!9226 = !DILocation(line: 4634, column: 4, scope: !9223)
!9227 = !DILocation(line: 4634, column: 7, scope: !9223)
!9228 = !DILocation(line: 4634, column: 23, scope: !9223)
!9229 = !DILocation(line: 4635, column: 4, scope: !9223)
!9230 = !DILocation(line: 4635, column: 7, scope: !9223)
!9231 = !DILocation(line: 4635, column: 35, scope: !9223)
!9232 = !DILocation(line: 4633, column: 11, scope: !9214)
!9233 = !DILocation(line: 4637, column: 2, scope: !9223)
!9234 = !DILocation(line: 4639, column: 8, scope: !9223)
!9235 = !DILocation(line: 4639, column: 6, scope: !9223)
!9236 = distinct !{!9236, !9205, !9237}
!9237 = !DILocation(line: 4640, column: 5, scope: !9138)
!9238 = !DILocation(line: 4642, column: 10, scope: !9138)
!9239 = !DILocation(line: 4642, column: 8, scope: !9138)
!9240 = !DILocation(line: 4643, column: 33, scope: !9138)
!9241 = !DILocation(line: 4643, column: 14, scope: !9138)
!9242 = !DILocation(line: 4643, column: 12, scope: !9138)
!9243 = !DILocation(line: 4647, column: 7, scope: !9244)
!9244 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 4647, column: 7)
!9245 = !DILocation(line: 4647, column: 23, scope: !9244)
!9246 = !DILocation(line: 4648, column: 7, scope: !9244)
!9247 = !DILocation(line: 4648, column: 10, scope: !9244)
!9248 = !DILocation(line: 4647, column: 7, scope: !9138)
!9249 = !DILocation(line: 4650, column: 23, scope: !9250)
!9250 = distinct !DILexicalBlock(scope: !9244, file: !3, line: 4649, column: 5)
!9251 = !DILocation(line: 4650, column: 7, scope: !9250)
!9252 = !DILocation(line: 4651, column: 7, scope: !9250)
!9253 = !DILocation(line: 4654, column: 7, scope: !9254)
!9254 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 4654, column: 7)
!9255 = !DILocation(line: 4654, column: 23, scope: !9254)
!9256 = !DILocation(line: 4654, column: 7, scope: !9138)
!9257 = !DILocation(line: 4661, column: 7, scope: !9258)
!9258 = distinct !DILexicalBlock(scope: !9254, file: !3, line: 4655, column: 5)
!9259 = !DILocation(line: 4663, column: 7, scope: !9258)
!9260 = !DILocation(line: 4668, column: 11, scope: !9138)
!9261 = !DILocation(line: 4668, column: 3, scope: !9138)
!9262 = !DILocation(line: 4677, column: 44, scope: !9263)
!9263 = distinct !DILexicalBlock(scope: !9264, file: !3, line: 4677, column: 11)
!9264 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 4669, column: 5)
!9265 = !DILocation(line: 4677, column: 31, scope: !9263)
!9266 = !DILocation(line: 4679, column: 10, scope: !9263)
!9267 = !DILocation(line: 4679, column: 32, scope: !9263)
!9268 = !DILocation(line: 4677, column: 13, scope: !9263)
!9269 = !DILocation(line: 4677, column: 11, scope: !9264)
!9270 = !DILocation(line: 4680, column: 2, scope: !9263)
!9271 = !DILocation(line: 4681, column: 7, scope: !9264)
!9272 = !DILocation(line: 4684, column: 11, scope: !9273)
!9273 = distinct !DILexicalBlock(scope: !9264, file: !3, line: 4684, column: 11)
!9274 = !DILocation(line: 4684, column: 27, scope: !9273)
!9275 = !DILocation(line: 4684, column: 11, scope: !9264)
!9276 = !DILocation(line: 4685, column: 2, scope: !9273)
!9277 = !DILocation(line: 4687, column: 17, scope: !9273)
!9278 = !DILocation(line: 4687, column: 38, scope: !9273)
!9279 = !DILocation(line: 4687, column: 67, scope: !9273)
!9280 = !DILocation(line: 4687, column: 2, scope: !9273)
!9281 = !DILocation(line: 4688, column: 7, scope: !9264)
!9282 = !DILocation(line: 4691, column: 24, scope: !9264)
!9283 = !DILocation(line: 4691, column: 45, scope: !9264)
!9284 = !DILocation(line: 4691, column: 54, scope: !9264)
!9285 = !DILocation(line: 4691, column: 59, scope: !9264)
!9286 = !DILocation(line: 4691, column: 7, scope: !9264)
!9287 = !DILocation(line: 4692, column: 24, scope: !9264)
!9288 = !DILocation(line: 4692, column: 45, scope: !9264)
!9289 = !DILocation(line: 4692, column: 54, scope: !9264)
!9290 = !DILocation(line: 4693, column: 21, scope: !9264)
!9291 = !DILocation(line: 4693, column: 45, scope: !9264)
!9292 = !DILocation(line: 4693, column: 54, scope: !9264)
!9293 = !DILocation(line: 4693, column: 42, scope: !9264)
!9294 = !DILocation(line: 4693, column: 28, scope: !9264)
!9295 = !DILocation(line: 4693, column: 10, scope: !9264)
!9296 = !DILocation(line: 4692, column: 7, scope: !9264)
!9297 = !DILocation(line: 4694, column: 7, scope: !9264)
!9298 = !DILocation(line: 4698, column: 15, scope: !9264)
!9299 = !DILocation(line: 4698, column: 7, scope: !9264)
!9300 = !DILocation(line: 4701, column: 26, scope: !9301)
!9301 = distinct !DILexicalBlock(scope: !9264, file: !3, line: 4699, column: 2)
!9302 = !DILocation(line: 4701, column: 31, scope: !9301)
!9303 = !DILocation(line: 4701, column: 37, scope: !9301)
!9304 = !DILocation(line: 4701, column: 6, scope: !9301)
!9305 = !DILocation(line: 4702, column: 4, scope: !9301)
!9306 = !DILocation(line: 4704, column: 15, scope: !9301)
!9307 = !DILocation(line: 4704, column: 13, scope: !9301)
!9308 = !DILocation(line: 4706, column: 21, scope: !9301)
!9309 = !DILocation(line: 4706, column: 48, scope: !9301)
!9310 = !DILocation(line: 4706, column: 4, scope: !9301)
!9311 = !DILocation(line: 4707, column: 4, scope: !9301)
!9312 = !DILocalVariable(name: "elt_size", scope: !9313, file: !3, line: 4711, type: !2798)
!9313 = distinct !DILexicalBlock(scope: !9301, file: !3, line: 4710, column: 4)
!9314 = !DILocation(line: 4711, column: 10, scope: !9313)
!9315 = !DILocalVariable(name: "link", scope: !9313, file: !3, line: 4712, type: !2702)
!9316 = !DILocation(line: 4712, column: 11, scope: !9313)
!9317 = !DILocalVariable(name: "nalign", scope: !9313, file: !3, line: 4713, type: !7)
!9318 = !DILocation(line: 4713, column: 19, scope: !9313)
!9319 = !DILocalVariable(name: "inner", scope: !9313, file: !3, line: 4714, type: !5)
!9320 = !DILocation(line: 4714, column: 24, scope: !9313)
!9321 = !DILocation(line: 4716, column: 14, scope: !9313)
!9322 = !DILocation(line: 4716, column: 12, scope: !9313)
!9323 = !DILocation(line: 4717, column: 15, scope: !9313)
!9324 = !DILocation(line: 4717, column: 13, scope: !9313)
!9325 = !DILocation(line: 4719, column: 17, scope: !9313)
!9326 = !DILocation(line: 4719, column: 15, scope: !9313)
!9327 = !DILocation(line: 4721, column: 13, scope: !9313)
!9328 = !DILocation(line: 4721, column: 11, scope: !9313)
!9329 = !DILocation(line: 4722, column: 23, scope: !9313)
!9330 = !DILocation(line: 4722, column: 42, scope: !9313)
!9331 = !DILocation(line: 4722, column: 52, scope: !9313)
!9332 = !DILocation(line: 4722, column: 6, scope: !9313)
!9333 = !DILocation(line: 4723, column: 17, scope: !9313)
!9334 = !DILocation(line: 4723, column: 15, scope: !9313)
!9335 = !DILocation(line: 4724, column: 6, scope: !9313)
!9336 = !DILocation(line: 4724, column: 21, scope: !9313)
!9337 = !DILocation(line: 4724, column: 19, scope: !9313)
!9338 = !DILocation(line: 4724, column: 40, scope: !9313)
!9339 = !DILocation(line: 4726, column: 20, scope: !9340)
!9340 = distinct !DILexicalBlock(scope: !9313, file: !3, line: 4725, column: 8)
!9341 = !DILocation(line: 4726, column: 39, scope: !9340)
!9342 = !DILocation(line: 4726, column: 49, scope: !9340)
!9343 = !DILocation(line: 4726, column: 3, scope: !9340)
!9344 = !DILocation(line: 4727, column: 15, scope: !9340)
!9345 = !DILocation(line: 4727, column: 12, scope: !9340)
!9346 = distinct !{!9346, !9335, !9347}
!9347 = !DILocation(line: 4728, column: 8, scope: !9313)
!9348 = !DILocation(line: 4729, column: 6, scope: !9313)
!9349 = !DILocation(line: 4732, column: 4, scope: !9301)
!9350 = !DILocation(line: 4733, column: 2, scope: !9301)
!9351 = !DILocation(line: 4734, column: 7, scope: !9264)
!9352 = !DILocation(line: 4738, column: 7, scope: !9264)
!9353 = !DILocation(line: 4739, column: 27, scope: !9264)
!9354 = !DILocation(line: 4739, column: 32, scope: !9264)
!9355 = !DILocation(line: 4739, column: 38, scope: !9264)
!9356 = !DILocation(line: 4739, column: 7, scope: !9264)
!9357 = !DILocation(line: 4740, column: 7, scope: !9264)
!9358 = !DILocation(line: 4743, column: 7, scope: !9264)
!9359 = !DILocation(line: 4746, column: 7, scope: !9264)
!9360 = !DILocation(line: 4747, column: 5, scope: !9264)
!9361 = !DILocation(line: 4749, column: 7, scope: !9362)
!9362 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 4749, column: 7)
!9363 = !DILocation(line: 4749, column: 14, scope: !9362)
!9364 = !DILocation(line: 4749, column: 12, scope: !9362)
!9365 = !DILocation(line: 4749, column: 7, scope: !9138)
!9366 = !DILocation(line: 4750, column: 21, scope: !9362)
!9367 = !DILocation(line: 4750, column: 28, scope: !9362)
!9368 = !DILocation(line: 4750, column: 26, scope: !9362)
!9369 = !DILocation(line: 4750, column: 5, scope: !9362)
!9370 = !DILocation(line: 4751, column: 1, scope: !9138)
!9371 = distinct !DISubprogram(name: "expand_expr", scope: !1674, file: !1674, line: 555, type: !9372, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9372 = !DISubroutineType(types: !9373)
!9373 = !{!2876, !2702, !2876, !5, !1673}
!9374 = !DILocalVariable(name: "exp", arg: 1, scope: !9371, file: !1674, line: 555, type: !2702)
!9375 = !DILocation(line: 555, column: 19, scope: !9371)
!9376 = !DILocalVariable(name: "target", arg: 2, scope: !9371, file: !1674, line: 555, type: !2876)
!9377 = !DILocation(line: 555, column: 28, scope: !9371)
!9378 = !DILocalVariable(name: "mode", arg: 3, scope: !9371, file: !1674, line: 555, type: !5)
!9379 = !DILocation(line: 555, column: 54, scope: !9371)
!9380 = !DILocalVariable(name: "modifier", arg: 4, scope: !9371, file: !1674, line: 556, type: !1673)
!9381 = !DILocation(line: 556, column: 28, scope: !9371)
!9382 = !DILocation(line: 558, column: 28, scope: !9371)
!9383 = !DILocation(line: 558, column: 33, scope: !9371)
!9384 = !DILocation(line: 558, column: 41, scope: !9371)
!9385 = !DILocation(line: 558, column: 47, scope: !9371)
!9386 = !DILocation(line: 558, column: 10, scope: !9371)
!9387 = !DILocation(line: 558, column: 3, scope: !9371)
!9388 = distinct !DISubprogram(name: "output_constructor", scope: !3, file: !3, line: 5139, type: !9389, scopeLine: 5141, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9389 = !DISubroutineType(types: !9390)
!9390 = !{!2755, !2702, !2755, !7, !9391}
!9391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9392, size: 64)
!9392 = !DIDerivedType(tag: DW_TAG_typedef, name: "oc_outer_state", file: !3, line: 4553, baseType: !9393)
!9393 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 4550, size: 64, elements: !9394)
!9394 = !{!9395, !9396}
!9395 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !9393, file: !3, line: 4551, baseType: !7, size: 32)
!9396 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !9393, file: !3, line: 4552, baseType: !2798, size: 32, offset: 32)
!9397 = !DILocalVariable(name: "exp", arg: 1, scope: !9388, file: !3, line: 5139, type: !2702)
!9398 = !DILocation(line: 5139, column: 26, scope: !9388)
!9399 = !DILocalVariable(name: "size", arg: 2, scope: !9388, file: !3, line: 5139, type: !2755)
!9400 = !DILocation(line: 5139, column: 54, scope: !9388)
!9401 = !DILocalVariable(name: "align", arg: 3, scope: !9388, file: !3, line: 5140, type: !7)
!9402 = !DILocation(line: 5140, column: 20, scope: !9388)
!9403 = !DILocalVariable(name: "outer", arg: 4, scope: !9388, file: !3, line: 5140, type: !9391)
!9404 = !DILocation(line: 5140, column: 44, scope: !9388)
!9405 = !DILocalVariable(name: "cnt", scope: !9388, file: !3, line: 5142, type: !2755)
!9406 = !DILocation(line: 5142, column: 26, scope: !9388)
!9407 = !DILocalVariable(name: "ce", scope: !9388, file: !3, line: 5143, type: !6391)
!9408 = !DILocation(line: 5143, column: 20, scope: !9388)
!9409 = !DILocalVariable(name: "local", scope: !9388, file: !3, line: 5145, type: !9410)
!9410 = !DIDerivedType(tag: DW_TAG_typedef, name: "oc_local_state", file: !3, line: 4823, baseType: !9411)
!9411 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 4799, size: 704, elements: !9412)
!9412 = !{!9413, !9414, !9415, !9416, !9417, !9418, !9419, !9420, !9421, !9422, !9423, !9424}
!9413 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !9411, file: !3, line: 4802, baseType: !2702, size: 64)
!9414 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !9411, file: !3, line: 4803, baseType: !2755, size: 64, offset: 64)
!9415 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !9411, file: !3, line: 4804, baseType: !7, size: 32, offset: 128)
!9416 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !9411, file: !3, line: 4807, baseType: !2702, size: 64, offset: 192)
!9417 = !DIDerivedType(tag: DW_TAG_member, name: "field", scope: !9411, file: !3, line: 4808, baseType: !2702, size: 64, offset: 256)
!9418 = !DIDerivedType(tag: DW_TAG_member, name: "min_index", scope: !9411, file: !3, line: 4809, baseType: !2702, size: 64, offset: 320)
!9419 = !DIDerivedType(tag: DW_TAG_member, name: "total_bytes", scope: !9411, file: !3, line: 4812, baseType: !2757, size: 64, offset: 384)
!9420 = !DIDerivedType(tag: DW_TAG_member, name: "byte_buffer_in_use", scope: !9411, file: !3, line: 4813, baseType: !2820, size: 8, offset: 448)
!9421 = !DIDerivedType(tag: DW_TAG_member, name: "byte", scope: !9411, file: !3, line: 4814, baseType: !2798, size: 32, offset: 480)
!9422 = !DIDerivedType(tag: DW_TAG_member, name: "last_relative_index", scope: !9411, file: !3, line: 4817, baseType: !2798, size: 32, offset: 512)
!9423 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !9411, file: !3, line: 4820, baseType: !2702, size: 64, offset: 576)
!9424 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !9411, file: !3, line: 4821, baseType: !2702, size: 64, offset: 640)
!9425 = !DILocation(line: 5145, column: 18, scope: !9388)
!9426 = !DILocation(line: 5148, column: 15, scope: !9388)
!9427 = !DILocation(line: 5148, column: 9, scope: !9388)
!9428 = !DILocation(line: 5148, column: 13, scope: !9388)
!9429 = !DILocation(line: 5149, column: 16, scope: !9388)
!9430 = !DILocation(line: 5149, column: 9, scope: !9388)
!9431 = !DILocation(line: 5149, column: 14, scope: !9388)
!9432 = !DILocation(line: 5150, column: 17, scope: !9388)
!9433 = !DILocation(line: 5150, column: 9, scope: !9388)
!9434 = !DILocation(line: 5150, column: 15, scope: !9388)
!9435 = !DILocation(line: 5152, column: 9, scope: !9388)
!9436 = !DILocation(line: 5152, column: 21, scope: !9388)
!9437 = !DILocation(line: 5153, column: 30, scope: !9388)
!9438 = !DILocation(line: 5153, column: 36, scope: !9388)
!9439 = !DILocation(line: 5153, column: 9, scope: !9388)
!9440 = !DILocation(line: 5153, column: 28, scope: !9388)
!9441 = !DILocation(line: 5154, column: 16, scope: !9388)
!9442 = !DILocation(line: 5154, column: 24, scope: !9388)
!9443 = !DILocation(line: 5154, column: 31, scope: !9388)
!9444 = !DILocation(line: 5154, column: 9, scope: !9388)
!9445 = !DILocation(line: 5154, column: 14, scope: !9388)
!9446 = !DILocation(line: 5156, column: 16, scope: !9388)
!9447 = !DILocation(line: 5156, column: 9, scope: !9388)
!9448 = !DILocation(line: 5156, column: 14, scope: !9388)
!9449 = !DILocation(line: 5158, column: 9, scope: !9388)
!9450 = !DILocation(line: 5158, column: 29, scope: !9388)
!9451 = !DILocation(line: 5160, column: 9, scope: !9388)
!9452 = !DILocation(line: 5160, column: 19, scope: !9388)
!9453 = !DILocation(line: 5161, column: 7, scope: !9454)
!9454 = distinct !DILexicalBlock(scope: !9388, file: !3, line: 5161, column: 7)
!9455 = !DILocation(line: 5161, column: 30, scope: !9454)
!9456 = !DILocation(line: 5162, column: 7, scope: !9454)
!9457 = !DILocation(line: 5162, column: 10, scope: !9454)
!9458 = !DILocation(line: 5162, column: 35, scope: !9454)
!9459 = !DILocation(line: 5161, column: 7, scope: !9388)
!9460 = !DILocation(line: 5163, column: 23, scope: !9454)
!9461 = !DILocation(line: 5163, column: 11, scope: !9454)
!9462 = !DILocation(line: 5163, column: 21, scope: !9454)
!9463 = !DILocation(line: 5163, column: 5, scope: !9454)
!9464 = !DILocation(line: 5176, column: 9, scope: !9388)
!9465 = !DILocation(line: 5176, column: 15, scope: !9388)
!9466 = !DILocation(line: 5177, column: 7, scope: !9467)
!9467 = distinct !DILexicalBlock(scope: !9388, file: !3, line: 5177, column: 7)
!9468 = !DILocation(line: 5177, column: 30, scope: !9467)
!9469 = !DILocation(line: 5177, column: 7, scope: !9388)
!9470 = !DILocation(line: 5178, column: 19, scope: !9467)
!9471 = !DILocation(line: 5178, column: 11, scope: !9467)
!9472 = !DILocation(line: 5178, column: 17, scope: !9467)
!9473 = !DILocation(line: 5178, column: 5, scope: !9467)
!9474 = !DILocation(line: 5180, column: 12, scope: !9475)
!9475 = distinct !DILexicalBlock(scope: !9388, file: !3, line: 5180, column: 3)
!9476 = !DILocation(line: 5180, column: 8, scope: !9475)
!9477 = !DILocation(line: 5181, column: 8, scope: !9478)
!9478 = distinct !DILexicalBlock(scope: !9475, file: !3, line: 5180, column: 3)
!9479 = !DILocation(line: 5180, column: 3, scope: !9475)
!9480 = !DILocation(line: 5184, column: 19, scope: !9481)
!9481 = distinct !DILexicalBlock(scope: !9478, file: !3, line: 5183, column: 5)
!9482 = !DILocation(line: 5184, column: 23, scope: !9481)
!9483 = !DILocation(line: 5184, column: 13, scope: !9481)
!9484 = !DILocation(line: 5184, column: 17, scope: !9481)
!9485 = !DILocation(line: 5185, column: 13, scope: !9481)
!9486 = !DILocation(line: 5185, column: 19, scope: !9481)
!9487 = !DILocation(line: 5189, column: 12, scope: !9488)
!9488 = distinct !DILexicalBlock(scope: !9481, file: !3, line: 5189, column: 11)
!9489 = !DILocation(line: 5189, column: 35, scope: !9488)
!9490 = !DILocation(line: 5190, column: 5, scope: !9488)
!9491 = !DILocation(line: 5190, column: 8, scope: !9488)
!9492 = !DILocation(line: 5190, column: 31, scope: !9488)
!9493 = !DILocation(line: 5191, column: 5, scope: !9488)
!9494 = !DILocation(line: 5191, column: 8, scope: !9488)
!9495 = !DILocation(line: 5191, column: 31, scope: !9488)
!9496 = !DILocation(line: 5192, column: 4, scope: !9488)
!9497 = !DILocation(line: 5192, column: 7, scope: !9488)
!9498 = !DILocation(line: 5192, column: 11, scope: !9488)
!9499 = !DILocation(line: 5192, column: 17, scope: !9488)
!9500 = !DILocation(line: 5189, column: 11, scope: !9481)
!9501 = !DILocation(line: 5193, column: 16, scope: !9488)
!9502 = !DILocation(line: 5193, column: 20, scope: !9488)
!9503 = !DILocation(line: 5193, column: 8, scope: !9488)
!9504 = !DILocation(line: 5193, column: 14, scope: !9488)
!9505 = !DILocation(line: 5193, column: 2, scope: !9488)
!9506 = !DILocation(line: 5195, column: 16, scope: !9507)
!9507 = distinct !DILexicalBlock(scope: !9488, file: !3, line: 5195, column: 16)
!9508 = !DILocation(line: 5195, column: 39, scope: !9507)
!9509 = !DILocation(line: 5195, column: 16, scope: !9488)
!9510 = !DILocation(line: 5196, column: 16, scope: !9507)
!9511 = !DILocation(line: 5196, column: 20, scope: !9507)
!9512 = !DILocation(line: 5196, column: 8, scope: !9507)
!9513 = !DILocation(line: 5196, column: 14, scope: !9507)
!9514 = !DILocation(line: 5196, column: 2, scope: !9507)
!9515 = !DILocation(line: 5199, column: 17, scope: !9516)
!9516 = distinct !DILexicalBlock(scope: !9481, file: !3, line: 5199, column: 11)
!9517 = !DILocation(line: 5199, column: 11, scope: !9516)
!9518 = !DILocation(line: 5199, column: 23, scope: !9516)
!9519 = !DILocation(line: 5199, column: 26, scope: !9516)
!9520 = !DILocation(line: 5199, column: 11, scope: !9481)
!9521 = !DILocation(line: 5200, column: 11, scope: !9516)
!9522 = !DILocation(line: 5202, column: 4, scope: !9516)
!9523 = !DILocation(line: 5203, column: 6, scope: !9516)
!9524 = !DILocation(line: 5200, column: 2, scope: !9516)
!9525 = !DILocation(line: 5208, column: 17, scope: !9526)
!9526 = distinct !DILexicalBlock(scope: !9481, file: !3, line: 5208, column: 11)
!9527 = !DILocation(line: 5208, column: 21, scope: !9526)
!9528 = !DILocation(line: 5208, column: 11, scope: !9481)
!9529 = !DILocation(line: 5209, column: 2, scope: !9526)
!9530 = !DILocation(line: 5214, column: 12, scope: !9531)
!9531 = distinct !DILexicalBlock(scope: !9481, file: !3, line: 5214, column: 11)
!9532 = !DILocation(line: 5215, column: 4, scope: !9531)
!9533 = !DILocation(line: 5215, column: 13, scope: !9531)
!9534 = !DILocation(line: 5215, column: 19, scope: !9531)
!9535 = !DILocation(line: 5216, column: 4, scope: !9531)
!9536 = !DILocation(line: 5216, column: 7, scope: !9531)
!9537 = !DILocation(line: 5216, column: 31, scope: !9531)
!9538 = !DILocation(line: 5214, column: 11, scope: !9481)
!9539 = !DILocation(line: 5217, column: 2, scope: !9531)
!9540 = !DILocation(line: 5221, column: 17, scope: !9541)
!9541 = distinct !DILexicalBlock(scope: !9531, file: !3, line: 5221, column: 16)
!9542 = !DILocation(line: 5222, column: 9, scope: !9541)
!9543 = !DILocation(line: 5222, column: 19, scope: !9541)
!9544 = !DILocation(line: 5222, column: 25, scope: !9541)
!9545 = !DILocation(line: 5223, column: 6, scope: !9541)
!9546 = !DILocation(line: 5223, column: 10, scope: !9541)
!9547 = !DILocation(line: 5221, column: 16, scope: !9531)
!9548 = !DILocation(line: 5224, column: 2, scope: !9541)
!9549 = !DILocation(line: 5228, column: 39, scope: !9541)
!9550 = !DILocation(line: 5228, column: 2, scope: !9541)
!9551 = !DILocation(line: 5229, column: 5, scope: !9481)
!9552 = !DILocation(line: 5182, column: 11, scope: !9478)
!9553 = !DILocation(line: 5182, column: 35, scope: !9478)
!9554 = !DILocation(line: 5182, column: 29, scope: !9478)
!9555 = !DILocation(line: 5182, column: 43, scope: !9478)
!9556 = !DILocation(line: 5182, column: 21, scope: !9478)
!9557 = !DILocation(line: 5182, column: 27, scope: !9478)
!9558 = !DILocation(line: 5180, column: 3, scope: !9478)
!9559 = distinct !{!9559, !9479, !9560}
!9560 = !DILocation(line: 5229, column: 5, scope: !9475)
!9561 = !DILocation(line: 5233, column: 7, scope: !9562)
!9562 = distinct !DILexicalBlock(scope: !9388, file: !3, line: 5233, column: 7)
!9563 = !DILocation(line: 5233, column: 7, scope: !9388)
!9564 = !DILocation(line: 5234, column: 25, scope: !9562)
!9565 = !DILocation(line: 5234, column: 5, scope: !9562)
!9566 = !DILocation(line: 5234, column: 12, scope: !9562)
!9567 = !DILocation(line: 5234, column: 17, scope: !9562)
!9568 = !DILocation(line: 5237, column: 17, scope: !9569)
!9569 = distinct !DILexicalBlock(scope: !9570, file: !3, line: 5237, column: 11)
!9570 = distinct !DILexicalBlock(scope: !9562, file: !3, line: 5236, column: 5)
!9571 = !DILocation(line: 5237, column: 11, scope: !9569)
!9572 = !DILocation(line: 5237, column: 11, scope: !9570)
!9573 = !DILocation(line: 5239, column: 22, scope: !9574)
!9574 = distinct !DILexicalBlock(scope: !9569, file: !3, line: 5238, column: 2)
!9575 = !DILocation(line: 5239, column: 4, scope: !9574)
!9576 = !DILocation(line: 5240, column: 10, scope: !9574)
!9577 = !DILocation(line: 5240, column: 21, scope: !9574)
!9578 = !DILocation(line: 5241, column: 2, scope: !9574)
!9579 = !DILocation(line: 5243, column: 41, scope: !9580)
!9580 = distinct !DILexicalBlock(scope: !9570, file: !3, line: 5243, column: 11)
!9581 = !DILocation(line: 5243, column: 61, scope: !9580)
!9582 = !DILocation(line: 5243, column: 53, scope: !9580)
!9583 = !DILocation(line: 5243, column: 11, scope: !9570)
!9584 = !DILocation(line: 5245, column: 26, scope: !9585)
!9585 = distinct !DILexicalBlock(scope: !9580, file: !3, line: 5244, column: 2)
!9586 = !DILocation(line: 5245, column: 39, scope: !9585)
!9587 = !DILocation(line: 5245, column: 31, scope: !9585)
!9588 = !DILocation(line: 5245, column: 4, scope: !9585)
!9589 = !DILocation(line: 5246, column: 30, scope: !9585)
!9590 = !DILocation(line: 5246, column: 10, scope: !9585)
!9591 = !DILocation(line: 5246, column: 22, scope: !9585)
!9592 = !DILocation(line: 5247, column: 2, scope: !9585)
!9593 = !DILocation(line: 5250, column: 16, scope: !9388)
!9594 = !DILocation(line: 5250, column: 3, scope: !9388)
!9595 = distinct !DISubprogram(name: "merge_weak", scope: !3, file: !3, line: 5270, type: !4228, scopeLine: 5271, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9596 = !DILocalVariable(name: "newdecl", arg: 1, scope: !9595, file: !3, line: 5270, type: !2702)
!9597 = !DILocation(line: 5270, column: 18, scope: !9595)
!9598 = !DILocalVariable(name: "olddecl", arg: 2, scope: !9595, file: !3, line: 5270, type: !2702)
!9599 = !DILocation(line: 5270, column: 32, scope: !9595)
!9600 = !DILocation(line: 5272, column: 7, scope: !9601)
!9601 = distinct !DILexicalBlock(scope: !9595, file: !3, line: 5272, column: 7)
!9602 = !DILocation(line: 5272, column: 30, scope: !9601)
!9603 = !DILocation(line: 5272, column: 27, scope: !9601)
!9604 = !DILocation(line: 5272, column: 7, scope: !9595)
!9605 = !DILocation(line: 5274, column: 11, scope: !9606)
!9606 = distinct !DILexicalBlock(scope: !9607, file: !3, line: 5274, column: 11)
!9607 = distinct !DILexicalBlock(scope: !9601, file: !3, line: 5273, column: 5)
!9608 = !DILocation(line: 5274, column: 11, scope: !9607)
!9609 = !DILocalVariable(name: "pwd", scope: !9610, file: !3, line: 5276, type: !3499)
!9610 = distinct !DILexicalBlock(scope: !9606, file: !3, line: 5275, column: 9)
!9611 = !DILocation(line: 5276, column: 17, scope: !9610)
!9612 = !DILocation(line: 5279, column: 13, scope: !9613)
!9613 = distinct !DILexicalBlock(scope: !9610, file: !3, line: 5279, column: 4)
!9614 = !DILocation(line: 5279, column: 9, scope: !9613)
!9615 = !DILocation(line: 5279, column: 29, scope: !9616)
!9616 = distinct !DILexicalBlock(scope: !9613, file: !3, line: 5279, column: 4)
!9617 = !DILocation(line: 5279, column: 28, scope: !9616)
!9618 = !DILocation(line: 5279, column: 4, scope: !9613)
!9619 = !DILocation(line: 5280, column: 10, scope: !9620)
!9620 = distinct !DILexicalBlock(scope: !9616, file: !3, line: 5280, column: 10)
!9621 = !DILocation(line: 5280, column: 31, scope: !9620)
!9622 = !DILocation(line: 5280, column: 28, scope: !9620)
!9623 = !DILocation(line: 5280, column: 10, scope: !9616)
!9624 = !DILocation(line: 5282, column: 17, scope: !9625)
!9625 = distinct !DILexicalBlock(scope: !9620, file: !3, line: 5281, column: 8)
!9626 = !DILocation(line: 5282, column: 11, scope: !9625)
!9627 = !DILocation(line: 5282, column: 15, scope: !9625)
!9628 = !DILocation(line: 5283, column: 3, scope: !9625)
!9629 = !DILocation(line: 5279, column: 41, scope: !9616)
!9630 = !DILocation(line: 5279, column: 38, scope: !9616)
!9631 = !DILocation(line: 5279, column: 4, scope: !9616)
!9632 = distinct !{!9632, !9618, !9633}
!9633 = !DILocation(line: 5284, column: 8, scope: !9613)
!9634 = !DILocation(line: 5285, column: 9, scope: !9610)
!9635 = !DILocation(line: 5286, column: 7, scope: !9607)
!9636 = !DILocation(line: 5289, column: 7, scope: !9637)
!9637 = distinct !DILexicalBlock(scope: !9595, file: !3, line: 5289, column: 7)
!9638 = !DILocation(line: 5289, column: 7, scope: !9595)
!9639 = !DILocalVariable(name: "wd", scope: !9640, file: !3, line: 5291, type: !2702)
!9640 = distinct !DILexicalBlock(scope: !9637, file: !3, line: 5290, column: 5)
!9641 = !DILocation(line: 5291, column: 12, scope: !9640)
!9642 = !DILocation(line: 5299, column: 11, scope: !9643)
!9643 = distinct !DILexicalBlock(scope: !9640, file: !3, line: 5299, column: 11)
!9644 = !DILocation(line: 5299, column: 11, scope: !9640)
!9645 = !DILocation(line: 5301, column: 9, scope: !9643)
!9646 = !DILocation(line: 5300, column: 2, scope: !9643)
!9647 = !DILocation(line: 5306, column: 16, scope: !9648)
!9648 = distinct !DILexicalBlock(scope: !9643, file: !3, line: 5306, column: 16)
!9649 = !DILocation(line: 5307, column: 9, scope: !9648)
!9650 = !DILocation(line: 5307, column: 12, scope: !9648)
!9651 = !DILocation(line: 5306, column: 16, scope: !9643)
!9652 = !DILocation(line: 5309, column: 45, scope: !9648)
!9653 = !DILocation(line: 5308, column: 2, scope: !9648)
!9654 = !DILocation(line: 5315, column: 14, scope: !9655)
!9655 = distinct !DILexicalBlock(scope: !9656, file: !3, line: 5315, column: 4)
!9656 = distinct !DILexicalBlock(scope: !9657, file: !3, line: 5312, column: 2)
!9657 = distinct !DILexicalBlock(scope: !9640, file: !3, line: 5311, column: 11)
!9658 = !DILocation(line: 5315, column: 12, scope: !9655)
!9659 = !DILocation(line: 5315, column: 9, scope: !9655)
!9660 = !DILocation(line: 5315, column: 26, scope: !9661)
!9661 = distinct !DILexicalBlock(scope: !9655, file: !3, line: 5315, column: 4)
!9662 = !DILocation(line: 5315, column: 4, scope: !9655)
!9663 = !DILocation(line: 5316, column: 10, scope: !9664)
!9664 = distinct !DILexicalBlock(scope: !9661, file: !3, line: 5316, column: 10)
!9665 = !DILocation(line: 5316, column: 29, scope: !9664)
!9666 = !DILocation(line: 5316, column: 26, scope: !9664)
!9667 = !DILocation(line: 5316, column: 10, scope: !9661)
!9668 = !DILocation(line: 5318, column: 21, scope: !9669)
!9669 = distinct !DILexicalBlock(scope: !9664, file: !3, line: 5317, column: 8)
!9670 = !DILocation(line: 5318, column: 3, scope: !9669)
!9671 = !DILocation(line: 5318, column: 19, scope: !9669)
!9672 = !DILocation(line: 5319, column: 3, scope: !9669)
!9673 = !DILocation(line: 5315, column: 35, scope: !9661)
!9674 = !DILocation(line: 5315, column: 33, scope: !9661)
!9675 = !DILocation(line: 5315, column: 4, scope: !9661)
!9676 = distinct !{!9676, !9662, !9677}
!9677 = !DILocation(line: 5320, column: 8, scope: !9655)
!9678 = !DILocation(line: 5328, column: 18, scope: !9640)
!9679 = !DILocation(line: 5328, column: 7, scope: !9640)
!9680 = !DILocation(line: 5329, column: 5, scope: !9640)
!9681 = !DILocation(line: 5333, column: 16, scope: !9637)
!9682 = !DILocation(line: 5333, column: 5, scope: !9637)
!9683 = !DILocation(line: 5334, column: 1, scope: !9595)
!9684 = distinct !DISubprogram(name: "mark_weak", scope: !3, file: !3, line: 5256, type: !5044, scopeLine: 5257, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9685 = !DILocalVariable(name: "decl", arg: 1, scope: !9684, file: !3, line: 5256, type: !2702)
!9686 = !DILocation(line: 5256, column: 17, scope: !9684)
!9687 = !DILocation(line: 5258, column: 3, scope: !9684)
!9688 = !DILocation(line: 5258, column: 20, scope: !9684)
!9689 = !DILocation(line: 5260, column: 7, scope: !9690)
!9690 = distinct !DILexicalBlock(scope: !9684, file: !3, line: 5260, column: 7)
!9691 = !DILocation(line: 5261, column: 7, scope: !9690)
!9692 = !DILocation(line: 5261, column: 10, scope: !9690)
!9693 = !DILocation(line: 5262, column: 7, scope: !9690)
!9694 = !DILocation(line: 5262, column: 10, scope: !9690)
!9695 = !DILocation(line: 5263, column: 7, scope: !9690)
!9696 = !DILocation(line: 5263, column: 10, scope: !9690)
!9697 = !DILocation(line: 5263, column: 47, scope: !9690)
!9698 = !DILocation(line: 5260, column: 7, scope: !9684)
!9699 = !DILocation(line: 5264, column: 5, scope: !9690)
!9700 = !DILocation(line: 5264, column: 49, scope: !9690)
!9701 = !DILocation(line: 5265, column: 1, scope: !9684)
!9702 = distinct !DISubprogram(name: "declare_weak", scope: !3, file: !3, line: 5339, type: !5044, scopeLine: 5340, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9703 = !DILocalVariable(name: "decl", arg: 1, scope: !9702, file: !3, line: 5339, type: !2702)
!9704 = !DILocation(line: 5339, column: 20, scope: !9702)
!9705 = !DILocation(line: 5341, column: 9, scope: !9706)
!9706 = distinct !DILexicalBlock(scope: !9702, file: !3, line: 5341, column: 7)
!9707 = !DILocation(line: 5341, column: 7, scope: !9702)
!9708 = !DILocation(line: 5342, column: 55, scope: !9706)
!9709 = !DILocation(line: 5342, column: 5, scope: !9706)
!9710 = !DILocation(line: 5343, column: 12, scope: !9711)
!9711 = distinct !DILexicalBlock(scope: !9706, file: !3, line: 5343, column: 12)
!9712 = !DILocation(line: 5343, column: 29, scope: !9711)
!9713 = !DILocation(line: 5343, column: 46, scope: !9711)
!9714 = !DILocation(line: 5343, column: 49, scope: !9711)
!9715 = !DILocation(line: 5343, column: 12, scope: !9706)
!9716 = !DILocation(line: 5344, column: 64, scope: !9711)
!9717 = !DILocation(line: 5344, column: 5, scope: !9711)
!9718 = !DILocation(line: 5348, column: 14, scope: !9702)
!9719 = !DILocation(line: 5348, column: 3, scope: !9702)
!9720 = !DILocation(line: 5349, column: 34, scope: !9721)
!9721 = distinct !DILexicalBlock(scope: !9702, file: !3, line: 5349, column: 7)
!9722 = !DILocation(line: 5349, column: 8, scope: !9721)
!9723 = !DILocation(line: 5349, column: 7, scope: !9702)
!9724 = !DILocation(line: 5351, column: 9, scope: !9721)
!9725 = !DILocation(line: 5350, column: 5, scope: !9721)
!9726 = !DILocation(line: 5351, column: 7, scope: !9721)
!9727 = !DILocation(line: 5352, column: 1, scope: !9702)
!9728 = distinct !DISubprogram(name: "weak_finish", scope: !3, file: !3, line: 5395, type: !4245, scopeLine: 5396, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9729 = !DILocalVariable(name: "t", scope: !9728, file: !3, line: 5397, type: !2702)
!9730 = !DILocation(line: 5397, column: 8, scope: !9728)
!9731 = !DILocation(line: 5399, column: 12, scope: !9732)
!9732 = distinct !DILexicalBlock(scope: !9728, file: !3, line: 5399, column: 3)
!9733 = !DILocation(line: 5399, column: 10, scope: !9732)
!9734 = !DILocation(line: 5399, column: 8, scope: !9732)
!9735 = !DILocation(line: 5399, column: 29, scope: !9736)
!9736 = distinct !DILexicalBlock(scope: !9732, file: !3, line: 5399, column: 3)
!9737 = !DILocation(line: 5399, column: 3, scope: !9732)
!9738 = !DILocalVariable(name: "alias_decl", scope: !9739, file: !3, line: 5401, type: !2702)
!9739 = distinct !DILexicalBlock(scope: !9736, file: !3, line: 5400, column: 5)
!9740 = !DILocation(line: 5401, column: 12, scope: !9739)
!9741 = !DILocation(line: 5401, column: 25, scope: !9739)
!9742 = !DILocalVariable(name: "target", scope: !9739, file: !3, line: 5402, type: !2702)
!9743 = !DILocation(line: 5402, column: 12, scope: !9739)
!9744 = !DILocation(line: 5402, column: 57, scope: !9739)
!9745 = !DILocation(line: 5402, column: 21, scope: !9739)
!9746 = !DILocation(line: 5404, column: 13, scope: !9747)
!9747 = distinct !DILexicalBlock(scope: !9739, file: !3, line: 5404, column: 11)
!9748 = !DILocation(line: 5404, column: 11, scope: !9739)
!9749 = !DILocation(line: 5407, column: 9, scope: !9747)
!9750 = !DILocation(line: 5407, column: 2, scope: !9747)
!9751 = !DILocalVariable(name: "p", scope: !9752, file: !3, line: 5438, type: !3499)
!9752 = distinct !DILexicalBlock(scope: !9739, file: !3, line: 5437, column: 7)
!9753 = !DILocation(line: 5438, column: 8, scope: !9752)
!9754 = !DILocalVariable(name: "t2", scope: !9752, file: !3, line: 5439, type: !2702)
!9755 = !DILocation(line: 5439, column: 7, scope: !9752)
!9756 = !DILocation(line: 5444, column: 9, scope: !9757)
!9757 = distinct !DILexicalBlock(scope: !9752, file: !3, line: 5444, column: 2)
!9758 = !DILocation(line: 5444, column: 7, scope: !9757)
!9759 = !DILocation(line: 5444, column: 31, scope: !9760)
!9760 = distinct !DILexicalBlock(scope: !9757, file: !3, line: 5444, column: 2)
!9761 = !DILocation(line: 5444, column: 30, scope: !9760)
!9762 = !DILocation(line: 5444, column: 28, scope: !9760)
!9763 = !DILocation(line: 5444, column: 2, scope: !9757)
!9764 = !DILocation(line: 5446, column: 10, scope: !9765)
!9765 = distinct !DILexicalBlock(scope: !9766, file: !3, line: 5446, column: 10)
!9766 = distinct !DILexicalBlock(scope: !9760, file: !3, line: 5445, column: 4)
!9767 = !DILocation(line: 5446, column: 29, scope: !9765)
!9768 = !DILocation(line: 5446, column: 26, scope: !9765)
!9769 = !DILocation(line: 5447, column: 3, scope: !9765)
!9770 = !DILocation(line: 5447, column: 6, scope: !9765)
!9771 = !DILocation(line: 5447, column: 16, scope: !9765)
!9772 = !DILocation(line: 5447, column: 13, scope: !9765)
!9773 = !DILocation(line: 5446, column: 10, scope: !9766)
!9774 = !DILocation(line: 5448, column: 13, scope: !9765)
!9775 = !DILocation(line: 5448, column: 9, scope: !9765)
!9776 = !DILocation(line: 5448, column: 11, scope: !9765)
!9777 = !DILocation(line: 5448, column: 8, scope: !9765)
!9778 = !DILocation(line: 5450, column: 13, scope: !9765)
!9779 = !DILocation(line: 5450, column: 10, scope: !9765)
!9780 = !DILocation(line: 5444, column: 2, scope: !9760)
!9781 = distinct !{!9781, !9763, !9782}
!9782 = !DILocation(line: 5451, column: 4, scope: !9757)
!9783 = !DILocation(line: 5454, column: 12, scope: !9784)
!9784 = distinct !DILexicalBlock(scope: !9752, file: !3, line: 5454, column: 2)
!9785 = !DILocation(line: 5454, column: 9, scope: !9784)
!9786 = !DILocation(line: 5454, column: 7, scope: !9784)
!9787 = !DILocation(line: 5454, column: 35, scope: !9788)
!9788 = distinct !DILexicalBlock(scope: !9784, file: !3, line: 5454, column: 2)
!9789 = !DILocation(line: 5454, column: 34, scope: !9788)
!9790 = !DILocation(line: 5454, column: 32, scope: !9788)
!9791 = !DILocation(line: 5454, column: 2, scope: !9784)
!9792 = !DILocation(line: 5456, column: 10, scope: !9793)
!9793 = distinct !DILexicalBlock(scope: !9794, file: !3, line: 5456, column: 10)
!9794 = distinct !DILexicalBlock(scope: !9788, file: !3, line: 5455, column: 4)
!9795 = !DILocation(line: 5456, column: 56, scope: !9793)
!9796 = !DILocation(line: 5456, column: 20, scope: !9793)
!9797 = !DILocation(line: 5456, column: 17, scope: !9793)
!9798 = !DILocation(line: 5456, column: 10, scope: !9794)
!9799 = !DILocation(line: 5457, column: 13, scope: !9793)
!9800 = !DILocation(line: 5457, column: 9, scope: !9793)
!9801 = !DILocation(line: 5457, column: 11, scope: !9793)
!9802 = !DILocation(line: 5457, column: 8, scope: !9793)
!9803 = !DILocation(line: 5459, column: 13, scope: !9793)
!9804 = !DILocation(line: 5459, column: 10, scope: !9793)
!9805 = !DILocation(line: 5454, column: 2, scope: !9788)
!9806 = distinct !{!9806, !9791, !9807}
!9807 = !DILocation(line: 5460, column: 4, scope: !9784)
!9808 = !DILocation(line: 5462, column: 5, scope: !9739)
!9809 = !DILocation(line: 5399, column: 36, scope: !9736)
!9810 = !DILocation(line: 5399, column: 34, scope: !9736)
!9811 = !DILocation(line: 5399, column: 3, scope: !9736)
!9812 = distinct !{!9812, !9737, !9813}
!9813 = !DILocation(line: 5462, column: 5, scope: !9732)
!9814 = !DILocation(line: 5464, column: 12, scope: !9815)
!9815 = distinct !DILexicalBlock(scope: !9728, file: !3, line: 5464, column: 3)
!9816 = !DILocation(line: 5464, column: 10, scope: !9815)
!9817 = !DILocation(line: 5464, column: 8, scope: !9815)
!9818 = !DILocation(line: 5464, column: 24, scope: !9819)
!9819 = distinct !DILexicalBlock(scope: !9815, file: !3, line: 5464, column: 3)
!9820 = !DILocation(line: 5464, column: 3, scope: !9815)
!9821 = !DILocalVariable(name: "decl", scope: !9822, file: !3, line: 5466, type: !2702)
!9822 = distinct !DILexicalBlock(scope: !9819, file: !3, line: 5465, column: 5)
!9823 = !DILocation(line: 5466, column: 12, scope: !9822)
!9824 = !DILocation(line: 5466, column: 19, scope: !9822)
!9825 = !DILocation(line: 5468, column: 22, scope: !9822)
!9826 = !DILocation(line: 5468, column: 7, scope: !9822)
!9827 = !DILocation(line: 5469, column: 5, scope: !9822)
!9828 = !DILocation(line: 5464, column: 31, scope: !9819)
!9829 = !DILocation(line: 5464, column: 29, scope: !9819)
!9830 = !DILocation(line: 5464, column: 3, scope: !9819)
!9831 = distinct !{!9831, !9820, !9832}
!9832 = !DILocation(line: 5469, column: 5, scope: !9815)
!9833 = !DILocation(line: 5470, column: 1, scope: !9728)
!9834 = distinct !DISubprogram(name: "weak_finish_1", scope: !3, file: !3, line: 5355, type: !5044, scopeLine: 5356, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9835 = !DILocalVariable(name: "decl", arg: 1, scope: !9834, file: !3, line: 5355, type: !2702)
!9836 = !DILocation(line: 5355, column: 21, scope: !9834)
!9837 = !DILocalVariable(name: "name", scope: !9834, file: !3, line: 5358, type: !3843)
!9838 = !DILocation(line: 5358, column: 21, scope: !9834)
!9839 = !DILocation(line: 5358, column: 28, scope: !9834)
!9840 = !DILocation(line: 5361, column: 9, scope: !9841)
!9841 = distinct !DILexicalBlock(scope: !9834, file: !3, line: 5361, column: 7)
!9842 = !DILocation(line: 5361, column: 7, scope: !9834)
!9843 = !DILocation(line: 5362, column: 5, scope: !9841)
!9844 = !DILocation(line: 5368, column: 3, scope: !9834)
!9845 = !DILocation(line: 5368, column: 3, scope: !9846)
!9846 = distinct !DILexicalBlock(scope: !9834, file: !3, line: 5368, column: 3)
!9847 = !DILocation(line: 5383, column: 1, scope: !9834)
!9848 = distinct !DISubprogram(name: "remove_unreachable_alias_pairs", scope: !3, file: !3, line: 5665, type: !4245, scopeLine: 5666, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9849 = !DILocalVariable(name: "i", scope: !9848, file: !3, line: 5667, type: !7)
!9850 = !DILocation(line: 5667, column: 12, scope: !9848)
!9851 = !DILocalVariable(name: "p", scope: !9848, file: !3, line: 5668, type: !9852)
!9852 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3819, size: 64)
!9853 = !DILocation(line: 5668, column: 15, scope: !9848)
!9854 = !DILocation(line: 5670, column: 7, scope: !9855)
!9855 = distinct !DILexicalBlock(scope: !9848, file: !3, line: 5670, column: 7)
!9856 = !DILocation(line: 5670, column: 19, scope: !9855)
!9857 = !DILocation(line: 5670, column: 7, scope: !9848)
!9858 = !DILocation(line: 5671, column: 5, scope: !9855)
!9859 = !DILocation(line: 5673, column: 10, scope: !9860)
!9860 = distinct !DILexicalBlock(scope: !9848, file: !3, line: 5673, column: 3)
!9861 = !DILocation(line: 5673, column: 8, scope: !9860)
!9862 = !DILocation(line: 5673, column: 15, scope: !9863)
!9863 = distinct !DILexicalBlock(scope: !9860, file: !3, line: 5673, column: 3)
!9864 = !DILocation(line: 5673, column: 3, scope: !9860)
!9865 = !DILocation(line: 5675, column: 12, scope: !9866)
!9866 = distinct !DILexicalBlock(scope: !9867, file: !3, line: 5675, column: 11)
!9867 = distinct !DILexicalBlock(scope: !9863, file: !3, line: 5674, column: 5)
!9868 = !DILocation(line: 5675, column: 11, scope: !9867)
!9869 = !DILocalVariable(name: "fnode", scope: !9870, file: !3, line: 5677, type: !7255)
!9870 = distinct !DILexicalBlock(scope: !9866, file: !3, line: 5676, column: 2)
!9871 = !DILocation(line: 5677, column: 24, scope: !9870)
!9872 = !DILocalVariable(name: "vnode", scope: !9870, file: !3, line: 5678, type: !7423)
!9873 = !DILocation(line: 5678, column: 25, scope: !9870)
!9874 = !DILocation(line: 5679, column: 33, scope: !9870)
!9875 = !DILocation(line: 5679, column: 36, scope: !9870)
!9876 = !DILocation(line: 5679, column: 12, scope: !9870)
!9877 = !DILocation(line: 5679, column: 10, scope: !9870)
!9878 = !DILocation(line: 5680, column: 13, scope: !9870)
!9879 = !DILocation(line: 5680, column: 19, scope: !9870)
!9880 = !DILocation(line: 5680, column: 12, scope: !9870)
!9881 = !DILocation(line: 5680, column: 52, scope: !9870)
!9882 = !DILocation(line: 5680, column: 55, scope: !9870)
!9883 = !DILocation(line: 5680, column: 30, scope: !9870)
!9884 = !DILocation(line: 5680, column: 10, scope: !9870)
!9885 = !DILocation(line: 5681, column: 8, scope: !9886)
!9886 = distinct !DILexicalBlock(scope: !9870, file: !3, line: 5681, column: 8)
!9887 = !DILocation(line: 5681, column: 14, scope: !9886)
!9888 = !DILocation(line: 5681, column: 22, scope: !9886)
!9889 = !DILocation(line: 5681, column: 25, scope: !9886)
!9890 = !DILocation(line: 5681, column: 31, scope: !9886)
!9891 = !DILocation(line: 5681, column: 8, scope: !9870)
!9892 = !DILocation(line: 5683, column: 8, scope: !9893)
!9893 = distinct !DILexicalBlock(scope: !9886, file: !3, line: 5682, column: 6)
!9894 = !DILocation(line: 5684, column: 8, scope: !9893)
!9895 = distinct !{!9895, !9864, !9896}
!9896 = !DILocation(line: 5689, column: 5, scope: !9860)
!9897 = !DILocation(line: 5686, column: 2, scope: !9870)
!9898 = !DILocation(line: 5688, column: 8, scope: !9867)
!9899 = !DILocation(line: 5673, column: 3, scope: !9863)
!9900 = !DILocation(line: 5690, column: 1, scope: !9848)
!9901 = distinct !DISubprogram(name: "VEC_alias_pair_base_iterate", scope: !151, file: !151, line: 197, type: !9902, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9902 = !DISubroutineType(types: !9903)
!9903 = !{!2798, !9904, !7, !9905}
!9904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3812, size: 64)
!9905 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9852, size: 64)
!9906 = !DILocalVariable(name: "vec_", arg: 1, scope: !9901, file: !151, line: 197, type: !9904)
!9907 = !DILocation(line: 197, column: 1, scope: !9901)
!9908 = !DILocalVariable(name: "ix_", arg: 2, scope: !9901, file: !151, line: 197, type: !7)
!9909 = !DILocalVariable(name: "ptr", arg: 3, scope: !9901, file: !151, line: 197, type: !9905)
!9910 = !DILocation(line: 197, column: 1, scope: !9911)
!9911 = distinct !DILexicalBlock(scope: !9901, file: !151, line: 197, column: 1)
!9912 = !DILocation(line: 197, column: 1, scope: !9913)
!9913 = distinct !DILexicalBlock(scope: !9911, file: !151, line: 197, column: 1)
!9914 = !DILocation(line: 197, column: 1, scope: !9915)
!9915 = distinct !DILexicalBlock(scope: !9911, file: !151, line: 197, column: 1)
!9916 = distinct !DISubprogram(name: "VEC_alias_pair_base_unordered_remove", scope: !151, file: !151, line: 197, type: !9917, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9917 = !DISubroutineType(types: !9918)
!9918 = !{null, !9904, !7}
!9919 = !DILocalVariable(name: "vec_", arg: 1, scope: !9916, file: !151, line: 197, type: !9904)
!9920 = !DILocation(line: 197, column: 1, scope: !9916)
!9921 = !DILocalVariable(name: "ix_", arg: 2, scope: !9916, file: !151, line: 197, type: !7)
!9922 = distinct !DISubprogram(name: "finish_aliases_1", scope: !3, file: !3, line: 5697, type: !4245, scopeLine: 5698, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9923 = !DILocalVariable(name: "i", scope: !9922, file: !3, line: 5699, type: !7)
!9924 = !DILocation(line: 5699, column: 12, scope: !9922)
!9925 = !DILocalVariable(name: "p", scope: !9922, file: !3, line: 5700, type: !9852)
!9926 = !DILocation(line: 5700, column: 15, scope: !9922)
!9927 = !DILocation(line: 5702, column: 10, scope: !9928)
!9928 = distinct !DILexicalBlock(scope: !9922, file: !3, line: 5702, column: 3)
!9929 = !DILocation(line: 5702, column: 8, scope: !9928)
!9930 = !DILocation(line: 5702, column: 15, scope: !9931)
!9931 = distinct !DILexicalBlock(scope: !9928, file: !3, line: 5702, column: 3)
!9932 = !DILocation(line: 5702, column: 3, scope: !9928)
!9933 = !DILocalVariable(name: "target_decl", scope: !9934, file: !3, line: 5704, type: !2702)
!9934 = distinct !DILexicalBlock(scope: !9931, file: !3, line: 5703, column: 5)
!9935 = !DILocation(line: 5704, column: 12, scope: !9934)
!9936 = !DILocation(line: 5706, column: 48, scope: !9934)
!9937 = !DILocation(line: 5706, column: 51, scope: !9934)
!9938 = !DILocation(line: 5706, column: 57, scope: !9934)
!9939 = !DILocation(line: 5706, column: 60, scope: !9934)
!9940 = !DILocation(line: 5706, column: 21, scope: !9934)
!9941 = !DILocation(line: 5706, column: 19, scope: !9934)
!9942 = !DILocation(line: 5707, column: 11, scope: !9943)
!9943 = distinct !DILexicalBlock(scope: !9934, file: !3, line: 5707, column: 11)
!9944 = !DILocation(line: 5707, column: 23, scope: !9943)
!9945 = !DILocation(line: 5707, column: 11, scope: !9934)
!9946 = !DILocation(line: 5709, column: 39, scope: !9947)
!9947 = distinct !DILexicalBlock(scope: !9948, file: !3, line: 5709, column: 8)
!9948 = distinct !DILexicalBlock(scope: !9943, file: !3, line: 5708, column: 2)
!9949 = !DILocation(line: 5709, column: 10, scope: !9947)
!9950 = !DILocation(line: 5709, column: 8, scope: !9948)
!9951 = !DILocation(line: 5711, column: 6, scope: !9947)
!9952 = !DILocation(line: 5711, column: 9, scope: !9947)
!9953 = !DILocation(line: 5711, column: 15, scope: !9947)
!9954 = !DILocation(line: 5711, column: 18, scope: !9947)
!9955 = !DILocation(line: 5710, column: 6, scope: !9947)
!9956 = !DILocation(line: 5712, column: 2, scope: !9948)
!9957 = !DILocation(line: 5713, column: 16, scope: !9958)
!9958 = distinct !DILexicalBlock(scope: !9943, file: !3, line: 5713, column: 16)
!9959 = !DILocation(line: 5718, column: 10, scope: !9958)
!9960 = !DILocation(line: 5718, column: 14, scope: !9958)
!9961 = !DILocation(line: 5718, column: 38, scope: !9958)
!9962 = !DILocation(line: 5722, column: 7, scope: !9958)
!9963 = !DILocation(line: 5722, column: 12, scope: !9958)
!9964 = !DILocation(line: 5723, column: 9, scope: !9958)
!9965 = !DILocation(line: 5723, column: 43, scope: !9958)
!9966 = !DILocation(line: 5723, column: 14, scope: !9958)
!9967 = !DILocation(line: 5713, column: 16, scope: !9943)
!9968 = !DILocation(line: 5725, column: 9, scope: !9958)
!9969 = !DILocation(line: 5725, column: 12, scope: !9958)
!9970 = !DILocation(line: 5725, column: 18, scope: !9958)
!9971 = !DILocation(line: 5725, column: 21, scope: !9958)
!9972 = !DILocation(line: 5724, column: 2, scope: !9958)
!9973 = !DILocation(line: 5726, column: 5, scope: !9934)
!9974 = !DILocation(line: 5702, column: 61, scope: !9931)
!9975 = !DILocation(line: 5702, column: 3, scope: !9931)
!9976 = distinct !{!9976, !9932, !9977}
!9977 = !DILocation(line: 5726, column: 5, scope: !9928)
!9978 = !DILocation(line: 5727, column: 1, scope: !9922)
!9979 = distinct !DISubprogram(name: "find_decl_and_mark_needed", scope: !3, file: !3, line: 5524, type: !8630, scopeLine: 5525, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!9980 = !DILocalVariable(name: "decl", arg: 1, scope: !9979, file: !3, line: 5524, type: !2702)
!9981 = !DILocation(line: 5524, column: 33, scope: !9979)
!9982 = !DILocalVariable(name: "target", arg: 2, scope: !9979, file: !3, line: 5524, type: !2702)
!9983 = !DILocation(line: 5524, column: 44, scope: !9979)
!9984 = !DILocalVariable(name: "fnode", scope: !9979, file: !3, line: 5526, type: !7255)
!9985 = !DILocation(line: 5526, column: 23, scope: !9979)
!9986 = !DILocalVariable(name: "vnode", scope: !9979, file: !3, line: 5527, type: !7423)
!9987 = !DILocation(line: 5527, column: 24, scope: !9979)
!9988 = !DILocation(line: 5529, column: 7, scope: !9989)
!9989 = distinct !DILexicalBlock(scope: !9979, file: !3, line: 5529, column: 7)
!9990 = !DILocation(line: 5529, column: 24, scope: !9989)
!9991 = !DILocation(line: 5529, column: 7, scope: !9979)
!9992 = !DILocation(line: 5531, column: 36, scope: !9993)
!9993 = distinct !DILexicalBlock(scope: !9989, file: !3, line: 5530, column: 5)
!9994 = !DILocation(line: 5531, column: 15, scope: !9993)
!9995 = !DILocation(line: 5531, column: 13, scope: !9993)
!9996 = !DILocation(line: 5532, column: 11, scope: !9997)
!9997 = distinct !DILexicalBlock(scope: !9993, file: !3, line: 5532, column: 11)
!9998 = !DILocation(line: 5532, column: 17, scope: !9997)
!9999 = !DILocation(line: 5532, column: 11, scope: !9993)
!10000 = !DILocation(line: 5533, column: 32, scope: !9997)
!10001 = !DILocation(line: 5533, column: 10, scope: !9997)
!10002 = !DILocation(line: 5533, column: 8, scope: !9997)
!10003 = !DILocation(line: 5533, column: 2, scope: !9997)
!10004 = !DILocation(line: 5534, column: 5, scope: !9993)
!10005 = !DILocation(line: 5537, column: 37, scope: !10006)
!10006 = distinct !DILexicalBlock(scope: !9989, file: !3, line: 5536, column: 5)
!10007 = !DILocation(line: 5537, column: 15, scope: !10006)
!10008 = !DILocation(line: 5537, column: 13, scope: !10006)
!10009 = !DILocation(line: 5538, column: 11, scope: !10010)
!10010 = distinct !DILexicalBlock(scope: !10006, file: !3, line: 5538, column: 11)
!10011 = !DILocation(line: 5538, column: 17, scope: !10010)
!10012 = !DILocation(line: 5538, column: 11, scope: !10006)
!10013 = !DILocation(line: 5539, column: 31, scope: !10010)
!10014 = !DILocation(line: 5539, column: 10, scope: !10010)
!10015 = !DILocation(line: 5539, column: 8, scope: !10010)
!10016 = !DILocation(line: 5539, column: 2, scope: !10010)
!10017 = !DILocation(line: 5542, column: 7, scope: !10018)
!10018 = distinct !DILexicalBlock(scope: !9979, file: !3, line: 5542, column: 7)
!10019 = !DILocation(line: 5542, column: 7, scope: !9979)
!10020 = !DILocation(line: 5544, column: 32, scope: !10021)
!10021 = distinct !DILexicalBlock(scope: !10018, file: !3, line: 5543, column: 5)
!10022 = !DILocation(line: 5544, column: 7, scope: !10021)
!10023 = !DILocation(line: 5545, column: 14, scope: !10021)
!10024 = !DILocation(line: 5545, column: 21, scope: !10021)
!10025 = !DILocation(line: 5545, column: 7, scope: !10021)
!10026 = !DILocation(line: 5547, column: 12, scope: !10027)
!10027 = distinct !DILexicalBlock(scope: !10018, file: !3, line: 5547, column: 12)
!10028 = !DILocation(line: 5547, column: 12, scope: !10018)
!10029 = !DILocation(line: 5549, column: 33, scope: !10030)
!10030 = distinct !DILexicalBlock(scope: !10027, file: !3, line: 5548, column: 5)
!10031 = !DILocation(line: 5549, column: 7, scope: !10030)
!10032 = !DILocation(line: 5550, column: 14, scope: !10030)
!10033 = !DILocation(line: 5550, column: 21, scope: !10030)
!10034 = !DILocation(line: 5550, column: 7, scope: !10030)
!10035 = !DILocation(line: 5553, column: 5, scope: !10027)
!10036 = !DILocation(line: 5554, column: 1, scope: !9979)
!10037 = distinct !DISubprogram(name: "finish_aliases_2", scope: !3, file: !3, line: 5734, type: !4245, scopeLine: 5735, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10038 = !DILocalVariable(name: "i", scope: !10037, file: !3, line: 5736, type: !7)
!10039 = !DILocation(line: 5736, column: 12, scope: !10037)
!10040 = !DILocalVariable(name: "p", scope: !10037, file: !3, line: 5737, type: !9852)
!10041 = !DILocation(line: 5737, column: 15, scope: !10037)
!10042 = !DILocation(line: 5739, column: 10, scope: !10043)
!10043 = distinct !DILexicalBlock(scope: !10037, file: !3, line: 5739, column: 3)
!10044 = !DILocation(line: 5739, column: 8, scope: !10043)
!10045 = !DILocation(line: 5739, column: 15, scope: !10046)
!10046 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 5739, column: 3)
!10047 = !DILocation(line: 5739, column: 3, scope: !10043)
!10048 = !DILocation(line: 5740, column: 24, scope: !10046)
!10049 = !DILocation(line: 5740, column: 27, scope: !10046)
!10050 = !DILocation(line: 5740, column: 33, scope: !10046)
!10051 = !DILocation(line: 5740, column: 36, scope: !10046)
!10052 = !DILocation(line: 5740, column: 5, scope: !10046)
!10053 = !DILocation(line: 5739, column: 61, scope: !10046)
!10054 = !DILocation(line: 5739, column: 3, scope: !10046)
!10055 = distinct !{!10055, !10047, !10056}
!10056 = !DILocation(line: 5740, column: 42, scope: !10043)
!10057 = !DILocation(line: 5742, column: 3, scope: !10037)
!10058 = !DILocation(line: 5743, column: 1, scope: !10037)
!10059 = distinct !DISubprogram(name: "do_assemble_alias", scope: !3, file: !3, line: 5561, type: !4228, scopeLine: 5562, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10060 = !DILocalVariable(name: "decl", arg: 1, scope: !10059, file: !3, line: 5561, type: !2702)
!10061 = !DILocation(line: 5561, column: 25, scope: !10059)
!10062 = !DILocalVariable(name: "target", arg: 2, scope: !10059, file: !3, line: 5561, type: !2702)
!10063 = !DILocation(line: 5561, column: 36, scope: !10059)
!10064 = !DILocation(line: 5563, column: 7, scope: !10065)
!10065 = distinct !DILexicalBlock(scope: !10059, file: !3, line: 5563, column: 7)
!10066 = !DILocation(line: 5563, column: 7, scope: !10059)
!10067 = !DILocation(line: 5564, column: 5, scope: !10065)
!10068 = !DILocation(line: 5568, column: 18, scope: !10059)
!10069 = !DILocation(line: 5568, column: 3, scope: !10059)
!10070 = !DILocation(line: 5570, column: 3, scope: !10059)
!10071 = !DILocation(line: 5570, column: 27, scope: !10059)
!10072 = !DILocation(line: 5571, column: 3, scope: !10059)
!10073 = !DILocation(line: 5571, column: 49, scope: !10059)
!10074 = !DILocation(line: 5573, column: 36, scope: !10075)
!10075 = distinct !DILexicalBlock(scope: !10059, file: !3, line: 5573, column: 7)
!10076 = !DILocation(line: 5573, column: 7, scope: !10075)
!10077 = !DILocation(line: 5573, column: 7, scope: !10059)
!10078 = !DILocation(line: 5575, column: 7, scope: !10079)
!10079 = distinct !DILexicalBlock(scope: !10075, file: !3, line: 5574, column: 5)
!10080 = !DILocation(line: 5577, column: 20, scope: !10081)
!10081 = distinct !DILexicalBlock(scope: !10079, file: !3, line: 5577, column: 11)
!10082 = !DILocation(line: 5577, column: 12, scope: !10081)
!10083 = !DILocation(line: 5578, column: 4, scope: !10081)
!10084 = !DILocation(line: 5578, column: 7, scope: !10081)
!10085 = !DILocation(line: 5578, column: 24, scope: !10081)
!10086 = !DILocation(line: 5579, column: 4, scope: !10081)
!10087 = !DILocation(line: 5579, column: 7, scope: !10081)
!10088 = !DILocation(line: 5577, column: 11, scope: !10079)
!10089 = !DILocation(line: 5581, column: 24, scope: !10090)
!10090 = distinct !DILexicalBlock(scope: !10081, file: !3, line: 5580, column: 2)
!10091 = !DILocation(line: 5581, column: 11, scope: !10090)
!10092 = !DILocation(line: 5581, column: 9, scope: !10090)
!10093 = !DILocation(line: 5582, column: 37, scope: !10090)
!10094 = !DILocation(line: 5582, column: 13, scope: !10090)
!10095 = !DILocation(line: 5582, column: 11, scope: !10090)
!10096 = !DILocation(line: 5583, column: 2, scope: !10090)
!10097 = !DILocation(line: 5585, column: 12, scope: !10098)
!10098 = distinct !DILexicalBlock(scope: !10079, file: !3, line: 5585, column: 11)
!10099 = !DILocation(line: 5585, column: 11, scope: !10079)
!10100 = !DILocation(line: 5586, column: 20, scope: !10098)
!10101 = !DILocation(line: 5586, column: 18, scope: !10098)
!10102 = !DILocation(line: 5586, column: 2, scope: !10098)
!10103 = !DILocation(line: 5589, column: 7, scope: !10079)
!10104 = !DILocation(line: 5589, column: 7, scope: !10105)
!10105 = distinct !DILexicalBlock(scope: !10079, file: !3, line: 5589, column: 7)
!10106 = !DILocation(line: 5600, column: 7, scope: !10079)
!10107 = !DILocation(line: 5603, column: 16, scope: !10108)
!10108 = distinct !DILexicalBlock(scope: !10059, file: !3, line: 5603, column: 7)
!10109 = !DILocation(line: 5603, column: 8, scope: !10108)
!10110 = !DILocation(line: 5604, column: 7, scope: !10108)
!10111 = !DILocation(line: 5604, column: 10, scope: !10108)
!10112 = !DILocation(line: 5604, column: 27, scope: !10108)
!10113 = !DILocation(line: 5605, column: 7, scope: !10108)
!10114 = !DILocation(line: 5605, column: 10, scope: !10108)
!10115 = !DILocation(line: 5603, column: 7, scope: !10059)
!10116 = !DILocation(line: 5607, column: 27, scope: !10117)
!10117 = distinct !DILexicalBlock(scope: !10108, file: !3, line: 5606, column: 5)
!10118 = !DILocation(line: 5607, column: 14, scope: !10117)
!10119 = !DILocation(line: 5607, column: 12, scope: !10117)
!10120 = !DILocation(line: 5608, column: 40, scope: !10117)
!10121 = !DILocation(line: 5608, column: 16, scope: !10117)
!10122 = !DILocation(line: 5608, column: 14, scope: !10117)
!10123 = !DILocation(line: 5609, column: 5, scope: !10117)
!10124 = !DILocation(line: 5614, column: 7, scope: !10125)
!10125 = distinct !DILexicalBlock(scope: !10059, file: !3, line: 5614, column: 7)
!10126 = !DILocation(line: 5614, column: 7, scope: !10059)
!10127 = !DILocation(line: 5616, column: 23, scope: !10128)
!10128 = distinct !DILexicalBlock(scope: !10125, file: !3, line: 5615, column: 5)
!10129 = !DILocation(line: 5616, column: 7, scope: !10128)
!10130 = !DILocation(line: 5617, column: 34, scope: !10128)
!10131 = !DILocation(line: 5617, column: 7, scope: !10128)
!10132 = !DILocation(line: 5618, column: 5, scope: !10128)
!10133 = !DILocation(line: 5623, column: 3, scope: !10059)
!10134 = !DILocation(line: 5623, column: 3, scope: !10135)
!10135 = distinct !DILexicalBlock(scope: !10059, file: !3, line: 5623, column: 3)
!10136 = !DILocation(line: 5658, column: 1, scope: !10059)
!10137 = distinct !DISubprogram(name: "VEC_alias_pair_base_truncate", scope: !151, file: !151, line: 197, type: !9917, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10138 = !DILocalVariable(name: "vec_", arg: 1, scope: !10137, file: !151, line: 197, type: !9904)
!10139 = !DILocation(line: 197, column: 1, scope: !10137)
!10140 = !DILocalVariable(name: "size_", arg: 2, scope: !10137, file: !151, line: 197, type: !7)
!10141 = !DILocation(line: 197, column: 1, scope: !10142)
!10142 = distinct !DILexicalBlock(scope: !10137, file: !151, line: 197, column: 1)
!10143 = distinct !DISubprogram(name: "assemble_alias", scope: !3, file: !3, line: 5749, type: !4228, scopeLine: 5750, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10144 = !DILocalVariable(name: "decl", arg: 1, scope: !10143, file: !3, line: 5749, type: !2702)
!10145 = !DILocation(line: 5749, column: 22, scope: !10143)
!10146 = !DILocalVariable(name: "target", arg: 2, scope: !10143, file: !3, line: 5749, type: !2702)
!10147 = !DILocation(line: 5749, column: 33, scope: !10143)
!10148 = !DILocalVariable(name: "target_decl", scope: !10143, file: !3, line: 5751, type: !2702)
!10149 = !DILocation(line: 5751, column: 8, scope: !10143)
!10150 = !DILocalVariable(name: "is_weakref", scope: !10143, file: !3, line: 5752, type: !2820)
!10151 = !DILocation(line: 5752, column: 8, scope: !10143)
!10152 = !DILocation(line: 5754, column: 36, scope: !10153)
!10153 = distinct !DILexicalBlock(scope: !10143, file: !3, line: 5754, column: 7)
!10154 = !DILocation(line: 5754, column: 7, scope: !10153)
!10155 = !DILocation(line: 5754, column: 7, scope: !10143)
!10156 = !DILocalVariable(name: "alias", scope: !10157, file: !3, line: 5756, type: !2702)
!10157 = distinct !DILexicalBlock(scope: !10153, file: !3, line: 5755, column: 5)
!10158 = !DILocation(line: 5756, column: 12, scope: !10157)
!10159 = !DILocation(line: 5756, column: 20, scope: !10157)
!10160 = !DILocation(line: 5758, column: 18, scope: !10157)
!10161 = !DILocation(line: 5760, column: 7, scope: !10157)
!10162 = !DILocation(line: 5762, column: 11, scope: !10163)
!10163 = distinct !DILexicalBlock(scope: !10157, file: !3, line: 5762, column: 11)
!10164 = !DILocation(line: 5762, column: 20, scope: !10163)
!10165 = !DILocation(line: 5762, column: 17, scope: !10163)
!10166 = !DILocation(line: 5762, column: 11, scope: !10157)
!10167 = !DILocation(line: 5763, column: 51, scope: !10163)
!10168 = !DILocation(line: 5763, column: 2, scope: !10163)
!10169 = !DILocation(line: 5771, column: 11, scope: !10170)
!10170 = distinct !DILexicalBlock(scope: !10157, file: !3, line: 5771, column: 11)
!10171 = !DILocation(line: 5771, column: 11, scope: !10157)
!10172 = !DILocation(line: 5772, column: 50, scope: !10170)
!10173 = !DILocation(line: 5772, column: 2, scope: !10170)
!10174 = !DILocation(line: 5773, column: 5, scope: !10157)
!10175 = !DILocation(line: 5791, column: 3, scope: !10143)
!10176 = !DILocation(line: 5791, column: 20, scope: !10143)
!10177 = !DILocation(line: 5796, column: 9, scope: !10178)
!10178 = distinct !DILexicalBlock(scope: !10143, file: !3, line: 5796, column: 7)
!10179 = !DILocation(line: 5796, column: 7, scope: !10143)
!10180 = !DILocation(line: 5797, column: 5, scope: !10178)
!10181 = !DILocation(line: 5797, column: 26, scope: !10178)
!10182 = !DILocation(line: 5800, column: 7, scope: !10183)
!10183 = distinct !DILexicalBlock(scope: !10143, file: !3, line: 5800, column: 7)
!10184 = !DILocation(line: 5800, column: 24, scope: !10183)
!10185 = !DILocation(line: 5800, column: 7, scope: !10143)
!10186 = !DILocation(line: 5801, column: 18, scope: !10183)
!10187 = !DILocation(line: 5801, column: 5, scope: !10183)
!10188 = !DILocation(line: 5801, column: 25, scope: !10183)
!10189 = !DILocation(line: 5801, column: 31, scope: !10183)
!10190 = !DILocation(line: 5803, column: 19, scope: !10183)
!10191 = !DILocation(line: 5803, column: 5, scope: !10183)
!10192 = !DILocation(line: 5803, column: 26, scope: !10183)
!10193 = !DILocation(line: 5803, column: 32, scope: !10183)
!10194 = !DILocation(line: 5807, column: 7, scope: !10195)
!10195 = distinct !DILexicalBlock(scope: !10143, file: !3, line: 5807, column: 7)
!10196 = !DILocation(line: 5807, column: 7, scope: !10143)
!10197 = !DILocation(line: 5808, column: 46, scope: !10195)
!10198 = !DILocation(line: 5808, column: 52, scope: !10195)
!10199 = !DILocation(line: 5808, column: 19, scope: !10195)
!10200 = !DILocation(line: 5808, column: 17, scope: !10195)
!10201 = !DILocation(line: 5808, column: 5, scope: !10195)
!10202 = !DILocation(line: 5810, column: 16, scope: !10195)
!10203 = !DILocation(line: 5811, column: 7, scope: !10204)
!10204 = distinct !DILexicalBlock(scope: !10143, file: !3, line: 5811, column: 7)
!10205 = !DILocation(line: 5811, column: 19, scope: !10204)
!10206 = !DILocation(line: 5811, column: 22, scope: !10204)
!10207 = !DILocation(line: 5811, column: 7, scope: !10143)
!10208 = !DILocation(line: 5812, column: 24, scope: !10204)
!10209 = !DILocation(line: 5812, column: 30, scope: !10204)
!10210 = !DILocation(line: 5812, column: 5, scope: !10204)
!10211 = !DILocalVariable(name: "p", scope: !10212, file: !3, line: 5815, type: !9852)
!10212 = distinct !DILexicalBlock(scope: !10204, file: !3, line: 5814, column: 5)
!10213 = !DILocation(line: 5815, column: 19, scope: !10212)
!10214 = !DILocation(line: 5815, column: 23, scope: !10212)
!10215 = !DILocation(line: 5816, column: 17, scope: !10212)
!10216 = !DILocation(line: 5816, column: 7, scope: !10212)
!10217 = !DILocation(line: 5816, column: 10, scope: !10212)
!10218 = !DILocation(line: 5816, column: 15, scope: !10212)
!10219 = !DILocation(line: 5817, column: 19, scope: !10212)
!10220 = !DILocation(line: 5817, column: 7, scope: !10212)
!10221 = !DILocation(line: 5817, column: 10, scope: !10212)
!10222 = !DILocation(line: 5817, column: 17, scope: !10212)
!10223 = !DILocation(line: 5819, column: 1, scope: !10143)
!10224 = distinct !DISubprogram(name: "VEC_alias_pair_gc_safe_push", scope: !151, file: !151, line: 198, type: !10225, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10225 = !DISubroutineType(types: !10226)
!10226 = !{!9852, !10227, !10228}
!10227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3807, size: 64)
!10228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10229, size: 64)
!10229 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3819)
!10230 = !DILocalVariable(name: "vec_", arg: 1, scope: !10224, file: !151, line: 198, type: !10227)
!10231 = !DILocation(line: 198, column: 1, scope: !10224)
!10232 = !DILocalVariable(name: "obj_", arg: 2, scope: !10224, file: !151, line: 198, type: !10228)
!10233 = !DILocalVariable(name: "decl", arg: 1, scope: !3850, file: !3, line: 5825, type: !2702)
!10234 = !DILocation(line: 5825, column: 35, scope: !3850)
!10235 = !DILocalVariable(name: "vis", arg: 2, scope: !3850, file: !3, line: 5825, type: !2798)
!10236 = !DILocation(line: 5825, column: 45, scope: !3850)
!10237 = !DILocalVariable(name: "name", scope: !3850, file: !3, line: 5831, type: !2692)
!10238 = !DILocation(line: 5831, column: 15, scope: !3850)
!10239 = !DILocalVariable(name: "type", scope: !3850, file: !3, line: 5831, type: !2692)
!10240 = !DILocation(line: 5831, column: 22, scope: !3850)
!10241 = !DILocation(line: 5833, column: 10, scope: !3850)
!10242 = !DILocation(line: 5833, column: 8, scope: !3850)
!10243 = !DILocation(line: 5834, column: 27, scope: !3850)
!10244 = !DILocation(line: 5834, column: 10, scope: !3850)
!10245 = !DILocation(line: 5834, column: 8, scope: !3850)
!10246 = !DILocation(line: 5837, column: 12, scope: !3850)
!10247 = !DILocation(line: 5837, column: 37, scope: !3850)
!10248 = !DILocation(line: 5837, column: 3, scope: !3850)
!10249 = !DILocation(line: 5838, column: 18, scope: !3850)
!10250 = !DILocation(line: 5838, column: 32, scope: !3850)
!10251 = !DILocation(line: 5838, column: 3, scope: !3850)
!10252 = !DILocation(line: 5839, column: 12, scope: !3850)
!10253 = !DILocation(line: 5839, column: 3, scope: !3850)
!10254 = !DILocation(line: 5844, column: 1, scope: !3850)
!10255 = distinct !DISubprogram(name: "supports_one_only", scope: !3, file: !3, line: 5868, type: !8444, scopeLine: 5869, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10256 = !DILocation(line: 5871, column: 5, scope: !10257)
!10257 = distinct !DILexicalBlock(scope: !10255, file: !3, line: 5870, column: 7)
!10258 = distinct !DISubprogram(name: "init_varasm_once", scope: !3, file: !3, line: 5904, type: !4245, scopeLine: 5905, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10259 = !DILocation(line: 5906, column: 18, scope: !10258)
!10260 = !DILocation(line: 5906, column: 16, scope: !10258)
!10261 = !DILocation(line: 5908, column: 23, scope: !10258)
!10262 = !DILocation(line: 5908, column: 21, scope: !10258)
!10263 = !DILocation(line: 5910, column: 21, scope: !10258)
!10264 = !DILocation(line: 5910, column: 19, scope: !10258)
!10265 = !DILocation(line: 5913, column: 21, scope: !10258)
!10266 = !DILocation(line: 5913, column: 19, scope: !10258)
!10267 = !DILocation(line: 5914, column: 26, scope: !10258)
!10268 = !DILocation(line: 5914, column: 24, scope: !10258)
!10269 = !DILocation(line: 5917, column: 18, scope: !10258)
!10270 = !DILocation(line: 5917, column: 16, scope: !10258)
!10271 = !DILocation(line: 5922, column: 18, scope: !10258)
!10272 = !DILocation(line: 5922, column: 16, scope: !10258)
!10273 = !DILocation(line: 5932, column: 27, scope: !10258)
!10274 = !DILocation(line: 5932, column: 25, scope: !10258)
!10275 = !DILocation(line: 5947, column: 17, scope: !10258)
!10276 = !DILocation(line: 5947, column: 15, scope: !10258)
!10277 = !DILocation(line: 5958, column: 22, scope: !10258)
!10278 = !DILocation(line: 5958, column: 20, scope: !10258)
!10279 = !DILocation(line: 5960, column: 19, scope: !10258)
!10280 = !DILocation(line: 5960, column: 17, scope: !10258)
!10281 = !DILocation(line: 5962, column: 18, scope: !10258)
!10282 = !DILocation(line: 5962, column: 16, scope: !10258)
!10283 = !DILocation(line: 5966, column: 26, scope: !10258)
!10284 = !DILocation(line: 5966, column: 24, scope: !10258)
!10285 = !DILocation(line: 5970, column: 19, scope: !10258)
!10286 = !DILocation(line: 5970, column: 3, scope: !10258)
!10287 = !DILocation(line: 5972, column: 7, scope: !10288)
!10288 = distinct !DILexicalBlock(scope: !10258, file: !3, line: 5972, column: 7)
!10289 = !DILocation(line: 5972, column: 29, scope: !10288)
!10290 = !DILocation(line: 5972, column: 7, scope: !10258)
!10291 = !DILocation(line: 5973, column: 29, scope: !10288)
!10292 = !DILocation(line: 5973, column: 27, scope: !10288)
!10293 = !DILocation(line: 5973, column: 5, scope: !10288)
!10294 = !DILocation(line: 5974, column: 1, scope: !10258)
!10295 = distinct !DISubprogram(name: "section_entry_hash", scope: !3, file: !3, line: 484, type: !3291, scopeLine: 485, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10296 = !DILocalVariable(name: "p", arg: 1, scope: !10295, file: !3, line: 484, type: !3132)
!10297 = !DILocation(line: 484, column: 33, scope: !10295)
!10298 = !DILocalVariable(name: "old", scope: !10295, file: !3, line: 486, type: !3824)
!10299 = !DILocation(line: 486, column: 18, scope: !10295)
!10300 = !DILocation(line: 486, column: 42, scope: !10295)
!10301 = !DILocation(line: 486, column: 24, scope: !10295)
!10302 = !DILocation(line: 487, column: 28, scope: !10295)
!10303 = !DILocation(line: 487, column: 33, scope: !10295)
!10304 = !DILocation(line: 487, column: 39, scope: !10295)
!10305 = !DILocation(line: 487, column: 10, scope: !10295)
!10306 = !DILocation(line: 487, column: 3, scope: !10295)
!10307 = distinct !DISubprogram(name: "section_entry_eq", scope: !3, file: !3, line: 475, type: !3296, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10308 = !DILocalVariable(name: "p1", arg: 1, scope: !10307, file: !3, line: 475, type: !3132)
!10309 = !DILocation(line: 475, column: 31, scope: !10307)
!10310 = !DILocalVariable(name: "p2", arg: 2, scope: !10307, file: !3, line: 475, type: !3132)
!10311 = !DILocation(line: 475, column: 47, scope: !10307)
!10312 = !DILocalVariable(name: "old", scope: !10307, file: !3, line: 477, type: !3824)
!10313 = !DILocation(line: 477, column: 18, scope: !10307)
!10314 = !DILocation(line: 477, column: 42, scope: !10307)
!10315 = !DILocation(line: 477, column: 24, scope: !10307)
!10316 = !DILocalVariable(name: "new_name", scope: !10307, file: !3, line: 478, type: !2692)
!10317 = !DILocation(line: 478, column: 15, scope: !10307)
!10318 = !DILocation(line: 478, column: 41, scope: !10307)
!10319 = !DILocation(line: 480, column: 18, scope: !10307)
!10320 = !DILocation(line: 480, column: 23, scope: !10307)
!10321 = !DILocation(line: 480, column: 29, scope: !10307)
!10322 = !DILocation(line: 480, column: 35, scope: !10307)
!10323 = !DILocation(line: 480, column: 10, scope: !10307)
!10324 = !DILocation(line: 480, column: 45, scope: !10307)
!10325 = !DILocation(line: 480, column: 3, scope: !10307)
!10326 = distinct !DISubprogram(name: "object_block_entry_hash", scope: !3, file: !3, line: 512, type: !3291, scopeLine: 513, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10327 = !DILocalVariable(name: "p", arg: 1, scope: !10326, file: !3, line: 512, type: !3132)
!10328 = !DILocation(line: 512, column: 38, scope: !10326)
!10329 = !DILocalVariable(name: "old", scope: !10326, file: !3, line: 514, type: !3826)
!10330 = !DILocation(line: 514, column: 30, scope: !10326)
!10331 = !DILocation(line: 514, column: 66, scope: !10326)
!10332 = !DILocation(line: 514, column: 36, scope: !10326)
!10333 = !DILocation(line: 515, column: 24, scope: !10326)
!10334 = !DILocation(line: 515, column: 29, scope: !10326)
!10335 = !DILocation(line: 515, column: 10, scope: !10326)
!10336 = !DILocation(line: 515, column: 3, scope: !10326)
!10337 = distinct !DISubprogram(name: "object_block_entry_eq", scope: !3, file: !3, line: 503, type: !3296, scopeLine: 504, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10338 = !DILocalVariable(name: "p1", arg: 1, scope: !10337, file: !3, line: 503, type: !3132)
!10339 = !DILocation(line: 503, column: 36, scope: !10337)
!10340 = !DILocalVariable(name: "p2", arg: 2, scope: !10337, file: !3, line: 503, type: !3132)
!10341 = !DILocation(line: 503, column: 52, scope: !10337)
!10342 = !DILocalVariable(name: "old", scope: !10337, file: !3, line: 505, type: !3826)
!10343 = !DILocation(line: 505, column: 30, scope: !10337)
!10344 = !DILocation(line: 505, column: 66, scope: !10337)
!10345 = !DILocation(line: 505, column: 36, scope: !10337)
!10346 = !DILocalVariable(name: "new_section", scope: !10337, file: !3, line: 506, type: !3824)
!10347 = !DILocation(line: 506, column: 18, scope: !10337)
!10348 = !DILocation(line: 506, column: 50, scope: !10337)
!10349 = !DILocation(line: 506, column: 32, scope: !10337)
!10350 = !DILocation(line: 508, column: 10, scope: !10337)
!10351 = !DILocation(line: 508, column: 15, scope: !10337)
!10352 = !DILocation(line: 508, column: 23, scope: !10337)
!10353 = !DILocation(line: 508, column: 20, scope: !10337)
!10354 = !DILocation(line: 508, column: 3, scope: !10337)
!10355 = distinct !DISubprogram(name: "const_desc_hash", scope: !3, file: !3, line: 2873, type: !3291, scopeLine: 2874, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10356 = !DILocalVariable(name: "ptr", arg: 1, scope: !10355, file: !3, line: 2873, type: !3132)
!10357 = !DILocation(line: 2873, column: 30, scope: !10355)
!10358 = !DILocation(line: 2875, column: 52, scope: !10355)
!10359 = !DILocation(line: 2875, column: 11, scope: !10355)
!10360 = !DILocation(line: 2875, column: 58, scope: !10355)
!10361 = !DILocation(line: 2875, column: 3, scope: !10355)
!10362 = distinct !DISubprogram(name: "const_desc_eq", scope: !3, file: !3, line: 2976, type: !3296, scopeLine: 2977, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10363 = !DILocalVariable(name: "p1", arg: 1, scope: !10362, file: !3, line: 2976, type: !3132)
!10364 = !DILocation(line: 2976, column: 28, scope: !10362)
!10365 = !DILocalVariable(name: "p2", arg: 2, scope: !10362, file: !3, line: 2976, type: !3132)
!10366 = !DILocation(line: 2976, column: 44, scope: !10362)
!10367 = !DILocalVariable(name: "c1", scope: !10362, file: !3, line: 2978, type: !10368)
!10368 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3828)
!10369 = !DILocation(line: 2978, column: 48, scope: !10362)
!10370 = !DILocation(line: 2979, column: 49, scope: !10362)
!10371 = !DILocation(line: 2979, column: 7, scope: !10362)
!10372 = !DILocalVariable(name: "c2", scope: !10362, file: !3, line: 2980, type: !10368)
!10373 = !DILocation(line: 2980, column: 48, scope: !10362)
!10374 = !DILocation(line: 2981, column: 49, scope: !10362)
!10375 = !DILocation(line: 2981, column: 7, scope: !10362)
!10376 = !DILocation(line: 2982, column: 7, scope: !10377)
!10377 = distinct !DILexicalBlock(scope: !10362, file: !3, line: 2982, column: 7)
!10378 = !DILocation(line: 2982, column: 11, scope: !10377)
!10379 = !DILocation(line: 2982, column: 19, scope: !10377)
!10380 = !DILocation(line: 2982, column: 23, scope: !10377)
!10381 = !DILocation(line: 2982, column: 16, scope: !10377)
!10382 = !DILocation(line: 2982, column: 7, scope: !10362)
!10383 = !DILocation(line: 2983, column: 5, scope: !10377)
!10384 = !DILocation(line: 2984, column: 28, scope: !10362)
!10385 = !DILocation(line: 2984, column: 32, scope: !10362)
!10386 = !DILocation(line: 2984, column: 39, scope: !10362)
!10387 = !DILocation(line: 2984, column: 43, scope: !10362)
!10388 = !DILocation(line: 2984, column: 10, scope: !10362)
!10389 = !DILocation(line: 2984, column: 3, scope: !10362)
!10390 = !DILocation(line: 2985, column: 1, scope: !10362)
!10391 = distinct !DISubprogram(name: "output_section_asm_op", scope: !3, file: !3, line: 6799, type: !3130, scopeLine: 6800, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10392 = !DILocalVariable(name: "directive", arg: 1, scope: !10391, file: !3, line: 6799, type: !3132)
!10393 = !DILocation(line: 6799, column: 36, scope: !10391)
!10394 = !DILocation(line: 6801, column: 12, scope: !10391)
!10395 = !DILocation(line: 6801, column: 49, scope: !10391)
!10396 = !DILocation(line: 6801, column: 3, scope: !10391)
!10397 = !DILocation(line: 6802, column: 1, scope: !10391)
!10398 = distinct !DISubprogram(name: "get_noswitch_section", scope: !3, file: !3, line: 539, type: !10399, scopeLine: 540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10399 = !DISubroutineType(types: !10400)
!10400 = !{!3109, !7, !3141}
!10401 = !DILocalVariable(name: "flags", arg: 1, scope: !10398, file: !3, line: 539, type: !7)
!10402 = !DILocation(line: 539, column: 36, scope: !10398)
!10403 = !DILocalVariable(name: "callback", arg: 2, scope: !10398, file: !3, line: 539, type: !3141)
!10404 = !DILocation(line: 539, column: 69, scope: !10398)
!10405 = !DILocalVariable(name: "sect", scope: !10398, file: !3, line: 541, type: !3109)
!10406 = !DILocation(line: 541, column: 12, scope: !10398)
!10407 = !DILocation(line: 543, column: 10, scope: !10398)
!10408 = !DILocation(line: 543, column: 8, scope: !10398)
!10409 = !DILocation(line: 544, column: 33, scope: !10398)
!10410 = !DILocation(line: 544, column: 39, scope: !10398)
!10411 = !DILocation(line: 544, column: 3, scope: !10398)
!10412 = !DILocation(line: 544, column: 9, scope: !10398)
!10413 = !DILocation(line: 544, column: 18, scope: !10398)
!10414 = !DILocation(line: 544, column: 25, scope: !10398)
!10415 = !DILocation(line: 544, column: 31, scope: !10398)
!10416 = !DILocation(line: 545, column: 29, scope: !10398)
!10417 = !DILocation(line: 545, column: 3, scope: !10398)
!10418 = !DILocation(line: 545, column: 9, scope: !10398)
!10419 = !DILocation(line: 545, column: 18, scope: !10398)
!10420 = !DILocation(line: 545, column: 27, scope: !10398)
!10421 = !DILocation(line: 547, column: 10, scope: !10398)
!10422 = !DILocation(line: 547, column: 3, scope: !10398)
!10423 = distinct !DISubprogram(name: "emit_tls_common", scope: !3, file: !3, line: 1992, type: !3143, scopeLine: 1996, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10424 = !DILocalVariable(name: "decl", arg: 1, scope: !10423, file: !3, line: 1992, type: !2702)
!10425 = !DILocation(line: 1992, column: 23, scope: !10423)
!10426 = !DILocalVariable(name: "name", arg: 2, scope: !10423, file: !3, line: 1993, type: !2692)
!10427 = !DILocation(line: 1993, column: 16, scope: !10423)
!10428 = !DILocalVariable(name: "size", arg: 3, scope: !10423, file: !3, line: 1994, type: !2755)
!10429 = !DILocation(line: 1994, column: 27, scope: !10423)
!10430 = !DILocalVariable(name: "rounded", arg: 4, scope: !10423, file: !3, line: 1995, type: !2755)
!10431 = !DILocation(line: 1995, column: 27, scope: !10423)
!10432 = !DILocation(line: 1998, column: 3, scope: !10423)
!10433 = !DILocation(line: 1998, column: 3, scope: !10434)
!10434 = distinct !DILexicalBlock(scope: !10423, file: !3, line: 1998, column: 3)
!10435 = !DILocation(line: 1999, column: 3, scope: !10423)
!10436 = distinct !DISubprogram(name: "emit_local", scope: !3, file: !3, line: 1931, type: !3143, scopeLine: 1935, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10437 = !DILocalVariable(name: "decl", arg: 1, scope: !10436, file: !3, line: 1931, type: !2702)
!10438 = !DILocation(line: 1931, column: 18, scope: !10436)
!10439 = !DILocalVariable(name: "name", arg: 2, scope: !10436, file: !3, line: 1932, type: !2692)
!10440 = !DILocation(line: 1932, column: 18, scope: !10436)
!10441 = !DILocalVariable(name: "size", arg: 3, scope: !10436, file: !3, line: 1933, type: !2755)
!10442 = !DILocation(line: 1933, column: 29, scope: !10436)
!10443 = !DILocalVariable(name: "rounded", arg: 4, scope: !10436, file: !3, line: 1934, type: !2755)
!10444 = !DILocation(line: 1934, column: 29, scope: !10436)
!10445 = !DILocation(line: 1941, column: 3, scope: !10436)
!10446 = !DILocation(line: 1941, column: 3, scope: !10447)
!10447 = distinct !DILexicalBlock(scope: !10436, file: !3, line: 1941, column: 3)
!10448 = !DILocation(line: 1941, column: 3, scope: !10449)
!10449 = distinct !DILexicalBlock(scope: !10447, file: !3, line: 1941, column: 3)
!10450 = !DILocation(line: 1942, column: 3, scope: !10436)
!10451 = distinct !DISubprogram(name: "emit_common", scope: !3, file: !3, line: 1971, type: !3143, scopeLine: 1975, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10452 = !DILocalVariable(name: "decl", arg: 1, scope: !10451, file: !3, line: 1971, type: !2702)
!10453 = !DILocation(line: 1971, column: 19, scope: !10451)
!10454 = !DILocalVariable(name: "name", arg: 2, scope: !10451, file: !3, line: 1972, type: !2692)
!10455 = !DILocation(line: 1972, column: 19, scope: !10451)
!10456 = !DILocalVariable(name: "size", arg: 3, scope: !10451, file: !3, line: 1973, type: !2755)
!10457 = !DILocation(line: 1973, column: 30, scope: !10451)
!10458 = !DILocalVariable(name: "rounded", arg: 4, scope: !10451, file: !3, line: 1974, type: !2755)
!10459 = !DILocation(line: 1974, column: 30, scope: !10451)
!10460 = !DILocation(line: 1981, column: 3, scope: !10451)
!10461 = !DILocation(line: 1981, column: 3, scope: !10462)
!10462 = distinct !DILexicalBlock(scope: !10451, file: !3, line: 1981, column: 3)
!10463 = !DILocation(line: 1982, column: 3, scope: !10451)
!10464 = distinct !DISubprogram(name: "emit_bss", scope: !3, file: !3, line: 1953, type: !3143, scopeLine: 1957, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10465 = !DILocalVariable(name: "decl", arg: 1, scope: !10464, file: !3, line: 1953, type: !2702)
!10466 = !DILocation(line: 1953, column: 16, scope: !10464)
!10467 = !DILocalVariable(name: "name", arg: 2, scope: !10464, file: !3, line: 1954, type: !2692)
!10468 = !DILocation(line: 1954, column: 16, scope: !10464)
!10469 = !DILocalVariable(name: "size", arg: 3, scope: !10464, file: !3, line: 1955, type: !2755)
!10470 = !DILocation(line: 1955, column: 27, scope: !10464)
!10471 = !DILocalVariable(name: "rounded", arg: 4, scope: !10464, file: !3, line: 1956, type: !2755)
!10472 = !DILocation(line: 1956, column: 27, scope: !10464)
!10473 = !DILocation(line: 1959, column: 3, scope: !10464)
!10474 = !DILocation(line: 1960, column: 3, scope: !10464)
!10475 = distinct !DISubprogram(name: "decl_default_tls_model", scope: !3, file: !3, line: 5977, type: !10476, scopeLine: 5978, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10476 = !DISubroutineType(types: !10477)
!10477 = !{!511, !8590}
!10478 = !DILocalVariable(name: "decl", arg: 1, scope: !10475, file: !3, line: 5977, type: !8590)
!10479 = !DILocation(line: 5977, column: 36, scope: !10475)
!10480 = !DILocalVariable(name: "kind", scope: !10475, file: !3, line: 5979, type: !511)
!10481 = !DILocation(line: 5979, column: 18, scope: !10475)
!10482 = !DILocalVariable(name: "is_local", scope: !10475, file: !3, line: 5980, type: !2820)
!10483 = !DILocation(line: 5980, column: 8, scope: !10475)
!10484 = !DILocation(line: 5982, column: 22, scope: !10475)
!10485 = !DILocation(line: 5982, column: 37, scope: !10475)
!10486 = !DILocation(line: 5982, column: 14, scope: !10475)
!10487 = !DILocation(line: 5982, column: 12, scope: !10475)
!10488 = !DILocation(line: 5983, column: 8, scope: !10489)
!10489 = distinct !DILexicalBlock(scope: !10475, file: !3, line: 5983, column: 7)
!10490 = !DILocation(line: 5983, column: 7, scope: !10475)
!10491 = !DILocation(line: 5985, column: 11, scope: !10492)
!10492 = distinct !DILexicalBlock(scope: !10493, file: !3, line: 5985, column: 11)
!10493 = distinct !DILexicalBlock(scope: !10489, file: !3, line: 5984, column: 5)
!10494 = !DILocation(line: 5985, column: 11, scope: !10493)
!10495 = !DILocation(line: 5986, column: 7, scope: !10492)
!10496 = !DILocation(line: 5986, column: 2, scope: !10492)
!10497 = !DILocation(line: 5988, column: 7, scope: !10492)
!10498 = !DILocation(line: 5989, column: 5, scope: !10493)
!10499 = !DILocation(line: 5993, column: 12, scope: !10500)
!10500 = distinct !DILexicalBlock(scope: !10489, file: !3, line: 5993, column: 12)
!10501 = !DILocation(line: 5993, column: 21, scope: !10500)
!10502 = !DILocation(line: 5993, column: 24, scope: !10500)
!10503 = !DILocation(line: 5993, column: 12, scope: !10489)
!10504 = !DILocation(line: 5994, column: 10, scope: !10500)
!10505 = !DILocation(line: 5994, column: 5, scope: !10500)
!10506 = !DILocation(line: 5996, column: 10, scope: !10500)
!10507 = !DILocation(line: 5997, column: 7, scope: !10508)
!10508 = distinct !DILexicalBlock(scope: !10475, file: !3, line: 5997, column: 7)
!10509 = !DILocation(line: 5997, column: 14, scope: !10508)
!10510 = !DILocation(line: 5997, column: 12, scope: !10508)
!10511 = !DILocation(line: 5997, column: 7, scope: !10475)
!10512 = !DILocation(line: 5998, column: 12, scope: !10508)
!10513 = !DILocation(line: 5998, column: 10, scope: !10508)
!10514 = !DILocation(line: 5998, column: 5, scope: !10508)
!10515 = !DILocation(line: 6000, column: 10, scope: !10475)
!10516 = !DILocation(line: 6000, column: 3, scope: !10475)
!10517 = distinct !DISubprogram(name: "default_section_type_flags", scope: !3, file: !3, line: 6011, type: !10518, scopeLine: 6012, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10518 = !DISubroutineType(types: !10519)
!10519 = !{!7, !2702, !2692, !2798}
!10520 = !DILocalVariable(name: "decl", arg: 1, scope: !10517, file: !3, line: 6011, type: !2702)
!10521 = !DILocation(line: 6011, column: 34, scope: !10517)
!10522 = !DILocalVariable(name: "name", arg: 2, scope: !10517, file: !3, line: 6011, type: !2692)
!10523 = !DILocation(line: 6011, column: 52, scope: !10517)
!10524 = !DILocalVariable(name: "reloc", arg: 3, scope: !10517, file: !3, line: 6011, type: !2798)
!10525 = !DILocation(line: 6011, column: 62, scope: !10517)
!10526 = !DILocalVariable(name: "flags", scope: !10517, file: !3, line: 6013, type: !7)
!10527 = !DILocation(line: 6013, column: 16, scope: !10517)
!10528 = !DILocation(line: 6015, column: 7, scope: !10529)
!10529 = distinct !DILexicalBlock(scope: !10517, file: !3, line: 6015, column: 7)
!10530 = !DILocation(line: 6015, column: 12, scope: !10529)
!10531 = !DILocation(line: 6015, column: 15, scope: !10529)
!10532 = !DILocation(line: 6015, column: 32, scope: !10529)
!10533 = !DILocation(line: 6015, column: 7, scope: !10517)
!10534 = !DILocation(line: 6016, column: 11, scope: !10529)
!10535 = !DILocation(line: 6016, column: 5, scope: !10529)
!10536 = !DILocation(line: 6017, column: 12, scope: !10537)
!10537 = distinct !DILexicalBlock(scope: !10529, file: !3, line: 6017, column: 12)
!10538 = !DILocation(line: 6017, column: 17, scope: !10537)
!10539 = !DILocation(line: 6017, column: 43, scope: !10537)
!10540 = !DILocation(line: 6017, column: 49, scope: !10537)
!10541 = !DILocation(line: 6017, column: 20, scope: !10537)
!10542 = !DILocation(line: 6017, column: 12, scope: !10529)
!10543 = !DILocation(line: 6018, column: 11, scope: !10537)
!10544 = !DILocation(line: 6018, column: 5, scope: !10537)
!10545 = !DILocation(line: 6019, column: 12, scope: !10546)
!10546 = distinct !DILexicalBlock(scope: !10537, file: !3, line: 6019, column: 12)
!10547 = !DILocation(line: 6020, column: 5, scope: !10546)
!10548 = !DILocation(line: 6020, column: 8, scope: !10546)
!10549 = !DILocation(line: 6021, column: 5, scope: !10546)
!10550 = !DILocation(line: 6021, column: 26, scope: !10546)
!10551 = !DILocation(line: 6021, column: 8, scope: !10546)
!10552 = !DILocation(line: 6022, column: 5, scope: !10546)
!10553 = !DILocation(line: 6022, column: 16, scope: !10546)
!10554 = !DILocation(line: 6022, column: 40, scope: !10546)
!10555 = !DILocation(line: 6022, column: 8, scope: !10546)
!10556 = !DILocation(line: 6022, column: 68, scope: !10546)
!10557 = !DILocation(line: 6019, column: 12, scope: !10537)
!10558 = !DILocation(line: 6023, column: 11, scope: !10546)
!10559 = !DILocation(line: 6023, column: 5, scope: !10546)
!10560 = !DILocation(line: 6024, column: 13, scope: !10561)
!10561 = distinct !DILexicalBlock(scope: !10546, file: !3, line: 6024, column: 12)
!10562 = !DILocation(line: 6025, column: 5, scope: !10561)
!10563 = !DILocation(line: 6025, column: 10, scope: !10561)
!10564 = !DILocation(line: 6025, column: 32, scope: !10561)
!10565 = !DILocation(line: 6025, column: 36, scope: !10561)
!10566 = !DILocation(line: 6026, column: 5, scope: !10561)
!10567 = !DILocation(line: 6026, column: 16, scope: !10561)
!10568 = !DILocation(line: 6026, column: 8, scope: !10561)
!10569 = !DILocation(line: 6026, column: 59, scope: !10561)
!10570 = !DILocation(line: 6024, column: 12, scope: !10546)
!10571 = !DILocation(line: 6027, column: 11, scope: !10561)
!10572 = !DILocation(line: 6027, column: 5, scope: !10561)
!10573 = !DILocation(line: 6029, column: 11, scope: !10561)
!10574 = !DILocation(line: 6031, column: 7, scope: !10575)
!10575 = distinct !DILexicalBlock(scope: !10517, file: !3, line: 6031, column: 7)
!10576 = !DILocation(line: 6031, column: 12, scope: !10575)
!10577 = !DILocation(line: 6031, column: 15, scope: !10575)
!10578 = !DILocation(line: 6031, column: 7, scope: !10517)
!10579 = !DILocation(line: 6032, column: 11, scope: !10575)
!10580 = !DILocation(line: 6032, column: 5, scope: !10575)
!10581 = !DILocation(line: 6034, column: 7, scope: !10582)
!10582 = distinct !DILexicalBlock(scope: !10517, file: !3, line: 6034, column: 7)
!10583 = !DILocation(line: 6034, column: 12, scope: !10582)
!10584 = !DILocation(line: 6034, column: 15, scope: !10582)
!10585 = !DILocation(line: 6034, column: 32, scope: !10582)
!10586 = !DILocation(line: 6034, column: 44, scope: !10582)
!10587 = !DILocation(line: 6034, column: 47, scope: !10582)
!10588 = !DILocation(line: 6034, column: 7, scope: !10517)
!10589 = !DILocation(line: 6035, column: 11, scope: !10582)
!10590 = !DILocation(line: 6035, column: 5, scope: !10582)
!10591 = !DILocation(line: 6037, column: 15, scope: !10592)
!10592 = distinct !DILexicalBlock(scope: !10517, file: !3, line: 6037, column: 7)
!10593 = !DILocation(line: 6037, column: 7, scope: !10592)
!10594 = !DILocation(line: 6037, column: 29, scope: !10592)
!10595 = !DILocation(line: 6038, column: 7, scope: !10592)
!10596 = !DILocation(line: 6038, column: 19, scope: !10592)
!10597 = !DILocation(line: 6038, column: 10, scope: !10592)
!10598 = !DILocation(line: 6038, column: 37, scope: !10592)
!10599 = !DILocation(line: 6039, column: 7, scope: !10592)
!10600 = !DILocation(line: 6039, column: 19, scope: !10592)
!10601 = !DILocation(line: 6039, column: 10, scope: !10592)
!10602 = !DILocation(line: 6039, column: 49, scope: !10592)
!10603 = !DILocation(line: 6040, column: 7, scope: !10592)
!10604 = !DILocation(line: 6040, column: 18, scope: !10592)
!10605 = !DILocation(line: 6040, column: 10, scope: !10592)
!10606 = !DILocation(line: 6040, column: 33, scope: !10592)
!10607 = !DILocation(line: 6041, column: 7, scope: !10592)
!10608 = !DILocation(line: 6041, column: 19, scope: !10592)
!10609 = !DILocation(line: 6041, column: 10, scope: !10592)
!10610 = !DILocation(line: 6041, column: 38, scope: !10592)
!10611 = !DILocation(line: 6042, column: 7, scope: !10592)
!10612 = !DILocation(line: 6042, column: 19, scope: !10592)
!10613 = !DILocation(line: 6042, column: 10, scope: !10592)
!10614 = !DILocation(line: 6042, column: 50, scope: !10592)
!10615 = !DILocation(line: 6037, column: 7, scope: !10517)
!10616 = !DILocation(line: 6043, column: 11, scope: !10592)
!10617 = !DILocation(line: 6043, column: 5, scope: !10592)
!10618 = !DILocation(line: 6045, column: 15, scope: !10619)
!10619 = distinct !DILexicalBlock(scope: !10517, file: !3, line: 6045, column: 7)
!10620 = !DILocation(line: 6045, column: 7, scope: !10619)
!10621 = !DILocation(line: 6045, column: 31, scope: !10619)
!10622 = !DILocation(line: 6046, column: 7, scope: !10619)
!10623 = !DILocation(line: 6046, column: 19, scope: !10619)
!10624 = !DILocation(line: 6046, column: 10, scope: !10619)
!10625 = !DILocation(line: 6046, column: 39, scope: !10619)
!10626 = !DILocation(line: 6047, column: 7, scope: !10619)
!10627 = !DILocation(line: 6047, column: 19, scope: !10619)
!10628 = !DILocation(line: 6047, column: 10, scope: !10619)
!10629 = !DILocation(line: 6047, column: 50, scope: !10619)
!10630 = !DILocation(line: 6045, column: 7, scope: !10517)
!10631 = !DILocation(line: 6048, column: 11, scope: !10619)
!10632 = !DILocation(line: 6048, column: 5, scope: !10619)
!10633 = !DILocation(line: 6050, column: 15, scope: !10634)
!10634 = distinct !DILexicalBlock(scope: !10517, file: !3, line: 6050, column: 7)
!10635 = !DILocation(line: 6050, column: 7, scope: !10634)
!10636 = !DILocation(line: 6050, column: 30, scope: !10634)
!10637 = !DILocation(line: 6051, column: 7, scope: !10634)
!10638 = !DILocation(line: 6051, column: 19, scope: !10634)
!10639 = !DILocation(line: 6051, column: 10, scope: !10634)
!10640 = !DILocation(line: 6051, column: 38, scope: !10634)
!10641 = !DILocation(line: 6052, column: 7, scope: !10634)
!10642 = !DILocation(line: 6052, column: 19, scope: !10634)
!10643 = !DILocation(line: 6052, column: 10, scope: !10634)
!10644 = !DILocation(line: 6052, column: 50, scope: !10634)
!10645 = !DILocation(line: 6050, column: 7, scope: !10517)
!10646 = !DILocation(line: 6053, column: 11, scope: !10634)
!10647 = !DILocation(line: 6053, column: 5, scope: !10634)
!10648 = !DILocation(line: 6060, column: 9, scope: !10649)
!10649 = distinct !DILexicalBlock(scope: !10517, file: !3, line: 6060, column: 7)
!10650 = !DILocation(line: 6060, column: 15, scope: !10649)
!10651 = !DILocation(line: 6061, column: 7, scope: !10649)
!10652 = !DILocation(line: 6061, column: 19, scope: !10649)
!10653 = !DILocation(line: 6061, column: 11, scope: !10649)
!10654 = !DILocation(line: 6061, column: 40, scope: !10649)
!10655 = !DILocation(line: 6062, column: 4, scope: !10649)
!10656 = !DILocation(line: 6062, column: 15, scope: !10649)
!10657 = !DILocation(line: 6062, column: 7, scope: !10649)
!10658 = !DILocation(line: 6062, column: 36, scope: !10649)
!10659 = !DILocation(line: 6063, column: 4, scope: !10649)
!10660 = !DILocation(line: 6063, column: 15, scope: !10649)
!10661 = !DILocation(line: 6063, column: 7, scope: !10649)
!10662 = !DILocation(line: 6063, column: 39, scope: !10649)
!10663 = !DILocation(line: 6060, column: 7, scope: !10517)
!10664 = !DILocation(line: 6064, column: 11, scope: !10649)
!10665 = !DILocation(line: 6064, column: 5, scope: !10649)
!10666 = !DILocation(line: 6066, column: 10, scope: !10517)
!10667 = !DILocation(line: 6066, column: 3, scope: !10517)
!10668 = distinct !DISubprogram(name: "decl_readonly_section", scope: !3, file: !3, line: 6321, type: !10669, scopeLine: 6322, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10669 = !DISubroutineType(types: !10670)
!10670 = !{!2820, !8590, !2798}
!10671 = !DILocalVariable(name: "decl", arg: 1, scope: !10668, file: !3, line: 6321, type: !8590)
!10672 = !DILocation(line: 6321, column: 35, scope: !10668)
!10673 = !DILocalVariable(name: "reloc", arg: 2, scope: !10668, file: !3, line: 6321, type: !2798)
!10674 = !DILocation(line: 6321, column: 45, scope: !10668)
!10675 = !DILocation(line: 6323, column: 40, scope: !10668)
!10676 = !DILocation(line: 6323, column: 46, scope: !10668)
!10677 = !DILocation(line: 6323, column: 11, scope: !10668)
!10678 = !DILocation(line: 6323, column: 3, scope: !10668)
!10679 = !DILocation(line: 6330, column: 7, scope: !10680)
!10680 = distinct !DILexicalBlock(scope: !10668, file: !3, line: 6324, column: 5)
!10681 = !DILocation(line: 6333, column: 7, scope: !10680)
!10682 = !DILocation(line: 6336, column: 1, scope: !10668)
!10683 = distinct !DISubprogram(name: "have_global_bss_p", scope: !3, file: !3, line: 6074, type: !5355, scopeLine: 6075, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10684 = !DILocation(line: 6076, column: 10, scope: !10683)
!10685 = !DILocation(line: 6076, column: 31, scope: !10683)
!10686 = !DILocation(line: 6076, column: 42, scope: !10683)
!10687 = !DILocation(line: 6076, column: 34, scope: !10683)
!10688 = !DILocation(line: 6076, column: 3, scope: !10683)
!10689 = distinct !DISubprogram(name: "default_no_named_section", scope: !3, file: !3, line: 6083, type: !10690, scopeLine: 6086, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10690 = !DISubroutineType(types: !10691)
!10691 = !{null, !2692, !7, !2702}
!10692 = !DILocalVariable(name: "name", arg: 1, scope: !10689, file: !3, line: 6083, type: !2692)
!10693 = !DILocation(line: 6083, column: 39, scope: !10689)
!10694 = !DILocalVariable(name: "flags", arg: 2, scope: !10689, file: !3, line: 6084, type: !7)
!10695 = !DILocation(line: 6084, column: 19, scope: !10689)
!10696 = !DILocalVariable(name: "decl", arg: 3, scope: !10689, file: !3, line: 6085, type: !2702)
!10697 = !DILocation(line: 6085, column: 11, scope: !10689)
!10698 = !DILocation(line: 6089, column: 3, scope: !10689)
!10699 = !DILocation(line: 6090, column: 1, scope: !10689)
!10700 = distinct !DISubprogram(name: "default_elf_asm_named_section", scope: !3, file: !3, line: 6097, type: !10690, scopeLine: 6099, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10701 = !DILocalVariable(name: "name", arg: 1, scope: !10700, file: !3, line: 6097, type: !2692)
!10702 = !DILocation(line: 6097, column: 44, scope: !10700)
!10703 = !DILocalVariable(name: "flags", arg: 2, scope: !10700, file: !3, line: 6097, type: !7)
!10704 = !DILocation(line: 6097, column: 63, scope: !10700)
!10705 = !DILocalVariable(name: "decl", arg: 3, scope: !10700, file: !3, line: 6098, type: !2702)
!10706 = !DILocation(line: 6098, column: 16, scope: !10700)
!10707 = !DILocalVariable(name: "flagchars", scope: !10700, file: !3, line: 6100, type: !10708)
!10708 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 80, elements: !10709)
!10709 = !{!10710}
!10710 = !DISubrange(count: 10)
!10711 = !DILocation(line: 6100, column: 8, scope: !10700)
!10712 = !DILocalVariable(name: "f", scope: !10700, file: !3, line: 6100, type: !2964)
!10713 = !DILocation(line: 6100, column: 24, scope: !10700)
!10714 = !DILocation(line: 6100, column: 28, scope: !10700)
!10715 = !DILocation(line: 6106, column: 31, scope: !10716)
!10716 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 6106, column: 7)
!10717 = !DILocation(line: 6106, column: 37, scope: !10716)
!10718 = !DILocation(line: 6107, column: 7, scope: !10716)
!10719 = !DILocation(line: 6107, column: 11, scope: !10716)
!10720 = !DILocation(line: 6107, column: 17, scope: !10716)
!10721 = !DILocation(line: 6106, column: 7, scope: !10700)
!10722 = !DILocation(line: 6109, column: 16, scope: !10723)
!10723 = distinct !DILexicalBlock(scope: !10716, file: !3, line: 6108, column: 5)
!10724 = !DILocation(line: 6109, column: 50, scope: !10723)
!10725 = !DILocation(line: 6109, column: 7, scope: !10723)
!10726 = !DILocation(line: 6110, column: 7, scope: !10723)
!10727 = !DILocation(line: 6113, column: 9, scope: !10728)
!10728 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 6113, column: 7)
!10729 = !DILocation(line: 6113, column: 15, scope: !10728)
!10730 = !DILocation(line: 6113, column: 7, scope: !10700)
!10731 = !DILocation(line: 6114, column: 7, scope: !10728)
!10732 = !DILocation(line: 6114, column: 10, scope: !10728)
!10733 = !DILocation(line: 6114, column: 5, scope: !10728)
!10734 = !DILocation(line: 6115, column: 7, scope: !10735)
!10735 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 6115, column: 7)
!10736 = !DILocation(line: 6115, column: 13, scope: !10735)
!10737 = !DILocation(line: 6115, column: 7, scope: !10700)
!10738 = !DILocation(line: 6116, column: 7, scope: !10735)
!10739 = !DILocation(line: 6116, column: 10, scope: !10735)
!10740 = !DILocation(line: 6116, column: 5, scope: !10735)
!10741 = !DILocation(line: 6117, column: 7, scope: !10742)
!10742 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 6117, column: 7)
!10743 = !DILocation(line: 6117, column: 13, scope: !10742)
!10744 = !DILocation(line: 6117, column: 7, scope: !10700)
!10745 = !DILocation(line: 6118, column: 7, scope: !10742)
!10746 = !DILocation(line: 6118, column: 10, scope: !10742)
!10747 = !DILocation(line: 6118, column: 5, scope: !10742)
!10748 = !DILocation(line: 6119, column: 7, scope: !10749)
!10749 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 6119, column: 7)
!10750 = !DILocation(line: 6119, column: 13, scope: !10749)
!10751 = !DILocation(line: 6119, column: 7, scope: !10700)
!10752 = !DILocation(line: 6120, column: 7, scope: !10749)
!10753 = !DILocation(line: 6120, column: 10, scope: !10749)
!10754 = !DILocation(line: 6120, column: 5, scope: !10749)
!10755 = !DILocation(line: 6121, column: 7, scope: !10756)
!10756 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 6121, column: 7)
!10757 = !DILocation(line: 6121, column: 13, scope: !10756)
!10758 = !DILocation(line: 6121, column: 7, scope: !10700)
!10759 = !DILocation(line: 6122, column: 7, scope: !10756)
!10760 = !DILocation(line: 6122, column: 10, scope: !10756)
!10761 = !DILocation(line: 6122, column: 5, scope: !10756)
!10762 = !DILocation(line: 6123, column: 7, scope: !10763)
!10763 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 6123, column: 7)
!10764 = !DILocation(line: 6123, column: 13, scope: !10763)
!10765 = !DILocation(line: 6123, column: 7, scope: !10700)
!10766 = !DILocation(line: 6124, column: 7, scope: !10763)
!10767 = !DILocation(line: 6124, column: 10, scope: !10763)
!10768 = !DILocation(line: 6124, column: 5, scope: !10763)
!10769 = !DILocation(line: 6125, column: 7, scope: !10770)
!10770 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 6125, column: 7)
!10771 = !DILocation(line: 6125, column: 13, scope: !10770)
!10772 = !DILocation(line: 6125, column: 7, scope: !10700)
!10773 = !DILocation(line: 6126, column: 7, scope: !10770)
!10774 = !DILocation(line: 6126, column: 10, scope: !10770)
!10775 = !DILocation(line: 6126, column: 5, scope: !10770)
!10776 = !DILocation(line: 6127, column: 29, scope: !10777)
!10777 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 6127, column: 7)
!10778 = !DILocation(line: 6127, column: 35, scope: !10777)
!10779 = !DILocation(line: 6127, column: 7, scope: !10700)
!10780 = !DILocation(line: 6128, column: 7, scope: !10777)
!10781 = !DILocation(line: 6128, column: 10, scope: !10777)
!10782 = !DILocation(line: 6128, column: 5, scope: !10777)
!10783 = !DILocation(line: 6129, column: 4, scope: !10700)
!10784 = !DILocation(line: 6129, column: 6, scope: !10700)
!10785 = !DILocation(line: 6131, column: 12, scope: !10700)
!10786 = !DILocation(line: 6131, column: 51, scope: !10700)
!10787 = !DILocation(line: 6131, column: 57, scope: !10700)
!10788 = !DILocation(line: 6131, column: 3, scope: !10700)
!10789 = !DILocation(line: 6133, column: 9, scope: !10790)
!10790 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 6133, column: 7)
!10791 = !DILocation(line: 6133, column: 15, scope: !10790)
!10792 = !DILocation(line: 6133, column: 7, scope: !10700)
!10793 = !DILocalVariable(name: "type", scope: !10794, file: !3, line: 6135, type: !2692)
!10794 = distinct !DILexicalBlock(scope: !10790, file: !3, line: 6134, column: 5)
!10795 = !DILocation(line: 6135, column: 19, scope: !10794)
!10796 = !DILocalVariable(name: "format", scope: !10794, file: !3, line: 6136, type: !2692)
!10797 = !DILocation(line: 6136, column: 19, scope: !10794)
!10798 = !DILocation(line: 6138, column: 11, scope: !10799)
!10799 = distinct !DILexicalBlock(scope: !10794, file: !3, line: 6138, column: 11)
!10800 = !DILocation(line: 6138, column: 17, scope: !10799)
!10801 = !DILocation(line: 6138, column: 11, scope: !10794)
!10802 = !DILocation(line: 6139, column: 7, scope: !10799)
!10803 = !DILocation(line: 6139, column: 2, scope: !10799)
!10804 = !DILocation(line: 6141, column: 7, scope: !10799)
!10805 = !DILocation(line: 6143, column: 14, scope: !10794)
!10806 = !DILocation(line: 6150, column: 16, scope: !10794)
!10807 = !DILocation(line: 6150, column: 30, scope: !10794)
!10808 = !DILocation(line: 6150, column: 38, scope: !10794)
!10809 = !DILocation(line: 6150, column: 7, scope: !10794)
!10810 = !DILocation(line: 6152, column: 11, scope: !10811)
!10811 = distinct !DILexicalBlock(scope: !10794, file: !3, line: 6152, column: 11)
!10812 = !DILocation(line: 6152, column: 17, scope: !10811)
!10813 = !DILocation(line: 6152, column: 11, scope: !10794)
!10814 = !DILocation(line: 6153, column: 11, scope: !10811)
!10815 = !DILocation(line: 6153, column: 32, scope: !10811)
!10816 = !DILocation(line: 6153, column: 38, scope: !10811)
!10817 = !DILocation(line: 6153, column: 2, scope: !10811)
!10818 = !DILocation(line: 6154, column: 33, scope: !10819)
!10819 = distinct !DILexicalBlock(scope: !10794, file: !3, line: 6154, column: 11)
!10820 = !DILocation(line: 6154, column: 39, scope: !10819)
!10821 = !DILocation(line: 6154, column: 11, scope: !10794)
!10822 = !DILocation(line: 6156, column: 8, scope: !10823)
!10823 = distinct !DILexicalBlock(scope: !10824, file: !3, line: 6156, column: 8)
!10824 = distinct !DILexicalBlock(scope: !10819, file: !3, line: 6155, column: 2)
!10825 = !DILocation(line: 6156, column: 25, scope: !10823)
!10826 = !DILocation(line: 6156, column: 8, scope: !10824)
!10827 = !DILocation(line: 6157, column: 15, scope: !10823)
!10828 = !DILocation(line: 6157, column: 43, scope: !10823)
!10829 = !DILocation(line: 6157, column: 6, scope: !10823)
!10830 = !DILocation(line: 6159, column: 15, scope: !10823)
!10831 = !DILocation(line: 6160, column: 8, scope: !10823)
!10832 = !DILocation(line: 6159, column: 6, scope: !10823)
!10833 = !DILocation(line: 6161, column: 2, scope: !10824)
!10834 = !DILocation(line: 6162, column: 5, scope: !10794)
!10835 = !DILocation(line: 6164, column: 15, scope: !10700)
!10836 = !DILocation(line: 6164, column: 3, scope: !10700)
!10837 = !DILocation(line: 6165, column: 1, scope: !10700)
!10838 = distinct !DISubprogram(name: "default_coff_asm_named_section", scope: !3, file: !3, line: 6168, type: !10690, scopeLine: 6170, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10839 = !DILocalVariable(name: "name", arg: 1, scope: !10838, file: !3, line: 6168, type: !2692)
!10840 = !DILocation(line: 6168, column: 45, scope: !10838)
!10841 = !DILocalVariable(name: "flags", arg: 2, scope: !10838, file: !3, line: 6168, type: !7)
!10842 = !DILocation(line: 6168, column: 64, scope: !10838)
!10843 = !DILocalVariable(name: "decl", arg: 3, scope: !10838, file: !3, line: 6169, type: !2702)
!10844 = !DILocation(line: 6169, column: 10, scope: !10838)
!10845 = !DILocalVariable(name: "flagchars", scope: !10838, file: !3, line: 6171, type: !10846)
!10846 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 64, elements: !10847)
!10847 = !{!10848}
!10848 = !DISubrange(count: 8)
!10849 = !DILocation(line: 6171, column: 8, scope: !10838)
!10850 = !DILocalVariable(name: "f", scope: !10838, file: !3, line: 6171, type: !2964)
!10851 = !DILocation(line: 6171, column: 23, scope: !10838)
!10852 = !DILocation(line: 6171, column: 27, scope: !10838)
!10853 = !DILocation(line: 6173, column: 7, scope: !10854)
!10854 = distinct !DILexicalBlock(scope: !10838, file: !3, line: 6173, column: 7)
!10855 = !DILocation(line: 6173, column: 13, scope: !10854)
!10856 = !DILocation(line: 6173, column: 7, scope: !10838)
!10857 = !DILocation(line: 6174, column: 7, scope: !10854)
!10858 = !DILocation(line: 6174, column: 10, scope: !10854)
!10859 = !DILocation(line: 6174, column: 5, scope: !10854)
!10860 = !DILocation(line: 6175, column: 7, scope: !10861)
!10861 = distinct !DILexicalBlock(scope: !10838, file: !3, line: 6175, column: 7)
!10862 = !DILocation(line: 6175, column: 13, scope: !10861)
!10863 = !DILocation(line: 6175, column: 7, scope: !10838)
!10864 = !DILocation(line: 6176, column: 7, scope: !10861)
!10865 = !DILocation(line: 6176, column: 10, scope: !10861)
!10866 = !DILocation(line: 6176, column: 5, scope: !10861)
!10867 = !DILocation(line: 6177, column: 4, scope: !10838)
!10868 = !DILocation(line: 6177, column: 6, scope: !10838)
!10869 = !DILocation(line: 6179, column: 12, scope: !10838)
!10870 = !DILocation(line: 6179, column: 53, scope: !10838)
!10871 = !DILocation(line: 6179, column: 59, scope: !10838)
!10872 = !DILocation(line: 6179, column: 3, scope: !10838)
!10873 = !DILocation(line: 6180, column: 1, scope: !10838)
!10874 = distinct !DISubprogram(name: "default_pe_asm_named_section", scope: !3, file: !3, line: 6183, type: !10690, scopeLine: 6185, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10875 = !DILocalVariable(name: "name", arg: 1, scope: !10874, file: !3, line: 6183, type: !2692)
!10876 = !DILocation(line: 6183, column: 43, scope: !10874)
!10877 = !DILocalVariable(name: "flags", arg: 2, scope: !10874, file: !3, line: 6183, type: !7)
!10878 = !DILocation(line: 6183, column: 62, scope: !10874)
!10879 = !DILocalVariable(name: "decl", arg: 3, scope: !10874, file: !3, line: 6184, type: !2702)
!10880 = !DILocation(line: 6184, column: 15, scope: !10874)
!10881 = !DILocation(line: 6186, column: 35, scope: !10874)
!10882 = !DILocation(line: 6186, column: 41, scope: !10874)
!10883 = !DILocation(line: 6186, column: 48, scope: !10874)
!10884 = !DILocation(line: 6186, column: 3, scope: !10874)
!10885 = !DILocation(line: 6188, column: 7, scope: !10886)
!10886 = distinct !DILexicalBlock(scope: !10874, file: !3, line: 6188, column: 7)
!10887 = !DILocation(line: 6188, column: 13, scope: !10886)
!10888 = !DILocation(line: 6188, column: 7, scope: !10874)
!10889 = !DILocation(line: 6193, column: 16, scope: !10890)
!10890 = distinct !DILexicalBlock(scope: !10886, file: !3, line: 6189, column: 5)
!10891 = !DILocation(line: 6194, column: 10, scope: !10890)
!10892 = !DILocation(line: 6194, column: 16, scope: !10890)
!10893 = !DILocation(line: 6193, column: 7, scope: !10890)
!10894 = !DILocation(line: 6195, column: 5, scope: !10890)
!10895 = !DILocation(line: 6196, column: 1, scope: !10874)
!10896 = distinct !DISubprogram(name: "default_select_section", scope: !3, file: !3, line: 6201, type: !10897, scopeLine: 6203, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10897 = !DISubroutineType(types: !10898)
!10898 = !{!3109, !2702, !2798, !2755}
!10899 = !DILocalVariable(name: "decl", arg: 1, scope: !10896, file: !3, line: 6201, type: !2702)
!10900 = !DILocation(line: 6201, column: 30, scope: !10896)
!10901 = !DILocalVariable(name: "reloc", arg: 2, scope: !10896, file: !3, line: 6201, type: !2798)
!10902 = !DILocation(line: 6201, column: 40, scope: !10896)
!10903 = !DILocalVariable(name: "align", arg: 3, scope: !10896, file: !3, line: 6202, type: !2755)
!10904 = !DILocation(line: 6202, column: 27, scope: !10896)
!10905 = !DILocation(line: 6204, column: 7, scope: !10906)
!10906 = distinct !DILexicalBlock(scope: !10896, file: !3, line: 6204, column: 7)
!10907 = !DILocation(line: 6204, column: 7, scope: !10896)
!10908 = !DILocation(line: 6206, column: 34, scope: !10909)
!10909 = distinct !DILexicalBlock(scope: !10910, file: !3, line: 6206, column: 11)
!10910 = distinct !DILexicalBlock(scope: !10906, file: !3, line: 6205, column: 5)
!10911 = !DILocation(line: 6206, column: 40, scope: !10909)
!10912 = !DILocation(line: 6206, column: 11, scope: !10909)
!10913 = !DILocation(line: 6206, column: 11, scope: !10910)
!10914 = !DILocation(line: 6207, column: 9, scope: !10909)
!10915 = !DILocation(line: 6207, column: 2, scope: !10909)
!10916 = !DILocation(line: 6208, column: 5, scope: !10910)
!10917 = !DILocation(line: 6209, column: 12, scope: !10918)
!10918 = distinct !DILexicalBlock(scope: !10906, file: !3, line: 6209, column: 12)
!10919 = !DILocation(line: 6209, column: 29, scope: !10918)
!10920 = !DILocation(line: 6209, column: 12, scope: !10906)
!10921 = !DILocation(line: 6211, column: 15, scope: !10922)
!10922 = distinct !DILexicalBlock(scope: !10923, file: !3, line: 6211, column: 11)
!10923 = distinct !DILexicalBlock(scope: !10918, file: !3, line: 6210, column: 5)
!10924 = !DILocation(line: 6211, column: 24, scope: !10922)
!10925 = !DILocation(line: 6211, column: 27, scope: !10922)
!10926 = !DILocation(line: 6212, column: 7, scope: !10922)
!10927 = !DILocation(line: 6212, column: 11, scope: !10922)
!10928 = !DILocation(line: 6213, column: 7, scope: !10922)
!10929 = !DILocation(line: 6213, column: 10, scope: !10922)
!10930 = !DILocation(line: 6214, column: 7, scope: !10922)
!10931 = !DILocation(line: 6214, column: 11, scope: !10922)
!10932 = !DILocation(line: 6211, column: 11, scope: !10923)
!10933 = !DILocation(line: 6215, column: 9, scope: !10922)
!10934 = !DILocation(line: 6215, column: 2, scope: !10922)
!10935 = !DILocation(line: 6216, column: 5, scope: !10923)
!10936 = !DILocation(line: 6217, column: 12, scope: !10937)
!10937 = distinct !DILexicalBlock(scope: !10918, file: !3, line: 6217, column: 12)
!10938 = !DILocation(line: 6217, column: 29, scope: !10937)
!10939 = !DILocation(line: 6217, column: 12, scope: !10918)
!10940 = !DILocation(line: 6218, column: 12, scope: !10937)
!10941 = !DILocation(line: 6218, column: 5, scope: !10937)
!10942 = !DILocation(line: 6219, column: 15, scope: !10943)
!10943 = distinct !DILexicalBlock(scope: !10937, file: !3, line: 6219, column: 12)
!10944 = !DILocation(line: 6219, column: 24, scope: !10943)
!10945 = !DILocation(line: 6219, column: 27, scope: !10943)
!10946 = !DILocation(line: 6219, column: 12, scope: !10937)
!10947 = !DILocation(line: 6220, column: 12, scope: !10943)
!10948 = !DILocation(line: 6220, column: 5, scope: !10943)
!10949 = !DILocation(line: 6222, column: 10, scope: !10896)
!10950 = !DILocation(line: 6222, column: 3, scope: !10896)
!10951 = !DILocation(line: 6223, column: 1, scope: !10896)
!10952 = distinct !DISubprogram(name: "categorize_decl_for_section", scope: !3, file: !3, line: 6226, type: !10953, scopeLine: 6227, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!10953 = !DISubroutineType(types: !10954)
!10954 = !{!1689, !8590, !2798}
!10955 = !DILocalVariable(name: "decl", arg: 1, scope: !10952, file: !3, line: 6226, type: !8590)
!10956 = !DILocation(line: 6226, column: 41, scope: !10952)
!10957 = !DILocalVariable(name: "reloc", arg: 2, scope: !10952, file: !3, line: 6226, type: !2798)
!10958 = !DILocation(line: 6226, column: 51, scope: !10952)
!10959 = !DILocalVariable(name: "ret", scope: !10952, file: !3, line: 6228, type: !1689)
!10960 = !DILocation(line: 6228, column: 25, scope: !10952)
!10961 = !DILocation(line: 6230, column: 7, scope: !10962)
!10962 = distinct !DILexicalBlock(scope: !10952, file: !3, line: 6230, column: 7)
!10963 = !DILocation(line: 6230, column: 24, scope: !10962)
!10964 = !DILocation(line: 6230, column: 7, scope: !10952)
!10965 = !DILocation(line: 6231, column: 5, scope: !10962)
!10966 = !DILocation(line: 6232, column: 12, scope: !10967)
!10967 = distinct !DILexicalBlock(scope: !10962, file: !3, line: 6232, column: 12)
!10968 = !DILocation(line: 6232, column: 29, scope: !10967)
!10969 = !DILocation(line: 6232, column: 12, scope: !10962)
!10970 = !DILocation(line: 6234, column: 11, scope: !10971)
!10971 = distinct !DILexicalBlock(scope: !10972, file: !3, line: 6234, column: 11)
!10972 = distinct !DILexicalBlock(scope: !10967, file: !3, line: 6233, column: 5)
!10973 = !DILocation(line: 6234, column: 11, scope: !10972)
!10974 = !DILocation(line: 6235, column: 9, scope: !10971)
!10975 = !DILocation(line: 6237, column: 2, scope: !10971)
!10976 = !DILocation(line: 6239, column: 12, scope: !10977)
!10977 = distinct !DILexicalBlock(scope: !10967, file: !3, line: 6239, column: 12)
!10978 = !DILocation(line: 6239, column: 29, scope: !10977)
!10979 = !DILocation(line: 6239, column: 12, scope: !10967)
!10980 = !DILocation(line: 6241, column: 30, scope: !10981)
!10981 = distinct !DILexicalBlock(scope: !10982, file: !3, line: 6241, column: 11)
!10982 = distinct !DILexicalBlock(scope: !10977, file: !3, line: 6240, column: 5)
!10983 = !DILocation(line: 6241, column: 11, scope: !10981)
!10984 = !DILocation(line: 6241, column: 11, scope: !10982)
!10985 = !DILocation(line: 6242, column: 6, scope: !10981)
!10986 = !DILocation(line: 6242, column: 2, scope: !10981)
!10987 = !DILocation(line: 6243, column: 18, scope: !10988)
!10988 = distinct !DILexicalBlock(scope: !10981, file: !3, line: 6243, column: 16)
!10989 = !DILocation(line: 6244, column: 9, scope: !10988)
!10990 = !DILocation(line: 6244, column: 12, scope: !10988)
!10991 = !DILocation(line: 6245, column: 9, scope: !10988)
!10992 = !DILocation(line: 6245, column: 14, scope: !10988)
!10993 = !DILocation(line: 6243, column: 16, scope: !10981)
!10994 = !DILocation(line: 6251, column: 8, scope: !10995)
!10995 = distinct !DILexicalBlock(scope: !10996, file: !3, line: 6251, column: 8)
!10996 = distinct !DILexicalBlock(scope: !10988, file: !3, line: 6246, column: 2)
!10997 = !DILocation(line: 6251, column: 32, scope: !10995)
!10998 = !DILocation(line: 6251, column: 16, scope: !10995)
!10999 = !DILocation(line: 6251, column: 14, scope: !10995)
!11000 = !DILocation(line: 6251, column: 8, scope: !10996)
!11001 = !DILocation(line: 6252, column: 12, scope: !10995)
!11002 = !DILocation(line: 6252, column: 18, scope: !10995)
!11003 = !DILocation(line: 6252, column: 10, scope: !10995)
!11004 = !DILocation(line: 6252, column: 6, scope: !10995)
!11005 = !DILocation(line: 6254, column: 10, scope: !10995)
!11006 = !DILocation(line: 6255, column: 2, scope: !10996)
!11007 = !DILocation(line: 6256, column: 16, scope: !11008)
!11008 = distinct !DILexicalBlock(scope: !10988, file: !3, line: 6256, column: 16)
!11009 = !DILocation(line: 6256, column: 40, scope: !11008)
!11010 = !DILocation(line: 6256, column: 24, scope: !11008)
!11011 = !DILocation(line: 6256, column: 22, scope: !11008)
!11012 = !DILocation(line: 6256, column: 16, scope: !10988)
!11013 = !DILocation(line: 6257, column: 8, scope: !11008)
!11014 = !DILocation(line: 6257, column: 14, scope: !11008)
!11015 = !DILocation(line: 6257, column: 6, scope: !11008)
!11016 = !DILocation(line: 6257, column: 2, scope: !11008)
!11017 = !DILocation(line: 6258, column: 16, scope: !11018)
!11018 = distinct !DILexicalBlock(scope: !11008, file: !3, line: 6258, column: 16)
!11019 = !DILocation(line: 6258, column: 22, scope: !11018)
!11020 = !DILocation(line: 6258, column: 25, scope: !11018)
!11021 = !DILocation(line: 6258, column: 46, scope: !11018)
!11022 = !DILocation(line: 6258, column: 16, scope: !11008)
!11023 = !DILocation(line: 6262, column: 6, scope: !11018)
!11024 = !DILocation(line: 6262, column: 2, scope: !11018)
!11025 = !DILocation(line: 6263, column: 16, scope: !11026)
!11026 = distinct !DILexicalBlock(scope: !11018, file: !3, line: 6263, column: 16)
!11027 = !DILocation(line: 6263, column: 48, scope: !11026)
!11028 = !DILocation(line: 6263, column: 16, scope: !11018)
!11029 = !DILocation(line: 6264, column: 6, scope: !11026)
!11030 = !DILocation(line: 6264, column: 2, scope: !11026)
!11031 = !DILocation(line: 6266, column: 6, scope: !11026)
!11032 = !DILocation(line: 6267, column: 5, scope: !10982)
!11033 = !DILocation(line: 6268, column: 12, scope: !11034)
!11034 = distinct !DILexicalBlock(scope: !10977, file: !3, line: 6268, column: 12)
!11035 = !DILocation(line: 6268, column: 29, scope: !11034)
!11036 = !DILocation(line: 6268, column: 12, scope: !10977)
!11037 = !DILocation(line: 6270, column: 12, scope: !11038)
!11038 = distinct !DILexicalBlock(scope: !11039, file: !3, line: 6270, column: 11)
!11039 = distinct !DILexicalBlock(scope: !11034, file: !3, line: 6269, column: 5)
!11040 = !DILocation(line: 6270, column: 36, scope: !11038)
!11041 = !DILocation(line: 6270, column: 20, scope: !11038)
!11042 = !DILocation(line: 6270, column: 18, scope: !11038)
!11043 = !DILocation(line: 6271, column: 4, scope: !11038)
!11044 = !DILocation(line: 6271, column: 7, scope: !11038)
!11045 = !DILocation(line: 6272, column: 4, scope: !11038)
!11046 = !DILocation(line: 6272, column: 9, scope: !11038)
!11047 = !DILocation(line: 6270, column: 11, scope: !11039)
!11048 = !DILocation(line: 6273, column: 6, scope: !11038)
!11049 = !DILocation(line: 6273, column: 2, scope: !11038)
!11050 = !DILocation(line: 6275, column: 6, scope: !11038)
!11051 = !DILocation(line: 6276, column: 5, scope: !11039)
!11052 = !DILocation(line: 6278, column: 9, scope: !11034)
!11053 = !DILocation(line: 6281, column: 7, scope: !11054)
!11054 = distinct !DILexicalBlock(scope: !10952, file: !3, line: 6281, column: 7)
!11055 = !DILocation(line: 6281, column: 24, scope: !11054)
!11056 = !DILocation(line: 6281, column: 36, scope: !11054)
!11057 = !DILocation(line: 6281, column: 39, scope: !11054)
!11058 = !DILocation(line: 6281, column: 7, scope: !10952)
!11059 = !DILocation(line: 6283, column: 11, scope: !11060)
!11060 = distinct !DILexicalBlock(scope: !11061, file: !3, line: 6283, column: 11)
!11061 = distinct !DILexicalBlock(scope: !11054, file: !3, line: 6282, column: 5)
!11062 = !DILocation(line: 6283, column: 33, scope: !11060)
!11063 = !DILocation(line: 6283, column: 11, scope: !11061)
!11064 = !DILocation(line: 6285, column: 8, scope: !11065)
!11065 = distinct !DILexicalBlock(scope: !11066, file: !3, line: 6285, column: 8)
!11066 = distinct !DILexicalBlock(scope: !11060, file: !3, line: 6284, column: 2)
!11067 = !DILocation(line: 6285, column: 8, scope: !11066)
!11068 = !DILocation(line: 6287, column: 27, scope: !11069)
!11069 = distinct !DILexicalBlock(scope: !11070, file: !3, line: 6287, column: 12)
!11070 = distinct !DILexicalBlock(scope: !11065, file: !3, line: 6286, column: 6)
!11071 = !DILocation(line: 6287, column: 12, scope: !11069)
!11072 = !DILocation(line: 6287, column: 12, scope: !11070)
!11073 = !DILocation(line: 6288, column: 7, scope: !11069)
!11074 = !DILocation(line: 6288, column: 3, scope: !11069)
!11075 = !DILocation(line: 6289, column: 6, scope: !11070)
!11076 = !DILocation(line: 6292, column: 27, scope: !11077)
!11077 = distinct !DILexicalBlock(scope: !11078, file: !3, line: 6292, column: 12)
!11078 = distinct !DILexicalBlock(scope: !11065, file: !3, line: 6291, column: 6)
!11079 = !DILocation(line: 6292, column: 12, scope: !11077)
!11080 = !DILocation(line: 6292, column: 12, scope: !11078)
!11081 = !DILocation(line: 6293, column: 7, scope: !11077)
!11082 = !DILocation(line: 6293, column: 3, scope: !11077)
!11083 = !DILocation(line: 6295, column: 2, scope: !11066)
!11084 = !DILocation(line: 6298, column: 16, scope: !11085)
!11085 = distinct !DILexicalBlock(scope: !11060, file: !3, line: 6298, column: 16)
!11086 = !DILocation(line: 6298, column: 20, scope: !11085)
!11087 = !DILocation(line: 6299, column: 9, scope: !11085)
!11088 = !DILocation(line: 6299, column: 13, scope: !11085)
!11089 = !DILocation(line: 6300, column: 6, scope: !11085)
!11090 = !DILocation(line: 6300, column: 28, scope: !11085)
!11091 = !DILocation(line: 6300, column: 9, scope: !11085)
!11092 = !DILocation(line: 6298, column: 16, scope: !11060)
!11093 = !DILocation(line: 6301, column: 6, scope: !11085)
!11094 = !DILocation(line: 6301, column: 2, scope: !11085)
!11095 = !DILocation(line: 6303, column: 6, scope: !11085)
!11096 = !DILocation(line: 6304, column: 5, scope: !11061)
!11097 = !DILocation(line: 6307, column: 20, scope: !11098)
!11098 = distinct !DILexicalBlock(scope: !11054, file: !3, line: 6307, column: 12)
!11099 = !DILocation(line: 6307, column: 37, scope: !11098)
!11100 = !DILocation(line: 6307, column: 12, scope: !11098)
!11101 = !DILocation(line: 6307, column: 12, scope: !11054)
!11102 = !DILocation(line: 6309, column: 11, scope: !11103)
!11103 = distinct !DILexicalBlock(scope: !11104, file: !3, line: 6309, column: 11)
!11104 = distinct !DILexicalBlock(scope: !11098, file: !3, line: 6308, column: 5)
!11105 = !DILocation(line: 6309, column: 15, scope: !11103)
!11106 = !DILocation(line: 6309, column: 11, scope: !11104)
!11107 = !DILocation(line: 6310, column: 6, scope: !11103)
!11108 = !DILocation(line: 6310, column: 2, scope: !11103)
!11109 = !DILocation(line: 6311, column: 24, scope: !11110)
!11110 = distinct !DILexicalBlock(scope: !11103, file: !3, line: 6311, column: 16)
!11111 = !DILocation(line: 6311, column: 16, scope: !11110)
!11112 = !DILocation(line: 6311, column: 45, scope: !11110)
!11113 = !DILocation(line: 6311, column: 48, scope: !11110)
!11114 = !DILocation(line: 6311, column: 52, scope: !11110)
!11115 = !DILocation(line: 6311, column: 16, scope: !11103)
!11116 = !DILocation(line: 6312, column: 6, scope: !11110)
!11117 = !DILocation(line: 6312, column: 2, scope: !11110)
!11118 = !DILocation(line: 6314, column: 6, scope: !11110)
!11119 = !DILocation(line: 6315, column: 5, scope: !11104)
!11120 = !DILocation(line: 6317, column: 10, scope: !10952)
!11121 = !DILocation(line: 6317, column: 3, scope: !10952)
!11122 = !DILocation(line: 6318, column: 1, scope: !10952)
!11123 = distinct !DISubprogram(name: "bss_initializer_p", scope: !3, file: !3, line: 1100, type: !8588, scopeLine: 1101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11124 = !DILocalVariable(name: "decl", arg: 1, scope: !11123, file: !3, line: 1100, type: !8590)
!11125 = !DILocation(line: 1100, column: 31, scope: !11123)
!11126 = !DILocation(line: 1102, column: 11, scope: !11123)
!11127 = !DILocation(line: 1102, column: 31, scope: !11123)
!11128 = !DILocation(line: 1103, column: 4, scope: !11123)
!11129 = !DILocation(line: 1103, column: 7, scope: !11123)
!11130 = !DILocation(line: 1103, column: 30, scope: !11123)
!11131 = !DILocation(line: 1103, column: 27, scope: !11123)
!11132 = !DILocation(line: 1104, column: 4, scope: !11123)
!11133 = !DILocation(line: 1104, column: 8, scope: !11123)
!11134 = !DILocation(line: 1107, column: 8, scope: !11123)
!11135 = !DILocation(line: 1107, column: 12, scope: !11123)
!11136 = !DILocation(line: 1108, column: 8, scope: !11123)
!11137 = !DILocation(line: 1108, column: 30, scope: !11123)
!11138 = !DILocation(line: 1108, column: 11, scope: !11123)
!11139 = !DILocation(line: 0, scope: !11123)
!11140 = !DILocation(line: 1102, column: 10, scope: !11123)
!11141 = !DILocation(line: 1102, column: 3, scope: !11123)
!11142 = distinct !DISubprogram(name: "default_elf_select_section", scope: !3, file: !3, line: 6341, type: !10897, scopeLine: 6343, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11143 = !DILocalVariable(name: "decl", arg: 1, scope: !11142, file: !3, line: 6341, type: !2702)
!11144 = !DILocation(line: 6341, column: 34, scope: !11142)
!11145 = !DILocalVariable(name: "reloc", arg: 2, scope: !11142, file: !3, line: 6341, type: !2798)
!11146 = !DILocation(line: 6341, column: 44, scope: !11142)
!11147 = !DILocalVariable(name: "align", arg: 3, scope: !11142, file: !3, line: 6342, type: !2755)
!11148 = !DILocation(line: 6342, column: 31, scope: !11142)
!11149 = !DILocalVariable(name: "sname", scope: !11142, file: !3, line: 6344, type: !2692)
!11150 = !DILocation(line: 6344, column: 15, scope: !11142)
!11151 = !DILocation(line: 6345, column: 40, scope: !11142)
!11152 = !DILocation(line: 6345, column: 46, scope: !11142)
!11153 = !DILocation(line: 6345, column: 11, scope: !11142)
!11154 = !DILocation(line: 6345, column: 3, scope: !11142)
!11155 = !DILocation(line: 6349, column: 7, scope: !11156)
!11156 = distinct !DILexicalBlock(scope: !11142, file: !3, line: 6346, column: 5)
!11157 = !DILocation(line: 6351, column: 14, scope: !11156)
!11158 = !DILocation(line: 6351, column: 7, scope: !11156)
!11159 = !DILocation(line: 6353, column: 40, scope: !11156)
!11160 = !DILocation(line: 6353, column: 46, scope: !11156)
!11161 = !DILocation(line: 6353, column: 14, scope: !11156)
!11162 = !DILocation(line: 6353, column: 7, scope: !11156)
!11163 = !DILocation(line: 6355, column: 40, scope: !11156)
!11164 = !DILocation(line: 6355, column: 61, scope: !11156)
!11165 = !DILocation(line: 6355, column: 14, scope: !11156)
!11166 = !DILocation(line: 6355, column: 7, scope: !11156)
!11167 = !DILocation(line: 6357, column: 42, scope: !11156)
!11168 = !DILocation(line: 6357, column: 60, scope: !11156)
!11169 = !DILocation(line: 6357, column: 14, scope: !11156)
!11170 = !DILocation(line: 6357, column: 7, scope: !11156)
!11171 = !DILocation(line: 6359, column: 13, scope: !11156)
!11172 = !DILocation(line: 6360, column: 7, scope: !11156)
!11173 = !DILocation(line: 6362, column: 14, scope: !11156)
!11174 = !DILocation(line: 6362, column: 7, scope: !11156)
!11175 = !DILocation(line: 6364, column: 13, scope: !11156)
!11176 = !DILocation(line: 6365, column: 7, scope: !11156)
!11177 = !DILocation(line: 6367, column: 13, scope: !11156)
!11178 = !DILocation(line: 6368, column: 7, scope: !11156)
!11179 = !DILocation(line: 6370, column: 13, scope: !11156)
!11180 = !DILocation(line: 6371, column: 7, scope: !11156)
!11181 = !DILocation(line: 6373, column: 13, scope: !11156)
!11182 = !DILocation(line: 6374, column: 7, scope: !11156)
!11183 = !DILocation(line: 6376, column: 13, scope: !11156)
!11184 = !DILocation(line: 6377, column: 7, scope: !11156)
!11185 = !DILocation(line: 6379, column: 13, scope: !11156)
!11186 = !DILocation(line: 6380, column: 7, scope: !11156)
!11187 = !DILocation(line: 6382, column: 11, scope: !11188)
!11188 = distinct !DILexicalBlock(scope: !11156, file: !3, line: 6382, column: 11)
!11189 = !DILocation(line: 6382, column: 11, scope: !11156)
!11190 = !DILocation(line: 6383, column: 9, scope: !11188)
!11191 = !DILocation(line: 6383, column: 2, scope: !11188)
!11192 = !DILocation(line: 6384, column: 13, scope: !11156)
!11193 = !DILocation(line: 6385, column: 7, scope: !11156)
!11194 = !DILocation(line: 6387, column: 13, scope: !11156)
!11195 = !DILocation(line: 6388, column: 7, scope: !11156)
!11196 = !DILocation(line: 6390, column: 13, scope: !11156)
!11197 = !DILocation(line: 6391, column: 7, scope: !11156)
!11198 = !DILocation(line: 6393, column: 30, scope: !11156)
!11199 = !DILocation(line: 6393, column: 13, scope: !11156)
!11200 = !DILocation(line: 6394, column: 7, scope: !11156)
!11201 = !DILocation(line: 6396, column: 30, scope: !11156)
!11202 = !DILocation(line: 6396, column: 13, scope: !11156)
!11203 = !DILocation(line: 6397, column: 7, scope: !11156)
!11204 = !DILocation(line: 6399, column: 7, scope: !11156)
!11205 = !DILocation(line: 6400, column: 5, scope: !11156)
!11206 = !DILocation(line: 6402, column: 8, scope: !11207)
!11207 = distinct !DILexicalBlock(scope: !11142, file: !3, line: 6402, column: 7)
!11208 = !DILocation(line: 6402, column: 7, scope: !11142)
!11209 = !DILocation(line: 6403, column: 10, scope: !11207)
!11210 = !DILocation(line: 6403, column: 5, scope: !11207)
!11211 = !DILocation(line: 6404, column: 29, scope: !11142)
!11212 = !DILocation(line: 6404, column: 35, scope: !11142)
!11213 = !DILocation(line: 6404, column: 42, scope: !11142)
!11214 = !DILocation(line: 6404, column: 10, scope: !11142)
!11215 = !DILocation(line: 6404, column: 3, scope: !11142)
!11216 = !DILocation(line: 6405, column: 1, scope: !11142)
!11217 = distinct !DISubprogram(name: "mergeable_string_section", scope: !3, file: !3, line: 931, type: !11218, scopeLine: 934, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11218 = !DISubroutineType(types: !11219)
!11219 = !{!3109, !2702, !2755, !7}
!11220 = !DILocalVariable(name: "decl", arg: 1, scope: !11217, file: !3, line: 931, type: !2702)
!11221 = !DILocation(line: 931, column: 32, scope: !11217)
!11222 = !DILocalVariable(name: "align", arg: 2, scope: !11217, file: !3, line: 932, type: !2755)
!11223 = !DILocation(line: 932, column: 29, scope: !11217)
!11224 = !DILocalVariable(name: "flags", arg: 3, scope: !11217, file: !3, line: 933, type: !7)
!11225 = !DILocation(line: 933, column: 19, scope: !11217)
!11226 = !DILocalVariable(name: "len", scope: !11217, file: !3, line: 935, type: !2757)
!11227 = !DILocation(line: 935, column: 17, scope: !11217)
!11228 = !DILocation(line: 937, column: 29, scope: !11229)
!11229 = distinct !DILexicalBlock(scope: !11217, file: !3, line: 937, column: 7)
!11230 = !DILocation(line: 938, column: 7, scope: !11229)
!11231 = !DILocation(line: 938, column: 10, scope: !11229)
!11232 = !DILocation(line: 938, column: 27, scope: !11229)
!11233 = !DILocation(line: 939, column: 7, scope: !11229)
!11234 = !DILocation(line: 939, column: 10, scope: !11229)
!11235 = !DILocation(line: 939, column: 39, scope: !11229)
!11236 = !DILocation(line: 940, column: 7, scope: !11229)
!11237 = !DILocation(line: 940, column: 10, scope: !11229)
!11238 = !DILocation(line: 940, column: 16, scope: !11229)
!11239 = !DILocation(line: 941, column: 7, scope: !11229)
!11240 = !DILocation(line: 941, column: 36, scope: !11229)
!11241 = !DILocation(line: 941, column: 17, scope: !11229)
!11242 = !DILocation(line: 941, column: 15, scope: !11229)
!11243 = !DILocation(line: 941, column: 55, scope: !11229)
!11244 = !DILocation(line: 942, column: 7, scope: !11229)
!11245 = !DILocation(line: 942, column: 10, scope: !11229)
!11246 = !DILocation(line: 942, column: 39, scope: !11229)
!11247 = !DILocation(line: 942, column: 36, scope: !11229)
!11248 = !DILocation(line: 937, column: 7, scope: !11217)
!11249 = !DILocalVariable(name: "mode", scope: !11250, file: !3, line: 944, type: !5)
!11250 = distinct !DILexicalBlock(scope: !11229, file: !3, line: 943, column: 5)
!11251 = !DILocation(line: 944, column: 25, scope: !11250)
!11252 = !DILocalVariable(name: "modesize", scope: !11250, file: !3, line: 945, type: !7)
!11253 = !DILocation(line: 945, column: 20, scope: !11250)
!11254 = !DILocalVariable(name: "str", scope: !11250, file: !3, line: 946, type: !2692)
!11255 = !DILocation(line: 946, column: 19, scope: !11250)
!11256 = !DILocalVariable(name: "i", scope: !11250, file: !3, line: 947, type: !2757)
!11257 = !DILocation(line: 947, column: 21, scope: !11250)
!11258 = !DILocalVariable(name: "j", scope: !11250, file: !3, line: 948, type: !2798)
!11259 = !DILocation(line: 948, column: 11, scope: !11250)
!11260 = !DILocalVariable(name: "unit", scope: !11250, file: !3, line: 948, type: !2798)
!11261 = !DILocation(line: 948, column: 14, scope: !11250)
!11262 = !DILocalVariable(name: "name", scope: !11250, file: !3, line: 949, type: !11263)
!11263 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2694, size: 240, elements: !11264)
!11264 = !{!11265}
!11265 = !DISubrange(count: 30)
!11266 = !DILocation(line: 949, column: 12, scope: !11250)
!11267 = !DILocation(line: 951, column: 14, scope: !11250)
!11268 = !DILocation(line: 951, column: 12, scope: !11250)
!11269 = !DILocation(line: 952, column: 18, scope: !11250)
!11270 = !DILocation(line: 952, column: 16, scope: !11250)
!11271 = !DILocation(line: 953, column: 11, scope: !11272)
!11272 = distinct !DILexicalBlock(scope: !11250, file: !3, line: 953, column: 11)
!11273 = !DILocation(line: 953, column: 20, scope: !11272)
!11274 = !DILocation(line: 953, column: 25, scope: !11272)
!11275 = !DILocation(line: 953, column: 28, scope: !11272)
!11276 = !DILocation(line: 953, column: 37, scope: !11272)
!11277 = !DILocation(line: 954, column: 4, scope: !11272)
!11278 = !DILocation(line: 954, column: 8, scope: !11272)
!11279 = !DILocation(line: 954, column: 20, scope: !11272)
!11280 = !DILocation(line: 954, column: 29, scope: !11272)
!11281 = !DILocation(line: 954, column: 17, scope: !11272)
!11282 = !DILocation(line: 954, column: 35, scope: !11272)
!11283 = !DILocation(line: 953, column: 11, scope: !11250)
!11284 = !DILocation(line: 956, column: 8, scope: !11285)
!11285 = distinct !DILexicalBlock(scope: !11286, file: !3, line: 956, column: 8)
!11286 = distinct !DILexicalBlock(scope: !11272, file: !3, line: 955, column: 2)
!11287 = !DILocation(line: 956, column: 16, scope: !11285)
!11288 = !DILocation(line: 956, column: 14, scope: !11285)
!11289 = !DILocation(line: 956, column: 8, scope: !11286)
!11290 = !DILocation(line: 957, column: 14, scope: !11285)
!11291 = !DILocation(line: 957, column: 12, scope: !11285)
!11292 = !DILocation(line: 957, column: 6, scope: !11285)
!11293 = !DILocation(line: 959, column: 10, scope: !11286)
!11294 = !DILocation(line: 959, column: 8, scope: !11286)
!11295 = !DILocation(line: 960, column: 11, scope: !11286)
!11296 = !DILocation(line: 960, column: 9, scope: !11286)
!11297 = !DILocation(line: 963, column: 11, scope: !11298)
!11298 = distinct !DILexicalBlock(scope: !11286, file: !3, line: 963, column: 4)
!11299 = !DILocation(line: 963, column: 9, scope: !11298)
!11300 = !DILocation(line: 963, column: 16, scope: !11301)
!11301 = distinct !DILexicalBlock(scope: !11298, file: !3, line: 963, column: 4)
!11302 = !DILocation(line: 963, column: 20, scope: !11301)
!11303 = !DILocation(line: 963, column: 18, scope: !11301)
!11304 = !DILocation(line: 963, column: 4, scope: !11298)
!11305 = !DILocation(line: 965, column: 15, scope: !11306)
!11306 = distinct !DILexicalBlock(scope: !11307, file: !3, line: 965, column: 8)
!11307 = distinct !DILexicalBlock(scope: !11301, file: !3, line: 964, column: 6)
!11308 = !DILocation(line: 965, column: 13, scope: !11306)
!11309 = !DILocation(line: 965, column: 20, scope: !11310)
!11310 = distinct !DILexicalBlock(scope: !11306, file: !3, line: 965, column: 8)
!11311 = !DILocation(line: 965, column: 24, scope: !11310)
!11312 = !DILocation(line: 965, column: 22, scope: !11310)
!11313 = !DILocation(line: 965, column: 8, scope: !11306)
!11314 = !DILocation(line: 966, column: 7, scope: !11315)
!11315 = distinct !DILexicalBlock(scope: !11310, file: !3, line: 966, column: 7)
!11316 = !DILocation(line: 966, column: 11, scope: !11315)
!11317 = !DILocation(line: 966, column: 15, scope: !11315)
!11318 = !DILocation(line: 966, column: 13, scope: !11315)
!11319 = !DILocation(line: 966, column: 18, scope: !11315)
!11320 = !DILocation(line: 966, column: 7, scope: !11310)
!11321 = !DILocation(line: 967, column: 5, scope: !11315)
!11322 = !DILocation(line: 966, column: 21, scope: !11315)
!11323 = !DILocation(line: 965, column: 31, scope: !11310)
!11324 = !DILocation(line: 965, column: 8, scope: !11310)
!11325 = distinct !{!11325, !11313, !11326}
!11326 = !DILocation(line: 967, column: 5, scope: !11306)
!11327 = !DILocation(line: 968, column: 12, scope: !11328)
!11328 = distinct !DILexicalBlock(scope: !11307, file: !3, line: 968, column: 12)
!11329 = !DILocation(line: 968, column: 17, scope: !11328)
!11330 = !DILocation(line: 968, column: 14, scope: !11328)
!11331 = !DILocation(line: 968, column: 12, scope: !11307)
!11332 = !DILocation(line: 969, column: 3, scope: !11328)
!11333 = !DILocation(line: 970, column: 6, scope: !11307)
!11334 = !DILocation(line: 963, column: 30, scope: !11301)
!11335 = !DILocation(line: 963, column: 27, scope: !11301)
!11336 = !DILocation(line: 963, column: 4, scope: !11301)
!11337 = distinct !{!11337, !11304, !11338}
!11338 = !DILocation(line: 970, column: 6, scope: !11298)
!11339 = !DILocation(line: 971, column: 8, scope: !11340)
!11340 = distinct !DILexicalBlock(scope: !11286, file: !3, line: 971, column: 8)
!11341 = !DILocation(line: 971, column: 13, scope: !11340)
!11342 = !DILocation(line: 971, column: 19, scope: !11340)
!11343 = !DILocation(line: 971, column: 17, scope: !11340)
!11344 = !DILocation(line: 971, column: 10, scope: !11340)
!11345 = !DILocation(line: 971, column: 8, scope: !11286)
!11346 = !DILocation(line: 973, column: 17, scope: !11347)
!11347 = distinct !DILexicalBlock(scope: !11340, file: !3, line: 972, column: 6)
!11348 = !DILocation(line: 973, column: 43, scope: !11347)
!11349 = !DILocation(line: 973, column: 52, scope: !11347)
!11350 = !DILocation(line: 974, column: 17, scope: !11347)
!11351 = !DILocation(line: 974, column: 23, scope: !11347)
!11352 = !DILocation(line: 974, column: 10, scope: !11347)
!11353 = !DILocation(line: 973, column: 8, scope: !11347)
!11354 = !DILocation(line: 975, column: 18, scope: !11347)
!11355 = !DILocation(line: 975, column: 27, scope: !11347)
!11356 = !DILocation(line: 975, column: 32, scope: !11347)
!11357 = !DILocation(line: 975, column: 48, scope: !11347)
!11358 = !DILocation(line: 975, column: 14, scope: !11347)
!11359 = !DILocation(line: 976, column: 28, scope: !11347)
!11360 = !DILocation(line: 976, column: 34, scope: !11347)
!11361 = !DILocation(line: 976, column: 15, scope: !11347)
!11362 = !DILocation(line: 976, column: 8, scope: !11347)
!11363 = !DILocation(line: 978, column: 2, scope: !11286)
!11364 = !DILocation(line: 979, column: 5, scope: !11250)
!11365 = !DILocation(line: 981, column: 10, scope: !11217)
!11366 = !DILocation(line: 981, column: 3, scope: !11217)
!11367 = !DILocation(line: 982, column: 1, scope: !11217)
!11368 = distinct !DISubprogram(name: "default_unique_section", scope: !3, file: !3, line: 6411, type: !3851, scopeLine: 6412, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11369 = !DILocalVariable(name: "decl", arg: 1, scope: !11368, file: !3, line: 6411, type: !2702)
!11370 = !DILocation(line: 6411, column: 30, scope: !11368)
!11371 = !DILocalVariable(name: "reloc", arg: 2, scope: !11368, file: !3, line: 6411, type: !2798)
!11372 = !DILocation(line: 6411, column: 40, scope: !11368)
!11373 = !DILocalVariable(name: "one_only", scope: !11368, file: !3, line: 6414, type: !2820)
!11374 = !DILocation(line: 6414, column: 8, scope: !11368)
!11375 = !DILocation(line: 6414, column: 19, scope: !11368)
!11376 = !DILocation(line: 6414, column: 40, scope: !11368)
!11377 = !DILocation(line: 0, scope: !11368)
!11378 = !DILocalVariable(name: "prefix", scope: !11368, file: !3, line: 6415, type: !2692)
!11379 = !DILocation(line: 6415, column: 15, scope: !11368)
!11380 = !DILocalVariable(name: "name", scope: !11368, file: !3, line: 6415, type: !2692)
!11381 = !DILocation(line: 6415, column: 24, scope: !11368)
!11382 = !DILocalVariable(name: "linkonce", scope: !11368, file: !3, line: 6415, type: !2692)
!11383 = !DILocation(line: 6415, column: 31, scope: !11368)
!11384 = !DILocalVariable(name: "string", scope: !11368, file: !3, line: 6416, type: !2964)
!11385 = !DILocation(line: 6416, column: 9, scope: !11368)
!11386 = !DILocation(line: 6418, column: 40, scope: !11368)
!11387 = !DILocation(line: 6418, column: 46, scope: !11368)
!11388 = !DILocation(line: 6418, column: 11, scope: !11368)
!11389 = !DILocation(line: 6418, column: 3, scope: !11368)
!11390 = !DILocation(line: 6421, column: 16, scope: !11391)
!11391 = distinct !DILexicalBlock(scope: !11368, file: !3, line: 6419, column: 5)
!11392 = !DILocation(line: 6421, column: 14, scope: !11391)
!11393 = !DILocation(line: 6422, column: 7, scope: !11391)
!11394 = !DILocation(line: 6427, column: 16, scope: !11391)
!11395 = !DILocation(line: 6427, column: 14, scope: !11391)
!11396 = !DILocation(line: 6428, column: 7, scope: !11391)
!11397 = !DILocation(line: 6430, column: 16, scope: !11391)
!11398 = !DILocation(line: 6430, column: 14, scope: !11391)
!11399 = !DILocation(line: 6431, column: 7, scope: !11391)
!11400 = !DILocation(line: 6433, column: 16, scope: !11391)
!11401 = !DILocation(line: 6433, column: 14, scope: !11391)
!11402 = !DILocation(line: 6434, column: 7, scope: !11391)
!11403 = !DILocation(line: 6436, column: 16, scope: !11391)
!11404 = !DILocation(line: 6436, column: 14, scope: !11391)
!11405 = !DILocation(line: 6437, column: 7, scope: !11391)
!11406 = !DILocation(line: 6439, column: 16, scope: !11391)
!11407 = !DILocation(line: 6439, column: 14, scope: !11391)
!11408 = !DILocation(line: 6440, column: 7, scope: !11391)
!11409 = !DILocation(line: 6442, column: 16, scope: !11391)
!11410 = !DILocation(line: 6442, column: 14, scope: !11391)
!11411 = !DILocation(line: 6443, column: 7, scope: !11391)
!11412 = !DILocation(line: 6445, column: 16, scope: !11391)
!11413 = !DILocation(line: 6445, column: 14, scope: !11391)
!11414 = !DILocation(line: 6446, column: 7, scope: !11391)
!11415 = !DILocation(line: 6448, column: 16, scope: !11391)
!11416 = !DILocation(line: 6448, column: 14, scope: !11391)
!11417 = !DILocation(line: 6449, column: 7, scope: !11391)
!11418 = !DILocation(line: 6451, column: 16, scope: !11391)
!11419 = !DILocation(line: 6451, column: 14, scope: !11391)
!11420 = !DILocation(line: 6452, column: 7, scope: !11391)
!11421 = !DILocation(line: 6454, column: 16, scope: !11391)
!11422 = !DILocation(line: 6454, column: 14, scope: !11391)
!11423 = !DILocation(line: 6455, column: 7, scope: !11391)
!11424 = !DILocation(line: 6457, column: 16, scope: !11391)
!11425 = !DILocation(line: 6457, column: 14, scope: !11391)
!11426 = !DILocation(line: 6458, column: 7, scope: !11391)
!11427 = !DILocation(line: 6460, column: 16, scope: !11391)
!11428 = !DILocation(line: 6460, column: 14, scope: !11391)
!11429 = !DILocation(line: 6461, column: 7, scope: !11391)
!11430 = !DILocation(line: 6463, column: 31, scope: !11391)
!11431 = !DILocation(line: 6463, column: 14, scope: !11391)
!11432 = !DILocation(line: 6464, column: 7, scope: !11391)
!11433 = !DILocation(line: 6466, column: 31, scope: !11391)
!11434 = !DILocation(line: 6466, column: 14, scope: !11391)
!11435 = !DILocation(line: 6467, column: 7, scope: !11391)
!11436 = !DILocation(line: 6469, column: 7, scope: !11391)
!11437 = !DILocation(line: 6470, column: 5, scope: !11391)
!11438 = !DILocation(line: 6472, column: 10, scope: !11368)
!11439 = !DILocation(line: 6472, column: 8, scope: !11368)
!11440 = !DILocation(line: 6473, column: 18, scope: !11368)
!11441 = !DILocation(line: 6473, column: 39, scope: !11368)
!11442 = !DILocation(line: 6473, column: 10, scope: !11368)
!11443 = !DILocation(line: 6473, column: 8, scope: !11368)
!11444 = !DILocation(line: 6477, column: 14, scope: !11368)
!11445 = !DILocation(line: 6477, column: 12, scope: !11368)
!11446 = !DILocation(line: 6479, column: 12, scope: !11368)
!11447 = !DILocation(line: 6479, column: 10, scope: !11368)
!11448 = !DILocation(line: 6481, column: 52, scope: !11368)
!11449 = !DILocation(line: 6481, column: 44, scope: !11368)
!11450 = !DILocation(line: 6481, column: 61, scope: !11368)
!11451 = !DILocation(line: 6481, column: 30, scope: !11368)
!11452 = !DILocation(line: 6481, column: 3, scope: !11368)
!11453 = !DILocation(line: 6481, column: 28, scope: !11368)
!11454 = !DILocation(line: 6482, column: 1, scope: !11368)
!11455 = distinct !DISubprogram(name: "default_select_rtx_section", scope: !3, file: !3, line: 6529, type: !11456, scopeLine: 6532, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11456 = !DISubroutineType(types: !11457)
!11457 = !{!3109, !5, !2876, !2755}
!11458 = !DILocalVariable(name: "mode", arg: 1, scope: !11455, file: !3, line: 6529, type: !5)
!11459 = !DILocation(line: 6529, column: 47, scope: !11455)
!11460 = !DILocalVariable(name: "x", arg: 2, scope: !11455, file: !3, line: 6530, type: !2876)
!11461 = !DILocation(line: 6530, column: 12, scope: !11455)
!11462 = !DILocalVariable(name: "align", arg: 3, scope: !11455, file: !3, line: 6531, type: !2755)
!11463 = !DILocation(line: 6531, column: 31, scope: !11455)
!11464 = !DILocation(line: 6533, column: 30, scope: !11465)
!11465 = distinct !DILexicalBlock(scope: !11455, file: !3, line: 6533, column: 7)
!11466 = !DILocation(line: 6533, column: 7, scope: !11465)
!11467 = !DILocation(line: 6533, column: 51, scope: !11465)
!11468 = !DILocation(line: 6533, column: 35, scope: !11465)
!11469 = !DILocation(line: 6533, column: 33, scope: !11465)
!11470 = !DILocation(line: 6533, column: 7, scope: !11455)
!11471 = !DILocation(line: 6534, column: 12, scope: !11465)
!11472 = !DILocation(line: 6534, column: 5, scope: !11465)
!11473 = !DILocation(line: 6536, column: 12, scope: !11465)
!11474 = !DILocation(line: 6536, column: 5, scope: !11465)
!11475 = !DILocation(line: 6537, column: 1, scope: !11455)
!11476 = distinct !DISubprogram(name: "compute_reloc_for_rtx", scope: !3, file: !3, line: 6510, type: !11477, scopeLine: 6511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11477 = !DISubroutineType(types: !11478)
!11478 = !{!2798, !2876}
!11479 = !DILocalVariable(name: "x", arg: 1, scope: !11476, file: !3, line: 6510, type: !2876)
!11480 = !DILocation(line: 6510, column: 28, scope: !11476)
!11481 = !DILocalVariable(name: "reloc", scope: !11476, file: !3, line: 6512, type: !2798)
!11482 = !DILocation(line: 6512, column: 7, scope: !11476)
!11483 = !DILocation(line: 6514, column: 11, scope: !11476)
!11484 = !DILocation(line: 6514, column: 3, scope: !11476)
!11485 = !DILocation(line: 6519, column: 13, scope: !11486)
!11486 = distinct !DILexicalBlock(scope: !11476, file: !3, line: 6515, column: 5)
!11487 = !DILocation(line: 6520, column: 50, scope: !11486)
!11488 = !DILocation(line: 6520, column: 7, scope: !11486)
!11489 = !DILocation(line: 6521, column: 14, scope: !11486)
!11490 = !DILocation(line: 6521, column: 7, scope: !11486)
!11491 = !DILocation(line: 6524, column: 7, scope: !11486)
!11492 = !DILocation(line: 6526, column: 1, scope: !11476)
!11493 = distinct !DISubprogram(name: "default_elf_select_rtx_section", scope: !3, file: !3, line: 6540, type: !11456, scopeLine: 6542, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11494 = !DILocalVariable(name: "mode", arg: 1, scope: !11493, file: !3, line: 6540, type: !5)
!11495 = !DILocation(line: 6540, column: 51, scope: !11493)
!11496 = !DILocalVariable(name: "x", arg: 2, scope: !11493, file: !3, line: 6540, type: !2876)
!11497 = !DILocation(line: 6540, column: 61, scope: !11493)
!11498 = !DILocalVariable(name: "align", arg: 3, scope: !11493, file: !3, line: 6541, type: !2755)
!11499 = !DILocation(line: 6541, column: 28, scope: !11493)
!11500 = !DILocalVariable(name: "reloc", scope: !11493, file: !3, line: 6543, type: !2798)
!11501 = !DILocation(line: 6543, column: 7, scope: !11493)
!11502 = !DILocation(line: 6543, column: 38, scope: !11493)
!11503 = !DILocation(line: 6543, column: 15, scope: !11493)
!11504 = !DILocation(line: 6547, column: 7, scope: !11505)
!11505 = distinct !DILexicalBlock(scope: !11493, file: !3, line: 6547, column: 7)
!11506 = !DILocation(line: 6547, column: 31, scope: !11505)
!11507 = !DILocation(line: 6547, column: 15, scope: !11505)
!11508 = !DILocation(line: 6547, column: 13, scope: !11505)
!11509 = !DILocation(line: 6547, column: 7, scope: !11493)
!11510 = !DILocation(line: 6549, column: 11, scope: !11511)
!11511 = distinct !DILexicalBlock(scope: !11512, file: !3, line: 6549, column: 11)
!11512 = distinct !DILexicalBlock(scope: !11505, file: !3, line: 6548, column: 5)
!11513 = !DILocation(line: 6549, column: 17, scope: !11511)
!11514 = !DILocation(line: 6549, column: 11, scope: !11512)
!11515 = !DILocation(line: 6550, column: 9, scope: !11511)
!11516 = !DILocation(line: 6550, column: 2, scope: !11511)
!11517 = !DILocation(line: 6552, column: 9, scope: !11511)
!11518 = !DILocation(line: 6552, column: 2, scope: !11511)
!11519 = !DILocation(line: 6555, column: 38, scope: !11493)
!11520 = !DILocation(line: 6555, column: 44, scope: !11493)
!11521 = !DILocation(line: 6555, column: 10, scope: !11493)
!11522 = !DILocation(line: 6555, column: 3, scope: !11493)
!11523 = !DILocation(line: 6556, column: 1, scope: !11493)
!11524 = distinct !DISubprogram(name: "default_encode_section_info", scope: !3, file: !3, line: 6561, type: !11525, scopeLine: 6562, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11525 = !DISubroutineType(types: !11526)
!11526 = !{null, !2702, !2876, !2798}
!11527 = !DILocalVariable(name: "decl", arg: 1, scope: !11524, file: !3, line: 6561, type: !2702)
!11528 = !DILocation(line: 6561, column: 35, scope: !11524)
!11529 = !DILocalVariable(name: "rtl", arg: 2, scope: !11524, file: !3, line: 6561, type: !2876)
!11530 = !DILocation(line: 6561, column: 45, scope: !11524)
!11531 = !DILocalVariable(name: "first", arg: 3, scope: !11524, file: !3, line: 6561, type: !2798)
!11532 = !DILocation(line: 6561, column: 54, scope: !11524)
!11533 = !DILocalVariable(name: "symbol", scope: !11524, file: !3, line: 6563, type: !2876)
!11534 = !DILocation(line: 6563, column: 7, scope: !11524)
!11535 = !DILocalVariable(name: "flags", scope: !11524, file: !3, line: 6564, type: !2798)
!11536 = !DILocation(line: 6564, column: 7, scope: !11524)
!11537 = !DILocation(line: 6567, column: 8, scope: !11538)
!11538 = distinct !DILexicalBlock(scope: !11524, file: !3, line: 6567, column: 7)
!11539 = !DILocation(line: 6567, column: 7, scope: !11524)
!11540 = !DILocation(line: 6568, column: 5, scope: !11538)
!11541 = !DILocation(line: 6569, column: 12, scope: !11524)
!11542 = !DILocation(line: 6569, column: 10, scope: !11524)
!11543 = !DILocation(line: 6570, column: 7, scope: !11544)
!11544 = distinct !DILexicalBlock(scope: !11524, file: !3, line: 6570, column: 7)
!11545 = !DILocation(line: 6570, column: 25, scope: !11544)
!11546 = !DILocation(line: 6570, column: 7, scope: !11524)
!11547 = !DILocation(line: 6571, column: 5, scope: !11544)
!11548 = !DILocation(line: 6573, column: 11, scope: !11524)
!11549 = !DILocation(line: 6573, column: 37, scope: !11524)
!11550 = !DILocation(line: 6573, column: 9, scope: !11524)
!11551 = !DILocation(line: 6574, column: 7, scope: !11552)
!11552 = distinct !DILexicalBlock(scope: !11524, file: !3, line: 6574, column: 7)
!11553 = !DILocation(line: 6574, column: 24, scope: !11552)
!11554 = !DILocation(line: 6574, column: 7, scope: !11524)
!11555 = !DILocation(line: 6575, column: 11, scope: !11552)
!11556 = !DILocation(line: 6575, column: 5, scope: !11552)
!11557 = !DILocation(line: 6576, column: 15, scope: !11558)
!11558 = distinct !DILexicalBlock(scope: !11524, file: !3, line: 6576, column: 7)
!11559 = !DILocation(line: 6576, column: 30, scope: !11558)
!11560 = !DILocation(line: 6576, column: 7, scope: !11558)
!11561 = !DILocation(line: 6576, column: 7, scope: !11524)
!11562 = !DILocation(line: 6577, column: 11, scope: !11558)
!11563 = !DILocation(line: 6577, column: 5, scope: !11558)
!11564 = !DILocation(line: 6578, column: 7, scope: !11565)
!11565 = distinct !DILexicalBlock(scope: !11524, file: !3, line: 6578, column: 7)
!11566 = !DILocation(line: 6578, column: 24, scope: !11565)
!11567 = !DILocation(line: 6578, column: 36, scope: !11565)
!11568 = !DILocation(line: 6578, column: 39, scope: !11565)
!11569 = !DILocation(line: 6579, column: 7, scope: !11565)
!11570 = !DILocation(line: 6579, column: 10, scope: !11565)
!11571 = !DILocation(line: 6579, column: 32, scope: !11565)
!11572 = !DILocation(line: 6578, column: 7, scope: !11524)
!11573 = !DILocation(line: 6580, column: 14, scope: !11565)
!11574 = !DILocation(line: 6580, column: 36, scope: !11565)
!11575 = !DILocation(line: 6580, column: 11, scope: !11565)
!11576 = !DILocation(line: 6580, column: 5, scope: !11565)
!11577 = !DILocation(line: 6581, column: 20, scope: !11578)
!11578 = distinct !DILexicalBlock(scope: !11565, file: !3, line: 6581, column: 12)
!11579 = !DILocation(line: 6581, column: 37, scope: !11578)
!11580 = !DILocation(line: 6581, column: 12, scope: !11578)
!11581 = !DILocation(line: 6581, column: 12, scope: !11565)
!11582 = !DILocation(line: 6582, column: 11, scope: !11578)
!11583 = !DILocation(line: 6582, column: 5, scope: !11578)
!11584 = !DILocation(line: 6586, column: 7, scope: !11585)
!11585 = distinct !DILexicalBlock(scope: !11524, file: !3, line: 6586, column: 7)
!11586 = !DILocation(line: 6586, column: 21, scope: !11585)
!11587 = !DILocation(line: 6586, column: 24, scope: !11585)
!11588 = !DILocation(line: 6586, column: 45, scope: !11585)
!11589 = !DILocation(line: 6586, column: 48, scope: !11585)
!11590 = !DILocation(line: 6586, column: 7, scope: !11524)
!11591 = !DILocation(line: 6587, column: 11, scope: !11585)
!11592 = !DILocation(line: 6587, column: 5, scope: !11585)
!11593 = !DILocation(line: 6589, column: 31, scope: !11524)
!11594 = !DILocation(line: 6589, column: 3, scope: !11524)
!11595 = !DILocation(line: 6589, column: 29, scope: !11524)
!11596 = !DILocation(line: 6590, column: 1, scope: !11524)
!11597 = distinct !DISubprogram(name: "default_strip_name_encoding", scope: !3, file: !3, line: 6596, type: !4954, scopeLine: 6597, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11598 = !DILocalVariable(name: "str", arg: 1, scope: !11597, file: !3, line: 6596, type: !2692)
!11599 = !DILocation(line: 6596, column: 42, scope: !11597)
!11600 = !DILocation(line: 6598, column: 10, scope: !11597)
!11601 = !DILocation(line: 6598, column: 18, scope: !11597)
!11602 = !DILocation(line: 6598, column: 17, scope: !11597)
!11603 = !DILocation(line: 6598, column: 22, scope: !11597)
!11604 = !DILocation(line: 6598, column: 14, scope: !11597)
!11605 = !DILocation(line: 6598, column: 3, scope: !11597)
!11606 = distinct !DISubprogram(name: "default_asm_output_anchor", scope: !3, file: !3, line: 6606, type: !6942, scopeLine: 6607, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11607 = !DILocalVariable(name: "symbol", arg: 1, scope: !11606, file: !3, line: 6606, type: !2876)
!11608 = !DILocation(line: 6606, column: 32, scope: !11606)
!11609 = !DILocalVariable(name: "buffer", scope: !11606, file: !3, line: 6608, type: !5822)
!11610 = !DILocation(line: 6608, column: 8, scope: !11606)
!11611 = !DILocation(line: 6610, column: 12, scope: !11606)
!11612 = !DILocation(line: 6611, column: 5, scope: !11606)
!11613 = !DILocation(line: 6610, column: 3, scope: !11606)
!11614 = !DILocation(line: 6612, column: 3, scope: !11606)
!11615 = !DILocation(line: 6612, column: 3, scope: !11616)
!11616 = distinct !DILexicalBlock(scope: !11606, file: !3, line: 6612, column: 3)
!11617 = !DILocation(line: 6613, column: 1, scope: !11606)
!11618 = distinct !DISubprogram(name: "default_use_anchors_for_symbol_p", scope: !3, file: !3, line: 6619, type: !11619, scopeLine: 6620, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11619 = !DISubroutineType(types: !11620)
!11620 = !{!2820, !8435}
!11621 = !DILocalVariable(name: "symbol", arg: 1, scope: !11618, file: !3, line: 6619, type: !8435)
!11622 = !DILocation(line: 6619, column: 45, scope: !11618)
!11623 = !DILocalVariable(name: "sect", scope: !11618, file: !3, line: 6621, type: !3109)
!11624 = !DILocation(line: 6621, column: 12, scope: !11618)
!11625 = !DILocalVariable(name: "decl", scope: !11618, file: !3, line: 6622, type: !2702)
!11626 = !DILocation(line: 6622, column: 8, scope: !11618)
!11627 = !DILocation(line: 6626, column: 10, scope: !11618)
!11628 = !DILocation(line: 6626, column: 37, scope: !11618)
!11629 = !DILocation(line: 6626, column: 8, scope: !11618)
!11630 = !DILocation(line: 6627, column: 7, scope: !11631)
!11631 = distinct !DILexicalBlock(scope: !11618, file: !3, line: 6627, column: 7)
!11632 = !DILocation(line: 6627, column: 13, scope: !11631)
!11633 = !DILocation(line: 6627, column: 20, scope: !11631)
!11634 = !DILocation(line: 6627, column: 26, scope: !11631)
!11635 = !DILocation(line: 6627, column: 7, scope: !11618)
!11636 = !DILocation(line: 6628, column: 5, scope: !11631)
!11637 = !DILocation(line: 6632, column: 7, scope: !11638)
!11638 = distinct !DILexicalBlock(scope: !11618, file: !3, line: 6632, column: 7)
!11639 = !DILocation(line: 6632, column: 13, scope: !11638)
!11640 = !DILocation(line: 6632, column: 20, scope: !11638)
!11641 = !DILocation(line: 6632, column: 26, scope: !11638)
!11642 = !DILocation(line: 6632, column: 7, scope: !11618)
!11643 = !DILocation(line: 6633, column: 5, scope: !11638)
!11644 = !DILocation(line: 6635, column: 10, scope: !11618)
!11645 = !DILocation(line: 6635, column: 8, scope: !11618)
!11646 = !DILocation(line: 6636, column: 7, scope: !11647)
!11647 = distinct !DILexicalBlock(scope: !11618, file: !3, line: 6636, column: 7)
!11648 = !DILocation(line: 6636, column: 12, scope: !11647)
!11649 = !DILocation(line: 6636, column: 15, scope: !11647)
!11650 = !DILocation(line: 6636, column: 7, scope: !11618)
!11651 = !DILocation(line: 6640, column: 20, scope: !11652)
!11652 = distinct !DILexicalBlock(scope: !11653, file: !3, line: 6640, column: 11)
!11653 = distinct !DILexicalBlock(scope: !11647, file: !3, line: 6637, column: 5)
!11654 = !DILocation(line: 6640, column: 35, scope: !11652)
!11655 = !DILocation(line: 6640, column: 12, scope: !11652)
!11656 = !DILocation(line: 6640, column: 11, scope: !11653)
!11657 = !DILocation(line: 6641, column: 2, scope: !11652)
!11658 = !DILocation(line: 6648, column: 19, scope: !11659)
!11659 = distinct !DILexicalBlock(scope: !11653, file: !3, line: 6648, column: 11)
!11660 = !DILocation(line: 6648, column: 36, scope: !11659)
!11661 = !DILocation(line: 6648, column: 11, scope: !11659)
!11662 = !DILocation(line: 6648, column: 11, scope: !11653)
!11663 = !DILocation(line: 6649, column: 2, scope: !11659)
!11664 = !DILocation(line: 6650, column: 5, scope: !11653)
!11665 = !DILocation(line: 6651, column: 3, scope: !11618)
!11666 = !DILocation(line: 6652, column: 1, scope: !11618)
!11667 = distinct !DISubprogram(name: "default_binds_local_p", scope: !3, file: !3, line: 6658, type: !8588, scopeLine: 6659, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11668 = !DILocalVariable(name: "exp", arg: 1, scope: !11667, file: !3, line: 6658, type: !8590)
!11669 = !DILocation(line: 6658, column: 35, scope: !11667)
!11670 = !DILocation(line: 6660, column: 35, scope: !11667)
!11671 = !DILocation(line: 6660, column: 40, scope: !11667)
!11672 = !DILocation(line: 6660, column: 10, scope: !11667)
!11673 = !DILocation(line: 6660, column: 3, scope: !11667)
!11674 = distinct !DISubprogram(name: "default_binds_local_p_1", scope: !3, file: !3, line: 6664, type: !10669, scopeLine: 6665, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11675 = !DILocalVariable(name: "exp", arg: 1, scope: !11674, file: !3, line: 6664, type: !8590)
!11676 = !DILocation(line: 6664, column: 37, scope: !11674)
!11677 = !DILocalVariable(name: "shlib", arg: 2, scope: !11674, file: !3, line: 6664, type: !2798)
!11678 = !DILocation(line: 6664, column: 46, scope: !11674)
!11679 = !DILocalVariable(name: "local_p", scope: !11674, file: !3, line: 6666, type: !2820)
!11680 = !DILocation(line: 6666, column: 8, scope: !11674)
!11681 = !DILocation(line: 6669, column: 8, scope: !11682)
!11682 = distinct !DILexicalBlock(scope: !11674, file: !3, line: 6669, column: 7)
!11683 = !DILocation(line: 6669, column: 7, scope: !11674)
!11684 = !DILocation(line: 6670, column: 13, scope: !11682)
!11685 = !DILocation(line: 6670, column: 5, scope: !11682)
!11686 = !DILocation(line: 6673, column: 41, scope: !11687)
!11687 = distinct !DILexicalBlock(scope: !11682, file: !3, line: 6673, column: 12)
!11688 = !DILocation(line: 6673, column: 12, scope: !11687)
!11689 = !DILocation(line: 6673, column: 12, scope: !11682)
!11690 = !DILocation(line: 6674, column: 13, scope: !11687)
!11691 = !DILocation(line: 6674, column: 5, scope: !11687)
!11692 = !DILocation(line: 6676, column: 14, scope: !11693)
!11693 = distinct !DILexicalBlock(scope: !11687, file: !3, line: 6676, column: 12)
!11694 = !DILocation(line: 6676, column: 12, scope: !11687)
!11695 = !DILocation(line: 6677, column: 13, scope: !11693)
!11696 = !DILocation(line: 6677, column: 5, scope: !11693)
!11697 = !DILocation(line: 6680, column: 12, scope: !11698)
!11698 = distinct !DILexicalBlock(scope: !11693, file: !3, line: 6680, column: 12)
!11699 = !DILocation(line: 6681, column: 5, scope: !11698)
!11700 = !DILocation(line: 6681, column: 8, scope: !11698)
!11701 = !DILocation(line: 6681, column: 30, scope: !11698)
!11702 = !DILocation(line: 6680, column: 12, scope: !11693)
!11703 = !DILocation(line: 6682, column: 13, scope: !11698)
!11704 = !DILocation(line: 6682, column: 5, scope: !11698)
!11705 = !DILocation(line: 6684, column: 12, scope: !11706)
!11706 = distinct !DILexicalBlock(scope: !11698, file: !3, line: 6684, column: 12)
!11707 = !DILocation(line: 6684, column: 12, scope: !11698)
!11708 = !DILocation(line: 6685, column: 13, scope: !11706)
!11709 = !DILocation(line: 6685, column: 5, scope: !11706)
!11710 = !DILocation(line: 6688, column: 12, scope: !11711)
!11711 = distinct !DILexicalBlock(scope: !11706, file: !3, line: 6688, column: 12)
!11712 = !DILocation(line: 6688, column: 34, scope: !11711)
!11713 = !DILocation(line: 6688, column: 12, scope: !11706)
!11714 = !DILocation(line: 6689, column: 13, scope: !11711)
!11715 = !DILocation(line: 6689, column: 5, scope: !11711)
!11716 = !DILocation(line: 6692, column: 12, scope: !11717)
!11717 = distinct !DILexicalBlock(scope: !11711, file: !3, line: 6692, column: 12)
!11718 = !DILocation(line: 6692, column: 12, scope: !11711)
!11719 = !DILocation(line: 6693, column: 13, scope: !11717)
!11720 = !DILocation(line: 6693, column: 5, scope: !11717)
!11721 = !DILocation(line: 6697, column: 12, scope: !11722)
!11722 = distinct !DILexicalBlock(scope: !11717, file: !3, line: 6697, column: 12)
!11723 = !DILocation(line: 6697, column: 12, scope: !11717)
!11724 = !DILocation(line: 6698, column: 15, scope: !11722)
!11725 = !DILocation(line: 6698, column: 13, scope: !11722)
!11726 = !DILocation(line: 6698, column: 5, scope: !11722)
!11727 = !DILocation(line: 6701, column: 12, scope: !11728)
!11728 = distinct !DILexicalBlock(scope: !11722, file: !3, line: 6701, column: 12)
!11729 = !DILocation(line: 6702, column: 5, scope: !11728)
!11730 = !DILocation(line: 6702, column: 9, scope: !11728)
!11731 = !DILocation(line: 6702, column: 28, scope: !11728)
!11732 = !DILocation(line: 6703, column: 9, scope: !11728)
!11733 = !DILocation(line: 6703, column: 12, scope: !11728)
!11734 = !DILocation(line: 6703, column: 34, scope: !11728)
!11735 = !DILocation(line: 6703, column: 31, scope: !11728)
!11736 = !DILocation(line: 6701, column: 12, scope: !11722)
!11737 = !DILocation(line: 6704, column: 13, scope: !11728)
!11738 = !DILocation(line: 6704, column: 5, scope: !11728)
!11739 = !DILocation(line: 6708, column: 13, scope: !11728)
!11740 = !DILocation(line: 6710, column: 10, scope: !11674)
!11741 = !DILocation(line: 6710, column: 3, scope: !11674)
!11742 = distinct !DISubprogram(name: "default_globalize_label", scope: !3, file: !3, line: 6718, type: !6014, scopeLine: 6719, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11743 = !DILocalVariable(name: "stream", arg: 1, scope: !11742, file: !3, line: 6718, type: !6016)
!11744 = !DILocation(line: 6718, column: 33, scope: !11742)
!11745 = !DILocalVariable(name: "name", arg: 2, scope: !11742, file: !3, line: 6718, type: !2692)
!11746 = !DILocation(line: 6718, column: 53, scope: !11742)
!11747 = !DILocation(line: 6720, column: 25, scope: !11742)
!11748 = !DILocation(line: 6720, column: 3, scope: !11742)
!11749 = !DILocation(line: 6721, column: 18, scope: !11742)
!11750 = !DILocation(line: 6721, column: 26, scope: !11742)
!11751 = !DILocation(line: 6721, column: 3, scope: !11742)
!11752 = !DILocation(line: 6722, column: 15, scope: !11742)
!11753 = !DILocation(line: 6722, column: 3, scope: !11742)
!11754 = !DILocation(line: 6723, column: 1, scope: !11742)
!11755 = distinct !DISubprogram(name: "default_globalize_decl_name", scope: !3, file: !3, line: 6728, type: !11756, scopeLine: 6729, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11756 = !DISubroutineType(types: !11757)
!11757 = !{null, !6016, !2702}
!11758 = !DILocalVariable(name: "stream", arg: 1, scope: !11755, file: !3, line: 6728, type: !6016)
!11759 = !DILocation(line: 6728, column: 37, scope: !11755)
!11760 = !DILocalVariable(name: "decl", arg: 2, scope: !11755, file: !3, line: 6728, type: !2702)
!11761 = !DILocation(line: 6728, column: 50, scope: !11755)
!11762 = !DILocalVariable(name: "name", scope: !11755, file: !3, line: 6730, type: !2692)
!11763 = !DILocation(line: 6730, column: 15, scope: !11755)
!11764 = !DILocation(line: 6730, column: 22, scope: !11755)
!11765 = !DILocation(line: 6731, column: 19, scope: !11755)
!11766 = !DILocation(line: 6731, column: 36, scope: !11755)
!11767 = !DILocation(line: 6731, column: 44, scope: !11755)
!11768 = !DILocation(line: 6731, column: 3, scope: !11755)
!11769 = !DILocation(line: 6732, column: 1, scope: !11755)
!11770 = distinct !DISubprogram(name: "default_emit_unwind_label", scope: !3, file: !3, line: 6738, type: !11771, scopeLine: 6742, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11771 = !DISubroutineType(types: !11772)
!11772 = !{null, !6016, !2702, !2798, !2798}
!11773 = !DILocalVariable(name: "stream", arg: 1, scope: !11770, file: !3, line: 6738, type: !6016)
!11774 = !DILocation(line: 6738, column: 35, scope: !11770)
!11775 = !DILocalVariable(name: "decl", arg: 2, scope: !11770, file: !3, line: 6739, type: !2702)
!11776 = !DILocation(line: 6739, column: 12, scope: !11770)
!11777 = !DILocalVariable(name: "for_eh", arg: 3, scope: !11770, file: !3, line: 6740, type: !2798)
!11778 = !DILocation(line: 6740, column: 11, scope: !11770)
!11779 = !DILocalVariable(name: "empty", arg: 4, scope: !11770, file: !3, line: 6741, type: !2798)
!11780 = !DILocation(line: 6741, column: 11, scope: !11770)
!11781 = !DILocation(line: 6743, column: 1, scope: !11770)
!11782 = distinct !DISubprogram(name: "default_emit_except_table_label", scope: !3, file: !3, line: 6749, type: !11783, scopeLine: 6750, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11783 = !DISubroutineType(types: !11784)
!11784 = !{null, !6016}
!11785 = !DILocalVariable(name: "stream", arg: 1, scope: !11782, file: !3, line: 6749, type: !6016)
!11786 = !DILocation(line: 6749, column: 41, scope: !11782)
!11787 = !DILocation(line: 6751, column: 1, scope: !11782)
!11788 = distinct !DISubprogram(name: "default_internal_label", scope: !3, file: !3, line: 6757, type: !11789, scopeLine: 6759, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11789 = !DISubroutineType(types: !11790)
!11790 = !{null, !6016, !2692, !2755}
!11791 = !DILocalVariable(name: "stream", arg: 1, scope: !11788, file: !3, line: 6757, type: !6016)
!11792 = !DILocation(line: 6757, column: 31, scope: !11788)
!11793 = !DILocalVariable(name: "prefix", arg: 2, scope: !11788, file: !3, line: 6757, type: !2692)
!11794 = !DILocation(line: 6757, column: 51, scope: !11788)
!11795 = !DILocalVariable(name: "labelno", arg: 3, scope: !11788, file: !3, line: 6758, type: !2755)
!11796 = !DILocation(line: 6758, column: 18, scope: !11788)
!11797 = !DILocalVariable(name: "buf", scope: !11788, file: !3, line: 6760, type: !11798)
!11798 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2964)
!11799 = !DILocation(line: 6760, column: 15, scope: !11788)
!11800 = !DILocation(line: 6760, column: 30, scope: !11788)
!11801 = !DILocation(line: 6761, column: 3, scope: !11788)
!11802 = !DILocation(line: 6761, column: 3, scope: !11803)
!11803 = distinct !DILexicalBlock(scope: !11788, file: !3, line: 6761, column: 3)
!11804 = !DILocation(line: 6762, column: 3, scope: !11788)
!11805 = !DILocation(line: 6762, column: 3, scope: !11806)
!11806 = distinct !DILexicalBlock(scope: !11788, file: !3, line: 6762, column: 3)
!11807 = !DILocation(line: 6763, column: 1, scope: !11788)
!11808 = distinct !DISubprogram(name: "default_file_start", scope: !3, file: !3, line: 6768, type: !4245, scopeLine: 6769, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11809 = !DILocation(line: 6770, column: 15, scope: !11810)
!11810 = distinct !DILexicalBlock(scope: !11808, file: !3, line: 6770, column: 7)
!11811 = !DILocation(line: 6770, column: 7, scope: !11810)
!11812 = !DILocation(line: 6771, column: 7, scope: !11810)
!11813 = !DILocation(line: 6771, column: 12, scope: !11810)
!11814 = !DILocation(line: 6771, column: 29, scope: !11810)
!11815 = !DILocation(line: 6771, column: 32, scope: !11810)
!11816 = !DILocation(line: 6771, column: 47, scope: !11810)
!11817 = !DILocation(line: 6771, column: 50, scope: !11810)
!11818 = !DILocation(line: 6770, column: 7, scope: !11808)
!11819 = !DILocation(line: 6772, column: 25, scope: !11810)
!11820 = !DILocation(line: 6772, column: 5, scope: !11810)
!11821 = !DILocation(line: 6774, column: 15, scope: !11822)
!11822 = distinct !DILexicalBlock(scope: !11808, file: !3, line: 6774, column: 7)
!11823 = !DILocation(line: 6774, column: 7, scope: !11822)
!11824 = !DILocation(line: 6774, column: 7, scope: !11808)
!11825 = !DILocation(line: 6775, column: 28, scope: !11822)
!11826 = !DILocation(line: 6775, column: 42, scope: !11822)
!11827 = !DILocation(line: 6775, column: 5, scope: !11822)
!11828 = !DILocation(line: 6776, column: 1, scope: !11808)
!11829 = distinct !DISubprogram(name: "file_end_indicate_exec_stack", scope: !3, file: !3, line: 6786, type: !4245, scopeLine: 6787, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11830 = !DILocalVariable(name: "flags", scope: !11829, file: !3, line: 6788, type: !7)
!11831 = !DILocation(line: 6788, column: 16, scope: !11829)
!11832 = !DILocation(line: 6789, column: 7, scope: !11833)
!11833 = distinct !DILexicalBlock(scope: !11829, file: !3, line: 6789, column: 7)
!11834 = !DILocation(line: 6789, column: 7, scope: !11829)
!11835 = !DILocation(line: 6790, column: 11, scope: !11833)
!11836 = !DILocation(line: 6790, column: 5, scope: !11833)
!11837 = !DILocation(line: 6792, column: 54, scope: !11829)
!11838 = !DILocation(line: 6792, column: 22, scope: !11829)
!11839 = !DILocation(line: 6792, column: 3, scope: !11829)
!11840 = !DILocation(line: 6793, column: 1, scope: !11829)
!11841 = distinct !DISubprogram(name: "get_constant_alignment", scope: !3, file: !3, line: 3194, type: !11842, scopeLine: 3195, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11842 = !DISubroutineType(types: !11843)
!11843 = !{!7, !2702}
!11844 = !DILocalVariable(name: "exp", arg: 1, scope: !11841, file: !3, line: 3194, type: !2702)
!11845 = !DILocation(line: 3194, column: 30, scope: !11841)
!11846 = !DILocalVariable(name: "align", scope: !11841, file: !3, line: 3196, type: !7)
!11847 = !DILocation(line: 3196, column: 16, scope: !11841)
!11848 = !DILocation(line: 3198, column: 11, scope: !11841)
!11849 = !DILocation(line: 3198, column: 9, scope: !11841)
!11850 = !DILocation(line: 3200, column: 11, scope: !11841)
!11851 = !DILocation(line: 3200, column: 9, scope: !11841)
!11852 = !DILocation(line: 3202, column: 10, scope: !11841)
!11853 = !DILocation(line: 3202, column: 3, scope: !11841)
!11854 = distinct !DISubprogram(name: "get_constant_size", scope: !3, file: !3, line: 3221, type: !11855, scopeLine: 3222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11855 = !DISubroutineType(types: !11856)
!11856 = !{!2757, !2702}
!11857 = !DILocalVariable(name: "exp", arg: 1, scope: !11854, file: !3, line: 3221, type: !2702)
!11858 = !DILocation(line: 3221, column: 25, scope: !11854)
!11859 = !DILocalVariable(name: "size", scope: !11854, file: !3, line: 3223, type: !2757)
!11860 = !DILocation(line: 3223, column: 17, scope: !11854)
!11861 = !DILocation(line: 3225, column: 29, scope: !11854)
!11862 = !DILocation(line: 3225, column: 10, scope: !11854)
!11863 = !DILocation(line: 3225, column: 8, scope: !11854)
!11864 = !DILocation(line: 3226, column: 7, scope: !11865)
!11865 = distinct !DILexicalBlock(scope: !11854, file: !3, line: 3226, column: 7)
!11866 = !DILocation(line: 3226, column: 23, scope: !11865)
!11867 = !DILocation(line: 3226, column: 7, scope: !11854)
!11868 = !DILocation(line: 3227, column: 12, scope: !11865)
!11869 = !DILocation(line: 3227, column: 10, scope: !11865)
!11870 = !DILocation(line: 3227, column: 5, scope: !11865)
!11871 = !DILocation(line: 3228, column: 10, scope: !11854)
!11872 = !DILocation(line: 3228, column: 3, scope: !11854)
!11873 = distinct !DISubprogram(name: "VEC_rtx_gc_safe_push", scope: !598, file: !598, line: 202, type: !11874, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11874 = !DISubroutineType(types: !11875)
!11875 = !{!11876, !11877, !2876}
!11876 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2876, size: 64)
!11877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3148, size: 64)
!11878 = !DILocalVariable(name: "vec_", arg: 1, scope: !11873, file: !598, line: 202, type: !11877)
!11879 = !DILocation(line: 202, column: 1, scope: !11873)
!11880 = !DILocalVariable(name: "obj_", arg: 2, scope: !11873, file: !598, line: 202, type: !2876)
!11881 = distinct !DISubprogram(name: "get_section_anchor", scope: !3, file: !3, line: 6898, type: !11882, scopeLine: 6900, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!11882 = !DISubroutineType(types: !11883)
!11883 = !{!2876, !3105, !2757, !511}
!11884 = !DILocalVariable(name: "block", arg: 1, scope: !11881, file: !3, line: 6898, type: !3105)
!11885 = !DILocation(line: 6898, column: 42, scope: !11881)
!11886 = !DILocalVariable(name: "offset", arg: 2, scope: !11881, file: !3, line: 6898, type: !2757)
!11887 = !DILocation(line: 6898, column: 63, scope: !11881)
!11888 = !DILocalVariable(name: "model", arg: 3, scope: !11881, file: !3, line: 6899, type: !511)
!11889 = !DILocation(line: 6899, column: 22, scope: !11881)
!11890 = !DILocalVariable(name: "label", scope: !11881, file: !3, line: 6901, type: !5822)
!11891 = !DILocation(line: 6901, column: 8, scope: !11881)
!11892 = !DILocalVariable(name: "begin", scope: !11881, file: !3, line: 6902, type: !7)
!11893 = !DILocation(line: 6902, column: 16, scope: !11881)
!11894 = !DILocalVariable(name: "middle", scope: !11881, file: !3, line: 6902, type: !7)
!11895 = !DILocation(line: 6902, column: 23, scope: !11881)
!11896 = !DILocalVariable(name: "end", scope: !11881, file: !3, line: 6902, type: !7)
!11897 = !DILocation(line: 6902, column: 31, scope: !11881)
!11898 = !DILocalVariable(name: "min_offset", scope: !11881, file: !3, line: 6903, type: !2755)
!11899 = !DILocation(line: 6903, column: 26, scope: !11881)
!11900 = !DILocalVariable(name: "max_offset", scope: !11881, file: !3, line: 6903, type: !2755)
!11901 = !DILocation(line: 6903, column: 38, scope: !11881)
!11902 = !DILocalVariable(name: "range", scope: !11881, file: !3, line: 6903, type: !2755)
!11903 = !DILocation(line: 6903, column: 50, scope: !11881)
!11904 = !DILocalVariable(name: "bias", scope: !11881, file: !3, line: 6903, type: !2755)
!11905 = !DILocation(line: 6903, column: 57, scope: !11881)
!11906 = !DILocalVariable(name: "delta", scope: !11881, file: !3, line: 6903, type: !2755)
!11907 = !DILocation(line: 6903, column: 63, scope: !11881)
!11908 = !DILocalVariable(name: "anchor", scope: !11881, file: !3, line: 6904, type: !2876)
!11909 = !DILocation(line: 6904, column: 7, scope: !11881)
!11910 = !DILocation(line: 6920, column: 49, scope: !11881)
!11911 = !DILocation(line: 6920, column: 14, scope: !11881)
!11912 = !DILocation(line: 6921, column: 49, scope: !11881)
!11913 = !DILocation(line: 6921, column: 14, scope: !11881)
!11914 = !DILocation(line: 6922, column: 11, scope: !11881)
!11915 = !DILocation(line: 6922, column: 24, scope: !11881)
!11916 = !DILocation(line: 6922, column: 22, scope: !11881)
!11917 = !DILocation(line: 6922, column: 35, scope: !11881)
!11918 = !DILocation(line: 6922, column: 9, scope: !11881)
!11919 = !DILocation(line: 6923, column: 7, scope: !11920)
!11920 = distinct !DILexicalBlock(scope: !11881, file: !3, line: 6923, column: 7)
!11921 = !DILocation(line: 6923, column: 13, scope: !11920)
!11922 = !DILocation(line: 6923, column: 7, scope: !11881)
!11923 = !DILocation(line: 6924, column: 12, scope: !11920)
!11924 = !DILocation(line: 6924, column: 5, scope: !11920)
!11925 = !DILocation(line: 6927, column: 20, scope: !11926)
!11926 = distinct !DILexicalBlock(scope: !11920, file: !3, line: 6926, column: 5)
!11927 = !DILocation(line: 6927, column: 48, scope: !11926)
!11928 = !DILocation(line: 6927, column: 16, scope: !11926)
!11929 = !DILocation(line: 6927, column: 14, scope: !11926)
!11930 = !DILocation(line: 6927, column: 12, scope: !11926)
!11931 = !DILocation(line: 6928, column: 11, scope: !11932)
!11932 = distinct !DILexicalBlock(scope: !11926, file: !3, line: 6928, column: 11)
!11933 = !DILocation(line: 6928, column: 18, scope: !11932)
!11934 = !DILocation(line: 6928, column: 11, scope: !11926)
!11935 = !DILocation(line: 6930, column: 38, scope: !11936)
!11936 = distinct !DILexicalBlock(scope: !11932, file: !3, line: 6929, column: 2)
!11937 = !DILocation(line: 6930, column: 12, scope: !11936)
!11938 = !DILocation(line: 6930, column: 47, scope: !11936)
!11939 = !DILocation(line: 6930, column: 45, scope: !11936)
!11940 = !DILocation(line: 6930, column: 10, scope: !11936)
!11941 = !DILocation(line: 6931, column: 13, scope: !11936)
!11942 = !DILocation(line: 6931, column: 21, scope: !11936)
!11943 = !DILocation(line: 6931, column: 19, scope: !11936)
!11944 = !DILocation(line: 6931, column: 10, scope: !11936)
!11945 = !DILocation(line: 6932, column: 8, scope: !11946)
!11946 = distinct !DILexicalBlock(scope: !11936, file: !3, line: 6932, column: 8)
!11947 = !DILocation(line: 6932, column: 16, scope: !11946)
!11948 = !DILocation(line: 6932, column: 14, scope: !11946)
!11949 = !DILocation(line: 6932, column: 8, scope: !11936)
!11950 = !DILocation(line: 6933, column: 14, scope: !11946)
!11951 = !DILocation(line: 6933, column: 12, scope: !11946)
!11952 = !DILocation(line: 6933, column: 6, scope: !11946)
!11953 = !DILocation(line: 6934, column: 31, scope: !11936)
!11954 = !DILocation(line: 6934, column: 30, scope: !11936)
!11955 = !DILocation(line: 6934, column: 11, scope: !11936)
!11956 = !DILocation(line: 6935, column: 2, scope: !11936)
!11957 = !DILocation(line: 6938, column: 37, scope: !11958)
!11958 = distinct !DILexicalBlock(scope: !11932, file: !3, line: 6937, column: 2)
!11959 = !DILocation(line: 6938, column: 46, scope: !11958)
!11960 = !DILocation(line: 6938, column: 44, scope: !11958)
!11961 = !DILocation(line: 6938, column: 10, scope: !11958)
!11962 = !DILocation(line: 6939, column: 13, scope: !11958)
!11963 = !DILocation(line: 6939, column: 21, scope: !11958)
!11964 = !DILocation(line: 6939, column: 19, scope: !11958)
!11965 = !DILocation(line: 6939, column: 10, scope: !11958)
!11966 = !DILocation(line: 6940, column: 8, scope: !11967)
!11967 = distinct !DILexicalBlock(scope: !11958, file: !3, line: 6940, column: 8)
!11968 = !DILocation(line: 6940, column: 16, scope: !11967)
!11969 = !DILocation(line: 6940, column: 21, scope: !11967)
!11970 = !DILocation(line: 6940, column: 14, scope: !11967)
!11971 = !DILocation(line: 6940, column: 8, scope: !11958)
!11972 = !DILocation(line: 6941, column: 14, scope: !11967)
!11973 = !DILocation(line: 6941, column: 19, scope: !11967)
!11974 = !DILocation(line: 6941, column: 12, scope: !11967)
!11975 = !DILocation(line: 6941, column: 6, scope: !11967)
!11976 = !DILocation(line: 6942, column: 29, scope: !11958)
!11977 = !DILocation(line: 6942, column: 11, scope: !11958)
!11978 = !DILocation(line: 6948, column: 9, scope: !11881)
!11979 = !DILocation(line: 6949, column: 9, scope: !11881)
!11980 = !DILocation(line: 6949, column: 7, scope: !11881)
!11981 = !DILocation(line: 6950, column: 3, scope: !11881)
!11982 = !DILocation(line: 6950, column: 10, scope: !11881)
!11983 = !DILocation(line: 6950, column: 19, scope: !11881)
!11984 = !DILocation(line: 6950, column: 16, scope: !11881)
!11985 = !DILocation(line: 6952, column: 17, scope: !11986)
!11986 = distinct !DILexicalBlock(scope: !11881, file: !3, line: 6951, column: 5)
!11987 = !DILocation(line: 6952, column: 23, scope: !11986)
!11988 = !DILocation(line: 6952, column: 21, scope: !11986)
!11989 = !DILocation(line: 6952, column: 30, scope: !11986)
!11990 = !DILocation(line: 6952, column: 14, scope: !11986)
!11991 = !DILocation(line: 6953, column: 16, scope: !11986)
!11992 = !DILocation(line: 6953, column: 14, scope: !11986)
!11993 = !DILocation(line: 6954, column: 11, scope: !11994)
!11994 = distinct !DILexicalBlock(scope: !11986, file: !3, line: 6954, column: 11)
!11995 = !DILocation(line: 6954, column: 46, scope: !11994)
!11996 = !DILocation(line: 6954, column: 44, scope: !11994)
!11997 = !DILocation(line: 6954, column: 11, scope: !11986)
!11998 = !DILocation(line: 6955, column: 8, scope: !11994)
!11999 = !DILocation(line: 6955, column: 6, scope: !11994)
!12000 = !DILocation(line: 6955, column: 2, scope: !11994)
!12001 = !DILocation(line: 6956, column: 16, scope: !12002)
!12002 = distinct !DILexicalBlock(scope: !11994, file: !3, line: 6956, column: 16)
!12003 = !DILocation(line: 6956, column: 51, scope: !12002)
!12004 = !DILocation(line: 6956, column: 49, scope: !12002)
!12005 = !DILocation(line: 6956, column: 16, scope: !11994)
!12006 = !DILocation(line: 6957, column: 10, scope: !12002)
!12007 = !DILocation(line: 6957, column: 17, scope: !12002)
!12008 = !DILocation(line: 6957, column: 8, scope: !12002)
!12009 = !DILocation(line: 6957, column: 2, scope: !12002)
!12010 = !DILocation(line: 6958, column: 16, scope: !12011)
!12011 = distinct !DILexicalBlock(scope: !12002, file: !3, line: 6958, column: 16)
!12012 = !DILocation(line: 6958, column: 48, scope: !12011)
!12013 = !DILocation(line: 6958, column: 46, scope: !12011)
!12014 = !DILocation(line: 6958, column: 16, scope: !12002)
!12015 = !DILocation(line: 6959, column: 8, scope: !12011)
!12016 = !DILocation(line: 6959, column: 6, scope: !12011)
!12017 = !DILocation(line: 6959, column: 2, scope: !12011)
!12018 = !DILocation(line: 6960, column: 16, scope: !12019)
!12019 = distinct !DILexicalBlock(scope: !12011, file: !3, line: 6960, column: 16)
!12020 = !DILocation(line: 6960, column: 48, scope: !12019)
!12021 = !DILocation(line: 6960, column: 46, scope: !12019)
!12022 = !DILocation(line: 6960, column: 16, scope: !12011)
!12023 = !DILocation(line: 6961, column: 10, scope: !12019)
!12024 = !DILocation(line: 6961, column: 17, scope: !12019)
!12025 = !DILocation(line: 6961, column: 8, scope: !12019)
!12026 = !DILocation(line: 6961, column: 2, scope: !12019)
!12027 = !DILocation(line: 6963, column: 9, scope: !12019)
!12028 = !DILocation(line: 6963, column: 2, scope: !12019)
!12029 = distinct !{!12029, !11981, !12030}
!12030 = !DILocation(line: 6964, column: 5, scope: !11881)
!12031 = !DILocation(line: 6967, column: 3, scope: !11881)
!12032 = !DILocation(line: 6967, column: 3, scope: !12033)
!12033 = distinct !DILexicalBlock(scope: !11881, file: !3, line: 6967, column: 3)
!12034 = !DILocation(line: 6968, column: 33, scope: !11881)
!12035 = !DILocation(line: 6968, column: 53, scope: !11881)
!12036 = !DILocation(line: 6968, column: 60, scope: !11881)
!12037 = !DILocation(line: 6968, column: 12, scope: !11881)
!12038 = !DILocation(line: 6968, column: 10, scope: !11881)
!12039 = !DILocation(line: 6969, column: 3, scope: !11881)
!12040 = !DILocation(line: 6969, column: 29, scope: !11881)
!12041 = !DILocation(line: 6970, column: 32, scope: !11881)
!12042 = !DILocation(line: 6970, column: 38, scope: !11881)
!12043 = !DILocation(line: 6970, column: 3, scope: !11881)
!12044 = !DILocation(line: 6970, column: 29, scope: !11881)
!12045 = !DILocation(line: 6973, column: 3, scope: !11881)
!12046 = !DILocation(line: 6974, column: 10, scope: !11881)
!12047 = !DILocation(line: 6974, column: 3, scope: !11881)
!12048 = !DILocation(line: 6975, column: 1, scope: !11881)
!12049 = distinct !DISubprogram(name: "VEC_rtx_base_length", scope: !598, file: !598, line: 200, type: !12050, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12050 = !DISubroutineType(types: !12051)
!12051 = !{!7, !12052}
!12052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12053, size: 64)
!12053 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3153)
!12054 = !DILocalVariable(name: "vec_", arg: 1, scope: !12049, file: !598, line: 200, type: !12052)
!12055 = !DILocation(line: 200, column: 1, scope: !12049)
!12056 = distinct !DISubprogram(name: "VEC_rtx_base_index", scope: !598, file: !598, line: 200, type: !12057, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12057 = !DISubroutineType(types: !12058)
!12058 = !{!2876, !12052, !7}
!12059 = !DILocalVariable(name: "vec_", arg: 1, scope: !12056, file: !598, line: 200, type: !12052)
!12060 = !DILocation(line: 200, column: 1, scope: !12056)
!12061 = !DILocalVariable(name: "ix_", arg: 2, scope: !12056, file: !598, line: 200, type: !7)
!12062 = !DILocation(line: 0, scope: !12056)
!12063 = distinct !DISubprogram(name: "VEC_rtx_gc_safe_insert", scope: !598, file: !598, line: 202, type: !12064, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12064 = !DISubroutineType(types: !12065)
!12065 = !{!11876, !11877, !7, !2876}
!12066 = !DILocalVariable(name: "vec_", arg: 1, scope: !12063, file: !598, line: 202, type: !11877)
!12067 = !DILocation(line: 202, column: 1, scope: !12063)
!12068 = !DILocalVariable(name: "ix_", arg: 2, scope: !12063, file: !598, line: 202, type: !7)
!12069 = !DILocalVariable(name: "obj_", arg: 3, scope: !12063, file: !598, line: 202, type: !2876)
!12070 = distinct !DISubprogram(name: "output_object_blocks", scope: !3, file: !3, line: 7043, type: !4245, scopeLine: 7044, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12071 = !DILocation(line: 7045, column: 18, scope: !12070)
!12072 = !DILocation(line: 7045, column: 3, scope: !12070)
!12073 = !DILocation(line: 7046, column: 1, scope: !12070)
!12074 = distinct !DISubprogram(name: "output_object_block_htab", scope: !3, file: !3, line: 7034, type: !4272, scopeLine: 7035, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12075 = !DILocalVariable(name: "slot", arg: 1, scope: !12074, file: !3, line: 7034, type: !3304)
!12076 = !DILocation(line: 7034, column: 34, scope: !12074)
!12077 = !DILocalVariable(name: "data", arg: 2, scope: !12074, file: !3, line: 7034, type: !2691)
!12078 = !DILocation(line: 7034, column: 46, scope: !12074)
!12079 = !DILocation(line: 7036, column: 50, scope: !12074)
!12080 = !DILocation(line: 7036, column: 49, scope: !12074)
!12081 = !DILocation(line: 7036, column: 24, scope: !12074)
!12082 = !DILocation(line: 7036, column: 3, scope: !12074)
!12083 = !DILocation(line: 7037, column: 3, scope: !12074)
!12084 = !DILocalVariable(name: "type", arg: 1, scope: !3856, file: !3, line: 7062, type: !3859)
!12085 = !DILocation(line: 7062, column: 44, scope: !3856)
!12086 = !DILocalVariable(name: "name", arg: 2, scope: !3856, file: !3, line: 7062, type: !2692)
!12087 = !DILocation(line: 7062, column: 63, scope: !3856)
!12088 = !DILocation(line: 7076, column: 11, scope: !3856)
!12089 = !DILocation(line: 7076, column: 3, scope: !3856)
!12090 = !DILocation(line: 7079, column: 13, scope: !12091)
!12091 = distinct !DILexicalBlock(scope: !12092, file: !3, line: 7079, column: 11)
!12092 = distinct !DILexicalBlock(scope: !3856, file: !3, line: 7077, column: 5)
!12093 = !DILocation(line: 7079, column: 11, scope: !12091)
!12094 = !DILocation(line: 7079, column: 18, scope: !12091)
!12095 = !DILocation(line: 7079, column: 11, scope: !12092)
!12096 = !DILocation(line: 7081, column: 8, scope: !12097)
!12097 = distinct !DILexicalBlock(scope: !12098, file: !3, line: 7081, column: 8)
!12098 = distinct !DILexicalBlock(scope: !12091, file: !3, line: 7080, column: 2)
!12099 = !DILocation(line: 7081, column: 8, scope: !12098)
!12100 = !DILocalVariable(name: "len", scope: !12101, file: !3, line: 7083, type: !7)
!12101 = distinct !DILexicalBlock(scope: !12097, file: !3, line: 7082, column: 6)
!12102 = !DILocation(line: 7083, column: 21, scope: !12101)
!12103 = !DILocation(line: 7083, column: 27, scope: !12101)
!12104 = !DILocation(line: 7085, column: 27, scope: !12101)
!12105 = !DILocation(line: 7085, column: 25, scope: !12101)
!12106 = !DILocation(line: 7085, column: 48, scope: !12101)
!12107 = !DILocation(line: 7085, column: 46, scope: !12101)
!12108 = !DILocation(line: 7085, column: 60, scope: !12101)
!12109 = !DILocation(line: 7085, column: 8, scope: !12101)
!12110 = !DILocation(line: 7086, column: 8, scope: !12101)
!12111 = !DILocalVariable(name: "_ascii_bytes", scope: !12112, file: !3, line: 7086, type: !2818)
!12112 = distinct !DILexicalBlock(scope: !12101, file: !3, line: 7086, column: 8)
!12113 = !DILocation(line: 7086, column: 8, scope: !12112)
!12114 = !DILocalVariable(name: "limit", scope: !12112, file: !3, line: 7086, type: !2818)
!12115 = !DILocalVariable(name: "last_null", scope: !12112, file: !3, line: 7086, type: !2818)
!12116 = !DILocalVariable(name: "bytes_in_chunk", scope: !12112, file: !3, line: 7086, type: !7)
!12117 = !DILocation(line: 7086, column: 8, scope: !12118)
!12118 = distinct !DILexicalBlock(scope: !12119, file: !3, line: 7086, column: 8)
!12119 = distinct !DILexicalBlock(scope: !12112, file: !3, line: 7086, column: 8)
!12120 = !DILocation(line: 7086, column: 8, scope: !12119)
!12121 = !DILocalVariable(name: "p", scope: !12122, file: !3, line: 7086, type: !2818)
!12122 = distinct !DILexicalBlock(scope: !12118, file: !3, line: 7086, column: 8)
!12123 = !DILocation(line: 7086, column: 8, scope: !12122)
!12124 = !DILocation(line: 7086, column: 8, scope: !12125)
!12125 = distinct !DILexicalBlock(scope: !12122, file: !3, line: 7086, column: 8)
!12126 = !DILocation(line: 7086, column: 8, scope: !12127)
!12127 = distinct !DILexicalBlock(scope: !12125, file: !3, line: 7086, column: 8)
!12128 = !DILocation(line: 7086, column: 8, scope: !12129)
!12129 = distinct !DILexicalBlock(scope: !12122, file: !3, line: 7086, column: 8)
!12130 = !DILocation(line: 7086, column: 8, scope: !12131)
!12131 = distinct !DILexicalBlock(scope: !12132, file: !3, line: 7086, column: 8)
!12132 = distinct !DILexicalBlock(scope: !12129, file: !3, line: 7086, column: 8)
!12133 = !DILocation(line: 7086, column: 8, scope: !12134)
!12134 = distinct !DILexicalBlock(scope: !12131, file: !3, line: 7086, column: 8)
!12135 = !DILocation(line: 0, scope: !12134)
!12136 = distinct !{!12136, !12130, !12130}
!12137 = !DILocation(line: 7086, column: 8, scope: !12132)
!12138 = !DILocation(line: 7086, column: 8, scope: !12139)
!12139 = distinct !DILexicalBlock(scope: !12122, file: !3, line: 7086, column: 8)
!12140 = !DILocation(line: 7086, column: 8, scope: !12141)
!12141 = distinct !DILexicalBlock(scope: !12142, file: !3, line: 7086, column: 8)
!12142 = distinct !DILexicalBlock(scope: !12139, file: !3, line: 7086, column: 8)
!12143 = !DILocation(line: 7086, column: 8, scope: !12142)
!12144 = !DILocation(line: 7086, column: 8, scope: !12145)
!12145 = distinct !DILexicalBlock(scope: !12141, file: !3, line: 7086, column: 8)
!12146 = !DILocalVariable(name: "_limited_str", scope: !12147, file: !3, line: 7086, type: !2818)
!12147 = distinct !DILexicalBlock(scope: !12142, file: !3, line: 7086, column: 8)
!12148 = !DILocation(line: 7086, column: 8, scope: !12147)
!12149 = !DILocalVariable(name: "ch", scope: !12147, file: !3, line: 7086, type: !7)
!12150 = !DILocation(line: 7086, column: 8, scope: !12151)
!12151 = distinct !DILexicalBlock(scope: !12152, file: !3, line: 7086, column: 8)
!12152 = distinct !DILexicalBlock(scope: !12147, file: !3, line: 7086, column: 8)
!12153 = !DILocation(line: 7086, column: 8, scope: !12152)
!12154 = !DILocalVariable(name: "escape", scope: !12155, file: !3, line: 7086, type: !2798)
!12155 = distinct !DILexicalBlock(scope: !12151, file: !3, line: 7086, column: 8)
!12156 = !DILocation(line: 7086, column: 8, scope: !12155)
!12157 = !DILocation(line: 7086, column: 8, scope: !12158)
!12158 = distinct !DILexicalBlock(scope: !12155, file: !3, line: 7086, column: 8)
!12159 = distinct !{!12159, !12153, !12153}
!12160 = !DILocalVariable(name: "escape", scope: !12161, file: !3, line: 7086, type: !2798)
!12161 = distinct !DILexicalBlock(scope: !12139, file: !3, line: 7086, column: 8)
!12162 = !DILocation(line: 7086, column: 8, scope: !12161)
!12163 = !DILocalVariable(name: "ch", scope: !12161, file: !3, line: 7086, type: !7)
!12164 = !DILocation(line: 7086, column: 8, scope: !12165)
!12165 = distinct !DILexicalBlock(scope: !12161, file: !3, line: 7086, column: 8)
!12166 = !DILocation(line: 7086, column: 8, scope: !12167)
!12167 = distinct !DILexicalBlock(scope: !12161, file: !3, line: 7086, column: 8)
!12168 = distinct !{!12168, !12120, !12120}
!12169 = !DILocation(line: 7086, column: 8, scope: !12170)
!12170 = distinct !DILexicalBlock(scope: !12112, file: !3, line: 7086, column: 8)
!12171 = !DILocation(line: 7087, column: 8, scope: !12101)
!12172 = !DILocation(line: 7088, column: 32, scope: !12101)
!12173 = !DILocation(line: 7089, column: 6, scope: !12101)
!12174 = !DILocation(line: 7092, column: 25, scope: !12175)
!12175 = distinct !DILexicalBlock(scope: !12097, file: !3, line: 7091, column: 6)
!12176 = !DILocation(line: 7092, column: 8, scope: !12175)
!12177 = !DILocation(line: 7093, column: 8, scope: !12175)
!12178 = !DILocalVariable(name: "_ascii_bytes", scope: !12179, file: !3, line: 7093, type: !2818)
!12179 = distinct !DILexicalBlock(scope: !12175, file: !3, line: 7093, column: 8)
!12180 = !DILocation(line: 7093, column: 8, scope: !12179)
!12181 = !DILocalVariable(name: "limit", scope: !12179, file: !3, line: 7093, type: !2818)
!12182 = !DILocalVariable(name: "last_null", scope: !12179, file: !3, line: 7093, type: !2818)
!12183 = !DILocalVariable(name: "bytes_in_chunk", scope: !12179, file: !3, line: 7093, type: !7)
!12184 = !DILocation(line: 7093, column: 8, scope: !12185)
!12185 = distinct !DILexicalBlock(scope: !12186, file: !3, line: 7093, column: 8)
!12186 = distinct !DILexicalBlock(scope: !12179, file: !3, line: 7093, column: 8)
!12187 = !DILocation(line: 7093, column: 8, scope: !12186)
!12188 = !DILocalVariable(name: "p", scope: !12189, file: !3, line: 7093, type: !2818)
!12189 = distinct !DILexicalBlock(scope: !12185, file: !3, line: 7093, column: 8)
!12190 = !DILocation(line: 7093, column: 8, scope: !12189)
!12191 = !DILocation(line: 7093, column: 8, scope: !12192)
!12192 = distinct !DILexicalBlock(scope: !12189, file: !3, line: 7093, column: 8)
!12193 = !DILocation(line: 7093, column: 8, scope: !12194)
!12194 = distinct !DILexicalBlock(scope: !12192, file: !3, line: 7093, column: 8)
!12195 = !DILocation(line: 7093, column: 8, scope: !12196)
!12196 = distinct !DILexicalBlock(scope: !12189, file: !3, line: 7093, column: 8)
!12197 = !DILocation(line: 7093, column: 8, scope: !12198)
!12198 = distinct !DILexicalBlock(scope: !12199, file: !3, line: 7093, column: 8)
!12199 = distinct !DILexicalBlock(scope: !12196, file: !3, line: 7093, column: 8)
!12200 = !DILocation(line: 7093, column: 8, scope: !12201)
!12201 = distinct !DILexicalBlock(scope: !12198, file: !3, line: 7093, column: 8)
!12202 = !DILocation(line: 0, scope: !12201)
!12203 = distinct !{!12203, !12197, !12197}
!12204 = !DILocation(line: 7093, column: 8, scope: !12199)
!12205 = !DILocation(line: 7093, column: 8, scope: !12206)
!12206 = distinct !DILexicalBlock(scope: !12189, file: !3, line: 7093, column: 8)
!12207 = !DILocation(line: 7093, column: 8, scope: !12208)
!12208 = distinct !DILexicalBlock(scope: !12209, file: !3, line: 7093, column: 8)
!12209 = distinct !DILexicalBlock(scope: !12206, file: !3, line: 7093, column: 8)
!12210 = !DILocation(line: 7093, column: 8, scope: !12209)
!12211 = !DILocation(line: 7093, column: 8, scope: !12212)
!12212 = distinct !DILexicalBlock(scope: !12208, file: !3, line: 7093, column: 8)
!12213 = !DILocalVariable(name: "_limited_str", scope: !12214, file: !3, line: 7093, type: !2818)
!12214 = distinct !DILexicalBlock(scope: !12209, file: !3, line: 7093, column: 8)
!12215 = !DILocation(line: 7093, column: 8, scope: !12214)
!12216 = !DILocalVariable(name: "ch", scope: !12214, file: !3, line: 7093, type: !7)
!12217 = !DILocation(line: 7093, column: 8, scope: !12218)
!12218 = distinct !DILexicalBlock(scope: !12219, file: !3, line: 7093, column: 8)
!12219 = distinct !DILexicalBlock(scope: !12214, file: !3, line: 7093, column: 8)
!12220 = !DILocation(line: 7093, column: 8, scope: !12219)
!12221 = !DILocalVariable(name: "escape", scope: !12222, file: !3, line: 7093, type: !2798)
!12222 = distinct !DILexicalBlock(scope: !12218, file: !3, line: 7093, column: 8)
!12223 = !DILocation(line: 7093, column: 8, scope: !12222)
!12224 = !DILocation(line: 7093, column: 8, scope: !12225)
!12225 = distinct !DILexicalBlock(scope: !12222, file: !3, line: 7093, column: 8)
!12226 = distinct !{!12226, !12220, !12220}
!12227 = !DILocalVariable(name: "escape", scope: !12228, file: !3, line: 7093, type: !2798)
!12228 = distinct !DILexicalBlock(scope: !12206, file: !3, line: 7093, column: 8)
!12229 = !DILocation(line: 7093, column: 8, scope: !12228)
!12230 = !DILocalVariable(name: "ch", scope: !12228, file: !3, line: 7093, type: !7)
!12231 = !DILocation(line: 7093, column: 8, scope: !12232)
!12232 = distinct !DILexicalBlock(scope: !12228, file: !3, line: 7093, column: 8)
!12233 = !DILocation(line: 7093, column: 8, scope: !12234)
!12234 = distinct !DILexicalBlock(scope: !12228, file: !3, line: 7093, column: 8)
!12235 = distinct !{!12235, !12187, !12187}
!12236 = !DILocation(line: 7093, column: 8, scope: !12237)
!12237 = distinct !DILexicalBlock(scope: !12179, file: !3, line: 7093, column: 8)
!12238 = !DILocation(line: 7094, column: 8, scope: !12175)
!12239 = !DILocation(line: 7096, column: 2, scope: !12098)
!12240 = !DILocation(line: 7099, column: 8, scope: !12241)
!12241 = distinct !DILexicalBlock(scope: !12242, file: !3, line: 7099, column: 8)
!12242 = distinct !DILexicalBlock(scope: !12091, file: !3, line: 7098, column: 2)
!12243 = !DILocation(line: 7099, column: 8, scope: !12242)
!12244 = !DILocation(line: 7101, column: 8, scope: !12245)
!12245 = distinct !DILexicalBlock(scope: !12241, file: !3, line: 7100, column: 6)
!12246 = !DILocalVariable(name: "_ascii_bytes", scope: !12247, file: !3, line: 7101, type: !2818)
!12247 = distinct !DILexicalBlock(scope: !12245, file: !3, line: 7101, column: 8)
!12248 = !DILocation(line: 7101, column: 8, scope: !12247)
!12249 = !DILocalVariable(name: "limit", scope: !12247, file: !3, line: 7101, type: !2818)
!12250 = !DILocalVariable(name: "last_null", scope: !12247, file: !3, line: 7101, type: !2818)
!12251 = !DILocalVariable(name: "bytes_in_chunk", scope: !12247, file: !3, line: 7101, type: !7)
!12252 = !DILocation(line: 7101, column: 8, scope: !12253)
!12253 = distinct !DILexicalBlock(scope: !12254, file: !3, line: 7101, column: 8)
!12254 = distinct !DILexicalBlock(scope: !12247, file: !3, line: 7101, column: 8)
!12255 = !DILocation(line: 7101, column: 8, scope: !12254)
!12256 = !DILocalVariable(name: "p", scope: !12257, file: !3, line: 7101, type: !2818)
!12257 = distinct !DILexicalBlock(scope: !12253, file: !3, line: 7101, column: 8)
!12258 = !DILocation(line: 7101, column: 8, scope: !12257)
!12259 = !DILocation(line: 7101, column: 8, scope: !12260)
!12260 = distinct !DILexicalBlock(scope: !12257, file: !3, line: 7101, column: 8)
!12261 = !DILocation(line: 7101, column: 8, scope: !12262)
!12262 = distinct !DILexicalBlock(scope: !12260, file: !3, line: 7101, column: 8)
!12263 = !DILocation(line: 7101, column: 8, scope: !12264)
!12264 = distinct !DILexicalBlock(scope: !12257, file: !3, line: 7101, column: 8)
!12265 = !DILocation(line: 7101, column: 8, scope: !12266)
!12266 = distinct !DILexicalBlock(scope: !12267, file: !3, line: 7101, column: 8)
!12267 = distinct !DILexicalBlock(scope: !12264, file: !3, line: 7101, column: 8)
!12268 = !DILocation(line: 7101, column: 8, scope: !12269)
!12269 = distinct !DILexicalBlock(scope: !12266, file: !3, line: 7101, column: 8)
!12270 = !DILocation(line: 0, scope: !12269)
!12271 = distinct !{!12271, !12265, !12265}
!12272 = !DILocation(line: 7101, column: 8, scope: !12267)
!12273 = !DILocation(line: 7101, column: 8, scope: !12274)
!12274 = distinct !DILexicalBlock(scope: !12257, file: !3, line: 7101, column: 8)
!12275 = !DILocation(line: 7101, column: 8, scope: !12276)
!12276 = distinct !DILexicalBlock(scope: !12277, file: !3, line: 7101, column: 8)
!12277 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 7101, column: 8)
!12278 = !DILocation(line: 7101, column: 8, scope: !12277)
!12279 = !DILocation(line: 7101, column: 8, scope: !12280)
!12280 = distinct !DILexicalBlock(scope: !12276, file: !3, line: 7101, column: 8)
!12281 = !DILocalVariable(name: "_limited_str", scope: !12282, file: !3, line: 7101, type: !2818)
!12282 = distinct !DILexicalBlock(scope: !12277, file: !3, line: 7101, column: 8)
!12283 = !DILocation(line: 7101, column: 8, scope: !12282)
!12284 = !DILocalVariable(name: "ch", scope: !12282, file: !3, line: 7101, type: !7)
!12285 = !DILocation(line: 7101, column: 8, scope: !12286)
!12286 = distinct !DILexicalBlock(scope: !12287, file: !3, line: 7101, column: 8)
!12287 = distinct !DILexicalBlock(scope: !12282, file: !3, line: 7101, column: 8)
!12288 = !DILocation(line: 7101, column: 8, scope: !12287)
!12289 = !DILocalVariable(name: "escape", scope: !12290, file: !3, line: 7101, type: !2798)
!12290 = distinct !DILexicalBlock(scope: !12286, file: !3, line: 7101, column: 8)
!12291 = !DILocation(line: 7101, column: 8, scope: !12290)
!12292 = !DILocation(line: 7101, column: 8, scope: !12293)
!12293 = distinct !DILexicalBlock(scope: !12290, file: !3, line: 7101, column: 8)
!12294 = distinct !{!12294, !12288, !12288}
!12295 = !DILocalVariable(name: "escape", scope: !12296, file: !3, line: 7101, type: !2798)
!12296 = distinct !DILexicalBlock(scope: !12274, file: !3, line: 7101, column: 8)
!12297 = !DILocation(line: 7101, column: 8, scope: !12296)
!12298 = !DILocalVariable(name: "ch", scope: !12296, file: !3, line: 7101, type: !7)
!12299 = !DILocation(line: 7101, column: 8, scope: !12300)
!12300 = distinct !DILexicalBlock(scope: !12296, file: !3, line: 7101, column: 8)
!12301 = !DILocation(line: 7101, column: 8, scope: !12302)
!12302 = distinct !DILexicalBlock(scope: !12296, file: !3, line: 7101, column: 8)
!12303 = distinct !{!12303, !12255, !12255}
!12304 = !DILocation(line: 7101, column: 8, scope: !12305)
!12305 = distinct !DILexicalBlock(scope: !12247, file: !3, line: 7101, column: 8)
!12306 = !DILocation(line: 7102, column: 8, scope: !12245)
!12307 = !DILocation(line: 7103, column: 6, scope: !12245)
!12308 = !DILocation(line: 7105, column: 21, scope: !12242)
!12309 = !DILocation(line: 7105, column: 4, scope: !12242)
!12310 = !DILocation(line: 7106, column: 28, scope: !12242)
!12311 = !DILocation(line: 7108, column: 7, scope: !12092)
!12312 = !DILocation(line: 7111, column: 11, scope: !12313)
!12313 = distinct !DILexicalBlock(scope: !12092, file: !3, line: 7111, column: 11)
!12314 = !DILocation(line: 7111, column: 16, scope: !12313)
!12315 = !DILocation(line: 7111, column: 11, scope: !12092)
!12316 = !DILocation(line: 7116, column: 8, scope: !12317)
!12317 = distinct !DILexicalBlock(scope: !12318, file: !3, line: 7116, column: 8)
!12318 = distinct !DILexicalBlock(scope: !12313, file: !3, line: 7112, column: 2)
!12319 = !DILocation(line: 7116, column: 8, scope: !12318)
!12320 = !DILocation(line: 7118, column: 12, scope: !12321)
!12321 = distinct !DILexicalBlock(scope: !12322, file: !3, line: 7118, column: 12)
!12322 = distinct !DILexicalBlock(scope: !12317, file: !3, line: 7117, column: 6)
!12323 = !DILocation(line: 7118, column: 12, scope: !12322)
!12324 = !DILocation(line: 7120, column: 5, scope: !12325)
!12325 = distinct !DILexicalBlock(scope: !12321, file: !3, line: 7119, column: 3)
!12326 = !DILocalVariable(name: "_ascii_bytes", scope: !12327, file: !3, line: 7120, type: !2818)
!12327 = distinct !DILexicalBlock(scope: !12325, file: !3, line: 7120, column: 5)
!12328 = !DILocation(line: 7120, column: 5, scope: !12327)
!12329 = !DILocalVariable(name: "limit", scope: !12327, file: !3, line: 7120, type: !2818)
!12330 = !DILocalVariable(name: "last_null", scope: !12327, file: !3, line: 7120, type: !2818)
!12331 = !DILocalVariable(name: "bytes_in_chunk", scope: !12327, file: !3, line: 7120, type: !7)
!12332 = !DILocation(line: 7120, column: 5, scope: !12333)
!12333 = distinct !DILexicalBlock(scope: !12334, file: !3, line: 7120, column: 5)
!12334 = distinct !DILexicalBlock(scope: !12327, file: !3, line: 7120, column: 5)
!12335 = !DILocation(line: 7120, column: 5, scope: !12334)
!12336 = !DILocalVariable(name: "p", scope: !12337, file: !3, line: 7120, type: !2818)
!12337 = distinct !DILexicalBlock(scope: !12333, file: !3, line: 7120, column: 5)
!12338 = !DILocation(line: 7120, column: 5, scope: !12337)
!12339 = !DILocation(line: 7120, column: 5, scope: !12340)
!12340 = distinct !DILexicalBlock(scope: !12337, file: !3, line: 7120, column: 5)
!12341 = !DILocation(line: 7120, column: 5, scope: !12342)
!12342 = distinct !DILexicalBlock(scope: !12340, file: !3, line: 7120, column: 5)
!12343 = !DILocation(line: 7120, column: 5, scope: !12344)
!12344 = distinct !DILexicalBlock(scope: !12337, file: !3, line: 7120, column: 5)
!12345 = !DILocation(line: 7120, column: 5, scope: !12346)
!12346 = distinct !DILexicalBlock(scope: !12347, file: !3, line: 7120, column: 5)
!12347 = distinct !DILexicalBlock(scope: !12344, file: !3, line: 7120, column: 5)
!12348 = !DILocation(line: 7120, column: 5, scope: !12349)
!12349 = distinct !DILexicalBlock(scope: !12346, file: !3, line: 7120, column: 5)
!12350 = !DILocation(line: 0, scope: !12349)
!12351 = distinct !{!12351, !12345, !12345}
!12352 = !DILocation(line: 7120, column: 5, scope: !12347)
!12353 = !DILocation(line: 7120, column: 5, scope: !12354)
!12354 = distinct !DILexicalBlock(scope: !12337, file: !3, line: 7120, column: 5)
!12355 = !DILocation(line: 7120, column: 5, scope: !12356)
!12356 = distinct !DILexicalBlock(scope: !12357, file: !3, line: 7120, column: 5)
!12357 = distinct !DILexicalBlock(scope: !12354, file: !3, line: 7120, column: 5)
!12358 = !DILocation(line: 7120, column: 5, scope: !12357)
!12359 = !DILocation(line: 7120, column: 5, scope: !12360)
!12360 = distinct !DILexicalBlock(scope: !12356, file: !3, line: 7120, column: 5)
!12361 = !DILocalVariable(name: "_limited_str", scope: !12362, file: !3, line: 7120, type: !2818)
!12362 = distinct !DILexicalBlock(scope: !12357, file: !3, line: 7120, column: 5)
!12363 = !DILocation(line: 7120, column: 5, scope: !12362)
!12364 = !DILocalVariable(name: "ch", scope: !12362, file: !3, line: 7120, type: !7)
!12365 = !DILocation(line: 7120, column: 5, scope: !12366)
!12366 = distinct !DILexicalBlock(scope: !12367, file: !3, line: 7120, column: 5)
!12367 = distinct !DILexicalBlock(scope: !12362, file: !3, line: 7120, column: 5)
!12368 = !DILocation(line: 7120, column: 5, scope: !12367)
!12369 = !DILocalVariable(name: "escape", scope: !12370, file: !3, line: 7120, type: !2798)
!12370 = distinct !DILexicalBlock(scope: !12366, file: !3, line: 7120, column: 5)
!12371 = !DILocation(line: 7120, column: 5, scope: !12370)
!12372 = !DILocation(line: 7120, column: 5, scope: !12373)
!12373 = distinct !DILexicalBlock(scope: !12370, file: !3, line: 7120, column: 5)
!12374 = distinct !{!12374, !12368, !12368}
!12375 = !DILocalVariable(name: "escape", scope: !12376, file: !3, line: 7120, type: !2798)
!12376 = distinct !DILexicalBlock(scope: !12354, file: !3, line: 7120, column: 5)
!12377 = !DILocation(line: 7120, column: 5, scope: !12376)
!12378 = !DILocalVariable(name: "ch", scope: !12376, file: !3, line: 7120, type: !7)
!12379 = !DILocation(line: 7120, column: 5, scope: !12380)
!12380 = distinct !DILexicalBlock(scope: !12376, file: !3, line: 7120, column: 5)
!12381 = !DILocation(line: 7120, column: 5, scope: !12382)
!12382 = distinct !DILexicalBlock(scope: !12376, file: !3, line: 7120, column: 5)
!12383 = distinct !{!12383, !12335, !12335}
!12384 = !DILocation(line: 7120, column: 5, scope: !12385)
!12385 = distinct !DILexicalBlock(scope: !12327, file: !3, line: 7120, column: 5)
!12386 = !DILocation(line: 7121, column: 5, scope: !12325)
!12387 = !DILocation(line: 7122, column: 3, scope: !12325)
!12388 = !DILocation(line: 7123, column: 6, scope: !12322)
!12389 = !DILocalVariable(name: "sec", scope: !12390, file: !3, line: 7126, type: !3109)
!12390 = distinct !DILexicalBlock(scope: !12317, file: !3, line: 7125, column: 6)
!12391 = !DILocation(line: 7126, column: 18, scope: !12390)
!12392 = !DILocation(line: 7128, column: 43, scope: !12390)
!12393 = !DILocation(line: 7128, column: 14, scope: !12390)
!12394 = !DILocation(line: 7128, column: 12, scope: !12390)
!12395 = !DILocation(line: 7134, column: 27, scope: !12390)
!12396 = !DILocation(line: 7134, column: 8, scope: !12390)
!12397 = !DILocation(line: 7135, column: 16, scope: !12390)
!12398 = !DILocation(line: 7137, column: 2, scope: !12318)
!12399 = !DILocation(line: 7111, column: 19, scope: !12313)
!12400 = !DILocation(line: 7140, column: 7, scope: !12092)
!12401 = !DILocation(line: 7146, column: 3, scope: !3856)
!12402 = distinct !DISubprogram(name: "default_elf_asm_output_external", scope: !3, file: !3, line: 7152, type: !12403, scopeLine: 7155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12403 = !DISubroutineType(types: !12404)
!12404 = !{null, !6016, !2702, !2692}
!12405 = !DILocalVariable(name: "file", arg: 1, scope: !12402, file: !3, line: 7152, type: !6016)
!12406 = !DILocation(line: 7152, column: 40, scope: !12402)
!12407 = !DILocalVariable(name: "decl", arg: 2, scope: !12402, file: !3, line: 7153, type: !2702)
!12408 = !DILocation(line: 7153, column: 11, scope: !12402)
!12409 = !DILocalVariable(name: "name", arg: 3, scope: !12402, file: !3, line: 7154, type: !2692)
!12410 = !DILocation(line: 7154, column: 18, scope: !12402)
!12411 = !DILocation(line: 7159, column: 7, scope: !12412)
!12412 = distinct !DILexicalBlock(scope: !12402, file: !3, line: 7159, column: 7)
!12413 = !DILocation(line: 7160, column: 7, scope: !12412)
!12414 = !DILocation(line: 7160, column: 18, scope: !12412)
!12415 = !DILocation(line: 7160, column: 33, scope: !12412)
!12416 = !DILocation(line: 7160, column: 10, scope: !12412)
!12417 = !DILocation(line: 7159, column: 7, scope: !12402)
!12418 = !DILocation(line: 7161, column: 32, scope: !12412)
!12419 = !DILocation(line: 7161, column: 5, scope: !12412)
!12420 = !DILocation(line: 7162, column: 1, scope: !12402)
!12421 = distinct !DISubprogram(name: "gt_ggc_mx_rtx_constant_pool", scope: !3869, file: !3869, line: 23, type: !3301, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12422 = !DILocalVariable(name: "x_p", arg: 1, scope: !12421, file: !3869, line: 23, type: !2691)
!12423 = !DILocation(line: 23, column: 36, scope: !12421)
!12424 = !DILocalVariable(name: "x", scope: !12421, file: !3869, line: 25, type: !12425)
!12425 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3791)
!12426 = !DILocation(line: 25, column: 36, scope: !12421)
!12427 = !DILocation(line: 25, column: 68, scope: !12421)
!12428 = !DILocation(line: 25, column: 40, scope: !12421)
!12429 = !DILocation(line: 26, column: 7, scope: !12430)
!12430 = distinct !DILexicalBlock(scope: !12421, file: !3869, line: 26, column: 7)
!12431 = !DILocation(line: 26, column: 7, scope: !12421)
!12432 = !DILocation(line: 28, column: 7, scope: !12433)
!12433 = distinct !DILexicalBlock(scope: !12430, file: !3869, line: 27, column: 5)
!12434 = !DILocation(line: 28, column: 7, scope: !12435)
!12435 = distinct !DILexicalBlock(scope: !12436, file: !3869, line: 28, column: 7)
!12436 = distinct !DILexicalBlock(scope: !12433, file: !3869, line: 28, column: 7)
!12437 = !DILocation(line: 28, column: 7, scope: !12436)
!12438 = !DILocation(line: 29, column: 7, scope: !12433)
!12439 = !DILocation(line: 29, column: 7, scope: !12440)
!12440 = distinct !DILexicalBlock(scope: !12441, file: !3869, line: 29, column: 7)
!12441 = distinct !DILexicalBlock(scope: !12433, file: !3869, line: 29, column: 7)
!12442 = !DILocation(line: 29, column: 7, scope: !12441)
!12443 = !DILocation(line: 30, column: 51, scope: !12433)
!12444 = !DILocation(line: 30, column: 54, scope: !12433)
!12445 = !DILocation(line: 30, column: 49, scope: !12433)
!12446 = !DILocation(line: 30, column: 7, scope: !12433)
!12447 = !DILocation(line: 31, column: 5, scope: !12433)
!12448 = !DILocation(line: 32, column: 1, scope: !12421)
!12449 = distinct !DISubprogram(name: "gt_ggc_mx_constant_descriptor_rtx", scope: !3869, file: !3869, line: 35, type: !3301, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12450 = !DILocalVariable(name: "x_p", arg: 1, scope: !12449, file: !3869, line: 35, type: !2691)
!12451 = !DILocation(line: 35, column: 42, scope: !12449)
!12452 = !DILocalVariable(name: "x", scope: !12449, file: !3869, line: 37, type: !3083)
!12453 = !DILocation(line: 37, column: 36, scope: !12449)
!12454 = !DILocation(line: 37, column: 74, scope: !12449)
!12455 = !DILocation(line: 37, column: 40, scope: !12449)
!12456 = !DILocalVariable(name: "xlimit", scope: !12449, file: !3869, line: 38, type: !3083)
!12457 = !DILocation(line: 38, column: 36, scope: !12449)
!12458 = !DILocation(line: 38, column: 45, scope: !12449)
!12459 = !DILocation(line: 39, column: 3, scope: !12449)
!12460 = !DILocation(line: 39, column: 10, scope: !12449)
!12461 = !DILocation(line: 0, scope: !12449)
!12462 = !DILocation(line: 40, column: 16, scope: !12449)
!12463 = !DILocation(line: 40, column: 24, scope: !12449)
!12464 = !DILocation(line: 40, column: 11, scope: !12449)
!12465 = distinct !{!12465, !12459, !12466}
!12466 = !DILocation(line: 40, column: 28, scope: !12449)
!12467 = !DILocation(line: 41, column: 3, scope: !12449)
!12468 = !DILocation(line: 41, column: 10, scope: !12449)
!12469 = !DILocation(line: 41, column: 15, scope: !12449)
!12470 = !DILocation(line: 41, column: 12, scope: !12449)
!12471 = !DILocation(line: 43, column: 7, scope: !12472)
!12472 = distinct !DILexicalBlock(scope: !12449, file: !3869, line: 42, column: 5)
!12473 = !DILocation(line: 43, column: 7, scope: !12474)
!12474 = distinct !DILexicalBlock(scope: !12475, file: !3869, line: 43, column: 7)
!12475 = distinct !DILexicalBlock(scope: !12472, file: !3869, line: 43, column: 7)
!12476 = !DILocation(line: 43, column: 7, scope: !12475)
!12477 = !DILocation(line: 44, column: 7, scope: !12472)
!12478 = !DILocation(line: 44, column: 7, scope: !12479)
!12479 = distinct !DILexicalBlock(scope: !12480, file: !3869, line: 44, column: 7)
!12480 = distinct !DILexicalBlock(scope: !12472, file: !3869, line: 44, column: 7)
!12481 = !DILocation(line: 44, column: 7, scope: !12480)
!12482 = !DILocation(line: 45, column: 7, scope: !12472)
!12483 = !DILocation(line: 45, column: 7, scope: !12484)
!12484 = distinct !DILexicalBlock(scope: !12485, file: !3869, line: 45, column: 7)
!12485 = distinct !DILexicalBlock(scope: !12472, file: !3869, line: 45, column: 7)
!12486 = !DILocation(line: 45, column: 7, scope: !12485)
!12487 = !DILocation(line: 46, column: 7, scope: !12472)
!12488 = !DILocation(line: 46, column: 7, scope: !12489)
!12489 = distinct !DILexicalBlock(scope: !12490, file: !3869, line: 46, column: 7)
!12490 = distinct !DILexicalBlock(scope: !12472, file: !3869, line: 46, column: 7)
!12491 = !DILocation(line: 46, column: 7, scope: !12490)
!12492 = !DILocation(line: 47, column: 14, scope: !12472)
!12493 = !DILocation(line: 47, column: 17, scope: !12472)
!12494 = !DILocation(line: 47, column: 9, scope: !12472)
!12495 = distinct !{!12495, !12467, !12496}
!12496 = !DILocation(line: 48, column: 5, scope: !12449)
!12497 = !DILocation(line: 49, column: 1, scope: !12449)
!12498 = distinct !DISubprogram(name: "gt_ggc_m_P23constant_descriptor_rtx4htab", scope: !3869, file: !3869, line: 52, type: !3301, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12499 = !DILocalVariable(name: "x_p", arg: 1, scope: !12498, file: !3869, line: 52, type: !2691)
!12500 = !DILocation(line: 52, column: 49, scope: !12498)
!12501 = !DILocalVariable(name: "x", scope: !12498, file: !3869, line: 54, type: !12502)
!12502 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3285)
!12503 = !DILocation(line: 54, column: 23, scope: !12498)
!12504 = !DILocation(line: 54, column: 42, scope: !12498)
!12505 = !DILocation(line: 54, column: 27, scope: !12498)
!12506 = !DILocation(line: 55, column: 7, scope: !12507)
!12507 = distinct !DILexicalBlock(scope: !12498, file: !3869, line: 55, column: 7)
!12508 = !DILocation(line: 55, column: 7, scope: !12498)
!12509 = !DILocation(line: 57, column: 13, scope: !12510)
!12510 = distinct !DILexicalBlock(scope: !12511, file: !3869, line: 57, column: 11)
!12511 = distinct !DILexicalBlock(scope: !12507, file: !3869, line: 56, column: 5)
!12512 = !DILocation(line: 57, column: 16, scope: !12510)
!12513 = !DILocation(line: 57, column: 24, scope: !12510)
!12514 = !DILocation(line: 57, column: 11, scope: !12511)
!12515 = !DILocalVariable(name: "i0", scope: !12516, file: !3869, line: 58, type: !3306)
!12516 = distinct !DILexicalBlock(scope: !12510, file: !3869, line: 57, column: 33)
!12517 = !DILocation(line: 58, column: 16, scope: !12516)
!12518 = !DILocation(line: 59, column: 17, scope: !12519)
!12519 = distinct !DILexicalBlock(scope: !12516, file: !3869, line: 59, column: 9)
!12520 = !DILocation(line: 59, column: 14, scope: !12519)
!12521 = !DILocation(line: 59, column: 22, scope: !12522)
!12522 = distinct !DILexicalBlock(scope: !12519, file: !3869, line: 59, column: 9)
!12523 = !DILocation(line: 59, column: 40, scope: !12522)
!12524 = !DILocation(line: 59, column: 44, scope: !12522)
!12525 = !DILocation(line: 59, column: 25, scope: !12522)
!12526 = !DILocation(line: 59, column: 9, scope: !12519)
!12527 = !DILocation(line: 60, column: 11, scope: !12528)
!12528 = distinct !DILexicalBlock(scope: !12522, file: !3869, line: 59, column: 57)
!12529 = !DILocation(line: 60, column: 11, scope: !12530)
!12530 = distinct !DILexicalBlock(scope: !12531, file: !3869, line: 60, column: 11)
!12531 = distinct !DILexicalBlock(scope: !12528, file: !3869, line: 60, column: 11)
!12532 = !DILocation(line: 60, column: 11, scope: !12531)
!12533 = !DILocation(line: 61, column: 9, scope: !12528)
!12534 = !DILocation(line: 59, column: 53, scope: !12522)
!12535 = !DILocation(line: 59, column: 9, scope: !12522)
!12536 = distinct !{!12536, !12526, !12537}
!12537 = !DILocation(line: 61, column: 9, scope: !12519)
!12538 = !DILocation(line: 62, column: 9, scope: !12516)
!12539 = !DILocalVariable(name: "a__", scope: !12540, file: !3869, line: 62, type: !12541)
!12540 = distinct !DILexicalBlock(scope: !12516, file: !3869, line: 62, column: 9)
!12541 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3132)
!12542 = !DILocation(line: 62, column: 9, scope: !12540)
!12543 = !DILocation(line: 62, column: 9, scope: !12544)
!12544 = distinct !DILexicalBlock(scope: !12540, file: !3869, line: 62, column: 9)
!12545 = !DILocation(line: 63, column: 7, scope: !12516)
!12546 = !DILocation(line: 64, column: 5, scope: !12511)
!12547 = !DILocation(line: 65, column: 1, scope: !12498)
!12548 = distinct !DISubprogram(name: "gt_pch_nx_rtx_constant_pool", scope: !3869, file: !3869, line: 68, type: !3301, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12549 = !DILocalVariable(name: "x_p", arg: 1, scope: !12548, file: !3869, line: 68, type: !2691)
!12550 = !DILocation(line: 68, column: 36, scope: !12548)
!12551 = !DILocalVariable(name: "x", scope: !12548, file: !3869, line: 70, type: !12425)
!12552 = !DILocation(line: 70, column: 36, scope: !12548)
!12553 = !DILocation(line: 70, column: 68, scope: !12548)
!12554 = !DILocation(line: 70, column: 40, scope: !12548)
!12555 = !DILocation(line: 71, column: 27, scope: !12556)
!12556 = distinct !DILexicalBlock(scope: !12548, file: !3869, line: 71, column: 7)
!12557 = !DILocation(line: 71, column: 30, scope: !12556)
!12558 = !DILocation(line: 71, column: 7, scope: !12556)
!12559 = !DILocation(line: 71, column: 7, scope: !12548)
!12560 = !DILocation(line: 73, column: 7, scope: !12561)
!12561 = distinct !DILexicalBlock(scope: !12556, file: !3869, line: 72, column: 5)
!12562 = !DILocation(line: 73, column: 7, scope: !12563)
!12563 = distinct !DILexicalBlock(scope: !12564, file: !3869, line: 73, column: 7)
!12564 = distinct !DILexicalBlock(scope: !12561, file: !3869, line: 73, column: 7)
!12565 = !DILocation(line: 73, column: 7, scope: !12564)
!12566 = !DILocation(line: 74, column: 7, scope: !12561)
!12567 = !DILocation(line: 74, column: 7, scope: !12568)
!12568 = distinct !DILexicalBlock(scope: !12569, file: !3869, line: 74, column: 7)
!12569 = distinct !DILexicalBlock(scope: !12561, file: !3869, line: 74, column: 7)
!12570 = !DILocation(line: 74, column: 7, scope: !12569)
!12571 = !DILocation(line: 75, column: 51, scope: !12561)
!12572 = !DILocation(line: 75, column: 54, scope: !12561)
!12573 = !DILocation(line: 75, column: 49, scope: !12561)
!12574 = !DILocation(line: 75, column: 7, scope: !12561)
!12575 = !DILocation(line: 76, column: 5, scope: !12561)
!12576 = !DILocation(line: 77, column: 1, scope: !12548)
!12577 = distinct !DISubprogram(name: "gt_pch_p_17rtx_constant_pool", scope: !3869, file: !3869, line: 113, type: !12578, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12578 = !DISubroutineType(types: !12579)
!12579 = !{null, !2691, !2691, !12580, !2691}
!12580 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_operator", file: !3873, line: 38, baseType: !3327)
!12581 = !DILocalVariable(name: "this_obj", arg: 1, scope: !12577, file: !3869, line: 113, type: !2691)
!12582 = !DILocation(line: 113, column: 54, scope: !12577)
!12583 = !DILocalVariable(name: "x_p", arg: 2, scope: !12577, file: !3869, line: 114, type: !2691)
!12584 = !DILocation(line: 114, column: 8, scope: !12577)
!12585 = !DILocalVariable(name: "op", arg: 3, scope: !12577, file: !3869, line: 115, type: !12580)
!12586 = !DILocation(line: 115, column: 39, scope: !12577)
!12587 = !DILocalVariable(name: "cookie", arg: 4, scope: !12577, file: !3869, line: 116, type: !2691)
!12588 = !DILocation(line: 116, column: 25, scope: !12577)
!12589 = !DILocalVariable(name: "x", scope: !12577, file: !3869, line: 118, type: !12425)
!12590 = !DILocation(line: 118, column: 36, scope: !12577)
!12591 = !DILocation(line: 118, column: 85, scope: !12577)
!12592 = !DILocation(line: 118, column: 57, scope: !12577)
!12593 = !DILocation(line: 119, column: 16, scope: !12594)
!12594 = distinct !DILexicalBlock(scope: !12577, file: !3869, line: 119, column: 7)
!12595 = !DILocation(line: 119, column: 7, scope: !12594)
!12596 = !DILocation(line: 119, column: 22, scope: !12594)
!12597 = !DILocation(line: 119, column: 19, scope: !12594)
!12598 = !DILocation(line: 119, column: 7, scope: !12577)
!12599 = !DILocation(line: 120, column: 5, scope: !12594)
!12600 = !DILocation(line: 120, column: 13, scope: !12594)
!12601 = !DILocation(line: 120, column: 16, scope: !12594)
!12602 = !DILocation(line: 120, column: 9, scope: !12594)
!12603 = !DILocation(line: 120, column: 24, scope: !12594)
!12604 = !DILocation(line: 121, column: 16, scope: !12605)
!12605 = distinct !DILexicalBlock(scope: !12577, file: !3869, line: 121, column: 7)
!12606 = !DILocation(line: 121, column: 7, scope: !12605)
!12607 = !DILocation(line: 121, column: 22, scope: !12605)
!12608 = !DILocation(line: 121, column: 19, scope: !12605)
!12609 = !DILocation(line: 121, column: 7, scope: !12577)
!12610 = !DILocation(line: 122, column: 5, scope: !12605)
!12611 = !DILocation(line: 122, column: 13, scope: !12605)
!12612 = !DILocation(line: 122, column: 16, scope: !12605)
!12613 = !DILocation(line: 122, column: 9, scope: !12605)
!12614 = !DILocation(line: 122, column: 23, scope: !12605)
!12615 = !DILocation(line: 123, column: 16, scope: !12616)
!12616 = distinct !DILexicalBlock(scope: !12577, file: !3869, line: 123, column: 7)
!12617 = !DILocation(line: 123, column: 7, scope: !12616)
!12618 = !DILocation(line: 123, column: 22, scope: !12616)
!12619 = !DILocation(line: 123, column: 19, scope: !12616)
!12620 = !DILocation(line: 123, column: 7, scope: !12577)
!12621 = !DILocation(line: 124, column: 5, scope: !12616)
!12622 = !DILocation(line: 124, column: 13, scope: !12616)
!12623 = !DILocation(line: 124, column: 16, scope: !12616)
!12624 = !DILocation(line: 124, column: 9, scope: !12616)
!12625 = !DILocation(line: 124, column: 33, scope: !12616)
!12626 = !DILocation(line: 125, column: 1, scope: !12577)
!12627 = distinct !DISubprogram(name: "gt_pch_nx_constant_descriptor_rtx", scope: !3869, file: !3869, line: 80, type: !3301, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12628 = !DILocalVariable(name: "x_p", arg: 1, scope: !12627, file: !3869, line: 80, type: !2691)
!12629 = !DILocation(line: 80, column: 42, scope: !12627)
!12630 = !DILocalVariable(name: "x", scope: !12627, file: !3869, line: 82, type: !3083)
!12631 = !DILocation(line: 82, column: 36, scope: !12627)
!12632 = !DILocation(line: 82, column: 74, scope: !12627)
!12633 = !DILocation(line: 82, column: 40, scope: !12627)
!12634 = !DILocalVariable(name: "xlimit", scope: !12627, file: !3869, line: 83, type: !3083)
!12635 = !DILocation(line: 83, column: 36, scope: !12627)
!12636 = !DILocation(line: 83, column: 45, scope: !12627)
!12637 = !DILocation(line: 84, column: 3, scope: !12627)
!12638 = !DILocation(line: 84, column: 30, scope: !12627)
!12639 = !DILocation(line: 84, column: 38, scope: !12627)
!12640 = !DILocation(line: 84, column: 10, scope: !12627)
!12641 = !DILocation(line: 85, column: 16, scope: !12627)
!12642 = !DILocation(line: 85, column: 24, scope: !12627)
!12643 = !DILocation(line: 85, column: 11, scope: !12627)
!12644 = distinct !{!12644, !12637, !12645}
!12645 = !DILocation(line: 85, column: 28, scope: !12627)
!12646 = !DILocation(line: 86, column: 3, scope: !12627)
!12647 = !DILocation(line: 86, column: 10, scope: !12627)
!12648 = !DILocation(line: 86, column: 15, scope: !12627)
!12649 = !DILocation(line: 86, column: 12, scope: !12627)
!12650 = !DILocation(line: 88, column: 7, scope: !12651)
!12651 = distinct !DILexicalBlock(scope: !12627, file: !3869, line: 87, column: 5)
!12652 = !DILocation(line: 88, column: 7, scope: !12653)
!12653 = distinct !DILexicalBlock(scope: !12654, file: !3869, line: 88, column: 7)
!12654 = distinct !DILexicalBlock(scope: !12651, file: !3869, line: 88, column: 7)
!12655 = !DILocation(line: 88, column: 7, scope: !12654)
!12656 = !DILocation(line: 89, column: 7, scope: !12651)
!12657 = !DILocation(line: 89, column: 7, scope: !12658)
!12658 = distinct !DILexicalBlock(scope: !12659, file: !3869, line: 89, column: 7)
!12659 = distinct !DILexicalBlock(scope: !12651, file: !3869, line: 89, column: 7)
!12660 = !DILocation(line: 89, column: 7, scope: !12659)
!12661 = !DILocation(line: 90, column: 7, scope: !12651)
!12662 = !DILocation(line: 90, column: 7, scope: !12663)
!12663 = distinct !DILexicalBlock(scope: !12664, file: !3869, line: 90, column: 7)
!12664 = distinct !DILexicalBlock(scope: !12651, file: !3869, line: 90, column: 7)
!12665 = !DILocation(line: 90, column: 7, scope: !12664)
!12666 = !DILocation(line: 91, column: 7, scope: !12651)
!12667 = !DILocation(line: 91, column: 7, scope: !12668)
!12668 = distinct !DILexicalBlock(scope: !12669, file: !3869, line: 91, column: 7)
!12669 = distinct !DILexicalBlock(scope: !12651, file: !3869, line: 91, column: 7)
!12670 = !DILocation(line: 91, column: 7, scope: !12669)
!12671 = !DILocation(line: 92, column: 14, scope: !12651)
!12672 = !DILocation(line: 92, column: 17, scope: !12651)
!12673 = !DILocation(line: 92, column: 9, scope: !12651)
!12674 = distinct !{!12674, !12646, !12675}
!12675 = !DILocation(line: 93, column: 5, scope: !12627)
!12676 = !DILocation(line: 94, column: 1, scope: !12627)
!12677 = distinct !DISubprogram(name: "gt_pch_n_P23constant_descriptor_rtx4htab", scope: !3869, file: !3869, line: 97, type: !3301, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12678 = !DILocalVariable(name: "x_p", arg: 1, scope: !12677, file: !3869, line: 97, type: !2691)
!12679 = !DILocation(line: 97, column: 49, scope: !12677)
!12680 = !DILocalVariable(name: "x", scope: !12677, file: !3869, line: 99, type: !12502)
!12681 = !DILocation(line: 99, column: 23, scope: !12677)
!12682 = !DILocation(line: 99, column: 42, scope: !12677)
!12683 = !DILocation(line: 99, column: 27, scope: !12677)
!12684 = !DILocation(line: 100, column: 27, scope: !12685)
!12685 = distinct !DILexicalBlock(scope: !12677, file: !3869, line: 100, column: 7)
!12686 = !DILocation(line: 100, column: 30, scope: !12685)
!12687 = !DILocation(line: 100, column: 7, scope: !12685)
!12688 = !DILocation(line: 100, column: 7, scope: !12677)
!12689 = !DILocation(line: 102, column: 13, scope: !12690)
!12690 = distinct !DILexicalBlock(scope: !12691, file: !3869, line: 102, column: 11)
!12691 = distinct !DILexicalBlock(scope: !12685, file: !3869, line: 101, column: 5)
!12692 = !DILocation(line: 102, column: 16, scope: !12690)
!12693 = !DILocation(line: 102, column: 24, scope: !12690)
!12694 = !DILocation(line: 102, column: 11, scope: !12691)
!12695 = !DILocalVariable(name: "i0", scope: !12696, file: !3869, line: 103, type: !3306)
!12696 = distinct !DILexicalBlock(scope: !12690, file: !3869, line: 102, column: 33)
!12697 = !DILocation(line: 103, column: 16, scope: !12696)
!12698 = !DILocation(line: 104, column: 17, scope: !12699)
!12699 = distinct !DILexicalBlock(scope: !12696, file: !3869, line: 104, column: 9)
!12700 = !DILocation(line: 104, column: 14, scope: !12699)
!12701 = !DILocation(line: 104, column: 22, scope: !12702)
!12702 = distinct !DILexicalBlock(scope: !12699, file: !3869, line: 104, column: 9)
!12703 = !DILocation(line: 104, column: 40, scope: !12702)
!12704 = !DILocation(line: 104, column: 44, scope: !12702)
!12705 = !DILocation(line: 104, column: 25, scope: !12702)
!12706 = !DILocation(line: 104, column: 9, scope: !12699)
!12707 = !DILocation(line: 105, column: 11, scope: !12708)
!12708 = distinct !DILexicalBlock(scope: !12702, file: !3869, line: 104, column: 57)
!12709 = !DILocation(line: 105, column: 11, scope: !12710)
!12710 = distinct !DILexicalBlock(scope: !12711, file: !3869, line: 105, column: 11)
!12711 = distinct !DILexicalBlock(scope: !12708, file: !3869, line: 105, column: 11)
!12712 = !DILocation(line: 105, column: 11, scope: !12711)
!12713 = !DILocation(line: 106, column: 9, scope: !12708)
!12714 = !DILocation(line: 104, column: 53, scope: !12702)
!12715 = !DILocation(line: 104, column: 9, scope: !12702)
!12716 = distinct !{!12716, !12706, !12717}
!12717 = !DILocation(line: 106, column: 9, scope: !12699)
!12718 = !DILocation(line: 107, column: 31, scope: !12696)
!12719 = !DILocation(line: 107, column: 34, scope: !12696)
!12720 = !DILocation(line: 107, column: 29, scope: !12696)
!12721 = !DILocation(line: 107, column: 43, scope: !12696)
!12722 = !DILocation(line: 107, column: 9, scope: !12696)
!12723 = !DILocation(line: 108, column: 7, scope: !12696)
!12724 = !DILocation(line: 109, column: 5, scope: !12691)
!12725 = !DILocation(line: 110, column: 1, scope: !12677)
!12726 = distinct !DISubprogram(name: "gt_pch_p_23constant_descriptor_rtx", scope: !3869, file: !3869, line: 128, type: !12578, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12727 = !DILocalVariable(name: "this_obj", arg: 1, scope: !12726, file: !3869, line: 128, type: !2691)
!12728 = !DILocation(line: 128, column: 60, scope: !12726)
!12729 = !DILocalVariable(name: "x_p", arg: 2, scope: !12726, file: !3869, line: 129, type: !2691)
!12730 = !DILocation(line: 129, column: 8, scope: !12726)
!12731 = !DILocalVariable(name: "op", arg: 3, scope: !12726, file: !3869, line: 130, type: !12580)
!12732 = !DILocation(line: 130, column: 39, scope: !12726)
!12733 = !DILocalVariable(name: "cookie", arg: 4, scope: !12726, file: !3869, line: 131, type: !2691)
!12734 = !DILocation(line: 131, column: 25, scope: !12726)
!12735 = !DILocalVariable(name: "x", scope: !12726, file: !3869, line: 133, type: !12736)
!12736 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3083)
!12737 = !DILocation(line: 133, column: 42, scope: !12726)
!12738 = !DILocation(line: 133, column: 97, scope: !12726)
!12739 = !DILocation(line: 133, column: 63, scope: !12726)
!12740 = !DILocation(line: 134, column: 16, scope: !12741)
!12741 = distinct !DILexicalBlock(scope: !12726, file: !3869, line: 134, column: 7)
!12742 = !DILocation(line: 134, column: 7, scope: !12741)
!12743 = !DILocation(line: 134, column: 22, scope: !12741)
!12744 = !DILocation(line: 134, column: 19, scope: !12741)
!12745 = !DILocation(line: 134, column: 7, scope: !12726)
!12746 = !DILocation(line: 135, column: 5, scope: !12741)
!12747 = !DILocation(line: 135, column: 13, scope: !12741)
!12748 = !DILocation(line: 135, column: 16, scope: !12741)
!12749 = !DILocation(line: 135, column: 9, scope: !12741)
!12750 = !DILocation(line: 135, column: 23, scope: !12741)
!12751 = !DILocation(line: 136, column: 16, scope: !12752)
!12752 = distinct !DILexicalBlock(scope: !12726, file: !3869, line: 136, column: 7)
!12753 = !DILocation(line: 136, column: 7, scope: !12752)
!12754 = !DILocation(line: 136, column: 22, scope: !12752)
!12755 = !DILocation(line: 136, column: 19, scope: !12752)
!12756 = !DILocation(line: 136, column: 7, scope: !12726)
!12757 = !DILocation(line: 137, column: 5, scope: !12752)
!12758 = !DILocation(line: 137, column: 13, scope: !12752)
!12759 = !DILocation(line: 137, column: 16, scope: !12752)
!12760 = !DILocation(line: 137, column: 9, scope: !12752)
!12761 = !DILocation(line: 137, column: 22, scope: !12752)
!12762 = !DILocation(line: 138, column: 16, scope: !12763)
!12763 = distinct !DILexicalBlock(scope: !12726, file: !3869, line: 138, column: 7)
!12764 = !DILocation(line: 138, column: 7, scope: !12763)
!12765 = !DILocation(line: 138, column: 22, scope: !12763)
!12766 = !DILocation(line: 138, column: 19, scope: !12763)
!12767 = !DILocation(line: 138, column: 7, scope: !12726)
!12768 = !DILocation(line: 139, column: 5, scope: !12763)
!12769 = !DILocation(line: 139, column: 13, scope: !12763)
!12770 = !DILocation(line: 139, column: 16, scope: !12763)
!12771 = !DILocation(line: 139, column: 9, scope: !12763)
!12772 = !DILocation(line: 139, column: 22, scope: !12763)
!12773 = !DILocation(line: 140, column: 16, scope: !12774)
!12774 = distinct !DILexicalBlock(scope: !12726, file: !3869, line: 140, column: 7)
!12775 = !DILocation(line: 140, column: 7, scope: !12774)
!12776 = !DILocation(line: 140, column: 22, scope: !12774)
!12777 = !DILocation(line: 140, column: 19, scope: !12774)
!12778 = !DILocation(line: 140, column: 7, scope: !12726)
!12779 = !DILocation(line: 141, column: 5, scope: !12774)
!12780 = !DILocation(line: 141, column: 13, scope: !12774)
!12781 = !DILocation(line: 141, column: 16, scope: !12774)
!12782 = !DILocation(line: 141, column: 9, scope: !12774)
!12783 = !DILocation(line: 141, column: 27, scope: !12774)
!12784 = !DILocation(line: 142, column: 1, scope: !12726)
!12785 = distinct !DISubprogram(name: "gt_pch_p_P23constant_descriptor_rtx4htab", scope: !3869, file: !3869, line: 145, type: !12578, scopeLine: 149, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12786 = !DILocalVariable(name: "this_obj", arg: 1, scope: !12785, file: !3869, line: 145, type: !2691)
!12787 = !DILocation(line: 145, column: 66, scope: !12785)
!12788 = !DILocalVariable(name: "x_p", arg: 2, scope: !12785, file: !3869, line: 146, type: !2691)
!12789 = !DILocation(line: 146, column: 8, scope: !12785)
!12790 = !DILocalVariable(name: "op", arg: 3, scope: !12785, file: !3869, line: 147, type: !12580)
!12791 = !DILocation(line: 147, column: 39, scope: !12785)
!12792 = !DILocalVariable(name: "cookie", arg: 4, scope: !12785, file: !3869, line: 148, type: !2691)
!12793 = !DILocation(line: 148, column: 25, scope: !12785)
!12794 = !DILocalVariable(name: "x", scope: !12785, file: !3869, line: 150, type: !12502)
!12795 = !DILocation(line: 150, column: 23, scope: !12785)
!12796 = !DILocation(line: 150, column: 59, scope: !12785)
!12797 = !DILocation(line: 150, column: 44, scope: !12785)
!12798 = !DILocation(line: 151, column: 9, scope: !12799)
!12799 = distinct !DILexicalBlock(scope: !12785, file: !3869, line: 151, column: 7)
!12800 = !DILocation(line: 151, column: 12, scope: !12799)
!12801 = !DILocation(line: 151, column: 20, scope: !12799)
!12802 = !DILocation(line: 151, column: 7, scope: !12785)
!12803 = !DILocalVariable(name: "i0", scope: !12804, file: !3869, line: 152, type: !3306)
!12804 = distinct !DILexicalBlock(scope: !12799, file: !3869, line: 151, column: 29)
!12805 = !DILocation(line: 152, column: 12, scope: !12804)
!12806 = !DILocation(line: 153, column: 13, scope: !12807)
!12807 = distinct !DILexicalBlock(scope: !12804, file: !3869, line: 153, column: 5)
!12808 = !DILocation(line: 153, column: 10, scope: !12807)
!12809 = !DILocation(line: 153, column: 18, scope: !12810)
!12810 = distinct !DILexicalBlock(scope: !12807, file: !3869, line: 153, column: 5)
!12811 = !DILocation(line: 153, column: 36, scope: !12810)
!12812 = !DILocation(line: 153, column: 40, scope: !12810)
!12813 = !DILocation(line: 153, column: 21, scope: !12810)
!12814 = !DILocation(line: 153, column: 5, scope: !12807)
!12815 = !DILocation(line: 154, column: 22, scope: !12816)
!12816 = distinct !DILexicalBlock(scope: !12817, file: !3869, line: 154, column: 11)
!12817 = distinct !DILexicalBlock(scope: !12810, file: !3869, line: 153, column: 53)
!12818 = !DILocation(line: 154, column: 25, scope: !12816)
!12819 = !DILocation(line: 154, column: 11, scope: !12816)
!12820 = !DILocation(line: 154, column: 37, scope: !12816)
!12821 = !DILocation(line: 154, column: 34, scope: !12816)
!12822 = !DILocation(line: 154, column: 11, scope: !12817)
!12823 = !DILocation(line: 155, column: 9, scope: !12816)
!12824 = !DILocation(line: 155, column: 17, scope: !12816)
!12825 = !DILocation(line: 155, column: 20, scope: !12816)
!12826 = !DILocation(line: 155, column: 28, scope: !12816)
!12827 = !DILocation(line: 155, column: 15, scope: !12816)
!12828 = !DILocation(line: 155, column: 13, scope: !12816)
!12829 = !DILocation(line: 155, column: 34, scope: !12816)
!12830 = !DILocation(line: 156, column: 5, scope: !12817)
!12831 = !DILocation(line: 153, column: 49, scope: !12810)
!12832 = !DILocation(line: 153, column: 5, scope: !12810)
!12833 = distinct !{!12833, !12814, !12834}
!12834 = !DILocation(line: 156, column: 5, scope: !12807)
!12835 = !DILocation(line: 157, column: 18, scope: !12836)
!12836 = distinct !DILexicalBlock(scope: !12804, file: !3869, line: 157, column: 9)
!12837 = !DILocation(line: 157, column: 9, scope: !12836)
!12838 = !DILocation(line: 157, column: 24, scope: !12836)
!12839 = !DILocation(line: 157, column: 21, scope: !12836)
!12840 = !DILocation(line: 157, column: 9, scope: !12804)
!12841 = !DILocation(line: 158, column: 7, scope: !12836)
!12842 = !DILocation(line: 158, column: 15, scope: !12836)
!12843 = !DILocation(line: 158, column: 18, scope: !12836)
!12844 = !DILocation(line: 158, column: 11, scope: !12836)
!12845 = !DILocation(line: 158, column: 28, scope: !12836)
!12846 = !DILocation(line: 159, column: 3, scope: !12804)
!12847 = !DILocation(line: 160, column: 1, scope: !12785)
!12848 = distinct !DISubprogram(name: "prefix_name", scope: !3, file: !3, line: 213, type: !12849, scopeLine: 214, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12849 = !DISubroutineType(types: !12850)
!12850 = !{!2702, !2692, !2702}
!12851 = !DILocalVariable(name: "prefix", arg: 1, scope: !12848, file: !3, line: 213, type: !2692)
!12852 = !DILocation(line: 213, column: 26, scope: !12848)
!12853 = !DILocalVariable(name: "name", arg: 2, scope: !12848, file: !3, line: 213, type: !2702)
!12854 = !DILocation(line: 213, column: 39, scope: !12848)
!12855 = !DILocalVariable(name: "plen", scope: !12848, file: !3, line: 215, type: !7)
!12856 = !DILocation(line: 215, column: 12, scope: !12848)
!12857 = !DILocation(line: 215, column: 27, scope: !12848)
!12858 = !DILocation(line: 215, column: 19, scope: !12848)
!12859 = !DILocalVariable(name: "nlen", scope: !12848, file: !3, line: 216, type: !7)
!12860 = !DILocation(line: 216, column: 12, scope: !12848)
!12861 = !DILocation(line: 216, column: 27, scope: !12848)
!12862 = !DILocation(line: 216, column: 19, scope: !12848)
!12863 = !DILocalVariable(name: "toname", scope: !12848, file: !3, line: 217, type: !2964)
!12864 = !DILocation(line: 217, column: 9, scope: !12848)
!12865 = !DILocation(line: 217, column: 27, scope: !12848)
!12866 = !DILocation(line: 219, column: 11, scope: !12848)
!12867 = !DILocation(line: 219, column: 19, scope: !12848)
!12868 = !DILocation(line: 219, column: 27, scope: !12848)
!12869 = !DILocation(line: 219, column: 3, scope: !12848)
!12870 = !DILocation(line: 220, column: 11, scope: !12848)
!12871 = !DILocation(line: 220, column: 20, scope: !12848)
!12872 = !DILocation(line: 220, column: 18, scope: !12848)
!12873 = !DILocation(line: 220, column: 26, scope: !12848)
!12874 = !DILocation(line: 220, column: 53, scope: !12848)
!12875 = !DILocation(line: 220, column: 58, scope: !12848)
!12876 = !DILocation(line: 220, column: 3, scope: !12848)
!12877 = !DILocation(line: 222, column: 26, scope: !12848)
!12878 = !DILocation(line: 222, column: 10, scope: !12848)
!12879 = !DILocation(line: 222, column: 3, scope: !12848)
!12880 = distinct !DISubprogram(name: "contains_pointers_p", scope: !3, file: !3, line: 2266, type: !6176, scopeLine: 2267, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12881 = !DILocalVariable(name: "type", arg: 1, scope: !12880, file: !3, line: 2266, type: !2702)
!12882 = !DILocation(line: 2266, column: 27, scope: !12880)
!12883 = !DILocation(line: 2268, column: 11, scope: !12880)
!12884 = !DILocation(line: 2268, column: 3, scope: !12880)
!12885 = !DILocation(line: 2275, column: 7, scope: !12886)
!12886 = distinct !DILexicalBlock(scope: !12880, file: !3, line: 2269, column: 5)
!12887 = !DILocalVariable(name: "fields", scope: !12888, file: !3, line: 2281, type: !2702)
!12888 = distinct !DILexicalBlock(scope: !12886, file: !3, line: 2280, column: 7)
!12889 = !DILocation(line: 2281, column: 7, scope: !12888)
!12890 = !DILocation(line: 2283, column: 16, scope: !12891)
!12891 = distinct !DILexicalBlock(scope: !12888, file: !3, line: 2283, column: 2)
!12892 = !DILocation(line: 2283, column: 14, scope: !12891)
!12893 = !DILocation(line: 2283, column: 7, scope: !12891)
!12894 = !DILocation(line: 2283, column: 36, scope: !12895)
!12895 = distinct !DILexicalBlock(scope: !12891, file: !3, line: 2283, column: 2)
!12896 = !DILocation(line: 2283, column: 2, scope: !12891)
!12897 = !DILocation(line: 2284, column: 8, scope: !12898)
!12898 = distinct !DILexicalBlock(scope: !12895, file: !3, line: 2284, column: 8)
!12899 = !DILocation(line: 2284, column: 27, scope: !12898)
!12900 = !DILocation(line: 2285, column: 8, scope: !12898)
!12901 = !DILocation(line: 2285, column: 32, scope: !12898)
!12902 = !DILocation(line: 2285, column: 11, scope: !12898)
!12903 = !DILocation(line: 2284, column: 8, scope: !12895)
!12904 = !DILocation(line: 2286, column: 6, scope: !12898)
!12905 = !DILocation(line: 2285, column: 50, scope: !12898)
!12906 = !DILocation(line: 2283, column: 53, scope: !12895)
!12907 = !DILocation(line: 2283, column: 51, scope: !12895)
!12908 = !DILocation(line: 2283, column: 2, scope: !12895)
!12909 = distinct !{!12909, !12896, !12910}
!12910 = !DILocation(line: 2286, column: 13, scope: !12891)
!12911 = !DILocation(line: 2287, column: 2, scope: !12888)
!12912 = !DILocation(line: 2292, column: 35, scope: !12886)
!12913 = !DILocation(line: 2292, column: 14, scope: !12886)
!12914 = !DILocation(line: 2292, column: 7, scope: !12886)
!12915 = !DILocation(line: 2295, column: 7, scope: !12886)
!12916 = !DILocation(line: 2297, column: 1, scope: !12880)
!12917 = distinct !DISubprogram(name: "incorporeal_function_p", scope: !3, file: !3, line: 2310, type: !5360, scopeLine: 2311, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12918 = !DILocalVariable(name: "decl", arg: 1, scope: !12917, file: !3, line: 2310, type: !2702)
!12919 = !DILocation(line: 2310, column: 30, scope: !12917)
!12920 = !DILocation(line: 2312, column: 7, scope: !12921)
!12921 = distinct !DILexicalBlock(scope: !12917, file: !3, line: 2312, column: 7)
!12922 = !DILocation(line: 2312, column: 24, scope: !12921)
!12923 = !DILocation(line: 2312, column: 41, scope: !12921)
!12924 = !DILocation(line: 2312, column: 44, scope: !12921)
!12925 = !DILocation(line: 2312, column: 7, scope: !12917)
!12926 = !DILocalVariable(name: "name", scope: !12927, file: !3, line: 2314, type: !2692)
!12927 = distinct !DILexicalBlock(scope: !12921, file: !3, line: 2313, column: 5)
!12928 = !DILocation(line: 2314, column: 19, scope: !12927)
!12929 = !DILocation(line: 2316, column: 11, scope: !12930)
!12930 = distinct !DILexicalBlock(scope: !12927, file: !3, line: 2316, column: 11)
!12931 = !DILocation(line: 2316, column: 38, scope: !12930)
!12932 = !DILocation(line: 2317, column: 4, scope: !12930)
!12933 = !DILocation(line: 2317, column: 7, scope: !12930)
!12934 = !DILocation(line: 2317, column: 33, scope: !12930)
!12935 = !DILocation(line: 2316, column: 11, scope: !12927)
!12936 = !DILocation(line: 2318, column: 2, scope: !12930)
!12937 = !DILocation(line: 2320, column: 14, scope: !12927)
!12938 = !DILocation(line: 2320, column: 12, scope: !12927)
!12939 = !DILocation(line: 2321, column: 28, scope: !12940)
!12940 = distinct !DILexicalBlock(scope: !12927, file: !3, line: 2321, column: 11)
!12941 = !DILocation(line: 2321, column: 11, scope: !12940)
!12942 = !DILocation(line: 2321, column: 11, scope: !12927)
!12943 = !DILocation(line: 2322, column: 2, scope: !12940)
!12944 = !DILocation(line: 2323, column: 5, scope: !12927)
!12945 = !DILocation(line: 2324, column: 3, scope: !12917)
!12946 = !DILocation(line: 2325, column: 1, scope: !12917)
!12947 = distinct !DISubprogram(name: "decode_addr_const", scope: !3, file: !3, line: 2797, type: !12948, scopeLine: 2798, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!12948 = !DISubroutineType(types: !12949)
!12949 = !{null, !2702, !12950}
!12950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7869, size: 64)
!12951 = !DILocalVariable(name: "exp", arg: 1, scope: !12947, file: !3, line: 2797, type: !2702)
!12952 = !DILocation(line: 2797, column: 25, scope: !12947)
!12953 = !DILocalVariable(name: "value", arg: 2, scope: !12947, file: !3, line: 2797, type: !12950)
!12954 = !DILocation(line: 2797, column: 49, scope: !12947)
!12955 = !DILocalVariable(name: "target", scope: !12947, file: !3, line: 2799, type: !2702)
!12956 = !DILocation(line: 2799, column: 8, scope: !12947)
!12957 = !DILocation(line: 2799, column: 17, scope: !12947)
!12958 = !DILocalVariable(name: "offset", scope: !12947, file: !3, line: 2800, type: !2798)
!12959 = !DILocation(line: 2800, column: 7, scope: !12947)
!12960 = !DILocalVariable(name: "x", scope: !12947, file: !3, line: 2801, type: !2876)
!12961 = !DILocation(line: 2801, column: 7, scope: !12947)
!12962 = !DILocation(line: 2803, column: 3, scope: !12947)
!12963 = !DILocation(line: 2805, column: 11, scope: !12964)
!12964 = distinct !DILexicalBlock(scope: !12965, file: !3, line: 2805, column: 11)
!12965 = distinct !DILexicalBlock(scope: !12947, file: !3, line: 2804, column: 5)
!12966 = !DILocation(line: 2805, column: 30, scope: !12964)
!12967 = !DILocation(line: 2806, column: 4, scope: !12964)
!12968 = !DILocation(line: 2806, column: 37, scope: !12964)
!12969 = !DILocation(line: 2806, column: 22, scope: !12964)
!12970 = !DILocation(line: 2806, column: 7, scope: !12964)
!12971 = !DILocation(line: 2805, column: 11, scope: !12965)
!12972 = !DILocation(line: 2809, column: 33, scope: !12973)
!12973 = distinct !DILexicalBlock(scope: !12964, file: !3, line: 2808, column: 2)
!12974 = !DILocation(line: 2809, column: 14, scope: !12973)
!12975 = !DILocation(line: 2809, column: 11, scope: !12973)
!12976 = !DILocation(line: 2810, column: 13, scope: !12973)
!12977 = !DILocation(line: 2810, column: 11, scope: !12973)
!12978 = !DILocation(line: 2811, column: 2, scope: !12973)
!12979 = !DILocation(line: 2812, column: 16, scope: !12980)
!12980 = distinct !DILexicalBlock(scope: !12964, file: !3, line: 2812, column: 16)
!12981 = !DILocation(line: 2812, column: 35, scope: !12980)
!12982 = !DILocation(line: 2813, column: 9, scope: !12980)
!12983 = !DILocation(line: 2813, column: 12, scope: !12980)
!12984 = !DILocation(line: 2813, column: 31, scope: !12980)
!12985 = !DILocation(line: 2812, column: 16, scope: !12964)
!12986 = !DILocation(line: 2815, column: 29, scope: !12987)
!12987 = distinct !DILexicalBlock(scope: !12980, file: !3, line: 2814, column: 2)
!12988 = !DILocation(line: 2815, column: 15, scope: !12987)
!12989 = !DILocation(line: 2816, column: 24, scope: !12987)
!12990 = !DILocation(line: 2816, column: 10, scope: !12987)
!12991 = !DILocation(line: 2816, column: 8, scope: !12987)
!12992 = !DILocation(line: 2815, column: 11, scope: !12987)
!12993 = !DILocation(line: 2817, column: 13, scope: !12987)
!12994 = !DILocation(line: 2817, column: 11, scope: !12987)
!12995 = !DILocation(line: 2818, column: 2, scope: !12987)
!12996 = !DILocation(line: 2820, column: 2, scope: !12980)
!12997 = distinct !{!12997, !12962, !12998}
!12998 = !DILocation(line: 2821, column: 5, scope: !12947)
!12999 = !DILocation(line: 2823, column: 11, scope: !12947)
!13000 = !DILocation(line: 2823, column: 3, scope: !12947)
!13001 = !DILocation(line: 2827, column: 11, scope: !13002)
!13002 = distinct !DILexicalBlock(scope: !12947, file: !3, line: 2824, column: 5)
!13003 = !DILocation(line: 2827, column: 9, scope: !13002)
!13004 = !DILocation(line: 2828, column: 7, scope: !13002)
!13005 = !DILocation(line: 2832, column: 10, scope: !13002)
!13006 = !DILocation(line: 2831, column: 11, scope: !13002)
!13007 = !DILocation(line: 2831, column: 9, scope: !13002)
!13008 = !DILocation(line: 2833, column: 7, scope: !13002)
!13009 = !DILocation(line: 2841, column: 32, scope: !13002)
!13010 = !DILocation(line: 2841, column: 11, scope: !13002)
!13011 = !DILocation(line: 2841, column: 9, scope: !13002)
!13012 = !DILocation(line: 2842, column: 7, scope: !13002)
!13013 = !DILocation(line: 2845, column: 7, scope: !13002)
!13014 = !DILocation(line: 2846, column: 5, scope: !13002)
!13015 = !DILocation(line: 2848, column: 3, scope: !12947)
!13016 = !DILocation(line: 2849, column: 7, scope: !12947)
!13017 = !DILocation(line: 2849, column: 5, scope: !12947)
!13018 = !DILocation(line: 2851, column: 17, scope: !12947)
!13019 = !DILocation(line: 2851, column: 3, scope: !12947)
!13020 = !DILocation(line: 2851, column: 10, scope: !12947)
!13021 = !DILocation(line: 2851, column: 15, scope: !12947)
!13022 = !DILocation(line: 2852, column: 19, scope: !12947)
!13023 = !DILocation(line: 2852, column: 3, scope: !12947)
!13024 = !DILocation(line: 2852, column: 10, scope: !12947)
!13025 = !DILocation(line: 2852, column: 17, scope: !12947)
!13026 = !DILocation(line: 2853, column: 1, scope: !12947)
!13027 = distinct !DISubprogram(name: "copy_constant", scope: !3, file: !3, line: 3128, type: !4036, scopeLine: 3129, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13028 = !DILocalVariable(name: "exp", arg: 1, scope: !13027, file: !3, line: 3128, type: !2702)
!13029 = !DILocation(line: 3128, column: 21, scope: !13027)
!13030 = !DILocation(line: 3130, column: 11, scope: !13027)
!13031 = !DILocation(line: 3130, column: 3, scope: !13027)
!13032 = !DILocation(line: 3135, column: 11, scope: !13033)
!13033 = distinct !DILexicalBlock(scope: !13034, file: !3, line: 3135, column: 11)
!13034 = distinct !DILexicalBlock(scope: !13027, file: !3, line: 3131, column: 5)
!13035 = !DILocation(line: 3135, column: 11, scope: !13034)
!13036 = !DILocation(line: 3136, column: 9, scope: !13033)
!13037 = !DILocation(line: 3136, column: 2, scope: !13033)
!13038 = !DILocation(line: 3139, column: 9, scope: !13033)
!13039 = !DILocation(line: 3139, column: 2, scope: !13033)
!13040 = !DILocation(line: 3145, column: 14, scope: !13034)
!13041 = !DILocation(line: 3145, column: 7, scope: !13034)
!13042 = !DILocation(line: 3148, column: 29, scope: !13034)
!13043 = !DILocation(line: 3149, column: 23, scope: !13034)
!13044 = !DILocation(line: 3149, column: 8, scope: !13034)
!13045 = !DILocation(line: 3150, column: 23, scope: !13034)
!13046 = !DILocation(line: 3150, column: 8, scope: !13034)
!13047 = !DILocation(line: 3148, column: 14, scope: !13034)
!13048 = !DILocation(line: 3148, column: 7, scope: !13034)
!13049 = !DILocation(line: 3155, column: 14, scope: !13034)
!13050 = !DILocation(line: 3155, column: 7, scope: !13034)
!13051 = !DILocation(line: 3161, column: 14, scope: !13034)
!13052 = !DILocation(line: 3161, column: 7, scope: !13034)
!13053 = !DILocalVariable(name: "copy", scope: !13054, file: !3, line: 3166, type: !2702)
!13054 = distinct !DILexicalBlock(scope: !13034, file: !3, line: 3165, column: 7)
!13055 = !DILocation(line: 3166, column: 7, scope: !13054)
!13056 = !DILocation(line: 3166, column: 14, scope: !13054)
!13057 = !DILocalVariable(name: "v", scope: !13054, file: !3, line: 3167, type: !3559)
!13058 = !DILocation(line: 3167, column: 28, scope: !13054)
!13059 = !DILocalVariable(name: "idx", scope: !13054, file: !3, line: 3168, type: !2755)
!13060 = !DILocation(line: 3168, column: 25, scope: !13054)
!13061 = !DILocalVariable(name: "purpose", scope: !13054, file: !3, line: 3169, type: !2702)
!13062 = !DILocation(line: 3169, column: 7, scope: !13054)
!13063 = !DILocalVariable(name: "value", scope: !13054, file: !3, line: 3169, type: !2702)
!13064 = !DILocation(line: 3169, column: 16, scope: !13054)
!13065 = !DILocation(line: 3171, column: 6, scope: !13054)
!13066 = !DILocation(line: 3171, column: 4, scope: !13054)
!13067 = !DILocation(line: 3173, column: 2, scope: !13068)
!13068 = distinct !DILexicalBlock(scope: !13054, file: !3, line: 3173, column: 2)
!13069 = !DILocation(line: 3173, column: 2, scope: !13070)
!13070 = distinct !DILexicalBlock(scope: !13068, file: !3, line: 3173, column: 2)
!13071 = !DILocalVariable(name: "ce", scope: !13072, file: !3, line: 3175, type: !6391)
!13072 = distinct !DILexicalBlock(scope: !13070, file: !3, line: 3174, column: 4)
!13073 = !DILocation(line: 3175, column: 23, scope: !13072)
!13074 = !DILocation(line: 3175, column: 28, scope: !13072)
!13075 = !DILocation(line: 3176, column: 18, scope: !13072)
!13076 = !DILocation(line: 3176, column: 6, scope: !13072)
!13077 = !DILocation(line: 3176, column: 10, scope: !13072)
!13078 = !DILocation(line: 3176, column: 16, scope: !13072)
!13079 = !DILocation(line: 3177, column: 33, scope: !13072)
!13080 = !DILocation(line: 3177, column: 18, scope: !13072)
!13081 = !DILocation(line: 3177, column: 6, scope: !13072)
!13082 = !DILocation(line: 3177, column: 10, scope: !13072)
!13083 = !DILocation(line: 3177, column: 16, scope: !13072)
!13084 = !DILocation(line: 3178, column: 4, scope: !13072)
!13085 = distinct !{!13085, !13067, !13086}
!13086 = !DILocation(line: 3178, column: 4, scope: !13068)
!13087 = !DILocation(line: 3179, column: 28, scope: !13054)
!13088 = !DILocation(line: 3179, column: 2, scope: !13054)
!13089 = !DILocation(line: 3179, column: 26, scope: !13054)
!13090 = !DILocation(line: 3180, column: 9, scope: !13054)
!13091 = !DILocation(line: 3180, column: 2, scope: !13054)
!13092 = !DILocation(line: 3184, column: 7, scope: !13034)
!13093 = !DILocation(line: 3185, column: 5, scope: !13034)
!13094 = !DILocation(line: 3187, column: 5, scope: !13027)
!13095 = !DILocation(line: 3189, column: 1, scope: !13027)
!13096 = distinct !DISubprogram(name: "get_constant_section", scope: !3, file: !3, line: 3208, type: !4603, scopeLine: 3209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13097 = !DILocalVariable(name: "exp", arg: 1, scope: !13096, file: !3, line: 3208, type: !2702)
!13098 = !DILocation(line: 3208, column: 28, scope: !13096)
!13099 = !DILocation(line: 3210, column: 7, scope: !13100)
!13100 = distinct !DILexicalBlock(scope: !13096, file: !3, line: 3210, column: 7)
!13101 = !DILocation(line: 3210, column: 7, scope: !13096)
!13102 = !DILocation(line: 3211, column: 31, scope: !13100)
!13103 = !DILocation(line: 3211, column: 70, scope: !13100)
!13104 = !DILocation(line: 3211, column: 42, scope: !13100)
!13105 = !DILocation(line: 3211, column: 12, scope: !13100)
!13106 = !DILocation(line: 3211, column: 5, scope: !13100)
!13107 = !DILocation(line: 3213, column: 28, scope: !13100)
!13108 = !DILocation(line: 3213, column: 44, scope: !13100)
!13109 = !DILocation(line: 3214, column: 37, scope: !13100)
!13110 = !DILocation(line: 3214, column: 9, scope: !13100)
!13111 = !DILocation(line: 3215, column: 33, scope: !13100)
!13112 = !DILocation(line: 3215, column: 9, scope: !13100)
!13113 = !DILocation(line: 3213, column: 12, scope: !13100)
!13114 = !DILocation(line: 3213, column: 5, scope: !13100)
!13115 = !DILocation(line: 3216, column: 1, scope: !13096)
!13116 = distinct !DISubprogram(name: "output_constant_def_contents", scope: !3, file: !3, line: 3390, type: !6942, scopeLine: 3391, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13117 = !DILocalVariable(name: "symbol", arg: 1, scope: !13116, file: !3, line: 3390, type: !2876)
!13118 = !DILocation(line: 3390, column: 35, scope: !13116)
!13119 = !DILocalVariable(name: "exp", scope: !13116, file: !3, line: 3392, type: !2702)
!13120 = !DILocation(line: 3392, column: 8, scope: !13116)
!13121 = !DILocation(line: 3392, column: 14, scope: !13116)
!13122 = !DILocalVariable(name: "align", scope: !13116, file: !3, line: 3393, type: !7)
!13123 = !DILocation(line: 3393, column: 16, scope: !13116)
!13124 = !DILocation(line: 3397, column: 31, scope: !13116)
!13125 = !DILocation(line: 3397, column: 3, scope: !13116)
!13126 = !DILocation(line: 3400, column: 3, scope: !13116)
!13127 = !DILocation(line: 3400, column: 26, scope: !13116)
!13128 = !DILocation(line: 3405, column: 7, scope: !13129)
!13129 = distinct !DILexicalBlock(scope: !13116, file: !3, line: 3405, column: 7)
!13130 = !DILocation(line: 3405, column: 44, scope: !13129)
!13131 = !DILocation(line: 3405, column: 47, scope: !13129)
!13132 = !DILocation(line: 3405, column: 7, scope: !13116)
!13133 = !DILocation(line: 3406, column: 25, scope: !13129)
!13134 = !DILocation(line: 3406, column: 5, scope: !13129)
!13135 = !DILocation(line: 3409, column: 48, scope: !13136)
!13136 = distinct !DILexicalBlock(scope: !13129, file: !3, line: 3408, column: 5)
!13137 = !DILocation(line: 3409, column: 26, scope: !13136)
!13138 = !DILocation(line: 3409, column: 7, scope: !13136)
!13139 = !DILocation(line: 3410, column: 39, scope: !13136)
!13140 = !DILocation(line: 3410, column: 15, scope: !13136)
!13141 = !DILocation(line: 3410, column: 13, scope: !13136)
!13142 = !DILocation(line: 3411, column: 11, scope: !13143)
!13143 = distinct !DILexicalBlock(scope: !13136, file: !3, line: 3411, column: 11)
!13144 = !DILocation(line: 3411, column: 17, scope: !13143)
!13145 = !DILocation(line: 3411, column: 11, scope: !13136)
!13146 = !DILocation(line: 3412, column: 2, scope: !13147)
!13147 = distinct !DILexicalBlock(scope: !13143, file: !3, line: 3412, column: 2)
!13148 = !DILocation(line: 3412, column: 2, scope: !13143)
!13149 = !DILocation(line: 3413, column: 35, scope: !13136)
!13150 = !DILocation(line: 3413, column: 40, scope: !13136)
!13151 = !DILocation(line: 3413, column: 58, scope: !13136)
!13152 = !DILocation(line: 3413, column: 7, scope: !13136)
!13153 = !DILocation(line: 3415, column: 7, scope: !13154)
!13154 = distinct !DILexicalBlock(scope: !13116, file: !3, line: 3415, column: 7)
!13155 = !DILocation(line: 3415, column: 7, scope: !13116)
!13156 = !DILocation(line: 3416, column: 31, scope: !13154)
!13157 = !DILocation(line: 3416, column: 5, scope: !13154)
!13158 = !DILocation(line: 3417, column: 1, scope: !13116)
!13159 = distinct !DISubprogram(name: "assemble_constant_contents", scope: !3, file: !3, line: 3369, type: !13160, scopeLine: 3370, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13160 = !DISubroutineType(types: !13161)
!13161 = !{null, !2702, !2692, !7}
!13162 = !DILocalVariable(name: "exp", arg: 1, scope: !13159, file: !3, line: 3369, type: !2702)
!13163 = !DILocation(line: 3369, column: 34, scope: !13159)
!13164 = !DILocalVariable(name: "label", arg: 2, scope: !13159, file: !3, line: 3369, type: !2692)
!13165 = !DILocation(line: 3369, column: 51, scope: !13159)
!13166 = !DILocalVariable(name: "align", arg: 3, scope: !13159, file: !3, line: 3369, type: !7)
!13167 = !DILocation(line: 3369, column: 71, scope: !13159)
!13168 = !DILocalVariable(name: "size", scope: !13159, file: !3, line: 3371, type: !2757)
!13169 = !DILocation(line: 3371, column: 17, scope: !13159)
!13170 = !DILocation(line: 3373, column: 29, scope: !13159)
!13171 = !DILocation(line: 3373, column: 10, scope: !13159)
!13172 = !DILocation(line: 3373, column: 8, scope: !13159)
!13173 = !DILocation(line: 3380, column: 3, scope: !13159)
!13174 = !DILocation(line: 3380, column: 3, scope: !13175)
!13175 = distinct !DILexicalBlock(scope: !13159, file: !3, line: 3380, column: 3)
!13176 = !DILocation(line: 3384, column: 20, scope: !13159)
!13177 = !DILocation(line: 3384, column: 25, scope: !13159)
!13178 = !DILocation(line: 3384, column: 31, scope: !13159)
!13179 = !DILocation(line: 3384, column: 3, scope: !13159)
!13180 = !DILocation(line: 3385, column: 1, scope: !13159)
!13181 = distinct !DISubprogram(name: "const_desc_rtx_hash", scope: !3, file: !3, line: 3475, type: !3291, scopeLine: 3476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13182 = !DILocalVariable(name: "ptr", arg: 1, scope: !13181, file: !3, line: 3475, type: !3132)
!13183 = !DILocation(line: 3475, column: 34, scope: !13181)
!13184 = !DILocalVariable(name: "desc", scope: !13181, file: !3, line: 3477, type: !13185)
!13185 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3798)
!13186 = !DILocation(line: 3477, column: 47, scope: !13181)
!13187 = !DILocation(line: 3478, column: 48, scope: !13181)
!13188 = !DILocation(line: 3478, column: 7, scope: !13181)
!13189 = !DILocation(line: 3479, column: 10, scope: !13181)
!13190 = !DILocation(line: 3479, column: 16, scope: !13181)
!13191 = !DILocation(line: 3479, column: 3, scope: !13181)
!13192 = distinct !DISubprogram(name: "const_desc_rtx_eq", scope: !3, file: !3, line: 3483, type: !3296, scopeLine: 3484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13193 = !DILocalVariable(name: "a", arg: 1, scope: !13192, file: !3, line: 3483, type: !3132)
!13194 = !DILocation(line: 3483, column: 32, scope: !13192)
!13195 = !DILocalVariable(name: "b", arg: 2, scope: !13192, file: !3, line: 3483, type: !3132)
!13196 = !DILocation(line: 3483, column: 47, scope: !13192)
!13197 = !DILocalVariable(name: "x", scope: !13192, file: !3, line: 3485, type: !13185)
!13198 = !DILocation(line: 3485, column: 47, scope: !13192)
!13199 = !DILocation(line: 3486, column: 48, scope: !13192)
!13200 = !DILocation(line: 3486, column: 7, scope: !13192)
!13201 = !DILocalVariable(name: "y", scope: !13192, file: !3, line: 3487, type: !13185)
!13202 = !DILocation(line: 3487, column: 47, scope: !13192)
!13203 = !DILocation(line: 3488, column: 48, scope: !13192)
!13204 = !DILocation(line: 3488, column: 7, scope: !13192)
!13205 = !DILocation(line: 3490, column: 7, scope: !13206)
!13206 = distinct !DILexicalBlock(scope: !13192, file: !3, line: 3490, column: 7)
!13207 = !DILocation(line: 3490, column: 10, scope: !13206)
!13208 = !DILocation(line: 3490, column: 18, scope: !13206)
!13209 = !DILocation(line: 3490, column: 21, scope: !13206)
!13210 = !DILocation(line: 3490, column: 15, scope: !13206)
!13211 = !DILocation(line: 3490, column: 7, scope: !13192)
!13212 = !DILocation(line: 3491, column: 5, scope: !13206)
!13213 = !DILocation(line: 3492, column: 23, scope: !13192)
!13214 = !DILocation(line: 3492, column: 26, scope: !13192)
!13215 = !DILocation(line: 3492, column: 36, scope: !13192)
!13216 = !DILocation(line: 3492, column: 39, scope: !13192)
!13217 = !DILocation(line: 3492, column: 10, scope: !13192)
!13218 = !DILocation(line: 3492, column: 3, scope: !13192)
!13219 = !DILocation(line: 3493, column: 1, scope: !13192)
!13220 = distinct !DISubprogram(name: "const_rtx_hash_1", scope: !3, file: !3, line: 3498, type: !13221, scopeLine: 3499, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13221 = !DISubroutineType(types: !13222)
!13222 = !{!2798, !11876, !2691}
!13223 = !DILocalVariable(name: "xp", arg: 1, scope: !13220, file: !3, line: 3498, type: !11876)
!13224 = !DILocation(line: 3498, column: 24, scope: !13220)
!13225 = !DILocalVariable(name: "data", arg: 2, scope: !13220, file: !3, line: 3498, type: !2691)
!13226 = !DILocation(line: 3498, column: 34, scope: !13220)
!13227 = !DILocalVariable(name: "hwi", scope: !13220, file: !3, line: 3500, type: !2755)
!13228 = !DILocation(line: 3500, column: 26, scope: !13220)
!13229 = !DILocalVariable(name: "mode", scope: !13220, file: !3, line: 3501, type: !5)
!13230 = !DILocation(line: 3501, column: 21, scope: !13220)
!13231 = !DILocalVariable(name: "code", scope: !13220, file: !3, line: 3502, type: !597)
!13232 = !DILocation(line: 3502, column: 17, scope: !13220)
!13233 = !DILocalVariable(name: "h", scope: !13220, file: !3, line: 3503, type: !3092)
!13234 = !DILocation(line: 3503, column: 13, scope: !13220)
!13235 = !DILocalVariable(name: "hp", scope: !13220, file: !3, line: 3503, type: !3804)
!13236 = !DILocation(line: 3503, column: 17, scope: !13220)
!13237 = !DILocalVariable(name: "x", scope: !13220, file: !3, line: 3504, type: !2876)
!13238 = !DILocation(line: 3504, column: 7, scope: !13220)
!13239 = !DILocation(line: 3506, column: 8, scope: !13220)
!13240 = !DILocation(line: 3506, column: 7, scope: !13220)
!13241 = !DILocation(line: 3506, column: 5, scope: !13220)
!13242 = !DILocation(line: 3507, column: 10, scope: !13220)
!13243 = !DILocation(line: 3507, column: 8, scope: !13220)
!13244 = !DILocation(line: 3508, column: 10, scope: !13220)
!13245 = !DILocation(line: 3508, column: 8, scope: !13220)
!13246 = !DILocation(line: 3509, column: 19, scope: !13220)
!13247 = !DILocation(line: 3509, column: 24, scope: !13220)
!13248 = !DILocation(line: 3509, column: 36, scope: !13220)
!13249 = !DILocation(line: 3509, column: 34, scope: !13220)
!13250 = !DILocation(line: 3509, column: 5, scope: !13220)
!13251 = !DILocation(line: 3511, column: 11, scope: !13220)
!13252 = !DILocation(line: 3511, column: 3, scope: !13220)
!13253 = !DILocation(line: 3514, column: 13, scope: !13254)
!13254 = distinct !DILexicalBlock(scope: !13220, file: !3, line: 3512, column: 5)
!13255 = !DILocation(line: 3514, column: 11, scope: !13254)
!13256 = !DILocation(line: 3514, column: 7, scope: !13254)
!13257 = !DILabel(scope: !13254, name: "fold_hwi", file: !3, line: 3515)
!13258 = !DILocation(line: 3515, column: 5, scope: !13254)
!13259 = !DILocalVariable(name: "shift", scope: !13260, file: !3, line: 3517, type: !2798)
!13260 = distinct !DILexicalBlock(scope: !13254, file: !3, line: 3516, column: 7)
!13261 = !DILocation(line: 3517, column: 6, scope: !13260)
!13262 = !DILocalVariable(name: "n", scope: !13260, file: !3, line: 3518, type: !3845)
!13263 = !DILocation(line: 3518, column: 12, scope: !13260)
!13264 = !DILocalVariable(name: "i", scope: !13260, file: !3, line: 3519, type: !2798)
!13265 = !DILocation(line: 3519, column: 6, scope: !13260)
!13266 = !DILocation(line: 3521, column: 19, scope: !13260)
!13267 = !DILocation(line: 3521, column: 7, scope: !13260)
!13268 = !DILocation(line: 3521, column: 4, scope: !13260)
!13269 = !DILocation(line: 3522, column: 9, scope: !13270)
!13270 = distinct !DILexicalBlock(scope: !13260, file: !3, line: 3522, column: 2)
!13271 = !DILocation(line: 3522, column: 7, scope: !13270)
!13272 = !DILocation(line: 3522, column: 14, scope: !13273)
!13273 = distinct !DILexicalBlock(scope: !13270, file: !3, line: 3522, column: 2)
!13274 = !DILocation(line: 3522, column: 16, scope: !13273)
!13275 = !DILocation(line: 3522, column: 2, scope: !13270)
!13276 = !DILocation(line: 3524, column: 14, scope: !13277)
!13277 = distinct !DILexicalBlock(scope: !13273, file: !3, line: 3523, column: 4)
!13278 = !DILocation(line: 3524, column: 10, scope: !13277)
!13279 = !DILocation(line: 3525, column: 23, scope: !13277)
!13280 = !DILocation(line: 3525, column: 11, scope: !13277)
!13281 = !DILocation(line: 3525, column: 8, scope: !13277)
!13282 = !DILocation(line: 3526, column: 4, scope: !13277)
!13283 = !DILocation(line: 3522, column: 21, scope: !13273)
!13284 = !DILocation(line: 3522, column: 2, scope: !13273)
!13285 = distinct !{!13285, !13275, !13286}
!13286 = !DILocation(line: 3526, column: 4, scope: !13270)
!13287 = !DILocation(line: 3528, column: 7, scope: !13254)
!13288 = !DILocation(line: 3531, column: 11, scope: !13289)
!13289 = distinct !DILexicalBlock(scope: !13254, file: !3, line: 3531, column: 11)
!13290 = !DILocation(line: 3531, column: 16, scope: !13289)
!13291 = !DILocation(line: 3531, column: 11, scope: !13254)
!13292 = !DILocation(line: 3533, column: 10, scope: !13293)
!13293 = distinct !DILexicalBlock(scope: !13289, file: !3, line: 3532, column: 2)
!13294 = !DILocation(line: 3533, column: 33, scope: !13293)
!13295 = !DILocation(line: 3533, column: 31, scope: !13293)
!13296 = !DILocation(line: 3533, column: 8, scope: !13293)
!13297 = !DILocation(line: 3534, column: 4, scope: !13293)
!13298 = !DILocation(line: 3537, column: 18, scope: !13289)
!13299 = !DILocation(line: 3537, column: 7, scope: !13289)
!13300 = !DILocation(line: 3537, column: 4, scope: !13289)
!13301 = !DILocation(line: 3538, column: 7, scope: !13254)
!13302 = !DILocation(line: 3541, column: 24, scope: !13254)
!13303 = !DILocation(line: 3541, column: 12, scope: !13254)
!13304 = !DILocation(line: 3541, column: 9, scope: !13254)
!13305 = !DILocation(line: 3542, column: 7, scope: !13254)
!13306 = !DILocalVariable(name: "i", scope: !13307, file: !3, line: 3546, type: !2798)
!13307 = distinct !DILexicalBlock(scope: !13254, file: !3, line: 3545, column: 7)
!13308 = !DILocation(line: 3546, column: 6, scope: !13307)
!13309 = !DILocation(line: 3547, column: 11, scope: !13310)
!13310 = distinct !DILexicalBlock(scope: !13307, file: !3, line: 3547, column: 2)
!13311 = !DILocation(line: 3547, column: 9, scope: !13310)
!13312 = !DILocation(line: 3547, column: 7, scope: !13310)
!13313 = !DILocation(line: 3547, column: 28, scope: !13314)
!13314 = distinct !DILexicalBlock(scope: !13310, file: !3, line: 3547, column: 2)
!13315 = !DILocation(line: 3547, column: 31, scope: !13314)
!13316 = !DILocation(line: 3547, column: 2, scope: !13310)
!13317 = !DILocation(line: 3548, column: 8, scope: !13314)
!13318 = !DILocation(line: 3548, column: 10, scope: !13314)
!13319 = !DILocation(line: 3548, column: 37, scope: !13314)
!13320 = !DILocation(line: 3548, column: 56, scope: !13314)
!13321 = !DILocation(line: 3548, column: 18, scope: !13314)
!13322 = !DILocation(line: 3548, column: 16, scope: !13314)
!13323 = !DILocation(line: 3548, column: 6, scope: !13314)
!13324 = !DILocation(line: 3547, column: 2, scope: !13314)
!13325 = distinct !{!13325, !13316, !13326}
!13326 = !DILocation(line: 3548, column: 60, scope: !13310)
!13327 = !DILocation(line: 3550, column: 7, scope: !13254)
!13328 = !DILocation(line: 3553, column: 30, scope: !13254)
!13329 = !DILocation(line: 3553, column: 12, scope: !13254)
!13330 = !DILocation(line: 3553, column: 9, scope: !13254)
!13331 = !DILocation(line: 3554, column: 7, scope: !13254)
!13332 = !DILocation(line: 3557, column: 11, scope: !13254)
!13333 = !DILocation(line: 3557, column: 13, scope: !13254)
!13334 = !DILocation(line: 3557, column: 21, scope: !13254)
!13335 = !DILocation(line: 3557, column: 19, scope: !13254)
!13336 = !DILocation(line: 3557, column: 9, scope: !13254)
!13337 = !DILocation(line: 3558, column: 7, scope: !13254)
!13338 = !DILocation(line: 3562, column: 11, scope: !13254)
!13339 = !DILocation(line: 3562, column: 13, scope: !13254)
!13340 = !DILocation(line: 3562, column: 21, scope: !13254)
!13341 = !DILocation(line: 3562, column: 19, scope: !13254)
!13342 = !DILocation(line: 3562, column: 9, scope: !13254)
!13343 = !DILocation(line: 3563, column: 7, scope: !13254)
!13344 = !DILocation(line: 3566, column: 7, scope: !13254)
!13345 = !DILocation(line: 3569, column: 22, scope: !13220)
!13346 = !DILocation(line: 3569, column: 8, scope: !13220)
!13347 = !DILocation(line: 3569, column: 6, scope: !13220)
!13348 = !DILocation(line: 3570, column: 10, scope: !13220)
!13349 = !DILocation(line: 3570, column: 9, scope: !13220)
!13350 = !DILocation(line: 3570, column: 13, scope: !13220)
!13351 = !DILocation(line: 3570, column: 21, scope: !13220)
!13352 = !DILocation(line: 3570, column: 19, scope: !13220)
!13353 = !DILocation(line: 3570, column: 4, scope: !13220)
!13354 = !DILocation(line: 3570, column: 7, scope: !13220)
!13355 = !DILocation(line: 3571, column: 3, scope: !13220)
!13356 = distinct !DISubprogram(name: "hash_section", scope: !3, file: !3, line: 493, type: !13357, scopeLine: 494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13357 = !DISubroutineType(types: !13358)
!13358 = !{!3092, !3109}
!13359 = !DILocalVariable(name: "sect", arg: 1, scope: !13356, file: !3, line: 493, type: !3109)
!13360 = !DILocation(line: 493, column: 24, scope: !13356)
!13361 = !DILocation(line: 495, column: 7, scope: !13362)
!13362 = distinct !DILexicalBlock(scope: !13356, file: !3, line: 495, column: 7)
!13363 = !DILocation(line: 495, column: 13, scope: !13362)
!13364 = !DILocation(line: 495, column: 20, scope: !13362)
!13365 = !DILocation(line: 495, column: 26, scope: !13362)
!13366 = !DILocation(line: 495, column: 7, scope: !13356)
!13367 = !DILocation(line: 496, column: 30, scope: !13362)
!13368 = !DILocation(line: 496, column: 36, scope: !13362)
!13369 = !DILocation(line: 496, column: 42, scope: !13362)
!13370 = !DILocation(line: 496, column: 12, scope: !13362)
!13371 = !DILocation(line: 496, column: 5, scope: !13362)
!13372 = !DILocation(line: 497, column: 10, scope: !13356)
!13373 = !DILocation(line: 497, column: 16, scope: !13356)
!13374 = !DILocation(line: 497, column: 23, scope: !13356)
!13375 = !DILocation(line: 497, column: 3, scope: !13356)
!13376 = !DILocation(line: 498, column: 1, scope: !13356)
!13377 = distinct !DISubprogram(name: "mark_constant_pool", scope: !3, file: !3, line: 3949, type: !4245, scopeLine: 3950, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13378 = !DILocalVariable(name: "insn", scope: !13377, file: !3, line: 3951, type: !2876)
!13379 = !DILocation(line: 3951, column: 7, scope: !13377)
!13380 = !DILocalVariable(name: "link", scope: !13377, file: !3, line: 3951, type: !2876)
!13381 = !DILocation(line: 3951, column: 13, scope: !13377)
!13382 = !DILocation(line: 3953, column: 14, scope: !13383)
!13383 = distinct !DILexicalBlock(scope: !13377, file: !3, line: 3953, column: 7)
!13384 = !DILocation(line: 3953, column: 8, scope: !13383)
!13385 = !DILocation(line: 3953, column: 30, scope: !13383)
!13386 = !DILocation(line: 3953, column: 33, scope: !13383)
!13387 = !DILocation(line: 3953, column: 54, scope: !13383)
!13388 = !DILocation(line: 3953, column: 7, scope: !13377)
!13389 = !DILocation(line: 3954, column: 5, scope: !13383)
!13390 = !DILocation(line: 3956, column: 15, scope: !13391)
!13391 = distinct !DILexicalBlock(scope: !13377, file: !3, line: 3956, column: 3)
!13392 = !DILocation(line: 3956, column: 13, scope: !13391)
!13393 = !DILocation(line: 3956, column: 8, scope: !13391)
!13394 = !DILocation(line: 3956, column: 29, scope: !13395)
!13395 = distinct !DILexicalBlock(scope: !13391, file: !3, line: 3956, column: 3)
!13396 = !DILocation(line: 3956, column: 3, scope: !13391)
!13397 = !DILocation(line: 3957, column: 21, scope: !13395)
!13398 = !DILocation(line: 3957, column: 5, scope: !13395)
!13399 = !DILocation(line: 3956, column: 42, scope: !13395)
!13400 = !DILocation(line: 3956, column: 40, scope: !13395)
!13401 = !DILocation(line: 3956, column: 3, scope: !13395)
!13402 = distinct !{!13402, !13396, !13403}
!13403 = !DILocation(line: 3957, column: 25, scope: !13391)
!13404 = !DILocation(line: 3959, column: 21, scope: !13405)
!13405 = distinct !DILexicalBlock(scope: !13377, file: !3, line: 3959, column: 3)
!13406 = !DILocation(line: 3959, column: 13, scope: !13405)
!13407 = !DILocation(line: 3959, column: 8, scope: !13405)
!13408 = !DILocation(line: 3960, column: 8, scope: !13409)
!13409 = distinct !DILexicalBlock(scope: !13405, file: !3, line: 3959, column: 3)
!13410 = !DILocation(line: 3959, column: 3, scope: !13405)
!13411 = !DILocation(line: 3962, column: 21, scope: !13409)
!13412 = !DILocation(line: 3962, column: 5, scope: !13409)
!13413 = !DILocation(line: 3961, column: 15, scope: !13409)
!13414 = !DILocation(line: 3961, column: 13, scope: !13409)
!13415 = !DILocation(line: 3959, column: 3, scope: !13409)
!13416 = distinct !{!13416, !13410, !13417}
!13417 = !DILocation(line: 3962, column: 35, scope: !13405)
!13418 = !DILocation(line: 3963, column: 1, scope: !13377)
!13419 = distinct !DISubprogram(name: "mark_constants", scope: !3, file: !3, line: 3921, type: !6942, scopeLine: 3922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13420 = !DILocalVariable(name: "insn", arg: 1, scope: !13419, file: !3, line: 3921, type: !2876)
!13421 = !DILocation(line: 3921, column: 21, scope: !13419)
!13422 = !DILocation(line: 3923, column: 8, scope: !13423)
!13423 = distinct !DILexicalBlock(scope: !13419, file: !3, line: 3923, column: 7)
!13424 = !DILocation(line: 3923, column: 7, scope: !13419)
!13425 = !DILocation(line: 3924, column: 5, scope: !13423)
!13426 = !DILocation(line: 3929, column: 7, scope: !13427)
!13427 = distinct !DILexicalBlock(scope: !13419, file: !3, line: 3929, column: 7)
!13428 = !DILocation(line: 3929, column: 33, scope: !13427)
!13429 = !DILocation(line: 3929, column: 7, scope: !13419)
!13430 = !DILocalVariable(name: "seq", scope: !13431, file: !3, line: 3931, type: !2876)
!13431 = distinct !DILexicalBlock(scope: !13427, file: !3, line: 3930, column: 5)
!13432 = !DILocation(line: 3931, column: 11, scope: !13431)
!13433 = !DILocation(line: 3931, column: 17, scope: !13431)
!13434 = !DILocalVariable(name: "i", scope: !13431, file: !3, line: 3932, type: !2798)
!13435 = !DILocation(line: 3932, column: 11, scope: !13431)
!13436 = !DILocalVariable(name: "n", scope: !13431, file: !3, line: 3932, type: !2798)
!13437 = !DILocation(line: 3932, column: 14, scope: !13431)
!13438 = !DILocation(line: 3932, column: 18, scope: !13431)
!13439 = !DILocation(line: 3933, column: 14, scope: !13440)
!13440 = distinct !DILexicalBlock(scope: !13431, file: !3, line: 3933, column: 7)
!13441 = !DILocation(line: 3933, column: 12, scope: !13440)
!13442 = !DILocation(line: 3933, column: 19, scope: !13443)
!13443 = distinct !DILexicalBlock(scope: !13440, file: !3, line: 3933, column: 7)
!13444 = !DILocation(line: 3933, column: 23, scope: !13443)
!13445 = !DILocation(line: 3933, column: 21, scope: !13443)
!13446 = !DILocation(line: 3933, column: 7, scope: !13440)
!13447 = !DILocalVariable(name: "subinsn", scope: !13448, file: !3, line: 3935, type: !2876)
!13448 = distinct !DILexicalBlock(scope: !13443, file: !3, line: 3934, column: 2)
!13449 = !DILocation(line: 3935, column: 8, scope: !13448)
!13450 = !DILocation(line: 3935, column: 18, scope: !13448)
!13451 = !DILocation(line: 3936, column: 8, scope: !13452)
!13452 = distinct !DILexicalBlock(scope: !13448, file: !3, line: 3936, column: 8)
!13453 = !DILocation(line: 3936, column: 8, scope: !13448)
!13454 = !DILocation(line: 3937, column: 21, scope: !13452)
!13455 = !DILocation(line: 3937, column: 6, scope: !13452)
!13456 = !DILocation(line: 3938, column: 2, scope: !13448)
!13457 = !DILocation(line: 3933, column: 26, scope: !13443)
!13458 = !DILocation(line: 3933, column: 7, scope: !13443)
!13459 = distinct !{!13459, !13446, !13460}
!13460 = !DILocation(line: 3938, column: 2, scope: !13440)
!13461 = !DILocation(line: 3939, column: 5, scope: !13431)
!13462 = !DILocation(line: 3941, column: 20, scope: !13427)
!13463 = !DILocation(line: 3941, column: 5, scope: !13427)
!13464 = !DILocation(line: 3942, column: 1, scope: !13419)
!13465 = distinct !DISubprogram(name: "mark_constant", scope: !3, file: !3, line: 3886, type: !13221, scopeLine: 3887, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13466 = !DILocalVariable(name: "current_rtx", arg: 1, scope: !13465, file: !3, line: 3886, type: !11876)
!13467 = !DILocation(line: 3886, column: 21, scope: !13465)
!13468 = !DILocalVariable(name: "data", arg: 2, scope: !13465, file: !3, line: 3886, type: !2691)
!13469 = !DILocation(line: 3886, column: 40, scope: !13465)
!13470 = !DILocalVariable(name: "x", scope: !13465, file: !3, line: 3888, type: !2876)
!13471 = !DILocation(line: 3888, column: 7, scope: !13465)
!13472 = !DILocation(line: 3888, column: 12, scope: !13465)
!13473 = !DILocation(line: 3888, column: 11, scope: !13465)
!13474 = !DILocation(line: 3890, column: 7, scope: !13475)
!13475 = distinct !DILexicalBlock(scope: !13465, file: !3, line: 3890, column: 7)
!13476 = !DILocation(line: 3890, column: 9, scope: !13475)
!13477 = !DILocation(line: 3890, column: 21, scope: !13475)
!13478 = !DILocation(line: 3890, column: 24, scope: !13475)
!13479 = !DILocation(line: 3890, column: 37, scope: !13475)
!13480 = !DILocation(line: 3890, column: 7, scope: !13465)
!13481 = !DILocation(line: 3891, column: 5, scope: !13475)
!13482 = !DILocation(line: 3893, column: 7, scope: !13483)
!13483 = distinct !DILexicalBlock(scope: !13465, file: !3, line: 3893, column: 7)
!13484 = !DILocation(line: 3893, column: 7, scope: !13465)
!13485 = !DILocalVariable(name: "desc", scope: !13486, file: !3, line: 3895, type: !3083)
!13486 = distinct !DILexicalBlock(scope: !13483, file: !3, line: 3894, column: 5)
!13487 = !DILocation(line: 3895, column: 39, scope: !13486)
!13488 = !DILocation(line: 3895, column: 46, scope: !13486)
!13489 = !DILocation(line: 3896, column: 11, scope: !13490)
!13490 = distinct !DILexicalBlock(scope: !13486, file: !3, line: 3896, column: 11)
!13491 = !DILocation(line: 3896, column: 17, scope: !13490)
!13492 = !DILocation(line: 3896, column: 22, scope: !13490)
!13493 = !DILocation(line: 3896, column: 11, scope: !13486)
!13494 = !DILocation(line: 3898, column: 4, scope: !13495)
!13495 = distinct !DILexicalBlock(scope: !13490, file: !3, line: 3897, column: 2)
!13496 = !DILocation(line: 3898, column: 10, scope: !13495)
!13497 = !DILocation(line: 3898, column: 15, scope: !13495)
!13498 = !DILocation(line: 3899, column: 19, scope: !13495)
!13499 = !DILocation(line: 3899, column: 25, scope: !13495)
!13500 = !DILocation(line: 3899, column: 4, scope: !13495)
!13501 = !DILocation(line: 3900, column: 2, scope: !13495)
!13502 = !DILocation(line: 3901, column: 5, scope: !13486)
!13503 = !DILocation(line: 3902, column: 12, scope: !13504)
!13504 = distinct !DILexicalBlock(scope: !13483, file: !3, line: 3902, column: 12)
!13505 = !DILocation(line: 3902, column: 12, scope: !13483)
!13506 = !DILocalVariable(name: "exp", scope: !13507, file: !3, line: 3904, type: !2702)
!13507 = distinct !DILexicalBlock(scope: !13504, file: !3, line: 3903, column: 5)
!13508 = !DILocation(line: 3904, column: 12, scope: !13507)
!13509 = !DILocation(line: 3904, column: 18, scope: !13507)
!13510 = !DILocation(line: 3905, column: 12, scope: !13511)
!13511 = distinct !DILexicalBlock(scope: !13507, file: !3, line: 3905, column: 11)
!13512 = !DILocation(line: 3905, column: 11, scope: !13507)
!13513 = !DILocation(line: 3907, column: 24, scope: !13514)
!13514 = distinct !DILexicalBlock(scope: !13511, file: !3, line: 3906, column: 2)
!13515 = !DILocation(line: 3908, column: 34, scope: !13514)
!13516 = !DILocation(line: 3908, column: 4, scope: !13514)
!13517 = !DILocation(line: 3909, column: 2, scope: !13514)
!13518 = !DILocation(line: 3910, column: 5, scope: !13507)
!13519 = !DILocation(line: 3912, column: 3, scope: !13465)
!13520 = !DILocation(line: 3913, column: 1, scope: !13465)
!13521 = distinct !DISubprogram(name: "output_constant_pool_1", scope: !3, file: !3, line: 3818, type: !13522, scopeLine: 3820, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13522 = !DISubroutineType(types: !13523)
!13523 = !{null, !3083, !7}
!13524 = !DILocalVariable(name: "desc", arg: 1, scope: !13521, file: !3, line: 3818, type: !3083)
!13525 = !DILocation(line: 3818, column: 57, scope: !13521)
!13526 = !DILocalVariable(name: "align", arg: 2, scope: !13521, file: !3, line: 3819, type: !7)
!13527 = !DILocation(line: 3819, column: 17, scope: !13521)
!13528 = !DILocalVariable(name: "x", scope: !13521, file: !3, line: 3821, type: !2876)
!13529 = !DILocation(line: 3821, column: 7, scope: !13521)
!13530 = !DILocalVariable(name: "tmp", scope: !13521, file: !3, line: 3821, type: !2876)
!13531 = !DILocation(line: 3821, column: 10, scope: !13521)
!13532 = !DILocation(line: 3823, column: 7, scope: !13521)
!13533 = !DILocation(line: 3823, column: 13, scope: !13521)
!13534 = !DILocation(line: 3823, column: 5, scope: !13521)
!13535 = !DILocation(line: 3834, column: 9, scope: !13521)
!13536 = !DILocation(line: 3834, column: 7, scope: !13521)
!13537 = !DILocation(line: 3835, column: 11, scope: !13521)
!13538 = !DILocation(line: 3835, column: 3, scope: !13521)
!13539 = !DILocation(line: 3838, column: 11, scope: !13540)
!13540 = distinct !DILexicalBlock(scope: !13541, file: !3, line: 3838, column: 11)
!13541 = distinct !DILexicalBlock(scope: !13521, file: !3, line: 3836, column: 5)
!13542 = !DILocation(line: 3838, column: 36, scope: !13540)
!13543 = !DILocation(line: 3839, column: 4, scope: !13540)
!13544 = !DILocation(line: 3839, column: 7, scope: !13540)
!13545 = !DILocation(line: 3839, column: 42, scope: !13540)
!13546 = !DILocation(line: 3838, column: 11, scope: !13541)
!13547 = !DILocation(line: 3840, column: 2, scope: !13540)
!13548 = !DILocation(line: 3841, column: 13, scope: !13541)
!13549 = !DILocation(line: 3841, column: 11, scope: !13541)
!13550 = !DILocation(line: 3841, column: 7, scope: !13541)
!13551 = !DILocation(line: 3845, column: 13, scope: !13541)
!13552 = !DILocation(line: 3845, column: 11, scope: !13541)
!13553 = !DILocation(line: 3846, column: 7, scope: !13541)
!13554 = !DILocation(line: 3847, column: 7, scope: !13541)
!13555 = !DILocation(line: 3849, column: 7, scope: !13541)
!13556 = !DILocation(line: 3852, column: 7, scope: !13541)
!13557 = !DILocation(line: 3860, column: 19, scope: !13521)
!13558 = !DILocation(line: 3860, column: 3, scope: !13521)
!13559 = !DILocation(line: 3863, column: 19, scope: !13521)
!13560 = !DILocation(line: 3863, column: 35, scope: !13521)
!13561 = !DILocation(line: 3863, column: 55, scope: !13521)
!13562 = !DILocation(line: 3863, column: 61, scope: !13521)
!13563 = !DILocation(line: 3863, column: 3, scope: !13521)
!13564 = !DILocation(line: 3866, column: 27, scope: !13521)
!13565 = !DILocation(line: 3866, column: 33, scope: !13521)
!13566 = !DILocation(line: 3866, column: 39, scope: !13521)
!13567 = !DILocation(line: 3866, column: 42, scope: !13521)
!13568 = !DILocation(line: 3866, column: 3, scope: !13521)
!13569 = !DILocation(line: 3870, column: 7, scope: !13570)
!13570 = distinct !DILexicalBlock(scope: !13521, file: !3, line: 3870, column: 7)
!13571 = !DILocation(line: 3870, column: 15, scope: !13570)
!13572 = !DILocation(line: 3870, column: 13, scope: !13570)
!13573 = !DILocation(line: 3871, column: 7, scope: !13570)
!13574 = !DILocation(line: 3871, column: 10, scope: !13570)
!13575 = !DILocation(line: 3872, column: 7, scope: !13570)
!13576 = !DILocation(line: 3872, column: 11, scope: !13570)
!13577 = !DILocation(line: 3872, column: 23, scope: !13570)
!13578 = !DILocation(line: 3872, column: 30, scope: !13570)
!13579 = !DILocation(line: 3872, column: 36, scope: !13570)
!13580 = !DILocation(line: 3870, column: 7, scope: !13521)
!13581 = !DILocation(line: 3873, column: 21, scope: !13570)
!13582 = !DILocation(line: 3873, column: 5, scope: !13570)
!13583 = !DILocation(line: 3878, column: 3, scope: !13521)
!13584 = distinct !DISubprogram(name: "output_constant_pool_2", scope: !3, file: !3, line: 3763, type: !13585, scopeLine: 3764, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13585 = !DISubroutineType(types: !13586)
!13586 = !{null, !5, !2876, !7}
!13587 = !DILocalVariable(name: "mode", arg: 1, scope: !13584, file: !3, line: 3763, type: !5)
!13588 = !DILocation(line: 3763, column: 43, scope: !13584)
!13589 = !DILocalVariable(name: "x", arg: 2, scope: !13584, file: !3, line: 3763, type: !2876)
!13590 = !DILocation(line: 3763, column: 53, scope: !13584)
!13591 = !DILocalVariable(name: "align", arg: 3, scope: !13584, file: !3, line: 3763, type: !7)
!13592 = !DILocation(line: 3763, column: 69, scope: !13584)
!13593 = !DILocation(line: 3765, column: 11, scope: !13584)
!13594 = !DILocation(line: 3765, column: 3, scope: !13584)
!13595 = !DILocalVariable(name: "r", scope: !13596, file: !3, line: 3770, type: !2764)
!13596 = distinct !DILexicalBlock(scope: !13597, file: !3, line: 3769, column: 7)
!13597 = distinct !DILexicalBlock(scope: !13584, file: !3, line: 3766, column: 5)
!13598 = !DILocation(line: 3770, column: 18, scope: !13596)
!13599 = !DILocation(line: 3772, column: 2, scope: !13596)
!13600 = !DILocation(line: 3773, column: 2, scope: !13596)
!13601 = !DILocation(line: 3774, column: 20, scope: !13596)
!13602 = !DILocation(line: 3774, column: 26, scope: !13596)
!13603 = !DILocation(line: 3774, column: 2, scope: !13596)
!13604 = !DILocation(line: 3775, column: 2, scope: !13596)
!13605 = !DILocation(line: 3784, column: 25, scope: !13597)
!13606 = !DILocation(line: 3784, column: 28, scope: !13597)
!13607 = !DILocation(line: 3784, column: 50, scope: !13597)
!13608 = !DILocation(line: 3784, column: 7, scope: !13597)
!13609 = !DILocation(line: 3785, column: 7, scope: !13597)
!13610 = !DILocalVariable(name: "i", scope: !13611, file: !3, line: 3794, type: !2798)
!13611 = distinct !DILexicalBlock(scope: !13597, file: !3, line: 3793, column: 7)
!13612 = !DILocation(line: 3794, column: 6, scope: !13611)
!13613 = !DILocalVariable(name: "units", scope: !13611, file: !3, line: 3794, type: !2798)
!13614 = !DILocation(line: 3794, column: 9, scope: !13611)
!13615 = !DILocalVariable(name: "submode", scope: !13611, file: !3, line: 3795, type: !5)
!13616 = !DILocation(line: 3795, column: 27, scope: !13611)
!13617 = !DILocation(line: 3795, column: 37, scope: !13611)
!13618 = !DILocalVariable(name: "subalign", scope: !13611, file: !3, line: 3796, type: !7)
!13619 = !DILocation(line: 3796, column: 15, scope: !13611)
!13620 = !DILocation(line: 3796, column: 26, scope: !13611)
!13621 = !DILocation(line: 3798, column: 2, scope: !13611)
!13622 = !DILocation(line: 3799, column: 10, scope: !13611)
!13623 = !DILocation(line: 3799, column: 8, scope: !13611)
!13624 = !DILocation(line: 3801, column: 9, scope: !13625)
!13625 = distinct !DILexicalBlock(scope: !13611, file: !3, line: 3801, column: 2)
!13626 = !DILocation(line: 3801, column: 7, scope: !13625)
!13627 = !DILocation(line: 3801, column: 14, scope: !13628)
!13628 = distinct !DILexicalBlock(scope: !13625, file: !3, line: 3801, column: 2)
!13629 = !DILocation(line: 3801, column: 18, scope: !13628)
!13630 = !DILocation(line: 3801, column: 16, scope: !13628)
!13631 = !DILocation(line: 3801, column: 2, scope: !13625)
!13632 = !DILocalVariable(name: "elt", scope: !13633, file: !3, line: 3803, type: !2876)
!13633 = distinct !DILexicalBlock(scope: !13628, file: !3, line: 3802, column: 4)
!13634 = !DILocation(line: 3803, column: 10, scope: !13633)
!13635 = !DILocation(line: 3803, column: 16, scope: !13633)
!13636 = !DILocation(line: 3804, column: 30, scope: !13633)
!13637 = !DILocation(line: 3804, column: 39, scope: !13633)
!13638 = !DILocation(line: 3804, column: 44, scope: !13633)
!13639 = !DILocation(line: 3804, column: 48, scope: !13633)
!13640 = !DILocation(line: 3804, column: 59, scope: !13633)
!13641 = !DILocation(line: 3804, column: 6, scope: !13633)
!13642 = !DILocation(line: 3805, column: 4, scope: !13633)
!13643 = !DILocation(line: 3801, column: 26, scope: !13628)
!13644 = !DILocation(line: 3801, column: 2, scope: !13628)
!13645 = distinct !{!13645, !13631, !13646}
!13646 = !DILocation(line: 3805, column: 4, scope: !13625)
!13647 = !DILocation(line: 3807, column: 7, scope: !13597)
!13648 = !DILocation(line: 3810, column: 7, scope: !13597)
!13649 = !DILocation(line: 3811, column: 5, scope: !13597)
!13650 = !DILocation(line: 3812, column: 1, scope: !13584)
!13651 = distinct !DISubprogram(name: "narrowing_initializer_constant_valid_p", scope: !3, file: !3, line: 4164, type: !8641, scopeLine: 4165, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13652 = !DILocalVariable(name: "value", arg: 1, scope: !13651, file: !3, line: 4164, type: !2702)
!13653 = !DILocation(line: 4164, column: 46, scope: !13651)
!13654 = !DILocalVariable(name: "endtype", arg: 2, scope: !13651, file: !3, line: 4164, type: !2702)
!13655 = !DILocation(line: 4164, column: 58, scope: !13651)
!13656 = !DILocalVariable(name: "cache", arg: 3, scope: !13651, file: !3, line: 4164, type: !3499)
!13657 = !DILocation(line: 4164, column: 73, scope: !13651)
!13658 = !DILocalVariable(name: "op0", scope: !13651, file: !3, line: 4166, type: !2702)
!13659 = !DILocation(line: 4166, column: 8, scope: !13651)
!13660 = !DILocalVariable(name: "op1", scope: !13651, file: !3, line: 4166, type: !2702)
!13661 = !DILocation(line: 4166, column: 13, scope: !13651)
!13662 = !DILocation(line: 4168, column: 8, scope: !13663)
!13663 = distinct !DILexicalBlock(scope: !13651, file: !3, line: 4168, column: 7)
!13664 = !DILocation(line: 4168, column: 7, scope: !13651)
!13665 = !DILocation(line: 4169, column: 5, scope: !13663)
!13666 = !DILocation(line: 4171, column: 9, scope: !13651)
!13667 = !DILocation(line: 4171, column: 7, scope: !13651)
!13668 = !DILocation(line: 4172, column: 9, scope: !13651)
!13669 = !DILocation(line: 4172, column: 7, scope: !13651)
!13670 = !DILocation(line: 4179, column: 3, scope: !13651)
!13671 = !DILocation(line: 4179, column: 10, scope: !13651)
!13672 = !DILocation(line: 4180, column: 3, scope: !13651)
!13673 = !DILocation(line: 4180, column: 6, scope: !13651)
!13674 = !DILocation(line: 4180, column: 22, scope: !13651)
!13675 = !DILocalVariable(name: "inner", scope: !13676, file: !3, line: 4182, type: !2702)
!13676 = distinct !DILexicalBlock(scope: !13651, file: !3, line: 4181, column: 5)
!13677 = !DILocation(line: 4182, column: 12, scope: !13676)
!13678 = !DILocation(line: 4182, column: 20, scope: !13676)
!13679 = !DILocation(line: 4183, column: 11, scope: !13680)
!13680 = distinct !DILexicalBlock(scope: !13676, file: !3, line: 4183, column: 11)
!13681 = !DILocation(line: 4183, column: 20, scope: !13680)
!13682 = !DILocation(line: 4183, column: 17, scope: !13680)
!13683 = !DILocation(line: 4184, column: 4, scope: !13680)
!13684 = !DILocation(line: 4184, column: 9, scope: !13680)
!13685 = !DILocation(line: 4185, column: 4, scope: !13680)
!13686 = !DILocation(line: 4185, column: 8, scope: !13680)
!13687 = !DILocation(line: 4186, column: 10, scope: !13680)
!13688 = !DILocation(line: 4186, column: 8, scope: !13680)
!13689 = !DILocation(line: 4183, column: 11, scope: !13676)
!13690 = !DILocation(line: 4187, column: 2, scope: !13680)
!13691 = !DILocation(line: 4188, column: 13, scope: !13676)
!13692 = !DILocation(line: 4188, column: 11, scope: !13676)
!13693 = distinct !{!13693, !13670, !13694}
!13694 = !DILocation(line: 4189, column: 5, scope: !13651)
!13695 = !DILocation(line: 4191, column: 3, scope: !13651)
!13696 = !DILocation(line: 4191, column: 10, scope: !13651)
!13697 = !DILocation(line: 4192, column: 3, scope: !13651)
!13698 = !DILocation(line: 4192, column: 6, scope: !13651)
!13699 = !DILocation(line: 4192, column: 22, scope: !13651)
!13700 = !DILocalVariable(name: "inner", scope: !13701, file: !3, line: 4194, type: !2702)
!13701 = distinct !DILexicalBlock(scope: !13651, file: !3, line: 4193, column: 5)
!13702 = !DILocation(line: 4194, column: 12, scope: !13701)
!13703 = !DILocation(line: 4194, column: 20, scope: !13701)
!13704 = !DILocation(line: 4195, column: 11, scope: !13705)
!13705 = distinct !DILexicalBlock(scope: !13701, file: !3, line: 4195, column: 11)
!13706 = !DILocation(line: 4195, column: 20, scope: !13705)
!13707 = !DILocation(line: 4195, column: 17, scope: !13705)
!13708 = !DILocation(line: 4196, column: 4, scope: !13705)
!13709 = !DILocation(line: 4196, column: 9, scope: !13705)
!13710 = !DILocation(line: 4197, column: 4, scope: !13705)
!13711 = !DILocation(line: 4197, column: 8, scope: !13705)
!13712 = !DILocation(line: 4198, column: 10, scope: !13705)
!13713 = !DILocation(line: 4198, column: 8, scope: !13705)
!13714 = !DILocation(line: 4195, column: 11, scope: !13701)
!13715 = !DILocation(line: 4199, column: 2, scope: !13705)
!13716 = !DILocation(line: 4200, column: 13, scope: !13701)
!13717 = !DILocation(line: 4200, column: 11, scope: !13701)
!13718 = distinct !{!13718, !13695, !13719}
!13719 = !DILocation(line: 4201, column: 5, scope: !13651)
!13720 = !DILocation(line: 4203, column: 41, scope: !13651)
!13721 = !DILocation(line: 4203, column: 46, scope: !13651)
!13722 = !DILocation(line: 4203, column: 55, scope: !13651)
!13723 = !DILocation(line: 4203, column: 9, scope: !13651)
!13724 = !DILocation(line: 4203, column: 7, scope: !13651)
!13725 = !DILocation(line: 4204, column: 8, scope: !13726)
!13726 = distinct !DILexicalBlock(scope: !13651, file: !3, line: 4204, column: 7)
!13727 = !DILocation(line: 4204, column: 7, scope: !13651)
!13728 = !DILocation(line: 4205, column: 5, scope: !13726)
!13729 = !DILocation(line: 4207, column: 41, scope: !13651)
!13730 = !DILocation(line: 4207, column: 46, scope: !13651)
!13731 = !DILocation(line: 4208, column: 6, scope: !13651)
!13732 = !DILocation(line: 4208, column: 14, scope: !13651)
!13733 = !DILocation(line: 4208, column: 20, scope: !13651)
!13734 = !DILocation(line: 4207, column: 9, scope: !13651)
!13735 = !DILocation(line: 4207, column: 7, scope: !13651)
!13736 = !DILocation(line: 4210, column: 7, scope: !13737)
!13737 = distinct !DILexicalBlock(scope: !13651, file: !3, line: 4210, column: 7)
!13738 = !DILocation(line: 4210, column: 7, scope: !13651)
!13739 = !DILocation(line: 4212, column: 11, scope: !13740)
!13740 = distinct !DILexicalBlock(scope: !13741, file: !3, line: 4212, column: 11)
!13741 = distinct !DILexicalBlock(scope: !13737, file: !3, line: 4211, column: 5)
!13742 = !DILocation(line: 4212, column: 18, scope: !13740)
!13743 = !DILocation(line: 4212, column: 15, scope: !13740)
!13744 = !DILocation(line: 4213, column: 4, scope: !13740)
!13745 = !DILocation(line: 4213, column: 8, scope: !13740)
!13746 = !DILocation(line: 4213, column: 15, scope: !13740)
!13747 = !DILocation(line: 4213, column: 12, scope: !13740)
!13748 = !DILocation(line: 4214, column: 8, scope: !13740)
!13749 = !DILocation(line: 4214, column: 11, scope: !13740)
!13750 = !DILocation(line: 4214, column: 29, scope: !13740)
!13751 = !DILocation(line: 4212, column: 11, scope: !13741)
!13752 = !DILocation(line: 4215, column: 9, scope: !13740)
!13753 = !DILocation(line: 4215, column: 2, scope: !13740)
!13754 = !DILocation(line: 4218, column: 11, scope: !13755)
!13755 = distinct !DILexicalBlock(scope: !13741, file: !3, line: 4218, column: 11)
!13756 = !DILocation(line: 4218, column: 27, scope: !13755)
!13757 = !DILocation(line: 4219, column: 4, scope: !13755)
!13758 = !DILocation(line: 4219, column: 7, scope: !13755)
!13759 = !DILocation(line: 4219, column: 23, scope: !13755)
!13760 = !DILocation(line: 4218, column: 11, scope: !13741)
!13761 = !DILocation(line: 4220, column: 9, scope: !13755)
!13762 = !DILocation(line: 4220, column: 2, scope: !13755)
!13763 = !DILocation(line: 4222, column: 11, scope: !13764)
!13764 = distinct !DILexicalBlock(scope: !13741, file: !3, line: 4222, column: 11)
!13765 = !DILocation(line: 4222, column: 27, scope: !13764)
!13766 = !DILocation(line: 4223, column: 4, scope: !13764)
!13767 = !DILocation(line: 4223, column: 7, scope: !13764)
!13768 = !DILocation(line: 4223, column: 23, scope: !13764)
!13769 = !DILocation(line: 4224, column: 4, scope: !13764)
!13770 = !DILocation(line: 4224, column: 24, scope: !13764)
!13771 = !DILocation(line: 4224, column: 29, scope: !13764)
!13772 = !DILocation(line: 4224, column: 7, scope: !13764)
!13773 = !DILocation(line: 4222, column: 11, scope: !13741)
!13774 = !DILocation(line: 4225, column: 9, scope: !13764)
!13775 = !DILocation(line: 4225, column: 2, scope: !13764)
!13776 = !DILocation(line: 4226, column: 5, scope: !13741)
!13777 = !DILocation(line: 4228, column: 3, scope: !13651)
!13778 = !DILocation(line: 4229, column: 1, scope: !13651)
!13779 = distinct !DISubprogram(name: "VEC_constructor_elt_base_iterate", scope: !151, file: !151, line: 1537, type: !13780, scopeLine: 1537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13780 = !DISubroutineType(types: !13781)
!13781 = !{!2798, !6459, !7, !13782}
!13782 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6391, size: 64)
!13783 = !DILocalVariable(name: "vec_", arg: 1, scope: !13779, file: !151, line: 1537, type: !6459)
!13784 = !DILocation(line: 1537, column: 1, scope: !13779)
!13785 = !DILocalVariable(name: "ix_", arg: 2, scope: !13779, file: !151, line: 1537, type: !7)
!13786 = !DILocalVariable(name: "ptr", arg: 3, scope: !13779, file: !151, line: 1537, type: !13782)
!13787 = !DILocation(line: 1537, column: 1, scope: !13788)
!13788 = distinct !DILexicalBlock(scope: !13779, file: !151, line: 1537, column: 1)
!13789 = !DILocation(line: 1537, column: 1, scope: !13790)
!13790 = distinct !DILexicalBlock(scope: !13788, file: !151, line: 1537, column: 1)
!13791 = !DILocation(line: 1537, column: 1, scope: !13792)
!13792 = distinct !DILexicalBlock(scope: !13788, file: !151, line: 1537, column: 1)
!13793 = distinct !DISubprogram(name: "output_constructor_array_range", scope: !3, file: !3, line: 4829, type: !13794, scopeLine: 4830, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13794 = !DISubroutineType(types: !13795)
!13795 = !{null, !13796}
!13796 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9410, size: 64)
!13797 = !DILocalVariable(name: "local", arg: 1, scope: !13793, file: !3, line: 4829, type: !13796)
!13798 = !DILocation(line: 4829, column: 49, scope: !13793)
!13799 = !DILocalVariable(name: "fieldsize", scope: !13793, file: !3, line: 4831, type: !2755)
!13800 = !DILocation(line: 4831, column: 26, scope: !13793)
!13801 = !DILocation(line: 4832, column: 26, scope: !13793)
!13802 = !DILocation(line: 4832, column: 7, scope: !13793)
!13803 = !DILocalVariable(name: "lo_index", scope: !13793, file: !3, line: 4834, type: !2757)
!13804 = !DILocation(line: 4834, column: 17, scope: !13793)
!13805 = !DILocation(line: 4835, column: 21, scope: !13793)
!13806 = !DILocation(line: 4835, column: 7, scope: !13793)
!13807 = !DILocalVariable(name: "hi_index", scope: !13793, file: !3, line: 4836, type: !2757)
!13808 = !DILocation(line: 4836, column: 17, scope: !13793)
!13809 = !DILocation(line: 4837, column: 21, scope: !13793)
!13810 = !DILocation(line: 4837, column: 7, scope: !13793)
!13811 = !DILocalVariable(name: "index", scope: !13793, file: !3, line: 4838, type: !2757)
!13812 = !DILocation(line: 4838, column: 17, scope: !13793)
!13813 = !DILocalVariable(name: "align2", scope: !13793, file: !3, line: 4840, type: !7)
!13814 = !DILocation(line: 4840, column: 16, scope: !13793)
!13815 = !DILocation(line: 4841, column: 18, scope: !13793)
!13816 = !DILocation(line: 4841, column: 25, scope: !13793)
!13817 = !DILocation(line: 4841, column: 32, scope: !13793)
!13818 = !DILocation(line: 4841, column: 42, scope: !13793)
!13819 = !DILocation(line: 4841, column: 7, scope: !13793)
!13820 = !DILocation(line: 4843, column: 16, scope: !13821)
!13821 = distinct !DILexicalBlock(scope: !13793, file: !3, line: 4843, column: 3)
!13822 = !DILocation(line: 4843, column: 14, scope: !13821)
!13823 = !DILocation(line: 4843, column: 8, scope: !13821)
!13824 = !DILocation(line: 4843, column: 26, scope: !13825)
!13825 = distinct !DILexicalBlock(scope: !13821, file: !3, line: 4843, column: 3)
!13826 = !DILocation(line: 4843, column: 35, scope: !13825)
!13827 = !DILocation(line: 4843, column: 32, scope: !13825)
!13828 = !DILocation(line: 4843, column: 3, scope: !13821)
!13829 = !DILocation(line: 4846, column: 11, scope: !13830)
!13830 = distinct !DILexicalBlock(scope: !13831, file: !3, line: 4846, column: 11)
!13831 = distinct !DILexicalBlock(scope: !13825, file: !3, line: 4844, column: 5)
!13832 = !DILocation(line: 4846, column: 18, scope: !13830)
!13833 = !DILocation(line: 4846, column: 22, scope: !13830)
!13834 = !DILocation(line: 4846, column: 11, scope: !13831)
!13835 = !DILocation(line: 4847, column: 18, scope: !13830)
!13836 = !DILocation(line: 4847, column: 2, scope: !13830)
!13837 = !DILocation(line: 4849, column: 19, scope: !13830)
!13838 = !DILocation(line: 4849, column: 26, scope: !13830)
!13839 = !DILocation(line: 4849, column: 31, scope: !13830)
!13840 = !DILocation(line: 4849, column: 42, scope: !13830)
!13841 = !DILocation(line: 4849, column: 2, scope: !13830)
!13842 = !DILocation(line: 4852, column: 29, scope: !13831)
!13843 = !DILocation(line: 4852, column: 7, scope: !13831)
!13844 = !DILocation(line: 4852, column: 14, scope: !13831)
!13845 = !DILocation(line: 4852, column: 26, scope: !13831)
!13846 = !DILocation(line: 4853, column: 5, scope: !13831)
!13847 = !DILocation(line: 4843, column: 50, scope: !13825)
!13848 = !DILocation(line: 4843, column: 3, scope: !13825)
!13849 = distinct !{!13849, !13828, !13850}
!13850 = !DILocation(line: 4853, column: 5, scope: !13821)
!13851 = !DILocation(line: 4854, column: 1, scope: !13793)
!13852 = distinct !DISubprogram(name: "output_constructor_regular_field", scope: !3, file: !3, line: 4860, type: !13794, scopeLine: 4861, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13853 = !DILocalVariable(name: "local", arg: 1, scope: !13852, file: !3, line: 4860, type: !13796)
!13854 = !DILocation(line: 4860, column: 51, scope: !13852)
!13855 = !DILocalVariable(name: "fieldsize", scope: !13852, file: !3, line: 4864, type: !2755)
!13856 = !DILocation(line: 4864, column: 26, scope: !13852)
!13857 = !DILocalVariable(name: "fieldpos", scope: !13852, file: !3, line: 4865, type: !2757)
!13858 = !DILocation(line: 4865, column: 17, scope: !13852)
!13859 = !DILocalVariable(name: "align2", scope: !13852, file: !3, line: 4867, type: !7)
!13860 = !DILocation(line: 4867, column: 16, scope: !13852)
!13861 = !DILocation(line: 4869, column: 7, scope: !13862)
!13862 = distinct !DILexicalBlock(scope: !13852, file: !3, line: 4869, column: 7)
!13863 = !DILocation(line: 4869, column: 14, scope: !13862)
!13864 = !DILocation(line: 4869, column: 20, scope: !13862)
!13865 = !DILocation(line: 4869, column: 7, scope: !13852)
!13866 = !DILocation(line: 4870, column: 31, scope: !13862)
!13867 = !DILocation(line: 4870, column: 17, scope: !13862)
!13868 = !DILocation(line: 4871, column: 21, scope: !13862)
!13869 = !DILocation(line: 4871, column: 28, scope: !13862)
!13870 = !DILocation(line: 4871, column: 7, scope: !13862)
!13871 = !DILocation(line: 4872, column: 23, scope: !13862)
!13872 = !DILocation(line: 4872, column: 30, scope: !13862)
!13873 = !DILocation(line: 4872, column: 9, scope: !13862)
!13874 = !DILocation(line: 4872, column: 7, scope: !13862)
!13875 = !DILocation(line: 4871, column: 3, scope: !13862)
!13876 = !DILocation(line: 4870, column: 14, scope: !13862)
!13877 = !DILocation(line: 4870, column: 5, scope: !13862)
!13878 = !DILocation(line: 4873, column: 12, scope: !13879)
!13879 = distinct !DILexicalBlock(scope: !13862, file: !3, line: 4873, column: 12)
!13880 = !DILocation(line: 4873, column: 19, scope: !13879)
!13881 = !DILocation(line: 4873, column: 25, scope: !13879)
!13882 = !DILocation(line: 4873, column: 12, scope: !13862)
!13883 = !DILocation(line: 4874, column: 35, scope: !13879)
!13884 = !DILocation(line: 4874, column: 42, scope: !13879)
!13885 = !DILocation(line: 4874, column: 16, scope: !13879)
!13886 = !DILocation(line: 4874, column: 14, scope: !13879)
!13887 = !DILocation(line: 4874, column: 5, scope: !13879)
!13888 = !DILocation(line: 4876, column: 14, scope: !13879)
!13889 = !DILocation(line: 4879, column: 7, scope: !13890)
!13890 = distinct !DILexicalBlock(scope: !13852, file: !3, line: 4879, column: 7)
!13891 = !DILocation(line: 4879, column: 14, scope: !13890)
!13892 = !DILocation(line: 4879, column: 7, scope: !13852)
!13893 = !DILocation(line: 4881, column: 25, scope: !13894)
!13894 = distinct !DILexicalBlock(scope: !13890, file: !3, line: 4880, column: 5)
!13895 = !DILocation(line: 4881, column: 7, scope: !13894)
!13896 = !DILocation(line: 4882, column: 7, scope: !13894)
!13897 = !DILocation(line: 4882, column: 14, scope: !13894)
!13898 = !DILocation(line: 4882, column: 25, scope: !13894)
!13899 = !DILocation(line: 4883, column: 7, scope: !13894)
!13900 = !DILocation(line: 4883, column: 14, scope: !13894)
!13901 = !DILocation(line: 4883, column: 33, scope: !13894)
!13902 = !DILocation(line: 4884, column: 5, scope: !13894)
!13903 = !DILocation(line: 4889, column: 8, scope: !13904)
!13904 = distinct !DILexicalBlock(scope: !13852, file: !3, line: 4889, column: 7)
!13905 = !DILocation(line: 4889, column: 15, scope: !13904)
!13906 = !DILocation(line: 4889, column: 21, scope: !13904)
!13907 = !DILocation(line: 4889, column: 34, scope: !13904)
!13908 = !DILocation(line: 4889, column: 37, scope: !13904)
!13909 = !DILocation(line: 4889, column: 44, scope: !13904)
!13910 = !DILocation(line: 4889, column: 50, scope: !13904)
!13911 = !DILocation(line: 4890, column: 7, scope: !13904)
!13912 = !DILocation(line: 4890, column: 10, scope: !13904)
!13913 = !DILocation(line: 4890, column: 22, scope: !13904)
!13914 = !DILocation(line: 4890, column: 29, scope: !13904)
!13915 = !DILocation(line: 4890, column: 19, scope: !13904)
!13916 = !DILocation(line: 4889, column: 7, scope: !13852)
!13917 = !DILocation(line: 4892, column: 7, scope: !13918)
!13918 = distinct !DILexicalBlock(scope: !13904, file: !3, line: 4891, column: 5)
!13919 = !DILocation(line: 4893, column: 23, scope: !13918)
!13920 = !DILocation(line: 4893, column: 34, scope: !13918)
!13921 = !DILocation(line: 4893, column: 41, scope: !13918)
!13922 = !DILocation(line: 4893, column: 32, scope: !13918)
!13923 = !DILocation(line: 4893, column: 7, scope: !13918)
!13924 = !DILocation(line: 4894, column: 28, scope: !13918)
!13925 = !DILocation(line: 4894, column: 7, scope: !13918)
!13926 = !DILocation(line: 4894, column: 14, scope: !13918)
!13927 = !DILocation(line: 4894, column: 26, scope: !13918)
!13928 = !DILocation(line: 4895, column: 5, scope: !13918)
!13929 = !DILocation(line: 4898, column: 23, scope: !13852)
!13930 = !DILocation(line: 4898, column: 30, scope: !13852)
!13931 = !DILocation(line: 4898, column: 53, scope: !13852)
!13932 = !DILocation(line: 4898, column: 51, scope: !13852)
!13933 = !DILocation(line: 4898, column: 37, scope: !13852)
!13934 = !DILocation(line: 4898, column: 12, scope: !13852)
!13935 = !DILocation(line: 4898, column: 10, scope: !13852)
!13936 = !DILocation(line: 4901, column: 7, scope: !13937)
!13937 = distinct !DILexicalBlock(scope: !13852, file: !3, line: 4901, column: 7)
!13938 = !DILocation(line: 4901, column: 14, scope: !13937)
!13939 = !DILocation(line: 4901, column: 7, scope: !13852)
!13940 = !DILocation(line: 4903, column: 17, scope: !13941)
!13941 = distinct !DILexicalBlock(scope: !13937, file: !3, line: 4902, column: 5)
!13942 = !DILocation(line: 4910, column: 11, scope: !13943)
!13943 = distinct !DILexicalBlock(scope: !13941, file: !3, line: 4910, column: 11)
!13944 = !DILocation(line: 4910, column: 48, scope: !13943)
!13945 = !DILocation(line: 4911, column: 4, scope: !13943)
!13946 = !DILocation(line: 4911, column: 7, scope: !13943)
!13947 = !DILocation(line: 4912, column: 4, scope: !13943)
!13948 = !DILocation(line: 4912, column: 9, scope: !13943)
!13949 = !DILocation(line: 4910, column: 11, scope: !13941)
!13950 = !DILocation(line: 4914, column: 44, scope: !13951)
!13951 = distinct !DILexicalBlock(scope: !13943, file: !3, line: 4913, column: 2)
!13952 = !DILocation(line: 4914, column: 51, scope: !13951)
!13953 = !DILocation(line: 4914, column: 16, scope: !13951)
!13954 = !DILocation(line: 4914, column: 14, scope: !13951)
!13955 = !DILocation(line: 4917, column: 4, scope: !13951)
!13956 = !DILocation(line: 4918, column: 2, scope: !13951)
!13957 = !DILocation(line: 4919, column: 16, scope: !13958)
!13958 = distinct !DILexicalBlock(scope: !13943, file: !3, line: 4919, column: 16)
!13959 = !DILocation(line: 4919, column: 16, scope: !13943)
!13960 = !DILocation(line: 4923, column: 23, scope: !13961)
!13961 = distinct !DILexicalBlock(scope: !13962, file: !3, line: 4923, column: 8)
!13962 = distinct !DILexicalBlock(scope: !13958, file: !3, line: 4920, column: 2)
!13963 = !DILocation(line: 4923, column: 8, scope: !13961)
!13964 = !DILocation(line: 4923, column: 8, scope: !13962)
!13965 = !DILocation(line: 4924, column: 32, scope: !13961)
!13966 = !DILocation(line: 4924, column: 18, scope: !13961)
!13967 = !DILocation(line: 4924, column: 16, scope: !13961)
!13968 = !DILocation(line: 4924, column: 6, scope: !13961)
!13969 = !DILocation(line: 4925, column: 2, scope: !13962)
!13970 = !DILocation(line: 4926, column: 5, scope: !13941)
!13971 = !DILocation(line: 4928, column: 36, scope: !13937)
!13972 = !DILocation(line: 4928, column: 17, scope: !13937)
!13973 = !DILocation(line: 4928, column: 15, scope: !13937)
!13974 = !DILocation(line: 4931, column: 7, scope: !13975)
!13975 = distinct !DILexicalBlock(scope: !13852, file: !3, line: 4931, column: 7)
!13976 = !DILocation(line: 4931, column: 14, scope: !13975)
!13977 = !DILocation(line: 4931, column: 18, scope: !13975)
!13978 = !DILocation(line: 4931, column: 7, scope: !13852)
!13979 = !DILocation(line: 4932, column: 21, scope: !13975)
!13980 = !DILocation(line: 4932, column: 5, scope: !13975)
!13981 = !DILocation(line: 4934, column: 22, scope: !13975)
!13982 = !DILocation(line: 4934, column: 29, scope: !13975)
!13983 = !DILocation(line: 4934, column: 34, scope: !13975)
!13984 = !DILocation(line: 4934, column: 45, scope: !13975)
!13985 = !DILocation(line: 4934, column: 5, scope: !13975)
!13986 = !DILocation(line: 4937, column: 25, scope: !13852)
!13987 = !DILocation(line: 4937, column: 3, scope: !13852)
!13988 = !DILocation(line: 4937, column: 10, scope: !13852)
!13989 = !DILocation(line: 4937, column: 22, scope: !13852)
!13990 = !DILocation(line: 4938, column: 1, scope: !13852)
!13991 = distinct !DISubprogram(name: "output_constructor_bitfield", scope: !3, file: !3, line: 4944, type: !13992, scopeLine: 4945, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!13992 = !DISubroutineType(types: !13993)
!13993 = !{null, !13796, !9391}
!13994 = !DILocalVariable(name: "local", arg: 1, scope: !13991, file: !3, line: 4944, type: !13796)
!13995 = !DILocation(line: 4944, column: 46, scope: !13991)
!13996 = !DILocalVariable(name: "outer", arg: 2, scope: !13991, file: !3, line: 4944, type: !9391)
!13997 = !DILocation(line: 4944, column: 69, scope: !13991)
!13998 = !DILocalVariable(name: "ebitsize", scope: !13991, file: !3, line: 4947, type: !2757)
!13999 = !DILocation(line: 4947, column: 17, scope: !13991)
!14000 = !DILocation(line: 4948, column: 8, scope: !13991)
!14001 = !DILocation(line: 4948, column: 15, scope: !13991)
!14002 = !DILocation(line: 4949, column: 24, scope: !13991)
!14003 = !DILocation(line: 4949, column: 10, scope: !13991)
!14004 = !DILocation(line: 4950, column: 24, scope: !13991)
!14005 = !DILocation(line: 4950, column: 10, scope: !13991)
!14006 = !DILocalVariable(name: "relative_index", scope: !13991, file: !3, line: 4953, type: !2757)
!14007 = !DILocation(line: 4953, column: 17, scope: !13991)
!14008 = !DILocation(line: 4954, column: 9, scope: !13991)
!14009 = !DILocation(line: 4954, column: 16, scope: !13991)
!14010 = !DILocation(line: 4954, column: 8, scope: !13991)
!14011 = !DILocation(line: 4955, column: 11, scope: !13991)
!14012 = !DILocation(line: 4955, column: 18, scope: !13991)
!14013 = !DILocation(line: 4956, column: 21, scope: !13991)
!14014 = !DILocation(line: 4956, column: 28, scope: !13991)
!14015 = !DILocation(line: 4956, column: 7, scope: !13991)
!14016 = !DILocation(line: 4957, column: 23, scope: !13991)
!14017 = !DILocation(line: 4957, column: 30, scope: !13991)
!14018 = !DILocation(line: 4957, column: 9, scope: !13991)
!14019 = !DILocation(line: 4957, column: 7, scope: !13991)
!14020 = !DILocation(line: 4958, column: 6, scope: !13991)
!14021 = !DILocation(line: 4958, column: 13, scope: !13991)
!14022 = !DILocation(line: 4958, column: 33, scope: !13991)
!14023 = !DILocalVariable(name: "constructor_relative_ebitpos", scope: !13991, file: !3, line: 4963, type: !2757)
!14024 = !DILocation(line: 4963, column: 17, scope: !13991)
!14025 = !DILocation(line: 4964, column: 10, scope: !13991)
!14026 = !DILocation(line: 4964, column: 17, scope: !13991)
!14027 = !DILocation(line: 4965, column: 23, scope: !13991)
!14028 = !DILocation(line: 4965, column: 30, scope: !13991)
!14029 = !DILocation(line: 4965, column: 5, scope: !13991)
!14030 = !DILocation(line: 4966, column: 5, scope: !13991)
!14031 = !DILocation(line: 4966, column: 16, scope: !13991)
!14032 = !DILocation(line: 4966, column: 14, scope: !13991)
!14033 = !DILocalVariable(name: "byte_relative_ebitpos", scope: !13991, file: !3, line: 4970, type: !2757)
!14034 = !DILocation(line: 4970, column: 17, scope: !13991)
!14035 = !DILocation(line: 4971, column: 11, scope: !13991)
!14036 = !DILocation(line: 4971, column: 19, scope: !13991)
!14037 = !DILocation(line: 4971, column: 26, scope: !13991)
!14038 = !DILocation(line: 4971, column: 10, scope: !13991)
!14039 = !DILocation(line: 4971, column: 44, scope: !13991)
!14040 = !DILocation(line: 4971, column: 42, scope: !13991)
!14041 = !DILocalVariable(name: "next_offset", scope: !13991, file: !3, line: 4976, type: !2757)
!14042 = !DILocation(line: 4976, column: 17, scope: !13991)
!14043 = !DILocation(line: 4976, column: 31, scope: !13991)
!14044 = !DILocalVariable(name: "end_offset", scope: !13991, file: !3, line: 4977, type: !2757)
!14045 = !DILocation(line: 4977, column: 17, scope: !13991)
!14046 = !DILocation(line: 4977, column: 30, scope: !13991)
!14047 = !DILocation(line: 4977, column: 54, scope: !13991)
!14048 = !DILocation(line: 4977, column: 52, scope: !13991)
!14049 = !DILocation(line: 4979, column: 32, scope: !13991)
!14050 = !DILocation(line: 4979, column: 3, scope: !13991)
!14051 = !DILocation(line: 4979, column: 10, scope: !13991)
!14052 = !DILocation(line: 4979, column: 30, scope: !13991)
!14053 = !DILocation(line: 4981, column: 7, scope: !14054)
!14054 = distinct !DILexicalBlock(scope: !13991, file: !3, line: 4981, column: 7)
!14055 = !DILocation(line: 4981, column: 14, scope: !14054)
!14056 = !DILocation(line: 4981, column: 18, scope: !14054)
!14057 = !DILocation(line: 4981, column: 7, scope: !13991)
!14058 = !DILocation(line: 4982, column: 18, scope: !14054)
!14059 = !DILocation(line: 4982, column: 5, scope: !14054)
!14060 = !DILocation(line: 4982, column: 12, scope: !14054)
!14061 = !DILocation(line: 4982, column: 16, scope: !14054)
!14062 = !DILocation(line: 4984, column: 3, scope: !13991)
!14063 = !DILocation(line: 4984, column: 10, scope: !13991)
!14064 = !DILocation(line: 4984, column: 33, scope: !13991)
!14065 = !DILocation(line: 4985, column: 3, scope: !13991)
!14066 = !DILocation(line: 4985, column: 6, scope: !13991)
!14067 = !DILocation(line: 4985, column: 29, scope: !13991)
!14068 = !DILocation(line: 4986, column: 18, scope: !13991)
!14069 = !DILocation(line: 4986, column: 5, scope: !13991)
!14070 = !DILocation(line: 4986, column: 12, scope: !13991)
!14071 = !DILocation(line: 4986, column: 16, scope: !13991)
!14072 = distinct !{!14072, !14062, !14068}
!14073 = !DILocation(line: 4988, column: 7, scope: !14074)
!14074 = distinct !DILexicalBlock(scope: !13991, file: !3, line: 4988, column: 7)
!14075 = !DILocation(line: 4988, column: 30, scope: !14074)
!14076 = !DILocation(line: 4989, column: 7, scope: !14074)
!14077 = !DILocation(line: 4989, column: 10, scope: !14074)
!14078 = !DILocation(line: 4989, column: 33, scope: !14074)
!14079 = !DILocation(line: 4988, column: 7, scope: !13991)
!14080 = !DILocation(line: 4991, column: 54, scope: !14081)
!14081 = distinct !DILexicalBlock(scope: !14074, file: !3, line: 4990, column: 5)
!14082 = !DILocation(line: 4991, column: 7, scope: !14081)
!14083 = !DILocation(line: 4992, column: 7, scope: !14081)
!14084 = !DILocation(line: 4997, column: 7, scope: !14085)
!14085 = distinct !DILexicalBlock(scope: !13991, file: !3, line: 4997, column: 7)
!14086 = !DILocation(line: 4997, column: 19, scope: !14085)
!14087 = !DILocation(line: 4997, column: 38, scope: !14085)
!14088 = !DILocation(line: 4997, column: 45, scope: !14085)
!14089 = !DILocation(line: 4997, column: 35, scope: !14085)
!14090 = !DILocation(line: 4997, column: 7, scope: !13991)
!14091 = !DILocation(line: 5000, column: 11, scope: !14092)
!14092 = distinct !DILexicalBlock(scope: !14093, file: !3, line: 5000, column: 11)
!14093 = distinct !DILexicalBlock(scope: !14085, file: !3, line: 4998, column: 5)
!14094 = !DILocation(line: 5000, column: 18, scope: !14092)
!14095 = !DILocation(line: 5000, column: 11, scope: !14093)
!14096 = !DILocation(line: 5002, column: 22, scope: !14097)
!14097 = distinct !DILexicalBlock(scope: !14092, file: !3, line: 5001, column: 2)
!14098 = !DILocation(line: 5002, column: 4, scope: !14097)
!14099 = !DILocation(line: 5003, column: 4, scope: !14097)
!14100 = !DILocation(line: 5003, column: 11, scope: !14097)
!14101 = !DILocation(line: 5003, column: 22, scope: !14097)
!14102 = !DILocation(line: 5004, column: 4, scope: !14097)
!14103 = !DILocation(line: 5004, column: 11, scope: !14097)
!14104 = !DILocation(line: 5004, column: 30, scope: !14097)
!14105 = !DILocation(line: 5005, column: 2, scope: !14097)
!14106 = !DILocation(line: 5008, column: 11, scope: !14107)
!14107 = distinct !DILexicalBlock(scope: !14093, file: !3, line: 5008, column: 11)
!14108 = !DILocation(line: 5008, column: 23, scope: !14107)
!14109 = !DILocation(line: 5008, column: 42, scope: !14107)
!14110 = !DILocation(line: 5008, column: 49, scope: !14107)
!14111 = !DILocation(line: 5008, column: 39, scope: !14107)
!14112 = !DILocation(line: 5008, column: 11, scope: !14093)
!14113 = !DILocation(line: 5010, column: 4, scope: !14114)
!14114 = distinct !DILexicalBlock(scope: !14107, file: !3, line: 5009, column: 2)
!14115 = !DILocation(line: 5011, column: 20, scope: !14114)
!14116 = !DILocation(line: 5011, column: 32, scope: !14114)
!14117 = !DILocation(line: 5011, column: 50, scope: !14114)
!14118 = !DILocation(line: 5011, column: 57, scope: !14114)
!14119 = !DILocation(line: 5011, column: 48, scope: !14114)
!14120 = !DILocation(line: 5011, column: 4, scope: !14114)
!14121 = !DILocation(line: 5012, column: 25, scope: !14114)
!14122 = !DILocation(line: 5012, column: 37, scope: !14114)
!14123 = !DILocation(line: 5012, column: 4, scope: !14114)
!14124 = !DILocation(line: 5012, column: 11, scope: !14114)
!14125 = !DILocation(line: 5012, column: 23, scope: !14114)
!14126 = !DILocation(line: 5013, column: 2, scope: !14114)
!14127 = !DILocation(line: 5014, column: 5, scope: !14093)
!14128 = !DILocation(line: 5017, column: 8, scope: !14129)
!14129 = distinct !DILexicalBlock(scope: !13991, file: !3, line: 5017, column: 7)
!14130 = !DILocation(line: 5017, column: 15, scope: !14129)
!14131 = !DILocation(line: 5017, column: 7, scope: !13991)
!14132 = !DILocation(line: 5019, column: 7, scope: !14133)
!14133 = distinct !DILexicalBlock(scope: !14129, file: !3, line: 5018, column: 5)
!14134 = !DILocation(line: 5019, column: 14, scope: !14133)
!14135 = !DILocation(line: 5019, column: 19, scope: !14133)
!14136 = !DILocation(line: 5020, column: 11, scope: !14137)
!14137 = distinct !DILexicalBlock(scope: !14133, file: !3, line: 5020, column: 11)
!14138 = !DILocation(line: 5020, column: 20, scope: !14137)
!14139 = !DILocation(line: 5020, column: 11, scope: !14133)
!14140 = !DILocation(line: 5021, column: 2, scope: !14137)
!14141 = !DILocation(line: 5021, column: 9, scope: !14137)
!14142 = !DILocation(line: 5021, column: 28, scope: !14137)
!14143 = !DILocation(line: 5022, column: 5, scope: !14133)
!14144 = !DILocation(line: 5026, column: 7, scope: !14145)
!14145 = distinct !DILexicalBlock(scope: !13991, file: !3, line: 5026, column: 7)
!14146 = !DILocation(line: 5026, column: 30, scope: !14145)
!14147 = !DILocation(line: 5026, column: 7, scope: !13991)
!14148 = !DILocalVariable(name: "output_state", scope: !14149, file: !3, line: 5028, type: !9392)
!14149 = distinct !DILexicalBlock(scope: !14145, file: !3, line: 5027, column: 5)
!14150 = !DILocation(line: 5028, column: 22, scope: !14149)
!14151 = !DILocation(line: 5030, column: 33, scope: !14149)
!14152 = !DILocation(line: 5030, column: 45, scope: !14149)
!14153 = !DILocation(line: 5030, column: 20, scope: !14149)
!14154 = !DILocation(line: 5030, column: 31, scope: !14149)
!14155 = !DILocation(line: 5031, column: 27, scope: !14149)
!14156 = !DILocation(line: 5031, column: 34, scope: !14149)
!14157 = !DILocation(line: 5031, column: 20, scope: !14149)
!14158 = !DILocation(line: 5031, column: 25, scope: !14149)
!14159 = !DILocation(line: 5033, column: 27, scope: !14149)
!14160 = !DILocation(line: 5033, column: 34, scope: !14149)
!14161 = !DILocation(line: 5033, column: 7, scope: !14149)
!14162 = !DILocation(line: 5032, column: 7, scope: !14149)
!14163 = !DILocation(line: 5032, column: 14, scope: !14149)
!14164 = !DILocation(line: 5033, column: 4, scope: !14149)
!14165 = !DILocation(line: 5034, column: 34, scope: !14149)
!14166 = !DILocation(line: 5034, column: 7, scope: !14149)
!14167 = !DILocation(line: 5034, column: 14, scope: !14149)
!14168 = !DILocation(line: 5034, column: 19, scope: !14149)
!14169 = !DILocation(line: 5035, column: 7, scope: !14149)
!14170 = !DILocation(line: 5041, column: 3, scope: !13991)
!14171 = !DILocation(line: 5041, column: 10, scope: !13991)
!14172 = !DILocation(line: 5041, column: 24, scope: !13991)
!14173 = !DILocation(line: 5041, column: 22, scope: !13991)
!14174 = !DILocalVariable(name: "this_time", scope: !14175, file: !3, line: 5043, type: !2798)
!14175 = distinct !DILexicalBlock(scope: !13991, file: !3, line: 5042, column: 5)
!14176 = !DILocation(line: 5043, column: 11, scope: !14175)
!14177 = !DILocalVariable(name: "shift", scope: !14175, file: !3, line: 5044, type: !2798)
!14178 = !DILocation(line: 5044, column: 11, scope: !14175)
!14179 = !DILocalVariable(name: "value", scope: !14175, file: !3, line: 5045, type: !2757)
!14180 = !DILocation(line: 5045, column: 21, scope: !14175)
!14181 = !DILocalVariable(name: "next_byte", scope: !14175, file: !3, line: 5046, type: !2757)
!14182 = !DILocation(line: 5046, column: 21, scope: !14175)
!14183 = !DILocation(line: 5046, column: 33, scope: !14175)
!14184 = !DILocation(line: 5046, column: 45, scope: !14175)
!14185 = !DILocalVariable(name: "next_bit", scope: !14175, file: !3, line: 5047, type: !2757)
!14186 = !DILocation(line: 5047, column: 21, scope: !14175)
!14187 = !DILocation(line: 5047, column: 32, scope: !14175)
!14188 = !DILocation(line: 5047, column: 44, scope: !14175)
!14189 = !DILocation(line: 5051, column: 7, scope: !14175)
!14190 = !DILocation(line: 5051, column: 14, scope: !14175)
!14191 = !DILocation(line: 5051, column: 27, scope: !14175)
!14192 = !DILocation(line: 5051, column: 34, scope: !14175)
!14193 = !DILocation(line: 5051, column: 24, scope: !14175)
!14194 = !DILocation(line: 5053, column: 22, scope: !14195)
!14195 = distinct !DILexicalBlock(scope: !14175, file: !3, line: 5052, column: 2)
!14196 = !DILocation(line: 5053, column: 4, scope: !14195)
!14197 = !DILocation(line: 5054, column: 4, scope: !14195)
!14198 = !DILocation(line: 5054, column: 11, scope: !14195)
!14199 = !DILocation(line: 5054, column: 22, scope: !14195)
!14200 = !DILocation(line: 5055, column: 4, scope: !14195)
!14201 = !DILocation(line: 5055, column: 11, scope: !14195)
!14202 = !DILocation(line: 5055, column: 16, scope: !14195)
!14203 = distinct !{!14203, !14189, !14204}
!14204 = !DILocation(line: 5056, column: 2, scope: !14175)
!14205 = !DILocation(line: 5060, column: 19, scope: !14175)
!14206 = !DILocation(line: 5060, column: 17, scope: !14175)
!14207 = !DILocation(line: 5102, column: 12, scope: !14208)
!14208 = distinct !DILexicalBlock(scope: !14209, file: !3, line: 5097, column: 2)
!14209 = distinct !DILexicalBlock(scope: !14175, file: !3, line: 5062, column: 11)
!14210 = !DILocation(line: 5102, column: 26, scope: !14208)
!14211 = !DILocation(line: 5102, column: 24, scope: !14208)
!14212 = !DILocation(line: 5102, column: 10, scope: !14208)
!14213 = !DILocation(line: 5108, column: 8, scope: !14214)
!14214 = distinct !DILexicalBlock(scope: !14208, file: !3, line: 5108, column: 8)
!14215 = !DILocation(line: 5108, column: 14, scope: !14214)
!14216 = !DILocation(line: 5109, column: 8, scope: !14214)
!14217 = !DILocation(line: 5109, column: 11, scope: !14214)
!14218 = !DILocation(line: 5109, column: 19, scope: !14214)
!14219 = !DILocation(line: 5109, column: 17, scope: !14214)
!14220 = !DILocation(line: 5109, column: 29, scope: !14214)
!14221 = !DILocation(line: 5108, column: 8, scope: !14208)
!14222 = !DILocation(line: 5110, column: 44, scope: !14214)
!14223 = !DILocation(line: 5110, column: 42, scope: !14214)
!14224 = !DILocation(line: 5110, column: 16, scope: !14214)
!14225 = !DILocation(line: 5110, column: 6, scope: !14214)
!14226 = !DILocation(line: 5113, column: 8, scope: !14227)
!14227 = distinct !DILexicalBlock(scope: !14208, file: !3, line: 5113, column: 8)
!14228 = !DILocation(line: 5113, column: 14, scope: !14227)
!14229 = !DILocation(line: 5113, column: 8, scope: !14208)
!14230 = !DILocation(line: 5114, column: 14, scope: !14227)
!14231 = !DILocation(line: 5114, column: 12, scope: !14227)
!14232 = !DILocation(line: 5114, column: 6, scope: !14227)
!14233 = !DILocation(line: 5117, column: 8, scope: !14234)
!14234 = distinct !DILexicalBlock(scope: !14227, file: !3, line: 5116, column: 6)
!14235 = !DILocation(line: 5118, column: 16, scope: !14234)
!14236 = !DILocation(line: 5118, column: 14, scope: !14234)
!14237 = !DILocation(line: 5119, column: 14, scope: !14234)
!14238 = !DILocation(line: 5124, column: 22, scope: !14208)
!14239 = !DILocation(line: 5124, column: 31, scope: !14208)
!14240 = !DILocation(line: 5124, column: 28, scope: !14208)
!14241 = !DILocation(line: 5125, column: 33, scope: !14208)
!14242 = !DILocation(line: 5125, column: 43, scope: !14208)
!14243 = !DILocation(line: 5125, column: 29, scope: !14208)
!14244 = !DILocation(line: 5125, column: 49, scope: !14208)
!14245 = !DILocation(line: 5125, column: 7, scope: !14208)
!14246 = !DILocation(line: 5126, column: 9, scope: !14208)
!14247 = !DILocation(line: 5126, column: 6, scope: !14208)
!14248 = !DILocation(line: 5124, column: 4, scope: !14208)
!14249 = !DILocation(line: 5124, column: 11, scope: !14208)
!14250 = !DILocation(line: 5124, column: 16, scope: !14208)
!14251 = !DILocation(line: 5129, column: 22, scope: !14175)
!14252 = !DILocation(line: 5129, column: 19, scope: !14175)
!14253 = !DILocation(line: 5130, column: 7, scope: !14175)
!14254 = !DILocation(line: 5130, column: 14, scope: !14175)
!14255 = !DILocation(line: 5130, column: 33, scope: !14175)
!14256 = distinct !{!14256, !14170, !14257}
!14257 = !DILocation(line: 5131, column: 5, scope: !13991)
!14258 = !DILocation(line: 5132, column: 1, scope: !13991)
!14259 = distinct !DISubprogram(name: "array_size_for_constructor", scope: !3, file: !3, line: 4759, type: !14260, scopeLine: 4760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14260 = !DISubroutineType(types: !14261)
!14261 = !{!2755, !2702}
!14262 = !DILocalVariable(name: "val", arg: 1, scope: !14259, file: !3, line: 4759, type: !2702)
!14263 = !DILocation(line: 4759, column: 34, scope: !14259)
!14264 = !DILocalVariable(name: "max_index", scope: !14259, file: !3, line: 4761, type: !2702)
!14265 = !DILocation(line: 4761, column: 8, scope: !14259)
!14266 = !DILocalVariable(name: "i", scope: !14259, file: !3, line: 4761, type: !2702)
!14267 = !DILocation(line: 4761, column: 19, scope: !14259)
!14268 = !DILocalVariable(name: "cnt", scope: !14259, file: !3, line: 4762, type: !2755)
!14269 = !DILocation(line: 4762, column: 26, scope: !14259)
!14270 = !DILocalVariable(name: "index", scope: !14259, file: !3, line: 4763, type: !2702)
!14271 = !DILocation(line: 4763, column: 8, scope: !14259)
!14272 = !DILocalVariable(name: "value", scope: !14259, file: !3, line: 4763, type: !2702)
!14273 = !DILocation(line: 4763, column: 15, scope: !14259)
!14274 = !DILocalVariable(name: "tmp", scope: !14259, file: !3, line: 4763, type: !2702)
!14275 = !DILocation(line: 4763, column: 22, scope: !14259)
!14276 = !DILocation(line: 4768, column: 7, scope: !14277)
!14277 = distinct !DILexicalBlock(scope: !14259, file: !3, line: 4768, column: 7)
!14278 = !DILocation(line: 4768, column: 23, scope: !14277)
!14279 = !DILocation(line: 4768, column: 7, scope: !14259)
!14280 = !DILocation(line: 4769, column: 12, scope: !14277)
!14281 = !DILocation(line: 4769, column: 5, scope: !14277)
!14282 = !DILocation(line: 4771, column: 13, scope: !14259)
!14283 = !DILocation(line: 4772, column: 3, scope: !14284)
!14284 = distinct !DILexicalBlock(scope: !14259, file: !3, line: 4772, column: 3)
!14285 = !DILocation(line: 4772, column: 3, scope: !14286)
!14286 = distinct !DILexicalBlock(scope: !14284, file: !3, line: 4772, column: 3)
!14287 = !DILocation(line: 4774, column: 11, scope: !14288)
!14288 = distinct !DILexicalBlock(scope: !14289, file: !3, line: 4774, column: 11)
!14289 = distinct !DILexicalBlock(scope: !14286, file: !3, line: 4773, column: 5)
!14290 = !DILocation(line: 4774, column: 29, scope: !14288)
!14291 = !DILocation(line: 4774, column: 11, scope: !14289)
!14292 = !DILocation(line: 4775, column: 10, scope: !14288)
!14293 = !DILocation(line: 4775, column: 8, scope: !14288)
!14294 = !DILocation(line: 4775, column: 2, scope: !14288)
!14295 = !DILocation(line: 4776, column: 11, scope: !14296)
!14296 = distinct !DILexicalBlock(scope: !14289, file: !3, line: 4776, column: 11)
!14297 = !DILocation(line: 4776, column: 21, scope: !14296)
!14298 = !DILocation(line: 4776, column: 34, scope: !14296)
!14299 = !DILocation(line: 4776, column: 54, scope: !14296)
!14300 = !DILocation(line: 4776, column: 65, scope: !14296)
!14301 = !DILocation(line: 4776, column: 37, scope: !14296)
!14302 = !DILocation(line: 4776, column: 11, scope: !14289)
!14303 = !DILocation(line: 4777, column: 14, scope: !14296)
!14304 = !DILocation(line: 4777, column: 12, scope: !14296)
!14305 = !DILocation(line: 4777, column: 2, scope: !14296)
!14306 = !DILocation(line: 4778, column: 5, scope: !14289)
!14307 = distinct !{!14307, !14283, !14308}
!14308 = !DILocation(line: 4778, column: 5, scope: !14284)
!14309 = !DILocation(line: 4780, column: 7, scope: !14310)
!14310 = distinct !DILexicalBlock(scope: !14259, file: !3, line: 4780, column: 7)
!14311 = !DILocation(line: 4780, column: 17, scope: !14310)
!14312 = !DILocation(line: 4780, column: 7, scope: !14259)
!14313 = !DILocation(line: 4781, column: 5, scope: !14310)
!14314 = !DILocation(line: 4784, column: 9, scope: !14259)
!14315 = !DILocation(line: 4784, column: 7, scope: !14259)
!14316 = !DILocation(line: 4785, column: 7, scope: !14259)
!14317 = !DILocation(line: 4785, column: 5, scope: !14259)
!14318 = !DILocation(line: 4787, column: 7, scope: !14259)
!14319 = !DILocation(line: 4787, column: 5, scope: !14259)
!14320 = !DILocation(line: 4790, column: 7, scope: !14259)
!14321 = !DILocation(line: 4790, column: 5, scope: !14259)
!14322 = !DILocation(line: 4792, column: 24, scope: !14259)
!14323 = !DILocation(line: 4792, column: 10, scope: !14259)
!14324 = !DILocation(line: 4792, column: 3, scope: !14259)
!14325 = !DILocation(line: 4793, column: 1, scope: !14259)
!14326 = distinct !DISubprogram(name: "VEC_alias_pair_gc_reserve", scope: !151, file: !151, line: 198, type: !14327, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14327 = !DISubroutineType(types: !14328)
!14328 = !{!2798, !10227, !2798}
!14329 = !DILocalVariable(name: "vec_", arg: 1, scope: !14326, file: !151, line: 198, type: !10227)
!14330 = !DILocation(line: 198, column: 1, scope: !14326)
!14331 = !DILocalVariable(name: "alloc_", arg: 2, scope: !14326, file: !151, line: 198, type: !2798)
!14332 = !DILocalVariable(name: "extend", scope: !14326, file: !151, line: 198, type: !2798)
!14333 = !DILocation(line: 198, column: 1, scope: !14334)
!14334 = distinct !DILexicalBlock(scope: !14326, file: !151, line: 198, column: 1)
!14335 = distinct !DISubprogram(name: "VEC_alias_pair_base_quick_push", scope: !151, file: !151, line: 197, type: !14336, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14336 = !DISubroutineType(types: !14337)
!14337 = !{!9852, !9904, !10228}
!14338 = !DILocalVariable(name: "vec_", arg: 1, scope: !14335, file: !151, line: 197, type: !9904)
!14339 = !DILocation(line: 197, column: 1, scope: !14335)
!14340 = !DILocalVariable(name: "obj_", arg: 2, scope: !14335, file: !151, line: 197, type: !10228)
!14341 = !DILocalVariable(name: "slot_", scope: !14335, file: !151, line: 197, type: !9852)
!14342 = !DILocation(line: 197, column: 1, scope: !14343)
!14343 = distinct !DILexicalBlock(scope: !14335, file: !151, line: 197, column: 1)
!14344 = distinct !DISubprogram(name: "VEC_alias_pair_base_space", scope: !151, file: !151, line: 197, type: !14345, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14345 = !DISubroutineType(types: !14346)
!14346 = !{!2798, !9904, !2798}
!14347 = !DILocalVariable(name: "vec_", arg: 1, scope: !14344, file: !151, line: 197, type: !9904)
!14348 = !DILocation(line: 197, column: 1, scope: !14344)
!14349 = !DILocalVariable(name: "alloc_", arg: 2, scope: !14344, file: !151, line: 197, type: !2798)
!14350 = distinct !DISubprogram(name: "compare_constant", scope: !3, file: !3, line: 2991, type: !14351, scopeLine: 2992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14351 = !DISubroutineType(types: !14352)
!14352 = !{!2798, !7799, !7799}
!14353 = !DILocalVariable(name: "t1", arg: 1, scope: !14350, file: !3, line: 2991, type: !7799)
!14354 = !DILocation(line: 2991, column: 30, scope: !14350)
!14355 = !DILocalVariable(name: "t2", arg: 2, scope: !14350, file: !3, line: 2991, type: !7799)
!14356 = !DILocation(line: 2991, column: 45, scope: !14350)
!14357 = !DILocalVariable(name: "typecode", scope: !14350, file: !3, line: 2993, type: !183)
!14358 = !DILocation(line: 2993, column: 18, scope: !14350)
!14359 = !DILocation(line: 2995, column: 7, scope: !14360)
!14360 = distinct !DILexicalBlock(scope: !14350, file: !3, line: 2995, column: 7)
!14361 = !DILocation(line: 2995, column: 10, scope: !14360)
!14362 = !DILocation(line: 2995, column: 7, scope: !14350)
!14363 = !DILocation(line: 2996, column: 12, scope: !14360)
!14364 = !DILocation(line: 2996, column: 15, scope: !14360)
!14365 = !DILocation(line: 2996, column: 5, scope: !14360)
!14366 = !DILocation(line: 2997, column: 7, scope: !14367)
!14367 = distinct !DILexicalBlock(scope: !14350, file: !3, line: 2997, column: 7)
!14368 = !DILocation(line: 2997, column: 10, scope: !14367)
!14369 = !DILocation(line: 2997, column: 7, scope: !14350)
!14370 = !DILocation(line: 2998, column: 5, scope: !14367)
!14371 = !DILocation(line: 3000, column: 7, scope: !14372)
!14372 = distinct !DILexicalBlock(scope: !14350, file: !3, line: 3000, column: 7)
!14373 = !DILocation(line: 3000, column: 25, scope: !14372)
!14374 = !DILocation(line: 3000, column: 22, scope: !14372)
!14375 = !DILocation(line: 3000, column: 7, scope: !14350)
!14376 = !DILocation(line: 3001, column: 5, scope: !14372)
!14377 = !DILocation(line: 3003, column: 11, scope: !14350)
!14378 = !DILocation(line: 3003, column: 3, scope: !14350)
!14379 = !DILocation(line: 3007, column: 11, scope: !14380)
!14380 = distinct !DILexicalBlock(scope: !14381, file: !3, line: 3007, column: 11)
!14381 = distinct !DILexicalBlock(scope: !14350, file: !3, line: 3004, column: 5)
!14382 = !DILocation(line: 3007, column: 46, scope: !14380)
!14383 = !DILocation(line: 3007, column: 43, scope: !14380)
!14384 = !DILocation(line: 3007, column: 11, scope: !14381)
!14385 = !DILocation(line: 3008, column: 2, scope: !14380)
!14386 = !DILocation(line: 3009, column: 11, scope: !14387)
!14387 = distinct !DILexicalBlock(scope: !14381, file: !3, line: 3009, column: 11)
!14388 = !DILocation(line: 3009, column: 41, scope: !14387)
!14389 = !DILocation(line: 3009, column: 38, scope: !14387)
!14390 = !DILocation(line: 3009, column: 11, scope: !14381)
!14391 = !DILocation(line: 3010, column: 2, scope: !14387)
!14392 = !DILocation(line: 3011, column: 34, scope: !14381)
!14393 = !DILocation(line: 3011, column: 38, scope: !14381)
!14394 = !DILocation(line: 3011, column: 14, scope: !14381)
!14395 = !DILocation(line: 3011, column: 7, scope: !14381)
!14396 = !DILocation(line: 3015, column: 11, scope: !14397)
!14397 = distinct !DILexicalBlock(scope: !14381, file: !3, line: 3015, column: 11)
!14398 = !DILocation(line: 3015, column: 46, scope: !14397)
!14399 = !DILocation(line: 3015, column: 43, scope: !14397)
!14400 = !DILocation(line: 3015, column: 11, scope: !14381)
!14401 = !DILocation(line: 3016, column: 2, scope: !14397)
!14402 = !DILocation(line: 3018, column: 14, scope: !14381)
!14403 = !DILocation(line: 3018, column: 7, scope: !14381)
!14404 = !DILocation(line: 3022, column: 11, scope: !14405)
!14405 = distinct !DILexicalBlock(scope: !14381, file: !3, line: 3022, column: 11)
!14406 = !DILocation(line: 3022, column: 46, scope: !14405)
!14407 = !DILocation(line: 3022, column: 43, scope: !14405)
!14408 = !DILocation(line: 3022, column: 11, scope: !14381)
!14409 = !DILocation(line: 3023, column: 2, scope: !14405)
!14410 = !DILocation(line: 3025, column: 14, scope: !14381)
!14411 = !DILocation(line: 3025, column: 7, scope: !14381)
!14412 = !DILocation(line: 3028, column: 11, scope: !14413)
!14413 = distinct !DILexicalBlock(scope: !14381, file: !3, line: 3028, column: 11)
!14414 = !DILocation(line: 3028, column: 41, scope: !14413)
!14415 = !DILocation(line: 3028, column: 38, scope: !14413)
!14416 = !DILocation(line: 3028, column: 11, scope: !14381)
!14417 = !DILocation(line: 3029, column: 2, scope: !14413)
!14418 = !DILocation(line: 3031, column: 15, scope: !14381)
!14419 = !DILocation(line: 3031, column: 42, scope: !14381)
!14420 = !DILocation(line: 3031, column: 39, scope: !14381)
!14421 = !DILocation(line: 3032, column: 8, scope: !14381)
!14422 = !DILocation(line: 3032, column: 21, scope: !14381)
!14423 = !DILocation(line: 3032, column: 47, scope: !14381)
!14424 = !DILocation(line: 3033, column: 5, scope: !14381)
!14425 = !DILocation(line: 3032, column: 13, scope: !14381)
!14426 = !DILocation(line: 3032, column: 11, scope: !14381)
!14427 = !DILocation(line: 0, scope: !14381)
!14428 = !DILocation(line: 3031, column: 7, scope: !14381)
!14429 = !DILocation(line: 3036, column: 33, scope: !14381)
!14430 = !DILocation(line: 3036, column: 53, scope: !14381)
!14431 = !DILocation(line: 3036, column: 15, scope: !14381)
!14432 = !DILocation(line: 3037, column: 8, scope: !14381)
!14433 = !DILocation(line: 3037, column: 29, scope: !14381)
!14434 = !DILocation(line: 3037, column: 49, scope: !14381)
!14435 = !DILocation(line: 3037, column: 11, scope: !14381)
!14436 = !DILocation(line: 3036, column: 7, scope: !14381)
!14437 = !DILocalVariable(name: "v1", scope: !14438, file: !3, line: 3041, type: !3559)
!14438 = distinct !DILexicalBlock(scope: !14381, file: !3, line: 3040, column: 7)
!14439 = !DILocation(line: 3041, column: 28, scope: !14438)
!14440 = !DILocalVariable(name: "v2", scope: !14438, file: !3, line: 3041, type: !3559)
!14441 = !DILocation(line: 3041, column: 33, scope: !14438)
!14442 = !DILocalVariable(name: "idx", scope: !14438, file: !3, line: 3042, type: !2755)
!14443 = !DILocation(line: 3042, column: 25, scope: !14438)
!14444 = !DILocation(line: 3044, column: 13, scope: !14438)
!14445 = !DILocation(line: 3044, column: 11, scope: !14438)
!14446 = !DILocation(line: 3045, column: 6, scope: !14447)
!14447 = distinct !DILexicalBlock(scope: !14438, file: !3, line: 3045, column: 6)
!14448 = !DILocation(line: 3045, column: 18, scope: !14447)
!14449 = !DILocation(line: 3045, column: 15, scope: !14447)
!14450 = !DILocation(line: 3045, column: 6, scope: !14438)
!14451 = !DILocation(line: 3046, column: 4, scope: !14447)
!14452 = !DILocation(line: 3048, column: 6, scope: !14453)
!14453 = distinct !DILexicalBlock(scope: !14438, file: !3, line: 3048, column: 6)
!14454 = !DILocation(line: 3048, column: 15, scope: !14453)
!14455 = !DILocation(line: 3048, column: 6, scope: !14438)
!14456 = !DILocalVariable(name: "size_1", scope: !14457, file: !3, line: 3050, type: !2757)
!14457 = distinct !DILexicalBlock(scope: !14453, file: !3, line: 3049, column: 4)
!14458 = !DILocation(line: 3050, column: 20, scope: !14457)
!14459 = !DILocation(line: 3050, column: 48, scope: !14457)
!14460 = !DILocation(line: 3050, column: 29, scope: !14457)
!14461 = !DILocation(line: 3052, column: 10, scope: !14462)
!14462 = distinct !DILexicalBlock(scope: !14457, file: !3, line: 3052, column: 10)
!14463 = !DILocation(line: 3052, column: 40, scope: !14462)
!14464 = !DILocation(line: 3052, column: 37, scope: !14462)
!14465 = !DILocation(line: 3053, column: 3, scope: !14462)
!14466 = !DILocation(line: 3053, column: 6, scope: !14462)
!14467 = !DILocation(line: 3053, column: 13, scope: !14462)
!14468 = !DILocation(line: 3054, column: 3, scope: !14462)
!14469 = !DILocation(line: 3054, column: 6, scope: !14462)
!14470 = !DILocation(line: 3054, column: 35, scope: !14462)
!14471 = !DILocation(line: 3054, column: 16, scope: !14462)
!14472 = !DILocation(line: 3054, column: 13, scope: !14462)
!14473 = !DILocation(line: 3052, column: 10, scope: !14457)
!14474 = !DILocation(line: 3055, column: 8, scope: !14462)
!14475 = !DILocation(line: 3056, column: 4, scope: !14457)
!14476 = !DILocation(line: 3061, column: 10, scope: !14477)
!14477 = distinct !DILexicalBlock(scope: !14478, file: !3, line: 3061, column: 10)
!14478 = distinct !DILexicalBlock(scope: !14453, file: !3, line: 3058, column: 4)
!14479 = !DILocation(line: 3061, column: 28, scope: !14477)
!14480 = !DILocation(line: 3061, column: 25, scope: !14477)
!14481 = !DILocation(line: 3061, column: 10, scope: !14478)
!14482 = !DILocation(line: 3062, column: 8, scope: !14477)
!14483 = !DILocation(line: 3065, column: 7, scope: !14438)
!14484 = !DILocation(line: 3065, column: 5, scope: !14438)
!14485 = !DILocation(line: 3066, column: 7, scope: !14438)
!14486 = !DILocation(line: 3066, column: 5, scope: !14438)
!14487 = !DILocation(line: 3067, column: 6, scope: !14488)
!14488 = distinct !DILexicalBlock(scope: !14438, file: !3, line: 3067, column: 6)
!14489 = !DILocation(line: 3068, column: 9, scope: !14488)
!14490 = !DILocation(line: 3068, column: 6, scope: !14488)
!14491 = !DILocation(line: 3067, column: 6, scope: !14438)
!14492 = !DILocation(line: 3069, column: 6, scope: !14488)
!14493 = !DILocation(line: 3071, column: 11, scope: !14494)
!14494 = distinct !DILexicalBlock(scope: !14438, file: !3, line: 3071, column: 2)
!14495 = !DILocation(line: 3071, column: 7, scope: !14494)
!14496 = !DILocation(line: 3071, column: 16, scope: !14497)
!14497 = distinct !DILexicalBlock(scope: !14494, file: !3, line: 3071, column: 2)
!14498 = !DILocation(line: 3071, column: 22, scope: !14497)
!14499 = !DILocation(line: 3071, column: 20, scope: !14497)
!14500 = !DILocation(line: 3071, column: 2, scope: !14494)
!14501 = !DILocalVariable(name: "c1", scope: !14502, file: !3, line: 3073, type: !6391)
!14502 = distinct !DILexicalBlock(scope: !14497, file: !3, line: 3072, column: 4)
!14503 = !DILocation(line: 3073, column: 23, scope: !14502)
!14504 = !DILocation(line: 3073, column: 28, scope: !14502)
!14505 = !DILocalVariable(name: "c2", scope: !14502, file: !3, line: 3074, type: !6391)
!14506 = !DILocation(line: 3074, column: 23, scope: !14502)
!14507 = !DILocation(line: 3074, column: 28, scope: !14502)
!14508 = !DILocation(line: 3077, column: 29, scope: !14509)
!14509 = distinct !DILexicalBlock(scope: !14502, file: !3, line: 3077, column: 10)
!14510 = !DILocation(line: 3077, column: 33, scope: !14509)
!14511 = !DILocation(line: 3077, column: 40, scope: !14509)
!14512 = !DILocation(line: 3077, column: 44, scope: !14509)
!14513 = !DILocation(line: 3077, column: 11, scope: !14509)
!14514 = !DILocation(line: 3077, column: 10, scope: !14502)
!14515 = !DILocation(line: 3078, column: 8, scope: !14509)
!14516 = !DILocation(line: 3080, column: 10, scope: !14517)
!14517 = distinct !DILexicalBlock(scope: !14502, file: !3, line: 3080, column: 10)
!14518 = !DILocation(line: 3080, column: 19, scope: !14517)
!14519 = !DILocation(line: 3080, column: 10, scope: !14502)
!14520 = !DILocation(line: 3082, column: 26, scope: !14521)
!14521 = distinct !DILexicalBlock(scope: !14522, file: !3, line: 3082, column: 7)
!14522 = distinct !DILexicalBlock(scope: !14517, file: !3, line: 3081, column: 8)
!14523 = !DILocation(line: 3082, column: 30, scope: !14521)
!14524 = !DILocation(line: 3082, column: 37, scope: !14521)
!14525 = !DILocation(line: 3082, column: 41, scope: !14521)
!14526 = !DILocation(line: 3082, column: 8, scope: !14521)
!14527 = !DILocation(line: 3082, column: 7, scope: !14522)
!14528 = !DILocation(line: 3083, column: 5, scope: !14521)
!14529 = !DILocation(line: 3084, column: 8, scope: !14522)
!14530 = !DILocation(line: 3087, column: 7, scope: !14531)
!14531 = distinct !DILexicalBlock(scope: !14532, file: !3, line: 3087, column: 7)
!14532 = distinct !DILexicalBlock(scope: !14517, file: !3, line: 3086, column: 8)
!14533 = !DILocation(line: 3087, column: 11, scope: !14531)
!14534 = !DILocation(line: 3087, column: 20, scope: !14531)
!14535 = !DILocation(line: 3087, column: 24, scope: !14531)
!14536 = !DILocation(line: 3087, column: 17, scope: !14531)
!14537 = !DILocation(line: 3087, column: 7, scope: !14532)
!14538 = !DILocation(line: 3088, column: 5, scope: !14531)
!14539 = !DILocation(line: 3090, column: 4, scope: !14502)
!14540 = !DILocation(line: 3071, column: 56, scope: !14497)
!14541 = !DILocation(line: 3071, column: 2, scope: !14497)
!14542 = distinct !{!14542, !14500, !14543}
!14543 = !DILocation(line: 3090, column: 4, scope: !14494)
!14544 = !DILocation(line: 3092, column: 2, scope: !14438)
!14545 = !DILocalVariable(name: "value1", scope: !14546, file: !3, line: 3098, type: !7869)
!14546 = distinct !DILexicalBlock(scope: !14381, file: !3, line: 3097, column: 7)
!14547 = !DILocation(line: 3098, column: 20, scope: !14546)
!14548 = !DILocalVariable(name: "value2", scope: !14546, file: !3, line: 3098, type: !7869)
!14549 = !DILocation(line: 3098, column: 28, scope: !14546)
!14550 = !DILocation(line: 3100, column: 21, scope: !14546)
!14551 = !DILocation(line: 3100, column: 2, scope: !14546)
!14552 = !DILocation(line: 3101, column: 21, scope: !14546)
!14553 = !DILocation(line: 3101, column: 2, scope: !14546)
!14554 = !DILocation(line: 3102, column: 17, scope: !14546)
!14555 = !DILocation(line: 3102, column: 34, scope: !14546)
!14556 = !DILocation(line: 3102, column: 24, scope: !14546)
!14557 = !DILocation(line: 3103, column: 3, scope: !14546)
!14558 = !DILocation(line: 3103, column: 14, scope: !14546)
!14559 = !DILocation(line: 3103, column: 37, scope: !14546)
!14560 = !DILocation(line: 3103, column: 6, scope: !14546)
!14561 = !DILocation(line: 3103, column: 60, scope: !14546)
!14562 = !DILocation(line: 0, scope: !14546)
!14563 = !DILocation(line: 3102, column: 2, scope: !14546)
!14564 = !DILocation(line: 3110, column: 33, scope: !14381)
!14565 = !DILocation(line: 3110, column: 55, scope: !14381)
!14566 = !DILocation(line: 3110, column: 15, scope: !14381)
!14567 = !DILocation(line: 3111, column: 8, scope: !14381)
!14568 = !DILocation(line: 3111, column: 28, scope: !14381)
!14569 = !DILocation(line: 3111, column: 50, scope: !14381)
!14570 = !DILocation(line: 3111, column: 11, scope: !14381)
!14571 = !DILocation(line: 3110, column: 7, scope: !14381)
!14572 = !DILocation(line: 3115, column: 32, scope: !14381)
!14573 = !DILocation(line: 3115, column: 54, scope: !14381)
!14574 = !DILocation(line: 3115, column: 14, scope: !14381)
!14575 = !DILocation(line: 3115, column: 7, scope: !14381)
!14576 = !DILocation(line: 3118, column: 7, scope: !14381)
!14577 = !DILocation(line: 3122, column: 1, scope: !14350)
!14578 = distinct !DISubprogram(name: "asm_output_aligned_bss", scope: !3, file: !3, line: 785, type: !14579, scopeLine: 788, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14579 = !DISubroutineType(types: !14580)
!14580 = !{null, !6016, !2702, !2692, !2755, !2798}
!14581 = !DILocalVariable(name: "file", arg: 1, scope: !14578, file: !3, line: 785, type: !6016)
!14582 = !DILocation(line: 785, column: 31, scope: !14578)
!14583 = !DILocalVariable(name: "decl", arg: 2, scope: !14578, file: !3, line: 785, type: !2702)
!14584 = !DILocation(line: 785, column: 42, scope: !14578)
!14585 = !DILocalVariable(name: "name", arg: 3, scope: !14578, file: !3, line: 786, type: !2692)
!14586 = !DILocation(line: 786, column: 16, scope: !14578)
!14587 = !DILocalVariable(name: "size", arg: 4, scope: !14578, file: !3, line: 786, type: !2755)
!14588 = !DILocation(line: 786, column: 45, scope: !14578)
!14589 = !DILocalVariable(name: "align", arg: 5, scope: !14578, file: !3, line: 787, type: !2798)
!14590 = !DILocation(line: 787, column: 8, scope: !14578)
!14591 = !DILocation(line: 789, column: 22, scope: !14578)
!14592 = !DILocation(line: 789, column: 3, scope: !14578)
!14593 = !DILocation(line: 790, column: 3, scope: !14594)
!14594 = distinct !DILexicalBlock(scope: !14578, file: !3, line: 790, column: 3)
!14595 = !DILocation(line: 790, column: 3, scope: !14578)
!14596 = !DILocation(line: 792, column: 33, scope: !14578)
!14597 = !DILocation(line: 792, column: 31, scope: !14578)
!14598 = !DILocation(line: 793, column: 3, scope: !14578)
!14599 = !DILocalVariable(name: "size", scope: !14600, file: !3, line: 793, type: !2757)
!14600 = distinct !DILexicalBlock(scope: !14578, file: !3, line: 793, column: 3)
!14601 = !DILocation(line: 793, column: 3, scope: !14600)
!14602 = !DILocation(line: 793, column: 3, scope: !14603)
!14603 = distinct !DILexicalBlock(scope: !14600, file: !3, line: 793, column: 3)
!14604 = !DILocation(line: 793, column: 3, scope: !14605)
!14605 = distinct !DILexicalBlock(scope: !14603, file: !3, line: 793, column: 3)
!14606 = !DILocation(line: 793, column: 3, scope: !14607)
!14607 = distinct !DILexicalBlock(scope: !14600, file: !3, line: 793, column: 3)
!14608 = !DILocation(line: 793, column: 3, scope: !14609)
!14609 = distinct !DILexicalBlock(scope: !14607, file: !3, line: 793, column: 3)
!14610 = !DILocalVariable(name: "size_", scope: !14611, file: !3, line: 793, type: !2757)
!14611 = distinct !DILexicalBlock(scope: !14609, file: !3, line: 793, column: 3)
!14612 = !DILocation(line: 793, column: 3, scope: !14611)
!14613 = !DILocation(line: 793, column: 3, scope: !14614)
!14614 = distinct !DILexicalBlock(scope: !14600, file: !3, line: 793, column: 3)
!14615 = !DILocation(line: 798, column: 3, scope: !14578)
!14616 = !DILocation(line: 799, column: 1, scope: !14578)
!14617 = distinct !DISubprogram(name: "compute_reloc_for_rtx_1", scope: !3, file: !3, line: 6489, type: !13221, scopeLine: 6490, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14618 = !DILocalVariable(name: "xp", arg: 1, scope: !14617, file: !3, line: 6489, type: !11876)
!14619 = !DILocation(line: 6489, column: 31, scope: !14617)
!14620 = !DILocalVariable(name: "data", arg: 2, scope: !14617, file: !3, line: 6489, type: !2691)
!14621 = !DILocation(line: 6489, column: 41, scope: !14617)
!14622 = !DILocalVariable(name: "preloc", scope: !14617, file: !3, line: 6491, type: !3830)
!14623 = !DILocation(line: 6491, column: 8, scope: !14617)
!14624 = !DILocation(line: 6491, column: 25, scope: !14617)
!14625 = !DILocation(line: 6491, column: 17, scope: !14617)
!14626 = !DILocalVariable(name: "x", scope: !14617, file: !3, line: 6492, type: !2876)
!14627 = !DILocation(line: 6492, column: 7, scope: !14617)
!14628 = !DILocation(line: 6492, column: 12, scope: !14617)
!14629 = !DILocation(line: 6492, column: 11, scope: !14617)
!14630 = !DILocation(line: 6494, column: 11, scope: !14617)
!14631 = !DILocation(line: 6494, column: 3, scope: !14617)
!14632 = !DILocation(line: 6497, column: 18, scope: !14633)
!14633 = distinct !DILexicalBlock(scope: !14617, file: !3, line: 6495, column: 5)
!14634 = !DILocation(line: 6497, column: 8, scope: !14633)
!14635 = !DILocation(line: 6497, column: 15, scope: !14633)
!14636 = !DILocation(line: 6498, column: 7, scope: !14633)
!14637 = !DILocation(line: 6500, column: 8, scope: !14633)
!14638 = !DILocation(line: 6500, column: 15, scope: !14633)
!14639 = !DILocation(line: 6501, column: 7, scope: !14633)
!14640 = !DILocation(line: 6503, column: 7, scope: !14633)
!14641 = !DILocation(line: 6506, column: 3, scope: !14617)
!14642 = distinct !DISubprogram(name: "VEC_rtx_gc_reserve", scope: !598, file: !598, line: 202, type: !14643, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14643 = !DISubroutineType(types: !14644)
!14644 = !{!2798, !11877, !2798}
!14645 = !DILocalVariable(name: "vec_", arg: 1, scope: !14642, file: !598, line: 202, type: !11877)
!14646 = !DILocation(line: 202, column: 1, scope: !14642)
!14647 = !DILocalVariable(name: "alloc_", arg: 2, scope: !14642, file: !598, line: 202, type: !2798)
!14648 = !DILocalVariable(name: "extend", scope: !14642, file: !598, line: 202, type: !2798)
!14649 = !DILocation(line: 202, column: 1, scope: !14650)
!14650 = distinct !DILexicalBlock(scope: !14642, file: !598, line: 202, column: 1)
!14651 = distinct !DISubprogram(name: "VEC_rtx_base_quick_push", scope: !598, file: !598, line: 200, type: !14652, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14652 = !DISubroutineType(types: !14653)
!14653 = !{!11876, !14654, !2876}
!14654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3153, size: 64)
!14655 = !DILocalVariable(name: "vec_", arg: 1, scope: !14651, file: !598, line: 200, type: !14654)
!14656 = !DILocation(line: 200, column: 1, scope: !14651)
!14657 = !DILocalVariable(name: "obj_", arg: 2, scope: !14651, file: !598, line: 200, type: !2876)
!14658 = !DILocalVariable(name: "slot_", scope: !14651, file: !598, line: 200, type: !11876)
!14659 = distinct !DISubprogram(name: "VEC_rtx_base_space", scope: !598, file: !598, line: 200, type: !14660, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14660 = !DISubroutineType(types: !14661)
!14661 = !{!2798, !14654, !2798}
!14662 = !DILocalVariable(name: "vec_", arg: 1, scope: !14659, file: !598, line: 200, type: !14654)
!14663 = !DILocation(line: 200, column: 1, scope: !14659)
!14664 = !DILocalVariable(name: "alloc_", arg: 2, scope: !14659, file: !598, line: 200, type: !2798)
!14665 = distinct !DISubprogram(name: "VEC_rtx_base_quick_insert", scope: !598, file: !598, line: 200, type: !14666, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14666 = !DISubroutineType(types: !14667)
!14667 = !{!11876, !14654, !7, !2876}
!14668 = !DILocalVariable(name: "vec_", arg: 1, scope: !14665, file: !598, line: 200, type: !14654)
!14669 = !DILocation(line: 200, column: 1, scope: !14665)
!14670 = !DILocalVariable(name: "ix_", arg: 2, scope: !14665, file: !598, line: 200, type: !7)
!14671 = !DILocalVariable(name: "obj_", arg: 3, scope: !14665, file: !598, line: 200, type: !2876)
!14672 = !DILocalVariable(name: "slot_", scope: !14665, file: !598, line: 200, type: !11876)
!14673 = distinct !DISubprogram(name: "output_object_block", scope: !3, file: !3, line: 6980, type: !14674, scopeLine: 6981, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14674 = !DISubroutineType(types: !14675)
!14675 = !{null, !3105}
!14676 = !DILocalVariable(name: "block", arg: 1, scope: !14673, file: !3, line: 6980, type: !3105)
!14677 = !DILocation(line: 6980, column: 43, scope: !14673)
!14678 = !DILocalVariable(name: "desc", scope: !14673, file: !3, line: 6982, type: !3083)
!14679 = !DILocation(line: 6982, column: 35, scope: !14673)
!14680 = !DILocalVariable(name: "i", scope: !14673, file: !3, line: 6983, type: !7)
!14681 = !DILocation(line: 6983, column: 16, scope: !14673)
!14682 = !DILocalVariable(name: "offset", scope: !14673, file: !3, line: 6984, type: !2757)
!14683 = !DILocation(line: 6984, column: 17, scope: !14673)
!14684 = !DILocalVariable(name: "decl", scope: !14673, file: !3, line: 6985, type: !2702)
!14685 = !DILocation(line: 6985, column: 8, scope: !14673)
!14686 = !DILocalVariable(name: "symbol", scope: !14673, file: !3, line: 6986, type: !2876)
!14687 = !DILocation(line: 6986, column: 7, scope: !14673)
!14688 = !DILocation(line: 6988, column: 7, scope: !14689)
!14689 = distinct !DILexicalBlock(scope: !14673, file: !3, line: 6988, column: 7)
!14690 = !DILocation(line: 6988, column: 14, scope: !14689)
!14691 = !DILocation(line: 6988, column: 22, scope: !14689)
!14692 = !DILocation(line: 6988, column: 7, scope: !14673)
!14693 = !DILocation(line: 6989, column: 5, scope: !14689)
!14694 = !DILocation(line: 6993, column: 22, scope: !14673)
!14695 = !DILocation(line: 6993, column: 29, scope: !14673)
!14696 = !DILocation(line: 6993, column: 3, scope: !14673)
!14697 = !DILocation(line: 6994, column: 19, scope: !14673)
!14698 = !DILocation(line: 6994, column: 26, scope: !14673)
!14699 = !DILocation(line: 6994, column: 3, scope: !14673)
!14700 = !DILocation(line: 6998, column: 10, scope: !14701)
!14701 = distinct !DILexicalBlock(scope: !14673, file: !3, line: 6998, column: 3)
!14702 = !DILocation(line: 6998, column: 8, scope: !14701)
!14703 = !DILocation(line: 6998, column: 15, scope: !14704)
!14704 = distinct !DILexicalBlock(scope: !14701, file: !3, line: 6998, column: 3)
!14705 = !DILocation(line: 6998, column: 3, scope: !14701)
!14706 = !DILocation(line: 6999, column: 21, scope: !14704)
!14707 = !DILocation(line: 6999, column: 36, scope: !14704)
!14708 = !DILocation(line: 6999, column: 5, scope: !14704)
!14709 = !DILocation(line: 6998, column: 62, scope: !14704)
!14710 = !DILocation(line: 6998, column: 3, scope: !14704)
!14711 = distinct !{!14711, !14705, !14712}
!14712 = !DILocation(line: 6999, column: 42, scope: !14701)
!14713 = !DILocation(line: 7002, column: 10, scope: !14673)
!14714 = !DILocation(line: 7003, column: 10, scope: !14715)
!14715 = distinct !DILexicalBlock(scope: !14673, file: !3, line: 7003, column: 3)
!14716 = !DILocation(line: 7003, column: 8, scope: !14715)
!14717 = !DILocation(line: 7003, column: 15, scope: !14718)
!14718 = distinct !DILexicalBlock(scope: !14715, file: !3, line: 7003, column: 3)
!14719 = !DILocation(line: 7003, column: 3, scope: !14715)
!14720 = !DILocation(line: 7006, column: 23, scope: !14721)
!14721 = distinct !DILexicalBlock(scope: !14718, file: !3, line: 7004, column: 5)
!14722 = !DILocation(line: 7006, column: 58, scope: !14721)
!14723 = !DILocation(line: 7006, column: 56, scope: !14721)
!14724 = !DILocation(line: 7006, column: 7, scope: !14721)
!14725 = !DILocation(line: 7007, column: 16, scope: !14721)
!14726 = !DILocation(line: 7007, column: 14, scope: !14721)
!14727 = !DILocation(line: 7008, column: 11, scope: !14728)
!14728 = distinct !DILexicalBlock(scope: !14721, file: !3, line: 7008, column: 11)
!14729 = !DILocation(line: 7008, column: 11, scope: !14721)
!14730 = !DILocation(line: 7010, column: 11, scope: !14731)
!14731 = distinct !DILexicalBlock(scope: !14728, file: !3, line: 7009, column: 2)
!14732 = !DILocation(line: 7010, column: 9, scope: !14731)
!14733 = !DILocation(line: 7011, column: 28, scope: !14731)
!14734 = !DILocation(line: 7011, column: 4, scope: !14731)
!14735 = !DILocation(line: 7012, column: 14, scope: !14731)
!14736 = !DILocation(line: 7012, column: 11, scope: !14731)
!14737 = !DILocation(line: 7013, column: 2, scope: !14731)
!14738 = !DILocation(line: 7014, column: 16, scope: !14739)
!14739 = distinct !DILexicalBlock(scope: !14728, file: !3, line: 7014, column: 16)
!14740 = !DILocation(line: 7014, column: 16, scope: !14728)
!14741 = !DILocation(line: 7016, column: 11, scope: !14742)
!14742 = distinct !DILexicalBlock(scope: !14739, file: !3, line: 7015, column: 2)
!14743 = !DILocation(line: 7016, column: 9, scope: !14742)
!14744 = !DILocation(line: 7017, column: 32, scope: !14742)
!14745 = !DILocation(line: 7017, column: 38, scope: !14742)
!14746 = !DILocation(line: 7018, column: 35, scope: !14742)
!14747 = !DILocation(line: 7018, column: 11, scope: !14742)
!14748 = !DILocation(line: 7017, column: 4, scope: !14742)
!14749 = !DILocation(line: 7019, column: 33, scope: !14742)
!14750 = !DILocation(line: 7019, column: 14, scope: !14742)
!14751 = !DILocation(line: 7019, column: 11, scope: !14742)
!14752 = !DILocation(line: 7020, column: 2, scope: !14742)
!14753 = !DILocation(line: 7023, column: 11, scope: !14754)
!14754 = distinct !DILexicalBlock(scope: !14739, file: !3, line: 7022, column: 2)
!14755 = !DILocation(line: 7023, column: 9, scope: !14754)
!14756 = !DILocation(line: 7024, column: 32, scope: !14754)
!14757 = !DILocation(line: 7024, column: 38, scope: !14754)
!14758 = !DILocation(line: 7024, column: 4, scope: !14754)
!14759 = !DILocation(line: 7025, column: 28, scope: !14754)
!14760 = !DILocation(line: 7025, column: 14, scope: !14754)
!14761 = !DILocation(line: 7025, column: 11, scope: !14754)
!14762 = !DILocation(line: 7027, column: 5, scope: !14721)
!14763 = !DILocation(line: 7003, column: 62, scope: !14718)
!14764 = !DILocation(line: 7003, column: 3, scope: !14718)
!14765 = distinct !{!14765, !14719, !14766}
!14766 = !DILocation(line: 7027, column: 5, scope: !14715)
!14767 = !DILocation(line: 7028, column: 1, scope: !14673)
!14768 = distinct !DISubprogram(name: "VEC_rtx_base_iterate", scope: !598, file: !598, line: 200, type: !14769, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3837)
!14769 = !DISubroutineType(types: !14770)
!14770 = !{!2798, !12052, !7, !11876}
!14771 = !DILocalVariable(name: "vec_", arg: 1, scope: !14768, file: !598, line: 200, type: !12052)
!14772 = !DILocation(line: 200, column: 1, scope: !14768)
!14773 = !DILocalVariable(name: "ix_", arg: 2, scope: !14768, file: !598, line: 200, type: !7)
!14774 = !DILocalVariable(name: "ptr", arg: 3, scope: !14768, file: !598, line: 200, type: !11876)
!14775 = !DILocation(line: 200, column: 1, scope: !14776)
!14776 = distinct !DILexicalBlock(scope: !14768, file: !598, line: 200, column: 1)
!14777 = !DILocation(line: 200, column: 1, scope: !14778)
!14778 = distinct !DILexicalBlock(scope: !14776, file: !598, line: 200, column: 1)
!14779 = !DILocation(line: 200, column: 1, scope: !14780)
!14780 = distinct !DILexicalBlock(scope: !14776, file: !598, line: 200, column: 1)
